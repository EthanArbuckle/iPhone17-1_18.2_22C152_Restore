uint64_t sub_1005F934C(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v30;

  v14 = a9;
  if (a1)
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091F858);
    swift_bridgeObjectRetain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      *(_DWORD *)v18 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "UpdateAccountWithACAccount: Migration state fetched {accountID: %{public}s}", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v14 = a9;
  }
  else
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    v20 = type metadata accessor for Logger();
    sub_10008E2DC(v20, (uint64_t)qword_10091F858);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      *(_DWORD *)v23 = 136315394;
      if (a2)
      {
        swift_getErrorValue();
        v24 = Error.localizedDescription.getter();
        v26 = v25;
      }
      else
      {
        v26 = 0xE300000000000000;
        v24 = 7104878;
      }
      sub_1000C51B8(v24, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v23 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "UpdateAccountWithACAccount: Failed to fetch migration status. Assume the account is un-migrated {error: %s, accountID: %{public}s}", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v14 = a9;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      swift_bridgeObjectRelease_n();
    }
  }
  return sub_1005F6DD4(a6, a7, 0, a8 & 1, v14, a10);
}

void sub_1005F9778(char a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char a6, void (*a7)(void, void, void *, void), uint64_t a8)
{
  if ((a1 & 1) == 0)
  {
    char v27 = a6;
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_10091F858);
    id v14 = a3;
    swift_errorRetain();
    id v15 = v14;
    swift_errorRetain();
    v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v24 = v16;
      v25 = a7;
      v26 = a5;
      uint64_t v18 = swift_slowAlloc();
      v19 = (void *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 138543618;
      id v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v19 = v15;

      *(_WORD *)(v18 + 12) = 2080;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v21 = Error.localizedDescription.getter();
        unint64_t v23 = v22;
      }
      else
      {
        unint64_t v23 = 0xE300000000000000;
        uint64_t v21 = 7104878;
      }
      a7 = v25;
      sub_1000C51B8(v21, v23, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v17, "UpdateAccountWithACAccount: Error updating migration flags for ACAccount {acAccount: %{public}@, error: %s}", (uint8_t *)v18, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a5 = v26;
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    a6 = v27;
  }
  sub_1005F6DD4(a3, a5, 0, a6 & 1, a7, a8);
}

uint64_t sub_1005F9A50(char a1, char a2, uint64_t a3, uint64_t a4, Swift::Int a5, unint64_t a6, uint64_t a7, void (*a8)(void, void, void, void))
{
  char v15 = a1;
  if (a1 & 1) != 0 || (a2)
  {
    swift_beginAccess();
    if (*(unsigned char *)(a4 + 16) == 1)
    {
      char v39 = v15;
      v16 = self;
      id v17 = [v16 daemonUserDefaults];
      id v18 = [v17 acAccountIdentifiersToMigrateInactivatedCalDavData];

      if (v18)
      {
        v19 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        v19 = _swiftEmptyArrayStorage;
      }
      uint64_t v20 = sub_10012674C((uint64_t)v19);
      swift_bridgeObjectRelease();
      uint64_t v42 = v20;
      swift_bridgeObjectRetain();
      sub_10031DC68((Swift::Int *)&v41, a5, a6);
      swift_bridgeObjectRelease();
      id v21 = [v16 daemonUserDefaults];
      sub_100209D8C(v42);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      [v21 setAcAccountIdentifiersToMigrateInactivatedCalDavData:isa];

      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E2DC(v23, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain_n();
      v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = a8;
        char v27 = (uint8_t *)swift_slowAlloc();
        v41 = (void *)swift_slowAlloc();
        *(_DWORD *)char v27 = 136446210;
        swift_bridgeObjectRetain();
        sub_1000C51B8(a5, a6, (uint64_t *)&v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "UpdateAccountWithACAccount: inserting to daemonUserDefaults.acAccountIdentifiersToMigrateInactivatedCalDavData {displayAccountID: %{public}s}", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a8 = v26;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      char v15 = v39;
    }
  }
  int64_t v28 = *(void *)(a7 + 16);
  v29 = _swiftEmptyArrayStorage;
  if (v28)
  {
    char v40 = v15;
    uint64_t v38 = a3;
    v30 = a8;
    v41 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1001DE058(0, v28, 0);
    v29 = v41;
    v31 = (uint64_t *)(a7 + 40);
    do
    {
      uint64_t v33 = *(v31 - 1);
      uint64_t v32 = *v31;
      v41 = v29;
      unint64_t v35 = v29[2];
      unint64_t v34 = v29[3];
      swift_bridgeObjectRetain();
      if (v35 >= v34 >> 1)
      {
        sub_1001DE058(v34 > 1, v35 + 1, 1);
        v29 = v41;
      }
      v31 += 6;
      v29[2] = v35 + 1;
      v36 = &v29[2 * v35];
      v36[4] = v33;
      v36[5] = v32;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
    a8 = v30;
    a3 = v38;
    char v15 = v40;
  }
  a8(v15 & 1, a2 & 1, v29, a3);
  return swift_bridgeObjectRelease();
}

id sub_1005F9E74()
{
  if (!swift_unknownObjectWeakLoadStrong())
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10091F858);
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to create store because the XPC daemon is gone", v20, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 24);
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong || (v3 = Strong, unsigned int v4 = [Strong supportsAccountUtils], v3, !v4))
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_10091F858);
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to create store because storeController does not support accountUtils", v16, 2u);
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
    }
    return 0;
  }
  v5 = (objc_class *)type metadata accessor for RDDaemonController();
  long long v22 = xmmword_100794980;
  uint64_t v24 = 0;
  *(void *)&long long v25 = 0;
  uint64_t v23 = 0;
  *(void *)((char *)&v25 + 6) = 0;
  v6 = *(void **)(v0 + 40);
  uint64_t ObjectType = swift_getObjectType();
  id v8 = v6;
  uint64_t v9 = swift_unknownObjectRetain();
  id v10 = sub_10054145C(v9, (uint64_t)&v22, (uint64_t)v6, v5, ObjectType, v1);
  id v11 = objc_allocWithZone((Class)REMStore);
  id v12 = [v11 initWithDaemonController:v10 v22, v23, v24, v25];
  swift_unknownObjectRelease();

  return v12;
}

void sub_1005FA0FC(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = *a1;
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  uint64_t v22 = 0x203A656D616E3CLL;
  unint64_t v23 = 0xE700000000000000;
  id v9 = [v8 name];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = v11;

  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x6E756F636361202CLL;
  v14._object = (void *)0xED0000203A444974;
  String.append(_:)(v14);
  id v15 = [v8 objectID];
  id v16 = [v15 uuid];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10035D6D0((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v18._countAndFlagsBits = 0x203A65707974202CLL;
  v18._object = (void *)0xE800000000000000;
  String.append(_:)(v18);
  id v24 = [v8 type];
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 62;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  unint64_t v21 = v23;
  *a2 = v22;
  a2[1] = v21;
}

uint64_t sub_1005FA38C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10091F858);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Orphaned accounts removed", v7, 2u);
    swift_slowDealloc();
  }

  return a2(1, a1);
}

void sub_1005FA48C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_t v24 = (os_log_t)type metadata accessor for DispatchQoS();
  Class isa = v24[-1].isa;
  __chkstk_darwin(v24);
  id v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    Swift::String v14 = (void *)Strong;
    if (qword_1009070C0 != -1) {
      swift_once();
    }
    v23[1] = qword_100942060;
    id v15 = (void *)swift_allocObject();
    v15[2] = a1;
    v15[3] = v14;
    v15[4] = a2;
    v15[5] = a3;
    aBlock[4] = sub_100601EE0;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008CD160;
    id v16 = _Block_copy(aBlock);
    id v17 = a1;
    id v18 = v14;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    long long v25 = _swiftEmptyArrayStorage;
    sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*((void (**)(char *, os_log_t))isa + 1))(v12, v24);
    swift_release();
  }
  else
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E2DC(v19, (uint64_t)qword_10091F858);
    os_log_t v24 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v20, "RDAccountUtils: _initializeAllAccounts: Missing store controller.", v21, 2u);
      swift_slowDealloc();
    }
    os_log_t v22 = v24;
  }
}

uint64_t sub_1005FA890(void *a1, void *a2, uint64_t (*a3)(void))
{
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10091F858);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDAccountUtils: _initializeAllAccounts: Calling RDAccountInitializer.initializeAllAccounts()", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = self;
  id v11 = a1;
  id v12 = a2;
  id v13 = [v10 sharedInstance];
  id v14 = [self daemonUserDefaults];
  id v15 = (objc_class *)type metadata accessor for RDAccountInitializer();
  id v16 = (char *)objc_allocWithZone(v15);
  *(void *)&v16[OBJC_IVAR____TtC7remindd20RDAccountInitializer_store] = v11;
  *(void *)&v16[OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController] = v12;
  *(void *)&v16[OBJC_IVAR____TtC7remindd20RDAccountInitializer_appleAccountUtilities] = v13;
  *(void *)&v16[OBJC_IVAR____TtC7remindd20RDAccountInitializer_userDefaults] = v14;
  v22.receiver = v16;
  v22.super_class = v15;
  id v17 = [super init];
  sub_100419D54();

  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDAccountUtils: _initializeAllAccounts: RDAccountInitializer.initializeAllAccounts() finished, calling completion.", v20, 2u);
    swift_slowDealloc();
  }

  return a3();
}

void sub_1005FAAE0()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_10091F858);
    oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "RDAccountUtils: Missing store controller, can't start ICCC.", v9, 2u);
      swift_slowDealloc();
    }
    goto LABEL_12;
  }
  uint64_t v1 = Strong;
  v2 = [Strong cloudContext];
  if (v2)
  {
    oslog = v2;
    [v2 setDisabled:0];
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091F858);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDAccountUtils: Enabled ICCC", v6, 2u);
      swift_slowDealloc();
    }

LABEL_12:
    uint64_t v10 = oslog;
    goto LABEL_18;
  }
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_10091F858);
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDAccountUtils: Missing ICCC, can't start ICCC.", v14, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = v1;
LABEL_18:
}

void sub_1005FAD84(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v16 = Strong;
    id v5 = [Strong cloudContext];
    if (v5)
    {
      uint64_t v6 = v5;
      [v5 setDisabled:1];
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = a1;
      *(void *)(v7 + 24) = a2;
      aBlock[4] = sub_100601E78;
      aBlock[5] = v7;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100236C78;
      aBlock[3] = &unk_1008CD110;
      os_log_type_t v8 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v6 cancelEverythingWithCompletionHandler:v8];
      _Block_release(v8);

      return;
    }
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_10091F858);
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDAccountUtils: Missing ICCC, can't stop ICCC.", v15, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10091F858);
    id v16 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v10, "RDAccountUtils: Missing store controller, can't stop ICCC.", v11, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1005FB03C(uint64_t (*a1)(void))
{
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091F858);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RDAccountUtils: Disabled ICCC", v5, 2u);
    swift_slowDealloc();
  }

  return a1();
}

void sub_1005FB130(uint64_t a1)
{
  id v2 = [self sharedManager];
  [v2 enableMonitoringAgentsWithToken:a1];
}

uint64_t sub_1005FB1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [self sharedManager];
  id v13 = [v12 disableMonitoringAgents];
  swift_beginAccess();
  *(void *)(a1 + 16) = v13;
  *(unsigned char *)(a1 + 24) = 0;
  if (qword_1009070C0 != -1) {
    swift_once();
  }
  os_log_type_t v14 = (void *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a1;
  aBlock[4] = sub_100614904;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008CD520;
  id v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v19 = _swiftEmptyArrayStorage;
  sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v17);
  return swift_release();
}

uint64_t sub_1005FB500()
{
  sub_1000F3DB4(v0 + 16);
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDAccountUtils()
{
  return self;
}

uint64_t sub_1005FB56C(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a5;
  *(void *)(v17 + 24) = a7;
  *(unsigned char *)(v17 + 32) = a8 & 1;
  *(void *)(v17 + 40) = a9;
  *(void *)(v17 + 48) = a10;
  *(unsigned char *)(v17 + 56) = a1;
  *(unsigned char *)(v17 + 57) = a2;
  *(void *)(v17 + 64) = a4;
  swift_retain();
  swift_retain();
  swift_errorRetain();
  sub_1005FA48C(a6, (uint64_t)sub_1006173BC, v17);

  return swift_release();
}

uint64_t sub_1005FB64C(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a5;
  uint64_t v24 = a8;
  uint64_t v27 = a4;
  uint64_t v25 = a9;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v17 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  os_log_type_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v23;
  *(void *)(v20 + 24) = a6;
  *(unsigned char *)(v20 + 32) = a1;
  *(unsigned char *)(v20 + 33) = a2;
  *(void *)(v20 + 40) = a3;
  aBlock[4] = v24;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = v25;
  unint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  int64_t v28 = _swiftEmptyArrayStorage;
  sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v26);
  return swift_release();
}

uint64_t sub_1005FB928(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  *(void *)(v14 + 32) = a1;
  *(unsigned char *)(v14 + 40) = a2 & 1;
  *(void *)(v14 + 48) = a5;
  *(void *)(v14 + 56) = a6;
  *(unsigned char *)(v14 + 64) = a7;
  swift_retain();
  id v15 = a4;
  swift_retain();
  sub_1005FAD84((uint64_t)sub_1006175B8, v14);

  return swift_release();
}

uint64_t sub_1005FB9F0(uint64_t a1, void *a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  int v56 = a7;
  int v12 = a4 & 1;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v54 = *(void *)(v13 - 8);
  uint64_t v55 = v13;
  __chkstk_darwin(v13);
  v52 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  v50 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocObject();
  *(unsigned char *)(v16 + 16) = 0;
  uint64_t v17 = swift_allocObject();
  *(unsigned char *)(v17 + 16) = 0;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  *(void *)(v18 + 32) = v16;
  *(void *)(v18 + 40) = v17;
  *(void *)(v18 + 48) = a3;
  *(unsigned char *)(v18 + 56) = v12;
  *(void *)(v18 + 64) = a5;
  *(void *)(v18 + 72) = a6;
  os_log_type_t v19 = self;
  swift_retain();
  id v58 = a2;
  uint64_t v59 = a1;
  swift_retain();
  uint64_t v60 = v17;
  swift_retain();
  uint64_t v61 = v16;
  swift_retain();
  id v20 = [v19 sharedInstance];
  id v21 = [v20 accountStore];

  id v22 = [v21 aa_accountsEnabledForDataclass:kAccountDataclassReminders];
  if (v22)
  {
    uint64_t v23 = v22;
    sub_1000963CC(0, &qword_1009181C0);
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    dispatch_group_t v57 = dispatch_group_create();
    a6 = swift_allocObject();
    *(void *)(a6 + 16) = 0;
    id v48 = v21;
    uint64_t v49 = v18;
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v24) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v24 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v24)
      {
LABEL_4:
        if (v24 >= 1)
        {
          uint64_t v25 = 0;
          v56 &= 1u;
          uint64_t v26 = v60;
          uint64_t v27 = v61;
          do
          {
            if ((a3 & 0xC000000000000001) != 0) {
              id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v28 = *(id *)(a3 + 8 * v25 + 32);
            }
            v29 = v28;
            if (objc_msgSend(v28, "isActive", v48))
            {
              dispatch_group_t v30 = v57;
              dispatch_group_enter(v57);
              swift_retain();
              swift_retain();
              swift_retain();
              id v31 = v29;
              uint64_t v32 = v30;
              sub_10060A468(v31, v58, 2, v56, v59, v31, a6, v27, v26, v32);

              swift_release();
              swift_release();

              swift_release();
            }
            else
            {
            }
            ++v25;
          }
          while (v24 != v25);
          goto LABEL_20;
        }
        __break(1u);
        goto LABEL_24;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    if (qword_1009070D8 != -1) {
      swift_once();
    }
    uint64_t v42 = (void *)swift_allocObject();
    v42[2] = a6;
    v42[3] = sub_100617628;
    v42[4] = v49;
    aBlock[4] = sub_10061769C;
    aBlock[5] = v42;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008CDB38;
    v43 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v44 = v50;
    static DispatchQoS.unspecified.getter();
    v62 = _swiftEmptyArrayStorage;
    sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    v45 = v52;
    uint64_t v46 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    dispatch_group_t v47 = v57;
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v43);
    swift_release();

    (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v46);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v44, v53);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  LODWORD(v57) = v12;
  if (qword_100907A38 != -1) {
LABEL_24:
  }
    swift_once();
  uint64_t v33 = type metadata accessor for Logger();
  sub_10008E2DC(v33, (uint64_t)qword_10091F858);
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "RDAccountUtils: No reminders accounts is found", v36, 2u);
    swift_slowDealloc();
  }

  swift_retain();
  id v37 = v58;
  unint64_t v38 = v59;
  swift_retain();
  uint64_t v39 = v60;
  swift_retain();
  uint64_t v40 = v61;
  swift_retain();
  sub_10061497C(v37, v40, v39, 0, v38, (char *)v37, a3, (char)v57, a5, a6);

  swift_release();
  swift_release_n();
  swift_release_n();
  swift_release();

  return swift_release();
}

uint64_t sub_1005FC178(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  char v16 = a7 & 1;
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  id v17 = a3;
  swift_retain();
  sub_10061497C(v17, a4, a5, a1, a2, (char *)v17, a6, v16, a8, a9);
  swift_release();

  swift_release();
  swift_errorRelease();
  swift_release();

  return swift_release();
}

uint64_t sub_1005FC270(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  swift_beginAccess();
  char v17 = *(unsigned char *)(a3 + 16) | a1;
  swift_beginAccess();
  *(unsigned char *)(a3 + 16) = v17 & 1;
  swift_beginAccess();
  char v18 = *(unsigned char *)(a4 + 16) | a1;
  swift_beginAccess();
  *(unsigned char *)(a4 + 16) = v18 & 1;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v19;
  *(void *)(v19 + 16) = a2;
  if (!a5) {
    goto LABEL_6;
  }
  if (!a2)
  {
    *(void *)(v19 + 16) = a5;
LABEL_6:
    swift_errorRetain();
    goto LABEL_7;
  }
  id v21 = self;
  sub_100094134(&qword_10091FB40);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100776E80;
  *(void *)(v22 + 32) = a5;
  *(void *)(v22 + 40) = a2;
  swift_errorRetain();
  swift_errorRetain();
  swift_errorRetain();
  sub_100094134((uint64_t *)&unk_10090ABB0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v24 = [v21 errorFromErrors:isa];

  *(void *)(v20 + 16) = v24;
  swift_errorRelease();
LABEL_7:
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a6;
  *(void *)(v25 + 24) = a8;
  *(unsigned char *)(v25 + 32) = a9 & 1;
  *(void *)(v25 + 40) = a3;
  *(void *)(v25 + 48) = a4;
  *(void *)(v25 + 56) = v20;
  *(void *)(v25 + 64) = a10;
  *(void *)(v25 + 72) = a11;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1005FA48C(a7, (uint64_t)sub_10061789C, v25);
  swift_release();
  return swift_release();
}

uint64_t sub_1005FC4D0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void, void, void))
{
  sub_1005FAAE0();
  if (a3)
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_10091F858);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      char v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to restart DA monitoring agents", v16, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    sub_100616E70(a2);
  }
  if (qword_100907A38 != -1) {
    swift_once();
  }
  char v17 = (uint64_t *)(a6 + 16);
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_10091F858);
  swift_retain_n();
  swift_retain();
  swift_retain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v28 = a7;
    uint64_t v21 = swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 67109634;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v21 + 8) = 1024;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v21 + 14) = 2080;
    swift_beginAccess();
    swift_errorRetain();
    sub_100094134(&qword_10090C320);
    uint64_t v22 = String.init<A>(describing:)();
    sub_1000C51B8(v22, v23, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDAccountUtils: Completed updating system accounts, calling updateAccountsAndFetchMigrationState completion {didAddOrRemoveAccounts: %{BOOL}d, didUpdateAccounts: %{BOOL}d, error: %s}", (uint8_t *)v21, 0x18u);
    swift_arrayDestroy();
    char v17 = (uint64_t *)(a6 + 16);
    swift_slowDealloc();
    a7 = v28;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_release();
    swift_release();
  }
  swift_beginAccess();
  uint64_t v24 = *(unsigned __int8 *)(a4 + 16);
  swift_beginAccess();
  uint64_t v25 = *(unsigned __int8 *)(a5 + 16);
  swift_beginAccess();
  uint64_t v26 = *v17;
  swift_errorRetain();
  a7(v24, v25, v26);
  return swift_errorRelease();
}

void sub_1005FC8BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, NSObject *a7)
{
  if (a1)
  {
    uint64_t v13 = (void *)(a2 + 16);
    swift_beginAccess();
    if (!*v13)
    {
      swift_beginAccess();
      *uint64_t v13 = a1;
      swift_errorRetain();
      swift_errorRelease();
    }
  }
  swift_beginAccess();
  char v14 = *(unsigned char *)(a3 + 16) | a4;
  swift_beginAccess();
  *(unsigned char *)(a3 + 16) = v14 & 1;
  swift_beginAccess();
  char v15 = *(unsigned char *)(a5 + 16) | a6;
  swift_beginAccess();
  *(unsigned char *)(a5 + 16) = v15 & 1;
  dispatch_group_leave(a7);
}

uint64_t sub_1005FC9E0(uint64_t a1, void (*a2)(void))
{
  os_log_type_t v4 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  if (*(void *)(a1 + 16))
  {
    swift_errorRetain();
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_10091F858);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v13 = a2;
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      v14[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v8 = 136315138;
      swift_getErrorValue();
      uint64_t v9 = Error.localizedDescription.getter();
      sub_1000C51B8(v9, v10, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDAccountUtils: Failed to update some or all of the system accounts {error: %s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v13;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  swift_beginAccess();
  uint64_t v11 = *v4;
  swift_errorRetain();
  a2(v11);
  return swift_errorRelease();
}

void sub_1005FCC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v58 - v12;
  char v14 = sub_1005F9E74();
  if (!v14)
  {
    uint64_t v19 = self;
    NSString v20 = String._bridgeToObjectiveC()();
    id v18 = [v19 internalErrorWithDebugDescription:v20];

    swift_willThrow();
    goto LABEL_5;
  }
  char v15 = v14;
  id v63 = 0;
  id v16 = [v14 fetchDefaultListWithError:&v63];
  char v17 = v16;
  if (v63)
  {
    id v18 = v63;

    swift_willThrow();
LABEL_5:
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_10091F858);
    swift_errorRetain();
    swift_errorRetain();
    char v15 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      id v63 = (id)swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 136315138;
      uint64_t v62 = (uint64_t)v18;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v62 = sub_1000C51B8(v24, v25, (uint64_t *)&v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v22, "Can't migrate default list ID {error: %s}", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_10;
  }
  if (!v16)
  {
LABEL_10:

    return;
  }
  id v61 = v16;
  id v26 = [v16 account];
  id v27 = [v26 objectID];

  id v28 = [v27 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v29 = UUID.uuidString.getter();
  uint64_t v31 = v30;
  uint64_t v59 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v60 = v8 + 8;
  v59(v13, v7);
  if (v29 == a1 && v31 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v32 & 1) == 0)
  {

    goto LABEL_10;
  }
LABEL_16:
  id v33 = v61;
  id v34 = [v61 externalIdentifier];
  if (!v34)
  {
    dispatch_group_t v47 = self;
    NSString v48 = String._bridgeToObjectiveC()();
    id v18 = [v47 internalErrorWithDebugDescription:v48];

LABEL_24:
    swift_willThrow();

    goto LABEL_5;
  }
  os_log_type_t v35 = v34;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v36 = sub_100602CE0(1);
  uint64_t v38 = v37;
  unint64_t v40 = v39;
  swift_bridgeObjectRelease();
  sub_1005FDB00(47, 0xE100000000000000, v36, v40);
  if (v41)
  {
    uint64_t v49 = self;
    id v63 = 0;
    unint64_t v64 = 0xE000000000000000;
    _StringGuts.grow(_:)(91);
    v50._countAndFlagsBits = 0xD000000000000058;
    v50._object = (void *)0x80000001007DA3F0;
    String.append(_:)(v50);
    v51._countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v52._countAndFlagsBits = 125;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    NSString v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [v49 internalErrorWithDebugDescription:v53];

    goto LABEL_24;
  }
  v58[3] = v36;
  if (v40 >> 14 < (unint64_t)Substring.index(_:offsetBy:)() >> 14) {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v58[1] = v40;
  v58[2] = v38;
  Substring.subscript.getter();
  swift_bridgeObjectRelease();
  static String._fromSubstring(_:)();
  swift_bridgeObjectRelease();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
    uint64_t v42 = self;
    id v63 = 0;
    unint64_t v64 = 0xE000000000000000;
    _StringGuts.grow(_:)(90);
    v43._countAndFlagsBits = 0xD000000000000057;
    v43._object = (void *)0x80000001007DA450;
    String.append(_:)(v43);
    v44._countAndFlagsBits = static String._fromSubstring(_:)();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 125;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [v42 internalErrorWithDebugDescription:v46];

    swift_willThrow();
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
  id v54 = [self daemonUserDefaults];
  uint64_t v55 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v57 = [v55 objectIDWithUUID:isa];

  [v54 setPreferredDefaultListID:v57];
  v59(v11, v7);
}

void sub_1005FD4FC(char a1, uint64_t a2, void *a3, char a4, uint64_t a5, void (*a6)(id), uint64_t a7)
{
  if ((a1 & 1) == 0)
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_10091F858);
    id v14 = a3;
    swift_errorRetain();
    id v15 = v14;
    swift_errorRetain();
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      char v32 = a4;
      id v34 = a3;
      uint64_t v33 = a7;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 138412546;
      id v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v19 = v15;

      *(_WORD *)(v18 + 12) = 2080;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v21 = Error.localizedDescription.getter();
        unint64_t v23 = v22;
      }
      else
      {
        unint64_t v23 = 0xE300000000000000;
        uint64_t v21 = 7104878;
      }
      a7 = v33;
      sub_1000C51B8(v21, v23, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDAccountUtils: Error updating migration flags for ACAccount {acAccount: %@, error: %s}", (uint8_t *)v18, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v34;
      if ((v32 & 1) == 0) {
        goto LABEL_14;
      }
      goto LABEL_9;
    }

    swift_errorRelease();
    swift_errorRelease();
  }
  if ((a4 & 1) == 0)
  {
LABEL_14:
    a6(0);
    return;
  }
LABEL_9:
  id v24 = sub_1005F9E74();
  if (v24)
  {
    unint64_t v25 = v24;
    id v26 = (void *)swift_allocObject();
    v26[2] = a5;
    v26[3] = a3;
    v26[4] = v25;
    v26[5] = a6;
    v26[6] = a7;
    id v27 = a3;
    swift_retain();
    id v28 = v25;
    swift_retain();
    sub_100601EFC(1, (uint64_t)sub_100617A94, (uint64_t)v26);

    swift_release();
  }
  else
  {
    uint64_t v29 = self;
    NSString v30 = String._bridgeToObjectiveC()();
    id v31 = [v29 internalErrorWithDebugDescription:v30];

    a6(v31);
  }
}

uint64_t sub_1005FD8AC(uint64_t a1, char a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  *(void *)(v16 + 32) = a5;
  *(void *)(v16 + 40) = a1;
  *(unsigned char *)(v16 + 48) = a2 & 1;
  *(void *)(v16 + 56) = a6;
  *(void *)(v16 + 64) = a7;
  swift_retain();
  id v17 = a4;
  id v18 = a5;
  swift_retain();
  sub_1005FAD84(a9, v16);

  return swift_release();
}

uint64_t sub_1005FD96C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, char, uint64_t, uint64_t))
{
  char v16 = a5 & 1;
  swift_retain();
  id v17 = a3;
  swift_retain();
  char v19 = v16;
  a9(a2, v17, 2, a8, a1, a1, v17, a4, v19, a6, a7);
  swift_release();

  return swift_release();
}

uint64_t sub_1005FDA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a5;
  *(void *)(v15 + 24) = a7;
  *(unsigned char *)(v15 + 32) = a8 & 1;
  *(void *)(v15 + 40) = a9;
  *(void *)(v15 + 48) = a10;
  *(void *)(v15 + 56) = a4;
  swift_retain();
  swift_retain();
  swift_errorRetain();
  sub_1005FA48C(a6, (uint64_t)sub_100617BC0, v15);

  return swift_release();
}

unint64_t sub_1005FDB00(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a3 >> 14;
  if (a3 >> 14 != a4 >> 14)
  {
    unint64_t v5 = Substring.index(before:)();
    if (Substring.subscript.getter() != a1 || v8 != a2)
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v9) {
        return v5;
      }
      if (v4 == v5 >> 14) {
        return 0;
      }
      while (1)
      {
        unint64_t v5 = Substring.index(before:)();
        if (Substring.subscript.getter() == a1 && v10 == a2) {
          break;
        }
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v12) {
          return v5;
        }
        if (v4 == v5 >> 14) {
          return 0;
        }
      }
    }
    swift_bridgeObjectRelease();
    return v5;
  }
  return 0;
}

void sub_1005FDC6C(char a1, uint64_t a2, uint64_t a3, dispatch_group_t group)
{
  if ((a1 & 1) == 0)
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_10091F858);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      v14[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v11 = Error.localizedDescription.getter();
        unint64_t v13 = v12;
      }
      else
      {
        unint64_t v13 = 0xE300000000000000;
        uint64_t v11 = 7104878;
      }
      sub_1000C51B8(v11, v13, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error saving ACAccount {error: %s}", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  if (a2)
  {
    swift_beginAccess();
    if (!*(void *)(a3 + 16))
    {
      swift_beginAccess();
      *(void *)(a3 + 16) = a2;
      swift_errorRetain();
      swift_errorRelease();
    }
  }
  dispatch_group_leave(group);
}

uint64_t sub_1005FDEAC(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(a3 + 16);
  swift_errorRetain();
  a1(v5);
  return swift_errorRelease();
}

uint64_t sub_1005FDF18(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20[0] = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  char v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  *(unsigned char *)(v17 + 32) = a1;
  *(void *)(v17 + 40) = a2;
  aBlock[4] = sub_1006172CC;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008CD700;
  id v18 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t sub_1005FE1F0(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  *(void *)(v12 + 32) = a1;
  *(unsigned char *)(v12 + 40) = a2 & 1;
  *(void *)(v12 + 48) = a5;
  *(void *)(v12 + 56) = a6;
  swift_retain();
  id v13 = a4;
  swift_retain();
  sub_1005FAD84((uint64_t)sub_100614968, v12);

  return swift_release();
}

uint64_t sub_1005FE2B0(unint64_t a1, void *a2, NSObject *a3, char a4, uint64_t a5, uint64_t a6)
{
  int v11 = a4 & 1;
  swift_retain();
  id v12 = a2;
  swift_retain();
  sub_100615BB4(v12, a1, v12, a3, v11, a5, a6);
  swift_release();

  return swift_release();
}

uint64_t sub_1005FE348(char a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a5;
  *(unsigned char *)(v16 + 32) = a6 & 1;
  *(void *)(v16 + 40) = a7;
  *(void *)(v16 + 48) = a8;
  *(unsigned char *)(v16 + 56) = a1;
  *(void *)(v16 + 64) = a2;
  swift_retain();
  swift_retain();
  swift_errorRetain();
  sub_1005FA48C(a4, (uint64_t)sub_100616E5C, v16);

  return swift_release();
}

void sub_1005FE424(void *a1, char a2)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void **)(v2 + 16);
  id v6 = sub_100600C90(a1, v5);
  if (!v6) {
    goto LABEL_8;
  }
  uint64_t v7 = v6;
  id v8 = [v6 accountTypeHost];
  unsigned int v9 = [v8 isCloudKit];

  if (!v9)
  {

LABEL_8:
    sub_100601618();
    swift_allocError();
    swift_willThrow();
    return;
  }
  if (![v7 didChooseToMigrate])
  {
    sub_10060166C();
LABEL_11:
    swift_allocError();
    swift_willThrow();
    goto LABEL_12;
  }
  id v10 = sub_1006016C0(v4, v5);
  if (!v10)
  {
    sub_100601B94();
    goto LABEL_11;
  }
  int v11 = v10;
  Swift::Bool v12 = REMAccount.isConsideredEmpty()();
  if (v13)
  {

    return;
  }
  if (v12)
  {
    if (qword_100907A38 == -1)
    {
LABEL_15:
      uint64_t v14 = type metadata accessor for Logger();
      sub_10008E2DC(v14, (uint64_t)qword_10091F858);
      id v15 = v4;
      id v16 = v11;
      id v17 = v15;
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v67 = v18;
        uint64_t v20 = swift_slowAlloc();
        uint64_t v21 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 138543618;
        unint64_t v22 = [v16 objectID];
        v76 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v21 = v22;

        *(_WORD *)(v20 + 12) = 2114;
        unint64_t v23 = [v17 identifier];
        id v24 = v23;
        if (v23) {
          v76 = v23;
        }
        else {
          v76 = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v21[1] = v24;

        _os_log_impl((void *)&_mh_execute_header, v67, v19, "RDAccountUtils.InactivatedICloudCalDavDataMover: Found an inactivated iCloud CalDAV account but it is empty, we're done {remObjectID: %{public}@, acAccountIdentifier: %{public}@}", (uint8_t *)v20, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }

LABEL_12:
      return;
    }
LABEL_43:
    swift_once();
    goto LABEL_15;
  }
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_10008E2DC(v25, (uint64_t)qword_10091F858);
  id v26 = v11;
  id v27 = v4;
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  v66 = v27;
  v68 = v26;
  if (os_log_type_enabled(v28, v29))
  {
    os_log_type_t v65 = v29;
    log = v28;
    uint64_t v30 = swift_slowAlloc();
    id v31 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 138543618;
    v76 = [v26 objectID];
    unint64_t v64 = &v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v31 = v76;

    *(_WORD *)(v30 + 12) = 2114;
    char v32 = [v27 identifier];
    uint64_t v33 = v32;
    if (v32) {
      v76 = v32;
    }
    else {
      v76 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v31[1] = v33;

    _os_log_impl((void *)&_mh_execute_header, log, v65, "RDAccountUtils.InactivatedICloudCalDavDataMover: Found an inactivated non-empy iCloud CalDAV account, now going to perform data move... {remObjectID: %{public}@, acAccountIdentifier: %{public}@}", (uint8_t *)v30, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (qword_100907500 != -1) {
    swift_once();
  }
  id v34 = (void *)qword_100942220;
  v76 = 0;
  id v35 = [v26 fetchListsWithError:&v76, v64];
  unint64_t v36 = v76;
  if (!v35)
  {
    Swift::String v45 = v76;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_12;
  }
  uint64_t v37 = v35;
  sub_1000963CC(0, &qword_10090E198);
  unint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v39 = v36;

  swift_bridgeObjectRetain();
  unint64_t v40 = (unint64_t)sub_100601BE8(v38, v34, 0x8FB8EFA09AE220, (void *)0xA700000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v76 = _swiftEmptyArrayStorage;
  if (v40 >> 62)
  {
    swift_bridgeObjectRetain();
    int v11 = (void *)_CocoaArrayWrapper.endIndex.getter();
    if (v11)
    {
LABEL_34:
      os_log_t loga = (os_log_t)(v40 & 0xC000000000000001);
      uint64_t v41 = 4;
      v69 = (void *)v40;
      while (1)
      {
        id v42 = loga ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v40 + 8 * v41);
        Swift::String v43 = v42;
        unint64_t v4 = (void *)(v41 - 3);
        if (__OFADD__(v41 - 4, 1)) {
          break;
        }
        uint64_t v75 = (uint64_t)v42;
        sub_1005FEFA0((void **)&v76, (void **)&v75, (unint64_t *)&v74);
        swift_bridgeObjectRelease();

        Swift::String v44 = v74;
        v76 = v74;
        ++v41;
        unint64_t v40 = (unint64_t)v69;
        if (v4 == v11) {
          goto LABEL_46;
        }
      }
      __break(1u);
      goto LABEL_43;
    }
  }
  else
  {
    int v11 = *(void **)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_34;
    }
  }
  Swift::String v44 = _swiftEmptyArrayStorage;
LABEL_46:
  swift_bridgeObjectRelease_n();
  type metadata accessor for RDAccountDataMover();
  swift_initStackObject();
  uint64_t v46 = sub_1004D3338(v5);
  *(void *)(v46 + 72) = v44;
  swift_bridgeObjectRelease();
  if (a2) {
    *(unsigned char *)(v46 + 80) = 1;
  }
  dispatch_group_t v47 = v68;
  sub_1004D33A0(v68, v7);
  swift_retain_n();
  id v48 = v66;
  id v49 = v7;
  Swift::String v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  logb = v50;
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = swift_slowAlloc();
    NSString v53 = (void *)swift_slowAlloc();
    v76 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 138543874;
    id v54 = [v49 objectID];
    uint64_t v75 = (uint64_t)v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *NSString v53 = v54;

    *(_WORD *)(v52 + 12) = 2114;
    id v55 = [v48 identifier];
    id v56 = v55;
    if (v55) {
      uint64_t v75 = (uint64_t)v55;
    }
    else {
      uint64_t v75 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v53[1] = v56;

    *(_WORD *)(v52 + 22) = 2082;
    uint64_t v57 = sub_1004D322C();
    uint64_t v75 = sub_1000C51B8(v57, v58, (uint64_t *)&v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, logb, v51, "RDAccountUtils.InactivatedICloudCalDavDataMover: Completed moving data from the inactivated iCloud CalDAV account to CloudKit {ckAccount: %{public}@, acAccountIdentifier: %{public}@, stats: %{public}s}", (uint8_t *)v52, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    dispatch_group_t v47 = v68;
  }
  else
  {

    swift_release_n();
  }
  sub_1004D5300((uint64_t)v47);
  swift_retain_n();
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v59, v60))
  {
    v70 = v49;
    id v61 = (uint8_t *)swift_slowAlloc();
    v76 = (void *)swift_slowAlloc();
    *(_DWORD *)id v61 = 136446210;
    uint64_t v62 = sub_1004D322C();
    uint64_t v75 = sub_1000C51B8(v62, v63, (uint64_t *)&v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "RDAccountUtils.InactivatedICloudCalDavDataMover: The inactivated CalDAV account is now emptied after the data move {stats: %{public}s}.", v61, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1005FEFA0@<X0>(void **a1@<X0>, void **a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = *a2;
  unint64_t v72 = 0;
  id v6 = [v5 fetchRemindersWithError:&v72];
  id v7 = (id)v72;
  if (!v6)
  {
    id v44 = (id)v72;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  id v8 = v6;
  id v64 = v5;
  unint64_t v65 = (unint64_t)v4;
  unint64_t v63 = a3;
  sub_1000963CC(0, &qword_1009168E0);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = v7;

  unint64_t v72 = (unint64_t)_swiftEmptyArrayStorage;
  if (v9 >> 62) {
    goto LABEL_83;
  }
  uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = v9 & 0xC000000000000001;
    unint64_t v67 = v9 + 32;
    uint64_t v68 = v9 & 0xFFFFFFFFFFFFFF8;
    unint64_t v69 = v9 & 0xC000000000000001;
    unint64_t v70 = v9;
    while (1)
    {
      if (v13)
      {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v12 >= *(void *)(v68 + 16)) {
          goto LABEL_79;
        }
        id v14 = *(id *)(v67 + 8 * v12);
      }
      id v15 = v14;
      BOOL v16 = __OFADD__(v12++, 1);
      if (v16) {
        break;
      }
      id v17 = [v14 titleAsString];
      if (v17)
      {
        id v18 = v17;
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        if (qword_100907508 != -1) {
          swift_once();
        }
        uint64_t v22 = qword_100942228;
        uint64_t v23 = *(void *)(qword_100942228 + 16);
        if (!v23)
        {

          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        BOOL v24 = *(void *)(qword_100942228 + 32) == v19 && *(void *)(qword_100942228 + 40) == v21;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_21:
          swift_bridgeObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          if (v23 != 1)
          {
            if (*(void *)(v22 + 48) == v19 && *(void *)(v22 + 56) == v21
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              goto LABEL_21;
            }
            if (v23 != 2)
            {
              uint64_t v25 = (void *)(v22 + 72);
              uint64_t v26 = 2;
              do
              {
                unint64_t v9 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_81;
                }
                BOOL v27 = *(v25 - 1) == v19 && *v25 == v21;
                if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_21;
                }
                v25 += 2;
                ++v26;
              }
              while (v9 != v23);
            }
          }

          swift_bridgeObjectRelease();
        }
        unint64_t v13 = v69;
        unint64_t v9 = v70;
        goto LABEL_6;
      }

LABEL_6:
      if (v12 == v11)
      {
        swift_bridgeObjectRelease();
        unint64_t v28 = 0;
        unint64_t v29 = v72;
        unint64_t v72 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v66 = v11;
        while (1)
        {
          while (1)
          {
            if (v13)
            {
              id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (v28 >= *(void *)(v68 + 16)) {
                goto LABEL_80;
              }
              id v30 = *(id *)(v67 + 8 * v28);
            }
            id v31 = v30;
            BOOL v16 = __OFADD__(v28++, 1);
            if (v16) {
              goto LABEL_78;
            }
            id v32 = [v30 titleAsString];
            if (v32) {
              break;
            }

            if (v28 == v11) {
              goto LABEL_76;
            }
          }
          uint64_t v33 = v32;
          unint64_t v34 = v29;
          uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v37 = v36;

          if (qword_100907510 != -1) {
            swift_once();
          }
          uint64_t v38 = qword_100942230;
          uint64_t v39 = *(void *)(qword_100942230 + 16);
          if (!v39)
          {

            swift_bridgeObjectRelease();
            goto LABEL_58;
          }
          BOOL v40 = *(void *)(qword_100942230 + 32) == v35 && *(void *)(qword_100942230 + 40) == v37;
          if (!v40 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if (v39 == 1) {
              goto LABEL_61;
            }
            if ((*(void *)(v38 + 48) != v35 || *(void *)(v38 + 56) != v37)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              break;
            }
          }
LABEL_55:
          swift_bridgeObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
LABEL_56:
          unint64_t v13 = v69;
          unint64_t v9 = v70;
LABEL_58:
          unint64_t v29 = v34;
          uint64_t v11 = v66;
          if (v28 == v66)
          {
LABEL_76:
            swift_bridgeObjectRelease();
            unint64_t v46 = v72;
            goto LABEL_85;
          }
        }
        if (v39 != 2)
        {
          uint64_t v41 = (void *)(v38 + 72);
          uint64_t v42 = 2;
          do
          {
            unint64_t v9 = v42 + 1;
            if (__OFADD__(v42, 1)) {
              goto LABEL_82;
            }
            BOOL v43 = *(v41 - 1) == v35 && *v41 == v37;
            if (v43 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_55;
            }
            v41 += 2;
            ++v42;
          }
          while (v9 != v39);
        }
LABEL_61:

        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
    }
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v46 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_85:
  id v47 = [v64 objectID];
  unint64_t v72 = v65;
  swift_bridgeObjectRetain();
  id v48 = v47;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  unint64_t v49 = v72;

  if ((v29 & 0x8000000000000000) != 0 || (v29 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v50) {
      goto LABEL_90;
    }
LABEL_98:
    swift_release();
    id v55 = _swiftEmptyArrayStorage;
    goto LABEL_99;
  }
  uint64_t v50 = *(void *)(v29 + 16);
  if (!v50) {
    goto LABEL_98;
  }
LABEL_90:
  unint64_t v72 = (unint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v50 < 0)
  {
    __break(1u);
    goto LABEL_113;
  }
  unint64_t v71 = v49;
  uint64_t v51 = 0;
  do
  {
    if ((v29 & 0xC000000000000001) != 0) {
      id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v52 = *(id *)(v29 + 8 * v51 + 32);
    }
    NSString v53 = v52;
    ++v51;
    id v54 = [v52 objectID];

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v50 != v51);
  id v55 = (void *)v72;
  swift_release();
  unint64_t v49 = v71;
LABEL_99:
  unint64_t v72 = v49;
  sub_100200CE8((unint64_t)v55);
  unint64_t v56 = v72;
  if ((v46 & 0x8000000000000000) != 0 || (v46 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v57)
    {
LABEL_102:
      unint64_t v72 = (unint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v57 & 0x8000000000000000) == 0)
      {
        uint64_t v58 = 0;
        do
        {
          if ((v46 & 0xC000000000000001) != 0) {
            id v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v59 = *(id *)(v46 + 8 * v58 + 32);
          }
          os_log_type_t v60 = v59;
          ++v58;
          id v61 = [v59 objectID];

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        while (v57 != v58);
        uint64_t v62 = (void *)v72;
        swift_release();
        goto LABEL_111;
      }
LABEL_113:
      __break(1u);
    }
  }
  else
  {
    uint64_t v57 = *(void *)(v46 + 16);
    if (v57) {
      goto LABEL_102;
    }
  }
  swift_release();
  uint64_t v62 = _swiftEmptyArrayStorage;
LABEL_111:
  unint64_t v72 = v56;
  uint64_t result = sub_100200CE8((unint64_t)v62);
  *unint64_t v63 = v72;
  return result;
}

uint64_t type metadata accessor for RDAccountUtils.InactivatedICloudCalDavDataMover()
{
  return self;
}

void sub_1005FF7DC(void *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  id v4 = [self localAccountID];
  id v34 = 0;
  id v5 = [v3 fetchAccountWithObjectID:v4 error:&v34];

  if (!v5)
  {
    id v9 = v34;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  id v6 = v34;
  Swift::Bool v7 = REMAccount.isConsideredEmpty()();
  if (v8)
  {

    return;
  }
  if (v7)
  {
    sub_1006015C4();
LABEL_12:
    swift_allocError();
    swift_willThrow();

    return;
  }
  id v10 = sub_100600C90(a1, v3);
  if (!v10)
  {
    sub_10060151C();
    goto LABEL_12;
  }
  uint64_t v11 = v10;
  Swift::Bool v12 = REMAccount.isConsideredEmpty()();
  if (v13) {
    goto LABEL_14;
  }
  if (!v12)
  {
    id v14 = [v11 objectID];
    sub_100601570();
    swift_allocError();
    *id v15 = v14;
    swift_willThrow();
LABEL_14:

    return;
  }
  type metadata accessor for RDAccountDataMover();
  swift_initStackObject();
  sub_1004D3338(v3);
  sub_1004D3AE0(v5, v11);
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_10008E2DC(v16, (uint64_t)qword_10091F858);
  swift_retain_n();
  id v17 = v11;
  id v18 = a1;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    os_log_type_t v32 = v20;
    uint64_t v21 = swift_slowAlloc();
    id v31 = v18;
    uint64_t v22 = (void *)swift_slowAlloc();
    id v34 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 138543874;
    id v33 = [v17 objectID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v33;

    *(_WORD *)(v21 + 12) = 2114;
    id v23 = [v31 identifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v22[1] = v23;

    *(_WORD *)(v21 + 22) = 2082;
    uint64_t v24 = sub_1004D322C();
    sub_1000C51B8(v24, v25, (uint64_t *)&v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v32, "RDAccountUtils.LocalDataToICloudMover: Completed moving data from local to iCloud {target: %{public}@, acAccountIdentifier: %{public}@, stats: %{public}s}", (uint8_t *)v21, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  sub_1004D5300((uint64_t)v5);
  swift_retain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    unint64_t v28 = (uint8_t *)swift_slowAlloc();
    id v34 = (id)swift_slowAlloc();
    *(_DWORD *)unint64_t v28 = 136446210;
    uint64_t v29 = sub_1004D322C();
    sub_1000C51B8(v29, v30, (uint64_t *)&v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDAccountUtils.LocalDataToICloudMover: Local account emptied {stats: %{public}s}.", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t type metadata accessor for RDAccountUtils.LocalDataToICloudMover()
{
  return self;
}

uint64_t sub_1005FFE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = a7;
  uint64_t v23 = a2;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  id v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = (void *)swift_allocObject();
  v18[2] = a3;
  v18[3] = a4;
  v18[4] = a1;
  aBlock[4] = a6;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = v21;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v22);
  return swift_release();
}

id sub_1006000E8(void *a1)
{
  id v2 = [a1 displayAccount];
  if (!v2)
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_10091F858);
    id v15 = a1;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v16, v17))
    {

      return 0;
    }
    id v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    *(_DWORD *)id v18 = 138543362;
    id v20 = [v15 identifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v19 = v20;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDAccountUtils.fetchAccountWithAppleAccount: Failed to get the display account {accountIdentifier: %{public}@}.", v18, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_30:

    return 0;
  }
  uint64_t v3 = v2;
  id result = [v2 accountType];
  if (result)
  {
    id v5 = result;
    id v6 = [result identifier];

    if (v6)
    {
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;

      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v9)
      {
        if (v7 == v10 && v9 == v11)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_23;
        }
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v13)
        {
LABEL_23:
          if ([v3 isEnabledForDataclass:ACAccountDataclassReminders]) {
            return v3;
          }
          if (qword_100907A38 != -1) {
            swift_once();
          }
          uint64_t v27 = type metadata accessor for Logger();
          sub_10008E2DC(v27, (uint64_t)qword_10091F858);
          uint64_t v16 = v3;
          uint64_t v22 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v22, v28))
          {
            uint64_t v24 = (uint8_t *)swift_slowAlloc();
            uint64_t v29 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v24 = 138543362;
            id v30 = [v16 identifier];
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v29 = v30;

            os_log_type_t v31 = v28;
            os_log_type_t v32 = "RDAccountUtils.fetchAccountWithAppleAccount: Reminders is not enabled for the given ACAccount {account"
                  "Identifier: %{public}@}.";
            goto LABEL_29;
          }
LABEL_28:

          goto LABEL_30;
        }
LABEL_17:
        if (qword_100907A38 != -1) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        sub_10008E2DC(v21, (uint64_t)qword_10091F858);
        uint64_t v16 = v3;
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          unint64_t v25 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v24 = 138543362;
          id v26 = [v16 identifier];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v25 = v26;

          os_log_type_t v31 = v23;
          os_log_type_t v32 = "RDAccountUtils.fetchAccountWithAppleAccount: Given ACAccount is not Apple account {accountIdentifier: %{public}@}.";
LABEL_29:
          _os_log_impl((void *)&_mh_execute_header, v22, v31, v32, v24, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          return 0;
        }
        goto LABEL_28;
      }
    }
    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

id sub_10060062C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_10091F858);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_1000C51B8(a1, a2, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDAccountUtils: Not an UUID {uuidString: %{public}s}", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    id v15 = self;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v17 = [v15 objectIDWithUUID:isa];

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return v17;
}

void *sub_10060095C(void *a1)
{
  id v2 = [a1 displayAccount];
  if (!v2)
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_10091F858);
    id v8 = a1;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138543362;
      id v13 = [v8 identifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v13;

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "childCalDAVIdentifierEnabledForReminders: Can't get display account from input {input: %{public}@}", v11, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = (void *)ACAccount.rem_childCalDAVAccountEnabledForReminders.getter();
  uint64_t v5 = v4;
  if (!v4)
  {

    return v5;
  }
  id v6 = [v4 identifier];

  if (!v6)
  {

    return 0;
  }
  uint64_t v5 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

id sub_100600BAC(void *a1, void *a2)
{
  uint64_t v3 = sub_10060095C(a1);
  if (!v4) {
    return 0;
  }
  id v5 = sub_10060062C((uint64_t)v3, v4);
  swift_bridgeObjectRelease();
  if (!v5) {
    return 0;
  }
  id v10 = 0;
  id v6 = [a2 fetchAccountWithObjectID:v5 error:&v10];
  id v7 = v10;
  if (!v6)
  {
    id v8 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }

  return v6;
}

id sub_100600C90(void *a1, void *a2)
{
  id v3 = sub_1006000E8(a1);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3;
  id result = [v3 identifier];
  if (result)
  {
    id v6 = result;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    id v10 = sub_10060062C(v7, v9);
    swift_bridgeObjectRelease();
    if (!v10)
    {

      return 0;
    }
    id v62 = 0;
    id v11 = [a2 fetchAccountWithObjectID:v10 error:&v62];
    if (v11)
    {
      uint64_t v12 = v11;
      id v13 = v62;
      if (([v12 inactive] & 1) == 0)
      {
        uint64_t v29 = qword_100907A38;
        id v30 = v12;
        if (v29 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_10008E2DC(v31, (uint64_t)qword_10091F858);
        id v32 = v30;
        id v33 = v4;
        id v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v34, v35))
        {
          id v60 = v10;
          uint64_t v36 = swift_slowAlloc();
          uint64_t v37 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v36 = 138543618;
          uint64_t v38 = v32;
          id v39 = [v32 objectID];
          id v62 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v37 = v39;
          id v61 = v38;

          *(_WORD *)(v36 + 12) = 2114;
          id v40 = [v33 identifier];
          id v41 = v40;
          if (v40) {
            id v62 = v40;
          }
          else {
            id v62 = 0;
          }
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v10 = v60;
          v37[1] = v41;

          _os_log_impl((void *)&_mh_execute_header, v34, v35, "RDAccountUtils.fetchAccountWithAppleAccount: Found an active CloudKit REMAccount {objectID: %{public}@, accountIdentifier: %{public}@}.", (uint8_t *)v36, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          goto LABEL_48;
        }

        return v12;
      }
    }
    else
    {
      id v14 = v62;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    id v15 = sub_100600BAC(v4, a2);
    if (!v15)
    {
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_10008E2DC(v42, (uint64_t)qword_10091F858);
      id v21 = v4;
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v22, v43))
      {
        id v44 = (uint8_t *)swift_slowAlloc();
        Swift::String v45 = (void *)swift_slowAlloc();
        *(_DWORD *)id v44 = 138543362;
        id v46 = [v21 identifier];
        id v47 = v46;
        if (v46) {
          id v62 = v46;
        }
        else {
          id v62 = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v45 = v47;

        _os_log_impl((void *)&_mh_execute_header, v22, v43, "RDAccountUtils.fetchAccountWithAppleAccount: No .calDav iCloud REMAccount found at all {accountIdentifier: %{public}@}", v44, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        goto LABEL_42;
      }

LABEL_34:
LABEL_43:

      return 0;
    }
    uint64_t v12 = v15;
    unsigned int v16 = [v15 inactive];
    uint64_t v17 = qword_100907A38;
    if (v16)
    {
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_10008E2DC(v18, (uint64_t)qword_10091F858);
      id v19 = v12;
      id v20 = v4;
      id v21 = v19;
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        unint64_t v25 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 138543618;
        id v26 = [v21 objectID];
        id v62 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v25 = v26;

        *(_WORD *)(v24 + 12) = 2114;
        id v27 = [v20 identifier];
        id v28 = v27;
        if (v27) {
          id v62 = v27;
        }
        else {
          id v62 = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v25[1] = v28;

        _os_log_impl((void *)&_mh_execute_header, v22, v23, "RDAccountUtils.fetchAccountWithAppleAccount: Found a .calDav iCloud REMAccount but it is inactive {objectID: %{public}@, accountIdentifier: %{public}@}", (uint8_t *)v24, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_42:
        goto LABEL_43;
      }

      goto LABEL_34;
    }
    id v48 = v12;
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_10008E2DC(v49, (uint64_t)qword_10091F858);
    id v50 = v48;
    id v51 = v4;
    id v52 = v50;
    id v34 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v53))
    {
      os_log_type_t v59 = v53;
      uint64_t v54 = swift_slowAlloc();
      id v55 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 138543618;
      id v56 = [v52 objectID];
      id v62 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v55 = v56;

      *(_WORD *)(v54 + 12) = 2114;
      id v57 = [v51 identifier];
      id v58 = v57;
      if (v57) {
        id v62 = v57;
      }
      else {
        id v62 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v55[1] = v58;

      _os_log_impl((void *)&_mh_execute_header, v34, v59, "RDAccountUtils.fetchAccountWithAppleAccount: Found an active .calDav iCloud REMAccount {objectID: %{public}@, accountIdentifier: %{public}@}.", (uint8_t *)v54, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_48:
      return v12;
    }

    return v12;
  }
  __break(1u);
  return result;
}

unint64_t sub_10060151C()
{
  unint64_t result = qword_10091FB08;
  if (!qword_10091FB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091FB08);
  }
  return result;
}

unint64_t sub_100601570()
{
  unint64_t result = qword_10091FB10;
  if (!qword_10091FB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091FB10);
  }
  return result;
}

unint64_t sub_1006015C4()
{
  unint64_t result = qword_10091FB18;
  if (!qword_10091FB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091FB18);
  }
  return result;
}

unint64_t sub_100601618()
{
  unint64_t result = qword_10091FB20;
  if (!qword_10091FB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091FB20);
  }
  return result;
}

unint64_t sub_10060166C()
{
  unint64_t result = qword_10091FB28;
  if (!qword_10091FB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091FB28);
  }
  return result;
}

id sub_1006016C0(void *a1, void *a2)
{
  id v3 = sub_1006000E8(a1);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3;
  id result = [v3 identifier];
  if (result)
  {
    id v6 = result;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    id v10 = sub_100600BAC(v4, a2);
    if (v10)
    {
      id v11 = v10;
      if ([v10 inactive])
      {
        if (qword_100907A38 != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        sub_10008E2DC(v12, (uint64_t)qword_10091F858);
        swift_bridgeObjectRetain();
        id v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v13, v14))
        {
          id v15 = (uint8_t *)swift_slowAlloc();
          uint64_t v24 = swift_slowAlloc();
          *(_DWORD *)id v15 = 136446210;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v7, v9, &v24);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDAccountUtils.fetchInactiveCalDavAccount: Found an inactive .calDav iCloud REMAccount {appleACAccountID: %{public}s}", v15, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        return v11;
      }
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain();
      id v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v23 = 136446210;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v7, v9, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDAccountUtils.fetchInactiveCalDavAccount: Didn't find an inactve .calDav iCloud REMAccount but found an active one {appleACAccountID: %{public}s}", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_21;
      }
    }
    else
    {
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_10008E2DC(v16, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        id v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)id v19 = 136446210;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v7, v9, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDAccountUtils.fetchInactiveCalDavAccount: Didn't find any .calDav iCloud REMAccount {appleACAccountID: %{public}s}", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_21:
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

unint64_t sub_100601B94()
{
  unint64_t result = qword_10091FB30;
  if (!qword_10091FB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091FB30);
  }
  return result;
}

void *sub_100601BE8(unint64_t a1, void *a2, uint64_t a3, void *a4)
{
  v21._countAndFlagsBits = a3;
  v21._object = a4;
  uint64_t v4 = a1;
  id v26 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_33;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v6 = 0;
    uint64_t v23 = v4 & 0xFFFFFFFFFFFFFF8;
    unint64_t v24 = v4 & 0xC000000000000001;
    uint64_t v22 = v4 + 32;
    while (1)
    {
      if (v24)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v6 >= *(void *)(v23 + 16))
        {
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        id v7 = *(id *)(v22 + 8 * v6);
      }
      unint64_t v8 = v7;
      if (__OFADD__(v6++, 1)) {
        goto LABEL_31;
      }
      id v10 = [v7 name];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v4 = v12;

      uint64_t v13 = a2[2];
      if (v13)
      {
        BOOL v14 = a2[4] == v11 && a2[5] == v4;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_4:
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        if (v13 != 1) {
          break;
        }
      }
LABEL_26:
      swift_bridgeObjectRelease();
      id v19 = [v8 name];
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v19) = String.hasSuffix(_:)(v21);
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {

        goto LABEL_6;
      }
LABEL_5:
      uint64_t v4 = (uint64_t)&v26;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
LABEL_6:
      if (v6 == i) {
        return v26;
      }
    }
    id v15 = a2 + 7;
    uint64_t v16 = 1;
    while (1)
    {
      uint64_t v17 = v16 + 1;
      if (__OFADD__(v16, 1)) {
        break;
      }
      BOOL v18 = *(v15 - 1) == v11 && *v15 == v4;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_4;
      }
      v15 += 2;
      ++v16;
      if (v17 == v13) {
        goto LABEL_26;
      }
    }
LABEL_32:
    __break(1u);
LABEL_33:
    ;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100601E40()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100601E78()
{
  return sub_1005FB03C(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100601E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100601E90()
{
  return swift_release();
}

uint64_t sub_100601E98()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100601EE0()
{
  return sub_1005FA890(*(void **)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_100601EEC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100601EFC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0) {
    goto LABEL_8;
  }
  if (qword_100907BA8 != -1) {
    swift_once();
  }
  if (byte_1009426D9 == 1 && byte_1009426D8 == 1 && gDADOperationQueue)
  {
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = 0;
    *(unsigned char *)(v13 + 24) = 1;
    sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    uint64_t v21 = static OS_dispatch_queue.main.getter();
    BOOL v14 = (void *)swift_allocObject();
    v14[2] = v13;
    uint64_t v14[3] = a2;
    v14[4] = a3;
    id v28 = sub_1006148E0;
    uint64_t v29 = v14;
    aBlock = _NSConcreteStackBlock;
    uint64_t v25 = 1107296256;
    id v26 = sub_100236C78;
    id v27 = &unk_1008CD4D0;
    id v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock = (void **)_swiftEmptyArrayStorage;
    sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v16 = (void *)v21;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v22);
  }
  else
  {
LABEL_8:
    if (qword_1009070C0 != -1) {
      swift_once();
    }
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a2;
    *(void *)(v17 + 24) = a3;
    id v28 = sub_10061489C;
    uint64_t v29 = (void *)v17;
    aBlock = _NSConcreteStackBlock;
    uint64_t v25 = 1107296256;
    id v26 = sub_100236C78;
    id v27 = &unk_1008CD458;
    BOOL v18 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v23 = _swiftEmptyArrayStorage;
    sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v18);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v22);
  }
  return swift_release();
}

id sub_10060243C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v52 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  unint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907A38 != -1) {
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_10091F858);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Purge ACAccount migration state cache", v13, 2u);
      swift_slowDealloc();
    }

    id v14 = [self sharedInstance];
    id v15 = [v14 accountStore];

    dispatch_group_t v54 = dispatch_group_create();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = 0;
    NSString v17 = String._bridgeToObjectiveC()();
    id v55 = v15;
    id v18 = [v15 accountWithIdentifier:v17];

    id v19 = &off_100776000;
    if (!v18) {
      break;
    }
    id result = [v18 accountType];
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v21 = result;
    id v22 = [result identifier];

    if (!v22)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_12:

      swift_bridgeObjectRelease();
      break;
    }
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (!v25) {
      goto LABEL_12;
    }
    if (v23 == v26 && v25 == v27)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0) {
        goto LABEL_26;
      }
    }
    if (![v18 isActive])
    {
LABEL_26:

      break;
    }
    uint64_t v47 = a4;
    uint64_t v48 = v6;
    uint64_t v49 = v5;
    long long v56 = xmmword_100776E80;
    v57[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v57[1] = v29;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = 0;
    unint64_t v31 = 0;
    *(void *)&long long v58 = v30;
    *((void *)&v58 + 1) = v32;
    while (v31 < (unint64_t)v56)
    {
      os_log_type_t v35 = &v57[2 * v31];
      a4 = *v35;
      uint64_t v6 = v35[1];
      uint64_t v33 = v31 + 1;
      *(void *)&long long aBlock = *v35;
      *((void *)&aBlock + 1) = v6;
      swift_bridgeObjectRetain_n();
      id v36 = [v18 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (!v36)
      {
        long long aBlock = 0u;
        long long v61 = 0u;
        sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
        swift_bridgeObjectRelease();
        if (v33 == 2) {
          goto LABEL_24;
        }
        if ((unint64_t)v56 < 2) {
          break;
        }
        uint64_t v6 = *((void *)&v58 + 1);
        a4 = v58;
        long long aBlock = v58;
        swift_bridgeObjectRetain_n();
        id v37 = [v18 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
        swift_unknownObjectRelease();
        if (!v37)
        {
          long long aBlock = 0u;
          long long v61 = 0u;
          sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
          swift_bridgeObjectRelease();
LABEL_24:
          swift_arrayDestroy();
          uint64_t v6 = v48;
          a4 = v47;
          if ((v5 & 1) == 0)
          {

            uint64_t v5 = v49;
            id v19 = &off_100776000;
            goto LABEL_29;
          }
LABEL_28:
          dispatch_group_t v38 = v54;
          dispatch_group_enter(v54);
          uint64_t v39 = swift_allocObject();
          *(void *)(v39 + 16) = v16;
          *(void *)(v39 + 24) = v38;
          id v62 = sub_100617994;
          unint64_t v63 = (void *)v39;
          *(void *)&long long aBlock = _NSConcreteStackBlock;
          id v19 = &off_100776000;
          *((void *)&aBlock + 1) = 1107296256;
          *(void *)&long long v61 = sub_100688540;
          *((void *)&v61 + 1) = &unk_1008CDED0;
          id v40 = _Block_copy(&aBlock);
          id v41 = v18;
          swift_retain();
          uint64_t v42 = v38;
          swift_release();
          [v55 saveAccount:v41 withCompletionHandler:v40];

          _Block_release(v40);
          uint64_t v5 = v49;
          goto LABEL_29;
        }
        uint64_t v33 = 2;
      }
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v18 setAccountProperty:0 forKey:v34];

      uint64_t v5 = 1;
      unint64_t v31 = 1;
      if (v33 == 2)
      {
        swift_arrayDestroy();
        uint64_t v6 = v48;
        a4 = v47;
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_33:
    swift_once();
  }
LABEL_29:
  if (qword_1009070D8 != -1) {
    swift_once();
  }
  os_log_type_t v43 = (void *)swift_allocObject();
  v43[2] = v50;
  v43[3] = a4;
  v43[4] = v16;
  id v62 = sub_100617948;
  unint64_t v63 = v43;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = *((void *)v19 + 447);
  *(void *)&long long v61 = sub_100236C78;
  *((void *)&v61 + 1) = &unk_1008CDE80;
  id v44 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v59 = _swiftEmptyArrayStorage;
  sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  Swift::String v45 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch_group_t v46 = v54;
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v44);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v45, v5);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v9, v53);
  swift_release();
  return (id)swift_release();
}

uint64_t sub_100602CE0(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = result;
  id result = String.count.getter();
  if (__OFSUB__(result, v1))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  String.index(_:offsetBy:limitedBy:)();

  return String.subscript.getter();
}

uint64_t sub_100602DAC(char a1, char a2, uint64_t a3, uint64_t a4, Swift::Int a5, unint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v20 = a9;
  if (a1 & 1) != 0 || (a2)
  {
    swift_beginAccess();
    if (*(unsigned char *)(a4 + 16) == 1)
    {
      uint64_t v46 = a7;
      uint64_t v21 = self;
      id v22 = [v21 daemonUserDefaults];
      id v23 = [v22 acAccountIdentifiersToMigrateInactivatedCalDavData];

      if (v23)
      {
        uint64_t v24 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v24 = _swiftEmptyArrayStorage;
      }
      uint64_t v25 = sub_10012674C((uint64_t)v24);
      swift_bridgeObjectRelease();
      uint64_t v49 = v25;
      swift_bridgeObjectRetain();
      sub_10031DC68((Swift::Int *)&v48, a5, a6);
      swift_bridgeObjectRelease();
      id v26 = [v21 daemonUserDefaults];
      sub_100209D8C(v49);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      [v26 setAcAccountIdentifiersToMigrateInactivatedCalDavData:isa];

      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain_n();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = a5;
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136446210;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v31, a6, (uint64_t *)&v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "UpdateAccountWithACAccount: inserting to daemonUserDefaults.acAccountIdentifiersToMigrateInactivatedCalDavData {displayAccountID: %{public}s}", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      a7 = v46;
    }
  }
  uint64_t v33 = a12;
  int64_t v34 = *(void *)(a7 + 16);
  if (v34)
  {
    uint64_t v44 = a3;
    uint64_t v45 = a8;
    uint64_t v48 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1001DE058(0, v34, 0);
    os_log_type_t v35 = v48;
    id v36 = (uint64_t *)(a7 + 40);
    do
    {
      uint64_t v38 = *(v36 - 1);
      uint64_t v37 = *v36;
      uint64_t v48 = v35;
      unint64_t v40 = v35[2];
      unint64_t v39 = v35[3];
      swift_bridgeObjectRetain();
      if (v40 >= v39 >> 1)
      {
        sub_1001DE058(v39 > 1, v40 + 1, 1);
        os_log_type_t v35 = v48;
      }
      v36 += 6;
      v35[2] = v40 + 1;
      id v41 = &v35[2 * v40];
      v41[4] = v38;
      v41[5] = v37;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
    uint64_t v20 = a9;
    a8 = v45;
    uint64_t v33 = a12;
    a3 = v44;
  }
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = a8;
  *(void *)(v42 + 24) = a10;
  *(unsigned char *)(v42 + 32) = a11 & 1;
  *(void *)(v42 + 40) = v33;
  *(void *)(v42 + 48) = a13;
  *(unsigned char *)(v42 + 56) = a1 & 1;
  *(unsigned char *)(v42 + 57) = a2 & 1;
  *(void *)(v42 + 64) = a3;
  swift_retain();
  swift_retain();
  swift_errorRetain();
  sub_1005FA48C(v20, (uint64_t)sub_1006173BC, v42);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100603220(uint64_t a1, void *a2, uint64_t a3, Swift::Int a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a7;
  *(void *)(v17 + 24) = a8;
  *(void *)(v17 + 32) = a9;
  *(unsigned char *)(v17 + 40) = a10 & 1;
  *(void *)(v17 + 48) = a11;
  *(void *)(v17 + 56) = a12;
  id v18 = (void *)swift_allocObject();
  v18[2] = a3;
  v18[3] = a4;
  Swift::Int v112 = a4;
  v18[4] = a5;
  v18[5] = a6;
  v18[6] = sub_1006173A0;
  v18[7] = v17;
  id v19 = objc_allocWithZone((Class)REMSaveRequest);
  uint64_t v20 = a7;
  uint64_t v21 = a12;
  swift_retain();
  id v111 = a8;
  swift_retain();
  uint64_t v22 = a3;
  swift_retain();
  unint64_t v113 = a5;
  swift_bridgeObjectRetain();
  uint64_t v23 = a6;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v24 = a1;
  id v116 = [v19 initWithStore:a2];
  uint64_t v25 = *(void *)(a1 + 16);
  if (v25)
  {
    uint64_t v108 = v20;
    v109 = v18;
    uint64_t v110 = a3;
    swift_bridgeObjectRetain();
    unint64_t v26 = 0;
    char type = 0;
    BOOL v117 = 0;
    uint64_t v27 = 1 - v25;
    while (1)
    {
      uint64_t v28 = *(void *)(v24 + v26 + 32);
      unint64_t v29 = *(void *)(v24 + v26 + 40);
      uint64_t v30 = *(void *)(v24 + v26 + 48);
      unint64_t v31 = *(void *)(v24 + v26 + 56);
      id v32 = *(id *)(v24 + v26 + 64);
      int v129 = *(unsigned __int8 *)(v24 + v26 + 73);
      int v124 = *(unsigned __int8 *)(v24 + v26 + 74);
      int v125 = *(unsigned __int8 *)(v24 + v26 + 75);
      int v126 = *(unsigned __int8 *)(v24 + v26 + 76);
      int v127 = *(unsigned __int8 *)(v24 + v26 + 72);
      uint64_t v33 = qword_100907A38;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      if (v33 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_10008E2DC(v34, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain_n();
      os_log_type_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      uint64_t v128 = v30;
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v122 = v27;
        unint64_t v37 = v31;
        unint64_t v38 = v26;
        uint64_t v39 = v28;
        uint64_t v40 = swift_slowAlloc();
        aBlock[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v40 + 4) = sub_1000C51B8(v39, v29, (uint64_t *)aBlock);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "UpdateAccountsWithAccountInfos: Updating account object {accountID: %{public}s}", (uint8_t *)v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v28 = v39;
        unint64_t v26 = v38;
        unint64_t v31 = v37;
        uint64_t v27 = v122;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v41 = sub_10060062C(v28, v29);
      if (!v41)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRetain();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v47))
        {
          unint64_t v31 = v26;
          uint64_t v48 = v28;
          uint64_t v49 = swift_slowAlloc();
          aBlock[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v49 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v50 = v48;
          unint64_t v26 = v31;
          *(void *)(v49 + 4) = sub_1000C51B8(v50, v29, (uint64_t *)aBlock);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "UpdateAccountsWithAccountInfos: Failed to create UUID object, account ignored {accountID: %{public}s}", (uint8_t *)v49, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          if (!v27) {
            goto LABEL_66;
          }
        }
        else
        {

          swift_bridgeObjectRelease_n();
          if (!v27)
          {
LABEL_66:
            swift_bridgeObjectRelease();
            uint64_t v23 = a6;
            uint64_t v22 = v110;
            uint64_t v20 = v108;
            unint64_t v31 = (unint64_t)v109;
            uint64_t v21 = a12;
            Swift::Int v99 = v112;
            if (!v117) {
              goto LABEL_69;
            }
            goto LABEL_73;
          }
        }
        goto LABEL_5;
      }
      uint64_t v42 = v41;
      aBlock[0] = 0;
      id v43 = [a2 fetchAccountWithObjectID:v41 error:aBlock];
      id v44 = aBlock[0];
      if (v43)
      {
        if (v129)
        {
          uint64_t v45 = v43;
LABEL_19:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v45)
          {
            uint64_t v121 = v28;
            v130 = v42;
            id v52 = v43;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v53 = v52;
            dispatch_group_t v54 = Logger.logObject.getter();
            os_log_type_t v55 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v54, v55))
            {
              uint64_t v56 = swift_slowAlloc();
              aBlock[0] = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v56 = 136315650;
              swift_bridgeObjectRetain();
              *(void *)(v56 + 4) = sub_1000C51B8(v128, v31, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v56 + 12) = 2082;
              swift_bridgeObjectRetain();
              *(void *)(v56 + 14) = sub_1000C51B8(v121, v29, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v56 + 22) = 2048;
              id v57 = [v45 type];

              *(void *)(v56 + 24) = v57;
              _os_log_impl((void *)&_mh_execute_header, v54, v55, "UpdateAccountsWithAccountInfos is going to delete account {accountName: %s, accountID: %{public}s, type: %ld}.", (uint8_t *)v56, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            id v69 = [v116 updateAccount:v45];
            [v69 removeFromStore];

            uint64_t v24 = a1;
            if (!v27)
            {
              swift_bridgeObjectRelease();
              char type = 1;
              goto LABEL_72;
            }
            BOOL v117 = 1;
            char type = 1;
            goto LABEL_5;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        id v58 = v43;
        if ([v58 type] != v32)
        {
          id v123 = v32;
          uint64_t v70 = v28;
          v132 = v42;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v71 = v58;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v72 = v71;
          v73 = Logger.logObject.getter();
          os_log_type_t v74 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v73, v74))
          {
            uint64_t v75 = swift_slowAlloc();
            aBlock[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v75 = 136315906;
            swift_bridgeObjectRetain();
            *(void *)(v75 + 4) = sub_1000C51B8(v128, v31, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v75 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v75 + 14) = sub_1000C51B8(v70, v29, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            unint64_t v31 = 2048;
            *(_WORD *)(v75 + 22) = 2048;
            id v76 = [v72 type];

            *(void *)(v75 + 24) = v76;
            *(_WORD *)(v75 + 32) = 2048;
            *(void *)(v75 + 34) = v123;
            _os_log_impl((void *)&_mh_execute_header, v73, v74, "UpdateAccountsWithAccountInfos: Unexpected account type, account ignored. {accountName: %s, accountID: %{public}s, expectedType: %ld, actualType: %ld}", (uint8_t *)v75, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            goto LABEL_64;
          }

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();

LABEL_4:
          uint64_t v24 = a1;
          if (!v27) {
            goto LABEL_66;
          }
          goto LABEL_5;
        }
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        id v59 = v58;
        id v60 = Logger.logObject.getter();
        os_log_type_t v131 = static os_log_type_t.default.getter();
        uint64_t v120 = v28;
        if (os_log_type_enabled(v60, v131))
        {
          uint64_t v61 = swift_slowAlloc();
          aBlock[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v61 = 136315650;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v128, v31, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v61 + 12) = 2082;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v28, v29, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v61 + 22) = 2048;
          [v59 type];

          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v60, v131, "UpdateAccountsWithAccountInfos is updating existing account object {name: %s, accountID: %{public}s, type: %ld}", (uint8_t *)v61, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        id v77 = [v116 updateAccount:v59];
        NSString v78 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v77 setName:v78];
      }
      else
      {
        uint64_t v51 = v44;
        uint64_t v120 = v28;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        uint64_t v45 = 0;
        swift_errorRelease();
        if (v129) {
          goto LABEL_19;
        }
        if ((v127 & 1) == 0)
        {
          id v62 = [objc_allocWithZone((Class)REMAccountTypeHost) initWithType:v32];
          unsigned int v63 = [v62 isCloudKit];

          if (!v63)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v94 = Logger.logObject.getter();
            os_log_type_t v95 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v94, v95))
            {
              uint64_t v96 = swift_slowAlloc();
              v132 = v42;
              aBlock[0] = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v96 = 136315650;
              swift_bridgeObjectRetain();
              *(void *)(v96 + 4) = sub_1000C51B8(v128, v31, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v96 + 12) = 2082;
              swift_bridgeObjectRetain();
              *(void *)(v96 + 14) = sub_1000C51B8(v120, v29, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v96 + 22) = 2082;
              uint64_t v97 = REMAccountType.loggableDescription.getter();
              *(void *)(v96 + 24) = sub_1000C51B8(v97, v98, (uint64_t *)aBlock);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v94, v95, "UpdateAccountsWithAccountInfos won't create inactive accounts unless it is CloudKit {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v96, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

LABEL_64:
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            goto LABEL_4;
          }
        }
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        id v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v64, v65))
        {
          uint64_t v66 = swift_slowAlloc();
          aBlock[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v66 = 136315650;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v128, v31, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v66 + 12) = 2082;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v120, v29, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v66 + 22) = 2082;
          uint64_t v67 = REMAccountType.loggableDescription.getter();
          sub_1000C51B8(v67, v68, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "UpdateAccountsWithAccountInfos is creating account object {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v66, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        NSString v79 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v80 = [v116 __addAccountWithType:v32 name:v79];

        id v77 = v80;
        [v77 setObjectID:v42];
        id v81 = [objc_allocWithZone((Class)REMAccountTypeHost) initWithType:v32];
        LODWORD(v80) = [v81 isCloudKit];

        if (v80)
        {
          [v77 setPersistenceCloudSchemaVersion:20240715];
          char type = 1;
          NSString v78 = v77;
        }
        else
        {
          NSString v78 = String._bridgeToObjectiveC()();
          [v77 setExternalIdentifier:v78];

          char type = 1;
        }
      }

      if (v127 == [v77 inactive])
      {
        [v77 setInactive:v127 ^ 1u];
        id v82 = v77;
        swift_bridgeObjectRetain();
        id v83 = v82;
        v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v84, v85))
        {
          v133 = v42;
          uint64_t v86 = swift_slowAlloc();
          aBlock[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v86 = 136446722;
          [v83 inactive];
          uint64_t v87 = Bool.yesno.getter();
          sub_1000C51B8(v87, v88, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v86 + 12) = 2082;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v120, v29, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v86 + 22) = 2082;
          uint64_t v89 = REMAccountType.loggableDescription.getter();
          sub_1000C51B8(v89, v90, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v42 = v133;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (v124 != 2)
      {
        if ([v77 didChooseToMigrateLocally]
          && [v77 didChooseToMigrate]
          && (v124 & 1) == 0)
        {
          [v77 setDidChooseToMigrateLocally:0];
        }
        [v77 setDidChooseToMigrate:v124 & 1];
      }
      if (v125 != 2) {
        [v77 setDidFinishMigration:v125 & 1];
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v126 != 2) {
        [v77 setDebugSyncDisabled:v126 & 1];
      }
      if (!v117)
      {
        id v91 = [v77 changedKeys];
        uint64_t v92 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v93 = *(void *)(v92 + 16);
        swift_bridgeObjectRelease();
        BOOL v117 = v93 != 0;
        goto LABEL_4;
      }

      if (!v27)
      {
        swift_bridgeObjectRelease();
LABEL_72:
        unint64_t v31 = (unint64_t)v109;
LABEL_73:
        v101 = Logger.logObject.getter();
        os_log_type_t v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          v103 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v103 = 0;
          _os_log_impl((void *)&_mh_execute_header, v101, v102, "UpdateAccountsWithAccountInfos: Saving account object changes", v103, 2u);
          swift_slowDealloc();
        }

        if (qword_1009070D8 == -1)
        {
LABEL_76:
          uint64_t v104 = qword_100942078;
          uint64_t v105 = swift_allocObject();
          *(void *)(v105 + 16) = sub_10061482C;
          *(void *)(v105 + 24) = v31;
          *(unsigned char *)(v105 + 32) = type & 1;
          *(unsigned char *)(v105 + 33) = 1;
          aBlock[4] = sub_10061836C;
          aBlock[5] = (id)v105;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = (id)1107296256;
          aBlock[2] = sub_1000E13D0;
          aBlock[3] = &unk_1008CD980;
          v106 = _Block_copy(aBlock);
          swift_retain();
          swift_release();
          [v116 saveWithQueue:v104 completion:v106];

          _Block_release(v106);
          swift_release();
          goto LABEL_77;
        }
LABEL_79:
        swift_once();
        goto LABEL_76;
      }
      BOOL v117 = 1;
      uint64_t v24 = a1;
LABEL_5:
      ++v27;
      v26 += 48;
      if (v27 == 1)
      {
        __break(1u);
        goto LABEL_79;
      }
    }
  }
  char type = 0;
  Swift::Int v99 = v112;
LABEL_69:
  swift_retain();
  id v100 = v111;
  swift_retain();
  sub_100602DAC(type & 1, 0, 0, v22, v99, v113, v23, v20, v100, a9, a10 & 1, a11, v21);
  swift_release();
  swift_release();

  swift_release();
LABEL_77:
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100604818(void *a1)
{
  id v1 = [a1 identifier];
  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v4 = v3;

    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v2 && v5 == v4)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v2 && v8 == v4) {
          goto LABEL_14;
        }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v10) {
          goto LABEL_32;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v2 && v11 == v4) {
          goto LABEL_14;
        }
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v22) {
          goto LABEL_32;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v2 && v23 == v4)
        {
LABEL_14:
          swift_bridgeObjectRelease_n();
          return 3;
        }
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v24)
        {
LABEL_32:
          swift_bridgeObjectRelease();
          return 3;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v2 && v25 == v4)
        {
LABEL_35:
          swift_bridgeObjectRelease_n();
          return 4;
        }
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v26 & 1) == 0)
        {
          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v2 && v27 == v4) {
            goto LABEL_35;
          }
          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v28 & 1) == 0)
          {
            if (qword_100907A38 != -1) {
              swift_once();
            }
            uint64_t v29 = type metadata accessor for Logger();
            sub_10008E2DC(v29, (uint64_t)qword_10091F858);
            swift_bridgeObjectRetain();
            uint64_t v30 = Logger.logObject.getter();
            os_log_type_t v31 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v30, v31))
            {
              id v32 = (uint8_t *)swift_slowAlloc();
              uint64_t v33 = swift_slowAlloc();
              *(_DWORD *)id v32 = 136315138;
              swift_bridgeObjectRetain();
              sub_1000C51B8(v2, v4, &v33);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v12 = 3;
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v30, v31, "ACAccount type not allowlisted, assume it's CalDAV {typeIdentifier: %s}", v32, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              return v12;
            }

            goto LABEL_14;
          }
        }
        swift_bridgeObjectRelease();
        return 4;
      }
    }
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10091F858);
    swift_bridgeObjectRetain();
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v2, v4, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDAccountUtils: Unexpected call to remAccountType(from:) with ACAccountTypeIdentifierAppleAccount {AC-identifier: %{public}s}", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return _auto_REMAccountTypeForPrimaryCloudKit();
  }
  else
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_10091F858);
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Found ACAccount without identifier", v16, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
}

id sub_100604E08(void *a1)
{
  uint64_t v2 = [a1 displayAccount];
  if (!v2)
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_10091F858);
    id v15 = a1;
    unint64_t v3 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v3, v16))
    {

      return 0;
    }
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    id v18 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 138543362;
    id v19 = [v15 identifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v18 = v19;

    _os_log_impl((void *)&_mh_execute_header, v3, v16, "nonCloudKitAccountIdentifierEnabledForReminders: Can't get display account from input {input: %{public}@}", v17, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_24:

    return 0;
  }
  unint64_t v3 = v2;
  id result = [v2 accountType];
  if (!result)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v5 = result;
  id v6 = [result identifier];

  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_16;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v9)
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v20 = sub_10060095C(v3);
    if (v21)
    {
      uint64_t v22 = (uint64_t)v20;

      return (id)v22;
    }
    goto LABEL_21;
  }
  if (v7 == v10 && v9 == v11)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_21:
  if (![v3 isEnabledForDataclass:ACAccountDataclassReminders]) {
    goto LABEL_24;
  }
  id result = [v3 identifier];
  if (result)
  {
    uint64_t v23 = result;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v22;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100605148(NSObject *a1, void *a2, int a3, int a4, void *a5, uint64_t a6, void *a7, uint64_t a8, char a9, uint64_t a10, NSObject *a11)
{
  id v273 = a5;
  LODWORD(v270) = a4;
  LODWORD(v271) = a3;
  v274 = a2;
  uint64_t v284 = type metadata accessor for Logger();
  v282 = *(void (***)(void, void, void))(v284 - 8);
  uint64_t v15 = __chkstk_darwin(v284);
  uint64_t v17 = (char *)&v268 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  v272 = (char *)&v268 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v268 - v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a6;
  *(void *)(v22 + 24) = a7;
  *(void *)(v22 + 32) = a8;
  int v278 = a9 & 1;
  *(unsigned char *)(v22 + 40) = v278;
  *(void *)(v22 + 48) = a10;
  *(void *)(v22 + 56) = a11;
  uint64_t v280 = a6;
  swift_retain_n();
  id v23 = a7;
  swift_retain_n();
  v281 = v23;
  char v24 = [a1 displayAccount];
  if (!v24) {
    char v24 = a1;
  }
  id v25 = [v24 identifier];
  if (!v25)
  {
    swift_release_n();
    v258 = v281;

    swift_release_n();
    __break(1u);
LABEL_168:
    swift_release_n();
    v259 = v281;

    swift_release_n();
    __break(1u);
  }
  char v26 = v25;
  uint64_t v275 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v285 = v27;

  id v28 = [v24 accountType];
  if (!v28) {
    goto LABEL_168;
  }
  uint64_t v29 = v28;
  uint64_t v276 = a10;
  uint64_t v277 = a8;
  uint64_t v279 = v22;
  v283 = a11;
  id v30 = [v28 identifier];

  if (!v30)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_12:
    unint64_t v36 = v285;
    swift_bridgeObjectRelease();
    if (([v24 isEnabledForDataclass:ACAccountDataclassReminders] & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_13;
  }
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v33) {
    goto LABEL_12;
  }
  unint64_t v36 = v285;
  if (v31 == v34 && v33 == v35)
  {
    swift_bridgeObjectRelease_n();
    if (([v24 isEnabledForDataclass:ACAccountDataclassReminders] & 1) == 0)
    {
LABEL_24:
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v61 = v284;
      uint64_t v62 = sub_10008E2DC(v284, (uint64_t)qword_10091F858);
      unsigned int v63 = v282;
      ((void (**)(char *, uint64_t, uint64_t))v282)[2](v21, v62, v61);
      id v64 = a1;
      os_log_type_t v65 = v24;
      uint64_t v66 = v64;
      uint64_t v67 = v65;
      swift_bridgeObjectRetain();
      a1 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      BOOL v69 = os_log_type_enabled(a1, v68);
      uint64_t v42 = v283;
      if (!v69)
      {

        swift_bridgeObjectRelease_n();
        ((void (*)(char *, uint64_t))v63[1])(v21, v61);
        goto LABEL_32;
      }
      uint64_t v70 = swift_slowAlloc();
      v274 = (void *)swift_slowAlloc();
      *(void *)&long long aBlock = v274;
      *(_DWORD *)uint64_t v70 = 136446722;
      id v71 = [v66 identifier];
      if (v71)
      {
        id v72 = v71;
        uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v42 = v74;

        *(void *)&long long v292 = sub_1000C51B8(v73, (unint64_t)v42, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v70 + 12) = 2082;
        unint64_t v75 = v285;
        swift_bridgeObjectRetain();
        *(void *)&long long v292 = sub_1000C51B8(v275, v75, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v70 + 22) = 2082;
        id v76 = [v67 accountType];
        if (v76)
        {
          id v77 = v76;
          id v78 = [v76 identifier];

          uint64_t v42 = v283;
          if (v78)
          {
            uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v81 = v80;

            *(void *)&long long v292 = sub_1000C51B8(v79, v81, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, a1, v68, "UpdateAccountWithACAccount: ACAccount type is not supported or reminders dataclass is not enabled {accountID: %{public}s, displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v70, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            ((void (*)(char *, uint64_t))v282[1])(v21, v284);
LABEL_32:
            id v58 = v281;
            BOOL v82 = v278 != 0;
            uint64_t v83 = swift_allocObject();
            uint64_t v84 = v277;
            *(void *)(v83 + 16) = v280;
            *(void *)(v83 + 24) = v84;
            *(unsigned char *)(v83 + 32) = v82;
            *(void *)(v83 + 40) = v276;
            *(void *)(v83 + 48) = v42;
            *(_WORD *)(v83 + 56) = 0;
            *(void *)(v83 + 64) = 0;
            swift_retain();
            swift_retain();
            sub_1005FA48C(v58, (uint64_t)sub_1006173BC, v83);
            swift_release();

            swift_release_n();
            swift_release();

            swift_release();
LABEL_158:
            swift_release();

            return;
          }
          goto LABEL_171;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_release_n();
        uint64_t v67 = v281;

        swift_release_n();
        __break(1u);
      }

      swift_release_n();
      uint64_t v67 = v281;

      swift_release_n();
      __break(1u);
LABEL_171:

      swift_release_n();
      v260 = v281;

      swift_release_n();
      __break(1u);
      goto LABEL_172;
    }
LABEL_23:
    int v60 = 1;
    goto LABEL_34;
  }
  char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (([v24 isEnabledForDataclass:ACAccountDataclassReminders] & 1) == 0) {
    goto LABEL_24;
  }
  if (v59) {
    goto LABEL_23;
  }
LABEL_13:
  if ([a1 accountPropertyForKey:REMDA_kCalDAVMobileAccountDelegatePrincipalPath])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v37 = v284;
    uint64_t v38 = sub_10008E2DC(v284, (uint64_t)qword_10091F858);
    uint64_t v39 = v282;
    ((void (**)(char *, uint64_t, uint64_t))v282)[2](v17, v38, v37);
    uint64_t v40 = a1;
    id v41 = v24;
    uint64_t v42 = v40;
    a1 = v41;
    id v43 = Logger.logObject.getter();
    int v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, (os_log_type_t)v44))
    {
      LODWORD(v285) = v44;
      uint64_t v45 = swift_slowAlloc();
      uint64_t v275 = swift_slowAlloc();
      *(void *)&long long aBlock = v275;
      *(_DWORD *)uint64_t v45 = 136446466;
      id v46 = [v42 identifier];
      if (!v46)
      {
LABEL_173:

        swift_release_n();
        v262 = v281;

        swift_release_n();
        __break(1u);
        goto LABEL_174;
      }
      os_log_type_t v47 = v46;
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v50 = v49;

      *(void *)&long long v292 = sub_1000C51B8(v48, v50, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 12) = 2082;
      id v51 = [a1 accountType];
      if (!v51)
      {
LABEL_174:

        swift_release_n();
        v263 = v281;

        swift_release_n();
        __break(1u);
        goto LABEL_175;
      }
      id v52 = v51;
      id v53 = [v51 identifier];

      dispatch_group_t v54 = v283;
      if (!v53)
      {
LABEL_175:

        swift_release_n();
        v264 = v281;

        swift_release_n();
        __break(1u);
        goto LABEL_176;
      }
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v57 = v56;

      *(void *)&long long v292 = sub_1000C51B8(v55, v57, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v285, "UpdateAccountWithACAccount: Skip handling CalDAV delegate account {accountID: %{public}s, displayAccountType: %{public}s}", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v39[1])(v17, v284);
      id v58 = v281;
    }
    else
    {

      ((void (*)(char *, uint64_t))v39[1])(v17, v37);
      id v58 = v281;
      dispatch_group_t v54 = v283;
    }
    BOOL v104 = v278 != 0;
    uint64_t v105 = swift_allocObject();
    uint64_t v106 = v277;
    *(void *)(v105 + 16) = v280;
    *(void *)(v105 + 24) = v106;
    *(unsigned char *)(v105 + 32) = v104;
    *(void *)(v105 + 40) = v276;
    *(void *)(v105 + 48) = v54;
    *(_WORD *)(v105 + 56) = 0;
    *(void *)(v105 + 64) = 0;
    swift_retain();
    swift_retain();
    sub_1005FA48C(v58, (uint64_t)sub_1006173BC, v105);
    swift_release();

    swift_release_n();
    swift_release();

    swift_release();
    goto LABEL_158;
  }
  long long aBlock = 0u;
  long long v289 = 0u;
  sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
  int v60 = 0;
LABEL_34:
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v85 = sub_10008E2DC(v284, (uint64_t)qword_10091F858);
  swift_bridgeObjectRetain_n();
  uint64_t v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v86, v87))
  {
    a1 = swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    LODWORD(a1->isa) = 136446210;
    swift_bridgeObjectRetain();
    *(void *)&long long v292 = sub_1000C51B8(v275, v285, (uint64_t *)&aBlock);
    unint64_t v36 = v285;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "UpdateAccountWithACAccount: Try to update account object {accountID: %{public}s}", (uint8_t *)a1, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v42 = v283;
  uint64_t v88 = swift_allocObject();
  *(unsigned char *)(v88 + 16) = 0;
  unsigned __int8 v89 = [v24 rem_isEligibleForCloudKitReminders];
  v269 = v24;
  if (v60)
  {
    if ((v89 & 1) == 0)
    {
      swift_bridgeObjectRetain_n();
      v107 = Logger.logObject.getter();
      os_log_type_t v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        v109 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)v109 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v292 = sub_1000C51B8(v275, v285, (uint64_t *)&aBlock);
        unint64_t v36 = v285;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "UpdateAccountWithACAccount: Got an Apple ID, not eligible for CloudKit reminders. Will only process iCloud CalDAV account for it {accountID: %{public}s}", v109, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v58 = v281;
      int v124 = sub_10060095C(v269);
      if (v125)
      {
        uint64_t v126 = (uint64_t)v124;
        unint64_t v127 = v125;
        swift_bridgeObjectRetain_n();
        uint64_t v128 = Logger.logObject.getter();
        os_log_type_t v129 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v128, v129))
        {
          v130 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)v130 = 136446210;
          swift_bridgeObjectRetain();
          *(void *)&long long v292 = sub_1000C51B8(v126, v127, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v128, v129, "UpdateAccountWithACAccount: AppleAccount {accountID: %{public}s} is ineligible for CloudKit Reminders, will process it as iCloud CalDAV", v130, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        id v156 = [self accountDescriptionWithACAccount:v269];
        if (v156)
        {
          v157 = v156;
          uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v160 = v159;
        }
        else
        {
          uint64_t v158 = 0x64756F6C4369;
          unint64_t v160 = 0xE600000000000000;
        }
        id v123 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
        unint64_t v174 = v123[2];
        unint64_t v173 = v123[3];
        if (v174 >= v173 >> 1) {
          id v123 = sub_10030BE7C((void *)(v173 > 1), v174 + 1, 1, v123);
        }
        v123[2] = v174 + 1;
        v175 = &v123[6 * v174];
        v175[4] = v126;
        v175[5] = v127;
        v175[6] = v158;
        v175[7] = v160;
        v175[8] = 3;
        *((_DWORD *)v175 + 18) = 33685505;
        *((unsigned char *)v175 + 76) = 2;
        id v58 = v281;
        unint64_t v36 = v285;
      }
      else
      {
        id v123 = _swiftEmptyArrayStorage;
      }
      goto LABEL_156;
    }
    uint64_t v284 = v85;
    *(void *)&long long v292 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v292 + 1) = v90;
    id v91 = [v24 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v91)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v292 = 0u;
      long long v293 = 0u;
    }
    id v58 = v281;
    sub_1000D6CBC((uint64_t)&v292, (uint64_t)&aBlock);
    if (*((void *)&v289 + 1))
    {
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      if (swift_dynamicCast())
      {
        id v145 = v286;
        unsigned int v146 = [v286 BOOLValue];

        goto LABEL_78;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
    }
    if (v271 == 2)
    {
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        v148 = Strong;
        if ([Strong hasPassedBuddyAndSystemDataMigrator])
        {

          if (v270)
          {
            uint64_t v149 = v280;
            swift_retain();
            v150 = v58;
            swift_retain();
            v151 = v269;
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v152 = (uint64_t)v273;
            swift_retain();
            id v153 = v274;
            LOBYTE(v267) = v278;
            sub_1005F5D08((uint64_t)v151, v152, v275, v36, v152, (uint64_t)v151, (uint64_t)v153, 1, v149, v150, v277, v267, v276, (uint64_t)v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100607CEC);
            swift_release();

            swift_release_n();
            swift_release();
            swift_release_n();

            swift_bridgeObjectRelease();
            goto LABEL_158;
          }
        }
        else
        {
          swift_bridgeObjectRetain_n();
          v188 = Logger.logObject.getter();
          os_log_type_t v189 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v188, v189))
          {
            v190 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long aBlock = swift_slowAlloc();
            *(_DWORD *)v190 = 136446210;
            swift_bridgeObjectRetain();
            *(void *)&long long v292 = sub_1000C51B8(v275, v285, (uint64_t *)&aBlock);
            unint64_t v36 = v285;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v188, v189, "UpdateAccountWithACAccount: hasPassedBuddyAndSystemDataMigrator != true, setting shouldFetchMigrationState to false {accountID: %{public}s}", v190, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            id v58 = v281;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
      }
      uint64_t v268 = v88;
      swift_bridgeObjectRetain();
      v243 = Logger.logObject.getter();
      os_log_type_t v244 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v243, v244))
      {
        v245 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)v245 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v292 = sub_1000C51B8(v275, v36, (uint64_t *)&aBlock);
        id v58 = v281;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v243, v244, "UpdateAccountWithACAccount: Will not fetch migration state {accountID: %{public}s}", v245, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v246 = self;
      id v247 = [v246 sharedInstance];
      id v248 = [v247 accountStore];

      id v249 = [v246 sharedInstance];
      uint64_t v250 = swift_allocObject();
      v251 = v269;
      id v252 = v273;
      *(void *)(v250 + 16) = v269;
      *(void *)(v250 + 24) = v252;
      v253 = v274;
      *(void *)(v250 + 32) = v274;
      *(unsigned char *)(v250 + 40) = v270 & 1;
      uint64_t v254 = v279;
      *(void *)(v250 + 48) = sub_1006173A0;
      *(void *)(v250 + 56) = v254;
      v290 = sub_10061421C;
      uint64_t v291 = v250;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v289 = sub_100688540;
      *((void *)&v289 + 1) = &unk_1008CD818;
      v255 = _Block_copy(&aBlock);
      v256 = v251;
      swift_retain();
      swift_retain();
      id v257 = v253;
      swift_release();
      [v249 saveDidChooseToMigrate:0 didFinishMigration:0 toACAccount:v256 inStore:v248 completionHandler:v255];

      _Block_release(v255);
      swift_release();

      swift_release_n();
      swift_release();
      swift_release();

      goto LABEL_158;
    }
    unsigned int v146 = v271 & 1;
LABEL_78:
    *(void *)&long long aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&aBlock + 1) = v154;
    id v155 = [v269 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v155)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v292 = 0u;
      long long v293 = 0u;
    }
    sub_1000D6CBC((uint64_t)&v292, (uint64_t)&aBlock);
    if (*((void *)&v289 + 1))
    {
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      if (swift_dynamicCast()) {
        id v161 = v286;
      }
      else {
        id v161 = 0;
      }
      unsigned __int8 v287 = 0;
      if (v146) {
        goto LABEL_90;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
      id v161 = 0;
      unsigned __int8 v287 = 0;
      if (v146)
      {
LABEL_90:
        uint64_t v162 = swift_unknownObjectWeakLoadStrong();
        if (!v162)
        {
          swift_bridgeObjectRelease();
          v176 = Logger.logObject.getter();
          os_log_type_t v177 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v176, v177))
          {
            v178 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v178 = 0;
            _os_log_impl((void *)&_mh_execute_header, v176, v177, "Store controller missing for checking whether migration has failed", v178, 2u);
            swift_slowDealloc();
            v179 = v269;
          }
          else
          {
            v179 = v176;
            v176 = v269;
          }
          swift_release();
          swift_release();

          swift_release();
          goto LABEL_157;
        }
        v163 = (void *)v162;
        id v164 = sub_10060062C(v275, v36);
        if (!v164)
        {
          swift_bridgeObjectRetain();
          v191 = Logger.logObject.getter();
          os_log_type_t v192 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v191, v192))
          {
            uint64_t v268 = v88;
            v193 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long aBlock = swift_slowAlloc();
            *(_DWORD *)v193 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)&long long v292 = sub_1000C51B8(v275, v36, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v191, v192, "Display ACAccount ID is not an UUID {displayACAccountID: %s}", v193, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();
            id v58 = v281;

            swift_release_n();
            swift_release();
            swift_release();
          }
          else
          {
            swift_release();
            id v58 = v281;

            swift_release_n();
            swift_release();
            swift_release();

            swift_bridgeObjectRelease_n();
          }

          goto LABEL_158;
        }
        v165 = v164;
        sub_1002AF948(v164, v163);
        uint64_t v167 = v166;

        int v168 = *(unsigned __int8 *)(v167 + 88);
        swift_release();
        unsigned __int8 v287 = v168 ^ 1;
        goto LABEL_95;
      }
    }
    int v168 = 1;
LABEL_95:
    v169 = v269;
    if (v161 && ((v168 | [v161 BOOLValue] ^ 1) & 1) == 0)
    {
      *(unsigned char *)(v88 + 16) = 1;
      swift_bridgeObjectRetain_n();
      v170 = Logger.logObject.getter();
      os_log_type_t v171 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v170, v171))
      {
        v172 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)v172 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v292 = sub_1000C51B8(v275, v285, (uint64_t *)&aBlock);
        unint64_t v36 = v285;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v170, v171, "UpdateAccountWithACAccount: setting shouldMigrateInactivatedICloudCalDavData to true {displayAccountID: %{public}s}", v172, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v169 = v269;
    }
    if ([v169 aa_isAccountClass:AAAccountClassPrimary]) {
      uint64_t v194 = _auto_REMAccountTypeForPrimaryCloudKit();
    }
    else {
      uint64_t v194 = 6;
    }
    LODWORD(v273) = v287;
    id v195 = v161;
    swift_bridgeObjectRetain_n();
    id v196 = v195;
    v197 = Logger.logObject.getter();
    os_log_type_t v198 = static os_log_type_t.default.getter();
    BOOL v199 = os_log_type_enabled(v197, v198);
    LODWORD(v272) = v146;
    uint64_t v271 = (uint64_t)v161;
    v282 = (void (**)(void, void, void))v196;
    if (v199)
    {
      uint64_t v268 = v88;
      uint64_t v200 = swift_slowAlloc();
      uint64_t v270 = swift_slowAlloc();
      *(void *)&long long aBlock = v270;
      *(_DWORD *)uint64_t v200 = 136447234;
      swift_bridgeObjectRetain();
      *(void *)&long long v292 = sub_1000C51B8(v275, v36, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v200 + 12) = 2082;
      uint64_t v201 = REMAccountType.loggableDescription.getter();
      *(void *)&long long v292 = sub_1000C51B8(v201, v202, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v200 + 22) = 1024;
      LODWORD(v292) = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v200 + 28) = 1024;
      LODWORD(v292) = v273;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v200 + 34) = 2082;
      if (v161)
      {
        id v203 = v282;
        unsigned __int8 v204 = [v282 BOOLValue];
      }
      else
      {
        unsigned __int8 v204 = 2;
        id v203 = v282;
      }
      LOBYTE(v292) = v204;
      sub_100094134((uint64_t *)&unk_10091DD70);
      uint64_t v205 = String.init<A>(describing:)();
      *(void *)&long long v292 = sub_1000C51B8(v205, v206, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v197, v198, "UpdateAccountWithACAccount: Will process CloudKit account {accountID: %{public}s, type: %{public}s, didChooseToMigrate: %{BOOL}d, shouldShowCloudKitAccount: %{BOOL}d, didFinishMigration: %{public}s}", (uint8_t *)v200, 0x2Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v169 = v269;
      uint64_t v88 = v268;
      id v196 = v203;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v207 = v194;
    v208 = self;
    id v209 = [v208 accountDescriptionWithACAccount:v169];
    if (v209)
    {
      v210 = v209;
      uint64_t v211 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v213 = v212;
    }
    else
    {
      uint64_t v211 = 0;
      unint64_t v213 = 0;
    }
    id v273 = v208;
    swift_beginAccess();
    unsigned __int8 v214 = v287;
    uint64_t v215 = v88;
    if (v271) {
      unsigned __int8 v216 = [v196 BOOLValue];
    }
    else {
      unsigned __int8 v216 = 2;
    }
    uint64_t v217 = 0x64756F6C4369;
    unsigned __int8 v218 = [v169 aa_isAccountClass:AAAccountClassBasic];
    if (v213)
    {
      uint64_t v217 = v211;
      unint64_t v219 = v213;
    }
    else
    {
      unint64_t v219 = 0xE600000000000000;
    }
    swift_bridgeObjectRetain();
    id v123 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v221 = v123[2];
    unint64_t v220 = v123[3];
    if (v221 >= v220 >> 1) {
      id v123 = sub_10030BE7C((void *)(v220 > 1), v221 + 1, 1, v123);
    }
    v123[2] = v221 + 1;
    v222 = &v123[6 * v221];
    unint64_t v36 = v285;
    v222[4] = v275;
    v222[5] = v36;
    v222[6] = v217;
    v222[7] = v219;
    v222[8] = v207;
    *((unsigned char *)v222 + 72) = v214;
    *((unsigned char *)v222 + 73) = 0;
    *((unsigned char *)v222 + 74) = (_BYTE)v272;
    *((unsigned char *)v222 + 75) = v216;
    *((unsigned char *)v222 + 76) = v218;
    v223 = sub_10060095C(v269);
    if (v224)
    {
      uint64_t v225 = (uint64_t)v223;
      unint64_t v226 = v224;
      swift_bridgeObjectRetain_n();
      v227 = Logger.logObject.getter();
      os_log_type_t v228 = static os_log_type_t.default.getter();
      uint64_t v88 = v215;
      if (os_log_type_enabled(v227, v228))
      {
        uint64_t v229 = v225;
        uint64_t v230 = swift_slowAlloc();
        *(void *)&long long v292 = swift_slowAlloc();
        *(_DWORD *)uint64_t v230 = 136446466;
        swift_bridgeObjectRetain();
        id v286 = (id)sub_1000C51B8(v229, v226, (uint64_t *)&v292);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v230 + 12) = 1024;
        LODWORD(v286) = v272;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v227, v228, "UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %{public}s, didChooseToMigrate: %{BOOL}d}", (uint8_t *)v230, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v225 = v229;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v231 = 0x64756F6C4369;
      id v232 = [v273 accountDescriptionWithACAccount:v269];
      if (v232)
      {
        v233 = v232;
        uint64_t v234 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v236 = v235;
      }
      else
      {
        uint64_t v234 = 0;
        unint64_t v236 = 0;
      }
      uint64_t v42 = v283;
      char v237 = v287 ^ 1;
      if (v236) {
        uint64_t v231 = v234;
      }
      else {
        unint64_t v236 = 0xE600000000000000;
      }
      unint64_t v239 = v123[2];
      unint64_t v238 = v123[3];
      if (v239 >= v238 >> 1) {
        id v123 = sub_10030BE7C((void *)(v238 > 1), v239 + 1, 1, v123);
      }
      v123[2] = v239 + 1;
      v240 = &v123[6 * v239];
      v240[4] = v225;
      v240[5] = v226;
      v240[6] = v231;
      v240[7] = v236;
      v240[8] = 3;
      *((unsigned char *)v240 + 72) = v237 & 1;
      *(_DWORD *)((char *)v240 + 73) = 33686016;
      unint64_t v36 = v285;
    }
    else
    {
      uint64_t v42 = v283;
      uint64_t v88 = v215;
    }

    goto LABEL_155;
  }
  id v92 = [v24 accountType];
  if (!v92)
  {
LABEL_172:
    swift_release_n();
    v261 = v281;

    swift_release_n();
    __break(1u);
    goto LABEL_173;
  }
  uint64_t v93 = v92;
  uint64_t v94 = sub_100604818(v92);
  char v96 = v95;

  uint64_t v97 = v282;
  if ((v96 & 1) == 0)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      uint64_t v268 = v88;
      *(void *)&long long aBlock = v101;
      *(_DWORD *)uint64_t v100 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)&long long v292 = sub_1000C51B8(v275, v36, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v100 + 12) = 2082;
      uint64_t v102 = REMAccountType.loggableDescription.getter();
      *(void *)&long long v292 = sub_1000C51B8(v102, v103, (uint64_t *)&aBlock);
      unint64_t v36 = v285;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "UpdateAccountWithACAccount: Will process non-Apple account {displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v100, 0x16u);
      swift_arrayDestroy();
      uint64_t v88 = v268;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    os_log_type_t v131 = v269;
    id v132 = sub_100604E08(v269);
    if (v133)
    {
      uint64_t v134 = (uint64_t)v132;
      unint64_t v135 = v133;
      v136 = v131;
      swift_bridgeObjectRetain_n();
      v137 = v136;
      v138 = Logger.logObject.getter();
      os_log_type_t v139 = static os_log_type_t.default.getter();
      BOOL v140 = os_log_type_enabled(v138, v139);
      unint64_t v285 = v134;
      if (v140)
      {
        uint64_t v268 = v88;
        uint64_t v284 = v94;
        uint64_t v141 = swift_slowAlloc();
        v142 = (void *)swift_slowAlloc();
        v282 = (void (**)(void, void, void))swift_slowAlloc();
        *(void *)&long long aBlock = v282;
        *(_DWORD *)uint64_t v141 = 136446466;
        swift_bridgeObjectRetain();
        *(void *)&long long v292 = sub_1000C51B8(v134, v135, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v141 + 12) = 2114;
        id v143 = [v137 identifier];
        id v144 = v143;
        if (v143) {
          *(void *)&long long v292 = v143;
        }
        else {
          *(void *)&long long v292 = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v142 = v144;

        _os_log_impl((void *)&_mh_execute_header, v138, v139, "UpdateAccountWithACAccount: Resolved non-Apple account identifier enabled for Reminders from displayACAccount: {resolved: %{public}s, displayACAccount: %{public}@}.", (uint8_t *)v141, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v42 = v283;
        uint64_t v94 = v284;
        uint64_t v88 = v268;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v180 = [self accountDescriptionWithACAccount:v137];
      if (v180)
      {
        v181 = v180;
        uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v184 = v183;
      }
      else
      {
        uint64_t v182 = 0;
        unint64_t v184 = 0xE000000000000000;
      }
      id v123 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v186 = v123[2];
      unint64_t v185 = v123[3];
      if (v186 >= v185 >> 1) {
        id v123 = sub_10030BE7C((void *)(v185 > 1), v186 + 1, 1, v123);
      }
      v123[2] = v186 + 1;
      v187 = &v123[6 * v186];
      v187[4] = v285;
      v187[5] = v135;
      v187[6] = v182;
      v187[7] = v184;
      v187[8] = v94;
      *((_DWORD *)v187 + 18) = 33685505;
      *((unsigned char *)v187 + 76) = 2;
      goto LABEL_155;
    }
    goto LABEL_65;
  }
  uint64_t v110 = v272;
  uint64_t v111 = v284;
  ((void (**)(char *, uint64_t, uint64_t))v282)[2](v272, v85, v284);
  Swift::Int v112 = v110;
  a1 = v24;
  unint64_t v113 = Logger.logObject.getter();
  int v114 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v113, (os_log_type_t)v114))
  {

    ((void (*)(char *, uint64_t))v97[1])(v112, v111);
LABEL_65:
    id v123 = _swiftEmptyArrayStorage;
LABEL_155:
    id v58 = v281;
    goto LABEL_156;
  }
  v115 = (uint8_t *)swift_slowAlloc();
  uint64_t v116 = swift_slowAlloc();
  *(void *)&long long aBlock = v116;
  *(_DWORD *)v115 = 136446210;
  id v117 = [a1 accountType];
  if (!v117)
  {
LABEL_176:

    swift_release_n();
    v265 = v281;

    swift_release_n();
    __break(1u);
    goto LABEL_177;
  }
  v118 = v117;
  uint64_t v271 = v116;
  LODWORD(v273) = v114;
  id v119 = [v117 identifier];

  if (v119)
  {
    uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v122 = v121;

    *(void *)&long long v292 = sub_1000C51B8(v120, v122, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v273, "UpdateAccountWithACAccount: Can't figure out REMAccountType for ACAccountType {acAccountType: %{public}s}", v115, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v97[1])(v112, v284);
    id v123 = _swiftEmptyArrayStorage;
    id v58 = v281;
    uint64_t v42 = v283;
    unint64_t v36 = v285;
LABEL_156:
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v241 = v280;
    swift_retain();
    v242 = v58;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100603220((uint64_t)v123, v274, v88, v275, v36, (uint64_t)v123, v241, v242, v277, v278, v276, (uint64_t)v42);
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_release_n();

    swift_release_n();
LABEL_157:
    swift_release_n();
    goto LABEL_158;
  }
LABEL_177:

  swift_release_n();
  v266 = v281;

  swift_release_n();
  __break(1u);
}

uint64_t sub_100607CEC(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a9;
  *(void *)(v18 + 24) = a10;
  *(void *)(v18 + 32) = a11;
  *(unsigned char *)(v18 + 40) = a12 & 1;
  *(void *)(v18 + 48) = a13;
  *(void *)(v18 + 56) = a14;
  uint64_t v19 = v18;
  uint64_t v20 = swift_allocObject();
  uint64_t v48 = a3;
  *(void *)(v20 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  *(void *)(v20 + 32) = a5;
  *(void *)(v20 + 40) = a6;
  *(void *)(v20 + 48) = a7;
  char v49 = a8;
  *(unsigned char *)(v20 + 56) = a8;
  *(void *)(v20 + 64) = sub_1006173A0;
  *(void *)(v20 + 72) = v19;
  swift_retain();
  id v21 = a10;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v56 = a5;
  swift_retain();
  id v22 = a6;
  id v23 = a7;
  swift_retain();
  id v24 = [a1 identifier];
  if (v24)
  {
    id v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong
      && (id v30 = Strong,
          id v31 = [Strong cloudContext],
          v30,
          v31))
    {
      id v50 = v23;
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10008E2DC(v32, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain_n();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_1000C51B8(v26, v28, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Fetch migration state from user record {accountID: %{public}s}", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v23 = v50;
      int v44 = (void *)swift_allocObject();
      v44[2] = v26;
      v44[3] = v28;
      v44[4] = sub_1006147C4;
      v44[5] = v20;
      v44[6] = a1;
      aBlock[4] = (uint64_t)sub_1006147CC;
      aBlock[5] = (uint64_t)v44;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100102758;
      aBlock[3] = (uint64_t)&unk_1008CD8E0;
      uint64_t v45 = _Block_copy(aBlock);
      swift_retain();
      id v46 = a1;
      swift_release();
      [v31 fetchUserRecordWithAccountID:v25 completionHandler:v45];
      _Block_release(v45);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      unint64_t v52 = a4;

      if (qword_100907A38 != -1) {
        swift_once();
      }
      id v55 = v21;
      uint64_t v36 = type metadata accessor for Logger();
      sub_10008E2DC(v36, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_1000C51B8(v26, v28, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Missing cloud context for fetching migration state {accountID: %{public}s}", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v40 = self;
      NSString v41 = String._bridgeToObjectiveC()();
      id v42 = [v40 internalErrorWithDebugDescription:v41];

      swift_retain();
      id v43 = v55;
      swift_retain();
      sub_1006121B4(0, (uint64_t)v42, v48, v52, v56, (uint64_t)v22, (uint64_t)v23, v49 & 1, a9, v43, a11, a12 & 1, a13, a14, (void (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, id, uint64_t, _BYTE, uint64_t, uint64_t))sub_100605148);
      swift_bridgeObjectRelease();
      swift_release();

      swift_release();
      swift_release();
    }
    swift_release();

    return swift_release();
  }
  else
  {
    swift_release();

    swift_release();
    swift_release();

    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

void sub_1006083C8(int a1, int a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, NSObject *a8)
{
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v35 = a5;
  LODWORD(v11) = a2;
  int v42 = a1;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v41 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v39 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_10008E2DC(v16, (uint64_t)qword_10091F858);
  swift_errorRetain();
  swift_errorRetain();
  id v17 = a4;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    int v34 = v11;
    uint64_t v32 = a8;
    uint64_t v33 = v12;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138544130;
    id v21 = [v17 identifier];
    id v22 = v21;
    if (v21) {
      id v43 = v21;
    }
    else {
      id v43 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v22;

    *(_WORD *)(v11 + 12) = 1024;
    LODWORD(v43) = v42 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 18) = 1024;
    LODWORD(v43) = v34 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 24) = 2080;
    if (a3)
    {
      swift_getErrorValue();
      uint64_t v23 = Error.rem_errorDescription.getter();
      unint64_t v25 = v24;
    }
    else
    {
      unint64_t v25 = 0xE300000000000000;
      uint64_t v23 = 7104878;
    }
    id v43 = (void *)sub_1000C51B8(v23, v25, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDAccountUtils: Finished updating account {accountID: %{public}@, didAddAccount: %{BOOL}d, didUpdateAccount: %{BOOL}d, error: %s}", (uint8_t *)v11, 0x22u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v12 = v33;
    a8 = v32;
    LOBYTE(v11) = v34;
    if (v42) {
      goto LABEL_16;
    }
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();

    if (v42) {
      goto LABEL_16;
    }
  }
  if ((v11 & 1) == 0 && !a3)
  {
    dispatch_group_leave(a8);
    return;
  }
LABEL_16:
  if (qword_1009070D8 != -1) {
    swift_once();
  }
  uint64_t v26 = swift_allocObject();
  uint64_t v28 = v35;
  uint64_t v27 = v36;
  *(void *)(v26 + 16) = a3;
  *(void *)(v26 + 24) = v28;
  *(void *)(v26 + 32) = v27;
  *(unsigned char *)(v26 + 40) = v42 & 1;
  *(void *)(v26 + 48) = v37;
  *(unsigned char *)(v26 + 56) = v11 & 1;
  *(void *)(v26 + 64) = a8;
  aBlock[4] = (uint64_t)sub_10061778C;
  aBlock[5] = v26;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100236C78;
  aBlock[3] = (uint64_t)&unk_1008CDD40;
  uint64_t v29 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v30 = a8;
  static DispatchQoS.unspecified.getter();
  id v43 = _swiftEmptyArrayStorage;
  sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  id v31 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v12);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v40);
  swift_release();
}

uint64_t sub_100608A24(char a1, char a2, uint64_t a3, uint64_t a4, Swift::Int a5, unint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, NSObject *a12)
{
  char v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = a9;
  uint64_t v19 = a10;
  if (a1 & 1) != 0 || (a2)
  {
    uint64_t v20 = a8;
    swift_beginAccess();
    a8 = v20;
    if (*(unsigned char *)(a4 + 16) == 1)
    {
      char v46 = v16;
      id v21 = self;
      id v22 = [v21 daemonUserDefaults];
      id v23 = [v22 acAccountIdentifiersToMigrateInactivatedCalDavData];

      if (v23)
      {
        unint64_t v24 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        unint64_t v24 = _swiftEmptyArrayStorage;
      }
      uint64_t v25 = sub_10012674C((uint64_t)v24);
      swift_bridgeObjectRelease();
      uint64_t v50 = v25;
      swift_bridgeObjectRetain();
      sub_10031DC68((Swift::Int *)&v49, a5, a6);
      swift_bridgeObjectRelease();
      id v26 = [v21 daemonUserDefaults];
      sub_100209D8C(v50);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      [v26 setAcAccountIdentifiersToMigrateInactivatedCalDavData:isa];

      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain_n();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        id v31 = (uint8_t *)swift_slowAlloc();
        char v49 = (void *)swift_slowAlloc();
        *(_DWORD *)id v31 = 136446210;
        swift_bridgeObjectRetain();
        sub_1000C51B8(a5, a6, (uint64_t *)&v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "UpdateAccountWithACAccount: inserting to daemonUserDefaults.acAccountIdentifiersToMigrateInactivatedCalDavData {displayAccountID: %{public}s}", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v19 = a10;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      char v16 = v46;
      uint64_t v18 = a9;
      a8 = v20;
    }
  }
  uint64_t v32 = a7;
  int64_t v33 = *(void *)(a7 + 16);
  if (v33)
  {
    char v47 = v16;
    uint64_t v44 = a3;
    uint64_t v45 = v19;
    int v42 = a8;
    char v49 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1001DE058(0, v33, 0);
    int v34 = v49;
    uint64_t v35 = (uint64_t *)(v32 + 40);
    do
    {
      uint64_t v37 = *(v35 - 1);
      uint64_t v36 = *v35;
      char v49 = v34;
      unint64_t v39 = v34[2];
      unint64_t v38 = v34[3];
      swift_bridgeObjectRetain();
      if (v39 >= v38 >> 1)
      {
        sub_1001DE058(v38 > 1, v39 + 1, 1);
        int v34 = v49;
      }
      v35 += 6;
      v34[2] = v39 + 1;
      uint64_t v40 = &v34[2 * v39];
      v40[4] = v37;
      v40[5] = v36;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
    a8 = v42;
    a3 = v44;
    uint64_t v19 = v45;
    uint64_t v17 = a11;
    char v16 = v47;
  }
  sub_1006083C8(a1 & 1, v16 & 1, a3, a8, v18, v19, v17, a12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100608E50(uint64_t a1, void *a2, uint64_t a3, Swift::Int a4, unint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a10;
  v17[6] = a11;
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a3;
  v18[3] = a4;
  Swift::Int v108 = a4;
  v18[4] = a5;
  v18[5] = a6;
  v18[6] = sub_1006176AC;
  v18[7] = v17;
  id v19 = objc_allocWithZone((Class)REMSaveRequest);
  id v107 = a7;
  uint64_t v109 = a8;
  swift_retain();
  uint64_t v20 = a3;
  swift_retain();
  uint64_t v21 = a1;
  swift_retain();
  id v106 = a11;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v113 = [v19 initWithStore:a2];
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22)
  {
    uint64_t v102 = v18;
    uint64_t v103 = a3;
    uint64_t v104 = a6;
    unint64_t v105 = a5;
    swift_bridgeObjectRetain();
    uint64_t v23 = 0;
    char v110 = 0;
    BOOL v114 = 0;
    unint64_t v24 = (void *)(1 - v22);
    while (1)
    {
      uint64_t v25 = *(void *)(v21 + v23 + 32);
      unint64_t v26 = *(void *)(v21 + v23 + 40);
      uint64_t v28 = *(void *)(v21 + v23 + 48);
      unint64_t v27 = *(void *)(v21 + v23 + 56);
      id v123 = *(id *)(v21 + v23 + 64);
      int v29 = *(unsigned __int8 *)(v21 + v23 + 73);
      int v117 = *(unsigned __int8 *)(v21 + v23 + 74);
      int v118 = *(unsigned __int8 *)(v21 + v23 + 75);
      int v119 = *(unsigned __int8 *)(v21 + v23 + 76);
      int v120 = *(unsigned __int8 *)(v21 + v23 + 72);
      uint64_t v30 = qword_100907A38;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_10008E2DC(v31, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain_n();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      uint64_t v125 = v25;
      uint64_t v121 = v28;
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = swift_slowAlloc();
        aBlock[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v34 + 4) = sub_1000C51B8(v25, v26, (uint64_t *)aBlock);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "UpdateAccountsWithAccountInfos: Updating account object {accountID: %{public}s}", (uint8_t *)v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v35 = sub_10060062C(v25, v26);
      if (v35)
      {
        uint64_t v25 = (uint64_t)v35;
        aBlock[0] = 0;
        id v36 = [a2 fetchAccountWithObjectID:v35 error:aBlock];
        id v37 = aBlock[0];
        if (v36)
        {
          if (v29)
          {
            uint64_t v124 = v23;
            unint64_t v38 = v36;
            goto LABEL_19;
          }
          id v50 = v36;
          if ([v50 type] == v123)
          {
            uint64_t v116 = v36;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            id v51 = v50;
            unint64_t v52 = Logger.logObject.getter();
            os_log_type_t v53 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v52, v53))
            {
              uint64_t v54 = swift_slowAlloc();
              aBlock[0] = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v54 = 136315650;
              swift_bridgeObjectRetain();
              sub_1000C51B8(v121, v27, (uint64_t *)aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v54 + 12) = 2082;
              swift_bridgeObjectRetain();
              sub_1000C51B8(v125, v26, (uint64_t *)aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v54 + 22) = 2048;
              [v51 type];

              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v52, v53, "UpdateAccountsWithAccountInfos is updating existing account object {name: %s, accountID: %{public}s, type: %ld}", (uint8_t *)v54, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v21 = a1;
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            id v70 = [v113 updateAccount:v51];
            NSString v71 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v70 setName:v71];

LABEL_45:
            if (v120 == [v70 inactive])
            {
              [v70 setInactive:v120 ^ 1u];
              id v76 = v70;
              swift_bridgeObjectRetain();
              id v77 = v76;
              id v78 = Logger.logObject.getter();
              os_log_type_t v122 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v78, v122))
              {
                uint64_t v79 = swift_slowAlloc();
                aBlock[0] = (id)swift_slowAlloc();
                *(_DWORD *)uint64_t v79 = 136446722;
                [v77 inactive];
                uint64_t v80 = Bool.yesno.getter();
                sub_1000C51B8(v80, v81, (uint64_t *)aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v79 + 12) = 2082;
                swift_bridgeObjectRetain();
                sub_1000C51B8(v125, v26, (uint64_t *)aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v79 + 22) = 2082;
                uint64_t v82 = REMAccountType.loggableDescription.getter();
                sub_1000C51B8(v82, v83, (uint64_t *)aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              uint64_t v21 = a1;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            if (v117 != 2)
            {
              if ([v70 didChooseToMigrateLocally]
                && [v70 didChooseToMigrate]
                && (v117 & 1) == 0)
              {
                [v70 setDidChooseToMigrateLocally:0];
              }
              [v70 setDidChooseToMigrate:v117 & 1];
            }
            if (v118 != 2) {
              [v70 setDidFinishMigration:v118 & 1];
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v119 != 2) {
              [v70 setDebugSyncDisabled:v119 & 1];
            }
            if (v114)
            {

              if (!v24)
              {
                swift_bridgeObjectRelease();
                unint64_t v24 = v102;
                LOBYTE(v25) = v110;
                goto LABEL_76;
              }
              BOOL v114 = 1;
            }
            else
            {
              id v84 = [v70 changedKeys];
              uint64_t v85 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v86 = *(void *)(v85 + 16);
              swift_bridgeObjectRelease();
              BOOL v114 = v86 != 0;
              if (!v24) {
                goto LABEL_70;
              }
            }
            goto LABEL_4;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v64 = v50;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v65 = v64;
          uint64_t v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v66, v67))
          {
            uint64_t v68 = swift_slowAlloc();
            uint64_t v111 = (void *)v25;
            LOBYTE(v25) = v23;
            aBlock[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v68 = 136315906;
            swift_bridgeObjectRetain();
            *(void *)(v68 + 4) = sub_1000C51B8(v121, v27, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v68 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v68 + 14) = sub_1000C51B8(v125, v26, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v68 + 22) = 2048;
            id v69 = [v65 type];

            *(void *)(v68 + 24) = v69;
            *(_WORD *)(v68 + 32) = 2048;
            *(void *)(v68 + 34) = v123;
            _os_log_impl((void *)&_mh_execute_header, v66, v67, "UpdateAccountsWithAccountInfos: Unexpected account type, account ignored. {accountName: %s, accountID: %{public}s, expectedType: %ld, actualType: %ld}", (uint8_t *)v68, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            if (!v24) {
              goto LABEL_70;
            }
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();

            if (!v24) {
              goto LABEL_70;
            }
          }
        }
        else
        {
          id v43 = v37;
          uint64_t v116 = 0;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          unint64_t v38 = 0;
          swift_errorRelease();
          if (v29)
          {
            uint64_t v124 = v23;
            id v36 = 0;
LABEL_19:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v38)
            {
              id v44 = v36;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v45 = v44;
              char v46 = Logger.logObject.getter();
              os_log_type_t v47 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v46, v47))
              {
                uint64_t v48 = swift_slowAlloc();
                aBlock[0] = (id)swift_slowAlloc();
                *(_DWORD *)uint64_t v48 = 136315650;
                swift_bridgeObjectRetain();
                *(void *)(v48 + 4) = sub_1000C51B8(v121, v27, (uint64_t *)aBlock);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v48 + 12) = 2082;
                swift_bridgeObjectRetain();
                *(void *)(v48 + 14) = sub_1000C51B8(v125, v26, (uint64_t *)aBlock);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v48 + 22) = 2048;
                id v49 = [v38 type];

                *(void *)(v48 + 24) = v49;
                _os_log_impl((void *)&_mh_execute_header, v46, v47, "UpdateAccountsWithAccountInfos is going to delete account {accountName: %s, accountID: %{public}s, type: %ld}.", (uint8_t *)v48, 0x20u);
                swift_arrayDestroy();
                uint64_t v21 = a1;
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
              }
              id v63 = [v113 updateAccount:v38];
              [v63 removeFromStore];

              uint64_t v23 = v124;
              if (!v24)
              {
                swift_bridgeObjectRelease();
                LOBYTE(v25) = 1;
                unint64_t v24 = v102;
                goto LABEL_76;
              }
              BOOL v114 = 1;
              char v110 = 1;
            }
            else
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = v124;
              if (!v24) {
                goto LABEL_70;
              }
            }
            goto LABEL_4;
          }
          id v55 = v123;
          if ((v120 & 1) != 0
            || (id v56 = [objc_allocWithZone((Class)REMAccountTypeHost) initWithType:v123],
                unsigned int v57 = [v56 isCloudKit],
                v56,
                v57))
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            uint64_t v58 = Logger.logObject.getter();
            os_log_type_t v59 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v58, v59))
            {
              uint64_t v60 = swift_slowAlloc();
              aBlock[0] = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v60 = 136315650;
              swift_bridgeObjectRetain();
              sub_1000C51B8(v121, v27, (uint64_t *)aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v60 + 12) = 2082;
              swift_bridgeObjectRetain();
              sub_1000C51B8(v125, v26, (uint64_t *)aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v60 + 22) = 2082;
              uint64_t v61 = REMAccountType.loggableDescription.getter();
              sub_1000C51B8(v61, v62, (uint64_t *)aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              id v55 = v123;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v58, v59, "UpdateAccountsWithAccountInfos is creating account object {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v60, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            NSString v72 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v73 = [v113 __addAccountWithType:v55 name:v72];

            id v70 = v73;
            [v70 setObjectID:v25];
            id v74 = [objc_allocWithZone((Class)REMAccountTypeHost) initWithType:v55];
            unsigned int v75 = [v74 isCloudKit];

            uint64_t v21 = a1;
            if (v75)
            {
              [v70 setPersistenceCloudSchemaVersion:20240715];
              char v110 = 1;
              NSString v71 = v70;
            }
            else
            {
              NSString v71 = String._bridgeToObjectiveC()();
              [v70 setExternalIdentifier:v71];

              char v110 = 1;
            }
            goto LABEL_45;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          os_log_type_t v87 = Logger.logObject.getter();
          os_log_type_t v88 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v87, v88))
          {
            uint64_t v89 = swift_slowAlloc();
            aBlock[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v89 = 136315650;
            swift_bridgeObjectRetain();
            *(void *)(v89 + 4) = sub_1000C51B8(v121, v27, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v89 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v89 + 14) = sub_1000C51B8(v125, v26, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v89 + 22) = 2082;
            uint64_t v90 = REMAccountType.loggableDescription.getter();
            *(void *)(v89 + 24) = sub_1000C51B8(v90, v91, (uint64_t *)aBlock);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v87, v88, "UpdateAccountsWithAccountInfos won't create inactive accounts unless it is CloudKit {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v89, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }

          if (!v24)
          {
LABEL_70:
            swift_bridgeObjectRelease();
            uint64_t v92 = v104;
            a5 = v105;
            unint64_t v24 = v102;
            uint64_t v20 = v103;
            LOBYTE(v25) = v110;
            if (!v114) {
              goto LABEL_73;
            }
LABEL_76:
            char v95 = Logger.logObject.getter();
            os_log_type_t v96 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v95, v96))
            {
              uint64_t v97 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v97 = 0;
              _os_log_impl((void *)&_mh_execute_header, v95, v96, "UpdateAccountsWithAccountInfos: Saving account object changes", v97, 2u);
              swift_slowDealloc();
            }

            if (qword_1009070D8 == -1)
            {
LABEL_79:
              uint64_t v98 = qword_100942078;
              uint64_t v99 = swift_allocObject();
              *(void *)(v99 + 16) = sub_10061482C;
              *(void *)(v99 + 24) = v24;
              *(unsigned char *)(v99 + 32) = v25 & 1;
              *(unsigned char *)(v99 + 33) = 1;
              aBlock[4] = sub_10061836C;
              aBlock[5] = (id)v99;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = (id)1107296256;
              aBlock[2] = sub_1000E13D0;
              aBlock[3] = &unk_1008CDCF0;
              uint64_t v100 = _Block_copy(aBlock);
              swift_retain();
              swift_release();
              [v113 saveWithQueue:v98 completion:v100];

              _Block_release(v100);
              swift_release();
              swift_release();
              goto LABEL_80;
            }
LABEL_82:
            swift_once();
            goto LABEL_79;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRetain();
        unint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = swift_slowAlloc();
          int v42 = (void *)swift_slowAlloc();
          LOBYTE(v25) = (_BYTE)v42;
          aBlock[0] = v42;
          *(_DWORD *)uint64_t v41 = 136446210;
          swift_bridgeObjectRetain();
          *(void *)(v41 + 4) = sub_1000C51B8(v125, v26, (uint64_t *)aBlock);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "UpdateAccountsWithAccountInfos: Failed to create UUID object, account ignored {accountID: %{public}s}", (uint8_t *)v41, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          if (!v24) {
            goto LABEL_70;
          }
        }
        else
        {

          swift_bridgeObjectRelease_n();
          if (!v24) {
            goto LABEL_70;
          }
        }
      }
LABEL_4:
      unint64_t v24 = (void *)((char *)v24 + 1);
      v23 += 48;
      if (v24 == (void *)1)
      {
        __break(1u);
        goto LABEL_82;
      }
    }
  }
  LOBYTE(v25) = 0;
  uint64_t v92 = a6;
LABEL_73:
  id v93 = v107;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v94 = v106;
  sub_100608A24(v25 & 1, 0, 0, v20, v108, a5, v92, v93, v109, a9, a10, v94);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();

LABEL_80:
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10060A468(void *a1, void *a2, int a3, int a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v277 = a5;
  LODWORD(v275) = a4;
  LODWORD(v276) = a3;
  int v278 = a2;
  uint64_t v287 = type metadata accessor for Logger();
  uint64_t v14 = *(NSObject **)(v287 - 8);
  __chkstk_darwin(v287);
  char v16 = ((char *)&v273 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  id v19 = (char *)&v273 - v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v273 - v21;
  uint64_t v23 = (void *)swift_allocObject();
  void v23[2] = a6;
  v23[3] = a7;
  v23[4] = a8;
  v23[5] = a9;
  uint64_t v280 = v23;
  v23[6] = a10;
  id v24 = a6;
  uint64_t v283 = a7;
  swift_retain_n();
  uint64_t v281 = a8;
  swift_retain_n();
  uint64_t v282 = a9;
  swift_retain_n();
  id v25 = a10;
  id v26 = v24;
  id v27 = v25;
  unint64_t v285 = v26;
  uint64_t v28 = v27;
  int v29 = [a1 displayAccount];
  if (!v29) {
    int v29 = a1;
  }
  id v30 = [v29 identifier];
  if (!v30)
  {

    swift_release_n();
    swift_release_n();
    swift_release_n();
    id v257 = v285;

    __break(1u);
LABEL_170:
    v258 = v286;

    swift_release_n();
    swift_release_n();
    swift_release_n();
    v259 = v285;

    __break(1u);
  }
  uint64_t v31 = v30;
  uint64_t v284 = v14;
  id v286 = v28;
  uint64_t v279 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v288 = v32;

  id v33 = [v29 accountType];
  if (!v33) {
    goto LABEL_170;
  }
  uint64_t v34 = v33;
  id v35 = [v33 identifier];

  if (!v35)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_12:
    swift_bridgeObjectRelease();
    if (([v29 isEnabledForDataclass:ACAccountDataclassReminders] & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_13;
  }
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;

  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v38) {
    goto LABEL_12;
  }
  if (v36 == v39 && v38 == v40)
  {
    swift_bridgeObjectRelease_n();
    if (([v29 isEnabledForDataclass:ACAccountDataclassReminders] & 1) == 0)
    {
LABEL_24:
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v67 = v287;
      uint64_t v68 = sub_10008E2DC(v287, (uint64_t)qword_10091F858);
      id v69 = v284;
      ((void (*)(char *, uint64_t, uint64_t))v284[2].isa)(v22, v68, v67);
      id v70 = a1;
      NSString v71 = v29;
      id v48 = v70;
      id v49 = v71;
      swift_bridgeObjectRetain();
      char v16 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v16, v72))
      {

        swift_bridgeObjectRelease_n();
        ((void (*)(char *, uint64_t))v69[1].isa)(v22, v67);
        goto LABEL_47;
      }
      uint64_t v73 = swift_slowAlloc();
      int v278 = (void *)swift_slowAlloc();
      *(void *)&long long aBlock = v278;
      *(_DWORD *)uint64_t v73 = 136446722;
      id v74 = [v48 identifier];
      if (v74)
      {
        unsigned int v75 = v74;
        uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v78 = v77;

        *(void *)&long long v295 = sub_1000C51B8(v76, v78, (uint64_t *)&aBlock);
        id v69 = &v295 + 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v73 + 12) = 2082;
        id v48 = (id)(v73 + 14);
        unint64_t v79 = (unint64_t)v288;
        swift_bridgeObjectRetain();
        *(void *)&long long v295 = sub_1000C51B8(v279, v79, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v73 + 22) = 2082;
        id v80 = [v49 accountType];
        if (v80)
        {
          id v48 = v80;
          id v69 = [v80 identifier];

          unint64_t v81 = v284;
          if (v69)
          {
            uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v84 = v83;

            *(void *)&long long v295 = sub_1000C51B8(v82, v84, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v16, v72, "UpdateAccountWithACAccount: ACAccount type is not supported or reminders dataclass is not enabled {accountID: %{public}s, displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v73, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            ((void (*)(char *, uint64_t))v81[1].isa)(v22, v287);
LABEL_47:
            uint64_t v61 = v281;
            goto LABEL_48;
          }
          goto LABEL_173;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        v260 = v286;

        swift_release_n();
        swift_release_n();
        swift_release_n();
        id v49 = v285;

        __break(1u);
      }

      v261 = v286;
      swift_release_n();
      swift_release_n();
      swift_release_n();
      id v49 = v285;

      __break(1u);
LABEL_173:

      v262 = v286;
      swift_release_n();
      swift_release_n();
      swift_release_n();
      v263 = v285;

      __break(1u);
      goto LABEL_174;
    }
LABEL_23:
    int v66 = 1;
    unint64_t v42 = (unint64_t)v288;
    goto LABEL_33;
  }
  char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (([v29 isEnabledForDataclass:ACAccountDataclassReminders] & 1) == 0) {
    goto LABEL_24;
  }
  if (v65) {
    goto LABEL_23;
  }
LABEL_13:
  id v41 = [a1 accountPropertyForKey:REMDA_kCalDAVMobileAccountDelegatePrincipalPath];
  unint64_t v42 = (unint64_t)v288;
  if (v41)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
    uint64_t v43 = v287;
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v44 = sub_10008E2DC(v43, (uint64_t)qword_10091F858);
    id v45 = v284;
    ((void (*)(NSObject *, uint64_t, uint64_t))v284[2].isa)(v16, v44, v43);
    id v46 = a1;
    os_log_type_t v47 = v29;
    id v48 = v46;
    id v49 = v47;
    id v50 = Logger.logObject.getter();
    int v51 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v50, (os_log_type_t)v51))
    {

      ((void (*)(NSObject *, uint64_t))v45[1].isa)(v16, v43);
      goto LABEL_47;
    }
    LODWORD(v288) = v51;
    uint64_t v52 = swift_slowAlloc();
    uint64_t v279 = swift_slowAlloc();
    *(void *)&long long aBlock = v279;
    *(_DWORD *)uint64_t v52 = 136446466;
    id v53 = [v48 identifier];
    if (v53)
    {
      uint64_t v54 = v53;
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v57 = v56;

      *(void *)&long long v295 = sub_1000C51B8(v55, v57, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2082;
      id v58 = [v49 accountType];
      if (v58)
      {
        os_log_type_t v59 = v58;
        id v60 = [v58 identifier];

        uint64_t v61 = v281;
        if (v60)
        {
          uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v64 = v63;

          *(void *)&long long v295 = sub_1000C51B8(v62, v64, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v288, "UpdateAccountWithACAccount: Skip handling CalDAV delegate account {accountID: %{public}s, displayAccountType: %{public}s}", (uint8_t *)v52, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          ((void (*)(NSObject *, uint64_t))v45[1].isa)(v16, v287);
LABEL_48:
          uint64_t v104 = v285;
          id v69 = v286;
          sub_1006083C8(0, 0, 0, v285, v283, v61, v282, v286);
          swift_release();
          swift_release();
          swift_release();

          swift_release();
LABEL_158:

          goto LABEL_159;
        }
        goto LABEL_177;
      }
LABEL_176:

      v265 = v286;
      swift_release_n();
      swift_release_n();
      swift_release_n();
      id v49 = v285;

      __break(1u);
LABEL_177:

      v266 = v286;
      swift_release_n();
      swift_release_n();
      swift_release_n();
      uint64_t v267 = v285;

      __break(1u);
      goto LABEL_178;
    }
LABEL_175:

    v264 = v286;
    swift_release_n();
    swift_release_n();
    swift_release_n();
    id v49 = v285;

    __break(1u);
    goto LABEL_176;
  }
  long long aBlock = 0u;
  long long v292 = 0u;
  sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
  int v66 = 0;
LABEL_33:
  uint64_t v85 = v287;
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v86 = sub_10008E2DC(v85, (uint64_t)qword_10091F858);
  swift_bridgeObjectRetain_n();
  char v16 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.default.getter();
  id v48 = (id)v87;
  if (os_log_type_enabled(v16, v87))
  {
    os_log_type_t v88 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v88 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)&long long v295 = sub_1000C51B8(v279, (unint64_t)v288, (uint64_t *)&aBlock);
    unint64_t v42 = (unint64_t)v288;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v48, "UpdateAccountWithACAccount: Try to update account object {accountID: %{public}s}", v88, 0xCu);
    swift_arrayDestroy();
    uint64_t v85 = v287;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v69 = v286;
  uint64_t v274 = swift_allocObject();
  *(unsigned char *)(v274 + 16) = 0;
  unsigned __int8 v89 = [v29 rem_isEligibleForCloudKitReminders];
  if (v66)
  {
    if (v89)
    {
      *(void *)&long long v295 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v295 + 1) = v90;
      id v91 = [v29 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v91)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v295 = 0u;
        long long v296 = 0u;
      }
      v137 = v285;
      uint64_t v138 = v277;
      sub_1000D6CBC((uint64_t)&v295, (uint64_t)&aBlock);
      if (*((void *)&v292 + 1))
      {
        sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
        if (swift_dynamicCast())
        {
          id v139 = v289;
          int v140 = [v289 BOOLValue];

          goto LABEL_78;
        }
      }
      else
      {
        sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
      }
      if (v276 == 2)
      {
        uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
        uint64_t v142 = v283;
        if (Strong)
        {
          id v143 = Strong;
          if ([Strong hasPassedBuddyAndSystemDataMigrator])
          {

            if (v275)
            {
              id v144 = v137;
              swift_retain();
              uint64_t v145 = v281;
              swift_retain();
              uint64_t v146 = v282;
              swift_retain();
              v147 = v69;
              v148 = v29;
              uint64_t v149 = v145;
              v150 = v148;
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
              id v151 = v278;
              v272 = v147;
              uint64_t v104 = v285;
              sub_1005F5C90(v150, v138, v279, v42, v138, v150, v151, 1, v144, v142, v149, v146, v272);
              swift_release();
              swift_release();
              swift_release();

              swift_release();
              swift_release_n();

              swift_bridgeObjectRelease();
LABEL_159:
              swift_release();
              swift_release();
              swift_release();

              return;
            }
          }
          else
          {
            swift_bridgeObjectRetain_n();
            unint64_t v186 = Logger.logObject.getter();
            os_log_type_t v187 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v186, v187))
            {
              v188 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long aBlock = swift_slowAlloc();
              *(_DWORD *)v188 = 136446210;
              swift_bridgeObjectRetain();
              *(void *)&long long v295 = sub_1000C51B8(v279, (unint64_t)v288, (uint64_t *)&aBlock);
              id v69 = v286;
              unint64_t v42 = (unint64_t)v288;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v186, v187, "UpdateAccountWithACAccount: hasPassedBuddyAndSystemDataMigrator != true, setting shouldFetchMigrationState to false {accountID: %{public}s}", v188, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
          }
        }
        swift_bridgeObjectRetain();
        os_log_type_t v244 = Logger.logObject.getter();
        os_log_type_t v245 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v244, v245))
        {
          v246 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)v246 = 136446210;
          swift_bridgeObjectRetain();
          *(void *)&long long v295 = sub_1000C51B8(v279, v42, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v244, v245, "UpdateAccountWithACAccount: Will not fetch migration state {accountID: %{public}s}", v246, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        id v247 = self;
        id v248 = [v247 sharedInstance];
        id v249 = [v248 accountStore];

        id v250 = [v247 sharedInstance];
        uint64_t v251 = swift_allocObject();
        *(void *)(v251 + 16) = v29;
        *(void *)(v251 + 24) = v138;
        id v252 = v278;
        *(void *)(v251 + 32) = v278;
        *(unsigned char *)(v251 + 40) = v275 & 1;
        v253 = v280;
        *(void *)(v251 + 48) = sub_1006176AC;
        *(void *)(v251 + 56) = v253;
        long long v293 = sub_10061421C;
        uint64_t v294 = v251;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v292 = sub_100688540;
        *((void *)&v292 + 1) = &unk_1008CDBB0;
        uint64_t v254 = _Block_copy(&aBlock);
        v255 = v29;
        swift_retain();
        swift_retain();
        id v256 = v252;
        swift_release();
        [v250 saveDidChooseToMigrate:0 didFinishMigration:0 toACAccount:v255 inStore:v249 completionHandler:v254];

        _Block_release(v254);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v104 = v285;

        swift_release();
        swift_release();

        goto LABEL_159;
      }
      int v140 = v276 & 1;
LABEL_78:
      *(void *)&long long aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&aBlock + 1) = v152;
      id v153 = [v29 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v153)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v295 = 0u;
        long long v296 = 0u;
      }
      sub_1000D6CBC((uint64_t)&v295, (uint64_t)&aBlock);
      if (*((void *)&v292 + 1))
      {
        sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
        if (swift_dynamicCast()) {
          id v159 = v289;
        }
        else {
          id v159 = 0;
        }
        unsigned __int8 v290 = 0;
        if (v140) {
          goto LABEL_90;
        }
      }
      else
      {
        sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
        id v159 = 0;
        unsigned __int8 v290 = 0;
        if (v140)
        {
LABEL_90:
          uint64_t v160 = swift_unknownObjectWeakLoadStrong();
          if (!v160)
          {
            swift_bridgeObjectRelease();
            unint64_t v174 = Logger.logObject.getter();
            os_log_type_t v175 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v174, v175))
            {
              v176 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v176 = 0;
              _os_log_impl((void *)&_mh_execute_header, v174, v175, "Store controller missing for checking whether migration has failed", v176, 2u);
              swift_slowDealloc();
              os_log_type_t v177 = v29;
            }
            else
            {
              os_log_type_t v177 = v174;
              unint64_t v174 = v29;
            }
            uint64_t v104 = v285;
            swift_release();
            swift_release();

            swift_release();
            swift_release();
            swift_release();

            goto LABEL_159;
          }
          id v161 = (void *)v160;
          id v162 = sub_10060062C(v279, v42);
          if (!v162)
          {
            id v288 = v159;
            swift_bridgeObjectRetain();
            os_log_type_t v189 = Logger.logObject.getter();
            os_log_type_t v190 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v189, v190))
            {
              v191 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long aBlock = swift_slowAlloc();
              *(_DWORD *)v191 = 136315138;
              swift_bridgeObjectRetain();
              *(void *)&long long v295 = sub_1000C51B8(v279, v42, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v189, v190, "Display ACAccount ID is not an UUID {displayACAccountID: %s}", v191, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              swift_release();
              swift_release();
              swift_release();
              uint64_t v104 = v285;

              swift_release();
              swift_release();
            }
            else
            {
              swift_release();
              swift_release();
              swift_release();
              uint64_t v104 = v285;

              swift_release();
              swift_release();

              swift_bridgeObjectRelease_n();
            }

            goto LABEL_159;
          }
          v163 = v162;
          sub_1002AF948(v162, v161);
          uint64_t v165 = v164;

          int v166 = *(unsigned __int8 *)(v165 + 88);
          swift_release();
          unsigned __int8 v290 = v166 ^ 1;
          goto LABEL_95;
        }
      }
      int v166 = 1;
LABEL_95:
      if (v159 && ((v166 | [v159 BOOLValue] ^ 1) & 1) == 0)
      {
        *(unsigned char *)(v274 + 16) = 1;
        swift_bridgeObjectRetain_n();
        uint64_t v167 = Logger.logObject.getter();
        os_log_type_t v168 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v167, v168))
        {
          v169 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)v169 = 136446210;
          swift_bridgeObjectRetain();
          *(void *)&long long v295 = sub_1000C51B8(v279, (unint64_t)v288, (uint64_t *)&aBlock);
          unint64_t v42 = (unint64_t)v288;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v167, v168, "UpdateAccountWithACAccount: setting shouldMigrateInactivatedICloudCalDavData to true {displayAccountID: %{public}s}", v169, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      if ([v29 aa_isAccountClass:AAAccountClassPrimary]) {
        uint64_t v287 = _auto_REMAccountTypeForPrimaryCloudKit();
      }
      else {
        uint64_t v287 = 6;
      }
      int v192 = v290;
      id v193 = v159;
      swift_bridgeObjectRetain_n();
      uint64_t v194 = v193;
      id v195 = Logger.logObject.getter();
      os_log_type_t v196 = static os_log_type_t.default.getter();
      BOOL v197 = os_log_type_enabled(v195, v196);
      LODWORD(v277) = v140;
      uint64_t v284 = v194;
      if (v197)
      {
        id v198 = v159;
        uint64_t v199 = swift_slowAlloc();
        id v276 = (id)swift_slowAlloc();
        *(void *)&long long aBlock = v276;
        *(_DWORD *)uint64_t v199 = 136447234;
        swift_bridgeObjectRetain();
        *(void *)&long long v295 = sub_1000C51B8(v279, v42, (uint64_t *)&aBlock);
        LODWORD(v275) = v192;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v199 + 12) = 2082;
        uint64_t v200 = REMAccountType.loggableDescription.getter();
        *(void *)&long long v295 = sub_1000C51B8(v200, v201, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v199 + 22) = 1024;
        LODWORD(v295) = v140;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v199 + 28) = 1024;
        LODWORD(v295) = v275;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v199 + 34) = 2082;
        id v202 = v198;
        if (v198)
        {
          uint64_t v194 = v284;
          unsigned __int8 v203 = [v284 BOOLValue];
        }
        else
        {
          unsigned __int8 v203 = 2;
          uint64_t v194 = v284;
        }
        LOBYTE(v295) = v203;
        sub_100094134((uint64_t *)&unk_10091DD70);
        uint64_t v204 = String.init<A>(describing:)();
        *(void *)&long long v295 = sub_1000C51B8(v204, v205, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v195, v196, "UpdateAccountWithACAccount: Will process CloudKit account {accountID: %{public}s, type: %{public}s, didChooseToMigrate: %{BOOL}d, shouldShowCloudKitAccount: %{BOOL}d, didFinishMigration: %{public}s}", (uint8_t *)v199, 0x2Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        id v202 = v159;

        swift_bridgeObjectRelease_n();
      }
      unint64_t v206 = self;
      id v207 = [v206 accountDescriptionWithACAccount:v29];
      if (v207)
      {
        v208 = v207;
        uint64_t v209 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v211 = v210;
      }
      else
      {
        uint64_t v209 = 0;
        unint64_t v211 = 0;
      }
      id v276 = v206;
      swift_beginAccess();
      unsigned __int8 v212 = v290;
      if (v202) {
        unsigned __int8 v213 = [v194 BOOLValue];
      }
      else {
        unsigned __int8 v213 = 2;
      }
      unsigned __int8 v214 = [v29 aa_isAccountClass:AAAccountClassBasic];
      if (v211) {
        uint64_t v215 = v209;
      }
      else {
        uint64_t v215 = 0x64756F6C4369;
      }
      if (!v211) {
        unint64_t v211 = 0xE600000000000000;
      }
      swift_bridgeObjectRetain();
      int v118 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v217 = v118[2];
      unint64_t v216 = v118[3];
      if (v217 >= v216 >> 1) {
        int v118 = sub_10030BE7C((void *)(v216 > 1), v217 + 1, 1, v118);
      }
      v118[2] = v217 + 1;
      unsigned __int8 v218 = &v118[6 * v217];
      id v219 = v288;
      v218[4] = v279;
      v218[5] = v219;
      v218[6] = v215;
      v218[7] = v211;
      v218[8] = v287;
      *((unsigned char *)v218 + 72) = v212;
      *((unsigned char *)v218 + 73) = 0;
      int v220 = v277;
      *((unsigned char *)v218 + 74) = v277;
      *((unsigned char *)v218 + 75) = v213;
      *((unsigned char *)v218 + 76) = v214;
      unint64_t v221 = sub_10060095C(v29);
      id v273 = v29;
      if (v222)
      {
        uint64_t v223 = (uint64_t)v221;
        unint64_t v224 = v222;
        swift_bridgeObjectRetain_n();
        uint64_t v225 = Logger.logObject.getter();
        os_log_type_t v226 = static os_log_type_t.default.getter();
        BOOL v227 = os_log_type_enabled(v225, v226);
        id v69 = v286;
        uint64_t v287 = v223;
        if (v227)
        {
          uint64_t v228 = swift_slowAlloc();
          uint64_t v275 = v118;
          uint64_t v229 = v228;
          *(void *)&long long v295 = swift_slowAlloc();
          *(_DWORD *)uint64_t v229 = 136446466;
          swift_bridgeObjectRetain();
          id v289 = (id)sub_1000C51B8(v223, v224, (uint64_t *)&v295);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v229 + 12) = 1024;
          LODWORD(v289) = v220;
          int v118 = v275;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v225, v226, "UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %{public}s, didChooseToMigrate: %{BOOL}d}", (uint8_t *)v229, 0x12u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        unint64_t v42 = (unint64_t)v288;
        uint64_t v230 = 0x64756F6C4369;
        id v231 = [v276 accountDescriptionWithACAccount:v29 v273];
        if (v231)
        {
          id v232 = v231;
          uint64_t v233 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v235 = v234;
        }
        else
        {
          uint64_t v233 = 0;
          unint64_t v235 = 0;
        }
        char v236 = v290 ^ 1;
        if (v235) {
          uint64_t v230 = v233;
        }
        else {
          unint64_t v235 = 0xE600000000000000;
        }
        unint64_t v238 = v118[2];
        unint64_t v237 = v118[3];
        if (v238 >= v237 >> 1) {
          int v118 = sub_10030BE7C((void *)(v237 > 1), v238 + 1, 1, v118);
        }
        v118[2] = v238 + 1;
        unint64_t v239 = &v118[6 * v238];
        v239[4] = v287;
        v239[5] = v224;
        v239[6] = v230;
        v239[7] = v235;
        v239[8] = 3;
        *((unsigned char *)v239 + 72) = v236 & 1;
        *(_DWORD *)((char *)v239 + 73) = 33686016;
        uint64_t v104 = v285;
        uint64_t v119 = v283;
      }
      else
      {
        uint64_t v104 = v285;
        id v69 = v286;
        uint64_t v119 = v283;
        unint64_t v42 = (unint64_t)v288;
      }

      goto LABEL_157;
    }
    swift_bridgeObjectRetain_n();
    unint64_t v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v105, v106))
    {
      id v107 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)id v107 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)&long long v295 = sub_1000C51B8(v279, (unint64_t)v288, (uint64_t *)&aBlock);
      unint64_t v42 = (unint64_t)v288;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "UpdateAccountWithACAccount: Got an Apple ID, not eligible for CloudKit reminders. Will only process iCloud CalDAV account for it {accountID: %{public}s}", v107, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v119 = v283;
    int v120 = sub_10060095C(v29);
    id v273 = v29;
    if (v121)
    {
      uint64_t v122 = (uint64_t)v120;
      unint64_t v123 = v121;
      swift_bridgeObjectRetain_n();
      uint64_t v124 = Logger.logObject.getter();
      os_log_type_t v125 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v124, v125))
      {
        uint64_t v126 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v126 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v295 = sub_1000C51B8(v122, v123, (uint64_t *)&aBlock);
        id v69 = v286;
        unint64_t v42 = (unint64_t)v288;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v124, v125, "UpdateAccountWithACAccount: AppleAccount {accountID: %{public}s} is ineligible for CloudKit Reminders, will process it as iCloud CalDAV", v126, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v154 = [self accountDescriptionWithACAccount:v29 accountStore:v273];
      if (v154)
      {
        id v155 = v154;
        uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v158 = v157;
      }
      else
      {
        uint64_t v156 = 0x64756F6C4369;
        unint64_t v158 = 0xE600000000000000;
      }
      int v118 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v171 = v118[2];
      unint64_t v170 = v118[3];
      if (v171 >= v170 >> 1) {
        int v118 = sub_10030BE7C((void *)(v170 > 1), v171 + 1, 1, v118);
      }
      v118[2] = v171 + 1;
      v172 = &v118[6 * v171];
      v172[4] = v122;
      v172[5] = v123;
      v172[6] = v156;
      v172[7] = v158;
      uint64_t v173 = 3;
LABEL_113:
      v172[8] = v173;
      *((_DWORD *)v172 + 18) = 33685505;
      *((unsigned char *)v172 + 76) = 2;
      goto LABEL_114;
    }
    int v118 = _swiftEmptyArrayStorage;
    uint64_t v104 = v285;
    goto LABEL_157;
  }
  id v92 = [v29 accountType];
  if (!v92)
  {
LABEL_174:

    swift_release_n();
    swift_release_n();
    swift_release_n();
    id v49 = v285;

    __break(1u);
    goto LABEL_175;
  }
  id v93 = v92;
  uint64_t v94 = sub_100604818(v92);
  char v96 = v95;

  uint64_t v97 = v284;
  id v273 = v29;
  if ((v96 & 1) == 0)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.default.getter();
    BOOL v100 = os_log_type_enabled(v98, v99);
    uint64_t v277 = v94;
    if (v100)
    {
      uint64_t v101 = swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v101 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)&long long v295 = sub_1000C51B8(v279, v42, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v101 + 12) = 2082;
      uint64_t v102 = REMAccountType.loggableDescription.getter();
      *(void *)&long long v295 = sub_1000C51B8(v102, v103, (uint64_t *)&aBlock);
      unint64_t v42 = (unint64_t)v288;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v69 = v286;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "UpdateAccountWithACAccount: Will process non-Apple account {displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v101, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v104 = v285;
    id v127 = sub_100604E08(v29);
    if (v128)
    {
      unint64_t v129 = v128;
      id v288 = v127;
      v130 = v29;
      swift_bridgeObjectRetain_n();
      os_log_type_t v131 = v130;
      id v132 = Logger.logObject.getter();
      os_log_type_t v133 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v132, v133))
      {
        uint64_t v134 = swift_slowAlloc();
        uint64_t v284 = swift_slowAlloc();
        uint64_t v287 = swift_slowAlloc();
        *(void *)&long long aBlock = v287;
        *(_DWORD *)uint64_t v134 = 136446466;
        swift_bridgeObjectRetain();
        *(void *)&long long v295 = sub_1000C51B8((uint64_t)v288, v129, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v134 + 12) = 2114;
        unint64_t v135 = (objc_class *)[v131 identifier];
        v136 = v135;
        if (v135) {
          *(void *)&long long v295 = v135;
        }
        else {
          *(void *)&long long v295 = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v284->Class isa = v136;

        _os_log_impl((void *)&_mh_execute_header, v132, v133, "UpdateAccountWithACAccount: Resolved non-Apple account identifier enabled for Reminders from displayACAccount: {resolved: %{public}s, displayACAccount: %{public}@}.", (uint8_t *)v134, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v69 = v286;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v178 = [self accountDescriptionWithACAccount:v131];
      if (v178)
      {
        v179 = v178;
        uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v182 = v181;
      }
      else
      {
        uint64_t v180 = 0;
        unint64_t v182 = 0xE000000000000000;
      }
      int v118 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v184 = v118[2];
      unint64_t v183 = v118[3];
      if (v184 >= v183 >> 1) {
        int v118 = sub_10030BE7C((void *)(v183 > 1), v184 + 1, 1, v118);
      }
      id v185 = v288;
      v118[2] = v184 + 1;
      v172 = &v118[6 * v184];
      v172[4] = v185;
      v172[5] = v129;
      v172[6] = v180;
      v172[7] = v182;
      uint64_t v173 = v277;
      goto LABEL_113;
    }
    int v118 = _swiftEmptyArrayStorage;
    uint64_t v119 = v283;
LABEL_157:
    uint64_t v240 = v274;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v241 = v104;
    swift_retain();
    uint64_t v242 = v281;
    swift_retain();
    uint64_t v243 = v282;
    swift_retain();
    id v49 = v69;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100608E50((uint64_t)v118, v278, v240, v279, v42, (uint64_t)v118, v241, v119, v242, v243, v49);
    swift_release_n();
    swift_bridgeObjectRelease_n();
    id v69 = v286;
    swift_bridgeObjectRelease();
    swift_release_n();

    swift_release_n();
    swift_release_n();
    swift_release_n();
    goto LABEL_158;
  }
  ((void (*)(char *, uint64_t, uint64_t))v284[2].isa)(v19, v86, v85);
  char v16 = v29;
  Swift::Int v108 = Logger.logObject.getter();
  int v109 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v108, (os_log_type_t)v109))
  {

    ((void (*)(char *, uint64_t))v97[1].isa)(v19, v85);
    int v118 = _swiftEmptyArrayStorage;
LABEL_114:
    uint64_t v104 = v285;
    uint64_t v119 = v283;
    goto LABEL_157;
  }
  char v110 = (uint8_t *)swift_slowAlloc();
  uint64_t v111 = (void *)swift_slowAlloc();
  *(void *)&long long aBlock = v111;
  *(_DWORD *)char v110 = 136446210;
  id v112 = [v16 accountType];
  if (!v112)
  {
LABEL_178:

    uint64_t v268 = v286;
    swift_release_n();
    swift_release_n();
    swift_release_n();
    v269 = v285;

    __break(1u);
    goto LABEL_179;
  }
  id v113 = v112;
  id v276 = v111;
  LODWORD(v277) = v109;
  id v114 = [v112 identifier];

  if (v114)
  {
    uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v117 = v116;

    *(void *)&long long v295 = sub_1000C51B8(v115, v117, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v108, (os_log_type_t)v277, "UpdateAccountWithACAccount: Can't figure out REMAccountType for ACAccountType {acAccountType: %{public}s}", v110, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v97[1].isa)(v19, v287);
    int v118 = _swiftEmptyArrayStorage;
    uint64_t v104 = v285;
    id v69 = v286;
    uint64_t v119 = v283;
    unint64_t v42 = (unint64_t)v288;
    goto LABEL_157;
  }
LABEL_179:

  uint64_t v270 = v286;
  swift_release_n();
  swift_release_n();
  swift_release_n();
  uint64_t v271 = v285;

  __break(1u);
}

void sub_10060D018(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v18 = qword_100907A38;
  id v38 = a9;
  swift_retain();
  swift_retain();
  swift_retain();
  id v19 = a13;
  uint64_t v20 = v19;
  if (a1)
  {
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_10091F858);
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)id v24 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "UpdateAccountWithACAccount: Migration state fetched {accountID: %{public}s}", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    id v37 = v19;
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_10091F858);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v35 = a7;
      uint64_t v28 = swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      os_log_type_t v34 = v27;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v29 = Error.localizedDescription.getter();
        unint64_t v31 = v30;
      }
      else
      {
        unint64_t v31 = 0xE300000000000000;
        uint64_t v29 = 7104878;
      }
      sub_1000C51B8(v29, v31, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v28 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v26, v34, "UpdateAccountWithACAccount: Failed to fetch migration status. Assume the account is un-migrated {error: %s, accountID: %{public}s}", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a7 = v35;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      swift_bridgeObjectRelease_n();
    }
    uint64_t v20 = v37;
  }
  id v32 = v38;
  swift_retain();
  swift_retain();
  swift_retain();
  id v33 = v20;
  sub_10060A468(a6, a7, 0, a8 & 1, a5, v32, a10, a11, a12, v33);

  swift_release_n();
  swift_release_n();
  swift_release_n();
}

uint64_t sub_10060D4EC(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a9;
  v17[3] = a10;
  v17[4] = a11;
  v17[5] = a12;
  v17[6] = a13;
  uint64_t v18 = swift_allocObject();
  uint64_t v47 = a3;
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = a4;
  *(void *)(v18 + 32) = a5;
  *(void *)(v18 + 40) = a6;
  *(void *)(v18 + 48) = a7;
  *(unsigned char *)(v18 + 56) = a8;
  *(void *)(v18 + 64) = sub_1006176AC;
  *(void *)(v18 + 72) = v17;
  uint64_t v49 = v18;
  id v48 = a9;
  swift_retain();
  swift_retain();
  swift_retain();
  id v19 = a13;
  swift_bridgeObjectRetain();
  uint64_t v57 = a5;
  swift_retain();
  id v54 = a6;
  id v53 = a7;
  swift_retain();
  id v20 = [a1 identifier];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong
      && (id v26 = Strong,
          id v27 = [Strong cloudContext],
          v26,
          v27))
    {
      id v56 = v27;
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain_n();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        unint64_t v31 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v31 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v59 = sub_1000C51B8(v22, v24, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Fetch migration state from user record {accountID: %{public}s}", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v41 = v54;
      uint64_t v43 = (void *)swift_allocObject();
      v43[2] = v22;
      v43[3] = v24;
      v43[4] = sub_1006147C4;
      v43[5] = v49;
      v43[6] = a1;
      aBlock[4] = (uint64_t)sub_1006147CC;
      aBlock[5] = (uint64_t)v43;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100102758;
      aBlock[3] = (uint64_t)&unk_1008CDC50;
      uint64_t v44 = _Block_copy(aBlock);
      swift_retain();
      id v45 = a1;
      swift_release();
      [v56 fetchUserRecordWithAccountID:v21 completionHandler:v44];
      _Block_release(v44);
      swift_bridgeObjectRelease();
      swift_release();

      unint64_t v42 = v53;
    }
    else
    {
      int v51 = v19;

      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10008E2DC(v32, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain();
      id v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v59 = sub_1000C51B8(v22, v24, aBlock);
        unint64_t v36 = a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing cloud context for fetching migration state {accountID: %{public}s}", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        unint64_t v36 = a4;
      }
      id v37 = self;
      NSString v38 = String._bridgeToObjectiveC()();
      id v39 = [v37 internalErrorWithDebugDescription:v38];

      id v40 = v48;
      swift_retain();
      swift_retain();
      swift_retain();
      id v21 = v51;
      unint64_t v42 = v53;
      id v41 = v54;
      sub_10060D018(0, (uint64_t)v39, v47, v36, v57, (uint64_t)v54, (uint64_t)v53, a8 & 1, v40, a10, a11, a12, v21);
      swift_bridgeObjectRelease();
      swift_release();

      swift_release();
      swift_release();
      swift_release();
    }

    swift_release();
    return swift_release();
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_10060DBC8(char a1, char a2, uint64_t a3, uint64_t a4, Swift::Int a5, unint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  if (a1 & 1) != 0 || (a2)
  {
    swift_beginAccess();
    if (*(unsigned char *)(a4 + 16) == 1)
    {
      uint64_t v43 = a3;
      id v19 = self;
      id v20 = [v19 daemonUserDefaults];
      id v21 = [v20 acAccountIdentifiersToMigrateInactivatedCalDavData];

      if (v21)
      {
        uint64_t v22 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v22 = _swiftEmptyArrayStorage;
      }
      uint64_t v23 = sub_10012674C((uint64_t)v22);
      swift_bridgeObjectRelease();
      uint64_t v46 = v23;
      swift_bridgeObjectRetain();
      sub_10031DC68((Swift::Int *)&v45, a5, a6);
      swift_bridgeObjectRelease();
      id v24 = [v19 daemonUserDefaults];
      sub_100209D8C(v46);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      [v24 setAcAccountIdentifiersToMigrateInactivatedCalDavData:isa];

      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      sub_10008E2DC(v26, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain_n();
      id v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        id v45 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136446210;
        swift_bridgeObjectRetain();
        sub_1000C51B8(a5, a6, (uint64_t *)&v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "UpdateAccountWithACAccount: inserting to daemonUserDefaults.acAccountIdentifiersToMigrateInactivatedCalDavData {displayAccountID: %{public}s}", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      a3 = v43;
    }
  }
  uint64_t v30 = a12;
  char v31 = a11;
  int64_t v32 = *(void *)(a7 + 16);
  if (v32)
  {
    uint64_t v44 = a3;
    uint64_t v42 = a8;
    id v45 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1001DE058(0, v32, 0);
    id v33 = v45;
    os_log_type_t v34 = (uint64_t *)(a7 + 40);
    do
    {
      uint64_t v35 = *(v34 - 1);
      uint64_t v36 = *v34;
      id v45 = v33;
      unint64_t v37 = v33[2];
      unint64_t v38 = v33[3];
      swift_bridgeObjectRetain();
      if (v37 >= v38 >> 1)
      {
        sub_1001DE058(v38 > 1, v37 + 1, 1);
        id v33 = v45;
      }
      v34 += 6;
      v33[2] = v37 + 1;
      id v39 = &v33[2 * v37];
      v39[4] = v35;
      v39[5] = v36;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    a8 = v42;
    a3 = v44;
    uint64_t v30 = a12;
    char v31 = a11;
  }
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = a8;
  *(void *)(v40 + 24) = a10;
  *(unsigned char *)(v40 + 32) = v31 & 1;
  *(void *)(v40 + 40) = v30;
  *(void *)(v40 + 48) = a13;
  *(void *)(v40 + 56) = a3;
  swift_retain();
  swift_retain();
  swift_errorRetain();
  sub_1005FA48C(a9, (uint64_t)sub_100617BC0, v40);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10060E020(uint64_t a1, void *a2, uint64_t a3, Swift::Int a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a7;
  *(void *)(v17 + 24) = a8;
  *(void *)(v17 + 32) = a9;
  *(unsigned char *)(v17 + 40) = a10 & 1;
  *(void *)(v17 + 48) = a11;
  *(void *)(v17 + 56) = a12;
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a3;
  v18[3] = a4;
  Swift::Int v112 = a4;
  v18[4] = a5;
  v18[5] = a6;
  v18[6] = sub_100617BA4;
  v18[7] = v17;
  id v19 = objc_allocWithZone((Class)REMSaveRequest);
  uint64_t v20 = a7;
  uint64_t v21 = a12;
  swift_retain();
  id v111 = a8;
  swift_retain();
  uint64_t v22 = a3;
  swift_retain();
  unint64_t v113 = a5;
  swift_bridgeObjectRetain();
  uint64_t v23 = a6;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v24 = a1;
  id v116 = [v19 initWithStore:a2];
  uint64_t v25 = *(void *)(a1 + 16);
  if (v25)
  {
    uint64_t v108 = v20;
    int v109 = v18;
    uint64_t v110 = a3;
    swift_bridgeObjectRetain();
    unint64_t v26 = 0;
    char type = 0;
    BOOL v117 = 0;
    uint64_t v27 = 1 - v25;
    while (1)
    {
      uint64_t v28 = *(void *)(v24 + v26 + 32);
      unint64_t v29 = *(void *)(v24 + v26 + 40);
      uint64_t v30 = *(void *)(v24 + v26 + 48);
      unint64_t v31 = *(void *)(v24 + v26 + 56);
      id v32 = *(id *)(v24 + v26 + 64);
      int v129 = *(unsigned __int8 *)(v24 + v26 + 73);
      int v124 = *(unsigned __int8 *)(v24 + v26 + 74);
      int v125 = *(unsigned __int8 *)(v24 + v26 + 75);
      int v126 = *(unsigned __int8 *)(v24 + v26 + 76);
      int v127 = *(unsigned __int8 *)(v24 + v26 + 72);
      uint64_t v33 = qword_100907A38;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      if (v33 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_10008E2DC(v34, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain_n();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      uint64_t v128 = v30;
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v122 = v27;
        unint64_t v37 = v31;
        unint64_t v38 = v26;
        uint64_t v39 = v28;
        uint64_t v40 = swift_slowAlloc();
        aBlock[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v40 + 4) = sub_1000C51B8(v39, v29, (uint64_t *)aBlock);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "UpdateAccountsWithAccountInfos: Updating account object {accountID: %{public}s}", (uint8_t *)v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v28 = v39;
        unint64_t v26 = v38;
        unint64_t v31 = v37;
        uint64_t v27 = v122;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v41 = sub_10060062C(v28, v29);
      if (!v41)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRetain();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v47))
        {
          unint64_t v31 = v26;
          uint64_t v48 = v28;
          uint64_t v49 = swift_slowAlloc();
          aBlock[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v49 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v50 = v48;
          unint64_t v26 = v31;
          *(void *)(v49 + 4) = sub_1000C51B8(v50, v29, (uint64_t *)aBlock);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "UpdateAccountsWithAccountInfos: Failed to create UUID object, account ignored {accountID: %{public}s}", (uint8_t *)v49, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          if (!v27) {
            goto LABEL_66;
          }
        }
        else
        {

          swift_bridgeObjectRelease_n();
          if (!v27)
          {
LABEL_66:
            swift_bridgeObjectRelease();
            uint64_t v23 = a6;
            uint64_t v22 = v110;
            uint64_t v20 = v108;
            unint64_t v31 = (unint64_t)v109;
            uint64_t v21 = a12;
            Swift::Int v99 = v112;
            if (!v117) {
              goto LABEL_69;
            }
            goto LABEL_73;
          }
        }
        goto LABEL_5;
      }
      uint64_t v42 = v41;
      aBlock[0] = 0;
      id v43 = [a2 fetchAccountWithObjectID:v41 error:aBlock];
      id v44 = aBlock[0];
      if (v43)
      {
        if (v129)
        {
          id v45 = v43;
LABEL_19:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v45)
          {
            uint64_t v121 = v28;
            v130 = v42;
            id v52 = v43;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v53 = v52;
            id v54 = Logger.logObject.getter();
            os_log_type_t v55 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v54, v55))
            {
              uint64_t v56 = swift_slowAlloc();
              aBlock[0] = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v56 = 136315650;
              swift_bridgeObjectRetain();
              *(void *)(v56 + 4) = sub_1000C51B8(v128, v31, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v56 + 12) = 2082;
              swift_bridgeObjectRetain();
              *(void *)(v56 + 14) = sub_1000C51B8(v121, v29, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v56 + 22) = 2048;
              id v57 = [v45 type];

              *(void *)(v56 + 24) = v57;
              _os_log_impl((void *)&_mh_execute_header, v54, v55, "UpdateAccountsWithAccountInfos is going to delete account {accountName: %s, accountID: %{public}s, type: %ld}.", (uint8_t *)v56, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            id v69 = [v116 updateAccount:v45];
            [v69 removeFromStore];

            uint64_t v24 = a1;
            if (!v27)
            {
              swift_bridgeObjectRelease();
              char type = 1;
              goto LABEL_72;
            }
            BOOL v117 = 1;
            char type = 1;
            goto LABEL_5;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        id v58 = v43;
        if ([v58 type] != v32)
        {
          id v123 = v32;
          uint64_t v70 = v28;
          id v132 = v42;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v71 = v58;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v72 = v71;
          uint64_t v73 = Logger.logObject.getter();
          os_log_type_t v74 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v73, v74))
          {
            uint64_t v75 = swift_slowAlloc();
            aBlock[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v75 = 136315906;
            swift_bridgeObjectRetain();
            *(void *)(v75 + 4) = sub_1000C51B8(v128, v31, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v75 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v75 + 14) = sub_1000C51B8(v70, v29, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            unint64_t v31 = 2048;
            *(_WORD *)(v75 + 22) = 2048;
            id v76 = [v72 type];

            *(void *)(v75 + 24) = v76;
            *(_WORD *)(v75 + 32) = 2048;
            *(void *)(v75 + 34) = v123;
            _os_log_impl((void *)&_mh_execute_header, v73, v74, "UpdateAccountsWithAccountInfos: Unexpected account type, account ignored. {accountName: %s, accountID: %{public}s, expectedType: %ld, actualType: %ld}", (uint8_t *)v75, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            goto LABEL_64;
          }

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();

LABEL_4:
          uint64_t v24 = a1;
          if (!v27) {
            goto LABEL_66;
          }
          goto LABEL_5;
        }
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        id v59 = v58;
        id v60 = Logger.logObject.getter();
        os_log_type_t v131 = static os_log_type_t.default.getter();
        uint64_t v120 = v28;
        if (os_log_type_enabled(v60, v131))
        {
          uint64_t v61 = swift_slowAlloc();
          aBlock[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v61 = 136315650;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v128, v31, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v61 + 12) = 2082;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v28, v29, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v61 + 22) = 2048;
          [v59 type];

          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v60, v131, "UpdateAccountsWithAccountInfos is updating existing account object {name: %s, accountID: %{public}s, type: %ld}", (uint8_t *)v61, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        id v77 = [v116 updateAccount:v59];
        NSString v78 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v77 setName:v78];
      }
      else
      {
        int v51 = v44;
        uint64_t v120 = v28;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        id v45 = 0;
        swift_errorRelease();
        if (v129) {
          goto LABEL_19;
        }
        if ((v127 & 1) == 0)
        {
          id v62 = [objc_allocWithZone((Class)REMAccountTypeHost) initWithType:v32];
          unsigned int v63 = [v62 isCloudKit];

          if (!v63)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v94 = Logger.logObject.getter();
            os_log_type_t v95 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v94, v95))
            {
              uint64_t v96 = swift_slowAlloc();
              id v132 = v42;
              aBlock[0] = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v96 = 136315650;
              swift_bridgeObjectRetain();
              *(void *)(v96 + 4) = sub_1000C51B8(v128, v31, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v96 + 12) = 2082;
              swift_bridgeObjectRetain();
              *(void *)(v96 + 14) = sub_1000C51B8(v120, v29, (uint64_t *)aBlock);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v96 + 22) = 2082;
              uint64_t v97 = REMAccountType.loggableDescription.getter();
              *(void *)(v96 + 24) = sub_1000C51B8(v97, v98, (uint64_t *)aBlock);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v94, v95, "UpdateAccountsWithAccountInfos won't create inactive accounts unless it is CloudKit {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v96, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

LABEL_64:
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            goto LABEL_4;
          }
        }
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v64, v65))
        {
          uint64_t v66 = swift_slowAlloc();
          aBlock[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v66 = 136315650;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v128, v31, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v66 + 12) = 2082;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v120, v29, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v66 + 22) = 2082;
          uint64_t v67 = REMAccountType.loggableDescription.getter();
          sub_1000C51B8(v67, v68, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "UpdateAccountsWithAccountInfos is creating account object {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v66, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        NSString v79 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v80 = [v116 __addAccountWithType:v32 name:v79];

        id v77 = v80;
        [v77 setObjectID:v42];
        id v81 = [objc_allocWithZone((Class)REMAccountTypeHost) initWithType:v32];
        LODWORD(v80) = [v81 isCloudKit];

        if (v80)
        {
          [v77 setPersistenceCloudSchemaVersion:20240715];
          char type = 1;
          NSString v78 = v77;
        }
        else
        {
          NSString v78 = String._bridgeToObjectiveC()();
          [v77 setExternalIdentifier:v78];

          char type = 1;
        }
      }

      if (v127 == [v77 inactive])
      {
        [v77 setInactive:v127 ^ 1u];
        id v82 = v77;
        swift_bridgeObjectRetain();
        id v83 = v82;
        unint64_t v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v84, v85))
        {
          os_log_type_t v133 = v42;
          uint64_t v86 = swift_slowAlloc();
          aBlock[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v86 = 136446722;
          [v83 inactive];
          uint64_t v87 = Bool.yesno.getter();
          sub_1000C51B8(v87, v88, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v86 + 12) = 2082;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v120, v29, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v86 + 22) = 2082;
          uint64_t v89 = REMAccountType.loggableDescription.getter();
          sub_1000C51B8(v89, v90, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v42 = v133;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (v124 != 2)
      {
        if ([v77 didChooseToMigrateLocally]
          && [v77 didChooseToMigrate]
          && (v124 & 1) == 0)
        {
          [v77 setDidChooseToMigrateLocally:0];
        }
        [v77 setDidChooseToMigrate:v124 & 1];
      }
      if (v125 != 2) {
        [v77 setDidFinishMigration:v125 & 1];
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v126 != 2) {
        [v77 setDebugSyncDisabled:v126 & 1];
      }
      if (!v117)
      {
        id v91 = [v77 changedKeys];
        uint64_t v92 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v93 = *(void *)(v92 + 16);
        swift_bridgeObjectRelease();
        BOOL v117 = v93 != 0;
        goto LABEL_4;
      }

      if (!v27)
      {
        swift_bridgeObjectRelease();
LABEL_72:
        unint64_t v31 = (unint64_t)v109;
LABEL_73:
        uint64_t v101 = Logger.logObject.getter();
        os_log_type_t v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          unint64_t v103 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v103 = 0;
          _os_log_impl((void *)&_mh_execute_header, v101, v102, "UpdateAccountsWithAccountInfos: Saving account object changes", v103, 2u);
          swift_slowDealloc();
        }

        if (qword_1009070D8 == -1)
        {
LABEL_76:
          uint64_t v104 = qword_100942078;
          uint64_t v105 = swift_allocObject();
          *(void *)(v105 + 16) = sub_10061482C;
          *(void *)(v105 + 24) = v31;
          *(unsigned char *)(v105 + 32) = type & 1;
          *(unsigned char *)(v105 + 33) = 1;
          aBlock[4] = sub_10061836C;
          aBlock[5] = (id)v105;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = (id)1107296256;
          aBlock[2] = sub_1000E13D0;
          aBlock[3] = &unk_1008CE1A0;
          os_log_type_t v106 = _Block_copy(aBlock);
          swift_retain();
          swift_release();
          [v116 saveWithQueue:v104 completion:v106];

          _Block_release(v106);
          swift_release();
          goto LABEL_77;
        }
LABEL_79:
        swift_once();
        goto LABEL_76;
      }
      BOOL v117 = 1;
      uint64_t v24 = a1;
LABEL_5:
      ++v27;
      v26 += 48;
      if (v27 == 1)
      {
        __break(1u);
        goto LABEL_79;
      }
    }
  }
  char type = 0;
  Swift::Int v99 = v112;
LABEL_69:
  swift_retain();
  id v100 = v111;
  swift_retain();
  sub_10060DBC8(type & 1, 0, 0, v22, v99, v113, v23, v20, v100, a9, a10 & 1, a11, v21);
  swift_release();
  swift_release();

  swift_release();
LABEL_77:
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10060F618(NSObject *a1, void *a2, int a3, int a4, void *a5, uint64_t a6, void *a7, uint64_t a8, char a9, uint64_t a10, NSObject *a11)
{
  id v273 = a5;
  LODWORD(v270) = a4;
  LODWORD(v271) = a3;
  uint64_t v274 = a2;
  uint64_t v284 = type metadata accessor for Logger();
  uint64_t v282 = *(void (***)(void, void, void))(v284 - 8);
  uint64_t v15 = __chkstk_darwin(v284);
  uint64_t v17 = (char *)&v268 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  v272 = (char *)&v268 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v268 - v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a6;
  *(void *)(v22 + 24) = a7;
  *(void *)(v22 + 32) = a8;
  int v278 = a9 & 1;
  *(unsigned char *)(v22 + 40) = v278;
  *(void *)(v22 + 48) = a10;
  *(void *)(v22 + 56) = a11;
  uint64_t v280 = a6;
  swift_retain_n();
  id v23 = a7;
  swift_retain_n();
  uint64_t v281 = v23;
  uint64_t v24 = [a1 displayAccount];
  if (!v24) {
    uint64_t v24 = a1;
  }
  id v25 = [v24 identifier];
  if (!v25)
  {
    swift_release_n();
    v258 = v281;

    swift_release_n();
    __break(1u);
LABEL_168:
    swift_release_n();
    v259 = v281;

    swift_release_n();
    __break(1u);
  }
  unint64_t v26 = v25;
  uint64_t v275 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v285 = v27;

  id v28 = [v24 accountType];
  if (!v28) {
    goto LABEL_168;
  }
  unint64_t v29 = v28;
  uint64_t v276 = a10;
  uint64_t v277 = a8;
  uint64_t v279 = v22;
  uint64_t v283 = a11;
  id v30 = [v28 identifier];

  if (!v30)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_12:
    unint64_t v36 = v285;
    swift_bridgeObjectRelease();
    if (([v24 isEnabledForDataclass:ACAccountDataclassReminders] & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_13;
  }
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v33) {
    goto LABEL_12;
  }
  unint64_t v36 = v285;
  if (v31 == v34 && v33 == v35)
  {
    swift_bridgeObjectRelease_n();
    if (([v24 isEnabledForDataclass:ACAccountDataclassReminders] & 1) == 0)
    {
LABEL_24:
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v61 = v284;
      uint64_t v62 = sub_10008E2DC(v284, (uint64_t)qword_10091F858);
      unsigned int v63 = v282;
      ((void (**)(char *, uint64_t, uint64_t))v282)[2](v21, v62, v61);
      unint64_t v64 = a1;
      os_log_type_t v65 = v24;
      uint64_t v66 = v64;
      uint64_t v67 = v65;
      swift_bridgeObjectRetain();
      a1 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      BOOL v69 = os_log_type_enabled(a1, v68);
      uint64_t v42 = v283;
      if (!v69)
      {

        swift_bridgeObjectRelease_n();
        ((void (*)(char *, uint64_t))v63[1])(v21, v61);
        goto LABEL_32;
      }
      uint64_t v70 = swift_slowAlloc();
      uint64_t v274 = (void *)swift_slowAlloc();
      *(void *)&long long aBlock = v274;
      *(_DWORD *)uint64_t v70 = 136446722;
      id v71 = [v66 identifier];
      if (v71)
      {
        id v72 = v71;
        uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v42 = v74;

        *(void *)&long long v292 = sub_1000C51B8(v73, (unint64_t)v42, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v70 + 12) = 2082;
        unint64_t v75 = v285;
        swift_bridgeObjectRetain();
        *(void *)&long long v292 = sub_1000C51B8(v275, v75, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v70 + 22) = 2082;
        id v76 = [v67 accountType];
        if (v76)
        {
          id v77 = v76;
          id v78 = [v76 identifier];

          uint64_t v42 = v283;
          if (v78)
          {
            uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v81 = v80;

            *(void *)&long long v292 = sub_1000C51B8(v79, v81, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, a1, v68, "UpdateAccountWithACAccount: ACAccount type is not supported or reminders dataclass is not enabled {accountID: %{public}s, displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v70, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            ((void (*)(char *, uint64_t))v282[1])(v21, v284);
LABEL_32:
            id v58 = v281;
            BOOL v82 = v278 != 0;
            uint64_t v83 = swift_allocObject();
            uint64_t v84 = v277;
            *(void *)(v83 + 16) = v280;
            *(void *)(v83 + 24) = v84;
            *(unsigned char *)(v83 + 32) = v82;
            *(void *)(v83 + 40) = v276;
            *(void *)(v83 + 48) = v42;
            *(void *)(v83 + 56) = 0;
            swift_retain();
            swift_retain();
            sub_1005FA48C(v58, (uint64_t)sub_100617BC0, v83);
            swift_release();

            swift_release_n();
            swift_release();

            swift_release();
LABEL_158:
            swift_release();

            return;
          }
          goto LABEL_171;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_release_n();
        uint64_t v67 = v281;

        swift_release_n();
        __break(1u);
      }

      swift_release_n();
      uint64_t v67 = v281;

      swift_release_n();
      __break(1u);
LABEL_171:

      swift_release_n();
      v260 = v281;

      swift_release_n();
      __break(1u);
      goto LABEL_172;
    }
LABEL_23:
    int v60 = 1;
    goto LABEL_34;
  }
  char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (([v24 isEnabledForDataclass:ACAccountDataclassReminders] & 1) == 0) {
    goto LABEL_24;
  }
  if (v59) {
    goto LABEL_23;
  }
LABEL_13:
  if ([a1 accountPropertyForKey:REMDA_kCalDAVMobileAccountDelegatePrincipalPath])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v37 = v284;
    uint64_t v38 = sub_10008E2DC(v284, (uint64_t)qword_10091F858);
    uint64_t v39 = v282;
    ((void (**)(char *, uint64_t, uint64_t))v282)[2](v17, v38, v37);
    uint64_t v40 = a1;
    id v41 = v24;
    uint64_t v42 = v40;
    a1 = v41;
    id v43 = Logger.logObject.getter();
    int v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, (os_log_type_t)v44))
    {
      LODWORD(v285) = v44;
      uint64_t v45 = swift_slowAlloc();
      uint64_t v275 = swift_slowAlloc();
      *(void *)&long long aBlock = v275;
      *(_DWORD *)uint64_t v45 = 136446466;
      id v46 = [v42 identifier];
      if (!v46)
      {
LABEL_173:

        swift_release_n();
        v262 = v281;

        swift_release_n();
        __break(1u);
        goto LABEL_174;
      }
      os_log_type_t v47 = v46;
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v50 = v49;

      *(void *)&long long v292 = sub_1000C51B8(v48, v50, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 12) = 2082;
      id v51 = [a1 accountType];
      if (!v51)
      {
LABEL_174:

        swift_release_n();
        v263 = v281;

        swift_release_n();
        __break(1u);
        goto LABEL_175;
      }
      id v52 = v51;
      id v53 = [v51 identifier];

      id v54 = v283;
      if (!v53)
      {
LABEL_175:

        swift_release_n();
        v264 = v281;

        swift_release_n();
        __break(1u);
        goto LABEL_176;
      }
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v57 = v56;

      *(void *)&long long v292 = sub_1000C51B8(v55, v57, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v285, "UpdateAccountWithACAccount: Skip handling CalDAV delegate account {accountID: %{public}s, displayAccountType: %{public}s}", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v39[1])(v17, v284);
      id v58 = v281;
    }
    else
    {

      ((void (*)(char *, uint64_t))v39[1])(v17, v37);
      id v58 = v281;
      id v54 = v283;
    }
    BOOL v104 = v278 != 0;
    uint64_t v105 = swift_allocObject();
    uint64_t v106 = v277;
    *(void *)(v105 + 16) = v280;
    *(void *)(v105 + 24) = v106;
    *(unsigned char *)(v105 + 32) = v104;
    *(void *)(v105 + 40) = v276;
    *(void *)(v105 + 48) = v54;
    *(void *)(v105 + 56) = 0;
    swift_retain();
    swift_retain();
    sub_1005FA48C(v58, (uint64_t)sub_100617BC0, v105);
    swift_release();

    swift_release_n();
    swift_release();

    swift_release();
    goto LABEL_158;
  }
  long long aBlock = 0u;
  long long v289 = 0u;
  sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
  int v60 = 0;
LABEL_34:
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v85 = sub_10008E2DC(v284, (uint64_t)qword_10091F858);
  swift_bridgeObjectRetain_n();
  uint64_t v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v86, v87))
  {
    a1 = swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    LODWORD(a1->isa) = 136446210;
    swift_bridgeObjectRetain();
    *(void *)&long long v292 = sub_1000C51B8(v275, v285, (uint64_t *)&aBlock);
    unint64_t v36 = v285;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "UpdateAccountWithACAccount: Try to update account object {accountID: %{public}s}", (uint8_t *)a1, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v42 = v283;
  uint64_t v88 = swift_allocObject();
  *(unsigned char *)(v88 + 16) = 0;
  unsigned __int8 v89 = [v24 rem_isEligibleForCloudKitReminders];
  v269 = v24;
  if (v60)
  {
    if ((v89 & 1) == 0)
    {
      swift_bridgeObjectRetain_n();
      id v107 = Logger.logObject.getter();
      os_log_type_t v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        int v109 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)int v109 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v292 = sub_1000C51B8(v275, v285, (uint64_t *)&aBlock);
        unint64_t v36 = v285;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "UpdateAccountWithACAccount: Got an Apple ID, not eligible for CloudKit reminders. Will only process iCloud CalDAV account for it {accountID: %{public}s}", v109, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v58 = v281;
      int v124 = sub_10060095C(v269);
      if (v125)
      {
        uint64_t v126 = (uint64_t)v124;
        unint64_t v127 = v125;
        swift_bridgeObjectRetain_n();
        uint64_t v128 = Logger.logObject.getter();
        os_log_type_t v129 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v128, v129))
        {
          v130 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)v130 = 136446210;
          swift_bridgeObjectRetain();
          *(void *)&long long v292 = sub_1000C51B8(v126, v127, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v128, v129, "UpdateAccountWithACAccount: AppleAccount {accountID: %{public}s} is ineligible for CloudKit Reminders, will process it as iCloud CalDAV", v130, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        id v156 = [self accountDescriptionWithACAccount:v269];
        if (v156)
        {
          unint64_t v157 = v156;
          uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v160 = v159;
        }
        else
        {
          uint64_t v158 = 0x64756F6C4369;
          unint64_t v160 = 0xE600000000000000;
        }
        id v123 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
        unint64_t v174 = v123[2];
        unint64_t v173 = v123[3];
        if (v174 >= v173 >> 1) {
          id v123 = sub_10030BE7C((void *)(v173 > 1), v174 + 1, 1, v123);
        }
        v123[2] = v174 + 1;
        os_log_type_t v175 = &v123[6 * v174];
        v175[4] = v126;
        v175[5] = v127;
        v175[6] = v158;
        v175[7] = v160;
        v175[8] = 3;
        *((_DWORD *)v175 + 18) = 33685505;
        *((unsigned char *)v175 + 76) = 2;
        id v58 = v281;
        unint64_t v36 = v285;
      }
      else
      {
        id v123 = _swiftEmptyArrayStorage;
      }
      goto LABEL_156;
    }
    uint64_t v284 = v85;
    *(void *)&long long v292 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v292 + 1) = v90;
    id v91 = [v24 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v91)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v292 = 0u;
      long long v293 = 0u;
    }
    id v58 = v281;
    sub_1000D6CBC((uint64_t)&v292, (uint64_t)&aBlock);
    if (*((void *)&v289 + 1))
    {
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      if (swift_dynamicCast())
      {
        id v145 = v286;
        unsigned int v146 = [v286 BOOLValue];

        goto LABEL_78;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
    }
    if (v271 == 2)
    {
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        v148 = Strong;
        if ([Strong hasPassedBuddyAndSystemDataMigrator])
        {

          if (v270)
          {
            uint64_t v149 = v280;
            swift_retain();
            v150 = v58;
            swift_retain();
            id v151 = v269;
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v152 = (uint64_t)v273;
            swift_retain();
            id v153 = v274;
            LOBYTE(v267) = v278;
            sub_1005F5D08((uint64_t)v151, v152, v275, v36, v152, (uint64_t)v151, (uint64_t)v153, 1, v149, v150, v277, v267, v276, (uint64_t)v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100612664);
            swift_release();

            swift_release_n();
            swift_release();
            swift_release_n();

            swift_bridgeObjectRelease();
            goto LABEL_158;
          }
        }
        else
        {
          swift_bridgeObjectRetain_n();
          v188 = Logger.logObject.getter();
          os_log_type_t v189 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v188, v189))
          {
            os_log_type_t v190 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long aBlock = swift_slowAlloc();
            *(_DWORD *)os_log_type_t v190 = 136446210;
            swift_bridgeObjectRetain();
            *(void *)&long long v292 = sub_1000C51B8(v275, v285, (uint64_t *)&aBlock);
            unint64_t v36 = v285;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v188, v189, "UpdateAccountWithACAccount: hasPassedBuddyAndSystemDataMigrator != true, setting shouldFetchMigrationState to false {accountID: %{public}s}", v190, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            id v58 = v281;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
      }
      uint64_t v268 = v88;
      swift_bridgeObjectRetain();
      uint64_t v243 = Logger.logObject.getter();
      os_log_type_t v244 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v243, v244))
      {
        os_log_type_t v245 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v245 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v292 = sub_1000C51B8(v275, v36, (uint64_t *)&aBlock);
        id v58 = v281;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v243, v244, "UpdateAccountWithACAccount: Will not fetch migration state {accountID: %{public}s}", v245, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v246 = self;
      id v247 = [v246 sharedInstance];
      id v248 = [v247 accountStore];

      id v249 = [v246 sharedInstance];
      uint64_t v250 = swift_allocObject();
      uint64_t v251 = v269;
      id v252 = v273;
      *(void *)(v250 + 16) = v269;
      *(void *)(v250 + 24) = v252;
      v253 = v274;
      *(void *)(v250 + 32) = v274;
      *(unsigned char *)(v250 + 40) = v270 & 1;
      uint64_t v254 = v279;
      *(void *)(v250 + 48) = sub_100617BA4;
      *(void *)(v250 + 56) = v254;
      unsigned __int8 v290 = sub_10061421C;
      uint64_t v291 = v250;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v289 = sub_100688540;
      *((void *)&v289 + 1) = &unk_1008CE038;
      v255 = _Block_copy(&aBlock);
      id v256 = v251;
      swift_retain();
      swift_retain();
      id v257 = v253;
      swift_release();
      [v249 saveDidChooseToMigrate:0 didFinishMigration:0 toACAccount:v256 inStore:v248 completionHandler:v255];

      _Block_release(v255);
      swift_release();

      swift_release_n();
      swift_release();
      swift_release();

      goto LABEL_158;
    }
    unsigned int v146 = v271 & 1;
LABEL_78:
    *(void *)&long long aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&aBlock + 1) = v154;
    id v155 = [v269 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v155)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v292 = 0u;
      long long v293 = 0u;
    }
    sub_1000D6CBC((uint64_t)&v292, (uint64_t)&aBlock);
    if (*((void *)&v289 + 1))
    {
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      if (swift_dynamicCast()) {
        id v161 = v286;
      }
      else {
        id v161 = 0;
      }
      unsigned __int8 v287 = 0;
      if (v146) {
        goto LABEL_90;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
      id v161 = 0;
      unsigned __int8 v287 = 0;
      if (v146)
      {
LABEL_90:
        uint64_t v162 = swift_unknownObjectWeakLoadStrong();
        if (!v162)
        {
          swift_bridgeObjectRelease();
          v176 = Logger.logObject.getter();
          os_log_type_t v177 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v176, v177))
          {
            id v178 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v178 = 0;
            _os_log_impl((void *)&_mh_execute_header, v176, v177, "Store controller missing for checking whether migration has failed", v178, 2u);
            swift_slowDealloc();
            v179 = v269;
          }
          else
          {
            v179 = v176;
            v176 = v269;
          }
          swift_release();
          swift_release();

          swift_release();
          goto LABEL_157;
        }
        v163 = (void *)v162;
        id v164 = sub_10060062C(v275, v36);
        if (!v164)
        {
          swift_bridgeObjectRetain();
          v191 = Logger.logObject.getter();
          os_log_type_t v192 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v191, v192))
          {
            uint64_t v268 = v88;
            id v193 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long aBlock = swift_slowAlloc();
            *(_DWORD *)id v193 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)&long long v292 = sub_1000C51B8(v275, v36, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v191, v192, "Display ACAccount ID is not an UUID {displayACAccountID: %s}", v193, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();
            id v58 = v281;

            swift_release_n();
            swift_release();
            swift_release();
          }
          else
          {
            swift_release();
            id v58 = v281;

            swift_release_n();
            swift_release();
            swift_release();

            swift_bridgeObjectRelease_n();
          }

          goto LABEL_158;
        }
        uint64_t v165 = v164;
        sub_1002AF948(v164, v163);
        uint64_t v167 = v166;

        int v168 = *(unsigned __int8 *)(v167 + 88);
        swift_release();
        unsigned __int8 v287 = v168 ^ 1;
        goto LABEL_95;
      }
    }
    int v168 = 1;
LABEL_95:
    v169 = v269;
    if (v161 && ((v168 | [v161 BOOLValue] ^ 1) & 1) == 0)
    {
      *(unsigned char *)(v88 + 16) = 1;
      swift_bridgeObjectRetain_n();
      unint64_t v170 = Logger.logObject.getter();
      os_log_type_t v171 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v170, v171))
      {
        v172 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)v172 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v292 = sub_1000C51B8(v275, v285, (uint64_t *)&aBlock);
        unint64_t v36 = v285;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v170, v171, "UpdateAccountWithACAccount: setting shouldMigrateInactivatedICloudCalDavData to true {displayAccountID: %{public}s}", v172, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v169 = v269;
    }
    if ([v169 aa_isAccountClass:AAAccountClassPrimary]) {
      uint64_t v194 = _auto_REMAccountTypeForPrimaryCloudKit();
    }
    else {
      uint64_t v194 = 6;
    }
    LODWORD(v273) = v287;
    id v195 = v161;
    swift_bridgeObjectRetain_n();
    id v196 = v195;
    BOOL v197 = Logger.logObject.getter();
    os_log_type_t v198 = static os_log_type_t.default.getter();
    BOOL v199 = os_log_type_enabled(v197, v198);
    LODWORD(v272) = v146;
    uint64_t v271 = (uint64_t)v161;
    uint64_t v282 = (void (**)(void, void, void))v196;
    if (v199)
    {
      uint64_t v268 = v88;
      uint64_t v200 = swift_slowAlloc();
      uint64_t v270 = swift_slowAlloc();
      *(void *)&long long aBlock = v270;
      *(_DWORD *)uint64_t v200 = 136447234;
      swift_bridgeObjectRetain();
      *(void *)&long long v292 = sub_1000C51B8(v275, v36, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v200 + 12) = 2082;
      uint64_t v201 = REMAccountType.loggableDescription.getter();
      *(void *)&long long v292 = sub_1000C51B8(v201, v202, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v200 + 22) = 1024;
      LODWORD(v292) = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v200 + 28) = 1024;
      LODWORD(v292) = v273;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v200 + 34) = 2082;
      if (v161)
      {
        id v203 = v282;
        unsigned __int8 v204 = [v282 BOOLValue];
      }
      else
      {
        unsigned __int8 v204 = 2;
        id v203 = v282;
      }
      LOBYTE(v292) = v204;
      sub_100094134((uint64_t *)&unk_10091DD70);
      uint64_t v205 = String.init<A>(describing:)();
      *(void *)&long long v292 = sub_1000C51B8(v205, v206, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v197, v198, "UpdateAccountWithACAccount: Will process CloudKit account {accountID: %{public}s, type: %{public}s, didChooseToMigrate: %{BOOL}d, shouldShowCloudKitAccount: %{BOOL}d, didFinishMigration: %{public}s}", (uint8_t *)v200, 0x2Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v169 = v269;
      uint64_t v88 = v268;
      id v196 = v203;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v207 = v194;
    v208 = self;
    id v209 = [v208 accountDescriptionWithACAccount:v169];
    if (v209)
    {
      unint64_t v210 = v209;
      uint64_t v211 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v213 = v212;
    }
    else
    {
      uint64_t v211 = 0;
      unint64_t v213 = 0;
    }
    id v273 = v208;
    swift_beginAccess();
    unsigned __int8 v214 = v287;
    uint64_t v215 = v88;
    if (v271) {
      unsigned __int8 v216 = [v196 BOOLValue];
    }
    else {
      unsigned __int8 v216 = 2;
    }
    uint64_t v217 = 0x64756F6C4369;
    unsigned __int8 v218 = [v169 aa_isAccountClass:AAAccountClassBasic];
    if (v213)
    {
      uint64_t v217 = v211;
      unint64_t v219 = v213;
    }
    else
    {
      unint64_t v219 = 0xE600000000000000;
    }
    swift_bridgeObjectRetain();
    id v123 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v221 = v123[2];
    unint64_t v220 = v123[3];
    if (v221 >= v220 >> 1) {
      id v123 = sub_10030BE7C((void *)(v220 > 1), v221 + 1, 1, v123);
    }
    v123[2] = v221 + 1;
    unint64_t v222 = &v123[6 * v221];
    unint64_t v36 = v285;
    v222[4] = v275;
    v222[5] = v36;
    v222[6] = v217;
    v222[7] = v219;
    v222[8] = v207;
    *((unsigned char *)v222 + 72) = v214;
    *((unsigned char *)v222 + 73) = 0;
    *((unsigned char *)v222 + 74) = (_BYTE)v272;
    *((unsigned char *)v222 + 75) = v216;
    *((unsigned char *)v222 + 76) = v218;
    uint64_t v223 = sub_10060095C(v269);
    if (v224)
    {
      uint64_t v225 = (uint64_t)v223;
      unint64_t v226 = v224;
      swift_bridgeObjectRetain_n();
      BOOL v227 = Logger.logObject.getter();
      os_log_type_t v228 = static os_log_type_t.default.getter();
      uint64_t v88 = v215;
      if (os_log_type_enabled(v227, v228))
      {
        uint64_t v229 = v225;
        uint64_t v230 = swift_slowAlloc();
        *(void *)&long long v292 = swift_slowAlloc();
        *(_DWORD *)uint64_t v230 = 136446466;
        swift_bridgeObjectRetain();
        id v286 = (id)sub_1000C51B8(v229, v226, (uint64_t *)&v292);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v230 + 12) = 1024;
        LODWORD(v286) = v272;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v227, v228, "UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %{public}s, didChooseToMigrate: %{BOOL}d}", (uint8_t *)v230, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v225 = v229;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v231 = 0x64756F6C4369;
      id v232 = [v273 accountDescriptionWithACAccount:v269];
      if (v232)
      {
        uint64_t v233 = v232;
        uint64_t v234 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v236 = v235;
      }
      else
      {
        uint64_t v234 = 0;
        unint64_t v236 = 0;
      }
      uint64_t v42 = v283;
      char v237 = v287 ^ 1;
      if (v236) {
        uint64_t v231 = v234;
      }
      else {
        unint64_t v236 = 0xE600000000000000;
      }
      unint64_t v239 = v123[2];
      unint64_t v238 = v123[3];
      if (v239 >= v238 >> 1) {
        id v123 = sub_10030BE7C((void *)(v238 > 1), v239 + 1, 1, v123);
      }
      v123[2] = v239 + 1;
      uint64_t v240 = &v123[6 * v239];
      v240[4] = v225;
      v240[5] = v226;
      v240[6] = v231;
      v240[7] = v236;
      v240[8] = 3;
      *((unsigned char *)v240 + 72) = v237 & 1;
      *(_DWORD *)((char *)v240 + 73) = 33686016;
      unint64_t v36 = v285;
    }
    else
    {
      uint64_t v42 = v283;
      uint64_t v88 = v215;
    }

    goto LABEL_155;
  }
  id v92 = [v24 accountType];
  if (!v92)
  {
LABEL_172:
    swift_release_n();
    v261 = v281;

    swift_release_n();
    __break(1u);
    goto LABEL_173;
  }
  uint64_t v93 = v92;
  uint64_t v94 = sub_100604818(v92);
  char v96 = v95;

  uint64_t v97 = v282;
  if ((v96 & 1) == 0)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      uint64_t v268 = v88;
      *(void *)&long long aBlock = v101;
      *(_DWORD *)uint64_t v100 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)&long long v292 = sub_1000C51B8(v275, v36, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v100 + 12) = 2082;
      uint64_t v102 = REMAccountType.loggableDescription.getter();
      *(void *)&long long v292 = sub_1000C51B8(v102, v103, (uint64_t *)&aBlock);
      unint64_t v36 = v285;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "UpdateAccountWithACAccount: Will process non-Apple account {displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v100, 0x16u);
      swift_arrayDestroy();
      uint64_t v88 = v268;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    os_log_type_t v131 = v269;
    id v132 = sub_100604E08(v269);
    if (v133)
    {
      uint64_t v134 = (uint64_t)v132;
      unint64_t v135 = v133;
      v136 = v131;
      swift_bridgeObjectRetain_n();
      v137 = v136;
      uint64_t v138 = Logger.logObject.getter();
      os_log_type_t v139 = static os_log_type_t.default.getter();
      BOOL v140 = os_log_type_enabled(v138, v139);
      unint64_t v285 = v134;
      if (v140)
      {
        uint64_t v268 = v88;
        uint64_t v284 = v94;
        uint64_t v141 = swift_slowAlloc();
        uint64_t v142 = (void *)swift_slowAlloc();
        uint64_t v282 = (void (**)(void, void, void))swift_slowAlloc();
        *(void *)&long long aBlock = v282;
        *(_DWORD *)uint64_t v141 = 136446466;
        swift_bridgeObjectRetain();
        *(void *)&long long v292 = sub_1000C51B8(v134, v135, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v141 + 12) = 2114;
        id v143 = [v137 identifier];
        id v144 = v143;
        if (v143) {
          *(void *)&long long v292 = v143;
        }
        else {
          *(void *)&long long v292 = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v142 = v144;

        _os_log_impl((void *)&_mh_execute_header, v138, v139, "UpdateAccountWithACAccount: Resolved non-Apple account identifier enabled for Reminders from displayACAccount: {resolved: %{public}s, displayACAccount: %{public}@}.", (uint8_t *)v141, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v42 = v283;
        uint64_t v94 = v284;
        uint64_t v88 = v268;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v180 = [self accountDescriptionWithACAccount:v137];
      if (v180)
      {
        unint64_t v181 = v180;
        uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v184 = v183;
      }
      else
      {
        uint64_t v182 = 0;
        unint64_t v184 = 0xE000000000000000;
      }
      id v123 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v186 = v123[2];
      unint64_t v185 = v123[3];
      if (v186 >= v185 >> 1) {
        id v123 = sub_10030BE7C((void *)(v185 > 1), v186 + 1, 1, v123);
      }
      v123[2] = v186 + 1;
      os_log_type_t v187 = &v123[6 * v186];
      v187[4] = v285;
      v187[5] = v135;
      v187[6] = v182;
      v187[7] = v184;
      v187[8] = v94;
      *((_DWORD *)v187 + 18) = 33685505;
      *((unsigned char *)v187 + 76) = 2;
      goto LABEL_155;
    }
    goto LABEL_65;
  }
  uint64_t v110 = v272;
  uint64_t v111 = v284;
  ((void (**)(char *, uint64_t, uint64_t))v282)[2](v272, v85, v284);
  Swift::Int v112 = v110;
  a1 = v24;
  unint64_t v113 = Logger.logObject.getter();
  int v114 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v113, (os_log_type_t)v114))
  {

    ((void (*)(char *, uint64_t))v97[1])(v112, v111);
LABEL_65:
    id v123 = _swiftEmptyArrayStorage;
LABEL_155:
    id v58 = v281;
    goto LABEL_156;
  }
  uint64_t v115 = (uint8_t *)swift_slowAlloc();
  uint64_t v116 = swift_slowAlloc();
  *(void *)&long long aBlock = v116;
  *(_DWORD *)uint64_t v115 = 136446210;
  id v117 = [a1 accountType];
  if (!v117)
  {
LABEL_176:

    swift_release_n();
    v265 = v281;

    swift_release_n();
    __break(1u);
    goto LABEL_177;
  }
  int v118 = v117;
  uint64_t v271 = v116;
  LODWORD(v273) = v114;
  id v119 = [v117 identifier];

  if (v119)
  {
    uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v122 = v121;

    *(void *)&long long v292 = sub_1000C51B8(v120, v122, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v273, "UpdateAccountWithACAccount: Can't figure out REMAccountType for ACAccountType {acAccountType: %{public}s}", v115, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v97[1])(v112, v284);
    id v123 = _swiftEmptyArrayStorage;
    id v58 = v281;
    uint64_t v42 = v283;
    unint64_t v36 = v285;
LABEL_156:
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v241 = v280;
    swift_retain();
    uint64_t v242 = v58;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10060E020((uint64_t)v123, v274, v88, v275, v36, (uint64_t)v123, v241, v242, v277, v278, v276, (uint64_t)v42);
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_release_n();

    swift_release_n();
LABEL_157:
    swift_release_n();
    goto LABEL_158;
  }
LABEL_177:

  swift_release_n();
  v266 = v281;

  swift_release_n();
  __break(1u);
}

uint64_t sub_1006121B4(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, id, uint64_t, _BYTE, uint64_t, uint64_t))
{
  uint64_t v20 = a15;
  uint64_t v21 = qword_100907A38;
  swift_retain();
  id v37 = a10;
  swift_retain();
  if (a1)
  {
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_10091F858);
    swift_bridgeObjectRetain_n();
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      v40[0] = swift_slowAlloc();
      *(_DWORD *)id v25 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "UpdateAccountWithACAccount: Migration state fetched {accountID: %{public}s}", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_10091F858);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v35 = a7;
      uint64_t v29 = swift_slowAlloc();
      v40[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315394;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v30 = Error.localizedDescription.getter();
        unint64_t v32 = v31;
      }
      else
      {
        unint64_t v32 = 0xE300000000000000;
        uint64_t v30 = 7104878;
      }
      sub_1000C51B8(v30, v32, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v29 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "UpdateAccountWithACAccount: Failed to fetch migration status. Assume the account is un-migrated {error: %s, accountID: %{public}s}", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v20 = a15;
      a7 = v35;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      swift_bridgeObjectRelease_n();
      uint64_t v20 = a15;
    }
  }
  swift_retain();
  id v33 = v37;
  swift_retain();
  v20(a6, a7, 0, a8 & 1, a5, a9, v33, a11, a12 & 1, a13, a14);
  swift_release_n();

  return swift_release_n();
}

uint64_t sub_100612664(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a9;
  *(void *)(v18 + 24) = a10;
  *(void *)(v18 + 32) = a11;
  *(unsigned char *)(v18 + 40) = a12 & 1;
  *(void *)(v18 + 48) = a13;
  *(void *)(v18 + 56) = a14;
  uint64_t v19 = v18;
  uint64_t v20 = swift_allocObject();
  uint64_t v48 = a3;
  *(void *)(v20 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  *(void *)(v20 + 32) = a5;
  *(void *)(v20 + 40) = a6;
  *(void *)(v20 + 48) = a7;
  char v49 = a8;
  *(unsigned char *)(v20 + 56) = a8;
  *(void *)(v20 + 64) = sub_100617BA4;
  *(void *)(v20 + 72) = v19;
  swift_retain();
  id v21 = a10;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v56 = a5;
  swift_retain();
  id v22 = a6;
  id v23 = a7;
  swift_retain();
  id v24 = [a1 identifier];
  if (v24)
  {
    id v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong
      && (uint64_t v30 = Strong,
          id v31 = [Strong cloudContext],
          v30,
          v31))
    {
      id v50 = v23;
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10008E2DC(v32, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain_n();
      id v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_1000C51B8(v26, v28, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Fetch migration state from user record {accountID: %{public}s}", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v23 = v50;
      int v44 = (void *)swift_allocObject();
      v44[2] = v26;
      v44[3] = v28;
      v44[4] = sub_1006147C4;
      v44[5] = v20;
      v44[6] = a1;
      aBlock[4] = (uint64_t)sub_1006147CC;
      aBlock[5] = (uint64_t)v44;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100102758;
      aBlock[3] = (uint64_t)&unk_1008CE100;
      uint64_t v45 = _Block_copy(aBlock);
      swift_retain();
      id v46 = a1;
      swift_release();
      [v31 fetchUserRecordWithAccountID:v25 completionHandler:v45];
      _Block_release(v45);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      unint64_t v52 = a4;

      if (qword_100907A38 != -1) {
        swift_once();
      }
      id v55 = v21;
      uint64_t v36 = type metadata accessor for Logger();
      sub_10008E2DC(v36, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain();
      id v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_1000C51B8(v26, v28, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Missing cloud context for fetching migration state {accountID: %{public}s}", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v40 = self;
      NSString v41 = String._bridgeToObjectiveC()();
      id v42 = [v40 internalErrorWithDebugDescription:v41];

      swift_retain();
      id v43 = v55;
      swift_retain();
      sub_1006121B4(0, (uint64_t)v42, v48, v52, v56, (uint64_t)v22, (uint64_t)v23, v49 & 1, a9, v43, a11, a12 & 1, a13, a14, (void (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, id, uint64_t, _BYTE, uint64_t, uint64_t))sub_10060F618);
      swift_bridgeObjectRelease();
      swift_release();

      swift_release();
      swift_release();
    }
    swift_release();

    return swift_release();
  }
  else
  {
    swift_release();

    swift_release();
    swift_release();

    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

void sub_100612D40(uint64_t a1, void *a2, uint64_t a3, Swift::Int a4, unint64_t a5, uint64_t a6, void (*a7)(void, void, void, void), uint64_t a8)
{
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v16[6] = a7;
  v16[7] = a8;
  id v17 = objc_allocWithZone((Class)REMSaveRequest);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v102 = a2;
  id v100 = [v17 initWithStore:a2];
  uint64_t v18 = *(void *)(a1 + 16);
  if (!v18)
  {
    LOBYTE(v20) = 0;
LABEL_70:
    sub_1005F9A50(v20 & 1, 0, 0, a3, a4, a5, a6, a7);
    swift_release();

    return;
  }
  uint64_t v91 = a3;
  Swift::Int v92 = a4;
  unint64_t v93 = a5;
  uint64_t v94 = a6;
  char v95 = a7;
  char v96 = v16;
  swift_bridgeObjectRetain();
  uint64_t v114 = 0;
  char v97 = 0;
  BOOL v101 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 1 - v18;
  uint64_t v104 = a1;
  while (1)
  {
    uint64_t v22 = *(void *)(v104 + v114 + 32);
    unint64_t v21 = *(void *)(v104 + v114 + 40);
    uint64_t v24 = *(void *)(v104 + v114 + 48);
    id v23 = *(void **)(v104 + v114 + 56);
    id v25 = *(id *)(v104 + v114 + 64);
    int v111 = *(unsigned __int8 *)(v104 + v114 + 73);
    int v105 = *(unsigned __int8 *)(v104 + v114 + 74);
    int v106 = *(unsigned __int8 *)(v104 + v114 + 75);
    int v107 = *(unsigned __int8 *)(v104 + v114 + 76);
    int v108 = *(unsigned __int8 *)(v104 + v114 + 72);
    uint64_t v26 = qword_100907A38;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    if (v26 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E2DC(v27, (uint64_t)qword_10091F858);
    swift_bridgeObjectRetain_n();
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    uint64_t v113 = v19;
    uint64_t v109 = v24;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      aBlock[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v30 + 4) = sub_1000C51B8(v22, v21, (uint64_t *)aBlock);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "UpdateAccountsWithAccountInfos: Updating account object {accountID: %{public}s}", (uint8_t *)v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v31 = sub_10060062C(v22, v21);
    if (!v31)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRetain();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v32, v36))
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_4;
      }
      uint64_t v37 = swift_slowAlloc();
      id v23 = (void *)swift_slowAlloc();
      aBlock[0] = v23;
      *(_DWORD *)uint64_t v37 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v37 + 4) = sub_1000C51B8(v22, v21, (uint64_t *)aBlock);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v32, v36, "UpdateAccountsWithAccountInfos: Failed to create UUID object, account ignored {accountID: %{public}s}", (uint8_t *)v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_66;
    }
    uint64_t v32 = v31;
    aBlock[0] = 0;
    id v33 = [v102 fetchAccountWithObjectID:v31 error:aBlock];
    id v34 = aBlock[0];
    if (v33)
    {
      if (v111)
      {
        uint64_t v35 = v33;
LABEL_18:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v35)
        {
          Swift::Int v112 = v32;
          uint64_t v39 = v22;
          id v40 = v33;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v41 = v40;
          id v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v42, v43))
          {
            uint64_t v44 = swift_slowAlloc();
            aBlock[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v44 = 136315650;
            swift_bridgeObjectRetain();
            *(void *)(v44 + 4) = sub_1000C51B8(v109, (unint64_t)v23, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v44 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v44 + 14) = sub_1000C51B8(v39, v21, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v44 + 22) = 2048;
            id v23 = [v35 type];

            *(void *)(v44 + 24) = v23;
            _os_log_impl((void *)&_mh_execute_header, v42, v43, "UpdateAccountsWithAccountInfos is going to delete account {accountName: %s, accountID: %{public}s, type: %ld}.", (uint8_t *)v44, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          id v57 = [v100 updateAccount:v35];
          [v57 removeFromStore];

          if (!v20)
          {
            swift_bridgeObjectRelease();
            LOBYTE(v20) = 1;
            id v23 = v96;
            goto LABEL_73;
          }
          BOOL v101 = 1;
          char v97 = 1;
LABEL_61:
          uint64_t v19 = v113;
          goto LABEL_5;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      os_log_t log = (os_log_t)v22;
      id v45 = v33;
      if ([v45 type] != v25)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v58 = v45;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v59 = v58;
        int v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v60, v61))
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();

          goto LABEL_4;
        }
        uint64_t v62 = swift_slowAlloc();
        aBlock[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v62 = 136315906;
        swift_bridgeObjectRetain();
        *(void *)(v62 + 4) = sub_1000C51B8(v109, (unint64_t)v23, (uint64_t *)aBlock);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v62 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v62 + 14) = sub_1000C51B8(v22, v21, (uint64_t *)aBlock);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v62 + 22) = 2048;
        id v23 = [v59 type];

        *(void *)(v62 + 24) = v23;
        *(_WORD *)(v62 + 32) = 2048;
        *(void *)(v62 + 34) = v25;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "UpdateAccountsWithAccountInfos: Unexpected account type, account ignored. {accountName: %s, accountID: %{public}s, expectedType: %ld, actualType: %ld}", (uint8_t *)v62, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_66;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v46 = v45;
      os_log_type_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        id v98 = v33;
        uint64_t v49 = swift_slowAlloc();
        aBlock[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 136315650;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v109, (unint64_t)v23, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v49 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v22, v21, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v49 + 22) = 2048;
        [v46 type];

        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "UpdateAccountsWithAccountInfos is updating existing account object {name: %s, accountID: %{public}s, type: %ld}", (uint8_t *)v49, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v33 = v98;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      id v63 = [v100 updateAccount:v46];
      NSString v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v63 setName:v64];
    }
    else
    {
      os_log_type_t v38 = v34;
      os_log_t log = (os_log_t)v22;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v35 = 0;
      swift_errorRelease();
      uint64_t v113 = 0;
      if (v111) {
        goto LABEL_18;
      }
      if ((v108 & 1) == 0)
      {
        id v50 = [objc_allocWithZone((Class)REMAccountTypeHost) initWithType:v25];
        unsigned int v51 = [v50 isCloudKit];

        if (!v51)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v80 = Logger.logObject.getter();
          os_log_type_t v81 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v80, v81))
          {
            uint64_t v82 = swift_slowAlloc();
            aBlock[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v82 = 136315650;
            swift_bridgeObjectRetain();
            *(void *)(v82 + 4) = sub_1000C51B8(v109, (unint64_t)v23, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v82 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v82 + 14) = sub_1000C51B8(v22, v21, (uint64_t *)aBlock);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v82 + 22) = 2082;
            uint64_t v83 = REMAccountType.loggableDescription.getter();
            id v23 = (void *)v84;
            *(void *)(v82 + 24) = sub_1000C51B8(v83, v84, (uint64_t *)aBlock);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v80, v81, "UpdateAccountsWithAccountInfos won't create inactive accounts unless it is CloudKit {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v82, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
LABEL_66:

          goto LABEL_4;
        }
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        aBlock[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 136315650;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v109, (unint64_t)v23, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v54 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v22, v21, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v54 + 22) = 2082;
        uint64_t v55 = REMAccountType.loggableDescription.getter();
        sub_1000C51B8(v55, v56, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "UpdateAccountsWithAccountInfos is creating account object {name: %s, accountID: %{public}s, type: %{public}s}", (uint8_t *)v54, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      NSString v65 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v66 = [v100 __addAccountWithType:v25 name:v65];

      id v63 = v66;
      [v63 setObjectID:v32];
      id v67 = [objc_allocWithZone((Class)REMAccountTypeHost) initWithType:v25];
      unsigned int v68 = [v67 isCloudKit];

      id v33 = 0;
      if (!v68)
      {
        uint64_t v69 = v22;
        NSString v64 = String._bridgeToObjectiveC()();
        [v63 setExternalIdentifier:v64];

        char v97 = 1;
        goto LABEL_42;
      }
      [v63 setPersistenceCloudSchemaVersion:20240715];
      char v97 = 1;
      NSString v64 = v63;
    }
    uint64_t v69 = (uint64_t)log;
LABEL_42:

    if (v108 == [v63 inactive])
    {
      id v99 = v33;
      [v63 setInactive:v108 ^ 1u];
      id v70 = v63;
      swift_bridgeObjectRetain();
      id v71 = v70;
      id v72 = Logger.logObject.getter();
      os_log_type_t v110 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v72, v110))
      {
        uint64_t v73 = swift_slowAlloc();
        aBlock[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v73 = 136446722;
        [v71 inactive];
        uint64_t v74 = Bool.yesno.getter();
        sub_1000C51B8(v74, v75, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v73 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v69, v21, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v73 + 22) = 2082;
        uint64_t v76 = REMAccountType.loggableDescription.getter();
        sub_1000C51B8(v76, v77, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v33 = v99;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (v105 != 2)
    {
      if ([v63 didChooseToMigrateLocally]
        && [v63 didChooseToMigrate]
        && (v105 & 1) == 0)
      {
        [v63 setDidChooseToMigrateLocally:0];
      }
      [v63 setDidChooseToMigrate:v105 & 1];
    }
    if (v106 != 2) {
      [v63 setDidFinishMigration:v106 & 1];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v107 != 2) {
      [v63 setDebugSyncDisabled:v107 & 1];
    }
    if (v101)
    {

      if (!v20)
      {
        swift_bridgeObjectRelease();
        id v23 = v96;
        LOBYTE(v20) = v97;
        goto LABEL_73;
      }
      BOOL v101 = 1;
      goto LABEL_61;
    }
    id v78 = [v63 changedKeys];
    id v23 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v79 = v23[2];
    swift_bridgeObjectRelease();
    BOOL v101 = v79 != 0;
LABEL_4:
    uint64_t v19 = v113;
    if (!v20) {
      break;
    }
LABEL_5:
    ++v20;
    v114 += 48;
    if (v20 == 1)
    {
      __break(1u);
      goto LABEL_78;
    }
  }
  swift_bridgeObjectRelease();
  a7 = v95;
  id v23 = v96;
  a5 = v93;
  a6 = v94;
  a3 = v91;
  a4 = v92;
  LOBYTE(v20) = v97;
  if (!v101) {
    goto LABEL_70;
  }
LABEL_73:
  uint64_t v85 = Logger.logObject.getter();
  os_log_type_t v86 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v85, v86))
  {
    os_log_type_t v87 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v87 = 0;
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "UpdateAccountsWithAccountInfos: Saving account object changes", v87, 2u);
    swift_slowDealloc();
  }

  if (qword_1009070D8 != -1) {
LABEL_78:
  }
    swift_once();
  uint64_t v88 = qword_100942078;
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = sub_10061482C;
  *(void *)(v89 + 24) = v23;
  *(unsigned char *)(v89 + 32) = v20 & 1;
  *(unsigned char *)(v89 + 33) = 1;
  aBlock[4] = sub_100614830;
  aBlock[5] = (id)v89;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000E13D0;
  aBlock[3] = &unk_1008CD318;
  uint64_t v90 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v100 saveWithQueue:v88 completion:v90];

  _Block_release(v90);
  swift_release();
}

void sub_100614220(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = swift_allocObject();
  uint64_t v43 = a3;
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  uint64_t v18 = v17;
  *(void *)(v17 + 32) = a5;
  *(void *)(v17 + 40) = a6;
  *(void *)(v17 + 48) = a7;
  char v44 = a8;
  *(unsigned char *)(v17 + 56) = a8;
  *(void *)(v17 + 64) = a9;
  *(void *)(v17 + 72) = a10;
  uint64_t v19 = a1;
  unint64_t v46 = a4;
  swift_bridgeObjectRetain();
  uint64_t v45 = a5;
  swift_retain();
  id v20 = a6;
  id v21 = a7;
  swift_retain();
  id v22 = [a1 identifier];
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong
      && (unint64_t v28 = Strong,
          id v29 = [Strong cloudContext],
          v28,
          v29))
    {
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_10008E2DC(v30, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain_n();
      id v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v47 = v24;
        id v33 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)id v33 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v49 = sub_1000C51B8(v47, v26, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Fetch migration state from user record {accountID: %{public}s}", v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v24 = v47;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v40 = (void *)swift_allocObject();
      uint64_t v40[2] = v24;
      v40[3] = v26;
      v40[4] = sub_1006147C4;
      v40[5] = v18;
      v40[6] = v19;
      aBlock[4] = (uint64_t)sub_1006147CC;
      aBlock[5] = (uint64_t)v40;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100102758;
      aBlock[3] = (uint64_t)&unk_1008CD250;
      id v41 = _Block_copy(aBlock);
      swift_retain();
      id v42 = v19;
      swift_release();
      [v29 fetchUserRecordWithAccountID:v23 completionHandler:v41];
      _Block_release(v41);
      swift_release();
    }
    else
    {

      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_10008E2DC(v34, (uint64_t)qword_10091F858);
      swift_bridgeObjectRetain();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v49 = sub_1000C51B8(v24, v26, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Missing cloud context for fetching migration state {accountID: %{public}s}", v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      os_log_type_t v38 = self;
      NSString v39 = String._bridgeToObjectiveC()();
      id v23 = [v38 internalErrorWithDebugDescription:v39];

      sub_1005F934C(0, (uint64_t)v23, v43, v46, v45, (uint64_t)v20, (uint64_t)v21, v44 & 1, a9, a10);
      swift_release();
    }
  }
  else
  {
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    __break(1u);
  }
}

uint64_t sub_1006147D0()
{
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100614818(char a1, uint64_t a2)
{
  return sub_1005F66C8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(uint64_t (**)(void, uint64_t))(v2 + 40));
}

uint64_t sub_100614830(uint64_t a1)
{
  return sub_1005F6B00(a1, *(uint64_t (**)(void, void, void))(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(unsigned char *)(v1 + 33));
}

uint64_t sub_100614840()
{
  return sub_100617F0C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10061485C()
{
  return sub_100617F0C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100614878(char a1, uint64_t a2)
{
  return sub_1005FDF18(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100614884()
{
  return sub_100617548(48);
}

uint64_t sub_10061488C(uint64_t a1, char a2)
{
  return sub_1005FE1F0(a1, a2 & 1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10061489C()
{
  return (*(uint64_t (**)(void, uint64_t))(v0 + 16))(0, 1);
}

uint64_t sub_1006148CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006148E0()
{
  return sub_1005FB1A0(v0[2], v0[3], v0[4]);
}

uint64_t sub_1006148EC()
{
  return sub_100617F0C((void (*)(void))&_swift_release);
}

uint64_t sub_100614904()
{
  uint64_t v1 = *(uint64_t (**)(void, void))(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_beginAccess();
  return v1(*(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_100614960()
{
  return sub_100617D30(64);
}

uint64_t sub_100614968()
{
  return sub_1005FE2B0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(NSObject **)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

void sub_10061497C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char *a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  id v121 = a1;
  int v16 = a8 & 1;
  uint64_t v124 = type metadata accessor for UUID();
  uint64_t v109 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  id v123 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (char **)swift_allocObject();
  v18[2] = (char *)a2;
  v18[3] = (char *)a3;
  v18[4] = (char *)a4;
  v18[5] = (char *)a5;
  v18[6] = a6;
  v18[7] = (char *)a7;
  int v115 = v16;
  *((unsigned char *)v18 + 64) = v16;
  uint64_t v116 = a9;
  v18[9] = (char *)a9;
  v18[10] = (char *)a10;
  uint64_t v120 = a2;
  swift_retain();
  uint64_t v119 = a3;
  swift_retain();
  swift_errorRetain();
  uint64_t v19 = qword_100907A38;
  swift_retain();
  id v117 = a6;
  uint64_t v118 = a10;
  swift_retain();
  if (v19 != -1) {
    goto LABEL_53;
  }
  while (1)
  {
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v122 = sub_10008E2DC(v20, (uint64_t)qword_10091F858);
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDAccountUtils: Trying to remove orphaned accounts", v23, 2u);
      swift_slowDealloc();
    }

    id v24 = [self sharedInstance];
    id v25 = [v24 accountStore];

    id v26 = [v25 aa_accountsEnabledForDataclass:kAccountDataclassReminders];
    if (!v26)
    {
      os_log_type_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        id v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "RDAccountUtils: Couldn't fetch accounts from ACAccountStore. Not able to determine orphaned accounts.", v40, 2u);
        swift_slowDealloc();
      }

      id v41 = self;
      NSString v42 = String._bridgeToObjectiveC()();
      id v126 = [v41 internalErrorWithDebugDescription:v42];

      sub_1005FC270(0, (uint64_t)v126, v120, v119, a4, a5, v117, a7, v115, v116, v118);
      swift_release();

      id v43 = v126;

      return;
    }
    uint64_t v27 = v26;
    uint64_t v111 = a4;
    uint64_t v110 = a7;
    unint64_t v112 = a5;
    sub_1000963CC(0, &qword_1009181C0);
    a5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v130[0] = &_swiftEmptySetSingleton;
    if (a5 >> 62)
    {
      swift_bridgeObjectRetain();
      a4 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      a4 = *(void *)((a5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v114 = v18;
    id v113 = v25;
    if (!a4) {
      break;
    }
    a7 = 4;
    uint64_t v18 = &selRef_resolveConflicts_error_;
    while (1)
    {
      id v28 = (a5 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(a5 + 8 * a7);
      id v29 = v28;
      uint64_t v30 = a7 - 3;
      if (__OFADD__(a7 - 4, 1)) {
        break;
      }
      if (![v28 isActive]) {
        goto LABEL_9;
      }
      id v31 = [v29 identifier];
      if (!v31) {
        goto LABEL_97;
      }
      os_log_type_t v32 = v31;
      Swift::Int v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v35 = v34;

      sub_10031DC68((Swift::Int *)&aBlock, v33, v35);
      swift_bridgeObjectRelease();
      os_log_type_t v36 = sub_10060095C(v29);
      if (v37)
      {
        sub_10031DC68((Swift::Int *)&aBlock, (Swift::Int)v36, v37);

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_9:
      }
      ++a7;
      if (v30 == a4)
      {
        swift_bridgeObjectRelease_n();
        id v126 = v130[0];
        id v25 = v113;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_53:
    swift_once();
  }
  swift_bridgeObjectRelease_n();
  id v126 = &_swiftEmptySetSingleton;
LABEL_26:
  id aBlock = 0;
  char v44 = [v121 fetchAccountsIncludingInactive:1 error:&aBlock];
  id v45 = aBlock;
  if (!v44)
  {
    id v69 = aBlock;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    id v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      id v72 = (uint8_t *)swift_slowAlloc();
      id aBlock = (id)swift_slowAlloc();
      *(_DWORD *)id v72 = 136315138;
      id v25 = v113;
      swift_getErrorValue();
      uint64_t v73 = Error.localizedDescription.getter();
      v130[0] = (id)sub_1000C51B8(v73, v74, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Failed to fetch accounts which are no longer signed-in {error: %s}", v72, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v75 = v112;
    uint64_t v76 = v110;
    uint64_t v77 = v111;
    id v78 = self;
    NSString v79 = String._bridgeToObjectiveC()();
    id v80 = [v78 internalErrorWithDebugDescription:v79];

    sub_1005FC270(0, (uint64_t)v80, v120, v119, v77, v75, v117, v76, v115, v116, v118);
    swift_errorRelease();
    swift_release();
    return;
  }
  unint64_t v46 = (unint64_t)v44;
  sub_1000963CC(0, &qword_1009146B8);
  unint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v48 = v45;

  unint64_t v129 = (unint64_t)_swiftEmptyArrayStorage;
  if (v47 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v49)
    {
LABEL_29:
      if (v49 < 1)
      {
        __break(1u);
        goto LABEL_79;
      }
      uint64_t v50 = 0;
      unint64_t v125 = (id *)(v47 + 32);
      unsigned int v51 = (void (**)(char *, uint64_t))(v109 + 8);
      do
      {
        if ((v47 & 0xC000000000000001) != 0) {
          id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v52 = v125[v50];
        }
        os_log_type_t v53 = v52;
        if (qword_100907A40 != -1) {
          swift_once();
        }
        uint64_t v54 = off_10091F870;
        id v55 = [v53 type];
        if (*((void *)v54 + 2))
        {
          Swift::UInt v56 = (Swift::UInt)v55;
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v56);
          Swift::Int v57 = Hasher._finalize()();
          uint64_t v58 = -1 << v54[32];
          unint64_t v59 = v57 & ~v58;
          if ((*(void *)&v54[((v59 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v59))
          {
            uint64_t v60 = *((void *)v54 + 6);
            if (*(void *)(v60 + 8 * v59) == v56)
            {
LABEL_44:
              id v62 = [v53 objectID];
              id v63 = [v62 uuid];

              NSString v64 = v123;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v65 = UUID.uuidString.getter();
              uint64_t v67 = v66;
              (*v51)(v64, v124);
              LOBYTE(v65) = sub_1001CBC20(v65, v67, (uint64_t)v126);
              swift_bridgeObjectRelease();
              if ((v65 & 1) == 0)
              {
                id v68 = v53;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
            }
            else
            {
              uint64_t v61 = ~v58;
              while (1)
              {
                unint64_t v59 = (v59 + 1) & v61;
                if (((*(void *)&v54[((v59 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v59) & 1) == 0) {
                  break;
                }
                if (*(void *)(v60 + 8 * v59) == v56) {
                  goto LABEL_44;
                }
              }
            }
          }
        }
        ++v50;
      }
      while (v50 != v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v46 = v129;
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v49 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v49) {
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v46 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_57:
  os_log_type_t v81 = (void *)(v46 >> 62);
  a5 = v112;
  a7 = v110;
  unint64_t v47 = v111;
  if (v46 >> 62) {
    goto LABEL_74;
  }
  if (!*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_75:
    swift_bridgeObjectRelease();
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v91, v92))
    {
      unint64_t v93 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v93 = 0;
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "No orphaned accounts to remove.", v93, 2u);
      swift_slowDealloc();
    }

    sub_1005FC270(0, 0, v120, v119, v47, a5, v117, a7, v115, v116, v118);
    id v94 = v113;
    goto LABEL_94;
  }
  while (1)
  {
    swift_bridgeObjectRetain_n();
    a5 = Logger.logObject.getter();
    LODWORD(v49) = static os_log_type_t.default.getter();
    if (!os_log_type_enabled((os_log_t)a5, (os_log_type_t)v49))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_82;
    }
    a7 = swift_slowAlloc();
    unint64_t v125 = (id *)swift_slowAlloc();
    v130[0] = v125;
    *(_DWORD *)a7 = 136315138;
    if (!v81)
    {
      uint64_t v82 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v82) {
        break;
      }
      goto LABEL_62;
    }
LABEL_79:
    swift_bridgeObjectRetain();
    uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
    if (!v82) {
      break;
    }
LABEL_62:
    LODWORD(v122) = v49;
    id v123 = (char *)a7;
    uint64_t v124 = a5;
    uint64_t v128 = _swiftEmptyArrayStorage;
    sub_1001DE058(0, v82 & ~(v82 >> 63), 0);
    if (v82 < 0) {
      goto LABEL_96;
    }
    uint64_t v83 = 0;
    unint64_t v84 = v128;
    id v126 = (id)(v46 & 0xC000000000000001);
    os_log_type_t v81 = (void *)v46;
    while (v82 != v83)
    {
      if (v126) {
        id v85 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v85 = *(id *)(v46 + 8 * v83 + 32);
      }
      os_log_type_t v86 = v85;
      unint64_t v127 = v85;
      sub_1005FA0FC(&v127, (uint64_t *)&aBlock);

      a7 = (uint64_t)aBlock;
      uint64_t v87 = v132;
      uint64_t v128 = v84;
      a5 = v84[2];
      unint64_t v88 = v84[3];
      unint64_t v47 = a5 + 1;
      if (a5 >= v88 >> 1)
      {
        sub_1001DE058(v88 > 1, a5 + 1, 1);
        unint64_t v84 = v128;
      }
      ++v83;
      v84[2] = v47;
      uint64_t v89 = &v84[2 * a5];
      v89[4] = a7;
      v89[5] = v87;
      unint64_t v46 = (unint64_t)v81;
      if (v82 == v83)
      {
        swift_bridgeObjectRelease();
        a5 = v124;
        a7 = (uint64_t)v123;
        LOBYTE(v49) = v122;
        goto LABEL_81;
      }
    }
    __break(1u);
LABEL_74:
    swift_bridgeObjectRetain();
    uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v90) {
      goto LABEL_75;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v84 = _swiftEmptyArrayStorage;
LABEL_81:
  id aBlock = v84;
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
  uint64_t v95 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v97 = v96;
  swift_bridgeObjectRelease();
  id aBlock = (id)sub_1000C51B8(v95, v97, (uint64_t *)v130);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)a5, (os_log_type_t)v49, "Removing orphaned accounts {accounts: %s}", (uint8_t *)a7, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_82:
  id v98 = objc_allocWithZone((Class)REMSaveRequest);
  id v94 = [v98 initWithStore:v121];
  swift_beginAccess();
  unint64_t v99 = v129;
  if (v129 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v100 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v100) {
      goto LABEL_91;
    }
LABEL_84:
    if (v100 >= 1)
    {
      uint64_t v101 = 0;
      do
      {
        if ((v99 & 0xC000000000000001) != 0) {
          id v102 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v102 = *(id *)(v99 + 8 * v101 + 32);
        }
        unint64_t v103 = v102;
        ++v101;
        id v104 = [v94 updateAccount:v102];
        [v104 removeFromStore];
      }
      while (v100 != v101);
      goto LABEL_91;
    }
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    swift_release();
    swift_release();
    swift_errorRelease();
    swift_release();

    swift_release();
    __break(1u);
  }
  uint64_t v100 = *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v100) {
    goto LABEL_84;
  }
LABEL_91:
  swift_bridgeObjectRelease();
  if (qword_1009070D8 != -1) {
    swift_once();
  }
  uint64_t v105 = qword_100942078;
  uint64_t v106 = swift_allocObject();
  int v107 = v114;
  *(void *)(v106 + 16) = sub_100617808;
  *(void *)(v106 + 24) = v107;
  unint64_t v135 = sub_100618480;
  uint64_t v136 = v106;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v132 = 1107296256;
  unint64_t v133 = sub_1000E13D0;
  uint64_t v134 = &unk_1008CDDB8;
  int v108 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v94 saveWithQueue:v105 completion:v108];

  _Block_release(v108);
LABEL_94:
  swift_release();
}

void sub_100615BB4(void *a1, unint64_t a2, void *a3, NSObject *a4, int a5, uint64_t a6, uint64_t a7)
{
  id v131 = a1;
  uint64_t v135 = type metadata accessor for UUID();
  uint64_t v123 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  uint64_t v134 = (uint8_t *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  id v126 = a4;
  *(void *)(v14 + 32) = a4;
  int v127 = a5;
  *(unsigned char *)(v14 + 40) = a5 & 1;
  uint64_t v128 = a6;
  *(void *)(v14 + 48) = a6;
  *(void *)(v14 + 56) = a7;
  uint64_t v133 = v14;
  uint64_t v15 = qword_100907A38;
  swift_retain();
  id v129 = a3;
  uint64_t v130 = a7;
  swift_retain();
  if (v15 != -1) {
    goto LABEL_55;
  }
  while (1)
  {
    uint64_t v16 = type metadata accessor for Logger();
    uint64_t v17 = sub_10008E2DC(v16, (uint64_t)qword_10091F858);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDAccountUtils: Trying to remove orphaned accounts", v20, 2u);
      swift_slowDealloc();
    }

    id v21 = [self sharedInstance];
    id v22 = [v21 accountStore];

    id v132 = v22;
    id v23 = [v22 aa_accountsEnabledForDataclass:kAccountDataclassReminders];
    if (!v23)
    {
      os_log_type_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        id v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "RDAccountUtils: Couldn't fetch accounts from ACAccountStore. Not able to determine orphaned accounts.", v41, 2u);
        swift_slowDealloc();
      }

      NSString v42 = self;
      NSString v43 = String._bridgeToObjectiveC()();
      id v44 = [v42 internalErrorWithDebugDescription:v43];

      uint64_t v45 = swift_allocObject();
      unint64_t v46 = v126;
      *(void *)(v45 + 16) = a2;
      *(void *)(v45 + 24) = v46;
      *(unsigned char *)(v45 + 32) = v127 & 1;
      uint64_t v47 = v130;
      *(void *)(v45 + 40) = v128;
      *(void *)(v45 + 48) = v47;
      *(unsigned char *)(v45 + 56) = 0;
      *(void *)(v45 + 64) = v44;
      swift_retain();
      swift_retain();
      id v48 = v44;
      sub_1005FA48C(v129, (uint64_t)sub_100616E5C, v45);
      swift_release();

      goto LABEL_26;
    }
    id v24 = v23;
    uint64_t v125 = v17;
    sub_1000963CC(0, &qword_1009181C0);
    unint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v141 = &_swiftEmptySetSingleton;
    if (v25 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    unint64_t v124 = a2;
    if (!v26) {
      break;
    }
    unint64_t v27 = v25 & 0xC000000000000001;
    a2 = 4;
    a4 = &selRef_resolveConflicts_error_;
    unint64_t v137 = v25 & 0xC000000000000001;
    while (1)
    {
      id v28 = v27 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v25 + 8 * a2);
      id v29 = v28;
      unint64_t v30 = a2 - 3;
      if (__OFADD__(a2 - 4, 1)) {
        break;
      }
      if ([v28 isActive])
      {
        uint64_t v31 = v26;
        id v32 = [v29 identifier];
        if (!v32) {
          goto LABEL_98;
        }
        Swift::Int v33 = v32;
        Swift::Int v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v36 = v35;

        sub_10031DC68((Swift::Int *)&aBlock, v34, v36);
        swift_bridgeObjectRelease();
        Swift::Int v37 = sub_10060095C(v29);
        if (v38)
        {
          sub_10031DC68((Swift::Int *)&aBlock, (Swift::Int)v37, v38);

          swift_bridgeObjectRelease();
        }
        else
        {
        }
        uint64_t v26 = v31;
        unint64_t v27 = v137;
      }
      else
      {
      }
      ++a2;
      if (v30 == v26)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v137 = (unint64_t)v141;
        a2 = v124;
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_55:
    swift_once();
  }
  swift_bridgeObjectRelease_n();
  unint64_t v137 = (unint64_t)&_swiftEmptySetSingleton;
LABEL_28:
  id aBlock = 0;
  id v49 = [v131 fetchAccountsIncludingInactive:1 error:&aBlock];
  id v50 = aBlock;
  if (!v49)
  {
    id v75 = aBlock;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      id v78 = (uint8_t *)swift_slowAlloc();
      id aBlock = (id)swift_slowAlloc();
      *(_DWORD *)id v78 = 136315138;
      swift_getErrorValue();
      uint64_t v79 = Error.localizedDescription.getter();
      uint64_t v141 = (void *)sub_1000C51B8(v79, v80, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Failed to fetch accounts which are no longer signed-in {error: %s}", v78, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    os_log_type_t v81 = self;
    NSString v82 = String._bridgeToObjectiveC()();
    id v83 = [v81 internalErrorWithDebugDescription:v82];

    uint64_t v84 = swift_allocObject();
    id v85 = v126;
    *(void *)(v84 + 16) = a2;
    *(void *)(v84 + 24) = v85;
    *(unsigned char *)(v84 + 32) = v127 & 1;
    uint64_t v86 = v130;
    *(void *)(v84 + 40) = v128;
    *(void *)(v84 + 48) = v86;
    *(unsigned char *)(v84 + 56) = 0;
    *(void *)(v84 + 64) = v83;
    swift_retain();
    swift_retain();
    id v87 = v83;
    sub_1005FA48C(v129, (uint64_t)sub_100616E5C, v84);

    swift_release();
    swift_errorRelease();
LABEL_26:
    swift_release();
    return;
  }
  unsigned int v51 = v49;
  sub_1000963CC(0, &qword_1009146B8);
  unint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v53 = v50;

  unint64_t v140 = (unint64_t)_swiftEmptyArrayStorage;
  if (v52 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v54) {
      goto LABEL_31;
    }
    goto LABEL_58;
  }
  uint64_t v54 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v54)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v74 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_59;
  }
LABEL_31:
  if (v54 < 1)
  {
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v55 = 0;
  uint64_t v136 = (id *)(v52 + 32);
  Swift::UInt v56 = (void (**)(uint8_t *, uint64_t))(v123 + 8);
  do
  {
    if ((v52 & 0xC000000000000001) != 0) {
      id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v57 = v136[v55];
    }
    uint64_t v58 = v57;
    if (qword_100907A40 != -1) {
      swift_once();
    }
    unint64_t v59 = off_10091F870;
    id v60 = [v58 type];
    if (*((void *)v59 + 2))
    {
      Swift::UInt v61 = (Swift::UInt)v60;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v61);
      Swift::Int v62 = Hasher._finalize()();
      uint64_t v63 = -1 << v59[32];
      unint64_t v64 = v62 & ~v63;
      if ((*(void *)&v59[((v64 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v64))
      {
        uint64_t v65 = *((void *)v59 + 6);
        if (*(void *)(v65 + 8 * v64) == v61)
        {
LABEL_46:
          id v67 = [v58 objectID];
          id v68 = [v67 uuid];

          id v69 = v134;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v70 = UUID.uuidString.getter();
          uint64_t v72 = v71;
          (*v56)(v69, v135);
          LOBYTE(v70) = sub_1001CBC20(v70, v72, v137);
          swift_bridgeObjectRelease();
          if ((v70 & 1) == 0)
          {
            id v73 = v58;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        else
        {
          uint64_t v66 = ~v63;
          while (1)
          {
            unint64_t v64 = (v64 + 1) & v66;
            if (((*(void *)&v59[((v64 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v64) & 1) == 0) {
              break;
            }
            if (*(void *)(v65 + 8 * v64) == v61) {
              goto LABEL_46;
            }
          }
        }
      }
    }
    ++v55;
  }
  while (v55 != v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v74 = v140;
  a2 = v124;
LABEL_59:
  unint64_t v88 = v74 >> 62;
  unint64_t v137 = v74;
  if (v74 >> 62) {
    goto LABEL_76;
  }
  if (!*(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_77:
    swift_bridgeObjectRelease();
    uint64_t v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v101, v102))
    {
      unint64_t v103 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v103 = 0;
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "No orphaned accounts to remove.", v103, 2u);
      swift_slowDealloc();
    }

    uint64_t v104 = swift_allocObject();
    uint64_t v105 = v126;
    *(void *)(v104 + 16) = a2;
    *(void *)(v104 + 24) = v105;
    *(unsigned char *)(v104 + 32) = v127 & 1;
    uint64_t v106 = v130;
    *(void *)(v104 + 40) = v128;
    *(void *)(v104 + 48) = v106;
    *(unsigned char *)(v104 + 56) = 0;
    *(void *)(v104 + 64) = 0;
    swift_retain();
    swift_retain();
    sub_1005FA48C(v129, (uint64_t)sub_100616E5C, v104);
    swift_release();

    goto LABEL_26;
  }
  while (2)
  {
    swift_bridgeObjectRetain_n();
    a4 = Logger.logObject.getter();
    LODWORD(v54) = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(a4, (os_log_type_t)v54))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_84;
    }
    unint64_t v25 = swift_slowAlloc();
    uint64_t v136 = (id *)swift_slowAlloc();
    uint64_t v141 = v136;
    *(_DWORD *)unint64_t v25 = 136315138;
    if (!v88)
    {
      uint64_t v89 = *(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v89) {
        goto LABEL_82;
      }
LABEL_64:
      LODWORD(v130) = v54;
      uint64_t v134 = (uint8_t *)v25;
      uint64_t v135 = (uint64_t)a4;
      os_log_type_t v139 = _swiftEmptyArrayStorage;
      sub_1001DE058(0, v89 & ~(v89 >> 63), 0);
      if (v89 < 0) {
        goto LABEL_97;
      }
      uint64_t v90 = 0;
      unint64_t v88 = 0;
      uint64_t v91 = v139;
      unint64_t v92 = v137;
      unint64_t v93 = v137 & 0xC000000000000001;
      while (v89 != v90)
      {
        if (v93) {
          id v94 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v94 = *(id *)(v92 + 8 * v90 + 32);
        }
        uint64_t v95 = v94;
        uint64_t v138 = v94;
        sub_1005FA0FC(&v138, (uint64_t *)&aBlock);

        id v96 = aBlock;
        uint64_t v97 = v143;
        os_log_type_t v139 = v91;
        a2 = v91[2];
        unint64_t v98 = v91[3];
        if (a2 >= v98 >> 1)
        {
          sub_1001DE058(v98 > 1, a2 + 1, 1);
          unint64_t v92 = v137;
          uint64_t v91 = v139;
        }
        ++v90;
        v91[2] = a2 + 1;
        unint64_t v99 = &v91[2 * a2];
        v99[4] = v96;
        v99[5] = v97;
        if (v89 == v90)
        {
          swift_bridgeObjectRelease();
          a4 = v135;
          unint64_t v25 = (unint64_t)v134;
          LOBYTE(v54) = v130;
          goto LABEL_83;
        }
      }
      __break(1u);
LABEL_76:
      swift_bridgeObjectRetain();
      uint64_t v100 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v100) {
        goto LABEL_77;
      }
      continue;
    }
    break;
  }
LABEL_81:
  swift_bridgeObjectRetain();
  uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
  if (v89) {
    goto LABEL_64;
  }
LABEL_82:
  swift_bridgeObjectRelease();
  uint64_t v91 = _swiftEmptyArrayStorage;
LABEL_83:
  id aBlock = v91;
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
  uint64_t v107 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v109 = v108;
  swift_bridgeObjectRelease();
  id aBlock = (id)sub_1000C51B8(v107, v109, (uint64_t *)&v141);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, a4, (os_log_type_t)v54, "Removing orphaned accounts {accounts: %s}", (uint8_t *)v25, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_84:
  id v110 = objc_allocWithZone((Class)REMSaveRequest);
  id v111 = [v110 initWithStore:v131];
  swift_beginAccess();
  unint64_t v112 = v140;
  if (v140 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v113 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v113) {
      goto LABEL_93;
    }
LABEL_86:
    if (v113 >= 1)
    {
      uint64_t v114 = 0;
      do
      {
        if ((v112 & 0xC000000000000001) != 0) {
          id v115 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v115 = *(id *)(v112 + 8 * v114 + 32);
        }
        uint64_t v116 = v115;
        ++v114;
        id v117 = [v111 updateAccount:v115];
        [v117 removeFromStore];
      }
      while (v113 != v114);
      goto LABEL_93;
    }
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    swift_release();

    swift_release();
    __break(1u);
  }
  uint64_t v113 = *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v113) {
    goto LABEL_86;
  }
LABEL_93:
  swift_bridgeObjectRelease();
  if (qword_1009070D8 != -1) {
    swift_once();
  }
  uint64_t v118 = qword_100942078;
  uint64_t v119 = swift_allocObject();
  uint64_t v120 = v133;
  *(void *)(v119 + 16) = sub_100616E44;
  *(void *)(v119 + 24) = v120;
  unsigned int v146 = sub_100616E64;
  uint64_t v147 = v119;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v143 = 1107296256;
  id v144 = sub_1000E13D0;
  id v145 = &unk_1008CD610;
  id v121 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v111 saveWithQueue:v118 completion:v121];

  _Block_release(v121);
  swift_release();
}

uint64_t sub_100616E3C()
{
  return sub_100617D30(64);
}

uint64_t sub_100616E44(char a1, uint64_t a2)
{
  return sub_1005FE348(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t sub_100616E64(uint64_t a1)
{
  return sub_1005FA38C(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

void sub_100616E70(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (gDADOperationQueue)
  {
    os_log_t v19 = v8;
    sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a1;
    aBlock[4] = sub_10061724C;
    aBlock[5] = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008CD688;
    uint64_t v13 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, os_log_t))(v7 + 8))(v10, v19);
  }
  else
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_10091F858);
    os_log_t v19 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v15, "DADMain is disabled after we stop monitoring agents. Will not try re-starting agents.", v16, 2u);
      swift_slowDealloc();
    }
    os_log_t v17 = v19;
  }
}

uint64_t sub_10061723C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10061724C()
{
  sub_1005FB130(*(void *)(v0 + 16));
}

uint64_t sub_100617258()
{
  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(unsigned char *)(v0 + 32);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 40);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  sub_1005FAAE0();
  if ((v2 & 1) == 0) {
    sub_100616E70(v1);
  }
  return v3(v4, v5);
}

uint64_t sub_1006172CC()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(unsigned __int8 *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100617304(char a1, char a2, uint64_t a3)
{
  return sub_1005FB64C(a1, a2, a3, v3[2], v3[3], v3[4], (uint64_t)&unk_1008CDA08, (uint64_t)sub_1006174E8, (uint64_t)&unk_1008CDA20);
}

uint64_t sub_100617358(uint64_t a1, char a2)
{
  return sub_100617AB4(a1, a2, (uint64_t)&unk_1008CD788, (uint64_t)sub_10061737C);
}

uint64_t sub_10061737C()
{
  return sub_100617B60(1, (void (*)(uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, char, uint64_t, uint64_t))sub_100605148);
}

uint64_t sub_100617398()
{
  return sub_100617D30(64);
}

uint64_t sub_1006173A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100617D84(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))sub_1005FB56C);
}

uint64_t sub_1006173C8()
{
  return sub_100617D30(64);
}

uint64_t sub_1006173D8()
{
  return sub_100617D30(64);
}

uint64_t sub_1006173E4()
{
  swift_release();

  return _swift_deallocObject(v0, 34, 7);
}

uint64_t sub_100617424()
{
  swift_release();
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10061746C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(unsigned char *)(v0 + 32);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 40);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 56);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 57);
  uint64_t v6 = *(void *)(v0 + 64);
  sub_1005FAAE0();
  if ((v2 & 1) == 0) {
    sub_100616E70(v1);
  }
  return v3(v4, v5, v6);
}

uint64_t sub_1006174F0(char a1, char a2, uint64_t a3)
{
  return sub_1005FB64C(a1, a2, a3, v3[2], v3[3], v3[4], (uint64_t)&unk_1008CDE18, (uint64_t)sub_1006174E8, (uint64_t)&unk_1008CDE30);
}

uint64_t sub_100617540()
{
  return sub_100617548(49);
}

uint64_t sub_100617548(uint64_t a1)
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10061759C(uint64_t a1, char a2)
{
  return sub_1005FB928(a1, a2 & 1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned char *)(v2 + 48));
}

uint64_t sub_1006175B0()
{
  return sub_100617D30(65);
}

uint64_t sub_1006175B8()
{
  return sub_1005FB9F0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_1006175D0()
{
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100617628(uint64_t a1)
{
  return sub_1005FC178(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t sub_100617660()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10061769C()
{
  return sub_1005FC9E0(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_1006176C4()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10061771C(int a1, int a2, uint64_t a3, uint64_t a4)
{
  sub_1006083C8(a1, a2, a4, *(void **)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(NSObject **)(v4 + 48));
}

uint64_t sub_100617734()
{
  swift_errorRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_10061778C()
{
  sub_1005FC8BC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56), *(NSObject **)(v0 + 64));
}

uint64_t sub_1006177A8()
{
  swift_release();
  swift_release();
  swift_errorRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100617808(char a1, uint64_t a2)
{
  return sub_1005FC270(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void **)(v2 + 48), *(void *)(v2 + 56), *(unsigned char *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80));
}

uint64_t sub_100617844()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10061789C()
{
  return sub_1005FC4D0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void (**)(void, void, void))(v0 + 64));
}

uint64_t sub_1006178B8()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1006178F8()
{
  return (*(uint64_t (**)(void, void, void))(v0 + 16))(*(unsigned __int8 *)(v0 + 32), *(unsigned __int8 *)(v0 + 33), *(void *)(v0 + 40));
}

uint64_t sub_100617930()
{
  return sub_100617F0C((void (*)(void))&_swift_release);
}

uint64_t sub_100617948()
{
  return sub_1005FDEAC(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100617954()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100617994(char a1, uint64_t a2)
{
  sub_1005FDC6C(a1, a2, *(void *)(v2 + 16), *(dispatch_group_t *)(v2 + 24));
}

uint64_t sub_1006179A0(uint64_t a1)
{
  return sub_1005FFE24(a1, v1[2], v1[3], v1[4], (uint64_t)&unk_1008CE228, (uint64_t)sub_100614858, (uint64_t)&unk_1008CE240);
}

uint64_t sub_1006179E4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100617A2C(char a1, uint64_t a2)
{
  sub_1005FD4FC(a1, a2, *(void **)(v2 + 16), *(unsigned char *)(v2 + 24), *(void *)(v2 + 32), *(void (**)(id))(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_100617A44()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100617A94(uint64_t a1, char a2)
{
  return sub_100617AB4(a1, a2, (uint64_t)&unk_1008CDFA8, (uint64_t)sub_100617B44);
}

uint64_t sub_100617AB4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return sub_1005FD8AC(a1, a2 & 1, *(void *)(v4 + 16), *(void **)(v4 + 24), *(void **)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), a3, a4);
}

uint64_t sub_100617AF4()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100617B44()
{
  return sub_100617B60(0, (void (*)(uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, char, uint64_t, uint64_t))sub_10060F618);
}

uint64_t sub_100617B60(uint64_t a1, void (*a2)(uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, char, uint64_t, uint64_t))
{
  return sub_1005FD96C(*(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), *(unsigned char *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), a1, a2);
}

uint64_t sub_100617B9C()
{
  return sub_100617D30(64);
}

uint64_t sub_100617BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100617D84(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))sub_1005FDA38);
}

uint64_t sub_100617BC8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100617C18(char a1, uint64_t a2)
{
  sub_1005F9778(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(unsigned char *)(v2 + 40), *(void (**)(void, void, void *, void))(v2 + 48), *(void *)(v2 + 56));
}

uint64_t sub_100617C30()
{
  return sub_100617D30(64);
}

uint64_t sub_100617C3C()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100617C94(char a1, uint64_t a2)
{
  return sub_1005F934C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(unsigned char *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72));
}

uint64_t sub_100617CD0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100617D18(void *a1, uint64_t a2)
{
  sub_1005F5E00(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t, void))(v2 + 32), *(void *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_100617D28()
{
  return sub_100617D30(64);
}

uint64_t sub_100617D30(uint64_t a1)
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100617D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a5(a1, a2, a3, a4, *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(unsigned __int8 *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56));
}

uint64_t sub_100617DC4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100617E14(char a1, char a2, uint64_t a3)
{
  return sub_1005F9A50(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void (**)(void, void, void, void))(v3 + 48));
}

uint64_t sub_100617E4C()
{
  swift_release();
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100617E94()
{
  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(unsigned char *)(v0 + 32);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 56);
  sub_1005FAAE0();
  if ((v2 & 1) == 0) {
    sub_100616E70(v1);
  }
  return v3(v4);
}

uint64_t sub_100617EF4()
{
  return sub_100617F0C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100617F0C(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_100617F5C()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t initializeWithCopy for RDAccountUtils.AccountInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RDAccountUtils.AccountInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

__n128 initializeWithTake for RDAccountUtils.AccountInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDAccountUtils.AccountInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(_WORD *)(a1 + 43) = *(_WORD *)(a2 + 43);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDAccountUtils.AccountInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 45)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDAccountUtils.AccountInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 45) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 45) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDAccountUtils.AccountInfo()
{
  return &type metadata for RDAccountUtils.AccountInfo;
}

unsigned char *storeEnumTagSinglePayload for RDAccountUtils.ACAccountProperty(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10061827CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDAccountUtils.ACAccountProperty()
{
  return &type metadata for RDAccountUtils.ACAccountProperty;
}

ValueMetadata *type metadata accessor for RDAccountUtils.InactivatedICloudCalDavDataMover.NoInactivatedICloudCalDavREMAccountError()
{
  return &type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.NoInactivatedICloudCalDavREMAccountError;
}

ValueMetadata *type metadata accessor for RDAccountUtils.InactivatedICloudCalDavDataMover.DidNotChooseToMigrationCloudKitError()
{
  return &type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.DidNotChooseToMigrationCloudKitError;
}

ValueMetadata *type metadata accessor for RDAccountUtils.InactivatedICloudCalDavDataMover.NoCloudKitREMAccountError()
{
  return &type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.NoCloudKitREMAccountError;
}

ValueMetadata *type metadata accessor for RDAccountUtils.LocalDataToICloudMover.LocalAccountIsEmptyError()
{
  return &type metadata for RDAccountUtils.LocalDataToICloudMover.LocalAccountIsEmptyError;
}

ValueMetadata *type metadata accessor for RDAccountUtils.LocalDataToICloudMover.TargetAccountIsNonEmptyError()
{
  return &type metadata for RDAccountUtils.LocalDataToICloudMover.TargetAccountIsNonEmptyError;
}

ValueMetadata *type metadata accessor for RDAccountUtils.LocalDataToICloudMover.NoICloudREMAccountError()
{
  return &type metadata for RDAccountUtils.LocalDataToICloudMover.NoICloudREMAccountError;
}

unint64_t sub_100618318()
{
  unint64_t result = qword_10091FB48;
  if (!qword_10091FB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091FB48);
  }
  return result;
}

uint64_t sub_100618484()
{
  uint64_t v1 = v0;
  uint64_t v157 = type metadata accessor for UUID();
  uint64_t v158 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  id v156 = (char *)&v144 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v159 = (char *)&v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v149 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v144 - v13;
  uint64_t v15 = _s10PredicatesOMa_2();
  __chkstk_darwin(v15 - 8);
  os_log_t v17 = (char *)&v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v144 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v150 = (uint64_t)&v144 - v22;
  __chkstk_darwin(v23);
  unint64_t v25 = (char *)&v144 - v24;
  uint64_t v166 = _swiftEmptyArrayStorage;
  sub_100619FBC(v1, (uint64_t)v17);
  uint64_t v26 = sub_100094134(&qword_10091FB50);
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v17, 1, v26);
  if (v27 == 1) {
    goto LABEL_2;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v17, v8);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
  int v29 = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 88))(v11, v8);
  if (v29 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(char *, uint64_t *, uint64_t))(v4 + 32))(v25, v11, v3);
    id v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v28(v25, 0, 1, v3);
    goto LABEL_5;
  }
  if (v29 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    uint64_t v103 = *v11;
    id v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v28(v25, 1, 1, v3);
    *(void *)&long long v160 = sub_10033305C(v103);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    goto LABEL_6;
  }
  if (v29 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    id v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    int v148 = 1;
    v28(v25, 1, 1, v3);
    *(void *)&long long v160 = 0;
LABEL_7:
    uint64_t v151 = v3;
    uint64_t v152 = v25;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v31 = (void *)sub_10032ED18(KeyPath, 1);
    swift_release();
    id v32 = v31;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v166[2] >= v166[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    id v33 = (id)sub_1002F51CC(0);
    uint64_t v34 = sub_1002308B0(0x7265646E696D6572, 0xE800000000000000, 0);
    Swift::Int v35 = v166;
    uint64_t v36 = v166[2];
    if (__OFADD__(v36, 2))
    {
      __break(1u);
    }
    else
    {
      id v32 = (id)v34;
      if (!swift_isUniquelyReferenced_nonNull_native() || v36 + 2 > v35[3] >> 1) {
        uint64_t v166 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._endMutation()();
      id v33 = v33;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v166[2] < v166[3] >> 1)
      {
LABEL_14:
        int v147 = v27;
        id v145 = v28;
        unsigned int v146 = v20;
        uint64_t v37 = v4;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v38 = v32;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v166[2] >= v166[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        int v39 = 18;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        uint64_t v40 = sub_100094134((uint64_t *)&unk_10090A050);
        uint64_t v41 = swift_allocObject();
        long long v155 = xmmword_100776E40;
        *(_OWORD *)(v41 + 16) = xmmword_100776E40;
        *(void *)(v41 + 56) = &type metadata for String;
        *(void *)(v41 + 32) = 0xD000000000000024;
        *(void *)(v41 + 40) = 0x80000001007DA4F0;
        NSString v42 = String._bridgeToObjectiveC()();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v44 = self;
        uint64_t v45 = &selRef_willSave;
        id v46 = [v44 predicateWithFormat:v42 argumentArray:isa];

        uint64_t v153 = v40;
        uint64_t v47 = swift_allocObject();
        *(_OWORD *)(v47 + 16) = v155;
        *(void *)(v47 + 56) = &type metadata for String;
        *(void *)(v47 + 32) = 0xD000000000000029;
        *(void *)(v47 + 40) = 0x80000001007DA520;
        NSString v48 = String._bridgeToObjectiveC()();
        Class v49 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v154 = v44;
        id v50 = [v44 predicateWithFormat:v48 argumentArray:v49];

        unsigned int v51 = v166;
        uint64_t v52 = v166[2];
        if (__OFADD__(v52, 2))
        {
          __break(1u);
        }
        else
        {
          if (!swift_isUniquelyReferenced_nonNull_native() || v52 + 2 > v51[3] >> 1) {
            uint64_t v166 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._endMutation()();
          id v46 = v46;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v45 = (char **)&type metadata for String;
          uint64_t v40 = v37;
          int v39 = v147;
          if (v166[2] < v166[3] >> 1)
          {
LABEL_21:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            id v53 = v50;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v54 = (uint64_t)v152;
            if (v166[2] >= v166[3] >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            uint64_t v55 = swift_allocObject();
            *(_OWORD *)(v55 + 16) = v155;
            *(void *)(v55 + 56) = v45;
            *(void *)(v55 + 32) = 0xD000000000000010;
            *(void *)(v55 + 40) = 0x80000001007DA550;
            NSString v56 = String._bridgeToObjectiveC()();
            Class v57 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v58 = [v154 predicateWithFormat:v56 argumentArray:v57];

            id v59 = v58;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (v166[2] >= v166[3] >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            uint64_t v60 = swift_getKeyPath();
            id v61 = [self localInternalAccountID];
            id v62 = [v61 uuid];

            uint64_t v63 = (uint64_t)v149;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v158 + 56))(v63, 0, 1, v157);
            id v64 = sub_10039F16C(v60, v63);
            swift_release();
            id v65 = v64;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v66 = v151;
            if (v166[2] >= v166[3] >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            id v67 = v159;
            if (v148)
            {
              uint64_t v68 = swift_allocObject();
              *(_OWORD *)(v68 + 16) = v155;
              *(void *)(v68 + 56) = v45;
              *(void *)(v68 + 32) = 0xD000000000000012;
              *(void *)(v68 + 40) = 0x8000000100794DC0;
              NSString v69 = String._bridgeToObjectiveC()();
              Class v70 = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              id v71 = [v154 predicateWithFormat:v69 argumentArray:v70];

              id v72 = v71;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (v166[2] >= v166[3] >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            id v73 = v156;
            if (v39 == 1)
            {
              swift_getKeyPath();
              uint64_t v74 = swift_allocObject();
              *(_OWORD *)(v74 + 16) = xmmword_100776E80;
              swift_retain();
              uint64_t v75 = sub_10029F8F8();
              uint64_t v77 = v76;
              swift_release();
              *(void *)(v74 + 56) = v45;
              *(void *)(v74 + 32) = v75;
              *(void *)(v74 + 40) = v77;
              swift_retain();
              uint64_t v78 = sub_10029F8F8();
              uint64_t v80 = v79;
              swift_release();
              *(void *)(v74 + 88) = v45;
              *(void *)(v74 + 64) = v78;
              *(void *)(v74 + 72) = v80;
              NSString v81 = String._bridgeToObjectiveC()();
              Class v82 = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              id v83 = [v154 predicateWithFormat:v81 argumentArray:v82];
              swift_release();

              id v84 = v83;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (v166[2] >= v166[3] >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            uint64_t v85 = v150;
            sub_1000CAA4C(v54, v150);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v85, 1, v66) == 1)
            {
              sub_1000966BC(v85, (uint64_t *)&unk_100909A40);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v67, v85, v66);
              sub_100094134(&qword_10091FB58);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_100776E80;
              uint64_t v87 = swift_allocObject();
              *(_OWORD *)(v87 + 16) = v155;
              *(void *)(v87 + 56) = v45;
              *(void *)(v87 + 32) = 0xD000000000000012;
              *(void *)(v87 + 40) = 0x8000000100794DC0;
              NSString v88 = String._bridgeToObjectiveC()();
              Class v89 = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              id v90 = [v154 predicateWithFormat:v88 argumentArray:v89];

              *(void *)(inited + 32) = v90;
              uint64_t v91 = swift_getKeyPath();
              uint64_t v92 = (uint64_t)v146;
              (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v146, v67, v66);
              v145((char *)v92, 0, 1, v66);
              id v93 = sub_10039F18C(v91, v92);
              swift_release();
              *(void *)(inited + 40) = v93;
              v161[0] = inited;
              specialized Array._endMutation()();
              id v94 = (id)sub_100397E58(v161[0]);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (v166[2] >= v166[3] >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();

              (*(void (**)(char *, uint64_t))(v40 + 8))(v67, v66);
              uint64_t v54 = (uint64_t)v152;
            }
            uint64_t v95 = v158;
            uint64_t v96 = v160;
            uint64_t v97 = &selRef_stringFromDate_;
            if (!(void)v160) {
              goto LABEL_72;
            }
            unint64_t v98 = v160 & 0xC000000000000001;
            if ((v160 & 0xC000000000000001) != 0)
            {
              uint64_t v99 = __CocoaSet.count.getter();
              if (v99)
              {
LABEL_43:
                uint64_t v165 = _swiftEmptyArrayStorage;
                sub_1001DE148(0, v99 & ~(v99 >> 63), 0);
                if (v98)
                {
                  uint64_t v100 = __CocoaSet.startIndex.getter();
                  unsigned __int8 v102 = 1;
                }
                else
                {
                  uint64_t v100 = sub_1003CA790(v96);
                  unsigned __int8 v102 = v105 & 1;
                }
                uint64_t v106 = v157;
                uint64_t v162 = v100;
                uint64_t v163 = v101;
                unsigned __int8 v164 = v102;
                if ((v99 & 0x8000000000000000) == 0)
                {
                  uint64_t v107 = v96 & 0xFFFFFFFFFFFFFF8;
                  if (v96 < 0) {
                    uint64_t v107 = v96;
                  }
                  unint64_t v159 = (char *)v107;
                  while (1)
                  {
                    while (1)
                    {
                      sub_1003C9F34(v162, v163, v164, v96);
                      uint64_t v119 = v118;
                      id v120 = [v118 v97[136]];
                      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                      id v121 = v165;
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      {
                        sub_1001DE148(0, v121[2] + 1, 1);
                        id v121 = v165;
                      }
                      unint64_t v123 = v121[2];
                      unint64_t v122 = v121[3];
                      if (v123 >= v122 >> 1)
                      {
                        sub_1001DE148(v122 > 1, v123 + 1, 1);
                        id v121 = v165;
                      }
                      v121[2] = v123 + 1;
                      (*(void (**)(unint64_t, char *, uint64_t))(v95 + 32))((unint64_t)v121+ ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80))+ *(void *)(v95 + 72) * v123, v73, v106);
                      uint64_t v165 = v121;
                      if (v98) {
                        break;
                      }
                      uint64_t v108 = v162;
                      uint64_t v109 = v163;
                      unsigned __int8 v110 = v164;
                      uint64_t v96 = v160;
                      uint64_t v111 = sub_1003C9E34(v162, v163, v164, v160);
                      uint64_t v113 = v112;
                      char v115 = v114;
                      char v116 = v110;
                      id v73 = v156;
                      sub_1000E4EA4(v108, v109, v116);
                      uint64_t v162 = v111;
                      uint64_t v163 = v113;
                      uint64_t v97 = &selRef_stringFromDate_;
                      uint64_t v106 = v157;
                      unsigned __int8 v117 = v115 & 1;
                      uint64_t v95 = v158;
                      unsigned __int8 v164 = v117;
                      if (!--v99) {
                        goto LABEL_64;
                      }
                    }
                    uint64_t v96 = v160;
                    if ((v164 & 1) == 0) {
                      break;
                    }
                    if (__CocoaSet.Index.handleBitPattern.getter()) {
                      swift_isUniquelyReferenced_nonNull_native();
                    }
                    sub_100094134(&qword_100916988);
                    unint64_t v124 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
                    __CocoaSet.formIndex(after:isUnique:)();
                    v124(v161, 0);
                    if (!--v99)
                    {
LABEL_64:
                      sub_1000E4EA4(v162, v163, v164);
                      swift_bridgeObjectRelease();
                      uint64_t v104 = v165;
                      uint64_t v54 = (uint64_t)v152;
                      goto LABEL_65;
                    }
                  }
                  __break(1u);
                  goto LABEL_84;
                }
                __break(1u);
                goto LABEL_82;
              }
            }
            else
            {
              uint64_t v99 = *(void *)(v160 + 16);
              if (v99) {
                goto LABEL_43;
              }
            }
            swift_bridgeObjectRelease();
            uint64_t v104 = _swiftEmptyArrayStorage;
LABEL_65:
            if (!v104[2])
            {
              swift_bridgeObjectRelease();
              uint64_t v138 = swift_allocObject();
              *(_OWORD *)(v138 + 16) = v155;
              *(void *)(v138 + 56) = &type metadata for String;
              *(void *)(v138 + 32) = 0xD000000000000012;
              *(void *)(v138 + 40) = 0x8000000100794DC0;
              NSString v139 = String._bridgeToObjectiveC()();
              Class v140 = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              id v141 = [v154 predicateWithFormat:v139 argumentArray:v140];

              uint64_t v99 = (uint64_t)v141;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (v166[2] >= v166[3] >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              goto LABEL_71;
            }
            sub_100094134(&qword_10091FB58);
            uint64_t v125 = swift_initStackObject();
            long long v160 = xmmword_100776E80;
            *(_OWORD *)(v125 + 16) = xmmword_100776E80;
            uint64_t v126 = swift_allocObject();
            *(_OWORD *)(v126 + 16) = v155;
            *(void *)(v126 + 56) = &type metadata for String;
            *(void *)(v126 + 32) = 0xD000000000000012;
            *(void *)(v126 + 40) = 0x8000000100794DC0;
            NSString v127 = String._bridgeToObjectiveC()();
            Class v128 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v129 = v154;
            id v130 = [v154 predicateWithFormat:v127 argumentArray:v128];

            *(void *)(v125 + 32) = v130;
            swift_getKeyPath();
            id v131 = sub_1001FF8A4((uint64_t)v104);
            swift_bridgeObjectRelease();
            uint64_t v132 = swift_allocObject();
            *(_OWORD *)(v132 + 16) = v160;
            uint64_t v133 = sub_10029F8F8();
            *(void *)(v132 + 56) = &type metadata for String;
            *(void *)(v132 + 32) = v133;
            *(void *)(v132 + 40) = v134;
            *(void *)(v132 + 88) = sub_100094134(&qword_1009169A8);
            *(void *)(v132 + 64) = v131;
            NSString v135 = String._bridgeToObjectiveC()();
            Class v136 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v137 = [v129 predicateWithFormat:v135 argumentArray:v136];
            swift_release();

            *(void *)(v125 + 40) = v137;
            v161[0] = v125;
            specialized Array._endMutation()();
            uint64_t v99 = (uint64_t)(id)sub_100397E58(v161[0]);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (v166[2] < v166[3] >> 1)
            {
LABEL_67:
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              uint64_t v54 = (uint64_t)v152;
LABEL_71:
              specialized Array._endMutation()();

LABEL_72:
              uint64_t v142 = sub_1002F52FC(v166);
              sub_1000966BC(v54, (uint64_t *)&unk_100909A40);
              return v142;
            }
LABEL_82:
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            goto LABEL_67;
          }
        }
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_21;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_14;
  }
  if (v29 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
LABEL_2:
    id v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v28(v25, 1, 1, v3);
LABEL_5:
    *(void *)&long long v160 = 0;
LABEL_6:
    int v148 = 0;
    goto LABEL_7;
  }
LABEL_84:
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

void *sub_100619B0C()
{
  sub_1001DE058(0, 4, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  unint64_t v1 = _swiftEmptyArrayStorage[3];
  unint64_t v3 = v2 + 1;
  if (v2 >= v1 >> 1)
  {
    sub_1001DE058(v1 > 1, v2 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v3;
  uint64_t v4 = &_swiftEmptyArrayStorage[2 * v2];
  v4[4] = 0x696669746E656469;
  v4[5] = 0xEA00000000007265;
  unint64_t v5 = _swiftEmptyArrayStorage[3];
  int64_t v6 = v2 + 2;
  if (v3 >= v5 >> 1)
  {
    sub_1001DE058(v5 > 1, v6, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v6;
  uint64_t v7 = &_swiftEmptyArrayStorage[2 * v3];
  v7[4] = 0x737574617473;
  v7[5] = 0xE600000000000000;
  unint64_t v9 = _swiftEmptyArrayStorage[2];
  unint64_t v8 = _swiftEmptyArrayStorage[3];
  unint64_t v10 = v9 + 1;
  if (v9 >= v8 >> 1)
  {
    sub_1001DE058(v8 > 1, v9 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v10;
  uint64_t v11 = &_swiftEmptyArrayStorage[2 * v9];
  v11[4] = 0xD000000000000014;
  v11[5] = 0x80000001007C6100;
  unint64_t v12 = _swiftEmptyArrayStorage[3];
  int64_t v13 = v9 + 2;
  if (v10 >= v12 >> 1)
  {
    sub_1001DE058(v12 > 1, v13, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v13;
  uint64_t v14 = (char *)&_swiftEmptyArrayStorage[2 * v10];
  strcpy(v14 + 32, "assignedDate");
  v14[45] = 0;
  *((_WORD *)v14 + 23) = -5120;
  return result;
}

void *sub_100619ED0()
{
  sub_1001DE058(0, 1, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  unint64_t v1 = _swiftEmptyArrayStorage[3];
  if (v2 >= v1 >> 1)
  {
    sub_1001DE058(v1 > 1, v2 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v2 + 1;
  unint64_t v3 = &_swiftEmptyArrayStorage[2 * v2];
  v3[4] = 0x7265646E696D6572;
  v3[5] = 0xE800000000000000;
  return result;
}

uint64_t _s10PredicatesOMa_2()
{
  uint64_t result = qword_10091FBD0;
  if (!qword_10091FBD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100619FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10PredicatesOMa_2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

const char *sub_10061A020()
{
  return "status";
}

id sub_10061A02C@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 status];
  *a2 = (_WORD)result;
  return result;
}

id sub_10061A060(__int16 *a1, id *a2)
{
  return [*a2 setStatus:*a1];
}

id sub_10061A074@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_10061A0B0(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

id sub_10061A0CC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 reminder];
  *a2 = result;
  return result;
}

id sub_10061A108(void *a1, id *a2)
{
  return [*a2 setReminder:*a1];
}

uint64_t *sub_10061A134(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_100094134(&qword_10091FB50);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10061A2A0(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_10091FB50);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

void *sub_10061A354(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_10091FB50);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_10061A484(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_10091FB50);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_1000966BC((uint64_t)a1, &qword_10091FB50);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_10061A630(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_10091FB50);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_10061A760(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_10091FB50);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_1000966BC((uint64_t)a1, &qword_10091FB50);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_10061A90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10061A920);
}

uint64_t sub_10061A920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10091FB50);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10061A990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10061A9A4);
}

uint64_t sub_10061A9A4(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_100094134(&qword_10091FB50);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_10061AA28(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_10091FB50);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_10061AA94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10091FB50);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t sub_10061AB08()
{
  uint64_t result = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_10061AB80()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091FBE0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091FBE0);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10061AC9C(uint64_t a1@<X8>)
{
  id v3 = [v1 rawValue];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  REMFeatureFlags.init(rawValue:)();
  uint64_t v4 = type metadata accessor for REMFeatureFlags();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4) == 1)
  {
    if (qword_100907A48 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_10091FBE0);
    id v13 = v1;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      id v9 = [v13 rawValue];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDFeatureFlagsObjCWrapper: Attempt to unwrap to a feature flag with unknown rawValue: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_10061AF24(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  id v4 = [v2 rawValue];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  REMFeatureFlags.init(rawValue:)();
  uint64_t v5 = type metadata accessor for REMFeatureFlags();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(a1, 1, v5) == 1)
  {
    if (qword_100907A48 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_10091FBE0);
    swift_unknownObjectRetain_n();
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)id v9 = 136315138;
      id v10 = [v2 rawValue];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      sub_1000C51B8(v11, v13, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDFeatureFlagsObjCWrapper: Attempt to unwrap to a feature flag with unknown rawValue: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

Swift::Bool __swiftcall RDFeatureFlagsObjCWrapper.isEnabled()()
{
  uint64_t v0 = sub_100094134(&qword_10091FBF8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10061AC9C((uint64_t)v2);
  uint64_t v3 = type metadata accessor for REMFeatureFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10061BE50((uint64_t)v2);
    char v5 = 0;
  }
  else
  {
    char v5 = REMFeatureFlags.isEnabled.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  }
  return v5 & 1;
}

id sub_10061B4FC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDFeatureFlagsTemporaryOverrideObjcWrapper();
  return [super dealloc];
}

id _sSo25RDFeatureFlagsObjCWrapperC7reminddE014wrappedFeatureB04withSo010REMFeaturebC9CWrapping_pSgSS_tFZ_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10091FBF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v9 = (char *)&v22 - v8;
  swift_bridgeObjectRetain();
  REMFeatureFlags.init(rawValue:)();
  uint64_t v10 = type metadata accessor for REMFeatureFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10) == 1)
  {
    if (qword_100907A48 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_10091FBE0);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v23 = a1;
      os_log_t v17 = (uint8_t *)v16;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v27 = v24;
      uint64_t v25 = v11;
      *(_DWORD *)os_log_t v17 = 136315138;
      uint64_t v22 = v17 + 4;
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_1000C51B8(v23, a2, &v27);
      uint64_t v11 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDFeatureFlagsObjCWrapper: Attempt to wrap a feature flag with unknown rawValue: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  sub_10061BED4((uint64_t)v9, (uint64_t)v6);
  if (v12(v6, 1, v10) == 1)
  {
    sub_10061BE50((uint64_t)v9);
    sub_10061BE50((uint64_t)v6);
    return 0;
  }
  else
  {
    REMFeatureFlags.rawValue.getter();
    id v19 = objc_allocWithZone((Class)RDFeatureFlagsObjCWrapper);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [v19 initWithRawValue:v20];

    sub_10061BE50((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v10);
  }
  return v18;
}

id _sSo25RDFeatureFlagsObjCWrapperC7reminddE17temporaryOverride018withEnabledFeatureB008disabledjB0So010REMFeatureb9TemporaryG12ObjcWrapping_pSaySo0lbC9CWrapping_pG_AItFZ_0(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10091FBF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v9 = (char *)&v48 - v8;
  uint64_t v10 = type metadata accessor for REMFeatureFlags();
  uint64_t v56 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v54 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unsigned int v51 = (char *)&v48 - v13;
  __chkstk_darwin(v14);
  uint64_t v55 = (char *)&v48 - v15;
  __chkstk_darwin(v16);
  uint64_t v52 = (char *)&v48 - v17;
  if (!(a1 >> 62))
  {
    uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    unint64_t v53 = a2;
    if (v18) {
      goto LABEL_3;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    Class v57 = (char *)_swiftEmptyArrayStorage;
    if (!(a2 >> 62)) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  id result = (id)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v18 = (uint64_t)result;
  unint64_t v53 = a2;
  if (!result) {
    goto LABEL_32;
  }
LABEL_3:
  if (v18 < 1)
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v20 = 0;
  unint64_t v21 = a1 & 0xC000000000000001;
  uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  uint64_t v23 = (void (**)(char *, char *, uint64_t))(v56 + 32);
  Class v57 = (char *)_swiftEmptyArrayStorage;
  unint64_t v49 = a1 & 0xC000000000000001;
  unint64_t v50 = a1;
  do
  {
    if (v21) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_unknownObjectRetain();
    }
    sub_10061AF24((uint64_t)v9);
    swift_unknownObjectRelease();
    if ((*v22)(v9, 1, v10) == 1)
    {
      sub_10061BE50((uint64_t)v9);
    }
    else
    {
      uint64_t v24 = v6;
      uint64_t v25 = v18;
      uint64_t v26 = *v23;
      uint64_t v27 = v52;
      (*v23)(v52, v9, v10);
      v26(v55, v27, v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Class v57 = (char *)sub_10030BFA0(0, *((void *)v57 + 2) + 1, 1, (unint64_t)v57);
      }
      unint64_t v29 = *((void *)v57 + 2);
      unint64_t v28 = *((void *)v57 + 3);
      if (v29 >= v28 >> 1) {
        Class v57 = (char *)sub_10030BFA0(v28 > 1, v29 + 1, 1, (unint64_t)v57);
      }
      uint64_t v30 = v56;
      uint64_t v31 = v57;
      *((void *)v57 + 2) = v29 + 1;
      v26(&v31[((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v29], v55, v10);
      uint64_t v18 = v25;
      uint64_t v6 = v24;
      unint64_t v21 = v49;
    }
    ++v20;
  }
  while (v18 != v20);
  swift_bridgeObjectRelease();
  a2 = v53;
  if (!(v53 >> 62))
  {
LABEL_17:
    uint64_t v32 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v32) {
      goto LABEL_18;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    uint64_t v42 = static REMFeatureFlags.override(enabled:disabled:)();
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = (objc_class *)type metadata accessor for RDFeatureFlagsTemporaryOverrideObjcWrapper();
    id v46 = (char *)objc_allocWithZone(v45);
    uint64_t v47 = (uint64_t *)&v46[OBJC_IVAR____TtC7remindd42RDFeatureFlagsTemporaryOverrideObjcWrapper_backing];
    *uint64_t v47 = v42;
    v47[1] = v44;
    v58.receiver = v46;
    v58.super_class = v45;
    return [super init];
  }
LABEL_33:
  swift_bridgeObjectRetain();
  id result = (id)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v32 = (uint64_t)result;
  if (!result) {
    goto LABEL_34;
  }
LABEL_18:
  if (v32 >= 1)
  {
    uint64_t v33 = 0;
    unint64_t v34 = a2 & 0xC000000000000001;
    Swift::Int v35 = (unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v56 + 32);
    uint64_t v37 = (char *)_swiftEmptyArrayStorage;
    uint64_t v55 = (char *)v32;
    do
    {
      if (v34) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_unknownObjectRetain();
      }
      sub_10061AF24((uint64_t)v6);
      swift_unknownObjectRelease();
      if ((*v35)(v6, 1, v10) == 1)
      {
        sub_10061BE50((uint64_t)v6);
      }
      else
      {
        id v38 = *v36;
        int v39 = v51;
        (*v36)(v51, v6, v10);
        v38(v54, v39, v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v37 = (char *)sub_10030BFA0(0, *((void *)v37 + 2) + 1, 1, (unint64_t)v37);
        }
        unint64_t v41 = *((void *)v37 + 2);
        unint64_t v40 = *((void *)v37 + 3);
        if (v41 >= v40 >> 1) {
          uint64_t v37 = (char *)sub_10030BFA0(v40 > 1, v41 + 1, 1, (unint64_t)v37);
        }
        *((void *)v37 + 2) = v41 + 1;
        v38(&v37[((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(void *)(v56 + 72) * v41], v54, v10);
        uint64_t v32 = (uint64_t)v55;
      }
      ++v33;
    }
    while (v32 != v33);
    goto LABEL_34;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10061BE50(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_10091FBF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for RDFeatureFlagsTemporaryOverrideObjcWrapper()
{
  return self;
}

uint64_t sub_10061BED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10091FBF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10061BF3C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = v4;
  int v83 = a4;
  uint64_t v84 = a2;
  uint64_t v85 = a3;
  uint64_t v86 = a1;
  id ObjectType = (id)swift_getObjectType();
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v87 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v77 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v77 - v17;
  *(void *)&double v20 = __chkstk_darwin(v19).n128_u64[0];
  uint64_t v22 = (char *)&v77 - v21;
  id v23 = [v6 identifier:v20];
  if (!v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_12;
  }
  uint64_t v24 = v23;
  id v82 = v6;
  uint64_t v79 = v5;
  uint64_t v80 = v15;
  NSString v88 = v22;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v25 = *(void (**)(void))(v13 + 32);
  ((void (*)(char *, char *, uint64_t))v25)(v11, v18, v12);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v26(v11, 0, 1, v12);
  uint64_t v81 = v13;
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v27(v11, 1, v12) == 1)
  {
LABEL_12:
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
    unint64_t v50 = self;
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v52 = String._bridgeToObjectiveC()();
    [v50 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v52];

    return swift_willThrow();
  }
  ((void (*)(char *, char *, uint64_t))v25)(v88, v11, v12);
  id v28 = [v82 account];
  if (!v28)
  {
    unint64_t v53 = self;
    uint64_t v54 = swift_getObjCClassFromMetadata();
    NSString v55 = String._bridgeToObjectiveC()();
    [v53 unexpectedNilPropertyWithClass:v54 property:v55];

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v88, v12);
  }
  id v78 = v28;
  id v29 = [v28 identifier];
  if (!v29)
  {
    uint64_t v31 = (uint64_t)v87;
    uint64_t v32 = v12;
    v26(v87, 1, 1, v12);
    goto LABEL_15;
  }
  uint64_t v30 = v29;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v31 = (uint64_t)v87;
  v25();
  v26((char *)v31, 0, 1, v12);
  uint64_t v32 = v12;
  if (v27((char *)v31, 1, v12) == 1)
  {
LABEL_15:
    sub_1000966BC(v31, (uint64_t *)&unk_100909E50);
    uint64_t v56 = self;
    uint64_t v57 = swift_getObjCClassFromMetadata();
    NSString v58 = String._bridgeToObjectiveC()();
    [v56 unexpectedNilPropertyWithClass:v57 property:v58];

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v88, v32);
  }
  uint64_t v33 = v80;
  ((void (*)(char *, uint64_t, uint64_t))v25)(v80, v31, v12);
  static REMFileDigester.sha512Sum(url:)();
  uint64_t v34 = v81;
  if (!v35)
  {
    id v90 = 0;
    unint64_t v91 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    id v90 = (id)0xD000000000000020;
    unint64_t v91 = 0x80000001007DA600;
    id v59 = [v82 remObjectID];
    if (v59)
    {
      uint64_t v60 = v59;
      id v61 = [v59 stringRepresentation];

      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v64 = v63;
    }
    else
    {
      id v64 = (void *)0xE300000000000000;
      uint64_t v62 = 4079420;
    }
    id v72 = self;
    v73._countAndFlagsBits = v62;
    v73._object = v64;
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    NSString v74 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v72 internalErrorWithDebugDescription:v74];

    swift_willThrow();
    id v75 = v78;
LABEL_24:

    id v71 = *(void (**)(char *, uint64_t))(v34 + 8);
    v71(v80, v32);
    return ((uint64_t (*)(char *, uint64_t))v71)(v88, v32);
  }
  id v36 = [v82 storeControllerManagedObjectContext];
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v87 = (char *)[v36 storeController];
    if (v87)
    {
      id ObjectType = v37;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      Class v39 = UUID._bridgeToObjectiveC()().super.isa;
      NSString v40 = String._bridgeToObjectiveC()();
      NSString v41 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      URL._bridgeToObjectiveC()(v42);
      uint64_t v44 = v43;
      id v90 = 0;
      unsigned __int8 v45 = [v87 updateAttachmentFile:isa accountID:v39 fileName:v40 sha512Sum:v41 fileURL:v43 keepSource:v83 & 1 error:&v90];

      if (v45)
      {
        id v46 = v90;
        NSString v47 = String._bridgeToObjectiveC()();
        [v82 setFileName:v47];

        uint64_t v48 = *(void (**)(char *, uint64_t))(v34 + 8);
        v48(v80, v32);
        return ((uint64_t (*)(char *, uint64_t))v48)(v88, v32);
      }
      id v76 = v90;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      id v75 = v87;
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
    uint64_t v68 = self;
    uint64_t v69 = swift_getObjCClassFromMetadata();
    NSString v70 = String._bridgeToObjectiveC()();
    [v68 unexpectedNilPropertyWithClass:v69 property:v70];

    swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v65 = self;
    uint64_t v66 = swift_getObjCClassFromMetadata();
    NSString v67 = String._bridgeToObjectiveC()();
    [v65 unexpectedNilPropertyWithClass:v66 property:v67];

    swift_willThrow();
  }
  id v71 = *(void (**)(char *, uint64_t))(v34 + 8);
  v71(v33, v12);
  return ((uint64_t (*)(char *, uint64_t))v71)(v88, v32);
}

uint64_t sub_10061C868@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  id ObjectType = (id)swift_getObjectType();
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v80 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v80 - v12;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v89 = v14;
  uint64_t v90 = v15;
  __chkstk_darwin(v14);
  uint64_t v87 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v80 - v18;
  *(void *)&double v21 = __chkstk_darwin(v20).n128_u64[0];
  NSString v88 = (char *)&v80 - v22;
  id v23 = [v3 attachmentTypeRawValue:v21];
  if (!v23) {
    goto LABEL_12;
  }
  uint64_t v24 = v23;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v91 = a1;
  uint64_t v26 = v25;
  uint64_t v92 = v2;
  id v28 = v27;

  v29._countAndFlagsBits = v26;
  a1 = v91;
  v29._object = v28;
  Swift::Int v30 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2DA8, v29);
  swift_bridgeObjectRelease();
  if ((unint64_t)(v30 - 1) > 1) {
    goto LABEL_12;
  }
  id v31 = [v3 identifier];
  if (!v31)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v13, 1, 1, v89);
    goto LABEL_10;
  }
  uint64_t v32 = v31;
  uint64_t v84 = v7;
  uint64_t v85 = v10;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v33 = v90;
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
  uint64_t v35 = v19;
  uint64_t v36 = v89;
  v34(v13, v35, v89);
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
  v37(v13, 0, 1, v36);
  NSString v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  uint64_t v38 = v33 + 48;
  Class v39 = v40;
  if (v40((uint64_t)v13, 1, v36) == 1)
  {
LABEL_10:
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
LABEL_11:
    a1 = v91;
LABEL_12:
    uint64_t v51 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(a1, 1, 1, v51);
  }
  id v82 = v39;
  uint64_t v83 = v38;
  NSString v41 = v37;
  uint64_t v42 = v88;
  uint64_t v81 = (void (*)(char *, uint64_t, uint64_t))v34;
  v34(v88, v13, v36);
  id v43 = [v3 fileName];
  if (!v43)
  {
    (*(void (**)(char *, uint64_t))(v90 + 8))(v42, v36);
    goto LABEL_11;
  }
  uint64_t v44 = v43;
  id v45 = [v3 account];
  if (!v45)
  {
    uint64_t v53 = (uint64_t)v85;
    uint64_t v50 = v89;
    v41(v85, 1, 1, v89);
    uint64_t v54 = v90;
    a1 = v91;
    NSString v55 = v88;
LABEL_17:

    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v50);
    sub_1000966BC(v53, (uint64_t *)&unk_100909E50);
    goto LABEL_12;
  }
  id v46 = v45;
  uint64_t v80 = v44;
  id v47 = [v45 identifier];

  if (v47)
  {
    uint64_t v48 = (uint64_t)v84;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v49 = 0;
    uint64_t v50 = v89;
    uint64_t v44 = v80;
  }
  else
  {
    uint64_t v49 = 1;
    uint64_t v50 = v89;
    uint64_t v44 = v80;
    uint64_t v48 = (uint64_t)v84;
  }
  uint64_t v53 = (uint64_t)v85;
  uint64_t v56 = v82;
  v41((char *)v48, v49, 1, v50);
  sub_100096408(v48, v53, (uint64_t *)&unk_100909E50);
  int v57 = v56(v53, 1, v50);
  uint64_t v54 = v90;
  a1 = v91;
  NSString v55 = v88;
  if (v57 == 1) {
    goto LABEL_17;
  }
  v81(v87, v53, v50);
  id v58 = [v3 storeControllerManagedObjectContext];
  if (v58)
  {
    id v59 = v58;
    id v60 = [v58 storeController];
    if (v60)
    {
      id v61 = v60;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      v63.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id ObjectType = v59;
      Class v64 = v63.super.isa;
      id v65 = [v3 sha512Sum];
      Class v66 = isa;
      NSString v67 = v80;
      id v68 = [v61 URLForAttachmentFile:isa accountID:v64 fileName:v80 sha512Sum:v65];

      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v69 = *(void (**)(char *, uint64_t))(v54 + 8);
      uint64_t v70 = v89;
      v69(v87, v89);
      v69(v55, v70);
      uint64_t v71 = type metadata accessor for URL();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(a1, 0, 1, v71);
    }

    id v75 = self;
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v77 = String._bridgeToObjectiveC()();
    [v75 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v77];

    swift_willThrow();
  }
  else
  {

    id v72 = self;
    uint64_t v73 = swift_getObjCClassFromMetadata();
    NSString v74 = String._bridgeToObjectiveC()();
    [v72 unexpectedNilPropertyWithClass:v73 property:v74];

    swift_willThrow();
  }
  id v78 = *(void (**)(char *, uint64_t))(v54 + 8);
  uint64_t v79 = v89;
  v78(v87, v89);
  return ((uint64_t (*)(char *, uint64_t))v78)(v55, v79);
}

uint64_t sub_10061CFB4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091FC98);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091FC98);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t static REMCDSavedAttachment.cdEntityName.getter()
{
  return 0xD000000000000014;
}

Swift::Void __swiftcall REMCDSavedAttachment.prepareForDeletion()()
{
  uint64_t v1 = v0;
  id ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v125 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void **)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v133 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v125 - v13;
  __chkstk_darwin(v15);
  uint64_t v134 = (uint64_t)&v125 - v16;
  *(void *)&double v18 = __chkstk_darwin(v17).n128_u64[0];
  uint64_t v20 = (char *)&v125 - v19;
  v139.receiver = v1;
  v139.super_class = ObjectType;
  uint64_t v135 = (uint64_t)ObjectType;
  [super prepareForDeletion:v18];
  id v21 = [v1 attachmentTypeRawValue];
  if (!v21) {
    return;
  }
  uint64_t v22 = v21;
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  v26._countAndFlagsBits = v23;
  v26._object = v25;
  Swift::Int v27 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2DA8, v26);
  swift_bridgeObjectRelease();
  if ((unint64_t)(v27 - 1) > 1) {
    return;
  }
  Class v128 = v20;
  if (qword_100907A50 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  uint64_t v29 = sub_10008E2DC(v28, (uint64_t)qword_10091FC98);
  id v30 = v1;
  uint64_t v132 = v29;
  id v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v129 = v9;
    id v130 = v14;
    id v131 = v10;
    uint64_t v33 = swift_slowAlloc();
    id v127 = (id)swift_slowAlloc();
    *(void *)&v137[0] = v127;
    *(_DWORD *)uint64_t v33 = 136446466;
    v138[0] = v135;
    swift_getMetatypeMetadata();
    uint64_t v34 = String.init<A>(describing:)();
    v138[0] = sub_1000C51B8(v34, v35, (uint64_t *)v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2082;
    id v36 = [v30 remObjectID];
    if (v36)
    {
      uint64_t v37 = v36;
      id v38 = [v36 description];

      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v41 = v40;
    }
    else
    {
      uint64_t v39 = 7104878;
      unint64_t v41 = 0xE300000000000000;
    }
    v138[0] = sub_1000C51B8(v39, v41, (uint64_t *)v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s:prepareForDeletion() {savedAttachmentID: %{public}s}", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v14 = v130;
    uint64_t v10 = v131;
    uint64_t v9 = v129;
  }
  else
  {
  }
  id v42 = [v30 storeControllerManagedObjectContext];
  if (v42)
  {
    id v43 = v42;
    id v44 = [v30 identifier];
    id v127 = v43;
    if (v44)
    {
      id v45 = v44;
      id v130 = v14;
      uint64_t v46 = v134;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v47 = (void (*)(char *, uint64_t, uint64_t))v10[4];
      v47(v8, v46, v9);
      uint64_t v48 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v10[7];
      v48(v8, 0, 1, v9);
      id v131 = v10;
      uint64_t v49 = v9;
      uint64_t v50 = (uint64_t (*)(char *, uint64_t, uint64_t))v10[6];
      if (v50(v8, 1, v49) != 1)
      {
        uint64_t v129 = v49;
        v47(v128, (uint64_t)v8, v49);
        id v51 = [v30 account];
        if (v51)
        {
          id v52 = v51;
          id v53 = [v51 identifier];
          if (v53)
          {
            uint64_t v54 = v53;
            id v126 = v52;
            uint64_t v55 = v134;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v56 = v55;
            id v52 = v126;
            uint64_t v57 = v129;
            v47(v5, v56, v129);
            v48(v5, 0, 1, v57);
            int v58 = v50(v5, 1, v57);
            uint64_t v59 = v57;
            id v60 = v131;
            if (v58 != 1)
            {
              id v61 = v130;
              v47(v130, (uint64_t)v5, v57);
              id v62 = [v30 sha512Sum];
              NSUUID v63 = v128;
              if (v62)
              {
                Class v64 = v62;
                id v65 = [v30 fileName];
                if (v65)
                {
                  Class v66 = v65;
                  id v67 = [v65 pathExtension];

                  static String._unconditionallyBridgeFromObjectiveC(_:)();
                  NSString v68 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  NSString v68 = 0;
                }
                Class isa = UUID._bridgeToObjectiveC()().super.isa;
                id v116 = v127;
                [v127 proposePurgingFileAttachmentWithSha512Sum:v64 fileExtension:v68 account:isa];

                unsigned __int8 v117 = (void (*)(char *, uint64_t))v60[1];
                v117(v61, v59);
                v117(v63, v59);
                return;
              }
              id v112 = [v127 fileAttachmentIdentifiersToPurgeByAccountIdentifier];
              uint64_t v113 = (void (*)(uint64_t, char *, uint64_t))v60[2];
              v113(v134, v61, v57);
              id v114 = [v112 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
              swift_unknownObjectRelease();

              if (v114)
              {
                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
              }
              else
              {
                memset(v137, 0, sizeof(v137));
              }
              sub_100096408((uint64_t)v137, (uint64_t)v138, &qword_100908190);
              if (v138[3])
              {
                sub_100094134(&qword_10091FCB0);
                if (swift_dynamicCast())
                {
                  uint64_t v118 = v136;
LABEL_56:
                  v138[0] = (uint64_t)v118;
                  uint64_t v119 = v133;
                  v113((uint64_t)v133, v128, v59);
                  uint64_t v120 = v134;
                  sub_10031DEC0(v134, v119);
                  id v121 = (void (*)(uint64_t, uint64_t))v60[1];
                  v121(v120, v59);
                  id v122 = [v127 fileAttachmentIdentifiersToPurgeByAccountIdentifier];
                  sub_10013E30C();
                  Class v123 = Set._bridgeToObjectiveC()().super.isa;
                  swift_bridgeObjectRelease();
                  unint64_t v124 = v130;
                  v113(v120, v130, v59);
                  [v122 __swift_setObject:v123 forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

                  swift_unknownObjectRelease();
                  v121((uint64_t)v124, v59);
                  v121((uint64_t)v128, v59);
                  return;
                }
              }
              else
              {
                sub_1000966BC((uint64_t)v138, &qword_100908190);
              }
              uint64_t v118 = &_swiftEmptySetSingleton;
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v59 = v129;
            v48(v5, 1, 1, v129);
            id v60 = v131;
          }
          sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909E50);
          id v101 = v30;
          uint64_t v90 = Logger.logObject.getter();
          os_log_type_t v102 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v90, v102))
          {

            ((void (*)(char *, uint64_t))v60[1])(v128, v59);
            return;
          }
          uint64_t v103 = swift_slowAlloc();
          v138[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v103 = 136446466;
          uint64_t v104 = sub_1000D82B8();
          *(void *)&v137[0] = sub_1000C51B8(v104, v105, v138);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v103 + 12) = 2082;
          id v106 = [v101 remObjectID];
          if (v106)
          {
            uint64_t v107 = v106;
            id v108 = [v106 description];

            uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v111 = v110;
          }
          else
          {
            uint64_t v109 = 7104878;
            unint64_t v111 = 0xE300000000000000;
          }
          *(void *)&v137[0] = sub_1000C51B8(v109, v111, v138);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v90, v102, "%{public}s:prepareForDeletion() '\\REMCDSavedAttachment.account.identifier' should not be nil {moid: %{public}s}", (uint8_t *)v103, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          id v89 = v30;
          uint64_t v90 = Logger.logObject.getter();
          os_log_type_t v91 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v90, v91))
          {
            uint64_t v92 = swift_slowAlloc();
            v138[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v92 = 136446466;
            uint64_t v93 = sub_1000D82B8();
            *(void *)&v137[0] = sub_1000C51B8(v93, v94, v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v92 + 12) = 2082;
            id v95 = [v89 remObjectID];
            if (v95)
            {
              uint64_t v96 = v95;
              id v97 = [v95 description];

              uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v100 = v99;
            }
            else
            {
              uint64_t v98 = 7104878;
              unint64_t v100 = 0xE300000000000000;
            }
            *(void *)&v137[0] = sub_1000C51B8(v98, v100, v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v90, v91, "%{public}s:prepareForDeletion() '\\REMCDSavedAttachment.account' should not be nil {moid: %{public}s}", (uint8_t *)v92, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
        }

        ((void (*)(char *, uint64_t))v131[1])(v128, v129);
        return;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v10[7])(v8, 1, 1, v9);
    }
    sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909E50);
    id v81 = v30;
    id v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = swift_slowAlloc();
      uint64_t v85 = (void *)swift_slowAlloc();
      *(void *)&v137[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v84 = 136446466;
      v138[0] = v135;
      swift_getMetatypeMetadata();
      uint64_t v86 = String.init<A>(describing:)();
      v138[0] = sub_1000C51B8(v86, v87, (uint64_t *)v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v84 + 12) = 2114;
      id v88 = [v81 objectID];
      v138[0] = (uint64_t)v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v85 = v88;

      _os_log_impl((void *)&_mh_execute_header, v82, v83, "%{public}s:prepareForDeletion() '\\REMCDSavedAttachment.identifier' should not be nil {moid: %{public}@}", (uint8_t *)v84, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    id v69 = v30;
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = swift_slowAlloc();
      *(void *)&v137[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136446466;
      v138[0] = v135;
      swift_getMetatypeMetadata();
      uint64_t v73 = String.init<A>(describing:)();
      v138[0] = sub_1000C51B8(v73, v74, (uint64_t *)v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2082;
      id v75 = [v69 remObjectID];
      if (v75)
      {
        id v76 = v75;
        id v77 = [v75 description];

        uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v80 = v79;
      }
      else
      {
        uint64_t v78 = 7104878;
        unint64_t v80 = 0xE300000000000000;
      }
      v138[0] = sub_1000C51B8(v78, v80, (uint64_t *)v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "%{public}s:prepareForDeletion() '\\REMCDSavedAttachment.storeControllerManagedObjectContext' should not be nil {savedAttachmentID: %{public}s}", (uint8_t *)v72, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

Swift::Int __swiftcall REMCDSavedAttachment.parentEffectiveMinimumSupportedVersion()()
{
  id v1 = [v0 reminder];
  if (!v1) {
    return kREMSupportedVersionUnset;
  }
  uint64_t v2 = v1;
  id v3 = [v1 effectiveMinimumSupportedVersion];

  return (Swift::Int)v3;
}

uint64_t static REMCDSavedAttachment.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0 = sub_10012674C((uint64_t)&off_1008B7710);
  swift_arrayDestroy();
  return v0;
}

Swift::Bool __swiftcall REMCDSavedAttachment.isConnected(toAccountObject:)(NSMutableDictionary toAccountObject)
{
  id v3 = [v1 remObjectID];
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v4 = v3;
  if ([(objc_class *)toAccountObject.super.super.isa objectForKeyedSubscript:v3])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_100096408((uint64_t)v13, (uint64_t)v14, &qword_100908190);
  if (!v14[3])
  {
    sub_1000966BC((uint64_t)v14, &qword_100908190);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    id v6 = v4;
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    [(objc_class *)toAccountObject.super.super.isa setObject:isa forKeyedSubscript:v6];

    id v8 = [v1 reminder];
    if (v8)
    {
      uint64_t v9 = v8;
      unsigned int v5 = [v8 isConnectedToAccountObject:toAccountObject.super.super.isa];

      v14[0] = v5;
      type metadata accessor for REMObjectIsConnectedState(0);
      id v10 = v6;
      [(objc_class *)toAccountObject.super.super.isa setObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() forKeyedSubscript:v10];

      swift_unknownObjectRelease();
      return v5;
    }

LABEL_12:
    LOBYTE(v5) = 0;
    return v5;
  }

  LOBYTE(v5) = v12 == 1;
  return v5;
}

uint64_t type metadata accessor for REMCDSavedAttachment()
{
  return self;
}

uint64_t sub_10061E610(uint64_t a1)
{
  return sub_100156B24(a1, qword_10091FCE0, &qword_1009077A0, (uint64_t)qword_100942328);
}

uint64_t sub_10061E63C(uint64_t a1)
{
  return sub_100156B24(a1, qword_10091FCF8, &qword_100907840, (uint64_t)qword_100942508);
}

uint64_t sub_10061E668(void (*a1)(uint64_t, void, uint64_t, id))
{
  uint64_t v4 = type metadata accessor for Logger();
  char v115 = *(void **)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v98 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v98 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v98 - v14;
  id v16 = sub_10061F59C(a1);
  if (v2) {
    return (uint64_t)a1;
  }
  uint64_t v17 = v16;
  id v108 = v6;
  uint64_t v109 = v9;
  id v111 = v1;
  id v112 = v15;
  uint64_t v113 = v4;
  id v114 = v12;
  [v16 setFetchBatchSize:100];
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  unint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
  if ([v111 options])
  {
    uint64_t v19 = sub_10061F924();
    swift_bridgeObjectRelease();
    unint64_t v18 = v19;
  }
  uint64_t v20 = v115;
  uint64_t v107 = a1;
  id v110 = v17;
  uint64_t v21 = qword_100907A60;
  swift_bridgeObjectRetain();
  if (v21 != -1) {
    goto LABEL_55;
  }
  while (1)
  {
    uint64_t v22 = sub_10008E2DC(v113, (uint64_t)qword_10091FCF8);
    uint64_t v23 = (uint64_t (*)(char *, uint64_t, uint64_t))v20[2];
    uint64_t v24 = v112;
    uint64_t v105 = v22;
    id v106 = v20 + 2;
    uint64_t v104 = v23;
    uint64_t v25 = ((uint64_t (*)(char *))v23)(v112);
    id v118 = (id)v18;
    __chkstk_darwin(v25);
    v98[-2] = v24;
    uint64_t v26 = sub_100094134(&qword_10090D750);
    uint64_t v27 = sub_1000963CC(0, &qword_1009100F8);
    uint64_t v28 = sub_1000BFEAC((unint64_t *)&qword_10090FD80, &qword_10090D750);
    uint64_t v101 = v26;
    uint64_t v102 = v27;
    uint64_t v100 = v28;
    uint64_t v29 = (void *)Sequence.map<A>(skippingError:_:)();
    id v30 = v114;
    id v111 = v29;
    id v31 = (void (*)(char *, uint64_t))v20[1];
    ++v20;
    uint64_t v103 = v31;
    v31(v24, v113);
    swift_bridgeObjectRelease();
    os_log_type_t v32 = (void *)(v18 >> 62);
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      unint64_t v33 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    char v115 = v20;
    if (!v33) {
      break;
    }
    id v112 = (char *)(v18 >> 62);
    uint64_t v120 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v33 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_58;
    }
    uint64_t v34 = 0;
    while (v33 != v34)
    {
      if ((v18 & 0xC000000000000001) != 0) {
        id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v35 = *(id *)(v18 + 8 * v34 + 32);
      }
      id v36 = v35;
      id v37 = [v35 account];
      if (!v37)
      {
        int v58 = self;
        id v118 = 0;
        unint64_t v119 = 0xE000000000000000;
        _StringGuts.grow(_:)(36);
        swift_bridgeObjectRelease();
        id v118 = (id)0xD000000000000021;
        unint64_t v119 = 0x80000001007D3A60;
        id v59 = [v36 description];
        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v62 = v61;

        v63._countAndFlagsBits = v60;
        v63._object = v62;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._countAndFlagsBits = 125;
        v64._object = (void *)0xE100000000000000;
        String.append(_:)(v64);
        NSString v65 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v58 internalErrorWithDebugDescription:v65];

        swift_willThrow();
LABEL_38:
        a1 = (void (*)(uint64_t, void, uint64_t, id))v120;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_release();
        return (uint64_t)a1;
      }
      id v118 = 0;
      id v38 = v37;
      id v39 = [v38 remObjectIDWithError:&v118];
      if (!v39)
      {
        id v66 = v118;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        goto LABEL_38;
      }
      unint64_t v40 = v39;
      id v41 = v118;
      uint64_t v20 = sub_100694DC0(v40);
      ++v34;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      id v30 = v114;
      if (v33 == v34)
      {
        uint64_t v20 = v120;
        swift_bridgeObjectRelease();
        os_log_type_t v32 = v112;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    swift_once();
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = _swiftEmptyArrayStorage;
LABEL_19:
  id v118 = &_swiftEmptySetSingleton;
  uint64_t v120 = &_swiftEmptySetSingleton;
  if (!v32)
  {
    uint64_t v42 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v42) {
      goto LABEL_35;
    }
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v42)
  {
LABEL_21:
    unint64_t v99 = v20;
    id v112 = (char *)(v18 & 0xC000000000000001);
    uint64_t v43 = 4;
    uint64_t v44 = v42;
    while (1)
    {
      id v45 = v112 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v18 + 8 * v43);
      uint64_t v46 = v45;
      uint64_t v47 = v43 - 3;
      if (__OFADD__(v43 - 4, 1)) {
        goto LABEL_54;
      }
      id v48 = [v45 list];
      if (v48)
      {
        id v116 = 0;
        id v49 = v48;
        id v50 = [v49 remObjectIDWithError:&v116];
        id v51 = v116;
        if (!v50) {
          goto LABEL_39;
        }
        id v52 = v50;
        id v53 = v116;
        uint64_t v20 = sub_100694D98(v52);

        sub_10031E20C((char **)&v117, v20);
      }
      id v54 = [v46 parentReminder];
      if (v54)
      {
        id v116 = 0;
        id v49 = v54;
        id v55 = [v49 remObjectIDWithError:&v116];
        id v51 = v116;
        if (!v55)
        {
LABEL_39:
          a1 = (void (*)(uint64_t, void, uint64_t, id))v51;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (uint64_t)a1;
        }
        uint64_t v56 = v55;
        id v57 = v116;
        uint64_t v20 = sub_100693E40(v56);

        sub_10031E1F8((char **)&v117, v20);
      }
      else
      {
      }
      ++v43;
      if (v47 == v44)
      {
        swift_bridgeObjectRelease();
        id v30 = v114;
        uint64_t v20 = v99;
        goto LABEL_41;
      }
    }
  }
LABEL_35:
  swift_bridgeObjectRelease();
LABEL_41:
  uint64_t v67 = swift_bridgeObjectRetain();
  NSString v68 = sub_100209A14(v67);
  swift_bridgeObjectRelease();
  uint64_t v69 = swift_bridgeObjectRetain();
  uint64_t v70 = sub_100209A08(v69);
  swift_bridgeObjectRelease();
  id v112 = (char *)sub_10069758C((uint64_t)v20, 100, 0, 0, 0);
  swift_bridgeObjectRelease();
  uint64_t v72 = sub_10069705C((uint64_t)v68, 100, 0, 0, 0);
  swift_release();
  uint64_t v73 = sub_100697018((uint64_t)v70, 100, 0, 0, 0);
  swift_release();
  uint64_t v74 = v104(v30, v105, v113);
  unsigned __int8 v117 = v112;
  __chkstk_darwin(v74);
  v98[-2] = v75;
  sub_100094134(&qword_100910070);
  uint64_t v76 = sub_1000963CC(0, &qword_100910180);
  sub_1000BFEAC((unint64_t *)&qword_1009133E0, &qword_100910070);
  uint64_t v107 = (void (*)(uint64_t, void, uint64_t, id))v76;
  uint64_t v77 = Sequence.map<A>(skippingError:_:)();
  unint64_t v99 = v73;
  v98[1] = v77;
  unint64_t v33 = (unint64_t)v111;
  uint64_t v78 = v109;
  uint64_t v79 = v113;
  v103(v114, v113);
  swift_bridgeObjectRelease();
  uint64_t v80 = v104(v78, v105, v79);
  unsigned __int8 v117 = v72;
  __chkstk_darwin(v80);
  v98[-2] = v78;
  sub_100094134(&qword_100910160);
  uint64_t v81 = sub_1000963CC(0, (unint64_t *)&unk_100914440);
  sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
  char v115 = (void *)v81;
  uint64_t v20 = (void *)Sequence.map<A>(skippingError:_:)();
  uint64_t v82 = v113;
  v103(v109, v113);
  swift_bridgeObjectRelease();
  os_log_type_t v83 = v108;
  uint64_t v84 = v104(v108, v105, v82);
  unsigned __int8 v117 = v99;
  __chkstk_darwin(v84);
  v98[-2] = v83;
  uint64_t v85 = (void *)Sequence.map<A>(skippingError:_:)();
  v103(v83, v113);
  swift_bridgeObjectRelease();
  unsigned __int8 v117 = v85;
  unint64_t v86 = swift_bridgeObjectRetain();
  sub_100202F18(v86);
  if (!(v33 >> 62))
  {
    uint64_t v87 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_45;
  }
LABEL_58:
  swift_bridgeObjectRetain();
  uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_45:
  if (!v87)
  {
LABEL_52:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v93 = objc_allocWithZone((Class)REMFetchResult);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v95 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v96 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    Class v97 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a1 = (void (*)(uint64_t, void, uint64_t, id))[v93 initWithAccountStorages:isa listStorages:v95 reminderStorages:v96 requestedObjectIDs:v97 metadata:0];

    return (uint64_t)a1;
  }
  id v114 = (char *)v20;
  unsigned __int8 v117 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v87 & 0x8000000000000000) == 0)
  {
    uint64_t v88 = 0;
    unint64_t v89 = v33 & 0xC000000000000001;
    do
    {
      if (v89) {
        id v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v90 = *(id *)(v33 + 8 * v88 + 32);
      }
      os_log_type_t v91 = v90;
      ++v88;
      id v92 = [v90 objectID];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t v33 = (unint64_t)v111;
    }
    while (v87 != v88);
    goto LABEL_52;
  }
  __break(1u);
  return result;
}

id sub_10061F59C(void (*a1)(uint64_t, void, uint64_t, id))
{
  id v3 = v1;
  id v5 = [v3 predicateDescriptor];
  id v6 = (void *)sub_100152158(a1, (uint64_t)[v3 options]);

  if (!v2)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    id v7 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v8 = [(id)swift_getObjCClassFromMetadata() entity];
    [v7 setEntity:v8];

    [v7 setAffectedStores:0];
    [v7 setPredicate:v6];
    if ([v3 options])
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_10077A530;
      id v10 = [self sortDescriptorSortingByOrderingInListAscending:1];
      sub_10043CD44();
      uint64_t v12 = v11;

      *(void *)(v9 + 32) = v12;
      specialized Array._endMutation()();
    }
    else
    {
      sub_100621130();
    }
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v7 setSortDescriptors:isa];

    if (qword_100907A58 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_10091FCE0);
    id v5 = v7;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = v6;
      unint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      id v19 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v18 = v5;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Created reminder fetchRequest {fetchRequest: %@}", v17, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return v19;
    }
    else
    {
    }
  }
  return v5;
}

uint64_t sub_10061F924()
{
  sub_100621130();
  uint64_t v1 = v0;
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_100621B98;
  *(void *)(v4 + 24) = v3;
  v10[4] = sub_10009A234;
  v10[5] = v4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100288114;
  v10[3] = &unk_1008CE508;
  id v5 = _Block_copy(v10);
  swift_retain();
  swift_release();
  id v6 = [(objc_class *)isa sortedArrayWithOptions:16 usingComparator:v5];

  _Block_release(v5);
  LOBYTE(isa) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isa)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v10[0] = v8;
    sub_100094134(&qword_100914560);
    sub_1000BFEAC(&qword_100912288, &qword_100914560);
    uint64_t v9 = Sequence.elements<A>(ofType:)();
    swift_release();
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

id sub_10061FB28(void (*a1)(uint64_t, void, uint64_t, id))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = sub_10061F59C(a1);
  if (!v2)
  {
    uint64_t v9 = v8;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    uint64_t v11 = NSManagedObjectContext.fetch<A>(_:)();
    if ([v1 options])
    {
      uint64_t v12 = sub_10061F924();
      swift_bridgeObjectRelease();
      uint64_t v11 = v12;
    }
    if (qword_100907A60 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_10008E2DC(v4, (uint64_t)qword_10091FCF8);
    uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
    v17[1] = v17;
    v17[3] = v11;
    __chkstk_darwin(v14);
    v17[-2] = v7;
    v17[0] = sub_100094134(&qword_10090D750);
    sub_1000963CC(0, &qword_1009100F8);
    sub_1000BFEAC((unint64_t *)&qword_10090FD80, &qword_10090D750);
    Sequence.map<A>(skippingError:_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRelease();
    id v15 = objc_allocWithZone((Class)REMFetchResult);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v1 = [v15 initWithReminderStorages:isa];
  }
  return v1;
}

id sub_10061FE2C(void (*a1)(uint64_t, void, uint64_t, id))
{
  id result = sub_10061F59C(a1);
  if (!v1)
  {
    uint64_t v3 = result;
    v5[3] = sub_100094134(&qword_10091B530);
    v5[0] = v3;
    id v4 = v3;
    throwingCast<A>(_:as:failureMessage:)();

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v5);
    return (id)v5[5];
  }
  return result;
}

id sub_10061FEC8(void (*a1)(uint64_t, void, uint64_t, id))
{
  if (([v1 options] & 2) != 0)
  {
    id result = (id)sub_100620090(a1);
    if (v2) {
      return result;
    }
    id v5 = objc_allocWithZone((Class)REMReminderFetchMetadata);
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
    sub_1000ED098((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
    v6.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v7 = [v5 initWithSubtaskCounts:v6.super.isa];
    goto LABEL_8;
  }
  if (([v1 options] & 4) == 0) {
    return [objc_allocWithZone((Class)REMFetchResult) initWithMetadata:0];
  }
  id result = sub_1006205E4(a1);
  if (!v2)
  {
    id v8 = objc_allocWithZone((Class)REMReminderFetchMetadata);
    sub_1000963CC(0, &qword_10091FD10);
    v6.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v7 = [v8 initWithDueDateCounts:v6.super.isa];
LABEL_8:
    uint64_t v9 = v7;

    id v10 = [objc_allocWithZone((Class)REMFetchResult) initWithMetadata:v9];
    return v10;
  }
  return result;
}

uint64_t sub_100620090(void (*a1)(uint64_t, void, uint64_t, id))
{
  id v3 = sub_10061F59C(a1);
  if (v1) {
    return v2;
  }
  unint64_t v4 = (unint64_t)v3;
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  unint64_t v6 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v2 = sub_1002EF88C((uint64_t)_swiftEmptyArrayStorage);
  if (v6 >> 62)
  {
LABEL_58:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_6;
    }
    goto LABEL_59;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
  {
LABEL_59:

    swift_bridgeObjectRelease();
    return v2;
  }
LABEL_6:
  id v49 = (void *)v4;
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v6 & 0xC000000000000001;
    unint64_t v50 = v6;
    uint64_t v51 = v7;
    unint64_t v52 = v6 & 0xC000000000000001;
    while (1)
    {
      if (v9) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(v6 + 8 * v8 + 32);
      }
      uint64_t v11 = v10;
      id v12 = [v10 remObjectID:v49];
      if (!v12) {
        goto LABEL_9;
      }
      uint64_t v13 = v12;
      id v14 = [v11 children];
      if (!v14) {
        break;
      }
      id v15 = v14;
      sub_1000ED098((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
      uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v16 & 0xC000000000000001) != 0)
      {
        if (!__CocoaSet.count.getter()) {
          goto LABEL_32;
        }
        id v17 = v13;
        unint64_t v4 = __CocoaSet.count.getter();
      }
      else
      {
        unint64_t v4 = *(void *)(v16 + 16);
        if (!v4)
        {
LABEL_32:

          swift_bridgeObjectRelease();
LABEL_33:
          uint64_t v7 = v51;
          unint64_t v9 = v52;
          goto LABEL_10;
        }
        id v18 = v13;
      }
      swift_bridgeObjectRelease();
      id v19 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v4];
      unint64_t v20 = v2 & 0xC000000000000001;
      if (!v19)
      {
        unint64_t v9 = v52;
        if (v20)
        {
          if (v2 < 0) {
            uint64_t v31 = v2;
          }
          else {
            uint64_t v31 = v2 & 0xFFFFFFFFFFFFFF8;
          }
          id v32 = v13;
          swift_bridgeObjectRetain();
          uint64_t v33 = __CocoaDictionary.lookup(_:)();

          if (!v33)
          {

            swift_bridgeObjectRelease();
            uint64_t v7 = v51;
            goto LABEL_10;
          }
          swift_unknownObjectRelease();
          uint64_t v34 = __CocoaDictionary.count.getter();
          Swift::Int v35 = sub_1001A8A84(v31, v34);
          swift_retain();
          unint64_t v36 = sub_100306FE8((uint64_t)v32);
          char v38 = v37;
          swift_release();
          if ((v38 & 1) == 0)
          {
            __break(1u);
            goto LABEL_61;
          }

          id v39 = *(void **)(*(void *)(v35 + 56) + 8 * v36);
          sub_1002C2188(v36);

          swift_bridgeObjectRelease();
          uint64_t v2 = v35;
        }
        else
        {
          swift_bridgeObjectRetain();
          unint64_t v45 = sub_100306FE8((uint64_t)v13);
          char v47 = v46;
          swift_bridgeObjectRelease();
          if (v47)
          {
            uint64_t v7 = v51;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_10031C138();
              uint64_t v7 = v51;
            }

            id v48 = *(void **)(*(void *)(v2 + 56) + 8 * v45);
            sub_1002C2188(v45);

            swift_bridgeObjectRelease();
            unint64_t v9 = v52;
            goto LABEL_10;
          }
        }
        goto LABEL_33;
      }
      id v21 = v19;
      if (v20)
      {
        if (v2 < 0) {
          uint64_t v22 = v2;
        }
        else {
          uint64_t v22 = v2 & 0xFFFFFFFFFFFFFF8;
        }
        uint64_t v23 = __CocoaDictionary.count.getter();
        if (__OFADD__(v23, 1)) {
          goto LABEL_56;
        }
        uint64_t v2 = sub_1001A8A84(v22, v23 + 1);
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v4 = sub_100306FE8((uint64_t)v13);
      uint64_t v26 = *(void *)(v2 + 16);
      BOOL v27 = (v25 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      unint64_t v6 = v25;
      if (*(void *)(v2 + 24) >= v28)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_10031C138();
        }
      }
      else
      {
        sub_100315048(v28, isUniquelyReferenced_nonNull_native);
        unint64_t v29 = sub_100306FE8((uint64_t)v13);
        if ((v6 & 1) != (v30 & 1)) {
          goto LABEL_62;
        }
        unint64_t v4 = v29;
      }
      if (v6)
      {
        uint64_t v40 = *(void *)(v2 + 56);

        *(void *)(v40 + 8 * v4) = v21;
      }
      else
      {
        *(void *)(v2 + 8 * (v4 >> 6) + 64) |= 1 << v4;
        *(void *)(*(void *)(v2 + 48) + 8 * v4) = v13;
        *(void *)(*(void *)(v2 + 56) + 8 * v4) = v21;
        uint64_t v41 = *(void *)(v2 + 16);
        BOOL v42 = __OFADD__(v41, 1);
        uint64_t v43 = v41 + 1;
        if (v42) {
          goto LABEL_57;
        }
        *(void *)(v2 + 16) = v43;
        id v44 = v13;
      }
      unint64_t v6 = v50;
      uint64_t v7 = v51;
      unint64_t v9 = v52;

      swift_bridgeObjectRelease();
LABEL_10:
      if (v7 == ++v8)
      {

        swift_bridgeObjectRelease();
        return v2;
      }
    }

LABEL_9:
    goto LABEL_10;
  }
LABEL_61:
  __break(1u);
LABEL_62:
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

char *sub_1006205E4(void *a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v103 = (char *)v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v99 = (char *)v84 - v5;
  __chkstk_darwin(v6);
  unint64_t v100 = (unint64_t)v84 - v7;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v105 = *(void **)(v8 - 8);
  __chkstk_darwin(v8);
  id v10 = (char *)v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v84 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v84 - v15;
  uint64_t v17 = type metadata accessor for Calendar();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v102 = a1;
  id v21 = v104;
  id v22 = sub_10061F59C((void (*)(uint64_t, void, uint64_t, id))a1);
  if (v21) {
    return v10;
  }
  uint64_t v23 = (uint64_t)v22;
  Class v97 = v16;
  uint64_t v98 = v13;
  uint64_t v104 = v10;
  uint64_t v101 = v8;
  uint64_t v24 = v105;
  uint64_t v89 = v18;
  uint64_t v90 = v17;
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  unint64_t v25 = 0;
  uint64_t v26 = v23;
  unint64_t v28 = NSManagedObjectContext.fetch<A>(_:)();
  Class v96 = v20;
  static Calendar.current.getter();
  unint64_t v106 = (unint64_t)_swiftEmptyArrayStorage;
  if (v28 >> 62) {
    goto LABEL_47;
  }
  uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
  uint64_t v30 = v101;
  uint64_t v31 = v98;
  if (!v29)
  {

    swift_bridgeObjectRelease();
    id v10 = (char *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v96, v90);
    return v10;
  }
  unint64_t v95 = v28 & 0xC000000000000001;
  v84[1] = (id)v25;
  if ((v28 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_50;
    }
    id v32 = *(id *)(v28 + 32);
  }
  id v33 = [v32 dueDate];

  if (v33)
  {
    uint64_t v34 = v99;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v35 = (uint64_t)v34;
    unint64_t v36 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v24[7];
    char v37 = v34;
    uint64_t v38 = 0;
  }
  else
  {
    unint64_t v36 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v24[7];
    uint64_t v35 = (uint64_t)v99;
    char v37 = v99;
    uint64_t v38 = 1;
  }
  unint64_t v94 = v36;
  v36((uint64_t)v37, v38, 1, v30);
  id v39 = v97;
  uint64_t v40 = v100;
  sub_1000CAAB4(v35, v100);
  id v92 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v24[6];
  id v93 = v24 + 6;
  if (v92(v40, 1, v30) == 1)
  {
    uint64_t v29 = (uint64_t)v96;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000EACF4(v40);
    if (qword_100907A58 == -1)
    {
LABEL_16:
      uint64_t v41 = type metadata accessor for Logger();
      sub_10008E2DC(v41, (uint64_t)qword_10091FCE0);
      BOOL v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      BOOL v44 = os_log_type_enabled(v42, v43);
      uint64_t v46 = v89;
      uint64_t v45 = v90;
      if (v44)
      {
        char v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Due date sorting missing due date", v47, 2u);
        swift_slowDealloc();
      }

      id v48 = self;
      NSString v49 = String._bridgeToObjectiveC()();
      id v10 = (char *)[v48 internalErrorWithDebugDescription:v49];

      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v29, v45);
      return v10;
    }
LABEL_50:
    swift_once();
    goto LABEL_16;
  }
  v84[0] = (id)v26;
  unint64_t v50 = (char *)v24[4];
  unint64_t v99 = v50;
  ((void (*)(void *, uint64_t, uint64_t))v50)(v39, v40, v30);
  Calendar.startOfDay(for:)();
  uint64_t v51 = v39;
  unint64_t v52 = (void (*)(void *, uint64_t))v24[1];
  v52(v51, v30);
  ((void (*)(void *, char *, uint64_t))v50)(v51, v31, v30);
  id v53 = v24 + 1;
  v24 += 4;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v85 = v28 & 0xFFFFFFFFFFFFFF8;
  unint64_t v86 = v24;
  uint64_t v105 = v53;
  os_log_type_t v91 = v53 + 6;
  uint64_t v87 = v29;
  unint64_t v88 = v28;
  unint64_t v54 = v101;
  if (v95)
  {
LABEL_20:
    id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_23;
  }
  while (1)
  {
    if (v25 >= *(void *)(v85 + 16)) {
      goto LABEL_46;
    }
    id v55 = *(id *)(v28 + 8 * v25 + 32);
LABEL_23:
    uint64_t v56 = v55;
    unint64_t v57 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    unint64_t v100 = v25;
    id v58 = [v55 dueDate];
    id v102 = v56;
    if (!v58) {
      break;
    }
    id v59 = v58;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v60 = (uint64_t)v103;
    id v61 = (void (*)(char *, uint64_t, unint64_t))v99;
    ((void (*)(char *, char *, unint64_t))v99)(v103, v31, v54);
    v94(v60, 0, 1, v54);
    if (v92(v60, 1, v54) == 1) {
      goto LABEL_36;
    }
    unint64_t v28 = (unint64_t)v52;
    id v62 = v31;
    Swift::String v63 = v104;
    v61(v104, v60, v54);
    Calendar.startOfDay(for:)();
    ((void (*)(char *, unint64_t))v28)(v63, v54);
    v61(v63, (uint64_t)v62, v54);
    sub_10026D764();
    uint64_t v24 = v97;
    unint64_t v25 = v54;
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      ((void (*)(char *, unint64_t))v28)(v63, v54);

      if (__OFADD__(v26++, 1)) {
        goto LABEL_45;
      }
      unint64_t v52 = (void (*)(void *, uint64_t))v28;
      unint64_t v28 = v88;
      BOOL v65 = v57 == v87;
      uint64_t v31 = v98;
      uint64_t v24 = v86;
    }
    else
    {
      id v66 = v24;
      id v67 = objc_allocWithZone((Class)REMReminderFetchMetadataDueDateCount);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      [v67 initWithDueDate:isa count:v26];

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v69 = v24;
      uint64_t v70 = v101;
      unint64_t v52 = (void (*)(void *, uint64_t))v28;
      ((void (*)(void *, uint64_t))v28)(v69, v101);
      uint64_t v71 = v70;
      uint64_t v24 = v86;
      ((void (*)(void *, char *, uint64_t))v99)(v66, v104, v71);
      uint64_t v26 = 1;
      unint64_t v28 = v88;
      BOOL v65 = v57 == v87;
      uint64_t v31 = v98;
    }
    if (v65)
    {
      swift_bridgeObjectRelease();
      id v81 = objc_allocWithZone((Class)REMReminderFetchMetadataDueDateCount);
      uint64_t v82 = v97;
      Class v83 = Date._bridgeToObjectiveC()().super.isa;
      [v81 initWithDueDate:v83 count:v26];

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v52(v82, v101);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v96, v90);
      return (char *)v106;
    }
    unint64_t v25 = v100 + 1;
    if (v95) {
      goto LABEL_20;
    }
  }
  uint64_t v60 = (uint64_t)v103;
  v94((uint64_t)v103, 1, 1, v101);
LABEL_36:
  uint64_t v72 = v52;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000EACF4(v60);
  if (qword_100907A58 != -1) {
    swift_once();
  }
  uint64_t v73 = type metadata accessor for Logger();
  sub_10008E2DC(v73, (uint64_t)qword_10091FCE0);
  uint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.error.getter();
  BOOL v76 = os_log_type_enabled(v74, v75);
  uint64_t v77 = v90;
  if (v76)
  {
    uint64_t v78 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v78 = 0;
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Due date sorting missing due date", v78, 2u);
    swift_slowDealloc();
  }

  uint64_t v79 = self;
  NSString v80 = String._bridgeToObjectiveC()();
  id v10 = (char *)[v79 internalErrorWithDebugDescription:v80];

  swift_willThrow();
  v72(v97, v101);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v96, v77);
  return v10;
}

void sub_100621130()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)&double v4 = __chkstk_darwin(v2).n128_u64[0];
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [v0 sortDescriptors:v4];
  sub_1000963CC(0, (unint64_t *)&unk_100918E30);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_15:
    unint64_t v20 = (unint64_t)v12;
    if ([v1 options]) {
      return;
    }
    uint64_t v6 = (char *)[self sortDescriptorSortingByOrderingInListAscending:1];
    sub_10043CD44();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_17:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      return;
    }
LABEL_20:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_17;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_14;
  }
LABEL_3:
  unint64_t v20 = (unint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v9 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v18 = v6;
  uint64_t v19 = v1;
  uint64_t v3 = 0;
  uint64_t v2 = v8 & 0xC000000000000001;
  uint64_t v1 = &selRef_includeReminderTitles;
  while (1)
  {
    if (v9 == v3)
    {
      __break(1u);
      goto LABEL_13;
    }
    id v10 = v2 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v8 + 8 * v3 + 32);
    uint64_t v11 = v10;
    if ((unint64_t)[v10 type] >= 5) {
      break;
    }
    ++v3;
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    swift_getKeyPath();
    [v11 ascending];
    uint64_t v6 = (char *)NSSortDescriptor.init<A, B>(keyPath:ascending:)();

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v9 == v3)
    {
      uint64_t v12 = (void *)v20;
      swift_bridgeObjectRelease();
      uint64_t v1 = v19;
      goto LABEL_15;
    }
  }
  if (qword_100907590 != -1) {
    swift_once();
  }
  uint64_t v13 = v17;
  uint64_t v14 = sub_10008E2DC(v17, (uint64_t)qword_100918838);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v14, v13);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  sub_10052ECB8((uint64_t)"unknown type", 12, 2);
  __break(1u);
}

uint64_t sub_1006214E8(void *a1, void *a2, unint64_t a3)
{
  id v4 = [a1 parentReminder];

  unint64_t v5 = a3 >> 62;
  if (!v4)
  {
    id v6 = [a2 parentReminder];

    if (!v6) {
      goto LABEL_28;
    }
  }
  id v36 = [a1 parentReminder];
  if (!v36) {
    id v36 = a1;
  }
  id v7 = [a2 parentReminder];
  if (!v7) {
    id v7 = a2;
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  if (static NSObject.== infix(_:_:)())
  {
    id v8 = [a1 parentReminder];
    if (v8)
    {
      uint64_t v9 = v8;
      id v10 = a2;
      id v11 = v9;
      char v12 = static NSObject.== infix(_:_:)();

      if (v12)
      {

        return 1;
      }
    }
    id v21 = [a2 parentReminder];
    if (v21)
    {
      id v22 = v21;
      id v23 = a1;
      id v24 = v22;
      char v25 = static NSObject.== infix(_:_:)();

      if (v25) {
        return -1;
      }
      goto LABEL_28;
    }

    id v7 = v36;
    goto LABEL_27;
  }
  if (!v5)
  {
    uint64_t v14 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_13;
    }
LABEL_20:

    swift_bridgeObjectRelease();
    unint64_t v5 = a3 >> 62;
LABEL_27:

LABEL_28:
    if (v5) {
      goto LABEL_41;
    }
    uint64_t v26 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v28 = a1;
    for (uint64_t i = a2; v26; uint64_t i = a2)
    {
      uint64_t v29 = 4;
      while (1)
      {
        id v30 = (a3 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(a3 + 8 * v29);
        uint64_t v31 = v30;
        uint64_t v32 = v29 - 3;
        if (__OFADD__(v29 - 4, 1)) {
          break;
        }
        id v13 = [v30 compareObject:v28 toObject:i];

        if (v13) {
          goto LABEL_25;
        }
        ++v29;
        if (v32 == v26) {
          goto LABEL_37;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v28 = a1;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  if (!v14) {
    goto LABEL_20;
  }
LABEL_13:
  uint64_t v15 = 4;
  while (1)
  {
    if ((a3 & 0xC000000000000001) != 0) {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v16 = *(id *)(a3 + 8 * v15);
    }
    uint64_t v17 = v16;
    uint64_t v18 = v15 - 3;
    if (__OFADD__(v15 - 4, 1)) {
      goto LABEL_40;
    }
    id v19 = v36;
    id v20 = v7;
    id v13 = [v17 compareObject:v19 toObject:v20];

    if (v13) {
      break;
    }
    ++v15;
    if (v18 == v14) {
      goto LABEL_20;
    }
  }

LABEL_25:
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_10062186C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_10009A1B0(a1, (uint64_t)v12);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  if (swift_dynamicCast())
  {
    sub_10009A1B0(a2, (uint64_t)v12);
    if (swift_dynamicCast())
    {
      unint64_t v5 = v11;
      uint64_t v6 = sub_1006214E8(v11, v11, a3);

      goto LABEL_10;
    }
  }
  if (qword_100907A58 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_10091FCE0);
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v8, "Given cdReminders should not contain any element that is not a REMCDReminder.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = 0;
LABEL_10:

  return v6;
}

uint64_t sub_100621A00(void (*a1)(uint64_t, void, uint64_t, id))
{
  return sub_10061E668(a1);
}

id sub_100621A24(void (*a1)(uint64_t, void, uint64_t, id))
{
  return sub_10061FB28(a1);
}

id sub_100621A48(void (*a1)(uint64_t, void, uint64_t, id))
{
  return sub_10061FE2C(a1);
}

void sub_100621A6C(void (*a1)(uint64_t, void, uint64_t, id))
{
  id v2 = sub_10061F59C(a1);
  if (!v1)
  {
    uint64_t v3 = v2;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    [objc_allocWithZone((Class)REMFetchResult) initWithCount:NSManagedObjectContext.count<A>(for:)()];
  }
}

id sub_100621B14(void (*a1)(uint64_t, void, uint64_t, id))
{
  return sub_10061FEC8(a1);
}

uint64_t sub_100621B60()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100621B98(uint64_t a1, uint64_t a2)
{
  return sub_10062186C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100621BA0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100621BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100621BC0()
{
  return swift_release();
}

char *sub_100621BC8@<X0>(void **a1@<X0>, char **a2@<X8>)
{
  return sub_10039A2E4(a1, a2);
}

char *sub_100621BE0(char *a1)
{
  uint64_t v98 = a1;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v95 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v99 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  unint64_t v94 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v93 = (char *)&v91 - v7;
  __chkstk_darwin(v8);
  id v10 = (char *)&v91 - v9;
  __chkstk_darwin(v11);
  id v13 = (char *)&v91 - v12;
  uint64_t v14 = type metadata accessor for REMSearchCriterion();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  Class v96 = (uint64_t *)((char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  uint64_t v101 = (unsigned __int8 *)&v91 - v18;
  __chkstk_darwin(v19);
  unint64_t v100 = (unsigned __int8 *)&v91 - v20;
  __chkstk_darwin(v21);
  uint64_t v102 = (uint64_t)&v91 - v22;
  *(void *)&double v24 = __chkstk_darwin(v23).n128_u64[0];
  uint64_t v26 = (uint64_t *)((char *)&v91 - v25);
  id v105 = v1;
  id v27 = [v1 title:v24];
  uint64_t v103 = v15;
  uint64_t v104 = v14;
  if (v27)
  {
    unint64_t v28 = v27;
    id v92 = v10;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v14;
    uint64_t v32 = v31;

    id v33 = (char *)v26 + *(int *)(sub_100094134((uint64_t *)&unk_100915A00) + 48);
    uint64_t *v26 = v29;
    v26[1] = v32;
    uint64_t v34 = enum case for REMStringMatchingStyle.prefix(_:);
    uint64_t v35 = type metadata accessor for REMStringMatchingStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104))(v33, v34, v35);
    (*(void (**)(uint64_t *, void, uint64_t))(v15 + 104))(v26, enum case for REMSearchCriterion.textualField(_:), v30);
    id v36 = (void *)sub_1003092E8(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    unint64_t v38 = v36[2];
    unint64_t v37 = v36[3];
    if (v38 >= v37 >> 1) {
      id v36 = (void *)sub_1003092E8(v37 > 1, v38 + 1, 1, (unint64_t)v36);
    }
    id v39 = v105;
    uint64_t v40 = v95;
    v36[2] = v38 + 1;
    (*(void (**)(unint64_t, uint64_t *, uint64_t))(v103 + 32))((unint64_t)v36+ ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))+ *(void *)(v103 + 72) * v38, v26, v104);
    id v10 = v92;
  }
  else
  {
    id v36 = _swiftEmptyArrayStorage;
    id v39 = v105;
    uint64_t v40 = v95;
  }
  id v41 = [v39 dueAfter];
  if (v41)
  {
    BOOL v42 = v41;
    os_log_type_t v43 = v99;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v13, v43, v2);
    BOOL v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
    v44(v13, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v13, 1, v2) != 1) {
      goto LABEL_13;
    }
  }
  else
  {
    BOOL v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
    v44(v13, 1, 1, v2);
  }
  sub_1000EACF4((uint64_t)v13);
  id v45 = [v39 dueBefore];
  if (!v45)
  {
    v44(v10, 1, 1, v2);
    goto LABEL_16;
  }
  uint64_t v46 = v45;
  char v47 = v99;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v10, v47, v2);
  v44(v10, 0, 1, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v10, 1, v2) == 1)
  {
LABEL_16:
    sub_1000EACF4((uint64_t)v10);
    uint64_t v53 = v103;
    uint64_t v52 = v104;
    unint64_t v54 = v96;
    goto LABEL_25;
  }
  id v13 = v10;
LABEL_13:
  sub_1000EACF4((uint64_t)v13);
  id v48 = [v39 dueAfter];
  uint64_t v49 = (uint64_t)v93;
  if (v48)
  {
    unint64_t v50 = v48;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = 1;
  }
  uint64_t v52 = v104;
  uint64_t v55 = (uint64_t)v94;
  uint64_t v56 = 1;
  v44((char *)v49, v51, 1, v2);
  sub_1000CAAB4(v49, v102);
  id v57 = [v105 dueBefore];
  if (v57)
  {
    id v58 = v57;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v56 = 0;
  }
  uint64_t v53 = v103;
  v44((char *)v55, v56, 1, v2);
  uint64_t v59 = sub_100094134((uint64_t *)&unk_10091C320);
  uint64_t v60 = v102;
  sub_1000CAAB4(v55, v102 + *(int *)(v59 + 48));
  (*(void (**)(uint64_t, void, uint64_t))(v53 + 104))(v60, enum case for REMSearchCriterion.dueDate(_:), v52);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v36 = (void *)sub_1003092E8(0, v36[2] + 1, 1, (unint64_t)v36);
  }
  unint64_t v54 = v96;
  id v39 = v105;
  unint64_t v62 = v36[2];
  unint64_t v61 = v36[3];
  if (v62 >= v61 >> 1) {
    id v36 = (void *)sub_1003092E8(v61 > 1, v62 + 1, 1, (unint64_t)v36);
  }
  v36[2] = v62 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v53 + 32))((unint64_t)v36+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v62, v102, v52);
LABEL_25:
  id v63 = [v39 completed];
  if (v63)
  {
    Swift::String v64 = v63;
    unsigned __int8 v65 = [v63 BOOLValue];
    id v66 = v100;
    *unint64_t v100 = v65;
    (*(void (**)(unsigned __int8 *, void, uint64_t))(v53 + 104))(v66, enum case for REMSearchCriterion.isCompleted(_:), v52);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v36 = (void *)sub_1003092E8(0, v36[2] + 1, 1, (unint64_t)v36);
    }
    unint64_t v68 = v36[2];
    unint64_t v67 = v36[3];
    if (v68 >= v67 >> 1) {
      id v36 = (void *)sub_1003092E8(v67 > 1, v68 + 1, 1, (unint64_t)v36);
    }
    v36[2] = v68 + 1;
    (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v53 + 32))((unint64_t)v36+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v68, v100, v52);

    id v39 = v105;
  }
  id v69 = [v39 hasLocation];
  if (v69)
  {
    uint64_t v70 = v69;
    unsigned __int8 v71 = [v69 BOOLValue];
    uint64_t v72 = v101;
    unsigned __int8 *v101 = v71;
    (*(void (**)(unsigned __int8 *, void, uint64_t))(v53 + 104))(v72, enum case for REMSearchCriterion.hasLocation(_:), v52);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v36 = (void *)sub_1003092E8(0, v36[2] + 1, 1, (unint64_t)v36);
    }
    unint64_t v74 = v36[2];
    unint64_t v73 = v36[3];
    if (v74 >= v73 >> 1) {
      id v36 = (void *)sub_1003092E8(v73 > 1, v74 + 1, 1, (unint64_t)v36);
    }
    v36[2] = v74 + 1;
    (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v53 + 32))((unint64_t)v36+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v74, v101, v52);
  }
  id v75 = [v39 location];
  if (v75)
  {
    BOOL v76 = v75;
    uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v79 = v78;

    NSString v80 = (char *)v54 + *(int *)(sub_100094134((uint64_t *)&unk_100915A00) + 48);
    *unint64_t v54 = v77;
    v54[1] = v79;
    uint64_t v81 = enum case for REMStringMatchingStyle.prefix(_:);
    uint64_t v82 = type metadata accessor for REMStringMatchingStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v82 - 8) + 104))(v80, v81, v82);
    (*(void (**)(uint64_t *, void, uint64_t))(v53 + 104))(v54, enum case for REMSearchCriterion.location(_:), v52);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v36 = (void *)sub_1003092E8(0, v36[2] + 1, 1, (unint64_t)v36);
    }
    unint64_t v84 = v36[2];
    unint64_t v83 = v36[3];
    uint64_t v85 = v98;
    if (v84 >= v83 >> 1) {
      id v36 = (void *)sub_1003092E8(v83 > 1, v84 + 1, 1, (unint64_t)v36);
    }
    v36[2] = v84 + 1;
    (*(void (**)(unint64_t, uint64_t *, uint64_t))(v53 + 32))((unint64_t)v36+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v84, v54, v52);
  }
  else
  {
    uint64_t v85 = v98;
  }
  uint64_t v86 = v97;
  uint64_t v87 = sub_100371444((uint64_t)v36, 0, (void *)0x33, v85);
  if (!v86)
  {
    unint64_t v88 = (unint64_t)v87;
    swift_bridgeObjectRelease();
    id v89 = [self defaultFetchOptions];
    uint64_t v85 = (char *)sub_10044B6AC(v88, v89, (uint64_t)v85);
  }
  swift_bridgeObjectRelease();
  return v85;
}

char *sub_1006226E8(char *a1)
{
  return sub_100621BE0(a1);
}

uint64_t sub_10062270C(uint64_t a1)
{
  uint64_t result = sub_100622F00(&qword_10091FD38, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.PublicTemplateInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_100622764(void *a1@<X1>, void *a2@<X3>, uint64_t a3@<X8>)
{
  id v30 = a1;
  uint64_t v31 = a2;
  uint64_t v29 = a3;
  uint64_t v3 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v3 - 8);
  unint64_t v28 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for REMRemindersListDataView.SectionsModel();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.ListSectionsModel();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v26 - v14;
  uint64_t v16 = (void *)REMRemindersListDataView.PublicTemplateInvocation.Parameters.publicTemplateObjectID.getter();
  uint64_t v17 = v32;
  uint64_t v18 = sub_100622C10(v16, (uint64_t)v30, v31);
  if (v17)
  {

    return;
  }
  v26[1] = v19;
  id v27 = v18;
  id v30 = v16;
  uint64_t v31 = v12;
  uint64_t v32 = v7;
  uint64_t v20 = v28;
  v26[2] = v8;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
  {
    uint64_t v21 = v9;
    uint64_t v22 = v15;
    goto LABEL_5;
  }
  if (_CocoaArrayWrapper.endIndex.getter())
  {
    sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
    uint64_t v21 = v9;
    uint64_t v22 = v15;
  }
  else
  {
    uint64_t v21 = v9;
    uint64_t v22 = v15;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0) {
      goto LABEL_5;
    }
  }
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_5:
    uint64_t v23 = v10;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
  uint64_t v23 = v10;
LABEL_6:
  if (_CocoaArrayWrapper.endIndex.getter())
  {
    sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
    goto LABEL_9;
  }
LABEL_8:
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
LABEL_9:
    if (_CocoaArrayWrapper.endIndex.getter()) {
      sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
    }
  }
  REMRemindersListDataView.Diff.init(updatedReminderObjectIDs:insertedReminderObjectIDs:updatedListObjectIDs:updatedSectionObjectIDs:newReminderMembershipsViaAutomation:)();
  uint64_t v24 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v20, 1, 1, v24);
  REMRemindersListDataView.SectionsModel.init(sections:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
  uint64_t v25 = v27;
  REMList.codable.getter();
  REMRemindersListDataView.ListSectionsModel.init(sectionsModel:list:)();
  (*(void (**)(void *, char *, uint64_t))(v23 + 16))(v31, v22, v21);
  sub_100622F00(&qword_10091DF90, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsModel);
  sub_100622F00(&qword_10091DF98, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsModel);
  REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();

  (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v21);
}

void *sub_100622C10(void *a1, uint64_t a2, void *a3)
{
  uint64_t v7 = type metadata accessor for RDPublicTemplate();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void **)(v10 - 8);
  *(void *)&double v12 = __chkstk_darwin(v10).n128_u64[0];
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v31 = a3;
  id v32 = 0;
  id v15 = [a3 fetchPrimaryActiveCloudKitAccountWithError:&v32, v12];
  if (v15)
  {
    uint64_t v16 = v15;
    id v17 = v32;
    uint64_t v18 = (objc_class *)sub_1003CF700();
    id v19 = [a1 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v20 = sub_1003CF89C(v14, a2, v18);
    if (v3)
    {
      uint64_t v21 = (void (*)(char *, uint64_t))v11[1];
      ++v11;
      v21(v14, v10);

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = (void *)v20;
      ((void (*)(char *, uint64_t))v11[1])(v14, v10);
      swift_bridgeObjectRelease();
      id v25 = [v16 objectID:sub_10062D57C(v9)];
      id v26 = sub_1000D114C(v25);

      id v27 = objc_allocWithZone((Class)REMList);
      id v28 = v31;
      id v29 = v16;
      uint64_t v11 = [v27 initWithStore:v28 account:v29 storage:v26];

      sub_1000D1DCC();
      sub_1003589D0((uint64_t)v9);
    }
  }
  else
  {
    id v22 = v32;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v11;
}

uint64_t sub_100622F00(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100622F48()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091FD40);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091FD40);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

_UNKNOWN **static REMCDAlarmTrigger.recordTypes()()
{
  return &off_1008B7820;
}

uint64_t static REMCDAlarmTrigger.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  swift_bridgeObjectRetain();
  id v6 = a4;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [self objectWithRecordID:v5 accountID:v7 context:v6];

  if (v8)
  {
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t static REMCDAlarmTrigger.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_1000963CC(0, (unint64_t *)&unk_100910DD0);
  uint64_t v8 = CKRecord.subscript.getter();
  if (v8)
  {
    uint64_t v38 = v8;
    sub_100094134(&qword_100909AB0);
    if (swift_dynamicCast())
    {
      uint64_t countAndFlagsBits = v37._countAndFlagsBits;
      object = v37._object;
      swift_bridgeObjectRetain();
      if (sub_1006261C4(v37) == 4)
      {
        if (qword_100907A68 != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        sub_10008E2DC(v11, (uint64_t)qword_10091FD40);
        swift_bridgeObjectRetain();
        double v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          v37._uint64_t countAndFlagsBits = swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 136446210;
          id v36 = v14 + 4;
          swift_bridgeObjectRetain();
          uint64_t v38 = sub_1000C51B8(countAndFlagsBits, (unint64_t)object, &v37._countAndFlagsBits);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "newCloudObject: Unknown alarm trigger type {type: %{public}s}", v14, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        switch(v15)
        {
          case 1:
            uint64_t v16 = &qword_100910E10;
            break;
          case 2:
            uint64_t v16 = &qword_10091FD58;
            break;
          case 3:
            uint64_t v16 = &qword_100910E00;
            break;
          default:
            uint64_t v16 = (unint64_t *)&qword_100910E40;
            break;
        }
        sub_1000963CC(0, v16);
      }
    }
  }
  id v17 = [a1 recordID:v36];
  NSString v18 = [v17 recordName];

  if (!v18)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v19 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v18 context:a3 account:a2];

  if (!v19) {
    return 0;
  }
  id v20 = [a2 ckIdentifier];
  if (v20)
  {
    uint64_t v21 = v20;
    [v19 mergeDataFromRecord:a1 accountID:v20];

    [v19 setCkServerRecord:a1];
    [v19 setInCloud:1];
    [v19 updateParentReferenceIfNecessary];
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
  }
  else
  {
    if (qword_100907A68 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10008E2DC(v23, (uint64_t)qword_10091FD40);
    id v24 = a2;
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446466;
      v37._uint64_t countAndFlagsBits = v4;
      swift_getMetatypeMetadata();
      uint64_t v28 = String.init<A>(describing:)();
      v37._uint64_t countAndFlagsBits = sub_1000C51B8(v28, v29, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2082;
      id v30 = [v24 remObjectID];
      if (v30)
      {
        id v31 = v30;
        id v32 = [v30 description];

        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v34;
      }
      else
      {
        unint64_t v35 = 0xE300000000000000;
        uint64_t v33 = 7104878;
      }
      v37._uint64_t countAndFlagsBits = sub_1000C51B8(v33, v35, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }
  }
  return 0;
}

Swift::String __swiftcall REMCDAlarmTrigger.recordType()()
{
  uint64_t v0 = 0x6972546D72616C41;
  uint64_t v1 = (void *)0xEC00000072656767;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

void sub_100623958()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    uint64_t v3 = v0;
    sub_1000963CC(0, (unint64_t *)&qword_100909E80);
    CKRecordKeyValueSetting.subscript.getter();
    Class isa = 0;
    if (v12 >> 60 != 15)
    {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100097F20(v11, v12);
    }
    [v2 setDateComponentsData:isa];

    goto LABEL_9;
  }
  if (qword_100907A68 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_10091FD40);
  id v10 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v6))
  {
    NSString v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)NSString v7 = 136315138;
    uint64_t ObjectType = swift_getObjectType();
    sub_100094134((uint64_t *)&unk_10091FD60);
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t ObjectType = sub_1000C51B8(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v6, "Record.type is date but this is not a date trigger {type: %s}", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_9:

    return;
  }
}

void sub_100623C14(void *a1)
{
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    uint64_t v4 = 11;
    uint64_t v5 = (void *)v3;
    id v27 = v1;
    os_log_type_t v6 = &byte_1008B7810;
    while (2)
    {
      int v8 = *v6++;
      switch(v8)
      {
        case 1:
          id v10 = [a1 encryptedValues];
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.getter();
          swift_unknownObjectRelease();
          if (v30)
          {
            v7.super.Class isa = (Class)String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            v7.super.Class isa = 0;
          }
          [v5 setContactLabel:v7.super.isa];
          goto LABEL_5;
        case 2:
          id v11 = [a1 encryptedValues];
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.getter();
          swift_unknownObjectRelease();
          double v12 = v29;
          if ((_BYTE)v30) {
            double v12 = 0.0;
          }
          [v5 setLatitude:v12];
          goto LABEL_6;
        case 3:
          sub_1000963CC(0, (unint64_t *)&qword_100909E80);
          CKRecordKeyValueSetting.subscript.getter();
          if (v30)
          {
            v7.super.Class isa = (Class)String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            v7.super.Class isa = 0;
          }
          [v5 setLocationUID:v7.super.isa];
          goto LABEL_5;
        case 4:
          id v13 = [a1 encryptedValues];
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.getter();
          swift_unknownObjectRelease();
          double v14 = v29;
          if ((_BYTE)v30) {
            double v14 = 0.0;
          }
          [v5 setLongitude:v14];
          goto LABEL_6;
        case 5:
          id v15 = [a1 encryptedValues];
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.getter();
          swift_unknownObjectRelease();
          if (v30 >> 60 == 15)
          {
            v7.super.Class isa = 0;
          }
          else
          {
            v7.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
            sub_100097F20(*(uint64_t *)&v29, v30);
          }
          [v5 setMapKitHandle:v7.super.isa];
          goto LABEL_5;
        case 6:
          sub_1000963CC(0, (unint64_t *)&qword_100909E80);
          CKRecordKeyValueSetting.subscript.getter();
          if (BYTE2(v29)) {
            __int16 v16 = 0;
          }
          else {
            __int16 v16 = LOWORD(v29);
          }
          [v5 setProximity:v16];
          goto LABEL_6;
        case 7:
          sub_1000963CC(0, (unint64_t *)&qword_100909E80);
          CKRecordKeyValueSetting.subscript.getter();
          double v17 = v29;
          if ((_BYTE)v30) {
            double v17 = 0.0;
          }
          [v5 setRadius:v17];
          goto LABEL_6;
        case 8:
          id v18 = [a1 encryptedValues];
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.getter();
          swift_unknownObjectRelease();
          if (v30)
          {
            v7.super.Class isa = (Class)String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            v7.super.Class isa = 0;
          }
          [v5 setReferenceFrameString:v7.super.isa];
          goto LABEL_5;
        case 9:
          id v19 = [a1 encryptedValues];
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.getter();
          swift_unknownObjectRelease();
          if (v30)
          {
            v7.super.Class isa = (Class)String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            v7.super.Class isa = 0;
          }
          [v5 setRouting:v7.super.isa];
          goto LABEL_5;
        case 10:
          id v20 = [a1 encryptedValues];
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.getter();
          swift_unknownObjectRelease();
          if (v30)
          {
            v7.super.Class isa = (Class)String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            v7.super.Class isa = 0;
          }
          [v5 setTitle:v7.super.isa];
          goto LABEL_5;
        default:
          id v9 = [a1 encryptedValues];
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.getter();
          swift_unknownObjectRelease();
          if (v30)
          {
            v7.super.Class isa = (Class)String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            v7.super.Class isa = 0;
          }
          [v5 setAddress:v7.super.isa];
LABEL_5:

LABEL_6:
          if (--v4) {
            continue;
          }

          break;
      }
      break;
    }
  }
  else
  {
    if (qword_100907A68 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_10091FD40);
    id v28 = v1;
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      double v29 = COERCE_DOUBLE(swift_slowAlloc());
      *(_DWORD *)id v24 = 136315138;
      uint64_t ObjectType = swift_getObjectType();
      sub_100094134((uint64_t *)&unk_10091FD60);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t ObjectType = sub_1000C51B8(v25, v26, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Record.type is location but this is not a location trigger {type: %s}", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_10062446C()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    id v3 = v0;
    sub_1000963CC(0, (unint64_t *)&qword_100909E80);
    CKRecordKeyValueSetting.subscript.getter();
    double v4 = v12;
    if (v13) {
      double v4 = 0.0;
    }
    [v2 setTimeInterval:v4];
  }
  else
  {
    if (qword_100907A68 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_10091FD40);
    id v11 = v0;
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = (uint8_t *)swift_slowAlloc();
      double v12 = COERCE_DOUBLE(swift_slowAlloc());
      *(_DWORD *)int v8 = 136315138;
      uint64_t ObjectType = swift_getObjectType();
      sub_100094134((uint64_t *)&unk_10091FD60);
      uint64_t v9 = String.init<A>(describing:)();
      uint64_t ObjectType = sub_1000C51B8(v9, v10, (uint64_t *)&v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Record.type is time interval but this is not a time interval trigger {type: %s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_100624708()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    id v3 = v0;
    sub_1000963CC(0, (unint64_t *)&qword_100909E80);
    CKRecordKeyValueSetting.subscript.getter();
    if (BYTE2(v12)) {
      __int16 v4 = 0;
    }
    else {
      __int16 v4 = v12;
    }
    [v2 setEvent:v4];
  }
  else
  {
    if (qword_100907A68 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_10091FD40);
    id v11 = v0;
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)int v8 = 136315138;
      swift_getObjectType();
      sub_100094134((uint64_t *)&unk_10091FD60);
      uint64_t v9 = String.init<A>(describing:)();
      sub_1000C51B8(v9, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Record.type is vehicle but this is not a vehicle trigger {type: %s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall REMCDAlarmTrigger.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  id v3 = v2;
  NSString v5 = String._bridgeToObjectiveC()();
  v23.receiver = v3;
  v23.super_class = (Class)REMCDAlarmTrigger;
  [super mergeDataFromRecord:from.super.isa accountID:v5];

  id v6 = [(objc_class *)from.super.isa recordID];
  NSString v7 = [v6 recordName];

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v8 = [v3 ckIdentifierFromRecordName:v7];

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setCkIdentifier:v8];

  uint64_t v9 = CKRecord.subscript.getter();
  if (v9 && (uint64_t v22 = v9, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t countAndFlagsBits = v21._countAndFlagsBits;
    object = v21._object;
    swift_bridgeObjectRetain();
    if (sub_1006261C4(v21) != 4)
    {
      swift_bridgeObjectRelease();
      switch(v12)
      {
        case 1:
          sub_100623C14(from.super.isa);
          break;
        case 2:
          sub_10062446C();
          break;
        case 3:
          sub_100624708();
          break;
        default:
          sub_100623958();
          break;
      }
      if (CKRecord.subscript.getter())
      {
        self;
        id v18 = (void *)swift_dynamicCastObjCClass();
        if (!v18) {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        id v18 = 0;
      }
      id v19 = sub_1000C5104(v18);

      if (v19)
      {
        self;
        id v20 = (void *)swift_dynamicCastObjCClass();
        if (!v20) {
      }
        }
      else
      {
        id v20 = 0;
      }
      [v3 setAlarm:v20];

      return;
    }
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = 0;
  }
  if (qword_100907A68 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_10091FD40);
  swift_bridgeObjectRetain();
  double v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    __int16 v16 = (uint8_t *)swift_slowAlloc();
    v21._uint64_t countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)__int16 v16 = 136315138;
    if (object)
    {
      unint64_t v17 = (unint64_t)object;
    }
    else
    {
      uint64_t countAndFlagsBits = 7104878;
      unint64_t v17 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_1000C51B8(countAndFlagsBits, v17, &v21._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "mergeData: Unknown trigger type {type: %s}", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

CKRecord_optional __swiftcall REMCDAlarmTrigger.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  v43.super_class = (Class)REMCDAlarmTrigger;
  id v3 = [super newlyCreatedRecord];
  if (v3)
  {
    id v4 = [v0 alarm];
    if (v4)
    {
      NSString v5 = v4;
      id v6 = [v4 recordID];
    }
    else
    {
      id v6 = 0;
    }
    id v7 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v6];

    CKRecord.subscript.setter();
    self;
    uint64_t v8 = swift_dynamicCastObjCClass();
    if (v8)
    {
      uint64_t v9 = (void *)v8;
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      id v10 = v1;
      CKRecordKeyValueSetting.subscript.setter();
      id v11 = [v9 dateComponentsData];
      if (v11)
      {
        int v12 = v11;
        static Data._unconditionallyBridgeFromObjectiveC(_:)();
      }
LABEL_11:
      CKRecordKeyValueSetting.subscript.setter();

      goto LABEL_27;
    }
    self;
    uint64_t v13 = swift_dynamicCastObjCClass();
    if (!v13)
    {
      self;
      uint64_t v20 = swift_dynamicCastObjCClass();
      if (v20)
      {
        Swift::String v21 = (void *)v20;
        sub_1000963CC(0, (unint64_t *)&qword_100909E80);
        id v10 = v1;
        CKRecordKeyValueSetting.subscript.setter();
        [v21 timeInterval];
      }
      else
      {
        self;
        uint64_t v40 = swift_dynamicCastObjCClass();
        if (!v40) {
          goto LABEL_27;
        }
        id v41 = (void *)v40;
        sub_1000963CC(0, (unint64_t *)&qword_100909E80);
        id v10 = v1;
        CKRecordKeyValueSetting.subscript.setter();
        [v41 event];
      }
      goto LABEL_11;
    }
    double v14 = (void *)v13;
    sub_1000963CC(0, (unint64_t *)&qword_100909E80);
    id v42 = v1;
    CKRecordKeyValueSetting.subscript.setter();
    id v15 = [v3 encryptedValues];
    swift_getObjectType();
    [v14 latitude];
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    id v16 = [v3 encryptedValues];
    swift_getObjectType();
    [v14 longitude];
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    [v14 proximity];
    CKRecordKeyValueSetting.subscript.setter();
    [v14 radius];
    CKRecordKeyValueSetting.subscript.setter();
    id v17 = [v3 encryptedValues];
    id v18 = [v14 title];
    if (v18)
    {
      id v19 = v18;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    id v22 = [v14 locationUID];
    if (v22)
    {
      objc_super v23 = v22;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    CKRecordKeyValueSetting.subscript.setter();
    id v24 = [v3 encryptedValues];
    id v25 = [v14 address];
    if (v25)
    {
      unint64_t v26 = v25;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    id v27 = [v3 encryptedValues];
    id v28 = [v14 routing];
    if (v28)
    {
      double v29 = v28;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    id v30 = [v3 encryptedValues];
    id v31 = [v14 referenceFrameString];
    if (v31)
    {
      id v32 = v31;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    id v33 = [v3 encryptedValues];
    id v34 = [v14 contactLabel];
    if (v34)
    {
      unint64_t v35 = v34;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    id v36 = [v3 encryptedValues];
    id v37 = [v14 mapKitHandle];
    if (v37)
    {
      uint64_t v38 = v37;
      static Data._unconditionallyBridgeFromObjectiveC(_:)();
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();

    swift_unknownObjectRelease();
  }
LABEL_27:
  id v39 = (objc_class *)v3;
  result.value.super.Class isa = v39;
  result.is_nil = v2;
  return result;
}

void __swiftcall REMCDAlarmTrigger.parentCloud()(REMCDObject_optional *__return_ptr retstr)
{
  id v2 = [v1 alarm];

  id v3 = v2;
}

Swift::Void __swiftcall REMCDAlarmTrigger.cleanUpAfterLocalObjectMerge()()
{
  if (qword_100907A68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091FD40);
  id v7 = v0;
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)id v4 = 136315138;
    swift_getObjectType();
    sub_100094134((uint64_t *)&unk_10091FD60);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Void __swiftcall REMCDAlarmTrigger.fixBrokenReferences()()
{
  if (qword_100907A68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091FD40);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &stru_1008F6000;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  uint64_t v6 = swift_slowAlloc();
  uint64_t v43 = swift_slowAlloc();
  *(_DWORD *)uint64_t v6 = 136446466;
  id v7 = [v2 remObjectID];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 description];

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  sub_1000C51B8(v10, v12, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v6 + 12) = 2082;
  id v13 = [v2 alarm];
  if (!v13) {
    goto LABEL_12;
  }
  double v14 = v13;
  id v15 = [v13 remObjectID];
  if (!v15)
  {

LABEL_12:
    unint64_t v20 = 0xE300000000000000;
    uint64_t v5 = &stru_1008F6000;
    uint64_t v21 = 7104878;
    goto LABEL_13;
  }
  id v16 = v15;
  id v17 = [v15 description];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  uint64_t v21 = v18;
  uint64_t v5 = &stru_1008F6000;
LABEL_13:
  sub_1000C51B8(v21, v20, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for alarmTrigger {alarmTriggerID: %{public}s, alarmID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  id v22 = [v2 (SEL)v5[132].imp];
  if (v22)
  {
    objc_super v23 = v22;
    if ([v22 markedForDeletion]
      && ([v2 markedForDeletion] & 1) == 0)
    {
      id v24 = v2;
      id v25 = v23;
      id v26 = v24;
      id v27 = v25;
      id v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446466;
        id v31 = [v26 remObjectID];
        if (v31)
        {
          id v32 = v31;
          id v33 = [v31 description];

          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;
        }
        else
        {
          unint64_t v36 = 0xE300000000000000;
          uint64_t v34 = 7104878;
        }
        sub_1000C51B8(v34, v36, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2082;
        id v37 = [v27 remObjectID];
        if (v37)
        {
          uint64_t v38 = v37;
          id v39 = [v37 description];

          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;
        }
        else
        {
          unint64_t v42 = 0xE300000000000000;
          uint64_t v40 = 7104878;
        }
        sub_1000C51B8(v40, v42, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Alarm is marked for deletion but alarm trigger is not {alarmTriggerID: %{public}s, alarmID: %{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v26 markForDeletion];
    }
    [v23 forcePushToCloud];
  }
}

unint64_t sub_1006261C4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B7770, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t _sSo17REMCDAlarmTriggerC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_100907A68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091FD40);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134((uint64_t *)&unk_10091FD60);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _sSo17REMCDAlarmTriggerC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_100907A68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091FD40);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134((uint64_t *)&unk_10091FD60);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_1006265A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091FD70);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091FD70);
  if (qword_100907800 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942448);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100626694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v24 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v10 - 8);
  uint64_t v28 = v10;
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for REMAnalyticsEvent();
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v15 = __chkstk_darwin(v13);
  id v17 = (uint64_t *)((char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  *id v17 = 0;
  v17[1] = 0xE000000000000000;
  v17[2] = 0;
  v17[3] = 0;
  (*(void (**)(void *, void, uint64_t, __n128))(v14 + 104))(v17, enum case for REMAnalyticsEvent.storeControllerReadWrite(_:), v13, v15);
  if ((REMAnalyticsEvent.isUsed.getter() & 1) == 0) {
    return (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v17, v13);
  }
  uint64_t v23 = *(void *)&v5[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_queue];
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v19 = v24;
  v18[2] = v5;
  v18[3] = v19;
  v18[4] = a2;
  aBlock[4] = v25;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = v26;
  unint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = v5;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v28);
  (*(void (**)(void *, uint64_t))(v14 + 8))(v17, v13);
  return swift_release();
}

uint64_t sub_100626A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (qword_100907A78 != -1) {
    swift_once();
  }
  sub_100626694(v9, v11, a4, a5, a6);

  return swift_bridgeObjectRelease();
}

void sub_100626AD0()
{
  if (qword_1009070E0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100942080;
  uint64_t v1 = (objc_class *)type metadata accessor for RDAsyncAnalytics();
  uint64_t v2 = (char *)objc_allocWithZone(v1);
  *(void *)&v2[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_postEventWorkItem] = 0;
  id v3 = v0;
  os_log_type_t v4 = v2;
  *(void *)&v4[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_fetchCounts] = sub_1002EEC74((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&v4[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_saveCounts] = sub_1002EEC74((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&v4[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_queue] = v3;
  v4[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_enabled] = 1;
  id v5 = v3;

  v7.receiver = v4;
  v7.super_class = v1;
  id v6 = [super init];

  qword_10091FD88 = (uint64_t)v6;
}

void sub_100626BDC()
{
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  objc_super v7 = (char *)v13 - v6;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v8);
  uint64_t v9 = OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_postEventWorkItem;
  if (!*(void *)&v0[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_postEventWorkItem])
  {
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v0;
    aBlock[4] = sub_10062826C;
    aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008CE640;
    v13[1] = _Block_copy(aBlock);
    v13[3] = _swiftEmptyArrayStorage;
    sub_1000D1088();
    _OWORD v13[2] = v0;
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000D10E0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    uint64_t v11 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    *(void *)&v0[v9] = v11;
    swift_retain();
    swift_release();
    static DispatchTime.now()();
    + infix(_:_:)();
    unint64_t v12 = *(void (**)(char *, uint64_t))(v2 + 8);
    v12(v4, v1);
    OS_dispatch_queue.asyncAfter(deadline:execute:)();
    swift_release();
    v12(v7, v1);
  }
}

void sub_100626E94(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  if (v6)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = String.subscript.getter();
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      if (v7 == 58 && v9 == 0xE100000000000000) {
        break;
      }
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0 || 4 * v6 == (unint64_t)String.index(after:)() >> 14) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
  }
LABEL_12:
  String.subscript.getter();
  char v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = static String._fromSubstring(_:)();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = (void **)(a1 + *a4);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *v16;
  id v31 = *v16;
  void *v16 = (void *)0x8000000000000000;
  unint64_t v20 = sub_1001806F8(v13, v15);
  uint64_t v21 = v18[2];
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_22;
  }
  char v12 = v19;
  if (v18[3] >= v23)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    sub_1003171B0(v23, isUniquelyReferenced_nonNull_native);
    unint64_t v24 = sub_1001806F8(v13, v15);
    if ((v12 & 1) != (v25 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    unint64_t v20 = v24;
  }
  while (1)
  {
    void *v16 = v31;
    swift_bridgeObjectRelease();
    uint64_t v26 = *v16;
    if ((v12 & 1) == 0)
    {
      sub_1002C89C8(v20, v13, v15, 0, *v16);
      swift_bridgeObjectRetain();
    }
    uint64_t v27 = v26[7];
    uint64_t v28 = *(void *)(v27 + 8 * v20);
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (!v29) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    sub_10031D5D8();
  }
  *(void *)(v27 + 8 * v20) = v30;
  swift_endAccess();
  swift_bridgeObjectRelease_n();
  sub_100626BDC();
}

uint64_t sub_100627128(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMAnalyticsEvent();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (uint64_t *)((char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t *v6 = 0;
  v6[1] = 0xE000000000000000;
  v6[2] = 0;
  v6[3] = 0;
  uint64_t v7 = *(void (**)(void, __n128))(v3 + 104);
  unsigned int v63 = enum case for REMAnalyticsEvent.storeControllerReadWrite(_:);
  unint64_t v61 = (void (*)(uint64_t *, void, uint64_t))v7;
  uint64_t v62 = v3 + 104;
  v7(v6, v4);
  uint64_t v8 = REMAnalyticsEvent.id.getter();
  int64_t v10 = v9;
  char v11 = *(void (**)(uint64_t *, uint64_t))(v3 + 8);
  Swift::String v64 = v6;
  uint64_t v65 = v3 + 8;
  uint64_t v66 = v2;
  uint64_t v60 = v11;
  v11(v6, v2);
  String.utf8CString.getter();
  uint64_t v57 = os_transaction_create();
  swift_release();
  if (qword_100907A70 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v12 = type metadata accessor for Logger();
    uint64_t v13 = sub_10008E2DC(v12, (uint64_t)qword_10091FD70);
    swift_bridgeObjectRetain_n();
    v54[1] = v13;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    unint64_t v56 = v10;
    v54[0] = v8;
    if (v16)
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)id v17 = 136315138;
      swift_bridgeObjectRetain();
      v69[3] = sub_1000C51B8(v8, v10, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "os_transaction INIT {name: %s}", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v18 = a1 + OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_fetchCounts;
    swift_beginAccess();
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v20 = sub_1001261C0(v19);
    uint64_t v55 = a1;
    uint64_t v21 = a1 + OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_saveCounts;
    swift_beginAccess();
    uint64_t v22 = swift_bridgeObjectRetain();
    uint64_t v23 = sub_10065D888(v22, v20);
    uint64_t v24 = v23;
    int64_t v10 = 0;
    a1 = v23 + 56;
    uint64_t v25 = 1 << *(unsigned char *)(v23 + 32);
    uint64_t v26 = -1;
    if (v25 < 64) {
      uint64_t v26 = ~(-1 << v25);
    }
    uint64_t v8 = v26 & *(void *)(v23 + 56);
    int64_t v67 = (unint64_t)(v25 + 63) >> 6;
    uint64_t v58 = v23;
    uint64_t v59 = v18;
    if (v8)
    {
      while (1)
      {
        unint64_t v27 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v28 = v27 | (v10 << 6);
LABEL_26:
        id v32 = (uint64_t *)(*(void *)(v24 + 48) + 16 * v28);
        uint64_t v33 = *v32;
        uint64_t v34 = v32[1];
        swift_beginAccess();
        uint64_t v35 = *(void *)v21;
        uint64_t v36 = *(void *)(*(void *)v21 + 16);
        swift_bridgeObjectRetain();
        if (!v36) {
          goto LABEL_10;
        }
        unint64_t v37 = sub_1001806F8(v33, v34);
        if ((v38 & 1) == 0) {
          goto LABEL_10;
        }
        uint64_t v39 = *(void *)(*(void *)(v35 + 56) + 8 * v37);
        swift_endAccess();
        swift_beginAccess();
        uint64_t v40 = *(void *)v18;
        if (!*(void *)(*(void *)v18 + 16)) {
          goto LABEL_10;
        }
        swift_bridgeObjectRetain();
        unint64_t v41 = sub_1001806F8(v33, v34);
        if (v42)
        {
          uint64_t v43 = *(void *)(*(void *)(v40 + 56) + 8 * v41);
          swift_endAccess();
          swift_bridgeObjectRelease();
          type metadata accessor for Analytics();
          uint64_t v44 = a1;
          id v45 = v64;
          *Swift::String v64 = v33;
          v45[1] = v34;
          v45[2] = v39;
          v45[3] = v43;
          uint64_t v46 = v66;
          v61(v45, v63, v66);
          static Analytics.postEvent(_:)();
          char v47 = v45;
          a1 = v44;
          uint64_t v48 = v46;
          uint64_t v24 = v58;
          uint64_t v18 = v59;
          v60(v47, v48);
          if (!v8) {
            break;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_10:
          swift_endAccess();
          swift_bridgeObjectRelease();
          if (!v8) {
            break;
          }
        }
      }
    }
    int64_t v29 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v29 >= v67) {
      break;
    }
    unint64_t v30 = *(void *)(a1 + 8 * v29);
    ++v10;
    if (v30) {
      goto LABEL_25;
    }
    int64_t v10 = v29 + 1;
    if (v29 + 1 >= v67) {
      break;
    }
    unint64_t v30 = *(void *)(a1 + 8 * v10);
    if (v30) {
      goto LABEL_25;
    }
    int64_t v10 = v29 + 2;
    if (v29 + 2 >= v67) {
      break;
    }
    unint64_t v30 = *(void *)(a1 + 8 * v10);
    if (v30) {
      goto LABEL_25;
    }
    int64_t v31 = v29 + 3;
    if (v31 >= v67) {
      break;
    }
    unint64_t v30 = *(void *)(a1 + 8 * v31);
    if (v30)
    {
      int64_t v10 = v31;
LABEL_25:
      uint64_t v8 = (v30 - 1) & v30;
      unint64_t v28 = __clz(__rbit64(v30)) + (v10 << 6);
      goto LABEL_26;
    }
    while (1)
    {
      int64_t v10 = v31 + 1;
      if (__OFADD__(v31, 1)) {
        break;
      }
      if (v10 >= v67) {
        goto LABEL_32;
      }
      unint64_t v30 = *(void *)(a1 + 8 * v10);
      ++v31;
      if (v30) {
        goto LABEL_25;
      }
    }
LABEL_36:
    __break(1u);
  }
LABEL_32:
  swift_release();
  *(void *)uint64_t v21 = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v18 = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  *(void *)(v55 + OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_postEventWorkItem) = 0;
  swift_release();
  unint64_t v49 = v56;
  swift_bridgeObjectRetain();
  unint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_1000C51B8(v54[0], v49, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "os_transaction RELEASE {name: %s}", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100627818(_OWORD *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = (_OWORD *)swift_allocObject();
  long long v11 = a1[3];
  v10[3] = a1[2];
  v10[4] = v11;
  long long v12 = a1[5];
  v10[5] = a1[4];
  void v10[6] = v12;
  long long v13 = a1[1];
  v10[1] = *a1;
  v10[2] = v13;
  aBlock[4] = sub_1006281AC;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008CE5A0;
  uint64_t v14 = _Block_copy(aBlock);
  sub_1006281CC((uint64_t)a1);
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

void sub_100627A9C(uint64_t a1)
{
  sub_100627AF4(a1);
}

uint64_t sub_100627AF4(uint64_t a1)
{
  v25[0] = type metadata accessor for REMAnalyticsEvent();
  uint64_t v2 = *(void *)(v25[0] - 8);
  __chkstk_darwin(v25[0]);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_100914A70);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100776E40;
  *(void *)(v5 + 32) = NLTagSchemeLexicalClass;
  id v6 = objc_allocWithZone((Class)NLTagger);
  type metadata accessor for NLTagScheme(0);
  uint64_t v7 = NLTagSchemeLexicalClass;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithTagSchemes:isa];

  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setString:v10];

  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v11 = String.count.getter();
  v25[4] = &v31;
  v25[5] = &v30;
  v25[6] = &v29;
  v25[7] = &v28;
  v25[8] = &v27;
  NLTagger.enumerateTags(in:unit:scheme:options:using:)();
  uint64_t v12 = v29;
  uint64_t v13 = v31;
  uint64_t v15 = v27;
  uint64_t v14 = v28;
  uint64_t v16 = *(void *)(a1 + 48);
  char v17 = *(unsigned char *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  char v20 = *(unsigned char *)(a1 + 16);
  char v21 = *(unsigned char *)(a1 + 40);
  char v22 = *(unsigned char *)(a1 + 73);
  char v26 = *(unsigned char *)(a1 + 72);
  char v19 = v26;
  *(void *)uint64_t v4 = v30;
  *((void *)v4 + 1) = v13;
  *((void *)v4 + 2) = v12;
  *((void *)v4 + 3) = v14;
  *((void *)v4 + 4) = v15;
  *((void *)v4 + 5) = v16;
  v4[48] = v17;
  *((void *)v4 + 7) = v18;
  v4[64] = v19;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a1 + 80);
  v4[88] = v20;
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a1 + 24);
  v4[112] = v21;
  v4[113] = v22;
  *((void *)v4 + 15) = v11;
  uint64_t v23 = v25[0];
  (*(void (**)(char *, void, void))(v2 + 104))(v4, enum case for REMAnalyticsEvent.reminderIngestorMerged(_:), v25[0]);
  type metadata accessor for REMAnalyticsManager();
  static REMAnalyticsManager.shared.getter();
  REMAnalyticsManager.post(event:)();

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v23);
}

void sub_100627DE8(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (a1)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
    {
      id v31 = a1;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      id v20 = a1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;
        if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v26 & 1) == 0)
          {
            uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v29 = v28;
            if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
            {
              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v33 & 1) == 0)
              {
                uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v36 = v35;
                if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v36 == v37)
                {
                  id v38 = v20;

                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  id v40 = v20;

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v39 & 1) == 0)
                  {
                    uint64_t v32 = *a8 + 1;
                    if (!__OFADD__(*a8, 1))
                    {
                      a4 = a8;
                      goto LABEL_17;
                    }
LABEL_37:
                    __break(1u);
                    return;
                  }
                }
                uint64_t v32 = *a7 + 1;
                if (!__OFADD__(*a7, 1))
                {
                  a4 = a7;
                  goto LABEL_17;
                }
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
            }

            uint64_t v32 = *a6 + 1;
            if (!__OFADD__(*a6, 1))
            {
              a4 = a6;
              goto LABEL_17;
            }
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
        }

        uint64_t v32 = *a5 + 1;
        if (!__OFADD__(*a5, 1))
        {
          a4 = a5;
          goto LABEL_17;
        }
        goto LABEL_34;
      }
    }

    uint64_t v32 = *a4 + 1;
    if (!__OFADD__(*a4, 1))
    {
LABEL_17:
      *a4 = v32;
      return;
    }
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
}

uint64_t type metadata accessor for RDAsyncAnalytics()
{
  return self;
}

uint64_t sub_100628174()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 112, 7);
}

void sub_1006281AC()
{
  sub_100627A9C(v0 + 16);
}

uint64_t sub_1006281B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1006281C4()
{
  return swift_release();
}

uint64_t sub_1006281CC(uint64_t a1)
{
  return a1;
}

void sub_1006281F8(void *a1, uint64_t a2, uint64_t a3)
{
  sub_100627DE8(a1, a2, a3, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

void sub_10062820C()
{
  sub_100626E94(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), &OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_saveCounts);
}

uint64_t sub_100628234()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10062826C()
{
  return sub_100627128(*(void *)(v0 + 16));
}

uint64_t sub_100628278()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1006282B8()
{
  sub_100626E94(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), &OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_fetchCounts);
}

void sub_1006282F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090A4B0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v9 = *(void **)(v1 + 16);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v12 = OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_started;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_started))
  {
    if (qword_100907A80 == -1)
    {
LABEL_4:
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_10091FDE0);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Started RDSuggestedAttributesAutoTrainer more than once", v16, 2u);
        swift_slowDealloc();
      }

      return;
    }
LABEL_13:
    swift_once();
    goto LABEL_4;
  }
  if (qword_100907A80 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_10091FDE0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Starting RDSuggestedAttributesAutoTrainer", v20, 2u);
    swift_slowDealloc();
  }

  *(unsigned char *)(v1 + v12) = 1;
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = v10;
  v22[3] = sub_10062BAC8;
  v22[4] = v21;
  type metadata accessor for RDDynamicXPCActivity();
  swift_allocObject();
  id v23 = v10;
  *(void *)(v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_xpcActivity) = sub_100597404(0, (uint64_t)sub_1000960FC, (uint64_t)v22);
  swift_release();
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  id v25 = [self cdEntityName];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  *(void *)(inited + 32) = v26;
  *(void *)(inited + 40) = v28;
  Swift::Int v29 = sub_10032D9A0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v30 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_100401C48(v29, v23, (uint64_t)sub_10062BB24, v30, (uint64_t)v4);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v31 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v4, 0, 1, v31);
  uint64_t v32 = v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_storeControllerObserverToken;
  swift_beginAccess();
  sub_1000B1CB4((uint64_t)v4, v32, (uint64_t *)&unk_10090A4B0);
  swift_endAccess();
  sub_10062AC5C(0);
}

uint64_t sub_100628808()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091FDE0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091FDE0);
  if (qword_1009077E8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942400);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1006288D0()
{
  id result = [self suggestedAttributes];
  qword_10091FDF8 = (uint64_t)result;
  return result;
}

uint64_t sub_10062890C@<X0>(uint64_t a1@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (uint64_t)&v1[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity____lazy_storage___throttlingPolicy];
  swift_beginAccess();
  sub_1000BF710(v4, (uint64_t)&v14, (uint64_t *)&unk_100910DC0);
  if (!v15)
  {
    sub_1000966BC((uint64_t)&v14, (uint64_t *)&unk_100910DC0);
    uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_configs + 24];
    uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_configs + 32];
    sub_1000C0DE0(&v1[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_configs], v5);
    uint64_t v7 = *(double (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v8 = v1;
    double v9 = v7(v5, v6);
    uint64_t v15 = ObjectType;
    uint64_t v16 = &off_1008CE758;
    *(void *)&long long v14 = v8;
    uint64_t v10 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
    uint64_t v11 = swift_allocObject();
    sub_1000967D4(&v14, v11 + 16);
    *(double *)(v11 + 56) = v9;
    uint64_t v15 = v10;
    uint64_t v16 = &off_1008C8B10;
    *(void *)&long long v14 = v11;
    sub_100096838((uint64_t)&v14, (uint64_t)v13);
    swift_beginAccess();
    sub_1000B1CB4((uint64_t)v13, v4, (uint64_t *)&unk_100910DC0);
    swift_endAccess();
  }
  return sub_1000967D4(&v14, a1);
}

unint64_t sub_100628A90()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_identifier);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_identifier + 8);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x746973796261622ELL;
  v4._object = (void *)0xEB00000000726574;
  String.append(_:)(v4);
  return 0xD000000000000012;
}

uint64_t sub_100628BB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100096838(a1, (uint64_t)v19);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDSuggestedAttributesAutoTrainingActivity();
  if (swift_dynamicCast())
  {

    uint64_t v5 = *(void *)(v2 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 32);
    swift_unknownObjectRetain();
    v7(ObjectType, v5);
    swift_unknownObjectRelease();
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v19);
  }
  else
  {
    if (qword_100907A80 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10091FDE0);
    sub_100096838(a1, (uint64_t)v18);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      sub_100096838((uint64_t)v18, (uint64_t)v16);
      uint64_t v13 = String.init<A>(describing:)();
      v16[0] = sub_1000C51B8(v13, v14, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDSuggestedAttributesAutoTrainingExecutionDateStorage.lastExecutedDate(for:) must work with RDSuggestedAttributesAutoTrainingActivity only {executable: %{public}s}", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v19);
    uint64_t v15 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
}

uint64_t sub_100628E48(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100096838(a1, (uint64_t)v23);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDSuggestedAttributesAutoTrainingActivity();
  if (swift_dynamicCast())
  {

    uint64_t v8 = *(void *)(v2 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, a2, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 40);
    swift_unknownObjectRetain();
    v12(v7, ObjectType, v8);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100907A80 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_10091FDE0);
    sub_100096838(a1, (uint64_t)v22);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446210;
      sub_100096838((uint64_t)v22, (uint64_t)v20);
      uint64_t v17 = String.init<A>(describing:)();
      v20[0] = sub_1000C51B8(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDSuggestedAttributesAutoTrainingExecutionDateStorage.updateLastExecutedDate(for:) must work with RDSuggestedAttributesAutoTrainingActivity only {executable: %{public}s}", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
    }
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);
}

uint64_t sub_10062914C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100628BB8(a1, a2);
}

uint64_t sub_100629170(uint64_t a1, uint64_t a2)
{
  return sub_100628E48(a1, a2);
}

uint64_t sub_100629274@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BF710(v1 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_babysitter, a1, (uint64_t *)&unk_10090E4D0);
}

uint64_t sub_1006292A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10062890C(a1);
}

uint64_t sub_1006292C8()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100629308@<X0>(uint64_t a1@<X8>)
{
  return sub_100096838(*v1 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_executionDateStorage, a1);
}

uint64_t sub_100629334()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_executable);
  v3[4] = &off_1008CE700;
  v3[5] = &off_1008CE710;
  v3[3] = type metadata accessor for RDSuggestedAttributesAutoTrainer.RDSuggestedAttributesAutoTrainingActivityExecutable();
  v3[0] = v1;
  swift_retain();
  sub_100424FC0(v3);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v3);
}

uint64_t sub_1006293B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090A4B0);
  __chkstk_darwin(v2 - 8);
  Swift::String v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v18 - v6;
  uint64_t v8 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_storeControllerObserverToken;
  swift_beginAccess();
  sub_1000BF710(v12, (uint64_t)v7, (uint64_t *)&unk_10090A4B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_10090A4B0);
LABEL_5:

    swift_release();
    swift_unknownObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v1 + 56);
    sub_1000966BC(v12, (uint64_t *)&unk_10090A4B0);
    swift_release();
    return v1;
  }
  sub_1000E5318((uint64_t)v7, (uint64_t)v11);
  uint64_t v13 = *(void *)(v1 + 24);
  unint64_t v14 = *(os_unfair_lock_s **)(v13 + 40);
  os_unfair_lock_lock(v14);
  v18[0] = v18;
  __chkstk_darwin(v15);
  v18[-2] = v11;
  swift_beginAccess();
  uint64_t result = sub_1001EC244((uint64_t (*)(unint64_t))sub_1000E537C);
  uint64_t v17 = *(void *)(*(void *)(v13 + 48) + 16);
  if (v17 >= result)
  {
    sub_1001ECEB0(result, v17);
    swift_endAccess();
    os_unfair_lock_unlock(v14);
    sub_100094178((uint64_t)v11);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, 1, 1, v8);
    swift_beginAccess();
    sub_1000B1CB4((uint64_t)v4, v12, (uint64_t *)&unk_10090A4B0);
    swift_endAccess();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1006296A4()
{
  sub_1006293B8();

  return swift_deallocClassInstance();
}

uint64_t sub_1006296FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100907A88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  if (qword_100907A80 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_10091FDE0);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDSuggestedAttributesAutoTrainingActivityExecutable: execute now", v10, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(void))(v1 + 32))();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_100629964()
{
  return sub_1006296FC();
}

void sub_100629988()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v39 - v6;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = Strong;
    if (qword_100907A80 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    uint64_t v43 = sub_10008E2DC(v10, (uint64_t)qword_10091FDE0);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDSuggestedAttributesAutoTrainer XPC activity called back to run", v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v14 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for RDSuggestedAttributesAutoTrainer.RDSuggestedAttributesAutoTrainingActivityExecutable();
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = 0xD000000000000027;
    v15[3] = 0x80000001007DA9A0;
    v15[4] = sub_10062BE50;
    v15[5] = v14;
    uint64_t v17 = *(void *)(v9 + 40);
    uint64_t v16 = *(void *)(v9 + 48);
    sub_100096838(v9 + 56, (uint64_t)v47);
    unint64_t v18 = self;
    swift_retain();
    swift_unknownObjectRetain();
    id v19 = [v18 sharedBabysitter];
    if (v19)
    {
      id v20 = v19;
      *((void *)&v45 + 1) = sub_1000963CC(0, (unint64_t *)&qword_10090F1A8);
      uint64_t v46 = &off_1008C85D8;
      *(void *)&long long v44 = v20;
    }
    else
    {
      uint64_t v46 = 0;
      long long v44 = 0u;
      long long v45 = 0u;
    }
    uint64_t v21 = (objc_class *)type metadata accessor for RDSuggestedAttributesAutoTrainingActivity();
    id v22 = objc_allocWithZone(v21);
    id v23 = sub_10062BE6C((uint64_t)v15, v17, v16, (uint64_t)v47, (uint64_t)&v44);
    swift_release();
    swift_unknownObjectRelease();
    v47[3] = (uint64_t)v21;
    v47[4] = (uint64_t)&off_1008CE778;
    v47[0] = (uint64_t)v23;
    id v24 = v23;
    sub_10062BB44(v47);
    if (v1)
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v47);
      swift_getErrorValue();
      if (Error.isREMError(withErrorCode:)())
      {
        uint64_t v41 = v2;
        id v42 = v24;
        uint64_t v25 = *(void *)(v9 + 48);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v25 + 32);
        swift_unknownObjectRetain();
        v27(ObjectType, v25);
        swift_unknownObjectRelease();
        sub_1000BF710((uint64_t)v7, (uint64_t)v5, (uint64_t *)&unk_100909A40);
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          uint64_t v40 = swift_slowAlloc();
          v47[0] = v40;
          uint64_t v43 = (uint64_t)v7;
          *(_DWORD *)uint64_t v30 = 136446210;
          char v39 = v30 + 4;
          uint64_t v31 = Optional.descriptionOrNil.getter();
          *(void *)&long long v44 = sub_1000C51B8(v31, v32, v47);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909A40);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "RDSuggestedAttributesAutoTrainer TRAIN THROTTLED, skipping {lastExecuted: %{public}s}", v30, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          swift_release();
          swift_release();

          uint64_t v33 = v43;
        }
        else
        {

          sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909A40);
          swift_errorRelease();
          swift_release();
          swift_release();

          uint64_t v33 = (uint64_t)v7;
        }
        sub_1000966BC(v33, (uint64_t *)&unk_100909A40);
      }
      else
      {
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          v47[0] = swift_slowAlloc();
          id v42 = v24;
          *(_DWORD *)uint64_t v36 = 136315138;
          uint64_t v43 = (uint64_t)(v36 + 4);
          swift_getErrorValue();
          uint64_t v37 = Error.rem_errorDescription.getter();
          *(void *)&long long v44 = sub_1000C51B8(v37, v38, v47);
          id v24 = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "RDSuggestedAttributesAutoTrainer TRAIN ERROR: (%s", v36, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        swift_willThrow();
        swift_release();
        swift_release();
      }
    }
    else
    {

      swift_release();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v47);
      swift_release();
    }
  }
}

uint64_t sub_10062A054()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10062A0BC();
    return swift_release();
  }
  return result;
}

void sub_10062A0BC()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for REMSuggestedAttributesTrainer.Result();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v74 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  NSString v80 = (char *)&v68 - v7;
  uint64_t v79 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters();
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v82 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters.AnchoredBubble();
  uint64_t v9 = *(void *)(v85 - 8);
  uint64_t v10 = __chkstk_darwin(v85);
  uint64_t v77 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v89 = (char *)&v68 - v12;
  uint64_t v93 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters.IntentionalWord();
  uint64_t v84 = *(void *)(v93 - 8);
  uint64_t v13 = __chkstk_darwin(v93);
  BOOL v76 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v88 = (char *)&v68 - v15;
  uint64_t v16 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters.Embedding();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  id v75 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v87 = (char *)&v68 - v20;
  uint64_t v21 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters.CoreBehavior();
  uint64_t v90 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  id v24 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v86 = (char *)&v68 - v25;
  if (qword_100907A80 != -1) {
    swift_once();
  }
  uint64_t v91 = v21;
  uint64_t v92 = v16;
  uint64_t v83 = v17;
  uint64_t v81 = v9;
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v73 = sub_10008E2DC(v26, (uint64_t)qword_10091FDE0);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDSuggestedAttributesAutoTrainer TRAIN START", v29, 2u);
    swift_slowDealloc();
  }

  uint64_t v30 = v2[6];
  uint64_t v31 = *(void **)(v2[3] + 16);
  v96[0] = 0xD000000000000020;
  v96[1] = 0x8000000100795310;
  memset(&v96[2], 0, 30);
  id v32 = v31;
  sub_1003BBBE0((uint64_t)v96, (uint64_t)sub_10062B588, 0);
  uint64_t v34 = v33;

  if (!v1)
  {
    id v95 = 0;
    id v35 = [v34 dataRepresentationWithError:&v95];

    id v36 = v95;
    if (v35)
    {
      uint64_t v69 = v4;
      uint64_t v70 = v3;
      uint64_t ObjectType = swift_getObjectType();
      id v38 = v36;
      uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 16))(v39, v41, ObjectType, v30);
      id v71 = [objc_allocWithZone((Class)REMSuggestedAttributesPerformer) initWithQueue:v2[2] store:v2[4]];
      id v42 = v86;
      REMSuggestedAttributesTrainer.Parameters.CoreBehavior.init(isEnabled:support:adjustment:confidence:validationRelativeSupport:validationConfidence:feedbackResetVersion:feedbackExpirationWindow:)();
      uint64_t v43 = v87;
      REMSuggestedAttributesTrainer.Parameters.Embedding.init(isEnabled:neighborsToConsider:)();
      long long v44 = v24;
      long long v45 = v88;
      REMSuggestedAttributesTrainer.Parameters.IntentionalWord.init(isEnabled:k:)();
      uint64_t v46 = v89;
      REMSuggestedAttributesTrainer.Parameters.AnchoredBubble.init(enabledOniOS:enabledOnmacOS:defaultWordDistanceScale:overrideLocalWordDistanceScale:)();
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v44, v42, v91);
      uint64_t v47 = v83;
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v75, v43, v92);
      uint64_t v48 = v81;
      unint64_t v49 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
      uint64_t v72 = 0;
      uint64_t v50 = v85;
      v49(v77, v46, v85);
      uint64_t v51 = v84;
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v76, v45, v93);
      id v52 = v71;
      uint64_t v53 = v82;
      REMSuggestedAttributesTrainer.Parameters.init(enabledOnmacOS:enabledOniOS:maxSampleCount:minimumSampleCount:validationSetProportion:shouldSaveModel:allowLocalOverrides:allowCloudOverrides:randomSeed:coreBehavior:embedding:anchoredBubble:intentionalWord:)();
      type metadata accessor for REMSuggestedAttributesTrainer();
      unint64_t v54 = v80;
      uint64_t v55 = v72;
      static REMSuggestedAttributesTrainer.train(in:parameters:)();
      uint64_t v72 = v55;
      if (v55)
      {

        (*(void (**)(char *, uint64_t))(v78 + 8))(v53, v79);
        (*(void (**)(char *, uint64_t))(v48 + 8))(v89, v50);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v88, v93);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v87, v92);
      }
      else
      {
        uint64_t v57 = v69;
        uint64_t v58 = v74;
        uint64_t v59 = v70;
        (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v74, v54, v70);
        uint64_t v60 = Logger.logObject.getter();
        unint64_t v61 = v54;
        os_log_type_t v62 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v60, v62))
        {
          unsigned int v63 = (uint8_t *)swift_slowAlloc();
          id v95 = (id)swift_slowAlloc();
          *(_DWORD *)unsigned int v63 = 136446210;
          uint64_t v77 = (char *)(v63 + 4);
          uint64_t v64 = REMSuggestedAttributesTrainer.Result.shortDescription.getter();
          uint64_t v94 = sub_1000C51B8(v64, v65, (uint64_t *)&v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v66 = *(void (**)(char *, uint64_t))(v57 + 8);
          v66(v58, v59);
          _os_log_impl((void *)&_mh_execute_header, v60, v62, "RDSuggestedAttributesAutoTrainer TRAIN END {results: %{public}s}", v63, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v66(v80, v59);
          (*(void (**)(char *, uint64_t))(v78 + 8))(v82, v79);
          (*(void (**)(char *, uint64_t))(v81 + 8))(v89, v85);
        }
        else
        {

          int64_t v67 = *(void (**)(char *, uint64_t))(v57 + 8);
          v67(v58, v59);
          v67(v61, v59);
          (*(void (**)(char *, uint64_t))(v78 + 8))(v82, v79);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v89, v85);
        }
        (*(void (**)(char *, uint64_t))(v84 + 8))(v88, v93);
        (*(void (**)(char *, uint64_t))(v83 + 8))(v87, v92);
      }
      (*(void (**)(char *, uint64_t))(v90 + 8))(v86, v91);
    }
    else
    {
      id v56 = v95;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

uint64_t sub_10062AC00()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10062AC5C(1);
    return swift_release();
  }
  return result;
}

void sub_10062AC5C(char a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_xpcActivity);
  if (v2)
  {
    *(void *)&long long v19 = *(void *)(v2 + 120);
    type metadata accessor for UnfairLock();
    swift_retain();
    swift_retain();
    Lock.sync<A>(_:)();
    swift_release();
    if (v18)
    {
LABEL_28:
      swift_release();
      return;
    }
    if (a1 & 1) != 0 || (sub_10062B078())
    {
      double v4 = sub_10062B398();
      if (v4 + 60.0 > 0.0) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = 512;
      }
      if (v4 + 60.0 <= 0.0) {
        double v6 = 0.0;
      }
      else {
        double v6 = v4 + 60.0;
      }
      *(void *)&long long v19 = 0;
      *((void *)&v19 + 1) = v5;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      double v20 = v6;
      BOOL v23 = v4 + 60.0 > 0.0;
      int v24 = 33685504;
      uint64_t v25 = 0x404E000000000000;
      char v26 = 0;
      uint64_t v27 = 0x102020200010101;
      __int16 v28 = 1792;
      Swift::Int v29 = sub_100332130((uint64_t)&off_1008B7588);
      sub_100595B1C(&v19);
      swift_bridgeObjectRelease();
      if (qword_100907A80 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10008E2DC(v7, (uint64_t)qword_10091FDE0);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v8, v9)) {
        goto LABEL_27;
      }
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 67109376;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 8) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDSuggestedAttributesAutoTrainer scheduled {isDatabaseDirty: true, assumeDatabaseDirty: %{BOOL}d, delay: %f}", (uint8_t *)v10, 0x12u);
    }
    else
    {
      if (qword_100907A80 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10008E2DC(v14, (uint64_t)qword_10091FDE0);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v8, v15)) {
        goto LABEL_27;
      }
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 67109120;
      LODWORD(v19) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v15, "RDSuggestedAttributesAutoTrainer schedule skipped {isDatabaseDirty: false, assumeDatabaseDirty: %{BOOL}d}", v16, 8u);
    }
    swift_slowDealloc();
LABEL_27:

    goto LABEL_28;
  }
  if (qword_100907A80 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_10091FDE0);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(oslog, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Scheduling XPCActivity before start()", v13, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10062B078()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  if (v4 >> 60 == 15)
  {
    char v5 = 1;
  }
  else
  {
    uint64_t v6 = v3;
    unint64_t v7 = v4;
    sub_1000963CC(0, &qword_1009193E0);
    id v8 = sub_10062BD84();
    os_log_type_t v9 = *(void **)(*(void *)(v0 + 24) + 16);
    v14[0] = 0xD000000000000020;
    v14[1] = 0x8000000100795310;
    uint64_t v14[3] = 0;
    v15[0] = 0;
    v14[2] = 0;
    *(void *)((char *)v15 + 6) = 0;
    id v10 = v9;
    sub_1003BBBE0((uint64_t)v14, (uint64_t)sub_10062B588, 0);
    os_log_type_t v12 = v11;

    LOBYTE(v10) = static NSObject.== infix(_:_:)();
    sub_100097F20(v6, v7);

    char v5 = v10 ^ 1;
  }
  return v5 & 1;
}

double sub_10062B398()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)&v19 - v9;
  uint64_t v11 = v0[10];
  uint64_t v12 = v0[11];
  sub_1000C0DE0(v0 + 7, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  uint64_t v13 = v0[6];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(ObjectType, v13);
  Optional<A>.orDistantPast.getter();
  sub_1000966BC((uint64_t)v3, (uint64_t *)&unk_100909A40);
  Date.addingTimeInterval(_:)();
  Date.timeIntervalSinceNow.getter();
  double v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  return v16;
}

id sub_10062B588@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v7 = 0;
  id v3 = [a1 latestFetchResultTokenWithError:&v7];
  id v4 = v7;
  if (v3)
  {
    *a2 = v3;
    return v4;
  }
  else
  {
    id v6 = v7;
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
}

uint64_t sub_10062B63C()
{
  id v1 = [v0 lastSuggestedAttributesAutoTrainingToken];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_10062B6A4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
    [v2 setLastSuggestedAttributesAutoTrainingToken:0];
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F20(a1, a2);
    [v2 setLastSuggestedAttributesAutoTrainingToken:isa];
  }
}

uint64_t sub_10062B728@<X0>(uint64_t a1@<X8>)
{
  id v3 = [v1 lastSuggestedAttributesAutoTrainingExecutionDate];
  if (v3)
  {
    id v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_10062B7F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  Class v7 = 0;
  if (v6 != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    Class v7 = isa;
  }
  Class v9 = v7;
  [v2 setLastSuggestedAttributesAutoTrainingExecutionDate:];
}

id sub_10062B8E8()
{
  return [*v0 suggestedAttributesAutoTrainingThrottleInterval];
}

uint64_t type metadata accessor for RDSuggestedAttributesAutoTrainingActivity()
{
  return self;
}

uint64_t type metadata accessor for RDSuggestedAttributesAutoTrainingActivity.RDSuggestedAttributesAutoTrainingExecutionDateStorage()
{
  return self;
}

uint64_t sub_10062B940()
{
  return type metadata accessor for RDSuggestedAttributesAutoTrainer();
}

uint64_t type metadata accessor for RDSuggestedAttributesAutoTrainer()
{
  uint64_t result = qword_10091FF68;
  if (!qword_10091FF68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10062B994()
{
  sub_1000DF350();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for RDSuggestedAttributesAutoTrainer.RDSuggestedAttributesAutoTrainingActivityExecutable()
{
  return self;
}

uint64_t sub_10062BA90()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10062BAC8()
{
}

uint64_t sub_10062BAE4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10062BB24()
{
  return sub_10062AC00();
}

uint64_t sub_10062BB2C(void *a1)
{
  return sub_10062BB44(a1);
}

uint64_t sub_10062BB44(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_1000C0DE0(a1, v7);
  if (sub_100440868(v7, v8))
  {
    Class v9 = self;
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    sub_1000C0DE0(a1, v10);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 16))(v22, v10, v11);
    sub_1000C0DE0(v22, v22[3]);
    sub_1005086DC((uint64_t)v6);
    Date.timeIntervalSinceNow.getter();
    double v13 = v12;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    [v9 throttledErrorWithRemainingTimeInterval:v13];
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
    return swift_willThrow();
  }
  else
  {
    uint64_t v15 = a1[3];
    uint64_t v16 = a1[4];
    sub_1000C0DE0(a1, v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
    uint64_t v18 = a1[3];
    uint64_t v17 = a1[4];
    sub_1000C0DE0(a1, v18);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + 8) + 8))(v18);
    if (!v1)
    {
      uint64_t v19 = a1[3];
      uint64_t v20 = a1[4];
      sub_1000C0DE0(a1, v19);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
    }
  }
  return result;
}

id sub_10062BD84()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v5 = 0;
  id v1 = [(id)swift_getObjCClassFromMetadata() fetchResultTokenFromDataRepresentation:isa error:&v5];

  if (v1)
  {
    id v2 = v5;
  }
  else
  {
    id v3 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

uint64_t sub_10062BE50()
{
  return sub_10062A054();
}

id sub_10062BE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = v5;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  double v13 = (uint64_t *)&v6[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_identifier];
  int v24 = ObjectType;
  uint64_t v14 = v6;
  sub_100094134((uint64_t *)&unk_100920100);
  *double v13 = String.init<A>(reflecting:)();
  v13[1] = v15;
  uint64_t v16 = &v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity____lazy_storage___throttlingPolicy];
  *(_OWORD *)uint64_t v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((void *)v16 + 4) = 0;
  *(void *)&v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_executable] = a1;
  uint64_t v17 = &v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_states];
  *(void *)uint64_t v17 = a2;
  *((void *)v17 + 1) = a3;
  sub_100096838(a4, (uint64_t)&v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_configs]);
  sub_1000BF710(a5, (uint64_t)&v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_babysitter], (uint64_t *)&unk_10090E4D0);
  uint64_t v18 = type metadata accessor for RDSuggestedAttributesAutoTrainingActivity.RDSuggestedAttributesAutoTrainingExecutionDateStorage();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  uint64_t v20 = (uint64_t *)&v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_executionDateStorage];
  v20[3] = v18;
  v20[4] = (uint64_t)&off_1008CE730;
  *uint64_t v20 = v19;
  swift_unknownObjectRetain_n();
  swift_retain();

  v23.receiver = v14;
  v23.super_class = ObjectType;
  id v21 = [super init];
  sub_1000966BC(a5, (uint64_t *)&unk_10090E4D0);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a4);
  return v21;
}

uint64_t sub_10062BFF0@<X0>(uint64_t a1@<X8>)
{
  return sub_10062C030((SEL *)&selRef_recencyDate, (void (*)(uint64_t))&static Date.distantPast.getter, a1);
}

uint64_t sub_10062C010@<X0>(uint64_t a1@<X8>)
{
  return sub_10062C030((SEL *)&selRef_firstOccurrenceCreationDate, (void (*)(uint64_t))&static Date.distantFuture.getter, a1);
}

uint64_t sub_10062C030@<X0>(SEL *a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  int v6 = v3;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [v6 *a1];
  if (v15)
  {
    uint64_t v16 = v15;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v17(v14, v11, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8);
    if (v18 != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v17)(a3, v14, v8);
    }
  }
  else
  {
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v14, 1, 1, v8);
  }
  a2(v18);
  return sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_100909A40);
}

uint64_t sub_10062C220()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100920110);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100920110);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_10062C2E8(void *a1, void *a2)
{
  id v87 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v88 = *(void *)(v3 - 8);
  id v89 = (id)v3;
  __chkstk_darwin(v3);
  id v5 = (char *)v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)type metadata accessor for UUID();
  uint64_t v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v85 - v17;
  id v19 = [a1 account];
  if (v19)
  {
    id v90 = a1;
    id v91 = v19;
    id v20 = [v19 identifier];
    if (v20)
    {
      id v21 = v20;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, void *))(v10 + 56))(v16, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, void *))(v10 + 56))(v16, 1, 1, v9);
    }
    sub_1000F44F4((uint64_t)v16, (uint64_t)v18);
    if ((*(unsigned int (**)(char *, uint64_t, void *))(v10 + 48))(v18, 1, v9))
    {
      sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
      uint64_t v25 = self;
      sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v27 = String._bridgeToObjectiveC()();
      [v25 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v27];

LABEL_8:
      swift_willThrow();
      id v28 = v91;
LABEL_9:

      return v9;
    }
    (*(void (**)(char *, char *, void *))(v10 + 16))(v12, v18, v9);
    sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
    uint64_t v30 = UUID.uuidString.getter();
    unint64_t v32 = v31;
    (*(void (**)(char *, void *))(v10 + 8))(v12, v9);
    id v33 = [v90 objectID];
    id v34 = [v33 persistentStore];

    if (!v34)
    {
      if (qword_100907A90 != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      sub_10008E2DC(v58, (uint64_t)qword_100920110);
      id v59 = v90;
      swift_bridgeObjectRetain();
      uint64_t v60 = Logger.logObject.getter();
      uint64_t v9 = (void *)static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v60, (os_log_type_t)v9))
      {
        uint64_t v86 = v30;
        unint64_t v61 = v32;
        uint64_t v62 = swift_slowAlloc();
        v92[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v62 = 136446466;
        id v63 = [v59 remObjectID];
        if (v63)
        {
          uint64_t v64 = v63;
          id v65 = [v63 description];

          uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v68 = v67;
        }
        else
        {
          uint64_t v66 = 7104878;
          unint64_t v68 = 0xE300000000000000;
        }
        uint64_t v93 = sub_1000C51B8(v66, v68, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v62 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v93 = sub_1000C51B8(v86, v61, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v9, "REMCDHashtagLabel.createHashtagLabel: Cannot obtain the associated persistent store of the given hashtag {hashtagID: %{public}s, hashtagAccountID: %{public}s}", (uint8_t *)v62, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v81 = self;
      NSString v82 = String._bridgeToObjectiveC()();
      [v81 internalErrorWithDebugDescription:v82];

      goto LABEL_8;
    }
    id v35 = sub_1002E5544();
    uint64_t v86 = v30;
    if (v36)
    {
      uint64_t v37 = (uint64_t)v35;
      uint64_t v9 = v36;
      if ((v35 != (id)v30 || v36 != (void *)v32) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v88 = v37;
        id v89 = v34;
        unint64_t v69 = v32;
        if (qword_100907A90 != -1) {
          swift_once();
        }
        uint64_t v70 = type metadata accessor for Logger();
        sub_10008E2DC(v70, (uint64_t)qword_100920110);
        id v71 = v90;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v72, v73))
        {
          uint64_t v74 = swift_slowAlloc();
          id v90 = (id)swift_slowAlloc();
          v92[0] = (uint64_t)v90;
          *(_DWORD *)uint64_t v74 = 136446722;
          id v75 = [v71 remObjectID];
          if (v75)
          {
            BOOL v76 = v75;
            id v77 = [v75 description];

            uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v80 = v79;
          }
          else
          {
            uint64_t v78 = 7104878;
            unint64_t v80 = 0xE300000000000000;
          }
          uint64_t v93 = sub_1000C51B8(v78, v80, v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v93 = sub_1000C51B8(v86, v69, v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v74 + 22) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v93 = sub_1000C51B8(v88, (unint64_t)v9, v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "REMCDHashtagLabel.createHashtagLabel: Hashtag does not have matching account identifier with its persistent store {hashtagID: %{public}s, hashtagAccountID: %{public}s, pStoreAccountID: %{public}s}", (uint8_t *)v74, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v83 = self;
        NSString v84 = String._bridgeToObjectiveC()();
        [v83 internalErrorWithDebugDescription:v84];

        swift_willThrow();
        id v28 = v89;
        goto LABEL_9;
      }
      swift_bridgeObjectRelease();
    }
    sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
    id v38 = (void *)swift_getObjCClassFromMetadata();
    id v39 = v34;
    id v40 = [v38 entity];
    id v41 = objc_allocWithZone((Class)v38);
    id v42 = v87;
    id v43 = [v41 initWithEntity:v40 insertIntoManagedObjectContext:v87];
    id v44 = v39;
    uint64_t v9 = v43;
    [v42 assignObject:v9 toPersistentStore:v44];

    id v87 = v44;
    id v45 = v90;
    id v46 = [v90 name];
    [v9 setName:v46];

    NSString v47 = [v45 name];
    v85[1] = v32;
    if (v47)
    {
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v50 = v49;

      v92[0] = v48;
      v92[1] = v50;
      static Locale.current.getter();
      uint64_t v51 = type metadata accessor for Locale();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v8, 0, 1, v51);
      sub_1000E4FD8();
      StringProtocol.foldedStringForWriting(locale:)();
      sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_10090FDF0);
      swift_bridgeObjectRelease();
      NSString v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v9 setCanonicalName:v47];

    id v52 = v90;
    sub_100688340((uint64_t)v5);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v54 = v89;
    uint64_t v55 = *(void (**)(char *, id))(v88 + 8);
    v55(v5, v89);
    [v9 setFirstOccurrenceCreationDate:isa];

    sub_1006880B0((uint64_t)v5);
    Class v56 = Date._bridgeToObjectiveC()().super.isa;
    v55(v5, v54);
    [v9 setRecencyDate:v56];

    NSString v57 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setAccountIdentifier:v57];

    [v9 addHashtagsObject:v52];
  }
  else
  {
    uint64_t v22 = self;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    uint64_t v23 = swift_getObjCClassFromMetadata();
    NSString v24 = String._bridgeToObjectiveC()();
    [v22 unexpectedNilPropertyWithClass:v23 property:v24];

    swift_willThrow();
  }
  return v9;
}

void sub_10062CF9C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v7 = String._bridgeToObjectiveC()();
  [v1 setName:v7];

  [v1 setColor:a1[2]];
  if (a1[4]) {
    NSString v8 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v8 = 0;
  }
  [v1 setBadgeEmblem:v8];

  if (a1[6]) {
    NSString v9 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v9 = 0;
  }
  [v1 setSortingStyle:v9];

  uint64_t v10 = type metadata accessor for RDPublicTemplate();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v1 setPublicLinkURLUUID:isa];

  sub_1000CAA4C((uint64_t)a1 + *(int *)(v10 + 36), (uint64_t)v6);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  Class v14 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v12) != 1)
  {
    Class v14 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v12);
  }
  [v2 setPublicLinkExpirationDate:v14];

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v15 = (void *)((char *)a1 + *(int *)(v10 + 40));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  id v30 = v2;
  uint64_t v31 = v16;
  uint64_t v18 = v15[2];
  uint64_t v19 = v15[3];
  uint64_t v20 = v15[4];
  uint64_t v21 = v15[5];
  uint64_t v22 = v15[6];
  uint64_t v23 = v15[7];
  uint64_t v32 = v17;
  uint64_t v33 = v18;
  uint64_t v34 = v19;
  uint64_t v35 = v20;
  uint64_t v36 = v21;
  uint64_t v37 = v22;
  uint64_t v38 = v23;
  sub_1000D56A4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = v39;
  uint64_t v39 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v29 = v25;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v24)
  {
    uint64_t v26 = v39;
    unint64_t v27 = v29;
    Class v28 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v26, v27);
    [v30 setEncodedSavedReminders:v28];
  }
}

id sub_10062D2FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSString v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v10 = __chkstk_darwin(v9).n128_u64[0];
  uint64_t v12 = (char *)&v21 - v11;
  id v13 = [v1 publicLinkURLUUID:v10];
  if (!v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  Class v14 = v13;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v15(v4, v8, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909E50);
    return 0;
  }
  v15(v12, v4, v5);
  id v16 = objc_allocWithZone((Class)REMObjectID);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v16 initWithUUID:isa entityName:v18];

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return v19;
}

double sub_10062D57C@<D0>(uint64_t *a1@<X8>)
{
  id v95 = a1;
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  *(void *)&long long v98 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v97 = (char *)&v80 - v10;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v19 = __chkstk_darwin(v18).n128_u64[0];
  unint64_t v99 = (char *)&v80 - v20;
  id v21 = [v2 publicLinkURLUUID:v19];
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    goto LABEL_10;
  }
  uint64_t v22 = v21;
  uint64_t v94 = v6;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v23(v13, v17, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
LABEL_10:
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
    id v43 = self;
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v45 = String._bridgeToObjectiveC()();
    [v43 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v45];

    swift_willThrow();
    return result;
  }
  uint64_t v92 = v23;
  v23(v99, v13, v14);
  id v24 = [v2 publicLinkExpirationDate];
  uint64_t v93 = v14;
  if (!v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v5, 1, 1, v94);
    goto LABEL_12;
  }
  unint64_t v25 = v24;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v26 = v98;
  unint64_t v27 = v8;
  uint64_t v28 = v94;
  id v91 = *(void (**)(char *, char *, uint64_t))(v98 + 32);
  v91(v5, v27, v94);
  unint64_t v29 = *(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56);
  v29(v5, 0, 1, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v5, 1, v28) == 1)
  {
LABEL_12:
    sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909A40);
    NSString v47 = self;
    uint64_t v48 = swift_getObjCClassFromMetadata();
    NSString v49 = String._bridgeToObjectiveC()();
    [v47 unexpectedNilPropertyWithClass:v48 property:v49];

    swift_willThrow();
LABEL_16:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v99, v93);
    return result;
  }
  id v90 = v29;
  uint64_t v89 = v26 + 56;
  id v30 = v97;
  v91(v97, v5, v28);
  id v31 = [v2 name];
  if (!v31)
  {
    uint64_t v50 = self;
    uint64_t v51 = v30;
    uint64_t v52 = swift_getObjCClassFromMetadata();
    NSString v53 = String._bridgeToObjectiveC()();
    [v50 unexpectedNilPropertyWithClass:v52 property:v53];

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v51, v28);
    goto LABEL_16;
  }
  uint64_t v32 = v31;
  uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  id v35 = [v2 encodedSavedReminders];
  if (!v35)
  {
    swift_bridgeObjectRelease();
    id v54 = self;
    uint64_t v55 = v30;
    uint64_t v56 = swift_getObjCClassFromMetadata();
    NSString v57 = String._bridgeToObjectiveC()();
    [v54 unexpectedNilPropertyWithClass:v56 property:v57];

    swift_willThrow();
    id v42 = *(void (**)(char *, uint64_t))(v98 + 8);
    id v41 = v55;
    goto LABEL_15;
  }
  uint64_t v36 = v35;
  uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v39 = v38;

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1000D4A54();
  uint64_t v40 = v96;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v40)
  {
    swift_release();
    sub_100097F34(v37, v39);
    swift_bridgeObjectRelease();
    id v41 = v97;
    id v42 = *(void (**)(char *, uint64_t))(v98 + 8);
LABEL_15:
    v42(v41, v94);
    goto LABEL_16;
  }
  unint64_t v58 = v39;
  uint64_t ObjectType = v34;
  swift_release();
  long long v98 = v100;
  uint64_t v96 = v101;
  uint64_t v87 = v102;
  uint64_t v86 = v103;
  uint64_t v85 = v104;
  uint64_t v84 = v105;
  uint64_t v83 = v106;
  id v82 = [v2 color];
  id v59 = [v2 badgeEmblem];
  if (v59)
  {
    uint64_t v60 = v59;
    uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v80 = v61;
  }
  else
  {
    uint64_t v81 = 0;
    uint64_t v80 = 0;
  }
  uint64_t v62 = v90;
  id v63 = [v2 sortingStyle:v80, v81];
  if (v63)
  {
    uint64_t v64 = v63;
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v66;
    uint64_t v68 = v37;
    uint64_t v69 = v65;
    sub_100097F34(v68, v58);
  }
  else
  {
    sub_100097F34(v37, v58);
    uint64_t v69 = 0;
    uint64_t v67 = 0;
  }
  uint64_t v70 = (int *)type metadata accessor for RDPublicTemplate();
  id v71 = v95;
  v92((char *)v95 + v70[8], v99, v93);
  uint64_t v72 = (char *)v71 + v70[9];
  uint64_t v73 = v94;
  v91(v72, v97, v94);
  v62(v72, 0, 1, v73);
  uint64_t v74 = ObjectType;
  *id v71 = v88;
  v71[1] = v74;
  uint64_t v75 = v81;
  v71[2] = (uint64_t)v82;
  v71[3] = v75;
  v71[4] = v80;
  v71[5] = v69;
  v71[6] = v67;
  BOOL v76 = (char *)v71 + v70[10];
  double result = *(double *)&v98;
  *(_OWORD *)BOOL v76 = v98;
  uint64_t v77 = v87;
  *((void *)v76 + 2) = v96;
  *((void *)v76 + 3) = v77;
  uint64_t v78 = v85;
  *((void *)v76 + 4) = v86;
  *((void *)v76 + 5) = v78;
  uint64_t v79 = v83;
  *((void *)v76 + 6) = v84;
  *((void *)v76 + 7) = v79;
  return result;
}

uint64_t type metadata accessor for REMCDPublicTemplate()
{
  return self;
}

uint64_t sub_10062E208()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100920150);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100920150);
  if (qword_100907830 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424D8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_AccountIdentifierHashtagLabels.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  *(void *)&v8[0] = 0xD000000000000038;
  *((void *)&v8[0] + 1) = 0x8000000100795490;
  id v4 = [(objc_class *)metadata.super.super.isa __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_1000D6CBC((uint64_t)v8, (uint64_t)v9);
  if (!v9[3])
  {
    sub_1000F5B8C((uint64_t)v9);
LABEL_9:
    sub_10062E4E4(_.super.isa, metadata.super.super.isa);
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    v9[0] = 0xD000000000000038;
    v9[1] = 0x8000000100795490;
    [(objc_class *)metadata.super.super.isa __swift_setObject:isa forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    return;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_9;
  }
  id v5 = [v7 integerValue];

  if ((uint64_t)v5 <= 0) {
    goto LABEL_9;
  }
}

void sub_10062E4E4(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  if (qword_100907A98 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_100920150);
  id v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v32 = a2;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    id v12 = sub_1002ECF34();
    *(void *)&v39[0] = sub_1000C51B8((uint64_t)v12, v13, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "AccountIdentifierHashtagLabelsMigrator BEGIN {store: %{public}s}", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v32;
    swift_slowDealloc();
  }
  else
  {
  }
  *(void *)&v39[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v39[0] + 1) = v14;
  swift_bridgeObjectRetain();
  id v15 = [a2 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v39, 0, sizeof(v39));
  }
  sub_1000D6CBC((uint64_t)v39, (uint64_t)aBlock);
  if (!v34)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    sub_1000F5B8C((uint64_t)aBlock);
    goto LABEL_15;
  }
  if (swift_dynamicCast())
  {
    uint64_t v16 = v37;
    uint64_t v17 = v38;
    swift_bridgeObjectRelease();
    id v18 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:1];
    id v19 = [v8 persistentStoreCoordinator];
    [v18 setPersistentStoreCoordinator:v19];

    [v18 setTransactionAuthor:RDStoreControllerAccountIdentifierHashtagLabelsMigrationAuthor];
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = v3;
    v20[3] = v18;
    v20[4] = v8;
    void v20[5] = v16;
    v20[6] = v17;
    v20[7] = ObjectType;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_10062F124;
    *(void *)(v21 + 24) = v20;
    id v35 = sub_10008F6F4;
    uint64_t v36 = v21;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1003B3260;
    uint64_t v34 = &unk_1008CE850;
    uint64_t v22 = _Block_copy(aBlock);
    id v23 = v8;
    id v24 = v3;
    id v25 = v18;
    swift_retain();
    swift_release();
    [v25 performBlockAndWait:v22];

    _Block_release(v22);
    LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((v22 & 1) == 0) {
      return;
    }
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  id v26 = v8;
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v29 = 136446210;
    id v30 = sub_1002ECF34();
    *(void *)&v39[0] = sub_1000C51B8((uint64_t)v30, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "AccountIdentifierHashtagLabelsMigrator {store: %{public}s} accountIdentifier is nil, skip migration", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_10062EA54(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t)a3;
  id v4 = (void *)a2;
  unint64_t v5 = sub_10062F15C(a2, a3, 50);
  uint64_t v6 = &qword_100907000;
  unint64_t v13 = v5;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14)
    {
LABEL_7:
      uint64_t v30 = v3;
      id v31 = v4;
      uint64_t v3 = 4;
      uint64_t v15 = v14;
      while (1)
      {
        uint64_t v16 = (v13 & 0xC000000000000001) != 0
            ? (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : (uint64_t *)*(id *)(v13 + 8 * v3);
        uint64_t v6 = v16;
        uint64_t v17 = v3 - 3;
        if (__OFADD__(v3 - 4, 1)) {
          break;
        }
        NSString v18 = String._bridgeToObjectiveC()();
        [v6 setAccountIdentifier:v18];

        if (__ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * v17, 1) <= 0x51EB851EB851EB8uLL
          && ([v31 hasChanges] & 1) != 0)
        {
          id v32 = 0;
          if (![v31 save:&v32])
          {
            id v20 = v32;
            swift_bridgeObjectRelease();
            _convertNSErrorToError(_:)();

            swift_willThrow();
            uint64_t v3 = v30;
            uint64_t v6 = &qword_100907000;
            goto LABEL_2;
          }
          id v19 = v32;
        }

        ++v3;
        if (v17 == v15)
        {
          swift_bridgeObjectRelease();
          uint64_t v3 = v30;
          id v4 = v31;
          uint64_t v6 = &qword_100907000;
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_21:
      swift_once();
LABEL_3:
      uint64_t v7 = type metadata accessor for Logger();
      sub_10008E2DC(v7, (uint64_t)qword_100920150);
      swift_errorRetain();
      swift_errorRetain();
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
        id v32 = (id)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v10 = 136315138;
        swift_getErrorValue();
        uint64_t v11 = Error.rem_errorDescription.getter();
        sub_1000C51B8(v11, v12, (uint64_t *)&v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "AccountIdentifierHashtagLabelsMigrator with error: %s", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14) {
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
LABEL_24:
  if (objc_msgSend(v4, "hasChanges", v30))
  {
    id v32 = 0;
    if ([v4 save:&v32])
    {
      id v21 = v32;
      goto LABEL_27;
    }
    id v29 = v32;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_2:
    if (v6[339] == -1) {
      goto LABEL_3;
    }
    goto LABEL_21;
  }
LABEL_27:
  if (v6[339] != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10008E2DC(v22, (uint64_t)qword_100920150);
  id v23 = (id)v3;
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    id v32 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136446466;
    id v27 = sub_1002ECF34();
    sub_1000C51B8((uint64_t)v27, v28, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "AccountIdentifierHashtagLabelsMigrator END {store: %{public}s, migrated hashtag labels count = %ld}", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

id RDStoreControllerMigrator_AccountIdentifierHashtagLabels.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_AccountIdentifierHashtagLabels();
  return [super init];
}

uint64_t type metadata accessor for RDStoreControllerMigrator_AccountIdentifierHashtagLabels()
{
  return self;
}

id RDStoreControllerMigrator_AccountIdentifierHashtagLabels.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_AccountIdentifierHashtagLabels();
  return [super dealloc];
}

uint64_t sub_10062F0D4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10062F124()
{
  sub_10062EA54(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10062F134()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10062F144(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10062F154()
{
  return swift_release();
}

uint64_t sub_10062F15C(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
  id v5 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v6 = [(id)swift_getObjCClassFromMetadata() entity];
  [v5 setEntity:v6];

  [v5 setAffectedStores:0];
  [v5 setPredicate:0];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10077A530;
  *(void *)(v7 + 32) = a2;
  specialized Array._endMutation()();
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  id v8 = a2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 setAffectedStores:isa];

  [v5 setFetchBatchSize:a3];
  uint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();

  return v10;
}

uint64_t sub_10062F300@<X0>(unint64_t *a1@<X8>)
{
  id v23 = a1;
  uint64_t v2 = v1;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v22 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_100908170);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100778380;
  *(void *)(inited + 32) = 0x696669746E656469;
  *(void *)(inited + 40) = 0xEA00000000007265;
  *(void *)(inited + 48) = UUID.uuidString.getter();
  *(void *)(inited + 56) = v10;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x80000001007D1E00;
  uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_dueDateDelta);
  *(void *)(inited + 96) = [v11 unit];
  *(void *)(inited + 120) = &type metadata for Int;
  *(void *)(inited + 128) = 0xD000000000000011;
  *(void *)(inited + 136) = 0x80000001007D1E20;
  *(void *)(inited + 144) = [v11 count];
  *(void *)(inited + 168) = &type metadata for Int;
  strcpy((char *)(inited + 176), "creationDate");
  *(unsigned char *)(inited + 189) = 0;
  *(_WORD *)(inited + 190) = -5120;
  Date.timeIntervalSinceReferenceDate.getter();
  *(void *)(inited + 192) = v12;
  *(void *)(inited + 216) = &type metadata for Double;
  *(void *)(inited + 224) = 0xD00000000000001ALL;
  *(void *)(inited + 232) = 0x80000001007C6B40;
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_minimumSupportedAppVersion);
  *(void *)(inited + 264) = &type metadata for Int;
  *(void *)(inited + 240) = v13;
  unint64_t v14 = sub_1001805C0(inited);
  sub_1000CAA4C(v2 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_acknowledgedDate, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1000EACF4((uint64_t)v5);
  }
  else
  {
    uint64_t v15 = v22;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v22, v5, v6);
    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v26 = &type metadata for Double;
    *(void *)&long long v25 = v16;
    sub_10009A1A0(&v25, v24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v27 = v14;
    sub_1002C54C8(v24, 0xD000000000000010, 0x80000001007C6B20, isUniquelyReferenced_nonNull_native);
    unint64_t v14 = v27;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  }
  NSString v18 = v23;
  *id v23 = v14;
  uint64_t v19 = enum case for REMJSONType.jsonObject(_:);
  uint64_t v20 = type metadata accessor for REMJSONType();
  return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v18, v19, v20);
}

uint64_t sub_10062F6A0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_identifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  uint64_t v3 = v0 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_creationDate;
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_1000EACF4(v0 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_acknowledgedDate);

  return swift_deallocClassInstance();
}

uint64_t sub_10062F7A4@<X0>(unint64_t *a1@<X8>)
{
  return sub_10062F300(a1);
}

uint64_t sub_10062F7C8@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10062FE88(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t REMDueDateDeltaInterval.toJSON()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  sub_100094134(&qword_100908170);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  *(void *)(inited + 32) = 1953066613;
  *(void *)(inited + 40) = 0xE400000000000000;
  *(void *)(inited + 48) = [v2 unit];
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 80) = 0x746E756F63;
  *(void *)(inited + 88) = 0xE500000000000000;
  id v5 = [v2 count];
  *(void *)(inited + 120) = &type metadata for Int;
  *(void *)(inited + 96) = v5;
  *a1 = sub_1001805C0(inited);
  uint64_t v6 = enum case for REMJSONType.jsonObject(_:);
  uint64_t v7 = type metadata accessor for REMJSONType();
  return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(a1, v6, v7);
}

id static REMDueDateDeltaInterval.fromJSON(_:)(uint64_t a1)
{
  uint64_t v3 = sub_100094134(&qword_100909CD0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  os_log_type_t v9 = (char *)v26 - v8;
  uint64_t v10 = type metadata accessor for REMJSONType();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v12);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v15 == enum case for REMJSONType.jsonObject(_:))
  {
    v26[1] = v1;
    unint64_t v27 = v6;
    (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
    uint64_t v16 = enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
    v17(v9, enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:), v3);
    unint64_t v18 = v28;
    Dictionary<>.deserializeRequired<A>(key:valueType:)();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
    v19(v9, v3);
    if (v18) {
      return (id)swift_bridgeObjectRelease();
    }
    unint64_t v28 = v29;
    id v23 = v27;
    v17(v27, v16, v3);
    Dictionary<>.deserializeRequired<A>(key:valueType:)();
    v19(v23, v3);
    swift_bridgeObjectRelease();
    unint64_t v24 = v29;
    unint64_t v25 = v28;
    if (sub_10062FCBC(v28)) {
      return [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithUnit:v25 count:v24];
    }
  }
  else
  {
    if (v15 != enum case for REMJSONType.jsonArray(_:))
    {
      id result = (id)_diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = type metadata accessor for REMJSONDeserializationError();
  sub_1002DE470();
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 104))(v22, enum case for REMJSONDeserializationError.invalidData(_:), v21);
  return (id)swift_willThrow();
}

BOOL sub_10062FCBC(unint64_t a1)
{
  return a1 < 5;
}

uint64_t sub_10062FCC8@<X0>(unint64_t *a1@<X8>)
{
  return REMDueDateDeltaInterval.toJSON()(a1);
}

id sub_10062FCEC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = static REMDueDateDeltaInterval.fromJSON(_:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10062FD18()
{
  return type metadata accessor for RDDueDateDeltaAlert();
}

uint64_t type metadata accessor for RDDueDateDeltaAlert()
{
  uint64_t result = qword_1009201B8;
  if (!qword_1009201B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10062FD6C()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      sub_1000D68FC();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_10062FE88(char *a1)
{
  uint64_t v92 = a1;
  uint64_t v81 = sub_100094134(&qword_100920260);
  uint64_t v79 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v78 = (char *)v69 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v76);
  uint64_t v73 = (uint64_t)v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v77 = (char *)v69 - v4;
  __chkstk_darwin(v5);
  uint64_t v80 = (char *)v69 - v6;
  uint64_t v7 = sub_100094134(&qword_100909CD0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v84 = v7;
  uint64_t v85 = v8;
  __chkstk_darwin(v7);
  uint64_t v74 = (char *)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v75 = (char *)v69 - v11;
  __chkstk_darwin(v12);
  id v82 = (char *)v69 - v13;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100913060);
  uint64_t v86 = *(void *)(v14 - 8);
  uint64_t v87 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for Date();
  uint64_t v83 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v72 = (char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v90 = (char *)v69 - v19;
  uint64_t v20 = sub_100094134(&qword_100909CE0);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  id v23 = (char *)v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v88 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  id v71 = (char *)v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  unint64_t v28 = (char *)v69 - v27;
  uint64_t v29 = type metadata accessor for REMJSONType();
  uint64_t v30 = *(void *)(v29 - 8);
  __n128 v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v30 + 16))(v33, v92, v29, v31);
  int v34 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v33, v29);
  if (v34 == enum case for REMJSONType.jsonObject(_:))
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v33, v29);
    (*(void (**)(char *, void, uint64_t))(v21 + 104))(v23, enum case for Dictionary<>.DeserializableValueType.uuid<A, B><A1>(_:), v20);
    uint64_t v35 = v91;
    Dictionary<>.deserializeRequired<A>(key:valueType:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    if (v35)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v92 = v28;
      uint64_t v37 = enum case for Dictionary<>.DeserializableValueType.date<A, B><A1>(_:);
      uint64_t v39 = v86;
      uint64_t v38 = v87;
      (*(void (**)(char *, void, uint64_t))(v86 + 104))(v16, enum case for Dictionary<>.DeserializableValueType.date<A, B><A1>(_:), v87);
      uint64_t v40 = v89;
      Dictionary<>.deserializeRequired<A>(key:valueType:)();
      uint64_t v91 = v24;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v38);
      uint64_t v41 = v84;
      uint64_t v42 = v85;
      uint64_t v44 = v85 + 104;
      id v43 = *(void (**)(char *))(v85 + 104);
      NSString v45 = v82;
      LODWORD(v87) = enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:);
      v43(v82);
      Dictionary<>.deserializeRequired<A>(key:valueType:)();
      v69[1] = v44;
      uint64_t v70 = v43;
      uint64_t v86 = *(void *)(v42 + 8);
      ((void (*)(char *, uint64_t))v86)(v45, v41);
      id v82 = v93;
      id v46 = v78;
      uint64_t v47 = v79;
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 104))(v78, v37, v81);
      uint64_t v48 = (uint64_t)v77;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v77, 1, 1, v40);
      Dictionary<>.deserializeOptional<A>(key:valueType:defaultValue:)();
      uint64_t v85 = v42 + 8;
      sub_1000EACF4(v48);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v81);
      NSString v49 = v75;
      uint64_t v50 = v87;
      uint64_t v51 = v84;
      uint64_t v52 = (void (*)(char *, uint64_t, uint64_t))v70;
      ((void (*)(char *, void, uint64_t))v70)(v75, v87, v84);
      Dictionary<>.deserializeRequired<A>(key:valueType:)();
      id v54 = (void (*)(char *, uint64_t))v86;
      ((void (*)(char *, uint64_t))v86)(v49, v51);
      uint64_t v55 = v51;
      uint64_t v56 = v93;
      NSString v57 = v74;
      v52(v74, v50, v55);
      Dictionary<>.deserializeRequired<A>(key:valueType:)();
      uint64_t v58 = (uint64_t)v80;
      id v59 = v92;
      v54(v57, v84);
      swift_bridgeObjectRelease();
      id v60 = [objc_allocWithZone((Class)REMDueDateDeltaInterval) initWithUnitInteger:v93 count:v56];
      if (v60)
      {
        id v61 = v60;
        uint64_t v62 = v59;
        uint64_t v88 = *(void *)(v88 + 32);
        id v63 = v71;
        uint64_t v64 = v91;
        ((void (*)(char *, char *, uint64_t))v88)(v71, v62, v91);
        uint64_t v65 = v58;
        uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
        uint64_t v67 = v89;
        v66(v72, v90, v89);
        sub_1000CAAB4(v65, v73);
        type metadata accessor for RDDueDateDeltaAlert();
        unint64_t v28 = (char *)swift_allocObject();
        ((void (*)(char *, char *, uint64_t))v88)(&v28[OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_identifier], v63, v64);
        *(void *)&v28[OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_dueDateDelta] = v61;
        v66(&v28[OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_creationDate], v72, v67);
        sub_1000CAAB4(v73, (uint64_t)&v28[OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_acknowledgedDate]);
        *(void *)&v28[OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_minimumSupportedAppVersion] = v82;
      }
      else
      {
        unint64_t v28 = (char *)type metadata accessor for REMJSONDeserializationError();
        sub_1002DE470();
        swift_allocError();
        (*(void (**)(uint64_t, void, char *))(*((void *)v28 - 1) + 104))(v68, enum case for REMJSONDeserializationError.invalidData(_:), v28);
        swift_willThrow();
        sub_1000EACF4(v58);
        (*(void (**)(char *, uint64_t))(v83 + 8))(v90, v89);
        (*(void (**)(char *, uint64_t))(v88 + 8))(v59, v91);
      }
    }
    return (uint64_t)v28;
  }
  if (v34 == enum case for REMJSONType.jsonArray(_:))
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v33, v29);
    swift_bridgeObjectRelease();
    unint64_t v28 = (char *)type metadata accessor for REMJSONDeserializationError();
    sub_1002DE470();
    swift_allocError();
    (*(void (**)(uint64_t, void, char *))(*((void *)v28 - 1) + 104))(v36, enum case for REMJSONDeserializationError.invalidData(_:), v28);
    swift_willThrow();
    return (uint64_t)v28;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

NSObject *sub_100630AD8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_1009207B8, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters, &qword_1009207C0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1000C7700, &qword_1009207D0, &qword_1009207C8);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_100630B88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v62 = a6;
  uint64_t v54 = a3;
  uint64_t v55 = a2;
  uint64_t v57 = a1;
  uint64_t v51 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v50 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v56 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for REMReminderDetailDataView.CheckUpdateInvocation.Result();
  uint64_t v49 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for REMReminderDetailDataView.CheckUpdateInvocation.Parameters();
  uint64_t v59 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v65 = PropertyListDecoder.init()();
  uint64_t v58 = v15;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v19 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v20 = a4;
  uint64_t v21 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v69 = v19;
  v68[0] = v21;
  uint64_t v61 = v21;
  swift_retain();
  uint64_t v22 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v68, (uint64_t)v18);
  v22(v67, 0);
  sub_100646EBC(&qword_1009207A0, (void (*)(uint64_t))&type metadata accessor for REMReminderDetailDataView.CheckUpdateInvocation.Parameters);
  uint64_t v23 = v63;
  uint64_t v24 = v64;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v23)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v26 = v60;
    swift_errorRetain();
    id v27 = v26;
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      v68[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315394;
      swift_getErrorValue();
      uint64_t v31 = Error.rem_errorDescription.getter();
      v67[0] = sub_1000C51B8(v31, v32, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v30 + 12) = 2080;
      v67[0] = swift_getObjectType();
      sub_100094134(&qword_1009207A8);
      uint64_t v33 = String.init<A>(describing:)();
      v67[0] = sub_1000C51B8(v33, v34, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v12, v24);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    id v36 = [v60 fetchResultTokenToDiffAgainst];
    uint64_t v37 = v56;
    sub_10051F2BC(v36, v55, v56);

    uint64_t v38 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter();
    uint64_t v39 = (void *)REMReminderDetailDataView.CheckUpdateInvocation.Parameters.reminderID.getter();
    sub_1001CC308(v39, v38);

    swift_bridgeObjectRelease();
    uint64_t v40 = v52;
    REMReminderDetailDataView.CheckUpdateInvocation.Result.init(hasUpdates:)();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v37, v51);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    id v41 = v20;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v42 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v69 = v19;
    v68[0] = v42;
    swift_retain();
    id v43 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    uint64_t v44 = (uint64_t)v18;
    NSString v45 = v40;
    sub_10035D778((uint64_t)v68, v44);
    v43(v67, 0);
    sub_100646EBC(&qword_1009207B0, (void (*)(uint64_t))&type metadata accessor for REMReminderDetailDataView.CheckUpdateInvocation.Result);
    uint64_t v46 = v53;
    unint64_t v28 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v48 = v47;
    sub_100097E38((uint64_t)v28, v47);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34((uint64_t)v28, v48);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v45, v46);

    (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v24);
  }
  return v28;
}

NSObject *sub_10063171C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t (*a9)(void, __n128), unint64_t *a10, void (*a11)(uint64_t), uint64_t a12, void (*a13)(id, uint64_t, uint64_t, id, char *), unint64_t *a14, uint64_t *a15)
{
  uint64_t v69 = a6;
  uint64_t v68 = a5;
  uint64_t v58 = a3;
  uint64_t v57 = a2;
  uint64_t v61 = a1;
  id v60 = a15;
  uint64_t v67 = a12;
  id v66 = a11;
  uint64_t v65 = a10;
  uint64_t v55 = a8;
  uint64_t v56 = sub_100094134(a8);
  uint64_t v54 = *(void *)(v56 - 8);
  __n128 v18 = __chkstk_darwin(v56);
  uint64_t v59 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = a9(0, v18);
  uint64_t v20 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v62 = (char *)&v54 - v24;
  uint64_t v25 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v25 - 8);
  id v27 = (char *)&v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v72 = PropertyListDecoder.init()();
  id v63 = v15;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v28 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v29 = a4;
  uint64_t v30 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v76 = v28;
  uint64_t v75 = v30;
  uint64_t v64 = v30;
  swift_retain();
  uint64_t v31 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)&v75, (uint64_t)v27);
  v31(v74, 0);
  sub_100646EBC(v65, v66);
  unint64_t v32 = v70;
  uint64_t v33 = v71;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v32)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_10008E2DC(v34, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v35 = v63;
    swift_errorRetain();
    id v36 = v35;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315394;
      swift_getErrorValue();
      uint64_t v40 = Error.rem_errorDescription.getter();
      v74[0] = sub_1000C51B8(v40, v41, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v39 + 12) = 2080;
      v74[0] = swift_getObjectType();
      sub_100094134(v60);
      uint64_t v42 = String.init<A>(describing:)();
      v74[0] = sub_1000C51B8(v42, v43, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v44 = v20;
    NSString v45 = v62;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v62, v22, v33);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    a13(v73, v57, v58, v29, v45);
    uint64_t v70 = a14;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    unint64_t v47 = (unint64_t *)PropertyListEncoder.init()();
    id v48 = v29;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v49 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v76 = v28;
    uint64_t v75 = v49;
    swift_retain();
    uint64_t v50 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)&v75, (uint64_t)v27);
    v50(v74, 0);
    sub_1000967F4(v70, v55);
    uint64_t v51 = v59;
    uint64_t v70 = v47;
    uint64_t v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v53 = v52;
    sub_100097E38((uint64_t)v37, v52);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34((uint64_t)v37, v53);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v56);

    (*(void (**)(char *, uint64_t))(v44 + 8))(v62, v33);
  }
  return v37;
}

uint64_t sub_1006321F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a6;
  uint64_t v57 = a5;
  uint64_t v51 = a3;
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  uint64_t v49 = type metadata accessor for REMPrivacyPermissionsDataView.IncompleteRemindersCountWithLocationInvocation.Result();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for REMPrivacyPermissionsDataView.IncompleteRemindersCountWithLocationInvocation.Parameters();
  uint64_t v12 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v54 = (char *)&v47 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v61 = PropertyListDecoder.init()();
  unint64_t v52 = v11;
  id v55 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v65 = v20;
  v64[0] = v22;
  uint64_t v56 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v64, (uint64_t)v19);
  v23(v63, 0);
  sub_100646EBC(&qword_1009206B8, (void (*)(uint64_t))&type metadata accessor for REMPrivacyPermissionsDataView.IncompleteRemindersCountWithLocationInvocation.Parameters);
  uint64_t v24 = v59;
  uint64_t v25 = v60;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v55;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v63[0] = sub_1000C51B8(v32, v33, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v63[0] = swift_getObjectType();
      sub_100094134(&qword_1009206C0);
      uint64_t v34 = String.init<A>(describing:)();
      v63[0] = sub_1000C51B8(v34, v35, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v44 = v56;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v54, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_100263818();
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v38 = PropertyListEncoder.init()();
    id v39 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v40 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v65 = v20;
    v64[0] = v40;
    swift_retain();
    unint64_t v41 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v64, (uint64_t)v19);
    v41(v63, 0);
    sub_100646EBC(&qword_1009206C8, (void (*)(uint64_t))&type metadata accessor for REMPrivacyPermissionsDataView.IncompleteRemindersCountWithLocationInvocation.Result);
    uint64_t v42 = v52;
    uint64_t v43 = v49;
    uint64_t v59 = v38;
    uint64_t v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v46 = v45;
    sub_100097E38(v44, v45);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v44, v46);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v42, v43);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v54, v25);
  }
  return v44;
}

uint64_t sub_100632C90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a6;
  uint64_t v57 = a5;
  uint64_t v51 = a3;
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  uint64_t v49 = type metadata accessor for REMPrivacyPermissionsDataView.IncompleteRemindersCountWithDueDateInvocation.Result();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for REMPrivacyPermissionsDataView.IncompleteRemindersCountWithDueDateInvocation.Parameters();
  uint64_t v12 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v54 = (char *)&v47 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v61 = PropertyListDecoder.init()();
  unint64_t v52 = v11;
  id v55 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v65 = v20;
  v64[0] = v22;
  uint64_t v56 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v64, (uint64_t)v19);
  v23(v63, 0);
  sub_100646EBC(&qword_1009206A0, (void (*)(uint64_t))&type metadata accessor for REMPrivacyPermissionsDataView.IncompleteRemindersCountWithDueDateInvocation.Parameters);
  uint64_t v24 = v59;
  uint64_t v25 = v60;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v55;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v63[0] = sub_1000C51B8(v32, v33, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v63[0] = swift_getObjectType();
      sub_100094134(&qword_1009206A8);
      uint64_t v34 = String.init<A>(describing:)();
      v63[0] = sub_1000C51B8(v34, v35, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v44 = v56;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v54, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_1002639E8();
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v38 = PropertyListEncoder.init()();
    id v39 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v40 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v65 = v20;
    v64[0] = v40;
    swift_retain();
    unint64_t v41 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v64, (uint64_t)v19);
    v41(v63, 0);
    sub_100646EBC(&qword_1009206B0, (void (*)(uint64_t))&type metadata accessor for REMPrivacyPermissionsDataView.IncompleteRemindersCountWithDueDateInvocation.Result);
    uint64_t v42 = v52;
    uint64_t v43 = v49;
    uint64_t v59 = v38;
    uint64_t v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v46 = v45;
    sub_100097E38(v44, v45);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v44, v46);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v42, v43);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v54, v25);
  }
  return v44;
}

uint64_t sub_100633730(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a6;
  uint64_t v57 = a5;
  uint64_t v51 = a3;
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  uint64_t v49 = type metadata accessor for REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Result();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Parameters();
  uint64_t v12 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v54 = (char *)&v47 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v61 = PropertyListDecoder.init()();
  unint64_t v52 = v11;
  id v55 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v65 = v20;
  v64[0] = v22;
  uint64_t v56 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v64, (uint64_t)v19);
  v23(v63, 0);
  sub_100646EBC(&qword_100920688, (void (*)(uint64_t))&type metadata accessor for REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Parameters);
  uint64_t v24 = v59;
  uint64_t v25 = v60;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v55;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v63[0] = sub_1000C51B8(v32, v33, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v63[0] = swift_getObjectType();
      sub_100094134(&qword_100920690);
      uint64_t v34 = String.init<A>(describing:)();
      v63[0] = sub_1000C51B8(v34, v35, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v44 = v56;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v54, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_100274C04((uint64_t)v62, v50);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v38 = PropertyListEncoder.init()();
    id v39 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v40 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v65 = v20;
    v64[0] = v40;
    swift_retain();
    unint64_t v41 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v64, (uint64_t)v19);
    v41(v63, 0);
    sub_100646EBC(&qword_100920698, (void (*)(uint64_t))&type metadata accessor for REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Result);
    uint64_t v42 = v52;
    uint64_t v43 = v49;
    uint64_t v59 = v38;
    uint64_t v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v46 = v45;
    sub_100097E38(v44, v45);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v44, v46);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v42, v43);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v54, v25);
  }
  return v44;
}

uint64_t sub_1006341D0(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a6;
  uint64_t v58 = a5;
  uint64_t v52 = a3;
  uint64_t v51 = a2;
  uint64_t v54 = a1;
  uint64_t v50 = type metadata accessor for REMSuggestedAttributesTrainer.Result();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters();
  uint64_t v12 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v55 = (char *)&v48 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v62 = PropertyListDecoder.init()();
  uint64_t v53 = v11;
  id v56 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v66 = v20;
  v65[0] = v22;
  uint64_t v57 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v65, (uint64_t)v19);
  v23(v64, 0);
  sub_100646EBC(&qword_100920670, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesTrainer.Parameters);
  uint64_t v24 = v60;
  uint64_t v25 = v61;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v56;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v64[0] = sub_1000C51B8(v32, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v64[0] = swift_getObjectType();
      sub_100094134(&qword_100920678);
      uint64_t v34 = String.init<A>(describing:)();
      v64[0] = sub_1000C51B8(v34, v35, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v45 = v57;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v55, v14, v25);
    type metadata accessor for RDXPCSuggestedAttributesPerformer();
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v60 = v12;
    uint64_t v38 = v63;
    sub_100276E78(v38, v51, v21, v36, (uint64_t)v53);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    uint64_t v40 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v41 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v66 = v20;
    v65[0] = v41;
    swift_retain();
    uint64_t v42 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v65, (uint64_t)v19);
    v42(v64, 0);
    sub_100646EBC(&qword_100920680, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesTrainer.Result);
    uint64_t v43 = (uint64_t)v53;
    uint64_t v44 = v50;
    uint64_t v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v47 = v46;
    sub_100097E38(v45, v46);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v45, v47);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v43, v44);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v55, v25);
  }
  return v45;
}

uint64_t sub_100634C7C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a6;
  uint64_t v57 = a5;
  uint64_t v51 = a3;
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  uint64_t v49 = type metadata accessor for REMRemindersInCalendarDataView.Invocation.Result();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for REMRemindersInCalendarDataView.Invocation.Parameters();
  uint64_t v12 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v54 = (char *)&v47 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v61 = PropertyListDecoder.init()();
  uint64_t v52 = v11;
  id v55 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v65 = v20;
  v64[0] = v22;
  uint64_t v56 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v64, (uint64_t)v19);
  v23(v63, 0);
  sub_100646EBC(&qword_100920628, (void (*)(uint64_t))&type metadata accessor for REMRemindersInCalendarDataView.Invocation.Parameters);
  uint64_t v24 = v59;
  uint64_t v25 = v60;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v55;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v63[0] = sub_1000C51B8(v32, v33, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v63[0] = swift_getObjectType();
      sub_100094134(&qword_100920630);
      uint64_t v34 = String.init<A>(describing:)();
      v63[0] = sub_1000C51B8(v34, v35, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v44 = v56;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v54, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_10036C848(v50, v51, (uint64_t)v21, (uint64_t)v52);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v38 = PropertyListEncoder.init()();
    id v39 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v40 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v65 = v20;
    v64[0] = v40;
    swift_retain();
    uint64_t v41 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v64, (uint64_t)v19);
    v41(v63, 0);
    sub_100646EBC(&qword_100920638, (void (*)(uint64_t))&type metadata accessor for REMRemindersInCalendarDataView.Invocation.Result);
    uint64_t v42 = (uint64_t)v52;
    uint64_t v43 = v49;
    uint64_t v59 = v38;
    uint64_t v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v46 = v45;
    sub_100097E38(v44, v45);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v44, v46);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v42, v43);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v54, v25);
  }
  return v44;
}

uint64_t sub_10063571C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a6;
  uint64_t v57 = a5;
  uint64_t v51 = a3;
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  uint64_t v49 = type metadata accessor for REMSiriSearchDataView.ListsResult_Codable();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for REMSiriSearchDataView.ListsByCriteriaInvocation.Parameters();
  uint64_t v12 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v54 = (char *)&v47 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v61 = PropertyListDecoder.init()();
  uint64_t v52 = v11;
  id v55 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v65 = v20;
  v64[0] = v22;
  uint64_t v56 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v64, (uint64_t)v19);
  v23(v63, 0);
  sub_100646EBC(&qword_1009205E8, (void (*)(uint64_t))&type metadata accessor for REMSiriSearchDataView.ListsByCriteriaInvocation.Parameters);
  uint64_t v24 = v59;
  uint64_t v25 = v60;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v55;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v63[0] = sub_1000C51B8(v32, v33, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v63[0] = swift_getObjectType();
      sub_100094134(&qword_1009205F0);
      uint64_t v34 = String.init<A>(describing:)();
      v63[0] = sub_1000C51B8(v34, v35, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v44 = v56;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v54, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_100370FA0((uint64_t)v62, v50, v51, v21);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v38 = PropertyListEncoder.init()();
    id v39 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v40 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v65 = v20;
    v64[0] = v40;
    swift_retain();
    uint64_t v41 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v64, (uint64_t)v19);
    v41(v63, 0);
    sub_100646EBC(&qword_1009205F8, (void (*)(uint64_t))&type metadata accessor for REMSiriSearchDataView.ListsResult_Codable);
    uint64_t v42 = v52;
    uint64_t v43 = v49;
    uint64_t v59 = v38;
    uint64_t v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v46 = v45;
    sub_100097E38(v44, v45);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v44, v46);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v42, v43);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v54, v25);
  }
  return v44;
}

uint64_t sub_1006361BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a6;
  uint64_t v58 = a5;
  uint64_t v52 = a3;
  uint64_t v51 = a2;
  uint64_t v54 = a1;
  uint64_t v50 = type metadata accessor for REMSuggestedAttributesHarvester.Response();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for REMSuggestedAttributesHarvester.Request();
  uint64_t v12 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v55 = (char *)&v48 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v62 = PropertyListDecoder.init()();
  uint64_t v53 = v11;
  id v56 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v66 = v20;
  v65[0] = v22;
  uint64_t v57 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v65, (uint64_t)v19);
  v23(v64, 0);
  sub_100646EBC(&qword_1009205C0, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.Request);
  uint64_t v24 = v60;
  uint64_t v25 = v61;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v56;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v64[0] = sub_1000C51B8(v32, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v64[0] = swift_getObjectType();
      sub_100094134(&qword_1009205C8);
      uint64_t v34 = String.init<A>(describing:)();
      v64[0] = sub_1000C51B8(v34, v35, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v45 = v57;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    uint64_t v37 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v55, v14, v25);
    type metadata accessor for RDXPCSuggestedAttributesPerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_1003D2CE0((uint64_t)v63, v37, (uint64_t)v53);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v39 = PropertyListEncoder.init()();
    id v40 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v41 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v66 = v20;
    v65[0] = v41;
    swift_retain();
    uint64_t v42 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v65, (uint64_t)v19);
    v42(v64, 0);
    sub_100646EBC(&qword_1009205D0, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.Response);
    uint64_t v43 = (uint64_t)v53;
    uint64_t v44 = v50;
    uint64_t v60 = v39;
    uint64_t v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v47 = v46;
    sub_100097E38(v45, v46);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v45, v47);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v43, v44);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v55, v25);
  }
  return v45;
}

uint64_t sub_100636C5C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a6;
  uint64_t v58 = a5;
  uint64_t v52 = a3;
  uint64_t v51 = a2;
  uint64_t v54 = a1;
  uint64_t v50 = type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for REMSuggestedAttributesHarvester.FeedbackRequest();
  uint64_t v12 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v55 = (char *)&v48 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v62 = PropertyListDecoder.init()();
  uint64_t v53 = v11;
  id v56 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v66 = v20;
  v65[0] = v22;
  uint64_t v57 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v65, (uint64_t)v19);
  v23(v64, 0);
  sub_100646EBC(&qword_100920598, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.FeedbackRequest);
  uint64_t v24 = v60;
  uint64_t v25 = v61;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v56;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v64[0] = sub_1000C51B8(v32, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v64[0] = swift_getObjectType();
      sub_100094134(&qword_1009205A0);
      uint64_t v34 = String.init<A>(describing:)();
      v64[0] = sub_1000C51B8(v34, v35, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v45 = v57;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    unint64_t v37 = (unint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v55, v14, v25);
    type metadata accessor for RDXPCSuggestedAttributesPerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_1003D5780(v37, (uint64_t)v53);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v39 = PropertyListEncoder.init()();
    id v40 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v41 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v66 = v20;
    v65[0] = v41;
    swift_retain();
    uint64_t v42 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v65, (uint64_t)v19);
    v42(v64, 0);
    sub_100646EBC(&qword_100920580, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse);
    uint64_t v43 = (uint64_t)v53;
    uint64_t v44 = v50;
    uint64_t v60 = v39;
    uint64_t v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v47 = v46;
    sub_100097E38(v45, v46);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v45, v47);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v43, v44);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v55, v25);
  }
  return v45;
}

uint64_t sub_1006376FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a6;
  uint64_t v57 = a5;
  uint64_t v51 = a3;
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  uint64_t v49 = type metadata accessor for REMGroceryDataView.SecondaryGroceryLocaleInvocation.Result();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for REMGroceryDataView.SecondaryGroceryLocaleInvocation.Parameters();
  uint64_t v12 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v54 = (char *)&v47 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v61 = PropertyListDecoder.init()();
  uint64_t v52 = v11;
  id v55 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v65 = v20;
  v64[0] = v22;
  uint64_t v56 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v64, (uint64_t)v19);
  v23(v63, 0);
  sub_100646EBC(&qword_100920558, (void (*)(uint64_t))&type metadata accessor for REMGroceryDataView.SecondaryGroceryLocaleInvocation.Parameters);
  uint64_t v24 = v59;
  uint64_t v25 = v60;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v55;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v63[0] = sub_1000C51B8(v32, v33, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v63[0] = swift_getObjectType();
      sub_100094134(&qword_100920560);
      uint64_t v34 = String.init<A>(describing:)();
      v63[0] = sub_1000C51B8(v34, v35, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v44 = v56;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v54, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_10040CC88((uint64_t)v52);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v38 = PropertyListEncoder.init()();
    id v39 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v40 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v65 = v20;
    v64[0] = v40;
    swift_retain();
    uint64_t v41 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v64, (uint64_t)v19);
    v41(v63, 0);
    sub_100646EBC(&qword_100920568, (void (*)(uint64_t))&type metadata accessor for REMGroceryDataView.SecondaryGroceryLocaleInvocation.Result);
    uint64_t v42 = (uint64_t)v52;
    uint64_t v43 = v49;
    uint64_t v59 = v38;
    uint64_t v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v46 = v45;
    sub_100097E38(v44, v45);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v44, v46);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v42, v43);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v54, v25);
  }
  return v44;
}

uint64_t sub_10063819C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a6;
  uint64_t v58 = a5;
  uint64_t v52 = a3;
  uint64_t v51 = a2;
  uint64_t v54 = a1;
  uint64_t v50 = type metadata accessor for REMRemindersListDataView.ListInvocation.Result();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for REMRemindersListDataView.ListInvocation.Parameters();
  uint64_t v12 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v55 = (char *)&v48 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v62 = PropertyListDecoder.init()();
  uint64_t v53 = v11;
  id v56 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v66 = v20;
  v65[0] = v22;
  uint64_t v57 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v65, (uint64_t)v19);
  v23(v64, 0);
  sub_100646EBC(&qword_100920540, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListInvocation.Parameters);
  uint64_t v24 = v60;
  uint64_t v25 = v61;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v56;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v64[0] = sub_1000C51B8(v32, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v64[0] = swift_getObjectType();
      sub_100094134(&qword_100920548);
      uint64_t v34 = String.init<A>(describing:)();
      v64[0] = sub_1000C51B8(v34, v35, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v45 = v57;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    uint64_t v37 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v55, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_100411190(v51, v52, v21, v37, (uint64_t)v53);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v39 = PropertyListEncoder.init()();
    uint64_t v40 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v41 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v66 = v20;
    v65[0] = v41;
    swift_retain();
    uint64_t v42 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v65, (uint64_t)v19);
    v42(v64, 0);
    sub_100646EBC(&qword_100920550, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListInvocation.Result);
    uint64_t v43 = (uint64_t)v53;
    uint64_t v44 = v50;
    uint64_t v60 = v39;
    uint64_t v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v47 = v46;
    sub_100097E38(v45, v46);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v45, v47);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v43, v44);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v55, v25);
  }
  return v45;
}

uint64_t sub_100638C3C(uint64_t a1, NSObject *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a6;
  uint64_t v58 = a5;
  uint64_t v52 = a3;
  uint64_t v51 = a2;
  uint64_t v54 = a1;
  uint64_t v50 = type metadata accessor for REMAccountsListDataView.Invocation.Result();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Options = type metadata accessor for REMAccountsListDataView.FetchOptions();
  uint64_t v12 = *(void *)(Options - 8);
  __chkstk_darwin(Options);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v55 = (char *)&v48 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v62 = PropertyListDecoder.init()();
  uint64_t v53 = v11;
  id v56 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v66 = v20;
  v65[0] = v22;
  uint64_t v57 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v65, (uint64_t)v19);
  v23(v64, 0);
  sub_100646EBC(&qword_100920508, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.FetchOptions);
  uint64_t v24 = v60;
  uint64_t v25 = Options;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v56;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v64[0] = sub_1000C51B8(v32, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v64[0] = swift_getObjectType();
      sub_100094134(&qword_100920510);
      uint64_t v34 = String.init<A>(describing:)();
      v64[0] = sub_1000C51B8(v34, v35, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v45 = v57;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    uint64_t v37 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v55, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_10045D760(v51, v52, v21, v37, (uint64_t)v53);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v39 = PropertyListEncoder.init()();
    id v40 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v41 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v66 = v20;
    v65[0] = v41;
    swift_retain();
    uint64_t v42 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v65, (uint64_t)v19);
    v42(v64, 0);
    sub_100646EBC(&qword_100920518, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.Invocation.Result);
    uint64_t v43 = (uint64_t)v53;
    uint64_t v44 = v50;
    uint64_t v60 = v39;
    uint64_t v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v47 = v46;
    sub_100097E38(v45, v46);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v45, v47);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v43, v44);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v55, v25);
  }
  return v45;
}

uint64_t sub_1006396DC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a6;
  uint64_t v57 = a5;
  uint64_t v51 = a3;
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  uint64_t v49 = type metadata accessor for REMRemindersListDataView.TodaySectionOrderingModel();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for REMRemindersListDataView.TodaySectionOrderingInvocation.Parameters();
  uint64_t v12 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v54 = (char *)&v47 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v61 = PropertyListDecoder.init()();
  uint64_t v52 = v11;
  id v55 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v65 = v20;
  v64[0] = v22;
  uint64_t v56 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v64, (uint64_t)v19);
  v23(v63, 0);
  sub_100646EBC(&qword_1009204D0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodaySectionOrderingInvocation.Parameters);
  uint64_t v24 = v59;
  uint64_t v25 = v60;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v55;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v63[0] = sub_1000C51B8(v32, v33, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v63[0] = swift_getObjectType();
      sub_100094134(&qword_1009204D8);
      uint64_t v34 = String.init<A>(describing:)();
      v63[0] = sub_1000C51B8(v34, v35, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v44 = v56;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v54, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_100517A64(v50, (uint64_t)v52);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v38 = PropertyListEncoder.init()();
    id v39 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v40 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v65 = v20;
    v64[0] = v40;
    swift_retain();
    uint64_t v41 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v64, (uint64_t)v19);
    v41(v63, 0);
    sub_100646EBC(&qword_1009204E0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodaySectionOrderingModel);
    uint64_t v42 = (uint64_t)v52;
    uint64_t v43 = v49;
    uint64_t v59 = v38;
    uint64_t v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v46 = v45;
    sub_100097E38(v44, v45);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v44, v46);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v42, v43);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v54, v25);
  }
  return v44;
}

uint64_t sub_10063A17C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a6;
  uint64_t v58 = a5;
  uint64_t v52 = a3;
  uint64_t v51 = a2;
  uint64_t v54 = a1;
  uint64_t v50 = type metadata accessor for REMRemindersListDataView.GroupInvocation.Result();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for REMRemindersListDataView.GroupInvocation.Parameters();
  uint64_t v12 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v55 = (char *)&v48 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v62 = PropertyListDecoder.init()();
  uint64_t v53 = v11;
  id v56 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v66 = v20;
  v65[0] = v22;
  uint64_t v57 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v65, (uint64_t)v19);
  v23(v64, 0);
  sub_100646EBC(&qword_100920468, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupInvocation.Parameters);
  uint64_t v24 = v60;
  uint64_t v25 = v61;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v56;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v64[0] = sub_1000C51B8(v32, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v64[0] = swift_getObjectType();
      sub_100094134(&qword_100920470);
      uint64_t v34 = String.init<A>(describing:)();
      v64[0] = sub_1000C51B8(v34, v35, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v45 = v57;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    uint64_t v37 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v55, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_10053DD18((uint64_t)v63, v51, v52, v21, v37, (uint64_t)v53);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v39 = PropertyListEncoder.init()();
    id v40 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v41 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v66 = v20;
    v65[0] = v41;
    swift_retain();
    uint64_t v42 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v65, (uint64_t)v19);
    v42(v64, 0);
    sub_100646EBC(&qword_100920478, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupInvocation.Result);
    uint64_t v43 = (uint64_t)v53;
    uint64_t v44 = v50;
    uint64_t v60 = v39;
    uint64_t v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v47 = v46;
    sub_100097E38(v45, v46);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v45, v47);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v43, v44);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v55, v25);
  }
  return v45;
}

uint64_t sub_10063AC1C(uint64_t a1, NSObject *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v64 = a6;
  uint64_t v57 = a3;
  id v56 = a2;
  uint64_t v59 = a1;
  uint64_t v55 = type metadata accessor for REMListPickerDataView.Model();
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v52 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v51 = (char *)&v49 - v11;
  uint64_t v54 = type metadata accessor for REMListPickerDataView.Invocation.Result();
  uint64_t v50 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v58 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for REMListPickerDataView.Invocation.Parameters();
  uint64_t v60 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v61 = (char *)&v49 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v67 = PropertyListDecoder.init()();
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v71 = v20;
  v70[0] = v22;
  uint64_t v63 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v70, (uint64_t)v19);
  v23(v69, 0);
  sub_100646EBC(&qword_1009202C0, (void (*)(uint64_t))&type metadata accessor for REMListPickerDataView.Invocation.Parameters);
  uint64_t v24 = v65;
  uint64_t v25 = v66;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v62;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v69[0] = sub_1000C51B8(v32, v33, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v69[0] = swift_getObjectType();
      sub_100094134(&qword_1009202C8);
      uint64_t v34 = String.init<A>(describing:)();
      v69[0] = sub_1000C51B8(v34, v35, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v46 = v63;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v60;
    uint64_t v37 = (uint64_t)v61;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v61, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_10067C5EC(v56, v21, v37, (uint64_t)v68, v57);
    uint64_t v39 = v51;
    REMListPickerDataView.Model.init(accounts:)();
    uint64_t v40 = v53;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v52, v39, v55);
    REMListPickerDataView.Invocation.Result.init(model:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v55);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v41 = PropertyListEncoder.init()();
    id v42 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v43 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v71 = v20;
    v70[0] = v43;
    swift_retain();
    uint64_t v44 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v70, (uint64_t)v19);
    v44(v69, 0);
    sub_100646EBC(&qword_1009202D0, (void (*)(uint64_t))&type metadata accessor for REMListPickerDataView.Invocation.Result);
    uint64_t v45 = v54;
    uint64_t v65 = v41;
    uint64_t v46 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v48 = v47;
    sub_100097E38(v46, v47);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v46, v48);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v58, v45);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v61, v25);
  }
  return v46;
}

NSObject *sub_10063B7CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a6;
  uint64_t v57 = a5;
  uint64_t v51 = a3;
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  uint64_t v49 = type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Style = type metadata accessor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle();
  uint64_t v12 = *(void *)(Style - 8);
  __chkstk_darwin(Style);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v54 = (char *)&v47 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v61 = PropertyListDecoder.init()();
  uint64_t v52 = v11;
  id v55 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v65 = v20;
  v64[0] = v22;
  uint64_t v56 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v64, (uint64_t)v19);
  v23(v63, 0);
  sub_100646EBC(&qword_1009203D0, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle);
  uint64_t v24 = v59;
  uint64_t v25 = Style;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v55;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v63[0] = sub_1000C51B8(v32, v33, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v63[0] = swift_getObjectType();
      sub_100094134(&qword_1009203D8);
      uint64_t v34 = String.init<A>(describing:)();
      v63[0] = sub_1000C51B8(v34, v35, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    uint64_t v37 = (uint64_t)v54;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v54, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    id v39 = [self daemonUserDefaults];
    sub_1005701D0((uint64_t)v39, (uint64_t)&off_1008CA6F0, v51, v37, (uint64_t)v52);

    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v59 = PropertyListEncoder.init()();
    id v40 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v41 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v65 = v20;
    v64[0] = v41;
    swift_retain();
    id v42 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v64, (uint64_t)v19);
    v42(v63, 0);
    sub_100646EBC(&qword_1009203E0, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result);
    uint64_t v43 = (uint64_t)v52;
    uint64_t v44 = v49;
    id v29 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v46 = v45;
    sub_100097E38((uint64_t)v29, v45);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34((uint64_t)v29, v46);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v43, v44);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v54, v25);
  }
  return v29;
}

uint64_t sub_10063C290(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a6;
  uint64_t v57 = a5;
  uint64_t v51 = a3;
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  uint64_t v49 = type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation.Result();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation.Parameters();
  uint64_t v12 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v54 = (char *)&v47 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v61 = PropertyListDecoder.init()();
  uint64_t v52 = v11;
  id v55 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v65 = v20;
  v64[0] = v22;
  uint64_t v56 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v64, (uint64_t)v19);
  v23(v63, 0);
  sub_100646EBC(&qword_100920350, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation.Parameters);
  uint64_t v24 = v59;
  uint64_t v25 = v60;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v55;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v63[0] = sub_1000C51B8(v32, v33, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v63[0] = swift_getObjectType();
      sub_100094134(&qword_100920358);
      uint64_t v34 = String.init<A>(describing:)();
      v63[0] = sub_1000C51B8(v34, v35, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v44 = v56;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v54, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_1005AD16C(v50, v51, v21, (uint64_t)v52);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v38 = PropertyListEncoder.init()();
    id v39 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v40 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v65 = v20;
    v64[0] = v40;
    swift_retain();
    uint64_t v41 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v64, (uint64_t)v19);
    v41(v63, 0);
    sub_100646EBC(&qword_100920360, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation.Result);
    uint64_t v42 = (uint64_t)v52;
    uint64_t v43 = v49;
    uint64_t v59 = v38;
    uint64_t v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v46 = v45;
    sub_100097E38(v44, v45);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v44, v46);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v42, v43);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v54, v25);
  }
  return v44;
}

uint64_t sub_10063CD30(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a6;
  uint64_t v58 = a5;
  uint64_t v52 = a3;
  uint64_t v51 = a2;
  uint64_t v54 = a1;
  uint64_t v50 = type metadata accessor for REMRemindersListBatchDeleteInvocation.OldestCompletionDateInvocation.Result();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for REMRemindersListBatchDeleteInvocation.ListType();
  uint64_t v12 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v55 = (char *)&v48 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v62 = PropertyListDecoder.init()();
  uint64_t v53 = v11;
  id v56 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v66 = v20;
  v65[0] = v22;
  uint64_t v57 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v65, (uint64_t)v19);
  v23(v64, 0);
  sub_100646EBC(&qword_100920318, (void (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.ListType);
  uint64_t v24 = v60;
  uint64_t v25 = v61;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v56;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v64[0] = sub_1000C51B8(v32, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v64[0] = swift_getObjectType();
      sub_100094134(&qword_100920320);
      uint64_t v34 = String.init<A>(describing:)();
      v64[0] = sub_1000C51B8(v34, v35, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v45 = v57;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    uint64_t v37 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v55;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v55, v14, v25);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_1005B4DF8(v51, v37, (uint64_t)v53);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v39 = PropertyListEncoder.init()();
    id v40 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v41 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v66 = v20;
    v65[0] = v41;
    swift_retain();
    uint64_t v42 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v65, (uint64_t)v19);
    v42(v64, 0);
    sub_100646EBC(&qword_100920328, (void (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.OldestCompletionDateInvocation.Result);
    uint64_t v43 = (uint64_t)v53;
    uint64_t v44 = v50;
    uint64_t v60 = v39;
    uint64_t v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v47 = v46;
    sub_100097E38(v45, v46);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v45, v47);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v43, v44);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v55, v25);
  }
  return v45;
}

uint64_t sub_10063D7D0(uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a6;
  uint64_t v58 = a5;
  uint64_t v52 = a3;
  uint64_t v51 = a2;
  uint64_t v54 = a1;
  uint64_t v50 = type metadata accessor for REMSuggestedAttributesFeatureExtractor.Result();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for REMSuggestedAttributesFeatureExtractor.Parameters();
  uint64_t v12 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v55 = (char *)&v48 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v62 = PropertyListDecoder.init()();
  uint64_t v53 = v11;
  id v56 = v7;
  if (!a7) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a4;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v66 = v20;
  v65[0] = v22;
  uint64_t v57 = v22;
  swift_retain();
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v65, (uint64_t)v19);
  v23(v64, 0);
  sub_100646EBC(&qword_100920398, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesFeatureExtractor.Parameters);
  uint64_t v24 = v60;
  uint64_t v25 = v61;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v56;
    swift_errorRetain();
    id v28 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v64[0] = sub_1000C51B8(v32, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v64[0] = swift_getObjectType();
      sub_100094134(&qword_1009203A0);
      uint64_t v34 = String.init<A>(describing:)();
      v64[0] = sub_1000C51B8(v34, v35, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v45 = v57;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v36 = v12;
    uint64_t v37 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v55, v14, v25);
    type metadata accessor for RDXPCSuggestedAttributesPerformer();
    throwingCast<A>(_:as:failureMessage:)();
    sub_100573E98(v51, v37, (uint64_t)v53);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v39 = PropertyListEncoder.init()();
    id v40 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v41 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v66 = v20;
    v65[0] = v41;
    swift_retain();
    uint64_t v42 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v65, (uint64_t)v19);
    v42(v64, 0);
    sub_100646EBC(&qword_1009203A8, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesFeatureExtractor.Result);
    uint64_t v43 = (uint64_t)v53;
    uint64_t v44 = v50;
    uint64_t v60 = v39;
    uint64_t v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v47 = v46;
    sub_100097E38(v45, v46);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v45, v47);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v43, v44);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v55, v25);
  }
  return v45;
}

uint64_t sub_10063E270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_100630B88);
}

NSObject *sub_10063E2A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920780, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.FlaggedInvocation.Parameters, &qword_100920788, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlaggedInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlaggedInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1001314B4, &qword_100920798, &qword_100920790);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_10063E358(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920480, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.TodayNotificationInvocation.Parameters, &qword_100920770, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayNotificationInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TodayNotificationInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1001333A8, &qword_100920498, &qword_100920778);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_10063E408(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920750, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.DEBUG_AssignedCountInvocation.Parameters, &qword_100920758, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.DEBUG_AssignedCountInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.DEBUG_AssignedCountInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100179FD0, &qword_100920768, &qword_100920760);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_10063E4B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920480, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.SearchFlatInvocation.Parameters, &qword_100920740, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SearchFlatInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SearchFlatInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1001B1DC4, &qword_100920498, &qword_100920748);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_10063E568(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920728, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters, &qword_1009204F0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1001EE824, &qword_100920738, &qword_100920730);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063E618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063F8F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10063FD70);
}

NSObject *sub_10063E650(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920480, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.DEBUG_PhantomRemindersInvocation.Parameters, &qword_100920700, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.DEBUG_PhantomRemindersInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.DEBUG_PhantomRemindersInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1002295D0, &qword_100920498, &qword_100920708);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_10063E700(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920480, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.SiriFoundInAppsInvocation.Parameters, &qword_1009206F0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SiriFoundInAppsInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SiriFoundInAppsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100242FB4, &qword_100920498, &qword_1009206F8);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063E7B0(uint64_t a1)
{
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    uint64_t v15 = (void *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = v15[1];
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    v19[0] = *v15;
    v19[1] = v16;
    v19[2] = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1005714B0((uint64_t)v19, (uint64_t)&v18);
    if (v1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = sub_100201E6C(v18);
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v9 >= v7) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    if (!v13) {
      break;
    }
LABEL_17:
    unint64_t v6 = (v13 - 1) & v13;
  }
  int64_t v14 = v9 + 1;
  if (v9 + 1 >= v7) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v9 + 2;
  if (v9 + 2 >= v7) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v9 + 3;
  if (v9 + 3 >= v7) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v9 + 4;
  if (v9 + 4 >= v7)
  {
LABEL_26:
    swift_release();
    return (uint64_t)v20;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
LABEL_16:
    int64_t v9 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

NSObject *sub_10063E994(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_1009206D0, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.ScheduledByDayInvocation.Parameters, &qword_1009206D8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledByDayInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ScheduledByDayInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1002448C0, &qword_1009206E8, &qword_1009206E0);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063EA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_1006321F0);
}

uint64_t sub_10063EA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_100632C90);
}

uint64_t sub_10063EAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_100633730);
}

uint64_t sub_10063EAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_1006341D0);
}

NSObject *sub_10063EB24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920650, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.TaggedInvocation.Parameters, &qword_100920658, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TaggedInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TaggedInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10029C150, &qword_100920668, &qword_100920660);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_10063EBD4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_1009204B0, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.AppIntentsSectionsInvocation.Parameters, &qword_100920640, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AppIntentsSectionsInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AppIntentsSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1002EA6C0, &qword_1009204C8, &qword_100920648);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063EC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_100634C7C);
}

uint64_t sub_10063ECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063F8F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1006405D8);
}

uint64_t sub_10063ECF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_10063571C);
}

NSObject *sub_10063ED2C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920480, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.ScheduledFlatInvocation.Parameters, &qword_1009205D8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledFlatInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ScheduledFlatInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1003AC1E8, &qword_100920498, &qword_1009205E0);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063EDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_1006361BC);
}

uint64_t sub_10063EE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063EEF4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100640F64);
}

uint64_t sub_10063EE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_100636C5C);
}

uint64_t sub_10063EE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063EEF4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100641A2C);
}

uint64_t sub_10063EEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063EEF4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1006425C4);
}

uint64_t sub_10063EEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a10(a1, a4, a5, a6, a7);
  if (v10) {
    return v12;
  }
  return result;
}

uint64_t sub_10063EF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_1006376FC);
}

uint64_t sub_10063EF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_10063819C);
}

NSObject *sub_10063EFB0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920520, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.TodayGroupInvocation.Parameters, &qword_100920528, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayGroupInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TodayGroupInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10042A030, &qword_100920538, &qword_100920530);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063F060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_100638C3C);
}

NSObject *sub_10063F098(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_1009204E8, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters, &qword_1009204F0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1004EA2FC, &qword_100920500, &qword_1009204F8);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063F148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_1006396DC);
}

NSObject *sub_10063F180(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_1009204B0, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.AllSectionsInvocation.Parameters, &qword_1009204B8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AllSectionsInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AllSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10052D1BC, &qword_1009204C8, &qword_1009204C0);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_10063F230(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920378, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.AllInvocation.Parameters, &qword_1009204A0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AllInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AllInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100532F6C, &qword_100920390, &qword_1009204A8);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_10063F2E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920480, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.RecentlyDeletedInvocation.Parameters, &qword_100920488, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.RecentlyDeletedInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.RecentlyDeletedInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100534660, &qword_100920498, &qword_100920490);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063F390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_10063A17C);
}

NSObject *sub_10063F3C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920448, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters, &qword_100920450, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1005497AC, &qword_100920460, &qword_100920458);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063F478(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t result = sub_100644908(a1, a2, a4, a5, a6, a7, (uint64_t (*)(void))&type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters, &qword_100920420, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters, (uint64_t (*)(uint64_t, char *))sub_100571DFC, &qword_100920430, (void (*)(void))sub_100646BB0, &qword_100920428);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063F540(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t result = sub_100644908(a1, a2, a4, a5, a6, a7, (uint64_t (*)(void))&type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsDetailedInvocation.Parameters, &qword_1009203F8, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsDetailedInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.AllHashtagLabelsDetailedInvocation.Parameters, (uint64_t (*)(uint64_t, char *))sub_100573208, &qword_100920408, (void (*)(void))sub_100646B0C, &qword_100920400);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063F608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063F8F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100643E20);
}

uint64_t sub_10063F640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_10063B7CC);
}

uint64_t sub_10063F678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063F8F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1006432BC);
}

uint64_t sub_10063F6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_10063D7D0);
}

NSObject *sub_10063F6E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920378, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.SearchInvocation.Parameters, &qword_100920380, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SearchInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SearchInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1005922AC, &qword_100920390, &qword_100920388);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_10063F798(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_1009202D8, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.ListSectionsInvocation.Parameters, &qword_100920368, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1005A6AC8, &qword_1009202F0, &qword_100920370);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063F848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_10063C290);
}

uint64_t sub_10063F880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063F8F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1006452C4);
}

uint64_t sub_10063F8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063F8F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100645EF4);
}

uint64_t sub_10063F8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a10(a1, a2, a4, a5, a6, a7);
  if (v10) {
    return v12;
  }
  return result;
}

uint64_t sub_10063F93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_10063CD30);
}

NSObject *sub_10063F974(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_1009202F8, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters, &qword_100920300, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1005B9E20, &qword_100920310, &qword_100920308);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_10063FA24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_1009202D8, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.PublicTemplateInvocation.Parameters, &qword_1009202E0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.PublicTemplateInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.PublicTemplateInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100622764, &qword_1009202F0, &qword_1009202E8);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063FAD4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100920268);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100920268);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10063FB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10063FBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_10063AC1C);
}

uint64_t sub_10063FBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t result = a10();
  if (v10) {
    return v12;
  }
  return result;
}

NSObject *sub_10063FC10(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_1009202A0, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.GroupSectionsInvocation.Parameters, &qword_1009202A8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupSectionsInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.GroupSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100683E28, &qword_1009202B8, &qword_1009202B0);
  if (v7) {
    return v9;
  }
  return result;
}

NSObject *sub_10063FCC0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10063171C(a1, a2, a3, a4, a5, a6, a7, &qword_100920280, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.AssignedInvocation.Parameters, &qword_100920288, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AssignedInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AssignedInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100689318, &qword_100920298, &qword_100920290);
  if (v7) {
    return v9;
  }
  return result;
}

uint64_t sub_10063FD70(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v36[0] = a2;
  v36[1] = a1;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v39 = PropertyListDecoder.init()();
  if (!a6) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v11 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v12 = a3;
  uint64_t v13 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v44 = v11;
  v43[0] = v13;
  uint64_t v37 = v13;
  swift_retain();
  int64_t v14 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v43, (uint64_t)v10);
  v14(v42, 0);
  sub_100094134(&qword_10091C480);
  sub_100646D4C(&qword_100920710, &qword_100912C00);
  uint64_t v15 = v38;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v15)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v17 = (id)v36[2];
    swift_errorRetain();
    id v18 = v17;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      v43[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315394;
      swift_getErrorValue();
      uint64_t v22 = Error.rem_errorDescription.getter();
      v42[0] = sub_1000C51B8(v22, v23, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v21 + 12) = 2080;
      v42[0] = swift_getObjectType();
      sub_100094134(&qword_100920718);
      uint64_t v24 = String.init<A>(describing:)();
      v42[0] = sub_1000C51B8(v24, v25, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v33 = v37;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v26 = v43[0];
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    id v28 = v41;
    unint64_t v29 = sub_1001FDE54(v36[0], v12, v26);
    uint64_t v38 = v26;
    unint64_t v40 = v29;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    id v30 = v12;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v31 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v44 = v11;
    v43[0] = v31;
    swift_retain();
    uint64_t v32 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v43, (uint64_t)v10);
    v32(v42, 0);
    sub_100094134(&qword_10090FE50);
    sub_100646DE0();
    uint64_t v33 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v35 = v34;
    sub_100097E38(v33, v34);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v33, v35);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  return v33;
}

char *sub_1006405D8(char *a1, char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v43 = a5;
  v38[0] = a2;
  v38[1] = a1;
  uint64_t v45 = type metadata accessor for REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters();
  uint64_t v40 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)v38 - v11;
  uint64_t v13 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v46 = PropertyListDecoder.init()();
  uint64_t v39 = v12;
  if (!a6) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v16 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v17 = a3;
  uint64_t v18 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v51 = v16;
  v50[0] = v18;
  uint64_t v42 = v18;
  swift_retain();
  uint64_t v19 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v50, (uint64_t)v15);
  v19(v49, 0);
  sub_100646EBC(&qword_100920600, (void (*)(uint64_t))&type metadata accessor for REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters);
  os_log_type_t v20 = v44;
  uint64_t v21 = v45;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v20)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v23 = v41;
    swift_errorRetain();
    id v24 = v23;
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v9 = (char *)swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315394;
      swift_getErrorValue();
      uint64_t v27 = Error.rem_errorDescription.getter();
      v49[0] = sub_1000C51B8(v27, v28, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *((_WORD *)v9 + 6) = 2080;
      v49[0] = swift_getObjectType();
      sub_100094134(&qword_100920608);
      uint64_t v29 = String.init<A>(describing:)();
      v49[0] = sub_1000C51B8(v29, v30, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v9, v21);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v32 = v48;
    uint64_t v44 = sub_1003720B8(v38[0], v17);
    unint64_t v47 = v44;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    id v33 = v17;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v34 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v51 = v16;
    v50[0] = v34;
    swift_retain();
    unint64_t v35 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v50, (uint64_t)v15);
    v35(v49, 0);
    sub_100094134(&qword_100920610);
    sub_100646CA8();
    uint64_t v9 = (char *)dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v37 = v36;
    sub_100097E38((uint64_t)v9, v36);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34((uint64_t)v9, v37);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v45);
  }
  return v9;
}

NSObject *sub_100640F64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  uint64_t v66 = a1;
  uint64_t v7 = sub_100094134(&qword_1009171B8);
  __chkstk_darwin(v7 - 8);
  uint64_t v62 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionResponse();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v64 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionRequest();
  uint64_t v12 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v67 = (char *)&v62 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v74 = PropertyListDecoder.init()();
  uint64_t v65 = v9;
  uint64_t v63 = v10;
  if (!a5) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v21 = a2;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v79 = v20;
  uint64_t v77 = v22;
  uint64_t v69 = v22;
  swift_retain();
  id v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)&v77, (uint64_t)v19);
  v23(v76, 0);
  sub_100646EBC(&qword_1009205A8, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionRequest);
  uint64_t v24 = v72;
  uint64_t v25 = v73;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v68;
    swift_errorRetain();
    id v28 = v27;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v76[0] = sub_1000C51B8(v32, v33, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v76[0] = swift_getObjectType();
      sub_100094134(&qword_1009205B0);
      uint64_t v34 = String.init<A>(describing:)();
      v76[0] = sub_1000C51B8(v34, v35, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    unint64_t v36 = v67;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v67, v14, v25);
    type metadata accessor for RDXPCSuggestedAttributesPerformer();
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v72 = v12;
    uint64_t v38 = sub_1003D83DC(v75, v21, v36);
    uint64_t v71 = 0;
    uint64_t v77 = (uint64_t)v38;
    char v78 = 0;
    sub_100094134(&qword_1009171D8);
    Result.eraseToCodableError()();
    uint64_t v39 = v64;
    REMSuggestedAttributesHarvester.MentionsExtractionResponse.init(result:)();
    sub_100646C9C((uint64_t)v38, 0);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v40 = PropertyListEncoder.init()();
    id v41 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v42 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v79 = v20;
    uint64_t v77 = v42;
    swift_retain();
    uint64_t v43 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)&v77, (uint64_t)v19);
    v43(v76, 0);
    uint64_t v44 = v39;
    sub_100646EBC(&qword_1009205B8, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionResponse);
    uint64_t v45 = v65;
    uint64_t v46 = v40;
    uint64_t v47 = v71;
    uint64_t v48 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v47)
    {
      uint64_t v71 = v42;
      if (qword_100907AA0 != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      sub_10008E2DC(v50, (uint64_t)qword_100920268);
      id v51 = v68;
      swift_errorRetain();
      id v52 = v51;
      swift_errorRetain();
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v70 = v46;
        uint64_t v77 = v56;
        *(_DWORD *)uint64_t v55 = 136315394;
        swift_getErrorValue();
        uint64_t v57 = Error.rem_errorDescription.getter();
        v76[0] = sub_1000C51B8(v57, v58, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v55 + 12) = 2080;
        v76[0] = swift_getObjectType();
        sub_100094134(&qword_1009205B0);
        uint64_t v59 = String.init<A>(describing:)();
        v76[0] = sub_1000C51B8(v59, v60, &v77);
        uint64_t v25 = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        uint64_t v45 = v65;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed to encode the result of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v55, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v44 = v64;
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v29 = v67;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v44, v45);

      (*(void (**)(NSObject *, uint64_t))(v72 + 8))(v29, v25);
    }
    else
    {
      uint64_t v29 = v48;
      unint64_t v61 = v49;
      sub_100097E38(v48, v49);
      dispatch thunk of REMStoreObjectsContainer.storages.getter();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_100097F34((uint64_t)v29, v61);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v39, v45);

      (*(void (**)(char *, uint64_t))(v72 + 8))(v67, v25);
    }
  }
  return v29;
}

NSObject *sub_100641A2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v60 = a4;
  uint64_t v59 = a3;
  uint64_t v55 = a1;
  uint64_t v54 = sub_100094134(&qword_100917208);
  uint64_t v50 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  unint64_t v49 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v52 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for REMSuggestedAttributesHarvester.PostSuggestionAnalyticsRequest();
  uint64_t v12 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v56 = (char *)&v49 - v16;
  uint64_t v17 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v63 = PropertyListDecoder.init()();
  uint64_t v53 = v9;
  uint64_t v51 = v10;
  id v57 = v5;
  if (!a5) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v20 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v21 = a2;
  uint64_t v22 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v67 = v20;
  v66[0] = v22;
  uint64_t v58 = v22;
  swift_retain();
  id v23 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v66, (uint64_t)v19);
  v23(v65, 0);
  sub_100646EBC(&qword_100920588, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.PostSuggestionAnalyticsRequest);
  uint64_t v24 = v61;
  uint64_t v25 = v62;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v24)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v27 = v57;
    swift_errorRetain();
    id v28 = v27;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v66[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_getErrorValue();
      uint64_t v32 = Error.rem_errorDescription.getter();
      v65[0] = sub_1000C51B8(v32, v33, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v65[0] = swift_getObjectType();
      sub_100094134(&qword_100920590);
      uint64_t v34 = String.init<A>(describing:)();
      v65[0] = sub_1000C51B8(v34, v35, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v56, v14, v25);
    type metadata accessor for RDXPCSuggestedAttributesPerformer();
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v61 = v12;
    if (qword_100907460 != -1) {
      swift_once();
    }
    uint64_t v37 = qword_1009421E8;
    uint64_t v38 = REMSuggestedAttributesHarvester.PostSuggestionAnalyticsRequest.reminder.getter();
    uint64_t v39 = v50;
    uint64_t v40 = v49;
    (*(void (**)(char *, void, uint64_t))(v50 + 104))(v49, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v54);
    uint64_t v41 = swift_allocObject();
    uint64_t v60 = v38;
    *(void *)(v41 + 16) = v38;
    *(void *)(v41 + 24) = v37;
    swift_retain();
    swift_retain();
    dispatch thunk of REMCache.performReadOnly(_:operations:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v54);
    swift_release();
    uint64_t v42 = v52;
    REMSuggestedAttributesHarvester.BooleanResponse.init(result:)();
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    id v43 = v21;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v44 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v67 = v20;
    v66[0] = v44;
    swift_retain();
    uint64_t v45 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v66, (uint64_t)v19);
    v45(v65, 0);
    sub_100646EBC(&qword_100920580, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse);
    uint64_t v46 = v53;
    uint64_t v29 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v48 = v47;
    sub_100097E38((uint64_t)v29, v47);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34((uint64_t)v29, v48);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v46);

    (*(void (**)(char *, uint64_t))(v61 + 8))(v56, v62);
  }
  return v29;
}

id sub_1006425C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v69 = a4;
  uint64_t v68 = a3;
  uint64_t v63 = a1;
  uint64_t v62 = sub_100094134(&qword_100917208);
  uint64_t v57 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v56 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v61 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType();
  uint64_t v52 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v64 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v59 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for REMSuggestedAttributesHarvester.RecordSuggestionRequest();
  uint64_t v14 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v65 = (char *)&v52 - v18;
  uint64_t v19 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v19 - 8);
  id v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v72 = PropertyListDecoder.init()();
  uint64_t v60 = v11;
  uint64_t v58 = v12;
  id v66 = v5;
  if (!a5) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v22 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v23 = a2;
  uint64_t v24 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v76 = v22;
  uint64_t v75 = v24;
  uint64_t v67 = v24;
  swift_retain();
  uint64_t v25 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)&v75, (uint64_t)v21);
  v25(v74, 0);
  sub_100646EBC(&qword_100920570, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.RecordSuggestionRequest);
  uint64_t v26 = v70;
  uint64_t v27 = v71;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v26)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v29 = v66;
    swift_errorRetain();
    id v30 = v29;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      swift_getErrorValue();
      uint64_t v34 = Error.rem_errorDescription.getter();
      v74[0] = sub_1000C51B8(v34, v35, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v33 + 12) = 2080;
      v74[0] = swift_getObjectType();
      sub_100094134(&qword_100920578);
      uint64_t v36 = String.init<A>(describing:)();
      v74[0] = sub_1000C51B8(v36, v37, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v65, v16, v27);
    type metadata accessor for RDXPCSuggestedAttributesPerformer();
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v70 = v14;
    if (qword_100907460 != -1) {
      swift_once();
    }
    uint64_t v69 = qword_1009421E8;
    uint64_t v68 = REMSuggestedAttributesHarvester.RecordSuggestionRequest.suggestionValue.getter();
    unint64_t v40 = v39;
    REMSuggestedAttributesHarvester.RecordSuggestionRequest.suggestionType.getter();
    uint64_t v41 = (uint64_t)v61;
    REMSuggestedAttributesHarvester.RecordSuggestionRequest.pipeline.getter();
    uint64_t v42 = (void *)REMSuggestedAttributesHarvester.RecordSuggestionRequest.reminderID.getter();
    uint64_t v43 = v57;
    uint64_t v44 = (uint64_t)v56;
    (*(void (**)(char *, void, uint64_t))(v57 + 104))(v56, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v62);
    sub_1003D05A8(v68, v40, v64, v41, v42, v44, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v62);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v61, v55);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v64, v53);
    uint64_t v45 = v59;
    REMSuggestedAttributesHarvester.BooleanResponse.init(result:)();
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    id v46 = v23;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v47 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v76 = v22;
    uint64_t v75 = v47;
    swift_retain();
    unint64_t v48 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)&v75, (uint64_t)v21);
    v48(v74, 0);
    sub_100646EBC(&qword_100920580, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse);
    uint64_t v49 = v60;
    id v30 = (id)dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v51 = v50;
    sub_100097E38((uint64_t)v30, v50);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34((uint64_t)v30, v51);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v45, v49);

    (*(void (**)(char *, uint64_t))(v70 + 8))(v65, v71);
  }
  return v30;
}

uint64_t sub_1006432BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v46 = a5;
  v41[0] = a2;
  v41[1] = a1;
  uint64_t v48 = type metadata accessor for REMHashtagLabelDataView.HashtagIDsWithHashtagLabelNamesInvocation.Parameters();
  uint64_t v42 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v43 = (char *)v41 - v12;
  uint64_t v13 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v49 = PropertyListDecoder.init()();
  if (!a6) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v16 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v17 = a3;
  uint64_t v18 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v54 = v16;
  v53[0] = v18;
  uint64_t v45 = v18;
  swift_retain();
  uint64_t v19 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v53, (uint64_t)v15);
  v19(v52, 0);
  sub_100646EBC(&qword_1009203B0, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.HashtagIDsWithHashtagLabelNamesInvocation.Parameters);
  id v20 = v47;
  uint64_t v21 = v48;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v20)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v23 = v44;
    swift_errorRetain();
    id v24 = v23;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      a4 = swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      *(_DWORD *)a4 = 136315394;
      swift_getErrorValue();
      uint64_t v27 = Error.rem_errorDescription.getter();
      v52[0] = sub_1000C51B8(v27, v28, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(a4 + 12) = 2080;
      v52[0] = swift_getObjectType();
      sub_100094134(&qword_1009203B8);
      uint64_t v29 = String.init<A>(describing:)();
      v52[0] = sub_1000C51B8(v29, v30, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)a4, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    id v47 = v17;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v43, v10, v21);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    v53[0] = REMHashtagLabelDataView.HashtagIDsWithHashtagLabelNamesInvocation.Parameters.hashtagLabelNamesToSearch.getter();
    sub_100094134(&qword_100911CB0);
    sub_1000967F4((unint64_t *)&qword_100911CB8, &qword_100911CB0);
    uint64_t v32 = Sequence.compactMapToSet<A>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v33 = sub_1003E7CAC(v32, 0, v41[0]);
    swift_bridgeObjectRelease();
    uint64_t v34 = sub_10063E7B0(v33);
    swift_bridgeObjectRelease();
    v53[0] = v34;
    sub_100094134(&qword_100910030);
    type metadata accessor for REMObjectID_Codable();
    sub_1000967F4(&qword_1009203C0, &qword_100910030);
    sub_100646EBC((unint64_t *)&unk_1009110C0, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
    uint64_t v35 = Sequence.mapToSet<A>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v50 = v35;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    id v36 = v47;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v37 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v54 = v16;
    v53[0] = v37;
    swift_retain();
    uint64_t v38 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v53, (uint64_t)v15);
    v38(v52, 0);
    sub_100094134(&qword_10091C480);
    sub_100646D4C(&qword_1009203C8, &qword_100912BE8);
    a4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v40 = v39;
    sub_100097E38(a4, v39);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(a4, v40);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v48);
  }
  return a4;
}

id sub_100643E20(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v52 = a5;
  uint64_t v43 = a2;
  uint64_t v47 = a1;
  uint64_t v46 = type metadata accessor for REMHashtagLabelDataView.Operation();
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  id v44 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters();
  uint64_t v49 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v48 = (char *)&v42 - v12;
  uint64_t v13 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v55 = PropertyListDecoder.init()();
  if (!a6) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v16 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v17 = a3;
  uint64_t v18 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v60 = v16;
  v59[0] = v18;
  uint64_t v51 = v18;
  swift_retain();
  uint64_t v19 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v59, (uint64_t)v15);
  v19(v58, 0);
  sub_100646EBC(&qword_1009203E8, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters);
  uint64_t v20 = v53;
  uint64_t v21 = v54;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v20)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v23 = v50;
    swift_errorRetain();
    id v24 = v23;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      v59[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      swift_getErrorValue();
      uint64_t v28 = Error.rem_errorDescription.getter();
      v58[0] = sub_1000C51B8(v28, v29, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v27 + 12) = 2080;
      v58[0] = swift_getObjectType();
      sub_100094134(&qword_1009203F0);
      uint64_t v30 = String.init<A>(describing:)();
      v58[0] = sub_1000C51B8(v30, v31, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v48, v10, v21);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v33 = REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.include.getter();
    uint64_t v34 = REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.exclude.getter();
    uint64_t v35 = (uint64_t)v44;
    REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.operation.getter();
    id v36 = sub_100572558(v33, v34, v35, v43);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v35, v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v56 = v36;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    id v37 = v17;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v38 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v60 = v16;
    v59[0] = v38;
    swift_retain();
    unint64_t v39 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v59, (uint64_t)v15);
    v39(v58, 0);
    sub_100094134(&qword_10091C480);
    sub_100646D4C(&qword_1009203C8, &qword_100912BE8);
    id v24 = (id)dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v41 = v40;
    sub_100097E38((uint64_t)v24, v40);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34((uint64_t)v24, v41);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v54);
  }
  return v24;
}

uint64_t sub_100644908(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t (*a7)(void), unint64_t *a8, void (*a9)(uint64_t), uint64_t a10, uint64_t (*a11)(uint64_t, char *), uint64_t *a12, void (*a13)(void), uint64_t *a14)
{
  uint64_t v56 = a8;
  uint64_t v58 = a5;
  uint64_t v57 = a4;
  uint64_t v48 = a2;
  uint64_t v50 = a1;
  uint64_t v49 = a14;
  uint64_t v55 = a10;
  uint64_t v60 = a7(0);
  uint64_t v52 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  id v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v48 - v19;
  uint64_t v21 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v21 - 8);
  id v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v61 = PropertyListDecoder.init()();
  uint64_t v51 = v20;
  if (!a6) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v24 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v25 = a3;
  uint64_t v26 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v66 = v24;
  v65[0] = v26;
  uint64_t v54 = v26;
  swift_retain();
  uint64_t v27 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v65, (uint64_t)v23);
  v27(v64, 0);
  sub_100646EBC(v56, a9);
  uint64_t v28 = v59;
  uint64_t v29 = v60;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v28)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_10008E2DC(v30, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v31 = v53;
    swift_errorRetain();
    id v32 = v31;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v29 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315394;
      swift_getErrorValue();
      uint64_t v35 = Error.rem_errorDescription.getter();
      v64[0] = sub_1000C51B8(v35, v36, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v29 + 12) = 2080;
      v64[0] = swift_getObjectType();
      sub_100094134(v49);
      uint64_t v37 = String.init<A>(describing:)();
      v64[0] = sub_1000C51B8(v37, v38, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    unint64_t v39 = v51;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v17, v29);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    unint64_t v41 = v63;
    uint64_t v42 = a11(v48, v39);
    uint64_t v58 = a12;
    uint64_t v59 = a13;
    uint64_t v62 = v42;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    id v43 = v25;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v44 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v66 = v24;
    v65[0] = v44;
    swift_retain();
    uint64_t v45 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v65, (uint64_t)v23);
    v45(v64, 0);
    sub_100094134(v58);
    v59();
    uint64_t v29 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v47 = v46;
    sub_100097E38(v29, v46);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34(v29, v47);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v60);
  }
  return v29;
}

NSObject *sub_1006452C4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v63 = a4;
  uint64_t v64 = a5;
  uint64_t v57 = a2;
  uint64_t v59 = a1;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v58 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for REMRemindersListBatchDeleteInvocation.ListType();
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result();
  uint64_t v51 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v52 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters();
  uint64_t v14 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v60 = (char *)&v51 - v18;
  uint64_t v19 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v67 = PropertyListDecoder.init()();
  uint64_t v53 = v12;
  uint64_t v56 = v11;
  if (!a6) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v22 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v23 = a3;
  uint64_t v24 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v71 = v22;
  v70[0] = v24;
  uint64_t v62 = v24;
  swift_retain();
  id v25 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v70, (uint64_t)v21);
  v25(v69, 0);
  sub_100646EBC(&qword_100920330, (void (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters);
  uint64_t v26 = v65;
  uint64_t v27 = v66;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v26)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v29 = v61;
    swift_errorRetain();
    id v30 = v29;
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      swift_getErrorValue();
      uint64_t v34 = Error.rem_errorDescription.getter();
      v69[0] = sub_1000C51B8(v34, v35, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v33 + 12) = 2080;
      v69[0] = swift_getObjectType();
      sub_100094134(&qword_100920348);
      uint64_t v36 = String.init<A>(describing:)();
      v69[0] = sub_1000C51B8(v36, v37, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v38 = v14;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v60, v16, v27);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    unint64_t v40 = v56;
    REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters.list.getter();
    uint64_t v41 = (uint64_t)v58;
    REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters.completedBeforeDate.getter();
    uint64_t v42 = sub_1005B38A8(v57, v41);
    uint64_t v65 = v38;
    sub_1000EACF4(v41);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v40, v55);
    sub_1005B7634((unint64_t)v42, v23);
    swift_bridgeObjectRelease();
    id v43 = v52;
    REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result.init(deletedReminderIDs:accounts:)();
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v44 = PropertyListEncoder.init()();
    id v45 = v23;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v46 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v71 = v22;
    v70[0] = v46;
    swift_retain();
    unint64_t v47 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v70, (uint64_t)v21);
    v47(v69, 0);
    sub_100646EBC(&qword_100920340, (void (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result);
    uint64_t v48 = v53;
    uint64_t v64 = v44;
    id v31 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v50 = v49;
    sub_100097E38((uint64_t)v31, v49);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34((uint64_t)v31, v50);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v43, v48);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v60, v66);
  }
  return v31;
}

NSObject *sub_100645EF4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v72 = a5;
  uint64_t v71 = a4;
  uint64_t v66 = a2;
  uint64_t v67 = a1;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for REMRemindersListBatchDeleteInvocation.ListType();
  uint64_t v62 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result();
  uint64_t v59 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v61 = (uint64_t)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters();
  uint64_t v15 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v68 = (char *)&v59 - v19;
  uint64_t v20 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v75 = PropertyListDecoder.init()();
  id v69 = v6;
  uint64_t v65 = v11;
  uint64_t v64 = v13;
  if (!a6) {
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v23 = type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v24 = a3;
  uint64_t v25 = REMStoreObjectsContainer.init(store:storages:)();
  static CodingUserInfoKey.remStoragesContainer.getter();
  uint64_t v79 = v23;
  v78[0] = v25;
  uint64_t v70 = v25;
  swift_retain();
  uint64_t v26 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  sub_10035D778((uint64_t)v78, (uint64_t)v22);
  v26(v77, 0);
  sub_100646EBC(&qword_100920330, (void (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters);
  uint64_t v27 = v73;
  uint64_t v28 = v74;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v27)
  {
    if (qword_100907AA0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_100920268);
    swift_errorRetain();
    id v30 = v69;
    swift_errorRetain();
    id v31 = v30;
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      v78[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      swift_getErrorValue();
      uint64_t v35 = Error.rem_errorDescription.getter();
      v77[0] = sub_1000C51B8(v35, v36, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v34 + 12) = 2080;
      v77[0] = swift_getObjectType();
      sub_100094134(&qword_100920338);
      uint64_t v37 = String.init<A>(describing:)();
      v77[0] = sub_1000C51B8(v37, v38, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_willThrow();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v39 = v15;
    unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    uint64_t v41 = v68;
    v40(v68, v17, v28);
    type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v73 = v39;
    id v43 = v64;
    REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters.list.getter();
    uint64_t v44 = (uint64_t)v65;
    REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters.completedBeforeDate.getter();
    id v45 = v66;
    uint64_t v46 = sub_1005B38A8(v66, v44);
    sub_1000EACF4(v44);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v63);
    unint64_t v47 = v45;
    uint64_t v48 = v61;
    sub_1005B3AA0((unint64_t)v46, v47, v24, v61);
    swift_bridgeObjectRelease();
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v49 = PropertyListEncoder.init()();
    id v50 = v24;
    sub_1002EDEB8((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject();
    uint64_t v51 = REMStoreObjectsContainer.init(store:storages:)();
    static CodingUserInfoKey.remStoragesContainer.getter();
    uint64_t v79 = v23;
    v78[0] = v51;
    swift_retain();
    uint64_t v52 = (void (*)(void *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
    sub_10035D778((uint64_t)v78, (uint64_t)v22);
    v52(v77, 0);
    sub_100646EBC(&qword_100920340, (void (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result);
    uint64_t v53 = v48;
    uint64_t v54 = v60;
    uint64_t v72 = v49;
    uint64_t v55 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    uint64_t v56 = v73;
    os_log_type_t v32 = v55;
    unint64_t v58 = v57;
    sub_100097E38(v55, v57);
    dispatch thunk of REMStoreObjectsContainer.storages.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100097F34((uint64_t)v32, v58);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v53, v54);

    (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v74);
  }
  return v32;
}

unint64_t sub_100646B0C()
{
  unint64_t result = qword_100920410;
  if (!qword_100920410)
  {
    sub_100096058(&qword_100920408);
    sub_100646EBC(&qword_100920418, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDetailed_Codable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920410);
  }
  return result;
}

unint64_t sub_100646BB0()
{
  unint64_t result = qword_100920438;
  if (!qword_100920438)
  {
    sub_100096058(&qword_100920430);
    sub_100646EBC(&qword_100920440, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabel_Codable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920438);
  }
  return result;
}

uint64_t sub_100646C54()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100646C94(uint64_t a1)
{
  sub_1003D12C8(a1, *(void *)(v1 + 16));
}

uint64_t sub_100646C9C(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_100646CA8()
{
  unint64_t result = qword_100920618;
  if (!qword_100920618)
  {
    sub_100096058(&qword_100920610);
    sub_100646EBC(&qword_100920620, (void (*)(uint64_t))&type metadata accessor for REMReminder_Codable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920618);
  }
  return result;
}

uint64_t sub_100646D4C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_10091C480);
    sub_100646EBC(a2, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100646DE0()
{
  unint64_t result = qword_100920720;
  if (!qword_100920720)
  {
    sub_100096058(&qword_10090FE50);
    sub_100646EBC(&qword_100912BE8, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
    sub_100646EBC(&qword_100919318, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920720);
  }
  return result;
}

uint64_t sub_100646EBC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100646F04()
{
  uint64_t v1 = type metadata accessor for UUID();
  unint64_t v171 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v122 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for REMStringMatchingStyle();
  uint64_t v170 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v156 = (char *)&v122 - v8;
  uint64_t v172 = type metadata accessor for REMSearchCriterion();
  uint64_t v169 = *(void *)(v172 - 8);
  uint64_t v9 = __chkstk_darwin(v172);
  uint64_t v166 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v158 = (char *)&v122 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v122 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v167 = (char *)&v122 - v17;
  __chkstk_darwin(v16);
  int v168 = (char *)&v122 - v18;
  uint64_t v19 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v174 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v22 = (char *)&v122 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  id v24 = (char *)&v122 - v23;
  uint64_t v25 = _s10PredicatesOMa_3();
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v122 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = _swiftEmptyArrayStorage;
  sub_100649A10(v0, (uint64_t)v27);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v47 = *(void *)v27;
      uint64_t v165 = *(void *)(*(void *)v27 + 16);
      if (!v165)
      {
        swift_bridgeObjectRelease();
        uint64_t v29 = 0;
        goto LABEL_103;
      }
      uint64_t v173 = v1;
      int v143 = 0;
      unint64_t v48 = 0;
      unint64_t v49 = (*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80);
      int v164 = enum case for REMSearchCriterion.itemTypes(_:);
      uint64_t v163 = v47 + v49;
      int v155 = enum case for REMSearchCriterion.objectID(_:);
      int v150 = enum case for REMSearchCriterion.accountID(_:);
      int v148 = enum case for REMSearchCriterion.listID(_:);
      int v146 = enum case for REMSearchCriterion.textualField(_:);
      int v145 = enum case for REMSearchCriterion.displayName(_:);
      int v142 = enum case for REMSearchCriterion.isCompleted(_:);
      int v141 = enum case for REMSearchCriterion.completionDate(_:);
      int v140 = enum case for REMSearchCriterion.hasLocation(_:);
      uint64_t v144 = (void (**)(char *, uint64_t))(v170 + 8);
      id v50 = (void (**)(char *, void, uint64_t, uint64_t))(v171 + 56);
      id v137 = (void (**)(char *, uint64_t, uint64_t))(v170 + 32);
      Class v136 = (void (**)(char *, char *, uint64_t))(v170 + 16);
      uint64_t v135 = (uint64_t (**)(char *, uint64_t))(v170 + 88);
      int v139 = enum case for REMSearchCriterion.location(_:);
      *(void *)&long long v28 = 136315138;
      long long v154 = v28;
      int v133 = enum case for REMSearchCriterion.dueDate(_:);
      int v131 = enum case for REMSearchCriterion.hasDueDate(_:);
      int v129 = enum case for REMSearchCriterion.modifiedDate(_:);
      int v128 = enum case for REMSearchCriterion.creationDate(_:);
      int v127 = enum case for REMSearchCriterion.isRecurrent(_:);
      int v126 = enum case for REMSearchCriterion.isFlagged(_:);
      int v125 = enum case for REMSearchCriterion.spotlightItemIdentifier(_:);
      int v124 = enum case for REMSearchCriterion.daCalendarItemUniqueIdentifier(_:);
      int v123 = enum case for REMSearchCriterion.listType(_:);
      long long v151 = xmmword_100776E80;
      int v134 = enum case for REMStringMatchingStyle.exact(_:);
      int v132 = enum case for REMStringMatchingStyle.prefix(_:);
      int v130 = enum case for REMStringMatchingStyle.word(_:);
      id v161 = (void (**)(char *, uint64_t))(v169 + 8);
      uint64_t v162 = v169 + 88;
      unint64_t v159 = (void (**)(uint64_t, uint64_t))(v169 + 96);
      uint64_t v153 = (char *)&type metadata for Any + 8;
      uint64_t v152 = v4;
      uint64_t v138 = v7;
      uint64_t v51 = v172;
      uint64_t v29 = v166;
      uint64_t v149 = v15;
      uint64_t v52 = (uint64_t)v167;
      uint64_t v41 = v168;
      uint64_t v170 = v169 + 16;
      uint64_t v160 = v47;
      uint64_t v157 = (void (**)(char *, void, uint64_t, uint64_t))(v171 + 56);
      break;
    case 3u:
      uint64_t v41 = *(void **)v27;
      uint64_t v29 = (void *)REMSmartListTypeCustom;
      uint64_t KeyPath = swift_getKeyPath();
      id v103 = v29;
      sub_10039B154(KeyPath);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v176[2] >= v176[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v104 = swift_getKeyPath();
      id v105 = [v41 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v24, 0, 1, v1);
      goto LABEL_99;
    case 4u:
      uint64_t v41 = *(void **)v27;
      char v42 = v27[8];
      uint64_t v29 = (void *)REMSmartListTypeCustom;
      uint64_t v43 = swift_getKeyPath();
      id v44 = v29;
      id v45 = [v41 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v24, 0, 1, v1);
      sub_10032E094(v43, (uint64_t)v24);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v176[2] >= v176[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v42) {
        goto LABEL_102;
      }
      uint64_t v46 = swift_getKeyPath();
      sub_10039B154(v46);
      goto LABEL_100;
    case 5u:
      uint64_t v106 = *(void **)v27;
      uint64_t v107 = swift_getKeyPath();
      id v108 = [v106 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v24, 0, 1, v1);
      sub_10032E094(v107, (uint64_t)v24);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v176[2] >= v176[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v109 = swift_getKeyPath();
      uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_10039B19C(v109, v110, v111);
      swift_release();
      swift_bridgeObjectRelease();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v176[2] >= v176[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v112 = swift_getKeyPath();
      sub_10039B178(v112);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v176[2] >= v176[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v29 = 0;
      goto LABEL_103;
    case 6u:
      unint64_t v33 = v171;
      (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v3, v27, v1);
      uint64_t v29 = (void *)REMSmartListTypeCustom;
      uint64_t v34 = swift_getKeyPath();
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v24, v3, v1);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v24, 0, 1, v1);
      id v35 = v29;
      sub_10032E094(v34, (uint64_t)v24);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v176[2] >= v176[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v3, v1);
      goto LABEL_103;
    case 7u:
      uint64_t v41 = *(void **)v27;
      uint64_t v29 = (void *)REMSmartListTypeCustom;
      uint64_t v104 = swift_getKeyPath();
      id v113 = v29;
      id v114 = [v41 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v24, 0, 1, v1);
LABEL_99:
      sub_10032E094(v104, (uint64_t)v24);
LABEL_100:
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v176[2] < v176[3] >> 1) {
        goto LABEL_101;
      }
      goto LABEL_115;
    case 8u:
    case 0xAu:
    case 0xBu:
      goto LABEL_2;
    case 9u:
      uint64_t v29 = (void *)REMSmartListTypeCustom;
      uint64_t v31 = swift_getKeyPath();
      id v32 = v29;
      sub_10039B178(v31);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v176[2] >= v176[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_103;
    default:
      uint64_t v29 = *(void **)v27;
      unint64_t v36 = (void *)*((void *)v27 + 1);
      uint64_t v37 = swift_getKeyPath();
      uint64_t v38 = v1;
      id v39 = v29;
      id v40 = [v36 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v24, 0, 1, v38);
      sub_10032E094(v37, (uint64_t)v24);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v176[2] >= v176[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_103;
  }
  do
  {
    while (1)
    {
      if (v48 >= *(void *)(v47 + 16))
      {
        __break(1u);
        goto LABEL_113;
      }
      unint64_t v171 = v48 + 1;
      uint64_t v54 = v169;
      uint64_t v55 = *(void (**)(void *, unint64_t, uint64_t))(v169 + 16);
      v55(v41, v163 + *(void *)(v169 + 72) * v48, v51);
      v55((void *)v52, (unint64_t)v41, v51);
      int v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 88))(v52, v51);
      if (v56 == v164) {
        break;
      }
      if (v56 == v155)
      {
        (*v159)(v52, v51);
        id v64 = *(id *)v52;
        if ((unint64_t)v64 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v65) {
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v65 = *(void *)(((unint64_t)v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v65)
          {
LABEL_31:
            os_log_type_t v175 = _swiftEmptyArrayStorage;
            sub_1001DE118(0, v65 & ~(v65 >> 63), 0);
            if (v65 < 0)
            {
              __break(1u);
LABEL_115:
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_101:
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
LABEL_102:

              goto LABEL_103;
            }
            uint64_t v66 = 0;
            uint64_t v67 = v175;
            do
            {
              if (((unint64_t)v64 & 0xC000000000000001) != 0) {
                id v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v68 = *((id *)v64 + v66 + 4);
              }
              id v69 = v68;
              id v70 = [v68 uuid];
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              (*v50)(v22, 0, 1, v173);
              os_log_type_t v175 = v67;
              unint64_t v72 = v67[2];
              unint64_t v71 = v67[3];
              if (v72 >= v71 >> 1)
              {
                sub_1001DE118(v71 > 1, v72 + 1, 1);
                uint64_t v67 = v175;
              }
              ++v66;
              v67[2] = v72 + 1;
              sub_1000F44F4((uint64_t)v22, (uint64_t)v67+ ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80))+ *(void *)(v174 + 72) * v72);
            }
            while (v65 != v66);
            swift_bridgeObjectRelease();
            uint64_t v15 = v149;
            goto LABEL_79;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v67 = _swiftEmptyArrayStorage;
LABEL_79:
        sub_100094134((uint64_t *)&unk_10090A050);
        uint64_t v98 = swift_allocObject();
        *(_OWORD *)(v98 + 16) = v151;
        *(void *)(v98 + 56) = &type metadata for String;
        *(void *)(v98 + 32) = 0x696669746E656469;
        *(void *)(v98 + 40) = 0xEA00000000007265;
        *(void *)(v98 + 88) = sub_100094134(&qword_1009169A8);
        *(void *)(v98 + 64) = v67;
        NSString v99 = String._bridgeToObjectiveC()();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v101 = [self predicateWithFormat:v99 argumentArray:isa];

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v176[2] >= v176[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v41 = v168;
        uint64_t v51 = v172;
        (*v161)(v168, v172);
        uint64_t v29 = v166;
        goto LABEL_82;
      }
      uint64_t v73 = v152;
      if (v56 == v150)
      {
        (*v159)(v52, v51);
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
      if (v56 == v148)
      {
        (*v159)(v52, v51);

        uint64_t v81 = v52 + *(int *)(sub_100094134(&qword_100916928) + 48);
        uint64_t v82 = type metadata accessor for REMSearchCriterion.Inclusion();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v82 - 8) + 8))(v81, v82);
        goto LABEL_24;
      }
      if (v56 != v146)
      {
        if (v56 != v145)
        {
          if (v56 == v142) {
            goto LABEL_24;
          }
          if (v56 == v141) {
            goto LABEL_54;
          }
          if (v56 == v140) {
            goto LABEL_24;
          }
          if (v56 == v139)
          {
            (*v159)(v52, v51);
            swift_bridgeObjectRelease();
            uint64_t v86 = sub_100094134((uint64_t *)&unk_100915A00);
            (*v144)((char *)(v52 + *(int *)(v86 + 48)), v152);
            goto LABEL_24;
          }
          if (v56 == v133) {
            goto LABEL_54;
          }
          if (v56 == v131) {
            goto LABEL_24;
          }
          if (v56 == v129 || v56 == v128)
          {
LABEL_54:
            (*v159)(v52, v51);
            uint64_t v85 = sub_100094134((uint64_t *)&unk_10091C320);
            sub_1000966BC(v52 + *(int *)(v85 + 48), (uint64_t *)&unk_100909A40);
            sub_1000966BC(v52, (uint64_t *)&unk_100909A40);
            goto LABEL_24;
          }
          if (v56 == v127 || v56 == v126) {
            goto LABEL_24;
          }
          if (v56 != v125)
          {
            if (v56 == v124)
            {
              uint64_t v51 = v172;
              (*v159)((uint64_t)v167, v172);
              swift_bridgeObjectRelease();
            }
            else
            {
              if (v56 != v123) {
                goto LABEL_117;
              }
              uint64_t v51 = v172;
              (*v161)(v167, v172);
            }
            uint64_t v15 = v149;
            goto LABEL_24;
          }
          break;
        }
        (*v159)(v52, v51);
        swift_bridgeObjectRelease();
        uint64_t v84 = sub_100094134((uint64_t *)&unk_100915A00);
        (*v144)((char *)(v52 + *(int *)(v84 + 48)), v73);
LABEL_42:
        if (qword_100907AA8 != -1) {
          swift_once();
        }
        uint64_t v74 = type metadata accessor for Logger();
        sub_10008E2DC(v74, (uint64_t)qword_1009207D8);
        uint64_t v41 = v168;
        v55(v29, (unint64_t)v168, v51);
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v77 = swift_slowAlloc();
          int v147 = (void *)swift_slowAlloc();
          os_log_type_t v175 = v147;
          *(_DWORD *)uint64_t v77 = v154;
          v55(v158, (unint64_t)v29, v172);
          uint64_t v15 = v149;
          uint64_t v78 = String.init<A>(describing:)();
          *(void *)(v77 + 4) = sub_1000C51B8(v78, v79, (uint64_t *)&v175);
          swift_bridgeObjectRelease();
          uint64_t v80 = *v161;
          (*v161)((char *)v29, v172);
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Dropping unsupported criterion for searching REMCDSmartList. {criterion: %s}", (uint8_t *)v77, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v51 = v172;
          swift_slowDealloc();

          v80((char *)v41, v51);
        }
        else
        {

          uint64_t v83 = *v161;
          (*v161)((char *)v29, v51);
          v83((char *)v41, v51);
        }
LABEL_82:
        uint64_t v52 = (uint64_t)v167;
        goto LABEL_20;
      }
      (*v159)(v52, v51);
      id v88 = *(id *)v52;
      uint64_t v87 = *(void *)(v52 + 8);
      uint64_t v89 = sub_100094134((uint64_t *)&unk_100915A00);
      id v90 = v156;
      (*v137)(v156, v52 + *(int *)(v89 + 48), v73);
      uint64_t v91 = v138;
      (*v136)(v138, v90, v73);
      int v92 = (*v135)(v91, v73);
      if (v92 == v134)
      {
        sub_100094134((uint64_t *)&unk_10090A050);
        uint64_t v93 = swift_allocObject();
        *(_OWORD *)(v93 + 16) = v151;
        *(void *)(v93 + 56) = &type metadata for String;
        *(void *)(v93 + 32) = 1701667182;
        *(void *)(v93 + 40) = 0xE400000000000000;
        *(void *)(v93 + 88) = sub_100094134((uint64_t *)&unk_10090A4C0);
        *(void *)(v93 + 64) = v88;
        *(void *)(v93 + 72) = v87;
        swift_bridgeObjectRetain();
        NSString v94 = String._bridgeToObjectiveC()();
        Class v95 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v96 = [self predicateWithFormat:v94 argumentArray:v95];
        swift_bridgeObjectRelease();

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v176[2] >= v176[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t v29 = v166;
        uint64_t v52 = (uint64_t)v167;
      }
      else
      {
        if (v92 != v132 && v92 != v130)
        {
          _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
LABEL_117:
          _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          JUMPOUT(0x100648A84);
        }
        uint64_t v97 = swift_getKeyPath();
        sub_10039B148(v97, (uint64_t)v88, v87, 6);
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v176[2] >= v176[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      }
      specialized Array._endMutation()();
      (*v144)(v156, v73);
      uint64_t v41 = v168;
      uint64_t v51 = v172;
      (*v161)(v168, v172);
      int v143 = 1;
      unint64_t v48 = v171;
      uint64_t v47 = v160;
      if (v171 == v165)
      {
        swift_bridgeObjectRelease();
LABEL_2:
        uint64_t v29 = (void *)REMSmartListTypeCustom;
        id v30 = REMSmartListTypeCustom;
        goto LABEL_103;
      }
    }
    (*v159)(v52, v51);
    swift_bridgeObjectRelease();
LABEL_24:
    if (qword_100907AA8 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_10008E2DC(v57, (uint64_t)qword_1009207D8);
    uint64_t v41 = v168;
    v55(v15, (unint64_t)v168, v51);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = swift_slowAlloc();
      os_log_type_t v175 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = v154;
      v55(v158, (unint64_t)v15, v172);
      uint64_t v61 = String.init<A>(describing:)();
      *(void *)(v60 + 4) = sub_1000C51B8(v61, v62, (uint64_t *)&v175);
      swift_bridgeObjectRelease();
      uint64_t v63 = *v161;
      (*v161)(v15, v172);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Dropping unsupported criterion for searching REMCDSmartList. {criterion: %s}", (uint8_t *)v60, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v51 = v172;
      swift_slowDealloc();

      v63((char *)v41, v51);
    }
    else
    {

      uint64_t v53 = *v161;
      (*v161)(v15, v51);
      v53((char *)v41, v51);
    }
    uint64_t v29 = v166;
    uint64_t v52 = (uint64_t)v167;
    id v50 = v157;
LABEL_20:
    unint64_t v48 = v171;
    uint64_t v47 = v160;
  }
  while (v171 != v165);
  swift_bridgeObjectRelease();
  if (v143) {
    goto LABEL_2;
  }
  uint64_t v29 = 0;
LABEL_103:
  sub_1002F51CC(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v176[2] < v176[3] >> 1) {
    goto LABEL_104;
  }
LABEL_113:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_104:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (v29)
  {
    uint64_t v115 = swift_getKeyPath();
    uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v118 = v117;
    id v119 = v29;
    sub_10032E278(v115, v116, v118);
    swift_release();
    swift_bridgeObjectRelease();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v176[2] >= v176[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v120 = sub_1002F52FC(v176);

  return v120;
}

void sub_100648AB4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_100648AF0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  uint64_t v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    uint64_t v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

uint64_t sub_100648C38()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009207D8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009207D8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100648D00()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077DE90;
  *(void *)(v0 + 32) = swift_getKeyPath();
  *(void *)(v0 + 40) = swift_getKeyPath();
  *(void *)(v0 + 48) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  qword_100942608 = v0;
  return result;
}

uint64_t sub_100648D94()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_100942610 = v0;
  return result;
}

void sub_100648E2C(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  id v6 = *a1;
  id v7 = [*a1 remObjectID];
  id v8 = [v6 smartListType];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {

    swift_bridgeObjectRelease_n();
    if (!a2) {
      goto LABEL_13;
    }
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0 || !a2) {
      goto LABEL_13;
    }
  }
  id v15 = v7;
  uint64_t v16 = sub_1002F0308(v15, a2);

  if (!v16)
  {
LABEL_13:
    id v21 = [v6 smartListType];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
    if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
LABEL_25:
        id v32 = [objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable()) initWithStore:a4 storage:v6];
        uint64_t v19 = a5;
        goto LABEL_29;
      }
    }
    if (qword_100907AA8 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_1009207D8);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "expecting a valid REMAccount for a custom smart list", v31, 2u);
      swift_slowDealloc();
    }

    goto LABEL_25;
  }
  id v17 = [v6 parentListID];
  if (v17)
  {
    uint64_t v18 = a4;
    uint64_t v19 = a5;
    id v7 = (id)a3;
    if (a3)
    {
      id v20 = v17;
      id v7 = sub_1002F018C(v20, a3);
    }
    else
    {
    }
  }
  else
  {
    id v7 = 0;
    uint64_t v18 = a4;
    uint64_t v19 = a5;
  }
  id v33 = objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable());
  id v34 = v18;
  id v32 = [v33 initWithStore:v34 account:v16 parentList:v7 storage:v6];

LABEL_29:
  void *v19 = v32;
}

void sub_100649170(uint64_t a1, id *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v11 = __chkstk_darwin(v10).n128_u64[0];
  uint64_t v13 = (char *)&v50 - v12;
  id v14 = *a2;
  id v15 = [*a2 smartListType:v11];
  if (!v15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_10;
  }
  uint64_t v16 = v15;
  int v56 = v2;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v19)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  if (v17 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0) {
      return;
    }
  }
  id v24 = [v14 remObjectID];
  if (!v24) {
    return;
  }
  id v25 = v24;
  id v26 = [v14 parentList];
  uint64_t v27 = (uint64_t)v56;
  if (!v26) {
    goto LABEL_27;
  }
  uint64_t v28 = v26;
  if ([v26 isDeleted])
  {
    if (qword_100907AA8 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_1009207D8);
    id v30 = v14;
    uint64_t v31 = Logger.logObject.getter();
    int v54 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v31, (os_log_type_t)v54))
    {
      os_log_t v53 = v31;
      id v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v58 = v51;
      uint64_t v52 = v32;
      *(_DWORD *)id v32 = 136446210;
      id v33 = [v30 identifier];
      if (v33)
      {
        id v34 = v33;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v35 = v55;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v9, 0, 1, v4);
      }
      else
      {
        uint64_t v35 = v55;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v9, 1, 1, v4);
      }
      sub_1000F44F4((uint64_t)v9, (uint64_t)v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v13, 1, v4))
      {
        sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
        unint64_t v44 = 0xE300000000000000;
        uint64_t v45 = 7104878;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v6, v13, v4);
        sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
        uint64_t v46 = v35;
        uint64_t v45 = UUID.uuidString.getter();
        unint64_t v44 = v47;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v4);
      }
      unint64_t v48 = v52;
      uint64_t v57 = sub_1000C51B8(v45, v44, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v49 = v53;
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v54, "REMSmartCDList's parentList is unexpectedly deleted {identifier: %{public}s}", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

LABEL_27:
    return;
  }
  unint64_t v36 = sub_1005DFE88(v28);
  if (!v27)
  {
    uint64_t v43 = v36;
    id v25 = v25;
    sub_1001A6D10((uint64_t)v43, (uint64_t)v25);

    goto LABEL_27;
  }
  if (qword_100907AA8 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_10008E2DC(v37, (uint64_t)qword_1009207D8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    id v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)id v40 = 136315138;
    int v56 = v40 + 4;
    uint64_t v57 = v27;
    swift_errorRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    uint64_t v41 = String.init<A>(describing:)();
    uint64_t v57 = sub_1000C51B8(v41, v42, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Error ingesting cdSmartList.parentList into list storage {error: %s}", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

void *sub_100649854(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v7) {
      break;
    }
    uint64_t v16 = _swiftEmptyArrayStorage;
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v7 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v9 = 0;
    while (v7 != v9)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(a1 + 8 * v9 + 32);
      }
      double v11 = v10;
      id v14 = v10;
      sub_100648E2C(&v14, a2, a3, a4, &v15);

      if (v4) {
        return (void *)swift_release();
      }
      ++v9;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v7 == v9) {
        return v16;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s10PredicatesOMa_3()
{
  uint64_t result = qword_100920860;
  if (!qword_100920860) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100649A10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10PredicatesOMa_3();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

const char *sub_100649A74()
{
  return "smartListType";
}

void sub_100649A80(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100649AA0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_100649AC0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 parentAccount];
  *a2 = result;
  return result;
}

id sub_100649AFC(void *a1, id *a2)
{
  return [*a2 setParentAccount:*a1];
}

uint64_t sub_100649B18@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003DCAC4(a1, (SEL *)&selRef_mostRecentTargetTemplateIdentifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_100649B60(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100649BB0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003DCAC4(a1, (SEL *)&selRef_pinnedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_100649BF8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_100649C48@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 parentList];
  *a2 = result;
  return result;
}

id sub_100649C84(void *a1, id *a2)
{
  return [*a2 setParentList:*a1];
}

void sub_100649CA0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100649CC0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100649CE0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003DCAC4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_100649D28(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_100649D78@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_100649DB4(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

uint64_t sub_100649DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = (void *)sub_100646F04();
  sub_1000963CC(0, (unint64_t *)&unk_100910210);
  uint64_t v8 = (char *)[objc_allocWithZone((Class)NSFetchRequest) init];
  id v9 = [(id)swift_getObjCClassFromMetadata() entity];
  [v8 setEntity:v9];

  if (a3)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    v10.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v10.super.Class isa = 0;
  }
  [v8 setAffectedStores:v10.super.isa];

  [v8 setPredicate:v7];
  if (qword_100907AB0 != -1) {
    goto LABEL_19;
  }
  while (1)
  {
    uint64_t v11 = qword_100942608;
    if ((unint64_t)qword_100942608 >> 62) {
      break;
    }
    uint64_t v12 = *(void *)((qword_100942608 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v26 = a2;
    unint64_t v27 = v4;
    if (!v12) {
      goto LABEL_21;
    }
LABEL_7:
    sub_1001DE058(0, v12 & ~(v12 >> 63), 0);
    if (v12 < 0)
    {
      __break(1u);
LABEL_28:
      _StringGuts.grow(_:)(46);
      v24._object = (void *)0x80000001007CAF70;
      v24._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v24);
      sub_100094134(&qword_10090FF50);
      _print_unlocked<A, B>(_:_:)();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    id v25 = v8;
    uint64_t v8 = 0;
    unint64_t v28 = v11 & 0xC000000000000001;
    while ((char *)v12 != v8)
    {
      if (v28) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v13 = v11;
      uint64_t v14 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
      if (!v15) {
        goto LABEL_28;
      }
      a2 = v14;
      uint64_t v16 = v15;
      swift_release();
      unint64_t v18 = _swiftEmptyArrayStorage[2];
      unint64_t v17 = _swiftEmptyArrayStorage[3];
      unint64_t v4 = v18 + 1;
      if (v18 >= v17 >> 1) {
        sub_1001DE058(v17 > 1, v18 + 1, 1);
      }
      ++v8;
      _swiftEmptyArrayStorage[2] = v4;
      uint64_t v19 = &_swiftEmptyArrayStorage[2 * v18];
      v19[4] = a2;
      v19[5] = v16;
      uint64_t v11 = v13;
      if ((char *)v12 == v8)
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = v25;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_19:
    swift_once();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v26 = a2;
  unint64_t v27 = v4;
  if (v12) {
    goto LABEL_7;
  }
LABEL_21:
  swift_bridgeObjectRelease();
LABEL_22:
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 setRelationshipKeyPathsForPrefetching:isa];

  if (qword_100907AB8 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class v21 = Array._bridgeToObjectiveC()().super.isa;
  [v8 setSortDescriptors:v21];

  uint64_t v22 = v26;
  NSManagedObjectContext.fetch<A>(_:)();
  if (!v27)
  {
    sub_100094134((uint64_t *)&unk_100921B00);
    sub_10064C8D4();
    uint64_t v22 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();
  }

  return v22;
}

void *sub_10064A250(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v11 = _swiftEmptyDictionarySingleton;
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
LABEL_12:
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_13;
  }
LABEL_3:
  for (uint64_t i = 4; ; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(a1 + 8 * i);
    }
    uint64_t v7 = v6;
    uint64_t v8 = i - 3;
    if (__OFADD__(i - 4, 1))
    {
      __break(1u);
      goto LABEL_12;
    }
    id v10 = v6;
    sub_100649170((uint64_t)&v11, &v10);
    if (v2) {
      break;
    }
    uint64_t v2 = 0;

    if (v8 == v4)
    {
      swift_bridgeObjectRelease();
      return v11;
    }
  }
  swift_bridgeObjectRelease();

  uint64_t result = (void *)swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void *sub_10064A384(uint64_t a1, uint64_t a2)
{
  sub_100094134(&qword_1009146B0);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  uint64_t v4 = result;
  int64_t v5 = 0;
  uint64_t v25 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v23 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v24 = (unint64_t)(v7 + 63) >> 6;
  id v10 = (char *)(result + 8);
  if ((v8 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v11 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    uint64_t v16 = *(void **)(*(void *)(v25 + 48) + 8 * i);
    uint64_t v17 = *(void *)(*(void *)(v25 + 56) + 8 * i);
    id v18 = objc_allocWithZone((Class)REMAccount);
    id v19 = v16;
    uint64_t result = [v18 initWithStore:a2 storage:v17];
    *(void *)&v10[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    *(void *)(v4[6] + 8 * i) = v19;
    *(void *)(v4[7] + 8 * i) = result;
    uint64_t v20 = v4[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v4[2] = v22;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v24) {
      return v4;
    }
    unint64_t v14 = *(void *)(v23 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v24) {
        return v4;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v24) {
          return v4;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v24) {
    return v4;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v24) {
      return v4;
    }
    unint64_t v14 = *(void *)(v23 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

Swift::Int sub_10064A59C(uint64_t a1, uint64_t a2)
{
  if (__CocoaDictionary.count.getter())
  {
    sub_100094134(&qword_1009146B0);
    unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v3 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v20 = v3;
  __CocoaDictionary.makeIterator()();
  swift_unknownObjectRetain();
  uint64_t v4 = __CocoaDictionary.Iterator.next()();
  if (v4)
  {
    int64_t v5 = (void *)v4;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    do
    {
      swift_dynamicCast();
      sub_1000963CC(0, &qword_100910180);
      swift_dynamicCast();
      id v13 = [objc_allocWithZone((Class)REMAccount) initWithStore:a2 storage:v5];

      unint64_t v3 = v20;
      unint64_t v14 = v20[2];
      if (v20[3] <= v14)
      {
        sub_10030DC04(v14 + 1, 1);
        unint64_t v3 = v20;
      }
      Swift::Int result = NSObject._rawHashValue(seed:)(v3[5]);
      uint64_t v7 = v3 + 8;
      uint64_t v8 = -1 << *((unsigned char *)v3 + 32);
      unint64_t v9 = result & ~v8;
      unint64_t v10 = v9 >> 6;
      if (((-1 << v9) & ~v3[(v9 >> 6) + 8]) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v9) & ~v3[(v9 >> 6) + 8])) | v9 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v15 = 0;
        unint64_t v16 = (unint64_t)(63 - v8) >> 6;
        do
        {
          if (++v10 == v16 && (v15 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          BOOL v17 = v10 == v16;
          if (v10 == v16) {
            unint64_t v10 = 0;
          }
          v15 |= v17;
          uint64_t v18 = v7[v10];
        }
        while (v18 == -1);
        unint64_t v11 = __clz(__rbit64(~v18)) + (v10 << 6);
      }
      *(void *)((char *)v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = 8 * v11;
      *(void *)(v3[6] + v12) = v19;
      *(void *)(v3[7] + v12) = v13;
      ++v3[2];
      int64_t v5 = (void *)__CocoaDictionary.Iterator.next()();
    }
    while (v5);
  }
  swift_release();
  return (Swift::Int)v3;
}

void *sub_10064A824(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  int64_t v5 = (void *)a1;
  if (a1 >> 62) {
    goto LABEL_30;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    uint64_t v7 = (void *)sub_1005014E0(v5);
    if (v3) {
      return (void *)v6;
    }
    id v35 = v7;
    id v8 = [v7 smartListStorages];
    sub_1000963CC(0, &qword_10090B328);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      if (!v10)
      {
LABEL_33:
        swift_bridgeObjectRelease();
        uint64_t v20 = 0;
LABEL_34:
        swift_bridgeObjectRetain();
        id v32 = a2;
        swift_bridgeObjectRetain();
        uint64_t v6 = (uint64_t)sub_100649854(v9, v10, v20, v32);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        return (void *)v6;
      }
    }
    else
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v10) {
        goto LABEL_33;
      }
    }
    id v34 = a2;
    uint64_t v3 = 4;
    while (1)
    {
      int64_t v5 = (void *)(v3 - 4);
      id v11 = (v9 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v9 + 8 * v3);
      uint64_t v12 = v11;
      a2 = (void *)(v3 - 3);
      if (__OFADD__(v5, 1)) {
        break;
      }
      id v13 = [v11 smartListType];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;
      if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
      {

        swift_bridgeObjectRelease_n();
LABEL_19:
        swift_bridgeObjectRelease();
        id v21 = [v35 accountStorages];
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        sub_1000963CC(0, &qword_100910180);
        sub_1001207D4();
        uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v22 & 0xC000000000000001) != 0)
        {
          if (v22 < 0) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = v22 & 0xFFFFFFFFFFFFFF8;
          }
          Swift::Int v24 = sub_10064A59C(v23, (uint64_t)v34);
        }
        else
        {
          Swift::Int v24 = (Swift::Int)sub_10064A384(v22, (uint64_t)v34);
        }
        uint64_t v10 = v24;

        swift_bridgeObjectRelease();
        id v36 = self;
        id v25 = [v35 accountStorages];
        unint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100209764(v26);
        swift_bridgeObjectRelease();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_release();
        id v28 = [v35 parentListStorages];
        sub_1000963CC(0, (unint64_t *)&unk_100914440);
        unint64_t v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100209750(v29);
        swift_bridgeObjectRelease();
        Class v30 = Array._bridgeToObjectiveC()().super.isa;
        swift_release();
        id v31 = [v36 listsFromAccountStorages:isa listStorages:v30 store:v34];

        if (v31)
        {
          sub_1000963CC(0, &qword_10090E198);
          uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
        }
        else
        {
          uint64_t v20 = 0;
        }
LABEL_28:
        a2 = v34;
        goto LABEL_34;
      }
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_19;
      }
      ++v3;
      if (a2 == (void *)v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 0;
        uint64_t v10 = 0;
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v6) {
      return _swiftEmptyArrayStorage;
    }
  }
}

void *sub_10064AD64(void *a1, void *a2)
{
  uint64_t v4 = sub_100094134(&qword_100909DF0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134(&qword_10090EA40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = a1;
  REMSmartList.NonCustom.init(smartListType:)();
  uint64_t v12 = type metadata accessor for REMSmartList.NonCustom();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
  {
    sub_1000966BC((uint64_t)v10, &qword_10090EA40);
    return 0;
  }
  else
  {
    uint64_t v15 = (void *)REMSmartList.NonCustom.remObjectID.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    uint64_t v16 = (objc_class *)type metadata accessor for RDPredefinedObjectKey();
    uint64_t v17 = (char *)objc_allocWithZone(v16);
    *(void *)&v17[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID] = a2;
    *(void *)&v17[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID] = v15;
    v27.receiver = v17;
    v27.super_class = v16;
    id v18 = a2;
    id v19 = v15;
    id v20 = [super init];
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = 0;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), v4);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v21;
    *(void *)(v22 + 24) = v20;
    swift_retain();
    id v23 = v20;
    dispatch thunk of REMCache.performReadOnly(_:operations:)();

    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_beginAccess();
    uint64_t v14 = *(void **)(v21 + 16);
    id v24 = v14;
    swift_release();
  }
  return v14;
}

id sub_10064B05C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v98 = a2;
  uint64_t v7 = sub_100094134(&qword_100909DF0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v96 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = _s10PredicatesOMa_3();
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((REMSmartListType.hasPredefinedObjectID.getter() & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v95 = a3;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18)
  {
LABEL_13:
    if (qword_100907AA8 != -1) {
LABEL_44:
    }
      swift_once();
    uint64_t v32 = type metadata accessor for Logger();
    sub_10008E2DC(v32, (uint64_t)qword_1009207D8);
    id v33 = a1;
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    unint64_t v20 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      id v36 = (uint8_t *)swift_slowAlloc();
      v102[0] = (id)swift_slowAlloc();
      *(_DWORD *)id v36 = 136446210;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v101 = (void *)sub_1000C51B8(v37, v38, (uint64_t *)v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v20, "Unexpected smart list type to fetch by predefined objectIDs {smartListType: %{public}s}", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    os_log_type_t v39 = self;
    NSString v40 = String._bridgeToObjectiveC()();
    [v39 internalErrorWithDebugDescription:v40];

    swift_willThrow();
    return (id)v20;
  }
  uint64_t v94 = v7;
  id v19 = (void *)sub_100349CDC();
  unint64_t v20 = (unint64_t)_swiftEmptyArrayStorage;
  if (!v19) {
    return (id)v20;
  }
  uint64_t v21 = v19;
  uint64_t v22 = sub_10064AD64(a1, v19);
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = v8;
    v102[0] = 0;
    id v25 = [v98 existingObjectWithID:v22 error:v102];
    id v26 = v102[0];
    if (v25)
    {
      objc_super v27 = v25;
      id v97 = v23;
      self;
      uint64_t v28 = swift_dynamicCastObjCClass();
      if (v28)
      {
        uint64_t v29 = v28;
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = xmmword_10077A530;
        *(void *)(v30 + 32) = v29;
        v102[0] = (id)v30;
        specialized Array._endMutation()();
        unint64_t v20 = (unint64_t)v102[0];
        id v31 = v26;

        return (id)v20;
      }
      id v43 = v26;
    }
    else
    {
      id v42 = v102[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      uint64_t v4 = 0;
    }
    uint64_t v8 = v24;
    unint64_t v20 = (unint64_t)_swiftEmptyArrayStorage;
  }
  *uint64_t v12 = a1;
  v12[1] = v21;
  swift_storeEnumTagMultiPayload();
  unint64_t v44 = a1;
  id v91 = v21;
  id v45 = [v98 persistentStoreOfAccountWithAccountID:];
  if (v45)
  {
    id v46 = v45;
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_10077A530;
    *(void *)(v47 + 32) = v46;
    v102[0] = (id)v47;
    specialized Array._endMutation()();
    id v48 = v102[0];
  }
  else
  {
    id v48 = 0;
  }
  os_log_t v49 = (void *)sub_100646F04();
  uint64_t v50 = (void *)sub_1000963CC(0, (unint64_t *)&unk_100910210);
  id v51 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v92 = v50;
  id v52 = [(id)swift_getObjCClassFromMetadata() entity];
  [v51 setEntity:v52];

  if (v48)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    v53.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v53.super.Class isa = 0;
  }
  [v51 setAffectedStores:v53.super.isa];

  [v51 setPredicate:v49];
  swift_bridgeObjectRelease();
  if (qword_100907AB0 != -1) {
    swift_once();
  }
  uint64_t v54 = qword_100942608;
  if (!((unint64_t)qword_100942608 >> 62))
  {
    uint64_t v55 = *(void *)((qword_100942608 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    id v93 = v51;
    if (v55) {
      goto LABEL_32;
    }
LABEL_46:
    swift_bridgeObjectRelease();
LABEL_47:
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v51 = v93;
    [v93 setRelationshipKeyPathsForPrefetching:isa];

    if (qword_100907AB8 != -1) {
      swift_once();
    }
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    Class v67 = Array._bridgeToObjectiveC()().super.isa;
    [v51 setSortDescriptors:v67];

    unint64_t v68 = NSManagedObjectContext.fetch<A>(_:)();
    if (v4) {
      goto LABEL_50;
    }
    unint64_t v20 = v68;
    if (!(v68 >> 62))
    {
      if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
      {
        swift_bridgeObjectRetain();
        goto LABEL_54;
      }
LABEL_50:
      sub_100501D98((uint64_t)v12);

      return (id)v20;
    }
LABEL_62:
    swift_bridgeObjectRetain();
    uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v86 == 1)
    {
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter())
      {
        swift_bridgeObjectRelease();
        goto LABEL_50;
      }
LABEL_54:
      if ((v20 & 0xC000000000000001) != 0)
      {
        id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          __break(1u);
        }
        id v69 = *(id *)(v20 + 32);
      }
      id v70 = v69;
      id v98 = (id)v20;
      swift_bridgeObjectRelease();
      id v71 = [v70 remObjectID];
      if (v71)
      {
        unint64_t v72 = v71;
        id v73 = [v70 objectID];
        uint64_t v74 = (objc_class *)type metadata accessor for RDPredefinedObjectKey();
        uint64_t v75 = (char *)objc_allocWithZone(v74);
        id v76 = v91;
        *(void *)&v75[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID] = v91;
        *(void *)&v75[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID] = v72;
        v99.receiver = v75;
        v99.super_class = v74;
        id v77 = v76;
        id v90 = v12;
        uint64_t v78 = v8;
        id v92 = v77;
        id v97 = v72;
        id v79 = [super init];
        uint64_t v80 = *(void (**)(char *, void, uint64_t))(v8 + 104);
        uint64_t v81 = v96;
        uint64_t v82 = v94;
        v80(v96, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v94);
        uint64_t v83 = swift_allocObject();
        *(void *)(v83 + 16) = v73;
        *(void *)(v83 + 24) = v79;
        id v84 = v73;
        id v85 = v79;
        dispatch thunk of REMCache.performReadAndWrite(_:operations:)();

        swift_release();
        (*(void (**)(char *, uint64_t))(v78 + 8))(v81, v82);

        sub_100501D98((uint64_t)v90);
      }
      else
      {
        sub_100501D98((uint64_t)v12);
      }
      return v98;
    }
    goto LABEL_50;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  id v93 = v51;
  if (!v55) {
    goto LABEL_46;
  }
LABEL_32:
  uint64_t v88 = v8;
  uint64_t v89 = v4;
  id v90 = v12;
  id v101 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v55 & ~(v55 >> 63), 0);
  if (v55 < 0)
  {
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v56 = 0;
  a1 = v101;
  id v97 = (id)(v54 & 0xC000000000000001);
  uint64_t v57 = v54;
  while (1)
  {
    if (v55 == v56)
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v97)
    {
      uint64_t v58 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v58 = *(void *)(v54 + 8 * v56 + 32);
      swift_retain();
    }
    uint64_t v59 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v60) {
      break;
    }
    uint64_t v61 = v59;
    uint64_t v62 = v60;
    swift_release();
    id v101 = a1;
    unint64_t v64 = a1[2];
    unint64_t v63 = a1[3];
    unint64_t v20 = v64 + 1;
    if (v64 >= v63 >> 1)
    {
      sub_1001DE058(v63 > 1, v64 + 1, 1);
      a1 = v101;
    }
    ++v56;
    a1[2] = v20;
    uint64_t v65 = &a1[2 * v64];
    void v65[4] = v61;
    v65[5] = v62;
    uint64_t v54 = v57;
    if (v55 == v56)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v89;
      uint64_t v12 = v90;
      uint64_t v8 = v88;
      goto LABEL_47;
    }
  }
  v102[0] = 0;
  v102[1] = (id)0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v87._object = (void *)0x80000001007CAF70;
  v87._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v87);
  uint64_t v100 = v58;
  sub_100094134(&qword_10090FF50);
  _print_unlocked<A, B>(_:_:)();
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10064BC0C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = _s10PredicatesOMa_3();
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t **)((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (REMSmartListType.hasPredefinedObjectID.getter())
  {
    if (qword_100907AA8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_1009207D8);
    id v11 = a1;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446210;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v53 = sub_1000C51B8(v15, v16, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Smart list type with predefined objectIDs should not be fetched by cdSmartListsHavingCustomObjectID() {smartListType: %{public}s}", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v37 = self;
    unint64_t v38 = String._bridgeToObjectiveC()();
    [v37 internalErrorWithDebugDescription:v38];

    swift_willThrow();
  }
  else
  {
    uint64_t v52 = a3;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;
    if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        if (qword_100907AA8 != -1) {
          swift_once();
        }
        uint64_t v23 = type metadata accessor for Logger();
        sub_10008E2DC(v23, (uint64_t)qword_1009207D8);
        id v24 = a1;
        id v25 = a2;
        id v51 = v24;
        id v26 = v25;
        objc_super v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        int v29 = v28;
        uint64_t v50 = v27;
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v30 = swift_slowAlloc();
          id v48 = (void *)swift_slowAlloc();
          uint64_t v49 = swift_slowAlloc();
          uint64_t v55 = v49;
          *(_DWORD *)uint64_t v30 = 136446466;
          uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          int v47 = v29;
          uint64_t v53 = sub_1000C51B8(v31, v32, &v55);
          id v46 = &v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v33 = v51;

          swift_bridgeObjectRelease();
          *(_WORD *)(v30 + 12) = 2114;
          uint64_t v53 = (uint64_t)v26;
          id v34 = v26;
          id v51 = v3;
          id v35 = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v48 = v26;

          id v36 = v50;
          _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v47, "BOGUS! Practically cdSmartListsHavingCustomObjectID(...) is meant to be used for fetching CSLs only {smartListType: %{public}s, objectID: %{public}@}", (uint8_t *)v30, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          id v39 = v51;
        }
      }
    }
    *uint64_t v9 = a1;
    v9[1] = a2;
    swift_storeEnumTagMultiPayload();
    id v40 = a1;
    id v41 = a2;
    id v42 = (void *)sub_100646F04();
    sub_1000963CC(0, (unint64_t *)&unk_100910210);
    id v43 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v44 = [(id)swift_getObjCClassFromMetadata() entity];
    [v43 setEntity:v44];

    [v43 setAffectedStores:0];
    [v43 setPredicate:v42];

    unint64_t v38 = NSManagedObjectContext.fetch<A>(_:)();
    sub_100501D98((uint64_t)v9);
  }
  return v38;
}

NSObject *sub_10064C1FC(NSObject *a1, void *a2, void *a3, uint64_t a4)
{
  if (REMSmartListType.hasPredefinedObjectID.getter())
  {
    uint64_t v9 = (id *)sub_10064B05C(a1, a3, a4);
    if (v4) {
      return a1;
    }
    unint64_t v10 = (unint64_t)v9;
  }
  else
  {
    if (!a2)
    {
      if (qword_100907AA8 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_10008E2DC(v27, (uint64_t)qword_1009207D8);
      os_log_type_t v28 = a1;
      int v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136446210;
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1000C51B8(v32, v33, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unexpected usage of cdSmartList(smartListType:objectID:in:...) - you must either fetch smart list of a type which hasPredefinedObjectID, or specify an objectID to match {smartListType: %{public}s}", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v34 = self;
      a1 = String._bridgeToObjectiveC()();
      [v34 invalidParameterErrorWithDescription:a1];

LABEL_18:
      swift_willThrow();
      return a1;
    }
    id v11 = a2;
    unint64_t v10 = (unint64_t)sub_10064BC0C(a1, v11, (uint64_t)a3);

    if (v4) {
      return a1;
    }
  }
  if (!(v10 >> 62))
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12)
    {
      if (v12 < 2) {
        goto LABEL_20;
      }
      goto LABEL_9;
    }
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    if (a2)
    {
      unint64_t v38 = self;
      a1 = a2;
      [v38 noSuchObjectErrorWithObjectID:a1];
      swift_willThrow();

      return a1;
    }
    [self noSuchSmartListErrorWithSmartListType:a1];
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v37 < 2) {
    goto LABEL_20;
  }
LABEL_9:
  if (qword_100907AA8 != -1) {
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_1009207D8);
    id v14 = a2;
    uint64_t v15 = a1;
    swift_bridgeObjectRetain_n();
    id v16 = v14;
    uint64_t v17 = v15;
    a1 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(a1, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v41 = v40;
      *(_DWORD *)uint64_t v19 = 136315650;
      type metadata accessor for REMSmartListType(0);
      uint64_t v20 = v17;
      uint64_t v21 = String.init<A>(describing:)();
      sub_1000C51B8(v21, v22, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      sub_100094134((uint64_t *)&unk_100914BC0);
      uint64_t v23 = Optional.descriptionOrNil.getter();
      sub_1000C51B8(v23, v24, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 22) = 2080;
      sub_1000D0164();
      uint64_t v25 = BinaryInteger.description.getter();
      sub_1000C51B8(v25, v26, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, a1, v18, "fetching smart list returned more than one result {type: %s objectID: %s, count: %s}", (uint8_t *)v19, 0x20u);
      a2 = (void *)v40;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
LABEL_20:
    if ((v10 & 0xC000000000000001) != 0) {
      break;
    }
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v35 = *(id *)(v10 + 32);
      goto LABEL_23;
    }
    __break(1u);
LABEL_33:
    swift_once();
  }
  id v35 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_23:
  a1 = v35;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10064C81C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10064C85C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10064C894()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10064C8D4()
{
  unint64_t result = qword_100911190;
  if (!qword_100911190)
  {
    sub_100096058((uint64_t *)&unk_100921B00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100911190);
  }
  return result;
}

uint64_t sub_10064C930(void *a1, void *a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  unint64_t v64 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t isUniquelyReferenced_nonNull_native = _s10PredicatesOMa_3();
  *(void *)&double v8 = __chkstk_darwin(isUniquelyReferenced_nonNull_native).n128_u64[0];
  unint64_t v10 = (uint64_t *)((char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v11 = [a1 persistentStoreOfAccountWithAccountID:a2 v8];
  if (v11)
  {
    id v12 = v11;
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_10077A530;
    *(void *)(v13 + 32) = v12;
    unint64_t v69 = v13;
    specialized Array._endMutation()();
    uint64_t v14 = v69;
  }
  else
  {
    uint64_t v14 = 0;
  }
  *unint64_t v10 = a2;
  swift_storeEnumTagMultiPayload();
  id v15 = a2;
  id v16 = (void *)sub_100646F04();
  sub_100501D98((uint64_t)v10);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  unint64_t v69 = inited;
  specialized Array._endMutation()();
  os_log_type_t v18 = (void *)sub_1003BC074(v69, 0, v14, (uint64_t)v16);
  swift_bridgeObjectRelease();
  uint64_t v19 = (uint64_t)v18;
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&unk_100910210);
  uint64_t v20 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v63 = v2;
  if (v2)
  {

    return isUniquelyReferenced_nonNull_native;
  }
  unint64_t v21 = v20;
  unint64_t isUniquelyReferenced_nonNull_native = sub_1002EDA18((uint64_t)_swiftEmptyArrayStorage);
  if (v21 >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain_n();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v62 = (id)v19;
    if (v22) {
      goto LABEL_8;
    }
LABEL_42:
    swift_bridgeObjectRelease_n();

    return isUniquelyReferenced_nonNull_native;
  }
  uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  id v62 = (id)v19;
  if (!v22) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v67 = v22;
  unint64_t v68 = v21 & 0xC000000000000001;
  uint64_t v19 = 4;
  unint64_t v65 = v21;
  uint64_t v66 = v16;
  while (1)
  {
    if (v68) {
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v23 = *(id *)(v21 + 8 * v19);
    }
    unint64_t v24 = v23;
    uint64_t v25 = v19 - 3;
    if (__OFADD__(v19 - 4, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    id v26 = [v23 smartListType];
    if (v26) {
      break;
    }

LABEL_10:
    ++v19;
    if (v25 == v22) {
      goto LABEL_42;
    }
  }
  uint64_t v27 = v26;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  os_log_type_t v30 = v29;

  v31._uint64_t countAndFlagsBits = v28;
  v31._object = v30;
  uint64_t v32 = (void *)REMSmartListType.init(stringValue:)(v31);
  if (!v32)
  {

LABEL_35:
    uint64_t v22 = v67;
    goto LABEL_10;
  }
  id v33 = v32;
  id v34 = [v24 smartListType];
  if (v34
    && (id v35 = v34,
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        unint64_t v38 = v37,
        v35,
        v39._uint64_t countAndFlagsBits = v36,
        v39._object = v38,
        (unint64_t v40 = (unint64_t)REMSmartListType.init(stringValue:)(v39)) != 0))
  {
    unint64_t v21 = v40;
    id v41 = [v24 pinnedDate];
    if (v41)
    {
      id v42 = v41;
      id v43 = v64;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v44 = (uint64_t)v43;
      uint64_t v45 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v43, 0, 1, v45);
    }
    else
    {
      uint64_t v46 = type metadata accessor for Date();
      uint64_t v44 = (uint64_t)v64;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v64, 1, 1, v46);
    }
    sub_1000963CC(0, &qword_10090B330);
    id v16 = (void *)static REMSmartList.userDefinedVisibilityOfSmartList(with:pinnedDate:)();

    sub_1000966BC(v44, (uint64_t *)&unk_100909A40);
  }
  else
  {
    id v16 = 0;
  }
  unint64_t v47 = isUniquelyReferenced_nonNull_native;
  unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v69 = v47;
  unint64_t v49 = sub_100307038(v33);
  uint64_t v50 = *(void *)(v47 + 16);
  BOOL v51 = (v48 & 1) == 0;
  uint64_t v52 = v50 + v51;
  if (__OFADD__(v50, v51)) {
    goto LABEL_39;
  }
  unint64_t v21 = v48;
  if (*(void *)(v47 + 24) >= v52)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      unint64_t isUniquelyReferenced_nonNull_native = v69;
      if ((v48 & 1) == 0) {
        goto LABEL_29;
      }
    }
    else
    {
      sub_100318BD0();
      unint64_t isUniquelyReferenced_nonNull_native = v69;
      if ((v21 & 1) == 0) {
        goto LABEL_29;
      }
    }
    goto LABEL_33;
  }
  sub_10030E97C(v52, isUniquelyReferenced_nonNull_native);
  uint64_t v53 = sub_100307038(v33);
  if ((v21 & 1) == (v54 & 1))
  {
    unint64_t v49 = v53;
    unint64_t isUniquelyReferenced_nonNull_native = v69;
    if ((v21 & 1) == 0)
    {
LABEL_29:
      *(void *)(isUniquelyReferenced_nonNull_native + 8 * (v49 >> 6) + 64) |= 1 << v49;
      uint64_t v55 = 8 * v49;
      *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + v55) = v33;
      *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + v55) = v16;
      uint64_t v56 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
      BOOL v57 = __OFADD__(v56, 1);
      uint64_t v58 = v56 + 1;
      if (v57) {
        goto LABEL_40;
      }
      *(void *)(isUniquelyReferenced_nonNull_native + 16) = v58;
      id v59 = v33;
      goto LABEL_34;
    }
LABEL_33:
    *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v49) = v16;
LABEL_34:

    swift_bridgeObjectRelease();
    unint64_t v21 = v65;
    id v16 = v66;
    goto LABEL_35;
  }
  type metadata accessor for REMSmartListType(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

char *sub_10064CEEC(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    id v11 = *a2;
    *(void *)a1 = *a2;
    a1 = &v11[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v7 = *a2;
        double v8 = a2[1];
        *(void *)a1 = v7;
        *((void *)a1 + 1) = v8;
        uint64_t v9 = v7;
        unint64_t v10 = v8;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
      case 5u:
      case 7u:
        id v16 = *a2;
        *(void *)a1 = *a2;
        uint64_t v17 = v16;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v13 = *a2;
        *(void *)a1 = *a2;
        a1[8] = *((unsigned char *)a2 + 8);
        uint64_t v14 = v13;
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        uint64_t v15 = type metadata accessor for UUID();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void sub_10064D11C(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:

      id v2 = *(id *)(a1 + 8);
      goto LABEL_4;
    case 2u:
      swift_bridgeObjectRelease();
      break;
    case 3u:
    case 4u:
    case 5u:
    case 7u:
      id v2 = *(id *)a1;
LABEL_4:

      break;
    case 6u:
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    default:
      return;
  }
}

void *sub_10064D22C(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      uint64_t v6 = (void *)*a2;
      uint64_t v7 = (void *)a2[1];
      *a1 = v6;
      a1[1] = v7;
      id v8 = v6;
      id v9 = v7;
      goto LABEL_8;
    case 2u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 3u:
    case 5u:
    case 7u:
      uint64_t v13 = (void *)*a2;
      *a1 = *a2;
      id v14 = v13;
      goto LABEL_8;
    case 4u:
      unint64_t v10 = (void *)*a2;
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      id v11 = v10;
      goto LABEL_8;
    case 6u:
      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_10064D3FC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100501D98((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        uint64_t v6 = (void *)*a2;
        *a1 = *a2;
        uint64_t v7 = (void *)a2[1];
        a1[1] = v7;
        id v8 = v6;
        id v9 = v7;
        goto LABEL_9;
      case 2u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 3u:
      case 5u:
      case 7u:
        uint64_t v13 = (void *)*a2;
        *a1 = *a2;
        id v14 = v13;
        goto LABEL_9;
      case 4u:
        unint64_t v10 = (void *)*a2;
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        id v11 = v10;
        goto LABEL_9;
      case 6u:
        uint64_t v12 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_10064D5EC(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10064D6A4(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100501D98((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10064D76C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_10064D828()
{
  id v2 = [v0 secondaryGroceryLocalesInfoAsData];
  if (!v2)
  {
LABEL_9:
    swift_retain();
    goto LABEL_10;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  type metadata accessor for RDSecondaryGroceryLocalesInfo();
  sub_10065CC00((unint64_t *)&unk_100920900, (void (*)(uint64_t))type metadata accessor for RDSecondaryGroceryLocalesInfo);
  static REMJSONRepresentable.fromJSONData(_:)();
  if (v1)
  {
    sub_100097F34(v4, v6);
    if (qword_100906F50 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_10090D0B0);
    swift_errorRetain();
    swift_errorRetain();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446466;
      sub_1000963CC(0, &qword_10090ABC0);
      sub_100094134(&qword_1009173E0);
      uint64_t v11 = String.init<A>(describing:)();
      sub_1000C51B8(v11, v12, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v13 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v13, v14, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s#mergeSecondaryGroceryLocalesInfo(_:): Failed to deserialize 'secondaryGroceryLocalesInfoAsData' due to unexpected error. It will be overwritten. { error: %{public}s}", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_9;
  }
  sub_100097F34(v4, v6);
  swift_retain();
  static Date.> infix(_:_:)();
  swift_retain();
  swift_release();
LABEL_10:
  uint64_t v15 = swift_retain();
  sub_100551FF4(v15);
  swift_release();
  return swift_release_n();
}

void sub_10064DBA8()
{
  id v1 = [v0 smartLists];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = (uint64_t)[v1 count];

    if (v3 >= 1)
    {
      uint64_t v4 = sub_100650740();
      if (v4)
      {
        unint64_t v5 = (void *)v4;
        id v9 = [v0 lists];
        unint64_t v6 = (void *)sub_10065818C(v5);
        if (v9)
        {
          if (v6)
          {
            id v9 = v9;
            uint64_t v7 = (void *)sub_10065C8AC();
            sub_1006590B0(v9, v7, v5);
          }
          else
          {
          }
          id v8 = v9;
        }
        else
        {

          id v8 = v6;
        }
      }
    }
  }
}

void sub_10064DCC4(void *a1, void *a2, void *a3, void *a4)
{
  unint64_t v49 = a4;
  id v59 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v54 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v9 - 8);
  uint64_t v55 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v56 = (uint64_t)&v46 - v12;
  uint64_t v58 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v47 = *(void *)(v58 - 8);
  *(void *)&double v13 = __chkstk_darwin(v58).n128_u64[0];
  BOOL v57 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [a1 count:v13];
  id v16 = [a2 count];
  id v17 = [objc_allocWithZone((Class)NSMutableOrderedSet) initWithOrderedSet:a1];
  Class isa = (Class)[a2 array];
  if (!isa)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v17 addObjectsFromArray:isa];

  if (v15 && v16)
  {
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = _swiftEmptyDictionarySingleton;
    uint64_t v20 = (uint64_t *)(v19 + 16);
    unint64_t v65 = sub_10029135C;
    uint64_t v66 = v19;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v63 = sub_1002880E8;
    unint64_t v64 = &unk_1008CE940;
    unint64_t v21 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v59 enumerateObjectsUsingBlock:v21];
    _Block_release(v21);
    swift_beginAccess();
    uint64_t v22 = *v20;
    swift_bridgeObjectRetain();
    sub_100098560((uint64_t)v17, v22, 0);
    swift_release();
    swift_bridgeObjectRelease();
  }
  id v23 = v17;
  unint64_t v24 = v57;
  NSOrderedSet.makeIterator()();
  id v46 = v23;

  sub_10065CC00((unint64_t *)&qword_100910238, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
  uint64_t v25 = v58;
  dispatch thunk of IteratorProtocol.next()();
  if (v64)
  {
    id v26 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v27 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v52 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    BOOL v51 = (void (**)(char *, uint64_t))(v7 + 8);
    id v59 = _swiftEmptyArrayStorage;
    uint64_t v53 = v6;
    uint64_t v28 = (uint64_t)v55;
    do
    {
      sub_10009A1A0(&aBlock, v61);
      sub_10009A1B0((uint64_t)v61, (uint64_t)v60);
      sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
      if (swift_dynamicCast())
      {
        id v29 = v67;
        id v30 = [v67 identifier];
        if (v30)
        {
          Swift::String v31 = v30;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v32 = 0;
        }
        else
        {
          uint64_t v32 = 1;
        }
        (*v26)(v28, v32, 1, v6);
        uint64_t v33 = v56;
        sub_1000F44F4(v28, v56);
        if ((*v27)(v33, 1, v6))
        {

          sub_1000966BC(v33, (uint64_t *)&unk_100909E50);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v61);
        }
        else
        {
          id v34 = v54;
          (*v52)(v54, v33, v6);
          sub_1000966BC(v33, (uint64_t *)&unk_100909E50);
          uint64_t v35 = UUID.uuidString.getter();
          uint64_t v37 = v36;

          (*v51)(v34, v6);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v61);
          unint64_t v38 = v59;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v38 = sub_100308F88(0, v38[2] + 1, 1, v38);
          }
          unint64_t v40 = v38[2];
          unint64_t v39 = v38[3];
          id v59 = v38;
          if (v40 >= v39 >> 1) {
            id v59 = sub_100308F88((void *)(v39 > 1), v40 + 1, 1, v59);
          }
          id v41 = v59;
          v59[2] = v40 + 1;
          id v42 = &v41[2 * v40];
          void v42[4] = v35;
          v42[5] = v37;
          uint64_t v6 = v53;
          uint64_t v28 = (uint64_t)v55;
        }
        unint64_t v24 = v57;
        uint64_t v25 = v58;
      }
      else
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v61);
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v64);
  }
  else
  {
    id v59 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v47 + 8))(v24, v25);
  uint64_t v43 = v50;
  sub_10043D0F0((uint64_t)v59, v48, v49);
  if (v43)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v45 = v44;

    swift_bridgeObjectRelease();
  }
}

void sub_10064E3B4()
{
  id v1 = [v0 lists];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = (uint64_t)[v1 count];

    if (v3 >= 1)
    {
      uint64_t v4 = (void *)sub_100650740();
      if (v4)
      {
        unint64_t v5 = v4;
        id v6 = (id)sub_10065749C(v4);
        id v7 = [v0 smartLists];
        if (v6)
        {
          if (v7)
          {
            id v10 = v7;
            id v6 = v6;
            id v8 = v10;
            uint64_t v9 = (void *)sub_10065C8AC();
            sub_1006590B0(v6, v9, v5);

            unint64_t v5 = v6;
          }
          id v11 = v6;
        }
        else
        {
          id v11 = v7;
        }
      }
    }
  }
}

void sub_10064E4D8(unint64_t a1, int a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v74 = &v67[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  id v10 = &v67[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  double v13 = &v67[-v12];
  id v75 = sub_1006504B0();
  if (!v75)
  {
    if (qword_100907AC0 == -1)
    {
LABEL_29:
      uint64_t v31 = type metadata accessor for Logger();
      sub_10008E2DC(v31, (uint64_t)qword_1009208A0);
      os_log_t v78 = (os_log_t)Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v78, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v78, v32, "Failed to create a new listIDsMergeableOrdering when trying to update listIDsMergableOrdering for missing list(s)", v33, 2u);
        swift_slowDealloc();
      }
      os_log_t v34 = v78;

      return;
    }
LABEL_76:
    swift_once();
    goto LABEL_29;
  }
  unint64_t v81 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v80 = (char *)&_swiftEmptySetSingleton;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    if (v14) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14)
    {
LABEL_4:
      if (v14 >= 1)
      {
        int v68 = a2;
        unint64_t v69 = v2;
        uint64_t v16 = 0;
        id v77 = (void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        os_log_t v78 = (os_log_t)(a1 & 0xC000000000000001);
        id v76 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48);
        unint64_t v72 = (void (**)(unsigned char *, uint64_t))(v6 + 8);
        id v73 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 16);
        *(void *)&long long v15 = 138412290;
        long long v70 = v15;
        id v71 = v13;
        while (1)
        {
          if (v78) {
            id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v17 = *(id *)(a1 + 8 * v16 + 32);
          }
          id v18 = v17;
          id v19 = [v17 identifier];
          if (v19)
          {
            uint64_t v20 = v19;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v21 = 0;
          }
          else
          {
            uint64_t v21 = 1;
          }
          (*v77)(v10, v21, 1, v5);
          sub_1000F44F4((uint64_t)v10, (uint64_t)v13);
          if ((*v76)(v13, 1, v5))
          {
            sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
            if (qword_100907AC0 != -1) {
              swift_once();
            }
            uint64_t v22 = type metadata accessor for Logger();
            sub_10008E2DC(v22, (uint64_t)qword_1009208A0);
            id v18 = v18;
            id v23 = Logger.logObject.getter();
            os_log_type_t v24 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v23, v24))
            {
              uint64_t v25 = swift_slowAlloc();
              id v26 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v25 = v70;
              *(void *)(v25 + 4) = v18;
              void *v26 = v18;
              _os_log_impl((void *)&_mh_execute_header, v23, v24, "Tried to update listIDsMergableOrdering for missing list but list has no identifier {list: %@}", (uint8_t *)v25, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              double v13 = v71;
              swift_slowDealloc();
              swift_slowDealloc();

              goto LABEL_8;
            }
          }
          else
          {
            uint64_t v27 = v74;
            (*v73)(v74, v13, v5);
            sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
            UUID.uuidString.getter();
            (*v72)(v27, v5);
            NSString v28 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v29 = [v75 indexOfEqualObject:v28];
            uint64_t v30 = NSNotFound.getter();
            if (v30 < 0 || v29 != (id)v30)
            {
              sub_10031F6E8((uint64_t *)&v79, (uint64_t)v29);
            }
            else
            {
              NSString v28 = v28;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
LABEL_8:
          if (v14 == ++v16)
          {
            swift_bridgeObjectRelease();
            id v2 = v69;
            LOBYTE(a2) = v68;
            goto LABEL_36;
          }
        }
      }
      __break(1u);
      goto LABEL_76;
    }
  }
  swift_bridgeObjectRelease();
LABEL_36:
  id v79 = _swiftEmptyArrayStorage;
  if (a2)
  {
    id v35 = [v75 count];
    uint64_t v36 = v80;
    if (v35)
    {
      id v37 = v35;
      uint64_t v38 = 0;
      unint64_t v39 = v80 + 56;
      unint64_t v40 = _swiftEmptyArrayStorage;
      while (1)
      {
        if (!*((void *)v36 + 2)) {
          goto LABEL_48;
        }
        uint64_t v41 = static Hasher._hash(seed:_:)();
        uint64_t v42 = -1 << v36[32];
        unint64_t v43 = v41 & ~v42;
        if (((*(void *)&v39[(v43 >> 3) & 0xFFFFFFFFFFFFFF8] >> v43) & 1) == 0) {
          goto LABEL_48;
        }
        uint64_t v44 = *((void *)v36 + 6);
        if (*(void *)(v44 + 8 * v43) != v38) {
          break;
        }
LABEL_40:
        if ((id)++v38 == v37) {
          goto LABEL_55;
        }
      }
      uint64_t v45 = ~v42;
      while (1)
      {
        unint64_t v43 = (v43 + 1) & v45;
        if (((*(void *)&v39[(v43 >> 3) & 0xFFFFFFFFFFFFFF8] >> v43) & 1) == 0) {
          break;
        }
        if (*(void *)(v44 + 8 * v43) == v38) {
          goto LABEL_40;
        }
      }
LABEL_48:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v40 = sub_10030B824(0, v40[2] + 1, 1, v40);
      }
      unint64_t v47 = v40[2];
      unint64_t v46 = v40[3];
      if (v47 >= v46 >> 1) {
        unint64_t v40 = sub_10030B824((void *)(v46 > 1), v47 + 1, 1, v40);
      }
      uint64_t v40[2] = v47 + 1;
      v40[v47 + 4] = v38;
      id v79 = v40;
      goto LABEL_40;
    }
    unint64_t v40 = _swiftEmptyArrayStorage;
LABEL_55:
    swift_bridgeObjectRelease();
    unint64_t v48 = v40[2];
    if (v48 >= 2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v40 = sub_1001ECE0C(v40);
      }
      unint64_t v49 = 0;
      unint64_t v50 = v48 + 3;
      while (1)
      {
        if (v49 != v50 - 4)
        {
          unint64_t v52 = v40[2];
          if (v49 >= v52)
          {
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            swift_bridgeObjectRetain();
            uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v66) {
              goto LABEL_67;
            }
LABEL_68:
            id v55 = v75;
            id v56 = [v75 mutableOrderedSet];
            id v57 = [objc_allocWithZone((Class)_REMDefaultReplicaManagerProvider) initWithStore:0];
            [v56 setReplicaManagerProvider:v57];

            sub_100654624(v56, (uint64_t *)&v79, &v81);
            id v58 = [v56 immutableOrderedSet];

            id v59 = [v58 serializedData];
            uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v62 = v61;

            Class isa = Data._bridgeToObjectiveC()().super.isa;
            sub_100097F34(v60, v62);
            [v2 setListIDsMergeableOrdering:isa];

            id v64 = [v2 createResolutionTokenMapIfNecessary];
            NSString v65 = String._bridgeToObjectiveC()();
            [v64 updateForKey:v65];

            [v2 updateChangeCount];
            swift_bridgeObjectRelease();

            goto LABEL_69;
          }
          if (v50 - 4 >= v52) {
            goto LABEL_72;
          }
          uint64_t v53 = &v40[v49];
          uint64_t v54 = v53[4];
          v53[4] = v40[v50];
          v40[v50] = v54;
        }
        ++v49;
        int64_t v51 = v50 - 5;
        --v50;
        if ((uint64_t)v49 >= v51)
        {
          id v79 = v40;
          break;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v40 = _swiftEmptyArrayStorage;
  }
  if (v81 >> 62) {
    goto LABEL_73;
  }
  if (*(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_68;
  }
LABEL_67:
  if (v40[2]) {
    goto LABEL_68;
  }
  swift_bridgeObjectRelease();

LABEL_69:
  swift_bridgeObjectRelease();
}

uint64_t sub_10064EE7C(uint64_t a1)
{
  id v4 = [v1 recentlyDeletedInfoAsData];
  if (!v4)
  {
LABEL_9:
    swift_retain();
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  type metadata accessor for RDRecentlyDeletedInfo();
  sub_10065CC00(&qword_100911D58, (void (*)(uint64_t))type metadata accessor for RDRecentlyDeletedInfo);
  static REMJSONRepresentable.fromJSONData(_:)();
  if (v2)
  {
    sub_100097F34(v6, v8);
    if (qword_100907528 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100917F60);
    swift_errorRetain();
    swift_errorRetain();
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446466;
      sub_1000963CC(0, &qword_10090ABC0);
      sub_100094134(&qword_1009173E0);
      uint64_t v13 = String.init<A>(describing:)();
      sub_1000C51B8(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v15 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s#mergeRecentlyDeletedInfo(_:): Failed to deserialize 'recentlyDeletedInfoAsData' due to unexpected error. It will be overwritten. { error: %{public}s}", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_9;
  }
  sub_100097F34(v6, v8);
  swift_retain();
  sub_10058BEB4(a1);
  swift_release();
LABEL_10:
  uint64_t v17 = swift_retain();
  sub_100552258(v17, 1);
  swift_release();
  return swift_release_n();
}

unint64_t sub_10064F1E0(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 4:
      unint64_t result = 0x44496E6F73726570;
      break;
    case 5:
      unint64_t result = 0xD000000000000021;
      break;
    case 6:
      unint64_t result = 0xD000000000000023;
      break;
    case 7:
      unint64_t result = 0xD000000000000019;
      break;
    case 8:
      unint64_t result = 0xD000000000000019;
      break;
    case 9:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_10064F2EC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001F54E4(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1006599CC(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_10064F358()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009208A0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009208A0);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10064F428(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10064F1E0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10064F1E0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10064F4B4()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10064F1E0(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10064F518()
{
  sub_10064F1E0(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10064F56C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10064F1E0(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_10064F5CC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10065CB64(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10064F5FC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10064F1E0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10064F628(void *a1@<X8>)
{
  *a1 = &off_1008B40A0;
}

_UNKNOWN **static REMCDAccount.recordTypes()()
{
  return &off_1008B7880;
}

Swift::String __swiftcall REMCDAccount.recordName()()
{
  id v1 = [v0 ckUserRecordName];
  if (v1)
  {
    char v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    id v6 = [v0 recordType];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    v10._uint64_t countAndFlagsBits = 47;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = v3;
    v11._object = v5;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v7;
    uint64_t v13 = v9;
  }
  else
  {
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_1009208A0);
    id v15 = v0;
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      v26[0] = swift_slowAlloc();
      *(_DWORD *)id v18 = 136446210;
      id v19 = [v15 remObjectID];
      if (v19)
      {
        uint64_t v20 = v19;
        id v21 = [v19 description];

        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v24 = v23;
      }
      else
      {
        unint64_t v24 = 0xE300000000000000;
        uint64_t v22 = 7104878;
      }
      void v26[2] = sub_1000C51B8(v22, v24, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "REMCDAccount.recordName() cannot be determined because it is called before .ckUserRecordName is initialized {account: %{public}s}", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v12 = 0;
    uint64_t v13 = (void *)0xE000000000000000;
  }
  result._object = v13;
  result._uint64_t countAndFlagsBits = v12;
  return result;
}

Swift::String __swiftcall REMCDAccount.recordType()()
{
  uint64_t v0 = 0x746E756F636341;
  id v1 = (void *)0xE700000000000000;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t static REMCDAccount.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = [a1 recordName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v7._uint64_t countAndFlagsBits = 0x2F746E756F636341;
  v7._object = (void *)0xE800000000000000;
  LOBYTE(v6) = String.hasPrefix(_:)(v7);
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    id v8 = [a1 recordName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v9._uint64_t countAndFlagsBits = 95;
    v9._object = (void *)0xE100000000000000;
    LOBYTE(v8) = String.hasPrefix(_:)(v9);
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  Swift::String v10 = self;
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 cloudKitAccountWithCKIdentifier:v11 context:a4];

  if (!v12) {
    return 0;
  }
  NSString v13 = [a1 recordName];
  if (!v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v14 = [v12 ckIdentifierFromRecordName:v13];

  NSString v15 = v14;
  if (!v14)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  id v19 = [v12 ckUserRecordName];
  if (v19)
  {
    id v20 = v19;

    NSString v15 = v20;
  }
  else
  {
    [v12 setCkUserRecordName:v15];
  }

  id v21 = [v12 ckUserRecordName];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    if (v23 == v16 && v25 == v18)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
      {
LABEL_18:

        return 0;
      }
    }
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
    goto LABEL_18;
  }

  swift_bridgeObjectRelease();
  return 0;
}

uint64_t static REMCDAccount.allCloudObjects(in:)(uint64_t a1)
{
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v3 = [ObjCClassFromMetadata predicateForCloudKitAccountsWithKeyPathPrefix:0];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v5 = [ObjCClassFromMetadata ic_objectsMatchingPredicate:v3 sortDescriptors:0 propertiesToFetch:0 relationshipKeyPathsForPrefetching:isa context:a1];

  sub_1000963CC(0, (unint64_t *)&qword_100909B00);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = sub_100200988(v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t static REMCDAccount.allCloudObjectIDs(in:)(uint64_t a1)
{
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v3 = [ObjCClassFromMetadata predicateForCloudKitAccountsWithKeyPathPrefix:0];
  id v4 = [ObjCClassFromMetadata ic_objectIDsMatchingPredicate:v3 context:a1];
  sub_1000963CC(0, (unint64_t *)&qword_100914150);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

void static REMCDAccount.newCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907AC0 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10008E2DC(v10, (uint64_t)qword_1009208A0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_bridgeObjectRetain_n();
  id v15 = a1;
  uint64_t v16 = Logger.logObject.getter();
  int v17 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    int v33 = v17;
    uint64_t v34 = v5;
    uint64_t v35 = a4;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v38 = v32;
    *(_DWORD *)uint64_t v18 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_1000C51B8(a2, a3, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2082;
    id v19 = [v15 ic_loggingDescription];
    id v36 = v15;
    if (!v19)
    {

      __break(1u);
      return;
    }
    id v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;

    uint64_t v37 = sub_1000C51B8(v21, v23, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v24 = v36;

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v33, "We aren't supposed to call REMCDAccount.newCloudObject(for:accountID:context:) on sync down, as CloudKit accounts creation is always managed internally by RDAccountUtils {accountID: %{public}s, recordID: %{public}s}", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    a4 = v35;
    id v15 = v24;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  id v25 = v15;
  id v26 = [v15 recordID];
  NSString v27 = [v26 recordName];

  if (!v27)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v28 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v27 context:a4 account:0];

  if (v28)
  {
    id v29 = [v28 ckIdentifier];
    if (v29)
    {
      uint64_t v30 = v29;
      [v28 mergeDataFromRecord:v25 accountID:v29];

      [v28 setCkServerRecord:v25];
      [v28 setInCloud:1];
    }
    else
    {
    }
  }
}

id sub_1006504B0()
{
  id v1 = (id)sub_100650740();
  if (!v1)
  {
    id v2 = sub_1004B9D50();
    if (v2)
    {
      id v3 = v2;
      id v4 = [objc_allocWithZone((Class)NSOrderedSet) init];
      id v1 = [objc_allocWithZone((Class)REMCRMergeableOrderedSet) initWithReplicaIDSource:v3 orderedSet:v4];
    }
    else
    {
      if (qword_100907AC0 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_10008E2DC(v5, (uint64_t)qword_1009208A0);
      id v6 = v0;
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = swift_slowAlloc();
        uint64_t v10 = (void *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 136446466;
        sub_1000C51B8(0xD000000000000018, 0x80000001007C65F0, &v13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v9 + 12) = 2112;
        id v11 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v10 = v6;

        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to create new listIDsMergeableOrdering because replicaIDSource isn't available {key: %{public}s, cdObject: %@}", (uint8_t *)v9, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v1;
}

uint64_t sub_100650740()
{
  if (qword_100907AC0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_1009208A0);
  id v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    id v6 = [v2 remObjectID];
    if (v6)
    {
      uint64_t v7 = v6;
      id v8 = [v6 description];

      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;
    }
    else
    {
      unint64_t v11 = 0xE300000000000000;
      uint64_t v9 = 7104878;
    }
    uint64_t v19 = sub_1000C51B8(v9, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deserializing listIDsMergeableOrdering from cdAccount listIDsMergeableOrdering data {recordID: %s}", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v12 = [v2 listIDsMergeableOrdering:v19];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v16 = 0xF000000000000000;
  }
  uint64_t v17 = sub_100343D34(v14, v16, 0xD000000000000018, 0x80000001007C65F0);
  sub_100097F20(v14, v16);
  return v17;
}

Swift::Void __swiftcall REMCDAccount.sortChildrenObjects()()
{
  if (qword_100907AC0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_1009208A0);
  id v11 = v0;
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136446210;
    id v5 = [v11 remObjectID];
    if (v5)
    {
      id v6 = v5;
      id v7 = [v5 description];

      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;
    }
    else
    {
      unint64_t v10 = 0xE300000000000000;
      uint64_t v8 = 7104878;
    }
    sub_1000C51B8(v8, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "REMCDAccount.sortChildrenObjects() Not expected to be called practically {account: %{public}s}", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Bool __swiftcall REMCDAccount.mergeMigrationState(fromRecord:)(CKRecord fromRecord)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v124 - v12;
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)v124 - v15;
  *(void *)&double v18 = __chkstk_darwin(v17).n128_u64[0];
  uint64_t v20 = (char *)v124 - v19;
  id v21 = [v2 identifier:v18];
  if (v21)
  {
    unint64_t v22 = v21;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v23(v16, 0, 1, v4);
  }
  else
  {
    unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v23(v16, 1, 1, v4);
  }
  int v141 = v10;
  sub_1000F44F4((uint64_t)v16, (uint64_t)v20);
  int v139 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v140 = v5 + 48;
  if (v139(v20, 1, v4))
  {
    uint64_t v138 = 7104878;
    sub_1000966BC((uint64_t)v20, (uint64_t *)&unk_100909E50);
    unint64_t v24 = 0xE300000000000000;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v20, v4);
    sub_1000966BC((uint64_t)v20, (uint64_t *)&unk_100909E50);
    uint64_t v138 = UUID.uuidString.getter();
    unint64_t v24 = v25;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (CKRecord.recordType.getter() == 0x746E756F636341 && v26 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    int v27 = 1;
  }
  else
  {
    int v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  unsigned __int8 v145 = 0;
  uint64_t v28 = CKRecord.subscript.getter();
  if (v28 && (v144[0] = v28, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v29 = v143;
  }
  else
  {
    if (v27) {
      goto LABEL_18;
    }
    uint64_t v29 = 0;
  }
  unsigned int v30 = [v2 didChooseToMigrate];
  unsigned __int8 v145 = v29 ^ v30;
  if ((v29 ^ v30) == 1) {
    [v2 setDidChooseToMigrate:v29];
  }
LABEL_18:
  uint64_t v31 = CKRecord.subscript.getter();
  if (!v31 || (v144[0] = v31, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) == 0))
  {
    if (v27 & 1) == 0 && ([v2 didFinishMigration]) {
      goto LABEL_25;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    unsigned int v39 = 0;
    uint64_t v34 = (uint64_t)v141;
    if (v145 != 1) {
      return v39;
    }
    goto LABEL_58;
  }
  int v32 = v143;
  if (v32 == [v2 didFinishMigration]) {
    goto LABEL_31;
  }
  if (v32)
  {
    int v137 = v27;
    swift_bridgeObjectRelease();
    uint64_t v33 = 1;
    uint64_t v34 = (uint64_t)v141;
    goto LABEL_55;
  }
LABEL_25:
  uint64_t v135 = v23;
  Class v136 = v7;
  int v134 = v13;
  int v137 = v27;
  if (v145 == 1 && ([v2 didChooseToMigrate] & 1) == 0)
  {
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    sub_10008E2DC(v72, (uint64_t)qword_1009208A0);
    LODWORD(v132) = v145;
    id v73 = v2;
    swift_bridgeObjectRetain();
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.default.getter();
    LODWORD(v133) = v75;
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = swift_slowAlloc();
      uint64_t v131 = swift_slowAlloc();
      v144[0] = v131;
      *(_DWORD *)uint64_t v76 = 67109890;
      LODWORD(v143) = v137 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v76 + 8) = 2082;
      os_log_t v130 = v74;
      swift_bridgeObjectRetain();
      os_log_t v143 = (os_log_t)sub_1000C51B8(v138, v24, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v76 + 18) = 1024;
      LODWORD(v143) = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v76 + 24) = 1024;
      unsigned int v77 = [v73 didChooseToMigrate];

      LODWORD(v143) = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      os_log_t v78 = v130;
      _os_log_impl((void *)&_mh_execute_header, v130, (os_log_type_t)v133, "mergeMigrationState(fromRecord:) - Toggling didFinishMigration->FALSE {isAccountRecord: %{BOOL}d, accountID: %{public}s, didChooseToMigrateChanged: %{BOOL}d, didChooseToMigrate: %{BOOL}d}", (uint8_t *)v76, 0x1Eu);
      uint64_t v138 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v138 = 1;
    }
  }
  else
  {
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_10008E2DC(v35, (uint64_t)qword_1009208A0);
    swift_bridgeObjectRetain();
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      v144[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 67109378;
      LODWORD(v143) = v137 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 8) = 2082;
      swift_bridgeObjectRetain();
      os_log_t v143 = (os_log_t)sub_1000C51B8(v138, v24, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "ERROR mergeMigrationState(fromRecord:) - Trying to merge account record that toggles didFinishMigration->FALSE after finishing migration {isAccountRecord: %{BOOL}d, accountID: %{public}s}", (uint8_t *)v38, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v138 = 0;
  }
  id v40 = [v2 getResolutionTokenMapFromRecord:fromRecord.super.isa];
  id v133 = v40;
  if (v40)
  {
    id v41 = v40;
    NSString v42 = String._bridgeToObjectiveC()();
    id v43 = [v41 getTokenForKey:v42];

    id v44 = v41;
    NSString v45 = String._bridgeToObjectiveC()();
    id v46 = [v44 getTokenForKey:v45];
  }
  else
  {
    id v46 = 0;
    id v43 = 0;
  }
  id v47 = [v2 createResolutionTokenMapIfNecessary];
  NSString v48 = String._bridgeToObjectiveC()();
  unint64_t v49 = [v47 getTokenForKey:v48];

  NSString v50 = String._bridgeToObjectiveC()();
  id v132 = v47;
  int64_t v51 = [v47 getTokenForKey:v50];

  if (qword_100907AC0 != -1) {
    swift_once();
  }
  uint64_t v52 = type metadata accessor for Logger();
  sub_10008E2DC(v52, (uint64_t)qword_1009208A0);
  uint64_t v131 = (uint64_t)v46;
  id v53 = v46;
  os_log_t v130 = v51;
  uint64_t v54 = v51;
  id v55 = v43;
  os_log_t v129 = v49;
  id v56 = v49;
  id v57 = v53;
  id v58 = v54;
  id v59 = v55;
  id v60 = v43;
  id v61 = v59;
  unint64_t v62 = v56;
  uint64_t v63 = Logger.logObject.getter();
  int v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, (os_log_type_t)v64))
  {
    int v127 = v58;
    int v128 = v62;
    uint64_t v65 = swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    v144[0] = v66;
    *(_DWORD *)uint64_t v65 = 136315906;
    os_log_t v126 = v63;
    int v125 = v64;
    v124[1] = v66;
    if (v60)
    {
      id v67 = [v61 debugDescription];
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v70 = v69;
    }
    else
    {
      unint64_t v70 = 0xE300000000000000;
      uint64_t v68 = 7104878;
    }
    os_log_t v143 = (os_log_t)sub_1000C51B8(v68, v70, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v65 + 12) = 2080;
    os_log_t v143 = v129;
    os_log_t v129 = (os_log_t)sub_100094134((uint64_t *)&unk_1009208C0);
    uint64_t v79 = Optional.debugDescription.getter();
    os_log_t v143 = (os_log_t)sub_1000C51B8(v79, v80, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v81 = v128;

    swift_bridgeObjectRelease();
    *(_WORD *)(v65 + 22) = 2080;
    if (v131)
    {
      id v82 = [v57 debugDescription];
      uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v85 = v84;
    }
    else
    {
      unint64_t v85 = 0xE300000000000000;
      uint64_t v83 = 7104878;
    }
    os_log_t v143 = (os_log_t)sub_1000C51B8(v83, v85, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v65 + 32) = 2080;
    os_log_t v143 = v130;
    uint64_t v86 = Optional.debugDescription.getter();
    os_log_t v143 = (os_log_t)sub_1000C51B8(v86, v87, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v88 = v127;

    swift_bridgeObjectRelease();
    os_log_t v89 = v126;
    _os_log_impl((void *)&_mh_execute_header, v126, (os_log_type_t)v125, "mergeMigrationState(fromRecord:) - Printing resolution tokens for debugging upon toggling didFinishMigration->FALSE - {didChooseToMigrate: (record=%s, CD=%s), didFinishMigration: (record=%s, CD=%s)}", (uint8_t *)v65, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v71 = v132;
  }
  else
  {

    id v71 = v133;
  }

  uint64_t v13 = v134;
  unint64_t v23 = v135;
  uint64_t v34 = (uint64_t)v141;
  id v7 = v136;
  if ((v138 & 1) == 0) {
    goto LABEL_57;
  }
  uint64_t v33 = 0;
LABEL_55:
  [v2 setDidFinishMigration:v33];
  if (!(v137 & 1 | ((v33 & 1) == 0))) {
    [v2 setCkNeedsInitialFetchFromCloud:1];
  }
LABEL_57:
  unsigned int v39 = [v2 didFinishMigration];
  swift_beginAccess();
LABEL_58:
  id v90 = [v2 identifier];
  if (v90)
  {
    id v91 = v90;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v92 = 0;
  }
  else
  {
    uint64_t v92 = 1;
  }
  v23((char *)v34, v92, 1, v4);
  sub_1000F44F4(v34, (uint64_t)v13);
  if (v139(v13, 1, v4))
  {
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v13, v4);
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
    uint64_t v94 = UUID.uuidString.getter();
    unint64_t v96 = v95;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v97 = type metadata accessor for Logger();
    sub_10008E2DC(v97, (uint64_t)qword_1009208A0);
    id v98 = v2;
    swift_bridgeObjectRetain_n();
    id v99 = v98;
    uint64_t v100 = Logger.logObject.getter();
    os_log_type_t v101 = static os_log_type_t.default.getter();
    BOOL v102 = os_log_type_enabled(v100, v101);
    int v141 = (char *)v94;
    if (v102)
    {
      uint64_t v103 = swift_slowAlloc();
      os_log_t v104 = (os_log_t)swift_slowAlloc();
      LODWORD(v140) = v39;
      os_log_t v143 = v104;
      *(_DWORD *)uint64_t v103 = 136446722;
      swift_bridgeObjectRetain();
      uint64_t v142 = sub_1000C51B8(v94, v96, (uint64_t *)&v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v103 + 12) = 1024;
      unsigned int v105 = [v99 didChooseToMigrate];

      LODWORD(v142) = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v103 + 18) = 1024;
      unsigned int v106 = [v99 didFinishMigration];

      LODWORD(v142) = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v100, v101, "Migration state did change {accountID: %{public}s, didChooseMigration: %{BOOL}d, didFinishMigration: %{BOOL}d}", (uint8_t *)v103, 0x18u);
      swift_arrayDestroy();
      unsigned int v39 = v140;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v107 = [v99 storeControllerManagedObjectContext];
    if (v107
      && (id v108 = v107,
          id v109 = [v107 storeController],
          v108,
          v109))
    {
      id v110 = [v109 cloudContext];
      if (v110)
      {
        uint64_t v111 = v110;
        LODWORD(v140) = v39;
        [v110 migrationStateDidChange:[v99 didChooseToMigrate] didFinishMigration:[v99 didFinishMigration]];
        if ([v109 accountUtils])
        {
          char v112 = [v99 didChooseToMigrate];
          char v113 = [v99 didFinishMigration];
          char v114 = v145;
          if (qword_1009070D8 != -1) {
            swift_once();
          }
          sub_1005F3A88((uint64_t)v141, v96, v112, v113, v114, (void *)qword_100942078, (uint64_t)sub_1006521A0, 0);
          swift_bridgeObjectRelease();

          swift_release();
          LOBYTE(v39) = v140;
        }
        else
        {
          swift_bridgeObjectRetain();
          id v121 = Logger.logObject.getter();
          os_log_type_t v122 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v121, v122))
          {
            int v123 = (uint8_t *)swift_slowAlloc();
            os_log_t v143 = (os_log_t)swift_slowAlloc();
            *(_DWORD *)int v123 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v142 = sub_1000C51B8((uint64_t)v141, v96, (uint64_t *)&v143);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v121, v122, "Missing account utils for processing migration state change {accountID: %{public}s}", v123, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }

          LOBYTE(v39) = v140;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v118 = Logger.logObject.getter();
        os_log_type_t v119 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v118, v119))
        {
          uint64_t v120 = (uint8_t *)swift_slowAlloc();
          os_log_t v143 = (os_log_t)swift_slowAlloc();
          *(_DWORD *)uint64_t v120 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v142 = sub_1000C51B8((uint64_t)v141, v96, (uint64_t *)&v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v118, v119, "Missing cloud context for processing migration state change {accountID: %{public}s}", v120, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v115 = Logger.logObject.getter();
      os_log_type_t v116 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v115, v116))
      {
        uint64_t v117 = (uint8_t *)swift_slowAlloc();
        os_log_t v143 = (os_log_t)swift_slowAlloc();
        *(_DWORD *)uint64_t v117 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v142 = sub_1000C51B8((uint64_t)v141, v96, (uint64_t *)&v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "Missing store controller for processing migration state change {accountID: %{public}s}", v117, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
  }
  return v39;
}

void sub_1006521A0(uint64_t a1)
{
  if (a1)
  {
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_1009208A0);
    swift_errorRetain();
    swift_errorRetain();
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v3 = 136315138;
      swift_getErrorValue();
      uint64_t v4 = Error.localizedDescription.getter();
      sub_1000C51B8(v4, v5, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Failed to process migration state change after merging CK user record {error: %s}", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_1009208A0);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Succesfully processed migration state change after merging CK user record", v8, 2u);
      swift_slowDealloc();
    }
  }
}

Swift::Void __swiftcall REMCDAccount.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  os_log_type_t v3 = v2;
  swift_getObjectType();
  NSString v5 = String._bridgeToObjectiveC()();
  v11.receiver = v3;
  v11.super_class = (Class)REMCDAccount;
  [super mergeDataFromRecord:from.super.isa accountID:v5];

  id v6 = [(objc_class *)from.super.isa recordID];
  NSString v7 = [v6 recordName];

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v8 = [v3 ckIdentifierFromRecordName:v7];

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setCkUserRecordName:v8];

  id v9 = v3;
  uint64_t v10 = from.super.isa;
  sub_1004B9BCC(v10, 0, 0, v9, v9, v10);
  if (([v9 mergeMigrationStateFromRecord:v10] & 1) != 0
    || [v9 ckNeedsInitialFetchFromCloud])
  {
    sub_10065437C(0);
  }
}

void sub_100652634(unsigned char *a1, void *a2, void *a3)
{
  id v152 = a2;
  uint64_t v5 = type metadata accessor for REMFeatureFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  id v9 = (char *)v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*a1)
  {
    case 2:
      id v10 = v152;
      sub_1004C1A54(a3, 0xD00000000000001DLL, 0, v157);
      long long v151 = v157[0];
      if ([v10 didChooseToMigrate]
        && [v10 didFinishMigration]
        && ([v10 ckNeedsInitialFetchFromCloud] & 1) == 0
        && (id v11 = [v10 listIDsMergeableOrdering]) != 0)
      {
        uint64_t v12 = v11;
        uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;
      }
      else
      {
        uint64_t v13 = 0;
        unint64_t v15 = 0xF000000000000000;
      }
      if (qword_100907AC0 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_10008E2DC(v36, (uint64_t)qword_1009208A0);
      id v37 = a3;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v150 = v13;
        id v40 = (uint8_t *)swift_slowAlloc();
        *(void *)&v157[0] = swift_slowAlloc();
        *(_DWORD *)id v40 = 136315138;
        v149[2] = v40 + 4;
        id v41 = [v37 recordID];
        id v42 = [v41 ckShortDescription];

        uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v45 = v44;

        id v10 = v152;
        *(void *)&long long v155 = sub_1000C51B8(v43, v45, (uint64_t *)v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        uint64_t v13 = v150;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Deserializing listIDsMergeableOrdering from account record listIDsMergeableOrdering data {recordID: %s}", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v53 = sub_1004C1204(v157, v13, v15, v151, *((unint64_t *)&v151 + 1), 0xD000000000000018, 0x80000001007C65F0, v10);
      uint64_t v55 = v53;
      unint64_t v56 = v54;
      id v57 = *(void **)&v157[0];
      if (!*(void *)&v157[0]) {
        id v57 = (void *)sub_100343D34(v53, v54, 0xD000000000000018, 0x80000001007C65F0);
      }
      swift_bridgeObjectRelease();
      if (v56 >> 60 == 15)
      {
        Class isa = 0;
      }
      else
      {
        sub_100097E38(v55, v56);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v55, v56);
      }
      [v10 setListIDsMergeableOrdering:isa];

      if (v57)
      {
        id v59 = v57;
        id v60 = (id)sub_10065749C(v59);
        uint64_t v61 = sub_10065818C(v59);
        unint64_t v62 = (void *)v61;
        if (v60)
        {
          if (v61)
          {
            id v60 = v60;
            uint64_t v63 = v13;
            int v64 = (void *)sub_10065C8AC();
            sub_1006590B0(v60, v64, v59);

            uint64_t v13 = v63;
          }
        }
        else
        {
          id v60 = (id)v61;
        }

        sub_100097F20(v55, v56);
        sub_100097F20(v13, v15);
        sub_100097F20(v151, *((unint64_t *)&v151 + 1));
      }
      else
      {
        sub_100097F20(v55, v56);
        sub_100097F20(v13, v15);
        sub_100097F20(v151, *((unint64_t *)&v151 + 1));
      }
      return;
    case 4:
      id v16 = [a3 encryptedValues:v7.n128_f64[0]];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_unknownObjectRelease();
      unint64_t v17 = *((void *)&v157[0] + 1);
      if (*((void *)&v157[0] + 1) >> 60 == 15)
      {
        Class v18 = 0;
      }
      else
      {
        uint64_t v46 = *(void *)&v157[0];
        Class v18 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v46, v17);
      }
      id v47 = v152;
      [v152 setPersonIDSalt:v18];

      id v48 = [v47 personIDSalt];
      if (v48)
      {
        unint64_t v49 = v48;
        uint64_t v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v52 = v51;

        id v156 = &type metadata for Data;
        *(void *)&long long v155 = v50;
        *((void *)&v155 + 1) = v52;
        sub_10009A1A0(&v155, v157);
      }
      else
      {
        memset(v157, 0, sizeof(v157));
      }
      uint64_t v65 = @"personIDSalt_v1";
      sub_100094134(&qword_100908190);
      unsigned int v66 = [v47 postAccountPropertyChangeNotificationWithKey:v65 changedValue:Optional._bridgeToObjectiveC()()];

      swift_unknownObjectRelease();
      if (v66)
      {
        if (qword_100907AC0 != -1) {
          swift_once();
        }
        uint64_t v67 = type metadata accessor for Logger();
        sub_10008E2DC(v67, (uint64_t)qword_1009208A0);
        id v68 = v47;
        unint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v69, v70))
        {
          id v71 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v155 = swift_slowAlloc();
          *(_DWORD *)id v71 = 136446210;
          id v72 = [v68 remObjectID];
          if (v72)
          {
            id v73 = v72;
            id v74 = [v72 description];

            uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v77 = v76;
          }
          else
          {
            uint64_t v75 = 7104878;
            unint64_t v77 = 0xE300000000000000;
          }
          v153[0] = sub_1000C51B8(v75, v77, (uint64_t *)&v155);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "REMCDAccount.mergeData(from): Synced and merged account .personIDSalt change from CloudKit record {accountID: %{public}s}", v71, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_1000966BC((uint64_t)v157, &qword_100908190);
      }
      else
      {
        if (qword_100907AC0 != -1) {
          swift_once();
        }
        uint64_t v78 = type metadata accessor for Logger();
        sub_10008E2DC(v78, (uint64_t)qword_1009208A0);
        sub_1000E6E80((uint64_t)v157, (uint64_t)&v155);
        id v79 = v47;
        unint64_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v80, v81))
        {
          uint64_t v82 = swift_slowAlloc();
          uint64_t v154 = swift_slowAlloc();
          *(_DWORD *)uint64_t v82 = 136446466;
          id v83 = [v79 remObjectID];
          if (v83)
          {
            unint64_t v84 = v83;
            id v85 = [v83 description];

            uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v88 = v87;
          }
          else
          {
            uint64_t v86 = 7104878;
            unint64_t v88 = 0xE300000000000000;
          }
          v153[0] = sub_1000C51B8(v86, v88, &v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v82 + 12) = 2080;
          sub_1000E6E80((uint64_t)&v155, (uint64_t)v153);
          uint64_t v111 = String.init<A>(describing:)();
          v153[0] = sub_1000C51B8(v111, v112, &v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000966BC((uint64_t)&v155, &qword_100908190);
          _os_log_impl((void *)&_mh_execute_header, v80, v81, "REMCDAccount.mergeData(from): Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {accountID: %{public}s, changedValue: %s}", (uint8_t *)v82, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_1000966BC((uint64_t)v157, &qword_100908190);
        }
        else
        {

          sub_1000966BC((uint64_t)&v155, &qword_100908190);
          sub_1000966BC((uint64_t)v157, &qword_100908190);
        }
      }
      return;
    case 6:
      uint64_t v19 = *(void (**)(char *, void, uint64_t, __n128))(v6 + 104);
      v19(v9, enum case for REMFeatureFlags.groceryMultilingual(_:), v5, v7);
      char v20 = REMFeatureFlags.isEnabled.getter();
      id v21 = *(void (**)(char *, uint64_t))(v6 + 8);
      v21(v9, v5);
      if ((v20 & 1) == 0) {
        return;
      }
      ((void (*)(char *, void, uint64_t))v19)(v9, enum case for REMFeatureFlags.groceryMultilingualCloudKit(_:), v5);
      char v22 = REMFeatureFlags.isEnabled.getter();
      v21(v9, v5);
      if ((v22 & 1) == 0) {
        return;
      }
      id v23 = [a3 encryptedValues];
      NSString v24 = String._bridgeToObjectiveC()();
      id v25 = [v23 objectForKeyedSubscript:v24];
      swift_unknownObjectRelease();

      if (v25)
      {
        *(void *)&long long v155 = v25;
        sub_100094134(&qword_100909AB0);
        int v26 = swift_dynamicCast();
        if (v26) {
          uint64_t v27 = *(void *)&v157[0];
        }
        else {
          uint64_t v27 = 0;
        }
        if (v26) {
          uint64_t v28 = *((void *)&v157[0] + 1);
        }
        else {
          uint64_t v28 = 0;
        }
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
      }
      id v105 = [v152 secondaryGroceryLocalesInfoChecksum];
      if (v105)
      {
        unsigned int v106 = v105;
        uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v109 = v108;

        if (v28)
        {
          id v110 = v152;
          if (v107 == v27 && v28 == v109)
          {
            swift_bridgeObjectRelease();
LABEL_103:
            swift_bridgeObjectRelease();
            char v113 = &selRef_includeReminderTitles;
            goto LABEL_119;
          }
          char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v122) {
            goto LABEL_103;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          id v110 = v152;
        }
      }
      else
      {
        id v110 = v152;
        if (!v28)
        {
          char v113 = &selRef_includeReminderTitles;
          goto LABEL_119;
        }
      }
      *(void *)&long long v151 = [v110 secondaryGroceryLocalesInfoChecksum];
      char v113 = &selRef_includeReminderTitles;
      id v123 = [v110 secondaryGroceryLocalesInfoAsData];
      if (v123)
      {
        int v124 = v123;
        *((void *)&v151 + 1) = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v126 = v125;
      }
      else
      {
        *((void *)&v151 + 1) = 0;
        unint64_t v126 = 0xF000000000000000;
      }
      id v127 = [v110 secondaryGroceryLocalesInfoAsData];
      if (v127)
      {
        int v128 = v127;
        uint64_t v129 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v131 = v130;

        type metadata accessor for RDSecondaryGroceryLocalesInfo();
        sub_10065CC00((unint64_t *)&unk_100920900, (void (*)(uint64_t))type metadata accessor for RDSecondaryGroceryLocalesInfo);
        static REMJSONRepresentable.fromJSONData(_:)();
        sub_100097F34(v129, v131);
        uint64_t v132 = *(void *)&v157[0];
        id v110 = v152;
      }
      else
      {
        uint64_t v132 = 0;
      }
      if (v28)
      {
        NSString v133 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v133 = 0;
      }
      uint64_t v134 = *((void *)&v151 + 1);
      [v110 setSecondaryGroceryLocalesInfoChecksum:v133];

      id v135 = [a3 encryptedValues];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_unknownObjectRelease();
      unint64_t v136 = *((void *)&v157[0] + 1);
      if (*((void *)&v157[0] + 1) >> 60 == 15)
      {
        Class v137 = 0;
      }
      else
      {
        unint64_t v138 = v126;
        uint64_t v139 = *(void *)&v157[0];
        Class v137 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v140 = v139;
        unint64_t v126 = v138;
        sub_100097F20(v140, v136);
      }
      [v110 setSecondaryGroceryLocalesInfoAsData:v137];

      if (v132)
      {
        swift_retain();
        sub_10064D828();
        swift_release();

        sub_100097F20(v134, v126);
        swift_release();
      }
      else
      {

        sub_100097F20(v134, v126);
      }
LABEL_119:
      id v141 = [v110 v113[424]];
      if (v141)
      {
        uint64_t v142 = v141;
        uint64_t v143 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v145 = v144;

        sub_100097F34(v143, v145);
        if (([v152 markedForDeletion] & 1) == 0)
        {
          id v146 = [v152 storeControllerManagedObjectContext];
          if (v146)
          {
            int v147 = v146;
            type metadata accessor for RDGroceryOperationQueue();
            id v148 = sub_1005EB4CC(0, 0, 2, (uint64_t)v152, (uint64_t)v147);
          }
        }
      }
      return;
    case 9:
      (*(void (**)(char *, void, uint64_t, __n128))(v6 + 104))(v9, enum case for REMFeatureFlags.recentlyDeletedList(_:), v5, v7);
      char v29 = REMFeatureFlags.isEnabled.getter();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v29 & 1) == 0) {
        return;
      }
      id v30 = [a3 encryptedValues];
      NSString v31 = String._bridgeToObjectiveC()();
      id v32 = [v30 objectForKeyedSubscript:v31];
      swift_unknownObjectRelease();

      if (v32)
      {
        *(void *)&long long v155 = v32;
        sub_100094134(&qword_100909AB0);
        int v33 = swift_dynamicCast();
        if (v33) {
          uint64_t v34 = *(void *)&v157[0];
        }
        else {
          uint64_t v34 = 0;
        }
        if (v33) {
          uint64_t v35 = *((void *)&v157[0] + 1);
        }
        else {
          uint64_t v35 = 0;
        }
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
      }
      id v89 = [v152 recentlyDeletedInfoChecksum];
      if (v89)
      {
        id v90 = v89;
        uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v93 = v92;

        if (v35)
        {
          if (v91 == v34 && v35 == v93)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
          char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v94)
          {
            swift_bridgeObjectRelease();
            return;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else if (!v35)
      {
        return;
      }
      id v95 = v152;
      *((void *)&v151 + 1) = [v152 recentlyDeletedInfoChecksum];
      id v96 = [v95 recentlyDeletedInfoAsData];
      if (v96)
      {
        uint64_t v97 = v96;
        *(void *)&long long v151 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v99 = v98;
      }
      else
      {
        *(void *)&long long v151 = 0;
        unint64_t v99 = 0xF000000000000000;
      }
      id v100 = [v95 recentlyDeletedInfoAsData];
      if (v100)
      {
        os_log_type_t v101 = v100;
        uint64_t v102 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v104 = v103;

        type metadata accessor for RDRecentlyDeletedInfo();
        sub_10065CC00(&qword_100911D58, (void (*)(uint64_t))type metadata accessor for RDRecentlyDeletedInfo);
        static REMJSONRepresentable.fromJSONData(_:)();
        sub_100097F34(v102, v104);
        uint64_t v114 = *(void *)&v157[0];
        id v95 = v152;
      }
      else
      {
        uint64_t v114 = 0;
      }
      if (v35)
      {
        NSString v115 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v115 = 0;
      }
      [v95 setRecentlyDeletedInfoChecksum:v115];

      uint64_t v116 = sub_1004C6530();
      if (v117 >> 60 == 15)
      {
        Class v118 = 0;
      }
      else
      {
        uint64_t v119 = v116;
        unint64_t v120 = v117;
        Class v118 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v119, v120);
      }
      [v152 setRecentlyDeletedInfoAsData:v118];

      if (v114)
      {
        uint64_t v121 = swift_retain();
        sub_10064EE7C(v121);
        swift_release();

        sub_100097F20(v151, v99);
        swift_release();
      }
      else
      {

        sub_100097F20(v151, v99);
      }
      return;
    default:
      return;
  }
}

void sub_10065437C(int a1)
{
  uint64_t v3 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)&double v5 = __chkstk_darwin(v3).n128_u64[0];
  __n128 v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [v1 lists:v5];
  if (v8)
  {
    id v9 = v8;
    uint64_t v13 = v3;
    int v14 = a1;
    unint64_t v15 = v1;
    unint64_t v20 = (unint64_t)_swiftEmptyArrayStorage;
    NSOrderedSet.makeIterator()();
    NSFastEnumerationIterator.next()();
    while (v19)
    {
      sub_10009A1A0(&v18, &v17);
      sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
      if (swift_dynamicCast())
      {
        id v10 = v16;
        if ([v16 markedForDeletion])
        {
        }
        else
        {
          id v11 = v10;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      NSFastEnumerationIterator.next()();
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v13);
    sub_10064E4D8(v20, v14 & 1);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100654624(void *a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*a2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v8 = *(void *)(v5 + 8 * i + 32);
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v9 = *a3;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = result;
    if (!result) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v10) {
      goto LABEL_14;
    }
  }
  if (v10 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v12 = 0;
  do
  {
    if ((v9 & 0xC000000000000001) != 0) {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v13 = *(id *)(v9 + 8 * v12 + 32);
    }
    int v14 = v13;
    ++v12;
    id v15 = [a1 addObject:v13];
  }
  while (v10 != v12);
LABEL_14:

  return swift_bridgeObjectRelease();
}

void sub_100654778(void *a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  *(void *)&double v4 = __chkstk_darwin(v3 - 8).n128_u64[0];
  uint64_t v6 = (char *)v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v7 = [v1 ckSharedObjectOwnerNames:v4];
  if (!v7)
  {
    id v15 = [a1 encryptedValues];
    uint64_t v103 = (uint64_t)String._bridgeToObjectiveC()();
    [v15 setObject:0 forKeyedSubscript:];
    swift_unknownObjectRelease();
    id v16 = (void *)v103;

    return;
  }
  uint64_t v8 = v7;
  v90[1] = v6;
  id v91 = a1;
  uint64_t v9 = sub_1000963CC(0, &qword_1009208F0);
  sub_1000E4F40(&qword_1009208F8, &qword_1009208F0);
  uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v95 = v9;
  if ((v10 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    uint64_t v10 = v108;
    uint64_t v101 = v109;
    uint64_t v12 = v110;
    uint64_t v13 = v111;
    unint64_t v14 = v112;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v17 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v18 = *(void *)(v10 + 56);
    uint64_t v101 = v10 + 56;
    uint64_t v12 = ~v17;
    uint64_t v19 = -v17;
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v14 = v20 & v18;
  }
  uint64_t v96 = v10 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v92 = v12;
  int64_t v97 = (unint64_t)(v12 + 64) >> 6;
  uint64_t v93 = _swiftEmptyDictionarySingleton;
  id v21 = &selRef_intersectsSet_;
  char v22 = &qword_100907000;
  *(void *)&long long v11 = 136315394;
  long long v99 = v11;
  unint64_t v98 = (char *)&type metadata for Any + 8;
  char v94 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v100 = v10;
  while (2)
  {
    uint64_t v23 = v13;
    if (v10 < 0)
    {
LABEL_15:
      uint64_t v24 = __CocoaSet.Iterator.next()();
      if (v24)
      {
        uint64_t v8 = (void *)v24;
        uint64_t v104 = v24;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v25 = (id)v105;
        swift_unknownObjectRelease();
        uint64_t v26 = v23;
        uint64_t v103 = v14;
        if (v25) {
          goto LABEL_35;
        }
      }
LABEL_60:
      sub_1000C1AF8();
      id v73 = self;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      *(void *)&long long v105 = 0;
      id v75 = [v73 dataWithJSONObject:isa options:0 error:&v105];

      id v76 = (id)v105;
      if (v75)
      {
        uint64_t v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v79 = v78;

        id v80 = [v91 encryptedValues];
        static String.Encoding.utf8.getter();
        uint64_t v81 = String.init(data:encoding:)();
        if (v82)
        {
          *((void *)&v106 + 1) = &type metadata for String;
          uint64_t v107 = &protocol witness table for String;
          *(void *)&long long v105 = v81;
          *((void *)&v105 + 1) = v82;
        }
        else
        {
          uint64_t v107 = 0;
          long long v105 = 0u;
          long long v106 = 0u;
        }
        swift_getObjectType();
        CKRecordKeyValueSetting.subscript.setter();
        swift_unknownObjectRelease();
        sub_100097F34(v77, v79);
        return;
      }
      id v83 = v76;
      uint64_t v8 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      if (v22[344] == -1)
      {
LABEL_64:
        uint64_t v84 = type metadata accessor for Logger();
        sub_10008E2DC(v84, (uint64_t)qword_1009208A0);
        swift_errorRetain();
        swift_errorRetain();
        id v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v85, v86))
        {
          unint64_t v87 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v105 = swift_slowAlloc();
          *(_DWORD *)unint64_t v87 = 136315138;
          uint64_t v104 = (uint64_t)v8;
          swift_errorRetain();
          sub_100094134((uint64_t *)&unk_10090ABB0);
          uint64_t v88 = String.init<A>(describing:)();
          uint64_t v104 = sub_1000C51B8(v88, v89, (uint64_t *)&v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "Failed to encode ckSharedObjectOwnerNames in JSON {error: %s}", v87, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        return;
      }
LABEL_70:
      swift_once();
      goto LABEL_64;
    }
    while (1)
    {
      if (v14)
      {
        uint64_t v103 = (v14 - 1) & v14;
        unint64_t v27 = __clz(__rbit64(v14)) | (v23 << 6);
        uint64_t v26 = v23;
      }
      else
      {
        int64_t v28 = v23 + 1;
        if (__OFADD__(v23, 1))
        {
          __break(1u);
          goto LABEL_70;
        }
        if (v28 >= v97) {
          goto LABEL_60;
        }
        unint64_t v29 = *(void *)(v101 + 8 * v28);
        uint64_t v26 = v23 + 1;
        if (!v29)
        {
          uint64_t v26 = v23 + 2;
          if (v23 + 2 >= v97) {
            goto LABEL_60;
          }
          unint64_t v29 = *(void *)(v101 + 8 * v26);
          if (!v29)
          {
            uint64_t v26 = v23 + 3;
            if (v23 + 3 >= v97) {
              goto LABEL_60;
            }
            unint64_t v29 = *(void *)(v101 + 8 * v26);
            if (!v29)
            {
              uint64_t v26 = v23 + 4;
              if (v23 + 4 >= v97) {
                goto LABEL_60;
              }
              unint64_t v29 = *(void *)(v101 + 8 * v26);
              if (!v29)
              {
                uint64_t v30 = v23 + 5;
                do
                {
                  if (v97 == v30) {
                    goto LABEL_60;
                  }
                  unint64_t v29 = *(void *)(v101 + 8 * v30++);
                }
                while (!v29);
                uint64_t v26 = v30 - 1;
              }
            }
          }
        }
        uint64_t v103 = (v29 - 1) & v29;
        unint64_t v27 = __clz(__rbit64(v29)) + (v26 << 6);
      }
      id v25 = *(id *)(*(void *)(v10 + 48) + 8 * v27);
      if (!v25) {
        goto LABEL_60;
      }
LABEL_35:
      id v31 = [v25 v21[268]];
      if (v31) {
        break;
      }
LABEL_38:
      if (v22[344] != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_10008E2DC(v36, (uint64_t)qword_1009208A0);
      id v37 = v25;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v102 = v26;
        id v40 = v22;
        uint64_t v41 = swift_slowAlloc();
        uint64_t v8 = (void *)swift_slowAlloc();
        *(void *)&long long v105 = v8;
        *(_DWORD *)uint64_t v41 = v99;
        id v42 = v21;
        id v43 = [v37 v21[268]];
        if (v43)
        {
          unint64_t v44 = v43;
          uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v47 = v46;
        }
        else
        {
          unint64_t v47 = 0xE300000000000000;
          uint64_t v45 = 7104878;
        }
        *(void *)(v41 + 4) = sub_1000C51B8(v45, v47, (uint64_t *)&v105);

        swift_bridgeObjectRelease();
        *(_WORD *)(v41 + 12) = 2080;
        id v48 = [v37 ownerName];
        if (v48)
        {
          unint64_t v49 = v48;
          uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v52 = v51;
        }
        else
        {
          unint64_t v52 = 0xE300000000000000;
          uint64_t v50 = 7104878;
        }
        char v22 = v40;
        *(void *)(v41 + 14) = sub_1000C51B8(v50, v52, (uint64_t *)&v105);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Invalid ckSharedObjectOwnerName entry {objectIdentifier: %s, ownerName: %s}", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v23 = v102;
        unint64_t v14 = v103;
        uint64_t v10 = v100;
        id v21 = v42;
        if (v100 < 0) {
          goto LABEL_15;
        }
      }
      else
      {

        uint64_t v23 = v26;
        unint64_t v14 = v103;
        if (v10 < 0) {
          goto LABEL_15;
        }
      }
    }
    id v32 = v31;
    uint64_t v8 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    id v35 = [v25 ownerName];
    if (!v35)
    {
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    uint64_t v53 = v35;
    uint64_t v102 = v26;
    v90[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v55 = v54;

    unint64_t v56 = v93;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v105 = v56;
    unint64_t v59 = sub_1001806F8((uint64_t)v8, v34);
    uint64_t v60 = v56[2];
    BOOL v61 = (v58 & 1) == 0;
    uint64_t v62 = v60 + v61;
    if (__OFADD__(v60, v61))
    {
      __break(1u);
LABEL_72:
      __break(1u);
    }
    char v63 = v58;
    if (v56[3] >= v62)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100318A14();
      }
LABEL_55:
      uint64_t v13 = v102;
      uint64_t v66 = v90[0];
      uint64_t v67 = (void *)v105;
      uint64_t v93 = (void *)v105;
      if (v63)
      {
        uint64_t v8 = (void *)(*(void *)(v105 + 56) + 16 * v59);
        swift_bridgeObjectRelease();
        *uint64_t v8 = v66;
        v8[1] = v55;
      }
      else
      {
        *(void *)(v105 + 8 * (v59 >> 6) + 64) |= 1 << v59;
        id v68 = (void *)(v67[6] + 16 * v59);
        void *v68 = v8;
        v68[1] = v34;
        unint64_t v69 = (void *)(v67[7] + 16 * v59);
        void *v69 = v66;
        v69[1] = v55;
        uint64_t v70 = v67[2];
        BOOL v71 = __OFADD__(v70, 1);
        uint64_t v72 = v70 + 1;
        if (v71) {
          goto LABEL_72;
        }
        v67[2] = v72;
        swift_bridgeObjectRetain();
      }
      id v21 = &selRef_intersectsSet_;
      unint64_t v14 = v103;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  sub_10030E654(v62, isUniquelyReferenced_nonNull_native);
  unint64_t v64 = sub_1001806F8((uint64_t)v8, v34);
  if ((v63 & 1) == (v65 & 1))
  {
    unint64_t v59 = v64;
    goto LABEL_55;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

CKRecord_optional __swiftcall REMCDAccount.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for REMFeatureFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v7 = __chkstk_darwin(v6).n128_u64[0];
  uint64_t v9 = (char *)&v65 - v8;
  v72.receiver = v0;
  v72.super_class = (Class)REMCDAccount;
  id v11 = [super newlyCreatedRecord:v7];
  if (v11)
  {
    id v12 = [v0 listIDsMergeableOrdering];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;

      if (v16 >> 60 == 15)
      {
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v14), v14)) {
              goto LABEL_35;
            }
            uint64_t v17 = HIDWORD(v14) - (int)v14;
            break;
          case 2uLL:
            uint64_t v64 = *(void *)(v14 + 16);
            uint64_t v63 = *(void *)(v14 + 24);
            uint64_t v17 = v63 - v64;
            if (!__OFSUB__(v63, v64)) {
              break;
            }
            __break(1u);
LABEL_35:
            __break(1u);
            JUMPOUT(0x100655954);
          case 3uLL:
            break;
          default:
            uint64_t v17 = BYTE6(v16);
            break;
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v17 = 0;
      unint64_t v16 = 0xF000000000000000;
    }
    id v68 = v5;
    sub_1004D0F28(v14, v16, v17, v11, 0xD000000000000018, 0x80000001007D4560, 0xD00000000000001DLL, 0x80000001007D4540, 0, 1uLL);
    sub_100097F20(v14, v16);
    id v18 = [v11 encryptedValues];
    id v19 = [v1 personIDSalt];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v3;
      uint64_t v23 = v1;
      uint64_t v25 = v24;

      *((void *)&v70 + 1) = &type metadata for Data;
      BOOL v71 = &protocol witness table for Data;
      *(void *)&long long v69 = v21;
      *((void *)&v69 + 1) = v25;
      uint64_t v1 = v23;
      uint64_t v3 = v22;
    }
    else
    {
      BOOL v71 = 0;
      long long v69 = 0u;
      long long v70 = 0u;
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    uint64_t v26 = *(void (**)(char *, void, uint64_t))(v3 + 104);
    v26(v9, enum case for REMFeatureFlags.recentlyDeletedList(_:), v2);
    char v27 = REMFeatureFlags.isEnabled.getter();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v28 = v3 + 8;
    unint64_t v29 = v30;
    v30(v9, v2);
    if (v27)
    {
      uint64_t v66 = v26;
      uint64_t v67 = v28;
      id v31 = [v1 recentlyDeletedInfoAsData];
      if (v31)
      {
        id v32 = v31;
        uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v34;

        uint64_t v36 = self;
        sub_100097E38(v33, v35);
        id v37 = v1;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v39 = [v36 assetForData:isa];

        uint64_t v1 = v37;
        CKRecord.subscript.setter();
        sub_100097F34(v33, v35);
        sub_100097F34(v33, v35);
      }
      else
      {
        CKRecord.subscript.setter();
      }
      id v40 = [v11 encryptedValues];
      id v41 = [v1 recentlyDeletedInfoChecksum];
      if (v41)
      {
        id v42 = v41;
        uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v44 = v1;
        uint64_t v46 = v45;

        *((void *)&v70 + 1) = &type metadata for String;
        BOOL v71 = &protocol witness table for String;
        *(void *)&long long v69 = v43;
        *((void *)&v69 + 1) = v46;
        uint64_t v1 = v44;
      }
      else
      {
        BOOL v71 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
      }
      uint64_t v26 = v66;
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.setter();
      swift_unknownObjectRelease();
    }
    unint64_t v47 = v68;
    v26(v68, enum case for REMFeatureFlags.groceryMultilingual(_:), v2);
    char v48 = REMFeatureFlags.isEnabled.getter();
    v29(v47, v2);
    if (v48)
    {
      v26(v9, enum case for REMFeatureFlags.groceryMultilingualCloudKit(_:), v2);
      char v49 = REMFeatureFlags.isEnabled.getter();
      v29(v9, v2);
      if (v49)
      {
        id v50 = [v11 encryptedValues];
        id v51 = [v1 secondaryGroceryLocalesInfoAsData];
        if (v51)
        {
          unint64_t v52 = v51;
          uint64_t v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v55 = v54;

          *((void *)&v70 + 1) = &type metadata for Data;
          BOOL v71 = &protocol witness table for Data;
          *(void *)&long long v69 = v53;
          *((void *)&v69 + 1) = v55;
        }
        else
        {
          BOOL v71 = 0;
          long long v69 = 0u;
          long long v70 = 0u;
        }
        swift_getObjectType();
        CKRecordKeyValueSetting.subscript.setter();
        swift_unknownObjectRelease();
        id v56 = [v11 encryptedValues];
        id v57 = [v1 secondaryGroceryLocalesInfoChecksum];
        if (v57)
        {
          char v58 = v57;
          uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v61 = v60;

          *((void *)&v70 + 1) = &type metadata for String;
          BOOL v71 = &protocol witness table for String;
          *(void *)&long long v69 = v59;
          *((void *)&v69 + 1) = v61;
        }
        else
        {
          BOOL v71 = 0;
          long long v69 = 0u;
          long long v70 = 0u;
        }
        swift_getObjectType();
        CKRecordKeyValueSetting.subscript.setter();
        swift_unknownObjectRelease();
      }
    }
    sub_100654778(v11);
  }
  uint64_t v62 = (objc_class *)v11;
  result.value.super.Class isa = v62;
  result.is_nil = v10;
  return result;
}

Swift::Bool __swiftcall REMCDAccount.needsToBePushedToCloud()()
{
  id v1 = [v0 ckUserRecordName];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    swift_bridgeObjectRelease();
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v6)
    {
      LODWORD(v1) = [v0 didChooseToMigrate];
      if (v1)
      {
        LODWORD(v1) = [v0 didFinishMigration];
        if (v1)
        {
          v8.receiver = v0;
          v8.super_class = (Class)REMCDAccount;
          LOBYTE(v1) = [super needsToBePushedToCloud];
        }
      }
    }
    else
    {
      LOBYTE(v1) = 0;
    }
  }
  return (char)v1;
}

Swift::Void __swiftcall REMCDAccount.cleanUpAfterLocalObjectMerge()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v173 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v183 = (char *)v165 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v165 - v8;
  __chkstk_darwin(v10);
  id v12 = (char *)v165 - v11;
  __chkstk_darwin(v13);
  uint64_t v181 = (uint64_t)v165 - v14;
  __chkstk_darwin(v15);
  os_log_type_t v177 = (char *)v165 - v16;
  __chkstk_darwin(v17);
  v176 = (char *)v165 - v18;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v165 - v20;
  *(void *)&double v23 = __chkstk_darwin(v22).n128_u64[0];
  uint64_t v25 = (char *)v165 - v24;
  id v26 = [v1 remObjectID:v23];
  if (v26)
  {
    char v27 = v26;
    id v28 = [v1 lists];
    if (v28)
    {
      unint64_t v29 = v28;
      uint64_t v172 = v27;
      v179 = v9;
      id v180 = v12;
      v188[0] = (uint64_t)v28;
      sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
      uint64_t v30 = sub_1000963CC(0, (unint64_t *)&unk_10090B010);
      uint64_t v31 = sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
      unint64_t v32 = Sequence.elements<A>(ofType:)();

      id v33 = [v1 listIDsMergeableOrdering];
      if (!v33)
      {
        swift_bridgeObjectRelease();
        id v74 = v172;
        if (qword_100907AC0 != -1) {
          swift_once();
        }
        uint64_t v75 = type metadata accessor for Logger();
        sub_10008E2DC(v75, (uint64_t)qword_1009208A0);
        id v76 = v74;
        uint64_t v59 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v59, v77))
        {

          return;
        }
        unint64_t v78 = (uint8_t *)swift_slowAlloc();
        unint64_t v79 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v78 = 138543362;
        v188[0] = (uint64_t)v76;
        id v80 = v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v79 = v74;

        _os_log_impl((void *)&_mh_execute_header, v59, v77, "MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has no listIDsMergeableOrdering (accountID: %{public}@).", v78, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_130;
      }
      unint64_t v34 = v33;
      id v178 = v6;
      uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v185 = v32;
      unint64_t v37 = v36;

      uint64_t v38 = self;
      uint64_t v39 = v31;
      id v40 = v172;
      id v41 = [v38 listIDsMergeableOrderingReplicaIDSourceWithAccountID:v172];
      sub_100097E38(v35, v37);
      v165[0] = "smartListIDsToUndelete";
      id v166 = v41;
      id v42 = sub_10029142C(v35, v37, v41, 0xD000000000000018, 0x80000001007C65F0, v40);
      uint64_t v168 = v35;
      unint64_t v167 = v37;
      sub_100097F34(v35, v37);
      id v169 = v42;
      id v43 = [v42 orderedSet];
      v188[0] = (uint64_t)v43;
      uint64_t v44 = sub_1000963CC(0, (unint64_t *)&unk_100910040);
      uint64_t v170 = v30;
      v165[1] = v44;
      v165[2] = v39;
      unint64_t v45 = Sequence.elements<A>(ofType:)();

      uint64_t v46 = sub_100128194(v45);
      swift_bridgeObjectRelease();
      v188[3] = v46;
      unint64_t v47 = v185;
      v188[0] = (uint64_t)_swiftEmptyArrayStorage;
      if (v185 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v48 = *(void *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      id v171 = v1;
      uint64_t v184 = v48;
      if (v48)
      {
        if (v48 < 1)
        {
          __break(1u);
          goto LABEL_84;
        }
        uint64_t v49 = 0;
        uint64_t v182 = (void (**)(char *, uint64_t, uint64_t))(v47 & 0xC000000000000001);
        id v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v173 + 56);
        id v51 = (unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48);
        os_log_type_t v175 = (void (**)(char *, char *, uint64_t))(v173 + 16);
        uint64_t v174 = (void (**)(char *, uint64_t))(v173 + 8);
        do
        {
          if (v182) {
            id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v52 = *(id *)(v47 + 8 * v49 + 32);
          }
          uint64_t v53 = v52;
          id v54 = [v52 identifier];
          if (v54)
          {
            uint64_t v55 = v54;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v56 = 0;
          }
          else
          {
            uint64_t v56 = 1;
          }
          (*v50)(v21, v56, 1, v2);
          sub_1000F44F4((uint64_t)v21, (uint64_t)v25);
          if ((*v51)(v25, 1, v2))
          {
            sub_1000966BC((uint64_t)v25, (uint64_t *)&unk_100909E50);
          }
          else
          {
            id v57 = v183;
            (*v175)(v183, v25, v2);
            sub_1000966BC((uint64_t)v25, (uint64_t *)&unk_100909E50);
            UUID.uuidString.getter();
            (*v174)(v57, v2);
            String.uppercased()();
            swift_bridgeObjectRelease();
            String._bridgeToObjectiveC()();

            swift_bridgeObjectRelease();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v188[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v188[0] & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            uint64_t v48 = v184;
            unint64_t v47 = v185;
          }
          ++v49;
        }
        while (v48 != v49);
        swift_bridgeObjectRelease();
        id v73 = (void *)v188[0];
        id v40 = v172;
        id v1 = v171;
      }
      else
      {
        swift_bridgeObjectRelease();
        id v73 = _swiftEmptyArrayStorage;
      }
      sub_10065AB2C((unint64_t)v73);
      swift_bridgeObjectRelease();
      uint64_t v25 = (char *)_swiftEmptyArrayStorage;
      v188[0] = (uint64_t)_swiftEmptyArrayStorage;
      if (!v184)
      {
        uint64_t v95 = _swiftEmptyArrayStorage;
        goto LABEL_58;
      }
      if (v184 >= 1)
      {
        unint64_t v82 = v185 & 0xC000000000000001;
        id v83 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v173 + 56);
        uint64_t v84 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48);
        uint64_t v182 = (void (**)(char *, uint64_t, uint64_t))(v173 + 16);
        os_log_type_t v175 = (void (**)(char *, char *, uint64_t))(v173 + 8);
        swift_bridgeObjectRetain();
        uint64_t v85 = 0;
        uint64_t v87 = (uint64_t)v176;
        uint64_t v86 = (uint64_t)v177;
        do
        {
          if (v82) {
            id v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v88 = *(id *)(v185 + 8 * v85 + 32);
          }
          unint64_t v89 = v88;
          id v90 = [v88 identifier];
          if (v90)
          {
            id v91 = v90;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v92 = 0;
          }
          else
          {
            uint64_t v92 = 1;
          }
          (*v83)(v86, v92, 1, v2);
          sub_1000F44F4(v86, v87);
          if ((*v84)(v87, 1, v2))
          {
            sub_1000966BC(v87, (uint64_t *)&unk_100909E50);
          }
          else
          {
            uint64_t v93 = v87;
            char v94 = v183;
            (*v182)(v183, v93, v2);
            sub_1000966BC(v93, (uint64_t *)&unk_100909E50);
            UUID.uuidString.getter();
            ((void (*)(char *, uint64_t))*v175)(v94, v2);
            String.lowercased()();
            swift_bridgeObjectRelease();
            String._bridgeToObjectiveC()();

            swift_bridgeObjectRelease();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v188[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v188[0] & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            uint64_t v87 = (uint64_t)v176;
            uint64_t v86 = (uint64_t)v177;
          }
          ++v85;
        }
        while (v184 != v85);
        swift_bridgeObjectRelease();
        uint64_t v95 = (void *)v188[0];
        id v40 = v172;
        id v1 = v171;
        uint64_t v25 = (char *)_swiftEmptyArrayStorage;
LABEL_58:
        swift_bridgeObjectRelease();
        sub_10065AB2C((unint64_t)v95);
        swift_bridgeObjectRelease();
        id v96 = [v1 smartLists];
        if (!v96) {
          goto LABEL_104;
        }
        int64_t v97 = v96;
        v188[0] = (uint64_t)v96;
        sub_1000963CC(0, (unint64_t *)&unk_100910210);
        unint64_t v47 = Sequence.elements<A>(ofType:)();

        v188[0] = (uint64_t)_swiftEmptyArrayStorage;
        if (!(v47 >> 62))
        {
          uint64_t v98 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v184 = v98;
          if (v98)
          {
LABEL_61:
            if (v98 < 1)
            {
              __break(1u);
LABEL_132:
              __break(1u);
              swift_release();
              __break(1u);
              return;
            }
            uint64_t v99 = v98;
            uint64_t v100 = 0;
            uint64_t v101 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v173 + 56);
            uint64_t v102 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48);
            unint64_t v185 = v173 + 16;
            uint64_t v182 = (void (**)(char *, uint64_t, uint64_t))(v173 + 8);
            do
            {
              if ((v47 & 0xC000000000000001) != 0) {
                id v103 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v103 = *(id *)(v47 + 8 * v100 + 32);
              }
              uint64_t v104 = v103;
              id v105 = [v103 identifier];
              if (v105)
              {
                long long v106 = v105;
                uint64_t v107 = (uint64_t)v180;
                static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v108 = 0;
              }
              else
              {
                uint64_t v108 = 1;
                uint64_t v107 = (uint64_t)v180;
              }
              (*v101)(v107, v108, 1, v2);
              uint64_t v109 = v181;
              sub_1000F44F4(v107, v181);
              if ((*v102)(v109, 1, v2))
              {
                sub_1000966BC(v109, (uint64_t *)&unk_100909E50);
              }
              else
              {
                uint64_t v110 = v183;
                (*(void (**)(char *, uint64_t, uint64_t))v185)(v183, v109, v2);
                sub_1000966BC(v109, (uint64_t *)&unk_100909E50);
                UUID.uuidString.getter();
                ((void (*)(char *, uint64_t))*v182)(v110, v2);
                String.uppercased()();
                swift_bridgeObjectRelease();
                String._bridgeToObjectiveC()();

                swift_bridgeObjectRelease();
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((v188[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v188[0] & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                uint64_t v99 = v184;
              }
              ++v100;
            }
            while (v99 != v100);
            swift_bridgeObjectRelease();
            uint64_t v111 = (void *)v188[0];
            id v40 = v172;
            uint64_t v25 = (char *)_swiftEmptyArrayStorage;
LABEL_87:
            sub_10065AB2C((unint64_t)v111);
            swift_bridgeObjectRelease();
            v188[0] = (uint64_t)v25;
            if (!v184)
            {
LABEL_103:
              swift_bridgeObjectRelease();
              sub_10065AB2C((unint64_t)v25);
              swift_bridgeObjectRelease();
LABEL_104:
              if (qword_100907AC0 != -1) {
                swift_once();
              }
              uint64_t v129 = type metadata accessor for Logger();
              sub_10008E2DC(v129, (uint64_t)qword_1009208A0);
              unint64_t v130 = Logger.logObject.getter();
              os_log_type_t v131 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v130, v131))
              {
                uint64_t v132 = (uint8_t *)swift_slowAlloc();
                v188[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v132 = 136315138;
                swift_beginAccess();
                sub_1000E4F40((unint64_t *)&unk_1009208D0, (unint64_t *)&unk_100910040);
                swift_bridgeObjectRetain();
                uint64_t v133 = Set.description.getter();
                uint64_t v134 = v40;
                unint64_t v136 = v135;
                swift_bridgeObjectRelease();
                uint64_t v187 = sub_1000C51B8(v133, v136, v188);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                id v40 = v134;
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v130, v131, "MERGE.LOCAL: Clean up account.listIDsOrdering {listIDs.to.remove: %s}", v132, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }

              Class v137 = v169;
              swift_beginAccess();
              uint64_t v59 = v137;
              uint64_t v138 = swift_bridgeObjectRetain();
              uint64_t v139 = sub_10065C63C(v138, v59);
              swift_bridgeObjectRelease();

              uint64_t v187 = v139;
              swift_bridgeObjectRetain();
              sub_10064F2EC(&v187);
              swift_bridgeObjectRelease();
              uint64_t v140 = v187;
              uint64_t v141 = *(void *)(v187 + 16);
              if (v141)
              {
                id v142 = [v59 mutableOrderedSet];
                while (v141 <= *(void *)(v140 + 16))
                {
                  uint64_t v143 = *(void *)(v140 + 8 * v141 + 24);
                  uint64_t v144 = NSNotFound.getter();
                  if (v144 < 0 || v143 != v144) {

                  }
                  if (!--v141) {
                    goto LABEL_120;
                  }
                }
                __break(1u);
LABEL_120:
                swift_release();
                id v151 = [v142 immutableOrderedSet];
                id v152 = [v151 serializedData];
                uint64_t v153 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v155 = v154;

                Class isa = Data._bridgeToObjectiveC()().super.isa;
                sub_100097F34(v153, v155);
                id v157 = v171;
                [v171 setListIDsMergeableOrdering:isa];

                id v158 = v151;
                id v159 = [v157 createResolutionTokenMapIfNecessary];
                NSString v160 = String._bridgeToObjectiveC()();
                id v161 = [v159 getTokenForKey:v160];

                id v162 = v161;
                [v162 update];

                uint64_t v150 = v158;
                id v145 = (id)sub_10065749C(v150);
                uint64_t v163 = sub_10065818C(v150);
                int v147 = (void *)v163;
                if (v145)
                {
                  if (v163)
                  {
                    id v145 = v145;
                    int v164 = (void *)sub_10065C8AC();
                    id v149 = v171;
                    sub_1006590B0(v145, v164, v150);

                    goto LABEL_129;
                  }

                  goto LABEL_128;
                }
              }
              else
              {
                swift_release();
                id v145 = (id)sub_10065749C(v59);
                uint64_t v146 = sub_10065818C(v59);
                int v147 = (void *)v146;
                if (v145)
                {
                  if (v146)
                  {
                    id v145 = v145;
                    id v148 = (void *)sub_10065C8AC();
                    id v149 = v171;
                    sub_1006590B0(v145, v148, v59);

                    uint64_t v150 = 0;
LABEL_129:

                    [v149 updateChangeCount];
                    sub_100097F34(v168, v167);
                    swift_bridgeObjectRelease();

                    goto LABEL_130;
                  }
                  uint64_t v150 = 0;
LABEL_128:
                  id v149 = v171;
                  goto LABEL_129;
                }
                uint64_t v150 = 0;
              }
              id v145 = v147;
              goto LABEL_128;
            }
            if (v184 >= 1)
            {
              uint64_t v116 = v184;
              unint64_t v185 = v47 & 0xC000000000000001;
              unint64_t v117 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v173 + 56);
              Class v118 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48);
              uint64_t v182 = (void (**)(char *, uint64_t, uint64_t))(v173 + 16);
              uint64_t v119 = (void (**)(char *, uint64_t))(v173 + 8);
              swift_bridgeObjectRetain();
              for (uint64_t i = 0; i != v116; ++i)
              {
                if (v185) {
                  id v121 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v121 = *(id *)(v47 + 8 * i + 32);
                }
                char v122 = v121;
                id v123 = [v121 identifier];
                if (v123)
                {
                  int v124 = v123;
                  uint64_t v125 = (uint64_t)v178;
                  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v126 = 0;
                }
                else
                {
                  uint64_t v126 = 1;
                  uint64_t v125 = (uint64_t)v178;
                }
                (*v117)(v125, v126, 1, v2);
                uint64_t v127 = (uint64_t)v179;
                sub_1000F44F4(v125, (uint64_t)v179);
                if ((*v118)(v127, 1, v2))
                {
                  sub_1000966BC(v127, (uint64_t *)&unk_100909E50);
                }
                else
                {
                  int v128 = v183;
                  (*v182)(v183, v127, v2);
                  sub_1000966BC(v127, (uint64_t *)&unk_100909E50);
                  UUID.uuidString.getter();
                  (*v119)(v128, v2);
                  String.lowercased()();
                  swift_bridgeObjectRelease();
                  String._bridgeToObjectiveC()();

                  swift_bridgeObjectRelease();
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  if (*(void *)((v188[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v188[0] & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                  uint64_t v116 = v184;
                }
              }
              swift_bridgeObjectRelease();
              uint64_t v25 = (char *)v188[0];
              id v40 = v172;
              goto LABEL_103;
            }
            goto LABEL_132;
          }
LABEL_86:
          swift_bridgeObjectRelease();
          uint64_t v111 = _swiftEmptyArrayStorage;
          goto LABEL_87;
        }
LABEL_85:
        swift_bridgeObjectRetain();
        uint64_t v98 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v184 = v98;
        if (v98) {
          goto LABEL_61;
        }
        goto LABEL_86;
      }
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    sub_10008E2DC(v68, (uint64_t)qword_1009208A0);
    unint64_t v185 = v27;
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v69))
    {
      long long v70 = (uint8_t *)swift_slowAlloc();
      BOOL v71 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v70 = 138543362;
      v188[0] = v185;
      id v72 = (id)v185;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v71 = v27;

      _os_log_impl((void *)&_mh_execute_header, v59, v69, "MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has nil lists (accountID: %{public}@).", v70, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_130:
      return;
    }
  }
  else
  {
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    sub_10008E2DC(v58, (uint64_t)qword_1009208A0);
    unint64_t v185 = (unint64_t)v1;
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = 7104878;
      uint64_t v62 = swift_slowAlloc();
      v188[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 136446466;
      id v63 = [(id)v185 ckIdentifier];
      if (v63)
      {
        uint64_t v64 = v63;
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v67 = v66;
      }
      else
      {
        unint64_t v67 = 0xE300000000000000;
        uint64_t v65 = 7104878;
      }
      uint64_t v186 = sub_1000C51B8(v65, v67, v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v62 + 12) = 2082;
      id v112 = [(id)v185 externalIdentifier];
      if (v112)
      {
        char v113 = v112;
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v115 = v114;
      }
      else
      {
        unint64_t v115 = 0xE300000000000000;
      }
      uint64_t v186 = sub_1000C51B8(v61, v115, v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has no remObjectID (ckIdentifier: %{public}s, externalIdentifier: %{public}s).", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_130;
    }
  }
  id v81 = (id)v185;
}

uint64_t sub_10065749C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v115 = type metadata accessor for UUID();
  uint64_t v109 = *(NSObject **)(v115 - 8);
  __chkstk_darwin(v115);
  unint64_t v114 = &v99[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  Class v118 = &v99[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  unint64_t v117 = &v99[-v8];
  __chkstk_darwin(v9);
  uint64_t v11 = &v99[-v10];
  __chkstk_darwin(v12);
  uint64_t v119 = &v99[-v13];
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v2 mutableOrderedSetValueForKey:v14];

  uint64_t v16 = qword_100907AC0;
  if (!v15)
  {
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_10008E2DC(v52, (uint64_t)qword_1009208A0);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Not sorting child lists because REMCDAccount.mutableOrderedSetValue(forKey: lists) is nil", v55, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  char v113 = v11;
  id v17 = v15;
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_10008E2DC(v18, (uint64_t)qword_1009208A0);
  id v20 = v17;
  id v21 = a1;
  id v22 = v20;
  id v23 = v21;
  uint64_t v108 = (uint8_t *)v19;
  uint64_t v24 = Logger.logObject.getter();
  int v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, (os_log_type_t)v25);
  uint64_t v27 = v115;
  id v107 = v15;
  if (v26)
  {
    int v100 = v25;
    id v105 = v23;
    id v28 = (_DWORD *)swift_slowAlloc();
    uint64_t v101 = (void *)swift_slowAlloc();
    uint64_t v102 = swift_slowAlloc();
    uint64_t v121 = (uint64_t)v22;
    aBlock[0] = v102;
    id v103 = v28;
    *id v28 = 136315394;
    id v106 = v22;
    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    sub_1000963CC(0, &qword_1009086C8);
    sub_1000E4F40(&qword_1009208E0, &qword_1009086C8);
    unint64_t v29 = Sequence.elements<A>(ofType:)();
    unint64_t v30 = v29;
    if (v29 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v31 = result;
    }
    else
    {
      uint64_t v31 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    os_log_t v104 = v24;
    if (v31)
    {
      if (v31 < 1)
      {
        __break(1u);
        goto LABEL_56;
      }
      uint64_t v33 = 0;
      unint64_t v116 = v30 & 0xC000000000000001;
      unint64_t v34 = v109 + 7;
      uint64_t v35 = v109 + 6;
      os_log_t v110 = v109 + 1;
      uint64_t v111 = v109 + 2;
      unint64_t v36 = _swiftEmptyArrayStorage;
      uint64_t v37 = (uint64_t)v113;
      id v112 = v30;
      do
      {
        if (v116) {
          id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v38 = *(id *)(v30 + 8 * v33 + 32);
        }
        uint64_t v39 = v38;
        id v40 = [v38 identifier];
        if (v40)
        {
          id v41 = v40;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v42 = 0;
        }
        else
        {
          uint64_t v42 = 1;
        }
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v34->isa)(v37, v42, 1, v27);
        id v43 = v119;
        sub_1000F44F4(v37, (uint64_t)v119);
        if (((unint64_t (*)(unsigned char *, uint64_t, uint64_t))v35->isa)(v43, 1, v27))
        {
          sub_1000966BC((uint64_t)v43, (uint64_t *)&unk_100909E50);
        }
        else
        {
          uint64_t v44 = (uint64_t)v43;
          unint64_t v45 = v114;
          ((void (*)(unsigned char *, uint64_t, uint64_t))v111->isa)(v114, v44, v27);
          sub_1000966BC(v44, (uint64_t *)&unk_100909E50);
          uint64_t v46 = UUID.uuidString.getter();
          uint64_t v48 = v47;
          ((void (*)(unsigned char *, uint64_t))v110->isa)(v45, v27);

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v36 = sub_100308F88(0, v36[2] + 1, 1, v36);
          }
          unint64_t v50 = v36[2];
          unint64_t v49 = v36[3];
          if (v50 >= v49 >> 1) {
            unint64_t v36 = sub_100308F88((void *)(v49 > 1), v50 + 1, 1, v36);
          }
          v36[2] = v50 + 1;
          id v51 = &v36[2 * v50];
          v51[4] = v46;
          v51[5] = v48;
          uint64_t v27 = v115;
          unint64_t v30 = (unint64_t)v112;
          uint64_t v37 = (uint64_t)v113;
        }
        ++v33;
      }
      while (v31 != v33);
    }
    swift_bridgeObjectRelease_n();
    uint64_t v56 = v103;
    uint64_t v57 = Array.description.getter();
    unint64_t v59 = v58;
    swift_bridgeObjectRelease();
    uint64_t v121 = sub_1000C51B8(v57, v59, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v22 = v106;

    swift_bridgeObjectRelease();
    *((_WORD *)v56 + 6) = 2112;
    id v23 = v105;
    uint64_t v121 = (uint64_t)v105;
    id v60 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v101 = v23;

    os_log_t v61 = v104;
    _os_log_impl((void *)&_mh_execute_header, v104, (os_log_type_t)v100, "Sort ordered set account.lists - before - {lists: %s, ordering: %@}", (uint8_t *)v56, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v15 = v107;
  }
  else
  {
  }
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = _swiftEmptyDictionarySingleton;
  id v63 = (uint64_t *)(v62 + 16);
  aBlock[4] = (uint64_t)sub_10029135C;
  aBlock[5] = v62;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1002880E8;
  uint64_t aBlock[3] = (uint64_t)&unk_1008CE990;
  uint64_t v64 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v23 enumerateObjectsUsingBlock:v64];
  _Block_release(v64);
  swift_beginAccess();
  uint64_t v65 = *v63;
  swift_bridgeObjectRetain();
  sub_100098560((uint64_t)v22, v65, 0);
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v66 = v22;
  unint64_t v67 = Logger.logObject.getter();
  int v68 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v67, (os_log_type_t)v68))
  {

    return (uint64_t)v15;
  }
  LODWORD(v106) = v68;
  os_log_t v110 = v67;
  os_log_type_t v69 = (uint8_t *)swift_slowAlloc();
  id v105 = (id)swift_slowAlloc();
  uint64_t v120 = (uint64_t)v66;
  uint64_t v121 = (uint64_t)v105;
  uint64_t v108 = v69;
  *(_DWORD *)os_log_type_t v69 = 136315138;
  uint64_t v111 = v66;
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  sub_1000963CC(0, &qword_1009086C8);
  sub_1000E4F40(&qword_1009208E0, &qword_1009086C8);
  unint64_t v70 = Sequence.elements<A>(ofType:)();
  unint64_t v71 = v70;
  if (!(v70 >> 62))
  {
    uint64_t v72 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v72) {
      goto LABEL_34;
    }
LABEL_53:
    swift_bridgeObjectRelease_n();
    uint64_t v93 = v108;
    uint64_t v94 = Array.description.getter();
    unint64_t v96 = v95;
    swift_bridgeObjectRelease();
    uint64_t v120 = sub_1000C51B8(v94, v96, &v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    int64_t v97 = v111;

    swift_bridgeObjectRelease();
    os_log_t v98 = v110;
    _os_log_impl((void *)&_mh_execute_header, v110, (os_log_type_t)v106, "Sort ordered set account.lists - after - {lists: %s}", v93, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (uint64_t)v107;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v72 = result;
  if (!result) {
    goto LABEL_53;
  }
LABEL_34:
  if (v72 >= 1)
  {
    uint64_t v73 = 0;
    uint64_t v119 = (unsigned char *)(v71 & 0xC000000000000001);
    id v74 = v109 + 7;
    uint64_t v75 = v109 + 6;
    id v112 = v109 + 1;
    char v113 = v109 + 2;
    id v76 = _swiftEmptyArrayStorage;
    unint64_t v116 = v71;
    do
    {
      uint64_t v77 = v72;
      if (v119) {
        id v78 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v78 = *(id *)(v71 + 8 * v73 + 32);
      }
      unint64_t v79 = v78;
      id v80 = [v78 identifier];
      if (v80)
      {
        id v81 = v80;
        uint64_t v82 = (uint64_t)v118;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v83 = 0;
      }
      else
      {
        uint64_t v83 = 1;
        uint64_t v82 = (uint64_t)v118;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v74->isa)(v82, v83, 1, v27);
      uint64_t v84 = v117;
      sub_1000F44F4(v82, (uint64_t)v117);
      if (((unint64_t (*)(unsigned char *, uint64_t, uint64_t))v75->isa)(v84, 1, v27))
      {
        sub_1000966BC((uint64_t)v84, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v85 = (uint64_t)v84;
        uint64_t v86 = v114;
        ((void (*)(unsigned char *, uint64_t, uint64_t))v113->isa)(v114, v85, v27);
        sub_1000966BC(v85, (uint64_t *)&unk_100909E50);
        uint64_t v87 = UUID.uuidString.getter();
        uint64_t v89 = v88;
        ((void (*)(unsigned char *, uint64_t))v112->isa)(v86, v27);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v76 = sub_100308F88(0, v76[2] + 1, 1, v76);
        }
        unint64_t v91 = v76[2];
        unint64_t v90 = v76[3];
        if (v91 >= v90 >> 1) {
          id v76 = sub_100308F88((void *)(v90 > 1), v91 + 1, 1, v76);
        }
        v76[2] = v91 + 1;
        uint64_t v92 = &v76[2 * v91];
        v92[4] = v87;
        v92[5] = v89;
        uint64_t v27 = v115;
        unint64_t v71 = v116;
      }
      ++v73;
      uint64_t v72 = v77;
    }
    while (v77 != v73);
    goto LABEL_53;
  }
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_10065818C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v133 = type metadata accessor for UUID();
  uint64_t v4 = *(NSObject **)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v132 = &v116[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v134 = &v116[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v10 = &v116[-v9];
  __chkstk_darwin(v11);
  uint64_t v13 = &v116[-v12];
  __chkstk_darwin(v14);
  uint64_t v138 = &v116[-v15];
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v2 mutableOrderedSetValueForKey:v16];

  uint64_t v18 = qword_100907AC0;
  if (!v17)
  {
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    sub_10008E2DC(v58, (uint64_t)qword_1009208A0);
    unint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      os_log_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_t v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "REMCDAccount+CloudKit: Not sorting child smartLists because REMCDAccount.mutableOrderedSetValue(forKey: smartLists) is nil", v61, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  unint64_t v137 = (unint64_t)v13;
  int v124 = v4;
  id v126 = v17;
  id v19 = v17;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_10008E2DC(v20, (uint64_t)qword_1009208A0);
  id v22 = v19;
  id v23 = a1;
  id v24 = v22;
  id v25 = v23;
  BOOL v26 = Logger.logObject.getter();
  int v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, (os_log_type_t)v27);
  uint64_t v29 = (uint64_t)v134;
  unint64_t v130 = v10;
  uint64_t v125 = v2;
  uint64_t v127 = v21;
  if (v28)
  {
    int v117 = v27;
    os_log_t v121 = v26;
    id v122 = v25;
    unint64_t v30 = (_DWORD *)swift_slowAlloc();
    Class v118 = (void *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v140 = (uint64_t)v24;
    aBlock[0] = v31;
    uint64_t v120 = v30;
    *unint64_t v30 = 136315394;
    id v123 = v24;
    sub_1000963CC(0, (unint64_t *)&unk_100910210);
    sub_1000963CC(0, &qword_1009086C8);
    sub_1000E4F40(&qword_1009208E0, &qword_1009086C8);
    unint64_t v32 = Sequence.elements<A>(ofType:)();
    unint64_t v33 = v32;
    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v34 = result;
    }
    else
    {
      uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    uint64_t v36 = v133;
    uint64_t v119 = v31;
    if (v34)
    {
      if (v34 < 1)
      {
        __break(1u);
        goto LABEL_64;
      }
      uint64_t v37 = 0;
      unint64_t v135 = (v33 & 0xC000000000000001);
      id v38 = v124 + 7;
      uint64_t v39 = v124 + 6;
      int v128 = (uint8_t *)&v124[1];
      os_log_t v129 = v124 + 2;
      os_log_type_t v131 = _swiftEmptyArrayStorage;
      unint64_t v136 = v33;
      do
      {
        id v40 = v10;
        if (v135) {
          id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v41 = *(id *)(v33 + 8 * v37 + 32);
        }
        uint64_t v42 = v41;
        uint64_t v43 = v29;
        id v44 = [v41 identifier];
        if (v44)
        {
          unint64_t v45 = v44;
          unint64_t v46 = v137;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v47 = 0;
        }
        else
        {
          uint64_t v47 = 1;
          unint64_t v46 = v137;
        }
        ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v38->isa)(v46, v47, 1, v36);
        uint64_t v48 = v46;
        unint64_t v49 = v138;
        sub_1000F44F4(v48, (uint64_t)v138);
        if (((unint64_t (*)(unsigned char *, uint64_t, uint64_t))v39->isa)(v49, 1, v36))
        {
          sub_1000966BC((uint64_t)v49, (uint64_t *)&unk_100909E50);

          uint64_t v29 = v43;
          uint64_t v10 = v40;
        }
        else
        {
          unint64_t v50 = v132;
          ((void (*)(unsigned char *, unsigned char *, uint64_t))v129->isa)(v132, v49, v36);
          sub_1000966BC((uint64_t)v49, (uint64_t *)&unk_100909E50);
          uint64_t v51 = UUID.uuidString.getter();
          uint64_t v53 = v52;
          (*(void (**)(unsigned char *, uint64_t))v128)(v50, v36);

          os_log_type_t v54 = v131;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            os_log_type_t v54 = sub_100308F88(0, v54[2] + 1, 1, v54);
          }
          unint64_t v56 = v54[2];
          unint64_t v55 = v54[3];
          if (v56 >= v55 >> 1) {
            os_log_type_t v54 = sub_100308F88((void *)(v55 > 1), v56 + 1, 1, v54);
          }
          uint64_t v54[2] = v56 + 1;
          os_log_type_t v131 = v54;
          uint64_t v57 = &v54[2 * v56];
          v57[4] = v51;
          v57[5] = v53;
          uint64_t v36 = v133;
          uint64_t v29 = (uint64_t)v134;
          uint64_t v10 = v130;
        }
        ++v37;
        unint64_t v33 = (unint64_t)v136;
      }
      while (v34 != v37);
    }
    else
    {
      os_log_type_t v131 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease_n();
    id v63 = v120;
    uint64_t v64 = Array.description.getter();
    unint64_t v66 = v65;
    swift_bridgeObjectRelease();
    uint64_t v140 = sub_1000C51B8(v64, v66, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v24 = v123;

    swift_bridgeObjectRelease();
    *((_WORD *)v63 + 6) = 2112;
    id v25 = v122;
    uint64_t v140 = (uint64_t)v122;
    id v67 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v118 = v25;

    os_log_t v68 = v121;
    _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v117, "REMCDAccount+CloudKit: Sort ordered set account.smartLists - before - {smartLists: %s, ordering: %@}", (uint8_t *)v63, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v2 = v125;
  }
  else
  {
  }
  uint64_t v69 = swift_allocObject();
  *(void *)(v69 + 16) = _swiftEmptyDictionarySingleton;
  unint64_t v70 = (uint64_t *)(v69 + 16);
  aBlock[4] = (uint64_t)sub_10029135C;
  aBlock[5] = v69;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1002880E8;
  uint64_t aBlock[3] = (uint64_t)&unk_1008CE968;
  unint64_t v71 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v25 enumerateObjectsUsingBlock:v71];
  _Block_release(v71);
  swift_beginAccess();
  uint64_t v72 = *v70;
  swift_bridgeObjectRetain();
  sub_100098560((uint64_t)v24, v72, 0);
  swift_release();
  swift_bridgeObjectRelease();
  id v73 = v24;
  id v74 = Logger.logObject.getter();
  int v75 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v74, (os_log_type_t)v75))
  {

    id v62 = v126;
    goto LABEL_54;
  }
  os_log_t v129 = v74;
  id v76 = (uint8_t *)swift_slowAlloc();
  id v122 = (id)swift_slowAlloc();
  uint64_t v139 = (uint64_t)v73;
  uint64_t v140 = (uint64_t)v122;
  int v128 = v76;
  *(_DWORD *)id v76 = 136315138;
  os_log_type_t v131 = v73;
  sub_1000963CC(0, (unint64_t *)&unk_100910210);
  sub_1000963CC(0, &qword_1009086C8);
  sub_1000E4F40(&qword_1009208E0, &qword_1009086C8);
  unint64_t v77 = Sequence.elements<A>(ofType:)();
  unint64_t v78 = v77;
  if (v77 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v79 = result;
  }
  else
  {
    uint64_t v79 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v80 = v133;
  LODWORD(v123) = v75;
  if (!v79)
  {
LABEL_53:
    swift_bridgeObjectRelease_n();
    int64_t v97 = v128;
    uint64_t v98 = Array.description.getter();
    unint64_t v100 = v99;
    swift_bridgeObjectRelease();
    uint64_t v139 = sub_1000C51B8(v98, v100, &v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v73 = v131;

    swift_bridgeObjectRelease();
    os_log_t v101 = v129;
    _os_log_impl((void *)&_mh_execute_header, v129, (os_log_type_t)v123, "REMCDAccount+CloudKit: Sort ordered set account.smartLists - after - {smartLists: %s}", v97, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v62 = v126;
    uint64_t v2 = v125;
LABEL_54:
    id v102 = v73;
    id v103 = v2;
    id v104 = v102;
    id v105 = v103;
    id v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v106, v107))
    {
      uint64_t v108 = swift_slowAlloc();
      uint64_t v140 = swift_slowAlloc();
      *(_DWORD *)uint64_t v108 = 136446466;
      id v109 = [v105 remObjectID];
      if (v109)
      {
        os_log_t v110 = v109;
        id v111 = [v109 description];

        uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v114 = v113;
      }
      else
      {
        unint64_t v114 = 0xE300000000000000;
        uint64_t v112 = 7104878;
      }
      uint64_t v139 = sub_1000C51B8(v112, v114, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v108 + 12) = 2048;
      id v115 = [v104 count];

      uint64_t v139 = (uint64_t)v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v106, v107, "REMCDAccount+CloudKit: Sorted CSLs into account.smartLists {account: %{public}s, #csls: %ld}", (uint8_t *)v108, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return (uint64_t)v62;
  }
  if (v79 >= 1)
  {
    uint64_t v81 = 0;
    unint64_t v137 = v78 & 0xC000000000000001;
    uint64_t v82 = v124 + 7;
    uint64_t v83 = v124 + 6;
    unint64_t v135 = v124 + 1;
    unint64_t v136 = v124 + 2;
    uint64_t v84 = _swiftEmptyArrayStorage;
    uint64_t v138 = (unsigned char *)v78;
    do
    {
      if (v137) {
        id v85 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v85 = *(id *)(v78 + 8 * v81 + 32);
      }
      uint64_t v86 = v85;
      id v87 = [v85 identifier];
      if (v87)
      {
        uint64_t v88 = v87;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v89 = 0;
      }
      else
      {
        uint64_t v89 = 1;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v82->isa)(v29, v89, 1, v80);
      sub_1000F44F4(v29, (uint64_t)v10);
      if (((unint64_t (*)(unsigned char *, uint64_t, uint64_t))v83->isa)(v10, 1, v80))
      {
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
      }
      else
      {
        unint64_t v90 = v132;
        ((void (*)(unsigned char *, unsigned char *, uint64_t))v136->isa)(v132, v10, v80);
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
        uint64_t v91 = UUID.uuidString.getter();
        uint64_t v93 = v92;
        ((void (*)(unsigned char *, uint64_t))v135->isa)(v90, v80);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v84 = sub_100308F88(0, v84[2] + 1, 1, v84);
        }
        unint64_t v95 = v84[2];
        unint64_t v94 = v84[3];
        if (v95 >= v94 >> 1) {
          uint64_t v84 = sub_100308F88((void *)(v94 > 1), v95 + 1, 1, v84);
        }
        id v84[2] = v95 + 1;
        unint64_t v96 = &v84[2 * v95];
        v96[4] = v91;
        v96[5] = v93;
        uint64_t v80 = v133;
        uint64_t v29 = (uint64_t)v134;
        uint64_t v10 = v130;
      }
      ++v81;
      unint64_t v78 = (unint64_t)v138;
    }
    while (v79 != v81);
    goto LABEL_53;
  }
LABEL_64:
  __break(1u);
  return result;
}

void sub_1006590B0(void *a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  unint64_t v70 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v15 = __chkstk_darwin(v14).n128_u64[0];
  id v17 = (char *)&v68 - v16;
  id v18 = [v4 storeControllerManagedObjectContext:v15];
  if (v18
    && (id v19 = v18,
        id v20 = [v18 storeController],
        v19,
        (id v69 = v20) != 0))
  {
    id v21 = [v4 identifier];
    if (v21)
    {
      id v22 = v21;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1, 1, v7);
    }
    sub_1000F44F4((uint64_t)v13, (uint64_t)v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7))
    {
      sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909E50);
      id v34 = v69;
LABEL_16:
      if (qword_100907AC0 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_10008E2DC(v35, (uint64_t)qword_1009208A0);
      id v36 = v4;
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 136446210;
        id v40 = [v36 remObjectID];
        if (v40)
        {
          id v41 = v40;
          id v42 = [v40 description];

          uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v45 = v44;
        }
        else
        {
          uint64_t v43 = 7104878;
          unint64_t v45 = 0xE300000000000000;
        }
        uint64_t v71 = sub_1000C51B8(v43, v45, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "REMCDAccount+CloudKit: Could not proceed to upsertOrderedIdentifiersForAccountListView() because there is problem finding the persistent store for the account {account: %{public}s}", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v17, v7);
    sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909E50);
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v34 = v69;
    id v47 = [v69 storeForAccountIdentifier:v46];

    if (!v47) {
      goto LABEL_16;
    }
    uint64_t v48 = a2;
    sub_10064DCC4(a1, a2, v70, v47);
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_10008E2DC(v49, (uint64_t)qword_1009208A0);
    id v50 = v4;
    id v51 = v48;
    id v52 = a1;
    id v53 = v50;
    id v54 = v51;
    id v55 = v52;
    unint64_t v56 = Logger.logObject.getter();
    int v57 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v56, (os_log_type_t)v57))
    {
      LODWORD(v70) = v57;
      uint64_t v58 = swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      uint64_t v72 = v59;
      *(_DWORD *)uint64_t v58 = 136446722;
      id v60 = [v53 remObjectID];
      uint64_t v68 = v59;
      if (v60)
      {
        os_log_t v61 = v60;
        id v62 = [v60 description:v68];

        uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v65 = v64;
      }
      else
      {
        uint64_t v63 = 7104878;
        unint64_t v65 = 0xE300000000000000;
      }
      uint64_t v71 = sub_1000C51B8(v63, v65, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2048;
      id v66 = [v54 count];

      uint64_t v71 = (uint64_t)v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v58 + 22) = 2048;
      id v67 = [v55 count];

      uint64_t v71 = (uint64_t)v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v70, "REMCDAccount+CloudKit: Sorted intermixed ordered IDs for CSLs and Lists in REMCDAccountListData {account: %{public}s, #csls: %ld, #lists: %ld}", (uint8_t *)v58, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    if (qword_100907AC0 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10008E2DC(v23, (uint64_t)qword_1009208A0);
    unint64_t v70 = v4;
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v24, v25))
    {
      BOOL v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      *(_DWORD *)BOOL v26 = 136446210;
      id v27 = [v70 remObjectID];
      if (v27)
      {
        BOOL v28 = v27;
        id v29 = [v27 description];

        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v32 = v31;
      }
      else
      {
        uint64_t v30 = 7104878;
        unint64_t v32 = 0xE300000000000000;
      }
      uint64_t v71 = sub_1000C51B8(v30, v32, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "REMCDAccount+CloudKit: Could not proceed to upsertOrderedIdentifiersForAccountListView() because storeController isn't available {account: %{public}s}", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v33 = v70;
    }
  }
}

Swift::Int sub_1006599CC(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          unint64_t v83 = *(void *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      unint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          id v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          sub_10065A058((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = sub_1001F433C((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          unint64_t v90 = &v86[16 * v85 + 32];
          *(void *)unint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          uint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    unint64_t v94 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v92 = v2;
  uint64_t v93 = *v2 - 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unint64_t v14 = *(void *)(v10 + 8 * v9);
      unint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unint64_t v16 = v14;
        while (1)
        {
          unint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          unint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      id v22 = (unint64_t *)(v93 + 8 * v9);
      do
      {
        unint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        os_log_type_t v25 = v22;
        do
        {
          unint64_t v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *os_log_type_t v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1001F3D80(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      unint64_t v77 = sub_1001F3D80((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      uint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    id v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          id v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          unint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            id v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        id v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        id v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        id v73 = v29;
        id v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_10065A058((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        id v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10065A058(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  Swift::Int v24 = __src;
  unint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      unint64_t v16 = &v4[8 * v13];
      id v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        unint64_t v17 = (unint64_t *)(a3 - 8);
        while (1)
        {
          Swift::Int v18 = (char *)(v17 + 1);
          Swift::Int v19 = v6 - 8;
          unint64_t v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            id v22 = v16 - 8;
            if (v18 < v16 || v17 >= (unint64_t *)v16 || v18 != v16) {
              *unint64_t v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= (unint64_t *)v6) {
              *unint64_t v17 = v20;
            }
            Swift::Int v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    unint64_t v14 = &v4[8 * v10];
    id v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          unint64_t v23 = v4;
          unint64_t v15 = v6;
        }
        else
        {
          unint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }
LABEL_42:
    sub_1001F3F4C(&v24, &v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10065A2C8(uint64_t a1)
{
  if ((*(void *)v1 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter()) {
      return;
    }
LABEL_5:
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for REMObjectID_Codable();
      sub_10065CC00((unint64_t *)&unk_1009110C0, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
      Set.Iterator.init(_cocoa:)();
      a1 = v20;
      uint64_t v18 = v21;
      uint64_t v3 = v22;
      uint64_t v4 = v23;
      unint64_t v5 = v24;
    }
    else
    {
      uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v18 = a1 + 56;
      uint64_t v3 = ~v6;
      uint64_t v7 = -v6;
      if (v7 < 64) {
        uint64_t v8 = ~(-1 << v7);
      }
      else {
        uint64_t v8 = -1;
      }
      unint64_t v5 = v8 & *(void *)(a1 + 56);
      swift_bridgeObjectRetain();
      uint64_t v4 = 0;
    }
    int64_t v9 = (unint64_t)(v3 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_14;
    }
    while (1)
    {
      if (v5)
      {
        uint64_t v10 = (v5 - 1) & v5;
        unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
        uint64_t v12 = v4;
      }
      else
      {
        int64_t v14 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          return;
        }
        if (v14 >= v9) {
          goto LABEL_36;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v14);
        uint64_t v12 = v4 + 1;
        if (!v15)
        {
          uint64_t v12 = v4 + 2;
          if (v4 + 2 >= v9) {
            goto LABEL_36;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v4 + 3;
            if (v4 + 3 >= v9) {
              goto LABEL_36;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v12);
            if (!v15)
            {
              uint64_t v12 = v4 + 4;
              if (v4 + 4 >= v9) {
                goto LABEL_36;
              }
              unint64_t v15 = *(void *)(v18 + 8 * v12);
              if (!v15)
              {
                uint64_t v12 = v4 + 5;
                if (v4 + 5 >= v9) {
                  goto LABEL_36;
                }
                unint64_t v15 = *(void *)(v18 + 8 * v12);
                if (!v15)
                {
                  uint64_t v16 = v4 + 6;
                  while (v9 != v16)
                  {
                    unint64_t v15 = *(void *)(v18 + 8 * v16++);
                    if (v15)
                    {
                      uint64_t v12 = v16 - 1;
                      goto LABEL_32;
                    }
                  }
LABEL_36:
                  sub_1000C1AF8();
                  return;
                }
              }
            }
          }
        }
LABEL_32:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
      }
      id v13 = *(id *)(*(void *)(a1 + 48) + 8 * v11);
      if (!v13) {
        goto LABEL_36;
      }
      while (1)
      {
        unint64_t v17 = (void *)sub_10065AECC(v13, (void (*)(void))&type metadata accessor for REMObjectID_Codable, (void (*)(void))sub_100328A04, sub_100321930, (void (*)(void))&type metadata accessor for REMObjectID_Codable);

        uint64_t v4 = v12;
        unint64_t v5 = v10;
        if ((a1 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_14:
        if (__CocoaSet.Iterator.next()())
        {
          type metadata accessor for REMObjectID_Codable();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v13 = v19;
          swift_unknownObjectRelease();
          uint64_t v12 = v4;
          uint64_t v10 = v5;
          if (v19) {
            continue;
          }
        }
        goto LABEL_36;
      }
    }
  }
  if (*(void *)(*(void *)v1 + 16)) {
    goto LABEL_5;
  }
}

uint64_t sub_10065A5FC(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    unint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10065ACF8(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

void sub_10065A7A4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - v11;
  if (!*(void *)(*(void *)v1 + 16)) {
    return;
  }
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v23 = a1 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v26 = v4 + 16;
  unint64_t v27 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  int64_t v24 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v25 = v4 + 48;
  uint64_t v28 = a1;
  swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v16) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v12, *(void *)(v28 + 48) + *(void *)(v4 + 72) * i, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1) {
      goto LABEL_26;
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    sub_10065B0B4((uint64_t)v6, (uint64_t)v9);
    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v16) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v24) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v23 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v23 + 8 * v17);
        if (!v21)
        {
          int64_t v17 = v20 + 3;
          if (v20 + 3 >= v24) {
            goto LABEL_25;
          }
          unint64_t v21 = *(void *)(v23 + 8 * v17);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v16 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v24)
  {
LABEL_25:
    (*v27)(v12, 1, 1, v3);
LABEL_26:
    swift_release();
    return;
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v24) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_10065AB2C(unint64_t a1)
{
  if ((*(void *)v1 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.count.getter();
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)v1 + 16);
    if (!result) {
      return result;
    }
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (result) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_5:
      if (v4 < 1)
      {
        __break(1u);
        return result;
      }
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = 0;
        do
        {
          unint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          ++v5;
          uint64_t v7 = (void *)sub_10065B3D0(v6, (unint64_t *)&unk_100910040, (uint64_t)NSString_ptr, (void (*)(void))sub_10032998C, sub_100321D54);
          swift_unknownObjectRelease();
        }
        while (v4 != v5);
      }
      else
      {
        uint64_t v8 = 0;
        do
        {
          unint64_t v9 = *(void **)(a1 + 8 * v8++ + 32);
          id v10 = v9;
          uint64_t v11 = (void *)sub_10065B3D0(v10, (unint64_t *)&unk_100910040, (uint64_t)NSString_ptr, (void (*)(void))sub_10032998C, sub_100321D54);
        }
        while (v4 != v8);
      }
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10065ACF8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  id v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      unint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100328844();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_10065BC90(v8);
  uint64_t *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_10065AE88(void *a1)
{
  return sub_10065AECC(a1, (void (*)(void))type metadata accessor for RDClientConnection, (void (*)(void))sub_100328A30, sub_100321B4C, (void (*)(void))type metadata accessor for RDClientConnection);
}

uint64_t sub_10065AECC(void *a1, void (*a2)(void), void (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t), void (*a5)(void))
{
  Swift::Int v6 = v5;
  uint64_t v8 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v8 < 0) {
      uint64_t v11 = *v5;
    }
    else {
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v12 = a1;
    char v13 = __CocoaSet.contains(_:)();

    if (v13)
    {
      uint64_t v14 = sub_10065B950(v11, (uint64_t)v12, a4, a5);
      swift_bridgeObjectRelease();
      return v14;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v17 = *(void *)(v8 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v18 = NSObject._rawHashValue(seed:)(v17);
  uint64_t v19 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v20 = v18 & ~v19;
  if (((*(void *)(v8 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
    goto LABEL_15;
  }
  a2(0);
  id v21 = *(id *)(*(void *)(v8 + 48) + 8 * v20);
  char v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) == 0)
  {
    uint64_t v23 = ~v19;
    do
    {
      unint64_t v20 = (v20 + 1) & v23;
      if (((*(void *)(v8 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
        goto LABEL_15;
      }
      id v24 = *(id *)(*(void *)(v8 + 48) + 8 * v20);
      char v25 = static NSObject.== infix(_:_:)();
    }
    while ((v25 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *v6;
  uint64_t v29 = *v6;
  uint64_t *v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    uint64_t v27 = v29;
  }
  uint64_t v14 = *(void *)(*(void *)(v27 + 48) + 8 * v20);
  sub_10065C498(v20);
  uint64_t *v6 = v29;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_10065B0B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10065CC00((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    unint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_10065CC00((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    id v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *id v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100328A10();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_10065BE58(v12);
    *id v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_10065B394(void *a1)
{
  return sub_10065B3D0(a1, (unint64_t *)&qword_10090A3B0, (uint64_t)REMObjectID_ptr, (void (*)(void))sub_1003289F8, sub_100321710);
}

uint64_t sub_10065B3D0(void *a1, unint64_t *a2, uint64_t a3, void (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = v5;
  uint64_t v9 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v9 < 0) {
      uint64_t v11 = *v5;
    }
    else {
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v12 = a1;
    char v13 = __CocoaSet.contains(_:)();

    if (v13)
    {
      uint64_t v14 = sub_10065BAEC(v11, (uint64_t)v12, a5, a2);
      swift_bridgeObjectRelease();
      return v14;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v16 = *(void *)(v9 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v17 = NSObject._rawHashValue(seed:)(v16);
  uint64_t v18 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v19 = v17 & ~v18;
  if (((*(void *)(v9 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
    goto LABEL_15;
  }
  sub_1000963CC(0, a2);
  id v20 = *(id *)(*(void *)(v9 + 48) + 8 * v19);
  char v21 = static NSObject.== infix(_:_:)();

  if ((v21 & 1) == 0)
  {
    uint64_t v22 = ~v18;
    do
    {
      unint64_t v19 = (v19 + 1) & v22;
      if (((*(void *)(v9 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        goto LABEL_15;
      }
      id v23 = *(id *)(*(void *)(v9 + 48) + 8 * v19);
      char v24 = static NSObject.== infix(_:_:)();
    }
    while ((v24 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v26 = *v7;
  uint64_t v28 = *v7;
  uint64_t *v7 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a4();
    uint64_t v26 = v28;
  }
  uint64_t v14 = *(void *)(*(void *)(v26 + 48) + 8 * v19);
  sub_10065C498(v19);
  uint64_t *v7 = v28;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_10065B5C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v4 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - v9;
  __chkstk_darwin(v11);
  char v13 = (char *)&v30 - v12;
  uint64_t v30 = v2;
  uint64_t v14 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10065CC00((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v33 = v4;
  type metadata accessor for Date();
  sub_10065CC00(&qword_100913BC8, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v15 = Hasher._finalize()();
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  unint64_t v17 = v15 & ~v16;
  uint64_t v18 = v14;
  uint64_t v34 = v14 + 56;
  if ((*(void *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17))
  {
    uint64_t v19 = ~v16;
    uint64_t v31 = v5;
    uint64_t v20 = *(void *)(v5 + 72);
    while (1)
    {
      uint64_t v21 = v18;
      sub_100128070(*(void *)(v18 + 48) + v20 * v17, (uint64_t)v13);
      char v22 = static UUID.== infix(_:_:)();
      sub_100128070((uint64_t)v13, (uint64_t)v10);
      sub_100128070(a1, (uint64_t)v7);
      if (v22)
      {
        char v23 = static Date.== infix(_:_:)();
        sub_100128138((uint64_t)v7);
        sub_100128138((uint64_t)v10);
        sub_100128138((uint64_t)v13);
        if (v23)
        {
          swift_bridgeObjectRelease();
          char v24 = v30;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v26 = *v24;
          uint64_t v35 = *v24;
          uint64_t *v24 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100329588();
            uint64_t v26 = v35;
          }
          uint64_t v27 = v32;
          sub_1001280D4(*(void *)(v26 + 48) + v20 * v17, v32);
          sub_10065C174(v17);
          uint64_t *v24 = v35;
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v33);
        }
      }
      else
      {
        sub_100128138((uint64_t)v7);
        sub_100128138((uint64_t)v10);
        sub_100128138((uint64_t)v13);
      }
      unint64_t v17 = (v17 + 1) & v19;
      uint64_t v18 = v21;
      if (((*(void *)(v34 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = v31;
        uint64_t v29 = v32;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v29, 1, 1, v33);
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v29 = v32;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v29, 1, 1, v33);
}

uint64_t sub_10065B950(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(void))
{
  uint64_t v7 = v4;
  swift_bridgeObjectRelease();
  uint64_t v8 = __CocoaSet.count.getter();
  uint64_t v9 = swift_unknownObjectRetain();
  uint64_t v10 = a3(v9, v8);
  uint64_t v22 = v10;
  Swift::Int v11 = *(void *)(v10 + 40);
  swift_retain();
  Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
  uint64_t v13 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    a4(0);
    id v15 = *(id *)(*(void *)(v10 + 48) + 8 * v14);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_6:
      swift_release();
      uint64_t v20 = *(void *)(*(void *)(v10 + 48) + 8 * v14);
      sub_10065C498(v14);
      if (static NSObject.== infix(_:_:)())
      {
        uint64_t *v7 = v22;
        return v20;
      }
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v10 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10065BAEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), unint64_t *a4)
{
  uint64_t v7 = v4;
  swift_bridgeObjectRelease();
  uint64_t v8 = __CocoaSet.count.getter();
  uint64_t v9 = swift_unknownObjectRetain();
  uint64_t v10 = a3(v9, v8);
  uint64_t v22 = v10;
  Swift::Int v11 = *(void *)(v10 + 40);
  swift_retain();
  Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
  uint64_t v13 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    sub_1000963CC(0, a4);
    id v15 = *(id *)(*(void *)(v10 + 48) + 8 * v14);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_6:
      swift_release();
      uint64_t v20 = *(void *)(*(void *)(v10 + 48) + 8 * v14);
      sub_10065C498(v14);
      if (static NSObject.== infix(_:_:)())
      {
        uint64_t *v7 = v22;
        return v20;
      }
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v10 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_10065BC90(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          unint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10065BE58(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v31 = v1;
    uint64_t v11 = ~v9;
    uint64_t v35 = result;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v13 = v4 + 16;
      uint64_t v32 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      BOOL v16 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v35;
      do
      {
        uint64_t v18 = v8;
        uint64_t v19 = v15;
        int64_t v20 = v15 * v10;
        v32(v6, *(void *)(v17 + 48) + v15 * v10, v3);
        sub_10065CC00((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v6, v3);
        unint64_t v22 = v21 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v22 < v33 || a1 < (uint64_t)v22)
          {
LABEL_4:
            uint64_t v8 = v18;
            uint64_t v15 = v19;
            uint64_t v17 = v35;
            goto LABEL_5;
          }
        }
        else if (v22 < v33 && a1 < (uint64_t)v22)
        {
          goto LABEL_4;
        }
        uint64_t v17 = v35;
        int64_t v25 = v19 * a1;
        uint64_t v8 = v18;
        if (v19 * a1 < v20
          || (uint64_t v15 = v19, *(void *)(v35 + 48) + v19 * a1 >= (unint64_t)(*(void *)(v35 + 48) + v20 + v19)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v10;
        if (v25 != v20)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v17 = v35;
          uint64_t v15 = v19;
          a1 = v10;
        }
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v31;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

void sub_10065C174(unint64_t a1)
{
  uint64_t v24 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v3 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v1;
  uint64_t v7 = *v1 + 56;
  uint64_t v8 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    unint64_t v22 = v1;
    uint64_t v10 = ~v8;
    swift_retain();
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v23 = v7;
    if ((*(void *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v12 = (v11 + 1) & v10;
      uint64_t v13 = *(void *)(v3 + 72);
      while (1)
      {
        int64_t v14 = v13 * v9;
        sub_100128070(*(void *)(v6 + 48) + v13 * v9, (uint64_t)v5);
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_10065CC00((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        type metadata accessor for Date();
        sub_10065CC00(&qword_100913BC8, (void (*)(uint64_t))&type metadata accessor for Date);
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v15 = Hasher._finalize()();
        sub_100128138((uint64_t)v5);
        unint64_t v16 = v15 & v10;
        if ((uint64_t)a1 >= (uint64_t)v12) {
          break;
        }
        if (v16 < v12) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v17 = v13 * a1;
        if ((uint64_t)(v13 * a1) < v14 || *(void *)(v6 + 48) + v13 * a1 >= *(void *)(v6 + 48) + v14 + v13)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v9;
          if (v17 == v14) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v9;
LABEL_6:
        unint64_t v9 = (v9 + 1) & v10;
        if (((*(void *)(v23 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_16;
        }
      }
      if (v16 < v12) {
        goto LABEL_6;
      }
LABEL_11:
      if ((uint64_t)a1 < (uint64_t)v16) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_16:
    *(void *)(v23 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    uint64_t v1 = v22;
  }
  else
  {
    *(void *)(v7 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v18 = *v1;
  uint64_t v19 = *(void *)(*v1 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v18 + 16) = v21;
    ++*(_DWORD *)(v18 + 36);
  }
}

unint64_t sub_10065C498(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            unint64_t v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *unint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10065C63C(uint64_t a1, void *a2)
{
  unint64_t v24 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v3 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v29 = _swiftEmptyArrayStorage;
    sub_1001DEB90(0, v3 & ~(v3 >> 63), 0);
    if (v24)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      unsigned __int8 v6 = 1;
    }
    else
    {
      uint64_t result = sub_1003CA790(a1);
      unsigned __int8 v6 = v7 & 1;
    }
    uint64_t v26 = result;
    uint64_t v27 = v5;
    unsigned __int8 v28 = v6;
    if (v3 < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
    else
    {
      do
      {
        while (1)
        {
          uint64_t v14 = v26;
          uint64_t v13 = v27;
          uint64_t v15 = v28;
          sub_1003CA77C(v26, v27, v28, a1);
          unint64_t v17 = v16;
          id v18 = [a2 indexOfEqualObject:v16];

          uint64_t v19 = v29;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = sub_1001DEB90(0, v19[2] + 1, 1);
            uint64_t v19 = v29;
          }
          unint64_t v21 = v19[2];
          unint64_t v20 = v19[3];
          if (v21 >= v20 >> 1)
          {
            uint64_t result = sub_1001DEB90(v20 > 1, v21 + 1, 1);
            uint64_t v19 = v29;
          }
          v19[2] = v21 + 1;
          v19[v21 + 4] = v18;
          if (v24) {
            break;
          }
          uint64_t v8 = sub_1003C9E34(v14, v13, v15, a1);
          uint64_t v10 = v9;
          char v12 = v11;
          sub_1000E4EA4(v14, v13, v15);
          uint64_t v26 = v8;
          uint64_t v27 = v10;
          unsigned __int8 v28 = v12 & 1;
          if (!--v3) {
            goto LABEL_20;
          }
        }
        if ((v15 & 1) == 0) {
          goto LABEL_23;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100094134(&qword_1009208E8);
        unint64_t v22 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v22(v25, 0);
        --v3;
      }
      while (v3);
LABEL_20:
      sub_1000E4EA4(v26, v27, v28);
      return (uint64_t)v29;
    }
  }
  return result;
}

unint64_t sub_10065C8AC()
{
  sub_1000963CC(0, (unint64_t *)&unk_100910210);
  sub_1000963CC(0, (unint64_t *)&unk_10090B010);
  sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
  unint64_t result = Sequence.elements<A>(ofType:)();
  unint64_t v1 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    sub_1002004F4((unint64_t)_swiftEmptyArrayStorage);
    swift_release();
    id v15 = objc_allocWithZone((Class)NSOrderedSet);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v17 = [v15 initWithArray:isa];

    return (unint64_t)v17;
  }
  uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    goto LABEL_23;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v1 + 8 * v3 + 32);
      uint64_t v5 = v4;
      id v6 = [v4 smartListType];
      if (!v6) {
        break;
      }
      char v7 = v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (!v10) {
        goto LABEL_6;
      }
      if (v8 == v11 && v10 == v12)
      {
        swift_bridgeObjectRelease_n();
LABEL_20:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        goto LABEL_7;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_20;
      }

LABEL_7:
      if (v2 == ++v3) {
        goto LABEL_23;
      }
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_6:

    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_10065CB64(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B40D0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

uint64_t sub_10065CBB0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10065CBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10065CBF8()
{
  return swift_release();
}

uint64_t sub_10065CC00(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10065CC48()
{
  return CKRecord.subscript.setter();
}

unsigned char *_s6FieldsOwst_6(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10065CE44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *_s6FieldsOMa_6()
{
  return &_s6FieldsON_6;
}

unint64_t sub_10065CE7C(uint64_t a1)
{
  unint64_t result = sub_10065CEA4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10065CEA4()
{
  unint64_t result = qword_100920910;
  if (!qword_100920910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920910);
  }
  return result;
}

unint64_t sub_10065CEF8(uint64_t a1)
{
  unint64_t result = sub_10065CF20();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10065CF20()
{
  unint64_t result = qword_100920918;
  if (!qword_100920918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920918);
  }
  return result;
}

unint64_t sub_10065CF78()
{
  unint64_t result = qword_100920920;
  if (!qword_100920920)
  {
    sub_100096058(&qword_100920928);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920920);
  }
  return result;
}

unint64_t sub_10065CFD8()
{
  unint64_t result = qword_100920930;
  if (!qword_100920930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920930);
  }
  return result;
}

void sub_10065D03C(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  v18[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for REMObjectID_Codable();
    sub_100661AF0((unint64_t *)&unk_1009110C0, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
    Set.Iterator.init(_cocoa:)();
    unint64_t v2 = (unint64_t)v18[2];
    id v17 = v18[3];
    uint64_t v3 = (uint64_t)v18[4];
    id v4 = v18[5];
    unint64_t v5 = (unint64_t)v18[6];
  }
  else
  {
    id v4 = 0;
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    id v17 = (void *)(a1 + 56);
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if ((v2 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | ((void)v4 << 6);
      uint64_t v12 = (char *)v4;
      goto LABEL_29;
    }
    uint64_t v14 = (uint64_t)v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v14 >= v9) {
      goto LABEL_32;
    }
    unint64_t v15 = v17[v14];
    uint64_t v12 = (char *)v4 + 1;
    if (!v15)
    {
      uint64_t v12 = (char *)v4 + 2;
      if ((uint64_t)v4 + 2 >= v9) {
        goto LABEL_32;
      }
      unint64_t v15 = v17[(void)v12];
      if (!v15)
      {
        uint64_t v12 = (char *)v4 + 3;
        if ((uint64_t)v4 + 3 >= v9) {
          goto LABEL_32;
        }
        unint64_t v15 = v17[(void)v12];
        if (!v15)
        {
          uint64_t v12 = (char *)v4 + 4;
          if ((uint64_t)v4 + 4 >= v9) {
            goto LABEL_32;
          }
          unint64_t v15 = v17[(void)v12];
          if (!v15)
          {
            uint64_t v12 = (char *)v4 + 5;
            if ((uint64_t)v4 + 5 >= v9) {
              goto LABEL_32;
            }
            unint64_t v15 = v17[(void)v12];
            if (!v15)
            {
              uint64_t v16 = (char *)v4 + 6;
              while ((char *)v9 != v16)
              {
                unint64_t v15 = v17[(void)v16++];
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_1000C1AF8();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + ((void)v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_10031DE8C(v18, v13);

      id v4 = v12;
      unint64_t v5 = v10;
      if ((v2 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for REMObjectID_Codable();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v18[0];
        swift_unknownObjectRelease();
        uint64_t v12 = (char *)v4;
        uint64_t v10 = v5;
        if (v13) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_10065D2EC(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  v18[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_100909B00);
    sub_100384A30();
    Set.Iterator.init(_cocoa:)();
    unint64_t v2 = (unint64_t)v18[2];
    id v17 = v18[3];
    uint64_t v3 = (uint64_t)v18[4];
    id v4 = v18[5];
    unint64_t v5 = (unint64_t)v18[6];
  }
  else
  {
    id v4 = 0;
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    id v17 = (void *)(a1 + 56);
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if ((v2 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | ((void)v4 << 6);
      uint64_t v12 = (char *)v4;
      goto LABEL_29;
    }
    uint64_t v14 = (uint64_t)v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v14 >= v9) {
      goto LABEL_32;
    }
    unint64_t v15 = v17[v14];
    uint64_t v12 = (char *)v4 + 1;
    if (!v15)
    {
      uint64_t v12 = (char *)v4 + 2;
      if ((uint64_t)v4 + 2 >= v9) {
        goto LABEL_32;
      }
      unint64_t v15 = v17[(void)v12];
      if (!v15)
      {
        uint64_t v12 = (char *)v4 + 3;
        if ((uint64_t)v4 + 3 >= v9) {
          goto LABEL_32;
        }
        unint64_t v15 = v17[(void)v12];
        if (!v15)
        {
          uint64_t v12 = (char *)v4 + 4;
          if ((uint64_t)v4 + 4 >= v9) {
            goto LABEL_32;
          }
          unint64_t v15 = v17[(void)v12];
          if (!v15)
          {
            uint64_t v12 = (char *)v4 + 5;
            if ((uint64_t)v4 + 5 >= v9) {
              goto LABEL_32;
            }
            unint64_t v15 = v17[(void)v12];
            if (!v15)
            {
              uint64_t v16 = (char *)v4 + 6;
              while ((char *)v9 != v16)
              {
                unint64_t v15 = v17[(void)v16++];
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_1000C1AF8();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + ((void)v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_10031EFB0(v18, v13);

      id v4 = v12;
      unint64_t v5 = v10;
      if ((v2 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_1000963CC(0, (unint64_t *)&qword_100909B00);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v18[0];
        swift_unknownObjectRelease();
        uint64_t v12 = (char *)v4;
        uint64_t v10 = v5;
        if (v13) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_10065D58C(uint64_t a1, void *a2)
{
  int64_t v3 = 0;
  v14[2] = a2;
  uint64_t v4 = a1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    sub_10032015C(v14, *(id *)(*(void *)(a1 + 48) + 16 * v10), *(void *)(v10 + 8));
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10065D708(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    int64_t v11 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10031DC68(&v17, v12, v13);
    unint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10065D888(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    int64_t v11 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10031DC68(&v17, v12, v13);
    unint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10065DA08()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100920940);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100920940);
  if (qword_1009077F0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942418);
  int64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_10065DAD0()
{
  id result = [self intelligentGrocery];
  qword_100920958 = (uint64_t)result;
  return result;
}

uint64_t sub_10065DB0C(uint64_t a1)
{
  uint64_t v3 = *v1;
  v2[17] = a1;
  v2[18] = v3;
  uint64_t v4 = type metadata accessor for Locale();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[22] = v5;
  v2[23] = *(void *)(v5 - 8);
  v2[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OSSignpostID();
  v2[25] = v6;
  v2[26] = *(void *)(v6 - 8);
  v2[27] = swift_task_alloc();
  return _swift_task_switch(sub_10065DCA8, 0, 0);
}

uint64_t sub_10065DCA8()
{
  uint64_t v56 = v0;
  static os_signpost_type_t.begin.getter();
  if (qword_100907AD0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_100907AC8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100920940);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v55[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    *(void *)(v0 + 64) = v7;
    swift_getMetatypeMetadata();
    uint64_t v9 = String.init<A>(describing:)();
    *(void *)(v0 + 128) = sub_1000C51B8(v9, v10, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s: Start execution", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  Date.init()();
  type metadata accessor for REMTrialClient();
  swift_allocObject();
  REMTrialClient.init()();
  uint64_t v11 = sub_10065E924();
  Swift::Int v12 = sub_10065FB5C(*(void **)(v0 + 136));
  swift_bridgeObjectRetain_n();
  Swift::Int v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  uint64_t v54 = (uint64_t)v12;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v49 = *(void *)(v0 + 168);
    uint64_t v50 = *(void *)(v0 + 160);
    uint64_t v51 = *(void *)(v0 + 152);
    os_log_type_t type = v14;
    uint64_t v15 = *(void *)(v0 + 144);
    uint64_t v16 = swift_slowAlloc();
    v55[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446722;
    os_log_t log = v13;
    *(void *)(v0 + 72) = v15;
    swift_getMetatypeMetadata();
    uint64_t v17 = String.init<A>(describing:)();
    *(void *)(v0 + 104) = sub_1000C51B8(v17, v18, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v19 = Set.description.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 112) = sub_1000C51B8(v19, v21, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 22) = 2080;
    static Locale.current.getter();
    uint64_t v22 = Locale.identifier.getter();
    unint64_t v24 = v23;
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    *(void *)(v0 + 120) = sub_1000C51B8(v22, v24, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    Swift::Int v13 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: {distinctGroceryLocaleIDsOfExistingGroceryLists: %{public}s}, {current locale: %s}", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v26 = *(void *)(v0 + 160);
  uint64_t v25 = *(void *)(v0 + 168);
  uint64_t v27 = *(void *)(v0 + 152);
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  static Locale.current.getter();
  uint64_t v29 = Locale.identifier.getter();
  uint64_t v31 = v30;
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  *(void *)(inited + 32) = v29;
  *(void *)(inited + 40) = v31;
  uint64_t v32 = sub_10065FADC(inited, v54);
  swift_setDeallocating();
  swift_arrayDestroy();
  *(void *)(v0 + 80) = sub_10065D708(v11, v32);
  sub_100094134(&qword_100911CB0);
  sub_10065FF78();
  Sequence<>.filterToSet(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  uint64_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, (os_log_type_t)v35))
  {
    uint64_t v37 = swift_slowAlloc();
    v55[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136446466;
    uint64_t v38 = sub_1000D82B8();
    *(void *)(v0 + 88) = sub_1000C51B8(v38, v39, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v40 = Set.description.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 96) = sub_1000C51B8(v40, v42, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v35, "%{public}s: Requesting grocery model assets from Trial {localeIDsOfGroceryModelAssetsToRequest: %{public}s}", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v43 = *(void *)(v0 + 144);
  *(void *)(swift_allocObject() + 16) = v43;
  dispatch thunk of REMTrialClient.requestGroceryModelAssetsForLocales(withLocaleIdentifiers:completion:)();
  uint64_t v45 = *(void *)(v0 + 184);
  uint64_t v44 = *(void *)(v0 + 192);
  uint64_t v46 = *(void *)(v0 + 176);
  uint64_t v47 = *(void *)(v0 + 144);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10065E580(v44, v47);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
  return v48();
}

uint64_t sub_10065E580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v25 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907AC8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_100920940);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  Swift::Int v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v24 = v4;
    uint64_t v15 = v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = v5;
    uint64_t v26 = v16;
    uint64_t v27 = a2;
    *(_DWORD *)uint64_t v15 = 136446466;
    swift_getMetatypeMetadata();
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v27 = sub_1000C51B8(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2048;
    Date.rem_elapsedInMilliseconds.getter();
    uint64_t v27 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: Finished execution {elapsedSeconds: %f}", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    uint64_t v5 = v23;
    swift_slowDealloc();
    uint64_t v4 = v24;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  static os_signpost_type_t.end.getter();
  if (qword_100907AD0 != -1) {
    swift_once();
  }
  unint64_t v20 = v25;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v20, v4);
}

uint64_t sub_10065E924()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v20[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100907B10 != -1) {
    swift_once();
  }
  uint64_t v8 = swift_retain();
  id v9 = sub_10034A86C(v8);
  swift_release();
  if (!v9) {
    goto LABEL_8;
  }
  id v10 = [v9 secondaryGroceryLocalesInfoAsData];
  if (!v10)
  {

LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    goto LABEL_9;
  }
  uint64_t v11 = v10;
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  uint64_t v15 = type metadata accessor for RDSecondaryGroceryLocalesInfo();
  sub_100661AF0((unint64_t *)&unk_100920900, (void (*)(uint64_t))type metadata accessor for RDSecondaryGroceryLocalesInfo);
  static REMJSONRepresentable.fromJSONData(_:)();
  sub_100097F34(v12, v14);

  if (v0) {
    return v15;
  }
  uint64_t v17 = *(void *)(v21 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales);
  swift_bridgeObjectRetain();
  swift_release();
  sub_10040D448(v17, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
  {
    (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    sub_100094134((uint64_t *)&unk_10090A490);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)(inited + 32) = Locale.identifier.getter();
    *(void *)(inited + 40) = v19;
    uint64_t v15 = sub_10012674C(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    return v15;
  }
LABEL_9:
  sub_1000966BC((uint64_t)v3, (uint64_t *)&unk_10090FDF0);
  return sub_10012674C((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_10065EC74()
{
  return static REMGroceryDummyModel.isSupported(localeIdentifier:)() & 1;
}

uint64_t sub_10065ECC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[20] = a5;
  v6[21] = a6;
  v6[19] = a4;
  return _swift_task_switch(sub_10065ECE8, 0, 0);
}

uint64_t sub_10065ECE8()
{
  uint64_t v1 = (void *)v0[21];
  id v2 = [self sharedManager];
  v0[22] = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[23] = v3;
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10077A530;
  *(void *)(v4 + 32) = v1;
  uint64_t v10 = v4;
  specialized Array._endMutation()();
  sub_1000963CC(0, &qword_100920A48);
  id v5 = v1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[24] = isa;
  swift_bridgeObjectRelease();
  type metadata accessor for RDIDispatchQueue();
  uint64_t v7 = static RDIDispatchQueue.utilityQueue.getter();
  v0[25] = v7;
  v0[2] = v0;
  v0[3] = sub_10065EEC8;
  uint64_t v8 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1003AA938;
  v0[13] = &unk_1008CEB98;
  v0[14] = v8;
  [v2 subscribe:v3 subscriptions:isa queue:v7 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10065EEC8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    id v2 = sub_10065F050;
  }
  else {
    id v2 = sub_10065EFD8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10065EFD8()
{
  uint64_t v1 = *(void **)(v0 + 192);
  id v2 = *(void **)(v0 + 200);
  NSString v3 = *(void **)(v0 + 184);

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10065F050()
{
  uint64_t v17 = v0;
  uint64_t v1 = (void *)v0[25];
  NSString v3 = (void *)v0[23];
  id v2 = (void *)v0[24];
  uint64_t v4 = (void *)v0[22];
  swift_willThrow();

  if (qword_100907AC8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100920940);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  unint64_t v9 = v0[20];
  if (v8)
  {
    uint64_t v10 = v0[19];
    uint64_t v11 = swift_slowAlloc();
    v16[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446466;
    swift_bridgeObjectRetain();
    v0[10] = sub_1000C51B8(v10, v9, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v12 = Error.rem_errorDescription.getter();
    v0[10] = sub_1000C51B8(v12, v13, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "requestNLAndSiriBertAssets: Failed to UAFAssetSetManager.subscribe %{public}s with error: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10065F300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[20] = a5;
  v6[21] = a6;
  v6[19] = a4;
  return _swift_task_switch(sub_10065F324, 0, 0);
}

uint64_t sub_10065F324()
{
  id v1 = [self sharedManager];
  v0[22] = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  v0[23] = v2;
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_100209D8C(v3);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[24] = isa;
  swift_release();
  type metadata accessor for RDIDispatchQueue();
  uint64_t v5 = static RDIDispatchQueue.utilityQueue.getter();
  v0[25] = v5;
  v0[2] = v0;
  v0[3] = sub_10065F4C8;
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1003AA938;
  v0[13] = &unk_1008CEB80;
  v0[14] = v6;
  [v1 unsubscribe:v2 subscriptionNames:isa queue:v5 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10065F4C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    NSString v2 = sub_10065F5D8;
  }
  else {
    NSString v2 = sub_10065EFD8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10065F5D8()
{
  uint64_t v17 = v0;
  uint64_t v1 = (void *)v0[25];
  uint64_t v3 = (void *)v0[23];
  NSString v2 = (void *)v0[24];
  uint64_t v4 = (void *)v0[22];
  swift_willThrow();

  if (qword_100907AC8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100920940);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    v16[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v9 = Set.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    v0[10] = sub_1000C51B8(v9, v11, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v12 = Error.rem_errorDescription.getter();
    v0[10] = sub_1000C51B8(v12, v13, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "unsubscribeUAFAsset: Failed to UAFAssetSetManager.unsubscribe %{public}s with error: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10065F8B0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDGroceryOperationDownloadGroceryModelAssetsFromTrial()
{
  return self;
}

uint64_t sub_10065F8E4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1000C6EF4;
  return sub_10065DB0C(a1);
}

uint64_t sub_10065F97C(uint64_t a1, uint64_t a2)
{
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v5 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  os_log_type_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v9 = __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v19 - v10;
  uint64_t v20 = a2;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    uint64_t v13 = v5 + 16;
    unint64_t v14 = v15;
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v17 = *(void *)(v13 + 56);
    do
    {
      v14(v7, v16, PredicateType, v9);
      sub_10031E220((uint64_t)v11, v7);
      (*(void (**)(char *, uint64_t))(v13 - 8))(v11, PredicateType);
      v16 += v17;
      --v12;
    }
    while (v12);
    return v20;
  }
  return a2;
}

uint64_t sub_10065FADC(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v4 = *(v3 - 1);
      Swift::Int v5 = *v3;
      swift_bridgeObjectRetain();
      sub_10031DC68(&v7, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return a2;
}

void *sub_10065FB5C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = _s10PredicatesOMa_1();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  id v7 = [self cdEntityName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v8 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t)[v8 initWithEntityName:v9];

  [(id)v10 setResultType:2];
  [(id)v10 setReturnsDistinctResults:1];
  unint64_t v11 = (void *)sub_100535B3C();
  [(id)v10 setPredicate:v11];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100776E40;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 32) = 0x4C797265636F7267;
  *(void *)(v12 + 40) = 0xEF4449656C61636FLL;
  uint64_t v13 = (char *)&type metadata for Any;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [(id)v10 setPropertiesToFetch:isa];

  sub_1000963CC(0, &qword_10090E4F0);
  uint64_t v15 = a1;
  unint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {
    sub_1000ECFE0((uint64_t)v6);

    return v15;
  }
  unint64_t v17 = v16;
  uint64_t v31 = &_swiftEmptySetSingleton;
  if (v16 >> 62) {
    goto LABEL_21;
  }
  uint64_t v18 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v18)
  {
LABEL_5:
    uint64_t v23 = v2;
    id v24 = (id)v10;
    uint64_t v25 = v6;
    uint64_t v6 = (char *)(v17 & 0xC000000000000001);
    uint64_t v10 = 4;
    uint64_t v26 = v13 + 8;
    while (1)
    {
      if (v6) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v19 = *(id *)(v17 + 8 * v10);
      }
      uint64_t v20 = v19;
      uint64_t v13 = (char *)(v10 - 3);
      if (__OFADD__(v10 - 4, 1))
      {
        __break(1u);
LABEL_21:
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        if (!v18) {
          break;
        }
        goto LABEL_5;
      }
      *(void *)&v29[0] = 0x4C797265636F7267;
      *((void *)&v29[0] + 1) = 0xEF4449656C61636FLL;
      uint64_t v2 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      id v21 = [v20 __swift_objectForKeyedSubscript:v2];
      swift_unknownObjectRelease();
      if (v21)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v29, 0, sizeof(v29));
      }
      sub_1000D6CBC((uint64_t)v29, (uint64_t)v30);
      if (v30[3])
      {
        if (swift_dynamicCast())
        {
          sub_10031DC68(v30, v27, v28);

          swift_bridgeObjectRelease();
          goto LABEL_8;
        }
      }
      else
      {
        sub_1000966BC((uint64_t)v30, &qword_100908190);
      }

LABEL_8:
      ++v10;
      if (v13 == (char *)v18)
      {

        swift_bridgeObjectRelease();
        uint64_t v15 = v31;
        uint64_t v6 = v25;
        goto LABEL_23;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v15 = &_swiftEmptySetSingleton;
LABEL_23:
  sub_1000ECFE0((uint64_t)v6);
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t sub_10065FF78()
{
  unint64_t result = qword_100911CB8;
  if (!qword_100911CB8)
  {
    sub_100096058(&qword_100911CB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100911CB8);
  }
  return result;
}

uint64_t sub_10065FFD4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10065FFE8(unint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100909BE0);
  __chkstk_darwin(v2 - 8);
  id v126 = (char *)v121 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v121 - v5;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  NSString v9 = (char *)v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for URL();
  unint64_t v145 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v127 = (char *)v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v132 = (char *)v121 - v12;
  uint64_t v131 = type metadata accessor for REMGroceryLocaleMapping.LocaleSetting();
  *(void *)&long long v144 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  unint64_t v135 = (char *)v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for REMGroceryLocaleMapping();
  uint64_t v143 = *(unint64_t **)(v134 - 8);
  __chkstk_darwin(v134);
  Class isa = (Class)((char *)v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v16 = [self sharedManager];
  unint64_t v130 = (unint64_t)"odelAssetsFromTrial";
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v16 subscriptionsForSubscriber:v17];

  id v19 = _swiftEmptyArrayStorage;
  if (v18)
  {
    sub_1000963CC(0, &qword_100920A48);
    Swift::Int v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    Swift::Int v20 = (Swift::Int)_swiftEmptyArrayStorage;
  }
  unint64_t v137 = a1;
  uint64_t v138 = v6;
  if ((unint64_t)v20 >> 62) {
    goto LABEL_153;
  }
  uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
  uint64_t v139 = v9;
  unint64_t v142 = (unint64_t)isa;
  if (v21)
  {
    v150[0] = (uint64_t)v19;
    uint64_t result = sub_1001DE058(0, v21 & ~(v21 >> 63), 0);
    if (v21 < 0)
    {
      __break(1u);
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
    uint64_t v23 = 0;
    id v24 = (void *)v150[0];
    NSString v9 = (char *)(v20 & 0xC000000000000001);
    do
    {
      if (v9) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v25 = *(id *)(v20 + 8 * v23 + 32);
      }
      uint64_t v26 = v25;
      id v27 = [v25 name];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;

      v150[0] = (uint64_t)v24;
      unint64_t v32 = v24[2];
      unint64_t v31 = v24[3];
      if (v32 >= v31 >> 1)
      {
        sub_1001DE058(v31 > 1, v32 + 1, 1);
        id v24 = (void *)v150[0];
      }
      ++v23;
      _OWORD v24[2] = v32 + 1;
      unint64_t v33 = &v24[2 * v32];
      v33[4] = v28;
      v33[5] = v30;
      Class isa = (Class)v142;
    }
    while (v21 != v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v24 = _swiftEmptyArrayStorage;
  }
  uint64_t v34 = sub_10012674C((uint64_t)v24);
  swift_bridgeObjectRelease();
  unint64_t v35 = v137;
  if (!*(void *)(v137 + 16))
  {
    if (*(void *)(v34 + 16))
    {
      uint64_t v76 = type metadata accessor for TaskPriority();
      uint64_t v77 = (uint64_t)v126;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v126, 1, 1, v76);
      uint64_t v78 = (void *)swift_allocObject();
      v78[2] = 0;
      uint64_t v78[3] = 0;
      unint64_t v79 = v130 | 0x8000000000000000;
      v78[4] = 0xD00000000000001BLL;
      v78[5] = v79;
      v78[6] = v34;
      swift_bridgeObjectRetain();
      sub_1000C6B60(v77, (uint64_t)&unk_100920A40, (uint64_t)v78);
      swift_bridgeObjectRelease();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  int v128 = (void *)v34;
  id v151 = &_swiftEmptySetSingleton;
  id v152 = &_swiftEmptySetSingleton;
  uint64_t v36 = *(void *)(v137 + 56);
  uint64_t v140 = (unint64_t *)(v137 + 56);
  uint64_t v37 = 1 << *(unsigned char *)(v137 + 32);
  uint64_t v38 = -1;
  if (v37 < 64) {
    uint64_t v38 = ~(-1 << v37);
  }
  unint64_t v39 = v38 & v36;
  int64_t v141 = (unint64_t)(v37 + 63) >> 6;
  uint64_t v133 = (uint64_t (**)(unint64_t, uint64_t))(v143 + 1);
  os_log_t v129 = (void (**)(char *, uint64_t))(v144 + 8);
  int v124 = (void (**)(char *, uint64_t))(v145 + 8);
  swift_bridgeObjectRetain();
  uint64_t v40 = 0;
  id v19 = 0;
  *(void *)&long long v41 = 136446210;
  long long v122 = v41;
  v121[5] = (char *)&type metadata for Any + 8;
  *((void *)&v41 + 1) = 2;
  long long v144 = xmmword_100776E40;
  *(void *)&long long v41 = 136446466;
  long long v136 = v41;
  if (!v39) {
    goto LABEL_22;
  }
LABEL_21:
  unint64_t v145 = (v39 - 1) & v39;
  uint64_t v143 = v40;
  for (unint64_t i = __clz(__rbit64(v39)) | ((void)v40 << 6); ; unint64_t i = __clz(__rbit64(v45)) + (v44 << 6))
  {
    uint64_t v47 = *(void *)(v35 + 48) + 16 * i;
    NSString v9 = *(char **)v47;
    unint64_t v48 = *(void *)(v47 + 8);
    type metadata accessor for REMTrialClient();
    swift_allocObject();
    swift_bridgeObjectRetain();
    REMTrialClient.init()();
    if (!v19) {
      break;
    }
    Swift::Int v20 = 0;
    if (qword_100907AC8 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_10008E2DC(v49, (uint64_t)qword_100920940);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      v150[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = v136;
      swift_bridgeObjectRetain();
      *(void *)(v52 + 4) = sub_1000C51B8((uint64_t)v9, v48, v150);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v52 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v53 = Error.rem_errorDescription.getter();
      *(void *)(v52 + 14) = sub_1000C51B8(v53, v54, v150);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "requestNLAndSiriBertAssets: Cannot load modelInfo for %{public}s: %s", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      unint64_t v35 = v137;
      swift_slowDealloc();
      Class isa = (Class)v142;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    id v19 = 0;
LABEL_41:
    unint64_t v39 = v145;
    uint64_t v40 = v143;
    if (v145) {
      goto LABEL_21;
    }
LABEL_22:
    BOOL v43 = __OFADD__(v40, 1);
    int64_t v44 = (int64_t)v40 + 1;
    if (v43)
    {
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
    if (v44 >= v141) {
      goto LABEL_80;
    }
    unint64_t v45 = v140[v44];
    if (!v45)
    {
      int64_t v46 = v44 + 1;
      if (v44 + 1 >= v141) {
        goto LABEL_80;
      }
      unint64_t v45 = v140[v46];
      if (v45) {
        goto LABEL_31;
      }
      int64_t v46 = v44 + 2;
      if (v44 + 2 >= v141) {
        goto LABEL_80;
      }
      unint64_t v45 = v140[v46];
      if (v45)
      {
LABEL_31:
        int64_t v44 = v46;
        goto LABEL_32;
      }
      int64_t v46 = v44 + 3;
      if (v44 + 3 < v141)
      {
        unint64_t v45 = v140[v46];
        if (!v45)
        {
          while (1)
          {
            int64_t v44 = v46 + 1;
            if (__OFADD__(v46, 1)) {
              break;
            }
            if (v44 >= v141) {
              goto LABEL_80;
            }
            unint64_t v45 = v140[v44];
            ++v46;
            if (v45) {
              goto LABEL_32;
            }
          }
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        goto LABEL_31;
      }
LABEL_80:
      id v123 = v19;
      swift_release();
      NSString v9 = v139;
      uint64_t v75 = (uint64_t)v151;
      id v19 = v128;
      if (v128[2] <= v151[2] >> 3)
      {
        v150[0] = (uint64_t)v151;
        swift_bridgeObjectRetain();
        sub_10065A5FC((uint64_t)v19);
        uint64_t v143 = (unint64_t *)v150[0];
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v143 = sub_10023CBC4((uint64_t)v19, v75);
      }
      int64_t v80 = 0;
      unint64_t v81 = v143[7];
      uint64_t v140 = v143 + 7;
      uint64_t v82 = 1 << *((unsigned char *)v143 + 32);
      uint64_t v83 = -1;
      if (v82 < 64) {
        uint64_t v83 = ~(-1 << v82);
      }
      unint64_t v145 = v83 & v81;
      int64_t v141 = (unint64_t)(v82 + 63) >> 6;
      unint64_t v142 = 0x80000001007DAD30;
      unint64_t v137 = v130 | 0x8000000000000000;
      *(void *)&long long v136 = (char *)&type metadata for () + 8;
      do
      {
LABEL_91:
        if (v145)
        {
          unint64_t v84 = __clz(__rbit64(v145));
          v145 &= v145 - 1;
          unint64_t v85 = v84 | (v80 << 6);
        }
        else
        {
          BOOL v43 = __OFADD__(v80++, 1);
          if (v43) {
            goto LABEL_148;
          }
          if (v80 >= v141)
          {
LABEL_118:
            swift_release();
            id v19 = v151;
            if (v151[2] <= v128[2] >> 3)
            {
              v150[0] = (uint64_t)v128;
              sub_10065A5FC((uint64_t)v151);
              swift_bridgeObjectRelease();
              os_log_type_t v107 = (unint64_t *)v150[0];
              if (!*(void *)(v150[0] + 16)) {
                goto LABEL_122;
              }
LABEL_120:
              uint64_t v108 = type metadata accessor for TaskPriority();
              uint64_t v109 = (uint64_t)v126;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v126, 1, 1, v108);
              os_log_t v110 = (void *)swift_allocObject();
              v110[2] = 0;
              v110[3] = 0;
              unint64_t v111 = v130 | 0x8000000000000000;
              v110[4] = 0xD00000000000001BLL;
              v110[5] = v111;
              v110[6] = v107;
              swift_bridgeObjectRetain();
              id v19 = (void *)sub_1000C6B60(v109, (uint64_t)&unk_100920A38, (uint64_t)v110);
              swift_bridgeObjectRelease();
              swift_release();
            }
            else
            {
              os_log_type_t v107 = sub_10023CBC4((uint64_t)v151, (uint64_t)v128);
              swift_bridgeObjectRelease();
              if (v107[2]) {
                goto LABEL_120;
              }
LABEL_122:
              swift_bridgeObjectRelease();
            }
            Swift::Int v20 = 0;
            uint64_t v112 = v152;
            unint64_t v113 = v152 + 56;
            uint64_t v114 = 1 << v152[32];
            uint64_t v115 = -1;
            if (v114 < 64) {
              uint64_t v115 = ~(-1 << v114);
            }
            unint64_t v116 = v115 & *((void *)v152 + 7);
            NSString v9 = (char *)((unint64_t)(v114 + 63) >> 6);
            while (1)
            {
              if (v116)
              {
                unint64_t v117 = __clz(__rbit64(v116));
                v116 &= v116 - 1;
                unint64_t v118 = v117 | (v20 << 6);
              }
              else
              {
                BOOL v43 = __OFADD__(v20++, 1);
                if (v43) {
                  goto LABEL_149;
                }
                if (v20 >= (uint64_t)v9) {
                  return swift_release();
                }
                unint64_t v119 = *(void *)&v113[8 * v20];
                if (!v119)
                {
                  Swift::Int v120 = v20 + 1;
                  if (v20 + 1 >= (uint64_t)v9) {
                    return swift_release();
                  }
                  unint64_t v119 = *(void *)&v113[8 * v120];
                  if (!v119)
                  {
                    Swift::Int v120 = v20 + 2;
                    if (v20 + 2 >= (uint64_t)v9) {
                      return swift_release();
                    }
                    unint64_t v119 = *(void *)&v113[8 * v120];
                    if (!v119)
                    {
                      Swift::Int v120 = v20 + 3;
                      if (v20 + 3 >= (uint64_t)v9) {
                        return swift_release();
                      }
                      unint64_t v119 = *(void *)&v113[8 * v120];
                      if (!v119)
                      {
                        while (1)
                        {
                          Swift::Int v20 = v120 + 1;
                          if (__OFADD__(v120, 1)) {
                            break;
                          }
                          if (v20 >= (uint64_t)v9) {
                            return swift_release();
                          }
                          unint64_t v119 = *(void *)&v113[8 * v20];
                          ++v120;
                          if (v119) {
                            goto LABEL_139;
                          }
                        }
LABEL_152:
                        __break(1u);
LABEL_153:
                        swift_bridgeObjectRetain();
                        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                        goto LABEL_6;
                      }
                    }
                  }
                  Swift::Int v20 = v120;
                }
LABEL_139:
                unint64_t v116 = (v119 - 1) & v119;
                unint64_t v118 = __clz(__rbit64(v119)) + (v20 << 6);
              }
              id v19 = *(void **)(*((void *)v112 + 6) + 16 * v118);
              swift_bridgeObjectRetain();
              _s7remindd20REMGroceryClassifierC26requestNLAssetsIfNecessary11modelLocaleySS_tFZ_0();
              swift_bridgeObjectRelease();
            }
          }
          unint64_t v86 = v140[v80];
          if (!v86)
          {
            int64_t v87 = v80 + 1;
            if (v80 + 1 >= v141) {
              goto LABEL_118;
            }
            unint64_t v86 = v140[v87];
            if (!v86)
            {
              int64_t v87 = v80 + 2;
              if (v80 + 2 >= v141) {
                goto LABEL_118;
              }
              unint64_t v86 = v140[v87];
              if (!v86)
              {
                int64_t v87 = v80 + 3;
                if (v80 + 3 >= v141) {
                  goto LABEL_118;
                }
                unint64_t v86 = v140[v87];
                if (!v86)
                {
                  while (1)
                  {
                    int64_t v80 = v87 + 1;
                    if (__OFADD__(v87, 1)) {
                      break;
                    }
                    if (v80 >= v141) {
                      goto LABEL_118;
                    }
                    unint64_t v86 = v140[v80];
                    ++v87;
                    if (v86) {
                      goto LABEL_103;
                    }
                  }
LABEL_151:
                  __break(1u);
                  goto LABEL_152;
                }
              }
            }
            int64_t v80 = v87;
          }
LABEL_103:
          unint64_t v145 = (v86 - 1) & v86;
          unint64_t v85 = __clz(__rbit64(v86)) + (v80 << 6);
        }
        uint64_t v88 = (uint64_t *)(v143[6] + 16 * v85);
        uint64_t v90 = *v88;
        uint64_t v89 = v88[1];
        sub_100094134(&qword_100920A10);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v144;
        unint64_t v92 = v142;
        *(void *)(inited + 32) = 0xD00000000000001CLL;
        *(void *)(inited + 40) = v92;
        sub_100094134(&qword_100920A18);
        uint64_t v93 = swift_initStackObject();
        *(_OWORD *)(v93 + 16) = v144;
        *(void *)(v93 + 32) = 0x75676E616C2E6C6ELL;
        *(void *)(v93 + 40) = 0xEB00000000656761;
        *(void *)(v93 + 48) = v90;
        *(void *)(v93 + 56) = v89;
        swift_bridgeObjectRetain_n();
        *(void *)(inited + 48) = sub_1002ED5C0(v93);
        sub_1002EFC20(inited);
        uint64_t v94 = type metadata accessor for Date();
        uint64_t v95 = *(void *)(v94 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v9, 1, 1, v94);
        Swift::Int v20 = (Swift::Int)String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        sub_100094134(&qword_10090B068);
        v96.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        Class isa = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v9, 1, v94) != 1)
        {
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v95 + 8))(v9, v94);
        }
        id v19 = [objc_allocWithZone((Class)UAFAssetSetSubscription) initWithName:v20 assetSets:v96.super.isa usageAliases:0 expires:isa];
      }
      while (!v19);
      uint64_t v97 = type metadata accessor for TaskPriority();
      uint64_t v98 = *(void *)(v97 - 8);
      uint64_t v99 = (uint64_t)v138;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v138, 1, 1, v97);
      unint64_t v100 = (void *)swift_allocObject();
      v100[2] = 0;
      os_log_t v101 = (Class *)(v100 + 2);
      v100[3] = 0;
      v100[4] = 0xD00000000000001BLL;
      v100[5] = v137;
      v100[6] = v19;
      int v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v99, 1, v97);
      Swift::Int v20 = v19;
      if (v102 == 1)
      {
        sub_1000966BC(v99, &qword_100909BE0);
        Class isa = *v101;
        if (*v101) {
          goto LABEL_109;
        }
LABEL_111:
        uint64_t v103 = 0;
        uint64_t v105 = 0;
      }
      else
      {
        id v19 = (void *)TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v99, v97);
        Class isa = *v101;
        if (!*v101) {
          goto LABEL_111;
        }
LABEL_109:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v103 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v105 = v104;
        swift_unknownObjectRelease();
      }
      uint64_t v106 = swift_allocObject();
      *(void *)(v106 + 16) = &unk_100920A28;
      *(void *)(v106 + 24) = v100;
      if (v105 | v103)
      {
        uint64_t v146 = 0;
        uint64_t v147 = 0;
        uint64_t v148 = v103;
        uint64_t v149 = v105;
      }
      swift_task_create();

      swift_release();
      NSString v9 = v139;
      goto LABEL_91;
    }
LABEL_32:
    unint64_t v145 = (v45 - 1) & v45;
    uint64_t v143 = (unint64_t *)v44;
  }
  dispatch thunk of REMTrialClient.loadGroceryLocaleMapping()();
  REMGroceryLocaleMapping.localeSetting(for:)();
  REMGroceryLocaleMapping.LocaleSetting.base.getter();
  dispatch thunk of REMTrialClient.groceryDirectoryURL(for:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:)();
  uint64_t v55 = Data.init(contentsOf:options:)();
  unint64_t v57 = v56;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1001E7E28();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  id v123 = 0;
  uint64_t v58 = v125;
  BOOL v59 = *v124;
  (*v124)(v127, v125);
  swift_release();
  sub_100097F34(v55, v57);
  swift_release();
  uint64_t v60 = (void *)v150[2];
  v121[3] = v150[6];
  v121[4] = v150[4];
  v121[1] = v150[11];
  v121[2] = v150[8];
  Swift::Int v20 = v150[12];
  Swift::Int v61 = v150[13];
  v59(v132, v58);
  (*v129)(v135, v131);
  uint64_t result = (*v133)(v142, v134);
  uint64_t v62 = v60[2];
  if (!v62)
  {
    swift_bridgeObjectRetain();
    sub_10031DC68(v150, (Swift::Int)v9, v48);
    swift_bridgeObjectRelease();
    unint64_t v35 = v137;
    goto LABEL_63;
  }
  uint64_t v63 = v60[4];
  unint64_t v35 = v137;
  if (v63)
  {
    if (v62 != 1)
    {
      if (!v60[5]) {
        goto LABEL_57;
      }
      if (v62 != 2)
      {
        uint64_t v64 = 6;
        do
        {
          uint64_t v65 = v64 - 3;
          if (__OFADD__(v64 - 4, 1)) {
            goto LABEL_155;
          }
          if (!v60[v64]) {
            goto LABEL_57;
          }
          ++v64;
        }
        while (v65 != v62);
      }
    }
    swift_bridgeObjectRetain();
    sub_10031DC68(v150, (Swift::Int)v9, v48);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v63 = v60[4];
LABEL_57:
    if (v63 == 4) {
      goto LABEL_60;
    }
  }
  if (v62 == 1) {
    goto LABEL_63;
  }
  if (v60[5] == 4)
  {
LABEL_60:
    if (v61)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10031DC68(v150, v20, v61);
      swift_bridgeObjectRelease();
LABEL_73:
      id v19 = v123;
      Class isa = (Class)v142;
      goto LABEL_41;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_100907AC8 != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    sub_10008E2DC(v70, (uint64_t)qword_100920940);
    swift_bridgeObjectRetain();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v67, v71))
    {
      uint64_t v72 = swift_slowAlloc();
      v150[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = v122;
      swift_bridgeObjectRetain();
      *(void *)(v72 + 4) = sub_1000C51B8((uint64_t)v9, v48, v150);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v67, v71, "requestNLAndSiriBertAssets: siriEmeddngLocale is nil: %{public}s", (uint8_t *)v72, 0xCu);
      goto LABEL_67;
    }
    goto LABEL_72;
  }
  if (v62 == 2)
  {
LABEL_63:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_100907AC8 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    sub_10008E2DC(v66, (uint64_t)qword_100920940);
    swift_bridgeObjectRetain();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = swift_slowAlloc();
      v150[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = v122;
      swift_bridgeObjectRetain();
      *(void *)(v69 + 4) = sub_1000C51B8((uint64_t)v9, v48, v150);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "requestNLAndSiriBertAssets: skip download for siriEmeddngLocale: %{public}s", (uint8_t *)v69, 0xCu);
LABEL_67:
      swift_arrayDestroy();
      unint64_t v35 = v137;
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_73;
    }
LABEL_72:

    swift_bridgeObjectRelease_n();
    goto LABEL_73;
  }
  uint64_t v73 = 6;
  while (1)
  {
    uint64_t v74 = v73 - 3;
    if (__OFADD__(v73 - 4, 1)) {
      break;
    }
    if (v60[v73] == 4) {
      goto LABEL_60;
    }
    ++v73;
    if (v74 == v62) {
      goto LABEL_63;
    }
  }
LABEL_156:
  __break(1u);
  return result;
}

uint64_t sub_1006618B8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100661900()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000C6EF4;
  *(_OWORD *)(v3 + 160) = v4;
  *(void *)(v3 + 152) = v2;
  return _swift_task_switch(sub_10065ECE8, 0, 0);
}

uint64_t sub_1006619B4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006619F0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000C75D4;
  *(_OWORD *)(v3 + 160) = v4;
  *(void *)(v3 + 152) = v2;
  return _swift_task_switch(sub_10065F324, 0, 0);
}

uint64_t sub_100661AA8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100661AF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100661B38()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100920A50);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100920A50);
  if (qword_100907838 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424F0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100661C00(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v107 = a3;
  uint64_t v108 = a4;
  uint64_t v105 = a2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [self fetchRequest];
  sub_1000963CC(0, &qword_100920A68);
  unint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();
  if (v4)
  {

    return;
  }
  id v90 = v13;
  uint64_t v99 = v6;
  unint64_t v100 = v12;
  uint64_t v98 = v8;
  id v89 = a1;
  unint64_t v15 = v14;
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v16) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v16)
    {
LABEL_42:
      swift_bridgeObjectRelease();
      unint64_t v81 = &v114;
      goto LABEL_43;
    }
  }
  uint64_t v97 = v9;
  id v17 = [v89 persistentStoreCoordinator];
  if (!v17) {
    goto LABEL_42;
  }
  uint64_t v88 = v10;
  id v18 = v17;
  id v19 = [v17 persistentStores];
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1002007DC(v20);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v22 = [v18 currentPersistentHistoryTokenFromStores:isa];

  if (!v22)
  {

    swift_bridgeObjectRelease();
    return;
  }
  id v87 = v18;
  id v23 = [objc_allocWithZone((Class)REMNSPersistentHistoryToken) initWithPersistentHistoryToken:v22];
  id v24 = self;
  id v110 = 0;
  id v25 = [v24 archivedDataWithRootObject:v23 requiringSecureCoding:1 error:&v110];
  id v26 = v110;
  if (!v25)
  {
    int64_t v80 = v26;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    unint64_t v81 = &v113;
LABEL_43:

    return;
  }
  id v84 = v23;
  id v85 = v22;
  uint64_t v86 = 0;
  uint64_t v103 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v104 = v27;

  uint64_t v28 = v100;
  static Date.now.getter();
  if (v16 < 1) {
    __break(1u);
  }
  uint64_t v30 = 0;
  unint64_t v106 = v15 & 0xC000000000000001;
  uint64_t v109 = &v111;
  uint64_t v94 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
  *(void *)&long long v29 = 136316162;
  long long v93 = v29;
  unint64_t v92 = 0x80000001007DAD50;
  unint64_t v91 = (char *)&type metadata for Any + 8;
  uint64_t v95 = v16;
  unint64_t v96 = v15;
  uint64_t v31 = v108;
  do
  {
    if (v106) {
      id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v32 = *(id *)(v15 + 8 * v30 + 32);
    }
    unint64_t v33 = v32;
    id v34 = [v32 clientName];
    if (v34)
    {
      unint64_t v35 = v34;
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      if (v31)
      {
        char v39 = sub_1001CBC20(v36, v38, v31);
        swift_bridgeObjectRelease();
        if (v39)
        {

          goto LABEL_11;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    Class v40 = Data._bridgeToObjectiveC()().super.isa;
    [v33 setLastConsumedChangeTokenData:v40];

    Class v41 = Date._bridgeToObjectiveC()().super.isa;
    [v33 setLastConsumedDate:v41];

    if (qword_100907AD8 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10008E2DC(v42, (uint64_t)qword_100920A50);
    id v43 = v33;
    unint64_t v44 = v107;
    swift_bridgeObjectRetain_n();
    id v45 = v43;
    int64_t v46 = Logger.logObject.getter();
    int v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, (os_log_type_t)v47))
    {
      int v102 = v47;
      uint64_t v48 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      uint64_t v112 = v101;
      *(_DWORD *)uint64_t v48 = v93;
      swift_bridgeObjectRetain();
      id v110 = (id)sub_1000C51B8(v105, v44, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v48 + 12) = 2080;
      id v110 = (id)sub_1000C51B8(0xD000000000000087, v92, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 22) = 2082;
      id v49 = [v45 accountIdentifier];
      if (v49)
      {
        uint64_t v50 = v49;
        os_log_type_t v51 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v53 = v52;
      }
      else
      {
        os_log_type_t v51 = 0;
        uint64_t v53 = 0;
      }
      id v110 = v51;
      uint64_t v111 = v53;
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v54 = Optional.descriptionOrNil.getter();
      unint64_t v56 = v55;
      swift_bridgeObjectRelease();
      id v110 = (id)sub_1000C51B8(v54, v56, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 32) = 2082;
      id v57 = [v45 clientName];
      if (v57)
      {
        uint64_t v58 = v57;
        BOOL v59 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v61 = v60;
      }
      else
      {
        BOOL v59 = 0;
        uint64_t v61 = 0;
      }
      id v110 = v59;
      uint64_t v111 = v61;
      uint64_t v62 = Optional.descriptionOrNil.getter();
      unint64_t v64 = v63;
      swift_bridgeObjectRelease();
      id v110 = (id)sub_1000C51B8(v62, v64, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 42) = 2082;
      id v65 = [v45 lastConsumedDate];
      if (v65)
      {
        uint64_t v66 = v65;
        uint64_t v67 = (uint64_t)v98;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v68 = 0;
        uint64_t v69 = v97;
      }
      else
      {
        uint64_t v68 = 1;
        uint64_t v69 = v97;
        uint64_t v67 = (uint64_t)v98;
      }
      uint64_t v28 = v100;
      (*v94)(v67, v68, 1, v69);
      uint64_t v70 = Optional.descriptionOrNil.getter();
      unint64_t v72 = v71;
      sub_1000EACF4(v67);
      id v110 = (id)sub_1000C51B8(v70, v72, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v102, "[%s|%s] Did reset change tracking state {accountIdentifier: %{public}s, clientName: %{public}s, lastConsumedDate: %{public}s}", (uint8_t *)v48, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v31 = v108;
      uint64_t v16 = v95;
      unint64_t v15 = v96;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v31 = v108;
    }
LABEL_11:
    ++v30;
  }
  while (v16 != v30);
  swift_bridgeObjectRelease();
  id v73 = v89;
  if ([v89 hasChanges])
  {
    id v110 = 0;
    unsigned int v74 = [v73 save:&v110];
    uint64_t v75 = v88;
    id v76 = v85;
    id v77 = v84;
    id v78 = v90;
    if (v74)
    {
      id v79 = v110;
      [v73 refreshAllObjects];
    }
    else
    {
      id v82 = v110;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }

    sub_100097F34(v103, v104);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v28, v97);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v88 + 8))(v28, v97);

    sub_100097F34(v103, v104);
  }
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler.v5()
{
  return &type metadata for RDReminderDataPostMigrationHandler.v5;
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler.v6()
{
  return &type metadata for RDReminderDataPostMigrationHandler.v6;
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler.v2023_minorE_Migrating_to_ZREMCDBASELIST()
{
  return &type metadata for RDReminderDataPostMigrationHandler.v2023_minorE_Migrating_to_ZREMCDBASELIST;
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler.v2023_minorE_Migrated_to_ZREMCDBASELIST()
{
  return &type metadata for RDReminderDataPostMigrationHandler.v2023_minorE_Migrated_to_ZREMCDBASELIST;
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler.v2024_minorC_Migrating_to_REMCDList_sharedOwnerIdentifier()
{
  return &type metadata for RDReminderDataPostMigrationHandler.v2024_minorC_Migrating_to_REMCDList_sharedOwnerIdentifier;
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler()
{
  return &type metadata for RDReminderDataPostMigrationHandler;
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler.v2024_minorC_Migrated_to_REMCDList_sharedOwnerIdentifier()
{
  return &type metadata for RDReminderDataPostMigrationHandler.v2024_minorC_Migrated_to_REMCDList_sharedOwnerIdentifier;
}

uint64_t sub_10066272C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for REMCDBaseSection();
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100662770(uint64_t result, int a2)
{
  if ((result & ~a2) != 0)
  {
    __int16 v2 = a2;
    __int16 v3 = result;
    if (qword_100907AE0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_100920A70);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446466;
      uint64_t v8 = sub_100662CC0(v3);
      sub_1000C51B8(v8, v9, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2082;
      uint64_t v10 = sub_100662CC0(v2);
      sub_1000C51B8(v10, v11, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v12 = self;
    if ((v3 & 0x200) != 0)
    {
      NSString v15 = String._bridgeToObjectiveC()();
      [v12 unauthorizedErrorWithMissingEntitlement:v15];
    }
    else
    {
      NSString v13 = String._bridgeToObjectiveC()();
      sub_100662CC0(v3);
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_100662CC0(v2);
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v12 unauthorizedErrorWithMissingEntitlement:v13 requestedAccessLevel:v14 currentAccesslevel:v15];
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100662A34()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100920A70);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100920A70);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  __int16 v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_100662AFC(char a1)
{
  unint64_t result = 0xD000000000000020;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD00000000000003ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000034;
      break;
    case 4:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000027;
      break;
    case 6:
      unint64_t result = 0xD000000000000032;
      break;
    case 7:
      unint64_t result = 0xD000000000000024;
      break;
    case 8:
      unint64_t result = 0xD000000000000026;
      break;
    case 9:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 10:
      unint64_t result = 0xD000000000000025;
      break;
    case 11:
      unint64_t result = 0xD000000000000043;
      break;
    case 12:
      unint64_t result = 0xD000000000000039;
      break;
    case 13:
      unint64_t result = 0xD000000000000042;
      break;
    case 14:
      unint64_t result = 0xD000000000000038;
      break;
    case 15:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 16:
      unint64_t result = 0xD00000000000004CLL;
      break;
    case 17:
      unint64_t result = 0xD000000000000026;
      break;
    case 19:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100662CC0(__int16 a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v2 = sub_100308F88(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100308F88((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  uint64_t v5 = &v2[2 * v4];
  v5[4] = 0xD000000000000010;
  v5[5] = 0x80000001007DAF60;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100308F88(0, v2[2] + 1, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_100308F88((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    uint64_t v8 = &v2[2 * v7];
    v8[4] = 0xD000000000000017;
    v8[5] = 0x80000001007DAF40;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100308F88(0, v2[2] + 1, 1, v2);
    }
    unint64_t v10 = v2[2];
    unint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_100308F88((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    unint64_t v11 = (char *)&v2[2 * v10];
    strcpy(v11 + 32, ".writePrivate");
    *((_WORD *)v11 + 23) = -4864;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_33;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100308F88(0, v2[2] + 1, 1, v2);
  }
  unint64_t v13 = v2[2];
  unint64_t v12 = v2[3];
  if (v13 >= v12 >> 1) {
    uint64_t v2 = sub_100308F88((void *)(v12 > 1), v13 + 1, 1, v2);
  }
  v2[2] = v13 + 1;
  NSString v14 = &v2[2 * v13];
  void v14[4] = 0x636E79732ELL;
  v14[5] = 0xE500000000000000;
  if ((a1 & 0x10) == 0)
  {
LABEL_15:
    if ((a1 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_33:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100308F88(0, v2[2] + 1, 1, v2);
  }
  unint64_t v16 = v2[2];
  unint64_t v15 = v2[3];
  if (v16 >= v15 >> 1) {
    uint64_t v2 = sub_100308F88((void *)(v15 > 1), v16 + 1, 1, v2);
  }
  v2[2] = v16 + 1;
  id v17 = &v2[2 * v16];
  void v17[4] = 0x5465676E6168632ELL;
  v17[5] = 0xEF676E696B636172;
  if ((a1 & 0x20) == 0)
  {
LABEL_16:
    if ((a1 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_38:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100308F88(0, v2[2] + 1, 1, v2);
  }
  unint64_t v19 = v2[2];
  unint64_t v18 = v2[3];
  if (v19 >= v18 >> 1) {
    uint64_t v2 = sub_100308F88((void *)(v18 > 1), v19 + 1, 1, v2);
  }
  v2[2] = v19 + 1;
  unint64_t v20 = &v2[2 * v19];
  v20[4] = 0x67756265642ELL;
  void v20[5] = 0xE600000000000000;
  if ((a1 & 0x40) == 0)
  {
LABEL_17:
    if ((a1 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_43:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100308F88(0, v2[2] + 1, 1, v2);
  }
  unint64_t v22 = v2[2];
  unint64_t v21 = v2[3];
  if (v22 >= v21 >> 1) {
    uint64_t v2 = sub_100308F88((void *)(v21 > 1), v22 + 1, 1, v2);
  }
  v2[2] = v22 + 1;
  id v23 = &v2[2 * v22];
  v23[4] = 0x6E697865646E692ELL;
  v23[5] = 0xE900000000000067;
  if ((a1 & 0x80) == 0)
  {
LABEL_18:
    if ((a1 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_48:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100308F88(0, v2[2] + 1, 1, v2);
  }
  unint64_t v25 = v2[2];
  unint64_t v24 = v2[3];
  if (v25 >= v24 >> 1) {
    uint64_t v2 = sub_100308F88((void *)(v24 > 1), v25 + 1, 1, v2);
  }
  v2[2] = v25 + 1;
  id v26 = &v2[2 * v25];
  v26[4] = 0x696C417065656B2ELL;
  v26[5] = 0xEA00000000006576;
  if ((a1 & 0x100) == 0)
  {
LABEL_19:
    if ((a1 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_53:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100308F88(0, v2[2] + 1, 1, v2);
  }
  unint64_t v28 = v2[2];
  unint64_t v27 = v2[3];
  if (v28 >= v27 >> 1) {
    uint64_t v2 = sub_100308F88((void *)(v27 > 1), v28 + 1, 1, v2);
  }
  v2[2] = v28 + 1;
  long long v29 = &v2[2 * v28];
  uint64_t v29[4] = 0xD000000000000010;
  v29[5] = 0x80000001007DAF20;
  if ((a1 & 0x200) == 0)
  {
LABEL_20:
    if ((a1 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_63;
  }
LABEL_58:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100308F88(0, v2[2] + 1, 1, v2);
  }
  unint64_t v31 = v2[2];
  unint64_t v30 = v2[3];
  if (v31 >= v30 >> 1) {
    uint64_t v2 = sub_100308F88((void *)(v30 > 1), v31 + 1, 1, v2);
  }
  v2[2] = v31 + 1;
  id v32 = &v2[2 * v31];
  v32[4] = 0x6163696C7065722ELL;
  v32[5] = 0xEF726567616E614DLL;
  if ((a1 & 0x400) == 0)
  {
LABEL_21:
    if ((a1 & 0x800) == 0) {
      goto LABEL_73;
    }
    goto LABEL_68;
  }
LABEL_63:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100308F88(0, v2[2] + 1, 1, v2);
  }
  unint64_t v34 = v2[2];
  unint64_t v33 = v2[3];
  if (v34 >= v33 >> 1) {
    uint64_t v2 = sub_100308F88((void *)(v33 > 1), v34 + 1, 1, v2);
  }
  v2[2] = v34 + 1;
  unint64_t v35 = &v2[2 * v34];
  v35[4] = 0xD000000000000012;
  v35[5] = 0x80000001007DAF00;
  if ((a1 & 0x800) != 0)
  {
LABEL_68:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100308F88(0, v2[2] + 1, 1, v2);
    }
    unint64_t v37 = v2[2];
    unint64_t v36 = v2[3];
    if (v37 >= v36 >> 1) {
      uint64_t v2 = sub_100308F88((void *)(v36 > 1), v37 + 1, 1, v2);
    }
    v2[2] = v37 + 1;
    uint64_t v38 = &v2[2 * v37];
    v38[4] = 0xD000000000000011;
    v38[5] = 0x80000001007DAEE0;
  }
LABEL_73:
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1001E98BC();
  uint64_t v39 = BidirectionalCollection<>.joined(separator:)();
  Class v41 = v40;
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = 93;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  return 91;
}

_DWORD *sub_1006633BC@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1006633C8()
{
  return sub_100662CC0(*v0);
}

void sub_1006633D0(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1006633D8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1006633EC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_100663400@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100663414(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_100663444@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_100663470@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_100663494(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_1006634A8(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_1006634BC(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_1006634D0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1006634E4(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1006634F8(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10066350C(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100663520()
{
  return *v0 == 0;
}

uint64_t sub_100663530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_DWORD *sub_100663548(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_10066355C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_10066356C(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100663578(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10066358C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_10066373C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

ValueMetadata *type metadata accessor for RDClientAccessLevel()
{
  return &type metadata for RDClientAccessLevel;
}

unint64_t sub_1006635E0()
{
  unint64_t result = qword_100920A88;
  if (!qword_100920A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920A88);
  }
  return result;
}

unint64_t sub_100663638()
{
  unint64_t result = qword_100920A90;
  if (!qword_100920A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920A90);
  }
  return result;
}

unint64_t sub_100663690()
{
  unint64_t result = qword_100920A98;
  if (!qword_100920A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920A98);
  }
  return result;
}

unint64_t sub_1006636E8()
{
  unint64_t result = qword_100920AA0;
  if (!qword_100920AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920AA0);
  }
  return result;
}

uint64_t sub_10066373C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  int v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100663778()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100920AA8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100920AA8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100663840(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  int v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(void *)(a1 + 16))
  {
    unint64_t v9 = sub_1001806F8(0x7265746E756F63, 0xE700000000000000);
    if (v10)
    {
      sub_10009A1B0(*(void *)(a1 + 56) + 32 * v9, (uint64_t)v26);
      if (swift_dynamicCast())
      {
        if (*(void *)(a1 + 16))
        {
          double v11 = v25;
          unint64_t v12 = sub_1001806F8(0xD000000000000010, 0x80000001007DB2A0);
          if (v13)
          {
            sub_10009A1B0(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v26);
            if (swift_dynamicCast())
            {
              if (*(void *)(a1 + 16))
              {
                double v14 = v25;
                unint64_t v15 = sub_1001806F8(0x496163696C706572, 0xE900000000000044);
                if (v16)
                {
                  sub_10009A1B0(*(void *)(a1 + 56) + 32 * v15, (uint64_t)v26);
                  if (swift_dynamicCast())
                  {
                    UUID.init(uuidString:)();
                    swift_bridgeObjectRelease();
                    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
                    {
                      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(v8, v4, v5);
                      id v23 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
                      Class isa = UUID._bridgeToObjectiveC()().super.isa;
                      id v21 = [v23 initWithCounter:*(void *)&v11 modificationTime:isa replicaID:v14];

                      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
                      return v21;
                    }
                    sub_1001260DC((uint64_t)v4);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (qword_100907AE8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100920AA8);
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Can't construct REMResolutionToken from invalid JSON", v20, 2u);
    swift_slowDealloc();
  }

  return 0;
}

id sub_100663BE0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = sub_100663840(a1);
  *a2 = result;
  return result;
}

id sub_100663C08(uint64_t a1)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v2 = sub_1001806F8(7364973, 0xE300000000000000), (v3 & 1) != 0)
    && (sub_10009A1B0(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v15),
        sub_100094134(&qword_100920AC0),
        (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v4 = sub_100663FC4(v14);
    swift_bridgeObjectRelease();
    sub_1004204A0(v4);
    swift_release();
    id v5 = objc_allocWithZone((Class)NSMutableDictionary);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v7 = [v5 initWithDictionary:isa];

    id v8 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithMap:v7];
  }
  else
  {
    if (qword_100907AE8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100920AA8);
    char v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Can't construct REMResolutionTokenMap from invalid JSON", v12, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v8;
}

uint64_t sub_100663EF4()
{
  sub_100177BF8(v0, (uint64_t)&off_1008CED08, (uint64_t)&v2);
  return v2;
}

id sub_100663F9C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = sub_100663C08(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100663FC4(uint64_t a1)
{
  sub_100094134(&qword_100920AC8);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v3 = 0;
  uint64_t v30 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v5 - 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v4;
  uint64_t v26 = v5;
  int64_t v27 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v28 = (void *)result;
  uint64_t v29 = result + 64;
  if ((v8 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  int64_t v11 = v3;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v30 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_1006641EC();
    swift_bridgeObjectRetain();
    uint64_t v20 = swift_bridgeObjectRetain();
    id v21 = sub_100663840(v20);
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t)v28;
    *(void *)(v29 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    unint64_t v22 = (void *)(v28[6] + 16 * i);
    *unint64_t v22 = v18;
    v22[1] = v19;
    *(void *)(v28[7] + 8 * i) = v21;
    uint64_t v23 = v28[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v28[2] = v25;
    int64_t v3 = v11;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v27) {
      return result;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v13);
    int64_t v15 = v3 + 1;
    if (!v14)
    {
      int64_t v15 = v3 + 2;
      if (v3 + 2 >= v27) {
        return result;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v3 + 3;
        if (v3 + 3 >= v27) {
          return result;
        }
        unint64_t v14 = *(void *)(v26 + 8 * v15);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v14 - 1) & v14;
    int64_t v11 = v15;
  }
  uint64_t v16 = v3 + 4;
  if (v3 + 4 >= v27) {
    return result;
  }
  unint64_t v14 = *(void *)(v26 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      return result;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_1006641EC()
{
  unint64_t result = qword_100920AD0;
  if (!qword_100920AD0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100920AD0);
  }
  return result;
}

void _sSo13REMCDReminderC7reminddE24prepareForDeletion_SwiftyyF_0()
{
  id v1 = [v0 managedObjectContext];
  if (v1)
  {
    id v23 = v1;
    self;
    uint64_t v2 = swift_dynamicCastObjCClass();
    if (v2)
    {
      int64_t v3 = (void *)v2;
      uint64_t v4 = (void *)sub_100666B5C(v0);
      type metadata accessor for REMCDDueDateDeltaAlert();
      id v5 = [objc_allocWithZone((Class)NSFetchRequest) init];
      id v6 = [(id)swift_getObjCClassFromMetadata() entity];
      [v5 setEntity:v6];

      [v5 setAffectedStores:0];
      [v5 setPredicate:v4];
      unint64_t v7 = NSManagedObjectContext.fetch<A>(_:)();

      if (qword_100907AF0 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_10008E2DC(v8, (uint64_t)qword_100920AE0);
      unint64_t v9 = v0;
      swift_bridgeObjectRetain_n();
      unint64_t v10 = v9;
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      unint64_t v13 = v7 >> 62;
      if (!os_log_type_enabled((os_log_t)v11, v12))
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_16;
      }
      unint64_t v9 = (_WORD *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)unint64_t v9 = 136446466;
      id v14 = [v10 remObjectID];
      if (v14)
      {
        int64_t v15 = v14;
        id v16 = [v14 description];

        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v19 = v18;
      }
      else
      {
        uint64_t v17 = 7104878;
        unint64_t v19 = 0xE300000000000000;
      }
      sub_1000C51B8(v17, v19, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v9[6] = 2048;
      unint64_t v13 = v7 >> 62;
      if (v7 >> 62) {
        goto LABEL_28;
      }
      while (1)
      {
        swift_bridgeObjectRelease();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v11, v12, "cleanUpCachedDueDateDeltaAlertsOnPreparationToReminderDeletion: prepareForDeletion on reminder {reminderID: %{public}s, alerts.count: %ld}", (uint8_t *)v9, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_16:
        if (v13)
        {
          swift_bridgeObjectRetain();
          uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
          if (!v11) {
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v11) {
            goto LABEL_25;
          }
        }
        if (v11 >= 1) {
          break;
        }
        __break(1u);
LABEL_28:
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      for (uint64_t i = 0; i != v11; ++i)
      {
        if ((v7 & 0xC000000000000001) != 0) {
          id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v21 = *(id *)(v7 + 8 * i + 32);
        }
        unint64_t v22 = v21;
        [v3 deleteObject:v21];
      }
LABEL_25:

      swift_bridgeObjectRelease_n();
    }
    else
    {
    }
  }
}

uint64_t sub_10066490C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100920AE0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100920AE0);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  int64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Void __swiftcall REMCDReminder.processDueDateDeltaAlertsDataChanges()()
{
  _s44DueDateDeltaAlertsDataCDIngestionCoordinatorCMa();
  swift_allocObject();
  sub_10066591C(v0);
  static os_log_type_t.info.getter();
  measureTimeElapsed(_:level:block:)();

  swift_release();
}

uint64_t _s44DueDateDeltaAlertsDataCDIngestionCoordinatorCMa()
{
  return self;
}

void sub_100664C94()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v86 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v87 = (char *)v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)v74 - v6;
  __chkstk_darwin(v8);
  unint64_t v91 = (char *)v74 - v9;
  unint64_t v10 = *(void **)(v0 + 32);
  uint64_t v11 = *(void **)(v2 + 16);
  uint64_t v12 = sub_100666B5C(v11);
  if (v1) {
    return;
  }
  unint64_t v13 = (void *)v12;
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  v94[0] = (id)inited;
  id v84 = v10;
  specialized Array._endMutation()();
  int64_t v15 = (void *)sub_1003BC91C((unint64_t)v94[0], 0, 0, (uint64_t)v13);
  type metadata accessor for REMCDDueDateDeltaAlert();
  uint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  swift_bridgeObjectRelease();

  unint64_t v82 = v16;
  int64_t v27 = sub_1002498B0();
LABEL_10:
  unint64_t v31 = *(void **)(v2 + 24);
  v94[0] = 0;
  id v32 = [v31 remObjectIDWithError:v94];
  id v33 = v94[0];
  if (!v32)
  {
    id v43 = v94[0];
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  unint64_t v34 = v32;
  id v76 = v27;
  v94[0] = 0;
  id v35 = v33;
  id v36 = [v11 remObjectIDWithError:v94];
  id v37 = v94[0];
  if (!v36)
  {
    id v43 = v94[0];
    swift_bridgeObjectRelease();

    goto LABEL_15;
  }
  id v38 = v36;
  type metadata accessor for REMDueDateDeltaAlertCDIngestor();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v34;
  *(void *)(v39 + 24) = v38;
  uint64_t v40 = v39;
  id v41 = v37;
  Swift::String v42 = v76;
  sub_100665B18((unint64_t)v76, v40);
  v74[1] = v40;
  v94[0] = v42;
  swift_bridgeObjectRetain();
  sub_100094134((uint64_t *)&unk_10090FFC0);
  sub_100666DC4();
  uint64_t v44 = sub_1003A006C((unint64_t *)&qword_100913920);
  unint64_t v45 = (unint64_t)v76;
  uint64_t v77 = v44;
  os_log_t v90 = (os_log_t)Sequence.mapToSet<A>(_:)();
  v74[0] = 0;
  swift_bridgeObjectRelease();
  long long v93 = _swiftEmptyArrayStorage;
  if (v82 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v46 = *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v81 = v2;
  if (v46)
  {
    int v47 = 0;
    unint64_t v80 = v82 & 0xC000000000000001;
    unint64_t v75 = v82 + 32;
    os_log_t v89 = v90 + 7;
    uint64_t v88 = (void *)(v86 + 16);
    uint64_t v48 = (void (**)(char *, uint64_t))(v86 + 8);
    uint64_t v78 = v86 + 32;
    uint64_t v79 = v46;
    while (1)
    {
      if (v80)
      {
        id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v50 = __OFADD__(v47, 1);
        uint64_t v11 = (char *)v47 + 1;
        if (v50) {
          goto LABEL_48;
        }
      }
      else
      {
        id v49 = *(id *)(v75 + 8 * (void)v47);
        BOOL v50 = __OFADD__(v47, 1);
        uint64_t v11 = (char *)v47 + 1;
        if (v50)
        {
LABEL_48:
          __break(1u);
          swift_once();
          uint64_t v17 = type metadata accessor for Logger();
          sub_10008E2DC(v17, (uint64_t)qword_100920AE0);
          swift_retain();
          swift_errorRetain();
          swift_retain();
          swift_errorRetain();
          unint64_t v18 = Logger.logObject.getter();
          int v19 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v18, (os_log_type_t)v19))
          {
            LODWORD(v89) = v19;
            os_log_t v90 = v18;
            uint64_t v20 = swift_slowAlloc();
            uint64_t v88 = (void *)swift_slowAlloc();
            v94[0] = v88;
            *(_DWORD *)uint64_t v20 = 136315394;
            id v21 = [v11 remObjectID];
            if (v21)
            {
              unint64_t v22 = v21;
              id v23 = [v21 description];

              uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v26 = v25;
            }
            else
            {
              unint64_t v26 = 0xE300000000000000;
              uint64_t v24 = 7104878;
            }
            long long v93 = (void *)sub_1000C51B8(v24, v26, (uint64_t *)v94);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v20 + 12) = 2080;
            swift_getErrorValue();
            uint64_t v28 = Error.rem_errorDescription.getter();
            long long v93 = (void *)sub_1000C51B8(v28, v29, (uint64_t *)v94);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            os_log_t v30 = v90;
            _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v89, "DueDateDeltaAlertsDataCDIngestionCoordinator: Failed to deserialize 'dueDateDeltaAlertsData' so local REMCDDueDateDeltaAlert entries will be wiped for the reminder {reminder: %s, error: %s}", (uint8_t *)v20, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            swift_release_n();
            swift_errorRelease();
            swift_errorRelease();
          }
          int64_t v27 = _swiftEmptyArrayStorage;
          goto LABEL_10;
        }
      }
      uint64_t v83 = v11;
      id v85 = v49;
      id v51 = [v49 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      if (v90[2].isa
        && (os_log_t v52 = v90,
            uint64_t v53 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v54 = -1 << LOBYTE(v52[4].isa),
            unint64_t v55 = v53 & ~v54,
            ((*(unint64_t *)((char *)&v89->isa + ((v55 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v55) & 1) != 0))
      {
        uint64_t v56 = ~v54;
        uint64_t v57 = *(void *)(v86 + 72);
        uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
        while (1)
        {
          v58(v7, (char *)v90[6].isa + v57 * v55, v3);
          sub_1003A006C((unint64_t *)&qword_10090B4D0);
          char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v60 = *v48;
          (*v48)(v7, v3);
          if (v59) {
            break;
          }
          unint64_t v55 = (v55 + 1) & v56;
          if (((*(unint64_t *)((char *)&v89->isa + ((v55 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v55) & 1) == 0) {
            goto LABEL_31;
          }
        }
        v60(v91, v3);

        int v47 = v83;
        uint64_t v2 = v81;
        if (v83 == (void *)v79)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v63 = v93;
          goto LABEL_37;
        }
      }
      else
      {
LABEL_31:
        (*v48)(v91, v3);
        id v61 = v85;
        [v84 deleteObject:v85];
        id v62 = [v61 identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v63 = v93;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v63 = (void *)sub_100309EC8(0, v63[2] + 1, 1, (unint64_t)v63);
        }
        uint64_t v2 = v81;
        uint64_t v64 = v79;
        int v47 = v83;
        unint64_t v66 = v63[2];
        unint64_t v65 = v63[3];
        if (v66 >= v65 >> 1) {
          unint64_t v63 = (void *)sub_100309EC8(v65 > 1, v66 + 1, 1, (unint64_t)v63);
        }
        v63[2] = v66 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v86 + 32))((unint64_t)v63+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(void *)(v86 + 72) * v66, v87, v3);

        long long v93 = v63;
        if (v47 == (void *)v64)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_37:
          unint64_t v45 = (unint64_t)v76;
          goto LABEL_39;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v63 = _swiftEmptyArrayStorage;
LABEL_39:
  swift_bridgeObjectRelease();
  if (v63[2])
  {
    if (qword_100907AF0 != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    sub_10008E2DC(v67, (uint64_t)qword_100920AE0);
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = 134218242;
      swift_beginAccess();
      uint64_t v92 = v93[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v70 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v71 = Array.description.getter();
      unint64_t v73 = v72;
      swift_bridgeObjectRelease();
      uint64_t v92 = sub_1000C51B8(v71, v73, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "DueDateDeltaAlertsDataCDIngestionCoordinator: %ld REMCDDueDateDeltaAlert entries deleted {identifiers: %s}", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    unint64_t v45 = (unint64_t)v76;
  }
  sub_1006662D8(v45);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t sub_10066591C(void *a1)
{
  uint64_t v3 = v1;
  *(void *)(v1 + 16) = a1;
  id v4 = a1;
  id v7 = [v4 account];
  sub_100094134((uint64_t *)&unk_10090AF30);
  Optional.tryUnwrap(_:file:line:)();

  if (v2)
  {

    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v1 + 24) = v9;
    id v8 = [v4 storeControllerManagedObjectContext];
    sub_100094134((uint64_t *)&unk_100920C40);
    Optional.tryUnwrap(_:file:line:)();

    *(void *)(v1 + 32) = v9;
    id v6 = [objc_allocWithZone((Class)RDPersistentStoreLookupForREMCDObject) init:v4];

    *(void *)(v3 + 40) = v6;
  }
  return v3;
}

uint64_t sub_100665B18(unint64_t isUniquelyReferenced_nonNull_native, uint64_t a2)
{
  uint64_t v63 = a2;
  os_log_type_t v69 = (void *)type metadata accessor for UUID();
  uint64_t v3 = (uint64_t *)*(v69 - 1);
  __chkstk_darwin(v69);
  uint64_t v68 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (isUniquelyReferenced_nonNull_native >> 62) {
    goto LABEL_30;
  }
  uint64_t v5 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  unint64_t v74 = isUniquelyReferenced_nonNull_native;
  if (!v5)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::Int v7 = (Swift::Int)_swiftEmptyDictionarySingleton;
    goto LABEL_32;
  }
LABEL_3:
  unint64_t v67 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  uint64_t v6 = type metadata accessor for REMCDDueDateDeltaAlert();
  unint64_t v65 = (void (**)(unint64_t, void *))(v3 + 1);
  uint64_t v66 = v6;
  Swift::Int v7 = (Swift::Int)_swiftEmptyDictionarySingleton;
  uint64_t v8 = 4;
  uint64_t v64 = v5;
  do
  {
    uint64_t v3 = (uint64_t *)(v8 - 4);
    if (v67) {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v8);
    }
    id v11 = v10;
    uint64_t v12 = v8 - 3;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v74 = isUniquelyReferenced_nonNull_native;
      if (!v5) {
        goto LABEL_31;
      }
      goto LABEL_3;
    }
    id v13 = [v10 identifier];
    char isUniquelyReferenced_nonNull_native = (unint64_t)v68;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v72[0] = v66;
    sub_100094134((uint64_t *)&unk_100920C20);
    String.init<A>(describing:)();
    id v14 = objc_allocWithZone((Class)REMObjectID);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v17 = [v14 initWithUUID:isa entityName:v16];

    (*v65)(isUniquelyReferenced_nonNull_native, v69);
    if ((v7 & 0xC000000000000001) != 0)
    {
      if (v7 < 0) {
        uint64_t v3 = (uint64_t *)v7;
      }
      else {
        uint64_t v3 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFF8);
      }
      uint64_t v18 = __CocoaDictionary.count.getter();
      if (__OFADD__(v18, 1)) {
        goto LABEL_28;
      }
      Swift::Int v7 = sub_1001A9630((uint64_t)v3, v18 + 1);
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v72[0] = v7;
    uint64_t v3 = (uint64_t *)v7;
    unint64_t v20 = sub_100306FE8((uint64_t)v17);
    uint64_t v21 = *(void *)(v7 + 16);
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22)) {
      goto LABEL_27;
    }
    char v24 = v19;
    if (*(void *)(v7 + 24) >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v3 = v72;
        sub_10031D794();
      }
    }
    else
    {
      sub_1003174C8(v23, isUniquelyReferenced_nonNull_native);
      uint64_t v3 = (uint64_t *)v72[0];
      unint64_t v25 = sub_100306FE8((uint64_t)v17);
      if ((v24 & 1) != (v26 & 1))
      {
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        goto LABEL_54;
      }
      unint64_t v20 = v25;
    }
    char isUniquelyReferenced_nonNull_native = v74;
    Swift::Int v7 = v72[0];
    if (v24)
    {
      uint64_t v9 = *(void *)(v72[0] + 56);

      *(void *)(v9 + 8 * v20) = v11;
    }
    else
    {
      *(void *)(v72[0] + 8 * (v20 >> 6) + 64) |= 1 << v20;
      uint64_t v27 = 8 * v20;
      *(void *)(*(void *)(v7 + 48) + v27) = v17;
      *(void *)(*(void *)(v7 + 56) + v27) = v11;
      uint64_t v28 = *(void *)(v7 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29) {
        goto LABEL_29;
      }
      *(void *)(v7 + 16) = v30;
      id v31 = v17;
    }

    swift_bridgeObjectRelease();
    ++v8;
  }
  while (v12 != v64);
  swift_bridgeObjectRelease();
LABEL_32:
  long long v70 = xmmword_100776E80;
  os_log_type_t v69 = v71;
  v72[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1001DE058(0, 6, 0);
  uint64_t v32 = 0;
  uint64_t v33 = v72[0];
  unint64_t v34 = (unint64_t)"ype";
  unint64_t v35 = (unint64_t)"reminderIdentifier";
  unint64_t v36 = (unint64_t)"acknowledgedDate";
  do
  {
    unint64_t v37 = 0xE800000000000000;
    unint64_t v38 = 0x44497463656A626FLL;
    switch(*((unsigned char *)&off_1008B7910 + v32 + 32))
    {
      case 1:
        unint64_t v38 = 0xD000000000000012;
        unint64_t v37 = v34 | 0x8000000000000000;
        break;
      case 2:
        unint64_t v37 = 0xEC00000061746C65;
        unint64_t v38 = 0x4465746144657564;
        break;
      case 3:
        unint64_t v37 = 0xEC00000065746144;
        unint64_t v38 = 0x6E6F697461657263;
        break;
      case 4:
        unint64_t v37 = v35 | 0x8000000000000000;
        unint64_t v38 = 0xD000000000000010;
        break;
      case 5:
        unint64_t v38 = 0xD00000000000001ALL;
        unint64_t v37 = v36 | 0x8000000000000000;
        break;
      default:
        break;
    }
    v72[0] = v33;
    unint64_t v40 = *(void *)(v33 + 16);
    unint64_t v39 = *(void *)(v33 + 24);
    if (v40 >= v39 >> 1)
    {
      unint64_t v67 = v36;
      uint64_t v68 = (char *)v34;
      Swift::String v42 = (const char *)v35;
      sub_1001DE058(v39 > 1, v40 + 1, 1);
      unint64_t v36 = v67;
      unint64_t v34 = (unint64_t)v68;
      unint64_t v35 = (unint64_t)v42;
      uint64_t v33 = v72[0];
    }
    ++v32;
    *(void *)(v33 + 16) = v40 + 1;
    uint64_t v41 = v33 + 16 * v40;
    *(void *)(v41 + 32) = v38;
    *(void *)(v41 + 40) = v37;
  }
  while (v32 != 6);
  v71[0] = v33;
  v72[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1001DE058(0, 1, 0);
  uint64_t v43 = v72[0];
  unint64_t v45 = *(void *)(v72[0] + 16);
  unint64_t v44 = *(void *)(v72[0] + 24);
  if (v45 >= v44 >> 1)
  {
    sub_1001DE058(v44 > 1, v45 + 1, 1);
    uint64_t v43 = v72[0];
  }
  *(void *)(v43 + 16) = v45 + 1;
  uint64_t v46 = v43 + 16 * v45;
  *(void *)(v46 + 32) = 0x49746E756F636361;
  *(void *)(v46 + 40) = 0xE900000000000044;
  v71[1] = v43;
  v72[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v47 = swift_bridgeObjectRetain();
  sub_100201B10(v47);
  uint64_t v48 = swift_bridgeObjectRetain();
  sub_100201B10(v48);
  sub_100094134((uint64_t *)&unk_10090AFB0);
  swift_arrayDestroy();
  uint64_t v49 = sub_10012674C(v72[0]);
  swift_bridgeObjectRelease();
  unint64_t v50 = v74;
  if ((v7 & 0xC000000000000001) == 0)
  {
    uint64_t v55 = v61;
    uint64_t v56 = sub_10013AFBC(v7, v49);
    if (!v55)
    {
      uint64_t v54 = v56;
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
LABEL_55:
    swift_bridgeObjectRetain();
    __break(1u);
    JUMPOUT(0x100666268);
  }
  if (v7 < 0) {
    uint64_t v51 = v7;
  }
  else {
    uint64_t v51 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v52 = v61;
  Swift::Int v53 = sub_100666E20(v51, v49);
  if (v52)
  {
LABEL_54:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v54 = v53;
  swift_bridgeObjectRelease();
LABEL_52:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v58 = *(void **)(v62 + 32);
  uint64_t v57 = *(void *)(v62 + 40);
  v72[0] = 0xD00000000000003ALL;
  v72[1] = 0x80000001007DB360;
  type metadata accessor for CDIngestionCoordinator();
  v72[3] = 0;
  v73[0] = 0;
  v72[2] = 0;
  *(void *)((char *)v73 + 6) = 0;
  uint64_t v59 = swift_allocObject();
  swift_getObjectType();
  swift_unknownObjectRetain();
  sub_100384798(v54, v57, v58, (uint64_t)v72, 0, 0, v59);
  sub_1006A2A74(v50, v63);
  sub_1003838FC();
  return swift_release();
}

void sub_100666280(id *a1)
{
  id v1 = [*a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_1006662D8(unint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v44 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100666B5C(*(void **)(v1 + 16));
  if (v2) {
    return;
  }
  Swift::Int v7 = (void *)v6;
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  unint64_t v46 = inited;
  specialized Array._endMutation()();
  uint64_t v9 = (void *)sub_1003BC91C(v46, 0, 0, (uint64_t)v7);
  type metadata accessor for REMCDDueDateDeltaAlert();
  unint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  swift_bridgeObjectRelease();

  if (v10 >> 62) {
    goto LABEL_25;
  }
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (unint64_t i = v10; v11; unint64_t i = v10)
  {
    unint64_t v41 = v10 & 0xC000000000000001;
    uint64_t v37 = v38 + 16;
    unint64_t v39 = (void (**)(uint64_t, uint64_t))(v38 + 8);
    unint64_t v10 = (unint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v12 = 4;
    unint64_t v40 = a1;
    while (1)
    {
      id v16 = v41 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(i + 8 * v12);
      id v17 = v16;
      a1 = v12 - 3;
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      uint64_t v18 = v3;
      uint64_t v3 = v11;
      id v19 = [v16 identifier:v37];
      uint64_t v20 = v44;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v46 = v10;
      unint64_t v23 = sub_100306EC4(v20);
      uint64_t v24 = *(void *)(v10 + 16);
      BOOL v25 = (v22 & 1) == 0;
      uint64_t v26 = v24 + v25;
      if (__OFADD__(v24, v25)) {
        goto LABEL_23;
      }
      char v27 = v22;
      if (*(void *)(v10 + 24) >= v26)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          unint64_t v10 = v46;
          if (v22) {
            goto LABEL_5;
          }
        }
        else
        {
          sub_10031D7A0();
          unint64_t v10 = v46;
          if (v27) {
            goto LABEL_5;
          }
        }
      }
      else
      {
        sub_1003174D4(v26, isUniquelyReferenced_nonNull_native);
        unint64_t v28 = sub_100306EC4(v44);
        if ((v27 & 1) != (v29 & 1)) {
          goto LABEL_39;
        }
        unint64_t v23 = v28;
        unint64_t v10 = v46;
        if (v27)
        {
LABEL_5:
          uint64_t v13 = *(void *)(v10 + 56);
          uint64_t v14 = 8 * v23;

          *(void *)(v13 + v14) = v17;
          goto LABEL_6;
        }
      }
      *(void *)(v10 + 8 * (v23 >> 6) + 64) |= 1 << v23;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 16))(*(void *)(v10 + 48) + *(void *)(v38 + 72) * v23, v44, v43);
      *(void *)(*(void *)(v10 + 56) + 8 * v23) = v17;
      uint64_t v30 = *(void *)(v10 + 16);
      BOOL v31 = __OFADD__(v30, 1);
      uint64_t v32 = v30 + 1;
      if (v31) {
        goto LABEL_24;
      }
      *(void *)(v10 + 16) = v32;
LABEL_6:
      swift_bridgeObjectRelease();
      (*v39)(v44, v43);
      ++v12;
      uint64_t v11 = v3;
      BOOL v15 = a1 == v3;
      a1 = v40;
      uint64_t v3 = v18;
      if (v15) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain_n();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  unint64_t v10 = (unint64_t)_swiftEmptyDictionarySingleton;
LABEL_27:
  swift_bridgeObjectRelease_n();
  unint64_t v46 = 1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    if (v33) {
      goto LABEL_29;
    }
LABEL_36:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v33 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v33) {
    goto LABEL_36;
  }
LABEL_29:
  if (v33 >= 1)
  {
    uint64_t v34 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v35 = *(id *)(a1 + 8 * v34 + 32);
      }
      unint64_t v36 = v35;
      ++v34;
      unint64_t v45 = v35;
      sub_100666770(&v45, v10, &v46);
    }
    while (v33 != v34);
    goto LABEL_36;
  }
  __break(1u);
LABEL_39:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_100666770(void **a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v11 = __chkstk_darwin(v10).n128_u64[0];
  uint64_t v13 = (char *)v30 - v12;
  uint64_t v14 = *a1;
  id v15 = [v14 identifier:v11];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(a2 + 16) && (unint64_t v16 = sub_100306EC4((uint64_t)v13), (v17 & 1) != 0))
  {
    uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    id v19 = *(id *)(*(void *)(a2 + 56) + 8 * v16);
    v18(v13, v6);
    [v19 setSortOrder:*a3];

    if (__OFADD__(*a3, 1)) {
      __break(1u);
    }
    else {
      ++*a3;
    }
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    v20(v13, v6);
    if (qword_100907AF0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_100920AE0);
    id v22 = v14;
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      BOOL v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v34 = v32;
      v30[0] = v20;
      *(_DWORD *)BOOL v25 = 136315138;
      v30[1] = v25 + 4;
      BOOL v31 = v25;
      id v26 = [v22 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1003A006C((unint64_t *)&qword_10090FC50);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v29 = v28;
      ((void (*)(char *, uint64_t))v30[0])(v9, v6);
      uint64_t v33 = sub_1000C51B8(v27, v29, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "DueDateDeltaAlertsDataCDIngestionCoordinator.applySortOrder: No CD alert found for alert identifier %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_100666AF4()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

void sub_100666B44()
{
}

uint64_t sub_100666B5C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)&double v9 = __chkstk_darwin(v7).n128_u64[0];
  double v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [a1 identifier:v9];
  if (v12)
  {
    uint64_t v13 = v12;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  Optional.tryUnwrap(_:file:line:)();
  sub_1001260DC((uint64_t)v6);
  if (!v1)
  {
    sub_100094134(&qword_10090DC40);
    unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_100776E40;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 16))(v15 + v14, v11, v7);
    uint64_t v2 = sub_1001BB358(v15, 129);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  return v2;
}

unint64_t sub_100666DC4()
{
  unint64_t result = qword_100920C10;
  if (!qword_100920C10)
  {
    sub_100096058((uint64_t *)&unk_10090FFC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100920C10);
  }
  return result;
}

Swift::Int sub_100666E20(uint64_t a1, uint64_t a2)
{
  if (__CocoaDictionary.count.getter())
  {
    sub_100094134(&qword_10090C018);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }
  id v19 = v3;
  __CocoaDictionary.makeIterator()();
  swift_unknownObjectRetain();
  uint64_t v4 = __CocoaDictionary.Iterator.next()();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    do
    {
      swift_dynamicCast();
      sub_1000963CC(0, (unint64_t *)&unk_100920C30);
      swift_dynamicCast();
      swift_bridgeObjectRetain();

      uint64_t v3 = v19;
      unint64_t v13 = v19[2];
      if (v19[3] <= v13)
      {
        sub_100310F2C(v13 + 1, 1);
        uint64_t v3 = v19;
      }
      Swift::Int result = NSObject._rawHashValue(seed:)(v3[5]);
      uint64_t v7 = v3 + 8;
      uint64_t v8 = -1 << *((unsigned char *)v3 + 32);
      unint64_t v9 = result & ~v8;
      unint64_t v10 = v9 >> 6;
      if (((-1 << v9) & ~v3[(v9 >> 6) + 8]) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v9) & ~v3[(v9 >> 6) + 8])) | v9 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v14 = 0;
        unint64_t v15 = (unint64_t)(63 - v8) >> 6;
        do
        {
          if (++v10 == v15 && (v14 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          BOOL v16 = v10 == v15;
          if (v10 == v15) {
            unint64_t v10 = 0;
          }
          v14 |= v16;
          uint64_t v17 = v7[v10];
        }
        while (v17 == -1);
        unint64_t v11 = __clz(__rbit64(~v17)) + (v10 << 6);
      }
      *(void *)((char *)v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = 8 * v11;
      *(void *)(v3[6] + v12) = v18;
      *(void *)(v3[7] + v12) = a2;
      ++v3[2];
      uint64_t v5 = (void *)__CocoaDictionary.Iterator.next()();
    }
    while (v5);
  }
  swift_release();
  return (Swift::Int)v3;
}

void sub_100667088(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaDictionary.makeIterator()();
    unint64_t v17 = 0;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v1 = v2 | 0x8000000000000000;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    unint64_t v17 = a1 + 64;
    uint64_t v3 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 64);
  }
  uint64_t v8 = 0;
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  while ((v1 & 0x8000000000000000) != 0)
  {
    if (!__CocoaDictionary.Iterator.next()()) {
      goto LABEL_35;
    }
    swift_unknownObjectRelease();
    sub_1000963CC(0, &qword_1009168E0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v13 = v18;
    swift_unknownObjectRelease();
    uint64_t v12 = v8;
    uint64_t v10 = v4;
    if (!v18) {
      goto LABEL_35;
    }
LABEL_33:
    if ([v13 isOverdue])
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
    uint64_t v8 = v12;
    unint64_t v4 = v10;
  }
  if (v4)
  {
    uint64_t v10 = (v4 - 1) & v4;
    unint64_t v11 = __clz(__rbit64(v4)) | (v8 << 6);
    uint64_t v12 = v8;
LABEL_32:
    id v13 = *(id *)(*(void *)(v1 + 56) + 8 * v11);
    if (!v13) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  int64_t v14 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v14 >= v9) {
      goto LABEL_35;
    }
    unint64_t v15 = *(void *)(v17 + 8 * v14);
    uint64_t v12 = v8 + 1;
    if (!v15)
    {
      uint64_t v12 = v8 + 2;
      if (v8 + 2 >= v9) {
        goto LABEL_35;
      }
      unint64_t v15 = *(void *)(v17 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v8 + 3;
        if (v8 + 3 >= v9) {
          goto LABEL_35;
        }
        unint64_t v15 = *(void *)(v17 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v8 + 4;
          if (v8 + 4 >= v9) {
            goto LABEL_35;
          }
          unint64_t v15 = *(void *)(v17 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v8 + 5;
            if (v8 + 5 >= v9) {
              goto LABEL_35;
            }
            unint64_t v15 = *(void *)(v17 + 8 * v12);
            if (!v15)
            {
              uint64_t v16 = v8 + 6;
              while (v9 != v16)
              {
                unint64_t v15 = *(void *)(v17 + 8 * v16++);
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_1000C1AF8();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_100667340()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100920C50);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100920C50);
  if (qword_1009077D8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100667408()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090A4B0);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_storeControllerObservationToken;
  swift_beginAccess();
  sub_1000BF710(v9, (uint64_t)v4, (uint64_t *)&unk_10090A4B0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_10090A4B0);
  }
  else
  {
    sub_1000E5318((uint64_t)v4, (uint64_t)v8);
    uint64_t v10 = *(void *)(v1 + 72);
    unint64_t v11 = *(os_unfair_lock_s **)(v10 + 40);
    os_unfair_lock_lock(v11);
    __chkstk_darwin(v12);
    *(void *)&v16[-16] = v8;
    swift_beginAccess();
    uint64_t result = sub_1001EC244((uint64_t (*)(unint64_t))sub_1000E537C);
    uint64_t v14 = *(void *)(*(void *)(v10 + 48) + 16);
    if (v14 < result)
    {
      __break(1u);
      return result;
    }
    sub_1001ECEB0(result, v14);
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    sub_100094178((uint64_t)v8);
  }
  uint64_t v15 = OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_lastDismissedDateDidChangeExternally;
  if (*(void *)(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_lastDismissedDateDidChangeExternally))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  *(void *)(v1 + v15) = 0;
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v1 + 80);

  swift_release();
  sub_1000966BC(v9, (uint64_t *)&unk_10090A4B0);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  sub_1000966BC(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate, (uint64_t *)&unk_100909A40);
  return v1;
}

uint64_t sub_1006676F0()
{
  sub_100667408();

  return swift_deallocClassInstance();
}

uint64_t sub_100667748()
{
  return type metadata accessor for RDTodayNotificationEngine();
}

uint64_t type metadata accessor for RDTodayNotificationEngine()
{
  uint64_t result = qword_100920CC0;
  if (!qword_100920CC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10066779C()
{
  sub_100674A38(319, (unint64_t *)&qword_10090A170, (void (*)(uint64_t))type metadata accessor for RDStoreControllerNotificationCenter.Token);
  if (v0 <= 0x3F)
  {
    sub_100674A38(319, (unint64_t *)&qword_100909F30, (void (*)(uint64_t))&type metadata accessor for Date);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1006678EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090A4B0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v91 - v6;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v8 - 8);
  int v102 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = sub_100094134(&qword_100920F10);
  uint64_t v104 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v103 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v11 = __chkstk_darwin(v99);
  id v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v91 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (uint64_t *)((char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *(void **)(v0 + 16);
  void *v19 = v20;
  uint64_t v22 = v17 + 104;
  uint64_t v21 = *(void (**)(void))(v17 + 104);
  unsigned int v108 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v107 = (void (*)(void *, void, uint64_t))v21;
  v21(v19);
  id v101 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  os_log_type_t v24 = *(void (**)(void *, uint64_t))(v17 + 8);
  uint64_t v23 = v17 + 8;
  unint64_t v106 = v24;
  v24(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v100 = v22;
  uint64_t v25 = OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_started;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_started))
  {
    if (qword_100907AF8 == -1)
    {
LABEL_4:
      uint64_t v26 = type metadata accessor for Logger();
      sub_10008E2DC(v26, (uint64_t)qword_100920C50);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v27, v28))
      {
        unint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDTodayNotificationEngine.start() must be called exactly once", v29, 2u);
        swift_slowDealloc();
      }

      return;
    }
LABEL_19:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v96 = v16;
  uint64_t v97 = v7;
  uint64_t v98 = v5;
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_10008E2DC(v30, (uint64_t)qword_100920C50);
  BOOL v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Starting RDTodayNotificationEngine", v33, 2u);
    swift_slowDealloc();
  }

  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    unint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "os_transaction INIT {name: com.apple.remindd.todayEngine.start}", v36, 2u);
    swift_slowDealloc();
  }
  uint64_t v95 = v23;

  uint64_t v94 = os_transaction_create();
  *(unsigned char *)(v1 + v25) = 1;
  swift_beginAccess();
  sub_100096838(v1 + 80, (uint64_t)&v116);
  uint64_t v37 = v117;
  uint64_t v38 = v118;
  sub_1000C0DE0(&v116, v117);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v38);
  uint64_t v39 = v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
  swift_beginAccess();
  sub_100372050((uint64_t)v15, v39);
  swift_endAccess();
  uint64_t v92 = v15;
  sub_1000BF710((uint64_t)v15, (uint64_t)v13, (uint64_t *)&unk_100909A40);
  unint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  BOOL v42 = os_log_type_enabled(v40, v41);
  long long v93 = v19;
  if (v42)
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v44 = Optional.descriptionOrNil.getter();
    id v115 = (id)sub_1000C51B8(v44, v45, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909A40);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "RDTodayNotificationEngine: bootstrapping cachedLastDismissedDate from RDSynchronizedDismissedTodayNotificationStates {value: %s}", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909A40);
  }

  sub_10067002C(0x61727473746F6F62, 0xE900000000000070);
  uint64_t v46 = v117;
  uint64_t v47 = v118;
  sub_1000C0DE0(&v116, v117);
  uint64_t aBlock = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 32))(v46, v47);
  uint64_t v48 = v101;
  id v115 = v101;
  uint64_t v49 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v50 = (uint64_t)v102;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v102, 1, 1, v49);
  id v101 = v48;
  sub_100094134(&qword_10091DFD8);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1000967F4(&qword_10091DFE0, &qword_10091DFD8);
  sub_1000E4F40((unint64_t *)&qword_10090D990, (unint64_t *)&qword_10090F370);
  uint64_t v51 = v103;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v50, (uint64_t *)&unk_1009081C0);

  swift_release();
  type metadata accessor for RDTodayNotificationEngine();
  sub_1000967F4(&qword_100920F18, &qword_100920F10);
  uint64_t v52 = v105;
  uint64_t v53 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  (*(void (**)(char *, uint64_t))(v104 + 8))(v51, v52);
  *(void *)(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_lastDismissedDateDidChangeExternally) = v53;
  swift_release();
  uint64_t v54 = *(void *)(v1 + 32);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v56 = swift_allocObject();
  swift_weakInit();
  uint64_t v57 = *(void *)(v54 + 8);
  uint64_t v58 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v57 + 16);
  swift_retain();
  v58(sub_100678C20, v56, ObjectType, v57);
  swift_release();
  uint64_t v59 = self;
  id v60 = [v59 daemonUserDefaults];
  uint64_t v61 = swift_allocObject();
  swift_weakInit();
  uint64_t v113 = sub_100678C28;
  uint64_t v114 = v61;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v110 = 1107296256;
  uint64_t v111 = sub_1006693E0;
  uint64_t v112 = &unk_1008CEFB0;
  uint64_t v62 = _Block_copy(&aBlock);
  swift_release();
  id v63 = [v60 streamTodayNotificationFireTime:v62];
  _Block_release(v62);

  *(void *)(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_todayNotificationTimeObserver) = v63;
  swift_unknownObjectRelease();
  uint64_t v64 = *(void *)(v1 + 48);
  uint64_t v65 = swift_getObjectType();
  uint64_t v66 = swift_allocObject();
  swift_weakInit();
  unint64_t v67 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v64 + 16);
  swift_retain();
  v67(sub_100678C30, v66, v65, v64);
  swift_release();
  id v68 = [v59 daemonUserDefaults];
  uint64_t v69 = swift_allocObject();
  swift_weakInit();
  uint64_t v113 = sub_100678C38;
  uint64_t v114 = v69;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v110 = 1107296256;
  uint64_t v111 = sub_10066A158;
  uint64_t v112 = &unk_1008CEFD8;
  long long v70 = _Block_copy(&aBlock);
  swift_release();
  id v71 = [v68 streamShouldIncludeRemindersDueTodayInBadgeCount:v70];
  _Block_release(v70);

  *(void *)(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_badgeCountCriteriaObserver) = v71;
  swift_unknownObjectRelease();
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  id v73 = [self cdEntityName];
  uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v76 = v75;

  *(void *)(inited + 32) = v74;
  *(void *)(inited + 40) = v76;
  Swift::Int v77 = sub_10032D9A0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v78 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  uint64_t v79 = (uint64_t)v97;
  id v80 = v101;
  sub_100401C48(v77, v101, (uint64_t)sub_100678C40, v78, (uint64_t)v97);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v81 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v79, 0, 1, v81);
  uint64_t v82 = v79;
  uint64_t v83 = (uint64_t)v98;
  sub_100096408(v82, (uint64_t)v98, (uint64_t *)&unk_10090A4B0);
  uint64_t v84 = v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_storeControllerObservationToken;
  swift_beginAccess();
  sub_1000B1CB4(v83, v84, (uint64_t *)&unk_10090A4B0);
  swift_endAccess();
  uint64_t v85 = swift_allocObject();
  *(void *)(v85 + 16) = v94;
  uint64_t v86 = v80;
  id v87 = v93;
  *long long v93 = v86;
  uint64_t v88 = v96;
  v107(v87, v108, v96);
  id v89 = v86;
  swift_unknownObjectRetain();
  LOBYTE(v86) = _dispatchPreconditionTest(_:)();
  v106(v87, v88);
  if (v86)
  {
    uint64_t v90 = swift_allocObject();
    *(void *)(v90 + 16) = sub_100678C48;
    *(void *)(v90 + 24) = v85;
    swift_retain();
    sub_1006738C0((void (*)(void))sub_100678C70, v90);
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    sub_1000966BC((uint64_t)v92, (uint64_t *)&unk_100909A40);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v116);
  }
  else
  {
    __break(1u);
  }
}

void sub_1006687B4()
{
}

void sub_1006687D8()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    if (qword_100907AF8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_100920C50);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "todayNotification XPC Event triggered", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "os_transaction INIT {name: com.apple.remindd.todayEngine.bannerTimeEventStream}", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v13 = os_transaction_create();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = *(void **)(v5 + 16);
    void *v3 = v15;
    (*(void (**)(void *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
    swift_unknownObjectRetain();
    id v16 = v15;
    LOBYTE(v15) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v1 + 8))(v3, v0);
    if (v15)
    {
      uint64_t v17 = (void *)swift_allocObject();
      void v17[2] = v5;
      v17[3] = sub_100678DA8;
      void v17[4] = v14;
      swift_retain();
      swift_retain();
      sub_10066B000((uint64_t (*)(void))sub_100678D6C, (uint64_t)v17);
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      return;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (qword_100907AF8 != -1) {
LABEL_15:
  }
    swift_once();
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_100920C50);
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Received RDTimeEventHandler event on deallocated RDTodayNotificationEngine", v21, 2u);
    swift_slowDealloc();
  }
}

void sub_100668B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v41 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v39 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v37 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100911810);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v35 - v11;
  uint64_t v13 = a2 + 16;
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_10008E2DC(v14, (uint64_t)qword_100920C50);
  sub_1000BF710(a1, (uint64_t)v12, (uint64_t *)&unk_100911810);
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v35[0] = v15;
    v35[1] = v13;
    uint64_t v36 = v4;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    sub_1000BF710((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_100911810);
    uint64_t v19 = type metadata accessor for DateComponents();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1, v19) == 1)
    {
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100911810);
      unint64_t v21 = 0xE300000000000000;
      uint64_t v22 = 7104878;
    }
    else
    {
      uint64_t v22 = DateComponents.description.getter();
      unint64_t v21 = v23;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v19);
    }
    void aBlock[6] = sub_1000C51B8(v22, v21, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100911810);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "streamTodayNotificationFireTime: %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v4 = v36;
  }
  else
  {
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100911810);
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v25 = Logger.logObject.getter();
  if (Strong)
  {
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "os_transaction INIT {name: com.apple.remindd.todayEngine.todayNotificationTimeObserver}", v27, 2u);
      swift_slowDealloc();
    }

    uint64_t v28 = os_transaction_create();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = Strong;
    *(void *)(v29 + 24) = v28;
    aBlock[4] = (uint64_t)sub_100678D74;
    aBlock[5] = v29;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100236C78;
    uint64_t aBlock[3] = (uint64_t)&unk_1008CF208;
    uint64_t v30 = _Block_copy(aBlock);
    swift_retain();
    swift_unknownObjectRetain();
    BOOL v31 = v37;
    static DispatchQoS.unspecified.getter();
    BOOL v42 = &_swiftEmptyArrayStorage;
    sub_100517304((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    os_log_type_t v32 = v39;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v30);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v4);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v31, v40);
    swift_release();
    swift_release();
  }
  else
  {
    os_log_type_t v33 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v33, "Received streamTodayNotificationFireTime callback on deallocated RDTodayNotificationEngine", v34, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100669238(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  uint64_t v9 = *(void **)(a1 + 16);
  void *v7 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  swift_unknownObjectRetain();
  id v10 = v9;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (a2)
  {
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = a1;
    v12[3] = sub_100678D7C;
    v12[4] = v8;
    swift_retain();
    swift_retain();
    sub_10066B000((uint64_t (*)(void))sub_100678D6C, (uint64_t)v12);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006693E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void (**)(char *))(a1 + 32);
  if (a2)
  {
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = type metadata accessor for DateComponents();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 0, 1, v8);
  }
  else
  {
    uint64_t v9 = type metadata accessor for DateComponents();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  }
  swift_retain();
  v7(v6);
  swift_release();
  return sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100911810);
}

void sub_10066950C()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    if (qword_100907AF8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_100920C50);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "todayNotificationBadge event triggered", v9, 2u);
      swift_slowDealloc();
    }

    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "os_transaction INIT {name: com.apple.remindd.todayEngine.badgeEventStream}", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v13 = os_transaction_create();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v5;
    *(void *)(v14 + 24) = v13;
    uint64_t v15 = *(void **)(v5 + 16);
    void *v3 = v15;
    (*(void (**)(void *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
    swift_retain();
    swift_unknownObjectRetain();
    id v16 = v15;
    LOBYTE(v15) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v1 + 8))(v3, v0);
    if (v15)
    {
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = sub_100678CF4;
      *(void *)(v17 + 24) = v14;
      swift_retain();
      sub_1006738C0((void (*)(void))sub_100678C70, v17);
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      return;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (qword_100907AF8 != -1) {
LABEL_15:
  }
    swift_once();
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_100920C50);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Received RDTimeEventHandler event on deallocated RDTodayNotificationEngine", v21, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1006698CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  uint64_t v9 = *(void **)(a1 + 16);
  void *v7 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  swift_unknownObjectRetain();
  id v10 = v9;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (a2)
  {
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = a1;
    v12[3] = sub_100678D40;
    v12[4] = v8;
    swift_retain();
    swift_retain();
    sub_10066B000((uint64_t (*)(void))sub_100678D6C, (uint64_t)v12);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100669A74()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v25 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v23 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100920C50);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v22 = v1;
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v8 = Bool.yesno.getter();
    void aBlock[6] = sub_1000C51B8(v8, v9, aBlock);
    uint64_t v1 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "includeToday: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  os_log_type_t v11 = Logger.logObject.getter();
  if (Strong)
  {
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "os_transaction INIT {name: com.apple.remindd.todayEngine.streamBadgeCountCriteriaObserver}", v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v14 = os_transaction_create();
    uint64_t v22 = *(void *)(Strong + 16);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = Strong;
    *(void *)(v15 + 24) = v14;
    aBlock[4] = (uint64_t)sub_100678C88;
    aBlock[5] = v15;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100236C78;
    uint64_t aBlock[3] = (uint64_t)&unk_1008CF0C8;
    id v16 = _Block_copy(aBlock);
    swift_retain();
    swift_unknownObjectRetain();
    uint64_t v17 = v23;
    static DispatchQoS.unspecified.getter();
    uint64_t v27 = &_swiftEmptyArrayStorage;
    sub_100517304((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    uint64_t v18 = v25;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v18, v0);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v26);
    swift_release();
    swift_release();
  }
  else
  {
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v19))
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v19, "Received streamBadgeCountCriteria callback on deallocated RDTodayNotificationEngine", v20, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100669FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  unint64_t v9 = *(void **)(a1 + 16);
  void *v7 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  swift_unknownObjectRetain();
  id v10 = v9;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (a2)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = sub_100678CC8;
    *(void *)(v12 + 24) = v8;
    swift_retain();
    sub_1006738C0((void (*)(void))sub_100678C70, v12);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10066A158(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void sub_10066A1AC()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    if (qword_100907AF8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_100920C50);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "os_transaction INIT {name: com.apple.remindd.todayEngine.storeControllerChange}", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = os_transaction_create();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v5;
    *(void *)(v11 + 24) = v10;
    uint64_t v12 = *(void **)(v5 + 16);
    void *v3 = v12;
    (*(void (**)(void *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
    swift_retain();
    swift_unknownObjectRetain();
    id v13 = v12;
    LOBYTE(v12) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v1 + 8))(v3, v0);
    if (v12)
    {
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = sub_100678C78;
      *(void *)(v14 + 24) = v11;
      swift_retain();
      sub_1006738C0((void (*)(void))sub_100678C70, v14);
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      return;
    }
    __break(1u);
    goto LABEL_13;
  }
  if (qword_100907AF8 != -1) {
LABEL_13:
  }
    swift_once();
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_100920C50);
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received storeController changed notification after RDTodayNotificationEngine was deallocated", v18, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10066A500(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(a1 + 16);
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  swift_unknownObjectRetain_n();
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    sub_100671798();
    if (qword_100907AF8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_100920C50);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "os_transaction RELEASE {name: com.apple.remindd.todayEngine.storeControllerChange}", v11, 2u);
    swift_slowDealloc();
  }

  return swift_unknownObjectRelease_n();
}

void sub_10066A6E0(uint64_t a1, const char *a2)
{
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_100920C50);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, a2, v5, 2u);
    swift_slowDealloc();
  }
}

void sub_10066A7D0()
{
  uint64_t v1 = v0;
  uint64_t v63 = type metadata accessor for Date();
  uint64_t v64 = *(void *)(v63 - 8);
  uint64_t v2 = __chkstk_darwin(v63);
  uint64_t v59 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v55 - v4;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v58 = (uint64_t)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v61 = (uint64_t)&v55 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v55 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v55 - v14;
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_10008E2DC(v16, (uint64_t)qword_100920C50);
  swift_retain_n();
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v65 = v0;
  uint64_t v62 = v15;
  id v60 = v5;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    v66[0] = v56;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v57 = v20 + 4;
    swift_beginAccess();
    sub_100096838(v0 + 80, (uint64_t)v67);
    uint64_t v21 = v68;
    uint64_t v22 = v69;
    sub_1000C0DE0(v67, v68);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v67);
    uint64_t v23 = Optional.descriptionOrNil.getter();
    unint64_t v25 = v24;
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909A40);
    v67[0] = sub_1000C51B8(v23, v25, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v26 = v65 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
    swift_beginAccess();
    sub_1000BF710(v26, (uint64_t)v15, (uint64_t *)&unk_100909A40);
    uint64_t v27 = Optional.descriptionOrNil.getter();
    unint64_t v29 = v28;
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909A40);
    v67[0] = sub_1000C51B8(v27, v29, v66);
    uint64_t v1 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDTodayNotificationEngine: received RDSynchronizedDismissedTodayNotificationStates.lastDismissedDateDidChangeExternally {remoteValue: %s, localValue: %s}", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v30 = v1 + 80;
  swift_beginAccess();
  sub_100096838(v1 + 80, (uint64_t)v67);
  uint64_t v31 = v68;
  uint64_t v32 = v69;
  sub_1000C0DE0(v67, v68);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
  uint64_t v33 = v64;
  uint64_t v34 = v1;
  os_log_type_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
  uint64_t v36 = v63;
  if (v35(v13, 1, v63) == 1)
  {
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909A40);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v67);
LABEL_10:
    uint64_t v41 = (uint64_t)v62;
    sub_100096838(v30, (uint64_t)v67);
    uint64_t v42 = v68;
    uint64_t v43 = v69;
    sub_1000C0DE0(v67, v68);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v43);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v67);
    uint64_t v44 = v65 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
    swift_beginAccess();
    sub_1000B1CB4(v41, v44, (uint64_t *)&unk_100909A40);
    swift_endAccess();
LABEL_11:
    sub_10067002C(0xD000000000000024, 0x80000001007DB5C0);
    return;
  }
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  uint64_t v38 = v60;
  v37(v60, v13, v36);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v67);
  uint64_t v39 = v34 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
  swift_beginAccess();
  uint64_t v40 = v61;
  sub_1000BF710(v39, v61, (uint64_t *)&unk_100909A40);
  if (v35((char *)v40, 1, v36) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v36);
    sub_1000966BC(v40, (uint64_t *)&unk_100909A40);
    goto LABEL_10;
  }
  unint64_t v45 = v59;
  v37(v59, (char *)v40, v36);
  char v46 = static Date.< infix(_:_:)();
  uint64_t v47 = v38;
  uint64_t v48 = (uint64_t)v62;
  if (v46)
  {
    uint64_t v49 = v64;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v45, v36);
    v37((char *)v48, v38, v36);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v48, 0, 1, v36);
    uint64_t v50 = v58;
    sub_100096408(v48, v58, (uint64_t *)&unk_100909A40);
    swift_beginAccess();
    sub_1000B1CB4(v50, v39, (uint64_t *)&unk_100909A40);
    swift_endAccess();
    goto LABEL_11;
  }
  uint64_t v51 = v64;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v62, v45, v36);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v36);
  swift_beginAccess();
  uint64_t v53 = *(void *)(v65 + 104);
  uint64_t v52 = *(void *)(v65 + 112);
  sub_100096204(v30, v53);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v48, v53, v52);
  swift_endAccess();
  uint64_t v54 = *(void (**)(char *, uint64_t))(v51 + 8);
  v54(v45, v36);
  v54(v47, v36);
}

uint64_t sub_10066B000(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v295 = a2;
  v303 = a1;
  uint64_t v276 = sub_100094134((uint64_t *)&unk_100920EF0);
  uint64_t v271 = *(void *)(v276 - 8);
  __chkstk_darwin(v276);
  unsigned __int8 v287 = (void *)((char *)v258 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v269 = type metadata accessor for RDUserNotificationType();
  uint64_t v268 = *(void *)(v269 - 8);
  __chkstk_darwin(v269);
  v266 = (char *)v258 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v267 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v265 = *(void *)(v267 - 8);
  uint64_t v5 = __chkstk_darwin(v267);
  v261 = (char *)v258 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v260 = v6;
  __chkstk_darwin(v5);
  v264 = (char *)v258 - v7;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100916E70);
  __chkstk_darwin(v8 - 8);
  uint64_t v270 = (void **)((char *)v258 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v300 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  v302 = *(char **)(v300 - 8);
  __chkstk_darwin(v300);
  uint64_t v299 = (uint64_t)v258 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v308 = type metadata accessor for REMRemindersListDataView.DatesModel.Group();
  v310 = *(char **)(v308 - 8);
  uint64_t v11 = __chkstk_darwin(v308);
  v301 = (char *)v258 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  v311 = (char *)v258 - v14;
  __chkstk_darwin(v13);
  v307 = (void *)((char *)v258 - v15);
  uint64_t v294 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  long long v292 = *(char **)(v294 - 8);
  __chkstk_darwin(v294);
  id v286 = (char *)v258 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v297 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v290 = *(void *)(v297 - 8);
  __chkstk_darwin(v297);
  uint64_t v284 = (char *)v258 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v291 = (void (**)(char *, uint64_t))type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v285 = (uint64_t)*(v291 - 1);
  __chkstk_darwin(v291);
  uint64_t v282 = (char *)v258 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v275 = sub_100094134((uint64_t *)&unk_100920ED0);
  uint64_t v274 = *(void *)(v275 - 8);
  __chkstk_darwin(v275);
  uint64_t v283 = (char *)v258 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v273 = type metadata accessor for REMRemindersListDataView.DatesModel();
  uint64_t v272 = *(void *)(v273 - 8);
  __chkstk_darwin(v273);
  int v278 = (char *)v258 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  long long v293 = (char *)v258 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v26 = (unint64_t)v258 - v25;
  __chkstk_darwin(v24);
  unint64_t v28 = (char *)v258 - v27;
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v306 = *(void *)(v29 - 8);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v281 = (char *)v258 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v280 = (char *)v258 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v262 = (char *)v258 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  id v288 = (char *)v258 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v279 = (char *)v258 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v277 = (char *)v258 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v44 = (char *)v258 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  v298 = (char *)v258 - v46;
  uint64_t v263 = v47;
  __chkstk_darwin(v45);
  v309 = (char *)v258 - v48;
  uint64_t v49 = type metadata accessor for DispatchPredicate();
  uint64_t v50 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v52 = (void *)((char *)v258 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v296 = v2;
  uint64_t v53 = *(void **)(v2 + 16);
  void *v52 = v53;
  (*(void (**)(void *, void, uint64_t))(v50 + 104))(v52, enum case for DispatchPredicate.onQueue(_:), v49);
  id v54 = v53;
  char v55 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v50 + 8))(v52, v49);
  if ((v55 & 1) == 0) {
    goto LABEL_95;
  }
  id v259 = v54;
  if (qword_100907AF8 != -1) {
    goto LABEL_96;
  }
  while (1)
  {
    uint64_t v56 = type metadata accessor for Logger();
    id v304 = (id)sub_10008E2DC(v56, (uint64_t)qword_100920C50);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    uint64_t v59 = v29;
    if (os_log_type_enabled(v57, v58))
    {
      id v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "RDTodayNotificationEngine: started postTodayNotificationIfApplicable", v60, 2u);
      swift_slowDealloc();
    }

    uint64_t v61 = v309;
    static Date.now.getter();
    uint64_t v62 = v306;
    uint64_t v63 = v306 + 16;
    long long v289 = *(void (**)(unint64_t, char *, uint64_t))(v306 + 16);
    v289(v26, v61, v59);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v62 + 56))(v26, 0, 1, v59);
    sub_10066DA7C(v26, (uint64_t)v28);
    sub_1000966BC(v26, (uint64_t *)&unk_100909A40);
    uint64_t v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
    if (v64(v28, 1, v59) == 1)
    {
      sub_1000966BC((uint64_t)v28, (uint64_t *)&unk_100909A40);
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v65, v66))
      {
        unint64_t v67 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v67 = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "Skipping postTodayNotificationIfApplicable because user has disabled today notification or there was error getting lastTodayNotificationFireDate", v67, 2u);
        swift_slowDealloc();
      }

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v61, v59);
      if (v303) {
        return v303(0);
      }
      return result;
    }
    v258[1] = v63;
    uint64_t v69 = v59;
    long long v70 = (char *)(v62 + 32);
    id v71 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    unint64_t v72 = v298;
    v71(v298, v28, v69);
    uint64_t v73 = v296 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
    swift_beginAccess();
    uint64_t v74 = v73;
    uint64_t v75 = v293;
    sub_1000BF710(v74, (uint64_t)v293, (uint64_t *)&unk_100909A40);
    unsigned int v76 = v64(v75, 1, v69);
    uint64_t v305 = v69;
    if (v76 == 1)
    {
      uint64_t v277 = (char *)v71;
      uint64_t v279 = (char *)(v62 + 32);
      sub_1000966BC((uint64_t)v75, (uint64_t *)&unk_100909A40);
      Swift::Int v77 = v72;
      uint64_t v78 = v69;
      uint64_t v79 = v306;
      uint64_t v80 = v297;
    }
    else
    {
      uint64_t v81 = v44;
      v71(v44, v75, v69);
      char v82 = static Date.< infix(_:_:)();
      Swift::Int v77 = v72;
      uint64_t v80 = v297;
      if (v82)
      {
        uint64_t v83 = v277;
        uint64_t v84 = (void (*)(char *, char *, uint64_t))v289;
        v289((unint64_t)v277, v72, v69);
        uint64_t v85 = v279;
        v84(v279, v44, v69);
        uint64_t v86 = Logger.logObject.getter();
        os_log_type_t v87 = static os_log_type_t.default.getter();
        int v88 = v87;
        if (os_log_type_enabled(v86, v87))
        {
          uint64_t v89 = swift_slowAlloc();
          v311 = (char *)swift_slowAlloc();
          aBlock[0] = v311;
          *(_DWORD *)uint64_t v89 = 136446466;
          sub_100517304((unint64_t *)&qword_100908230, (void (*)(uint64_t))&type metadata accessor for Date);
          LODWORD(v308) = v88;
          uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
          double v312 = COERCE_DOUBLE(sub_1000C51B8(v90, v91, (uint64_t *)aBlock));
          v310 = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v92 = *(void (**)(char *, uint64_t))(v306 + 8);
          v92(v83, v305);
          *(_WORD *)(v89 + 12) = 2082;
          long long v93 = v279;
          uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter();
          double v312 = COERCE_DOUBLE(sub_1000C51B8(v94, v95, (uint64_t *)aBlock));
          uint64_t v96 = v305;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v92(v93, v96);
          _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v308, "Skipping postTodayNotificationIfApplicable because {lastTodayNotificationFireDate: %{public}s < lastDismissedDate: %{public}s}", (uint8_t *)v89, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v92(v310, v96);
          v92(v298, v96);
        }
        else
        {
          uint64_t v96 = v69;

          uint64_t v92 = *(void (**)(char *, uint64_t))(v306 + 8);
          v92(v85, v96);
          v92(v83, v96);
          v92(v44, v96);
          v92(v77, v96);
        }
        uint64_t v131 = v303;
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v92)(v309, v96);
        if (!v131) {
          return result;
        }
        return v131(0);
      }
      uint64_t v277 = (char *)v71;
      uint64_t v279 = v70;
      uint64_t v79 = v306;
      (*(void (**)(char *, uint64_t))(v306 + 8))(v81, v69);
      uint64_t v78 = v69;
    }
    uint64_t v97 = v309;
    Date.timeIntervalSince(_:)();
    double v99 = v98;
    sub_1000963CC(0, (unint64_t *)&qword_100920F00);
    static NSDateInterval.rem1Minute.getter();
    uint64_t v101 = v294;
    int v102 = v292;
    if (v99 >= v100)
    {
      double v118 = v100;
      unint64_t v119 = v280;
      Swift::Int v120 = (void (*)(char *, char *, uint64_t))v289;
      v289((unint64_t)v280, v77, v78);
      os_log_t v121 = v281;
      v120(v281, v97, v78);
      long long v122 = Logger.logObject.getter();
      os_log_type_t v123 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v122, v123))
      {
        uint64_t v124 = swift_slowAlloc();
        v311 = (char *)swift_slowAlloc();
        aBlock[0] = v311;
        *(_DWORD *)uint64_t v124 = 134349570;
        double v312 = v118;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v124 + 12) = 2082;
        uint64_t v125 = Date.description.getter();
        double v312 = COERCE_DOUBLE(sub_1000C51B8(v125, v126, (uint64_t *)aBlock));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v127 = *(void (**)(char *, uint64_t))(v79 + 8);
        v127(v119, v305);
        *(_WORD *)(v124 + 22) = 2082;
        uint64_t v128 = Date.description.getter();
        double v312 = COERCE_DOUBLE(sub_1000C51B8(v128, v129, (uint64_t *)aBlock));
        uint64_t v78 = v305;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v127(v121, v78);
        _os_log_impl((void *)&_mh_execute_header, v122, v123, "Current time is >%{public}fs after desired fire time. Not firing Today Notification {lastFireDate: %{public}s, now: %{public}s}", (uint8_t *)v124, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v130 = v298;
      }
      else
      {

        uint64_t v127 = *(void (**)(char *, uint64_t))(v79 + 8);
        v127(v121, v78);
        v127(v119, v78);
        unint64_t v130 = v77;
      }
      v127(v130, v78);
      uint64_t v131 = v303;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v127)(v309, v78);
      if (!v131) {
        return result;
      }
      return v131(0);
    }
    uint64_t v103 = *(char **)(v296 + 120);
    id v104 = objc_allocWithZone((Class)REMStore);
    uint64_t v281 = v103;
    uint64_t v105 = (char *)[v104 initWithDaemonController:v103];
    uint64_t v106 = v285;
    unint64_t v107 = v282;
    (*(void (**)(char *, void, void (**)(char *, uint64_t)))(v285 + 104))(v282, enum case for REMRemindersListDataView.SortingStyle.default(_:), v291);
    uint64_t v108 = v290;
    uint64_t v109 = v284;
    (*(void (**)(char *, void, uint64_t))(v290 + 104))(v284, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v80);
    uint64_t v110 = v286;
    (*((void (**)(char *, void, uint64_t))v102 + 13))(v286, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v101);
    uint64_t v111 = v283;
    static REMRemindersListDataView.fetchScheduled(store:sortingStyle:showCompleted:countCompleted:remindersPrefetch:alwaysIncludeTodayGroup:diffingAgainst:)();
    v258[0] = 0;
    uint64_t v280 = v105;
    (*((void (**)(char *, uint64_t))v102 + 1))(v110, v294);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v297);
    (*(void (**)(char *, void))(v106 + 8))(v107, v291);
    uint64_t v134 = v275;
    REMRemindersListDataView.Result.model.getter();
    (*(void (**)(char *, uint64_t))(v274 + 8))(v111, v134);
    uint64_t v135 = REMRemindersListDataView.DatesModel.groups.getter();
    unint64_t v28 = (char *)v135;
    aBlock[0] = &_swiftEmptyArrayStorage;
    uint64_t v297 = *(void *)(v135 + 16);
    if (!v297) {
      break;
    }
    unint64_t v26 = 0;
    uint64_t v294 = (uint64_t)(v310 + 16);
    long long v136 = (void (**)(char *, unint64_t *, uint64_t))(v310 + 32);
    long long v293 = v310 + 8;
    uint64_t v29 = v308;
    unint64_t v137 = v307;
    uint64_t v44 = v302;
    uint64_t v138 = v305;
    while (v26 < *((void *)v28 + 2))
    {
      unint64_t v139 = (v310[80] + 32) & ~(unint64_t)v310[80];
      uint64_t v140 = *((void *)v310 + 9);
      (*((void (**)(unint64_t *, char *, uint64_t))v310 + 2))(v137, &v28[v139 + v140 * v26], v29);
      uint64_t v141 = *(void *)(REMRemindersListDataView.DatesModel.Group.reminders.getter() + 16);
      swift_bridgeObjectRelease();
      if (v141)
      {
        unint64_t v142 = *v136;
        (*v136)(v311, v137, v29);
        uint64_t v143 = (char *)aBlock[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DEBE8(0, *((void *)v143 + 2) + 1, 1);
          uint64_t v143 = (char *)aBlock[0];
        }
        unint64_t v145 = *((void *)v143 + 2);
        unint64_t v144 = *((void *)v143 + 3);
        if (v145 >= v144 >> 1)
        {
          sub_1001DEBE8(v144 > 1, v145 + 1, 1);
          uint64_t v143 = (char *)aBlock[0];
        }
        *((void *)v143 + 2) = v145 + 1;
        uint64_t v29 = v308;
        v142(&v143[v139 + v145 * v140], (unint64_t *)v311, v308);
        aBlock[0] = v143;
        uint64_t v138 = v305;
        unint64_t v137 = v307;
      }
      else
      {
        (*(void (**)(unint64_t *, uint64_t))v293)(v137, v29);
      }
      if (v297 == ++v26)
      {
        uint64_t v146 = (char *)aBlock[0];
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    swift_once();
  }
  uint64_t v146 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v44 = v302;
  uint64_t v138 = v305;
LABEL_44:
  swift_bridgeObjectRelease();
  aBlock[0] = &_swiftEmptyArrayStorage;
  uint64_t v294 = *((void *)v146 + 2);
  if (v294)
  {
    long long v293 = (char *)*((void *)v310 + 2);
    long long v292 = &v146[(v310[80] + 32) & ~(unint64_t)v310[80]];
    uint64_t v147 = (void (**)(uint64_t, uint64_t))(v44 + 8);
    uint64_t v291 = (void (**)(char *, uint64_t))(v310 + 8);
    v310 += 16;
    uint64_t v290 = *((void *)v310 + 7);
    id v286 = v146;
    swift_retain();
    uint64_t v148 = 0;
    uint64_t v149 = v309;
    uint64_t v150 = v308;
    id v151 = v301;
    v311 = v44 + 16;
    do
    {
      v307 = (unint64_t *)v148;
      ((void (*)(char *, char *, uint64_t))v293)(v151, &v292[v290 * (void)v148], v150);
      uint64_t v153 = REMRemindersListDataView.DatesModel.Group.reminders.getter();
      uint64_t v154 = *(void *)(v153 + 16);
      if (v154)
      {
        double v312 = COERCE_DOUBLE(&_swiftEmptyArrayStorage);
        specialized ContiguousArray.reserveCapacity(_:)();
        unint64_t v155 = (v44[80] + 32) & ~(unint64_t)v44[80];
        uint64_t v297 = v153;
        unint64_t v156 = v153 + v155;
        uint64_t v157 = *((void *)v44 + 9);
        id v158 = (void (*)(uint64_t, unint64_t, uint64_t))*((void *)v44 + 2);
        uint64_t v159 = v300;
        uint64_t v160 = v299;
        do
        {
          v158(v160, v156, v159);
          REMRemindersListDataView.ReminderLite.objectID.getter();
          (*v147)(v160, v159);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v156 += v157;
          --v154;
        }
        while (v154);
        double v152 = v312;
        swift_bridgeObjectRelease();
        uint64_t v149 = v309;
        uint64_t v44 = v302;
        id v151 = v301;
      }
      else
      {
        swift_bridgeObjectRelease();
        double v152 = COERCE_DOUBLE(&_swiftEmptyArrayStorage);
      }
      uint64_t v148 = (char *)v307 + 1;
      uint64_t v150 = v308;
      (*v291)(v151, v308);
      sub_100201E6C(*(unint64_t *)&v152);
    }
    while (v148 != (char *)v294);
    swift_release_n();
    unint64_t v161 = (unint64_t)aBlock[0];
    uint64_t v138 = v305;
  }
  else
  {
    swift_release();
    unint64_t v161 = (unint64_t)&_swiftEmptyArrayStorage;
    uint64_t v149 = v309;
  }
  uint64_t v162 = v276;
  uint64_t v117 = v138;
  if (v161 >> 62)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  aBlock[0] = 0;
  id v164 = v280;
  id v165 = [v280 fetchRemindersWithObjectIDs:isa error:aBlock];

  id v166 = aBlock[0];
  if (v165)
  {
    sub_1000963CC(0, &qword_1009168E0);
    sub_1000E4F40((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
    uint64_t v167 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v168 = v166;

    __chkstk_darwin(v169);
    v258[-2] = v167;
    v258[-1] = v149;
    uint64_t v170 = sub_1003B5040((void (*)(id *))sub_10067885C, (uint64_t)&v258[-4], v161);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v171 = swift_bridgeObjectRetain();
    uint64_t v172 = sub_100677044(v171);
    swift_bridgeObjectRelease();
    v307 = v172;
    swift_bridgeObjectRetain();
    uint64_t v173 = Logger.logObject.getter();
    os_log_type_t v174 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v173, v174))
    {
      os_log_type_t v175 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v175 = 134217984;
      aBlock[0] = (id)v307[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v173, v174, "REMRemindersListDataView.fetchScheduled up to now fetched AllDay reminders. {count: %ld}", v175, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    unint64_t v178 = v307[2];
    if (v178)
    {
      unint64_t v179 = (*(unsigned __int8 *)(v271 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v271 + 80);
      uint64_t v180 = (uint64_t)v307 + v179;
      uint64_t v181 = *(void *)(v271 + 72);
      swift_bridgeObjectRetain();
      uint64_t v182 = (void **)v180;
      unint64_t v183 = v178;
      while ((sub_10066E834(*v182, (char *)v182 + *(int *)(v162 + 48), v149) & 1) == 0)
      {
        uint64_t v182 = (void **)((char *)v182 + v181);
        if (!--v183)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v184 = Logger.logObject.getter();
          os_log_type_t v185 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v184, v185)) {
            goto LABEL_71;
          }
          uint64_t v186 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v186 = 0;
          uint64_t v187 = "No all-day reminder whose lastBannerPresentationDate is before their own dueDate (at TodayNotificationF"
                 "ireTime). Not posting TodayNotification.";
          goto LABEL_69;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v193 = v170[2];
      if (v193)
      {
        uint64_t v194 = v270;
        sub_1000BF710((uint64_t)v170 + v179 + (v193 - 1) * v181, (uint64_t)v270, (uint64_t *)&unk_100920EF0);
        uint64_t v195 = 0;
      }
      else
      {
        uint64_t v195 = 1;
        uint64_t v194 = v270;
      }
      uint64_t v196 = v271;
      (*(void (**)(void **, uint64_t, uint64_t, uint64_t))(v271 + 56))(v194, v195, 1, v162);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v196 + 48))(v194, 1, v162) != 1)
      {
        uint64_t v200 = *v194;
        uint64_t v201 = (char *)v194 + *(int *)(v162 + 48);
        v310 = *(char **)(v306 + 8);
        v311 = (char *)(v306 + 8);
        ((void (*)(char *, uint64_t))v310)(v201, v305);
        id v202 = [v200 titleAsString];
        if (!v202) {
          id v202 = (id)_REMGetLocalizedString();
        }
        uint64_t v300 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v204 = v203;

        NSString v205 = (id)_REMGetLocalizedString();
        if (!v205)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v205 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        v302 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        v301 = v206;
        id v304 = v200;
        uint64_t v308 = v181;
        if (v193 < 2)
        {
          NSString v214 = v205;
          uint64_t v215 = v265;
          uint64_t v211 = v264;
          uint64_t v212 = v267;
          (*(void (**)(char *, void, uint64_t))(v265 + 104))(v264, enum case for RDUserNotificationCategory.todayNotificationForSingleReminder(_:), v267);
          id v216 = v200;
          uint64_t v217 = v266;
          REMNotificationIdentifier.init(reminder:)();
          (*(void (**)(char *, void, uint64_t))(v268 + 104))(v217, enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:), v269);
          id v218 = v216;
          id v213 = sub_10026D9CC(v216, 0, 0);

          uint64_t v210 = v215;
          NSString v205 = v214;
        }
        else
        {
          id v207 = (id)_REMGetLocalizedString();
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          sub_100094134((uint64_t *)&unk_10090A430);
          uint64_t v208 = swift_allocObject();
          *(_OWORD *)(v208 + 16) = xmmword_100776E80;
          *(void *)(v208 + 56) = &type metadata for String;
          unint64_t v209 = sub_1000C5B38();
          *(void *)(v208 + 32) = v300;
          *(void *)(v208 + 40) = v204;
          *(void *)(v208 + 96) = &type metadata for Int;
          *(void *)(v208 + 104) = &protocol witness table for Int;
          *(void *)(v208 + 64) = v209;
          *(void *)(v208 + 72) = v193 - 1;
          static String.localizedStringWithFormat(_:_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v210 = v265;
          uint64_t v211 = v264;
          uint64_t v212 = v267;
          (*(void (**)(char *, void, uint64_t))(v265 + 104))(v264, enum case for RDUserNotificationCategory.todayNotification(_:), v267);
          (*(void (**)(char *, void, uint64_t))(v268 + 104))(v266, enum case for RDUserNotificationType.todayNotification(_:), v269);
          id v213 = sub_10026D9CC(0, 0, 0);
        }
        NSString v219 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v213 setTitle:v219];

        [v213 setBody:v205];
        Class v220 = Date._bridgeToObjectiveC()().super.isa;
        [v213 setDate:v220];

        uint64_t v221 = v296;
        uint64_t v300 = *(void *)(v296 + 56);
        uint64_t v299 = RDUserNotificationCategory.rawValue.getter();
        uint64_t v297 = v222;
        uint64_t v223 = v213;
        unint64_t v224 = v261;
        (*(void (**)(char *, char *, uint64_t))(v210 + 16))(v261, v211, v212);
        uint64_t v225 = v212;
        unint64_t v226 = (*(unsigned __int8 *)(v210 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v210 + 80);
        unint64_t v227 = (v260 + v226 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v228 = (v227 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v229 = swift_allocObject();
        uint64_t v230 = v210;
        uint64_t v231 = v229;
        *(void *)(v229 + 16) = v221;
        (*(void (**)(unint64_t, char *, uint64_t))(v230 + 32))(v229 + v226, v224, v225);
        id v232 = (void *)(v231 + v227);
        uint64_t v233 = (uint64_t)v303;
        uint64_t v234 = v295;
        *id v232 = v303;
        v232[1] = v234;
        unint64_t v235 = (void *)(v231 + v228);
        unint64_t v236 = v301;
        *unint64_t v235 = v302;
        v235[1] = v236;
        id v237 = v223;
        swift_retain();
        sub_1000E4F30(v233);
        sub_10050E738(v299, v297, v237, (uint64_t)sub_100678978, v231);
        swift_release();
        swift_bridgeObjectRelease();
        v303 = (uint64_t (*)(void))v237;

        id v238 = objc_allocWithZone((Class)REMStore);
        unint64_t v239 = (char *)[v238 initWithDaemonController:v281];
        id v240 = objc_allocWithZone((Class)REMSaveRequest);
        v302 = v239;
        id v241 = [v240 initWithStore:v239];
        [v241 setAuthor:RDTodayNotificationLastBannerPresentationDateAuthor];
        [v241 setUpdateLastModifiedDates:0];
        uint64_t v242 = v241;
        [v241 setSyncToCloudKit:0];
        Date.init()();
        uint64_t v243 = swift_allocObject();
        v301 = (char *)v243;
        *(void *)(v243 + 16) = &_swiftEmptyArrayStorage;
        os_log_type_t v244 = (void *)(v243 + 16);
        os_log_type_t v245 = (char *)v287 + *(int *)(v276 + 48);
        do
        {
          v246 = v287;
          sub_1000BF710(v180, (uint64_t)v287, (uint64_t *)&unk_100920EF0);
          id v247 = (void *)*v246;
          id v248 = [v242 updateReminder:*v246];
          Class v249 = Date._bridgeToObjectiveC()().super.isa;
          [v248 setLastBannerPresentationDate:v249];

          id v250 = [v247 objectID];
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v244 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v244 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          ((void (*)(char *, uint64_t))v310)(v245, v305);
          v180 += v308;
          --v178;
        }
        while (v178);
        swift_bridgeObjectRelease();
        uint64_t v251 = v262;
        id v252 = v288;
        uint64_t v253 = v305;
        v289((unint64_t)v262, v288, v305);
        unint64_t v254 = (*(unsigned __int8 *)(v306 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v306 + 80);
        v255 = (void *)swift_allocObject();
        v255[2] = v301;
        ((void (*)(char *, char *, uint64_t))v277)((char *)v255 + v254, v251, v253);
        aBlock[4] = sub_100678B30;
        aBlock[5] = v255;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = (id)1107296256;
        aBlock[2] = sub_1000E13D0;
        uint64_t aBlock[3] = &unk_1008CEF60;
        id v256 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        [v242 saveWithQueue:v259 completion:v256];
        _Block_release(v256);

        id v257 = (void (*)(char *, uint64_t))v310;
        ((void (*)(char *, uint64_t))v310)(v252, v253);
        (*(void (**)(char *, uint64_t))(v268 + 8))(v266, v269);
        (*(void (**)(char *, uint64_t))(v265 + 8))(v264, v267);
        (*(void (**)(char *, uint64_t))(v272 + 8))(v278, v273);
        v257(v298, v253);
        v257(v309, v253);
        return swift_release();
      }
      swift_bridgeObjectRelease();
      sub_1000966BC((uint64_t)v194, (uint64_t *)&unk_100916E70);
      uint64_t v184 = Logger.logObject.getter();
      os_log_type_t v197 = static os_log_type_t.error.getter();
      BOOL v198 = os_log_type_enabled(v184, v197);
      uint64_t v189 = v273;
      if (v198)
      {
        BOOL v199 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v199 = 0;
        _os_log_impl((void *)&_mh_execute_header, v184, v197, "No reminderIDs found in Today smart list. Not posting TodayNotification.", v199, 2u);
        uint64_t v188 = v305;
        uint64_t v149 = v309;
        uint64_t v191 = v306;
        uint64_t v190 = v272;
        goto LABEL_70;
      }
      uint64_t v188 = v305;
      uint64_t v149 = v309;
      uint64_t v191 = v306;
      uint64_t v190 = v272;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v184 = Logger.logObject.getter();
      os_log_type_t v185 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v184, v185))
      {
        uint64_t v186 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v186 = 0;
        uint64_t v187 = "No reminders in Today view. Not showing today notification.";
LABEL_69:
        _os_log_impl((void *)&_mh_execute_header, v184, v185, v187, v186, 2u);
        uint64_t v188 = v305;
        uint64_t v189 = v273;
        uint64_t v190 = v272;
        uint64_t v191 = v306;
LABEL_70:
        swift_slowDealloc();
      }
      else
      {
LABEL_71:
        uint64_t v188 = v305;
        uint64_t v189 = v273;
        uint64_t v190 = v272;
        uint64_t v191 = v306;
      }
    }

    (*(void (**)(char *, uint64_t))(v190 + 8))(v278, v189);
    os_log_type_t v192 = *(void (**)(char *, uint64_t))(v191 + 8);
    v192(v298, v188);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v192)(v149, v188);
    uint64_t v133 = v303;
    if (v303) {
      return v133(0);
    }
  }
  else
  {
    id v176 = aBlock[0];
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v272 + 8))(v278, v273);
    uint64_t v177 = v306;
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v112 = Logger.logObject.getter();
    os_log_type_t v113 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v112, v113))
    {
      uint64_t v114 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v114 = 136315138;
      swift_getErrorValue();
      uint64_t v115 = Error.localizedDescription.getter();
      double v312 = COERCE_DOUBLE(sub_1000C51B8(v115, v116, (uint64_t *)aBlock));
      uint64_t v117 = v305;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "Unable to fetch REMTodayDataView. Not posting any todayNotification. {error: %s}", v114, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    uint64_t v132 = *(void (**)(char *, uint64_t))(v177 + 8);
    v132(v298, v117);
    uint64_t v133 = v303;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v132)(v149, v117);
    if (v133) {
      return v133(0);
    }
  }
  return result;
}

uint64_t sub_10066DA7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v95 = a1;
  uint64_t v98 = a2;
  uint64_t v94 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v92 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  long long v93 = (char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v90 = *(void *)(v3 - 8);
  uint64_t v91 = v3;
  __chkstk_darwin(v3);
  uint64_t v89 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v87 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v100 = *(void *)(v7 - 8);
  uint64_t v101 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for Calendar();
  uint64_t v86 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v12 = __chkstk_darwin(v83);
  uint64_t v85 = (uint64_t)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v77 - v15;
  __chkstk_darwin(v14);
  uint64_t v96 = (char *)&v77 - v17;
  uint64_t v18 = sub_100094134((uint64_t *)&unk_100911810);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v77 - v22;
  uint64_t v24 = type metadata accessor for DateComponents();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v84 = (char *)&v77 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  double v99 = (char *)&v77 - v28;
  id v29 = [self daemonUserDefaults];
  id v30 = [v29 todayNotificationFireTime];

  if (v30)
  {
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v21, 1, 1, v24);
  }
  sub_100096408((uint64_t)v21, (uint64_t)v23, (uint64_t *)&unk_100911810);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_1000966BC((uint64_t)v23, (uint64_t *)&unk_100911810);
    uint64_t v31 = v100;
    if (qword_100907AF8 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_10008E2DC(v32, (uint64_t)qword_100920C50);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = v101;
    if (v35)
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "DateUtils.lastTodayNotificationFireDate: Early return because user has disabled today notifications.", v37, 2u);
      swift_slowDealloc();
    }

LABEL_20:
    uint64_t v74 = 1;
    uint64_t v73 = v98;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v73, v74, 1, v36);
  }
  uint64_t v38 = v9;
  uint64_t v81 = v25;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  uint64_t v82 = v24;
  v39(v99, v23, v24);
  uint64_t v78 = v11;
  static Calendar.current.getter();
  sub_1000BF710(v95, (uint64_t)v16, (uint64_t *)&unk_100909A40);
  uint64_t v40 = v100;
  uint64_t v41 = v101;
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
  uint64_t v80 = v100 + 48;
  uint64_t v79 = v42;
  if (v42((uint64_t)v16, 1, v101) == 1)
  {
    static Date.now.getter();
    sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909A40);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v38, v16, v41);
  }
  uint64_t v43 = v38;
  uint64_t v44 = v87;
  uint64_t v45 = v6;
  (*(void (**)(char *, void, uint64_t))(v87 + 104))(v6, enum case for Calendar.MatchingPolicy.nextTime(_:), v97);
  uint64_t v46 = v89;
  uint64_t v47 = v90;
  uint64_t v48 = v91;
  (*(void (**)(char *, void, uint64_t))(v90 + 104))(v89, enum case for Calendar.SearchDirection.backward(_:), v91);
  uint64_t v50 = v92;
  uint64_t v49 = v93;
  uint64_t v51 = v94;
  (*(void (**)(char *, void, uint64_t))(v92 + 104))(v93, enum case for Calendar.RepeatedTimePolicy.first(_:), v94);
  uint64_t v52 = v78;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v51);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v48);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v97);
  uint64_t v31 = v100;
  uint64_t v53 = v43;
  uint64_t v36 = v101;
  (*(void (**)(char *, uint64_t))(v100 + 8))(v53, v101);
  id v54 = v52;
  uint64_t v55 = (uint64_t)v96;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v54, v88);
  if (v79(v55, 1, v36) == 1)
  {
    uint64_t v56 = v99;
    sub_1000966BC(v55, (uint64_t *)&unk_100909A40);
    uint64_t v57 = v82;
    uint64_t v58 = v81;
    if (qword_100907AF8 != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    sub_10008E2DC(v59, (uint64_t)qword_100920C50);
    id v60 = v84;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v84, v56, v57);
    uint64_t v61 = v85;
    sub_1000BF710(v95, v85, (uint64_t *)&unk_100909A40);
    uint64_t v62 = v56;
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = swift_slowAlloc();
      v103[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v65 = 136446466;
      uint64_t v66 = DateComponents.description.getter();
      uint64_t v102 = sub_1000C51B8(v66, v67, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v68 = v60;
      uint64_t v69 = *(void (**)(char *, uint64_t))(v58 + 8);
      v69(v68, v57);
      *(_WORD *)(v65 + 12) = 2082;
      uint64_t v70 = v85;
      uint64_t v71 = Optional.descriptionOrNil.getter();
      uint64_t v102 = sub_1000C51B8(v71, v72, v103);
      uint64_t v31 = v100;
      uint64_t v36 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000966BC(v70, (uint64_t *)&unk_100909A40);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "DateUtils.lastTodayNotificationFireDate: Unable to find last fire date. {todayNotificationFireTime: %{public}s, referenceDate: %{public}s}", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v69(v99, v82);
    }
    else
    {

      sub_1000966BC(v61, (uint64_t *)&unk_100909A40);
      uint64_t v75 = *(void (**)(char *, uint64_t))(v58 + 8);
      v75(v60, v57);
      v75(v62, v57);
    }
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t))(v81 + 8))(v99, v82);
  uint64_t v73 = v98;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v98, v55, v36);
  uint64_t v74 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v73, v74, 1, v36);
}

uint64_t sub_10066E584@<X0>(id *a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, char *, uint64_t)@<X2>, void *a4@<X8>)
{
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = *a1;
  uint64_t v17 = sub_1002F0054(v16, a2);

  if (!v17) {
    goto LABEL_7;
  }
  v25[1] = v4;
  id v18 = [v17 assignmentContext];
  id v19 = [v18 currentAssignment];

  if (v19)
  {

    if ((sub_10056DE04(0) & 1) == 0)
    {

      goto LABEL_7;
    }
  }
  sub_1004D8F70(v17, a3, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {

    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909A40);
LABEL_7:
    uint64_t v20 = sub_100094134((uint64_t *)&unk_100920EF0);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a4, 1, 1, v20);
  }
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v22(v15, v11, v12);
  uint64_t v23 = sub_100094134((uint64_t *)&unk_100920EF0);
  uint64_t v24 = (char *)a4 + *(int *)(v23 + 48);
  *a4 = v17;
  v22(v24, v15, v12);
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a4, 0, 1, v23);
}

uint64_t sub_10066E834(void *a1, char *a2, char *a3)
{
  unint64_t v72 = a2;
  uint64_t v73 = a3;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v70 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v69 = (char *)&v61 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v61 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)&v61 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v61 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v61 - v23;
  __chkstk_darwin(v22);
  uint64_t v74 = (char *)&v61 - v25;
  id v26 = [a1 lastBannerPresentationDate];
  if (v26)
  {
    uint64_t v27 = v26;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v28(v6, v24, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v28(v74, v6, v7);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  static Date.distantPast.getter();
  sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909A40);
LABEL_6:
  id v29 = v15;
  id v30 = v18;
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10008E2DC(v31, (uint64_t)qword_100920C50);
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v32(v21, v74, v7);
  v32(v30, v72, v7);
  v32(v29, v73, v7);
  id v33 = a1;
  os_log_type_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  int v36 = v35;
  BOOL v37 = os_log_type_enabled(v34, v35);
  uint64_t v71 = v8;
  if (v37)
  {
    uint64_t v38 = swift_slowAlloc();
    os_log_type_t v64 = v29;
    uint64_t v39 = v38;
    uint64_t v40 = swift_slowAlloc();
    uint64_t v62 = v21;
    uint64_t v41 = (void *)v40;
    uint64_t v65 = v40;
    uint64_t v67 = swift_slowAlloc();
    uint64_t v76 = v67;
    *(_DWORD *)uint64_t v39 = 138544130;
    int v66 = v36;
    id v42 = [v33 objectID];
    os_log_t v63 = v34;
    uint64_t v43 = v30;
    id v44 = v42;
    uint64_t v75 = (uint64_t)v42;
    uint64_t v68 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v41 = v44;

    *(_WORD *)(v39 + 12) = 2082;
    uint64_t v45 = v62;
    uint64_t v46 = Date.description.getter();
    uint64_t v75 = sub_1000C51B8(v46, v47, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v48 = *(void (**)(char *, uint64_t))(v8 + 8);
    v48(v45, v7);
    *(_WORD *)(v39 + 22) = 2082;
    uint64_t v49 = Date.description.getter();
    uint64_t v75 = sub_1000C51B8(v49, v50, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v48(v43, v7);
    *(_WORD *)(v39 + 32) = 2082;
    uint64_t v51 = v64;
    uint64_t v52 = Date.description.getter();
    uint64_t v75 = sub_1000C51B8(v52, v53, &v76);
    uint64_t v32 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v48(v51, v7);
    os_log_t v54 = v63;
    _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v66, "Evaluating whether to trigger TodayNotification {reminderID: %{public}@, lastPresentationTime: %{public}s, fireDate: %{public}s, now: %{public}s}", (uint8_t *)v39, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v48 = *(void (**)(char *, uint64_t))(v8 + 8);
    v48(v21, v7);
    v48(v30, v7);
    v48(v29, v7);
  }
  uint64_t v55 = v69;
  uint64_t v56 = v72;
  char v57 = static Date.< infix(_:_:)();
  v32(v55, v56, v7);
  uint64_t v58 = v70;
  v32(v70, v73, v7);
  if (v57) {
    char v59 = static Date.< infix(_:_:)();
  }
  else {
    char v59 = 0;
  }
  v48(v58, v7);
  v48(v55, v7);
  v48(v74, v7);
  return v59 & 1;
}

void sub_10066EF1C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v76 = a7;
  uint64_t v74 = a6;
  uint64_t v84 = a5;
  uint64_t v85 = a4;
  uint64_t v87 = a3;
  uint64_t v83 = type metadata accessor for DateComponents();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v81 = &v67[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v80 = type metadata accessor for TimeZone();
  uint64_t v79 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v11 = &v67[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v78 = type metadata accessor for Date();
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v13 = &v67[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v86 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v75 = &v67[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = &v67[-v18];
  __chkstk_darwin(v17);
  uint64_t v21 = &v67[-v20];
  uint64_t v22 = type metadata accessor for DispatchPredicate();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = &v67[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v26 = *(void **)(a2 + 16);
  *uint64_t v25 = v26;
  (*(void (**)(void *, void, uint64_t))(v23 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v22);
  id v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)();
  id v29 = *(void (**)(void *, uint64_t))(v23 + 8);
  uint64_t v28 = v23 + 8;
  v29(v25, v22);
  if ((v26 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (a1)
  {
    swift_errorRetain();
    uint64_t v28 = v86;
    if (qword_100907AF8 == -1)
    {
LABEL_4:
      uint64_t v30 = type metadata accessor for Logger();
      sub_10008E2DC(v30, (uint64_t)qword_100920C50);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v28 + 16))(v19, v87, v14);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v87 = swift_slowAlloc();
        uint64_t v89 = v87;
        *(_DWORD *)uint64_t v33 = 136446466;
        uint64_t v34 = RDUserNotificationCategory.rawValue.getter();
        uint64_t v88 = sub_1000C51B8(v34, v35, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v19, v14);
        *(_WORD *)(v33 + 12) = 2082;
        swift_getErrorValue();
        uint64_t v36 = Error.rem_errorDescription.getter();
        uint64_t v88 = sub_1000C51B8(v36, v37, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "RDTodayNotificationEngine: Unable to post Today notification {category: %{public}s, error: %{public}s}", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v19, v14);
        swift_errorRelease();
        swift_errorRelease();
      }

      if (v85) {
        v85(0);
      }
      swift_errorRelease();
      return;
    }
LABEL_25:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v38 = v86;
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  uint64_t v40 = sub_10008E2DC(v39, (uint64_t)qword_100920C50);
  uint64_t v41 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v38 + 16);
  uint64_t v73 = v38 + 16;
  unint64_t v72 = v41;
  v41(v21, v87, v14);
  unint64_t v42 = v76;
  swift_bridgeObjectRetain_n();
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.default.getter();
  int v45 = v44;
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v46 = swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    uint64_t v89 = v70;
    *(_DWORD *)uint64_t v46 = 136446466;
    os_log_t v69 = v43;
    int v68 = v45;
    uint64_t v47 = RDUserNotificationCategory.rawValue.getter();
    uint64_t v88 = sub_1000C51B8(v47, v48, &v89);
    uint64_t v71 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v49 = *(void (**)(unsigned char *, uint64_t))(v38 + 8);
    v49(v21, v14);
    *(_WORD *)(v46 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v88 = sub_1000C51B8(v74, v42, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v50 = v69;
    _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v68, "RDTodayNotificationEngine: Posted Today notification {category: %{public}s, body: %s}", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v49 = *(void (**)(unsigned char *, uint64_t))(v38 + 8);
    v49(v21, v14);

    swift_bridgeObjectRelease_n();
  }
  uint64_t v51 = v14;
  uint64_t v52 = self;
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(unsigned char *, uint64_t))(v77 + 8))(v13, v78);
  static TimeZone.current.getter();
  Class v54 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(unsigned char *, uint64_t))(v79 + 8))(v11, v80);
  id v55 = [v52 rem_dateComponentsWithDate:isa timeZone:v54 isAllDay:0];

  uint64_t v56 = v81;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  DateComponents.hour.getter();
  LOBYTE(v55) = v57;
  (*(void (**)(unsigned char *, uint64_t))(v82 + 8))(v56, v83);
  if ((v55 & 1) == 0)
  {
    type metadata accessor for Analytics();
    sub_100094134((uint64_t *)&unk_10090A420);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    *(void *)(inited + 32) = 1701869940;
    *(void *)(inited + 40) = 0xE400000000000000;
    RDUserNotificationCategory.rawValue.getter();
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 48) = v59;
    *(void *)(inited + 56) = 0x4872656767697274;
    *(void *)(inited + 64) = 0xEB0000000072756FLL;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    sub_1002ED104(inited);
    static Analytics.postEvent(_:payload:duration:)();
    swift_bridgeObjectRelease();
    id v60 = v85;
    if (!v85) {
      return;
    }
    goto LABEL_22;
  }
  uint64_t v61 = v75;
  v72(v75, v87, v51);
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v62, v63))
  {
    os_log_type_t v64 = (uint8_t *)swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v64 = 136446210;
    uint64_t v65 = RDUserNotificationCategory.rawValue.getter();
    uint64_t v88 = sub_1000C51B8(v65, v66, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v49(v61, v51);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Failed to compute current hour when posting analytics to event com.apple.reminders.notification with {category: %{public}s}", v64, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v49(v61, v51);
  }

  id v60 = v85;
  if (v85) {
LABEL_22:
  }
    v60(1);
}

void sub_10066FA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100907AF8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100920C50);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      os_log_type_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446466;
      swift_beginAccess();
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v12 = Array.description.getter();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      uint64_t v31 = sub_1000C51B8(v12, v14, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v15 = Error.localizedDescription.getter();
      uint64_t v31 = sub_1000C51B8(v15, v16, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v10, "TodayNotificationEngine is unable to update lastBannerPresentationDate {reminderIDs: %{public}s, error: %s}", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
      id v27 = v30;
    }
  }
  else
  {
    if (qword_100907AF8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_100920C50);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a3, v5);
    swift_retain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      os_log_type_t v32 = v30;
      *(_DWORD *)uint64_t v21 = 136446466;
      int v29 = v20;
      swift_beginAccess();
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v22 = Array.description.getter();
      unint64_t v24 = v23;
      swift_bridgeObjectRelease();
      uint64_t v31 = sub_1000C51B8(v22, v24, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2082;
      uint64_t v25 = Date.description.getter();
      uint64_t v31 = sub_1000C51B8(v25, v26, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v29, "TodayNotificationEngine has updated lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
}

void sub_10067002C(uint64_t a1, unint64_t a2)
{
  unint64_t v142 = a2;
  uint64_t v138 = a1;
  uint64_t v130 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v135 = *(void *)(v130 - 8);
  uint64_t v3 = __chkstk_darwin(v130);
  uint64_t v132 = (char *)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = v4;
  __chkstk_darwin(v3);
  uint64_t v134 = (char *)&v112 - v5;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  long long v136 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v137 = (void (*)(char *, char *, uint64_t))((char *)&v112 - v10);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v112 - v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v131 = (char *)&v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v129 = (char *)&v112 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v128 = (char *)&v112 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v133 = (char *)&v112 - v22;
  uint64_t v126 = v23;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v112 - v24;
  uint64_t v26 = type metadata accessor for DispatchPredicate();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  int v29 = (uint64_t *)((char *)&v112 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v140 = v2;
  uint64_t v30 = (void *)*((void *)v2 + 2);
  void *v29 = v30;
  (*(void (**)(void *, void, uint64_t))(v27 + 104))(v29, enum case for DispatchPredicate.onQueue(_:), v26);
  id v31 = v30;
  char v32 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v27 + 8))(v29, v26);
  if (v32)
  {
    uint64_t v141 = v25;
    if (qword_100907AF8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v33 = type metadata accessor for Logger();
  uint64_t v34 = sub_10008E2DC(v33, (uint64_t)qword_100920C50);
  swift_bridgeObjectRetain_n();
  unint64_t v139 = (void (*)(void, void, void))v34;
  unint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    unint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = (void (*)(void, void, void))swift_slowAlloc();
    *(_DWORD *)unint64_t v37 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v150 = sub_1000C51B8(v138, v142, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "RDTodayNotificationEngine: started retractTodayNotificationIfApplicable {reason: %{public}s}", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v38 = v140;
  uint64_t v39 = &v140[OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate];
  swift_beginAccess();
  sub_1000BF710((uint64_t)v39, (uint64_t)v12, (uint64_t *)&unk_100909A40);
  uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v41 = v40(v12, 1, v13);
  unint64_t v42 = v141;
  if (v41 == 1)
  {
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      int v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v45 = 0;
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v46(v141, v12, v13);
    uint64_t v47 = (uint64_t)v136;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v136, 1, 1, v13);
    unint64_t v48 = (char *)v137;
    sub_10066DA7C(v47, (uint64_t)v137);
    sub_1000966BC(v47, (uint64_t *)&unk_100909A40);
    if (v40(v48, 1, v13) == 1)
    {
      sub_1000966BC((uint64_t)v48, (uint64_t *)&unk_100909A40);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "RDTodayNotificationEngine: Skipping retractTodayNotificationIfApplicable because user has disabled today notification or there was error getting lastTodayNotificationFireDate", v51, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v42, v13);
    }
    else
    {
      uint64_t v52 = v133;
      v46(v133, v48, v13);
      if (static Date.< infix(_:_:)())
      {
        unint64_t v137 = v46;
        unint64_t v53 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
        Class v54 = v128;
        v53(v128, v52, v13);
        id v55 = v129;
        long long v136 = (char *)(v14 + 16);
        uint64_t v124 = v53;
        v53(v129, v42, v13);
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.default.getter();
        int v58 = v57;
        BOOL v59 = os_log_type_enabled(v56, v57);
        uint64_t v125 = v14;
        if (v59)
        {
          uint64_t v60 = v14;
          uint64_t v61 = swift_slowAlloc();
          unint64_t v139 = (void (*)(void, void, void))swift_slowAlloc();
          uint64_t aBlock = v139;
          *(_DWORD *)uint64_t v61 = 136446466;
          LODWORD(v123) = v58;
          uint64_t v62 = sub_100517304((unint64_t *)&qword_100908230, (void (*)(uint64_t))&type metadata accessor for Date);
          os_log_t v122 = v56;
          unint64_t v121 = v62;
          uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v143 = sub_1000C51B8(v63, v64, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v65 = *(void (**)(char *, uint64_t))(v60 + 8);
          uint64_t v113 = (v60 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          v65(v54, v13);
          *(_WORD *)(v61 + 12) = 2082;
          uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v143 = sub_1000C51B8(v66, v67, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v65(v55, v13);
          uint64_t v38 = v140;
          os_log_t v68 = v122;
          _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v123, "RDTodayNotificationEngine: proceeding to retractTodayNotificationIfApplicable because {lastTodayNotificationFireDate: %{public}s < lastDismissedDate: %{public}s}", (uint8_t *)v61, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v70 = *(void (**)(char *, uint64_t))(v14 + 8);
          uint64_t v113 = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          v70(v54, v13);
          v70(v55, v13);
        }
        uint64_t v71 = v127;
        uint64_t v72 = v126;
        uint64_t v73 = v135;
        uint64_t v74 = *(void (**)(void, void, void))(v135 + 104);
        unint64_t v129 = (char *)(v135 + 104);
        unint64_t v139 = v74;
        uint64_t v75 = v134;
        uint64_t v76 = v130;
        v74(v134, enum case for RDUserNotificationCategory.todayNotification(_:), v130);
        uint64_t v140 = (char *)*((void *)v38 + 7);
        double v118 = (void (**)(uint64_t, void *))RDUserNotificationCategory.rawValue.getter();
        uint64_t v115 = v77;
        uint64_t v78 = v75;
        uint64_t v117 = (void (*)(char *, uint64_t))RDUserNotificationCategory.rawValue.getter();
        uint64_t v114 = v79;
        uint64_t v80 = v73;
        uint64_t v81 = *(char **)(v73 + 16);
        uint64_t v127 = v73 + 16;
        uint64_t v128 = v81;
        uint64_t v82 = v132;
        ((void (*)(char *, char *, uint64_t))v81)(v132, v78, v76);
        uint64_t v83 = v131;
        v124(v131, v141, v13);
        uint64_t v84 = *(unsigned __int8 *)(v73 + 80);
        uint64_t v85 = (v84 + 16) & ~v84;
        uint64_t v126 = v85;
        uint64_t v86 = *(unsigned __int8 *)(v125 + 80);
        unint64_t v87 = (v71 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v121 = v87;
        unint64_t v123 = ((v86 + v87 + 16) & ~v86) + v72;
        uint64_t v88 = (v86 + v87 + 16) & ~v86;
        uint64_t v120 = v88;
        os_log_t v122 = (os_log_t)(v84 | v86 | 7);
        uint64_t v89 = swift_allocObject();
        uint64_t v116 = v13;
        uint64_t v90 = v89;
        unint64_t v119 = *(void (**)(uint64_t, char *, uint64_t))(v80 + 32);
        v119(v89 + v85, v82, v76);
        uint64_t v91 = (void *)(v90 + v87);
        unint64_t v92 = v142;
        *uint64_t v91 = v138;
        v91[1] = v92;
        v137((char *)(v90 + v88), v83, v13);
        swift_bridgeObjectRetain();
        NSString v93 = String._bridgeToObjectiveC()();
        NSString v94 = String._bridgeToObjectiveC()();
        uint64_t v148 = sub_100678604;
        uint64_t v149 = v90;
        uint64_t aBlock = (void (*)(void, void, void))_NSConcreteStackBlock;
        uint64_t v145 = 1107296256;
        double v118 = &v146;
        uint64_t v146 = sub_1000E13D0;
        uint64_t v147 = &unk_1008CEE70;
        uint64_t v95 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        [v140 releaseNotificationWithIdentifier:v93 reference:v94 completion:v95];
        _Block_release(v95);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v96 = *(void (**)(char *, uint64_t))(v80 + 8);
        uint64_t v135 = v80 + 8;
        uint64_t v117 = v96;
        uint64_t v97 = v134;
        uint64_t v98 = v130;
        v96(v134, v130);
        v139(v97, enum case for RDUserNotificationCategory.todayNotificationForSingleReminder(_:), v98);
        unint64_t v139 = (void (*)(void, void, void))RDUserNotificationCategory.rawValue.getter();
        RDUserNotificationCategory.rawValue.getter();
        double v99 = v132;
        uint64_t v100 = v97;
        uint64_t v101 = v98;
        ((void (*)(char *, char *, uint64_t))v128)(v132, v100, v98);
        uint64_t v102 = v131;
        uint64_t v103 = v116;
        v124(v131, v141, v116);
        uint64_t v104 = swift_allocObject();
        v119(v104 + v126, v99, v101);
        uint64_t v105 = (void *)(v104 + v121);
        unint64_t v106 = v142;
        *uint64_t v105 = v138;
        v105[1] = v106;
        uint64_t v107 = v103;
        v137((char *)(v104 + v120), v102, v103);
        swift_bridgeObjectRetain();
        NSString v108 = String._bridgeToObjectiveC()();
        NSString v109 = String._bridgeToObjectiveC()();
        uint64_t v148 = sub_100678604;
        uint64_t v149 = v104;
        uint64_t aBlock = (void (*)(void, void, void))_NSConcreteStackBlock;
        uint64_t v145 = 1107296256;
        uint64_t v146 = sub_1000E13D0;
        uint64_t v147 = &unk_1008CEEC0;
        uint64_t v110 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        [v140 releaseNotificationWithIdentifier:v108 reference:v109 completion:v110];
        _Block_release(v110);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v117(v134, v101);
        uint64_t v111 = *(void (**)(char *, uint64_t))(v125 + 8);
        v111(v133, v107);
        v111(v141, v107);
      }
      else
      {
        os_log_t v69 = *(void (**)(char *, uint64_t))(v14 + 8);
        v69(v52, v13);
        v69(v42, v13);
      }
    }
  }
}

void sub_100670FAC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v55 = a3;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v50 - v12;
  uint64_t v14 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v50 - v19;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100907AF8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_100920C50);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
    uint64_t v22 = v8;
    uint64_t v23 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v57, v7);
    unint64_t v24 = v56;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v57 = v23;
      uint64_t v29 = v28;
      uint64_t v54 = swift_slowAlloc();
      uint64_t v59 = v54;
      *(_DWORD *)uint64_t v29 = 136446978;
      int v53 = v27;
      os_log_t v52 = v25;
      uint64_t v30 = RDUserNotificationCategory.rawValue.getter();
      uint64_t v58 = sub_1000C51B8(v30, v31, &v59);
      uint64_t v51 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      *(_WORD *)(v29 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v58 = sub_1000C51B8(v55, v24, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 22) = 2082;
      sub_100517304((unint64_t *)&qword_100908230, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v32 = v57;
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v58 = sub_1000C51B8(v33, v34, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v10, v32);
      *(_WORD *)(v29 + 32) = 2080;
      swift_getErrorValue();
      uint64_t v35 = Error.rem_errorDescription.getter();
      uint64_t v58 = sub_1000C51B8(v35, v36, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v37 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v53, "RDTodayNotificationEngine: retractTodayNotificationIfApplicable failed {category: %{public}s, retractReason: %{public}s, lastDismissedDate: %{public}s, error: %s}", (uint8_t *)v29, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100907AF8 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_10008E2DC(v38, (uint64_t)qword_100920C50);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v20, a2, v14);
    uint64_t v39 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v57, v7);
    unint64_t v40 = v56;
    swift_bridgeObjectRetain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    int v42 = v41;
    if (os_log_type_enabled(v25, v41))
    {
      uint64_t v43 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      uint64_t v59 = v54;
      *(_DWORD *)uint64_t v43 = 136446722;
      int v53 = v42;
      os_log_t v52 = v25;
      uint64_t v44 = RDUserNotificationCategory.rawValue.getter();
      uint64_t v58 = sub_1000C51B8(v44, v45, &v59);
      uint64_t v57 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
      *(_WORD *)(v43 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v58 = sub_1000C51B8(v55, v40, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v43 + 22) = 2082;
      sub_100517304((unint64_t *)&qword_100908230, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v46 = v57;
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v58 = sub_1000C51B8(v47, v48, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v46);
      os_log_t v49 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v53, "RDTodayNotificationEngine: retractTodayNotificationIfApplicable completed {category: %{public}s, retractReason: %{public}s, lastDismissedDate: %{public}s}", (uint8_t *)v43, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v39);
  }
}

void sub_100671798()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 16);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_started) == 1)
  {
    sub_100671970();
    return;
  }
  if (qword_100907AF8 != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_100920C50);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDTodayNotificationEngine.start() must be called before setupTimers", v10, 2u);
    swift_slowDealloc();
  }
}

void sub_100671970()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v170 = (uint64_t)v163 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v178 = (char *)v163 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v171 = (char *)v163 - v7;
  __chkstk_darwin(v6);
  unint64_t v179 = (char *)v163 - v8;
  uint64_t v188 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v190 = *(void *)(v188 - 8);
  __chkstk_darwin(v188);
  os_log_type_t v174 = (char *)v163 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.DatesModel.Group();
  uint64_t v11 = *(void (**)(void))(v10 - 8);
  uint64_t v198 = v10;
  BOOL v199 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v189 = (char *)v163 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v200 = (unint64_t)v163 - v15;
  __chkstk_darwin(v14);
  os_log_type_t v197 = (char *)v163 - v16;
  uint64_t v17 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  unint64_t v193 = *(char **)(v17 - 8);
  uint64_t v194 = (void (**)(void, void))v17;
  __chkstk_darwin(v17);
  os_log_type_t v192 = (char *)v163 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = (void *)type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v182 = (void *)*(v196 - 1);
  __chkstk_darwin(v196);
  uint64_t v191 = (char *)v163 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  unint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v163 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = sub_100094134((uint64_t *)&unk_100920ED0);
  uint64_t v175 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  uint64_t v195 = (char *)v163 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = type metadata accessor for REMRemindersListDataView.DatesModel();
  uint64_t v172 = *(void *)(v173 - 8);
  __chkstk_darwin(v173);
  uint64_t v181 = (char *)v163 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v183 = type metadata accessor for Date();
  uint64_t v184 = *(void *)(v183 - 8);
  uint64_t v26 = __chkstk_darwin(v183);
  id v168 = (char *)v163 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v169 = (uint64_t)v163 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v167 = (char *)v163 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v177 = (char *)v163 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v180 = (char *)v163 - v35;
  __chkstk_darwin(v34);
  uint64_t v186 = (char *)v163 - v36;
  uint64_t v37 = sub_100094134((uint64_t *)&unk_100911810);
  uint64_t v38 = __chkstk_darwin(v37 - 8);
  unint64_t v40 = (void (**)(char *, unint64_t, uint64_t))((char *)v163 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v38);
  int v42 = (char *)v163 - v41;
  uint64_t v43 = type metadata accessor for DispatchPredicate();
  uint64_t v44 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v46 = (void *)((char *)v163 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v187 = v0;
  uint64_t v47 = *(void **)(v0 + 16);
  *uint64_t v46 = v47;
  (*(void (**)(void *, void, uint64_t))(v44 + 104))(v46, enum case for DispatchPredicate.onQueue(_:), v43);
  id v48 = v47;
  LOBYTE(v47) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v44 + 8))(v46, v43);
  if ((v47 & 1) == 0) {
    goto LABEL_72;
  }
  if (qword_100907AF8 != -1) {
    goto LABEL_73;
  }
  while (1)
  {
    uint64_t v49 = type metadata accessor for Logger();
    uint64_t v185 = sub_10008E2DC(v49, (uint64_t)qword_100920C50);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      os_log_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "RDTodayNotificationEngine: started addNextBannerTimeEvent", v52, 2u);
      swift_slowDealloc();
    }

    sub_1004E6850();
    id v53 = [self daemonUserDefaults];
    id v54 = [v53 todayNotificationFireTime];

    if (v54)
    {
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v55 = type metadata accessor for DateComponents();
      (*(void (**)(void (**)(char *, unint64_t, uint64_t), void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v40, 0, 1, v55);
    }
    else
    {
      uint64_t v55 = type metadata accessor for DateComponents();
      (*(void (**)(void (**)(char *, unint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v40, 1, 1, v55);
    }
    uint64_t v57 = v197;
    uint64_t v56 = v198;
    sub_100096408((uint64_t)v40, (uint64_t)v42, (uint64_t *)&unk_100911810);
    type metadata accessor for DateComponents();
    int v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48))(v42, 1, v55);
    sub_1000966BC((uint64_t)v42, (uint64_t *)&unk_100911810);
    if (v58 == 1)
    {
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "User doesn't want today notifications at all. Not adding next time event.", v61, 2u);
        swift_slowDealloc();
      }

      return;
    }
    Date.init()();
    id v62 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(v187 + 120)];
    uint64_t v63 = *(void (**)(char *, void, uint64_t))(v21 + 104);
    unint64_t v64 = v23;
    uint64_t v166 = v20;
    v63(v23, enum case for REMRemindersListDataView.SortingStyle.default(_:), v20);
    uint64_t v65 = v182;
    uint64_t v66 = v191;
    ((void (*)(char *, void, void *))v182[13])(v191, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v196);
    os_log_t v68 = v192;
    unint64_t v67 = v193;
    os_log_t v69 = v194;
    (*((void (**)(char *, void, void (**)(void, void)))v193 + 13))(v192, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v194);
    id v165 = v64;
    static REMRemindersListDataView.fetchScheduled(store:sortingStyle:showCompleted:countCompleted:remindersPrefetch:alwaysIncludeTodayGroup:diffingAgainst:)();
    v163[1] = 0;
    id v164 = v62;
    (*((void (**)(char *, void))v67 + 1))(v68, v69);
    uint64_t v76 = (void (*)(char *, void *))v65[1];
    uint64_t v20 = (uint64_t)(v65 + 1);
    v76(v66, v196);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v165, v166);
    uint64_t v77 = v176;
    uint64_t v78 = v195;
    REMRemindersListDataView.Result.model.getter();
    (*(void (**)(char *, uint64_t))(v175 + 8))(v78, v77);
    uint64_t v79 = REMRemindersListDataView.DatesModel.groups.getter();
    int v42 = (char *)v79;
    uint64_t v23 = (char *)_swiftEmptyArrayStorage;
    id v202 = _swiftEmptyArrayStorage;
    uint64_t v196 = *(void **)(v79 + 16);
    if (!v196) {
      break;
    }
    unint64_t v21 = 0;
    unint64_t v40 = (void (**)(char *, unint64_t, uint64_t))((char *)v199 + 32);
    uint64_t v194 = (void (**)(void, void))((char *)v199 + 8);
    uint64_t v195 = (char *)v199 + 16;
    while (v21 < *((void *)v42 + 2))
    {
      unint64_t v80 = (*((unsigned __int8 *)v199 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v199 + 80);
      uint64_t v20 = *((void *)v199 + 9);
      (*((void (**)(char *, char *, uint64_t))v199 + 2))(v57, &v42[v80 + v20 * v21], v56);
      uint64_t v81 = *(void *)(REMRemindersListDataView.DatesModel.Group.reminders.getter() + 16);
      swift_bridgeObjectRelease();
      if (v81)
      {
        uint64_t v82 = *v40;
        (*v40)((char *)v200, (unint64_t)v57, v56);
        uint64_t v83 = v202;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DEBE8(0, v83[2] + 1, 1);
          uint64_t v83 = v202;
        }
        unint64_t v85 = v83[2];
        unint64_t v84 = v83[3];
        if (v85 >= v84 >> 1)
        {
          sub_1001DEBE8(v84 > 1, v85 + 1, 1);
          uint64_t v83 = v202;
        }
        v83[2] = v85 + 1;
        uint64_t v86 = (char *)v83 + v80 + v85 * v20;
        uint64_t v56 = v198;
        v82(v86, v200, v198);
        id v202 = v83;
        uint64_t v57 = v197;
      }
      else
      {
        (*v194)(v57, v56);
      }
      if (v196 == (void *)++v21)
      {
        unint64_t v87 = v202;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    swift_once();
  }
  unint64_t v87 = _swiftEmptyArrayStorage;
LABEL_30:
  swift_bridgeObjectRelease();
  id v202 = _swiftEmptyArrayStorage;
  uint64_t v88 = v174;
  uint64_t v195 = (char *)v87[2];
  if (v195)
  {
    uint64_t v89 = (void (**)(void, void))*((void *)v199 + 2);
    unint64_t v193 = (char *)v87 + ((*((unsigned __int8 *)v199 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v199 + 80));
    uint64_t v194 = v89;
    uint64_t v90 = (void (**)(char *, uint64_t))(v190 + 8);
    BOOL v199 = (void (*)(void))((char *)v199 + 16);
    uint64_t v191 = (char *)*((void *)v199 + 7);
    os_log_type_t v192 = (char *)v199 - 8;
    uint64_t v182 = v87;
    swift_retain();
    uint64_t v91 = 0;
    unint64_t v92 = v189;
    do
    {
      ((void (*)(char *, char *, uint64_t))v194)(v92, &v193[(void)v191 * (void)v91], v56);
      uint64_t v94 = REMRemindersListDataView.DatesModel.Group.reminders.getter();
      uint64_t v95 = *(void *)(v94 + 16);
      if (v95)
      {
        os_log_type_t v197 = v91;
        uint64_t v201 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v96 = *(unsigned __int8 *)(v190 + 80);
        uint64_t v196 = (void *)v94;
        uint64_t v97 = v94 + ((v96 + 32) & ~v96);
        unint64_t v200 = *(void *)(v190 + 72);
        uint64_t v98 = *(void (**)(char *, uint64_t, uint64_t))(v190 + 16);
        uint64_t v99 = v188;
        do
        {
          v98(v88, v97, v99);
          REMRemindersListDataView.ReminderLite.objectID.getter();
          (*v90)(v88, v99);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v97 += v200;
          --v95;
        }
        while (v95);
        NSString v93 = v201;
        swift_bridgeObjectRelease();
        uint64_t v91 = v197;
        uint64_t v56 = v198;
        unint64_t v92 = v189;
      }
      else
      {
        swift_bridgeObjectRelease();
        NSString v93 = _swiftEmptyArrayStorage;
      }
      ++v91;
      (*(void (**)(char *, uint64_t))v192)(v92, v56);
      sub_100201E6C((unint64_t)v93);
    }
    while (v91 != v195);
    swift_release_n();
    unint64_t v100 = (unint64_t)v202;
  }
  else
  {
    swift_release();
    unint64_t v100 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v101 = v184;
  if (v100 >> 62) {
    goto LABEL_75;
  }
  swift_bridgeObjectRetain();
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  while (1)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v202 = 0;
    id v103 = v164;
    id v104 = [v164 fetchRemindersWithObjectIDs:isa error:&v202];

    id v105 = v202;
    if (!v104)
    {
      uint64_t v117 = v202;
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v172 + 8))(v181, v173);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        id v202 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v72 = 136315138;
        swift_getErrorValue();
        uint64_t v73 = Error.localizedDescription.getter();
        uint64_t v201 = (void *)sub_1000C51B8(v73, v74, (uint64_t *)&v202);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Error fetching scheduled reminders when getting nextReminderDueDateMidnight {error: %s}", v72, 0xCu);
        swift_arrayDestroy();
        uint64_t v75 = v183;
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        uint64_t v75 = v183;
      }
      (*(void (**)(char *, uint64_t))(v101 + 8))(v186, v75);
      return;
    }
    sub_1000963CC(0, &qword_1009168E0);
    sub_1000E4F40((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
    uint64_t v106 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v107 = v105;

    __chkstk_darwin(v108);
    NSString v109 = v186;
    v163[-2] = v106;
    v163[-1] = v109;
    sub_1003B5384((void (*)(id *))sub_1006785E4, (uint64_t)&v163[-4], v100);
    uint64_t v111 = v110;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v112 = *(void *)(v111 + 16);
    uint64_t v198 = v111;
    if (!v112)
    {
      uint64_t v116 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56);
      uint64_t v114 = (uint64_t)v171;
      uint64_t v115 = v183;
      v116(v171, 1, 1, v183);
LABEL_48:
      double v118 = v167;
      sub_1000966BC(v114, (uint64_t *)&unk_100909A40);
      v116(v179, 1, 1, v115);
      unint64_t v119 = *(void (**)(char *, char *, uint64_t))(v101 + 16);
      unint64_t v120 = (v101 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v119(v118, v186, v115);
      goto LABEL_52;
    }
    uint64_t v113 = *(void (**)(char *))(v101 + 16);
    uint64_t v114 = (uint64_t)v171;
    uint64_t v196 = (void *)(v111
                    + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80)));
    uint64_t v115 = v183;
    unint64_t v200 = v101 + 16;
    v113(v171);
    unint64_t v100 = v101 + 56;
    uint64_t v116 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56);
    v116((char *)v114, 0, 1, v115);
    uint64_t v195 = *(char **)(v101 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v195)(v114, 1, v115) == 1) {
      goto LABEL_48;
    }
    os_log_type_t v197 = (char *)v116;
    BOOL v199 = (void (*)(void))v113;
    uint64_t v101 = *(void *)(v101 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v101)(v180, v114, v115);
    swift_bridgeObjectRetain();
    uint64_t v121 = (uint64_t)v178;
    if (v112 == 1) {
      break;
    }
    uint64_t v157 = (void (**)(char *, uint64_t))(v184 + 8);
    unint64_t v158 = 1;
    uint64_t v122 = v183;
    while (v158 < *(void *)(v111 + 16))
    {
      ((void (*)(uint64_t, char *, uint64_t))v199)(v121, (char *)v196 + *(void *)(v184 + 72) * v158, v122);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v197)(v121, 0, 1, v122);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v195)(v121, 1, v122) == 1) {
        goto LABEL_51;
      }
      uint64_t v159 = v177;
      ((void (*)(char *, uint64_t, uint64_t))v101)(v177, v121, v122);
      uint64_t v160 = v180;
      char v161 = static Date.< infix(_:_:)();
      uint64_t v162 = *v157;
      if (v161)
      {
        v162(v160, v122);
        ((void (*)(char *, char *, uint64_t))v101)(v160, v159, v122);
      }
      else
      {
        v162(v159, v122);
      }
      ++v158;
      uint64_t v121 = (uint64_t)v178;
      uint64_t v111 = v198;
      if (v112 == v158) {
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_75:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
LABEL_50:
  uint64_t v122 = v183;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v197)(v121, 1, 1, v183);
LABEL_51:
  unint64_t v120 = v200 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  swift_bridgeObjectRelease();
  sub_1000966BC(v121, (uint64_t *)&unk_100909A40);
  uint64_t v123 = (uint64_t)v179;
  ((void (*)(char *, char *, uint64_t))v101)(v179, v180, v122);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v197)(v123, 0, 1, v122);
  uint64_t v115 = v122;
  uint64_t v101 = v184;
  double v118 = v167;
  unint64_t v119 = (void (*)(char *, char *, uint64_t))v199;
  ((void (*)(char *, char *, uint64_t))v199)(v167, v186, v122);
LABEL_52:
  swift_bridgeObjectRetain_n();
  uint64_t v124 = Logger.logObject.getter();
  os_log_type_t v125 = static os_log_type_t.debug.getter();
  int v126 = v125;
  BOOL v127 = os_log_type_enabled(v124, v125);
  BOOL v199 = (void (*)(void))v119;
  unint64_t v200 = v120;
  if (v127)
  {
    uint64_t v128 = swift_slowAlloc();
    LODWORD(v197) = v126;
    uint64_t v129 = v128;
    uint64_t v196 = (void *)swift_slowAlloc();
    id v202 = v196;
    *(_DWORD *)uint64_t v129 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v130 = Array.description.getter();
    unint64_t v132 = v131;
    swift_bridgeObjectRelease();
    uint64_t v201 = (void *)sub_1000C51B8(v130, v132, (uint64_t *)&v202);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v129 + 12) = 2080;
    uint64_t v195 = (char *)(v129 + 14);
    sub_100094134((uint64_t *)&unk_100920EE0);
    uint64_t v133 = v118;
    unint64_t v134 = (*(unsigned __int8 *)(v184 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80);
    uint64_t v135 = swift_allocObject();
    *(_OWORD *)(v135 + 16) = xmmword_100776E40;
    v119((char *)(v135 + v134), v133, v115);
    uint64_t v136 = Array.description.getter();
    unint64_t v138 = v137;
    uint64_t v101 = v184;
    swift_bridgeObjectRelease();
    uint64_t v201 = (void *)sub_1000C51B8(v136, v138, (uint64_t *)&v202);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v139 = *(void (**)(char *, uint64_t))(v101 + 8);
    v139(v133, v115);
    _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v197, "Deciding when to wake up for the next TodayNotification {todayTimeCandidates: %s, now: %s}", (uint8_t *)v129, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    unint64_t v139 = *(void (**)(char *, uint64_t))(v101 + 8);
    v139(v118, v115);
  }

  uint64_t v140 = v170;
  uint64_t v141 = v168;
  sub_1000BF710((uint64_t)v179, v170, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v140, 1, v115) == 1)
  {
    sub_1000966BC(v140, (uint64_t *)&unk_100909A40);
    swift_bridgeObjectRetain();
    unint64_t v142 = Logger.logObject.getter();
    os_log_type_t v143 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v142, v143))
    {
      unint64_t v144 = (uint8_t *)swift_slowAlloc();
      id v202 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v144 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v145 = Array.description.getter();
      unint64_t v147 = v146;
      swift_bridgeObjectRelease();
      uint64_t v201 = (void *)sub_1000C51B8(v145, v147, (uint64_t *)&v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v142, v143, "No time in todayTimeCandidates is in the future. Not adding next time event. {todayTimeCandidates: %s}", v144, 0xCu);
      swift_arrayDestroy();
      uint64_t v115 = v183;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_1000966BC((uint64_t)v179, (uint64_t *)&unk_100909A40);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v181, v173);
    v139(v186, v115);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v148 = v169;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 32))(v169, v140, v115);
    ((void (*)(char *, uint64_t, uint64_t))v199)(v141, v148, v115);
    uint64_t v149 = Logger.logObject.getter();
    os_log_type_t v150 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v149, v150))
    {
      id v151 = (uint8_t *)swift_slowAlloc();
      id v202 = (void *)swift_slowAlloc();
      *(_DWORD *)id v151 = 136446210;
      uint64_t v152 = Date.description.getter();
      uint64_t v201 = (void *)sub_1000C51B8(v152, v153, (uint64_t *)&v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v139(v141, v183);
      _os_log_impl((void *)&_mh_execute_header, v149, v150, "Scheduling next todayNotification fire date {nextFireDate: %{public}s}", v151, 0xCu);
      swift_arrayDestroy();
      uint64_t v115 = v183;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v139(v141, v115);
    }

    uint64_t v154 = v173;
    uint64_t v155 = v172;
    uint64_t v156 = v169;
    sub_10035BC98(v169);

    v139((char *)v156, v115);
    sub_1000966BC((uint64_t)v179, (uint64_t *)&unk_100909A40);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v181, v154);
    v139(v186, v115);
  }
}

uint64_t sub_10067366C@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *a1;
  uint64_t v12 = sub_1002F0054(v11, a2);

  if (v12)
  {
    id v13 = [v12 displayDate];
    if (v13)
    {
      uint64_t v14 = v13;
      if (([v13 isAllDay] & 1) != 0
        && ((id v15 = [v12 assignmentContext],
             id v16 = [v15 currentAssignment],
             v15,
             !v16)
         || (v16, (sub_10056DE04(0) & 1) != 0)))
      {
        sub_1004D7CEC(v12, a3, (uint64_t)v10);

        uint64_t v17 = type metadata accessor for Date();
        uint64_t v18 = *(void *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, 1, v17) != 1)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a4, v10, v17);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a4, 0, 1, v17);
        }
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
      }
      else
      {
      }
    }
    else
    {
    }
  }
  uint64_t v19 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a4, 1, 1, v19);
}

void sub_1006738C0(void (*a1)(void), uint64_t a2)
{
  uint64_t v94 = a2;
  uint64_t v98 = a1;
  uint64_t v89 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  unint64_t v87 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for RDUserNotificationType();
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  unint64_t v84 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v83 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v6 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for Date();
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v112 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_100094134((uint64_t *)&unk_100920EC0);
  uint64_t v92 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  NSString v109 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for REMRemindersListDataView.TodayGroupModel();
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v95 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v106 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  id v107 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v104 = *(void *)(v11 - 8);
  uint64_t v105 = v11;
  __chkstk_darwin(v11);
  id v103 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v13 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v101 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v96 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v111 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (id *)((char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v110 = v2;
  uint64_t v24 = *(void **)(v2 + 16);
  *uint64_t v23 = v24;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v21 + 8))(v23, v20);
  if (v24)
  {
    if (qword_100907AF8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v81 = v6;
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = sub_10008E2DC(v26, (uint64_t)qword_100920C50);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v31 = v110;
  if (v30)
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "RDTodayNotificationEngine: started updateApplicationBadge", v32, 2u);
    swift_slowDealloc();
  }

  id v33 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(v31 + 120)];
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for REMRemindersListDataView.SortingStyle.default(_:), v15);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v101, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v102);
  (*(void (**)(char *, void, uint64_t))(v104 + 104))(v103, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v105);
  (*(void (**)(char *, void, uint64_t))(v106 + 104))(v107, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), Subtasks);
  REMRemindersListDataView.FetchConfiguration.init(sortingStyle:showCompleted:countCompleted:remindersPrefetch:fetchSubtasks:)();
  uint64_t v34 = v112;
  Date.init()();
  uint64_t v35 = v109;
  static REMRemindersListDataView.fetchToday_Groups(store:grouped:currentLocation:today:configuration:diffingAgainst:)();
  uint64_t Subtasks = v27;
  (*(void (**)(char *, uint64_t))(v99 + 8))(v34, v100);
  uint64_t v41 = v93;
  REMRemindersListDataView.Result.model.getter();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v35, v41);
  uint64_t v42 = REMRemindersListDataView.TodayGroupModel.todayReminders.getter();
  uint64_t v43 = (char *)v42;
  uint64_t v44 = *(void *)(v42 + 16);
  id v80 = v33;
  if (v44)
  {
    NSString v109 = 0;
    id v114 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v45 = v82;
    uint64_t v112 = *(char **)(v83 + 16);
    uint64_t v46 = *(unsigned __int8 *)(v83 + 80);
    id v107 = v43;
    uint64_t v47 = &v43[(v46 + 32) & ~v46];
    uint64_t v48 = *(void *)(v83 + 72);
    uint64_t v49 = (void (**)(char *, uint64_t))(v83 + 8);
    uint64_t v50 = v81;
    do
    {
      ((void (*)(char *, char *, uint64_t))v112)(v50, v47, v45);
      REMRemindersListDataView.ReminderLite.objectID.getter();
      (*v49)(v50, v45);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v47 += v48;
      --v44;
    }
    while (v44);
    unint64_t v51 = (unint64_t)v114;
    swift_bridgeObjectRelease();
    uint64_t v31 = v110;
    id v33 = v80;
    if (!(v51 >> 62)) {
      goto LABEL_15;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (!((unint64_t)&_swiftEmptyArrayStorage >> 62))
    {
LABEL_15:
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      goto LABEL_16;
    }
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  swift_bridgeObjectRetain();
  _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v114 = 0;
  id v53 = [v33 fetchRemindersWithObjectIDs:isa error:&v114];

  id v54 = v114;
  if (v53)
  {
    sub_1000963CC(0, &qword_1009168E0);
    sub_1000E4F40((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
    unint64_t v55 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v56 = v54;

    id v57 = [self daemonUserDefaults];
    unsigned __int8 v58 = [v57 shouldIncludeRemindersDueTodayInBadgeCount];

    if (v58)
    {
      if ((v55 & 0xC000000000000001) != 0) {
        uint64_t v59 = __CocoaDictionary.count.getter();
      }
      else {
        uint64_t v59 = *(void *)(v55 + 16);
      }
    }
    else
    {
      sub_100667088(v55);
      if (v61 >> 62) {
        uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v59 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
    }
    swift_bridgeObjectRelease();
    id v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc();
      id v114 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 136315394;
      uint64_t v65 = Bool.yesno.getter();
      uint64_t v113 = sub_1000C51B8(v65, v66, (uint64_t *)&v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v64 + 12) = 2048;
      uint64_t v113 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Updating application badge. {includeToday: %s, count: %ld}", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v67 = v89;
    uint64_t v68 = v88;
    os_log_t v69 = v87;
    uint64_t v70 = v86;
    uint64_t v71 = v85;
    uint64_t v72 = v84;
    (*(void (**)(char *, void, uint64_t))(v85 + 104))(v84, enum case for RDUserNotificationType.todayNotificationBadge(_:), v86);
    id v73 = sub_10026D9CC(0, 0, 0);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v70);
    id v74 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v59];
    [v73 setBadge:v74];

    (*(void (**)(char *, void, uint64_t))(v68 + 104))(v69, enum case for RDUserNotificationCategory.todayNotificationBadge(_:), v67);
    uint64_t v75 = RDUserNotificationCategory.rawValue.getter();
    uint64_t v77 = v76;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v67);
    uint64_t v78 = swift_allocObject();
    uint64_t v79 = (uint64_t)v98;
    *(void *)(v78 + 16) = v31;
    *(void *)(v78 + 24) = v79;
    *(void *)(v78 + 32) = v94;
    *(unsigned char *)(v78 + 40) = v58;
    *(void *)(v78 + 48) = v59;
    swift_retain();
    sub_1000E4F30(v79);
    sub_10050E738(v75, v77, v73, (uint64_t)sub_1006785D0, v78);

    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v95, v91);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v111, Configuration);
  }
  else
  {
    id v60 = v114;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v95, v91);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v111, Configuration);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      id v114 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      swift_getErrorValue();
      uint64_t v39 = Error.localizedDescription.getter();
      uint64_t v113 = sub_1000C51B8(v39, v40, (uint64_t *)&v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to fetch reminder count. Failed to update today badge {error: %s}", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    if (v98) {
      v98(0);
    }
  }
}

void sub_100674A38(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_100674A8C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)(a2 + 16);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once();
LABEL_4:
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_100920C50);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_getErrorValue();
      uint64_t v20 = Error.localizedDescription.getter();
      uint64_t v29 = sub_1000C51B8(v20, v21, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to post today badge notification. {error: %s}", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!a3) {
        goto LABEL_15;
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      if (!a3)
      {
LABEL_15:
        swift_errorRelease();
        return;
      }
    }
    a3(0);
    goto LABEL_15;
  }
  if (a1)
  {
    swift_errorRetain();
    if (qword_100907AF8 == -1) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10008E2DC(v22, (uint64_t)qword_100920C50);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315394;
    uint64_t v26 = Bool.yesno.getter();
    uint64_t v29 = sub_1000C51B8(v26, v27, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2048;
    uint64_t v29 = a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Posted today badge notification. {includeToday: %s, count: %ld}", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (a3) {
    a3(1);
  }
}

uint64_t sub_100674EE4(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - v6;
  Date.init()();
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  sub_100096408((uint64_t)v7, (uint64_t)v4, (uint64_t *)&unk_100909A40);
  uint64_t v9 = a1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
  swift_beginAccess();
  sub_1000B1CB4((uint64_t)v4, v9, (uint64_t *)&unk_100909A40);
  swift_endAccess();
  sub_1000BF710(v9, (uint64_t)v7, (uint64_t *)&unk_100909A40);
  uint64_t v10 = a1 + 80;
  swift_beginAccess();
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v11 = *(void *)(a1 + 112);
  sub_100096204(v10, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, v12, v11);
  return swift_endAccess();
}

void sub_100675080()
{
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_100920C50);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "RDTodayNotificationEngine: Unexpected .markAsCompleted actions for notification type .todayNotification", v2, 2u);
    swift_slowDealloc();
  }
}

void sub_100675168(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(void))
{
  uint64_t v7 = type metadata accessor for RDUserNotificationAction();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, v4, v7, v9);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v12 == enum case for RDUserNotificationAction.defaultDismiss(_:))
  {
    if (a2) {
      a2();
    }
    return;
  }
  if (v12 == enum case for RDUserNotificationAction.debugDismiss(_:)) {
    return;
  }
  if (v12 != enum case for RDUserNotificationAction.markAsCompleted(_:))
  {
    if (v12 == enum case for RDUserNotificationAction.snoozeForOneHour(_:)
      || v12 == enum case for RDUserNotificationAction.snoozeForOneDay(_:)
      || v12 == enum case for RDUserNotificationAction.snoozeToNextThirds(_:)
      || v12 == enum case for RDUserNotificationAction.snoozeToNextWeekend(_:))
    {
      if (qword_100907AF8 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_10008E2DC(v16, (uint64_t)qword_100920C50);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v17, v18)) {
        goto LABEL_44;
      }
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      uint64_t v20 = "RDTodayNotificationEngine: Unexpected .snooze* actions for today notification";
    }
    else if (v12 == enum case for RDUserNotificationAction.addToReminders(_:))
    {
      if (qword_100907AF8 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_10008E2DC(v21, (uint64_t)qword_100920C50);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v17, v18)) {
        goto LABEL_44;
      }
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      uint64_t v20 = "RDTodayNotificationEngine: Unexpected .addToReminders action for today notification";
    }
    else if (v12 == enum case for RDUserNotificationAction.viewAssignmentInList(_:))
    {
      if (qword_100907AF8 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10008E2DC(v22, (uint64_t)qword_100920C50);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v17, v18)) {
        goto LABEL_44;
      }
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      uint64_t v20 = "RDTodayNotificationEngine: Unexpected .viewAssignmentInList action for today notification";
    }
    else if (v12 == enum case for RDUserNotificationAction.declineAssignment(_:))
    {
      if (qword_100907AF8 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E2DC(v23, (uint64_t)qword_100920C50);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v17, v18)) {
        goto LABEL_44;
      }
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      uint64_t v20 = "RDTodayNotificationEngine: Unexpected .declineAssignment action for today notification";
    }
    else
    {
      if (v12 != enum case for RDUserNotificationAction.viewRemindersInList(_:))
      {
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        return;
      }
      if (qword_100907AF8 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_10008E2DC(v24, (uint64_t)qword_100920C50);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v17, v18)) {
        goto LABEL_44;
      }
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      uint64_t v20 = "RDTodayNotificationEngine: Unexpected .viewRemindersInList action for today notification";
    }
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v20, v19, 2u);
    swift_slowDealloc();
LABEL_44:

    return;
  }
  if (a4) {
    a4();
  }
}

void sub_10067565C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = a2;
  uint64_t v4 = type metadata accessor for RDUserNotificationAction();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v50 + 64);
  __chkstk_darwin(v4);
  __chkstk_darwin(v6);
  uint64_t v8 = &v40[-v7];
  uint64_t v9 = type metadata accessor for REMNotificationIdentifier();
  uint64_t v51 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v49 = &v40[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  id v53 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(a3 + 120)];
  int v12 = (void *)REMStore.fetchReminder(notificationIdentifier:includingDueDateDeltaAlerts:)();
  uint64_t v48 = v5;
  uint64_t v49 = &v40[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v45 = a3;
  uint64_t v13 = v52;
  uint64_t v51 = v4;
  id v14 = v12;
  id v15 = [v14 objectID];
  id v16 = objc_allocWithZone((Class)REMSaveRequest);
  id v47 = [v16 initWithStore:v53];
  id v46 = [v47 updateReminder:v14];
  [v46 snoozeForever];
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100920C50);
  uint64_t v18 = v50;
  uint64_t v19 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v50 + 16);
  uint64_t v20 = v13;
  uint64_t v21 = v51;
  v19(v8, v20, v51);
  id v22 = v15;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  int v25 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v26 = swift_slowAlloc();
    os_log_t v42 = v23;
    uint64_t v27 = v26;
    uint64_t v28 = (void *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    aBlock[0] = v44;
    *(_DWORD *)uint64_t v27 = 138543618;
    int v41 = v25;
    uint64_t v55 = (uint64_t)v22;
    uint64_t v43 = v19;
    id v29 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v28 = v22;

    *(_WORD *)(v27 + 12) = 2082;
    uint64_t v30 = RDUserNotificationAction.rawValue.getter();
    uint64_t v55 = sub_1000C51B8(v30, v31, aBlock);
    uint64_t v18 = v50;
    uint64_t v21 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = v43;
    (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v8, v21);
    os_log_t v32 = v42;
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v41, "RDTodayNotificationEngine: Updating reminder for notification action {reminderID: %{public}@, action: %{public}s}", (uint8_t *)v27, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v8, v21);
  }
  id v33 = v49;
  uint64_t v34 = *(void *)(v45 + 16);
  v19(v49, v52, v21);
  unint64_t v35 = (*(unsigned __int8 *)(v18 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v22;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v18 + 32))(v36 + v35, v33, v21);
  aBlock[4] = (uint64_t)sub_1006784B4;
  aBlock[5] = v36;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000E13D0;
  uint64_t aBlock[3] = (uint64_t)&unk_1008CEDF8;
  os_log_type_t v37 = _Block_copy(aBlock);
  id v38 = v22;
  swift_release();
  id v39 = v47;
  [v47 saveWithQueue:v34 completion:v37];

  _Block_release(v37);
}

void sub_100675E8C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v64 = a2;
  uint64_t v4 = type metadata accessor for RDUserNotificationAction();
  uint64_t v65 = *(void *)(v4 - 8);
  uint64_t v5 = *(char **)(v65 + 64);
  __chkstk_darwin(v4);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v55 - v7;
  uint64_t v9 = (void *)type metadata accessor for REMAnalyticsEvent();
  uint64_t v62 = *(v9 - 1);
  id v63 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMNotificationIdentifier();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v67 = (char *)v12;
  uint64_t v68 = v13;
  __chkstk_darwin(v12);
  unint64_t v61 = (char *)v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v66 = (char *)v55 - v16;
  id v17 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*((void *)a3 + 15)];
  uint64_t v18 = (void *)REMStore.fetchReminder(notificationIdentifier:includingDueDateDeltaAlerts:)();
  id v60 = v8;
  unint64_t v61 = v5;
  unint64_t v66 = a3;
  uint64_t v67 = (char *)v55 - ((unint64_t)(v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = v4;
  id v19 = v18;
  id v20 = [v19 objectID];
  id v58 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:v17];
  id v59 = v19;
  id v21 = [v58 updateReminder:v19];
  type metadata accessor for REMAnalyticsManager();
  static REMAnalyticsManager.shared.getter();
  id v22 = (int *)sub_100094134(&qword_100920EB8);
  uint64_t v23 = &v11[v22[12]];
  os_log_type_t v24 = &v11[v22[16]];
  int v25 = &v11[v22[20]];
  uint64_t v26 = enum case for REMUserOperation.markReminderCompletedNotification(_:);
  uint64_t v27 = type metadata accessor for REMUserOperation();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v11, v26, v27);
  uint64_t v28 = type metadata accessor for Date();
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v24, 1, 1, v28);
  *(void *)int v25 = 0;
  *((void *)v25 + 1) = 0;
  uint64_t v30 = v62;
  id v29 = v63;
  (*(void (**)(char *, void, id))(v62 + 104))(v11, enum case for REMAnalyticsEvent.userOperation(_:), v63);
  REMAnalyticsManager.post(event:)();
  swift_release();
  (*(void (**)(char *, id))(v30 + 8))(v11, v29);
  id v63 = v21;
  [v21 setCompleted:1];
  unint64_t v31 = v17;
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_10008E2DC(v32, (uint64_t)qword_100920C50);
  uint64_t v33 = v64;
  uint64_t v34 = v65;
  unint64_t v35 = v60;
  uint64_t v36 = v68;
  uint64_t v62 = *(void *)(v65 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v62)(v60, v64, v68);
  id v37 = v20;
  id v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    os_log_t v56 = v38;
    os_log_t v42 = (void *)v41;
    v55[1] = v41;
    uint64_t v57 = swift_slowAlloc();
    aBlock[0] = v57;
    *(_DWORD *)uint64_t v40 = 138543618;
    uint64_t v70 = (uint64_t)v37;
    id v43 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_t v42 = v37;

    uint64_t v34 = v65;
    *(_WORD *)(v40 + 12) = 2082;
    uint64_t v44 = v60;
    uint64_t v45 = RDUserNotificationAction.rawValue.getter();
    uint64_t v70 = sub_1000C51B8(v45, v46, aBlock);
    uint64_t v36 = v68;
    uint64_t v33 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v44, v36);
    id v38 = v56;
    _os_log_impl((void *)&_mh_execute_header, v56, v39, "RDTodayNotificationEngine: Updating reminder for notification action {reminderID: %{public}@, action: %{public}s}", (uint8_t *)v40, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
  }

  id v47 = v67;
  uint64_t v48 = *((void *)v66 + 2);
  ((void (*)(char *, uint64_t, uint64_t))v62)(v67, v33, v36);
  unint64_t v49 = (*(unsigned __int8 *)(v34 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = v37;
  (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v50 + v49, v47, v36);
  aBlock[4] = (uint64_t)sub_1006784B4;
  aBlock[5] = v50;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000E13D0;
  uint64_t aBlock[3] = (uint64_t)&unk_1008CEDA8;
  uint64_t v51 = _Block_copy(aBlock);
  id v52 = v37;
  swift_release();
  id v53 = v58;
  [v58 saveWithQueue:v48 completion:v51];

  id v54 = v59;
  _Block_release(v51);
}

uint64_t sub_100676878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v19 - v12;
  Date.init()();
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 0, 1, v14);
  sub_100096408((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_100909A40);
  uint64_t v15 = a1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
  swift_beginAccess();
  sub_1000B1CB4((uint64_t)v10, v15, (uint64_t *)&unk_100909A40);
  swift_endAccess();
  sub_1000BF710(v15, (uint64_t)v13, (uint64_t *)&unk_100909A40);
  swift_beginAccess();
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v17 = *(void *)(a1 + 112);
  sub_100096204(a1 + 80, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, v16, v17);
  swift_endAccess();
  return a4(a2, a3, a1);
}

void sub_100676A3C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RDUserNotificationAction();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v12 = &v35[-v11];
  if (a1)
  {
    swift_errorRetain();
    if (qword_100907AF8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_100920C50);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
    id v14 = a2;
    swift_errorRetain();
    id v15 = v14;
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    int v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v19 = swift_slowAlloc();
      id v37 = (void *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v41 = v39;
      *(_DWORD *)uint64_t v19 = 136446722;
      swift_getErrorValue();
      os_log_t v38 = v16;
      uint64_t v20 = Error.rem_errorDescription.getter();
      uint64_t v40 = sub_1000C51B8(v20, v21, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v19 + 12) = 2114;
      uint64_t v40 = (uint64_t)v15;
      id v22 = v15;
      int v36 = v18;
      id v23 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v37 = v15;

      *(_WORD *)(v19 + 22) = 2082;
      uint64_t v24 = RDUserNotificationAction.rawValue.getter();
      uint64_t v40 = sub_1000C51B8(v24, v25, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
      os_log_t v26 = v38;
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v36, "RDTodayNotificationEngine: Save error. Failed to save updates from notification response {error: %{public}s, reminderID: %{public}@, action: %{public}s}", (uint8_t *)v19, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  else
  {
    if (qword_100907AF8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E2DC(v27, (uint64_t)qword_100920C50);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v12, a3, v6);
    id v28 = a2;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      os_log_t v38 = (os_log_t)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v41 = v39;
      *(_DWORD *)uint64_t v31 = 136446466;
      uint64_t v32 = RDUserNotificationAction.rawValue.getter();
      uint64_t v40 = sub_1000C51B8(v32, v33, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, v6);
      *(_WORD *)(v31 + 12) = 2114;
      uint64_t v40 = (uint64_t)v28;
      id v34 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v38->Class isa = (Class)v28;

      _os_log_impl((void *)&_mh_execute_header, v29, v30, "RDTodayNotificationEngine: Updated reminder successfully. {action: %{public}s, reminderID: %{public}@}", (uint8_t *)v31, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, v6);
    }
  }
}

uint64_t sub_10067702C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  return sub_10067725C(a2, a3, a4, a5, a6);
}

unint64_t *sub_100677044(uint64_t a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100920EF0) - 8;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v9 = (id *)((char *)&v20 - v8);
  uint64_t result = (unint64_t *)&_swiftEmptyArrayStorage;
  id v22 = (unint64_t *)&_swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v20 = v1;
    uint64_t v12 = *(void *)(v7 + 72);
    unint64_t v21 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v13 = a1 + v21;
    id v14 = (unint64_t *)&_swiftEmptyArrayStorage;
    do
    {
      sub_1000BF710(v13, (uint64_t)v9, (uint64_t *)&unk_100920EF0);
      id v15 = [*v9 displayDate];
      if (v15 && (v16 = v15, unsigned int v17 = [v15 isAllDay], v16, v17))
      {
        sub_100096408((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_100920EF0);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1001DEBB8(0, v14[2] + 1, 1);
        }
        id v14 = v22;
        unint64_t v19 = v22[2];
        unint64_t v18 = v22[3];
        if (v19 >= v18 >> 1)
        {
          sub_1001DEBB8(v18 > 1, v19 + 1, 1);
          id v14 = v22;
        }
        v14[2] = v19 + 1;
        sub_100096408((uint64_t)v6, (uint64_t)v14 + v21 + v19 * v12, (uint64_t *)&unk_100920EF0);
      }
      else
      {
        sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100920EF0);
      }
      v13 += v12;
      --v11;
    }
    while (v11);
    return v22;
  }
  return result;
}

uint64_t sub_10067725C(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v124 = a5;
  os_log_type_t v125 = a4;
  uint64_t v126 = a3;
  id v122 = a1;
  uint64_t v6 = type metadata accessor for REMNotificationIdentifier();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v119 = v6;
  uint64_t v120 = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v116 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v100 - v10;
  __chkstk_darwin(v12);
  uint64_t v123 = (uint64_t *)((char *)&v100 - v13);
  uint64_t v14 = sub_100094134(&qword_100920EB0);
  __chkstk_darwin(v14 - 8);
  id v114 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for RDUserNotificationAction();
  uint64_t v117 = *(void *)(v121 - 8);
  uint64_t v16 = *(char **)(v117 + 64);
  __chkstk_darwin(v121);
  uint64_t v113 = (char *)&v100 - ((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v112 = (char *)&v100 - v18;
  __chkstk_darwin(v19);
  uint64_t v111 = (char *)&v100 - v20;
  unint64_t v21 = (void *)type metadata accessor for RDUserNotificationType();
  uint64_t v22 = *(v21 - 1);
  __chkstk_darwin(v21);
  uint64_t v115 = (char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  os_log_t v26 = (char *)&v100 - v25;
  __n128 v28 = __chkstk_darwin(v27);
  os_log_type_t v30 = ((char *)&v100 - v29);
  uint64_t v31 = *(void (**)(char *, uint64_t, void *, __n128))(v22 + 16);
  v31((char *)&v100 - v29, a2, v21, v28);
  int v32 = (*(uint64_t (**)(NSObject *, void *))(v22 + 88))(v30, v21);
  if (v32 == enum case for RDUserNotificationType.reminderAlarm(_:)) {
    goto LABEL_2;
  }
  if (v32 != enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    if (v32 == enum case for RDUserNotificationType.caldavSharedList(_:))
    {
      (*(void (**)(NSObject *, void *))(v22 + 96))(v30, v21);

      goto LABEL_3;
    }
    if (v32 == enum case for RDUserNotificationType.assignmentNotification(_:)
      || v32 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
    {
      (*(void (**)(NSObject *, void *))(v22 + 96))(v30, v21);
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
    if (v32 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
    {
LABEL_2:
      (*(void (**)(NSObject *, void *))(v22 + 8))(v30, v21);
LABEL_3:
      if (qword_100907AF8 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      sub_10008E2DC(v33, (uint64_t)qword_100920C50);
      ((void (*)(char *, uint64_t, void *))v31)(v26, a2, v21);
      id v34 = v122;
      unint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc();
        uint64_t v123 = (void *)swift_slowAlloc();
        uint64_t v126 = swift_slowAlloc();
        v128[0] = v126;
        *(_DWORD *)uint64_t v37 = 136315394;
        ((void (*)(char *, char *, void *))v31)(v115, v26, v21);
        uint64_t v38 = String.init<A>(describing:)();
        uint64_t v127 = sub_1000C51B8(v38, v39, v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void *))(v22 + 8))(v26, v21);
        *(_WORD *)(v37 + 12) = 2112;
        uint64_t v127 = (uint64_t)v34;
        id v40 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v123 = v34;

        _os_log_impl((void *)&_mh_execute_header, v35, v36, "RDTodayNotificationEngine didn't expect to receive actions of this type. {type: %s, response: %@}", (uint8_t *)v37, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, void *))(v22 + 8))(v26, v21);
      }
      goto LABEL_17;
    }
    if (v32 == enum case for RDUserNotificationType.todayNotification(_:))
    {
      if (qword_100907AF8 != -1) {
        swift_once();
      }
      uint64_t v88 = type metadata accessor for Logger();
      sub_10008E2DC(v88, (uint64_t)qword_100920C50);
      uint64_t v22 = v117;
      uint64_t v16 = v111;
      uint64_t v8 = v121;
      (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v111, v126, v121);
      unint64_t v21 = v122;
      os_log_type_t v30 = Logger.logObject.getter();
      os_log_type_t v89 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v89))
      {
        uint64_t v90 = swift_slowAlloc();
        v128[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v90 = 136446466;
        id v91 = [v21 actionIdentifier];
        uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v94 = v93;

        uint64_t v127 = sub_1000C51B8(v92, v94, v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v90 + 12) = 2082;
        uint64_t v95 = v111;
        uint64_t v96 = RDUserNotificationAction.rawValue.getter();
        uint64_t v127 = sub_1000C51B8(v96, v97, v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v95, v121);
        _os_log_impl((void *)&_mh_execute_header, v30, v89, "TodayNotification: Processing notification response {type: .todayNotification, actionIdentifier: %{public}s, action: %{public}s}", (uint8_t *)v90, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_35:

        uint64_t v98 = (uint64_t)v114;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v120 + 56))(v114, 1, 1, v119);
        uint64_t v99 = v118;
        swift_retain();
        sub_100675168(v98, (void (*)(void))sub_1006784A8, v99, sub_100675080);
        swift_release();
        sub_1000966BC(v98, &qword_100920EB0);
        goto LABEL_17;
      }
    }
    else
    {
      if (v32 == enum case for RDUserNotificationType.todayNotificationBadge(_:)
        || v32 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
      {
        goto LABEL_3;
      }
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
    }

    (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v8);
    goto LABEL_35;
  }
  (*(void (**)(NSObject *, void *))(v22 + 96))(v30, v21);
  uint64_t v41 = v119;
  uint64_t v42 = v120;
  id v43 = *(void (**)(uint64_t, char *, uint64_t))(v120 + 32);
  uint64_t v44 = v123;
  uint64_t v110 = v120 + 32;
  id v107 = v43;
  v43((uint64_t)v123, (char *)v30, v119);
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  sub_10008E2DC(v45, (uint64_t)qword_100920C50);
  unint64_t v46 = *(char **)(v42 + 16);
  uint64_t v115 = (char *)(v42 + 16);
  uint64_t v111 = v46;
  ((void (*)(char *, void *, uint64_t))v46)(v11, v44, v41);
  uint64_t v47 = v117;
  uint64_t v48 = v112;
  uint64_t v108 = *(void (**)(char *, uint64_t, uint64_t))(v117 + 16);
  uint64_t v109 = v117 + 16;
  v108(v112, v126, v121);
  id v104 = v122;
  unint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  uint64_t v105 = v49;
  int v102 = v50;
  BOOL v51 = os_log_type_enabled(v49, v50);
  id v52 = v116;
  uint64_t v53 = v41;
  uint64_t v103 = v8;
  if (v51)
  {
    uint64_t v54 = swift_slowAlloc();
    uint64_t v101 = swift_slowAlloc();
    v128[0] = v101;
    *(_DWORD *)uint64_t v54 = 136446722;
    ((void (*)(char *, char *, uint64_t))v111)(v52, v11, v53);
    uint64_t v55 = String.init<A>(describing:)();
    uint64_t v127 = sub_1000C51B8(v55, v56, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v57 = *(void **)(v42 + 8);
    uint64_t v106 = (v42 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    id v122 = v57;
    ((void (*)(char *, uint64_t))v57)(v11, v119);
    *(_WORD *)(v54 + 12) = 2082;
    id v58 = v104;
    id v59 = v48;
    id v60 = [v104 actionIdentifier];
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v63 = v62;

    uint64_t v64 = v61;
    id v52 = v116;
    uint64_t v53 = v119;
    uint64_t v127 = sub_1000C51B8(v64, v63, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 22) = 2082;
    uint64_t v65 = RDUserNotificationAction.rawValue.getter();
    uint64_t v127 = sub_1000C51B8(v65, v66, v128);
    uint64_t v47 = v117;
    uint64_t v42 = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v67 = v59;
    uint64_t v68 = v121;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v67, v121);
    os_log_t v69 = v105;
    _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v102, "TodayNotification: Processing notification response {type: .todayNotificationForSingleReminder, notificationIdentifier: %{public}s, actionIdentifier: %{public}s, action: %{public}s}", (uint8_t *)v54, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v70 = *(void **)(v42 + 8);
    uint64_t v106 = (v42 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    id v122 = v70;
    ((void (*)(char *, uint64_t))v70)(v11, v41);
    id v71 = v104;

    uint64_t v68 = v121;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v121);
  }
  ((void (*)(char *, void *, uint64_t))v111)(v52, v123, v53);
  uint64_t v72 = v42;
  uint64_t v73 = v53;
  id v74 = v113;
  v108(v113, v126, v68);
  uint64_t v75 = *(unsigned __int8 *)(v72 + 80);
  uint64_t v76 = (v75 + 24) & ~v75;
  uint64_t v77 = *(unsigned __int8 *)(v47 + 80);
  uint64_t v78 = (v103 + v77 + v76) & ~v77;
  uint64_t v119 = (uint64_t)&v16[v78];
  uint64_t v117 = v75 | v77 | 7;
  uint64_t v79 = swift_allocObject();
  *(void *)(v79 + 16) = v118;
  id v80 = v107;
  v107(v79 + v76, v52, v73);
  uint64_t v116 = *(char **)(v47 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v116)(v79 + v78, v74, v68);
  ((void (*)(char *, void *, uint64_t))v111)(v52, v123, v73);
  v108(v74, v126, v68);
  uint64_t v81 = swift_allocObject();
  *(void *)(v81 + 16) = v118;
  v80(v81 + v76, v52, v73);
  ((void (*)(uint64_t, char *, uint64_t))v116)(v81 + v78, v74, v121);
  uint64_t v82 = (uint64_t)v114;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v120 + 56))(v114, 1, 1, v73);
  swift_retain_n();
  sub_100675168(v82, (void (*)(void))sub_100678250, v79, (void (*)(void))sub_1006783C4);
  swift_release();
  swift_release();
  sub_1000966BC(v82, &qword_100920EB0);
  ((void (*)(void *, uint64_t))v122)(v123, v73);
LABEL_17:
  if (qword_100907AF8 != -1) {
    swift_once();
  }
  uint64_t v83 = type metadata accessor for Logger();
  sub_10008E2DC(v83, (uint64_t)qword_100920C50);
  unint64_t v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v84, v85))
  {
    uint64_t v86 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v86 = 0;
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "RDTodayNotificationEngine: Completing action handler by calling completionHandler now.", v86, 2u);
    swift_slowDealloc();
  }

  return v125();
}

uint64_t sub_100678250()
{
  return sub_1006783DC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10067565C);
}

uint64_t sub_10067826C()
{
  uint64_t v1 = type metadata accessor for REMNotificationIdentifier();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for RDUserNotificationAction();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1006783C4()
{
  return sub_1006783DC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100675E8C);
}

uint64_t sub_1006783DC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(type metadata accessor for REMNotificationIdentifier() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for RDUserNotificationAction() - 8);
  return sub_100676878(*(void *)(v1 + 16), v1 + v4, v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a1);
}

uint64_t sub_1006784A8()
{
  return sub_100674EE4(v0);
}

uint64_t sub_1006784B4(uint64_t a1)
{
  return sub_100678B5C(a1, (uint64_t (*)(void))&type metadata accessor for RDUserNotificationAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100676A3C);
}

uint64_t sub_1006784E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1006784F0()
{
  return swift_release();
}

uint64_t sub_1006784FC()
{
  uint64_t v1 = type metadata accessor for RDUserNotificationAction();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1006785C8()
{
  return sub_100678DD4(56);
}

void sub_1006785D0(uint64_t a1)
{
  sub_100674A8C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1006785E4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10067366C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_10067860C()
{
  uint64_t v1 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 16) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

void sub_100678774(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for RDUserNotificationCategory() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v7 = *(void *)(v1 + v5);
  unint64_t v8 = *(void *)(v1 + v5 + 8);
  uint64_t v9 = v1 + ((v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  sub_100670FAC(a1, v1 + v4, v7, v8, v9);
}

uint64_t sub_10067885C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_10066E584(a1, *(void *)(v2 + 16), *(void (**)(char *, char *, uint64_t))(v2 + 24), a2);
}

uint64_t sub_100678878()
{
  uint64_t v1 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(void *)(v0 + v5)) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

void sub_100678978(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for RDUserNotificationCategory() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v4;
  unint64_t v8 = *(void (**)(uint64_t))(v1 + v5);
  uint64_t v9 = *(void *)(v1 + v5 + 8);
  uint64_t v10 = (uint64_t *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];

  sub_10066EF1C(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100678A2C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100678A64()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100678B30(uint64_t a1)
{
  return sub_100678B5C(a1, (uint64_t (*)(void))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10066FA8C);
}

uint64_t sub_100678B5C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6, v7);
}

uint64_t sub_100678BE8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100678C20()
{
}

void sub_100678C28(uint64_t a1)
{
  sub_100668B9C(a1, v1);
}

void sub_100678C30()
{
}

void sub_100678C38()
{
}

void sub_100678C40()
{
}

void sub_100678C48()
{
  sub_10066A6E0(*(void *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.todayEngine.start}");
}

uint64_t sub_100678C78()
{
  return sub_10066A500(*(void *)(v0 + 16));
}

uint64_t sub_100678C88()
{
  return sub_100669FBC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100678C90()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100678CC8()
{
  sub_10066A6E0(*(void *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.todayEngine.streamBadgeCountCriteriaObserver}");
}

uint64_t sub_100678CF4()
{
  return sub_1006698CC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100678D00()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100678D40()
{
  sub_10066A6E0(*(void *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.todayEngine.badgeEventStream}");
}

uint64_t sub_100678D64()
{
  return sub_100678DD4(40);
}

uint64_t sub_100678D74()
{
  return sub_100669238(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100678D7C()
{
  sub_10066A6E0(*(void *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.todayEngine.todayNotificationTimeObserver}");
}

uint64_t sub_100678DA0()
{
  return sub_100678DD4(40);
}

void sub_100678DA8()
{
  sub_10066A6E0(*(void *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.todayEngine.bannerTimeEventStream}");
}

uint64_t sub_100678DCC()
{
  return sub_100678DD4(40);
}

uint64_t sub_100678DD4(uint64_t a1)
{
  swift_release();
  if (*(void *)(v1 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v1, a1, 7);
}

void sub_100678E28()
{
  uint64_t v1 = *(void (**)(void))(v0 + 24);
  sub_100671798();
  if (v1) {
    v1();
  }
}

uint64_t sub_100678EBC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100920F20);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100920F20);
  if (qword_1009077B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942370);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100678F84()
{
  id result = [self housekeepingingActivityScheduler];
  qword_100920F38 = (uint64_t)result;
  return result;
}

uint64_t sub_100678FC0()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v49 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v41 - v5;
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100907B08 != -1) {
    swift_once();
  }
  uint64_t v45 = v3;
  BOOL v51 = v6;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  unint64_t v12 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t v11 = v8 + 8;
  uint64_t v48 = v12;
  v12(v10, v7);
  uint64_t v13 = *(void *)(v0 + 16);
  unint64_t v14 = *(void *)(v0 + 24);
  uint64_t v46 = v0;
  uint64_t v15 = qword_100907B00;
  swift_bridgeObjectRetain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v50 = v13;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = sub_10008E2DC(v16, (uint64_t)qword_100920F20);
  swift_bridgeObjectRetain_n();
  uint64_t v44 = v17;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v41 = v10;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v43 = v11;
    unint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v42 = v7;
    uint64_t v55 = v22;
    *(_DWORD *)unint64_t v21 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v23 = v50;
    uint64_t v52 = sub_1000C51B8(v50, v14, &v55);
    uint64_t v10 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s] start execute()", v21, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v42;
    swift_slowDealloc();
    uint64_t v11 = v43;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v23 = v50;
  }
  uint64_t v24 = v51;
  uint64_t v25 = Date.init()();
  v53[0] = 0xD000000000000028;
  v53[1] = 0x80000001007961C0;
  uint64_t v53[3] = 0;
  v54[0] = 0;
  v53[2] = 0;
  *(void *)((char *)v54 + 6) = 0;
  __chkstk_darwin(v25);
  *(&v41 - 4) = v26;
  *(&v41 - 3) = (char *)v23;
  *(&v41 - 2) = (char *)v14;
  uint64_t v27 = v47;
  sub_1003B5ADC((uint64_t)v53, (uint64_t)sub_10067BC5C, (uint64_t)(&v41 - 6));
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v24, v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = v49;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v45, v24, v1);
    swift_bridgeObjectRetain();
    uint64_t v29 = Logger.logObject.getter();
    uint64_t v47 = v1;
    os_log_type_t v30 = v29;
    os_log_type_t v31 = static os_log_type_t.default.getter();
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v33 = v28;
      uint64_t v34 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v55 = v46;
      *(_DWORD *)uint64_t v34 = 136446466;
      LODWORD(v44) = v32;
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_1000C51B8(v50, v14, &v55);
      uint64_t v43 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v34 + 12) = 2048;
      unint64_t v35 = v45;
      Date.rem_elapsedInMilliseconds.getter();
      uint64_t v52 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v37 = *(void (**)(char *, uint64_t))(v33 + 8);
      v37(v35, v47);
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v44, "[%{public}s] end execute(), elapsedSeconds: %f ms", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v37(v51, v47);
    }
    else
    {

      uint64_t v38 = *(void (**)(char *, uint64_t))(v28 + 8);
      uint64_t v39 = v47;
      v38(v45, v47);
      swift_bridgeObjectRelease_n();
      v38(v51, v39);
    }
  }
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return v48(v10, v7);
}

void sub_10067964C(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_100679758(a2, (uint64_t)a1, a3, a4);
  if (v4)
  {
  }
  else
  {
    if ([a1 hasChanges])
    {
      id v12 = 0;
      if ([a1 save:&v12])
      {
        id v10 = v12;
      }
      else
      {
        id v11 = v12;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

void sub_100679758(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v78 = a3;
  uint64_t v68 = a1;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (unint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v13 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = a2;
  unint64_t v14 = sub_10067BFC8();
  unint64_t v16 = v14;
  if (v14 >> 62) {
    goto LABEL_71;
  }
  uint64_t v17 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
  {
LABEL_72:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_3:
  unint64_t v18 = v16 & 0xC000000000000001;
  uint64_t v63 = v16 & 0xFFFFFFFFFFFFFF8;
  unint64_t v62 = v16 + 32;
  uint64_t v79 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  id v74 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v72 = (void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  id v71 = (void (**)(uint64_t, uint64_t))(v11 + 8);
  unint64_t v19 = 0;
  *(void *)&long long v15 = 136446466;
  long long v76 = v15;
  uint64_t v75 = (char *)&type metadata for Any + 8;
  unint64_t v88 = 0x80000001007C6410;
  *(void *)&long long v15 = 136446210;
  long long v64 = v15;
  unint64_t v89 = a4;
  id v80 = (char *)v10;
  unint64_t v67 = v16;
  uint64_t v73 = v13;
  uint64_t v66 = v17;
  unint64_t v65 = v16 & 0xC000000000000001;
  while (1)
  {
    if (v18)
    {
      id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v19 >= *(void *)(v63 + 16)) {
        goto LABEL_74;
      }
      id v20 = *(id *)(v62 + 8 * v19);
    }
    id v87 = v20;
    BOOL v21 = __OFADD__(v19, 1);
    uint64_t v11 = v19 + 1;
    if (v21) {
      goto LABEL_70;
    }
    id v22 = [v87 remObjectID];
    if (!v22) {
      break;
    }
    uint64_t v69 = v11;
    id v70 = v22;
    unint64_t v23 = (unint64_t)sub_10067A474(v85, v22);
    if (v5)
    {

      goto LABEL_72;
    }
    uint64_t v13 = v23;
    uint64_t v86 = 0;
    unint64_t v95 = (unint64_t)_swiftEmptyArrayStorage;
    if (v23 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v24) {
        goto LABEL_46;
      }
LABEL_14:
      if (v24 >= 1)
      {
        uint64_t v25 = 0;
        unint64_t v26 = v13 & 0xC000000000000001;
        unint64_t v83 = v24;
        while (1)
        {
          if (v26) {
            id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v27 = *(id *)(v13 + 8 * v25 + 32);
          }
          uint64_t v28 = v27;
          *(void *)&long long v91 = 0xD000000000000024;
          *((void *)&v91 + 1) = v88;
          id v29 = [v27 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
          swift_unknownObjectRelease();
          if (v29)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            long long v91 = 0u;
            long long v92 = 0u;
          }
          sub_1000D6CBC((uint64_t)&v91, (uint64_t)&v93);
          if (v94)
          {
            if (swift_dynamicCast())
            {
              unint64_t v30 = v26;
              int v31 = v90;
              *(void *)&long long v91 = 0x696669746E656469;
              *((void *)&v91 + 1) = 0xEA00000000007265;
              id v32 = [v28 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
              swift_unknownObjectRelease();
              if (v32)
              {
                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
              }
              else
              {
                long long v91 = 0u;
                long long v92 = 0u;
              }
              sub_1000D6CBC((uint64_t)&v91, (uint64_t)&v93);
              if (v94)
              {
                uint64_t v33 = (uint64_t)v80;
                uint64_t v34 = v84;
                int v35 = swift_dynamicCast();
                (*v79)(v33, v35 ^ 1u, 1, v34);
                if ((*v74)(v33, 1, v34) != 1)
                {
                  uint64_t v36 = v73;
                  (*v72)(v73, v33, v84);
                  if (v31)
                  {
                    if (qword_100907B00 != -1) {
                      swift_once();
                    }
                    uint64_t v37 = type metadata accessor for Logger();
                    sub_10008E2DC(v37, (uint64_t)qword_100920F20);
                    swift_bridgeObjectRetain_n();
                    uint64_t v38 = Logger.logObject.getter();
                    os_log_type_t v39 = static os_log_type_t.default.getter();
                    unint64_t v26 = v30;
                    if (os_log_type_enabled(v38, v39))
                    {
                      uint64_t v40 = swift_slowAlloc();
                      uint64_t v93 = swift_slowAlloc();
                      *(_DWORD *)uint64_t v40 = v64;
                      swift_bridgeObjectRetain();
                      *(void *)(v40 + 4) = sub_1000C51B8(v78, v89, &v93);
                      swift_bridgeObjectRelease_n();
                      _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%{public}s] found existing an list that is already suggested to be converted into a grocery list.", (uint8_t *)v40, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      a4 = v89;
                      swift_slowDealloc();
                    }
                    else
                    {
                      swift_bridgeObjectRelease_n();
                    }

                    (*v71)(v73, v84);
                    uint64_t v24 = v83;
                  }
                  else
                  {
                    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
                    uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
                    Class isa = UUID._bridgeToObjectiveC()().super.isa;
                    id v43 = [ObjCClassFromMetadata objectIDWithUUID:isa];

                    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                    unint64_t v26 = v30;
                    if (*(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v95 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();

                    (*v71)(v36, v84);
                    a4 = v89;
                    uint64_t v24 = v83;
                  }
                  goto LABEL_17;
                }
              }
              else
              {
                sub_1000966BC((uint64_t)&v93, &qword_100908190);
                uint64_t v33 = (uint64_t)v80;
                (*v79)((uint64_t)v80, 1, 1, v84);
              }

              sub_1000966BC(v33, (uint64_t *)&unk_100909E50);
              unint64_t v26 = v30;
              uint64_t v24 = v83;
            }
            else
            {
            }
          }
          else
          {

            sub_1000966BC((uint64_t)&v93, &qword_100908190);
          }
LABEL_17:
          if (v24 == ++v25)
          {
            swift_bridgeObjectRelease();
            unint64_t v10 = v95;
            goto LABEL_47;
          }
        }
      }
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      swift_once();
      goto LABEL_65;
    }
    uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v24) {
      goto LABEL_14;
    }
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_47:
    uint64_t v5 = v86;
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v44)
      {
LABEL_49:
        uint64_t v82 = type metadata accessor for RDGroceryOperationQueue();
        unint64_t v83 = v10 & 0xC000000000000001;
        uint64_t v13 = 4;
        uint64_t v77 = (char *)v10;
        uint64_t v81 = v44;
        while (1)
        {
          uint64_t v11 = v13 - 4;
          id v45 = v83 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v10 + 8 * v13);
          uint64_t v46 = v45;
          unint64_t v16 = v13 - 3;
          if (__OFADD__(v11, 1)) {
            break;
          }
          id v47 = v45;
          id v48 = sub_1005EB4CC(v46, 0, 1, (uint64_t)v87, v85);
          if (v5)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return;
          }
          uint64_t v49 = v48;

          if (qword_100907B00 != -1) {
            swift_once();
          }
          uint64_t v50 = type metadata accessor for Logger();
          sub_10008E2DC(v50, (uint64_t)qword_100920F20);
          swift_bridgeObjectRetain_n();
          id v51 = v47;
          uint64_t v52 = Logger.logObject.getter();
          os_log_type_t v53 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v52, v53))
          {
            uint64_t v54 = swift_slowAlloc();
            uint64_t v55 = swift_slowAlloc();
            uint64_t v86 = 0;
            unint64_t v56 = (void *)v55;
            uint64_t v93 = swift_slowAlloc();
            *(_DWORD *)uint64_t v54 = v76;
            swift_bridgeObjectRetain();
            *(void *)(v54 + 4) = sub_1000C51B8(v78, v89, &v93);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v54 + 12) = 2114;
            *(void *)(v54 + 14) = v51;
            *unint64_t v56 = v46;

            _os_log_impl((void *)&_mh_execute_header, v52, v53, "[%{public}s] inserted grocery operation queue item for determine whether to suggest to convert this list into a grocery list {listObjectID: %{public}@", (uint8_t *)v54, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            uint64_t v5 = v86;
            swift_slowDealloc();
            swift_arrayDestroy();
            unint64_t v10 = (unint64_t)v77;
            swift_slowDealloc();
            a4 = v89;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          ++v13;
          if (v16 == v81) {
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        if (!v17) {
          goto LABEL_72;
        }
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v44 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v44) {
        goto LABEL_49;
      }
    }
LABEL_4:

    swift_bridgeObjectRelease();
    unint64_t v19 = v69;
    unint64_t v16 = v67;
    unint64_t v18 = v65;
    if (v69 == v66) {
      goto LABEL_72;
    }
  }
  swift_bridgeObjectRelease();
  if (qword_100907B00 != -1) {
    goto LABEL_75;
  }
LABEL_65:
  uint64_t v57 = type metadata accessor for Logger();
  sub_10008E2DC(v57, (uint64_t)qword_100920F20);
  unint64_t v58 = v89;
  swift_bridgeObjectRetain_n();
  id v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = (uint8_t *)swift_slowAlloc();
    uint64_t v93 = swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = v64;
    swift_bridgeObjectRetain();
    *(void *)&long long v91 = sub_1000C51B8(v78, v58, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "[%{public}s] found no accounts that support grocery lists. Not suggesting grocery list conversion.", v61, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void *sub_10067A474(uint64_t a1, void *a2)
{
  v33[1] = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = _s10PredicatesOMa_1();
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v9 = a2;
  swift_storeEnumTagMultiPayload();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v11 = a2;
  id v12 = [ObjCClassFromMetadata cdEntityName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v15 = [v13 initWithEntityName:v14];

  [v15 setResultType:2];
  unint64_t v16 = (void *)sub_100535B3C();
  [v15 setPredicate:v16];

  id v17 = [v11 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  BOOL v21 = *(void **)(v33[3] + 32);
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v21 storeForAccountIdentifier:v22];

  if (v23)
  {
    swift_bridgeObjectRelease();
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_10077A530;
    *(void *)(v24 + 32) = v23;
    v33[11] = v24;
    specialized Array._endMutation()();
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    id v25 = v23;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v15 setAffectedStores:isa];

    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_100776E80;
    *(void *)(v27 + 32) = 0x696669746E656469;
    *(void *)(v27 + 40) = 0xEA00000000007265;
    *(void *)(v27 + 88) = &type metadata for String;
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = 0xD000000000000024;
    *(void *)(v27 + 72) = 0x80000001007C6410;
    Class v28 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v15 setPropertiesToFetch:v28];

    sub_1000963CC(0, &qword_10090E4F0);
    id v29 = NSManagedObjectContext.fetch<A>(_:)();
    sub_1000ECFE0((uint64_t)v9);
  }
  else
  {
    id v29 = self;
    sub_100094134((uint64_t *)&unk_10090A490);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)(inited + 32) = v18;
    *(void *)(inited + 40) = v20;
    sub_10012674C(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    Class v31 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v29 accountStoreMissingError:v31];

    swift_willThrow();
    sub_1000ECFE0((uint64_t)v9);
  }
  return v29;
}

uint64_t sub_10067A940()
{
  swift_bridgeObjectRelease();

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 40);

  return swift_deallocClassInstance();
}

uint64_t sub_10067A988()
{
  return sub_100678FC0();
}

uint64_t sub_10067A9AC()
{
  uint64_t v1 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - v4;
  uint64_t v6 = (void *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_userDefaults);
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_userDefaults + 24);
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_userDefaults + 32);
  sub_1000C0DE0((void *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_userDefaults), v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8))
  {
    if (qword_100907B00 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100920F20);
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_12;
    }
    id v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v12 = 0;
    id v13 = "RDSuggestConversionToGroceryListActivity: not executing because the user already dismissed a grocery tip.";
    goto LABEL_11;
  }
  uint64_t v14 = v6[3];
  uint64_t v15 = v6[4];
  sub_1000C0DE0(v6, v14);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15) & 1) == 0)
  {
    static Locale.current.getter();
    Locale.identifier.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    type metadata accessor for REMGroceryDummyModel();
    char v17 = static REMGroceryDummyModel.isSupported(localeIdentifier:)();
    swift_bridgeObjectRelease();
    return v17 & 1;
  }
  if (qword_100907B00 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_10008E2DC(v16, (uint64_t)qword_100920F20);
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v12 = 0;
    id v13 = "RDSuggestConversionToGroceryListActivity: not executing because the user already created a grocery list.";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v13, v12, 2u);
    swift_slowDealloc();
  }
LABEL_12:

  char v17 = 0;
  return v17 & 1;
}

unint64_t sub_10067AE40()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_identifier);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_identifier + 8);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x746973796261622ELL;
  v4._object = (void *)0xEB00000000726574;
  String.append(_:)(v4);
  return 0xD000000000000012;
}

double sub_10067AF68()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_1000C0DE0(v0, v1);
  Swift::String v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  [v3 doubleValue];
  double v5 = v4;

  return v5;
}

uint64_t sub_10067AFE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100096838(a1, (uint64_t)v20);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDSuggestConversionToGroceryListActivity();
  if (swift_dynamicCast())
  {

    swift_beginAccess();
    sub_100096838(v2 + 16, (uint64_t)v16);
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    sub_1000C0DE0(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
  }
  else
  {
    if (qword_100907B00 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_100920F20);
    sub_100096838(a1, (uint64_t)v16);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
      id v19 = (id)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v11 = 136446210;
      sub_100096838((uint64_t)v16, (uint64_t)v15);
      uint64_t v12 = String.init<A>(describing:)();
      v15[0] = sub_1000C51B8(v12, v13, (uint64_t *)&v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDSuggestConversionToGroceryListExecutionDateStorage.lastExecutedDate(for:) must work with RDSuggestConversionToGroceryListActivity only {executable: %{public}s}", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
    uint64_t v14 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t sub_10067B28C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100096838(a1, (uint64_t)v22);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDSuggestConversionToGroceryListActivity();
  if (swift_dynamicCast())
  {

    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    swift_beginAccess();
    uint64_t v10 = *(void *)(v2 + 40);
    uint64_t v11 = *(void *)(v2 + 48);
    sub_100096204(v2 + 16, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, v10, v11);
    swift_endAccess();
  }
  else
  {
    if (qword_100907B00 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_100920F20);
    sub_100096838(a1, (uint64_t)v21);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      sub_100096838((uint64_t)v21, (uint64_t)v19);
      uint64_t v16 = String.init<A>(describing:)();
      v19[0] = (id)sub_1000C51B8(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDSuggestConversionToGroceryListExecutionDateStorage.updateLastExecutedDate(for:) must work with RDSuggestConversionToGroceryListActivity only {executable: %{public}s}", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
    }
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
}

uint64_t sub_10067B5B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10067AFE0(a1, a2);
}

uint64_t sub_10067B5D8(uint64_t a1, uint64_t a2)
{
  return sub_10067B28C(a1, a2);
}

uint64_t sub_10067B6FC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_executable);
  a1[3] = type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListActivityExecutable();
  a1[4] = &off_1008CF358;
  a1[5] = &off_1008CF368;
  *a1 = v3;

  return swift_retain();
}

uint64_t sub_10067B760()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations + 24);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations + 32);
  sub_1000C0DE0(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 8))(v2);
}

uint64_t sub_10067B7B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BF710(v1 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_rateReducerConfiguration, a1, (uint64_t *)&unk_10090EEB0);
}

uint64_t sub_10067B7E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_babysitter;
  swift_beginAccess();
  return sub_1000BF710(v3, a1, (uint64_t *)&unk_10090E4D0);
}

uint64_t sub_10067B844@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (char *)*v2 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations;
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[4];
  sub_1000C0DE0(v6, v7);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(double (**)(uint64_t, uint64_t))(v9 + 8);
  id v11 = v5;
  double v12 = v10(v7, v9);
  uint64_t v17 = a1;
  uint64_t v18 = &off_1008CF3A8;
  *(void *)&long long v16 = v11;
  uint64_t v13 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  uint64_t v14 = swift_allocObject();
  uint64_t result = sub_1000967D4(&v16, v14 + 16);
  *(double *)(v14 + 56) = v12;
  a2[3] = v13;
  a2[4] = (uint64_t)&off_1008C8B10;
  *a2 = v14;
  return result;
}

uint64_t sub_10067B928()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10067B968@<X0>(uint64_t a1@<X8>)
{
  return sub_100096838(*v1 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_executionDateStorage, a1);
}

uint64_t sub_10067B994@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 suggestConversionToGroceryListLastExecutionDate];
  if (v3)
  {
    double v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_10067BA5C(uint64_t a1)
{
  id v3 = *v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  Class v7 = 0;
  if (v6 != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    Class v7 = isa;
  }
  Class v9 = v7;
  [v3 setSuggestConversionToGroceryListLastExecutionDate:];
}

id sub_10067BB60()
{
  return [*v0 hasCreatedGroceryList];
}

id sub_10067BB84()
{
  return [*v0 groceryTipDismissed];
}

id sub_10067BBA8()
{
  return [*v0 suggestConversionToGroceryListDefaultThrottleInterval];
}

id sub_10067BBB8()
{
  id v1 = [*v0 suggestConversionToGroceryListRateReduceFactor];

  return v1;
}

uint64_t type metadata accessor for RDSuggestConversionToGroceryListActivity()
{
  return self;
}

uint64_t type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListActivityExecutable()
{
  return self;
}

uint64_t type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListExecutionDateStorage()
{
  return self;
}

void sub_10067BC5C(void *a1)
{
  sub_10067964C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10067BC7C()
{
  uint64_t v0 = (void *)sub_1003AD42C(3uLL, 0, 7);
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  specialized Array._endMutation()();
  uint64_t v2 = (void *)sub_1003BC0CC(inited, 0, 0, (uint64_t)v0);
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10077A530;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  *(void *)(v3 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  specialized Array._endMutation()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 setSortDescriptors:isa];

  sub_1000963CC(0, &qword_10090ABC0);
  uint64_t v5 = NSManagedObjectContext.fetch<A>(_:)();

  return v5;
}

unint64_t sub_10067BFC8()
{
  unint64_t result = sub_10067BC7C();
  unint64_t v1 = result;
  if (!(result >> 62))
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_16;
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    goto LABEL_30;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v4 = *(id *)(v1 + 8 * i + 32);
    }
    uint64_t v5 = v4;
    id v6 = [objc_allocWithZone((Class)REMAccountCapabilities) initWithAccountType:(int)[v4 type]];
    unsigned int v7 = [v6 supportsGroceriesList];

    if (v7)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
    goto LABEL_27;
  }
LABEL_16:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    uint64_t v8 = _swiftEmptyArrayStorage[2];
    unint64_t result = swift_retain();
    if (!v8)
    {
LABEL_28:
      swift_release();
      swift_release();
      return (unint64_t)_swiftEmptyArrayStorage;
    }
    goto LABEL_18;
  }
LABEL_27:
  swift_retain();
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_28;
  }
LABEL_18:
  if (v8 >= 1)
  {
    for (uint64_t j = 0; j != v8; ++j)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = (id)_swiftEmptyArrayStorage[j + 4];
      }
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListRateReducer()
{
  return &type metadata for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListRateReducer;
}

unint64_t sub_10067C254(uint64_t a1)
{
  unint64_t result = sub_10067C27C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10067C27C()
{
  unint64_t result = qword_1009211B0;
  if (!qword_1009211B0)
  {
    type metadata accessor for REMListPickerDataView.Invocation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009211B0);
  }
  return result;
}

uint64_t sub_10067C2D4@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  v22[3] = a2;
  uint64_t v5 = type metadata accessor for REMAccountsListDataView.Model.Account();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMListPickerDataView.PickerMode();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  double v12 = (void **)((char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  REMListPickerDataView.Invocation.Parameters.pickerMode.getter();
  int v13 = (*(uint64_t (**)(void **, uint64_t))(v10 + 88))(v12, v9);
  if (v13 == enum case for REMListPickerDataView.PickerMode.specificAccount(_:))
  {
    (*(void (**)(void **, uint64_t))(v10 + 96))(v12, v9);
    uint64_t v14 = *v12;
    sub_100121F2C();
    uint64_t v15 = REMAccountsListDataView.Model.Account.account.getter();
    id v16 = [(id)v15 objectID];

    LOBYTE(v15) = static NSObject.== infix(_:_:)();
    if ((v15 & 1) == 0) {
      goto LABEL_8;
    }
LABEL_7:
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    REMListPickerDataView.Model.Account.init(account:shouldIncludeCustomSmartLists:)();
    uint64_t v19 = type metadata accessor for REMListPickerDataView.Model.Account();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a3, 0, 1, v19);
  }
  if (v13 == enum case for REMListPickerDataView.PickerMode.allAccounts(_:)) {
    goto LABEL_7;
  }
  if (v13 != enum case for REMListPickerDataView.PickerMode.cloudKitOnlyAccounts(_:))
  {
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return result;
  }
  uint64_t v17 = REMAccountsListDataView.Model.Account.account.getter();
  id v18 = [(id)v17 capabilities];

  LOBYTE(v17) = [v18 supportsSubtasks];
  if (v17) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v21 = type metadata accessor for REMListPickerDataView.Model.Account();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a3, 1, 1, v21);
}

uint64_t sub_10067C5EC(NSObject *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class v28 = a2;
  uint64_t v29 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v6 = type metadata accessor for REMAccountsListDataView.Model();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Options = type metadata accessor for REMAccountsListDataView.FetchOptions();
  uint64_t v10 = *(void *)(Options - 8);
  __chkstk_darwin(Options);
  double v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for REMAccountsListDataView.Invocation.Result();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for REMAccountsListDataView.Invocation();
  id v17 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  static REMAccountsListDataView.FetchOptions.accountsOnly.getter();
  uint64_t v18 = v30;
  sub_10045D760(a1, v29, v28, (uint64_t)v12, (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, Options);

  if (!v18)
  {
    REMAccountsListDataView.Invocation.Result.model.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v19 = REMAccountsListDataView.Model.accounts.getter();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v25);
    uint64_t v20 = v26;
    uint64_t v21 = REMListPickerDataView.Invocation.Parameters.shouldIncludeCustomSmartLists.getter();
    __chkstk_darwin(v21);
    *(&v24 - 2) = v20;
    *((unsigned char *)&v24 - 8) = v22 & 1;
    uint64_t v13 = (uint64_t)sub_1003B32C8((void (*)(void))sub_10067C8E8, (uint64_t)(&v24 - 4), v19);
    swift_bridgeObjectRelease();
  }
  return v13;
}

uint64_t sub_10067C8E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10067C2D4(a1, *(unsigned __int8 *)(v2 + 24), a2);
}

uint64_t type metadata accessor for RDManagedObjectIDCache(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_1009211B8);
}

uint64_t sub_10067C928()
{
  return sub_100387708();
}

uint64_t sub_10067C938()
{
  return type metadata accessor for RDManagedObjectIDCache(0);
}

uint64_t type metadata accessor for RDPrimaryActiveCloudKitAccountManagedObjectIDCache(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100921268);
}

uint64_t sub_10067C960()
{
  return sub_100387708();
}

uint64_t sub_10067C96C()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v13 = *(void *)(v0 - 8);
  uint64_t v14 = v0;
  __chkstk_darwin(v0);
  double v12 = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  active = (void *)type metadata accessor for RDPrimaryActiveCloudKitAccountManagedObjectIDCache(0);
  sub_100094134(&qword_100921398);
  uint64_t v8 = String.init<A>(reflecting:)();
  v11[0] = v9;
  v11[1] = v8;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v4);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static DispatchQoS.unspecified.getter();
  active = _swiftEmptyArrayStorage;
  sub_1001D5428();
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1001D5480();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v14);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  swift_allocObject();
  uint64_t result = REMCache.init(cacheQueue:countLimit:)();
  qword_100942618 = result;
  return result;
}

uint64_t sub_10067CC88()
{
  return type metadata accessor for RDPrimaryActiveCloudKitAccountManagedObjectIDCache(0);
}

uint64_t sub_10067CC90(uint64_t a1)
{
  swift_getObjectType();
  sub_1000E6E80(a1, (uint64_t)v8);
  if (!v9)
  {
    sub_1000F5B8C((uint64_t)v8);
    goto LABEL_7;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    char v5 = 0;
    return v5 & 1;
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090C120);
  id v2 = *(id *)&v7[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID];
  char v3 = static NSObject.== infix(_:_:)();

  if ((v3 & 1) == 0)
  {

    goto LABEL_7;
  }
  id v4 = *(id *)&v7[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID];
  char v5 = static NSObject.== infix(_:_:)();

  return v5 & 1;
}

uint64_t sub_10067CEE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)&double v4 = __chkstk_darwin(v2).n128_u64[0];
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID), "uuid", v4));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v20 = v8;
  uint64_t v21 = v10;
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 24415;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = v20;
  uint64_t v13 = v21;
  id v14 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID), "stringRepresentation"));
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = v16;

  uint64_t v20 = v12;
  uint64_t v21 = v13;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t type metadata accessor for RDPredefinedObjectKey()
{
  return self;
}

uint64_t type metadata accessor for RDPredefinedManagedObjectIDCache(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_1009212F0);
}

uint64_t sub_10067D138()
{
  return sub_100387708();
}

uint64_t sub_10067D144()
{
  return type metadata accessor for RDPredefinedManagedObjectIDCache(0);
}

uint64_t type metadata accessor for RDPredefinedSmartListAndManualOrderingManagedObjectIDCache(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100921340);
}

uint64_t sub_10067D16C()
{
  return sub_100387708();
}

uint64_t sub_10067D178()
{
  uint64_t result = sub_10067D198();
  qword_100942620 = result;
  return result;
}

uint64_t sub_10067D198()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v15 = *(void *)(v0 - 8);
  uint64_t v16 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  id v17 = (void *)type metadata accessor for RDPredefinedManagedObjectIDCache(0);
  sub_100094134(&qword_100921390);
  uint64_t v9 = String.init<A>(reflecting:)();
  v14[1] = v10;
  v14[2] = v9;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v5);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  id v17 = _swiftEmptyArrayStorage;
  sub_1001D5428();
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1001D5480();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v16);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v11 = *(void *)(static REMSmartList.NonCustom.allCases.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(static REMManualOrdering.Predefined.allCases.getter() + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for RDPredefinedSmartListAndManualOrderingManagedObjectIDCache(0);
    swift_allocObject();
    return REMCache.init(cacheQueue:countLimit:)();
  }
  return result;
}

uint64_t sub_10067D4CC()
{
  return type metadata accessor for RDPredefinedSmartListAndManualOrderingManagedObjectIDCache(0);
}

uint64_t sub_10067D4D8()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077DE90;
  *(void *)(v0 + 32) = swift_getKeyPath();
  *(void *)(v0 + 40) = swift_getKeyPath();
  *(void *)(v0 + 48) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  if ((v0 & 0x8000000000000000) != 0 || (v0 & 0x4000000000000000) != 0)
  {
    uint64_t v2 = (uint64_t)sub_10020989C(v0);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = v0 & 0xFFFFFFFFFFFFFF8;
  }
  qword_100942668 = v2;
  return result;
}

uint64_t sub_10067D590(uint64_t a1)
{
  return sub_10067D6A8(a1, (uint64_t)&unk_100796620, (uint64_t (*)(uint64_t))sub_10020989C, &qword_100942670);
}

uint64_t sub_10067D5B8(uint64_t a1)
{
  return sub_10067D6A8(a1, (uint64_t)&unk_100796718, (uint64_t (*)(uint64_t))sub_10020AE00, &qword_100942678);
}

uint64_t sub_10067D5E0(uint64_t a1)
{
  return sub_10067D6A8(a1, (uint64_t)&unk_1007966F0, (uint64_t (*)(uint64_t))sub_10020ACDC, &qword_100942680);
}

uint64_t sub_10067D608(uint64_t a1)
{
  return sub_10067D6A8(a1, (uint64_t)&unk_100796768, (uint64_t (*)(uint64_t))sub_10020B0B8, &qword_100942688);
}

uint64_t sub_10067D630(uint64_t a1)
{
  return sub_10067D6A8(a1, (uint64_t)&unk_100796740, (uint64_t (*)(uint64_t))sub_10020B0B8, &qword_100942690);
}

uint64_t sub_10067D658(uint64_t a1)
{
  return sub_10067D6A8(a1, (uint64_t)&unk_1007965F8, (uint64_t (*)(uint64_t))sub_100209EF4, &qword_100942698);
}

uint64_t sub_10067D680(uint64_t a1)
{
  return sub_10067D6A8(a1, (uint64_t)&unk_1007965C0, (uint64_t (*)(uint64_t))sub_100209EF4, &qword_1009426A0);
}

uint64_t sub_10067D6A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4)
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10077A530;
  *(void *)(v6 + 32) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  if (v6 < 0 || (v6 & 0x4000000000000000) != 0)
  {
    uint64_t v8 = a3(v6);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
  }
  *a4 = v8;
  return result;
}

uint64_t sub_10067D750(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v16 - v10;
  id v12 = [a1 identifier];
  if (v12)
  {
    uint64_t v13 = v12;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v9, 0, 1, v2);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, 1, 1, v2);
  }
  sub_100096408((uint64_t)v9, (uint64_t)v11, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2))
  {
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v11, v2);
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
    uint64_t v14 = UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v14;
}

uint64_t sub_10067D978(void *a1, uint64_t a2, void *a3)
{
  id v5 = [a1 personID];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  sub_1001AD554(a2, (uint64_t)&v30);
  if (v31)
  {
    sub_1000967D4(&v30, (uint64_t)v32);
    id v10 = [a3 externalIdentifier];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      uint64_t v15 = v33;
      uint64_t v16 = v34;
      sub_1000C0DE0(v32, v33);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 16))(v12, v14, v15, v16);
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      if (v19)
      {
        *(void *)&long long v30 = v7;
        *((void *)&v30 + 1) = v9;
        swift_bridgeObjectRetain();
        v20._uint64_t countAndFlagsBits = 124;
        v20._object = (void *)0xE100000000000000;
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v21._uint64_t countAndFlagsBits = v17;
        v21._object = v19;
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = v30;
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v32);
        return v22;
      }
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v32);
  }
  else
  {
    sub_1000966BC((uint64_t)&v30, &qword_1009186E0);
  }
  id v23 = [a3 externalIdentifier];
  if (v23)
  {
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    v32[0] = v7;
    v32[1] = v9;
    swift_bridgeObjectRetain();
    v27._uint64_t countAndFlagsBits = 124;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v28._uint64_t countAndFlagsBits = v24;
    v28._object = v26;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v32[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_10067DBB8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10067DC70()
{
  return type metadata accessor for RDElementManualSortID();
}

uint64_t type metadata accessor for RDElementManualSortID()
{
  uint64_t result = qword_1009213C8;
  if (!qword_1009213C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10067DCC4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10067DD6C(uint64_t *a1, uint64_t *a2)
{
  return sub_10067DD78(*a1, *a2);
}

uint64_t sub_10067DD78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v3)
  {
    if (!v4) {
      return 0;
    }
    BOOL v5 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && v3 == v4;
    if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
  }
  else if (v4)
  {
    return 0;
  }
  if (static UUID.== infix(_:_:)())
  {
    sub_100121F2C();
    return static NSObject.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t sub_10067DE1C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  id v14 = [a1 identifier];
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_7;
  }
  uint64_t v15 = v14;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v16(v6, v11, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_7:

    sub_1000966BC(a2, &qword_1009186E0);
    sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
    return 0;
  }
  v16(v13, v6, v7);
  id v17 = [a1 account];
  if (!v17)
  {
LABEL_9:

    sub_1000966BC(a2, &qword_1009186E0);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return 0;
  }
  Swift::String v18 = v17;
  id v19 = [v17 remObjectID];
  if (!v19)
  {

    goto LABEL_9;
  }
  id v43 = v19;
  uint64_t v37 = (void (*)(uint64_t, char *, uint64_t))v16;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = a1;
  sub_1001AD554(a2, (uint64_t)&v46);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v18;
  sub_100096408((uint64_t)&v46, v20 + 24, &qword_1009186E0);
  *(void *)(v20 + 64) = a1;
  id v42 = a1;
  id v39 = v18;
  id v44 = [v39 accountTypeHost];
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10067E864;
  *(void *)(v21 + 24) = v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10067E864;
  *(void *)(v22 + 24) = v20;
  uint64_t v23 = swift_allocObject();
  uint64_t v38 = a2;
  uint64_t v24 = v45;
  *(void *)(v23 + 16) = sub_10067E80C;
  *(void *)(v23 + 24) = v24;
  swift_retain_n();
  swift_retain();
  uint64_t v40 = v23;
  uint64_t v41 = v22;
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  sub_1000966BC(v38, &qword_1009186E0);
  uint64_t v26 = v46;
  Swift::String v27 = v47;
  id v44 = v47;
  uint64_t v45 = v46;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  type metadata accessor for RDElementManualSortID();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v26;
  *(void *)(v28 + 24) = v27;
  v37(v28 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID, v11, v7);
  uint64_t v29 = v43;
  *(void *)(v28 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID) = v43;
  swift_setDeallocating();
  uint64_t v30 = v28 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  id v32 = v29;
  v31(v30, v7);

  swift_deallocClassInstance();
  uint64_t v33 = v37;
  v37((uint64_t)v11, v13, v7);
  uint64_t v34 = swift_allocObject();
  id v35 = v44;
  *(void *)(v34 + 16) = v45;
  *(void *)(v34 + 24) = v35;
  v33(v34 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID, v11, v7);
  *(void *)(v34 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID) = v32;
  return v34;
}

uint64_t sub_10067E48C(void *a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  id v12 = [a1 identifier];
  if (!v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_7;
  }
  uint64_t v13 = v12;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v14(v4, v9, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_7:

    sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909E50);
    return 0;
  }
  v14(v11, v4, v5);
  id v15 = [a1 account];
  if (!v15)
  {

LABEL_10:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return 0;
  }
  uint64_t v16 = v15;
  id v17 = [v15 remObjectID];
  if (!v17)
  {

    goto LABEL_10;
  }
  id v18 = v17;
  uint64_t v19 = UUID.uuidString.getter();
  uint64_t v21 = v20;

  v14(v9, v11, v5);
  type metadata accessor for RDElementManualSortID();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v19;
  *(void *)(v22 + 24) = v21;
  v14((char *)(v22 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID), v9, v5);
  *(void *)(v22 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID) = v18;
  return v22;
}

id sub_10067E77C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_10067E7B8(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

uint64_t sub_10067E7D4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10067E80C()
{
  return sub_10067D750(*(void **)(v0 + 16));
}

uint64_t sub_10067E814()
{
  if (*(void *)(v0 + 48)) {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 24);
  }

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10067E864()
{
  return sub_10067D978(*(void **)(v0 + 16), v0 + 24, *(void **)(v0 + 64));
}

uint64_t sub_10067E874()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10067E8AC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10051A9CC(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_10067E908@<X0>(uint64_t *a1@<X8>)
{
  return sub_10067E8AC(a1);
}

uint64_t sub_10067E928()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100921460);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100921460);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Int sub_10067E9F0()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  Hasher.init(_seed:)();
  id v3 = v1;
  NSObject.hash(into:)();

  id v4 = v2;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void sub_10067EA5C()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = *(id *)v0;
  NSObject.hash(into:)();

  id v3 = v1;
  NSObject.hash(into:)();
}

Swift::Int sub_10067EAD0()
{
  uint64_t v1 = *(void **)v0;
  id v2 = *(void **)(v0 + 8);
  Hasher.init(_seed:)();
  id v3 = v1;
  NSObject.hash(into:)();

  id v4 = v2;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void *sub_10067EB38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_100094134((uint64_t *)&unk_10090A4B0);
  __chkstk_darwin(v12 - 8);
  id v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[2] = _swiftEmptyArrayStorage;
  v6[3] = _swiftEmptyArrayStorage;
  id v15 = (char *)v6 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_storeControllerNotificationCenterToken;
  uint64_t v16 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  uint64_t v17 = *(void *)(v16 - 8);
  id v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v42 = v17 + 56;
  id v43 = v18;
  v18(v15, 1, 1, v16);
  *((unsigned char *)v6 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_started) = 0;
  v6[4] = a1;
  *(void *)((char *)v6 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_beforeFirstUnlockNotificationEngine) = a5;
  uint64_t v19 = (objc_class *)type metadata accessor for RDDaemonController();
  uint64_t v20 = (char *)objc_allocWithZone(v19);
  uint64_t v21 = &v20[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(void *)uint64_t v21 = a2;
  *((void *)v21 + 1) = a3;
  uint64_t v22 = &v20[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(_OWORD *)uint64_t v22 = xmmword_100796790;
  *(void *)(v22 + 38) = 0;
  *((void *)v22 + 3) = 0;
  *((void *)v22 + 4) = 0;
  *((void *)v22 + 2) = 0;
  *(void *)&v20[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  v44.receiver = v20;
  v44.super_class = v19;
  id v23 = a1;
  swift_unknownObjectRetain();
  swift_retain();
  *(void *)((char *)v6 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_daemonController) = [super init];
  if (a4)
  {
    v6[5] = a4;
    sub_100094134((uint64_t *)&unk_10090A490);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    uint64_t v25 = self;
    swift_retain_n();
    uint64_t v40 = v23;
    id v26 = [v25 cdEntityName];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = a5;
    uint64_t v29 = v28;

    *(void *)(inited + 32) = v27;
    *(void *)(inited + 40) = v29;
    id v30 = [self cdEntityName];
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    *(void *)(inited + 48) = v31;
    *(void *)(inited + 56) = v33;
    Swift::Int v34 = sub_10032D9A0(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v35 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    uint64_t v36 = v40;
    sub_100401C48(v34, v40, (uint64_t)sub_100683000, v35, (uint64_t)v14);
    swift_bridgeObjectRelease();
    swift_release_n();

    swift_unknownObjectRelease();
    swift_release_n();
    swift_release();
    v43(v14, 0, 1, v16);
  }
  else
  {

    swift_unknownObjectRelease();
    swift_release();
    v6[5] = 0;
    v43(v14, 1, 1, v16);
  }
  uint64_t v37 = (uint64_t)v6 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_storeControllerNotificationCenterToken;
  swift_beginAccess();
  sub_1000E5150((uint64_t)v14, v37);
  swift_endAccess();
  return v6;
}

void sub_10067EEF8()
{
  if (qword_100907B60 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_100921460);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "os_transaction INIT {name: com.apple.remindd.RDAlarmEngine.alarmDatabaseDidChange}", v3, 2u);
    swift_slowDealloc();
  }

  os_transaction_create();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_10067F138();
    swift_release();
    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
LABEL_7:
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "os_transaction RELEASE {name: com.apple.remindd.RDAlarmEngine.alarmDatabaseDidChange}", v6, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received store changes with deallocated alarm engine", v9, 2u);
      swift_slowDealloc();
    }

    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5)) {
      goto LABEL_7;
    }
  }
  swift_unknownObjectRelease();
}

void sub_10067F138()
{
  uint64_t v1 = v0;
  if (qword_100907B60 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_100921460);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Triggered alarmEngine database did change. Notifying producers", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_100096838(v8, (uint64_t)v11);
      uint64_t v9 = v12;
      uint64_t v10 = v13;
      sub_1000C0DE0(v11, v12);
      (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v11);
      v8 += 40;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10067F294()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090A4B0);
  __chkstk_darwin(v2 - 8);
  os_log_type_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(void *)(v1 + 40);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = v1 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_storeControllerNotificationCenterToken;
  swift_beginAccess();
  sub_1000E5250(v10, (uint64_t)v4);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000E52B8((uint64_t)v4);
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    sub_1000E52B8(v1 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_storeControllerNotificationCenterToken);
    swift_release();

    return v1;
  }
  sub_1000E5318((uint64_t)v4, (uint64_t)v8);
  uint64_t v11 = *(os_unfair_lock_s **)(v9 + 40);
  swift_retain();
  os_unfair_lock_lock(v11);
  __chkstk_darwin(v12);
  *(void *)&v15[-16] = v8;
  swift_beginAccess();
  uint64_t result = sub_1001EC244((uint64_t (*)(unint64_t))sub_1000E537C);
  uint64_t v14 = *(void *)(*(void *)(v9 + 48) + 16);
  if (v14 >= result)
  {
    sub_1001ECEB0(result, v14);
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    swift_release();
    sub_100094178((uint64_t)v8);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_10067F504()
{
  sub_10067F294();

  return swift_deallocClassInstance();
}

uint64_t sub_10067F55C()
{
  return type metadata accessor for RDAlarmEngine();
}

uint64_t type metadata accessor for RDAlarmEngine()
{
  uint64_t result = qword_1009214A8;
  if (!qword_1009214A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10067F5B0()
{
  sub_1000DF350();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10067F67C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*((unsigned char *)v3 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_started))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  *((unsigned char *)v3 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_started) = 1;
  uint64_t v10 = (void *)v3[4];
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    v3[2] = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v3[3] = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (qword_100907B60 == -1) {
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_4:
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_10008E2DC(v12, (uint64_t)qword_100921460);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v33[2] = v13;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v14, v15))
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v22 = *(void *)(a1 + 16);
    if (!v22) {
      goto LABEL_11;
    }
LABEL_8:
    id v23 = (void *)(a1 + 32);
    swift_bridgeObjectRetain();
    uint64_t v24 = v22;
    do
    {
      uint64_t v25 = v23[3];
      uint64_t v26 = v23[4];
      sub_1000C0DE0(v23, v25);
      (*(void (**)(uint64_t, uint64_t))(v26 + 24))(v25, v26);
      v23 += 5;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v16 = swift_slowAlloc();
  uint64_t v17 = swift_slowAlloc();
  v33[1] = v17;
  *(_DWORD *)uint64_t v16 = 136315650;
  uint64_t v34 = 60;
  unint64_t v35 = 0xE100000000000000;
  uint64_t v36 = v17;
  v18._uint64_t countAndFlagsBits = sub_100587438((uint64_t)v3);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  uint64_t v34 = sub_1000C51B8(v34, v35, &v36);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v16 + 12) = 2048;
  uint64_t v20 = *(void *)(a1 + 16);
  swift_bridgeObjectRelease();
  uint64_t v34 = v20;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v16 + 22) = 2048;
  uint64_t v21 = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v34 = v21;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting alarmEngine {engine: %s, producers.count: %ld, consumers.count: %ld}", (uint8_t *)v16, 0x20u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v22 = *(void *)(a1 + 16);
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v34 = 60;
    unint64_t v35 = 0xE100000000000000;
    uint64_t v36 = v30;
    v31._uint64_t countAndFlagsBits = sub_100587438((uint64_t)v3);
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 62;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    uint64_t v34 = sub_1000C51B8(v34, v35, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2048;
    swift_bridgeObjectRelease();
    uint64_t v34 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Finished starting alarmEngine {engine: %s, producers.count: %ld}", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
}

void sub_10067FC74(uint64_t a1, void *a2, void *a3, const char *a4, const char *a5)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100907B60 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_100921460);
    id v9 = a3;
    id v10 = a2;
    swift_errorRetain();
    id v11 = v9;
    id v37 = v10;
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315650;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v15 = String.init<A>(describing:)();
      sub_1000C51B8(v15, v16, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v14 + 12) = 2114;
      id v17 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v36 = v37;

      *(_WORD *)(v14 + 22) = 2082;
      id v18 = [v11 actionIdentifier];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      sub_1000C51B8(v19, v21, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, a4, (uint8_t *)v14, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100907B60 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10008E2DC(v23, (uint64_t)qword_100921460);
    id v24 = a3;
    id v25 = a2;
    id v37 = v24;
    id v26 = v25;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      id v31 = [v37 actionIdentifier];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;

      sub_1000C51B8(v32, v34, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2112;
      id v35 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v26;

      _os_log_impl((void *)&_mh_execute_header, v27, v28, a5, (uint8_t *)v29, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
}

uint64_t sub_1006801F0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  return sub_100680560(a2, a3, a4, a5, a6);
}

void *sub_100680208(void *a1)
{
  id v2 = [a1 trigger];
  self;
  if (swift_dynamicCastObjCClass()
    || (self, swift_dynamicCastObjCClass())
    || (self, swift_dynamicCastObjCClass())
    || (self, swift_dynamicCastObjCClass()))
  {
LABEL_3:

    return a1;
  }
  self;
  if (!swift_dynamicCastObjCClass())
  {
    self;
    uint64_t v8 = swift_dynamicCastObjCClass();

    if (v8) {
      return a1;
    }
    if (qword_100907B60 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100921460);
    id v2 = a1;
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      id v14 = [v2 trigger];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v13 = v14;

      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unable to get infer RDProducerAlarmTrigger enum from trigger {trigger: %@}", v12, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return a1;
    }

    goto LABEL_3;
  }
  if (qword_100907B60 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100921460);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "This is an incorrect use of API. peopleInteraction origin takes an additional parameter that cannot be deduced solely by the REMAlarm. You need to create the origin enum manually", v7, 2u);
    swift_slowDealloc();
  }

  return a1;
}

uint64_t sub_100680560(void **a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v247 = a5;
  id v248 = a4;
  uint64_t v236 = a3;
  Class v249 = a1;
  uint64_t v244 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v243 = *(void *)(v244 - 8);
  __chkstk_darwin(v244);
  id v241 = (char *)v218 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v242 = type metadata accessor for DispatchQoS();
  uint64_t v240 = *(void *)(v242 - 8);
  __chkstk_darwin(v242);
  unint64_t v239 = (char *)v218 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v230 = type metadata accessor for Date();
  uint64_t v229 = *(void *)(v230 - 8);
  __chkstk_darwin(v230);
  uint64_t v221 = (void **)((char *)v218 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v228 = type metadata accessor for REMAnalyticsEvent();
  uint64_t v227 = *(void *)(v228 - 8);
  __chkstk_darwin(v228);
  unint64_t v226 = (char *)v218 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v234 = type metadata accessor for RDUserNotificationAction();
  uint64_t v233 = *(void *)(v234 - 8);
  __chkstk_darwin(v234);
  uint64_t v222 = (void (*)(char *, uint64_t, uint64_t))((char *)v218 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v223 = (void **)((char *)v218 - v12);
  __chkstk_darwin(v13);
  id v232 = (char *)v218 - v14;
  __chkstk_darwin(v15);
  os_log_type_t v245 = (char *)v218 - v16;
  uint64_t v17 = type metadata accessor for REMNotificationIdentifier();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v224 = (void **)((char *)v218 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  unint64_t v235 = (void **)((char *)v218 - v21);
  __chkstk_darwin(v22);
  uint64_t v225 = ((char *)v218 - v23);
  __chkstk_darwin(v24);
  uint64_t v231 = ((char *)v218 - v25);
  __chkstk_darwin(v26);
  id v237 = (char *)v218 - v27;
  __chkstk_darwin(v28);
  id v238 = ((char *)v218 - v29);
  __chkstk_darwin(v30);
  uint64_t v32 = (void **)((char *)v218 - v31);
  uint64_t v33 = type metadata accessor for RDUserNotificationType();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v251 = (void **)((char *)v218 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)v218 - v37;
  __n128 v40 = __chkstk_darwin(v39);
  p_Class isa = (id *)((char *)v218 - v41);
  id v43 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v34 + 16);
  v43((char *)v218 - v41, a2, v33, v40);
  int v44 = (*(uint64_t (**)(id *, uint64_t))(v34 + 88))(p_isa, v33);
  uint64_t v246 = v18;
  if (v44 == enum case for RDUserNotificationType.reminderAlarm(_:))
  {
    (*(void (**)(id *, uint64_t))(v34 + 96))(p_isa, v33);
    (*(void (**)(void **, id *, uint64_t))(v18 + 32))(v32, p_isa, v17);
    uint64_t v45 = v17;
    uint64_t v46 = v18;
    uint64_t v251 = v32;
    if (qword_100907B60 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    id v48 = (void **)sub_10008E2DC(v47, (uint64_t)qword_100921460);
    Class isa = (void (*)(NSObject *, void **, uint64_t))v46[2].isa;
    uint64_t v50 = v238;
    isa(v238, v251, v17);
    id v51 = v249;
    Class v249 = v48;
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    BOOL v54 = os_log_type_enabled(v52, v53);
    unint64_t v224 = v51;
    uint64_t v231 = isa;
    uint64_t v225 = v46 + 2;
    if (v54)
    {
      uint64_t v55 = swift_slowAlloc();
      uint64_t v223 = (void **)swift_slowAlloc();
      uint64_t aBlock = v223;
      *(_DWORD *)uint64_t v55 = 136446466;
      uint64_t v220 = v17;
      uint64_t v222 = (void (*)(char *, uint64_t, uint64_t))(v55 + 4);
      id v56 = [v51 actionIdentifier];
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v59 = v58;

      uint64_t v253 = sub_1000C51B8(v57, v59, (uint64_t *)&aBlock);
      uint64_t v60 = v220;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 12) = 2082;
      isa(v237, (void **)&v50->isa, v60);
      uint64_t v61 = String.init<A>(describing:)();
      uint64_t v253 = sub_1000C51B8(v61, v62, (uint64_t *)&aBlock);
      uint64_t v45 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v63 = *(void (**)(NSObject *, uint64_t))(v246 + 8);
      v63(v50, v60);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "ReminderAlarm: Processing notification response {actionIdentifier: %{public}s, notificationIdentifier: %{public}s}", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v63 = (void (*)(NSObject *, uint64_t))v46[1].isa;
      v63(v50, v17);
    }

    uint64_t v33 = v250;
    long long v64 = v245;
    unint64_t v65 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(v250 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_daemonController)];
    uint64_t v66 = (void *)REMStore.fetchReminder(notificationIdentifier:includingDueDateDeltaAlerts:)();
    id v237 = (char *)v63;
    id v67 = [v66 objectID];
    id v68 = objc_allocWithZone((Class)REMSaveRequest);
    uint64_t v225 = v65;
    uint64_t v231 = [v68 initWithStore:v65];
    uint64_t v223 = (void **)v66;
    id v238 = [v231 updateReminder:v66];
    uint64_t v69 = v233;
    id v70 = *(void (**)(char *, uint64_t, uint64_t))(v233 + 16);
    id v71 = v64;
    uint64_t v72 = v234;
    v70(v71, v236, v234);
    uint64_t v73 = (void **)v67;
    id v74 = Logger.logObject.getter();
    uint64_t v75 = static os_log_type_t.default.getter();
    BOOL v76 = os_log_type_enabled(v74, (os_log_type_t)v75);
    uint64_t v220 = v45;
    unint64_t v235 = v73;
    if (v76)
    {
      uint64_t v77 = swift_slowAlloc();
      uint64_t v222 = v70;
      uint64_t v78 = v77;
      uint64_t v79 = (void *)swift_slowAlloc();
      v218[1] = v79;
      uint64_t v221 = (void **)swift_slowAlloc();
      uint64_t v253 = (uint64_t)v73;
      uint64_t aBlock = v221;
      *(_DWORD *)uint64_t v78 = 138543618;
      os_log_t v219 = v74;
      id v80 = v73;
      uint64_t v81 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v79 = v80;

      uint64_t v72 = v234;
      *(_WORD *)(v78 + 12) = 2082;
      uint64_t v82 = v245;
      uint64_t v83 = RDUserNotificationAction.rawValue.getter();
      uint64_t v253 = sub_1000C51B8(v83, v84, (uint64_t *)&aBlock);
      uint64_t v33 = v250;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v82, v72);
      os_log_t v85 = v219;
      _os_log_impl((void *)&_mh_execute_header, v219, (os_log_type_t)v75, "ReminderAlarm: Handle notification action for reminder {reminderID: %{public}@, action: %{public}s}", (uint8_t *)v78, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      id v70 = v222;
      uint64_t v45 = v220;
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v69 + 8))(v245, v72);
    }
    unint64_t v95 = v232;
    v70(v232, v236, v72);
    int v96 = (*(uint64_t (**)(char *, uint64_t))(v69 + 88))(v95, v72);
    uint64_t v38 = v237;
    if (v96 == enum case for RDUserNotificationAction.defaultDismiss(_:))
    {
      p_Class isa = (id *)&v238->isa;
      [v238 snoozeForever];
LABEL_26:
      uint64_t v97 = *(void *)(v33 + 32);
      uint64_t v98 = swift_allocObject();
      uint64_t v99 = v235;
      uint64_t v100 = v224;
      *(void *)(v98 + 16) = v235;
      *(void *)(v98 + 24) = v100;
      v258 = sub_100682F9C;
      uint64_t v259 = v98;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v255 = 1107296256;
      id v256 = sub_1000E13D0;
      id v257 = &unk_1008CF670;
      uint64_t v101 = _Block_copy(&aBlock);
      int v102 = v100;
      uint64_t v103 = v99;
      swift_release();
      id v104 = v231;
      [v231 saveWithQueue:v97 completion:v101];
      _Block_release(v101);

      uint64_t v105 = v251;
      uint64_t v106 = v220;
LABEL_30:
      ((void (*)(void **, uint64_t))v38)(v105, v106);
LABEL_31:
      uint64_t v109 = *(void *)(v33 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_beforeFirstUnlockNotificationEngine);
      if (v109)
      {
        sub_1000963CC(0, (unint64_t *)&qword_10090F370);
        swift_retain();
        uint64_t v110 = (void *)static OS_dispatch_queue.main.getter();
        v258 = sub_100682F14;
        uint64_t v259 = v109;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v255 = 1107296256;
        id v256 = sub_100236C78;
        id v257 = &unk_1008CF5D0;
        uint64_t v111 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        uint64_t v112 = v239;
        static DispatchQoS.unspecified.getter();
        uint64_t aBlock = (void **)_swiftEmptyArrayStorage;
        sub_1000D1088();
        sub_100094134((uint64_t *)&unk_10090AFD0);
        sub_1000D10E0();
        uint64_t v113 = v241;
        uint64_t v114 = v244;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v111);
        swift_release();

        (*(void (**)(char *, uint64_t))(v243 + 8))(v113, v114);
        (*(void (**)(char *, uint64_t))(v240 + 8))(v112, v242);
      }
      if (qword_100907B60 != -1) {
        swift_once();
      }
      uint64_t v115 = type metadata accessor for Logger();
      sub_10008E2DC(v115, (uint64_t)qword_100921460);
      uint64_t v116 = Logger.logObject.getter();
      os_log_type_t v117 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v116, v117))
      {
        uint64_t v118 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v118 = 0;
        _os_log_impl((void *)&_mh_execute_header, v116, v117, "Completing action handler by calling completionHandler now.", v118, 2u);
        swift_slowDealloc();
      }

      return v248();
    }
    p_Class isa = (id *)&v238->isa;
    if (v96 == enum case for RDUserNotificationAction.debugDismiss(_:))
    {
      id v107 = v225;
      uint64_t v108 = v223;
LABEL_29:

      uint64_t v105 = v251;
      uint64_t v106 = v45;
      goto LABEL_30;
    }
    if (v96 == enum case for RDUserNotificationAction.markAsCompleted(_:))
    {
      type metadata accessor for REMAnalyticsManager();
      static REMAnalyticsManager.shared.getter();
      uint64_t v120 = (int *)sub_100094134(&qword_100920EB8);
      uint64_t v121 = v226;
      id v122 = &v226[v120[12]];
      uint64_t v123 = &v226[v120[16]];
      uint64_t v124 = &v226[v120[20]];
      uint64_t v125 = enum case for REMUserOperation.markReminderCompletedNotification(_:);
      uint64_t v126 = type metadata accessor for REMUserOperation();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v126 - 8) + 104))(v121, v125, v126);
      *(void *)id v122 = 0;
      *((void *)v122 + 1) = 0;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v229 + 56))(v123, 1, 1, v230);
      *(void *)uint64_t v124 = 0;
      *((void *)v124 + 1) = 0;
      uint64_t v127 = v227;
      uint64_t v128 = v228;
      (*(void (**)(char *, void, uint64_t))(v227 + 104))(v121, enum case for REMAnalyticsEvent.userOperation(_:), v228);
      REMAnalyticsManager.post(event:)();
      swift_release();
      uint64_t v129 = v121;
      uint64_t v38 = v237;
      uint64_t v130 = v128;
      p_Class isa = (id *)&v238->isa;
      (*(void (**)(char *, uint64_t))(v127 + 8))(v129, v130);
      [p_isa setCompleted:1];
      goto LABEL_26;
    }
    if (v96 == enum case for RDUserNotificationAction.snoozeForOneHour(_:))
    {
      [v238 snoozeFromNowForTimeInterval:3600.0];
      goto LABEL_26;
    }
    goto LABEL_51;
  }
  if (v44 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    (*(void (**)(id *, uint64_t))(v34 + 8))(p_isa, v33);
    goto LABEL_17;
  }
  if (v44 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    (*(void (**)(id *, uint64_t))(v34 + 96))(p_isa, v33);

    goto LABEL_17;
  }
  if (v44 == enum case for RDUserNotificationType.assignmentNotification(_:)
    || v44 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
  {
    (*(void (**)(id *, uint64_t))(v34 + 96))(p_isa, v33);
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (v44 != enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
  {
    if (v44 != enum case for RDUserNotificationType.todayNotification(_:)
      && v44 != enum case for RDUserNotificationType.todayNotificationBadge(_:)
      && v44 != enum case for RDUserNotificationType.beforeFirstUnlock(_:))
    {
      int v96 = _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
LABEL_51:
      if (v96 == enum case for RDUserNotificationAction.snoozeForOneDay(_:))
      {
        [p_isa snoozeFromDueDateForFutureIntegralMultipleOfTimeInterval:86400.0];
        goto LABEL_26;
      }
      if (v96 == enum case for RDUserNotificationAction.snoozeToNextThirds(_:))
      {
        [p_isa snoozeToNextThirds];
        goto LABEL_26;
      }
      if (v96 == enum case for RDUserNotificationAction.snoozeToNextWeekend(_:))
      {
        [p_isa snoozeFromDueDateForFutureIntegralMultipleOfTimeInterval:604800.0];
        goto LABEL_26;
      }
      if (v96 == enum case for RDUserNotificationAction.addToReminders(_:))
      {
        uint64_t v180 = Logger.logObject.getter();
        os_log_type_t v181 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v180, v181))
        {
          uint64_t v183 = v235;
          uint64_t v108 = v225;
          NSString v214 = v180;
          unint64_t v235 = v223;
          id v207 = v231;
          id v107 = v238;
LABEL_101:
          uint64_t v45 = v220;
LABEL_105:

          uint64_t v231 = v214;
          p_Class isa = v235;
          unint64_t v235 = (void **)&v207->isa;
          goto LABEL_29;
        }
        uint64_t v182 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v182 = 0;
        _os_log_impl((void *)&_mh_execute_header, v180, v181, "ReminderAlarm: Unexpected .addToReminders action for notification type .reminderAlarm", v182, 2u);
        uint64_t v183 = v235;
        uint64_t v108 = v225;
        unint64_t v235 = v223;
        uint64_t v184 = &v260;
LABEL_100:
        id v107 = *(v184 - 32);
        swift_slowDealloc();
        NSString v214 = v180;
        id v207 = v231;
        goto LABEL_101;
      }
      if (v96 == enum case for RDUserNotificationAction.viewAssignmentInList(_:))
      {
        id v207 = Logger.logObject.getter();
        os_log_type_t v208 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v207, v208))
        {
          unint64_t v209 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v209 = 0;
          uint64_t v210 = "ReminderAlarm: Unexpected .viewAssignmentInList action for notification type .reminderAlarm";
LABEL_98:
          _os_log_impl((void *)&_mh_execute_header, v207, v208, v210, v209, 2u);
          uint64_t v183 = (void **)&v231->isa;
          uint64_t v108 = v238;
          uint64_t v180 = v225;
          goto LABEL_99;
        }
LABEL_102:
        uint64_t v183 = (void **)&v231->isa;
        uint64_t v108 = v238;
        uint64_t v45 = v220;
        NSString v214 = v225;
        goto LABEL_104;
      }
      if (v96 == enum case for RDUserNotificationAction.declineAssignment(_:))
      {
        id v207 = Logger.logObject.getter();
        os_log_type_t v215 = static os_log_type_t.error.getter();
        BOOL v216 = os_log_type_enabled(v207, v215);
        NSString v214 = v225;
        if (v216)
        {
          uint64_t v217 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v217 = 0;
          _os_log_impl((void *)&_mh_execute_header, v207, v215, "ReminderAlarm: Unexpected .declineAssignment action for notification type .reminderAlarm", v217, 2u);
          uint64_t v183 = (void **)&v231->isa;
          uint64_t v108 = v238;
          uint64_t v180 = v214;
LABEL_99:
          uint64_t v231 = v207;
          uint64_t v184 = (uint64_t *)&v252;
          goto LABEL_100;
        }
        uint64_t v183 = (void **)&v231->isa;
        uint64_t v108 = v238;
        uint64_t v45 = v220;
LABEL_104:
        id v107 = v223;
        goto LABEL_105;
      }
      if (v96 == enum case for RDUserNotificationAction.viewRemindersInList(_:))
      {
        id v207 = Logger.logObject.getter();
        os_log_type_t v208 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v207, v208))
        {
          unint64_t v209 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v209 = 0;
          uint64_t v210 = "ReminderAlarm: Unexpected .viewRemindersInList action for notification type .remindersAlarm";
          goto LABEL_98;
        }
        goto LABEL_102;
      }
LABEL_107:
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return result;
    }
LABEL_17:
    if (qword_100907B60 != -1) {
      swift_once();
    }
    uint64_t v86 = type metadata accessor for Logger();
    sub_10008E2DC(v86, (uint64_t)qword_100921460);
    ((void (*)(char *, uint64_t, uint64_t))v43)(v38, a2, v33);
    id v87 = v249;
    unint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.fault.getter();
    int v90 = v89;
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v91 = swift_slowAlloc();
      uint64_t v246 = swift_slowAlloc();
      Class v249 = (void **)swift_slowAlloc();
      uint64_t aBlock = v249;
      *(_DWORD *)uint64_t v91 = 136315394;
      LODWORD(v245) = v90;
      ((void (*)(void **, char *, uint64_t))v43)(v251, v38, v33);
      uint64_t v92 = String.init<A>(describing:)();
      uint64_t v253 = sub_1000C51B8(v92, v93, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v38, v33);
      *(_WORD *)(v91 + 12) = 2112;
      uint64_t v253 = (uint64_t)v87;
      uint64_t v94 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v246 = v87;

      _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v245, "AlarmEngine didn't expect to receive actions of this type. {type: %s, response: %@}", (uint8_t *)v91, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v38, v33);
    }
    uint64_t v33 = v250;
    goto LABEL_31;
  }
  (*(void (**)(id *, uint64_t))(v34 + 96))(p_isa, v33);
  uint64_t v131 = v246;
  unint64_t v132 = v231;
  (*(void (**)(NSObject *, id *, uint64_t))(v246 + 32))(v231, p_isa, v17);
  if (qword_100907B60 != -1) {
    swift_once();
  }
  uint64_t v133 = type metadata accessor for Logger();
  uint64_t v134 = sub_10008E2DC(v133, (uint64_t)qword_100921460);
  uint64_t v135 = *(void (**)(NSObject *, NSObject *, uint64_t))(v131 + 16);
  uint64_t v136 = v225;
  v135(v225, v132, v17);
  unint64_t v137 = v249;
  uint64_t v251 = (void **)v134;
  unint64_t v138 = Logger.logObject.getter();
  os_log_type_t v139 = static os_log_type_t.default.getter();
  int v140 = v139;
  BOOL v141 = os_log_type_enabled(v138, v139);
  id v238 = v137;
  os_log_type_t v245 = (char *)v135;
  if (v141)
  {
    uint64_t v142 = swift_slowAlloc();
    LODWORD(v232) = v140;
    uint64_t v143 = v142;
    unint64_t v235 = (void **)swift_slowAlloc();
    uint64_t aBlock = v235;
    *(_DWORD *)uint64_t v143 = 136446466;
    Class v249 = (void **)(v143 + 4);
    unint64_t v144 = v137;
    id v145 = [v137 actionIdentifier];
    uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v148 = v147;

    uint64_t v253 = sub_1000C51B8(v146, v148, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v143 + 12) = 2082;
    uint64_t v149 = v225;
    v135(v237, v225, v17);
    uint64_t v150 = String.init<A>(describing:)();
    uint64_t v253 = sub_1000C51B8(v150, v151, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v152 = v246;
    swift_bridgeObjectRelease();
    Class v249 = *(void ***)(v152 + 8);
    ((void (*)(NSObject *, uint64_t))v249)(v149, v17);
    _os_log_impl((void *)&_mh_execute_header, v138, (os_log_type_t)v232, "DueDateDeltaAlarm: Processing notification response {actionIdentifier: %{public}s, notificationIdentifier: %{public}s}", (uint8_t *)v143, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    Class v249 = *(void ***)(v131 + 8);
    ((void (*)(NSObject *, uint64_t))v249)(v136, v17);
  }

  uint64_t v33 = v250;
  unint64_t v153 = (char *)[objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(v250 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_daemonController)];
  uint64_t v154 = (char *)REMStore.fetchReminder(notificationIdentifier:includingDueDateDeltaAlerts:)();
  unint64_t v235 = (void **)[v154 objectID];
  uint64_t v155 = (char *)[objc_allocWithZone((Class)REMSaveRequest) initWithStore:v153];
  id v237 = v154;
  uint64_t v156 = [v155 updateReminder:v154];
  uint64_t v157 = v233;
  unint64_t v158 = v223;
  uint64_t v159 = v234;
  id v232 = *(char **)(v233 + 16);
  ((void (*)(void **, uint64_t, uint64_t))v232)(v223, v236, v234);
  int v160 = (*(uint64_t (**)(void **, uint64_t))(v157 + 88))(v158, v159);
  if (v160 != enum case for RDUserNotificationAction.defaultDismiss(_:))
  {
    uint64_t v225 = v156;
    os_log_type_t v245 = v155;
    unint64_t v224 = (void **)v153;
    uint64_t v169 = (char *)v222;
    if (v160 != enum case for RDUserNotificationAction.debugDismiss(_:))
    {
      if (v160 == enum case for RDUserNotificationAction.markAsCompleted(_:))
      {
        type metadata accessor for REMAnalyticsManager();
        static REMAnalyticsManager.shared.getter();
        uint64_t v170 = (int *)sub_100094134(&qword_100920EB8);
        uint64_t v171 = v226;
        uint64_t v172 = &v226[v170[12]];
        uint64_t v173 = &v226[v170[16]];
        os_log_type_t v174 = &v226[v170[20]];
        uint64_t v175 = enum case for REMUserOperation.markReminderCompletedNotification(_:);
        uint64_t v176 = type metadata accessor for REMUserOperation();
        uint64_t v177 = v175;
        uint64_t v169 = (char *)v222;
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v176 - 8) + 104))(v171, v177, v176);
        *(void *)uint64_t v172 = 0;
        *((void *)v172 + 1) = 0;
        uint64_t v33 = v250;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v229 + 56))(v173, 1, 1, v230);
        *(void *)os_log_type_t v174 = 0;
        *((void *)v174 + 1) = 0;
        uint64_t v178 = v227;
        uint64_t v179 = v228;
        (*(void (**)(char *, void, uint64_t))(v227 + 104))(v171, enum case for REMAnalyticsEvent.userOperation(_:), v228);
        REMAnalyticsManager.post(event:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v178 + 8))(v171, v179);
        [v225 setCompleted:1];
      }
      else
      {
        if (v160 != enum case for RDUserNotificationAction.snoozeForOneHour(_:)
          && v160 != enum case for RDUserNotificationAction.snoozeForOneDay(_:)
          && v160 != enum case for RDUserNotificationAction.snoozeToNextThirds(_:)
          && v160 != enum case for RDUserNotificationAction.snoozeToNextWeekend(_:)
          && v160 != enum case for RDUserNotificationAction.addToReminders(_:)
          && v160 != enum case for RDUserNotificationAction.viewAssignmentInList(_:)
          && v160 != enum case for RDUserNotificationAction.declineAssignment(_:)
          && v160 != enum case for RDUserNotificationAction.viewRemindersInList(_:))
        {
          _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          goto LABEL_107;
        }
        uint64_t v185 = Logger.logObject.getter();
        os_log_type_t v186 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v185, v186))
        {
          uint64_t v187 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v187 = 0;
          _os_log_impl((void *)&_mh_execute_header, v185, v186, "DueDateDeltaAlarm: Unexpected action for notification type .dueDateDeltaAlarm", v187, 2u);
          swift_slowDealloc();
        }
      }
    }
LABEL_80:
    uint64_t v188 = *(void *)(v33 + 32);
    uint64_t v189 = swift_allocObject();
    uint64_t v190 = v235;
    uint64_t v191 = v238;
    *(void *)(v189 + 16) = v235;
    *(void *)(v189 + 24) = v191;
    v258 = sub_100682F70;
    uint64_t v259 = v189;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v255 = 1107296256;
    id v256 = sub_1000E13D0;
    id v257 = &unk_1008CF620;
    os_log_type_t v192 = _Block_copy(&aBlock);
    unint64_t v193 = v191;
    uint64_t v194 = v190;
    swift_release();
    [v245 saveWithQueue:v188 completion:v192];
    _Block_release(v192);
    uint64_t v195 = v234;
    ((void (*)(char *, uint64_t, uint64_t))v232)(v169, v236, v234);
    uint64_t v196 = v194;
    os_log_type_t v197 = Logger.logObject.getter();
    uint64_t v198 = v169;
    os_log_type_t v199 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v197, v199))
    {
      uint64_t v200 = swift_slowAlloc();
      uint64_t v201 = swift_slowAlloc();
      id v238 = v197;
      id v202 = (void *)v201;
      uint64_t v251 = (void **)swift_slowAlloc();
      uint64_t v253 = (uint64_t)v196;
      uint64_t aBlock = v251;
      *(_DWORD *)uint64_t v200 = 138543618;
      uint64_t v203 = v196;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v202 = v196;

      *(_WORD *)(v200 + 12) = 2082;
      uint64_t v204 = RDUserNotificationAction.rawValue.getter();
      uint64_t v253 = sub_1000C51B8(v204, v205, (uint64_t *)&aBlock);
      uint64_t v33 = v250;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v233 + 8))(v198, v234);
      unint64_t v206 = v238;
      _os_log_impl((void *)&_mh_execute_header, v238, v199, "DueDateDeltaAlarm: Handle notification action for reminder {reminderID: %{public}@, action: %{public}s}", (uint8_t *)v200, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v233 + 8))(v198, v195);
    }
    ((void (*)(NSObject *, uint64_t))v249)(v231, v17);
    goto LABEL_31;
  }
  id v161 = [v156 dueDateDeltaAlertContext];
  if (v161)
  {
    uint64_t v162 = v161;
    os_log_type_t v245 = v155;
    id v163 = [v156 fetchedCurrentDueDateDeltaAlert];
    if (v163)
    {
      id v164 = v163;
      uint64_t v225 = v156;
      unint64_t v224 = (void **)v153;
      id v165 = [v162 updateDueDateDeltaAlert:v163];
      uint64_t v166 = v221;
      Date.init()();
      Class v167 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(void **, uint64_t))(v229 + 8))(v166, v230);
      id v168 = [v165 setAcknowledgedDate:v167];

      uint64_t v33 = v250;
      uint64_t v169 = (char *)v222;
      goto LABEL_80;
    }

    uint64_t v155 = v245;
  }
  uint64_t v211 = Logger.logObject.getter();
  os_log_type_t v212 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v211, v212))
  {
    id v213 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v213 = 0;
    _os_log_impl((void *)&_mh_execute_header, v211, v212, "DueDateDeltaAlarm: Unable to get early alert context to set ackDate.", v213, 2u);
    swift_slowDealloc();
  }

  return ((uint64_t (*)(NSObject *, uint64_t))v249)(v231, v17);
}

uint64_t sub_100682F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100682F28()
{
  return swift_release();
}

uint64_t sub_100682F30()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100682F70(uint64_t a1)
{
  sub_10067FC74(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), "DueDateDeltaAlarm: Save error. Failed to save updates from notification response {error: %s , reminderID: %{public}@, actionIdentifier: %{public}s}", "DueDateDeltaAlarm: Updated reminder successfully. {actionIdentifier: %{public}s, reminderID: %@}");
}

void sub_100682F9C(uint64_t a1)
{
  sub_10067FC74(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), "ReminderAlarm: Save error. Failed to save updates from notification response {error: %s , reminderID: %{public}@, actionIdentifier: %{public}s}", "ReminderAlarm: Updated reminder successfully. {actionIdentifier: %{public}s, reminderID: %@}");
}

uint64_t sub_100682FC8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100683000()
{
}

ValueMetadata *type metadata accessor for RDDataSourceAlarm()
{
  return &type metadata for RDDataSourceAlarm;
}

void destroy for RDProducerAlarm(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 32);

  sub_1001D5BC4(v2, v3, v4, v5);
}

uint64_t initializeWithCopy for RDProducerAlarm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  unsigned __int8 v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  id v9 = v4;
  sub_1001D5B5C(v5, v6, v7, v8);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  return a1;
}

uint64_t assignWithCopy for RDProducerAlarm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  unsigned __int8 v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  sub_1001D5B5C(v7, v8, v9, v10);
  uint64_t v11 = *(void **)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  unsigned __int8 v14 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v10;
  sub_1001D5BC4(v11, v12, v13, v14);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  return a1;
}

__n128 initializeWithTake for RDProducerAlarm(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDProducerAlarm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v6;
  sub_1001D5BC4(v7, v8, v9, v10);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDProducerAlarm(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 35)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDProducerAlarm(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 35) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 35) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDProducerAlarm()
{
  return &type metadata for RDProducerAlarm;
}

unint64_t sub_100683298()
{
  unint64_t result = qword_100921568;
  if (!qword_100921568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100921568);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RDProducerAlarmType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006833B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDProducerAlarmType()
{
  return &type metadata for RDProducerAlarmType;
}

void destroy for RDProducerAlarmOrigin(uint64_t a1)
{
}

uint64_t initializeWithCopy for RDProducerAlarmOrigin(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_1001D5B5C(*(id *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for RDProducerAlarmOrigin(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_1001D5B5C(*(id *)a2, v4, v5, v6);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_1001D5BC4(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for RDProducerAlarmOrigin(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for RDProducerAlarmOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_1001D5BC4(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDProducerAlarmOrigin(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDProducerAlarmOrigin(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1006835C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1006835D0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDProducerAlarmOrigin()
{
  return &type metadata for RDProducerAlarmOrigin;
}

unint64_t sub_1006835EC()
{
  unint64_t result = qword_100921570;
  if (!qword_100921570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100921570);
  }
  return result;
}

uint64_t sub_100683654()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100921578);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100921578);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

double sub_10068371C(uint64_t a1, double a2, double a3, double a4)
{
  double v4 = a2;
  double v5 = *(double *)(a1 + 32);
  if (*(uint64_t *)(a1 + 40) < 5) {
    goto LABEL_12;
  }
  double v6 = a2 + 1.0;
  if (v5 > 0.0 && v5 <= v6)
  {
    unint64_t v9 = 0xE400000000000000;
    uint64_t v10 = 1751607624;
    double v4 = a3;
    goto LABEL_13;
  }
  if (v6 >= v5 || v5 > v4 + v4 + 1.0)
  {
LABEL_12:
    unint64_t v9 = 0xE700000000000000;
    uint64_t v10 = 0x746C7561666544;
  }
  else
  {
    unint64_t v9 = 0xE600000000000000;
    uint64_t v10 = 0x6D756964654DLL;
    double v4 = a4;
  }
LABEL_13:
  if (qword_100907B68 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_100921578);
  swift_bridgeObjectRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315906;
    swift_bridgeObjectRetain();
    sub_1000C51B8(v10, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 32) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDAlarmEngine:debouncePolicy: DB load is '%s', debounce interval to use: %f s, stats: {average: %f, #sample: %ld}", (uint8_t *)v14, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v4;
}

void sub_100683994(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  sub_100094134(&qword_100921590);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100778380;
  *(void *)(v13 + 56) = type metadata accessor for RDTimeAlarmProducer();
  *(void *)(v13 + 64) = sub_100683CC0((unint64_t *)&unk_100910960, (void (*)(uint64_t))type metadata accessor for RDTimeAlarmProducer);
  *(void *)(v13 + 32) = a2;
  *(void *)(v13 + 96) = type metadata accessor for RDDueDateDeltaAlarmProducer();
  *(void *)(v13 + 104) = sub_100683CC0(&qword_100910970, (void (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlarmProducer);
  *(void *)(v13 + 72) = a3;
  *(void *)(v13 + 136) = type metadata accessor for RDLocationAlarmProducer();
  *(void *)(v13 + 144) = sub_100683CC0((unint64_t *)&unk_100910980, (void (*)(uint64_t))type metadata accessor for RDLocationAlarmProducer);
  *(void *)(v13 + 112) = a4;
  *(void *)(v13 + 176) = type metadata accessor for RDVehicleAlarmProducer();
  *(void *)(v13 + 184) = sub_100683CC0(&qword_100910978, (void (*)(uint64_t))type metadata accessor for RDVehicleAlarmProducer);
  *(void *)(v13 + 152) = a5;
  *(void *)(v13 + 216) = type metadata accessor for RDContactInteractionAlarmProducer();
  *(void *)(v13 + 224) = sub_100683CC0(&qword_100910958, (void (*)(uint64_t))type metadata accessor for RDContactInteractionAlarmProducer);
  *(void *)(v13 + 192) = a6;
  sub_100094134(&qword_100921598);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100776E40;
  *(void *)(v14 + 56) = type metadata accessor for RDAlarmNotificationConsumer();
  *(void *)(v14 + 64) = &off_1008BF248;
  *(void *)(v14 + 32) = a7;
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  swift_retain();
  sub_10067F67C(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100907B68 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10008E2DC(v20, (uint64_t)qword_100921578);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v21, "os_transaction RELEASE {name: com.apple.remindd.RDAlarmEngineAssembly}", v22, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100683CC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100683D08(uint64_t a1)
{
  uint64_t result = sub_100687354(&qword_1009215D8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupSectionsInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100683D60()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009215A0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009215A0);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100683E28(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v67 = a3;
  uint64_t v60 = a6;
  uint64_t v59 = type metadata accessor for REMRemindersListDataView.GroupSectionsModel();
  __chkstk_darwin(v59);
  uint64_t v57 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel();
  uint64_t v58 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v55 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v56 = (char *)v45 - v13;
  uint64_t v14 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v52 = *(void *)(v14 - 8);
  uint64_t v53 = v14;
  __chkstk_darwin(v14);
  unint64_t v62 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v51 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  id v18 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v54 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  os_log_type_t v21 = (char *)v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)v45 - v23;
  uint64_t v66 = a5;
  uint64_t v25 = (void *)REMRemindersListDataView.GroupSectionsInvocation.Parameters.group.getter();
  unint64_t v65 = a4;
  id v26 = sub_100685858((uint64_t)a2, a4, v25);

  if (!v6)
  {
    uint64_t v27 = v64;
    uint64_t v46 = v18;
    uint64_t v47 = v21;
    uint64_t v49 = Configuration;
    id v50 = v26;
    uint64_t v28 = v62;
    uint64_t v29 = (uint64_t)v24;
    uint64_t v48 = v19;
    uint64_t v30 = (uint64_t)a2;
    uint64_t v31 = v65;
    uint64_t v32 = sub_100686A98(v63, a2, v67, v65, v66);
    v45[1] = v33;
    uint64_t v63 = v32;
    id v34 = [v27 fetchResultTokenToDiffAgainst];
    sub_10051F2BC(v34, (uint64_t)a2, v29);
    uint64_t v67 = 0;

    uint64_t v35 = v46;
    REMRemindersListDataView.GroupSectionsInvocation.Parameters.configuration.getter();
    uint64_t v36 = (uint64_t)v28;
    REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter();
    long long v64 = *(void (**)(void, void))(v51 + 8);
    v64(v35, v49);
    uint64_t v37 = v63;
    swift_bridgeObjectRetain();
    sub_10052A24C(v36, v29, v30, v31, 0, v37);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v36, v53);
    REMRemindersListDataView.GroupSectionsInvocation.Parameters.configuration.getter();
    REMRemindersListDataView.FetchConfiguration.countCompleted.getter();
    v64(v35, v49);
    uint64_t v38 = v56;
    REMRemindersListDataView.ListsSectionsModel.init(lists:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    uint64_t v39 = v29;
    uint64_t v40 = v58;
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
    v45[0] = v29;
    v41(v55, v38, v61);
    id v42 = v50;
    REMRemindersListDataView.GroupSectionsModel.init(listSections:group:)();
    uint64_t v43 = v54;
    uint64_t v44 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v47, v39, v48);
    sub_100687354(&qword_100921688, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupSectionsModel);
    sub_100687354(&qword_100921690, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupSectionsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();

    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v61);
    (*(void (**)(void, uint64_t))(v43 + 8))(v45[0], v44);
  }
}

uint64_t sub_100684410@<X0>(void **a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, uint64_t, uint64_t)@<X3>, void (*a5)(char *, uint64_t)@<X4>, NSObject *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, uint64_t *a10)
{
  uint64_t v86 = a6;
  BOOL v76 = a8;
  uint64_t v81 = a7;
  uint64_t v82 = a3;
  uint64_t v83 = a4;
  unint64_t v84 = a5;
  id v85 = a2;
  uint64_t v70 = a9;
  uint64_t v77 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List.ListType();
  uint64_t v71 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v69 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v73 = (char *)&v66 - v13;
  __chkstk_darwin(v14);
  id v80 = (char *)&v66 - v15;
  uint64_t v79 = type metadata accessor for REMRemindersListDataView.SectionsModel();
  uint64_t v88 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  id v68 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v75 = (char *)&v66 - v18;
  uint64_t v78 = type metadata accessor for REMRemindersListDataView.ListSectionsModel();
  uint64_t v89 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v67 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v72 = (char *)&v66 - v21;
  uint64_t v22 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v22 - 8);
  id v74 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  __chkstk_darwin(Configuration - 8);
  uint64_t v25 = type metadata accessor for REMRemindersListDataView.ListSectionsInvocation.Parameters();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v66 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100094134(&qword_1009202D8);
  uint64_t v66 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v31 = ((char *)&v66 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = *a1;
  REMList.codable.getter();
  REMRemindersListDataView.GroupSectionsInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.ListSectionsInvocation.Parameters.init(list:configuration:)();
  uint64_t v33 = v87;
  sub_1005A6AC8(v83, (uint64_t)v84, v86, (uint64_t)v28, (uint64_t)v31);
  if (v33)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    *a10 = v33;
  }
  else
  {
    id v85 = v32;
    uint64_t v35 = v76;
    uint64_t v36 = v31;
    uint64_t v37 = v73;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    uint64_t v38 = v72;
    uint64_t v86 = v36;
    uint64_t v87 = v29;
    REMRemindersListDataView.DefaultInvocationResult.model.getter();
    uint64_t v39 = v75;
    REMRemindersListDataView.ListSectionsModel.sectionsModel.getter();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v89 + 8);
    v89 += 8;
    unint64_t v84 = v40;
    v40(v38, v78);
    uint64_t v41 = (uint64_t)v74;
    REMRemindersListDataView.SectionsModel.remindersCount.getter();
    uint64_t v42 = v88 + 8;
    uint64_t v83 = *(void (**)(char *, uint64_t, uint64_t))(v88 + 8);
    ((void (*)(char *, uint64_t))v83)(v39, v79);
    uint64_t v43 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    uint64_t v44 = *(void *)(v43 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v41, 1, v43) == 1)
    {
      uint64_t result = sub_1000966BC(v41, &qword_100909C70);
      uint64_t v45 = 0;
    }
    else
    {
      uint64_t v45 = REMRemindersListDataView.CountByCompleted.completed.getter();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v41, v43);
    }
    uint64_t v46 = v80;
    uint64_t v47 = v37;
    uint64_t v48 = v77;
    if (__OFADD__(*v35, v45))
    {
      __break(1u);
    }
    else
    {
      *v35 += v45;
      id v49 = v85;
      id v50 = [v85 groceryContext];
      if (v50
        && (uint64_t v51 = v50,
            unsigned __int8 v52 = [v50 shouldCategorizeGroceryItems],
            v51,
            (v52 & 1) != 0))
      {
        uint64_t v53 = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.grocery(_:);
      }
      else
      {
        uint64_t v53 = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.regular(_:);
      }
      uint64_t v54 = v71;
      uint64_t v88 = v42;
      (*(void (**)(char *, void, uint64_t))(v71 + 104))(v47, *v53, v48);
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v46, v47, v48);
      id v55 = [v49 objectID];
      uint64_t v82 = REMObjectID.codable.getter();

      id v56 = [v49 displayName];
      uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      BOOL v76 = v57;

      id v58 = [v49 color];
      if (v58)
      {
        uint64_t v59 = v58;
        id v85 = (id)REMColor.codable.getter();
      }
      else
      {
        id v85 = 0;
      }
      uint64_t v60 = v67;
      uint64_t v61 = v80;
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v69, v80, v48);
      unint64_t v62 = v86;
      uint64_t v63 = v87;
      REMRemindersListDataView.DefaultInvocationResult.model.getter();
      long long v64 = v60;
      unint64_t v65 = v68;
      REMRemindersListDataView.ListSectionsModel.sectionsModel.getter();
      v84(v64, v78);
      REMRemindersListDataView.SectionsModel.sections.getter();
      ((void (*)(char *, uint64_t))v83)(v65, v79);
      REMRemindersListDataView.ListsSectionsModel.List.init(listID:listName:listColor:listType:sections:)();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v61, v48);
      return (*(uint64_t (**)(NSObject *, uint64_t))(v66 + 8))(v62, v63);
    }
  }
  return result;
}

uint64_t sub_100684BE8@<X0>(void (**a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void (*a6)(char *, uint64_t, uint64_t)@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, void (**a10)(char *, uint64_t))
{
  uint64_t v70 = a6;
  uint64_t v60 = a8;
  uint64_t v65 = a7;
  uint64_t v66 = a3;
  uint64_t v67 = a4;
  uint64_t v68 = a5;
  uint64_t v69 = a2;
  uint64_t v52 = a9;
  uint64_t v11 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List.ListType();
  uint64_t v56 = *(void *)(v11 - 8);
  uint64_t v57 = v11;
  __chkstk_darwin(v11);
  uint64_t v61 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for REMRemindersListDataView.SectionsModel();
  uint64_t v72 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  id v55 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v59 = (char *)&v52 - v15;
  uint64_t v62 = type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsModel();
  uint64_t v73 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v54 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v58 = (char *)&v52 - v18;
  uint64_t v19 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v19 - 8);
  uint64_t v64 = (uint64_t)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  __chkstk_darwin(Configuration - 8);
  uint64_t v22 = type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100094134(&qword_1009207B8);
  uint64_t v53 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *a1;
  REMSmartList.codable.getter();
  REMRemindersListDataView.GroupSectionsInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.init(smartList:shouldFetchManualOrderingID:configuration:)();
  uint64_t v30 = v71;
  sub_1000C7700(v67, v68, v70, (uint64_t)v25, (uint64_t)v28);
  if (v30)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    *a10 = v30;
  }
  else
  {
    uint64_t v71 = v29;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    uint64_t v32 = v58;
    uint64_t v69 = v26;
    REMRemindersListDataView.DefaultInvocationResult.model.getter();
    uint64_t v33 = v59;
    REMRemindersListDataView.CustomSmartListSectionsModel.sectionsModel.getter();
    id v34 = *(void (**)(char *, uint64_t))(v73 + 8);
    v73 += 8;
    v34(v32, v62);
    uint64_t v35 = v64;
    REMRemindersListDataView.SectionsModel.remindersCount.getter();
    uint64_t v36 = v72 + 8;
    uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 8);
    ((void (*)(char *, uint64_t))v70)(v33, v63);
    uint64_t v37 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v35, 1, v37) == 1)
    {
      uint64_t result = sub_1000966BC(v64, &qword_100909C70);
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v40 = v64;
      uint64_t v39 = REMRemindersListDataView.CountByCompleted.completed.getter();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v40, v37);
    }
    uint64_t v41 = v71;
    uint64_t v42 = v61;
    uint64_t v43 = *v60 + v39;
    if (__OFADD__(*v60, v39))
    {
      __break(1u);
    }
    else
    {
      uint64_t v71 = v34;
      uint64_t v72 = v36;
      *uint64_t v60 = v43;
      id v44 = [v41 objectID:v52];
      uint64_t v68 = REMObjectID.codable.getter();

      id v45 = [v41 name];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v46 = [v41 color];
      if (v46)
      {
        uint64_t v47 = v46;
        REMColor.codable.getter();
      }
      uint64_t v48 = v54;
      (*(void (**)(char *, void, uint64_t))(v56 + 104))(v42, enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.customSmartList(_:), v57);
      uint64_t v49 = v69;
      REMRemindersListDataView.DefaultInvocationResult.model.getter();
      id v50 = v48;
      uint64_t v51 = v55;
      REMRemindersListDataView.CustomSmartListSectionsModel.sectionsModel.getter();
      v71(v50, v62);
      REMRemindersListDataView.SectionsModel.sections.getter();
      ((void (*)(char *, uint64_t))v70)(v51, v63);
      REMRemindersListDataView.ListsSectionsModel.List.init(listID:listName:listColor:listType:sections:)();
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v28, v49);
    }
  }
  return result;
}

uint64_t _s19PolymorphicListItemCMa_1()
{
  return self;
}

ValueMetadata *_s19PolymorphicListItemC5ModelOMa_1()
{
  return &_s19PolymorphicListItemC5ModelON_1;
}

uint64_t sub_100685320(uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_10090F728);
  __chkstk_darwin(v11);
  uint64_t v15 = (void **)((char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  LODWORD(v61) = a2;
  uint64_t v57 = v3;
  uint64_t v58 = v16;
  uint64_t v17 = (char *)v15 + *(int *)(v12 + 48);
  unint64_t v56 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = a1 + v56;
  uint64_t v63 = *(void *)(v13 + 72);
  uint64_t v60 = a1;
  swift_bridgeObjectRetain();
  sub_100687404(v18, (uint64_t)v15);
  uint64_t v59 = v8;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v69 = *v15;
  uint64_t v20 = (uint64_t)v69;
  uint64_t v64 = v7;
  uint64_t v65 = v10;
  uint64_t v62 = v17;
  v19(v10, v17, v7);
  uint64_t v21 = (void *)*a3;
  unint64_t v23 = sub_100307040(v20);
  uint64_t v24 = v21[2];
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_23;
  }
  char v27 = v22;
  if (v21[3] >= v26)
  {
    if (v61)
    {
      if (v22) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_100318F84();
      if (v27) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v33 = (void *)*a3;
    *(void *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    *(void *)(v33[6] + 8 * v23) = v20;
    uint64_t v34 = v33[7];
    uint64_t v61 = *(void *)(v59 + 72);
    uint64_t v35 = v64;
    v19((char *)(v34 + v61 * v23), v65, v64);
    uint64_t v36 = v33[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v33[2] = v38;
    uint64_t v39 = v58 - 1;
    if (v58 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v40 = v60 + v63 + v56;
    while (1)
    {
      sub_100687404(v40, (uint64_t)v15);
      uint64_t v69 = *v15;
      uint64_t v41 = (uint64_t)v69;
      v19(v65, v62, v35);
      uint64_t v42 = (void *)*a3;
      unint64_t v43 = sub_100307040(v41);
      uint64_t v45 = v42[2];
      BOOL v46 = (v44 & 1) == 0;
      BOOL v37 = __OFADD__(v45, v46);
      uint64_t v47 = v45 + v46;
      if (v37) {
        break;
      }
      char v48 = v44;
      if (v42[3] < v47)
      {
        sub_10030F308(v47, 1);
        unint64_t v43 = sub_100307040(v41);
        if ((v48 & 1) != (v49 & 1)) {
          goto LABEL_25;
        }
      }
      if (v48) {
        goto LABEL_10;
      }
      id v50 = (void *)*a3;
      *(void *)(*a3 + 8 * (v43 >> 6) + 64) |= 1 << v43;
      *(void *)(v50[6] + 8 * v43) = v41;
      uint64_t v35 = v64;
      v19((char *)(v50[7] + v61 * v43), v65, v64);
      uint64_t v51 = v50[2];
      BOOL v37 = __OFADD__(v51, 1);
      uint64_t v52 = v51 + 1;
      if (v37) {
        goto LABEL_24;
      }
      v50[2] = v52;
      v40 += v63;
      if (!--v39) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_10030F308(v26, v61 & 1);
  unint64_t v28 = sub_100307040(v20);
  if ((v27 & 1) == (v29 & 1))
  {
    unint64_t v23 = v28;
    if ((v27 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v31 = swift_allocError();
    swift_willThrow();
    uint64_t v68 = v31;
    swift_errorRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v65, v64);
      uint64_t v32 = v69;
      swift_bridgeObjectRelease();

      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  type metadata accessor for REMObjectID_Codable();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  uint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v53._object = (void *)0x80000001007D3E70;
  v53._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v53);
  type metadata accessor for REMObjectID_Codable();
  _print_unlocked<A, B>(_:_:)();
  v54._uint64_t countAndFlagsBits = 39;
  v54._object = (void *)0xE100000000000000;
  String.append(_:)(v54);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_100685858(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = _s10PredicatesOMa_1();
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10077A530;
  *(void *)(v9 + 32) = [a3 objectID];
  uint64_t v21 = v9;
  specialized Array._endMutation()();
  *uint64_t v8 = v21;
  swift_storeEnumTagMultiPayload();
  if (qword_100907890 != -1) {
    swift_once();
  }
  unint64_t v10 = qword_100942570;
  uint64_t v11 = (void *)sub_100535B3C();
  uint64_t v12 = (void *)sub_1003BD0F4(0, v10, 0, (uint64_t)v11);

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v12 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {

    sub_1003B0A6C((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
    return a3;
  }
  uint64_t v21 = v14;
  sub_100094134(&qword_100910160);
  sub_1000ED03C();
  unint64_t v15 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();

  unint64_t v16 = sub_10053B340(v15, a2);
  id result = (id)swift_bridgeObjectRelease();
  if (!(v16 >> 62))
  {
    if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    sub_1003B0A6C((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
    return a3;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  id result = (id)swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_14;
  }
LABEL_9:
  if ((v16 & 0xC000000000000001) != 0)
  {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_12;
  }
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v18 = *(id *)(v16 + 32);
LABEL_12:
    a3 = v18;
    swift_bridgeObjectRelease();
    sub_1003B0A6C((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
    return a3;
  }
  __break(1u);
  return result;
}

char *sub_100685BF0(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v36 = a2;
  uint64_t v5 = sub_100094134(&qword_1009138C8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List();
  uint64_t v29 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v35 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v28 = (char *)v27 - v11;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v34 = a1 & 0xC000000000000001;
    v27[1] = v3;
    v27[2] = v29 + 16;
    uint64_t v31 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    uint64_t v32 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
    uint64_t v30 = (void (**)(char *, char *, uint64_t))(v29 + 32);
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
    uint64_t v3 = 4;
    unint64_t v33 = a1;
    while (1)
    {
      id v14 = v34 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v3);
      unint64_t v15 = v14;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      uint64_t v37 = v3 - 3;
      uint64_t v16 = REMObjectID.codable.getter();
      uint64_t v17 = (void *)v16;
      uint64_t v18 = v36;
      if (*(void *)(v36 + 16))
      {
        unint64_t v19 = sub_100307040(v16);
        if (v20)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v7, *(void *)(v18 + 56) + *(void *)(v29 + 72) * v19, v8);
          uint64_t v21 = 0;
        }
        else
        {
          uint64_t v21 = 1;
        }
      }
      else
      {
        uint64_t v21 = 1;
      }
      (*v32)(v7, v21, 1, v8);

      if ((*v31)(v7, 1, v8) == 1)
      {
        sub_1000966BC((uint64_t)v7, &qword_1009138C8);
      }
      else
      {
        char v22 = *v30;
        unint64_t v23 = v28;
        (*v30)(v28, v7, v8);
        v22(v35, v23, v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = (char *)sub_100309604(0, *((void *)v13 + 2) + 1, 1, (unint64_t)v13);
        }
        unint64_t v25 = *((void *)v13 + 2);
        unint64_t v24 = *((void *)v13 + 3);
        if (v25 >= v24 >> 1) {
          uint64_t v13 = (char *)sub_100309604(v24 > 1, v25 + 1, 1, (unint64_t)v13);
        }
        *((void *)v13 + 2) = v25 + 1;
        v22(&v13[((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v25], v35, v8);
      }
      a1 = v33;
      ++v3;
      if (v37 == v12)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_100685FC4(char *a1, unint64_t a2, unint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v11 = sub_100094134(&qword_10090F728);
  uint64_t v71 = *(void *)(v11 - 8);
  uint64_t v72 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v70 = a2;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v14) {
      goto LABEL_61;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v14) {
      goto LABEL_61;
    }
  }
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_5;
    }
LABEL_61:
    swift_bridgeObjectRetain();
    return (uint64_t)a1;
  }
  uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15) {
    goto LABEL_61;
  }
LABEL_5:
  unint64_t v82 = (unint64_t)_swiftEmptyArrayStorage;
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v74 = v15;
  uint64_t v75 = a3;
  uint64_t v65 = a5;
  id v68 = (id)a4;
  unint64_t v67 = a1;
  uint64_t v66 = (uint64_t *)v13;
  uint64_t v69 = v5;
  unint64_t v16 = v70;
  unint64_t v73 = v70 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  a4 = v14;
  do
  {
    if (v73) {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v18 = *(id *)(v16 + 8 * (void)v17 + 32);
    }
    id v19 = v18;
    _s19PolymorphicListItemCMa_1();
    uint64_t v20 = swift_allocObject();
    uint64_t v79 = type metadata accessor for REMList_Codable();
    uint64_t v80 = sub_100687354(&qword_100919310, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
    uint64_t v81 = sub_100687354(&qword_100919318, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
    v78[0] = v19;
    sub_1003F08EC((uint64_t)v78, (uint64_t)v77);
    sub_100094134(&qword_100919320);
    if (swift_dynamicCast())
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
      unint64_t v21 = v76;
LABEL_16:
      *(void *)(v20 + 16) = v21;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v77);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_8;
    }
    type metadata accessor for REMSmartList_Codable();
    if (swift_dynamicCast())
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
      unint64_t v21 = v76 | 0x8000000000000000;
      goto LABEL_16;
    }
    if (qword_100907B70 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_1009215A0);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "unknown or unsupported REM object type for PolymorphicListItem", v25, 2u);
      unint64_t v16 = v70;
      swift_slowDealloc();
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v77);
    swift_deallocPartialClassInstance();
LABEL_8:
    uint64_t v17 = (char *)v17 + 1;
  }
  while ((void *)a4 != v17);
  swift_bridgeObjectRelease();
  unint64_t v26 = v82;
  unint64_t v82 = (unint64_t)_swiftEmptyArrayStorage;
  if (v74 < 1)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  unint64_t v73 = v26;
  unint64_t v27 = v75 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  do
  {
    if (v27) {
      id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v29 = *(id *)(v75 + 8 * v28 + 32);
    }
    id v30 = v29;
    uint64_t v31 = swift_allocObject();
    uint64_t v79 = type metadata accessor for REMSmartList_Codable();
    uint64_t v80 = sub_100687354(&qword_100919328, (void (*)(uint64_t))&type metadata accessor for REMSmartList_Codable);
    uint64_t v81 = sub_100687354(&qword_100919330, (void (*)(uint64_t))&type metadata accessor for REMSmartList_Codable);
    v78[0] = v30;
    sub_1003F08EC((uint64_t)v78, (uint64_t)v77);
    if (swift_dynamicCast())
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
      unint64_t v32 = v76;
LABEL_34:
      *(void *)(v31 + 16) = v32;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v77);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_26;
    }
    if (swift_dynamicCast())
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
      unint64_t v32 = v76 | 0x8000000000000000;
      goto LABEL_34;
    }
    if (qword_100907B70 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_10008E2DC(v33, (uint64_t)qword_1009215A0);
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "unknown or unsupported REM object type for PolymorphicListItem", v36, 2u);
      swift_slowDealloc();
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v77);
    swift_deallocPartialClassInstance();
LABEL_26:
    ++v28;
  }
  while (v74 != v28);
  swift_bridgeObjectRelease();
  v78[0] = v73;
  sub_100202724(v82);
  a4 = v78[0];
  if (!(v78[0] >> 62))
  {
    uint64_t v37 = *(void *)((v78[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v38 = v68;
    id v39 = v68;
    goto LABEL_43;
  }
LABEL_64:
  id v38 = v68;
  id v49 = v68;
  swift_bridgeObjectRetain();
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_43:
  uint64_t v40 = v69;
  if (v37 <= 1) {
    goto LABEL_48;
  }
  uint64_t v41 = (void *)sub_10022914C(v38, v65);
  if (v40)
  {

    swift_errorRelease();
    id v42 = 0;
    uint64_t v40 = 0;
    goto LABEL_49;
  }
  if (v41)
  {
    id v42 = v41;
    uint64_t v43 = REMOrderedIdentifierMap.reorder<A>(objects:)();
    swift_bridgeObjectRelease();

    a4 = v43;
  }
  else
  {
LABEL_48:

    id v42 = 0;
  }
LABEL_49:
  uint64_t v69 = v40;
  if (a4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v44) {
      goto LABEL_66;
    }
LABEL_51:
    v78[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v44 & 0x8000000000000000) == 0)
    {
      uint64_t v45 = 0;
      do
      {
        if ((a4 & 0xC000000000000001) != 0)
        {
          uint64_t v46 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v46 = *(void *)(a4 + 8 * v45 + 32);
          swift_retain();
        }
        id v47 = [(id)(*(void *)(v46 + 16) & 0x7FFFFFFFFFFFFFFFLL) remObjectID];
        swift_release();
        ++v45;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v44 != v45);
      char v48 = (void *)v78[0];
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v44 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v44) {
    goto LABEL_51;
  }
LABEL_66:
  swift_bridgeObjectRelease();
  char v48 = _swiftEmptyArrayStorage;
LABEL_67:
  id v50 = v67;
  int64_t v51 = *((void *)v67 + 2);
  uint64_t v52 = _swiftEmptyArrayStorage;
  if (v51)
  {
    unint64_t v70 = (unint64_t)v48;
    unint64_t v73 = (unint64_t)v42;
    v78[0] = _swiftEmptyArrayStorage;
    sub_1001DE3DC(0, v51, 0);
    uint64_t v52 = (void *)v78[0];
    uint64_t v75 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List();
    uint64_t v53 = *(void *)(v75 - 8);
    uint64_t v74 = *(void *)(v53 + 16);
    Swift::String v54 = &v50[(*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80)];
    uint64_t v55 = *(void *)(v53 + 72);
    unint64_t v56 = v66;
    do
    {
      ((void (*)(char *, char *, uint64_t))v74)((char *)v56 + *(int *)(v72 + 48), v54, v75);
      *unint64_t v56 = REMRemindersListDataView.ListsSectionsModel.List.listID.getter();
      v78[0] = v52;
      unint64_t v58 = v52[2];
      unint64_t v57 = v52[3];
      if (v58 >= v57 >> 1)
      {
        sub_1001DE3DC(v57 > 1, v58 + 1, 1);
        uint64_t v52 = (void *)v78[0];
      }
      v52[2] = v58 + 1;
      sub_10068739C((uint64_t)v56, (uint64_t)v52+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(void *)(v71 + 72) * v58);
      v54 += v55;
      --v51;
    }
    while (v51);
    id v42 = (id)v73;
    char v48 = (void *)v70;
  }
  uint64_t v59 = v69;
  if (v52[2])
  {
    sub_100094134(&qword_1009146A8);
    uint64_t v60 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v60 = _swiftEmptyDictionarySingleton;
  }
  v78[0] = v60;
  uint64_t v61 = swift_bridgeObjectRetain();
  sub_100685320(v61, 1, v78);
  if (v59)
  {
LABEL_80:
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v62 = v78[0];
  swift_retain();
  a1 = sub_100685BF0((unint64_t)v48, v62);
  swift_bridgeObjectRelease();

  swift_release_n();
  return (uint64_t)a1;
}

uint64_t sub_100686A98(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  Swift::String v54 = a4;
  uint64_t v51 = a1;
  uint64_t v52 = a3;
  uint64_t v50 = _s10PredicatesOMa_3();
  __chkstk_darwin(v50);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _s10PredicatesOMa_1();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)REMRemindersListDataView.GroupSectionsInvocation.Parameters.group.getter();
  id v15 = [v14 objectID];

  uint64_t v53 = a5;
  char v16 = REMRemindersListDataView.GroupSectionsInvocation.Parameters.includePinnedSublists.getter();
  *(void *)uint64_t v13 = v15;
  LOBYTE(v17) = v16 & 1;
  v13[8] = v16 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v55 = (uint64_t *)v15;
  id v18 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v19 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v20 = [(id)swift_getObjCClassFromMetadata() entity];
  [v19 setEntity:v20];

  [v19 setAffectedStores:0];
  [v19 setPredicate:v18];

  if (qword_100907888 != -1) {
    goto LABEL_13;
  }
  while (1)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v19 setSortDescriptors:isa];

    uint64_t v22 = (uint64_t)a2;
    uint64_t v23 = NSManagedObjectContext.fetch<A>(_:)();
    if (v6) {
      break;
    }
    id v49 = v10;
    unint64_t v56 = (void *)v23;
    sub_100094134(&qword_100910160);
    sub_1000ED03C();
    unint64_t v24 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    unint64_t v25 = sub_10053B340(v24, v54);
    swift_bridgeObjectRelease();
    unint64_t v48 = v25;
    if (v25 >> 62)
    {
      sub_1000963CC(0, &qword_10090E198);
      swift_bridgeObjectRetain();
      unint64_t v26 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_1000963CC(0, &qword_10090E198);
      unint64_t v26 = v25;
    }
    uint64_t v27 = (uint64_t)v49;
    unint64_t v56 = 0;
    type metadata accessor for REMRemindersListDataView.ListSectionsInvocation();
    id v28 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
    __chkstk_darwin(v28);
    uint64_t v29 = v51;
    *(&v46 - 8) = v30;
    *(&v46 - 7) = v29;
    uint64_t v31 = v52;
    *(&v46 - 6) = (uint64_t)a2;
    *(&v46 - 5) = v31;
    uint64_t v32 = v53;
    *(&v46 - 4) = (uint64_t)v54;
    *(&v46 - 3) = v32;
    *(&v46 - 2) = (uint64_t)&v56;
    uint64_t v47 = sub_100224BFC((void (*)(id *, uint64_t *))sub_1006872BC, (uint64_t)(&v46 - 10), v26);
    swift_bridgeObjectRelease();

    unint64_t v34 = v56;
    os_log_type_t v35 = v55;
    *(void *)uint64_t v27 = v55;
    *(unsigned char *)(v27 + 8) = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = v35;
    unint64_t v36 = sub_100649DD0(v27, (uint64_t)a2, 0);
    uint64_t v37 = (uint64_t)v54;
    uint64_t v6 = 0;
    unint64_t v17 = (unint64_t)sub_10064A824(v36, v54);
    swift_bridgeObjectRelease();
    if (v17 >> 62)
    {
      sub_1000963CC(0, &qword_10090B330);
      swift_bridgeObjectRetain();
      unint64_t v38 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_1000963CC(0, &qword_10090B330);
      unint64_t v38 = v17;
    }
    unint64_t v56 = 0;
    type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsInvocation();
    id v39 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
    uint64_t v55 = &v46;
    __chkstk_darwin(v39);
    uint64_t v40 = v51;
    *(&v46 - 8) = v41;
    *(&v46 - 7) = v40;
    uint64_t v42 = v52;
    *(&v46 - 6) = (uint64_t)a2;
    *(&v46 - 5) = v42;
    *(&v46 - 4) = v37;
    *(&v46 - 3) = v53;
    *(&v46 - 2) = (uint64_t)&v56;
    uint64_t v43 = sub_100224BFC((void (*)(id *, uint64_t *))sub_1006872E8, (uint64_t)(&v46 - 10), v38);
    Swift::String v54 = a2;
    uint64_t v44 = (uint64_t *)v43;
    swift_bridgeObjectRelease();

    uint64_t v52 = (uint64_t)v56;
    unint64_t v56 = (void *)v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v55 = v44;
    sub_100202928((uint64_t)v44);
    a2 = v56;
    uint64_t v45 = (void *)REMRemindersListDataView.GroupSectionsInvocation.Parameters.group.getter();
    id v19 = [v45 accountID];

    uint64_t v22 = sub_100685FC4((char *)a2, v48, v17, (unint64_t)v19, v54);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1003B0A6C((uint64_t)v49, (uint64_t (*)(void))_s10PredicatesOMa_3);
    sub_1003B0A6C((uint64_t)v13, (uint64_t (*)(void))_s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!__OFADD__(v34, v52)) {
      return v22;
    }
    __break(1u);
LABEL_13:
    swift_once();
  }

  sub_1003B0A6C((uint64_t)v13, (uint64_t (*)(void))_s10PredicatesOMa_1);
  return v22;
}

uint64_t sub_1006872BC(uint64_t a1, uint64_t a2)
{
  return sub_100687314(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, uint64_t))sub_100684410);
}

uint64_t sub_1006872E8(uint64_t a1, uint64_t a2)
{
  return sub_100687314(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, uint64_t))sub_100684BE8);
}

uint64_t sub_100687314(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void, void, void, void, void, void, uint64_t))
{
  return a3(a1, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8], a2);
}

uint64_t sub_100687354(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10068739C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10090F728);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100687404(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10090F728);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10068746C@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v32 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMJSONType();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_bridgeObjectRetain();
  sub_10020B9F0(v13);
  swift_bridgeObjectRelease();
  type metadata accessor for RDPermanentlyHiddenReminder();
  sub_100688068(&qword_1009216A0, (void (*)(uint64_t))type metadata accessor for RDPermanentlyHiddenReminder);
  Array<A>.toJSON()();
  uint64_t result = swift_release();
  if (!v2)
  {
    uint64_t v28 = v10;
    uint64_t v29 = v9;
    id v15 = v30;
    sub_100094134(&qword_100908170);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)(inited + 32) = 0xD00000000000001ALL;
    *(void *)(inited + 40) = 0x80000001007D8AF0;
    REMJSONType.associatedValueAsAny.getter();
    unint64_t v17 = sub_1001805C0(inited);
    sub_1000CAA4C(v1 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate, (uint64_t)v5);
    uint64_t v18 = v31;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v5, 1, v32) == 1)
    {
      sub_1000EACF4((uint64_t)v5);
    }
    else
    {
      id v19 = v8;
      id v20 = v8;
      uint64_t v21 = v32;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v5, v32);
      Date.timeIntervalSinceReferenceDate.getter();
      os_log_type_t v35 = &type metadata for Double;
      *(void *)&long long v34 = v22;
      sub_10009A1A0(&v34, v33);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v36 = v17;
      sub_1002C54C8(v33, 0xD000000000000029, 0x80000001007D8B10, isUniquelyReferenced_nonNull_native);
      unint64_t v17 = v36;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v21);
    }
    uint64_t v24 = v29;
    uint64_t v25 = v28;
    os_log_type_t v35 = &type metadata for Int;
    *(void *)&long long v34 = kREMSupportedVersionFor2024;
    sub_10009A1A0(&v34, v33);
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v36 = v17;
    sub_1002C54C8(v33, 0xD000000000000017, 0x80000001007C63B0, v26);
    unint64_t v27 = v36;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v24);
    *id v15 = v27;
    return (*(uint64_t (**)(unint64_t *, void, uint64_t))(v25 + 104))(v15, enum case for REMJSONType.jsonObject(_:), v24);
  }
  return result;
}

uint64_t sub_100687898@<X0>(unint64_t *a1@<X8>)
{
  return sub_10068746C(a1);
}

uint64_t sub_1006878BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006878E8(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1006878E8(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100920260);
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v46 = v2;
  __chkstk_darwin(v2);
  uint64_t v44 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v41);
  uint64_t v40 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v40 - v6;
  __chkstk_darwin(v7);
  uint64_t v42 = (char *)&v40 - v8;
  uint64_t v9 = sub_100094134(&qword_100921698);
  uint64_t v47 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100094134(&qword_100909CD0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for REMJSONType();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v18 = __chkstk_darwin(v16);
  id v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v20, a1, v16, v18);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v20, v16);
  if (v21 == enum case for REMJSONType.jsonObject(_:))
  {
    (*(void (**)(char *, uint64_t))(v17 + 96))(v20, v16);
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:), v12);
    uint64_t v49 = kREMSupportedVersionFor2024;
    uint64_t v22 = v48;
    Dictionary<>.deserializeOptional<A>(key:valueType:defaultValue:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (v22)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v15;
    }
    id v15 = v50;
    if ((rem_isUnsupportedVersionByRuntime() & 1) == 0)
    {
      uint64_t v29 = type metadata accessor for RDPermanentlyHiddenReminder();
      uint64_t v30 = sub_100688068(&qword_1009216A0, (void (*)(uint64_t))type metadata accessor for RDPermanentlyHiddenReminder);
      *uint64_t v11 = v29;
      v11[1] = v30;
      uint64_t v31 = v47;
      (*(void (**)(uint64_t *, void, uint64_t))(v47 + 104))(v11, enum case for Dictionary<>.DeserializableValueType.jsonArray<A, B><A1>(_:), v9);
      sub_100094134(&qword_1009216A8);
      Dictionary<>.deserializeRequired<A>(key:valueType:)();
      (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v11, v9);
      uint64_t v32 = sub_100127E24((uint64_t)v50);
      swift_bridgeObjectRelease();
      long long v34 = v44;
      uint64_t v33 = v45;
      uint64_t v35 = v46;
      (*(void (**)(char *, void, uint64_t))(v45 + 104))(v44, enum case for Dictionary<>.DeserializableValueType.date<A, B><A1>(_:), v46);
      uint64_t v36 = type metadata accessor for Date();
      uint64_t v37 = (uint64_t)v43;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v43, 1, 1, v36);
      uint64_t v38 = (uint64_t)v42;
      Dictionary<>.deserializeOptional<A>(key:valueType:defaultValue:)();
      swift_bridgeObjectRelease();
      sub_1000EACF4(v37);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
      uint64_t v39 = v40;
      sub_1000CAAB4(v38, v40);
      type metadata accessor for RDRecentlyDeletedInfo();
      id v15 = (char *)swift_allocObject();
      *((void *)v15 + 2) = v32;
      sub_1000CAAB4(v39, (uint64_t)&v15[OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate]);
      return (uint64_t)v15;
    }
    swift_bridgeObjectRelease();
    uint64_t v23 = type metadata accessor for REMJSONDeserializationError();
    sub_100688068((unint64_t *)&qword_100909CE8, (void (*)(uint64_t))&type metadata accessor for REMJSONDeserializationError);
    swift_allocError();
    uint64_t v25 = v28;
    *uint64_t v28 = v15;
    char v26 = (unsigned int *)&enum case for REMJSONDeserializationError.notSupported(_:);
LABEL_6:
    (*(void (**)(char **, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, *v26, v23);
    swift_willThrow();
    return (uint64_t)v15;
  }
  if (v21 == enum case for REMJSONType.jsonArray(_:))
  {
    (*(void (**)(char *, uint64_t))(v17 + 96))(v20, v16);
    swift_bridgeObjectRelease();
    uint64_t v23 = type metadata accessor for REMJSONDeserializationError();
    sub_100688068((unint64_t *)&qword_100909CE8, (void (*)(uint64_t))&type metadata accessor for REMJSONDeserializationError);
    swift_allocError();
    uint64_t v25 = v24;
    char v26 = (unsigned int *)&enum case for REMJSONDeserializationError.invalidData(_:);
    goto LABEL_6;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100688068(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1006880B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100688358((void (*)(uint64_t))&static Date.distantPast.getter, a1);
}

BOOL sub_1006880C8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v26 - v9;
  sub_100688358((void (*)(uint64_t))&static Date.distantFuture.getter, (uint64_t)v26 - v9);
  sub_10062C010((uint64_t)v8);
  char v11 = static Date.< infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  if (v11) {
    return 1;
  }
  sub_100688358((void (*)(uint64_t))&static Date.distantFuture.getter, (uint64_t)v10);
  sub_10062C010((uint64_t)v8);
  char v14 = static Date.== infix(_:_:)();
  v12(v8, v4);
  v12(v10, v4);
  if ((v14 & 1) == 0) {
    return 0;
  }
  id v15 = [v2 name];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;
  }
  else
  {
    uint64_t v17 = 0;
    unint64_t v19 = 0xE000000000000000;
  }
  void v26[2] = v17;
  uint64_t v26[3] = v19;
  id v20 = [a1 name];
  if (v20)
  {
    int v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v24 = 0xE000000000000000;
  }
  v26[0] = v22;
  v26[1] = v24;
  sub_1000E4FD8();
  uint64_t v25 = StringProtocol.localizedStandardCompare<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v25 == -1;
}

uint64_t sub_100688340@<X0>(uint64_t a1@<X8>)
{
  return sub_100688358((void (*)(uint64_t))&static Date.distantFuture.getter, a1);
}

uint64_t sub_100688358@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [v4 creationDate];
  if (v13)
  {
    char v14 = v13;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v15 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v15(v12, v9, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
    if (v16 != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v15)(a2, v12, v6);
    }
  }
  else
  {
    uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  a1(v16);
  return sub_1000EACF4((uint64_t)v12);
}

void sub_100688540(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_1006885B8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009216B0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009216B0);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t type metadata accessor for RDNoOpAppProtectionGuard()
{
  return self;
}

uint64_t sub_1006886A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, void))
{
  return a10(1, 0);
}

uint64_t sub_1006886D4(char a1, uint64_t a2, uint64_t (*a3)(void, uint64_t))
{
  if (a2)
  {
    swift_getErrorValue();
    uint64_t v6 = Error.rem_errorDescription.getter();
    unint64_t v8 = v7;
    goto LABEL_9;
  }
  uint64_t v6 = 7104878;
  if ((a1 & 1) == 0)
  {
    unint64_t v8 = 0xE300000000000000;
LABEL_9:
    if (qword_100907B78 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_1009216B0);
    swift_bridgeObjectRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 67240450;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 8) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v6, v8, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v14, "RDSystemAppProtectionGuard: initiate auth finished {success: %{BOOL,public}d, error: %{public}s}", (uint8_t *)v15, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_13;
    }
LABEL_14:

    swift_bridgeObjectRelease_n();
    return a3(a1 & 1, a2);
  }
  if (qword_100907B78 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_1009216B0);
  swift_bridgeObjectRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v10, v11)) {
    goto LABEL_14;
  }
  uint64_t v12 = swift_slowAlloc();
  uint64_t v17 = swift_slowAlloc();
  *(_DWORD *)uint64_t v12 = 67240450;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v12 + 8) = 2082;
  swift_bridgeObjectRetain();
  sub_1000C51B8(7104878, 0xE300000000000000, &v17);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDSystemAppProtectionGuard: initiate auth finished {success: %{BOOL,public}d, error: %{public}s}", (uint8_t *)v12, 0x12u);
  swift_arrayDestroy();
  swift_slowDealloc();
LABEL_13:
  swift_slowDealloc();

  return a3(a1 & 1, a2);
}

uint64_t type metadata accessor for RDSystemAppProtectionGuard()
{
  return self;
}

void sub_100688A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t a1, uint64_t a2, void *a3), void *a6, uint64_t a7, unint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
}

uint64_t sub_100688AB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMFeatureFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10010B4E8(a1, (uint64_t)v9);
  unint64_t v6 = v10 | ((unint64_t)v11 << 32);
  uint64_t result = 2;
  switch(v11 >> 14)
  {
    case 2:
      unsigned __int16 v11 = WORD2(v6) & 0x3FFF;
      (*(void (**)(unsigned char *, void, uint64_t))(v3 + 104))(v5, enum case for REMFeatureFlags.protectedApps(_:), v2);
      char v8 = REMFeatureFlags.isEnabled.getter();
      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
      sub_100689048(a1);
      uint64_t result = 2;
      if ((v8 & 1) != 0 && (v6 & 0x800) == 0) {
        uint64_t result = HIDWORD(v6) & 1;
      }
      break;
    case 3:
      return result;
    default:
      unsigned __int16 v11 = WORD2(v6) & 0x3FFF;
      sub_100689048(a1);
      uint64_t result = 2;
      break;
  }
  return result;
}

void sub_100688C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t a1, uint64_t a2, void *a3), void *a6, uint64_t a7, unint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = self;
  NSString v14 = String._bridgeToObjectiveC()();
  id v26 = [v13 applicationWithBundleIdentifier:v14];

  if (qword_100907B78 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_1009216B0);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446466;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a7, a8, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2082;
    if (a9) {
      uint64_t v19 = 4408148;
    }
    else {
      uint64_t v19 = 0xD000000000000013;
    }
    if (a9) {
      unint64_t v20 = 0xE300000000000000;
    }
    else {
      unint64_t v20 = 0x80000001007DBCF0;
    }
    sub_1000C51B8(v19, v20, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDSystemAppProtectionGuard: initiate auth {processDescription: %{public}s, accessGrantReason: %{public}s}", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (a9) {
    uint64_t v21 = 1;
  }
  else {
    uint64_t v21 = 2;
  }
  uint64_t v25 = v21;
  id v22 = [self sharedGuard];
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a10;
  *(void *)(v23 + 24) = a11;
  uint64_t v35 = sub_100689028;
  uint64_t v36 = v23;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v32 = 1107296256;
  uint64_t v33 = sub_100688540;
  long long v34 = &unk_1008CF9D0;
  unint64_t v24 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  uint64_t aBlock = a3;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  long long v34 = a6;
  [v22 initiateAuthenticationWithShieldingForSubject:v26 onBehalfOfProcessWithAuditToken:&aBlock accessGrantReason:v25 completion:v24];

  _Block_release(v24);
}

uint64_t sub_100688FF0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100689028(char a1, uint64_t a2)
{
  return sub_1006886D4(a1, a2, *(uint64_t (**)(void, uint64_t))(v2 + 16));
}

uint64_t sub_100689030(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100689040()
{
  return swift_release();
}

uint64_t sub_100689048(uint64_t a1)
{
  return a1;
}

uint64_t sub_100689088(uint64_t a1)
{
  uint64_t result = sub_100691DCC(&qword_100921830, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AssignedInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1006890E0(unsigned char *a1@<X8>)
{
  if (qword_100907430 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_100916CC0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unexpected .localInternal in AccountsListDataView", v5, 2u);
    swift_slowDealloc();
  }

  *a1 = 3;
}

uint64_t sub_1006891D4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1001F8BC8(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_10068B2A8(v6);
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_100689250()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009217F8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009217F8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100689318(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v72 = a4;
  id v73 = a3;
  uint64_t v70 = a2;
  uint64_t v66 = a5;
  uint64_t v57 = type metadata accessor for REMRemindersListDataView.AssignedModel();
  uint64_t v67 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v63 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v65 = (char *)v47 - v9;
  uint64_t v68 = type metadata accessor for REMRemindersListDataView.ListsModel();
  uint64_t v64 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v61 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v69 = (char *)v47 - v12;
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v59 = *(void *)(v13 - 8);
  uint64_t v60 = v13;
  __chkstk_darwin(v13);
  unint64_t v58 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v62 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v17 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v20 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)v47 - v19);
  uint64_t v21 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v71 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v23 = (void (**)(char *, uint64_t))((char *)v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = (uint64_t)a1;
  uint64_t v25 = v74;
  id v26 = sub_100689A30(a1);
  if (!v25)
  {
    unint64_t v56 = v23;
    uint64_t v74 = v21;
    id v54 = v5;
    uint64_t v52 = v17;
    uint64_t v55 = v20;
    uint64_t v53 = v15;
    unint64_t v27 = (unint64_t)v26;
    uint64_t v28 = sub_10068F8FC((unint64_t)v26, a1, v73, v72);
    uint64_t v30 = v29;
    uint64_t v31 = sub_100691138(v27, (uint64_t)a1);
    id v51 = v30;
    int v33 = v32 & 1;
    uint64_t v34 = v31;
    uint64_t v35 = REMRemindersListDataView.AssignedInvocation.Parameters.currentUserShareParticipantIDsOverride.getter();
    uint64_t v36 = v56;
    REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter();
    uint64_t v50 = v35;
    v47[0] = sub_100691428((uint64_t)a1, v27, v35, v34, v33, v36, (uint64_t)v28);
    v47[1] = v33;
    uint64_t v48 = v34;
    uint64_t v49 = v28;
    (*(void (**)(void, uint64_t))(v71 + 8))(v36, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v37 = [v54 fetchResultTokenToDiffAgainst];
    uint64_t v38 = v55;
    sub_10051F2BC(v37, v24, (uint64_t)v55);
    uint64_t v74 = 0;

    uint64_t v39 = (uint64_t)v58;
    REMRemindersListDataView.AssignedInvocation.Parameters.remindersPrefetch.getter();
    uint64_t v40 = (uint64_t)v49;
    swift_bridgeObjectRetain();
    sub_10052A250(v39, v38, v24, v73, 0, v40);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v39, v60);
    uint64_t v41 = v69;
    REMRemindersListDataView.ListsModel.init(groups:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    uint64_t v42 = v64;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v61, v41, v68);
    id v73 = v51;
    uint64_t v43 = v65;
    REMRemindersListDataView.AssignedModel.init(listsModel:assignedSmartList:)();
    uint64_t v44 = v67;
    uint64_t v45 = v57;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v63, v43, v57);
    uint64_t v46 = v62;
    (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v62 + 16))(v52, v55, v53);
    sub_100691DCC(&qword_100921838, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AssignedModel);
    sub_100691DCC(&qword_100921840, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AssignedModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();

    (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v45);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v69, v68);
    (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v46 + 8))(v55, v53);
  }
}

void *sub_100689A30(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (void *)sub_1003AD42C(3uLL, 0, 7);
  sub_1000963CC(0, &qword_10090ABC0);
  id v6 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v7 = [(id)swift_getObjCClassFromMetadata() entity];
  [v6 setEntity:v7];

  [v6 setAffectedStores:0];
  [v6 setPredicate:v5];
  uint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v2)
  {
    if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
    {
      unint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v9 = (uint64_t)sub_100209D74(v14);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v9 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    unint64_t v15 = v9;
    sub_1006891D4((uint64_t *)&v15);
    swift_bridgeObjectRelease();
    unint64_t v10 = v15;
    id v11 = v3;
    id v12 = a1;
    uint64_t v3 = sub_10068DD30(_swiftEmptyArrayStorage, v10);
    swift_release();
  }
  return v3;
}

id sub_100689BEC@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10068A09C(a1, a2);
}

void sub_100689C04(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = [*a1 reminder];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 objectID];

    *a2 = v5;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100689C78@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v15 = __chkstk_darwin(v14).n128_u64[0];
  os_log_type_t v17 = (char *)&v36 - v16;
  id v38 = *a1;
  id v18 = [v38 identifier:v15];
  uint64_t v39 = a4;
  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_8;
  }
  uint64_t v19 = v18;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v9, v13, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_8:
    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
LABEL_10:
    uint64_t v30 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v39, 1, 1, v30);
  }
  v20(v17, v9, v10);
  if (!*(void *)(*(void *)a2 + 16) || (sub_100306EC4((uint64_t)v17), (v21 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_10;
  }
  uint64_t v22 = v37;
  swift_bridgeObjectRetain();
  unint64_t v23 = swift_bridgeObjectRetain();
  sub_10068F1E0(v23, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v26 = [v24 objectIDWithUUID:isa];

  REMObjectID.codable.getter();
  id v27 = v38;
  id v28 = [v38 name];
  if (v28)
  {
    uint64_t v29 = v28;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v32 = [v27 color];
  if (v32)
  {
    int v33 = v32;
    REMColor.codable.getter();
  }
  uint64_t v34 = v39;
  REMRemindersListDataView.ListsModel.Sublist.init(listID:listName:listColor:reminders:isCustomSmartList:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  uint64_t v35 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 0, 1, v35);
}

id sub_10068A09C@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v12 = __chkstk_darwin(v11).n128_u64[0];
  uint64_t v14 = (char *)v21 - v13;
  id result = [*a1 reminder:v12];
  if (result)
  {
    uint64_t v16 = result;
    id v17 = [result identifier];

    if (v17)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    }
    sub_1000F44F4((uint64_t)v10, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
    {
      id result = (id)sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_100909E50);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v14, v4);
      sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_100909E50);
      uint64_t v18 = UUID.uuidString.getter();
      uint64_t v19 = v20;
      id result = (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    *a2 = v18;
    a2[1] = v19;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10068A2FC(uint64_t *a1, id *a2)
{
  uint64_t v98 = type metadata accessor for Date();
  uint64_t v101 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v100 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v97 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  int v96 = (char *)&v91 - v8;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v9 - 8);
  int v102 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v91 - v12;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v99 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v91 - v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v91 - v21;
  *(void *)&double v24 = __chkstk_darwin(v23).n128_u64[0];
  id v26 = (char *)&v91 - v25;
  id v104 = *a2;
  id v27 = [v104 identifier:v24];
  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    goto LABEL_12;
  }
  id v28 = v27;
  uint64_t v94 = a1;
  uint64_t v103 = v26;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v29(v13, v22, v14);
  uint64_t v92 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
  v92(v13, 0, 1, v14);
  uint64_t v95 = v15;
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v30(v13, 1, v14) == 1)
  {
LABEL_12:
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
    if (qword_100907B80 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E2DC(v51, (uint64_t)qword_1009217F8);
    id v52 = v104;
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      unint64_t v56 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 138412290;
      id v57 = [v52 objectID];
      id v106 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v56 = v57;

      _os_log_impl((void *)&_mh_execute_header, v53, v54, "REMRemindersListDataView.AssignedInvocation: cdAssignment has no identifier %@", v55, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return;
  }
  uint64_t v93 = v14;
  v29(v103, v13, v14);
  id v31 = [v104 reminder];
  if (v31)
  {
    id v32 = v31;
    id v33 = [v31 objectID];

    if (v33)
    {
      uint64_t v34 = *v94;
      id v35 = v33;
      uint64_t v36 = (char *)sub_1002F0330(v35, v34);

      if (v36)
      {
        id v37 = [v36 identifier];
        if (v37)
        {
          id v38 = v37;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v39 = (uint64_t)v102;
          uint64_t v40 = v22;
          uint64_t v41 = v93;
          v29(v102, v40, v93);
          v92((char *)v39, 0, 1, v41);
          if (v30((char *)v39, 1, v41) != 1)
          {
            uint64_t v92 = (void (*)(char *, void, uint64_t, uint64_t))v35;
            uint64_t v42 = v99;
            v29(v99, (char *)v39, v93);
            int v102 = v36;
            id v43 = [v36 assignedDate];
            if (v43)
            {
              uint64_t v44 = v43;
              uint64_t v45 = v100;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v46 = v101;
              uint64_t v47 = v96;
              uint64_t v48 = v98;
              (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v96, v45, v98);
              uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
              v49(v47, 0, 1, v48);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v47, 1, v48) == 1)
              {
                Class isa = 0;
              }
              else
              {
                Class isa = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v48);
              }
            }
            else
            {
              uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56);
              uint64_t v48 = v98;
              v49(v96, 1, 1, v98);
              Class isa = 0;
            }
            uint64_t v71 = self;
            UUID.uuidString.getter();
            NSString v72 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v71 orderValueWithAssignedDate:isa objectIdentifier:v72];
            double v74 = v73;

            id v75 = [v104 assignedDate];
            if (v75)
            {
              unint64_t v76 = v75;
              uint64_t v77 = v100;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v78 = v101;
              uint64_t v79 = v97;
              (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v97, v77, v48);
              v49(v79, 0, 1, v48);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v79, 1, v48) == 1)
              {
                Class v80 = 0;
              }
              else
              {
                Class v80 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v48);
              }
            }
            else
            {
              v49(v97, 1, 1, v48);
              Class v80 = 0;
            }
            uint64_t v81 = v103;
            UUID.uuidString.getter();
            NSString v82 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v71 orderValueWithAssignedDate:v80 objectIdentifier:v82];
            double v84 = v83;

            id v85 = v92;
            uint64_t v86 = v102;
            if (v74 <= v84)
            {
              id v87 = v104;
              id v88 = v85;
              sub_1001A6D68((uint64_t)v87, (uint64_t)v88);

              uint64_t v86 = v88;
            }

            uint64_t v89 = *(void (**)(char *, uint64_t))(v95 + 8);
            uint64_t v90 = v93;
            v89(v42, v93);
            v89(v81, v90);
            return;
          }
        }
        else
        {
          uint64_t v39 = (uint64_t)v102;
          v92(v102, 1, 1, v93);
        }

        sub_1000966BC(v39, (uint64_t *)&unk_100909E50);
      }
      id v69 = v104;
      id v70 = v35;
      sub_1001A6D68((uint64_t)v69, (uint64_t)v70);

      (*(void (**)(char *, uint64_t))(v95 + 8))(v103, v93);
      return;
    }
  }
  if (qword_100907B80 != -1) {
    swift_once();
  }
  uint64_t v58 = type metadata accessor for Logger();
  sub_10008E2DC(v58, (uint64_t)qword_1009217F8);
  uint64_t v59 = v95;
  uint64_t v60 = v103;
  uint64_t v61 = v93;
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v19, v103, v93);
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = (uint8_t *)swift_slowAlloc();
    id v104 = (id)swift_slowAlloc();
    id v106 = v104;
    *(_DWORD *)uint64_t v64 = 136315138;
    int v102 = (char *)(v64 + 4);
    uint64_t v65 = UUID.uuidString.getter();
    uint64_t v105 = sub_1000C51B8(v65, v66, (uint64_t *)&v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v67 = *(void (**)(char *, uint64_t))(v59 + 8);
    v67(v19, v61);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "REMRemindersListDataView.AssignedInvocation: cdAssignment has no owning reminder {identifier: %s}", v64, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v67(v103, v61);
  }
  else
  {

    uint64_t v68 = *(void (**)(char *, uint64_t))(v59 + 8);
    v68(v19, v61);
    v68(v60, v61);
  }
}

void sub_10068AE60(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v32 - v14;
  id v16 = *(id *)(a1 + 8);
  id v17 = [v16 ckAssigneeIdentifier];
  if (v17)
  {
    uint64_t v18 = v17;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Swift::String v19 = String.uppercased()();
    swift_bridgeObjectRelease();
    char v20 = sub_1001BCB84(v19._countAndFlagsBits, (uint64_t)v19._object, a2);
    swift_bridgeObjectRelease();
    if (v20)
    {
LABEL_11:
      id v28 = v36;
      goto LABEL_12;
    }

LABEL_10:
    id v16 = 0;
    goto LABEL_11;
  }
  if (qword_100907B80 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_10008E2DC(v21, (uint64_t)qword_1009217F8);
  id v22 = v16;
  uint64_t v23 = Logger.logObject.getter();
  int v24 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v23, (os_log_type_t)v24))
  {

    goto LABEL_10;
  }
  int v34 = v24;
  uint64_t v35 = v3;
  uint64_t v25 = (uint8_t *)swift_slowAlloc();
  uint64_t v33 = swift_slowAlloc();
  uint64_t v38 = v33;
  *(_DWORD *)uint64_t v25 = 136315138;
  id v26 = [v22 identifier];
  if (v26)
  {
    id v27 = v26;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  sub_1000F44F4((uint64_t)v12, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6))
  {
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
    unint64_t v29 = 0xE300000000000000;
    uint64_t v30 = 7104878;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, v6);
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
    uint64_t v30 = UUID.uuidString.getter();
    unint64_t v29 = v31;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  id v28 = v36;
  uint64_t v37 = sub_1000C51B8(v30, v29, &v38);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v34, "REMRemindersListDataView.AssignedInvocation: cdAssignment has no ckAssigneeIdentifier {identifier: %s}", v25, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  id v16 = 0;
LABEL_12:
  *id v28 = v16;
}

void sub_10068B2A8(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_216;
    }
    if (v4) {
      sub_10068C72C(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_224;
  }
  Swift::Int v154 = v5;
  Swift::Int v159 = v4;
  unint64_t v151 = a1;
  if (v4 < 2)
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v173 = (uint64_t)_swiftEmptyArrayStorage;
    id v163 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
LABEL_182:
      if (v12 >= 2)
      {
        uint64_t v144 = *v151;
        do
        {
          unint64_t v145 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_211;
          }
          if (!v144) {
            goto LABEL_223;
          }
          uint64_t v146 = v9;
          uint64_t v147 = *(void *)&v9[16 * v145 + 32];
          uint64_t v148 = *(void *)&v9[16 * v12 + 24];
          sub_10068CC90((id *)(v144 + 8 * v147), (id *)(v144 + 8 * *(void *)&v9[16 * v12 + 16]), v144 + 8 * v148, v163);
          if (v2) {
            break;
          }
          if (v148 < v147) {
            goto LABEL_212;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v146 = sub_1001F433C((uint64_t)v146);
          }
          if (v145 >= *((void *)v146 + 2)) {
            goto LABEL_213;
          }
          uint64_t v149 = &v146[16 * v145 + 32];
          *(void *)uint64_t v149 = v147;
          *((void *)v149 + 1) = v148;
          unint64_t v150 = *((void *)v146 + 2);
          if (v12 > v150) {
            goto LABEL_214;
          }
          memmove(&v146[16 * v12 + 16], &v146[16 * v12 + 32], 16 * (v150 - v12));
          uint64_t v9 = v146;
          *((void *)v146 + 2) = v150 - 1;
          unint64_t v12 = v150 - 1;
        }
        while (v150 > 2);
      }
LABEL_193:
      swift_bridgeObjectRelease();
      *(void *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    sub_1000963CC(0, &qword_10090ABC0);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    Swift::Int v4 = v159;
    id v163 = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v173 = v8;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v152 = *a1 - 8;
  uint64_t v153 = *a1 + 16;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  uint64_t v164 = *a1;
  while (1)
  {
    uint64_t v160 = v10;
    if (v10 + 1 >= v4)
    {
      Swift::Int v165 = v10 + 1;
      goto LABEL_23;
    }
    uint64_t v155 = v9;
    uint64_t v13 = *(void **)(v11 + 8 * v10);
    id v14 = *(id *)(v11 + 8 * (v10 + 1));
    id v15 = v13;
    id v16 = [v14 accountTypeHost];
    REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();
    if (v2)
    {

      if (qword_100907430 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E2DC(v17, (uint64_t)qword_100916CC0);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v18, v19))
      {
        char v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unknown or undefined account type in AccountsListDataView", v20, 2u);
        swift_slowDealloc();
      }
      swift_errorRelease();

      uint64_t v2 = 0;
      uint64_t v10 = v160;
    }
    else
    {

      unsigned int v51 = v170;
      if (v170 != 4) {
        goto LABEL_67;
      }
    }
    unsigned int v51 = 3;
LABEL_67:
    id v52 = v15;
    id v53 = [v52 accountTypeHost:sub_100216B70, 0, sub_1006890E0, 0, 0, 0, 0, 0, 0, &_s16AccountSortOrderON];
    REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();

    if (v169 != 4)
    {
      if (v51 < v169)
      {
LABEL_69:
        int v55 = 1;
      }
      else
      {
        if (v169 >= v51)
        {
          Swift::Int v4 = v159;
          goto LABEL_73;
        }
        int v55 = 0;
      }
      Swift::Int v4 = v159;
      goto LABEL_136;
    }
    BOOL v54 = v51 == 3;
    if (v51 < 3) {
      goto LABEL_69;
    }
    Swift::Int v4 = v159;
    if (!v54)
    {
      int v55 = 0;
      goto LABEL_136;
    }
LABEL_73:
    id v56 = [v14 name:sub_100216B70:0:sub_1006890E0:0:0:0:0:0:&_s16AccountSortOrderON];
    if (v56)
    {
      id v57 = v56;
      uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v60 = v59;
    }
    else
    {
      uint64_t v58 = 0;
      unint64_t v60 = 0xE000000000000000;
    }
    id v112 = [v52 name];
    if (v112)
    {
      uint64_t v113 = v112;
      uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v116 = v115;
    }
    else
    {
      uint64_t v114 = 0;
      unint64_t v116 = 0xE000000000000000;
    }
    uint64_t v11 = v164;
    if (v58 == v114 && v60 == v116) {
      int v55 = 0;
    }
    else {
      int v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v10 = v160;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_136:

    Swift::Int v117 = v10 + 2;
    if (v10 + 2 < v4) {
      break;
    }
    Swift::Int v165 = v10 + 2;
    uint64_t v9 = v155;
    if (v55) {
      goto LABEL_169;
    }
LABEL_23:
    if (v165 >= v4) {
      goto LABEL_76;
    }
    if (__OFSUB__(v165, v10)) {
      goto LABEL_215;
    }
    if (v165 - v10 >= v154) {
      goto LABEL_76;
    }
    if (__OFADD__(v10, v154)) {
      goto LABEL_217;
    }
    if (v10 + v154 >= v4) {
      Swift::Int v21 = v4;
    }
    else {
      Swift::Int v21 = v10 + v154;
    }
    if (v21 < v10)
    {
LABEL_218:
      __break(1u);
      goto LABEL_219;
    }
    Swift::Int v22 = v165;
    if (v165 == v21) {
      goto LABEL_76;
    }
    uint64_t v156 = v9;
    Swift::Int v157 = v21;
    uint64_t v23 = v152 + 8 * v165;
    while (2)
    {
      uint64_t v25 = *(void **)(v11 + 8 * v22);
      uint64_t v26 = v10;
      uint64_t v161 = v23;
      Swift::Int v166 = v22;
      while (1)
      {
        id v27 = *(void **)v23;
        id v28 = v25;
        id v29 = v27;
        id v30 = [v28 accountTypeHost];
        REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();
        if (v2)
        {

          if (qword_100907430 != -1) {
            swift_once();
          }
          uint64_t v31 = type metadata accessor for Logger();
          sub_10008E2DC(v31, (uint64_t)qword_100916CC0);
          uint64_t v32 = Logger.logObject.getter();
          os_log_type_t v33 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v32, v33))
          {
            int v34 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)int v34 = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unknown or undefined account type in AccountsListDataView", v34, 2u);
            swift_slowDealloc();
          }
          swift_errorRelease();

          uint64_t v2 = 0;
        }
        else
        {

          unsigned int v35 = v172;
          if (v172 != 4) {
            goto LABEL_45;
          }
        }
        unsigned int v35 = 3;
LABEL_45:
        id v36 = v29;
        id v37 = [v36 accountTypeHost:sub_100216B70 :0 :sub_1006890E0 :0 :0 :0 :0 :0 :&_s16AccountSortOrderON];
        REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();

        if (v171 != 4) {
          break;
        }
        if (v35 >= 3)
        {
          if (v35 != 3) {
            goto LABEL_33;
          }
          goto LABEL_49;
        }
LABEL_47:

        Swift::Int v24 = v166;
LABEL_61:
        if (!v11) {
          goto LABEL_220;
        }
        uint64_t v50 = *(void **)v23;
        uint64_t v25 = *(void **)(v23 + 8);
        *(void *)uint64_t v23 = v25;
        *(void *)(v23 + 8) = v50;
        v23 -= 8;
        if (v24 == ++v26) {
          goto LABEL_35;
        }
      }
      if (v35 < v171) {
        goto LABEL_47;
      }
      if (v171 < v35)
      {
LABEL_33:

        goto LABEL_34;
      }
LABEL_49:
      uint64_t v38 = v28;
      id v39 = [v28 name:sub_100216B70, 0, sub_1006890E0, 0, 0, 0, 0, 0, 0, &_s16AccountSortOrderON];
      if (v39)
      {
        uint64_t v40 = v39;
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v43 = v42;
      }
      else
      {
        uint64_t v41 = 0;
        unint64_t v43 = 0xE000000000000000;
      }
      id v44 = [v36 name];
      if (v44)
      {
        uint64_t v45 = v44;
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v48 = v47;

        if (v41 != v46)
        {
LABEL_60:
          char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v11 = v164;
          uint64_t v2 = 0;
          Swift::Int v24 = v166;
          if ((v49 & 1) == 0) {
            goto LABEL_35;
          }
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v48 = 0xE000000000000000;
        if (v41) {
          goto LABEL_60;
        }
      }
      if (v43 != v48) {
        goto LABEL_60;
      }

      swift_bridgeObjectRelease_n();
      uint64_t v11 = v164;
      uint64_t v2 = 0;
LABEL_34:
      Swift::Int v24 = v166;
LABEL_35:
      Swift::Int v22 = v24 + 1;
      uint64_t v10 = v160;
      uint64_t v23 = v161 + 8;
      if (v22 != v157) {
        continue;
      }
      break;
    }
    Swift::Int v165 = v157;
    uint64_t v9 = v156;
LABEL_76:
    if (v165 < v10) {
      goto LABEL_210;
    }
    uint64_t v61 = v9;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v9 = v61;
    }
    else {
      uint64_t v9 = sub_1001F3D80(0, *((void *)v61 + 2) + 1, 1, v61);
    }
    unint64_t v63 = *((void *)v9 + 2);
    unint64_t v62 = *((void *)v9 + 3);
    unint64_t v12 = v63 + 1;
    if (v63 >= v62 >> 1) {
      uint64_t v9 = sub_1001F3D80((char *)(v62 > 1), v63 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v12;
    uint64_t v64 = v9 + 32;
    uint64_t v65 = &v9[16 * v63 + 32];
    *(void *)uint64_t v65 = v10;
    *((void *)v65 + 1) = v165;
    if (v63)
    {
      unint64_t v66 = v9;
      while (1)
      {
        unint64_t v67 = v12 - 1;
        if (v12 >= 4)
        {
          NSString v72 = &v64[16 * v12];
          uint64_t v73 = *((void *)v72 - 8);
          uint64_t v74 = *((void *)v72 - 7);
          BOOL v78 = __OFSUB__(v74, v73);
          uint64_t v75 = v74 - v73;
          if (v78) {
            goto LABEL_199;
          }
          uint64_t v77 = *((void *)v72 - 6);
          uint64_t v76 = *((void *)v72 - 5);
          BOOL v78 = __OFSUB__(v76, v77);
          uint64_t v70 = v76 - v77;
          char v71 = v78;
          if (v78) {
            goto LABEL_200;
          }
          unint64_t v79 = v12 - 2;
          Class v80 = &v64[16 * v12 - 32];
          uint64_t v82 = *(void *)v80;
          uint64_t v81 = *((void *)v80 + 1);
          BOOL v78 = __OFSUB__(v81, v82);
          uint64_t v83 = v81 - v82;
          if (v78) {
            goto LABEL_202;
          }
          BOOL v78 = __OFADD__(v70, v83);
          uint64_t v84 = v70 + v83;
          if (v78) {
            goto LABEL_205;
          }
          if (v84 >= v75)
          {
            int v102 = &v64[16 * v67];
            uint64_t v104 = *(void *)v102;
            uint64_t v103 = *((void *)v102 + 1);
            BOOL v78 = __OFSUB__(v103, v104);
            uint64_t v105 = v103 - v104;
            if (v78) {
              goto LABEL_209;
            }
            BOOL v95 = v70 < v105;
            goto LABEL_114;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v96 = *((void *)v9 + 4);
            uint64_t v97 = *((void *)v9 + 5);
            BOOL v78 = __OFSUB__(v97, v96);
            uint64_t v89 = v97 - v96;
            char v90 = v78;
            goto LABEL_108;
          }
          uint64_t v69 = *((void *)v9 + 4);
          uint64_t v68 = *((void *)v9 + 5);
          BOOL v78 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          char v71 = v78;
        }
        if (v71) {
          goto LABEL_201;
        }
        unint64_t v79 = v12 - 2;
        id v85 = &v64[16 * v12 - 32];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v88 = __OFSUB__(v86, v87);
        uint64_t v89 = v86 - v87;
        char v90 = v88;
        if (v88) {
          goto LABEL_204;
        }
        uint64_t v91 = &v64[16 * v67];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v78 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v78) {
          goto LABEL_207;
        }
        if (__OFADD__(v89, v94)) {
          goto LABEL_208;
        }
        if (v89 + v94 >= v70)
        {
          BOOL v95 = v70 < v94;
LABEL_114:
          if (v95) {
            unint64_t v67 = v79;
          }
          goto LABEL_116;
        }
LABEL_108:
        if (v90) {
          goto LABEL_203;
        }
        uint64_t v98 = &v64[16 * v67];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        BOOL v78 = __OFSUB__(v99, v100);
        uint64_t v101 = v99 - v100;
        if (v78) {
          goto LABEL_206;
        }
        if (v101 < v89)
        {
          uint64_t v9 = v66;
          goto LABEL_14;
        }
LABEL_116:
        unint64_t v106 = v67 - 1;
        if (v67 - 1 >= v12)
        {
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
LABEL_215:
          __break(1u);
LABEL_216:
          __break(1u);
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        if (!v164) {
          goto LABEL_221;
        }
        id v107 = &v64[16 * v106];
        uint64_t v108 = *(void *)v107;
        uint64_t v109 = &v64[16 * v67];
        uint64_t v110 = *((void *)v109 + 1);
        sub_10068CC90((id *)(v164 + 8 * *(void *)v107), (id *)(v164 + 8 * *(void *)v109), v164 + 8 * v110, v163);
        if (v2) {
          goto LABEL_193;
        }
        if (v110 < v108) {
          goto LABEL_196;
        }
        if (v67 > *((void *)v66 + 2)) {
          goto LABEL_197;
        }
        *(void *)id v107 = v108;
        *(void *)&v64[16 * v106 + 8] = v110;
        unint64_t v111 = *((void *)v66 + 2);
        if (v67 >= v111) {
          goto LABEL_198;
        }
        unint64_t v12 = v111 - 1;
        memmove(&v64[16 * v67], v109 + 16, 16 * (v111 - 1 - v67));
        uint64_t v9 = v66;
        *((void *)v66 + 2) = v111 - 1;
        if (v111 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_14:
    Swift::Int v4 = v159;
    uint64_t v10 = v165;
    uint64_t v11 = v164;
    if (v165 >= v159) {
      goto LABEL_182;
    }
  }
  uint64_t v118 = (id *)(v153 + 8 * v10);
  int v158 = v55;
  do
  {
    Swift::Int v165 = v117;
    uint64_t v119 = *(v118 - 1);
    id v120 = *v118;
    id v121 = v119;
    id v122 = [v120 accountTypeHost];
    REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();

    unsigned int v123 = v168;
    if (v168 == 4) {
      unsigned int v123 = 3;
    }
    id v124 = v121;
    id v125 = [v124 accountTypeHost:sub_100216B70, 0, sub_1006890E0, 0, 0, 0, 0, 0, 0, &_s16AccountSortOrderON];
    REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();

    if (v167 == 4)
    {
      BOOL v126 = v123 == 3;
      if (v123 >= 3)
      {
        Swift::Int v4 = v159;
        if (!v126) {
          goto LABEL_150;
        }
LABEL_146:
        id v127 = [v120 name:sub_100216B70, 0, sub_1006890E0, 0, 0, 0, 0, 0, 0, &_s16AccountSortOrderON];
        uint64_t v162 = v120;
        if (v127)
        {
          uint64_t v128 = v127;
          uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v131 = v130;
        }
        else
        {
          uint64_t v129 = 0;
          unint64_t v131 = 0xE000000000000000;
        }
        id v133 = [v124 name];
        if (v133)
        {
          uint64_t v134 = v133;
          uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v137 = v136;
        }
        else
        {
          uint64_t v135 = 0;
          unint64_t v137 = 0xE000000000000000;
        }
        if (v129 == v135 && v131 == v137)
        {

          swift_bridgeObjectRelease_n();
          uint64_t v11 = v164;
          LOBYTE(v55) = v158;
          if (v158)
          {
LABEL_168:
            uint64_t v9 = v155;
            uint64_t v10 = v160;
            goto LABEL_169;
          }
        }
        else
        {
          int v138 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          LOBYTE(v55) = v158;
          uint64_t v11 = v164;
          if ((v158 ^ v138)) {
            goto LABEL_165;
          }
        }
        goto LABEL_139;
      }
    }
    else if (v123 >= v167)
    {
      BOOL v132 = v167 >= v123;
      Swift::Int v4 = v159;
      if (!v132)
      {
LABEL_150:

        if (v55) {
          goto LABEL_168;
        }
        goto LABEL_139;
      }
      goto LABEL_146;
    }
    Swift::Int v4 = v159;

    if ((v55 & 1) == 0)
    {
      uint64_t v9 = v155;
      uint64_t v10 = v160;
      goto LABEL_23;
    }
LABEL_139:
    Swift::Int v117 = v165 + 1;
    ++v118;
  }
  while (v4 != v165 + 1);
  Swift::Int v165 = v4;
LABEL_165:
  uint64_t v10 = v160;
  uint64_t v9 = v155;
  if ((v55 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_169:
  Swift::Int v139 = v165;
  if (v165 >= v10)
  {
    if (v10 < v165)
    {
      int v140 = (uint64_t *)(v152 + 8 * v165);
      Swift::Int v141 = v10;
      uint64_t v142 = (uint64_t *)(v11 + 8 * v10);
      do
      {
        if (v141 != --v139)
        {
          if (!v11) {
            goto LABEL_222;
          }
          uint64_t v143 = *v142;
          uint64_t *v142 = *v140;
          *int v140 = v143;
        }
        ++v141;
        --v140;
        ++v142;
      }
      while (v141 < v139);
      uint64_t v9 = v155;
    }
    goto LABEL_23;
  }
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  __break(1u);
LABEL_224:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_10068C72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v38 = *a4;
    uint64_t v7 = *a4 + 8 * a3 - 8;
LABEL_6:
    uint64_t v8 = *(void **)(v38 + 8 * v6);
    uint64_t v9 = a1;
    uint64_t v36 = v7;
    uint64_t v37 = v6;
    while (1)
    {
      uint64_t v10 = *(void **)v7;
      id v11 = v8;
      id v12 = v10;
      id v13 = [v11 accountTypeHost];
      REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();
      if (v5)
      {

        if (qword_100907430 != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        sub_10008E2DC(v14, (uint64_t)qword_100916CC0);
        id v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unknown or undefined account type in AccountsListDataView", v17, 2u);
          swift_slowDealloc();
        }
        swift_errorRelease();

        uint64_t v5 = 0;
      }
      else
      {

        unsigned int v18 = v40;
        if (v40 != 4) {
          goto LABEL_15;
        }
      }
      unsigned int v18 = 3;
LABEL_15:
      id v19 = v12;
      id v20 = [v19 accountTypeHost:sub_100216B70 :0 :sub_1006890E0 :0 :0 :0 :0 :0 :&_s16AccountSortOrderON];
      REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();

      if (v39 == 4)
      {
        if (v18 < 3) {
          goto LABEL_17;
        }
        if (v18 != 3) {
          goto LABEL_4;
        }
      }
      else
      {
        if (v18 < v39)
        {
LABEL_17:

          goto LABEL_31;
        }
        if (v39 < v18)
        {
LABEL_4:

          goto LABEL_5;
        }
      }
      id v21 = [v11 name:sub_100216B70, 0, sub_1006890E0, 0, 0, 0, 0, 0, 0, &_s16AccountSortOrderON];
      if (v21)
      {
        Swift::Int v22 = v21;
        uint64_t v23 = v11;
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v26 = v25;
      }
      else
      {
        uint64_t v23 = v11;
        uint64_t v24 = 0;
        unint64_t v26 = 0xE000000000000000;
      }
      id v27 = [v19 name];
      if (v27)
      {
        id v28 = v27;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        if (v24 == v29) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v31 = 0xE000000000000000;
        if (!v24)
        {
LABEL_29:
          if (v26 == v31)
          {

            swift_bridgeObjectRelease_n();
            uint64_t v6 = v37;
            uint64_t v5 = 0;
LABEL_5:
            ++v6;
            uint64_t v7 = v36 + 8;
            if (v6 == a2) {
              return;
            }
            goto LABEL_6;
          }
        }
      }
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = v37;
      uint64_t v5 = 0;
      if ((v32 & 1) == 0) {
        goto LABEL_5;
      }
LABEL_31:
      if (!v38)
      {
        __break(1u);
        return;
      }
      os_log_type_t v33 = *(void **)v7;
      uint64_t v8 = *(void **)(v7 + 8);
      *(void *)uint64_t v7 = v8;
      *(void *)(v7 + 8) = v33;
      v7 -= 8;
      if (v6 == ++v9) {
        goto LABEL_5;
      }
    }
  }
}

uint64_t sub_10068CC90(id *a1, id *__src, unint64_t a3, void **__dst)
{
  uint64_t v5 = v4;
  uint64_t v6 = __dst;
  uint64_t v7 = __src;
  uint64_t v8 = (char *)__src - (char *)a1;
  uint64_t v9 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0) {
    uint64_t v9 = (char *)__src - (char *)a1;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v83 = a1;
  uint64_t v82 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_96;
    }
    if (__dst != __src || &__src[v13] <= __dst) {
      memmove(__dst, __src, 8 * v13);
    }
    unsigned __int8 v40 = &v6[v13];
    uint64_t v81 = v40;
    uint64_t v83 = v7;
    uint64_t v41 = a1;
    if (a1 >= v7 || v11 < 8)
    {
LABEL_95:
      sub_1001F3F4C(&v83, &v82, &v81);
      return 1;
    }
    unint64_t v42 = (id *)(a3 - 8);
    unint64_t v43 = v7;
    uint64_t v73 = v6;
    while (1)
    {
      unint64_t v79 = (unint64_t)v40;
      char v71 = v40 - 1;
      id v44 = *--v43;
      id v45 = *(v40 - 1);
      id v46 = v44;
      id v47 = [v45 accountTypeHost];
      REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();
      id v77 = v45;
      if (v5)
      {

        if (qword_100907430 != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for Logger();
        sub_10008E2DC(v48, (uint64_t)qword_100916CC0);
        char v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v49, v50))
        {
          unsigned int v51 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unsigned int v51 = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "Unknown or undefined account type in AccountsListDataView", v51, 2u);
          uint64_t v41 = a1;
          swift_slowDealloc();
        }
        swift_errorRelease();

        uint64_t v5 = 0;
      }
      else
      {

        unsigned int v52 = v80;
        if (v80 != 4) {
          goto LABEL_64;
        }
      }
      unsigned int v52 = 3;
LABEL_64:
      uint64_t v75 = v42 + 1;
      id v53 = v46;
      id v54 = [v53 accountTypeHost:sub_100216B70, 0, sub_1006890E0, 0, 0, 0, 0, 0, 0, &_s16AccountSortOrderON];
      REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();

      if (v80 == 4)
      {
        BOOL v55 = v52 == 3;
        if (v52 < 3) {
          goto LABEL_66;
        }
        id v57 = v77;
        if (!v55) {
          goto LABEL_73;
        }
      }
      else
      {
        if (v52 < v80)
        {
LABEL_66:

LABEL_67:
          id v56 = v73;
          if (v75 != v7 || v42 >= v7) {
            *unint64_t v42 = *v43;
          }
          uint64_t v83 = v43;
          unsigned __int8 v40 = (void **)v79;
          if (v43 <= v41) {
            goto LABEL_95;
          }
          goto LABEL_92;
        }
        if (v80 < v52)
        {
LABEL_73:

          goto LABEL_87;
        }
        id v57 = v77;
      }
      id v58 = [v57 name:sub_100216B70, 0, sub_1006890E0, 0, 0, 0, 0, 0, 0, &_s16AccountSortOrderON];
      if (v58)
      {
        unint64_t v59 = v58;
        uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v69 = v60;
      }
      else
      {
        uint64_t v68 = 0;
        unint64_t v69 = 0xE000000000000000;
      }
      id v61 = [v53 name];
      if (v61)
      {
        unint64_t v62 = v61;
        uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v65 = v64;
      }
      else
      {
        uint64_t v63 = 0;
        unint64_t v65 = 0xE000000000000000;
      }
      if (v68 == v63 && v69 == v65)
      {

        swift_bridgeObjectRelease_n();
        uint64_t v41 = a1;
      }
      else
      {
        char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v41 = a1;
        if (v66) {
          goto LABEL_67;
        }
      }
LABEL_87:
      id v56 = v73;
      uint64_t v81 = v71;
      if ((unint64_t)v75 < v79 || (unint64_t)v42 >= v79 || v75 != (id *)v79) {
        *unint64_t v42 = *v71;
      }
      unint64_t v43 = v7;
      unsigned __int8 v40 = v71;
      if (v7 <= v41) {
        goto LABEL_95;
      }
LABEL_92:
      --v42;
      uint64_t v7 = v43;
      if (v40 <= v56) {
        goto LABEL_95;
      }
    }
  }
  if (v8 >= -7)
  {
    uint64_t v14 = a1;
    if (__dst != a1 || &a1[v10] <= __dst) {
      memmove(__dst, a1, 8 * v10);
    }
    uint64_t v74 = &v6[v10];
    uint64_t v81 = v74;
    if ((unint64_t)v7 < a3 && v8 >= 8)
    {
      while (1)
      {
        id v15 = *v6;
        id v16 = *v7;
        id v17 = v15;
        id v18 = [v16 accountTypeHost];
        REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();
        BOOL v78 = v16;
        if (v5)
        {

          if (qword_100907430 != -1) {
            swift_once();
          }
          uint64_t v19 = type metadata accessor for Logger();
          sub_10008E2DC(v19, (uint64_t)qword_100916CC0);
          id v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v20, v21))
          {
            Swift::Int v22 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)Swift::Int v22 = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unknown or undefined account type in AccountsListDataView", v22, 2u);
            swift_slowDealloc();
          }
          swift_errorRelease();

          uint64_t v5 = 0;
        }
        else
        {

          unsigned int v23 = v80;
          if (v80 != 4) {
            goto LABEL_20;
          }
        }
        unsigned int v23 = 3;
LABEL_20:
        id v24 = v17;
        id v25 = [v24 accountTypeHost:sub_100216B70, 0, sub_1006890E0, 0, 0, 0, 0, 0, 0, &_s16AccountSortOrderON];
        REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();

        if (v80 == 4)
        {
          if (v23 < 3) {
            goto LABEL_22;
          }
          id v27 = v78;
          if (v23 != 3) {
            goto LABEL_28;
          }
        }
        else
        {
          if (v23 < v80)
          {
LABEL_22:

            goto LABEL_23;
          }
          if (v80 < v23)
          {
LABEL_28:

LABEL_42:
            if (v14 != v6) {
              *uint64_t v14 = *v6;
            }
            uint64_t v82 = ++v6;
            unint64_t v26 = v7;
            goto LABEL_45;
          }
          id v27 = v78;
        }
        NSString v72 = v6;
        id v28 = [v27 name:sub_100216B70:0:sub_1006890E0:0:0:0:0:0:&_s16AccountSortOrderON];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v32 = v31;
        }
        else
        {
          uint64_t v30 = 0;
          unint64_t v32 = 0xE000000000000000;
        }
        os_log_type_t v33 = v14;
        id v34 = [v24 name];
        if (v34)
        {
          unsigned int v35 = v34;
          uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v38 = v37;

          if (v30 == v36) {
            goto LABEL_39;
          }
        }
        else
        {
          unint64_t v38 = 0xE000000000000000;
          if (!v30)
          {
LABEL_39:
            if (v32 == v38)
            {

              swift_bridgeObjectRelease_n();
              uint64_t v6 = v72;
              uint64_t v14 = v33;
              goto LABEL_42;
            }
          }
        }
        char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v6 = v72;
        uint64_t v14 = v33;
        if ((v39 & 1) == 0) {
          goto LABEL_42;
        }
LABEL_23:
        unint64_t v26 = v7 + 1;
        if (v14 < v7 || v14 >= v26 || v14 != v7) {
          *uint64_t v14 = *v7;
        }
LABEL_45:
        uint64_t v83 = ++v14;
        if (v6 < v74)
        {
          uint64_t v7 = v26;
          if ((unint64_t)v26 < a3) {
            continue;
          }
        }
        goto LABEL_95;
      }
    }
    goto LABEL_95;
  }
LABEL_96:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10068D854()
{
  sub_1001DE058(0, 2, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  unint64_t v1 = _swiftEmptyArrayStorage[3];
  unint64_t v3 = v1 >> 1;
  unint64_t v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    sub_1001DE058(v1 > 1, v2 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v1 = _swiftEmptyArrayStorage[3];
    unint64_t v3 = v1 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v4;
  uint64_t v5 = &_swiftEmptyArrayStorage[2 * v2];
  v5[4] = 0x696669746E656469;
  v5[5] = 0xEA00000000007265;
  int64_t v6 = v2 + 2;
  if (v3 <= v4)
  {
    sub_1001DE058(v1 > 1, v6, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v6;
  uint64_t v7 = &_swiftEmptyArrayStorage[2 * v4];
  v7[4] = 0xD000000000000011;
  v7[5] = 0x80000001007D4A70;
  return result;
}

void sub_10068D99C(uint64_t a1, void **a2)
{
  uint64_t v4 = _s10PredicatesOMa_1();
  *(void *)&double v5 = __chkstk_darwin(v4).n128_u64[0];
  uint64_t v7 = (id *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *a2;
  id v9 = [objc_allocWithZone((Class)REMAccountCapabilities) initWithAccountType:[v8 type:v5]];
  unsigned int v10 = [v9 supportsAssignments];

  if (v10)
  {
    id v23 = 0;
    id v11 = [v8 remObjectIDWithError:&v23];
    id v12 = v23;
    if (v11)
    {
      void *v7 = v11;
      swift_storeEnumTagMultiPayload();
      id v13 = v12;
      uint64_t v14 = (void *)sub_100535B3C();
      sub_100691EA8((uint64_t)v7, (uint64_t (*)(void))_s10PredicatesOMa_1);
      sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
      id v15 = [objc_allocWithZone((Class)NSFetchRequest) init];
      id v16 = [(id)swift_getObjCClassFromMetadata() entity];
      [v15 setEntity:v16];

      [v15 setAffectedStores:0];
      [v15 setPredicate:v14];
      id v17 = sub_10068D854();
      sub_1001FFC40((uint64_t)v17);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v15 setPropertiesToFetch:isa];

      if (qword_100907888 != -1) {
        swift_once();
      }
      sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
      Class v19 = Array._bridgeToObjectiveC()().super.isa;
      [v15 setSortDescriptors:v19];

      id v20 = NSManagedObjectContext.fetch<A>(_:)();
      if (!v2)
      {
        id v23 = v20;
        sub_100094134(&qword_100910160);
        sub_1000967F4((unint64_t *)&qword_10090A988, &qword_100910160);
        unint64_t v21 = Sequence.elements<A>(ofType:)();
        swift_bridgeObjectRelease();
        sub_100201C7C(v21);
      }
    }
    else
    {
      id v22 = v23;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

void *sub_10068DD30(void *a1, unint64_t a2)
{
  uint64_t v4 = a1;
  id v11 = a1;
  if (a2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v7 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 8 * i);
      uint64_t v4 = v7;
      uint64_t v8 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      unsigned int v10 = v7;
      sub_10068D99C((uint64_t)&v11, &v10);
      if (v2)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v4;
      }

      if (v8 == v5)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v4;
}

void *sub_10068DE64(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v11 = (char *)&v38 - v10;
  uint64_t v12 = REMRemindersListDataView.AssignedInvocation.Parameters.currentUserShareParticipantIDsOverride.getter();
  if (v12) {
    return (void *)v12;
  }
  uint64_t v48 = v11;
  if (!(a1 >> 62))
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_5;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v14 = (uint64_t)result;
  if (!result) {
    goto LABEL_31;
  }
LABEL_5:
  if (v14 >= 1)
  {
    uint64_t v17 = 0;
    unint64_t v50 = a1 & 0xC000000000000001;
    id v45 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    id v46 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    unsigned __int8 v40 = (void (**)(char *, char *, uint64_t))(v3 + 16);
    uint64_t v41 = v5;
    char v39 = (void (**)(char *, uint64_t))(v3 + 8);
    id v13 = _swiftEmptyArrayStorage;
    *(void *)&long long v16 = 136446210;
    long long v44 = v16;
    uint64_t v42 = v2;
    unint64_t v43 = (char *)&type metadata for Any + 8;
    uint64_t v49 = v14;
    id v47 = v8;
    do
    {
      if (v50) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(a1 + 8 * v17 + 32);
      }
      Class v19 = v18;
      id v20 = [v18 currentUserShareParticipantID];
      if (v20)
      {
        unint64_t v21 = v20;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        Swift::String v22 = String.uppercased()();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v13 = sub_100308F88(0, v13[2] + 1, 1, v13);
        }
        unint64_t v24 = v13[2];
        unint64_t v23 = v13[3];
        if (v24 >= v23 >> 1) {
          id v13 = sub_100308F88((void *)(v23 > 1), v24 + 1, 1, v13);
        }
        _OWORD v13[2] = v24 + 1;
        *(Swift::String *)&v13[2 * v24 + 4] = v22;

        uint64_t v14 = v49;
      }
      else
      {
        id v25 = [v19 identifier];
        if (v25)
        {
          unint64_t v26 = v25;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v27 = 0;
        }
        else
        {
          uint64_t v27 = 1;
        }
        (*v46)(v8, v27, 1, v2);
        uint64_t v28 = (uint64_t)v48;
        sub_1000F44F4((uint64_t)v8, (uint64_t)v48);
        if ((*v45)(v28, 1, v2))
        {
          sub_1000966BC(v28, (uint64_t *)&unk_100909E50);
          unint64_t v29 = 0xE300000000000000;
          uint64_t v30 = 7104878;
        }
        else
        {
          unint64_t v31 = v41;
          (*v40)(v41, v48, v2);
          sub_1000966BC((uint64_t)v48, (uint64_t *)&unk_100909E50);
          uint64_t v30 = UUID.uuidString.getter();
          unint64_t v29 = v32;
          (*v39)(v31, v2);
        }
        if (qword_100907B80 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_10008E2DC(v33, (uint64_t)qword_1009217F8);
        swift_bridgeObjectRetain();
        id v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v34, v35))
        {
          unint64_t v36 = a1;
          uint64_t v37 = swift_slowAlloc();
          uint64_t v51 = swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = v44;
          swift_bridgeObjectRetain();
          *(void *)(v37 + 4) = sub_1000C51B8(v30, v29, &v51);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "REMRemindersListDataView.AssignedInvocation - Got a shared to/from me list that doesn't have the current user in the sharee list, huh?! {listID: %{public}s}", (uint8_t *)v37, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          a1 = v36;
          uint64_t v2 = v42;
          uint64_t v14 = v49;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v8 = v47;
      }
      ++v17;
    }
    while (v14 != v17);
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void sub_10068E3AC(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    unint64_t v26 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v5 = ~v8;
    unint64_t v26 = a1 + 64;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a1 + 64);
    unint64_t v7 = a1;
  }
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  int64_t v25 = (unint64_t)(v5 + 64) >> 6;
  while ((v7 & 0x8000000000000000) != 0)
  {
    uint64_t v15 = __CocoaDictionary.Iterator.next()();
    if (!v15) {
      goto LABEL_39;
    }
    uint64_t v17 = v16;
    uint64_t v27 = v15;
    sub_1000963CC(0, (unint64_t *)&qword_100914150);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v18 = (id)v28[0];
    swift_unknownObjectRelease();
    uint64_t v27 = v17;
    sub_1000963CC(0, &qword_100910230);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v19 = (id)v28[0];
    swift_unknownObjectRelease();
    int64_t v14 = v11;
    uint64_t v12 = v6;
    if (!v18) {
      goto LABEL_39;
    }
LABEL_28:
    v28[0] = v18;
    v28[1] = v19;
    sub_10068AE60((uint64_t)v28, a2, &v27);

    if (v3)
    {
      sub_1000C1AF8();
      swift_bridgeObjectRelease();
      return;
    }
    if (v27)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    int64_t v11 = v14;
    unint64_t v6 = v12;
  }
  if (v6)
  {
    uint64_t v12 = (v6 - 1) & v6;
    unint64_t v13 = __clz(__rbit64(v6)) | (v11 << 6);
    int64_t v14 = v11;
LABEL_27:
    uint64_t v22 = 8 * v13;
    unint64_t v23 = *(void **)(*(void *)(v7 + 56) + v22);
    id v18 = *(id *)(*(void *)(v7 + 48) + v22);
    id v19 = v23;
    if (!v18) {
      goto LABEL_39;
    }
    goto LABEL_28;
  }
  int64_t v14 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v14 >= v25) {
      goto LABEL_39;
    }
    unint64_t v20 = *(void *)(v26 + 8 * v14);
    if (!v20)
    {
      int64_t v21 = v11 + 2;
      if (v11 + 2 >= v25) {
        goto LABEL_39;
      }
      unint64_t v20 = *(void *)(v26 + 8 * v21);
      if (v20) {
        goto LABEL_25;
      }
      int64_t v21 = v11 + 3;
      if (v11 + 3 >= v25) {
        goto LABEL_39;
      }
      unint64_t v20 = *(void *)(v26 + 8 * v21);
      if (v20) {
        goto LABEL_25;
      }
      int64_t v21 = v11 + 4;
      if (v11 + 4 >= v25) {
        goto LABEL_39;
      }
      unint64_t v20 = *(void *)(v26 + 8 * v21);
      if (v20)
      {
LABEL_25:
        int64_t v14 = v21;
      }
      else
      {
        int64_t v14 = v11 + 5;
        if (v11 + 5 >= v25) {
          goto LABEL_39;
        }
        unint64_t v20 = *(void *)(v26 + 8 * v14);
        if (!v20)
        {
          int64_t v24 = v11 + 6;
          while (v25 != v24)
          {
            unint64_t v20 = *(void *)(v26 + 8 * v24++);
            if (v20)
            {
              int64_t v14 = v24 - 1;
              goto LABEL_26;
            }
          }
LABEL_39:
          sub_1000C1AF8();
          return;
        }
      }
    }
LABEL_26:
    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v13 = __clz(__rbit64(v20)) + (v14 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

void *sub_10068E74C(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = _s10PredicatesOMa_2();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_21;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    a1 = (unint64_t)sub_10068DE64(a1);
    if (!*(void *)(a1 + 16))
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }
    if (REMRemindersListDataView.AssignedInvocation.Parameters.countCompleted.getter())
    {
      uint64_t v9 = sub_100094134(&qword_10091FB50);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    }
    else
    {
      REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter();
      uint64_t v11 = sub_100094134(&qword_10091FB50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 0, 1, v11);
    }
    uint64_t v12 = (void *)sub_100618484();
    sub_100691EA8((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_2);
    sub_1000963CC(0, &qword_100910230);
    uint64_t v8 = (char *)[objc_allocWithZone((Class)NSFetchRequest) init];
    id v13 = [(id)swift_getObjCClassFromMetadata() entity];
    [v8 setEntity:v13];

    [v8 setAffectedStores:0];
    [v8 setPredicate:v12];
    int64_t v14 = sub_100619B0C();
    sub_1001FFC40((uint64_t)v14);
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v8 setPropertiesToFetch:isa];

    sub_100619ED0();
    Class v16 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v8 setRelationshipKeyPathsForPrefetching:v16];

    uint64_t v10 = a2;
    unint64_t v17 = NSManagedObjectContext.fetch<A>(_:)();
    if (v3)
    {
      swift_bridgeObjectRelease();

      return (void *)v10;
    }
    unint64_t v18 = v17;
    unint64_t v29 = _swiftEmptyDictionarySingleton;
    if (v17 >> 62) {
      break;
    }
    a2 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!a2) {
      goto LABEL_24;
    }
LABEL_13:
    uint64_t v27 = v12;
    uint64_t v19 = 4;
    while (1)
    {
      id v20 = (v18 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v18 + 8 * v19);
      int64_t v21 = v20;
      uint64_t v22 = v19 - 3;
      if (__OFADD__(v19 - 4, 1)) {
        break;
      }
      id v28 = v20;
      sub_10068A2FC((uint64_t *)&v29, &v28);
      uint64_t v3 = 0;

      ++v19;
      if (v22 == a2)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v23 = v29;
        uint64_t v12 = v27;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v24) {
      return _swiftEmptyArrayStorage;
    }
  }
  swift_bridgeObjectRetain();
  a2 = _CocoaArrayWrapper.endIndex.getter();
  if (a2) {
    goto LABEL_13;
  }
LABEL_24:
  swift_bridgeObjectRelease_n();
  unint64_t v23 = _swiftEmptyDictionarySingleton;
LABEL_25:
  swift_bridgeObjectRetain();
  sub_10068E3AC((unint64_t)v23, (void *)a1);
  uint64_t v10 = v25;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  return (void *)v10;
}

char *sub_10068EB9C(void *a1, uint64_t *a2)
{
  id v45 = a2;
  unint64_t v43 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v39 = v2;
  __chkstk_darwin(v2);
  uint64_t v37 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v4 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v6 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v12);
  int64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for REMRemindersListDataView.AssignedInvocation.Parameters();
  uint64_t v15 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  unint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v19 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v14, v18, v19);
  id v20 = v43;
  swift_storeEnumTagMultiPayload();
  sub_100523708((uint64_t)v11);
  sub_100691EA8((uint64_t)v14, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v41);
  int64_t v21 = v42;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v42, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v44);
  swift_bridgeObjectRetain();
  REMRemindersListDataView.AssignedInvocation.Parameters.init(sortingStyle:showCompleted:countCompleted:remindersPrefetch:currentUserShareParticipantIDsOverride:)();
  uint64_t v22 = v47;
  unint64_t v23 = sub_100689A30(v20);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v40);
  }
  else
  {
    uint64_t v24 = v15;
    uint64_t v26 = v39;
    uint64_t v25 = v40;
    uint64_t v27 = v38;
    unint64_t v29 = sub_10068E74C((unint64_t)v23, (uint64_t)v20);
    id v47 = v17;
    swift_bridgeObjectRelease();
    if (qword_100907B80 != -1) {
      swift_once();
    }
    uint64_t v30 = sub_10008E2DC(v26, (uint64_t)qword_1009217F8);
    unint64_t v31 = v37;
    uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 16))(v37, v30, v26);
    id v45 = &v36;
    id v46 = v29;
    uint64_t v48 = v29;
    __chkstk_darwin(v32);
    *(&v36 - 2) = (uint64_t)v31;
    sub_100094134(&qword_100911540);
    sub_100094134((uint64_t *)&unk_10090A4C0);
    sub_1000967F4(&qword_100911548, &qword_100911540);
    uint64_t v33 = Sequence.map<A>(skippingError:_:)();
    uint64_t v34 = v24;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v37, v26);
    swift_bridgeObjectRelease();
    uint64_t v48 = (void *)v33;
    sub_100094134(&qword_100916998);
    sub_1000967F4(&qword_100921850, &qword_100916998);
    sub_100691E20();
    uint64_t v35 = Sequence<>.unique()();
    swift_bridgeObjectRelease();
    int64_t v21 = *(char **)(v35 + 16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v47, v25);
  }
  return v21;
}

void *sub_10068F1E0(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v5 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v31 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v37 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v30 = (char *)&v29 - v11;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v29 = v3;
    unint64_t v36 = a1 & 0xC000000000000001;
    uint64_t v32 = (void (**)(char *))(v31 + 32);
    uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    uint64_t v39 = _swiftEmptyArrayStorage;
    uint64_t v13 = 4;
    uint64_t v34 = v12;
    uint64_t v35 = (id *)a1;
    uint64_t v14 = v38;
    while (1)
    {
      uint64_t v15 = v8;
      uint64_t v8 = v13 - 4;
      uint64_t v16 = v36 ? (id *)specialized _ArrayBuffer._getElementSlowPath(_:)() : (id *)*(id *)(a1 + 8 * v13);
      a1 = (unint64_t)v16;
      uint64_t v17 = v13 - 3;
      if (__OFADD__(v8, 1)) {
        break;
      }
      id v18 = [v16 objectID];
      uint64_t v19 = v18;
      if (*(void *)(v14 + 16) && (unint64_t v20 = sub_100306F98((uint64_t)v18), (v21 & 1) != 0)) {
        uint64_t v3 = *(void (**)(char *))(*(void *)(v14 + 56) + 8 * v20);
      }
      else {
        uint64_t v3 = 0;
      }

      sub_100521784((void *)a1, (uint64_t)v3, 0, (uint64_t)v7);
      uint64_t v8 = v15;
      if ((*v33)(v7, 1, v15) == 1)
      {
        sub_1000966BC((uint64_t)v7, &qword_10090FD78);
      }
      else
      {
        uint64_t v3 = *v32;
        uint64_t v22 = v30;
        (*v32)(v30);
        ((void (*)(char *, char *, uint64_t))v3)(v37, v22, v15);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v23 = (unint64_t)v39;
        }
        else {
          unint64_t v23 = sub_1003091E4(0, v39[2] + 1, 1, (unint64_t)v39);
        }
        unint64_t v25 = *(void *)(v23 + 16);
        unint64_t v24 = *(void *)(v23 + 24);
        if (v25 >= v24 >> 1) {
          unint64_t v23 = sub_1003091E4(v24 > 1, v25 + 1, 1, v23);
        }
        *(void *)(v23 + 16) = v25 + 1;
        unint64_t v26 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
        uint64_t v39 = (void *)v23;
        unint64_t v27 = v23 + v26 + *(void *)(v31 + 72) * v25;
        uint64_t v8 = v15;
        ((void (*)(unint64_t, char *, uint64_t))v3)(v27, v37, v15);
      }
      a1 = (unint64_t)v35;
      ++v13;
      uint64_t v14 = v38;
      if (v17 == v34)
      {
        swift_bridgeObjectRelease();
        return v39;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_10068F584(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v36 = a2;
  uint64_t v7 = sub_100094134(&qword_10091C7F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
  uint64_t v30 = *(v10 - 1);
  __chkstk_darwin(v10);
  uint64_t v35 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v29 = (char *)&v26 - v13;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v14; uint64_t v14 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v34 = a1 & 0xC000000000000001;
    uint64_t v31 = v30 + 32;
    uint64_t v32 = (unsigned int (**)(char *, uint64_t, void *))(v30 + 48);
    uint64_t v37 = _swiftEmptyArrayStorage;
    uint64_t v15 = 4;
    uint64_t v27 = a3;
    unint64_t v28 = a1;
    uint64_t v33 = v14;
    uint64_t v16 = (void (**)(char *, char *, void *))(v30 + 32);
    while (1)
    {
      uint64_t v17 = v10;
      id v18 = v34 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v15);
      uint64_t v10 = v18;
      uint64_t v19 = v15 - 3;
      if (__OFADD__(v15 - 4, 1)) {
        break;
      }
      id v38 = v18;
      sub_100689C78(&v38, v36, a3, (uint64_t)v9);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

      uint64_t v10 = v17;
      if ((*v32)(v9, 1, v17) == 1)
      {
        sub_1000966BC((uint64_t)v9, &qword_10091C7F0);
      }
      else
      {
        unint64_t v20 = *v16;
        char v21 = v29;
        (*v16)(v29, v9, v17);
        v20(v35, v21, v17);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v22 = (unint64_t)v37;
        }
        else {
          unint64_t v22 = sub_10030931C(0, v37[2] + 1, 1, (unint64_t)v37);
        }
        unint64_t v24 = *(void *)(v22 + 16);
        unint64_t v23 = *(void *)(v22 + 24);
        if (v24 >= v23 >> 1) {
          unint64_t v22 = sub_10030931C(v23 > 1, v24 + 1, 1, v22);
        }
        *(void *)(v22 + 16) = v24 + 1;
        unint64_t v25 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
        uint64_t v37 = (void *)v22;
        uint64_t v10 = v17;
        v20((char *)(v22 + v25 + *(void *)(v30 + 72) * v24), v35, v17);
        a3 = v27;
        a1 = v28;
      }
      ++v15;
      if (v19 == v33) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
LABEL_22:
  swift_bridgeObjectRelease();
}

uint64_t (*sub_10068F8FC(unint64_t a1, void *a2, void *a3, uint64_t a4))()
{
  id v164 = a3;
  unint64_t v186 = a1;
  uint64_t v187 = a2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  unsigned __int8 v172 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v180 = (uint64_t)&v149 - v8;
  uint64_t v182 = type metadata accessor for UUID();
  uint64_t v166 = *(void *)(v182 - 8);
  __chkstk_darwin(v182);
  unsigned __int8 v168 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_100094134(&qword_100914420);
  uint64_t v157 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v156 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v178 = *(void *)(v11 - 8);
  uint64_t v179 = (void (**)(void, void))v11;
  __chkstk_darwin(v11);
  id v163 = (char *)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v162 = (char *)&v149 - v14;
  uint64_t v181 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v181);
  uint64_t v161 = (uint64_t *)((char *)&v149 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v165 = (uint64_t)&v149 - v17;
  __chkstk_darwin(v18);
  uint64_t v177 = ((char *)&v149 - v19);
  __chkstk_darwin(v20);
  uint64_t v173 = (uint64_t)&v149 - v21;
  __chkstk_darwin(v22);
  uint64_t v176 = (char *)&v149 - v23;
  __chkstk_darwin(v24);
  uint64_t v183 = (uint64_t)&v149 - v25;
  uint64_t v26 = (void *)type metadata accessor for Logger();
  os_log_type_t v174 = (uint64_t (**)(char *, uint64_t, void *))*(v26 - 1);
  uint64_t v175 = v26;
  __chkstk_darwin(v26);
  uint64_t v184 = (char *)&v149 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  __chkstk_darwin(v28 - 8);
  uint64_t v171 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v170 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  Swift::Int v159 = (uint64_t *)((char *)&v149 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v30);
  uint64_t v160 = (char *)&v149 - v31;
  __chkstk_darwin(v32);
  unint64_t v34 = (char *)&v149 - v33;
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v149 - v36;
  uint64_t v38 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v38 - 8);
  uint64_t v40 = (uint64_t (*)())((char *)&v149 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = type metadata accessor for REMRemindersListDataView.AssignedInvocation.Parameters();
  uint64_t v42 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v149 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.AssignedInvocation.Parameters.sortingStyle.getter();
  REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter();
  REMRemindersListDataView.AssignedInvocation.Parameters.remindersPrefetch.getter();
  uint64_t v45 = a4;
  REMRemindersListDataView.AssignedInvocation.Parameters.currentUserShareParticipantIDsOverride.getter();
  unint64_t v46 = v186;
  REMRemindersListDataView.AssignedInvocation.Parameters.init(sortingStyle:showCompleted:countCompleted:remindersPrefetch:currentUserShareParticipantIDsOverride:)();
  uint64_t v47 = v185;
  uint64_t v48 = sub_10068E74C(v46, (uint64_t)v187);
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
    return v40;
  }
  unsigned __int8 v169 = v48;
  uint64_t v49 = v174;
  uint64_t v153 = v40;
  unint64_t v50 = v175;
  unint64_t v150 = v34;
  unint64_t v151 = v37;
  uint64_t v149 = v45;
  uint64_t v185 = 0;
  unsigned __int8 v167 = v44;
  uint64_t v155 = v41;
  uint64_t v154 = v42;
  if (qword_100907B80 != -1) {
    swift_once();
  }
  uint64_t v51 = v50;
  uint64_t v52 = sub_10008E2DC((uint64_t)v50, (uint64_t)qword_1009217F8);
  id v53 = v184;
  uint64_t v54 = v49[2](v184, v52, v50);
  uint64_t v152 = &v149;
  unint64_t v191 = (unint64_t)v169;
  __chkstk_darwin(v54);
  *(&v149 - 2) = (uint64_t)v53;
  sub_100094134(&qword_100911540);
  sub_1000963CC(0, (unint64_t *)&qword_100914150);
  sub_1000967F4(&qword_100911548, &qword_100911540);
  uint64_t v55 = v185;
  uint64_t v56 = Sequence.map<A>(skippingError:_:)();
  id v57 = v176;
  uint64_t v58 = (uint64_t)v153;
  if (v55)
  {
    swift_errorRelease();
    unint64_t v59 = _swiftEmptyArrayStorage;
  }
  else
  {
    unint64_t v59 = (void *)v56;
  }
  uint64_t v60 = v183;
  ((void (*)(char *, void *))v49[1])(v184, v51);
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_100776E40;
  *(void *)(v61 + 56) = sub_100094134(&qword_100908270);
  *(void *)(v61 + 64) = sub_1000967F4(&qword_10091C490, &qword_100908270);
  *(void *)(v61 + 32) = v59;
  unint64_t v62 = (char *)NSPredicate.init(format:_:)();
  REMRemindersListDataView.AssignedInvocation.Parameters.sortingStyle.getter();
  (*(void (**)(id, void, void (**)(void, void)))(v178 + 104))(v57, enum case for REMRemindersListDataView.SortingDirection.ascending(_:), v179);
  swift_storeEnumTagMultiPayload();
  sub_100520FD4(v58, (uint64_t)v57, v60);
  uint64_t v63 = (void *)REMSmartListTypeAssigned;
  uint64_t v64 = (uint64_t)v177;
  char v66 = sub_100521C40((uint64_t)v177, v187, REMSmartListTypeAssigned, v60);
  uint64_t v176 = v62;
  sub_100431BD4(v64, v173);
  if (qword_100907790 != -1) {
    swift_once();
  }
  uint64_t v177 = v66;
  unint64_t v67 = qword_100942318;
  swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v190 = v67;
  if (v67 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v148 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v69 = v148 + 2;
    if (!__OFADD__(v148, 2))
    {
LABEL_14:
      sub_1001A6A8C(v69);
      specialized Array._endMutation()();
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v190 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v190 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_15;
      }
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v68 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v69 = v68 + 2;
    if (!__OFADD__(v68, 2)) {
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_66:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_15:
  uint64_t v175 = v63;
  uint64_t v185 = 0;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v190 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v190 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  unint64_t v70 = v190;
  swift_release();
  swift_release();
  unint64_t v191 = v70;
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_10077B710;
  *(void *)(v71 + 32) = swift_getKeyPath();
  *(void *)(v71 + 40) = swift_getKeyPath();
  uint64_t v189 = (void *)v71;
  specialized Array._endMutation()();
  unint64_t v190 = (unint64_t)v189;
  NSString v72 = sub_100526DD0(v60);
  sub_1002014E4((unint64_t)v72);
  uint64_t v73 = sub_100526FE4(v60);
  sub_1002014E4((unint64_t)v73);
  sub_100094134(&qword_10090FF40);
  Array<A>.removeDuplicates()();
  Array<A>.removeDuplicates()();
  unint64_t v74 = v191;
  unint64_t v75 = v190;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v76 = v176;
  id v77 = (void *)sub_1003BC8C4(v74, v75, 0, (uint64_t)v176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v78 = (uint64_t)v151;
  REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter();
  uint64_t v79 = v173;
  sub_100527148(v173, v78, 0);
  unsigned __int8 v80 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
  v80(v78, v171);
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v77 setSortDescriptors:isa, v149];

  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  uint64_t v82 = v187;
  uint64_t v83 = v185;
  uint64_t v84 = NSManagedObjectContext.fetch<A>(_:)();
  if (v83)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = _s9UtilitiesO12SortingStyleOMa;
    sub_100691EA8(v79, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    (*(void (**)(char *, uint64_t))(v154 + 8))(v167, v155);
    sub_100691EA8(v183, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    return v40;
  }
  unint64_t v85 = v84;
  uint64_t v184 = (char *)v80;
  swift_bridgeObjectRetain();
  uint64_t v86 = v150;
  REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter();
  sub_1005242F8(v85, v86, v82, 0);
  uint64_t v185 = 0;
  unsigned __int8 v169 = v87;
  os_log_type_t v174 = 0;
  ((void (*)(void *, uint64_t))v184)(v86, v171);
  unint64_t v88 = v85;
  swift_bridgeObjectRelease();
  uint64_t v89 = v165;
  sub_1001F82BC(v173, v165);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v90 = *(void *)v89;

    if (v90)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (sub_100526BA8())
      {
        uint64_t v91 = v160;
        REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter();
        uint64_t v92 = v170;
        uint64_t v93 = v159;
        uint64_t v94 = v171;
        (*(void (**)(uint64_t *, char *, uint64_t))(v170 + 16))(v159, v91, v171);
        int v95 = (*(uint64_t (**)(uint64_t *, uint64_t))(v92 + 88))(v93, v94);
        if (v95 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
        {
          uint64_t v96 = v184;
          ((void (*)(uint64_t *, uint64_t))v184)(v93, v94);
          uint64_t v97 = &_swiftEmptySetSingleton;
        }
        else if (v95 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
        {
          (*(void (**)(uint64_t *, uint64_t))(v92 + 96))(v93, v94);
          uint64_t v97 = (void *)sub_10033305C(*v93);
          swift_bridgeObjectRelease();
          uint64_t v96 = v184;
        }
        else
        {
          uint64_t v97 = &_swiftEmptySetSingleton;
          if (v95 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
          {
            uint64_t v96 = v184;
          }
          else
          {
            uint64_t v96 = v184;
            if (v95 != enum case for REMRemindersListDataView.ShowCompleted.on(_:)) {
              goto LABEL_69;
            }
          }
        }
        unint64_t v121 = swift_bridgeObjectRetain();
        uint64_t v122 = v185;
        unsigned int v123 = sub_100527F44(v121, (uint64_t)v97);
        uint64_t v185 = v122;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v124 = sub_100126B38((unint64_t)v123);
        swift_bridgeObjectRelease();
        uint64_t v125 = sub_1001A0C38(v124);
        swift_bridgeObjectRelease();
        BOOL v126 = sub_1001F553C(v90, v125, v88);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v96)(v91, v171);
        unint64_t v88 = (unint64_t)v126;
        uint64_t v100 = v180;
        uint64_t v101 = v155;
        goto LABEL_42;
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_100691EA8(v89, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  }
  uint64_t v98 = v161;
  sub_1001F82BC(v183, (uint64_t)v161);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v100 = v180;
  uint64_t v101 = v155;
  uint64_t v102 = (uint64_t)v163;
  uint64_t v103 = (uint64_t)v162;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v109 = (*(uint64_t (**)(char *, uint64_t *, void (**)(void, void)))(v178 + 32))(v163, v98, v179);
      __chkstk_darwin(v109);
      *(&v149 - 2) = v183;
      uint64_t v110 = v185;
      uint64_t v111 = sub_1002249C0((void (*)(id *))sub_10052C270, (uint64_t)(&v149 - 4), v88);
      uint64_t v185 = v110;
      swift_bridgeObjectRelease();
      uint64_t v112 = (uint64_t)v151;
      REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter();
      uint64_t v113 = sub_1000ED7A8(v102, v112, v111);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v184)(v112, v171);
      uint64_t v114 = v113[2];
      if (v114)
      {
        uint64_t v189 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v184 = *(char **)(v157 + 16);
        uint64_t v115 = *(unsigned __int8 *)(v157 + 80);
        uint64_t v171 = (uint64_t)v113;
        unint64_t v116 = (char *)v113 + ((v115 + 32) & ~v115);
        uint64_t v181 = *(void *)(v157 + 72);
        Swift::Int v117 = (void (**)(char *, uint64_t))(v157 + 8);
        uint64_t v118 = v158;
        uint64_t v119 = v156;
        do
        {
          ((void (*)(char *, char *, uint64_t))v184)(v119, v116, v118);
          REMSortableElement.element.getter();
          (*v117)(v119, v118);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v116 += v181;
          --v114;
        }
        while (v114);
        unint64_t v88 = (unint64_t)v189;
        swift_bridgeObjectRelease();
        uint64_t v101 = v155;
        uint64_t v102 = (uint64_t)v163;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v88 = (unint64_t)_swiftEmptyArrayStorage;
      }
      (*(void (**)(uint64_t, void))(v178 + 8))(v102, v179);
      uint64_t v100 = v180;
      break;
    case 3:
      uint64_t v104 = v98;
      uint64_t v106 = v178;
      uint64_t v105 = v179;
      (*(void (**)(char *, uint64_t *, void (**)(void, void)))(v178 + 32))(v162, v104, v179);
      uint64_t v107 = (uint64_t)v151;
      REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter();
      uint64_t v108 = sub_1000ED0E8(v103, v107, v88);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v184)(v107, v171);
      (*(void (**)(uint64_t, void))(v106 + 8))(v103, v105);
      unint64_t v88 = v108;
      break;
    case 4:
      id v120 = (void *)v98[5];
      sub_1001F84E8(*v98);

      break;
    case 5:
      break;
    default:
      sub_100691EA8((uint64_t)v98, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      break;
  }
LABEL_42:
  uint64_t v189 = _swiftEmptyDictionarySingleton;
  if (v88 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v127 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v127 = *(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v127)
  {
    if (v127 >= 1)
    {
      uint64_t v128 = 0;
      unint64_t v129 = v88;
      uint64_t v184 = (char *)(v88 & 0xC000000000000001);
      unint64_t v130 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v166 + 56);
      unint64_t v131 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v166 + 48);
      uint64_t v181 = v166 + 32;
      uint64_t v179 = (void (**)(void, void))(v166 + 8);
      while (1)
      {
        if (v184) {
          id v132 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v132 = *(id *)(v129 + 8 * v128 + 32);
        }
        id v133 = v132;
        id v134 = [v132 list];
        if (v134)
        {
          uint64_t v135 = v134;
          id v136 = [v134 identifier];

          if (v136)
          {
            unint64_t v137 = v172;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v138 = 0;
          }
          else
          {
            uint64_t v138 = 1;
            unint64_t v137 = v172;
          }
          uint64_t v139 = v182;
          (*v130)(v137, v138, 1, v182);
          uint64_t v140 = (uint64_t)v137;
          uint64_t v141 = v139;
          uint64_t v100 = v180;
          sub_1000F44F4(v140, v180);
          if ((*v131)(v100, 1, v141) != 1)
          {
            uint64_t v142 = v168;
            (*(void (**)(char *, uint64_t, uint64_t))v181)(v168, v100, v141);
            uint64_t v188 = v133;
            sub_100094134(&qword_10090B620);
            sub_1000967F4((unint64_t *)&qword_10090B628, &qword_10090D750);
            uint64_t v100 = v180;
            Dictionary<>.append(_:toCollectionUnderKey:)();
            uint64_t v143 = v142;
            uint64_t v101 = v155;
            (*v179)(v143, v182);

            goto LABEL_49;
          }
        }
        else
        {
          (*v130)((char *)v100, 1, 1, v182);
        }

        sub_1000966BC(v100, (uint64_t *)&unk_100909E50);
LABEL_49:
        if (v127 == ++v128) {
          goto LABEL_59;
        }
      }
    }
    __break(1u);
LABEL_69:
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    JUMPOUT(0x100691120);
  }
LABEL_59:
  swift_bridgeObjectRelease();
  uint64_t v144 = (uint64_t)v169;
  swift_bridgeObjectRetain();
  uint64_t v145 = v185;
  sub_10068F584(v186, (uint64_t)&v189, v144);
  uint64_t v40 = v146;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v147 = v177;
  sub_10052AE6C(v177, v175, (uint64_t)v187, v164);
  if (v145)
  {
    swift_bridgeObjectRelease();

    uint64_t v40 = _s9UtilitiesO12SortingStyleOMa;
  }
  else
  {
  }
  sub_100691EA8(v173, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  (*(void (**)(char *, uint64_t))(v154 + 8))(v167, v101);
  sub_100691EA8(v183, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  swift_bridgeObjectRelease();
  return v40;
}

uint64_t sub_100691138(unint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((REMRemindersListDataView.AssignedInvocation.Parameters.countCompleted.getter() & 1) == 0) {
    return 0;
  }
  uint64_t v10 = sub_10068E74C(a1, a2);
  if (!v2)
  {
    uint64_t v11 = v10;
    if (qword_100907B80 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_10008E2DC(v6, (uint64_t)qword_1009217F8);
    uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
    v17[0] = v17;
    v17[1] = v11;
    uint64_t v18 = (uint64_t)v11;
    __chkstk_darwin(v13);
    v17[-2] = v9;
    sub_100094134(&qword_100911540);
    sub_100094134((uint64_t *)&unk_10090A4C0);
    sub_1000967F4(&qword_100911548, &qword_100911540);
    uint64_t v14 = Sequence.map<A>(skippingError:_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_bridgeObjectRelease();
    uint64_t v18 = v14;
    sub_100094134(&qword_100916998);
    sub_1000967F4(&qword_100921850, &qword_100916998);
    sub_100691E20();
    uint64_t v15 = Sequence<>.unique()();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v15 + 16);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_100691428(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, void (**a6)(char *, uint64_t), uint64_t a7)
{
  uint64_t v98 = a7;
  uint64_t v93 = a6;
  LODWORD(v94) = a5;
  uint64_t v95 = a4;
  uint64_t v79 = a3;
  unint64_t v80 = a2;
  uint64_t v85 = a1;
  LODWORD(v92) = a5 & 1;
  uint64_t v78 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v74 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  id v76 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v73 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for REMRemindersListDataView.AssignedInvocation.Parameters();
  uint64_t v75 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v84 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v89 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
  uint64_t v90 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v87 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v97 = *(void *)(v14 - 8);
  uint64_t v15 = v97;
  __chkstk_darwin(v14);
  uint64_t v69 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v83 = (char *)&v65 - v18;
  __chkstk_darwin(v19);
  uint64_t v96 = (char *)&v65 - v20;
  uint64_t v21 = sub_100094134(&qword_100921848);
  uint64_t v22 = v21 - 8;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v65 - v27;
  uint64_t v29 = (char *)&v65 + *(int *)(v22 + 56) - v27;
  *(void *)uint64_t v28 = v95;
  v28[8] = v92;
  uint64_t v30 = *(void (**)(char *, void (**)(char *, uint64_t), uint64_t, __n128))(v15 + 16);
  v30(v29, v93, v14, v26);
  *(void *)&v28[*(int *)(v22 + 72)] = v98;
  uint64_t v31 = &v24[*(int *)(v22 + 56)];
  uint64_t v32 = v97;
  uint64_t v81 = (void (*)(char *, char *, uint64_t))v30;
  uint64_t v82 = v15 + 16;
  ((void (*)(char *, char *, uint64_t))v30)(v31, v29, v14);
  uint64_t v33 = v96;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v96, v31, v14);
  if ((v94 & 1) == 0)
  {
    uint64_t v48 = *(void (**)(char *, uint64_t))(v32 + 8);
    swift_bridgeObjectRetain();
    v48(v33, v14);
    sub_1000966BC((uint64_t)v28, &qword_100921848);
    return v95 > 0;
  }
  uint64_t v71 = v28;
  uint64_t v67 = v14;
  uint64_t v34 = *(void *)(v98 + 16);
  if (v34)
  {
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 16);
    uint64_t v35 = v90 + 16;
    uint64_t v92 = v98 + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
    uint64_t v37 = (void (**)(char *, uint64_t))(v89 + 8);
    uint64_t v93 = (void (**)(char *, uint64_t))(v90 + 8);
    uint64_t v94 = v36;
    uint64_t v86 = *(void *)(v90 + 72);
    swift_bridgeObjectRetain_n();
    uint64_t v38 = 0;
    uint64_t v39 = v87;
    uint64_t v40 = v88;
    uint64_t v90 = v35;
    uint64_t v66 = v34;
    while (1)
    {
      uint64_t v95 = v38;
      v94(v39, v92 + v86 * v38, v40);
      uint64_t v41 = REMRemindersListDataView.ListsModel.Sublist.reminders.getter();
      uint64_t v42 = *(void *)(v41 + 16);
      if (v42) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_10:
      uint64_t v38 = v95 + 1;
      (*v93)(v39, v40);
      if (v38 == v34)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_15;
      }
    }
    unint64_t v43 = (*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
    uint64_t v68 = v41;
    unint64_t v44 = v41 + v43;
    uint64_t v45 = *(void *)(v89 + 72);
    unint64_t v46 = *(void (**)(char *, unint64_t, uint64_t))(v89 + 16);
    while (1)
    {
      v46(v12, v44, v10);
      char v47 = REMRemindersListDataView.ReminderLite.isCompleted.getter();
      (*v37)(v12, v10);
      if (v47) {
        break;
      }
      v44 += v45;
      if (!--v42)
      {
        swift_bridgeObjectRelease();
        uint64_t v39 = v87;
        uint64_t v40 = v88;
        uint64_t v34 = v66;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    (*v93)(v87, v88);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v67);
    sub_1000966BC((uint64_t)v71, &qword_100921848);
    return 1;
  }
  swift_bridgeObjectRetain();
LABEL_15:
  uint64_t v50 = v91;
  uint64_t v51 = v85;
  uint64_t v52 = v83;
  id v53 = v96;
  uint64_t v54 = v67;
  v81(v83, v96, v67);
  uint64_t v55 = v97;
  int v56 = (*(uint64_t (**)(char *, uint64_t))(v97 + 88))(v52, v54);
  id v57 = v84;
  uint64_t v58 = (uint64_t)v71;
  if (v56 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v52, v54);
    goto LABEL_20;
  }
  if (v56 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v55 + 96))(v52, v54);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (v56 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
  {
LABEL_20:
    (*(void (**)(char *, void, uint64_t))(v70 + 104))(v73, enum case for REMRemindersListDataView.SortingStyle.default(_:), v72);
    (*(void (**)(char *, void, uint64_t))(v55 + 104))(v69, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v54);
    (*(void (**)(char *, void, uint64_t))(v74 + 104))(v76, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v78);
    swift_bridgeObjectRetain();
    REMRemindersListDataView.AssignedInvocation.Parameters.init(sortingStyle:showCompleted:countCompleted:remindersPrefetch:currentUserShareParticipantIDsOverride:)();
    uint64_t v59 = sub_100691138(v80, v51);
    if (v50)
    {
      (*(void (**)(char *, uint64_t))(v75 + 8))(v57, v77);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v53, v54);
      sub_1000966BC((uint64_t)v71, &qword_100921848);
    }
    else
    {
      uint64_t v61 = v59;
      char v62 = v60;
      (*(void (**)(char *, uint64_t))(v75 + 8))(v57, v77);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v53, v54);
      sub_1000966BC((uint64_t)v71, &qword_100921848);
      return (v62 & 1) == 0 && v61 > 0;
    }
    return v49;
  }
  if (v56 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v53, v54);
    sub_1000966BC(v58, &qword_100921848);
    return 0;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100691DCC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100691E14()
{
  return sub_1003E8C08();
}

unint64_t sub_100691E20()
{
  unint64_t result = qword_100921858;
  if (!qword_100921858)
  {
    sub_100096058((uint64_t *)&unk_10090A4C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100921858);
  }
  return result;
}

uint64_t sub_100691E8C()
{
  return sub_1003E90EC();
}

uint64_t sub_100691EA8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_100691F0C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1001DE058(0, v1, 0);
  unint64_t result = (void *)sub_10072617C(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  int64_t v22 = v1;
  int v23 = v4;
  uint64_t v24 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v25 = v6;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)String.init<A>(_:)();
    uint64_t v11 = result;
    uint64_t v13 = v12;
    unint64_t v15 = _swiftEmptyArrayStorage[2];
    unint64_t v14 = _swiftEmptyArrayStorage[3];
    if (v15 >= v14 >> 1) {
      unint64_t result = (void *)sub_1001DE058(v14 > 1, v15 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v15 + 1;
    uint64_t v16 = &_swiftEmptyArrayStorage[2 * v15];
    v16[4] = v11;
    uint64_t v16[5] = v13;
    int64_t v8 = 1 << *(unsigned char *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v17 = *(void *)(v24 + 8 * v10);
    if ((v17 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v23;
    if (*(_DWORD *)(a1 + 36) != v23) {
      goto LABEL_27;
    }
    unint64_t v18 = v17 & (-2 << (v5 & 0x3F));
    if (v18)
    {
      int64_t v8 = __clz(__rbit64(v18)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v22;
    }
    else
    {
      unint64_t v19 = v10 + 1;
      unint64_t v20 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v22;
      if (v10 + 1 < v20)
      {
        unint64_t v21 = *(void *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v10)
          {
            unint64_t v21 = *(void *)(a1 + 80 + 8 * v10++);
            if (v21)
            {
              unint64_t v19 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v6 = v25 + 1;
    uint64_t v5 = v8;
    if (v25 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100692140(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  return sub_100692158(a1, a2, a3);
}

void *sub_100692158(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  unint64_t v4 = a3;
  unint64_t v19 = _swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v4 & 0xC000000000000001;
      unint64_t v15 = v4;
      while (v17)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        id v18 = v9;
        uint64_t v12 = a2;
        char v13 = a1(&v18);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v4 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v8;
        if (v11 == v7)
        {
          uint64_t v12 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100692304(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  id v9 = _swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v8 << 6))
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v13 = *v12;
    unint64_t v14 = (void *)v12[1];
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = v13;
    v15._object = v14;
    unint64_t v16 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B1728, v15);
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 <= 6)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100309F24(0, v9[2] + 1, 1, v9);
        id v9 = (void *)result;
      }
      unint64_t v20 = v9;
      unint64_t v21 = v9[2];
      int64_t v22 = v20;
      unint64_t v23 = v20[3];
      if (v21 >= v23 >> 1)
      {
        uint64_t result = (uint64_t)sub_100309F24((void *)(v23 > 1), v21 + 1, 1, v22);
        int64_t v22 = (void *)result;
      }
      v22[2] = v21 + 1;
      uint64_t v24 = (char *)v22 + v21;
      id v9 = v22;
      v24[32] = v16;
      if (v5) {
        goto LABEL_4;
      }
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v17 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v17 >= v6) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v17);
    ++v8;
    if (!v18)
    {
      int64_t v8 = v17 + 1;
      if (v17 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v18 = *(void *)(v2 + 8 * v8);
      if (!v18)
      {
        int64_t v8 = v17 + 2;
        if (v17 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v18 = *(void *)(v2 + 8 * v8);
        if (!v18)
        {
          int64_t v8 = v17 + 3;
          if (v17 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v18 = *(void *)(v2 + 8 * v8);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v6)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v18 = *(void *)(v2 + 8 * v19);
  if (v18)
  {
    int64_t v8 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v8);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100692520(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  int64_t v8 = _swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  for (v4 &= v4 - 1; ; uint64_t v4 = (v10 - 1) & v10)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_1005E1B98();
    if (result == 39)
    {
      if (v4) {
        goto LABEL_4;
      }
    }
    else
    {
      char v12 = result;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10030A034(0, v8[2] + 1, 1, v8);
        int64_t v8 = (void *)result;
      }
      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (uint64_t)sub_10030A034((void *)(v13 > 1), v14 + 1, 1, v8);
        int64_t v8 = (void *)result;
      }
      _OWORD v8[2] = v14 + 1;
      *((unsigned char *)v8 + v14 + 32) = v12;
      if (v4) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v9 >= v5) {
      goto LABEL_29;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      int64_t v7 = v9 + 1;
      if (v9 + 1 >= v5) {
        goto LABEL_29;
      }
      uint64_t v10 = *(void *)(v1 + 8 * v7);
      if (!v10)
      {
        int64_t v7 = v9 + 2;
        if (v9 + 2 >= v5) {
          goto LABEL_29;
        }
        uint64_t v10 = *(void *)(v1 + 8 * v7);
        if (!v10)
        {
          int64_t v7 = v9 + 3;
          if (v9 + 3 >= v5) {
            goto LABEL_29;
          }
          uint64_t v10 = *(void *)(v1 + 8 * v7);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    ;
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v10 = *(void *)(v1 + 8 * v11);
  if (v10)
  {
    int64_t v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_29;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v7);
    ++v11;
    if (v10) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100692720(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  int64_t v8 = _swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  for (v4 &= v4 - 1; ; uint64_t v4 = (v10 - 1) & v10)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_10028B15C();
    if (result == 26)
    {
      if (v4) {
        goto LABEL_4;
      }
    }
    else
    {
      char v12 = result;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10030A058(0, v8[2] + 1, 1, v8);
        int64_t v8 = (void *)result;
      }
      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (uint64_t)sub_10030A058((void *)(v13 > 1), v14 + 1, 1, v8);
        int64_t v8 = (void *)result;
      }
      _OWORD v8[2] = v14 + 1;
      *((unsigned char *)v8 + v14 + 32) = v12;
      if (v4) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v9 >= v5) {
      goto LABEL_29;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      int64_t v7 = v9 + 1;
      if (v9 + 1 >= v5) {
        goto LABEL_29;
      }
      uint64_t v10 = *(void *)(v1 + 8 * v7);
      if (!v10)
      {
        int64_t v7 = v9 + 2;
        if (v9 + 2 >= v5) {
          goto LABEL_29;
        }
        uint64_t v10 = *(void *)(v1 + 8 * v7);
        if (!v10)
        {
          int64_t v7 = v9 + 3;
          if (v9 + 3 >= v5) {
            goto LABEL_29;
          }
          uint64_t v10 = *(void *)(v1 + 8 * v7);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    ;
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v10 = *(void *)(v1 + 8 * v11);
  if (v10)
  {
    int64_t v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_29;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v7);
    ++v11;
    if (v10) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100692920(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  int64_t v8 = _swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  for (v4 &= v4 - 1; ; uint64_t v4 = (v10 - 1) & v10)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_10024BBD4();
    if (result == 38)
    {
      if (v4) {
        goto LABEL_4;
      }
    }
    else
    {
      char v12 = result;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10030A070(0, v8[2] + 1, 1, v8);
        int64_t v8 = (void *)result;
      }
      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (uint64_t)sub_10030A070((void *)(v13 > 1), v14 + 1, 1, v8);
        int64_t v8 = (void *)result;
      }
      _OWORD v8[2] = v14 + 1;
      *((unsigned char *)v8 + v14 + 32) = v12;
      if (v4) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v9 >= v5) {
      goto LABEL_29;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      int64_t v7 = v9 + 1;
      if (v9 + 1 >= v5) {
        goto LABEL_29;
      }
      uint64_t v10 = *(void *)(v1 + 8 * v7);
      if (!v10)
      {
        int64_t v7 = v9 + 2;
        if (v9 + 2 >= v5) {
          goto LABEL_29;
        }
        uint64_t v10 = *(void *)(v1 + 8 * v7);
        if (!v10)
        {
          int64_t v7 = v9 + 3;
          if (v9 + 3 >= v5) {
            goto LABEL_29;
          }
          uint64_t v10 = *(void *)(v1 + 8 * v7);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    ;
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v10 = *(void *)(v1 + 8 * v11);
  if (v10)
  {
    int64_t v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_29;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v7);
    ++v11;
    if (v10) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100692B20(uint64_t a1, Swift::OpaquePointer a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t, void *))
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  char v12 = _swiftEmptyArrayStorage;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v13 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v11 << 6))
  {
    Swift::String v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v15;
    int64_t v17 = (void *)v15[1];
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = v16;
    v18._object = v17;
    unint64_t v19 = _findStringSwitchCase(cases:string:)(a2, v18);
    uint64_t result = swift_bridgeObjectRelease();
    if (v19 <= 2)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = a3(0, v12[2] + 1, 1, v12);
        char v12 = (void *)result;
      }
      unint64_t v23 = v12;
      unint64_t v24 = v12[2];
      uint64_t v25 = v23;
      unint64_t v26 = v23[3];
      if (v24 >= v26 >> 1)
      {
        uint64_t result = a3(v26 > 1, v24 + 1, 1, v25);
        uint64_t v25 = (void *)result;
      }
      void v25[2] = v24 + 1;
      uint64_t v27 = (char *)v25 + v24;
      char v12 = v25;
      v27[32] = v19;
      if (v8) {
        goto LABEL_4;
      }
    }
    else if (v8)
    {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v20 >= v9) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v5 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v9) {
        goto LABEL_29;
      }
      unint64_t v21 = *(void *)(v5 + 8 * v11);
      if (!v21)
      {
        int64_t v11 = v20 + 2;
        if (v20 + 2 >= v9) {
          goto LABEL_29;
        }
        unint64_t v21 = *(void *)(v5 + 8 * v11);
        if (!v21)
        {
          int64_t v11 = v20 + 3;
          if (v20 + 3 >= v9) {
            goto LABEL_29;
          }
          unint64_t v21 = *(void *)(v5 + 8 * v11);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v9)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v12;
  }
  unint64_t v21 = *(void *)(v5 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v5 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100692D4C(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  int64_t v9 = _swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v8 << 6))
  {
    char v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v13 = *v12;
    unint64_t v14 = (void *)v12[1];
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = v13;
    v15._object = v14;
    unint64_t v16 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2450, v15);
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 <= 0xB)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10030A094(0, v9[2] + 1, 1, v9);
        int64_t v9 = (void *)result;
      }
      int64_t v20 = v9;
      unint64_t v21 = v9[2];
      int64_t v22 = v20;
      unint64_t v23 = v20[3];
      if (v21 >= v23 >> 1)
      {
        uint64_t result = (uint64_t)sub_10030A094((void *)(v23 > 1), v21 + 1, 1, v22);
        int64_t v22 = (void *)result;
      }
      v22[2] = v21 + 1;
      unint64_t v24 = (char *)v22 + v21;
      int64_t v9 = v22;
      v24[32] = v16;
      if (v5) {
        goto LABEL_4;
      }
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v17 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v17 >= v6) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v17);
    ++v8;
    if (!v18)
    {
      int64_t v8 = v17 + 1;
      if (v17 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v18 = *(void *)(v2 + 8 * v8);
      if (!v18)
      {
        int64_t v8 = v17 + 2;
        if (v17 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v18 = *(void *)(v2 + 8 * v8);
        if (!v18)
        {
          int64_t v8 = v17 + 3;
          if (v17 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v18 = *(void *)(v2 + 8 * v8);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v6)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v18 = *(void *)(v2 + 8 * v19);
  if (v18)
  {
    int64_t v8 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v8);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100692F68(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  int64_t v9 = _swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v8 << 6))
  {
    char v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v13 = *v12;
    unint64_t v14 = (void *)v12[1];
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = v13;
    v15._object = v14;
    unint64_t v16 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2648, v15);
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 <= 0xD)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10030A0B8(0, v9[2] + 1, 1, v9);
        int64_t v9 = (void *)result;
      }
      int64_t v20 = v9;
      unint64_t v21 = v9[2];
      int64_t v22 = v20;
      unint64_t v23 = v20[3];
      if (v21 >= v23 >> 1)
      {
        uint64_t result = (uint64_t)sub_10030A0B8((void *)(v23 > 1), v21 + 1, 1, v22);
        int64_t v22 = (void *)result;
      }
      v22[2] = v21 + 1;
      unint64_t v24 = (char *)v22 + v21;
      int64_t v9 = v22;
      v24[32] = v16;
      if (v5) {
        goto LABEL_4;
      }
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v17 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v17 >= v6) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v17);
    ++v8;
    if (!v18)
    {
      int64_t v8 = v17 + 1;
      if (v17 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v18 = *(void *)(v2 + 8 * v8);
      if (!v18)
      {
        int64_t v8 = v17 + 2;
        if (v17 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v18 = *(void *)(v2 + 8 * v8);
        if (!v18)
        {
          int64_t v8 = v17 + 3;
          if (v17 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v18 = *(void *)(v2 + 8 * v8);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v6)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v18 = *(void *)(v2 + 8 * v19);
  if (v18)
  {
    int64_t v8 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v8);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100693184(uint64_t a1, Swift::OpaquePointer a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t, void *))
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  char v12 = _swiftEmptyArrayStorage;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v13 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v11 << 6))
  {
    Swift::String v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v15;
    int64_t v17 = (void *)v15[1];
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = v16;
    v18._object = v17;
    Swift::Int v19 = _findStringSwitchCase(cases:string:)(a2, v18);
    uint64_t result = swift_bridgeObjectRelease();
    if (v19)
    {
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = a3(0, v12[2] + 1, 1, v12);
        char v12 = (void *)result;
      }
      unint64_t v24 = v12[2];
      unint64_t v23 = v12[3];
      unint64_t v25 = v24 + 1;
      if (v24 >= v23 >> 1)
      {
        uint64_t result = a3(v23 > 1, v24 + 1, 1, v12);
        char v12 = (void *)result;
      }
      v12[2] = v25;
      if (v8) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v20 >= v9) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v5 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v9) {
        goto LABEL_29;
      }
      unint64_t v21 = *(void *)(v5 + 8 * v11);
      if (!v21)
      {
        int64_t v11 = v20 + 2;
        if (v20 + 2 >= v9) {
          goto LABEL_29;
        }
        unint64_t v21 = *(void *)(v5 + 8 * v11);
        if (!v21)
        {
          int64_t v11 = v20 + 3;
          if (v20 + 3 >= v9) {
            goto LABEL_29;
          }
          unint64_t v21 = *(void *)(v5 + 8 * v11);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v9)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v12;
  }
  unint64_t v21 = *(void *)(v5 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v5 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100693398(uint64_t a1, Swift::OpaquePointer a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t, void *))
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  char v12 = _swiftEmptyArrayStorage;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v13 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v11 << 6))
  {
    Swift::String v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v15;
    int64_t v17 = (void *)v15[1];
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = v16;
    v18._object = v17;
    unint64_t v19 = _findStringSwitchCase(cases:string:)(a2, v18);
    uint64_t result = swift_bridgeObjectRelease();
    if (v19 <= 5)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = a3(0, v12[2] + 1, 1, v12);
        char v12 = (void *)result;
      }
      unint64_t v23 = v12;
      unint64_t v24 = v12[2];
      unint64_t v25 = v23;
      unint64_t v26 = v23[3];
      if (v24 >= v26 >> 1)
      {
        uint64_t result = a3(v26 > 1, v24 + 1, 1, v25);
        unint64_t v25 = (void *)result;
      }
      void v25[2] = v24 + 1;
      uint64_t v27 = (char *)v25 + v24;
      char v12 = v25;
      v27[32] = v19;
      if (v8) {
        goto LABEL_4;
      }
    }
    else if (v8)
    {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v20 >= v9) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v5 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v9) {
        goto LABEL_29;
      }
      unint64_t v21 = *(void *)(v5 + 8 * v11);
      if (!v21)
      {
        int64_t v11 = v20 + 2;
        if (v20 + 2 >= v9) {
          goto LABEL_29;
        }
        unint64_t v21 = *(void *)(v5 + 8 * v11);
        if (!v21)
        {
          int64_t v11 = v20 + 3;
          if (v20 + 3 >= v9) {
            goto LABEL_29;
          }
          unint64_t v21 = *(void *)(v5 + 8 * v11);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v9)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v12;
  }
  unint64_t v21 = *(void *)(v5 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v5 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1006935C4(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  int64_t v9 = _swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v8 << 6))
  {
    char v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v13 = *v12;
    unint64_t v14 = (void *)v12[1];
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = v13;
    v15._object = v14;
    unint64_t v16 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B28F0, v15);
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 <= 4)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10030A0E8(0, v9[2] + 1, 1, v9);
        int64_t v9 = (void *)result;
      }
      int64_t v20 = v9;
      unint64_t v21 = v9[2];
      int64_t v22 = v20;
      unint64_t v23 = v20[3];
      if (v21 >= v23 >> 1)
      {
        uint64_t result = (uint64_t)sub_10030A0E8((void *)(v23 > 1), v21 + 1, 1, v22);
        int64_t v22 = (void *)result;
      }
      v22[2] = v21 + 1;
      unint64_t v24 = (char *)v22 + v21;
      int64_t v9 = v22;
      v24[32] = v16;
      if (v5) {
        goto LABEL_4;
      }
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v17 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v17 >= v6) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v17);
    ++v8;
    if (!v18)
    {
      int64_t v8 = v17 + 1;
      if (v17 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v18 = *(void *)(v2 + 8 * v8);
      if (!v18)
      {
        int64_t v8 = v17 + 2;
        if (v17 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v18 = *(void *)(v2 + 8 * v8);
        if (!v18)
        {
          int64_t v8 = v17 + 3;
          if (v17 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v18 = *(void *)(v2 + 8 * v8);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v6)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v18 = *(void *)(v2 + 8 * v19);
  if (v18)
  {
    int64_t v8 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v8);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1006937E0(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  int64_t v8 = _swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  for (v4 &= v4 - 1; ; uint64_t v4 = (v10 - 1) & v10)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_1004FDFF0();
    if (result == 22)
    {
      if (v4) {
        goto LABEL_4;
      }
    }
    else
    {
      char v12 = result;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10030A100(0, v8[2] + 1, 1, v8);
        int64_t v8 = (void *)result;
      }
      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (uint64_t)sub_10030A100((void *)(v13 > 1), v14 + 1, 1, v8);
        int64_t v8 = (void *)result;
      }
      _OWORD v8[2] = v14 + 1;
      *((unsigned char *)v8 + v14 + 32) = v12;
      if (v4) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v9 >= v5) {
      goto LABEL_29;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      int64_t v7 = v9 + 1;
      if (v9 + 1 >= v5) {
        goto LABEL_29;
      }
      uint64_t v10 = *(void *)(v1 + 8 * v7);
      if (!v10)
      {
        int64_t v7 = v9 + 2;
        if (v9 + 2 >= v5) {
          goto LABEL_29;
        }
        uint64_t v10 = *(void *)(v1 + 8 * v7);
        if (!v10)
        {
          int64_t v7 = v9 + 3;
          if (v9 + 3 >= v5) {
            goto LABEL_29;
          }
          uint64_t v10 = *(void *)(v1 + 8 * v7);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    ;
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v10 = *(void *)(v1 + 8 * v11);
  if (v10)
  {
    int64_t v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_29;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v7);
    ++v11;
    if (v10) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1006939E0(uint64_t a1, Swift::OpaquePointer a2, uint64_t (*a3)(void, uint64_t, uint64_t))
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  unint64_t v26 = _swiftEmptyArrayStorage;
  while (v8)
  {
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v13 = v12 | (v11 << 6);
LABEL_22:
    int64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    int64_t v19 = (void *)v17[1];
    swift_bridgeObjectRetain();
    v20._uint64_t countAndFlagsBits = v18;
    v20._object = v19;
    Swift::Int v21 = _findStringSwitchCase(cases:string:)(a2, v20);
    uint64_t result = swift_bridgeObjectRelease();
    if (v21 == 1)
    {
      char v22 = 1;
LABEL_26:
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = a3(0, v26[2] + 1, 1);
        unint64_t v26 = (void *)result;
      }
      unint64_t v24 = v26[2];
      unint64_t v23 = v26[3];
      if (v24 >= v23 >> 1)
      {
        uint64_t result = ((uint64_t (*)(BOOL, unint64_t, uint64_t, void *))a3)(v23 > 1, v24 + 1, 1, v26);
        unint64_t v26 = (void *)result;
      }
      void v26[2] = v24 + 1;
      *((unsigned char *)v26 + v24 + 32) = v22;
    }
    else if (!v21)
    {
      char v22 = 0;
      goto LABEL_26;
    }
  }
  int64_t v14 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v14 >= v9) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v14);
  ++v11;
  if (v15) {
    goto LABEL_21;
  }
  int64_t v11 = v14 + 1;
  if (v14 + 1 >= v9) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v11);
  if (v15) {
    goto LABEL_21;
  }
  int64_t v11 = v14 + 2;
  if (v14 + 2 >= v9) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v11);
  if (v15) {
    goto LABEL_21;
  }
  int64_t v11 = v14 + 3;
  if (v14 + 3 >= v9) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v11);
  if (v15)
  {
LABEL_21:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_22;
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v9)
  {
LABEL_31:
    swift_release();
    return (uint64_t)v26;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_31;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100693C14(uint64_t a1, Swift::OpaquePointer a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t, void *))
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  unint64_t v12 = _swiftEmptyArrayStorage;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v13 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v11 << 6))
  {
    unint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v15;
    int64_t v17 = (void *)v15[1];
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = v16;
    v18._object = v17;
    unint64_t v19 = _findStringSwitchCase(cases:string:)(a2, v18);
    uint64_t result = swift_bridgeObjectRelease();
    if (v19 <= 3)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = a3(0, v12[2] + 1, 1, v12);
        unint64_t v12 = (void *)result;
      }
      unint64_t v23 = v12;
      unint64_t v24 = v12[2];
      unint64_t v25 = v23;
      unint64_t v26 = v23[3];
      if (v24 >= v26 >> 1)
      {
        uint64_t result = a3(v26 > 1, v24 + 1, 1, v25);
        unint64_t v25 = (void *)result;
      }
      void v25[2] = v24 + 1;
      uint64_t v27 = (char *)v25 + v24;
      unint64_t v12 = v25;
      v27[32] = v19;
      if (v8) {
        goto LABEL_4;
      }
    }
    else if (v8)
    {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v20 >= v9) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v5 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v9) {
        goto LABEL_29;
      }
      unint64_t v21 = *(void *)(v5 + 8 * v11);
      if (!v21)
      {
        int64_t v11 = v20 + 2;
        if (v20 + 2 >= v9) {
          goto LABEL_29;
        }
        unint64_t v21 = *(void *)(v5 + 8 * v11);
        if (!v21)
        {
          int64_t v11 = v20 + 3;
          if (v20 + 3 >= v9) {
            goto LABEL_29;
          }
          unint64_t v21 = *(void *)(v5 + 8 * v11);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v9)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v12;
  }
  unint64_t v21 = *(void *)(v5 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v5 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

void *sub_100693E40(void *a1)
{
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  uint64_t v125 = a1;
  id v2 = [a1 entityName];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v7 = [ObjCClassFromMetadata entity];
  if (!v7)
  {
    swift_bridgeObjectRelease();
    if (qword_100906F10 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_10090C410);
    id v17 = v125;
    Swift::String v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_t loga = v18;
      uint64_t v20 = swift_slowAlloc();
      os_log_t v121 = (os_log_t)swift_slowAlloc();
      uint64_t v126 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412546;
      unint64_t v21 = ObjCClassFromMetadata;
      uint64_t v128 = (uint64_t)v17;
      id v22 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v121->Class isa = (Class)v17;

      *(_WORD *)(v20 + 12) = 2080;
      id v23 = [ObjCClassFromMetadata description];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      uint64_t ObjCClassFromMetadata = v21;
      uint64_t v128 = sub_1000C51B8(v24, v26, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, v19, "Failed to get entity for CDObject {remObjectID: %@, CDObject: %s}", (uint8_t *)v20, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v38 = self;
    uint64_t v126 = 0;
    unint64_t v127 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v39._uint64_t countAndFlagsBits = 0xD000000000000030;
    v39._object = (void *)0x80000001007DBDF0;
    String.append(_:)(v39);
    id v40 = [v17 description];
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v43 = v42;

    v44._uint64_t countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._uint64_t countAndFlagsBits = 0x656A624F4443202CLL;
    v45._object = (void *)0xEC000000203A7463;
    String.append(_:)(v45);
    id v46 = [ObjCClassFromMetadata description];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    BOOL v49 = v48;

    v50._uint64_t countAndFlagsBits = v47;
    v50._object = v49;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._uint64_t countAndFlagsBits = 125;
    v51._object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    NSString v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v38 internalErrorWithDebugDescription:v52];

    swift_willThrow();
    goto LABEL_30;
  }
  id v124 = ObjCClassFromMetadata;
  os_log_t v8 = (os_log_t)v7;
  id v9 = [v8 name];
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (v11 == v3 && v13 == v5)
  {

    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
LABEL_13:
    uint64_t v116 = v3;
    if (qword_100906F10 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E2DC(v27, (uint64_t)qword_10090C410);
    id v28 = v125;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    os_log_t log = v8;
    uint64_t v119 = v28;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v115 = v29;
      uint64_t v32 = (void *)swift_slowAlloc();
      uint64_t v126 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138412546;
      uint64_t v128 = (uint64_t)v28;
      id v33 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v32 = v28;

      *(_WORD *)(v31 + 12) = 2080;
      id v34 = [v124 description];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v37 = v36;

      uint64_t v128 = sub_1000C51B8(v35, v37, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v115, v30, "cdEntity.name != entityName. Performing lookup {remObjectID: %@, CDObject: %s}", (uint8_t *)v31, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v53 = [v8 managedObjectModel];
    id v54 = [v53 entitiesByName];

    sub_1000963CC(0, (unint64_t *)&unk_100917C20);
    uint64_t v55 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v55 + 16) && (unint64_t v56 = sub_1001806F8(v116, v5), (v57 & 1) != 0))
    {
      id v58 = *(id *)(*(void *)(v55 + 56) + 8 * v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ([v58 isKindOfEntity:v8])
      {

        return v125;
      }
      uint64_t v118 = v58;
      id v93 = v119;
      uint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.fault.getter();
      uint64_t v96 = &selRef_ckServerChangeTokens;
      if (os_log_type_enabled(v94, v95))
      {
        uint64_t v97 = swift_slowAlloc();
        id v120 = (void *)swift_slowAlloc();
        uint64_t v126 = swift_slowAlloc();
        *(_DWORD *)uint64_t v97 = 138412546;
        uint64_t v128 = (uint64_t)v93;
        id v98 = v93;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v120 = v93;

        *(_WORD *)(v97 + 12) = 2080;
        id v99 = [v124 description];
        uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v102 = v101;

        uint64_t v103 = v100;
        os_log_t v8 = log;
        uint64_t v128 = sub_1000C51B8(v103, v102, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v96 = &selRef_ckServerChangeTokens;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: %@, CDObject: %s}", (uint8_t *)v97, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v104 = self;
      uint64_t v126 = 0;
      unint64_t v127 = 0xE000000000000000;
      _StringGuts.grow(_:)(101);
      v105._uint64_t countAndFlagsBits = 0xD000000000000054;
      v105._object = (void *)0x80000001007DBE90;
      String.append(_:)(v105);
      id v106 = [v93 v96[166]];
      uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v109 = v108;

      v110._uint64_t countAndFlagsBits = v107;
      v110._object = v109;
      String.append(_:)(v110);
      swift_bridgeObjectRelease();
      v111._uint64_t countAndFlagsBits = 0x656A624F4443202CLL;
      v111._object = (void *)0xEC000000203A7463;
      String.append(_:)(v111);
      v112._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v112);
      swift_bridgeObjectRelease();
      v113._uint64_t countAndFlagsBits = 125;
      v113._object = (void *)0xE100000000000000;
      String.append(_:)(v113);
      NSString v114 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v104 internalErrorWithDebugDescription:v114];

      swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v59 = [v8 managedObjectModel];
      id v60 = [v59 entitiesByName];

      uint64_t v61 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100691F0C(v61);
      swift_bridgeObjectRelease();
      id v62 = v119;
      swift_bridgeObjectRetain_n();
      id v63 = v62;
      uint64_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = swift_slowAlloc();
        Swift::Int v117 = (void *)swift_slowAlloc();
        uint64_t v126 = swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = 138412802;
        uint64_t v128 = (uint64_t)v63;
        id v67 = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *Swift::Int v117 = v63;

        *(_WORD *)(v66 + 12) = 2080;
        id v68 = [v124 description];
        uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v71 = v70;

        uint64_t v128 = sub_1000C51B8(v69, v71, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v66 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v72 = Array.description.getter();
        unint64_t v74 = v73;
        swift_bridgeObjectRelease();
        uint64_t v128 = sub_1000C51B8(v72, v74, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "CoreData entity not found for remObjectID.entity {remObjectID: %@, CDObject: %s, momEntityNames: %s}", (uint8_t *)v66, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v75 = self;
      uint64_t v126 = 0;
      unint64_t v127 = 0xE000000000000000;
      _StringGuts.grow(_:)(100);
      v76._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
      v76._object = (void *)0x80000001007DBE30;
      String.append(_:)(v76);
      id v77 = [v63 description];
      uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v80 = v79;

      v81._uint64_t countAndFlagsBits = v78;
      v81._object = v80;
      String.append(_:)(v81);
      swift_bridgeObjectRelease();
      v82._uint64_t countAndFlagsBits = 0x656A624F4443202CLL;
      v82._object = (void *)0xEC000000203A7463;
      String.append(_:)(v82);
      id v83 = [v124 description];
      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v86 = v85;

      v87._uint64_t countAndFlagsBits = v84;
      v87._object = v86;
      String.append(_:)(v87);
      swift_bridgeObjectRelease();
      v88._object = (void *)0x80000001007DBE70;
      v88._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v88);
      v89._uint64_t countAndFlagsBits = Array.description.getter();
      String.append(_:)(v89);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v90._uint64_t countAndFlagsBits = 125;
      v90._object = (void *)0xE100000000000000;
      String.append(_:)(v90);
      NSString v91 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v75 internalErrorWithDebugDescription:v91];

      swift_willThrow();
    }
LABEL_30:

    return v125;
  }

LABEL_18:
  swift_bridgeObjectRelease();
  return v125;
}

void *sub_100694D98(void *a1)
{
  return sub_100694DE8(a1, (unint64_t *)&qword_100909AD0);
}

void *sub_100694DC0(void *a1)
{
  return sub_100694DE8(a1, &qword_10090ABC0);
}

void *sub_100694DE8(void *a1, unint64_t *a2)
{
  sub_1000963CC(0, a2);
  uint64_t v126 = a1;
  id v3 = [a1 entityName];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v8 = [ObjCClassFromMetadata entity];
  if (!v8)
  {
    swift_bridgeObjectRelease();
    if (qword_100906F10 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10090C410);
    id v18 = v126;
    os_log_type_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_t loga = v19;
      uint64_t v21 = swift_slowAlloc();
      os_log_t v122 = (os_log_t)swift_slowAlloc();
      uint64_t v127 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412546;
      id v22 = ObjCClassFromMetadata;
      uint64_t v129 = (uint64_t)v18;
      id v23 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v122->Class isa = (Class)v18;

      *(_WORD *)(v21 + 12) = 2080;
      id v24 = [ObjCClassFromMetadata description];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      uint64_t ObjCClassFromMetadata = v22;
      uint64_t v129 = sub_1000C51B8(v25, v27, &v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, v20, "Failed to get entity for CDObject {remObjectID: %@, CDObject: %s}", (uint8_t *)v21, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    Swift::String v39 = self;
    uint64_t v127 = 0;
    unint64_t v128 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v40._uint64_t countAndFlagsBits = 0xD000000000000030;
    v40._object = (void *)0x80000001007DBDF0;
    String.append(_:)(v40);
    id v41 = [v18 description];
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v44 = v43;

    v45._uint64_t countAndFlagsBits = v42;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._uint64_t countAndFlagsBits = 0x656A624F4443202CLL;
    v46._object = (void *)0xEC000000203A7463;
    String.append(_:)(v46);
    id v47 = [ObjCClassFromMetadata description];
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v50 = v49;

    v51._uint64_t countAndFlagsBits = v48;
    v51._object = v50;
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._uint64_t countAndFlagsBits = 125;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    NSString v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v39 internalErrorWithDebugDescription:v53];

    swift_willThrow();
    goto LABEL_30;
  }
  id v125 = ObjCClassFromMetadata;
  os_log_t v9 = (os_log_t)v8;
  id v10 = [v9 name];
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if (v12 == v4 && v14 == v6)
  {

    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_13:
    uint64_t v117 = v4;
    if (qword_100906F10 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_10090C410);
    id v29 = v126;
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    os_log_t log = v9;
    id v120 = v29;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v116 = v30;
      id v33 = (void *)swift_slowAlloc();
      uint64_t v127 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412546;
      uint64_t v129 = (uint64_t)v29;
      id v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v33 = v29;

      *(_WORD *)(v32 + 12) = 2080;
      id v35 = [v125 description];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      uint64_t v129 = sub_1000C51B8(v36, v38, &v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v116, v31, "cdEntity.name != entityName. Performing lookup {remObjectID: %@, CDObject: %s}", (uint8_t *)v32, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v54 = [v9 managedObjectModel];
    id v55 = [v54 entitiesByName];

    sub_1000963CC(0, (unint64_t *)&unk_100917C20);
    uint64_t v56 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v56 + 16) && (unint64_t v57 = sub_1001806F8(v117, v6), (v58 & 1) != 0))
    {
      id v59 = *(id *)(*(void *)(v56 + 56) + 8 * v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ([v59 isKindOfEntity:v9])
      {

        return v126;
      }
      uint64_t v119 = v59;
      id v94 = v120;
      os_log_type_t v95 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.fault.getter();
      uint64_t v97 = &selRef_ckServerChangeTokens;
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v98 = swift_slowAlloc();
        os_log_t v121 = (void *)swift_slowAlloc();
        uint64_t v127 = swift_slowAlloc();
        *(_DWORD *)uint64_t v98 = 138412546;
        uint64_t v129 = (uint64_t)v94;
        id v99 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_t v121 = v94;

        *(_WORD *)(v98 + 12) = 2080;
        id v100 = [v125 description];
        uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v103 = v102;

        uint64_t v104 = v101;
        os_log_t v9 = log;
        uint64_t v129 = sub_1000C51B8(v104, v103, &v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v97 = &selRef_ckServerChangeTokens;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: %@, CDObject: %s}", (uint8_t *)v98, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      Swift::String v105 = self;
      uint64_t v127 = 0;
      unint64_t v128 = 0xE000000000000000;
      _StringGuts.grow(_:)(101);
      v106._uint64_t countAndFlagsBits = 0xD000000000000054;
      v106._object = (void *)0x80000001007DBE90;
      String.append(_:)(v106);
      id v107 = [v94 v97[166]];
      uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v110 = v109;

      v111._uint64_t countAndFlagsBits = v108;
      v111._object = v110;
      String.append(_:)(v111);
      swift_bridgeObjectRelease();
      v112._uint64_t countAndFlagsBits = 0x656A624F4443202CLL;
      v112._object = (void *)0xEC000000203A7463;
      String.append(_:)(v112);
      v113._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v113);
      swift_bridgeObjectRelease();
      v114._uint64_t countAndFlagsBits = 125;
      v114._object = (void *)0xE100000000000000;
      String.append(_:)(v114);
      NSString v115 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v105 internalErrorWithDebugDescription:v115];

      swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v60 = [v9 managedObjectModel];
      id v61 = [v60 entitiesByName];

      uint64_t v62 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100691F0C(v62);
      swift_bridgeObjectRelease();
      id v63 = v120;
      swift_bridgeObjectRetain_n();
      id v64 = v63;
      os_log_type_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = swift_slowAlloc();
        uint64_t v118 = (void *)swift_slowAlloc();
        uint64_t v127 = swift_slowAlloc();
        *(_DWORD *)uint64_t v67 = 138412802;
        uint64_t v129 = (uint64_t)v64;
        id v68 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v118 = v64;

        *(_WORD *)(v67 + 12) = 2080;
        id v69 = [v125 description];
        uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v72 = v71;

        uint64_t v129 = sub_1000C51B8(v70, v72, &v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v67 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v73 = Array.description.getter();
        unint64_t v75 = v74;
        swift_bridgeObjectRelease();
        uint64_t v129 = sub_1000C51B8(v73, v75, &v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "CoreData entity not found for remObjectID.entity {remObjectID: %@, CDObject: %s, momEntityNames: %s}", (uint8_t *)v67, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      Swift::String v76 = self;
      uint64_t v127 = 0;
      unint64_t v128 = 0xE000000000000000;
      _StringGuts.grow(_:)(100);
      v77._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
      v77._object = (void *)0x80000001007DBE30;
      String.append(_:)(v77);
      id v78 = [v64 description];
      uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v81 = v80;

      v82._uint64_t countAndFlagsBits = v79;
      v82._object = v81;
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      v83._uint64_t countAndFlagsBits = 0x656A624F4443202CLL;
      v83._object = (void *)0xEC000000203A7463;
      String.append(_:)(v83);
      id v84 = [v125 description];
      uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v87 = v86;

      v88._uint64_t countAndFlagsBits = v85;
      v88._object = v87;
      String.append(_:)(v88);
      swift_bridgeObjectRelease();
      v89._object = (void *)0x80000001007DBE70;
      v89._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v89);
      v90._uint64_t countAndFlagsBits = Array.description.getter();
      String.append(_:)(v90);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v91._uint64_t countAndFlagsBits = 125;
      v91._object = (void *)0xE100000000000000;
      String.append(_:)(v91);
      NSString v92 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v76 internalErrorWithDebugDescription:v92];

      swift_willThrow();
    }
LABEL_30:

    return v126;
  }

LABEL_18:
  swift_bridgeObjectRelease();
  return v126;
}

void *sub_100695D30(void *a1)
{
  return sub_100694DE8(a1, (unint64_t *)&unk_100909AC0);
}

uint64_t sub_100695D58(uint64_t a1)
{
  return a1;
}

void *sub_100695D9C(void *a1)
{
  return sub_100694DE8(a1, (unint64_t *)&qword_10090DC20);
}

void *sub_100695DC4(void *a1, void (*a2)(void), uint64_t a3, void *a4)
{
  a2(0);
  uint64_t v129 = a1;
  id v7 = [a1 entityName];
  os_log_t v127 = (os_log_t)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v11 = [ObjCClassFromMetadata entity];
  if (!v11)
  {
    swift_bridgeObjectRelease();
    if (qword_100906F10 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E2DC(v20, (uint64_t)qword_10090C410);
    id v21 = v129;
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v126 = (void *)swift_slowAlloc();
      uint64_t v130 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138412546;
      uint64_t v132 = (uint64_t)v21;
      os_log_t loga = v22;
      id v25 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v126 = v21;

      *(_WORD *)(v24 + 12) = 2080;
      id v26 = [ObjCClassFromMetadata description];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = ObjCClassFromMetadata;
      unint64_t v30 = v29;

      uint64_t v132 = sub_1000C51B8(v27, v30, &v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, v23, "Failed to get entity for CDObject {remObjectID: %@, CDObject: %s}", (uint8_t *)v24, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v28 = ObjCClassFromMetadata;
    }
    unint64_t v43 = self;
    uint64_t v130 = 0;
    unint64_t v131 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v44._uint64_t countAndFlagsBits = 0xD000000000000030;
    v44._object = (void *)0x80000001007DBDF0;
    String.append(_:)(v44);
    id v45 = [v21 description];
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v48 = v47;

    v49._uint64_t countAndFlagsBits = v46;
    v49._object = v48;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._uint64_t countAndFlagsBits = 0x656A624F4443202CLL;
    v50._object = (void *)0xEC000000203A7463;
    String.append(_:)(v50);
    id v51 = [v28 description];
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v54 = v53;

    v55._uint64_t countAndFlagsBits = v52;
    v55._object = v54;
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v56._uint64_t countAndFlagsBits = 125;
    v56._object = (void *)0xE100000000000000;
    String.append(_:)(v56);
    NSString v57 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v43 internalErrorWithDebugDescription:v57];

    swift_willThrow();
    goto LABEL_30;
  }
  uint64_t v12 = v11;
  id v13 = [v12 name];
  if (!v13) {
    goto LABEL_13;
  }
  uint64_t v14 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if ((os_log_t)v15 == v127 && v17 == v9)
  {

    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
  {
LABEL_13:
    if (qword_100906F10 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E2DC(v31, (uint64_t)qword_10090C410);
    uint64_t v32 = v129;
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    id v123 = ObjCClassFromMetadata;
    os_log_t log = v12;
    v119._uint64_t countAndFlagsBits = a3;
    v119._object = a4;
    id v120 = v32;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      os_log_type_t type = v34;
      uint64_t v36 = (void *)swift_slowAlloc();
      uint64_t v130 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 138412546;
      uint64_t v132 = (uint64_t)v32;
      unint64_t v37 = ObjCClassFromMetadata;
      unint64_t v38 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v36 = v32;

      *(_WORD *)(v35 + 12) = 2080;
      id v39 = [v37 description];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v42 = v41;

      uint64_t v132 = sub_1000C51B8(v40, v42, &v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v32 = v33;
      _os_log_impl((void *)&_mh_execute_header, v33, type, "cdEntity.name != entityName. Performing lookup {remObjectID: %@, CDObject: %s}", (uint8_t *)v35, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v58 = [v12 managedObjectModel];
    id v59 = [v58 entitiesByName];

    sub_1000963CC(0, (unint64_t *)&unk_100917C20);
    uint64_t v60 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v60 + 16) && (unint64_t v61 = sub_1001806F8((uint64_t)v127, v9), (v62 & 1) != 0))
    {
      id v63 = *(id *)(*(void *)(v60 + 56) + 8 * v61);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ([v63 isKindOfEntity:v12])
      {

        return v129;
      }
      os_log_t v128 = v63;
      uint64_t v98 = v120;
      id v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.fault.getter();
      uint64_t v101 = &selRef_ckServerChangeTokens;
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v102 = swift_slowAlloc();
        os_log_t v122 = (void *)swift_slowAlloc();
        uint64_t v130 = swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = 138412546;
        uint64_t v132 = (uint64_t)v98;
        unint64_t v103 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_t v122 = v98;

        *(_WORD *)(v102 + 12) = 2080;
        id v104 = [v123 description];
        uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v107 = v106;

        uint64_t v101 = &selRef_ckServerChangeTokens;
        uint64_t v132 = sub_1000C51B8(v105, v107, &v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: %@, CDObject: %s}", (uint8_t *)v102, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v108 = self;
      uint64_t v130 = 0;
      unint64_t v131 = 0xE000000000000000;
      _StringGuts.grow(_:)(101);
      v109._uint64_t countAndFlagsBits = 0xD000000000000054;
      v109._object = (void *)0x80000001007DBE90;
      String.append(_:)(v109);
      id v110 = [v98 v101[166]];
      uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v113 = v112;

      v114._uint64_t countAndFlagsBits = v111;
      v114._object = v113;
      String.append(_:)(v114);
      swift_bridgeObjectRelease();
      v115._uint64_t countAndFlagsBits = 0x656A624F4443202CLL;
      v115._object = (void *)0xEC000000203A7463;
      String.append(_:)(v115);
      String.append(_:)(v119);
      v116._uint64_t countAndFlagsBits = 125;
      v116._object = (void *)0xE100000000000000;
      String.append(_:)(v116);
      NSString v117 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v108 internalErrorWithDebugDescription:v117];

      swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v64 = [v12 managedObjectModel];
      id v65 = [v64 entitiesByName];

      uint64_t v66 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100691F0C(v66);
      swift_bridgeObjectRelease();
      uint64_t v67 = v120;
      swift_bridgeObjectRetain_n();
      id v68 = v67;
      id v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = swift_slowAlloc();
        os_log_t v121 = (void *)swift_slowAlloc();
        uint64_t v130 = swift_slowAlloc();
        *(_DWORD *)uint64_t v71 = 138412802;
        uint64_t v132 = (uint64_t)v68;
        unint64_t v72 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_t v121 = v68;

        *(_WORD *)(v71 + 12) = 2080;
        id v73 = [v123 description];
        uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v76 = v75;

        uint64_t v132 = sub_1000C51B8(v74, v76, &v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v71 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v77 = Array.description.getter();
        unint64_t v79 = v78;
        swift_bridgeObjectRelease();
        uint64_t v132 = sub_1000C51B8(v77, v79, &v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "CoreData entity not found for remObjectID.entity {remObjectID: %@, CDObject: %s, momEntityNames: %s}", (uint8_t *)v71, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v80 = self;
      uint64_t v130 = 0;
      unint64_t v131 = 0xE000000000000000;
      _StringGuts.grow(_:)(100);
      v81._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
      v81._object = (void *)0x80000001007DBE30;
      String.append(_:)(v81);
      id v82 = [v68 description];
      uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v85 = v84;

      v86._uint64_t countAndFlagsBits = v83;
      v86._object = v85;
      String.append(_:)(v86);
      swift_bridgeObjectRelease();
      v87._uint64_t countAndFlagsBits = 0x656A624F4443202CLL;
      v87._object = (void *)0xEC000000203A7463;
      String.append(_:)(v87);
      id v88 = [v123 description];
      uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v91 = v90;

      v92._uint64_t countAndFlagsBits = v89;
      v92._object = v91;
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      v93._object = (void *)0x80000001007DBE70;
      v93._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v93);
      v94._uint64_t countAndFlagsBits = Array.description.getter();
      String.append(_:)(v94);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v95._uint64_t countAndFlagsBits = 125;
      v95._object = (void *)0xE100000000000000;
      String.append(_:)(v95);
      NSString v96 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v80 internalErrorWithDebugDescription:v96];

      swift_willThrow();
    }
LABEL_30:

    return v129;
  }

LABEL_18:
  swift_bridgeObjectRelease();
  return v129;
}

void *sub_100696CCC(void *a1)
{
  return sub_100694DE8(a1, (unint64_t *)&unk_100910210);
}

uint64_t sub_100696CF4()
{
  sub_10010B4E8(v0, (uint64_t)&v19);
  sub_10010B4E8(v0, (uint64_t)&v30);
  switch(v31 >> 14)
  {
    case 1:
      uint64_t v7 = v30;
      swift_bridgeObjectRetain();
      return v7;
    case 3:
      goto LABEL_3;
    default:
      v31 &= 0x3FFFu;
LABEL_3:
      unint64_t v1 = sub_100159F08();
      if (v2)
      {
        uint64_t v3 = v1;
        unint64_t v4 = v2;
        goto LABEL_12;
      }
      sub_10010B4E8(v0, (uint64_t)v25);
      unint64_t v5 = v28 | ((unint64_t)v29 << 32);
      unsigned int v6 = v29 >> 14;
      if (v6 < 2)
      {
        unsigned __int16 v29 = WORD2(v5) & 0x3FFF;
LABEL_11:
        id v8 = [self processInfo];
        id v9 = [v8 processName];

        uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v4 = v10;

        goto LABEL_12;
      }
      if (v6 != 2) {
        goto LABEL_11;
      }
      unsigned __int16 v29 = WORD2(v5) & 0x3FFF;
      unint64_t v4 = v27;
      if (v27)
      {
        uint64_t v3 = v26;
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v4 = 0xEF4449656C646E75;
        uint64_t v3 = 0x426E776F6E6B6E55;
      }
LABEL_12:
      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_100776E60;
      *(void *)(v11 + 56) = &type metadata for String;
      *(void *)(v11 + 64) = sub_1000C5B38();
      *(void *)(v11 + 32) = v3;
      *(void *)(v11 + 40) = v4;
      sub_10010B4E8(v0, (uint64_t)v23);
      unint64_t v12 = v23[10] | ((unint64_t)v24 << 32);
      unsigned int v13 = v24 >> 14;
      if (v13 >= 2)
      {
        if (v13 == 2)
        {
          unsigned __int16 v24 = WORD2(v12) & 0x3FFF;
          unsigned int v14 = v23[0];
          goto LABEL_17;
        }
      }
      else
      {
        unsigned __int16 v24 = WORD2(v12) & 0x3FFF;
      }
      id v15 = [self processInfo];
      unsigned int v14 = [v15 processIdentifier];

LABEL_17:
      *(void *)(v11 + 96) = &type metadata for Int32;
      *(void *)(v11 + 104) = &protocol witness table for Int32;
      *(_DWORD *)(v11 + 72) = v14;
      sub_10010B4E8(v0, (uint64_t)v20);
      unint64_t v16 = v21 | ((unint64_t)v22 << 32);
      LOBYTE(v17) = 1;
      switch(v22 >> 14)
      {
        case 2:
          unsigned __int16 v22 = WORD2(v16) & 0x3FFF;
          uint64_t v17 = (v16 >> 8) & 1;
          break;
        case 3:
          break;
        default:
          unsigned __int16 v22 = WORD2(v16) & 0x3FFF;
          LOBYTE(v17) = 1;
          break;
      }
      *(void *)(v11 + 136) = &type metadata for Bool;
      *(void *)(v11 + 144) = &protocol witness table for Bool;
      *(unsigned char *)(v11 + 112) = v17;
      return String.init(format:_:)();
  }
}

void *sub_100697018(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1006970A0(a1, a2, a3, a4, a5, (unint64_t *)&qword_10090B040, (uint64_t)off_1008AA488, &qword_10090D750, (uint64_t *)&unk_100913F20);
}

void *sub_10069705C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1006970A0(a1, a2, a3, a4, a5, (unint64_t *)&qword_100909AD0, (uint64_t)off_1008AA460, &qword_100910160, (uint64_t *)&unk_1009140D0);
}

void *sub_1006970A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5, unint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v48 = a6;
  uint64_t v49 = a7;
  Swift::String v50 = a5;
  uint64_t v51 = a4;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = a1;
  int64_t v19 = *(void *)(a1 + 16);
  uint64_t v20 = _swiftEmptyArrayStorage;
  if (v19)
  {
    int v45 = a3;
    unint64_t v43 = a8;
    uint64_t v44 = a2;
    uint64_t v46 = v9;
    uint64_t v47 = v10;
    unint64_t v42 = a9;
    v54[0] = _swiftEmptyArrayStorage;
    int64_t v52 = v19;
    sub_1001DE148(0, v19, 0);
    uint64_t v21 = 0;
    uint64_t v22 = v54[0];
    do
    {
      id v23 = *(id *)(v53 + 8 * v21 + 32);
      id v24 = [v23 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v54[0] = v22;
      unint64_t v26 = *(void *)(v22 + 16);
      unint64_t v25 = *(void *)(v22 + 24);
      if (v26 >= v25 >> 1)
      {
        sub_1001DE148(v25 > 1, v26 + 1, 1);
        uint64_t v22 = v54[0];
      }
      ++v21;
      *(void *)(v22 + 16) = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v22+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v26, v18, v15);
    }
    while (v52 != v21);
    sub_1000963CC(0, v48);
    uint64_t v27 = sub_100126860(v22);
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v29 = sub_100333098(v27);
    swift_bridgeObjectRelease();
    uint64_t v30 = (void *)sub_1003A0380(KeyPath, v29, &qword_100921968, (uint64_t *)&unk_100914540);
    swift_release();
    id v31 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v32 = [(id)swift_getObjCClassFromMetadata() entity];
    [v31 setEntity:v32];

    Class isa = v50;
    if (v50)
    {
      sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
    }
    uint64_t v34 = v47;
    [v31 setAffectedStores:isa];

    [v31 setPredicate:v30];
    if ((v45 & 1) == 0) {
      [v31 setFetchBatchSize:v44];
    }
    if (v51) {
      uint64_t v20 = Array._bridgeToObjectiveC()().super.isa;
    }
    else {
      uint64_t v20 = 0;
    }
    [v31 setRelationshipKeyPathsForPrefetching:v20];

    uint64_t v35 = NSManagedObjectContext.fetch<A>(_:)();
    if (!v34)
    {
      uint64_t v36 = v35;
      v54[3] = sub_100094134(v43);
      v54[0] = v36;
      throwingCast<A>(_:as:failureMessage:)();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v54);
      uint64_t v20 = (void *)v55;
      if (v55 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v37 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v52 < v37)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = self;
        v54[0] = 0;
        v54[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(70);
        v38._object = (void *)0x80000001007DBF40;
        v38._uint64_t countAndFlagsBits = 0xD000000000000044;
        String.append(_:)(v38);
        sub_100094134(v42);
        v39._uint64_t countAndFlagsBits = Array.description.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        NSString v40 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v20 internalErrorWithDebugDescription:v40];

        swift_willThrow();
      }
    }
  }
  return v20;
}

void *sub_10069758C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1006970A0(a1, a2, a3, a4, a5, &qword_10090ABC0, (uint64_t)off_1008AA3D8, &qword_100910070, (uint64_t *)&unk_1009219C0);
}

void *sub_1006975D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1006970A0(a1, a2, a3, a4, a5, (unint64_t *)&unk_100909AC0, (uint64_t)off_1008AA3E0, &qword_100921C20, &qword_10090B718);
}

void *sub_100697614(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (!*(void *)(a1 + 16)) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
  return sub_10071E568(a1, a2, a3 & 1, a4);
}

void *sub_1006976AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5, void (*a6)(void), uint64_t *a7, uint64_t *a8)
{
  uint64_t v48 = a6;
  uint64_t v49 = a5;
  uint64_t v51 = a4;
  int v50 = a3;
  uint64_t v52 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = a1;
  int64_t v17 = *(void *)(a1 + 16);
  id v18 = _swiftEmptyArrayStorage;
  if (v17)
  {
    uint64_t v45 = a2;
    uint64_t v46 = v8;
    unint64_t v43 = a8;
    uint64_t v44 = a7;
    uint64_t v47 = v9;
    v54[0] = _swiftEmptyArrayStorage;
    sub_1001DE148(0, v17, 0);
    uint64_t v19 = 0;
    id v18 = (void *)v54[0];
    do
    {
      int64_t v20 = v17;
      id v21 = *(id *)(v53 + 8 * v19 + 32);
      id v22 = [v21 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v54[0] = v18;
      unint64_t v24 = v18[2];
      unint64_t v23 = v18[3];
      if (v24 >= v23 >> 1)
      {
        sub_1001DE148(v23 > 1, v24 + 1, 1);
        id v18 = (void *)v54[0];
      }
      ++v19;
      void v18[2] = v24 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v24, v16, v52);
      int64_t v17 = v20;
    }
    while (v20 != v19);
    v48(0);
    uint64_t v25 = sub_100126860((uint64_t)v18);
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v27 = sub_100333098(v25);
    swift_bridgeObjectRelease();
    unsigned int v28 = (void *)sub_1003A0380(KeyPath, v27, &qword_100921968, (uint64_t *)&unk_100914540);
    swift_release();
    id v29 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v30 = [(id)swift_getObjCClassFromMetadata() entity];
    [v29 setEntity:v30];

    Class isa = v49;
    if (v49)
    {
      sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
    }
    uint64_t v32 = v47;
    [v29 setAffectedStores:isa];

    [v29 setPredicate:v28];
    if ((v50 & 1) == 0) {
      [v29 setFetchBatchSize:v45];
    }
    if (v51) {
      v33.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    }
    else {
      v33.super.Class isa = 0;
    }
    [v29 setRelationshipKeyPathsForPrefetching:v33.super.isa];

    uint64_t v34 = NSManagedObjectContext.fetch<A>(_:)();
    if (v32) {
      goto LABEL_18;
    }
    uint64_t v35 = v34;
    v54[3] = sub_100094134(v44);
    v54[0] = v35;
    throwingCast<A>(_:as:failureMessage:)();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v54);
    id v18 = (void *)v55;
    if (v55 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17 >= v40) {
        goto LABEL_18;
      }
    }
    else if (v17 >= *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_18:

      return v18;
    }
    swift_bridgeObjectRelease();
    uint64_t v36 = self;
    v54[0] = 0;
    v54[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v37._object = (void *)0x80000001007DBF40;
    v37._uint64_t countAndFlagsBits = 0xD000000000000044;
    String.append(_:)(v37);
    sub_100094134(v43);
    v38._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v36 internalErrorWithDebugDescription:v39];

    swift_willThrow();
    goto LABEL_18;
  }
  return v18;
}

void *sub_100697B9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1006970A0(a1, a2, a3, a4, a5, (unint64_t *)&qword_10090DC20, (uint64_t)off_1008AA448, &qword_10090DCA0, (uint64_t *)&unk_100914050);
}

void *sub_100697BE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1006970A0(a1, a2, a3, a4, a5, (unint64_t *)&unk_100910210, (uint64_t)off_1008AA4A0, (uint64_t *)&unk_100921B00, (uint64_t *)&unk_100913E20);
}

void *sub_100697C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5)
{
  if (a1) {
    return (void *)a4();
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_100917690);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    sub_100094134(a5);
    uint64_t v11 = String.init<A>(describing:)();
    sub_1000C51B8(v11, v12, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Tried to create CDIngestableKey array without changedKeys, the ingestable may be missing an REMChangedKeysObserver in the change item {type: %{public}s}", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return _swiftEmptyArrayStorage;
}

void *sub_100697DE4(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  if (a1) {
    return (void *)a2();
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100917690);
  unsigned int v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    sub_100094134(a3);
    uint64_t v9 = String.init<A>(describing:)();
    sub_1000C51B8(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Tried to create CDIngestableKey array without changedKeys, the ingestable may be missing an REMChangedKeysObserver in the change item {type: %{public}s}", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return _swiftEmptyArrayStorage;
}

unint64_t sub_100697FA0()
{
  v0._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v0._object = (void *)0xE800000000000000;
  unint64_t result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4868, v0);
  if (result >= 6)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_100917690);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      sub_1000963CC(0, &qword_100910230);
      id v6 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      sub_1000C51B8(v7, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 6;
  }
  return result;
}

uint64_t sub_10069818C()
{
  uint64_t v0 = sub_1005E1B98();
  if (v0 == 39)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_100917690);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v4 = 136446210;
      sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
      id v5 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      sub_1000C51B8(v6, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  return v0;
}

unint64_t sub_100698378(Swift::OpaquePointer a1, unint64_t *a2)
{
  v3._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v3._object = (void *)0xE800000000000000;
  unint64_t result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result >= 4)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100917690);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136446210;
      sub_1000963CC(0, a2);
      id v9 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 4;
  }
  return result;
}

uint64_t sub_10069855C()
{
  uint64_t v0 = sub_10028B15C();
  if (v0 == 26)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_100917690);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v4 = 136446210;
      sub_1000963CC(0, &qword_10090ABC0);
      id v5 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      sub_1000C51B8(v6, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  return v0;
}

unint64_t sub_100698748(Swift::OpaquePointer a1, unint64_t *a2)
{
  v3._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v3._object = (void *)0xE800000000000000;
  unint64_t result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result >= 5)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100917690);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136446210;
      sub_1000963CC(0, a2);
      id v9 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 5;
  }
  return result;
}

uint64_t sub_10069892C(uint64_t (*a1)(uint64_t, unint64_t), unint64_t *a2)
{
  uint64_t v3 = a1(0x44497463656A626FLL, 0xE800000000000000);
  if (v3 == 11)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_100917690);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v7 = 136446210;
      sub_1000963CC(0, a2);
      id v8 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;

      sub_1000C51B8(v9, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  return v3;
}

uint64_t sub_100698B20()
{
  uint64_t v0 = sub_10024BBD4();
  if (v0 == 38)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_100917690);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      id v5 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      sub_1000C51B8(v6, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  return v0;
}

unint64_t sub_100698D0C(Swift::OpaquePointer a1, void (*a2)(void))
{
  v3._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v3._object = (void *)0xE800000000000000;
  unint64_t result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result >= 2)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100917690);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136446210;
      a2(0);
      id v9 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 2;
  }
  return result;
}

unint64_t sub_100698EEC()
{
  v11._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v11._object = (void *)0xE800000000000000;
  unint64_t v0 = sub_100167298(v11);
  if (v0 == 12)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_100917690);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      type metadata accessor for REMCDTemplate();
      id v5 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      sub_1000C51B8(v6, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  return v0;
}

unint64_t sub_1006990C8(Swift::OpaquePointer a1, unint64_t *a2)
{
  v3._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v3._object = (void *)0xE800000000000000;
  unint64_t result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result >= 2)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100917690);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136446210;
      sub_1000963CC(0, a2);
      id v9 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 2;
  }
  return result;
}

unint64_t sub_1006992B0()
{
  v11._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v11._object = (void *)0xE800000000000000;
  unint64_t v0 = sub_1001B8B74(v11);
  if (v0 == 14)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_100917690);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      sub_1000963CC(0, (unint64_t *)&unk_100910210);
      id v5 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      sub_1000C51B8(v6, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  return v0;
}

unint64_t sub_10069949C()
{
  v0._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v0._object = (void *)0xE800000000000000;
  unint64_t result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B27F0, v0);
  if (result >= 6)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_100917690);
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)id v5 = 136446210;
      type metadata accessor for REMCDDueDateDeltaAlert();
      id v6 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      sub_1000C51B8(v7, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 6;
  }
  return result;
}

unint64_t sub_100699678(Swift::OpaquePointer a1, unint64_t *a2)
{
  v3._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v3._object = (void *)0xE800000000000000;
  unint64_t result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result >= 7)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100917690);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136446210;
      sub_1000963CC(0, a2);
      id v9 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 7;
  }
  return result;
}

unint64_t sub_10069985C()
{
  v0._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v0._object = (void *)0xE800000000000000;
  unint64_t result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B28F0, v0);
  if (result >= 5)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_100917690);
    Swift::String v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      type metadata accessor for REMCDListSection();
      id v6 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      sub_1000C51B8(v7, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 5;
  }
  return result;
}

unint64_t sub_100699A38()
{
  v0._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v0._object = (void *)0xE800000000000000;
  unint64_t result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4DD8, v0);
  if (result >= 3)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_100917690);
    Swift::String v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      sub_1000963CC(0, &qword_100910E10);
      id v6 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      sub_1000C51B8(v7, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 3;
  }
  return result;
}

uint64_t sub_100699C24()
{
  uint64_t v0 = sub_1004FDFF0();
  if (v0 == 22)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_100917690);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v4 = 136446210;
      type metadata accessor for REMCDSavedReminder();
      id v5 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      sub_1000C51B8(v6, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  return v0;
}

unint64_t sub_100699E00(Swift::OpaquePointer a1, void (*a2)(void))
{
  v3._uint64_t countAndFlagsBits = 0x44497463656A626FLL;
  v3._object = (void *)0xE800000000000000;
  unint64_t result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result >= 4)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100917690);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136446210;
      a2(0);
      id v9 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 4;
  }
  return result;
}

unint64_t sub_100699FDC(Swift::OpaquePointer a1, unint64_t *a2)
{
  v3._uint64_t countAndFlagsBits = 0x49746E756F636361;
  v3._object = (void *)0xE900000000000044;
  unint64_t result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result >= 2)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100917690);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      sub_1000963CC(0, a2);
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136446210;
      id v9 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 2;
  }
  return result;
}

unint64_t sub_10069A1D0()
{
  v0._uint64_t countAndFlagsBits = 0x49746E756F636361;
  v0._object = (void *)0xE900000000000044;
  unint64_t result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B1728, v0);
  if (result > 6)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_100917690);
    Swift::String v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      id v6 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      sub_1000C51B8(v7, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 7;
  }
  return result;
}

unint64_t sub_10069A3C8()
{
  v0._uint64_t countAndFlagsBits = 0x49746E756F636361;
  v0._object = (void *)0xE900000000000044;
  unint64_t result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B1C20, v0);
  if (result > 1)
  {
    sub_1000963CC(0, &qword_10090ABC0);
    return 2;
  }
  return result;
}

unint64_t sub_10069A430()
{
  v0._uint64_t countAndFlagsBits = 0x49746E756F636361;
  v0._object = (void *)0xE900000000000044;
  unint64_t result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B1F50, v0);
  if (result > 5)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_100917690);
    Swift::String v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      id v6 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      sub_1000C51B8(v7, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 6;
  }
  return result;
}

unint64_t sub_10069A628()
{
  v0._uint64_t countAndFlagsBits = 0x49746E756F636361;
  v0._object = (void *)0xE900000000000044;
  unint64_t result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B23B0, v0);
  if (result > 2)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_100917690);
    Swift::String v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      type metadata accessor for REMCDTemplate();
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      id v6 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      sub_1000C51B8(v7, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 3;
  }
  return result;
}

unint64_t sub_10069A810(Swift::OpaquePointer a1, unint64_t *a2)
{
  v3._uint64_t countAndFlagsBits = 0x49746E756F636361;
  v3._object = (void *)0xE900000000000044;
  unint64_t result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result > 3)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100917690);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      sub_1000963CC(0, a2);
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136446210;
      id v9 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 4;
  }
  return result;
}

BOOL sub_10069AA00(Swift::OpaquePointer a1, void (*a2)(void))
{
  v3._uint64_t countAndFlagsBits = 0x49746E756F636361;
  v3._object = (void *)0xE900000000000044;
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(a1, v3);
  if (v4)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100917690);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      a2(0);
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136446210;
      id v9 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  return v4 != 0;
}

unint64_t sub_10069ABEC(Swift::OpaquePointer a1, void (*a2)(void))
{
  v3._uint64_t countAndFlagsBits = 0x49746E756F636361;
  v3._object = (void *)0xE900000000000044;
  unint64_t result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result >= 2)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100917690);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      a2(0);
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136446210;
      id v9 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 2;
  }
  return result;
}

void sub_10069ADD8(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001248EC(a1, (uint64_t)v6);
  os_log_type_t v7 = *a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setIdentifier:isa];
}

unint64_t sub_10069AF04(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_1007271D4(v4);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100740C10, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    type metadata accessor for REMCDSavedAttachment();
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100740C50;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100740C94;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100740CCC;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100740D04;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_10069B724(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100727A10(v4);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_10074158C, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_1007415C4;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100741608;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100741640;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100741664;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_10069BF54(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_100728FC0);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100740734, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    type metadata accessor for REMCDManualSortHint();
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_10074076C;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_1007407E0;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100740818;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100740850;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_10069C78C(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_10073043C(v4);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100741EF8, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, &qword_10091FD58);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100741F30;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100741F74;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100741F98;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100741FBC;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_10069CFBC(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100730CB4(v4);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_10074204C, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_100910E40);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100742084;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_1007420C8;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_1007420EC;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100742110;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_10069D7EC(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_10073288C(v4, (void (*)(void))sub_10072931C);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1007421A0, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, &qword_100910E10);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_1007421D8;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_10074221C;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100742240;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100742264;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_10069E030(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100731534(v4);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1007422F4, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, &qword_100910E00);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_10074232C;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100742370;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100742394;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_1007423B8;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_10069E860(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_10073288C(v4, (void (*)(void))sub_1007297C8);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100740EA8, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&unk_100909AC0);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100740EE0;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100740F24;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100740F5C;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100740F80;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_10069F0A4(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_10073288C(v4, (void (*)(void))sub_10072A108);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100741010, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, &qword_100910230);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100741048;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_10074108C;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_1007410C4;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_1007410E8;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_10069F8E8(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_10073288C(v4, (void (*)(void))sub_10072AD94);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100741430, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&unk_10090AF90);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100741470;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_1007414B4;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_1007414D8;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_1007414FC;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A012C(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_10073288C(v4, (void (*)(void))sub_10072A9B4);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1007412D4, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&unk_100915850);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100741314;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100741358;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_10074137C;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_1007413A0;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A0970(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100731D94(v4);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100741178, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, &qword_100915848);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_1007411B8;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_1007411FC;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100741220;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100741244;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A11A0(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_10073288C(v4, (void (*)(void))sub_10072B704);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1007416F4, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_100911820);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100741734;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100741778;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_10074179C;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_1007417C0;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A19E4(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10072BDAC);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100741BA0, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100741BD8;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100741C1C;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100741C54;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100741CA0;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A222C(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10072C42C);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100741D4C, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_100921E40);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100741D84;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100741DC8;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100741E00;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100741E4C;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A2A74(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10072CA8C);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100742448, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    type metadata accessor for REMCDDueDateDeltaAlert();
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_1007424D8;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100742508;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100742540;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_1007425AC;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A32AC(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10073017C);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1007419E4, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, &qword_10090ABC0);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100741A24;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100741A54;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100741A8C;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100741AC4;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A3AF4(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10072FB20);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100741850, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100741890;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_1007418C0;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_1007418F8;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100741930;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A433C(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10072F710);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100742680, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100740D60;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100740D90;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100740DC8;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100740E00;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A4B84(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10072EE54);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100740A90, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    type metadata accessor for REMCDSavedReminder();
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100740AD0;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100740B00;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100740B38;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100740B5C;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A53BC(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10072E63C);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1007408E8, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&unk_100910210);
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100740928;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100740958;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100740990;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_1007409C8;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A5C04(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10072DF70);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_10074058C, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    type metadata accessor for REMCDTemplate();
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_1007405CC;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_1007405FC;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100740634;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_10074066C;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A643C(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10072DA4C);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100740418, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    type metadata accessor for REMCDListSection();
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100740458;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_1007404B0;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_1007404D4;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_1007404F8;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A6C74(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10072D56C);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1007402B0, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    type metadata accessor for REMCDSmartListSection();
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_1007402F0;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_10074034C;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_100740370;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_100740394;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

unint64_t sub_1006A74AC(unint64_t result, uint64_t a2)
{
  Swift::String v3 = v2;
  unint64_t v4 = result;
  uint64_t v68 = a2;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v61) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v6 = 0;
  sub_100732B04(v4, (void (*)(id, uint64_t))sub_10072CFB4);
  uint64_t v7 = 0;
  __chkstk_darwin(v8);
  v62[2] = &v68;
  uint64_t v9 = sub_1002B1630(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1007400E0, (uint64_t)v62, v4);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1001261C0(v10);
  swift_retain();
  sub_100726860(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v65 = 0;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v67[0] = v63;
    *(_DWORD *)uint64_t v15 = 134218498;
    uint64_t v64 = 0;
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    type metadata accessor for REMCDTemplateSection();
    id v17 = [(id)swift_getObjCClassFromMetadata() description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v66 = sub_1000C51B8(v18, v20, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_10020A420(v21);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v66 = sub_1000C51B8(v22, v24, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v64;
    uint64_t v7 = v65;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v68;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v25;
  void v27[3] = v7;
  v27[4] = v6;
  v27[5] = v9;
  unsigned int v28 = v3 + 14;
  v27[6] = v26;
  swift_beginAccess();
  id v29 = (void *)v3[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[14] = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v29 = sub_10030A13C(0, v29[2] + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    id v29 = sub_10030A13C((void *)(v31 > 1), v32 + 1, 1, v29);
    *unsigned int v28 = v29;
  }
  _OWORD v29[2] = v32 + 1;
  NSArray v33 = &v29[2 * v32];
  v33[4] = sub_100740158;
  v33[5] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v68;
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  uint64_t v36[3] = v9;
  v36[4] = v35;
  Swift::String v37 = v3 + 15;
  swift_beginAccess();
  Swift::String v38 = (void *)v3[15];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v3[15] = v38;
  if ((v39 & 1) == 0)
  {
    Swift::String v38 = sub_10030A13C(0, v38[2] + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    Swift::String v38 = sub_10030A13C((void *)(v40 > 1), v41 + 1, 1, v38);
    *Swift::String v37 = v38;
  }
  v38[2] = v41 + 1;
  uint64_t v42 = &v38[2 * v41];
  void v42[4] = sub_100740188;
  v42[5] = v36;
  swift_endAccess();
  swift_release();
  uint64_t v43 = swift_allocObject();
  swift_weakInit();
  uint64_t v44 = v68;
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v43;
  v45[3] = v9;
  v45[4] = v44;
  uint64_t v46 = v3 + 16;
  swift_beginAccess();
  uint64_t v47 = (void *)v3[16];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  v3[16] = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v47 = sub_10030A13C(0, v47[2] + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  unint64_t v50 = v47[2];
  unint64_t v49 = v47[3];
  if (v50 >= v49 >> 1)
  {
    uint64_t v47 = sub_10030A13C((void *)(v49 > 1), v50 + 1, 1, v47);
    *uint64_t v46 = v47;
  }
  _DWORD v47[2] = v50 + 1;
  uint64_t v51 = &v47[2 * v50];
  v51[4] = sub_1007401AC;
  v51[5] = v45;
  swift_endAccess();
  swift_release();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  uint64_t v53 = v68;
  id v54 = (void *)swift_allocObject();
  void v54[2] = v52;
  v54[3] = v9;
  void v54[4] = v53;
  unint64_t v55 = v3 + 17;
  swift_beginAccess();
  Swift::String v56 = (void *)v3[17];
  swift_retain();
  swift_retain();
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  v3[17] = v56;
  if ((v57 & 1) == 0)
  {
    Swift::String v56 = sub_10030A13C(0, v56[2] + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  unint64_t v59 = v56[2];
  unint64_t v58 = v56[3];
  if (v59 >= v58 >> 1)
  {
    Swift::String v56 = sub_10030A13C((void *)(v58 > 1), v59 + 1, 1, v56);
    *unint64_t v55 = v56;
  }
  v56[2] = v59 + 1;
  uint64_t v60 = &v56[2 * v59];
  v60[4] = sub_1007401D0;
  v60[5] = v54;
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_1006A7CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = v6;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  if (a2 || a3)
  {
    swift_errorRetain();
    swift_willThrow();
    return swift_release();
  }
  uint64_t v36 = a4 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(a4 + 64);
  uint64_t v16 = result + 144;
  swift_bridgeObjectRetain();
  uint64_t v39 = v16;
  uint64_t result = swift_beginAccess();
  int64_t v17 = 0;
  int64_t v37 = (unint64_t)(v13 + 63) >> 6;
  Swift::String v38 = a6;
  if (!v15) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    unint64_t v23 = (uint64_t *)(*(void *)(a4 + 48) + 16 * i);
    uint64_t v25 = *v23;
    unint64_t v24 = (void *)v23[1];
    uint64_t v26 = *(void *)(*(void *)(a4 + 56) + 8 * i);
    uint64_t v27 = *(void *)v39;
    uint64_t v28 = *(void *)(*(void *)v39 + 16);
    swift_bridgeObjectRetain();
    if (!v28) {
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v29 = sub_1001806F8(v25, (uint64_t)v24);
    if ((v30 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_30:
      unint64_t v32 = self;
      _StringGuts.grow(_:)(79);
      v33._object = (void *)0x80000001007DBEF0;
      v33._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = v25;
      v34._object = v24;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v32 internalErrorWithDebugDescription:v35];

      swift_willThrow();
      swift_release();
      return swift_release();
    }
    uint64_t v31 = *(void *)(*(void *)(v27 + 56) + 8 * v29);
    swift_retain();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v38(v26, v31);
    if (v8)
    {
      swift_release();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if (v15) {
      goto LABEL_8;
    }
LABEL_9:
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v17 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v17);
    if (!v21) {
      break;
    }
LABEL_19:
    unint64_t v15 = (v21 - 1) & v21;
  }
  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v37) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21) {
    goto LABEL_18;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v37) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21) {
    goto LABEL_18;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v37)
  {
LABEL_32:
    swift_release();
    return swift_release();
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
LABEL_18:
    int64_t v17 = v22;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_19;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1006A809C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = v6;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  if (a2 || a3)
  {
    swift_errorRetain();
    swift_willThrow();
    return swift_release();
  }
  uint64_t v39 = a5;
  uint64_t v37 = a4 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(a4 + 64);
  uint64_t v17 = result + 144;
  swift_bridgeObjectRetain();
  uint64_t v41 = v17;
  uint64_t result = swift_beginAccess();
  int64_t v18 = 0;
  int64_t v38 = (unint64_t)(v14 + 63) >> 6;
  unint64_t v40 = a6;
  if (!v16) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    unint64_t v24 = (uint64_t *)(*(void *)(a4 + 48) + 16 * i);
    uint64_t v26 = *v24;
    uint64_t v25 = (void *)v24[1];
    uint64_t v27 = *(void *)(*(void *)(a4 + 56) + 8 * i);
    uint64_t v28 = *(void *)v41;
    uint64_t v29 = *(void *)(*(void *)v41 + 16);
    swift_bridgeObjectRetain();
    if (!v29) {
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v30 = sub_1001806F8(v26, (uint64_t)v25);
    if ((v31 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_30:
      Swift::String v33 = self;
      _StringGuts.grow(_:)(79);
      v34._object = (void *)0x80000001007DBEF0;
      v34._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = v26;
      v35._object = v25;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      NSString v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v33 internalErrorWithDebugDescription:v36];

      swift_willThrow();
      swift_release();
      return swift_release();
    }
    uint64_t v32 = *(void *)(*(void *)(v28 + 56) + 8 * v30);
    swift_retain();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v40(v27, v39, v32);
    if (v8)
    {
      swift_release();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if (v16) {
      goto LABEL_8;
    }
LABEL_9:
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v18 >= v38) {
      goto LABEL_32;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v18);
    if (!v22) {
      break;
    }
LABEL_19:
    unint64_t v16 = (v22 - 1) & v22;
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v38) {
    goto LABEL_32;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v23);
  if (v22) {
    goto LABEL_18;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v38) {
    goto LABEL_32;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v23);
  if (v22) {
    goto LABEL_18;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v38)
  {
LABEL_32:
    swift_release();
    return swift_release();
  }
  unint64_t v22 = *(void *)(v37 + 8 * v23);
  if (v22)
  {
LABEL_18:
    int64_t v18 = v23;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v38) {
      goto LABEL_32;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_19;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1006A8460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  if (a2 || a3)
  {
    swift_errorRetain();
    swift_willThrow();
    return swift_release();
  }
  uint64_t v35 = a4 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(a4 + 64);
  uint64_t v15 = result + 144;
  swift_bridgeObjectRetain();
  uint64_t v38 = v15;
  uint64_t result = swift_beginAccess();
  int64_t v16 = 0;
  int64_t v36 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v37 = a5;
  if (!v14) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    unint64_t v22 = (uint64_t *)(*(void *)(a4 + 48) + 16 * i);
    uint64_t v23 = *v22;
    unint64_t v24 = (void *)v22[1];
    uint64_t v25 = *(void **)(*(void *)(a4 + 56) + 8 * i);
    uint64_t v26 = *(void *)v38;
    uint64_t v27 = *(void *)(*(void *)v38 + 16);
    swift_bridgeObjectRetain();
    if (!v27) {
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v28 = sub_1001806F8(v23, (uint64_t)v24);
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_30:
      char v31 = self;
      _StringGuts.grow(_:)(79);
      v32._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
      v32._object = (void *)0x80000001007DBEF0;
      String.append(_:)(v32);
      v33._uint64_t countAndFlagsBits = v23;
      v33._object = v24;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v31 internalErrorWithDebugDescription:v34];

      swift_willThrow();
      swift_release();
      return swift_release();
    }
    unint64_t v30 = *(void **)(*(void *)(v26 + 56) + 8 * v28);
    swift_retain();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_1006CF9F8(v25, v37, v30, (uint64_t (*)(id *))sub_10074269C, (void (*)(void))type metadata accessor for REMCDTemplateSection, (void (*)(void))type metadata accessor for REMCDTemplateSection, 0xD000000000000014, (void *)0x80000001007DBF90, (uint64_t (*)(void *))sub_1002EFD50, (uint64_t (*)(id, uint64_t))sub_10072CE04, &off_1008B2C58, (void (*)(void))type metadata accessor for REMCDTemplateSection, (uint64_t (*)(void))sub_10030703C, (void (*)(id, char *, uint64_t))sub_100481790, (unint64_t)&type metadata for REMTemplateSectionStorageCDIngestor.ValueKey, (uint64_t)sub_100715BE8);
    if (v6)
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_32:
      swift_release();
      return swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if (v14) {
      goto LABEL_8;
    }
LABEL_9:
    if (__OFADD__(v16++, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v16 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v16);
    if (!v20) {
      break;
    }
LABEL_19:
    unint64_t v14 = (v20 - 1) & v20;
  }
  int64_t v21 = v16 + 1;
  if (v16 + 1 >= v36) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20) {
    goto LABEL_18;
  }
  int64_t v21 = v16 + 2;
  if (v16 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20) {
    goto LABEL_18;
  }
  int64_t v21 = v16 + 3;
  if (v16 + 3 >= v36) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20)
  {
LABEL_18:
    int64_t v16 = v21;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_19;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}