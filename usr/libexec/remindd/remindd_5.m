uint64_t type metadata accessor for REMListSectionStorageCDIngestor()
{
  return self;
}

_UNKNOWN **sub_10035A3A8()
{
  return &off_1008C2768;
}

_UNKNOWN **sub_10035A3B4()
{
  return &off_1008C2738;
}

unint64_t sub_10035A3C0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B28F0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

void *sub_10035A40C(id a1, char a2)
{
  if (a2)
  {
    id v4 = [a1 parentID];
    v5 = v4;
    unint64_t v3 = _swiftEmptyArrayStorage;
    if (v4)
    {
      id v6 = v4;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      unint64_t v3 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    unint64_t v3 = (void *)swift_allocObject();
    *((_OWORD *)v3 + 1) = xmmword_10077A530;
    v3[4] = [a1 accountID];
    specialized Array._endMutation()();
  }
  return v3;
}

void sub_10035A528(void *a1, void *a2, uint64_t a3)
{
  v8 = (void *)*v3;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v76 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v12 - 8);
  v78 = ((char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v81 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v81 - 8);
  *(void *)&double v15 = __chkstk_darwin(v81).n128_u64[0];
  v80 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v82 = [a2 createResolutionTokenMapIfNecessary:v15];
  id v17 = [a1 resolutionTokenMap];
  if (v17)
  {
    uint64_t v77 = v9;
    v18 = v17;
    id v19 = sub_100480A70(v17, a3);
    uint64_t v20 = *(void *)(a3 + 16);
    if (v20)
    {
      id v72 = v18;
      uint64_t v73 = v4;
      v21 = (void (**)(char *, char *, uint64_t))(v10 + 32);
      v74 = (unsigned int (**)(NSObject *, uint64_t, uint64_t))(v10 + 48);
      v75 = (void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v70 = (void (**)(NSObject *, uint64_t))(v10 + 8);
      v79 = (void (**)(char *, uint64_t))(v14 + 8);
      swift_bridgeObjectRetain();
      uint64_t v22 = 0;
      do
      {
        uint64_t v27 = *(unsigned __int8 *)(a3 + v22++ + 32);
        switch(v27)
        {
          case 1:
            sub_10047E70C(1);
            NSString v28 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v29 = [v82 mergeWithMap:v19 forKey:v28];

            if (v29) {
              [a2 setMinimumSupportedVersion:[a1 minimumSupportedVersion]];
            }
            break;
          case 2:
            sub_10047E70C(2);
            NSString v30 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v31 = [v82 mergeWithMap:v19 forKey:v30];

            if (v31)
            {
              id isa = [a1 creationDate];
              if (isa)
              {
                v33 = v76;
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                v34 = v78;
                v35 = v33;
                uint64_t v36 = v77;
                (*v21)((char *)v78, v35, v77);
                (*v75)(v34, 0, 1, v36);
                if ((*v74)(v34, 1, v36) == 1)
                {
                  id isa = 0;
                }
                else
                {
                  v71 = v21;
                  uint64_t v41 = a3;
                  v42 = a2;
                  v43 = a1;
                  v44 = v34;
                  id isa = Date._bridgeToObjectiveC()().super.isa;
                  v45 = v44;
                  a1 = v43;
                  a2 = v42;
                  a3 = v41;
                  v21 = v71;
                  (*v70)(v45, v36);
                }
              }
              else
              {
                (*v75)(v78, 1, 1, v77);
              }
              [a2 setCreationDate:isa];
              goto LABEL_22;
            }
            break;
          case 3:
            sub_10047E70C(3);
            NSString v37 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v38 = [v82 mergeWithMap:v19 forKey:v37];

            if (v38)
            {
              id isa = [a1 displayName];
              if (!isa)
              {
                static String._unconditionallyBridgeFromObjectiveC(_:)();
                id isa = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
              }
              [a2 setDisplayName:isa];
              goto LABEL_22;
            }
            break;
          case 4:
            sub_10047E70C(4);
            NSString v39 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v40 = [v82 mergeWithMap:v19 forKey:v39];

            if (v40)
            {
              id isa = [a1 canonicalName];
              [a2 setCanonicalName:isa];
LABEL_22:
            }
            break;
          default:
            id v23 = [a1 objectID];
            id v24 = [v23 uuid];

            v25 = v80;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            Class v26 = UUID._bridgeToObjectiveC()().super.isa;
            (*v79)(v25, v81);
            [a2 setIdentifier:v26];

            break;
        }
      }
      while (v20 != v22);

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  else
  {
    if (qword_100907318 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_10008E2DC(v46, (uint64_t)qword_100915168);
    swift_bridgeObjectRetain_n();
    id v47 = a1;
    v48 = Logger.logObject.getter();
    int v49 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      LODWORD(v80) = v49;
      uint64_t v50 = swift_slowAlloc();
      v51 = (void (**)(char *, uint64_t))swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      uint64_t v83 = v81;
      *(_DWORD *)uint64_t v50 = 136315650;
      v84 = v8;
      swift_getMetatypeMetadata();
      uint64_t v52 = String.init<A>(describing:)();
      v84 = (void *)sub_1000C51B8(v52, v53, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2114;
      v54 = [v47 objectID];
      v84 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v79 = v51;
      *v51 = (void (*)(char *, uint64_t))v54;

      *(_WORD *)(v50 + 22) = 2082;
      int64_t v55 = *(void *)(a3 + 16);
      if (v55)
      {
        v76 = (char *)&v85;
        uint64_t v77 = v50;
        v78 = v48;
        v84 = _swiftEmptyArrayStorage;
        sub_1001DE058(0, v55, 0);
        v56 = v84;
        v57 = (unsigned __int8 *)(a3 + 32);
        do
        {
          int v58 = *v57++;
          unint64_t v59 = 0xE800000000000000;
          unint64_t v60 = 0x44497463656A626FLL;
          switch(v58)
          {
            case 1:
              unint64_t v60 = 0xD000000000000017;
              unint64_t v59 = 0x80000001007C63B0;
              break;
            case 2:
              unint64_t v59 = 0xEC00000065746144;
              unint64_t v60 = 0x6E6F697461657263;
              break;
            case 3:
              unint64_t v59 = 0xEB00000000656D61;
              unint64_t v60 = 0x4E79616C70736964;
              break;
            case 4:
              unint64_t v59 = 0xED0000656D614E6CLL;
              unint64_t v60 = 0x6163696E6F6E6163;
              break;
            default:
              break;
          }
          v84 = v56;
          unint64_t v62 = v56[2];
          unint64_t v61 = v56[3];
          if (v62 >= v61 >> 1)
          {
            sub_1001DE058(v61 > 1, v62 + 1, 1);
            v56 = v84;
          }
          v56[2] = v62 + 1;
          v63 = &v56[2 * v62];
          v63[4] = v60;
          v63[5] = v59;
          --v55;
        }
        while (v55);
        uint64_t v50 = v77;
        v48 = v78;
      }
      uint64_t v64 = Array.description.getter();
      unint64_t v66 = v65;
      swift_bridgeObjectRelease();
      v84 = (void *)sub_1000C51B8(v64, v66, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v80, "%s: merge(storage:into cdSection:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v50, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v67 = self;
    sub_10035B950();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v69 = String._bridgeToObjectiveC()();
    [v67 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v69];

    swift_willThrow();
  }
}

void sub_10035AF8C(id a1, id a2, char a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v11 = *v4;
    id v12 = [a2 createResolutionTokenMapIfNecessary];
    id v13 = [a1 resolutionTokenMap];
    if (v13)
    {
      uint64_t v14 = v13;
      sub_100094134(&qword_100913D28);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      *(unsigned char *)(inited + 32) = 1;
      id v16 = sub_100480CCC(v14, inited);
      swift_setDeallocating();
      id v17 = [a1 listID];
      sub_10047EB88(1);
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned int v19 = [v12 mergeWithMap:v16 forKey:v18];

      if (v19)
      {
        if (v17)
        {
          id v20 = v17;
          sub_10047739C(1, v20, a4);
          if (v5)
          {

            return;
          }
          v51 = v21;
        }
        else
        {
          v51 = 0;
        }
        if (qword_100907318 != -1) {
          swift_once();
        }
        uint64_t v52 = type metadata accessor for Logger();
        sub_10008E2DC(v52, (uint64_t)qword_100915168);
        os_log_t log = v51;
        unint64_t v53 = v51;
        id v54 = a2;
        int64_t v55 = v53;
        id v56 = v54;
        v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v57, v58))
        {
          os_log_type_t v69 = v58;
          v70 = v57;
          v68 = v55;
          id v76 = v12;
          uint64_t v59 = swift_slowAlloc();
          uint64_t v78 = swift_slowAlloc();
          *(_DWORD *)uint64_t v59 = 136446466;
          unint64_t v60 = v56;
          id v61 = [v56 remObjectID];
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v62 = Optional.descriptionOrNil.getter();
          unint64_t v64 = v63;

          id v77 = (id)sub_1000C51B8(v62, v64, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(void *)type = v60;
          swift_bridgeObjectRelease();
          *(_WORD *)(v59 + 12) = 2082;
          if (log)
          {
            int64_t v55 = v68;
            id v77 = [v68 remObjectID];
            uint64_t v65 = Optional.descriptionOrNil.getter();
            unint64_t v67 = v66;
          }
          else
          {
            unint64_t v67 = 0xE90000000000003ELL;
            uint64_t v65 = 0x7473696C206F6E3CLL;
            int64_t v55 = v68;
          }
          id v77 = (id)sub_1000C51B8(v65, v67, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v70, v69, "Updating cdListSection.list {cdListSection: %{public}s, list: %{public}s}", (uint8_t *)v59, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          id v12 = v76;
          id v56 = *(id *)type;
        }
        else
        {
        }
        [v56 setList:v55];
      }
    }
    else
    {
      if (qword_100907318 != -1) {
        swift_once();
      }
      v75 = v12;
      uint64_t v39 = type metadata accessor for Logger();
      sub_10008E2DC(v39, (uint64_t)qword_100915168);
      id v40 = a1;
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc();
        v44 = (void *)swift_slowAlloc();
        id v77 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 136315650;
        uint64_t v78 = v11;
        swift_getMetatypeMetadata();
        uint64_t v45 = String.init<A>(describing:)();
        uint64_t v78 = sub_1000C51B8(v45, v46, (uint64_t *)&v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 2114;
        id v47 = [v40 objectID];
        uint64_t v78 = (uint64_t)v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v44 = v47;

        *(_WORD *)(v43 + 22) = 2082;
        uint64_t v78 = sub_1000C51B8(0x4449746E65726170, 0xE800000000000000, (uint64_t *)&v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s: establishRelationship(onStorage:into cdListSection:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v43, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      v48 = self;
      sub_10035B950();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v50 = String._bridgeToObjectiveC()();
      [v48 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v50];

      swift_willThrow();
    }
  }
  else
  {
    id v9 = [a1 accountID];
    sub_10047736C(0, v9, a4);
    if (v5)
    {
    }
    else
    {
      uint64_t v22 = v10;
      if (qword_100907318 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E2DC(v23, (uint64_t)qword_100915168);
      id v24 = a2;
      id v25 = v22;
      id v26 = v24;
      id v27 = v25;
      NSString v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446466;
        id v31 = [v26 remObjectID];
        sub_100094134((uint64_t *)&unk_100914BC0);
        loga = v28;
        uint64_t v32 = Optional.descriptionOrNil.getter();
        os_log_type_t typea = v29;
        unint64_t v34 = v33;

        sub_1000C51B8(v32, v34, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2082;
        id v35 = [v27 remObjectID];
        uint64_t v36 = Optional.descriptionOrNil.getter();
        unint64_t v38 = v37;

        id v77 = (id)sub_1000C51B8(v36, v38, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, loga, typea, "Updating cdListSection.account {cdListSection: %{public}s, account: %{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v26 setAccount:v27];
    }
  }
}

unint64_t sub_10035B950()
{
  unint64_t result = qword_10090AD98;
  if (!qword_10090AD98)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090AD98);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for REMListSectionStorageCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10035BA5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMListSectionStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMListSectionStorageCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMListSectionStorageCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10035BB60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMListSectionStorageCDIngestor.ValueKey()
{
  return &type metadata for REMListSectionStorageCDIngestor.ValueKey;
}

uint64_t sub_10035BB98()
{
  return sub_1000B2138(&qword_100915338, &qword_100915340);
}

unint64_t sub_10035BBC4()
{
  unint64_t result = qword_100915348;
  if (!qword_100915348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915348);
  }
  return result;
}

uint64_t sub_10035BC18()
{
  return sub_1000B2138(&qword_100915350, &qword_100915358);
}

unint64_t sub_10035BC44()
{
  unint64_t result = qword_100915360;
  if (!qword_100915360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915360);
  }
  return result;
}

uint64_t sub_10035BC98(uint64_t a1)
{
  Swift::String v2 = v1;
  uint64_t v32 = type metadata accessor for RDXPCEventStream.Alarm(0);
  __chkstk_darwin(v32);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (uint8_t **)((char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v13 = (void *)v2[2];
  *id v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v15)
  {
    if (qword_100907330 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger();
  sub_10008E2DC(v16, (uint64_t)qword_100915368);
  id v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v31 = a1;
  uint64_t v18 = v33;
  v17(v8, a1, v33);
  unsigned int v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    os_log_type_t v29 = v17;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v35 = swift_slowAlloc();
    uint64_t v30 = v2;
    *(_DWORD *)uint64_t v22 = 136446210;
    NSString v28 = v22 + 4;
    uint64_t v23 = Date.description.getter();
    uint64_t v34 = sub_1000C51B8(v23, v24, &v35);
    Swift::String v2 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v33);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Adding XPC time event {date: %{public}s}", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v18 = v33;
    swift_slowDealloc();
    id v17 = v29;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
  }

  uint64_t v26 = v2[3];
  uint64_t v25 = v2[4];
  v17(&v5[*(int *)(v32 + 24)], v31, v18);
  *(void *)uint64_t v5 = v26;
  *((void *)v5 + 1) = v25;
  v5[16] = 1;
  swift_bridgeObjectRetain();
  sub_1001EA440((uint64_t)v5);
  return sub_10035D718((uint64_t)v5, type metadata accessor for RDXPCEventStream.Alarm);
}

uint64_t sub_10035C08C(uint64_t a1, uint64_t a2)
{
  sub_10035D194(a1, a2);

  return sub_100096314(a1);
}

uint64_t sub_10035C0D4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100915368);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100915368);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10035C19C(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int sub_10035C1CC()
{
  return Hasher._finalize()();
}

uint64_t sub_10035C228()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10035C280()
{
  return Hasher._finalize()();
}

uint64_t sub_10035C2D8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v1 - 8);
  uint64_t v27 = v1;
  __chkstk_darwin(v1);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_100915468);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RDXPCEventStream.Token(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  id v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = v0 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken;
  swift_beginAccess();
  sub_10035D3A8(v17, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return sub_10035D410((uint64_t)v9);
  }
  sub_10035D470((uint64_t)v9, (uint64_t)v16);
  uint64_t v19 = *(void *)(v0 + 40);
  sub_10035D4D4((uint64_t)v16, (uint64_t)v13);
  unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = swift_allocObject();
  sub_10035D470((uint64_t)v13, v21 + v20);
  *(void *)(v21 + ((v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)) = v19;
  aBlock[4] = sub_10035D62C;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C2988;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  NSString v28 = _swiftEmptyArrayStorage;
  sub_10035D6D0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  uint64_t v23 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v3, v23);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v25);
  sub_10035D718((uint64_t)v16, type metadata accessor for RDXPCEventStream.Token);
  return swift_release();
}

uint64_t sub_10035C70C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v13 = (void *)v4[2];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t, __n128))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v15)
  {
    if (qword_100907330 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger();
  sub_10008E2DC(v16, (uint64_t)qword_100915368);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Registering Time Event Handler", v19, 2u);
    swift_slowDealloc();
  }

  uint64_t v20 = v4[3];
  uint64_t v21 = v4[4];
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = v14;
  v22[3] = a1;
  v22[4] = a2;
  id v23 = v14;
  swift_retain();
  sub_1001E9F74(v20, v21, (uint64_t)sub_10035D39C, (uint64_t)v22, a3);
  return swift_release();
}

uint64_t sub_10035C950()
{
  sub_10035C2D8();

  swift_bridgeObjectRelease();
  swift_release();
  sub_10035D410(v0 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken);
  sub_100096314(*(void *)(v0 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler));

  return swift_deallocClassInstance();
}

uint64_t sub_10035C9E4()
{
  return type metadata accessor for RDXPCActivityTimeEventStream();
}

uint64_t type metadata accessor for RDXPCActivityTimeEventStream()
{
  uint64_t result = qword_1009153B0;
  if (!qword_1009153B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10035CA38()
{
  sub_10035CAF8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10035CAF8()
{
  if (!qword_1009153C0)
  {
    type metadata accessor for RDXPCEventStream.Token(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1009153C0);
    }
  }
}

uint64_t getEnumTagSinglePayload for RDXPCActivityTimeEventStream.Name(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDXPCActivityTimeEventStream.Name(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDXPCActivityTimeEventStream.Name()
{
  return &type metadata for RDXPCActivityTimeEventStream.Name;
}

unint64_t sub_10035CBE8()
{
  unint64_t result = qword_100915460;
  if (!qword_100915460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915460);
  }
  return result;
}

uint64_t sub_10035CC3C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v12 = a4;
  (*(void (**)(void *, void, uint64_t, __n128))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  id v13 = a4;
  LOBYTE(a4) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (a4)
  {
    xpc_copy_description(a3);
    if (qword_100907330 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_100915368);
  char v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v18 = String.init(cString:)();
    uint64_t v22 = sub_1000C51B8(v18, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "XPCActivityTimeEventStream received event {xpc_event: %s}", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v20 = swift_slowDealloc();
  return a5(v20);
}

uint64_t sub_10035CEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDXPCEventStream.Token(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907330 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_100915368);
  sub_10035D4D4(a1, (uint64_t)v6);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v15 = a2;
    __n128 v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)__n128 v10 = 136315138;
    uint64_t v16 = 0;
    unint64_t v17 = 0xE000000000000000;
    uint64_t v18 = v11;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    uint64_t v16 = 0xD000000000000017;
    unint64_t v17 = 0x80000001007CEA00;
    type metadata accessor for UUID();
    sub_10035D6D0((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 62;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    uint64_t v16 = sub_1000C51B8(v16, v17, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10035D718((uint64_t)v6, type metadata accessor for RDXPCEventStream.Token);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unregistering xpcEventStreamToken {xpcEventStreamToken: %s}", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10035D718((uint64_t)v6, type metadata accessor for RDXPCEventStream.Token);
  }

  return sub_1001EA280(a1);
}

uint64_t sub_10035D194(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134(&qword_100915468);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler);
  uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler);
  uint64_t *v8 = a1;
  v8[1] = a2;
  sub_1000E4F30(a1);
  sub_100096314(v9);
  uint64_t result = sub_10035C2D8();
  uint64_t v11 = *v8;
  if (*v8)
  {
    uint64_t v12 = v8[1];
    swift_retain();
    sub_10035C70C(v11, v12, (uint64_t)v7);
    sub_100096314(v11);
    uint64_t v13 = type metadata accessor for RDXPCEventStream.Token(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 0, 1, v13);
    uint64_t v14 = v2 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken;
    swift_beginAccess();
    sub_10035D2F4((uint64_t)v7, v14);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_10035D2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100915468);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10035D35C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10035D39C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10035CC3C(a1, a2, a3, *(void **)(v3 + 16), *(uint64_t (**)(uint64_t))(v3 + 24));
}

uint64_t sub_10035D3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100915468);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10035D410(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100915468);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10035D470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDXPCEventStream.Token(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10035D4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDXPCEventStream.Token(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10035D538()
{
  uint64_t v1 = *(void *)(type metadata accessor for RDXPCEventStream.Token(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_10035D62C()
{
  uint64_t v1 = *(void *)(type metadata accessor for RDXPCEventStream.Token(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10035CEC8(v0 + v2, v3);
}

uint64_t sub_10035D6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10035D6C8()
{
  return swift_release();
}

uint64_t sub_10035D6D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10035D718(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10035D778(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_10009A1A0((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1002C4420(v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for CodingUserInfoKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_1000966BC(a1, &qword_100908190);
    sub_10030C324(a2, v9);
    uint64_t v7 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return sub_1000966BC((uint64_t)v9, &qword_100908190);
  }
}

uint64_t sub_10035D898(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(a1, 1, v9, v11) == 1)
  {
    sub_1000966BC(a1, (uint64_t *)&unk_100909E50);
    sub_10030C654(a2, (uint64_t)v8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    return sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909E50);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1002C4C4C((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
}

uint64_t sub_10035DA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10009A1A0((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1002C54C8(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000966BC(a1, &qword_100908190);
    sub_10030C81C(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_1000966BC((uint64_t)v9, &qword_100908190);
  }
}

uint64_t sub_10035DB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000967D4((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1002C5D68(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000966BC(a1, &qword_100912F58);
    sub_10030CB04(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_1000966BC((uint64_t)v9, &qword_100912F58);
  }
}

uint64_t sub_10035DC38(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000967D4((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1002C6EF0(v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_1000966BC(a1, &qword_100911688);
    sub_10030CE40(a2, (uint64_t)v9);
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return sub_1000966BC((uint64_t)v9, &qword_100911688);
  }
}

uint64_t sub_10035DD58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909EA0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RDSavedReminder();
  __n128 v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, __n128))(v13 + 48))(a1, 1, v10) == 1)
  {
    sub_1000966BC(a1, (uint64_t *)&unk_100909EA0);
    sub_10030D06C(a2, (uint64_t)v8);
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a2, v14);
    return sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909EA0);
  }
  else
  {
    sub_1000D56F8(a1, (uint64_t)v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1002C72CC((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v19;
    swift_bridgeObjectRelease();
    uint64_t v17 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
  }
}

uint64_t sub_10035DF64()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100915470);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100915470);
  if (qword_100907828 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424C0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10035E02C(void *a1)
{
  id v3 = v2;
  uint64_t v4 = v1;
  v205 = *v1;
  os_log_t v195 = (os_log_t)type metadata accessor for RDPublicTemplate();
  __chkstk_darwin(v195);
  v198 = (uint64_t *)((char *)&v182 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v202 = type metadata accessor for UUID();
  v201 = *(void (***)(void, void))(v202 - 8);
  __chkstk_darwin(v202);
  v200 = ((char *)&v182 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v191 = (char *)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v182 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v182 - v15;
  __chkstk_darwin(v17);
  v192 = (char *)&v182 - v18;
  __chkstk_darwin(v19);
  v196 = (char *)&v182 - v20;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v182 - v22;
  if (qword_100907338 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = sub_10008E2DC(v24, (uint64_t)qword_100915470);
  swift_retain_n();
  v197 = (void *)v25;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  LODWORD(v199) = v27;
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v203 = v9;
  uint64_t v204 = v8;
  v190 = v13;
  v189 = v16;
  if (v28)
  {
    uint64_t v29 = swift_slowAlloc();
    v185 = (void *)swift_slowAlloc();
    v187 = (void *)swift_slowAlloc();
    v209 = v187;
    *(_DWORD *)uint64_t v29 = 136446978;
    uint64_t v207 = (uint64_t)v205;
    swift_getMetatypeMetadata();
    uint64_t v30 = String.init<A>(describing:)();
    id v188 = v2;
    uint64_t v207 = sub_1000C51B8(v30, v31, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v186 = v26;
    *(_WORD *)(v29 + 12) = 2114;
    uint64_t v32 = v4;
    uint64_t v33 = (void *)v4[3];
    uint64_t v207 = (uint64_t)v33;
    id v34 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v35 = v185;
    void *v185 = v33;
    swift_release_n();
    *(_WORD *)(v29 + 22) = 2114;
    uint64_t v36 = (void *)v32[4];
    uint64_t v207 = (uint64_t)v36;
    id v37 = v36;
    id v3 = v188;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v35[1] = v36;
    uint64_t v4 = v32;
    swift_release_n();
    *(_WORD *)(v29 + 32) = 2048;
    swift_release();
    uint64_t v207 = 50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    unint64_t v38 = v186;
    _os_log_impl((void *)&_mh_execute_header, v186, (os_log_type_t)v199, "%{public}s: Start execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld}", (uint8_t *)v29, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v39 = v23;
  Date.init()();
  uint64_t v41 = (void *)v4[3];
  os_log_type_t v42 = (objc_class *)sub_1003CF700();
  id v43 = [v41 uuid];
  v44 = v200;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v45 = sub_1003CF89C(v44, (uint64_t)a1, v42);
  if (v3)
  {
    ((void (**)(NSObject *, uint64_t))v201)[1](v44, v202);
    swift_bridgeObjectRelease();
    unint64_t v46 = 0;
    uint64_t v49 = v204;
    (*(void (**)(char *, uint64_t))(v203 + 8))(v39, v49);
LABEL_9:

    return;
  }
  id v47 = (void *)v45;
  id v199 = v41;
  id v188 = a1;
  ((void (**)(NSObject *, uint64_t))v201)[1](v44, v202);
  swift_bridgeObjectRelease();
  unint64_t v46 = (uint64_t *)[v47 objectID];
  v48 = v198;
  sub_10062D57C(v198);
  uint64_t v202 = 0;

  NSString v50 = (_OWORD *)((char *)v48 + SLODWORD(v195[5].isa));
  long long v51 = v50[1];
  v210[0] = *v50;
  v210[1] = v51;
  long long v52 = v50[3];
  v211[0] = v50[2];
  v211[1] = v52;
  sub_1003618DC((uint64_t)v210);
  sub_100362A78((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for RDPublicTemplate);
  uint64_t v54 = v203;
  uint64_t v53 = v204;
  int64_t v55 = *(void (**)(void, void, void))(v203 + 16);
  id v56 = v196;
  uint64_t v57 = (uint64_t)v39;
  os_log_t v195 = (os_log_t)(v203 + 16);
  v187 = v55;
  v55(v196, v39, v204);
  swift_retain();
  sub_1003618DC((uint64_t)v210);
  swift_retain();
  sub_1003618DC((uint64_t)v210);
  os_log_type_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.default.getter();
  int v60 = v59;
  BOOL v61 = os_log_type_enabled(v58, v59);
  v198 = v46;
  uint64_t v193 = v57;
  v194 = v4;
  if (v61)
  {
    uint64_t v62 = swift_slowAlloc();
    unint64_t v63 = (void *)swift_slowAlloc();
    v185 = v63;
    v201 = (void (**)(void, void))swift_slowAlloc();
    v209 = v201;
    *(_DWORD *)uint64_t v62 = 136446978;
    v200 = v58;
    uint64_t v207 = (uint64_t)v205;
    swift_getMetatypeMetadata();
    uint64_t v64 = String.init<A>(describing:)();
    uint64_t v65 = v54;
    LODWORD(v186) = v60;
    uint64_t v207 = sub_1000C51B8(v64, v66, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v62 + 12) = 2114;
    unint64_t v67 = v56;
    id v68 = v199;
    uint64_t v207 = (uint64_t)v199;
    id v69 = v199;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v63 = v68;
    swift_release_n();
    *(_WORD *)(v62 + 22) = 2048;
    uint64_t v70 = *(void *)(*(void *)&v210[0] + 16);
    sub_100361968((uint64_t)v210);
    uint64_t v207 = v70;
    uint64_t v71 = v204;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100361968((uint64_t)v210);
    *(_WORD *)(v62 + 32) = 2048;
    id v72 = v192;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v74 = v73;
    v75 = *(void (**)(char *, uint64_t))(v65 + 8);
    v75(v72, v71);
    uint64_t v207 = v74;
    uint64_t v57 = v193;
    unint64_t v46 = v198;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v196 = (char *)v75;
    v75(v67, v71);
    id v76 = v200;
    _os_log_impl((void *)&_mh_execute_header, v200, (os_log_type_t)v186, "%{public}s: Fetched saved reminders in public template {templateObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}", (uint8_t *)v62, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v194;
    swift_slowDealloc();
  }
  else
  {
    sub_100361968((uint64_t)v210);
    swift_release_n();
    sub_100361968((uint64_t)v210);
    v196 = *(char **)(v54 + 8);
    ((void (*)(char *, uint64_t))v196)(v56, v53);
  }
  uint64_t v78 = (void *)v4[4];
  id v77 = (void *)v4[5];
  uint64_t v207 = 0;
  v79 = [v77 fetchListWithObjectID:v78 error:&v207];
  id v80 = (id)v207;
  if (!v79)
  {
    id v91 = (id)v207;
    sub_100361968((uint64_t)v210);
    _convertNSErrorToError(_:)();

    swift_willThrow();
    ((void (*)(uint64_t, uint64_t))v196)(v57, v204);
    goto LABEL_9;
  }
  uint64_t v81 = v79;
  v185 = v78;
  id v82 = objc_allocWithZone((Class)REMSaveRequest);
  id v83 = v80;
  id v84 = [v82 initWithStore:v77];
  uint64_t v85 = (void *)sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v207 = (uint64_t)v85;
  v201 = (void (**)(void, void))v84;
  v186 = [v84 updateList:v81];
  id v86 = [v186 sectionsContextChangeItem];
  if (v86)
  {
    v87 = v86;
    sub_100096408((uint64_t)v211, (uint64_t)v213, &qword_100915548);
    sub_100096408((uint64_t)v213, (uint64_t)&v214, &qword_100915548);
    uint64_t v88 = v214;
    if (v214
      && (sub_100096408((uint64_t)v211 + 8, (uint64_t)v212, &qword_100915550),
          sub_100096408((uint64_t)v212, (uint64_t)&v215, &qword_100915550),
          (uint64_t v89 = v215) != 0))
    {
      sub_1000F5C74((uint64_t)v213);
      sub_1000F5C74((uint64_t)v212);
      v90 = (void *)sub_100361F38(v88, v89, v201, v87);

      sub_1000F5C48((uint64_t)v213);
      sub_1000F5C48((uint64_t)v212);
      swift_bridgeObjectRelease();
      uint64_t v207 = (uint64_t)v90;
      uint64_t v85 = v90;
    }
    else
    {
    }
  }
  v92 = (void *)v85[2];
  if (!v92 || *(void *)(*(void *)&v210[0] + 16))
  {
    char v93 = 1;
    goto LABEL_23;
  }
  v209 = 0;
  v130 = v201;
  unsigned int v131 = [v201 saveSynchronouslyWithError:&v209];
  v132 = v209;
  if (v131)
  {
    v133 = v189;
    uint64_t v134 = v204;
    ((void (*)(void *, uint64_t, uint64_t))v187)(v189, v57, v204);
    swift_retain_n();
    id v135 = v132;
    v136 = Logger.logObject.getter();
    os_log_type_t v137 = static os_log_type_t.default.getter();
    int v138 = v137;
    if (os_log_type_enabled(v136, v137))
    {
      uint64_t v139 = swift_slowAlloc();
      v140 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v139 = 134349826;
      v209 = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v139 + 12) = 2114;
      int v183 = v138;
      os_log_t v184 = v136;
      v141 = v81;
      id v142 = v199;
      v209 = v199;
      id v143 = v199;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v140 = v142;
      v182 = v140;
      uint64_t v81 = v141;
      swift_release_n();
      *(_WORD *)(v139 + 22) = 2114;
      uint64_t v144 = v134;
      v145 = v185;
      v209 = v185;
      v146 = v185;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v140[1] = v145;
      swift_release_n();
      *(_WORD *)(v139 + 32) = 2048;
      v147 = v192;
      Date.init()();
      v148 = v189;
      Date.timeIntervalSince(_:)();
      v150 = v149;
      v151 = v147;
      v152 = (void (*)(void *, uint64_t))v196;
      ((void (*)(char *, uint64_t))v196)(v151, v144);
      v209 = v150;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v153 = v144;
      v136 = v184;
      v152(v148, v153);
      _os_log_impl((void *)&_mh_execute_header, v136, (os_log_type_t)v183, "RDTemplateOperationCopyRemindersFromPublicTemplateToREMList: Copied %{public}ld sections to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v139, 0x2Au);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      ((void (*)(void *, uint64_t))v196)(v133, v134);
    }

    char v93 = 0;
LABEL_23:
    v209 = *(void **)&v210[0];
    sub_100094134(&qword_10090DC48);
    sub_1003619F0();
    uint64_t v94 = BidirectionalCollection<>.slices(by:)();
    v209 = 0;
    uint64_t v95 = *(void *)(v94 + 16);
    v200 = v81;
    v189 = (void *)v94;
    if (v95)
    {
      uint64_t v96 = 0;
      v97 = (unint64_t *)(v94 + 56);
      while (1)
      {
        uint64_t v98 = *(v97 - 1);
        unint64_t v99 = *v97;
        uint64_t v100 = *(v97 - 3);
        unint64_t v101 = *(v97 - 2);
        swift_unknownObjectRetain();
        unint64_t v181 = v99;
        v103 = v200;
        uint64_t v104 = v202;
        sub_10035F908(v93, v96, v201, (uint64_t)v194, (uint64_t)v200, v100, v101, v98, v181, (uint64_t)v210, &v209, &v207, v193, v205);
        if (v104) {
          break;
        }
        uint64_t v202 = 0;
        ++v96;
        swift_unknownObjectRelease();
        v97 += 4;
        if (v95 == v96) {
          goto LABEL_27;
        }
      }
      swift_bridgeObjectRelease();
      sub_100361968((uint64_t)v210);

      swift_unknownObjectRelease();
      ((void (*)(uint64_t, uint64_t))v196)(v193, v204);

      goto LABEL_46;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    sub_100361968((uint64_t)v210);
    uint64_t v105 = v204;
    unint64_t v46 = v198;
    if (!v198) {
      goto LABEL_42;
    }
    id v208 = 0;
    v106 = v198;
    id v107 = v188;
    id v108 = [v188 existingObjectWithID:v106 error:&v208];
    uint64_t v109 = v193;
    if (v108)
    {
      v110 = v108;
      id v111 = v208;
      [v107 deleteObject:v110];
      id v208 = 0;
      unsigned int v112 = [v107 save:&v208];
      v113 = v201;
      if (v112)
      {
        id v114 = v208;
        [v107 reset];
        v115 = v190;
        ((void (*)(char *, uint64_t, uint64_t))v187)(v190, v109, v105);
        swift_retain_n();
        v116 = Logger.logObject.getter();
        os_log_type_t v117 = static os_log_type_t.default.getter();
        int v118 = v117;
        if (os_log_type_enabled(v116, v117))
        {
          uint64_t v119 = swift_slowAlloc();
          v189 = (void *)swift_slowAlloc();
          id v188 = (id)swift_slowAlloc();
          id v208 = v188;
          *(_DWORD *)uint64_t v119 = 136446722;
          os_log_t v184 = v116;
          uint64_t v120 = sub_1000D82B8();
          int v183 = v118;
          uint64_t v206 = sub_1000C51B8(v120, v121, (uint64_t *)&v208);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v119 + 12) = 2114;
          id v122 = v199;
          uint64_t v206 = (uint64_t)v199;
          id v123 = v199;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v189 = v122;
          swift_release_n();
          *(_WORD *)(v119 + 22) = 2048;
          v124 = v192;
          Date.init()();
          v125 = v190;
          Date.timeIntervalSince(_:)();
          uint64_t v127 = v126;
          v128 = v124;
          v129 = (void (*)(char *, uint64_t))v196;
          ((void (*)(char *, uint64_t))v196)(v128, v105);
          uint64_t v206 = v127;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v129(v125, v105);
          v116 = v184;
          _os_log_impl((void *)&_mh_execute_header, v184, (os_log_type_t)v183, "%{public}s: Deleted REMCDPublicTemplate in Core Data store {templateObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v119, 0x20u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
          ((void (*)(char *, uint64_t))v196)(v115, v105);
        }

        unint64_t v46 = v198;
LABEL_42:
        v157 = v191;
        uint64_t v158 = v193;
        ((void (*)(char *, uint64_t, uint64_t))v187)(v191, v193, v105);
        swift_retain_n();
        v159 = Logger.logObject.getter();
        os_log_type_t v160 = static os_log_type_t.default.getter();
        int v161 = v160;
        if (os_log_type_enabled(v159, v160))
        {
          uint64_t v162 = swift_slowAlloc();
          os_log_t v195 = v159;
          uint64_t v163 = v162;
          v164 = (void *)swift_slowAlloc();
          v197 = (void *)swift_slowAlloc();
          id v208 = v197;
          *(_DWORD *)uint64_t v163 = 136447234;
          uint64_t v165 = sub_1000D82B8();
          uint64_t v206 = sub_1000C51B8(v165, v166, (uint64_t *)&v208);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v163 + 12) = 2114;
          LODWORD(v205) = v161;
          id v167 = v199;
          uint64_t v206 = (uint64_t)v199;
          id v168 = v199;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v164 = v167;
          swift_release_n();
          *(_WORD *)(v163 + 22) = 2114;
          v169 = v185;
          uint64_t v206 = (uint64_t)v185;
          v170 = v185;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v164[1] = v169;
          swift_release_n();
          *(_WORD *)(v163 + 32) = 2048;
          swift_release();
          uint64_t v206 = 50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          *(_WORD *)(v163 + 42) = 2048;
          v171 = v192;
          Date.init()();
          Date.timeIntervalSince(_:)();
          uint64_t v173 = v172;
          uint64_t v174 = v203;
          v175 = v171;
          v176 = (void (*)(char *, uint64_t))v196;
          ((void (*)(char *, uint64_t))v196)(v175, v204);
          uint64_t v206 = v173;
          unint64_t v46 = v198;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v176(v157, v204);
          uint64_t v177 = v204;
          os_log_t v178 = v195;
          _os_log_impl((void *)&_mh_execute_header, v195, (os_log_type_t)v205, "%{public}s: Finished execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}", (uint8_t *)v163, 0x34u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          uint64_t v179 = v193;
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v179, v177);
        }
        else
        {
          swift_release_n();
          v180 = (void (*)(uint64_t, uint64_t))v196;
          ((void (*)(char *, uint64_t))v196)(v157, v105);

          v180(v158, v105);
        }
        goto LABEL_45;
      }
      id v155 = v208;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    else
    {
      id v154 = v208;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    ((void (*)(uint64_t, uint64_t))v196)(v109, v105);

    swift_bridgeObjectRelease();
    return;
  }
  v156 = v209;
  sub_100361968((uint64_t)v210);
  _convertNSErrorToError(_:)();

  swift_willThrow();
  ((void (*)(uint64_t, uint64_t))v196)(v57, v204);
LABEL_45:

LABEL_46:
  swift_bridgeObjectRelease();
}

void sub_10035F908(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, void **a11, uint64_t *a12, uint64_t a13, void *a14)
{
  unint64_t v197 = a7;
  uint64_t v189 = a6;
  uint64_t v184 = a4;
  v200 = a11;
  uint64_t v211 = a10;
  uint64_t v175 = type metadata accessor for URL();
  uint64_t v19 = *(char **)(v175 - 8);
  __chkstk_darwin(v175);
  uint64_t v174 = (char *)&v166 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for RDSavedURLAttachment();
  uint64_t v173 = *(void *)(v21 - 8);
  __chkstk_darwin(v21 - 8);
  uint64_t v172 = (char *)&v166 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = type metadata accessor for RDSavedReminder();
  uint64_t v195 = *(void *)(v205 - 8);
  __chkstk_darwin(v205);
  uint64_t v183 = (uint64_t)&v166 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v193 = (uint64_t)&v166 - v25;
  __chkstk_darwin(v26);
  uint64_t v194 = (uint64_t)&v166 - v27;
  __chkstk_darwin(v28);
  uint64_t v207 = (uint64_t)&v166 - v29;
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v216 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v202 = (char *)&v166 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v182 = (char *)&v166 - v33;
  __chkstk_darwin(v34);
  uint64_t v204 = (uint64_t)&v166 - v35;
  __chkstk_darwin(v36);
  unint64_t v38 = (char *)&v166 - v37;
  uint64_t v178 = type metadata accessor for Date();
  uint64_t v180 = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  v176 = (char *)&v166 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v186 = (char *)&v166 - v41;
  uint64_t v42 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v42 - 8);
  v196 = (char *)&v166 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  unint64_t v181 = (char *)&v166 - v45;
  __chkstk_darwin(v46);
  v190 = (char *)&v166 - v47;
  __chkstk_darwin(v48);
  v217 = (char *)&v166 - v49;
  if ((a1 & 1) == 0 || a2) {
    id v50 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:*(void *)(v184 + 40)];
  }
  else {
    id v50 = a3;
  }
  id v210 = v50;
  id v212 = [v50 updateList:a5];
  id v187 = [v212 sectionsContextChangeItem];
  v209 = (void *)sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  int64_t v51 = a9 >> 1;
  uint64_t v52 = v211;
  unint64_t v53 = v197;
  if (a9 >> 1 != a8)
  {
    swift_unknownObjectRetain();
    swift_beginAccess();
    int64_t v55 = (void *)v216;
    os_log_t v225 = (os_log_t)(v216 + 48);
    v226 = (void *)(v216 + 16);
    v221 = (void (**)(char *, char *, uint64_t))(v216 + 32);
    uint64_t v188 = v52 + 24;
    v224 = (void (**)(char *, uint64_t))(v216 + 8);
    uint64_t v228 = v216 + 56;
    unint64_t v171 = (v216 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    id v56 = v217;
    uint64_t v206 = v38;
    unint64_t v213 = a9 >> 1;
    v170 = (void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    v169 = (void (**)(char *, uint64_t))(v19 + 8);
    while (a8 < v51)
    {
      uint64_t v219 = v55[9];
      uint64_t v57 = v56;
      v223 = (void (*)(void))v55[2];
      v223();
      v227 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v55[7];
      v227(v57, 0, 1, v30);
      v222 = (unsigned int (*)(char *, uint64_t, uint64_t))v55[6];
      if (v222(v57, 1, v30) == 1) {
        goto LABEL_60;
      }
      v220 = *v221;
      v220(v38, v57, v30);
      uint64_t v58 = *(void *)(v52 + 16);
      if (*(void *)(v58 + 16) && (v59 = sub_100306EC4((uint64_t)v38), int64_t v55 = (void *)v216, (v60 & 1) != 0))
      {
        uint64_t v208 = v58;
        uint64_t v61 = *(void *)(v58 + 56);
        uint64_t v192 = *(void *)(v195 + 72);
        uint64_t v62 = v194;
        sub_100362A10(v61 + v192 * v59, v194, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
        uint64_t v63 = v207;
        sub_1000D56F8(v62, v207);
        id v191 = self;
        id v64 = [v191 newObjectID];
        NSString v65 = String._bridgeToObjectiveC()();
        id v66 = [v210 addReminderWithTitle:v65 toListChangeItem:v212 reminderObjectID:v64];

        unint64_t v67 = v66;
        uint64_t v68 = v218;
        sub_100518274(v63, v66);
        id v69 = v196;
        uint64_t v218 = v68;
        if (v68)
        {

          sub_100362A78(v207, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
          (*v224)(v206, v30);
LABEL_74:
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          return;
        }
        uint64_t v215 = v67;

        sub_100096408(v188, (uint64_t)v233, &qword_100915560);
        sub_100096408((uint64_t)v233, (uint64_t)&v235, &qword_100915560);
        unint64_t v38 = v206;
        if (v235)
        {
          uint64_t v70 = v204;
          if (*(void *)(v235 + 16) && (sub_100306EC4((uint64_t)v206), (v71 & 1) != 0))
          {
            uint64_t v72 = swift_bridgeObjectRetain();
            uint64_t v73 = v215;
            uint64_t v74 = v218;
            sub_100362630(v72, v215);
            uint64_t v218 = v74;
            if (v74)
            {

              swift_bridgeObjectRelease();
              sub_100362A78(v207, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
              (*v224)(v38, v30);
              goto LABEL_74;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v73 = v215;
          }
        }
        else
        {
          uint64_t v73 = v215;
          uint64_t v70 = v204;
        }
        ((void (*)(uint64_t, char *, uint64_t))v223)(v70, v38, v30);
        id v75 = [v73 objectID];
        id v76 = [v75 uuid];

        uint64_t v77 = (uint64_t)v190;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v227((char *)v77, 0, 1, v30);
        if (v222((char *)v77, 1, v30) == 1)
        {
          sub_1000966BC(v77, (uint64_t *)&unk_100909E50);
          uint64_t v78 = v209;
          swift_bridgeObjectRetain();
          unint64_t v79 = sub_100306EC4(v70);
          char v81 = v80;
          swift_bridgeObjectRelease();
          if (v81)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v230 = v78;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_10031967C();
              uint64_t v78 = v230;
            }
            unint64_t v83 = v79 * v219;
            uint64_t v19 = (char *)*v224;
            (*v224)((char *)(v78[6] + v79 * v219), v30);
            id v84 = v230;
            unint64_t v85 = v230[7] + v83;
            id v86 = v181;
            v220(v181, (char *)v85, v30);
            int64_t v87 = v79;
            uint64_t v88 = (uint64_t)v86;
            v209 = v84;
            sub_1002C2610(v87, (uint64_t)v84);
            swift_bridgeObjectRelease();
            v227(v86, 0, 1, v30);
            uint64_t v89 = v19;
            unint64_t v38 = v206;
          }
          else
          {
            uint64_t v88 = (uint64_t)v181;
            v227(v181, 1, 1, v30);
            uint64_t v89 = (char *)*v224;
          }
          uint64_t v214 = (void (*)(char *, uint64_t))v89;
          ((void (*)(uint64_t, uint64_t))v89)(v70, v30);
          sub_1000966BC(v88, (uint64_t *)&unk_100909E50);
          uint64_t v52 = v211;
          unint64_t v53 = v197;
        }
        else
        {
          v90 = v182;
          v220(v182, (char *)v77, v30);
          id v91 = v209;
          char v92 = swift_isUniquelyReferenced_nonNull_native();
          v230 = v91;
          uint64_t v93 = (uint64_t)v90;
          uint64_t v94 = v204;
          sub_1002C4C4C(v93, v204, v92);
          v209 = v230;
          swift_bridgeObjectRelease();
          uint64_t v214 = *v224;
          v214((char *)v94, v30);
          uint64_t v52 = v211;
        }
        [v212 insertReminderChangeItem:v215 afterReminderChangeItem:0];
        uint64_t v95 = *(void *)(v52 + 8);
        if (*(void *)(v95 + 16) && (unint64_t v96 = sub_100306EC4((uint64_t)v38), (v97 & 1) != 0))
        {
          uint64_t v19 = *(char **)(*(void *)(v95 + 56) + 8 * v96);
          swift_bridgeObjectRetain();
          uint64_t v98 = v215;
          id v99 = [v215 subtaskContext];
          if (v99)
          {
            id v179 = v99;
            uint64_t v100 = (uint64_t)v202;
            id v199 = (void *)*((void *)v19 + 2);
            if (v199)
            {
              unint64_t v53 = 0;
              v198 = &v19[(*(unsigned __int8 *)(v216 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80)];
              uint64_t v177 = v19;
              do
              {
                if (v53 >= *((void *)v19 + 2)) {
                  goto LABEL_78;
                }
                ((void (*)(char *, char *, uint64_t))v223)(v69, &v198[v53 * v219], v30);
                v227(v69, 0, 1, v30);
                if (v222(v69, 1, v30) == 1) {
                  goto LABEL_55;
                }
                v220((char *)v100, v69, v30);
                uint64_t v102 = v208;
                if (*(void *)(v208 + 16))
                {
                  unint64_t v103 = sub_100306EC4(v100);
                  if (v104)
                  {
                    uint64_t v105 = v183;
                    sub_100362A10(*(void *)(v102 + 56) + v103 * v192, v183, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
                    uint64_t v106 = v193;
                    sub_1000D56F8(v105, v193);
                    id v107 = [v191 newObjectID];
                    NSString v108 = String._bridgeToObjectiveC()();
                    id v109 = v179;
                    id v110 = [v210 addReminderWithTitle:v108];

                    id v185 = v110;
                    uint64_t v111 = v218;
                    sub_100518274(v106, v110);
                    uint64_t v218 = v111;
                    if (v111)
                    {

                      sub_100362A78(v193, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
                      int v161 = v214;
                      v214(v202, v30);
LABEL_73:
                      swift_bridgeObjectRelease();
                      sub_100362A78(v207, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
                      v161(v206, v30);
                      goto LABEL_74;
                    }

                    sub_100096408((uint64_t)v233, (uint64_t)&v234, &qword_100915560);
                    uint64_t v112 = v234;
                    uint64_t v52 = v211;
                    uint64_t v19 = v177;
                    id v113 = v109;
                    unint64_t v38 = v206;
                    if (v234)
                    {
                      if (*(void *)(v234 + 16))
                      {
                        unint64_t v114 = sub_100306EC4((uint64_t)v202);
                        if (v115)
                        {
                          uint64_t v116 = *(void *)(*(void *)(v112 + 56) + 8 * v114);
                          swift_bridgeObjectRetain();
                          id v117 = [v185 attachmentContext];
                          if (!v117)
                          {
                            uint64_t v162 = self;
                            sub_1000963CC(0, &qword_100915568);
                            uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
                            NSString v164 = String._bridgeToObjectiveC()();
                            id v165 = [v162 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v164];

                            uint64_t v218 = (uint64_t)v165;
                            swift_willThrow();

                            swift_bridgeObjectRelease();
                            sub_100362A78(v193, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
                            int v161 = v214;
                            v214(v202, v30);
                            goto LABEL_73;
                          }
                          id v203 = v117;
                          uint64_t v118 = *(void *)(v116 + 16);
                          if (v118)
                          {
                            uint64_t v167 = a8;
                            uint64_t v168 = v30;
                            uint64_t v119 = v173;
                            uint64_t v120 = v116
                                 + ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80));
                            uint64_t v166 = v116;
                            swift_bridgeObjectRetain();
                            uint64_t v201 = *(void *)(v119 + 72);
                            uint64_t v121 = v175;
                            id v122 = v174;
                            uint64_t v123 = (uint64_t)v172;
                            v124 = v170;
                            v125 = v169;
                            do
                            {
                              sub_100362A10(v120, v123, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment);
                              (*v124)(v122, v123, v121);
                              sub_100362A78(v123, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment);
                              URL._bridgeToObjectiveC()(v126);
                              v128 = v127;
                              (*v125)(v122, v121);

                              v120 += v201;
                              --v118;
                            }
                            while (v118);

                            swift_bridgeObjectRelease_n();
                            uint64_t v52 = v211;
                            unint64_t v38 = v206;
                            id v69 = v196;
                            uint64_t v30 = v168;
                            a8 = v167;
                            uint64_t v19 = v177;
                            id v113 = v179;
                          }
                          else
                          {
                            swift_bridgeObjectRelease();

                            unint64_t v38 = v206;
                          }
                        }
                      }
                    }
                    id v101 = v185;
                    [v113 insertReminderChangeItem:v185 afterReminderChangeItem:0];

                    sub_100362A78(v193, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
                  }
                  uint64_t v100 = (uint64_t)v202;
                }
                ++v53;
                v214((char *)v100, v30);
              }
              while ((void *)v53 != v199);
            }
            v227(v69, 1, 1, v30);
LABEL_55:

            swift_bridgeObjectRelease();
            unint64_t v53 = v197;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        else
        {
        }
        int64_t v55 = (void *)v216;
        int64_t v51 = v213;
        sub_100362A78(v207, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
        v214(v38, v30);
        if (__OFADD__(*v200, 1)) {
          goto LABEL_79;
        }
        NSObject *v200 = (char *)*v200 + 1;
      }
      else
      {
        (*v224)(v38, v30);
        int64_t v51 = v213;
      }
      ++a8;
      id v56 = v217;
      if (a8 == v51)
      {
        v227(v217, 1, 1, v30);
        goto LABEL_60;
      }
    }
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    swift_once();
    goto LABEL_66;
  }
  uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v216 + 56);
  swift_unknownObjectRetain();
  v54(v217, 1, 1, v30);
LABEL_60:
  a8 = v180;
  uint64_t v129 = (uint64_t)v209;
  unint64_t v53 = (unint64_t)v187;
  swift_unknownObjectRelease();
  sub_100096408(v52 + 48, (uint64_t)v232, &qword_100915558);
  sub_100096408((uint64_t)v232, (uint64_t)&v236, &qword_100915558);
  uint64_t v130 = v236;
  uint64_t v19 = v186;
  if (v236)
  {
    uint64_t v131 = *a12;
    if (*(void *)(*a12 + 16))
    {
      if (*(void *)(v129 + 16))
      {
        swift_bridgeObjectRetain();
        sub_10036290C(v130, v131, v129, (void *)v53);
        swift_bridgeObjectRelease();
      }
    }
  }
  swift_bridgeObjectRelease();
  v230 = 0;
  id v132 = v210;
  if (![v210 saveSynchronouslyWithError:&v230])
  {
    v159 = v230;
    uint64_t v160 = _convertNSErrorToError(_:)();

    uint64_t v218 = v160;
    swift_willThrow();

    goto LABEL_70;
  }
  uint64_t v52 = a13;
  uint64_t v133 = qword_100907338;
  uint64_t v134 = v230;
  if (v133 != -1) {
    goto LABEL_80;
  }
LABEL_66:
  uint64_t v135 = type metadata accessor for Logger();
  sub_10008E2DC(v135, (uint64_t)qword_100915470);
  uint64_t v136 = v178;
  (*(void (**)(char *, uint64_t, uint64_t))(a8 + 16))(v19, v52, v178);
  uint64_t v137 = v184;
  swift_retain_n();
  uint64_t v138 = v211;
  sub_1003618DC(v211);
  swift_retain();
  sub_1003618DC(v138);
  uint64_t v139 = Logger.logObject.getter();
  os_log_type_t v140 = static os_log_type_t.default.getter();
  int v141 = v140;
  if (os_log_type_enabled(v139, v140))
  {
    LODWORD(v227) = v141;
    uint64_t v142 = swift_slowAlloc();
    v226 = (void *)swift_slowAlloc();
    uint64_t v228 = swift_slowAlloc();
    uint64_t v231 = v228;
    *(_DWORD *)uint64_t v142 = 136447490;
    v230 = a14;
    swift_getMetatypeMetadata();
    uint64_t v143 = String.init<A>(describing:)();
    v230 = (void *)sub_1000C51B8(v143, v144, &v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v142 + 12) = 2048;
    v145 = v200;
    swift_beginAccess();
    v229 = *v145;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v142 + 22) = 2048;
    v146 = *(void **)(*(void *)v138 + 16);
    sub_100361968(v138);
    v229 = v146;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100361968(v138);
    os_log_t v225 = v139;
    *(_WORD *)(v142 + 32) = 2114;
    v147 = *(void **)(v137 + 24);
    v229 = v147;
    id v148 = v147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v149 = v226;
    void *v226 = v147;
    swift_release_n();
    *(_WORD *)(v142 + 42) = 2114;
    v150 = *(void **)(v137 + 32);
    v229 = v150;
    id v151 = v150;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v149[1] = v150;
    swift_release_n();
    *(_WORD *)(v142 + 52) = 2048;
    v152 = v176;
    Date.init()();
    uint64_t v153 = v186;
    Date.timeIntervalSince(_:)();
    id v155 = v154;
    v156 = *(void (**)(char *, uint64_t))(a8 + 8);
    uint64_t v157 = v178;
    v156(v152, v178);
    v229 = v155;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v156(v153, v157);
    os_log_t v158 = v225;
    _os_log_impl((void *)&_mh_execute_header, v225, (os_log_type_t)v227, "%{public}s: Copied %ld out of %ld top-level reminders to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v142, 0x3Eu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return;
  }
  sub_100361968(v138);
  sub_100361968(v138);
  swift_release_n();
  (*(void (**)(char *, uint64_t))(a8 + 8))(v19, v136);

LABEL_70:
}

id sub_100361340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a2;
  uint64_t v57 = a4;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v55 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v47 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v47 - v16;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v54 = (char *)v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)v47 - v23;
  if (!*(void *)(a3 + 16) || (unint64_t v25 = sub_100306EC4(a1), (v26 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v19 + 56))(v17, 1, 1, v18, v22);
    goto LABEL_10;
  }
  uint64_t v49 = v7;
  uint64_t v50 = v6;
  unint64_t v27 = *(void *)(a3 + 56) + *(void *)(v19 + 72) * v25;
  uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
  uint64_t v51 = *(void *)(v19 + 72);
  uint64_t v52 = v28;
  v28(v17, v27, v18);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v29(v17, 0, 1, v18);
  unint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v53(v17, 1, v18) == 1)
  {
LABEL_10:
    uint64_t v39 = (uint64_t)v17;
LABEL_11:
    sub_1000966BC(v39, (uint64_t *)&unk_100909E50);
    return 0;
  }
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v47[1] = v19 + 32;
  uint64_t v48 = v29;
  v47[0] = v30;
  v30(v24, v17, v18);
  uint64_t v31 = v57;
  if (!*(void *)(v57 + 16) || (unint64_t v32 = sub_100306EC4(v56), (v33 & 1) == 0))
  {
    v48(v14, 1, 1, v18);
    goto LABEL_14;
  }
  v52(v14, *(void *)(v31 + 56) + v32 * v51, v18);
  uint64_t v34 = v48;
  v48(v14, 0, 1, v18);
  if (v53(v14, 1, v18) == 1)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v24, v18);
    uint64_t v39 = (uint64_t)v14;
    goto LABEL_11;
  }
  uint64_t v35 = v34;
  uint64_t v36 = v54;
  ((void (*)(char *, char *, uint64_t))v47[0])(v54, v14, v18);
  v52(v11, (unint64_t)v36, v18);
  v35(v11, 0, 1, v18);
  static Date.now.getter();
  v37.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  if (v53(v11, 1, v18) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v18);
  }
  uint64_t v42 = v49;
  id v43 = objc_allocWithZone((Class)REMMembership);
  uint64_t v44 = v55;
  Class v45 = Date._bridgeToObjectiveC()().super.isa;
  id v40 = [v43 initWithMemberIdentifier:v37.super.isa groupIdentifier:isa isObsolete:0 modifiedOn:v45];

  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v50);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v19 + 8);
  v46(v54, v18);
  v46(v24, v18);
  return v40;
}

uint64_t sub_10036184C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDTemplateOperationCopyRemindersFromPublicTemplateToREMList()
{
  return self;
}

void sub_1003618B8(void *a1)
{
}

uint64_t sub_1003618DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100361968(uint64_t a1)
{
  return a1;
}

unint64_t sub_1003619F0()
{
  unint64_t result = qword_10090DC50;
  if (!qword_10090DC50)
  {
    sub_100096058(&qword_10090DC48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090DC50);
  }
  return result;
}

uint64_t sub_100361A4C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v4 = sub_100094134(&qword_100915570);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v40 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v49 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v48 = (char *)&v37 - v10;
  uint64_t v11 = sub_100094134(&qword_100915578);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v38 = a1 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v54 = (unint64_t)_swiftEmptyArrayStorage;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  int64_t v39 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v47 = v7 + 16;
  uint64_t v51 = v7;
  uint64_t v52 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  id v43 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v44 = v7 + 32;
  uint64_t v53 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  uint64_t v50 = v4;
  Class v45 = v13;
  uint64_t v20 = v46;
  while (1)
  {
    if (v17)
    {
      unint64_t v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v19++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v19 >= v39) {
      goto LABEL_30;
    }
    unint64_t v24 = *(void *)(v38 + 8 * v19);
    if (!v24) {
      break;
    }
LABEL_19:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_20:
    uint64_t v26 = v53;
    uint64_t v27 = v51;
    unint64_t v28 = *(void *)(v51 + 72) * v22;
    uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v51 + 16);
    uint64_t v30 = v48;
    v29(v48, *(void *)(v53 + 48) + v28, v20);
    unint64_t v31 = *(void *)(v26 + 56) + v28;
    unint64_t v32 = v49;
    v29(v49, v31, v20);
    uint64_t v13 = v45;
    char v33 = &v45[*(int *)(v50 + 48)];
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v4 = v50;
    v34(v45, v30, v20);
    v34(v33, v32, v20);
    (*v52)(v13, 0, 1, v4);
    if ((*v43)(v13, 1, v4) == 1)
    {
      swift_release();
      return v54;
    }
    uint64_t v35 = v40;
    sub_100096408((uint64_t)v13, v40, &qword_100915570);
    uint64_t v36 = v41(v35, v35 + *(int *)(v4 + 48));
    uint64_t result = sub_1000966BC(v35, &qword_100915570);
    if (v36)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v25 = v19 + 1;
  if (v19 + 1 >= v39) {
    goto LABEL_30;
  }
  unint64_t v24 = *(void *)(v38 + 8 * v25);
  if (v24) {
    goto LABEL_18;
  }
  int64_t v25 = v19 + 2;
  if (v19 + 2 >= v39) {
    goto LABEL_30;
  }
  unint64_t v24 = *(void *)(v38 + 8 * v25);
  if (v24) {
    goto LABEL_18;
  }
  int64_t v25 = v19 + 3;
  if (v19 + 3 >= v39) {
    goto LABEL_30;
  }
  unint64_t v24 = *(void *)(v38 + 8 * v25);
  if (v24) {
    goto LABEL_18;
  }
  int64_t v25 = v19 + 4;
  if (v19 + 4 >= v39)
  {
LABEL_30:
    (*v52)(v13, 1, 1, v4);
    swift_release();
    return v54;
  }
  unint64_t v24 = *(void *)(v38 + 8 * v25);
  if (v24)
  {
LABEL_18:
    int64_t v19 = v25;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v19 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v19 >= v39) {
      goto LABEL_30;
    }
    unint64_t v24 = *(void *)(v38 + 8 * v19);
    ++v25;
    if (v24) {
      goto LABEL_19;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

unint64_t sub_100361F38(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v63 = a3;
  id v64 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v60 = (char *)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v58 - v10;
  __chkstk_darwin(v12);
  char v71 = (char *)v58 - v13;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v62 = (char *)v58 - v18;
  __chkstk_darwin(v19);
  unint64_t v21 = (char *)v58 - v20;
  unint64_t v79 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v22 = sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23)
  {
    unint64_t v59 = v16;
    unint64_t v68 = v22;
    NSString v65 = v11;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v25 = v7 + 16;
    unint64_t v24 = v26;
    uint64_t v27 = a1 + ((*(unsigned __int8 *)(v25 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 64));
    uint64_t v28 = *(void *)(v25 + 56);
    id v76 = (unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 32);
    uint64_t v77 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 40);
    id v75 = (void (**)(uint64_t, char *, uint64_t))(v25 + 16);
    uint64_t v72 = (void (**)(unint64_t, uint64_t))(v25 - 8);
    uint64_t v73 = v28;
    v58[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v29 = (uint64_t)v71;
    uint64_t v61 = a2;
    id v69 = (void (*)(char *, char *, uint64_t))v26;
    uint64_t v70 = v25;
    while (1)
    {
      v24(v21, v27, v6);
      uint64_t v30 = *v77;
      (*v77)((uint64_t)v21, 0, 1, v6);
      unint64_t v31 = *v76;
      if ((*v76)(v21, 1, v6) == 1) {
        break;
      }
      uint64_t v74 = *v75;
      v74(v29, v21, v6);
      if (*(void *)(a2 + 16) && (sub_100306EC4(v29), (v32 & 1) != 0))
      {
        swift_bridgeObjectRetain();
        NSString v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v34 = [v63 addListSectionWithDisplayName:v33 toListSectionContextChangeItem:v64];

        id v67 = v34;
        id v35 = [v34 objectID];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v36 = (uint64_t)v65;
        v69(v65, v71, v6);
        id v37 = [v35 uuid];
        uint64_t v38 = (uint64_t)v62;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v30(v38, 0, 1, v6);
        unsigned int v39 = v31((char *)v38, 1, v6);
        id v66 = v35;
        if (v39 == 1)
        {
          sub_1000966BC(v38, (uint64_t *)&unk_100909E50);
          unint64_t v40 = v68;
          swift_bridgeObjectRetain();
          unint64_t v41 = sub_100306EC4(v36);
          char v43 = v42;
          swift_bridgeObjectRelease();
          if (v43)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v78 = v40;
            uint64_t v29 = (uint64_t)v71;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_10031967C();
              unint64_t v40 = v78;
            }
            unint64_t v45 = v41 * v73;
            uint64_t v46 = *v72;
            (*v72)(*(void *)(v40 + 48) + v41 * v73, v6);
            unint64_t v68 = v41;
            uint64_t v47 = v78;
            unint64_t v48 = *(void *)(v78 + 56) + v45;
            uint64_t v49 = (uint64_t)v59;
            v74((uint64_t)v59, (char *)v48, v6);
            int64_t v50 = v68;
            unint64_t v68 = v47;
            uint64_t v51 = v47;
            uint64_t v52 = v49;
            sub_1002C2610(v50, v51);
            swift_bridgeObjectRelease();
            v30(v49, 0, 1, v6);
          }
          else
          {
            uint64_t v52 = (uint64_t)v59;
            v30((uint64_t)v59, 1, 1, v6);
            uint64_t v29 = (uint64_t)v71;
            uint64_t v46 = *v72;
          }
          v46((unint64_t)v65, v6);
          sub_1000966BC(v52, (uint64_t *)&unk_100909E50);
        }
        else
        {
          uint64_t v53 = (uint64_t)v60;
          v74((uint64_t)v60, (char *)v38, v6);
          unint64_t v54 = v68;
          char v55 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v78 = v54;
          sub_1002C4C4C(v53, v36, v55);
          unint64_t v68 = v78;
          swift_bridgeObjectRelease();
          uint64_t v46 = *v72;
          (*v72)(v36, v6);
          uint64_t v29 = (uint64_t)v71;
        }
        unint64_t v24 = (void (*)(char *, uint64_t, uint64_t))v69;

        v46(v29, v6);
        a2 = v61;
      }
      else
      {
        (*v72)(v29, v6);
      }
      v27 += v73;
      if (!--v23)
      {
        v30((uint64_t)v21, 1, 1, v6);
        break;
      }
    }
    swift_bridgeObjectRelease();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v64 setUnsavedSectionIDsOrdering:isa];

    return v68;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  }
}

void sub_100362630(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RDSavedURLAttachment();
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)&double v11 = __chkstk_darwin(v9 - 8).n128_u64[0];
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [a2 attachmentContext:v11];
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15)
    {
      v27[1] = v2;
      uint64_t v16 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      uint64_t v28 = *(void *)(v10 + 72);
      uint64_t v17 = v14;
      uint64_t v18 = a1;
      uint64_t v19 = (void (**)(char *, char *, uint64_t))(v6 + 16);
      uint64_t v20 = (void (**)(char *, uint64_t))(v6 + 8);
      v27[0] = v18;
      swift_bridgeObjectRetain();
      do
      {
        sub_100362A10(v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment);
        (*v19)(v8, v13, v5);
        sub_100362A78((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment);
        URL._bridgeToObjectiveC()(v21);
        uint64_t v23 = v22;
        (*v20)(v8, v5);

        v16 += v28;
        --v15;
      }
      while (v15);

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  else
  {
    unint64_t v24 = self;
    sub_1000963CC(0, &qword_100915568);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v26 = String._bridgeToObjectiveC()();
    [v24 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v26];

    swift_willThrow();
  }
}

void sub_10036290C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v9[2] = a3;
  v9[3] = a2;
  unint64_t v5 = sub_100361A4C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100362AD8, (uint64_t)v9);
  if (v5 >> 62)
  {
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_6;
    }
  }
  else if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_6;
  }
  if (a4)
  {
    id v6 = objc_allocWithZone((Class)REMMemberships);
    sub_1000963CC(0, (unint64_t *)&qword_10090C160);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v8 = [v6 initWithMemberships:isa];

    [a4 setUnsavedMembershipsOfRemindersInSections:v8];
    return;
  }
LABEL_6:
  swift_bridgeObjectRelease();
}

uint64_t sub_100362A10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100362A78(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_100362AD8(uint64_t a1, uint64_t a2)
{
  return sub_100361340(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100362AE0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100915580);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100915580);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_100362BA8(char a1)
{
  unint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E65727275636572;
      break;
    case 2:
      unint64_t result = 0x636E657571657266;
      break;
    case 3:
      unint64_t result = 0x6C61767265746E69;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
    case 6:
    case 7:
      unint64_t result = 0x6854664F73796164;
      break;
    case 8:
      unint64_t result = 0x54664F736B656577;
      break;
    case 9:
      unint64_t result = 0x664F7368746E6F6DLL;
      break;
    case 10:
      unint64_t result = 0x7469736F50746573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100362D30(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100362BA8(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100362BA8(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100362DBC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100362BA8(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100362E20()
{
  sub_100362BA8(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100362E74()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100362BA8(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100362ED4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1003647EC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100362F04@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100362BA8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100362F30(void *a1@<X8>)
{
  *a1 = &off_1008B56C8;
}

unint64_t sub_100362F40@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1003647EC(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100362F68()
{
  return sub_100362BA8(*v0);
}

uint64_t sub_100362F70@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B50C0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100362FD0(void *a1@<X8>)
{
  *a1 = &off_1008B65E0;
}

uint64_t sub_100362FE0@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B50C0, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_100363044(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_1009157F8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_100365A18();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1003631AC()
{
  if (*v0) {
    return 0x626D754E6B656577;
  }
  else {
    return 0x656854664F796164;
  }
}

uint64_t sub_1003631F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100365A6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10036321C(uint64_t a1)
{
  unint64_t v2 = sub_100365A18();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100363258(uint64_t a1)
{
  unint64_t v2 = sub_100365A18();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100363294(void *a1)
{
  return sub_100363044(a1);
}

uint64_t sub_1003632B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100365B84(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t type metadata accessor for REMRecurrenceRuleCDIngestor()
{
  return self;
}

_UNKNOWN **sub_100363300()
{
  return &off_1008C29F8;
}

_UNKNOWN **sub_10036330C()
{
  return &off_1008C29C8;
}

id sub_100363318(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a7)
  {
    sub_1000963CC(0, &qword_1009127D8);
    v16.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v17 = a9;
    if (a8) {
      goto LABEL_3;
    }
  }
  else
  {
    v16.super.Class isa = 0;
    uint64_t v17 = a9;
    if (a8)
    {
LABEL_3:
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      v18.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v19 = a10;
      if (v17) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  v18.super.Class isa = 0;
  uint64_t v19 = a10;
  if (v17)
  {
LABEL_4:
    sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
    v20.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v21 = a11;
    if (v19) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  v20.super.Class isa = 0;
  uint64_t v21 = a11;
  if (v19)
  {
LABEL_5:
    sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
    v22.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v23 = a12;
    if (v21) {
      goto LABEL_6;
    }
LABEL_12:
    v24.super.Class isa = 0;
    uint64_t v25 = a13;
    if (v23) {
      goto LABEL_7;
    }
LABEL_13:
    v26.super.Class isa = 0;
    goto LABEL_14;
  }
LABEL_11:
  v22.super.Class isa = 0;
  uint64_t v23 = a12;
  if (!v21) {
    goto LABEL_12;
  }
LABEL_6:
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  v24.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v25 = a13;
  if (!v23) {
    goto LABEL_13;
  }
LABEL_7:
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  v26.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_14:
  id v27 = [v29 initRecurrenceRuleWithObjectID:a1 accountID:a2 reminderID:a3 frequency:a4 interval:a5 firstDayOfTheWeek:a6 daysOfTheWeek:v16.super.isa daysOfTheMonth:v18.super.isa monthsOfTheYear:v20.super.isa weeksOfTheYear:v22.super.isa daysOfTheYear:v24.super.isa setPositions:v26.super.isa end:v25];

  return v27;
}

void *sub_100363578(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  if (a2 >> 60 != 15)
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    sub_100097E38(a1, a2);
    JSONDecoder.init()();
    sub_100094134(&qword_100915798);
    sub_10036572C(&qword_1009157B8, (void (*)(void))sub_10036579C);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v5 = *(void *)(v10 + 16);
    if (v5)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v6 = self;
      char v7 = (void *)(v10 + 40);
      do
      {
        id v8 = [v6 dayOfWeek:*(v7 - 1) weekNumber:*v7];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v7 += 2;
        --v5;
      }
      while (v5);
      uint64_t v2 = _swiftEmptyArrayStorage;
      swift_release();
      sub_100097F20(a1, a2);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      sub_100097F20(a1, a2);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v2;
}

void sub_100363770(void *a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v10 = __chkstk_darwin(v9).n128_u64[0];
  uint64_t v12 = (char *)&v110 - v11;
  *(void *)&long long v128 = 0;
  id v13 = [a1 remObjectIDWithError:&v128 v10];
  if (!v13)
  {
    id v27 = (id)v128;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  id v14 = v13;
  id v122 = v12;
  uint64_t v123 = v8;
  v124 = (void *)v5;
  id v15 = (id)v128;
  id v16 = [a1 account];
  if (!v16) {
    goto LABEL_10;
  }
  uint64_t v17 = v16;
  id v18 = [v16 remObjectID];

  uint64_t v121 = v18;
  if (!v18) {
    goto LABEL_10;
  }
  id v19 = [a1 reminder];
  if (!v19
    || (NSArray v20 = v19, v21 = [v19 remObjectID], v20, !v21))
  {

LABEL_10:
    id v28 = [a1 account];

    if (!v28)
    {
      if (qword_100907340 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_10008E2DC(v29, (uint64_t)qword_100915580);
      uint64_t v30 = v14;
      unint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        NSString v33 = (uint8_t *)swift_slowAlloc();
        v124 = (void *)swift_slowAlloc();
        *(_DWORD *)NSString v33 = 138412290;
        *(void *)&long long v128 = v30;
        id v34 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v124 = v14;

        _os_log_impl((void *)&_mh_execute_header, v31, v32, "REMRecurrenceRuleCDIngestor: cdRecurrenceRule.account is nil {cdRecurrenceRule.remObjectID: %@}", v33, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        unint64_t v31 = v30;
      }
    }
    id v35 = [a1 reminder];

    if (!v35)
    {
      swift_bridgeObjectRelease();
      if (qword_100907340 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_10008E2DC(v36, (uint64_t)qword_100915580);
      id v37 = v14;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        unint64_t v40 = (uint8_t *)swift_slowAlloc();
        unint64_t v41 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v40 = 138412290;
        *(void *)&long long v128 = v37;
        char v42 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v41 = v14;

        _os_log_impl((void *)&_mh_execute_header, v38, v39, "REMRecurrenceRuleCDIngestor: cdRecurrenceRule.reminder is nil {cdRecurrenceRule.remObjectID: %@}", v40, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v38 = v37;
      }
    }
    char v43 = self;
    sub_1000963CC(0, (unint64_t *)&qword_100911820);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v43 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v45];

    swift_willThrow();
    return;
  }
  id v118 = [a1 frequency];
  id v117 = [a1 interval];
  id v116 = [a1 firstDayOfTheWeek];
  id v22 = [a1 daysOfTheWeek];
  id v119 = v21;
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;
  }
  else
  {
    uint64_t v24 = 0;
    unint64_t v26 = 0xF000000000000000;
  }
  char v115 = sub_100363578(v24, v26);
  sub_100097F20(v24, v26);
  id v46 = [a1 daysOfTheMonth];
  uint64_t v120 = v14;
  if (!v46)
  {
    uint64_t v114 = 0;
    goto LABEL_36;
  }
  uint64_t v47 = v46;
  uint64_t v113 = v6;
  uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v50 = v49;

  uint64_t v51 = self;
  sub_100097E38(v48, v50);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v126[0] = 0;
  id v53 = [v51 JSONObjectWithData:isa options:0 error:v126];

  id v54 = v126[0];
  if (v53)
  {
    _bridgeAnyObjectToAny(_:)();
    sub_100097F34(v48, v50);
    swift_unknownObjectRelease();
  }
  else
  {
    char v55 = v54;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100097F34(v48, v50);
    swift_errorRelease();
    long long v128 = 0u;
    long long v129 = 0u;
  }
  sub_1000D6CBC((uint64_t)&v128, (uint64_t)v126);
  uint64_t v6 = v113;
  if (v127)
  {
    sub_100094134(&qword_1009157B0);
    if (swift_dynamicCast())
    {
      uint64_t v114 = v125;
      sub_100097F34(v48, v50);
      goto LABEL_36;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)v126, &qword_100908190);
  }
  sub_100097F34(v48, v50);
  uint64_t v114 = 0;
LABEL_36:
  id v56 = [a1 monthsOfTheYear];
  if (v56)
  {
    uint64_t v57 = v56;
    uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v60 = v59;

    uint64_t v61 = self;
    sub_100097E38(v58, v60);
    Class v62 = Data._bridgeToObjectiveC()().super.isa;
    v126[0] = 0;
    id v63 = [v61 JSONObjectWithData:v62 options:0 error:v126];

    id v64 = v126[0];
    if (v63)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100097F34(v58, v60);
      swift_unknownObjectRelease();
    }
    else
    {
      NSString v65 = v64;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100097F34(v58, v60);
      swift_errorRelease();
      long long v128 = 0u;
      long long v129 = 0u;
    }
    sub_1000D6CBC((uint64_t)&v128, (uint64_t)v126);
    if (v127)
    {
      sub_100094134(&qword_1009157B0);
      if (swift_dynamicCast())
      {
        uint64_t v113 = v125;
        sub_100097F34(v58, v60);
        goto LABEL_46;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)v126, &qword_100908190);
    }
    sub_100097F34(v58, v60);
  }
  uint64_t v113 = 0;
LABEL_46:
  id v66 = [a1 weeksOfTheYear];
  if (!v66)
  {
    uint64_t v112 = 0;
    goto LABEL_56;
  }
  id v67 = v66;
  uint64_t v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v70 = v69;

  char v71 = self;
  sub_100097E38(v68, v70);
  Class v72 = Data._bridgeToObjectiveC()().super.isa;
  v126[0] = 0;
  id v73 = [v71 JSONObjectWithData:v72 options:0 error:v126];

  id v74 = v126[0];
  if (v73)
  {
    _bridgeAnyObjectToAny(_:)();
    sub_100097F34(v68, v70);
    swift_unknownObjectRelease();
  }
  else
  {
    id v75 = v74;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100097F34(v68, v70);
    swift_errorRelease();
    long long v128 = 0u;
    long long v129 = 0u;
  }
  sub_1000D6CBC((uint64_t)&v128, (uint64_t)v126);
  if (v127)
  {
    sub_100094134(&qword_1009157B0);
    if (swift_dynamicCast())
    {
      uint64_t v112 = v125;
      sub_100097F34(v68, v70);
      goto LABEL_56;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)v126, &qword_100908190);
  }
  sub_100097F34(v68, v70);
  uint64_t v112 = 0;
LABEL_56:
  id v76 = [a1 daysOfTheYear];
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v78 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v80 = v79;

    char v81 = self;
    sub_100097E38(v78, v80);
    Class v82 = Data._bridgeToObjectiveC()().super.isa;
    v126[0] = 0;
    id v83 = [v81 JSONObjectWithData:v82 options:0 error:v126];

    id v84 = v126[0];
    if (v83)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100097F34(v78, v80);
      swift_unknownObjectRelease();
    }
    else
    {
      unint64_t v85 = v84;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100097F34(v78, v80);
      swift_errorRelease();
      long long v128 = 0u;
      long long v129 = 0u;
    }
    sub_1000D6CBC((uint64_t)&v128, (uint64_t)v126);
    if (v127)
    {
      sub_100094134(&qword_1009157B0);
      if (swift_dynamicCast())
      {
        uint64_t v111 = v125;
        sub_100097F34(v78, v80);
        goto LABEL_66;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)v126, &qword_100908190);
    }
    sub_100097F34(v78, v80);
  }
  uint64_t v111 = 0;
LABEL_66:
  id v86 = [a1 setPositions];
  if (v86)
  {
    uint64_t v87 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v89 = v88;

    v90 = self;
    sub_100097E38(v87, v89);
    Class v91 = Data._bridgeToObjectiveC()().super.isa;
    v126[0] = 0;
    id v92 = [v90 JSONObjectWithData:v91 options:0 error:v126];

    id v93 = v126[0];
    if (v92)
    {
      _bridgeAnyObjectToAny(_:)();
      sub_100097F34(v87, v89);
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v94 = v93;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100097F34(v87, v89);
      swift_errorRelease();
      long long v128 = 0u;
      long long v129 = 0u;
    }
    sub_1000D6CBC((uint64_t)&v128, (uint64_t)v126);
    if (v127)
    {
      sub_100094134(&qword_1009157B0);
      if (swift_dynamicCast())
      {
        id v86 = (id)v125;
        sub_100097F34(v87, v89);
        goto LABEL_75;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)v126, &qword_100908190);
    }
    sub_100097F34(v87, v89);
    id v86 = 0;
  }
LABEL_75:
  id v95 = [a1 endDate];
  if (v95)
  {
    unint64_t v96 = v95;
    char v97 = v123;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v98 = *(void (**)(char *, char *, void *))(v6 + 32);
    uint64_t v99 = v6;
    uint64_t v100 = v124;
    v98(v4, v97, v124);
    (*(void (**)(char *, void, uint64_t, void *))(v99 + 56))(v4, 0, 1, v100);
    if ((*(unsigned int (**)(char *, uint64_t, void *))(v99 + 48))(v4, 1, v100) != 1)
    {
      id v101 = v122;
      v98(v122, v4, v100);
      Class v102 = Date._bridgeToObjectiveC()().super.isa;
      id v103 = [self recurrenceEndWithEndDate:v102];

      (*(void (**)(char *, void *))(v99 + 8))(v101, v100);
LABEL_83:
      uint64_t v105 = v119;
      uint64_t v106 = (int)v118;
      uint64_t v107 = (int)v117;
      uint64_t v108 = (int)v116;
      id v109 = objc_allocWithZone((Class)REMRecurrenceRule);
      sub_100363318(v120, v121, v105, v106, v107, v108, (uint64_t)v115, v114, v113, v112, v111, (uint64_t)v86, v103);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, void *))(v6 + 56))(v4, 1, 1, v124);
  }
  sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909A40);
  if ((uint64_t)[a1 occurrenceCount] < 1)
  {
    id v103 = 0;
    goto LABEL_83;
  }
  unint64_t v104 = (unint64_t)[a1 occurrenceCount];
  if ((v104 & 0x8000000000000000) == 0)
  {
    id v103 = [self recurrenceEndWithOccurrenceCount:v104];
    goto LABEL_83;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t sub_1003647EC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4A80, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return 11;
  }
  else {
    return v3;
  }
}

void sub_100364838(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v110 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for UUID();
  __chkstk_darwin(v116);
  char v115 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = *(void *)(a3 + 16);
  if (v121)
  {
    uint64_t v120 = a3 + 32;
    uint64_t v108 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
    id v109 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v105 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v113 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v114 = (void (**)(char *, uint64_t))(v12 + 8);
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    uint64_t v111 = v6;
    uint64_t v112 = a1;
    id v118 = v11;
    uint64_t v106 = a2;
    uint64_t v107 = a3;
    while (2)
    {
      uint64_t v20 = *(unsigned __int8 *)(v120 + v14++);
      switch(v20)
      {
        case 1:
          id v21 = (objc_class *)[a1 recurrenceEnd];
          if (!v21) {
            goto LABEL_5;
          }
          Class v22 = v21;
          uint64_t v23 = v14;
          Class isa = (Class)[(objc_class *)v21 endDate];
          if (isa)
          {
            unint64_t v25 = v110;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            (*v109)(v11, v25, v6);
            (*v113)(v11, 0, 1, v6);
            if ((*v108)(v11, 1, v6) == 1)
            {
              Class isa = 0;
            }
            else
            {
              Class isa = Date._bridgeToObjectiveC()().super.isa;
              (*v105)(v11, v6);
            }
          }
          else
          {
            (*v113)(v11, 1, 1, v6);
          }
          [a2 setEndDate:isa];

          unint64_t v99 = (unint64_t)[(objc_class *)v22 occurrenceCount];
          if ((v99 & 0x8000000000000000) != 0) {
            goto LABEL_83;
          }
          [a2 setOccurrenceCount:v99];
LABEL_64:

          uint64_t v14 = v23;
          goto LABEL_5;
        case 2:
          uint64_t v26 = (uint64_t)[a1 frequency];
          if (v26 < -32768)
          {
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
          }
          if (v26 >= 0x8000) {
            goto LABEL_80;
          }
          [a2 setFrequency:(__int16)v26];
          goto LABEL_5;
        case 3:
          uint64_t v27 = (uint64_t)[a1 interval];
          if (v27 < -32768) {
            goto LABEL_78;
          }
          if (v27 >= 0x8000) {
            goto LABEL_81;
          }
          [a2 setInterval:(__int16)v27];
          goto LABEL_5;
        case 4:
          uint64_t v28 = (uint64_t)[a1 firstDayOfTheWeek];
          if (v28 < -32768) {
            goto LABEL_79;
          }
          if (v28 >= 0x8000) {
            goto LABEL_82;
          }
          [a2 setFirstDayOfTheWeek:(__int16)v28];
          goto LABEL_5;
        case 5:
          uint64_t v117 = v14;
          id v29 = [a1 daysOfTheWeek];
          if (!v29)
          {
            v19.super.Class isa = 0;
            goto LABEL_74;
          }
          uint64_t v30 = v29;
          sub_1000963CC(0, &qword_1009127D8);
          unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v31 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v32)
            {
LABEL_69:
              id v34 = _swiftEmptyArrayStorage;
              goto LABEL_70;
            }
          }
          else
          {
            uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (!v32) {
              goto LABEL_69;
            }
          }
          uint64_t v123 = _swiftEmptyArrayStorage;
          sub_1001DE950(0, v32 & ~(v32 >> 63), 0);
          if (v32 < 0) {
            goto LABEL_84;
          }
          uint64_t v33 = 0;
          id v34 = v123;
          unint64_t v122 = v31 & 0xC000000000000001;
          unint64_t v35 = v31;
          do
          {
            if (v122) {
              id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v36 = *(id *)(v31 + 8 * v33 + 32);
            }
            id v37 = v36;
            id v38 = [v36 dayOfTheWeek];
            id v39 = [v37 weekNumber];

            uint64_t v123 = v34;
            unint64_t v41 = v34[2];
            unint64_t v40 = v34[3];
            if (v41 >= v40 >> 1)
            {
              sub_1001DE950(v40 > 1, v41 + 1, 1);
              id v34 = v123;
            }
            ++v33;
            v34[2] = v41 + 1;
            char v42 = &v34[2 * v41];
            v42[4] = v38;
            v42[5] = v39;
            unint64_t v31 = v35;
          }
          while (v32 != v33);
          a2 = v106;
LABEL_70:
          type metadata accessor for JSONEncoder();
          swift_allocObject();
          JSONEncoder.init()();
          uint64_t v123 = v34;
          sub_100094134(&qword_100915798);
          sub_10036572C(&qword_1009157A0, (void (*)(void))sub_1003656D8);
          uint64_t v100 = v119;
          uint64_t v101 = dispatch thunk of JSONEncoder.encode<A>(_:)();
          if (v100)
          {
            swift_errorRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            v19.super.Class isa = 0;
            uint64_t v119 = 0;
          }
          else
          {
            uint64_t v103 = v101;
            unint64_t v104 = v102;
            uint64_t v119 = 0;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            v19.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
            sub_100097F34(v103, v104);
          }
          uint64_t v6 = v111;
          a1 = v112;
          uint64_t v11 = v118;
LABEL_74:
          uint64_t v14 = v117;
          [a2 setDaysOfTheWeek:v19.super.isa];
LABEL_4:

LABEL_5:
          if (v14 != v121) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
        case 6:
          uint64_t v43 = v14;
          id v44 = [a1 daysOfTheMonth];
          if (v44)
          {
            NSString v45 = v44;
            sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
            static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v46 = self;
            Class v47 = Array._bridgeToObjectiveC()().super.isa;
            uint64_t v123 = 0;
            id v48 = [v46 dataWithJSONObject:v47 options:0 error:&v123];

            unint64_t v49 = v123;
            if (v48)
            {
              uint64_t v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v52 = v51;
              swift_bridgeObjectRelease();

              v19.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v53 = v52;
              uint64_t v11 = v118;
              sub_100097F34(v50, v53);
            }
            else
            {
              uint64_t v94 = v49;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              v19.super.Class isa = 0;
              uint64_t v119 = 0;
            }
          }
          else
          {
            v19.super.Class isa = 0;
          }
          uint64_t v14 = v43;
          [a2 setDaysOfTheMonth:v19.super.isa];
          goto LABEL_4;
        case 7:
          uint64_t v23 = v14;
          id v54 = [a1 daysOfTheYear];
          if (v54)
          {
            char v55 = v54;
            sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
            static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v56 = self;
            Class v57 = Array._bridgeToObjectiveC()().super.isa;
            uint64_t v123 = 0;
            id v58 = [v56 dataWithJSONObject:v57 options:0 error:&v123];

            unint64_t v59 = v123;
            if (v58)
            {
              uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v62 = v61;
              swift_bridgeObjectRelease();

              Class v22 = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v63 = v62;
              uint64_t v11 = v118;
              sub_100097F34(v60, v63);
            }
            else
            {
              id v95 = v59;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              Class v22 = 0;
              uint64_t v119 = 0;
            }
          }
          else
          {
            Class v22 = 0;
          }
          [a2 setDaysOfTheYear:v22];
          goto LABEL_64;
        case 8:
          uint64_t v23 = v14;
          id v64 = [a1 weeksOfTheYear];
          if (v64)
          {
            NSString v65 = v64;
            sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
            static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v66 = self;
            Class v67 = Array._bridgeToObjectiveC()().super.isa;
            uint64_t v123 = 0;
            id v68 = [v66 dataWithJSONObject:v67 options:0 error:&v123];

            unint64_t v69 = v123;
            if (v68)
            {
              uint64_t v70 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v72 = v71;
              swift_bridgeObjectRelease();

              Class v22 = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v73 = v72;
              uint64_t v11 = v118;
              sub_100097F34(v70, v73);
            }
            else
            {
              unint64_t v96 = v69;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              Class v22 = 0;
              uint64_t v119 = 0;
            }
          }
          else
          {
            Class v22 = 0;
          }
          [a2 setWeeksOfTheYear:v22];
          goto LABEL_64;
        case 9:
          uint64_t v23 = v14;
          id v74 = [a1 monthsOfTheYear];
          if (v74)
          {
            id v75 = v74;
            sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
            static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v76 = self;
            Class v77 = Array._bridgeToObjectiveC()().super.isa;
            uint64_t v123 = 0;
            id v78 = [v76 dataWithJSONObject:v77 options:0 error:&v123];

            unint64_t v79 = v123;
            if (v78)
            {
              uint64_t v80 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v82 = v81;
              swift_bridgeObjectRelease();

              Class v22 = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v83 = v82;
              uint64_t v11 = v118;
              sub_100097F34(v80, v83);
            }
            else
            {
              char v97 = v79;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              Class v22 = 0;
              uint64_t v119 = 0;
            }
          }
          else
          {
            Class v22 = 0;
          }
          [a2 setMonthsOfTheYear:v22];
          goto LABEL_64;
        case 10:
          uint64_t v23 = v14;
          id v84 = [a1 setPositions];
          if (v84)
          {
            unint64_t v85 = v84;
            sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
            static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v86 = self;
            Class v87 = Array._bridgeToObjectiveC()().super.isa;
            uint64_t v123 = 0;
            id v88 = [v86 dataWithJSONObject:v87 options:0 error:&v123];

            unint64_t v89 = v123;
            if (v88)
            {
              uint64_t v90 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v92 = v91;
              swift_bridgeObjectRelease();

              Class v22 = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v93 = v92;
              uint64_t v11 = v118;
              sub_100097F34(v90, v93);
            }
            else
            {
              uint64_t v98 = v89;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              Class v22 = 0;
              uint64_t v119 = 0;
            }
          }
          else
          {
            Class v22 = 0;
          }
          [a2 setSetPositions:v22];
          goto LABEL_64;
        default:
          id v15 = [a1 objectID];
          uint64_t v16 = v14;
          id v17 = [v15 uuid];

          id v18 = v115;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v14 = v16;
          v19.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
          (*v114)(v18, v116);
          [a2 setIdentifier:v19.super.isa];
          goto LABEL_4;
      }
      break;
    }
  }
}

void sub_100365604(void *a1, void *a2, char a3, uint64_t a4)
{
  if (a3)
  {
    id v10 = [a1 reminderID];
    sub_100477C28(1, v10, a4);
    uint64_t v9 = v11;

    if (v4) {
      return;
    }
    [a2 setReminder:v9];
  }
  else
  {
    id v7 = [a1 accountID];
    sub_100477BF8(0, v7, a4);
    uint64_t v9 = v8;

    if (v4) {
      return;
    }
    [a2 setAccount:v9];
  }
}

unint64_t sub_1003656D8()
{
  unint64_t result = qword_1009157A8;
  if (!qword_1009157A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009157A8);
  }
  return result;
}

uint64_t sub_10036572C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_100915798);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10036579C()
{
  unint64_t result = qword_1009157C0;
  if (!qword_1009157C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009157C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for REMRecurrenceRuleCDIngestor.DayOfWeek()
{
  return &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek;
}

ValueMetadata *type metadata accessor for REMRecurrenceRuleCDIngestor.RelationshipKey()
{
  return &type metadata for REMRecurrenceRuleCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMRecurrenceRuleCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003658E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMRecurrenceRuleCDIngestor.ValueKey()
{
  return &type metadata for REMRecurrenceRuleCDIngestor.ValueKey;
}

uint64_t sub_100365918()
{
  return sub_1000B2138(&qword_1009157C8, &qword_1009157D0);
}

unint64_t sub_100365944()
{
  unint64_t result = qword_1009157D8;
  if (!qword_1009157D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009157D8);
  }
  return result;
}

uint64_t sub_100365998()
{
  return sub_1000B2138(&qword_1009157E0, &qword_1009157E8);
}

unint64_t sub_1003659C4()
{
  unint64_t result = qword_1009157F0;
  if (!qword_1009157F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009157F0);
  }
  return result;
}

unint64_t sub_100365A18()
{
  unint64_t result = qword_100915800;
  if (!qword_100915800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915800);
  }
  return result;
}

uint64_t sub_100365A6C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656854664F796164 && a2 == 0xEC0000006B656557;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x626D754E6B656577 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100365B84(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_100915808);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000C0DE0(a1, v7);
  sub_100365A18();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  return v7;
}

unsigned char *_s7remindd27REMRecurrenceRuleCDIngestorC15RelationshipKeyOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100365DF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys()
{
  return &type metadata for REMRecurrenceRuleCDIngestor.DayOfWeek.CodingKeys;
}

unint64_t sub_100365E30()
{
  unint64_t result = qword_100915810;
  if (!qword_100915810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915810);
  }
  return result;
}

unint64_t sub_100365E88()
{
  unint64_t result = qword_100915818;
  if (!qword_100915818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915818);
  }
  return result;
}

unint64_t sub_100365EE0()
{
  unint64_t result = qword_100915820;
  if (!qword_100915820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915820);
  }
  return result;
}

uint64_t sub_100365F34()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100915830);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100915830);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

_UNKNOWN **static REMCDAttachment.recordTypes()()
{
  return &off_1008B6670;
}

uint64_t static REMCDAttachment.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  swift_bridgeObjectRetain();
  id v6 = a4;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [self objectWithRecordID:v5 accountID:v7 context:v6];

  if (v8)
  {
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t static REMCDAttachment.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_1000963CC(0, (unint64_t *)&unk_10090AFC0);
  uint64_t v8 = CKRecord.subscript.getter();
  if (v8)
  {
    uint64_t v38 = v8;
    sub_100094134(&qword_100909AB0);
    if (swift_dynamicCast())
    {
      uint64_t countAndFlagsBits = v37._countAndFlagsBits;
      object = v37._object;
      swift_bridgeObjectRetain();
      Swift::Int v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B6608, v37);
      swift_bridgeObjectRelease();
      switch(v11)
      {
        case 0:
          swift_bridgeObjectRelease();
          uint64_t v12 = (unint64_t *)&unk_10090AF90;
          goto LABEL_9;
        case 2:
          swift_bridgeObjectRelease();
          uint64_t v12 = (unint64_t *)&unk_100915848;
          goto LABEL_9;
        case 1:
          swift_bridgeObjectRelease();
          uint64_t v12 = (unint64_t *)&unk_100915850;
LABEL_9:
          sub_1000963CC(0, v12);
          goto LABEL_10;
      }
      if (qword_100907348 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10008E2DC(v32, (uint64_t)qword_100915830);
      swift_bridgeObjectRetain();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        unint64_t v35 = (uint8_t *)swift_slowAlloc();
        v37._uint64_t countAndFlagsBits = swift_slowAlloc();
        *(_DWORD *)unint64_t v35 = 136315138;
        id v36 = v35 + 4;
        swift_bridgeObjectRetain();
        uint64_t v38 = sub_1000C51B8(countAndFlagsBits, (unint64_t)object, &v37._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "newCloudObject: Unknown attachment type {type: %s}", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
  }
LABEL_10:
  id v13 = [a1 recordID:v36];
  NSString v14 = [v13 recordName];

  if (!v14)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v15 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v14 context:a3 account:a2];

  if (!v15) {
    return 0;
  }
  id v16 = [a2 ckIdentifier];
  if (v16)
  {
    id v17 = v16;
    [v15 mergeDataFromRecord:a1 accountID:v16];

    [v15 setCkServerRecord:a1];
    [v15 setInCloud:1];
    [v15 updateParentReferenceIfNecessary];
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
  }
  else
  {
    if (qword_100907348 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E2DC(v19, (uint64_t)qword_100915830);
    id v20 = a2;
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446466;
      v37._uint64_t countAndFlagsBits = v4;
      swift_getMetatypeMetadata();
      uint64_t v24 = String.init<A>(describing:)();
      v37._uint64_t countAndFlagsBits = sub_1000C51B8(v24, v25, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2082;
      id v26 = [v20 remObjectID];
      if (v26)
      {
        uint64_t v27 = v26;
        id v28 = [v26 description];

        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;
      }
      else
      {
        unint64_t v31 = 0xE300000000000000;
        uint64_t v29 = 7104878;
      }
      v37._uint64_t countAndFlagsBits = sub_1000C51B8(v29, v31, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }
  }
  return 0;
}

Swift::String __swiftcall REMCDAttachment.recordType()()
{
  uint64_t v0 = 0x656D686361747441;
  uint64_t v1 = (void *)0xEA0000000000746ELL;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

void sub_1003668C8(void *a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v3 - 8);
  v238 = ((char *)&v229 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = type metadata accessor for URL();
  Class isa = v5[-1].isa;
  os_log_t v240 = v5;
  v241 = isa;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v229 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v237 = (char *)&v229 - v10;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)&v229 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  os_log_t v235 = (os_log_t)((char *)&v229 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v229 - v18;
  __chkstk_darwin(v20);
  v242 = (char *)&v229 - v21;
  __chkstk_darwin(v22);
  v239 = (char *)&v229 - v23;
  __chkstk_darwin(v24);
  uint64_t v236 = (char *)&v229 - v25;
  __chkstk_darwin(v26);
  id v28 = (char *)&v229 - v27;
  __chkstk_darwin(v29);
  unint64_t v31 = (char *)&v229 - v30;
  self;
  uint64_t v32 = swift_dynamicCastObjCClass();
  if (!v32)
  {
    if (qword_100907348 != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    sub_10008E2DC(v77, (uint64_t)qword_100915830);
    id v244 = v1;
    id v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = (uint8_t *)swift_slowAlloc();
      id v245 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 136315138;
      uint64_t ObjectType = swift_getObjectType();
      sub_100094134(&qword_100915860);
      uint64_t v81 = String.init<A>(describing:)();
      uint64_t ObjectType = sub_1000C51B8(v81, v82, (uint64_t *)&v245);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Not a file attachment {Type: %s}", v80, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v93 = v244;
    }
    return;
  }
  uint64_t v33 = (void *)v32;
  uint64_t v233 = v15;
  uint64_t v234 = v14;
  id v34 = v1;
  id v243 = a1;
  id v35 = [a1 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  swift_unknownObjectRelease();
  if (!v246)
  {
    if (qword_100907348 != -1) {
      swift_once();
    }
    uint64_t v83 = type metadata accessor for Logger();
    sub_10008E2DC(v83, (uint64_t)qword_100915830);
    id v84 = v34;
    unint64_t v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v85, v86))
    {
      Class v87 = (uint8_t *)swift_slowAlloc();
      uint64_t ObjectType = swift_slowAlloc();
      *(_DWORD *)Class v87 = 136315138;
      id v88 = [v33 fileName];
      if (v88)
      {
        unint64_t v89 = v88;
        uint64_t v90 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v92 = v91;
      }
      else
      {
        uint64_t v90 = 0;
        uint64_t v92 = 0;
      }
      id v245 = v90;
      uint64_t v246 = v92;
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v113 = String.init<A>(describing:)();
      id v245 = (id)sub_1000C51B8(v113, v114, &ObjectType);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "Filename is not a string {value: %s}", v87, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return;
  }
  id v36 = v245;
  NSString v37 = String._bridgeToObjectiveC()();
  id v244 = v34;
  uint64_t v38 = v37;
  [v33 setFileName:v37];

  id v39 = v244;
  id v232 = [v244 remObjectID];
  if (!v232)
  {
    swift_bridgeObjectRelease();
    if (qword_100907348 != -1) {
      swift_once();
    }
    uint64_t v106 = type metadata accessor for Logger();
    sub_10008E2DC(v106, (uint64_t)qword_100915830);
    id v107 = v243;
    uint64_t v108 = Logger.logObject.getter();
    os_log_type_t v109 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v108, v109))
    {
      uint64_t v110 = (uint8_t *)swift_slowAlloc();
      uint64_t v111 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v110 = 138412290;
      id v245 = v107;
      id v112 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v111 = v107;

      _os_log_impl((void *)&_mh_execute_header, v108, v109, "File attachment has no remObjectID {record: %@}", v110, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return;
  }
  id v40 = [v39 account];
  if (!v40
    || (unint64_t v41 = v40, v42 = [v40 remObjectID], v41, !v42))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v233 + 56))(v13, 1, 1, v234);
    goto LABEL_29;
  }
  uint64_t v231 = v31;
  id v43 = [v42 uuid];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v233;
  uint64_t v45 = v234;
  v230 = *(void (**)(char *, char *, uint64_t))(v233 + 32);
  v230(v13, v28, v234);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v13, 0, 1, v45);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v13, 1, v45) == 1)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
    if (qword_100907348 != -1) {
      swift_once();
    }
    uint64_t v94 = type metadata accessor for Logger();
    sub_10008E2DC(v94, (uint64_t)qword_100915830);
    id v95 = v232;
    id v96 = v232;
    id v97 = v243;
    id v98 = v96;
    id v99 = v97;
    uint64_t v100 = Logger.logObject.getter();
    os_log_type_t v101 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v100, v101))
    {
      uint64_t v102 = swift_slowAlloc();
      uint64_t v103 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v102 = 138543618;
      id v245 = v98;
      id v104 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v103 = v95;

      *(_WORD *)(v102 + 12) = 2112;
      id v245 = v99;
      id v105 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v103[1] = v99;

      _os_log_impl((void *)&_mh_execute_header, v100, v101, "File attachment has no account {remObjectID: %{public}@, record: %@}", (uint8_t *)v102, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return;
  }
  v230(v231, v13, v45);
  id v46 = [v244 storeControllerManagedObjectContext];
  if (!v46
    || (Class v47 = v46,
        id v48 = (void (*)(char *, char *, uint64_t))[v46 storeController],
        v47,
        !v48))
  {
    swift_bridgeObjectRelease();
    id v115 = v243;
    if (qword_100907348 != -1) {
      swift_once();
    }
    uint64_t v116 = type metadata accessor for Logger();
    sub_10008E2DC(v116, (uint64_t)qword_100915830);
    uint64_t v117 = v233;
    uint64_t v118 = v234;
    uint64_t v119 = v231;
    (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v19, v231, v234);
    id v120 = v232;
    id v121 = v232;
    id v122 = v115;
    id v123 = v121;
    id v124 = v122;
    uint64_t v125 = Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.error.getter();
    int v127 = v126;
    if (os_log_type_enabled(v125, v126))
    {
      uint64_t v128 = swift_slowAlloc();
      uint64_t v129 = swift_slowAlloc();
      v241 = v125;
      uint64_t v130 = (void *)v129;
      id v243 = (id)swift_slowAlloc();
      id v245 = v243;
      *(_DWORD *)uint64_t v128 = 138543874;
      LODWORD(v240) = v127;
      uint64_t ObjectType = (uint64_t)v123;
      uint64_t v131 = (char *)v123;
      v242 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v130 = v120;

      *(_WORD *)(v128 + 12) = 2082;
      sub_10036BB34();
      uint64_t v132 = v234;
      uint64_t v133 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t ObjectType = sub_1000C51B8(v133, v134, (uint64_t *)&v245);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v135 = *(void (**)(char *, uint64_t))(v117 + 8);
      v135(v19, v132);
      *(_WORD *)(v128 + 22) = 2112;
      uint64_t ObjectType = (uint64_t)v124;
      id v136 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v130[1] = v124;

      uint64_t v137 = v241;
      _os_log_impl((void *)&_mh_execute_header, v241, (os_log_type_t)v240, "No store controller for updating file attachment {remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}", (uint8_t *)v128, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v135(v231, v132);
    }
    else
    {

      uint64_t v138 = *(void (**)(char *, uint64_t))(v117 + 8);
      v138(v19, v118);

      v138(v119, v118);
    }
    return;
  }
  id v229 = v36;
  id v49 = v243;
  uint64_t v50 = CKRecord.subscript.getter();
  unint64_t v51 = v231;
  v230 = v48;
  if (!v50)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    if (qword_100907348 != -1) {
      swift_once();
    }
    uint64_t v139 = type metadata accessor for Logger();
    sub_10008E2DC(v139, (uint64_t)qword_100915830);
    uint64_t v140 = v233;
    uint64_t v141 = v234;
    uint64_t v142 = v242;
    (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v242, v51, v234);
    id v143 = v232;
    id v144 = v232;
    id v145 = v49;
    id v146 = v144;
    id v147 = v145;
    id v148 = Logger.logObject.getter();
    os_log_type_t v149 = static os_log_type_t.error.getter();
    int v150 = v149;
    if (os_log_type_enabled(v148, v149))
    {
      uint64_t v151 = swift_slowAlloc();
      v152 = (void *)swift_slowAlloc();
      id v243 = (id)swift_slowAlloc();
      id v245 = v243;
      *(_DWORD *)uint64_t v151 = 138543874;
      os_log_t v240 = v148;
      uint64_t ObjectType = (uint64_t)v146;
      LODWORD(v239) = v150;
      uint64_t v153 = v146;
      v238 = v153;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v152 = v143;

      *(_WORD *)(v151 + 12) = 2082;
      sub_10036BB34();
      id v154 = v242;
      uint64_t v155 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t ObjectType = sub_1000C51B8(v155, v156, (uint64_t *)&v245);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v241 = *(NSObject **)(v140 + 8);
      ((void (*)(char *, uint64_t))v241)(v154, v141);
      *(_WORD *)(v151 + 22) = 2112;
      uint64_t ObjectType = (uint64_t)v147;
      id v157 = v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v152[1] = v147;

      os_log_t v158 = v240;
      _os_log_impl((void *)&_mh_execute_header, v240, (os_log_type_t)v239, "File asset missing for file attachment {remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}", (uint8_t *)v151, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v241)(v231, v234);
      return;
    }

    v159 = *(void (**)(char *, uint64_t))(v140 + 8);
    v159(v142, v141);

    uint64_t v160 = v231;
    goto LABEL_53;
  }
  unint64_t v52 = (char *)v50;
  self;
  unint64_t v53 = (void *)swift_dynamicCastObjCClass();
  if (!v53)
  {
    swift_unknownObjectRelease();
    goto LABEL_48;
  }
  v242 = v52;
  id v54 = [v53 fileURL];
  if (v54)
  {
    char v55 = v54;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_t v57 = v240;
    id v56 = v241;
    id v58 = (void (*)(NSObject *, char *, os_log_t))v241[4].isa;
    unint64_t v59 = v238;
    v58(v238, v8, v240);
    ((void (*)(NSObject *, void, uint64_t, os_log_t))v56[7].isa)(v59, 0, 1, v57);
    if (((unsigned int (*)(NSObject *, uint64_t, os_log_t))v56[6].isa)(v59, 1, v57) != 1)
    {
      uint64_t v60 = v237;
      v58(v237, (char *)v59, v57);
      static REMFileDigester.sha512Sum(url:)();
      if (v61)
      {
        NSString v62 = String._bridgeToObjectiveC()();
        [v33 setSha512Sum:v62];

        id v63 = v232;
        id v64 = [v232 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class v65 = UUID._bridgeToObjectiveC()().super.isa;
        id v66 = (v233 + 8);
        v239 = *(char **)(v233 + 8);
        ((void (*)(char *, uint64_t))v239)(v28, v234);
        Class v67 = UUID._bridgeToObjectiveC()().super.isa;
        id v68 = v60;
        NSString v69 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v70 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        URL._bridgeToObjectiveC()(v71);
        unint64_t v73 = v72;
        id v245 = 0;
        id v74 = v230;
        unsigned int v75 = [v230 updateAttachmentFile:v65 accountID:v67 fileName:v69 sha512Sum:v70 fileURL:v72 keepSource:0 error:&v245];

        id v76 = v245;
        if (v75)
        {

          swift_unknownObjectRelease();
          ((void (*)(char *, os_log_t))v241[1].isa)(v68, v240);
          ((void (*)(char *, uint64_t))v239)(v231, v234);
        }
        else
        {
          id v203 = v76;
          v238 = v66;
          uint64_t v204 = v231;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          if (qword_100907348 != -1) {
            swift_once();
          }
          uint64_t v205 = type metadata accessor for Logger();
          sub_10008E2DC(v205, (uint64_t)qword_100915830);
          uint64_t v206 = v234;
          os_log_t v207 = v235;
          (*(void (**)(os_log_t, char *, uint64_t))(v233 + 16))(v235, v204, v234);
          id v208 = v232;
          id v209 = v232;
          id v210 = v243;
          swift_errorRetain();
          id v211 = v209;
          id v212 = v210;
          swift_errorRetain();
          unint64_t v213 = Logger.logObject.getter();
          os_log_type_t v214 = static os_log_type_t.error.getter();
          int v215 = v214;
          if (os_log_type_enabled(v213, v214))
          {
            uint64_t v216 = swift_slowAlloc();
            v217 = (void *)swift_slowAlloc();
            id v243 = (id)swift_slowAlloc();
            id v245 = v243;
            *(_DWORD *)uint64_t v216 = 136315906;
            swift_getErrorValue();
            LODWORD(v233) = v215;
            uint64_t v218 = Error.rem_errorDescription.getter();
            uint64_t ObjectType = sub_1000C51B8(v218, v219, (uint64_t *)&v245);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            *(_WORD *)(v216 + 12) = 2114;
            uint64_t ObjectType = (uint64_t)v211;
            v220 = (char *)v211;
            uint64_t v236 = v220;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v217 = v208;

            *(_WORD *)(v216 + 22) = 2082;
            sub_10036BB34();
            uint64_t v221 = v234;
            os_log_t v222 = v235;
            uint64_t v223 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t ObjectType = sub_1000C51B8(v223, v224, (uint64_t *)&v245);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v225 = v221;
            v226 = v239;
            ((void (*)(os_log_t, uint64_t))v239)(v222, v225);
            *(_WORD *)(v216 + 32) = 2112;
            uint64_t ObjectType = (uint64_t)v212;
            id v227 = v212;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v217[1] = v212;

            _os_log_impl((void *)&_mh_execute_header, v213, (os_log_type_t)v233, "Failed to update attachment file {error: %s, remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}", (uint8_t *)v216, 0x2Au);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_unknownObjectRelease();
            swift_errorRelease();

            ((void (*)(char *, os_log_t))v241[1].isa)(v237, v240);
            ((void (*)(char *, uint64_t))v226)(v231, v234);
          }
          else
          {

            swift_unknownObjectRelease();
            uint64_t v228 = v239;
            ((void (*)(os_log_t, uint64_t))v239)(v207, v206);

            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();

            ((void (*)(char *, os_log_t))v241[1].isa)(v237, v240);
            ((void (*)(char *, uint64_t))v228)(v204, v206);
          }
        }
        return;
      }
      swift_bridgeObjectRelease();
      if (qword_100907348 != -1) {
        swift_once();
      }
      uint64_t v181 = type metadata accessor for Logger();
      sub_10008E2DC(v181, (uint64_t)qword_100915830);
      uint64_t v182 = v233;
      uint64_t v141 = v234;
      uint64_t v183 = v236;
      (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v236, v51, v234);
      id v184 = v232;
      id v185 = v232;
      id v186 = v243;
      id v187 = v185;
      id v188 = v186;
      uint64_t v189 = v51;
      id v190 = v188;
      id v191 = Logger.logObject.getter();
      os_log_type_t v192 = static os_log_type_t.error.getter();
      int v193 = v192;
      if (os_log_type_enabled(v191, v192))
      {
        uint64_t v194 = swift_slowAlloc();
        uint64_t v195 = (void *)swift_slowAlloc();
        id v243 = (id)swift_slowAlloc();
        id v245 = v243;
        *(_DWORD *)uint64_t v194 = 138543874;
        os_log_t v235 = v191;
        LODWORD(v238) = v193;
        uint64_t ObjectType = (uint64_t)v187;
        v196 = (char *)v187;
        v239 = v196;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v195 = v184;

        *(_WORD *)(v194 + 12) = 2082;
        sub_10036BB34();
        unint64_t v197 = v236;
        uint64_t v198 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t ObjectType = sub_1000C51B8(v198, v199, (uint64_t *)&v245);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v200 = *(void (**)(char *, uint64_t))(v182 + 8);
        v200(v197, v141);
        *(_WORD *)(v194 + 22) = 2112;
        uint64_t ObjectType = (uint64_t)v190;
        id v201 = v190;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v195[1] = v190;

        os_log_t v202 = v235;
        _os_log_impl((void *)&_mh_execute_header, v235, (os_log_type_t)v238, "Could not generate sha512Sum from file asset {remObjectID: %{public}@, accountUUID: %{public}s, record: %@}", (uint8_t *)v194, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_unknownObjectRelease();
        ((void (*)(char *, os_log_t))v241[1].isa)(v237, v240);
        v200(v231, v141);
        return;
      }

      swift_unknownObjectRelease();
      v159 = *(void (**)(char *, uint64_t))(v182 + 8);
      v159(v183, v141);

      ((void (*)(char *, os_log_t))v241[1].isa)(v237, v240);
      uint64_t v160 = v189;
LABEL_53:
      v159(v160, v141);
      return;
    }
  }
  else
  {
    unint64_t v59 = v238;
    ((void (*)(NSObject *, uint64_t, uint64_t, os_log_t))v241[7].isa)(v238, 1, 1, v240);
  }
  swift_bridgeObjectRelease();
  sub_1000966BC((uint64_t)v59, (uint64_t *)&unk_100909E40);
  if (qword_100907348 != -1) {
    swift_once();
  }
  uint64_t v161 = type metadata accessor for Logger();
  sub_10008E2DC(v161, (uint64_t)qword_100915830);
  uint64_t v163 = v233;
  uint64_t v162 = v234;
  NSString v164 = v239;
  (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v239, v51, v234);
  id v165 = v232;
  id v166 = v232;
  id v167 = v243;
  id v168 = v166;
  id v169 = v167;
  v170 = Logger.logObject.getter();
  os_log_type_t v171 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v170, v171))
  {
    uint64_t v172 = swift_slowAlloc();
    uint64_t v173 = (void *)swift_slowAlloc();
    id v243 = (id)swift_slowAlloc();
    id v245 = v243;
    *(_DWORD *)uint64_t v172 = 138543874;
    v238 = v170;
    uint64_t ObjectType = (uint64_t)v168;
    uint64_t v174 = v168;
    v241 = v174;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v173 = v165;

    *(_WORD *)(v172 + 12) = 2082;
    sub_10036BB34();
    uint64_t v175 = v239;
    uint64_t v176 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t ObjectType = sub_1000C51B8(v176, v177, (uint64_t *)&v245);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v240 = *(os_log_t *)(v233 + 8);
    ((void (*)(char *, uint64_t))v240)(v175, v162);
    *(_WORD *)(v172 + 22) = 2112;
    uint64_t ObjectType = (uint64_t)v169;
    id v178 = v169;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v173[1] = v169;

    id v179 = v238;
    _os_log_impl((void *)&_mh_execute_header, v238, v171, "File asset missing fileURL for file attachment {remObjectID: %{public}@, accountUUID: %{public}s, record: %@}", (uint8_t *)v172, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_unknownObjectRelease();
    ((void (*)(char *, uint64_t))v240)(v231, v234);
  }
  else
  {

    swift_unknownObjectRelease();
    uint64_t v180 = *(void (**)(char *, uint64_t))(v163 + 8);
    v180(v164, v162);

    v180(v231, v162);
  }
}

void sub_10036887C(void *a1)
{
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = v1;
    sub_1003668C8(a1);
    sub_1000963CC(0, (unint64_t *)&qword_100909E80);
    CKRecordKeyValueSetting.subscript.getter();
    if (v15) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v14;
    }
    [v4 setFileSize:v12];
  }
  else
  {
    if (qword_100907348 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_100915830);
    id v13 = v1;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t ObjectType = swift_getObjectType();
      sub_100094134(&qword_100915860);
      uint64_t v10 = String.init<A>(describing:)();
      uint64_t ObjectType = sub_1000C51B8(v10, v11, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Record.type is file but this is not a file attachment object {type: %s}", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_100368BB0()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    id v3 = v0;
    sub_1000963CC(0, (unint64_t *)&qword_100909E80);
    CKRecordKeyValueSetting.subscript.getter();
    if (BYTE2(v13)) {
      __int16 v10 = 0;
    }
    else {
      __int16 v10 = v13;
    }
    [v2 setHeight:v10];
    sub_1000963CC(0, (unint64_t *)&qword_100909E80);
    CKRecordKeyValueSetting.subscript.getter();
    if (BYTE2(v13)) {
      __int16 v11 = 0;
    }
    else {
      __int16 v11 = v13;
    }
    [v2 setWidth:v11];
  }
  else
  {
    if (qword_100907348 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_100915830);
    id v12 = v0;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_getObjectType();
      sub_100094134(&qword_100915860);
      uint64_t v8 = String.init<A>(describing:)();
      sub_1000C51B8(v8, v9, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Record.type is image but this is not an image attachment {type: %s}", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_100368F78(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v7 = swift_dynamicCastObjCClass();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    id v9 = v2;
    for (uint64_t i = 0; i != 3; ++i)
    {
      if (*((unsigned char *)&off_1008B6720 + i + 32))
      {
        if (*((unsigned char *)&off_1008B6720 + i + 32) != 1)
        {
          id v11 = [a1 encryptedValues];
          NSString v12 = String._bridgeToObjectiveC()();
          id v13 = [v11 objectForKeyedSubscript:v12];
          swift_unknownObjectRelease();

          if (v13 && (uint64_t ObjectType = (uint64_t)v13, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) != 0))
          {
            URL.init(string:)();
            swift_bridgeObjectRelease();
            uint64_t v14 = type metadata accessor for URL();
            uint64_t v15 = *(void *)(v14 - 8);
            uint64_t v17 = 0;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v6, 1, v14) != 1)
            {
              URL._bridgeToObjectiveC()(v16);
              uint64_t v17 = v18;
              (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v14);
            }
            [v8 setUrl:v17];
          }
          else
          {
            [v8 setUrl:0];
          }
        }
      }
      else
      {
        sub_1004C1A54(a1, 0x617461646174654DLL, 1, &v30);
        unint64_t v19 = *((void *)&v30 + 1);
        if (*((void *)&v30 + 1) >> 60 == 15)
        {
          Class isa = 0;
        }
        else
        {
          uint64_t v21 = v30;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F20(v21, v19);
        }
        [v8 setMetadata:isa];
      }
    }
  }
  else
  {
    if (qword_100907348 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100915830);
    id v29 = v2;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t ObjectType = swift_getObjectType();
      sub_100094134(&qword_100915860);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t ObjectType = sub_1000C51B8(v26, v27, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Record.type is url but this is not a URL attachment {type: %s}", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v28 = v29;
    }
  }
}

Swift::Void __swiftcall REMCDAttachment.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  id v3 = v2;
  NSString v5 = String._bridgeToObjectiveC()();
  v25.receiver = v3;
  v25.super_class = (Class)REMCDAttachment;
  [super mergeDataFromRecord:from.super.isa accountID:v5];

  id v6 = [(objc_class *)from.super.isa recordID];
  NSString v7 = [v6 recordName];

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v8 = [v3 ckIdentifierFromRecordName:v7];

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setCkIdentifier:v8];

  if (CKRecord.subscript.getter())
  {
    self;
    id v9 = (void *)swift_dynamicCastObjCClass();
    if (!v9) {
      swift_unknownObjectRelease();
    }
  }
  else
  {
    id v9 = 0;
  }
  id v10 = sub_1000C497C(v9);
  if (v10)
  {
    id v11 = v10;
    self;
    NSString v12 = (void *)swift_dynamicCastObjCClass();
    if (!v12) {
  }
    }
  else
  {
    NSString v12 = 0;
  }

  [v3 setReminder:v12];
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  if (v23._object)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v13 = 0;
  }
  [v3 setUti:v13];

  uint64_t v14 = CKRecord.subscript.getter();
  if (v14 && (uint64_t v24 = v14, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t countAndFlagsBits = v23._countAndFlagsBits;
    object = v23._object;
    swift_bridgeObjectRetain();
    Swift::Int v17 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B6608, v23);
    swift_bridgeObjectRelease();
    switch(v17)
    {
      case 0:
        swift_bridgeObjectRelease();
        sub_10036887C(from.super.isa);
        return;
      case 2:
        swift_bridgeObjectRelease();
        sub_100368F78(from.super.isa);
        return;
      case 1:
        swift_bridgeObjectRelease();
        sub_10036887C(from.super.isa);
        sub_100368BB0();
        return;
    }
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = 0;
  }
  if (qword_100907348 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_100915830);
  swift_bridgeObjectRetain();
  unint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    v23._uint64_t countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    if (object)
    {
      unint64_t v22 = (unint64_t)object;
    }
    else
    {
      uint64_t countAndFlagsBits = 7104878;
      unint64_t v22 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_1000C51B8(countAndFlagsBits, v22, &v23._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "mergeData: Unknown attachment type {type: %s}", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_100369AA4(void *a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v91 = (char *)&v85 - v15;
  self;
  uint64_t v16 = swift_dynamicCastObjCClass();
  if (v16)
  {
    Swift::Int v17 = (void *)v16;
    uint64_t v89 = v3;
    uint64_t v90 = v11;
    Class v87 = v6;
    uint64_t v88 = v4;
    id v92 = v1;
    id v18 = [a1 encryptedValues];
    id v19 = [v17 fileName];
    if (v19)
    {
      os_log_type_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = a1;
      uint64_t v24 = v23;

      *((void *)&v94 + 1) = &type metadata for String;
      id v95 = &protocol witness table for String;
      *(void *)&long long v93 = v21;
      *((void *)&v93 + 1) = v24;
      a1 = v22;
    }
    else
    {
      id v95 = 0;
      long long v93 = 0u;
      long long v94 = 0u;
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    id v31 = [v17 fileName];
    if (v31)
    {
      uint64_t v32 = v31;
      id v33 = [v92 storeControllerManagedObjectContext];
      if (v33
        && (id v34 = v33,
            id v35 = (char *)[v33 storeController],
            v34,
            v35))
      {
        id v86 = [v92 remObjectID];
        if (v86)
        {
          id v85 = a1;
          id v36 = [v92 account];
          if (v36
            && (NSString v37 = v36,
                id v38 = [v36 remObjectID],
                v37,
                v38))
          {
            id v39 = [v38 uuid];

            static UUID._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v40 = v90;
            unint64_t v41 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
            v41(v9, v13, v10);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v9, 0, 1, v10);
            uint64_t v42 = v40;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v9, 1, v10) != 1)
            {
              v41(v91, v9, v10);
              id v43 = [v86 uuid];
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              Class isa = UUID._bridgeToObjectiveC()().super.isa;
              uint64_t v45 = *(void (**)(char *, uint64_t))(v42 + 8);
              v45(v13, v10);
              id v46 = v91;
              Class v47 = UUID._bridgeToObjectiveC()().super.isa;
              id v48 = [v17 sha512Sum];
              id v49 = [v35 URLForAttachmentFile:isa accountID:v47 fileName:v32 sha512Sum:v48];

              uint64_t v50 = v87;
              static URL._unconditionallyBridgeFromObjectiveC(_:)();

              id v51 = objc_allocWithZone((Class)CKAsset);
              URL._bridgeToObjectiveC()(v52);
              id v54 = v53;
              id v55 = [v51 initWithFileURL:v53];

              (*(void (**)(char *, uint64_t))(v88 + 8))(v50, v89);
              v45(v46, v10);
              id v56 = v55;
              CKRecord.subscript.setter();

LABEL_40:
              return;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v9, 1, 1, v10);
          }
          uint64_t v91 = v35;

          sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
          if (qword_100907348 != -1) {
            swift_once();
          }
          uint64_t v65 = type metadata accessor for Logger();
          sub_10008E2DC(v65, (uint64_t)qword_100915830);
          id v66 = v86;
          id v67 = v86;
          id v68 = v85;
          NSString v69 = v67;
          id v70 = v68;
          unint64_t v71 = Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v71, v72))
          {
            uint64_t v73 = swift_slowAlloc();
            id v74 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v73 = 138543618;
            *(void *)&long long v93 = v69;
            NSString v69 = v69;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *id v74 = v66;

            *(_WORD *)(v73 + 12) = 2112;
            *(void *)&long long v93 = v70;
            id v75 = v70;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v74[1] = v70;

            _os_log_impl((void *)&_mh_execute_header, v71, v72, "File attachment has no account {remObjectID: %{public}@, record: %@}", (uint8_t *)v73, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            id v76 = v91;
          }
          else
          {

            unint64_t v71 = v69;
            id v76 = v69;
          }
        }
        else
        {

          if (qword_100907348 != -1) {
            swift_once();
          }
          uint64_t v77 = type metadata accessor for Logger();
          sub_10008E2DC(v77, (uint64_t)qword_100915830);
          id v78 = a1;
          os_log_type_t v79 = Logger.logObject.getter();
          os_log_type_t v80 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v79, v80))
          {
            uint64_t v81 = (uint8_t *)swift_slowAlloc();
            unint64_t v82 = v35;
            uint64_t v83 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v81 = 138412290;
            *(void *)&long long v93 = v78;
            id v84 = v78;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v83 = v78;

            _os_log_impl((void *)&_mh_execute_header, v79, v80, "File attachment has no remObjectID {record: %@}", v81, 0xCu);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
        }
      }
      else
      {

        if (qword_100907348 != -1) {
          swift_once();
        }
        uint64_t v57 = type metadata accessor for Logger();
        sub_10008E2DC(v57, (uint64_t)qword_100915830);
        id v58 = a1;
        unint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = (uint8_t *)swift_slowAlloc();
          NSString v62 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v61 = 138412290;
          *(void *)&long long v93 = v58;
          id v63 = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *NSString v62 = v58;

          _os_log_impl((void *)&_mh_execute_header, v59, v60, "No store controller for updating file attachment {record: %@}", v61, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      CKRecord.subscript.setter();
      goto LABEL_40;
    }
    CKRecord.subscript.setter();
  }
  else
  {
    if (qword_100907348 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_100915830);
    id v92 = v1;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v93 = swift_slowAlloc();
      *(_DWORD *)id v28 = 136315138;
      uint64_t ObjectType = swift_getObjectType();
      sub_100094134(&qword_100915860);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t ObjectType = sub_1000C51B8(v29, v30, (uint64_t *)&v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Not a file attachment {Type: %s}", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  id v64 = v92;
}

CKRecord_optional __swiftcall REMCDAttachment.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v55 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v9 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v11 = (char *)&v52 - v10;
  v59.receiver = v1;
  v59.super_class = (Class)REMCDAttachment;
  id v13 = [super newlyCreatedRecord:v9];
  if (v13)
  {
    unint64_t v53 = v4;
    id v14 = [v1 uti];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      *((void *)&v57 + 1) = &type metadata for String;
      id v58 = &protocol witness table for String;
      *(void *)&long long v56 = v16;
      *((void *)&v56 + 1) = v18;
    }
    else
    {
      id v58 = 0;
      long long v56 = 0u;
      long long v57 = 0u;
    }
    sub_1000963CC(0, (unint64_t *)&qword_100909E80);
    CKRecordKeyValueSetting.subscript.setter();
    id v19 = [v1 reminder];
    if (v19)
    {
      os_log_type_t v20 = v19;
      id v21 = [v19 recordID];
    }
    else
    {
      id v21 = 0;
    }
    id v22 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v21];

    CKRecord.subscript.setter();
    self;
    uint64_t v23 = swift_dynamicCastObjCClass();
    if (v23)
    {
      uint64_t v24 = (void *)v23;
      *((void *)&v57 + 1) = &type metadata for String;
      id v58 = &protocol witness table for String;
      *(void *)&long long v56 = 1701603654;
      *((void *)&v56 + 1) = 0xE400000000000000;
      id v25 = v1;
      CKRecordKeyValueSetting.subscript.setter();
      id v26 = [v24 fileSize];
      *((void *)&v57 + 1) = &type metadata for Int64;
      id v58 = &protocol witness table for Int64;
      *(void *)&long long v56 = v26;
      CKRecordKeyValueSetting.subscript.setter();
      sub_100369AA4(v13);
    }
    self;
    uint64_t v27 = swift_dynamicCastObjCClass();
    if (v27)
    {
      id v28 = (void *)v27;
      *((void *)&v57 + 1) = &type metadata for String;
      id v58 = &protocol witness table for String;
      *(void *)&long long v56 = 0x6567616D49;
      *((void *)&v56 + 1) = 0xE500000000000000;
      id v54 = v1;
      CKRecordKeyValueSetting.subscript.setter();
      unsigned __int16 v29 = (unsigned __int16)[v28 width];
      *((void *)&v57 + 1) = &type metadata for Int16;
      id v58 = &protocol witness table for Int16;
      LOWORD(v56) = v29;
      CKRecordKeyValueSetting.subscript.setter();
      unsigned __int16 v30 = (unsigned __int16)[v28 height];
      *((void *)&v57 + 1) = &type metadata for Int16;
      id v58 = &protocol witness table for Int16;
      LOWORD(v56) = v30;
      CKRecordKeyValueSetting.subscript.setter();
    }
    self;
    uint64_t v31 = swift_dynamicCastObjCClass();
    if (v31)
    {
      uint64_t v32 = (void *)v31;
      *((void *)&v57 + 1) = &type metadata for String;
      id v58 = &protocol witness table for String;
      *(void *)&long long v56 = 5001813;
      *((void *)&v56 + 1) = 0xE300000000000000;
      id v33 = v1;
      CKRecordKeyValueSetting.subscript.setter();
      [v13 encryptedValues];
      id v34 = [v32 url];
      if (v34)
      {
        id v35 = v34;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v36 = 0;
      }
      else
      {
        uint64_t v36 = 1;
      }
      uint64_t v37 = v55;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v7, v36, 1, v2);
      sub_10036B73C((uint64_t)v7, (uint64_t)v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v11, 1, v2))
      {
        sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E40);
        long long v56 = 0u;
        long long v57 = 0u;
        id v58 = 0;
      }
      else
      {
        uint64_t v38 = v55;
        id v39 = v53;
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v53, v11, v2);
        sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E40);
        uint64_t v40 = URL.absoluteString.getter();
        uint64_t v42 = v41;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v2);
        *((void *)&v57 + 1) = &type metadata for String;
        id v58 = &protocol witness table for String;
        *(void *)&long long v56 = v40;
        *((void *)&v56 + 1) = v42;
      }
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.setter();
      swift_unknownObjectRelease();
      id v43 = [v32 metadata];
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v47 = v46;

        uint64_t v48 = 0;
        switch(v47 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v45), v45))
            {
              __break(1u);
LABEL_29:
              __break(1u);
              JUMPOUT(0x10036ADC0);
            }
            uint64_t v48 = HIDWORD(v45) - (int)v45;
            break;
          case 2uLL:
            uint64_t v50 = *(void *)(v45 + 16);
            uint64_t v49 = *(void *)(v45 + 24);
            uint64_t v48 = v49 - v50;
            if (!__OFSUB__(v49, v50)) {
              break;
            }
            goto LABEL_29;
          case 3uLL:
            break;
          default:
            uint64_t v48 = BYTE6(v47);
            break;
        }
      }
      else
      {
        uint64_t v48 = 0;
        uint64_t v45 = 0;
        unint64_t v47 = 0xF000000000000000;
      }
      sub_1004D0F28(v45, v47, v48, v13, 0x617461646174654DLL, 0xE800000000000000, 0x617461646174654DLL, 0xED00007465737341, 1, 1uLL);
      sub_100097F20(v45, v47);
    }
  }
  id v51 = (objc_class *)v13;
  result.value.super.Class isa = v51;
  result.is_nil = v12;
  return result;
}

Swift::Void __swiftcall REMCDAttachment.cleanUpAfterLocalObjectMerge()()
{
  if (qword_100907348 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100915830);
  id v7 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100915860);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Void __swiftcall REMCDAttachment.fixBrokenReferences()()
{
  if (qword_100907348 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100915830);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &selRef_intersectsSet_;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  uint64_t v6 = swift_slowAlloc();
  uint64_t v43 = swift_slowAlloc();
  *(_DWORD *)uint64_t v6 = 136446466;
  id v7 = [v2 remObjectID];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 description];

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  sub_1000C51B8(v10, v12, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v6 + 12) = 2082;
  id v13 = [v2 reminder];
  if (!v13) {
    goto LABEL_12;
  }
  id v14 = v13;
  id v15 = [v13 remObjectID];
  if (!v15)
  {

LABEL_12:
    unint64_t v20 = 0xE300000000000000;
    uint64_t v5 = &selRef_intersectsSet_;
    uint64_t v21 = 7104878;
    goto LABEL_13;
  }
  uint64_t v16 = v15;
  id v17 = [v15 description];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  uint64_t v21 = v18;
  uint64_t v5 = &selRef_intersectsSet_;
LABEL_13:
  sub_1000C51B8(v21, v20, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for attachment {attachmentID: %{public}s, reminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  id v22 = [v2 v5[467]];
  if (v22)
  {
    uint64_t v23 = v22;
    if ([v22 markedForDeletion]
      && ([v2 markedForDeletion] & 1) == 0)
    {
      id v24 = v2;
      id v25 = v23;
      id v26 = v24;
      id v27 = v25;
      id v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446466;
        id v31 = [v26 remObjectID];
        if (v31)
        {
          uint64_t v32 = v31;
          id v33 = [v31 description];

          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;
        }
        else
        {
          unint64_t v36 = 0xE300000000000000;
          uint64_t v34 = 7104878;
        }
        sub_1000C51B8(v34, v36, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2082;
        id v37 = [v27 remObjectID];
        if (v37)
        {
          uint64_t v38 = v37;
          id v39 = [v37 description];

          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;
        }
        else
        {
          unint64_t v42 = 0xE300000000000000;
          uint64_t v40 = 7104878;
        }
        sub_1000C51B8(v40, v42, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Reminder is marked for deletion but attachment is not {attachmentID: %{public}s, reminderID: %{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v26 markForDeletion];
    }
    [v23 forcePushToCloud];
  }
}

uint64_t sub_10036B73C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sSo15REMCDAttachmentC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_100907348 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100915830);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100915860);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _sSo15REMCDAttachmentC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_100907348 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100915830);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100915860);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

unint64_t sub_10036BB34()
{
  unint64_t result = qword_10090FC50;
  if (!qword_10090FC50)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090FC50);
  }
  return result;
}

id static REMCDTemplate.fetchRequest()()
{
  id v0 = [self cdEntityName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v1 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithEntityName:v2];

  return v3;
}

uint64_t sub_10036BC2C(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134(&qword_100915880);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0DE0(a1, a1[3]);
  sub_10036C480();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = a2;
  v10[7] = 0;
  type metadata accessor for REMDueDateDeltaInterval_Codable();
  sub_10036C4D4(&qword_100915888);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[6] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[5] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10036BE04()
{
  unint64_t v1 = 0xD000000000000026;
  if (*v0 != 1) {
    unint64_t v1 = 0xD00000000000001ALL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4465746144657564;
  }
}

uint64_t sub_10036BE74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10036C0CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10036BE9C(uint64_t a1)
{
  unint64_t v2 = sub_10036C480();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036BED8(uint64_t a1)
{
  unint64_t v2 = sub_10036C480();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_10036BF14(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  double v4 = *(double *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  sub_100121F2C();
  char v6 = static NSObject.== infix(_:_:)();
  BOOL result = 0;
  if ((v6 & 1) != 0 && v2 == v4) {
    return v3 == v5;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RDSavedDueDateDeltaAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for RDSavedDueDateDeltaAlert(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RDSavedDueDateDeltaAlert(uint64_t a1, void *a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for RDSavedDueDateDeltaAlert()
{
  return &type metadata for RDSavedDueDateDeltaAlert;
}

void sub_10036C074(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v6 = sub_10036C234(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(double *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v5;
  }
}

uint64_t sub_10036C0A8(void *a1)
{
  return sub_10036BC2C(a1, *v1);
}

uint64_t sub_10036C0CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4465746144657564 && a2 == 0xEC00000061746C65;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x80000001007D23B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001007C6B40)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

double sub_10036C234(void *a1)
{
  uint64_t v4 = sub_100094134(&qword_100915868);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0DE0(a1, a1[3]);
  sub_10036C480();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  else
  {
    type metadata accessor for REMDueDateDeltaInterval_Codable();
    v11[15] = 0;
    sub_10036C4D4(&qword_100915878);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11[14] = 1;
    id v9 = v12;
    KeyedDecodingContainer.decode(_:forKey:)();
    double v2 = v10;
    v11[13] = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  return v2;
}

unint64_t sub_10036C480()
{
  unint64_t result = qword_100915870;
  if (!qword_100915870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915870);
  }
  return result;
}

uint64_t sub_10036C4D4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for REMDueDateDeltaInterval_Codable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RDSavedDueDateDeltaAlert.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10036C5E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedDueDateDeltaAlert.CodingKeys()
{
  return &type metadata for RDSavedDueDateDeltaAlert.CodingKeys;
}

unint64_t sub_10036C620()
{
  unint64_t result = qword_100915890;
  if (!qword_100915890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915890);
  }
  return result;
}

unint64_t sub_10036C678()
{
  unint64_t result = qword_100915898;
  if (!qword_100915898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915898);
  }
  return result;
}

unint64_t sub_10036C6D0()
{
  unint64_t result = qword_1009158A0;
  if (!qword_1009158A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009158A0);
  }
  return result;
}

uint64_t sub_10036C728(uint64_t a1)
{
  uint64_t result = sub_10036E3D8(&qword_1009158E0, (void (*)(uint64_t))&type metadata accessor for REMRemindersInCalendarDataView.Invocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10036C780()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009158A8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009158A8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10036C848(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v38 = a4;
  uint64_t v39 = a3;
  uint64_t v6 = type metadata accessor for REMRemindersInCalendarDataView.RemindersInCalendarResult.RemindersResult.IncrementalResult();
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = _s10PredicatesOMa(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMRemindersInCalendarDataView.RemindersInCalendarResult.RemindersResult();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12);
  unint64_t v35 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v32 - v15);
  id v17 = v40;
  uint64_t v18 = sub_10036CB80(a1, a2);
  if (!v17)
  {
    unint64_t v20 = v19;
    uint64_t v40 = v16;
    uint64_t v33 = v6;
    if (v18)
    {
      uint64_t v21 = v18;
      id v22 = v18;
      uint64_t v23 = v20;
      id v24 = v20;
      id v25 = v8;
      sub_10036CF24((uint64_t)a1, v22, (uint64_t)v8);

      id v27 = v21;
      id v28 = v40;
      (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 32))(v40, v25, v33);
      os_log_type_t v29 = (unsigned int *)&enum case for REMRemindersInCalendarDataView.RemindersInCalendarResult.RemindersResult.incremental(_:);
      unint64_t v20 = v23;
    }
    else
    {
      id v27 = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v26 = sub_10036E204((uint64_t)a1);
      sub_1000C6DAC((uint64_t)v11);
      id v28 = v40;
      *uint64_t v40 = v26;
      os_log_type_t v29 = (unsigned int *)&enum case for REMRemindersInCalendarDataView.RemindersInCalendarResult.RemindersResult.reload(_:);
    }
    uint64_t v31 = v36;
    uint64_t v30 = v37;
    (*(void (**)(uint64_t *, void, uint64_t))(v36 + 104))(v28, *v29, v37);
    (*(void (**)(char *, uint64_t *, uint64_t))(v31 + 16))(v35, v28, v30);
    REMRemindersInCalendarDataView.Invocation.Result.init(remindersResult:predicateVersion:)();
    sub_10036E1C4(v27, v20);
    (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v28, v30);
  }
}

void *sub_10036CB80(void *a1, void *a2)
{
  id v5 = [v2 fetchResultTokenToDiffAgainst];
  if (!v5)
  {
    if (qword_100907350 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_1009158A8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "RemindersInCalendarInvocation: missing fetchResultTokenToDiffAgainst, will use reload mode", v13, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v6 = v5;
  uint64_t Predicate = REMRemindersInCalendarDataView.Invocation.Parameters.lastFetchPredicateVersion.getter();
  if (v8)
  {
    if (qword_100907350 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_1009158A8);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v15, v16)) {
      goto LABEL_25;
    }
    id v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v17 = 0;
    uint64_t v18 = "RemindersInCalendarInvocation: missing lastFetchPredicateVersion, will use reload mode";
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
LABEL_24:
    swift_slowDealloc();
LABEL_25:

    return 0;
  }
  if (Predicate != 2)
  {
    if (qword_100907350 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E2DC(v19, (uint64_t)qword_1009158A8);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v15, v20)) {
      goto LABEL_25;
    }
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 134349312;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2050;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v20, "RemindersInCalendarInvocation: lastFetchPredicateVersion(%{public}ld) does not equal currentPredicateVersion(%{public}ld), will use reload mode", (uint8_t *)v21, 0x16u);
    goto LABEL_24;
  }
  if (![a1 canAccessAllPersistentStoresReferencedByFetchResultToken:v6])
  {
    if (qword_100907350 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_1009158A8);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v15, v16)) {
      goto LABEL_25;
    }
    id v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v17 = 0;
    uint64_t v18 = "RemindersInCalendarInvocation: one or more persistent stores are no longer accessible since last fetch, will use reload mode";
    goto LABEL_23;
  }
  id v9 = a2;
  return v6;
}

void sub_10036CF24(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v44 = a3;
  uint64_t v6 = _s10PredicatesOMa(0);
  __chkstk_darwin(v6);
  char v8 = (uint64_t *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10036E560(a2, v46);
  if (!v3)
  {
    uint64_t v42 = v6;
    if (qword_100907350 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_1009158A8);
    uint64_t v10 = (void *)v46[0];
    uint64_t v11 = v46[2];
    os_log_type_t v12 = (void *)v46[3];
    uint64_t v13 = v46[4];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    int v39 = v15;
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v43 = v11;
    uint64_t v40 = v13;
    unint64_t v41 = v12;
    if (v16)
    {
      os_log_t v37 = v14;
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v47 = v36;
      uint64_t v38 = a1;
      unint64_t v35 = v17;
      *(_DWORD *)id v17 = 136315138;
      uint64_t v33 = v17 + 4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_10036D424();
      uint64_t v34 = v8;
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v45 = sub_1000C51B8(v18, v20, &v47);
      a1 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      char v8 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      os_log_t v21 = v37;
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v39, "RemindersInCalendarInvocation: fetched diff for incremental mode {diff: %s}", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain();
    unint64_t v22 = swift_bridgeObjectRetain();
    sub_10065D03C(v22, v10);
    uint64_t v24 = v23;
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = (uint64_t)sub_100209B04(v25);
    swift_bridgeObjectRelease();
    if (v26 < 0 || (v26 & 0x4000000000000000) != 0)
    {
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v27 = _bridgeCocoaArray<A>(_:)();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      uint64_t v27 = v26;
    }
    swift_release();
    uint64_t *v8 = v27;
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = sub_10036E204(a1);
    os_log_type_t v29 = sub_10056F3A0(v28, v24);
    uint64_t v42 = (uint64_t)v10;
    unint64_t v30 = swift_bridgeObjectRetain();
    sub_10065D03C(v30, v29);
    uint64_t v31 = v41;
    swift_bridgeObjectRetain();
    unint64_t v32 = swift_bridgeObjectRetain();
    sub_10065D03C(v32, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    REMRemindersInCalendarDataView.RemindersInCalendarResult.RemindersResult.IncrementalResult.init(matchedReminderIDs:removedReminderIDs:updatedListIDs:)();
    sub_1000C6DAC((uint64_t)v8);
  }
}

uint64_t sub_10036D424()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  sub_10036D6A0(KeyPath, 0xD000000000000010, 0x80000001007D23E0, v0, v1);
  swift_release();
  uint64_t v3 = swift_getKeyPath();
  sub_10036D6A0(v3, 0xD000000000000011, 0x80000001007D2400, v0, v1);
  swift_release();
  uint64_t v4 = swift_getKeyPath();
  sub_10036D6A0(v4, 0xD000000000000014, 0x80000001007D2420, v0, v1);
  swift_release();
  uint64_t v5 = swift_getKeyPath();
  sub_10036D6A0(v5, 0x4C64657461647075, 0xEC00000073747369, v0, v1);
  swift_release();
  uint64_t v6 = swift_getKeyPath();
  sub_10036D6A0(v6, 0xD000000000000010, 0x80000001007D2440, v0, v1);
  swift_release();
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 16) + 16))
  {
    swift_bridgeObjectRetain();
    sub_100094134((uint64_t *)&unk_10090AFB0);
    sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
    uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 125;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    swift_release();
    return 123;
  }
  else
  {
    swift_release();
    return 0x3E7974706D653CLL;
  }
}

uint64_t sub_10036D6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[2];
  uint64_t v25 = a4[1];
  uint64_t v26 = v8;
  uint64_t v10 = a4[4];
  uint64_t v23 = a4[3];
  uint64_t v24 = v9;
  uint64_t v22 = v10;
  sub_1000F5C74((uint64_t)&v26);
  sub_1000F5C74((uint64_t)&v25);
  sub_1000F5C74((uint64_t)&v24);
  sub_1000F5C74((uint64_t)&v23);
  sub_1000F5C74((uint64_t)&v22);
  swift_getAtKeyPath();
  sub_1000F5C48((uint64_t)&v26);
  sub_1000F5C48((uint64_t)&v25);
  sub_1000F5C48((uint64_t)&v24);
  sub_1000F5C48((uint64_t)&v23);
  sub_1000F5C48((uint64_t)&v22);
  if ((v20 & 0xC000000000000001) == 0)
  {
    if (*(void *)(v20 + 16)) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  if (!__CocoaSet.count.getter()) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  Swift::String v11 = (void **)(a5 + 16);
  uint64_t v21 = a3;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  if ((v20 & 0xC000000000000001) != 0) {
    __CocoaSet.count.getter();
  }
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  os_log_type_t v15 = *v11;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *Swift::String v11 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    os_log_type_t v15 = sub_100308F88(0, v15[2] + 1, 1, v15);
    *Swift::String v11 = v15;
  }
  unint64_t v18 = v15[2];
  unint64_t v17 = v15[3];
  if (v18 >= v17 >> 1)
  {
    os_log_type_t v15 = sub_100308F88((void *)(v17 > 1), v18 + 1, 1, v15);
    *Swift::String v11 = v15;
  }
  v15[2] = v18 + 1;
  unint64_t v19 = &v15[2 * v18];
  v19[4] = a2;
  v19[5] = v21;
  return swift_endAccess();
}

uint64_t sub_10036D8AC()
{
  return sub_10036D424();
}

void sub_10036D8E8(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v9 = 0;
  id v4 = [v3 remObjectIDWithError:&v9];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = v9;
    uint64_t v7 = REMObjectID.codable.getter();

    *a2 = v7;
  }
  else
  {
    id v8 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

id sub_10036D9B0(void *a1)
{
  id v1 = [a1 changedObjectID];
  id v2 = sub_1005A2E48(v1);
  if (!v2)
  {

    return 0;
  }
  id v3 = v2;
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (!v4)
  {
    if (qword_100907350 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_1009158A8);
    id v9 = v1;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v10, v11))
    {

LABEL_17:
      return 0;
    }
    Swift::String v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)Swift::String v12 = 138412290;
    id v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "REMRemindersInCalendarDataView: failed to cast managedObject to REMCDObject {managedObjectID: %@}", v12, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return 0;
  }
  uint64_t v5 = (void *)v4;
  id v3 = v3;
  id v6 = [v5 remObjectID];
  if (!v6)
  {
    if (qword_100907350 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_1009158A8);
    id v16 = v1;
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 138412290;
      id v21 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v16;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "REMRemindersInCalendarDataView: failed to get remObjectID from REMCDObject {managedObjectID: %@}", v19, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_17;
  }
  id v7 = v6;

  return v7;
}

id sub_10036DD4C(void *a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v7 = (char *)v31 - v6;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = __chkstk_darwin(v8).n128_u64[0];
  Swift::String v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [a1 changedObjectID:v10];
  id v14 = [objc_allocWithZone((Class)REMNSPersistentHistoryChange) initWithPersistentHistoryChange:a1];
  id v15 = [v14 tombstone];
  if (v15)
  {
    id v16 = v15;
    id v17 = [v15 objectIdentifier];

    if (v17)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, 1, 1, v8);
    }
    sub_1000F44F4((uint64_t)v4, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
      id v26 = [v13 entityName];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v27 = objc_allocWithZone((Class)REMObjectID);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v25 = [v27 initWithUUID:isa entityName:v29];

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return v25;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  sub_1001260DC((uint64_t)v7);
  if (qword_100907350 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_1009158A8);
  id v19 = v13;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 138412290;
    v31[1] = v19;
    id v24 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = v19;

    _os_log_impl((void *)&_mh_execute_header, v20, v21, "REMRemindersInCalendarDataView: failed to get UUID from tombstone {managedObjectID: %@}", v22, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

void sub_10036E1C4(void *a1, void *a2)
{
  if (a1)
  {
  }
}

uint64_t sub_10036E204(uint64_t a1)
{
  uint64_t v3 = (void *)sub_10038F1F0();
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  uint64_t v5 = (void *)sub_1003BC8C4(inited, 0, 0, (uint64_t)v3);
  swift_bridgeObjectRelease();

  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  uint64_t v6 = a1;
  NSManagedObjectContext.fetch<A>(_:)();
  if (!v1)
  {
    sub_100094134(&qword_10090D750);
    type metadata accessor for REMObjectID_Codable();
    sub_1000967F4((unint64_t *)&qword_10090FD80, &qword_10090D750);
    sub_10036E3D8((unint64_t *)&unk_1009110C0, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
    uint64_t v6 = Sequence.mapToSet<A>(_:)();
    swift_bridgeObjectRelease();
  }

  return v6;
}

uint64_t sub_10036E3D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10036E420(void *a1@<X8>)
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
      uint64_t v6 = v7;
    }
    else
    {
      uint64_t v6 = &_swiftEmptySetSingleton;
    }
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
      uint64_t v5 = v8;
    }
    else
    {
      uint64_t v5 = &_swiftEmptySetSingleton;
    }
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
      uint64_t v4 = v9;
    }
    else
    {
      uint64_t v4 = &_swiftEmptySetSingleton;
    }
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
      uint64_t v3 = v10;
    }
    else
    {
      uint64_t v3 = &_swiftEmptySetSingleton;
    }
    if (_CocoaArrayWrapper.endIndex.getter()) {
      sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
    }
    else {
      uint64_t v2 = &_swiftEmptySetSingleton;
    }
  }
  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
    uint64_t v3 = &_swiftEmptySetSingleton;
    uint64_t v4 = &_swiftEmptySetSingleton;
    uint64_t v5 = &_swiftEmptySetSingleton;
    uint64_t v6 = &_swiftEmptySetSingleton;
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v2;
}

void sub_10036E560(void *a1@<X1>, void *a2@<X8>)
{
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v5 = [(id)swift_getObjCClassFromMetadata() entity];
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v6 = [(id)swift_getObjCClassFromMetadata() entity];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10077B710;
  *(void *)(v7 + 32) = v5;
  *(void *)(v7 + 40) = v6;
  id v54 = (void *)v7;
  specialized Array._endMutation()();
  id v8 = v5;
  id v9 = v6;
  uint64_t v10 = sub_1005A52C0(a1, (unint64_t)v54);
  if (v2)
  {

    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v11 = v10;
  uint64_t v43 = v9;
  uint64_t v34 = 0;
  swift_bridgeObjectRelease();
  sub_10036E420(&v49);
  Swift::String v12 = (void *)v49;
  uint64_t v13 = v50;
  unint64_t v14 = v51;
  unint64_t v15 = v52;
  id v16 = v53;
  id v54 = (void *)v49;
  unint64_t v47 = v51;
  uint64_t v48 = v50;
  uint64_t v45 = v53;
  unint64_t v46 = v52;
  if (v11 >> 62) {
    goto LABEL_49;
  }
  uint64_t v39 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v39)
  {
LABEL_50:

    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
LABEL_5:
  unint64_t v14 = 0;
  unint64_t v41 = v11 & 0xC000000000000001;
  unint64_t v35 = v11 + 32;
  uint64_t v36 = v11 & 0xFFFFFFFFFFFFFF8;
  id v16 = &selRef_ckServerChangeTokens;
  uint64_t v13 = v39;
  unint64_t v37 = v11;
  uint64_t v38 = a2;
  do
  {
    if (v41)
    {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v14 >= *(void *)(v36 + 16)) {
        goto LABEL_48;
      }
      id v17 = *(id *)(v35 + 8 * v14);
    }
    unint64_t v15 = (unint64_t)v17;
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v39 = v33;
      if (!v33) {
        goto LABEL_50;
      }
      goto LABEL_5;
    }
    id v19 = [v17 changes];
    if (!v19)
    {

      continue;
    }
    Swift::String v12 = v19;
    uint64_t v42 = (void *)v15;
    sub_1000963CC(0, &qword_10090FD90);
    unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v15 >> 62))
    {
      uint64_t v20 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v20) {
        goto LABEL_16;
      }
      goto LABEL_44;
    }
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
    {
LABEL_16:
      sub_1000963CC(0, (unint64_t *)&unk_100917C20);
      if (v20 >= 1)
      {
        unint64_t v40 = v14;
        uint64_t v21 = 0;
        while (1)
        {
          if ((v15 & 0xC000000000000001) != 0) {
            id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v22 = *(id *)(v15 + 8 * v21 + 32);
          }
          Swift::String v12 = v22;
          id v23 = [v22 changedObjectID:v34];
          id v24 = [v23 v16[228]];

          id v25 = v24;
          LOBYTE(v23) = static NSObject.== infix(_:_:)();

          if (v23)
          {

            id v26 = [v12 changeType];
            if (v26)
            {
              if (v26 == (id)2)
              {
                id v27 = sub_10036DD4C(v12);
                if (v27) {
                  goto LABEL_41;
                }
              }
              else if (v26 == (id)1)
              {
                id v27 = sub_10036D9B0(v12);
                if (v27) {
                  goto LABEL_41;
                }
              }
            }
            else
            {
              id v27 = sub_10036D9B0(v12);
              if (v27) {
                goto LABEL_41;
              }
            }
          }
          else
          {
            char v28 = static NSObject.== infix(_:_:)();

            if (v28)
            {
              id v29 = [v12 changeType];
              id v16 = &selRef_ckServerChangeTokens;
              if (v29 == (id)2)
              {
                id v27 = sub_10036DD4C(v12);
                if (!v27) {
                  goto LABEL_33;
                }
              }
              else if (v29 != (id)1 || (id v27 = sub_10036D9B0(v12)) == 0)
              {
LABEL_33:

                goto LABEL_20;
              }
LABEL_41:
              unint64_t v30 = v27;
              uint64_t v31 = (void *)REMObjectID.codable.getter();
              sub_10031DE8C(&v44, v31);
              unint64_t v32 = v44;

              goto LABEL_19;
            }
          }

LABEL_19:
          id v16 = &selRef_ckServerChangeTokens;
LABEL_20:
          if (v20 == ++v21)
          {

            swift_bridgeObjectRelease();
            unint64_t v11 = v37;
            a2 = v38;
            uint64_t v13 = v39;
            unint64_t v14 = v40;
            goto LABEL_7;
          }
        }
      }
      goto LABEL_47;
    }
LABEL_44:

    swift_bridgeObjectRelease();
LABEL_7:
    ;
  }
  while (v14 != v13);

  swift_bridgeObjectRelease();
  Swift::String v12 = v54;
  unint64_t v14 = v47;
  uint64_t v13 = v48;
  id v16 = v45;
  unint64_t v15 = v46;
LABEL_51:

  *a2 = v12;
  a2[1] = v13;
  a2[2] = v14;
  a2[3] = v15;
  a2[4] = v16;
}

uint64_t sub_10036EAA8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t _s4DiffVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s4DiffVwcp(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s4DiffVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s4DiffVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s4DiffVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s4DiffVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s4DiffVMa()
{
  return &_s4DiffVN;
}

uint64_t sub_10036ED54(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t result = sub_10010B4E8(a1, (uint64_t)&v20);
  unint64_t v7 = v24 | ((unint64_t)v25 << 32);
  unsigned int v8 = v25 >> 14;
  if (v8 >= 2)
  {
    if (v8 != 2) {
      return result;
    }
    unsigned __int16 v25 = WORD2(v7) & 0x3FFF;
    unint64_t v9 = v21;
    if (v21)
    {
      uint64_t object = (uint64_t)v20._object;
    }
    else
    {
      unint64_t v9 = v23;
      if (!v23)
      {
        unint64_t v9 = 0xE90000000000003ELL;
        uint64_t object = 0x4E574F4E4B4E553CLL;
        goto LABEL_9;
      }
      uint64_t object = v22;
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    unsigned __int16 v25 = WORD2(v7) & 0x3FFF;
    v18[0] = 0x2E64646E696D6572;
    v18[1] = 0xE800000000000000;
    String.append(_:)(v20);
    uint64_t object = 0x2E64646E696D6572;
    unint64_t v9 = 0xE800000000000000;
  }
LABEL_9:
  if (qword_100907358 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_1009158E8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  Swift::String v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1000C51B8(object, v9, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1000C51B8(a2, a3, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "LAUNCH EVENT {client: %{public}s, reason: %{public}s}", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v18[0] = *(void *)(v4 + 16);
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  swift_release();
  if ((v19 & 1) == 0)
  {
    type metadata accessor for Analytics();
    sub_100094134((uint64_t *)&unk_10090A420);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    *(void *)(inited + 32) = 0x6E6F73616572;
    *(void *)(inited + 40) = 0xE600000000000000;
    *(void *)(inited + 48) = String._bridgeToObjectiveC()();
    *(void *)(inited + 56) = 0x746E65696C63;
    *(void *)(inited + 64) = 0xE600000000000000;
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 72) = v16;
    sub_1002ED104(inited);
    static Analytics.postEvent(_:payload:duration:)();
  }
  return swift_bridgeObjectRelease();
}

void RDLaunchAnalyticsPostNotifyd(_:)(void *a1)
{
  if (xpc_dictionary_get_string(a1, _xpc_event_key_name))
  {
    uint64_t v1 = String.init(cString:)();
    unint64_t v3 = v2;
    if (qword_100907360 != -1) {
      swift_once();
    }
    long long v8 = xmmword_1007821E0;
    uint64_t v10 = 0;
    v11[0] = 0;
    uint64_t v9 = 0;
    *(void *)((char *)v11 + 6) = 0;
    sub_10036ED54((uint64_t)&v8, v1, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100907358 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_1009158E8);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      id v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Failed to get name from xpc event. Not posting analytics for notifyd notification", v6, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10036F2CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009158E8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009158E8);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10036F394()
{
  uint64_t v0 = type metadata accessor for UnfairLock.Options();
  __chkstk_darwin(v0);
  type metadata accessor for RDLaunchAnalytics();
  uint64_t v1 = swift_allocObject();
  sub_10016F330();
  sub_100094134(&qword_100908280);
  sub_10036F50C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for UnfairLock();
  swift_allocObject();
  uint64_t result = UnfairLock.init(options:)();
  *(void *)(v1 + 16) = result;
  *(unsigned char *)(v1 + 24) = 0;
  qword_100942128 = v1;
  return result;
}

uint64_t sub_10036F49C()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDLaunchAnalytics()
{
  return self;
}

void sub_10036F4F8(unsigned char *a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  *(unsigned char *)(v1 + 24) = 1;
  *a1 = v2;
}

unint64_t sub_10036F50C()
{
  unint64_t result = qword_100908288;
  if (!qword_100908288)
  {
    sub_100096058(&qword_100908280);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100908288);
  }
  return result;
}

uint64_t sub_10036F568(uint64_t a1)
{
  uint64_t result = sub_100372000(&qword_1009159C8, (void (*)(uint64_t))&type metadata accessor for REMSiriSearchDataView.RemindersByCriteriaInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_10036F5C0(unint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v6 = a1;
  uint64_t v19 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      unint64_t v9 = v6 & 0xC000000000000001;
      unint64_t v16 = v6;
      uint64_t v17 = v6 & 0xFFFFFFFFFFFFFF8;
      uint64_t v15 = v7;
      while (v9)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v11 = v10;
        unint64_t v12 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        uint64_t v18 = v10;
        char v13 = sub_1003704A4(&v18, a2, (uint64_t)a3);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return a3;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v7 = v15;
          unint64_t v6 = v16;
        }
        else
        {
        }
        ++v8;
        if (v12 == v7)
        {
          a3 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v17 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v10 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  a3 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return a3;
}

void sub_10036F768(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, unint64_t *a5@<X4>, unsigned char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v103 = a7;
  os_log_type_t v101 = a6;
  uint64_t v102 = a4;
  id v98 = a5;
  uint64_t v93 = a2;
  uint64_t v94 = a3;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v95 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v96 = (char *)&v93 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v93 - v13;
  __chkstk_darwin(v15);
  uint64_t v100 = (uint64_t)&v93 - v16;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v93 - v18;
  __chkstk_darwin(v20);
  uint64_t v99 = (uint64_t)&v93 - v21;
  uint64_t v22 = type metadata accessor for REMSearchCriterion();
  uint64_t v23 = *(void *)(v22 - 8);
  __n128 v24 = __chkstk_darwin(v22);
  id v26 = (char *)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v27 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16);
  v27(v26, a1, v22, v24);
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v26, v22);
  if (v28 == enum case for REMSearchCriterion.hasLocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v23 + 96))(v26, v22);
    if (*v26 != 1)
    {
      *os_log_type_t v101 = 1;
LABEL_64:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v103, 1, 1, v22);
      return;
    }
    unint64_t v105 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t KeyPath = swift_getKeyPath();
    sub_10039F8FC(KeyPath);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v30 = v104;
    if (*(void *)(v105 + 16) >= *(void *)(v105 + 24) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    sub_1002F51CC(0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(v105 + 16) >= *(void *)(v105 + 24) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v31 = (int *)sub_1002F52FC(v105);
    sub_1000963CC(0, &qword_100910E10);
    id v32 = objc_allocWithZone((Class)NSFetchRequest);
    id v33 = [v32 init:v93, v94];
    id v34 = [(id)swift_getObjCClassFromMetadata() entity];
    [v33 setEntity:v34];

    [v33 setAffectedStores:0];
    [v33 setPredicate:v31];
    uint64_t v35 = NSManagedObjectContext.fetch<A>(_:)();
    if (v30)
    {

      return;
    }
    unint64_t v61 = v35;

    unint64_t v105 = (unint64_t)_swiftEmptyArrayStorage;
    if (v61 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
      if (v62) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v62 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v62)
      {
LABEL_23:
        os_log_type_t v101 = (unsigned char *)v22;
        uint64_t v102 = v31;
        uint64_t v97 = v23;
        uint64_t v104 = 0;
        if (v62 >= 1)
        {
          for (uint64_t i = 0; i != v62; ++i)
          {
            if ((v61 & 0xC000000000000001) != 0) {
              id v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v64 = *(id *)(v61 + 8 * i + 32);
            }
            uint64_t v65 = v64;
            id v66 = [v64 alarm];
            if (v66
              && (id v67 = v66,
                  id v68 = [v66 reminder],
                  v67,
                  v68))
            {
              id v69 = [v68 remObjectID];

              if (v69)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
            }
            else
            {
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v22 = (uint64_t)v101;
          uint64_t v31 = v102;
          uint64_t v23 = v97;
          goto LABEL_60;
        }
        __break(1u);
        goto LABEL_73;
      }
    }
    swift_bridgeObjectRelease();
LABEL_60:
    swift_bridgeObjectRelease();
    id v86 = v98;
    if (*v98) {
      Class v87 = (void *)*v98;
    }
    else {
      Class v87 = _swiftEmptyArrayStorage;
    }
    unint64_t v105 = (unint64_t)v87;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v88 = swift_bridgeObjectRetain();
    sub_100200CE8(v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    *id v86 = v105;
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }
  uint64_t v36 = v28;
  uint64_t v97 = v23;
  os_log_type_t v101 = (unsigned char *)v22;
  if (v28 == enum case for REMSearchCriterion.location(_:))
  {
    uint64_t v37 = v97;
    uint64_t v38 = v101;
    (*(void (**)(char *, unsigned char *))(v97 + 96))(v26, v101);
    uint64_t v40 = *(void *)v26;
    uint64_t v39 = *((void *)v26 + 1);
    unint64_t v105 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v41 = swift_getKeyPath();
    swift_bridgeObjectRetain();
    sub_10039F920(v41, v40, v39, 6);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(v105 + 16) >= *(void *)(v105 + 24) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    sub_1002F51CC(0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(v105 + 16) >= *(void *)(v105 + 24) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    uint64_t v42 = (uint64_t)&v26[*(int *)(sub_100094134((uint64_t *)&unk_100915A00) + 48)];
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v43 = (int *)sub_1002F52FC(v105);
    swift_bridgeObjectRelease();
    sub_1000963CC(0, &qword_100910E10);
    id v44 = objc_allocWithZone((Class)NSFetchRequest);
    id v45 = [v44 init:v93, v94];
    id v46 = [(id)swift_getObjCClassFromMetadata() entity];
    [v45 setEntity:v46];

    [v45 setAffectedStores:0];
    [v45 setPredicate:v43];
    uint64_t v47 = v104;
    uint64_t v48 = NSManagedObjectContext.fetch<A>(_:)();
    if (v47)
    {

LABEL_71:
      uint64_t v92 = type metadata accessor for REMStringMatchingStyle();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v92 - 8) + 8))(v42, v92);
      return;
    }
    unint64_t v70 = v48;

    unint64_t v105 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v102 = v43;
    if (v70 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
      if (v71) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v71 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v71)
      {
LABEL_38:
        uint64_t v100 = v42;
        uint64_t v104 = 0;
        if (v71 < 1)
        {
LABEL_73:
          __break(1u);
          return;
        }
        for (uint64_t j = 0; j != v71; ++j)
        {
          if ((v70 & 0xC000000000000001) != 0) {
            id v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v73 = *(id *)(v70 + 8 * j + 32);
          }
          id v74 = v73;
          id v75 = [v73 alarm];
          if (v75
            && (id v76 = v75,
                id v77 = [v75 reminder],
                v76,
                v77))
          {
            id v78 = [v77 remObjectID];

            if (v78)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v42 = v100;
        uint64_t v38 = v101;
        uint64_t v37 = v97;
        goto LABEL_67;
      }
    }
    swift_bridgeObjectRelease();
LABEL_67:
    swift_bridgeObjectRelease();
    uint64_t v89 = v98;
    if (*v98) {
      uint64_t v90 = (void *)*v98;
    }
    else {
      uint64_t v90 = _swiftEmptyArrayStorage;
    }
    unint64_t v105 = (unint64_t)v90;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v91 = swift_bridgeObjectRetain();
    sub_100200CE8(v91);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    *uint64_t v89 = v105;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(v37 + 56))(v103, 1, 1, v38);
    goto LABEL_71;
  }
  if (v28 == enum case for REMSearchCriterion.dueDate(_:))
  {
    uint64_t v49 = v97;
    (*(void (**)(char *, unsigned char *))(v97 + 96))(v26, v101);
    uint64_t v102 = (int *)sub_100094134((uint64_t *)&unk_10091C320);
    uint64_t v50 = (uint64_t)&v26[v102[12]];
    uint64_t v51 = v99;
    sub_1000CAAB4((uint64_t)v26, v99);
    sub_1000CAAB4(v50, (uint64_t)v19);
    sub_100372050(v51, v93);
    sub_100372050((uint64_t)v19, v94);
    sub_1000CAA4C(v51, (uint64_t)v14);
    uint64_t v52 = type metadata accessor for Date();
    uint64_t v53 = *(void *)(v52 - 8);
    id v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
    if (v54(v14, 1, v52) == 1)
    {
      sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_100909A40);
      uint64_t v55 = *(unint64_t **)(v53 + 56);
      uint64_t v56 = v100;
      uint64_t v57 = 1;
    }
    else
    {
      uint64_t v79 = v100;
      Date.addingTimeInterval(_:)();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v52);
      uint64_t v55 = *(unint64_t **)(v53 + 56);
      uint64_t v56 = v79;
      uint64_t v57 = 0;
    }
    id v98 = v55;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v55)(v56, v57, 1, v52);
    uint64_t v80 = v95;
    uint64_t v81 = (uint64_t)v96;
    sub_1000CAA4C((uint64_t)v19, v95);
    if (v54((char *)v80, 1, v52) == 1)
    {
      sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909A40);
      sub_1000966BC(v99, (uint64_t *)&unk_100909A40);
      sub_1000966BC(v80, (uint64_t *)&unk_100909A40);
      uint64_t v82 = 1;
    }
    else
    {
      Date.addingTimeInterval(_:)();
      sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909A40);
      sub_1000966BC(v99, (uint64_t *)&unk_100909A40);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v80, v52);
      uint64_t v82 = 0;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v98)(v81, v82, 1, v52);
    uint64_t v83 = v103;
    uint64_t v84 = v103 + v102[12];
    sub_1000CAAB4(v100, v103);
    sub_1000CAAB4(v81, v84);
    id v85 = v101;
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(v49 + 104))(v83, v36, v101);
    (*(void (**)(uint64_t, void, uint64_t, unsigned char *))(v49 + 56))(v83, 0, 1, v85);
  }
  else
  {
    uint64_t v58 = v103;
    objc_super v59 = v101;
    ((void (*)(uint64_t, uint64_t, unsigned char *))v27)(v103, a1, v101);
    uint64_t v60 = v97;
    (*(void (**)(uint64_t, void, uint64_t, unsigned char *))(v97 + 56))(v58, 0, 1, v59);
    (*(void (**)(char *, unsigned char *))(v60 + 8))(v26, v59);
  }
}

uint64_t sub_1003704A4(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = a2;
  uint64_t v98 = type metadata accessor for Date();
  uint64_t v92 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v79 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v97 = (char *)&v79 - v7;
  __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v79 - v9;
  __chkstk_darwin(v10);
  uint64_t v84 = (char *)&v79 - v11;
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for DateComponents();
  uint64_t v95 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  id v85 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v86 = (char *)&v79 - v17;
  uint64_t v18 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v18 - 8);
  uint64_t v81 = (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v93 = (uint64_t)&v79 - v21;
  __chkstk_darwin(v22);
  uint64_t v83 = (uint64_t)&v79 - v23;
  __chkstk_darwin(v24);
  uint64_t v88 = (uint64_t)&v79 - v25;
  __chkstk_darwin(v26);
  uint64_t v82 = (char *)&v79 - v27;
  __chkstk_darwin(v28);
  uint64_t v99 = (uint64_t)&v79 - v29;
  uint64_t v30 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v30 - 8);
  id v32 = (char *)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for TimeZone();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v79 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v38 = __chkstk_darwin(v37).n128_u64[0];
  uint64_t v40 = (char *)&v79 - v39;
  uint64_t v41 = *a1;
  id v42 = [v41 timeZone:v38];
  uint64_t v94 = a3;
  uint64_t v90 = v34;
  uint64_t v91 = v33;
  id v96 = v40;
  if (v42)
  {
    uint64_t v43 = v42;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    TimeZone.init(identifier:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) == 1)
    {
      static TimeZone.current.getter();
      sub_1000966BC((uint64_t)v32, &qword_100910408);
      id v44 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    }
    else
    {
      id v44 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      v44(v36, v32, v33);
    }
    uint64_t v40 = v96;
    v44(v96, v36, v33);
    uint64_t v45 = v92;
    a3 = v94;
  }
  else
  {
    static TimeZone.current.getter();
    uint64_t v45 = v92;
  }
  uint64_t v46 = v87;
  id v47 = [v41 dueDateComponents];
  if (!v47)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v14, 1, 1, v46);
    goto LABEL_12;
  }
  uint64_t v48 = v47;
  uint64_t v49 = v85;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v50 = v95;
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
  v51(v14, v49, v46);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v14, 0, 1, v46);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v14, 1, v46) == 1)
  {
LABEL_12:
    sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_100911810);
    uint64_t v57 = v98;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v99, 1, 1, v98);
    uint64_t v56 = v97;
    goto LABEL_15;
  }
  v51(v86, v14, v46);
  uint64_t v52 = self;
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  Class v54 = TimeZone._bridgeToObjectiveC()().super.isa;
  id v55 = [v52 rem_dateWithDateComponents:isa timeZone:v54];

  uint64_t v56 = v97;
  uint64_t v57 = v98;
  if (v55)
  {
    uint64_t v58 = (uint64_t)v82;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v59 = 0;
    uint64_t v60 = v99;
  }
  else
  {
    uint64_t v59 = 1;
    uint64_t v60 = v99;
    uint64_t v58 = (uint64_t)v82;
  }
  (*(void (**)(char *, uint64_t))(v95 + 8))(v86, v46);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v58, v59, 1, v57);
  sub_1000CAAB4(v58, v60);
LABEL_15:
  uint64_t v61 = v88;
  sub_1000CAA4C(v89, v88);
  uint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  if (v62(v61, 1, v57) == 1)
  {
    sub_1000966BC(v61, (uint64_t *)&unk_100909A40);
    char v63 = 1;
  }
  else
  {
    id v64 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v65 = v84;
    v64(v84, v61, v57);
    uint64_t v66 = v83;
    sub_1000CAA4C(v99, v83);
    if (v62(v66, 1, v57) == 1)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v65, v57);
      sub_1000966BC(v66, (uint64_t *)&unk_100909A40);
      char v63 = 0;
      a3 = v94;
      uint64_t v40 = v96;
      uint64_t v56 = v97;
    }
    else
    {
      id v67 = v80;
      v64(v80, v66, v57);
      sub_100372000((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
      char v63 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
      id v68 = *(void (**)(char *, uint64_t))(v45 + 8);
      v68(v67, v98);
      v68(v65, v98);
      a3 = v94;
      uint64_t v40 = v96;
      uint64_t v56 = v97;
      uint64_t v57 = v98;
    }
  }
  uint64_t v69 = a3;
  uint64_t v70 = v93;
  sub_1000CAA4C(v69, v93);
  if (v62(v70, 1, v57) == 1)
  {
    sub_1000966BC(v99, (uint64_t *)&unk_100909A40);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v40, v91);
    sub_1000966BC(v70, (uint64_t *)&unk_100909A40);
  }
  else
  {
    uint64_t v71 = v70;
    os_log_type_t v72 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    v72(v56, v71, v57);
    if (v63)
    {
      uint64_t v73 = v99;
      uint64_t v74 = v81;
      sub_1000CAA4C(v99, v81);
      if (v62(v74, 1, v57) != 1)
      {
        id v75 = v79;
        v72(v79, v74, v57);
        sub_100372000((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v76 = v73;
        char v63 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
        id v77 = *(void (**)(char *, uint64_t))(v45 + 8);
        v77(v75, v57);
        v77(v56, v57);
        sub_1000966BC(v76, (uint64_t *)&unk_100909A40);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v96, v91);
        return v63 & 1;
      }
      (*(void (**)(char *, uint64_t))(v45 + 8))(v56, v57);
      sub_1000966BC(v73, (uint64_t *)&unk_100909A40);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v96, v91);
      sub_1000966BC(v74, (uint64_t *)&unk_100909A40);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v56, v57);
      sub_1000966BC(v99, (uint64_t *)&unk_100909A40);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v40, v91);
    }
    char v63 = 0;
  }
  return v63 & 1;
}

uint64_t sub_100370F48(uint64_t a1)
{
  uint64_t result = sub_100372000(&qword_1009159F0, (void (*)(uint64_t))&type metadata accessor for REMSiriSearchDataView.ListsByCriteriaInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100370FA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = _s10PredicatesOMa_3();
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = REMSiriSearchDataView.ListsByCriteriaInvocation.Parameters.criteria.getter();
  unint64_t v11 = sub_10037217C(v10, a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *uint64_t v9 = REMSiriSearchDataView.ListsByCriteriaInvocation.Parameters.criteria.getter();
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_100649DD0((uint64_t)v9, a2, 0);
    sub_1003723EC((uint64_t)v9, (uint64_t (*)(void))_s10PredicatesOMa_3);
    swift_bridgeObjectRelease();
    sub_10053B340(v11, a4);
    swift_bridgeObjectRelease();
    sub_10064A824(v13, a4);
    swift_bridgeObjectRelease();
    return REMSiriSearchDataView.ListsResult_Codable.init(lists:smartLists:)();
  }
  return result;
}

void *sub_10037114C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unint64_t *a5, unsigned char *a6)
{
  uint64_t v40 = a4;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v10 = sub_100094134(&qword_1009159F8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for REMSearchCriterion();
  __chkstk_darwin(v13);
  uint64_t v37 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v34 = (char *)v29 - v17;
  uint64_t v18 = *(void *)(a1 + 16);
  if (!v18) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v31 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = a1 + v31;
  uint64_t v20 = *(void *)(v16 + 72);
  uint64_t v35 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v36 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v29[1] = a1;
  uint64_t v21 = v20;
  swift_bridgeObjectRetain();
  uint64_t v22 = _swiftEmptyArrayStorage;
  id v32 = a5;
  uint64_t v33 = a6;
  uint64_t v30 = v21;
  do
  {
    sub_10036F768(v19, v38, v39, v40, a5, a6, (uint64_t)v12);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v22;
    }
    if ((*v36)(v12, 1, v13) == 1)
    {
      sub_1000966BC((uint64_t)v12, &qword_1009159F8);
    }
    else
    {
      uint64_t v23 = v34;
      uint64_t v24 = *v35;
      (*v35)(v34, v12, v13);
      v24(v37, v23, v13);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v22 = (void *)sub_1003092E8(0, v22[2] + 1, 1, (unint64_t)v22);
      }
      unint64_t v26 = v22[2];
      unint64_t v25 = v22[3];
      if (v26 >= v25 >> 1) {
        uint64_t v22 = (void *)sub_1003092E8(v25 > 1, v26 + 1, 1, (unint64_t)v22);
      }
      v22[2] = v26 + 1;
      uint64_t v27 = (char *)v22 + v31 + v26 * v30;
      uint64_t v21 = v30;
      v24(v27, v37, v13);
      a5 = v32;
      a6 = v33;
    }
    v19 += v21;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  return v22;
}

void *sub_100371444(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  id v77 = a4;
  id v73 = a3;
  uint64_t v74 = a2;
  uint64_t v79 = (char *)a1;
  unint64_t v71 = _s10PredicatesOMa(0);
  __chkstk_darwin(v71);
  uint64_t v76 = (unint64_t *)((char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = type metadata accessor for REMSearchCriterion();
  unint64_t v75 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v68 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v68 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v68 - v17;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void **)(v19 - 8);
  uint64_t v21 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v20[7];
  v21(v18, 1, 1, v19);
  v21(v15, 1, 1, v19);
  uint64_t v22 = v15;
  unint64_t v82 = 0;
  char v81 = 0;
  uint64_t v23 = v77;
  unint64_t v25 = v78;
  uint64_t v24 = (uint64_t)v79;
  uint64_t v79 = v18;
  unint64_t v26 = (unint64_t)sub_10037114C(v24, (uint64_t)v18, (uint64_t)v15, v23, &v82, &v81);
  unint64_t v27 = (unint64_t)v25;

  if (v25) {
    goto LABEL_12;
  }
  id v77 = v12;
  id v78 = v6;
  unint64_t v69 = v19;
  uint64_t v70 = v22;
  uint64_t v28 = v72;
  unint64_t v29 = (unint64_t)v73;
  id v68 = v9;
  if (v82)
  {
    void *v78 = v82;
    (*(void (**)(void))(v75 + 104))();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v26 = sub_1003092E8(0, *(void *)(v26 + 16) + 1, 1, v26);
    }
    unint64_t v31 = *(void *)(v26 + 16);
    unint64_t v30 = *(void *)(v26 + 24);
    if (v31 >= v30 >> 1) {
      unint64_t v26 = sub_1003092E8(v30 > 1, v31 + 1, 1, v26);
    }
    *(void *)(v26 + 16) = v31 + 1;
    (*(void (**)(unint64_t, void *, uint64_t))(v75 + 32))(v26+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(void *)(v75 + 72) * v31, v78, v28);
    unint64_t v32 = v26;
  }
  else
  {
    unint64_t v32 = v26;
  }
  uint64_t v33 = (uint64_t)v76;
  unint64_t *v76 = v32;
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = qword_100907418;
  unint64_t v75 = v32;
  swift_bridgeObjectRetain();
  unint64_t v35 = v74;
  if (v34 != -1) {
LABEL_97:
  }
    swift_once();
  uint64_t v36 = sub_10039E88C(v33, (objc_class *)qword_1009421D8, (uint64_t)v23, (uint64_t)_swiftEmptyArrayStorage, v35, v29, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  id v78 = (void *)v27;
  uint64_t v22 = v70;
  if (!v27)
  {
    unint64_t v35 = v36;
    uint64_t v39 = (uint64_t)v77;
    sub_1000CAA4C((uint64_t)v70, (uint64_t)v77);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v20[6];
    unint64_t v29 = v69;
    int v41 = v40(v39, 1, v69);
    sub_1000966BC(v39, (uint64_t *)&unk_100909A40);
    if (v41 != 1
      || (uint64_t v42 = (uint64_t)v68,
          sub_1000CAA4C((uint64_t)v79, (uint64_t)v68),
          int v43 = v40(v42, 1, v29),
          sub_1000966BC(v42, (uint64_t *)&unk_100909A40),
          v43 != 1))
    {
      id v44 = v78;
      unint64_t v35 = (unint64_t)sub_10036F5C0(v35, (uint64_t)v79, v22);
      id v78 = v44;
    }
    unint64_t v80 = v35;
    if (v81 != 1)
    {
LABEL_116:
      sub_1003723EC(v33, _s10PredicatesOMa);
      swift_bridgeObjectRelease();
      uint64_t v37 = (void *)v80;
      swift_bridgeObjectRelease();
      sub_1000966BC((uint64_t)v22, (uint64_t *)&unk_100909A40);
      sub_1000966BC((uint64_t)v79, (uint64_t *)&unk_100909A40);
      return v37;
    }
    if (v35 >> 62) {
      goto LABEL_105;
    }
    unint64_t v27 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v27) {
      goto LABEL_20;
    }
LABEL_106:
    swift_bridgeObjectRelease();
LABEL_107:
    if (!(v35 >> 62))
    {
      uint64_t v55 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_114;
    }
    swift_bridgeObjectRetain();
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v35 = v80;
    if (v80 >> 62) {
      goto LABEL_109;
    }
LABEL_114:
    while (2)
    {
      uint64_t v67 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v67 >= v55) {
        goto LABEL_115;
      }
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      swift_bridgeObjectRetain();
      uint64_t v20 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((void *)v29 == v20)
      {
LABEL_113:
        uint64_t v33 = (uint64_t)v76;
        if (!(v35 >> 62)) {
          continue;
        }
LABEL_109:
        swift_bridgeObjectRetain();
        uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v67 < v55) {
          goto LABEL_110;
        }
LABEL_115:
        sub_1001ECEDC(v55, v67);
        goto LABEL_116;
      }
      break;
    }
    while (1)
    {
LABEL_43:
      if ((v35 & 0xC000000000000001) != 0)
      {
        uint64_t v56 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v29 & 0x8000000000000000) != 0) {
          goto LABEL_93;
        }
        if (v29 >= *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_94;
        }
        uint64_t v56 = *(id *)(v35 + 8 * v29 + 32);
      }
      uint64_t v20 = v56;
      id v57 = [v56 alarms:v68];
      if (v57)
      {
        uint64_t v58 = v57;
        unint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v35 >> 62)
        {
          swift_bridgeObjectRetain();
          unint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
          id v77 = (char *)v55;
          if (v27)
          {
LABEL_50:
            uint64_t v59 = 4;
            while (1)
            {
              uint64_t v33 = v59 - 4;
              if ((v35 & 0xC000000000000001) != 0) {
                id v60 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v60 = *(id *)(v35 + 8 * v59);
              }
              uint64_t v61 = v60;
              uint64_t v23 = (int *)(v59 - 3);
              if (__OFADD__(v33, 1))
              {
                __break(1u);
                goto LABEL_92;
              }
              uint64_t v33 = (uint64_t)[v60 trigger];
              self;
              if (swift_dynamicCastObjCClass()) {
                break;
              }

              ++v59;
              if (v23 == (int *)v27) {
                goto LABEL_57;
              }
            }

            swift_bridgeObjectRelease_n();
            uint64_t v22 = v70;
            uint64_t v55 = (uint64_t)v77;
            BOOL v54 = __OFADD__(v29++, 1);
            if (v54) {
              goto LABEL_95;
            }
            goto LABEL_79;
          }
        }
        else
        {
          unint64_t v27 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          id v77 = (char *)v55;
          if (v27) {
            goto LABEL_50;
          }
        }
LABEL_57:
        swift_bridgeObjectRelease_n();

        uint64_t v55 = (uint64_t)v77;
        uint64_t v22 = v70;
        if (v77 != (char *)v29)
        {
          unint64_t v35 = v80;
LABEL_60:
          if ((v35 & 0xC000000000000001) != 0)
          {
            uint64_t v20 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            id v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v55 < 0)
            {
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              swift_bridgeObjectRetain();
              unint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
              if (!v27) {
                goto LABEL_106;
              }
LABEL_20:
              id v45 = 0;
              unint64_t v46 = v35 & 0xC000000000000001;
              unint64_t v69 = v35 + 32;
              unint64_t v71 = v35 & 0xC000000000000001;
              uint64_t v72 = v27;
              while (1)
              {
                if (v46) {
                  id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v47 = *(id *)(v69 + 8 * (void)v45);
                }
                unint64_t v29 = (unint64_t)v47;
                id v48 = [v47 alarms:v68];
                if (v48)
                {
                  uint64_t v49 = v48;
                  uint64_t v74 = sub_1000963CC(0, &qword_10090C4B8);
                  unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                  if (v27 >> 62)
                  {
                    swift_bridgeObjectRetain_n();
                    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    uint64_t v50 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRetain();
                  }
                  id v73 = (id)v29;
                  id v77 = (char *)v45;
                  if (v50)
                  {
                    uint64_t v20 = (void *)(v27 & 0xC000000000000001);
                    uint64_t v33 = 4;
                    while (1)
                    {
                      unint64_t v29 = v33 - 4;
                      if (v20) {
                        uint64_t v51 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                      }
                      else {
                        uint64_t v51 = *(id *)(v27 + 8 * v33);
                      }
                      uint64_t v22 = v51;
                      uint64_t v52 = v33 - 3;
                      if (__OFADD__(v29, 1))
                      {
LABEL_92:
                        __break(1u);
LABEL_93:
                        __break(1u);
LABEL_94:
                        __break(1u);
LABEL_95:
                        __break(1u);
LABEL_96:
                        __break(1u);
                        goto LABEL_97;
                      }
                      id v53 = [v51 trigger];
                      self;
                      if (swift_dynamicCastObjCClass()) {
                        break;
                      }

                      ++v33;
                      if (v52 == v50) {
                        goto LABEL_35;
                      }
                    }
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease_n();
                    uint64_t v55 = (uint64_t)v77;
                    unint64_t v29 = (unint64_t)(v77 + 1);
                    if (__OFADD__(v77, 1)) {
                      goto LABEL_111;
                    }
                    unint64_t v35 = v80;
                    uint64_t v22 = v70;
                    if (!(v80 >> 62))
                    {
                      uint64_t v20 = *(void **)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10);
                      if ((void *)v29 != v20) {
                        goto LABEL_43;
                      }
                      goto LABEL_113;
                    }
                    goto LABEL_112;
                  }
LABEL_35:
                  swift_bridgeObjectRelease_n();
                  uint64_t v33 = (uint64_t)v76;
                  id v45 = v77;
                  uint64_t v22 = v70;
                  unint64_t v46 = v71;
                  unint64_t v27 = v72;
                  unint64_t v29 = (unint64_t)v73;
                }

                BOOL v54 = __OFADD__(v45, 1);
                id v45 = (char *)v45 + 1;
                if (v54) {
                  goto LABEL_104;
                }
                if (v45 == (id)v27)
                {
                  swift_bridgeObjectRelease();
                  unint64_t v35 = v80;
                  goto LABEL_107;
                }
              }
            }
            unint64_t v62 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v55 >= v62) {
              goto LABEL_99;
            }
            char v63 = *(id *)(v35 + 32 + 8 * v55);
            if ((v29 & 0x8000000000000000) != 0) {
              goto LABEL_100;
            }
            if (v29 >= v62) {
              goto LABEL_101;
            }
            uint64_t v20 = v63;
            id v64 = *(id *)(v35 + 32 + 8 * v29);
          }
          unint64_t v27 = (unint64_t)v64;
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
            || (v35 & 0x8000000000000000) != 0
            || (v35 & 0x4000000000000000) != 0)
          {
            unint64_t v35 = sub_1001ECD68(v35);
            unint64_t v80 = v35;
          }
          uint64_t v65 = *(void **)((v35 & 0xFFFFFFFFFFFFFF8) + 8 * v55 + 0x20);
          *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 8 * v55 + 0x20) = v27;

          specialized Array._endMutation()();
          unint64_t v35 = v80;
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
            || (v35 & 0x8000000000000000) != 0
            || (v35 & 0x4000000000000000) != 0)
          {
            unint64_t v35 = sub_1001ECD68(v35);
            unint64_t v80 = v35;
          }
          if ((v29 & 0x8000000000000000) != 0) {
            goto LABEL_102;
          }
          if (v29 >= *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_103;
          }
          uint64_t v66 = *(void **)((v35 & 0xFFFFFFFFFFFFFF8) + 8 * v29 + 0x20);
          *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 8 * v29 + 0x20) = v20;

          unint64_t v35 = (unint64_t)&v80;
          specialized Array._endMutation()();
        }
      }
      else
      {

        if (v55 != v29) {
          goto LABEL_60;
        }
      }
      BOOL v54 = __OFADD__(v55++, 1);
      if (v54) {
        goto LABEL_96;
      }
      BOOL v54 = __OFADD__(v29++, 1);
      if (v54) {
        goto LABEL_95;
      }
LABEL_79:
      unint64_t v35 = v80;
      if (v80 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((void *)v29 == v20) {
          goto LABEL_113;
        }
      }
      else
      {
        uint64_t v20 = *(void **)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if ((void *)v29 == v20) {
          goto LABEL_113;
        }
      }
    }
  }
  sub_1003723EC(v33, _s10PredicatesOMa);
  swift_bridgeObjectRelease();
LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v37 = &unk_100909A40;
  sub_1000966BC((uint64_t)v22, (uint64_t *)&unk_100909A40);
  sub_1000966BC((uint64_t)v79, (uint64_t *)&unk_100909A40);
  return v37;
}

uint64_t sub_100372000(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100372050(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void *sub_1003720B8(char *a1, void *a2)
{
  uint64_t v5 = REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters.criteria.getter();
  uint64_t v6 = REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters.fetchOffset.getter();
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6;
  }
  uint64_t v9 = REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters.fetchLimit.getter();
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (void *)v9;
  }
  uint64_t v12 = sub_100371444(v5, v8, v11, a1);
  swift_bridgeObjectRelease();
  if (!v2)
  {
    uint64_t v13 = (void *)REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters.reminderFetchOptions.getter();
    a2 = (void *)sub_10039E084((unint64_t)v12, v13, (uint64_t)a1, a2);
    swift_bridgeObjectRelease();
  }
  return a2;
}

uint64_t sub_10037217C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = _s10PredicatesOMa_1();
  __chkstk_darwin(v5);
  char v7 = (void *)((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *char v7 = a1;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v9 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v10 = [(id)swift_getObjCClassFromMetadata() entity];
  [v9 setEntity:v10];

  [v9 setAffectedStores:0];
  [v9 setPredicate:v8];

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v9 setSortDescriptors:isa];

  uint64_t v12 = a2;
  uint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
  if (!v2)
  {
    v15[1] = v13;
    sub_100094134(&qword_100910160);
    sub_1000ED03C();
    uint64_t v12 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();
  }

  sub_1003723EC((uint64_t)v7, (uint64_t (*)(void))_s10PredicatesOMa_1);
  return v12;
}

uint64_t sub_1003723EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10037244C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100915A10);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100915A10);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100372514()
{
  id result = [self cloudkit];
  qword_100915A28 = (uint64_t)result;
  return result;
}

void *sub_100372550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_cancellables) = &_swiftEmptySetSingleton;
  *(void *)((char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForHandlingEvent) = 0;
  *(void *)((char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForDebouncingEvent) = 0;
  *((unsigned char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent) = 0;
  *((unsigned char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent) = 0;
  v4[4] = a1;
  v4[5] = a2;
  id v9 = (char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_debounceInterval;
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a3, v10);
  *(void *)((char *)v4 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_notificationCenter) = a4;
  return v4;
}

uint64_t sub_10037263C()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10091A450);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  uint64_t v35 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134(&qword_100915B60);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  uint64_t v37 = v13;
  __chkstk_darwin(v12);
  unint64_t v30 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134(&qword_100915B68);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v38 = v15;
  uint64_t v39 = v16;
  __chkstk_darwin(v15);
  uint64_t v33 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[0] = v0;
  NSNotificationCenter.publisher(for:object:)();
  id v40 = *(id *)(v0 + 40);
  id v18 = v40;
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v20 = *(void *)(v19 - 8);
  unint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  uint64_t v32 = v20 + 56;
  v31(v3, 1, 1, v19);
  void v29[2] = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1003755E0((unint64_t *)&qword_10091A460, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
  v29[1] = sub_100096654();
  id v21 = v18;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v3, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_allocObject();
  swift_weakInit();
  sub_1000967F4((unint64_t *)&qword_10090ABA0, (uint64_t *)&unk_10091A450);
  uint64_t v22 = v34;
  uint64_t v23 = v30;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v22);
  id v40 = v21;
  v31(v3, 1, 1, v19);
  sub_1000967F4(&qword_100915B70, &qword_100915B60);
  id v24 = v21;
  unint64_t v25 = v33;
  uint64_t v26 = v36;
  Publisher.debounce<A>(for:scheduler:options:)();
  sub_1000966BC((uint64_t)v3, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v23, v26);
  swift_allocObject();
  swift_weakInit();
  sub_1000967F4((unint64_t *)&unk_100915B78, &qword_100915B68);
  uint64_t v27 = v38;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v27);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100372C4C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    char v2 = *(unsigned char *)(result + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent);
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent) = 1;
    sub_100373480(v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_100372CB8()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_100372D50();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    char v2 = *(unsigned char *)(result + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent);
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent) = 0;
    sub_100373480(v2);
    return swift_release();
  }
  return result;
}

void sub_100372D50()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (void *)v0[5];
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if ((*((unsigned char *)v0 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent) & 1) == 0)
    {
      *((unsigned char *)v0 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent) = 1;
      sub_100372F9C(0);
      id v8 = [(id)v0[4] newBackgroundContextWithAuthor:RDStalePinnedListsEventHandlerAuthor];
      uint64_t v9 = swift_allocObject();
      swift_weakInit();
      uint64_t v10 = (void *)swift_allocObject();
      v10[2] = v9;
      v10[3] = v8;
      v10[4] = v1;
      aBlock[4] = sub_1003755B4;
      aBlock[5] = v10;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100236C78;
      aBlock[3] = &unk_1008C2EA8;
      uint64_t v11 = _Block_copy(aBlock);
      id v12 = v8;
      swift_release();
      [v12 performBlock:v11];
      _Block_release(v11);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100372F9C(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((unsigned __int8 *)v2 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent) != v3)
  {
    if (*((unsigned char *)v2 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent))
    {
      *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForHandlingEvent) = os_transaction_create();
      swift_unknownObjectRelease();
      static os_signpost_type_t.begin.getter();
      if (qword_100907370 != -1) {
        swift_once();
      }
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if (qword_100907368 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_10008E2DC(v9, (uint64_t)qword_100915A10);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        uint64_t v24 = v4;
        *(_DWORD *)id v12 = 136315138;
        swift_getMetatypeMetadata();
        uint64_t v13 = String.init<A>(describing:)();
        uint64_t v24 = sub_1000C51B8(v13, v14, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s: Started handling event", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    else
    {
      if (qword_100907368 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_10008E2DC(v15, (uint64_t)qword_100915A10);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        id v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)id v18 = 136315138;
        v22[1] = v18 + 4;
        uint64_t v23 = v19;
        uint64_t v24 = v4;
        swift_getMetatypeMetadata();
        uint64_t v20 = String.init<A>(describing:)();
        uint64_t v24 = sub_1000C51B8(v20, v21, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: Finished handling event", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      static os_signpost_type_t.end.getter();
      if (qword_100907370 != -1) {
        swift_once();
      }
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForHandlingEvent) = 0;
      swift_unknownObjectRelease();
    }
  }
}

void sub_100373480(char a1)
{
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent) != (a1 & 1))
  {
    uint64_t v2 = v1;
    uint64_t v3 = *v1;
    if (*((unsigned char *)v1 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isDebouncingEvent))
    {
      *(void *)((char *)v1 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForDebouncingEvent) = os_transaction_create();
      swift_unknownObjectRelease();
      if (qword_100907368 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_10008E2DC(v4, (uint64_t)qword_100915A10);
      osos_log_t log = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v17 = v3;
        *(_DWORD *)uint64_t v6 = 136315138;
        swift_getMetatypeMetadata();
        uint64_t v7 = String.init<A>(describing:)();
        uint64_t v17 = sub_1000C51B8(v7, v8, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, oslog, v5, "%s: Started debouncing event", v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      if (qword_100907368 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_10008E2DC(v9, (uint64_t)qword_100915A10);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v17 = v3;
        *(_DWORD *)id v12 = 136315138;
        swift_getMetatypeMetadata();
        uint64_t v13 = String.init<A>(describing:)();
        uint64_t v17 = sub_1000C51B8(v13, v14, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s: Finished debouncing event", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      *(void *)((char *)v2 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_osTransactionForDebouncingEvent) = 0;
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_100373810(uint64_t a1, void *a2, void *a3)
{
  id v143 = a3;
  id v145 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v140 = (char *)v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for DispatchQoS();
  uint64_t v139 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v138 = (char *)v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v142 = (char *)v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v153 - 8);
  uint64_t v10 = __chkstk_darwin(v153);
  uint64_t v151 = (char *)v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v152 = (char *)v120 - v12;
  uint64_t v13 = _s10PredicatesOMa_1();
  __chkstk_darwin(v13);
  os_log_type_t v149 = (char *)v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v150 = (void (**)(char *, uint64_t))type metadata accessor for REMManualOrdering.ManualOrderingID();
  uint64_t v15 = (uint64_t)*(v150 - 1);
  __chkstk_darwin(v150);
  uint64_t v17 = (char *__ptr32 *)((char *)v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for REMManualOrdering.Predefined();
  uint64_t v19 = *(char **)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v137 = result;
  if (!result) {
    return result;
  }
  id v148 = (char *)v13;
  uint64_t v131 = v9;
  uint64_t v134 = v4;
  uint64_t v135 = v3;
  (*((void (**)(char *, void, uint64_t))v19 + 13))(v21, enum case for REMManualOrdering.Predefined.pinned(_:), v18);
  if (qword_100907B18 != -1) {
    goto LABEL_90;
  }
LABEL_3:
  uint64_t v23 = qword_100942620;
  swift_retain();
  REMManualOrdering.Predefined.manualOrderingID.getter();
  id v24 = v145;
  uint64_t v25 = sub_100349CDC();
  uint64_t v26 = &qword_100907000;
  if (!v25)
  {
    (*(void (**)(char *__ptr32 *, void))(v15 + 8))(v17, v150);
LABEL_6:
    (*((void (**)(char *, uint64_t))v19 + 1))(v21, v18);
    swift_release();
    unint64_t v31 = 0;
    id v48 = 0;
    goto LABEL_7;
  }
  uint64_t v27 = (void *)v25;
  uint64_t v28 = (void *)REMManualOrdering.ManualOrderingID.listType.getter();
  uint64_t v29 = REMManualOrdering.ManualOrderingID.listID.getter();
  id v48 = sub_1000CF564(v28, v29, v30, v27, v24, 0, v23);
  (*(void (**)(char *__ptr32 *, void))(v15 + 8))(v17, v150);

  swift_bridgeObjectRelease();
  if (!v48)
  {
    uint64_t v26 = &qword_100907000;
    goto LABEL_6;
  }
  (*((void (**)(char *, uint64_t))v19 + 1))(v21, v18);
  swift_release();
  id v49 = v48;
  sub_1001B3874((uint64_t)v161);

  sub_100375628((uint64_t)v161, (uint64_t)v162);
  if (v162[0])
  {
    uint64_t v61 = v162[2];
    uint64_t v62 = v162[3];
    uint64_t v63 = v162[4];
    id v154 = (void *)v162[0];
    uint64_t v155 = v162[1];
    sub_1000F5C48((uint64_t)&v155);
    uint64_t v156 = v61;
    sub_1000F5C48((uint64_t)&v156);
    uint64_t v157 = v62;
    sub_1000F5C48((uint64_t)&v157);
    uint64_t v158 = v63;
    sub_1000F5C48((uint64_t)&v158);
    aBlock[0] = v154;
    sub_100094134((uint64_t *)&unk_10090AFB0);
    sub_1000967F4((unint64_t *)&unk_100915BA0, (uint64_t *)&unk_10090AFB0);
    sub_1003755E0((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t v31 = (char *)Sequence.compactMapToSet<A>(_:)();
    sub_1000F5C48((uint64_t)&v154);
  }
  else
  {
    unint64_t v31 = 0;
  }
  uint64_t v26 = &qword_100907000;
LABEL_7:
  if (v26[109] != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = sub_10008E2DC(v32, (uint64_t)qword_100915A10);
  swift_bridgeObjectRetain_n();
  uint64_t v130 = v33;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  id v128 = v48;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc();
    v159 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315394;
    aBlock[0] = v143;
    swift_getMetatypeMetadata();
    uint64_t v38 = String.init<A>(describing:)();
    aBlock[0] = (id)sub_1000C51B8(v38, v39, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2082;
    aBlock[0] = v31;
    sub_100094134(&qword_100915B88);
    uint64_t v40 = Optional.descriptionOrNil.getter();
    aBlock[0] = (id)sub_1000C51B8(v40, v41, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s: Did fetch pinned lists' manual ordering {identifiersInPinnedListsOrdering: %{public}s}", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = (uint64_t)v142;
  uint64_t v42 = (uint64_t)v149;
  swift_storeEnumTagMultiPayload();
  int v43 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v44 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v45 = [(id)swift_getObjCClassFromMetadata() entity];
  [v44 setEntity:v45];

  [v44 setAffectedStores:0];
  [v44 setPredicate:v43];

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v44 setSortDescriptors:isa];

  id v47 = NSManagedObjectContext.fetch<A>(_:)();
  id v148 = v31;
  aBlock[0] = v47;
  uint64_t v18 = (uint64_t)&qword_100910160;
  sub_100094134(&qword_100910160);
  sub_1000967F4((unint64_t *)&qword_10090A988, &qword_100910160);
  uint64_t v50 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();

  sub_1000ECFE0(v42);
  swift_bridgeObjectRetain_n();
  uint64_t v51 = Logger.logObject.getter();
  int v52 = static os_log_type_t.default.getter();
  BOOL v53 = os_log_type_enabled(v51, (os_log_type_t)v52);
  uint64_t v17 = &off_100776000;
  unint64_t v54 = (unint64_t)v50 >> 62;
  uint64_t v144 = v50;
  if (v53)
  {
    uint64_t v55 = swift_slowAlloc();
    os_log_type_t v149 = (char *)swift_slowAlloc();
    v159 = v149;
    *(_DWORD *)uint64_t v55 = 136315650;
    aBlock[0] = v143;
    swift_getMetatypeMetadata();
    uint64_t v56 = String.init<A>(describing:)();
    aBlock[0] = (id)sub_1000C51B8(v56, v57, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 12) = 2050;
    if (v54)
    {
      swift_bridgeObjectRetain();
      uint64_t v58 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v58 = *(void **)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    aBlock[0] = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 22) = 2082;
    aBlock[0] = _swiftEmptyArrayStorage;
    if (v54)
    {
      swift_bridgeObjectRetain();
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v59 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    LODWORD(v150) = v52;
    if (v59)
    {
      if (v59 < 1) {
        __break(1u);
      }
      uint64_t v64 = 0;
      unint64_t v65 = v50 & 0xC000000000000001;
      do
      {
        if (v65) {
          id v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v66 = *(id *)(v50 + 8 * v64 + 32);
        }
        uint64_t v67 = v66;
        id v68 = [v66 remObjectID];

        if (v68)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v64;
        uint64_t v50 = v144;
      }
      while (v59 != v64);
      swift_bridgeObjectRelease();
      uint64_t v15 = (uint64_t)v142;
      uint64_t v17 = &off_100776000;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    uint64_t v69 = Array.description.getter();
    unint64_t v71 = v70;
    swift_bridgeObjectRelease();
    aBlock[0] = (id)sub_1000C51B8(v69, v71, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v150, "%s: Did fetch lists shared to current user {count: %{public}ld, objectIDs: %{public}s)}", (uint8_t *)v55, 0x20u);
    uint64_t v18 = (uint64_t)v149;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (v54)
  {
    if (v50 < 0) {
      uint64_t v18 = v50;
    }
    else {
      uint64_t v18 = v50 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    unint64_t v21 = (char *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v21 = *(char **)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v19 = v148;
  if (v21)
  {
    uint64_t v72 = 0;
    unint64_t v73 = v50 & 0xC000000000000001;
    uint64_t v133 = v50 & 0xFFFFFFFFFFFFFF8;
    uint64_t v132 = v50 + 32;
    uint64_t v74 = (uint64_t *)(v131 + 32);
    id v146 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56);
    id v136 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
    os_log_type_t v149 = v148 + 56;
    uint64_t v147 = v131 + 16;
    int v150 = (void (**)(char *, uint64_t))(v131 + 8);
    uint64_t v124 = (v131 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    *(void *)&long long v60 = *((void *)v17 + 449);
    long long v121 = v60;
    v120[1] = (char *)&type metadata for Any + 8;
    uint64_t v125 = v21;
    unint64_t v126 = v50 & 0xC000000000000001;
    uint64_t v129 = (uint64_t *)(v131 + 32);
    do
    {
      if (v73)
      {
        unint64_t v75 = (char *__ptr32 *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((unint64_t)v72 >= *(void *)(v133 + 16)) {
          goto LABEL_89;
        }
        unint64_t v75 = (char *__ptr32 *)*(id *)(v132 + 8 * (void)v72);
      }
      uint64_t v17 = v75;
      if (__OFADD__(v72++, 1))
      {
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        swift_once();
        goto LABEL_3;
      }
      id v77 = [v75 identifier];
      if (v77)
      {
        id v78 = v77;
        uint64_t v79 = v151;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v18 = *v74;
        unint64_t v80 = v79;
        uint64_t v81 = v153;
        ((void (*)(uint64_t, char *, uint64_t))*v74)(v15, v80, v153);
        (*v146)(v15, 0, 1, v81);
        if ((*v136)(v15, 1, v81) != 1)
        {
          ((void (*)(char *, uint64_t, uint64_t))v18)(v152, v15, v153);
          if (v19 && *((void *)v19 + 2))
          {
            uint64_t v18 = *((void *)v19 + 5);
            sub_1003755E0((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
            swift_bridgeObjectRetain();
            uint64_t v82 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v83 = -1 << v19[32];
            unint64_t v84 = v82 & ~v83;
            if ((*(void *)&v149[(v84 >> 3) & 0xFFFFFFFFFFFFFF8] >> v84))
            {
              uint64_t v85 = ~v83;
              uint64_t v86 = *(void *)(v131 + 72);
              uint64_t v87 = *(void (**)(char *, unint64_t, uint64_t))(v131 + 16);
              while (1)
              {
                unint64_t v88 = *((void *)v19 + 6) + v86 * v84;
                uint64_t v89 = v151;
                uint64_t v90 = v153;
                v87(v151, v88, v153);
                sub_1003755E0((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
                uint64_t v18 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v91 = *v150;
                (*v150)(v89, v90);
                if (v18) {
                  break;
                }
                unint64_t v84 = (v84 + 1) & v85;
                uint64_t v19 = v148;
                if (((*(void *)&v149[(v84 >> 3) & 0xFFFFFFFFFFFFFF8] >> v84) & 1) == 0) {
                  goto LABEL_61;
                }
              }
              uint64_t v19 = v148;
              swift_bridgeObjectRelease();
              if (([v17 isPinnedByCurrentUser] & 1) == 0)
              {
                uint64_t v18 = 1;
                uint64_t v15 = (uint64_t)v142;
                unint64_t v21 = v125;
                unint64_t v73 = v126;
                uint64_t v74 = v129;
LABEL_64:
                [v17 setIsPinnedByCurrentUser:v18];
                uint64_t v17 = v17;
                uint64_t v92 = Logger.logObject.getter();
                int v127 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v92, (os_log_type_t)v127))
                {
                  int v123 = v18;
                  uint64_t v93 = swift_slowAlloc();
                  id v122 = (void *)swift_slowAlloc();
                  v159 = v122;
                  *(_DWORD *)uint64_t v93 = v121;
                  aBlock[0] = v143;
                  swift_getMetatypeMetadata();
                  uint64_t v94 = String.init<A>(describing:)();
                  *(void *)(v93 + 4) = sub_1000C51B8(v94, v95, (uint64_t *)&v159);
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v93 + 12) = 2082;
                  id v96 = [v17 remObjectID];
                  if (v96)
                  {
                    uint64_t v97 = v96;
                    id v98 = [v96 description];

                    uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v101 = v100;

                    unint64_t v21 = v125;
                  }
                  else
                  {
                    unint64_t v101 = 0xE300000000000000;
                    uint64_t v99 = 7104878;
                  }
                  *(void *)(v93 + 14) = sub_1000C51B8(v99, v101, (uint64_t *)&v159);

                  swift_bridgeObjectRelease();
                  *(_WORD *)(v93 + 22) = 1026;
                  *(_DWORD *)(v93 + 24) = v123;
                  _os_log_impl((void *)&_mh_execute_header, v92, (os_log_type_t)v127, "%s: Updated pin state {list: %{public}s, isPinnedByCurrentUser: %{BOOL,public}d}", (uint8_t *)v93, 0x1Cu);
                  uint64_t v18 = (uint64_t)v122;
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  (*v150)(v152, v153);
                  unint64_t v73 = v126;
                }
                else
                {

                  (*v150)(v152, v153);
                }
                continue;
              }
              uint64_t v15 = (uint64_t)v142;
              unint64_t v21 = v125;
              unint64_t v73 = v126;
LABEL_68:
              v91(v152, v153);

              uint64_t v74 = v129;
              continue;
            }
LABEL_61:
            swift_bridgeObjectRelease();
            uint64_t v15 = (uint64_t)v142;
            unint64_t v21 = v125;
            unint64_t v73 = v126;
            uint64_t v74 = v129;
          }
          if ([v17 isPinnedByCurrentUser])
          {
            uint64_t v18 = 0;
            goto LABEL_64;
          }
          uint64_t v91 = *v150;
          goto LABEL_68;
        }
      }
      else
      {
        (*v146)(v15, 1, 1, v153);
      }

      sub_1000966BC(v15, (uint64_t *)&unk_100909E50);
    }
    while (v72 != v21);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v102 = v145;
  if (([v145 hasChanges] & 1) != 0
    && (aBlock[0] = 0,
        unsigned int v103 = [v102 save:aBlock],
        id v104 = aBlock[0],
        id v105 = v128,
        !v103))
  {
    uint64_t v106 = v104;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100907368 != -1) {
      swift_once();
    }
    uint64_t v107 = type metadata accessor for Logger();
    sub_10008E2DC(v107, (uint64_t)qword_100915A10);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v108 = Logger.logObject.getter();
    os_log_type_t v109 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v108, v109))
    {
      uint64_t v110 = swift_slowAlloc();
      v159 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v110 = 136315394;
      aBlock[0] = v143;
      swift_getMetatypeMetadata();
      uint64_t v111 = String.init<A>(describing:)();
      aBlock[0] = (id)sub_1000C51B8(v111, v112, (uint64_t *)&v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v110 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v113 = Error.rem_errorDescription.getter();
      aBlock[0] = (id)sub_1000C51B8(v113, v114, (uint64_t *)&v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v108, v109, "%s: Failed to handle event {error: %{public}s}", (uint8_t *)v110, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
  }
  id v115 = (void *)swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_1003755D8;
  aBlock[5] = v115;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C2ED0;
  uint64_t v116 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v117 = v138;
  static DispatchQoS.unspecified.getter();
  v159 = _swiftEmptyArrayStorage;
  sub_1003755E0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  uint64_t v118 = v140;
  uint64_t v119 = v135;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v116);
  (*(void (**)(char *, uint64_t))(v134 + 8))(v118, v119);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v117, v141);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100375200()
{
  return UUID.init(uuidString:)();
}

uint64_t sub_100375230()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    char v2 = *(unsigned char *)(result + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent);
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_isHandlingEvent) = 0;
    sub_100372F9C(v2);
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v3 = *(void *)(v1 + 24);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v1, ObjectType, v3);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1003752F0()
{
  sub_1000F3DB4(v0 + 16);

  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd30RDStalePinnedListsEventHandler_debounceInterval;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_1003753AC()
{
  sub_1003752F0();

  return swift_deallocClassInstance();
}

uint64_t sub_100375404()
{
  return type metadata accessor for RDStalePinnedListsEventHandler();
}

uint64_t type metadata accessor for RDStalePinnedListsEventHandler()
{
  uint64_t result = qword_100915A90;
  if (!qword_100915A90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100375458()
{
  uint64_t result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10037552C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100375564()
{
  return sub_100372C4C();
}

uint64_t sub_10037556C()
{
  return sub_100372CB8();
}

uint64_t sub_100375574()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003755B4()
{
  return sub_100373810(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1003755C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003755D0()
{
  return swift_release();
}

uint64_t sub_1003755D8()
{
  return sub_100375230();
}

uint64_t sub_1003755E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100375628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100915B90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100375698()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100915BB0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100915BB0);
  if (qword_100907858 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942550);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100375760(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v30 = a1;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_10090A4B0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v2 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_storeControllerNotificationCenterToken;
  uint64_t v9 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v32 = v10 + 56;
  v31(v8, 1, 1, v9);
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E60;
  id v12 = [self cdEntityName];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  *(void *)(inited + 32) = v13;
  *(void *)(inited + 40) = v15;
  id v16 = [self cdEntityName];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(inited + 48) = v17;
  *(void *)(inited + 56) = v19;
  id v20 = [self cdEntityName];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  *(void *)(inited + 64) = v21;
  *(void *)(inited + 72) = v23;
  Swift::Int v24 = sub_10032D9A0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v25 = v30;
  *(void *)(v3 + 16) = v30;
  type metadata accessor for REMWidgetRefresh();
  swift_allocObject();
  id v26 = v25;
  *(void *)(v3 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_widgetRefresh) = REMWidgetRefresh.init(interval:queue:)();
  *(void *)(v3 + 24) = a2;
  uint64_t v27 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_retain();
  sub_100401C48(v24, v26, (uint64_t)sub_10037610C, v27, (uint64_t)v7);
  swift_release_n();
  swift_bridgeObjectRelease();

  swift_release();
  v31((uint64_t)v7, 0, 1, v9);
  uint64_t v28 = v3 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_storeControllerNotificationCenterToken;
  swift_beginAccess();
  sub_1000E5150((uint64_t)v7, v28);
  swift_endAccess();
  return v3;
}

void sub_100375A60(uint64_t a1)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    switch(a1)
    {
      case -1:
      case 9:
      case 17:
        if (qword_100907378 != -1) {
          swift_once();
        }
        uint64_t v2 = type metadata accessor for Logger();
        sub_10008E2DC(v2, (uint64_t)qword_100915BB0);
        uint64_t v3 = Logger.logObject.getter();
        os_log_type_t v4 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v3, v4))
        {
          uint64_t v5 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v5 = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, v4, "requested widget refresh", v5, 2u);
          swift_slowDealloc();
        }

        swift_retain();
        dispatch thunk of REMWidgetRefresh.refresh()();
        swift_release();
        goto LABEL_8;
      case 25:
      case 33:
        goto LABEL_8;
      default:
        if (qword_100907378 != -1) {
          swift_once();
        }
        uint64_t v6 = type metadata accessor for Logger();
        sub_10008E2DC(v6, (uint64_t)qword_100915BB0);
        uint64_t v7 = Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v7, v8))
        {
          uint64_t v9 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v9 = 134349056;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDWidgetRefreshEngine: Unknown QoS. {qualityOfService: %{public}ld}", v9, 0xCu);
          swift_slowDealloc();
          swift_release();
        }
        else
        {

LABEL_8:
          swift_release();
        }
        break;
    }
  }
}

uint64_t sub_100375D44()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090A4B0);
  __chkstk_darwin(v2 - 8);
  os_log_type_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = v1 + OBJC_IVAR____TtC7remindd21RDWidgetRefreshEngine_storeControllerNotificationCenterToken;
  swift_beginAccess();
  sub_1000E5250(v9, (uint64_t)v4);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000E52B8((uint64_t)v4);
LABEL_5:

    swift_release();
    sub_1000E52B8(v9);
    swift_release();
    return v1;
  }
  sub_1000E5318((uint64_t)v4, (uint64_t)v8);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = *(os_unfair_lock_s **)(v10 + 40);
  os_unfair_lock_lock(v11);
  __chkstk_darwin(v12);
  *(void *)&v15[-16] = v8;
  swift_beginAccess();
  uint64_t result = sub_1001EC244((uint64_t (*)(unint64_t))sub_1000E537C);
  uint64_t v14 = *(void *)(*(void *)(v10 + 48) + 16);
  if (v14 >= result)
  {
    sub_1001ECEB0(result, v14);
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    sub_100094178((uint64_t)v8);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_100375F7C()
{
  sub_100375D44();

  return swift_deallocClassInstance();
}

uint64_t sub_100375FD4()
{
  return type metadata accessor for RDWidgetRefreshEngine();
}

uint64_t type metadata accessor for RDWidgetRefreshEngine()
{
  uint64_t result = qword_100915BF8;
  if (!qword_100915BF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100376028()
{
  sub_1000DF350();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1003760D4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10037610C(uint64_t a1)
{
}

uint64_t sub_100376114()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100915CB0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100915CB0);
  if (qword_1009077A8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942340);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1003762F0(void *a1, int a2, int a3, void *aBlock, const char *a5, SEL *a6)
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;
  _Block_copy(v9);
  id v13 = a1;
  sub_1003784C0(v10, v12, (uint64_t)v13, (uint64_t)v9, a5, a6);
  _Block_release(v9);
  _Block_release(v9);

  return swift_bridgeObjectRelease();
}

void sub_10037639C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100907380 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_100915CB0);
  swift_unknownObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v20 = a2;
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v11 = 136446210;
    uint64_t v12 = v4;
    id v13 = [a1 description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    uint64_t v4 = v12;
    sub_1000C51B8(v14, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    a2 = v20;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "getTrackingState with {clientID: %{public}s}", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  uint64_t v17 = *(void **)(v4 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  aBlock[4] = (uint64_t)sub_1001492C4;
  aBlock[5] = v18;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100102758;
  aBlock[3] = (uint64_t)&unk_1008C3128;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v17 getTrackingStateWithClientID:a1 completionHandler:v19];
  _Block_release(v19);
}

void sub_1003766F8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_100907380 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_100915CB0);
  swift_unknownObjectRetain_n();
  id v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v26 = v5;
    id v15 = [a2 description];
    uint64_t v27 = a3;
    uint64_t v28 = a4;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    sub_1000C51B8(v16, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    id v19 = [v11 description];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    a4 = v28;
    sub_1000C51B8(v20, v22, aBlock);
    uint64_t v5 = v26;
    a3 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "saveTrackingState with {clientID: %{public}s, trackingState: %{public}s}", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  uint64_t v23 = *(void **)(v5 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a3;
  *(void *)(v24 + 24) = a4;
  aBlock[4] = (uint64_t)sub_10011FBC4;
  aBlock[5] = v24;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000E13D0;
  aBlock[3] = (uint64_t)&unk_1008C30D8;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v23 saveTrackingState:v11 withClientID:a2 completionHandler:v25];
  _Block_release(v25);
}

void sub_100376AF4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (qword_100907380 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_100915CB0);
  id v12 = a1;
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v24 = v6;
    uint64_t v25 = a4;
    uint64_t v26 = a3;
    id v15 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)id v15 = 136446210;
    if (a1)
    {
      id v16 = [v12 description];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;
    }
    else
    {
      unint64_t v19 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    sub_1000C51B8(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "fetchHistory after {token: %{public}s}", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a4 = v25;
    a3 = v26;
    uint64_t v6 = v24;
  }
  else
  {
  }
  uint64_t v20 = *(void **)(v6 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a4;
  *(void *)(v22 + 24) = a5;
  aBlock[4] = (uint64_t)sub_1003786E8;
  aBlock[5] = v22;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100376DD0;
  aBlock[3] = (uint64_t)&unk_1008C3088;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v20 fetchHistoryAfterToken:v12 entityNames:isa transactionFetchLimit:a3 completionHandler:v23];
  _Block_release(v23);
}

void sub_100376DD0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

void sub_100376F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v36 = a5;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907380 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_100915CB0);
  id v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v35 = a1;
  v16(v14, a1, v11);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v34 = a3;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v32 = a2;
    aBlock[0] = v21;
    uint64_t v31 = v5;
    *(_DWORD *)uint64_t v20 = 136446210;
    uint64_t v33 = a4;
    uint64_t v22 = Date.description.getter();
    uint64_t v37 = sub_1000C51B8(v22, v23, aBlock);
    a4 = v33;
    uint64_t v6 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "fetchHistory after {date: %{public}s}", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v34;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  uint64_t v24 = *(void **)(v6 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  Class v26 = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v36;
  *(void *)(v27 + 16) = a4;
  *(void *)(v27 + 24) = v28;
  aBlock[4] = (uint64_t)sub_1003786E8;
  aBlock[5] = v27;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100376DD0;
  aBlock[3] = (uint64_t)&unk_1008C3038;
  uint64_t v29 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v24 fetchHistoryAfterDate:isa entityNames:v26 transactionFetchLimit:a3 completionHandler:v29];
  _Block_release(v29);
}

void sub_10037741C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100907380 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_100915CB0);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v20 = v4;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446210;
    id v13 = [v9 description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    sub_1000C51B8(v14, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v4 = v20;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "fetchHistory after {token: %{public}s}", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v17 = *(void **)(v4 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  aBlock[4] = (uint64_t)sub_10011FBC4;
  aBlock[5] = v18;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000E13D0;
  aBlock[3] = (uint64_t)&unk_1008C2FE8;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v17 deleteHistoryBeforeToken:v9 completionHandler:v19];
  _Block_release(v19);
}

void sub_100377768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907380 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100915CB0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v25 = v3;
    uint64_t v15 = swift_slowAlloc();
    v24[1] = a1;
    unint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v26 = a2;
    aBlock[0] = v17;
    uint64_t v27 = a3;
    *(_DWORD *)unint64_t v16 = 136446210;
    uint64_t v18 = Date.description.getter();
    uint64_t v28 = sub_1000C51B8(v18, v19, aBlock);
    uint64_t v4 = v25;
    a3 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "fetchHistory after {date: %{public}s}", v16, 0xCu);
    swift_arrayDestroy();
    a2 = v26;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  uint64_t v20 = *(void **)(v4 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a2;
  *(void *)(v22 + 24) = a3;
  aBlock[4] = (uint64_t)sub_10011E21C;
  aBlock[5] = v22;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000E13D0;
  aBlock[3] = (uint64_t)&unk_1008C2F98;
  unint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v20 deleteHistoryBeforeDate:isa completionHandler:v23];
  _Block_release(v23);
}

void sub_100377BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100907380 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_100915CB0);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v20 = a3;
    uint64_t v10 = a2;
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v11 = 136446210;
    sub_1001C1A64();
    swift_bridgeObjectRetain();
    uint64_t v12 = Array.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v15 = v12;
    a2 = v10;
    a3 = v20;
    sub_1000C51B8(v15, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "fetchAuxiliaryChangeInfos with {auxiliaryChangeInfoObjectIDs: %{public}s}", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v16 = *(void **)(v4 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  sub_1001C1A64();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  aBlock[4] = (uint64_t)sub_100378198;
  aBlock[5] = v18;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100377EB4;
  aBlock[3] = (uint64_t)&unk_1008C2F48;
  unint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v16 fetchAuxiliaryChangeInfos:isa completionHandler:v19];
  _Block_release(v19);
}

void sub_100377EB4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  sub_1001C1A64();
  sub_1001207D4();
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_10037801C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001C1A64();
  sub_1001207D4();
  v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

id sub_1003780F8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDXPCChangeTrackingPerformer();
  return [super dealloc];
}

uint64_t type metadata accessor for RDXPCChangeTrackingPerformer()
{
  return self;
}

uint64_t sub_100378160()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100378198()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1003781C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003781D0()
{
  return swift_release();
}

uint64_t sub_1003781D8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100378210(uint64_t a1, uint64_t a2)
{
  sub_10037801C(a1, a2, *(void *)(v2 + 16));
}

void sub_100378218(uint64_t a1, uint64_t a2)
{
  sub_100146C58(a1, a2, *(void *)(v2 + 16));
}

void sub_100378220(uint64_t a1, uint64_t a2)
{
  if (qword_100907380 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100915CB0);
  NSDictionary v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "currentChangeToken initiated", v7, 2u);
    swift_slowDealloc();
  }

  id v8 = [*(id *)(a1 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation) currentChangeToken];
  (*(void (**)(uint64_t, id))(a2 + 16))(a2, v8);
}

void sub_10037835C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_100907380 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_100915CB0);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v9 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "currentChangeToken for {accountTypes: %ld}", v9, 0xCu);
    swift_slowDealloc();
  }

  id v10 = [*(id *)(a2 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation) currentChangeTokenForAccountTypes:a1];
  (*(void (**)(uint64_t, id))(a3 + 16))(a3, v10);
}

void sub_1003784C0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, const char *a5, SEL *a6)
{
  if (qword_100907380 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100915CB0);
  swift_bridgeObjectRetain_n();
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v19 = a3;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, a5, v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v19;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v16 = *(void **)(a3 + OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation);
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v16 *a6:v17];

  (*(void (**)(uint64_t, id))(a4 + 16))(a4, v18);
}

uint64_t sub_10037874C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100915D60);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100915D60);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100378814()
{
  id result = [self cloudkit];
  qword_100915D78 = (uint64_t)result;
  return result;
}

void *sub_100378850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v4
            + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_cancellables) = &_swiftEmptySetSingleton;
  *(void *)((char *)v4
            + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForHandlingEvent) = 0;
  *(void *)((char *)v4
            + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForDebouncingEvent) = 0;
  *((unsigned char *)v4
  + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent) = 0;
  *((unsigned char *)v4
  + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent) = 0;
  v4[4] = a1;
  v4[5] = a2;
  os_log_type_t v9 = (char *)v4
     + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_debounceInterval;
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a3, v10);
  *(void *)((char *)v4
            + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_notificationCenter) = a4;
  return v4;
}

uint64_t sub_10037893C()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10091A450);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  uint64_t v35 = v9;
  __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134(&qword_100915B60);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  uint64_t v37 = v13;
  __chkstk_darwin(v12);
  uint64_t v30 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134(&qword_100915B68);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v38 = v15;
  uint64_t v39 = v16;
  __chkstk_darwin(v15);
  uint64_t v33 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[0] = v0;
  NSNotificationCenter.publisher(for:object:)();
  id v40 = *(id *)(v0 + 40);
  id v18 = v40;
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  uint64_t v32 = v20 + 56;
  v31(v3, 1, 1, v19);
  void v29[2] = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1003755E0((unint64_t *)&qword_10091A460, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
  v29[1] = sub_100096654();
  id v21 = v18;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v3, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_allocObject();
  swift_weakInit();
  sub_1000967F4((unint64_t *)&qword_10090ABA0, (uint64_t *)&unk_10091A450);
  uint64_t v22 = v34;
  unint64_t v23 = v30;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v22);
  id v40 = v21;
  v31(v3, 1, 1, v19);
  sub_1000967F4(&qword_100915B70, &qword_100915B60);
  id v24 = v21;
  uint64_t v25 = v33;
  uint64_t v26 = v36;
  Publisher.debounce<A>(for:scheduler:options:)();
  sub_1000966BC((uint64_t)v3, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v23, v26);
  swift_allocObject();
  swift_weakInit();
  sub_1000967F4((unint64_t *)&unk_100915B78, &qword_100915B68);
  uint64_t v27 = v38;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v27);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100378F4C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    char v2 = *(unsigned char *)(result
                  + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent);
    *(unsigned char *)(v1
             + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent) = 1;
    sub_100379780(v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_100378FB8()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_100379050();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    char v2 = *(unsigned char *)(result
                  + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent);
    *(unsigned char *)(v1
             + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent) = 0;
    sub_100379780(v2);
    return swift_release();
  }
  return result;
}

void sub_100379050()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (void *)v0[5];
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if ((*((unsigned char *)v0
          + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent) & 1) == 0)
    {
      *((unsigned char *)v0
      + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent) = 1;
      sub_10037929C(0);
      id v8 = [(id)v0[4] newBackgroundContextWithAuthor:RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandlerAuthor];
      uint64_t v9 = swift_allocObject();
      swift_weakInit();
      uint64_t v10 = (void *)swift_allocObject();
      v10[2] = v9;
      v10[3] = v8;
      v10[4] = v1;
      aBlock[4] = sub_10037B4BC;
      aBlock[5] = v10;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100236C78;
      aBlock[3] = &unk_1008C32B8;
      os_log_type_t v11 = _Block_copy(aBlock);
      id v12 = v8;
      swift_release();
      [v12 performBlock:v11];
      _Block_release(v11);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10037929C(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((unsigned __int8 *)v2
       + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent) != v3)
  {
    if (*((unsigned char *)v2
         + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent))
    {
      *(uint64_t *)((char *)v2
                 + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForHandlingEvent) = os_transaction_create();
      swift_unknownObjectRelease();
      static os_signpost_type_t.begin.getter();
      if (qword_100907390 != -1) {
        swift_once();
      }
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if (qword_100907388 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_10008E2DC(v9, (uint64_t)qword_100915D60);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        uint64_t v24 = v4;
        *(_DWORD *)id v12 = 136315138;
        swift_getMetatypeMetadata();
        uint64_t v13 = String.init<A>(describing:)();
        uint64_t v24 = sub_1000C51B8(v13, v14, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s: Started handling event", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    else
    {
      if (qword_100907388 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_10008E2DC(v15, (uint64_t)qword_100915D60);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        id v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)id v18 = 136315138;
        v22[1] = v18 + 4;
        uint64_t v23 = v19;
        uint64_t v24 = v4;
        swift_getMetatypeMetadata();
        uint64_t v20 = String.init<A>(describing:)();
        uint64_t v24 = sub_1000C51B8(v20, v21, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: Finished handling event", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      static os_signpost_type_t.end.getter();
      if (qword_100907390 != -1) {
        swift_once();
      }
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      *(uint64_t *)((char *)v2
                 + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForHandlingEvent) = 0;
      swift_unknownObjectRelease();
    }
  }
}

void sub_100379780(char a1)
{
  if (*((unsigned char *)v1
       + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent) != (a1 & 1))
  {
    uint64_t v2 = v1;
    uint64_t v3 = *v1;
    if (*((unsigned char *)v1
         + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isDebouncingEvent))
    {
      *(void *)((char *)v1
                + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForDebouncingEvent) = os_transaction_create();
      swift_unknownObjectRelease();
      if (qword_100907388 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_10008E2DC(v4, (uint64_t)qword_100915D60);
      osos_log_t log = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v17 = v3;
        *(_DWORD *)uint64_t v6 = 136315138;
        swift_getMetatypeMetadata();
        uint64_t v7 = String.init<A>(describing:)();
        uint64_t v17 = sub_1000C51B8(v7, v8, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, oslog, v5, "%s: Started debouncing event", v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      if (qword_100907388 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_10008E2DC(v9, (uint64_t)qword_100915D60);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v17 = v3;
        *(_DWORD *)id v12 = 136315138;
        swift_getMetatypeMetadata();
        uint64_t v13 = String.init<A>(describing:)();
        uint64_t v17 = sub_1000C51B8(v13, v14, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s: Finished debouncing event", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      *(void *)((char *)v2
                + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_osTransactionForDebouncingEvent) = 0;
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_100379B10(uint64_t a1, id a2, void *a3)
{
  id v154 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v130[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v11 = &v130[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v153 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v153);
  uint64_t v156 = &v130[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v14 = __chkstk_darwin(v13);
  v152 = &v130[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __chkstk_darwin(v14);
  int v150 = &v130[-v17];
  uint64_t v18 = __chkstk_darwin(v16);
  os_log_type_t v149 = &v130[-v19];
  uint64_t v20 = __chkstk_darwin(v18);
  v159 = &v130[-v21];
  uint64_t v22 = __chkstk_darwin(v20);
  id v165 = &v130[-v23];
  __chkstk_darwin(v22);
  uint64_t v160 = &v130[-v24];
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v142 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25);
  NSString v164 = &v130[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  uint64_t v163 = &v130[-v28];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v155 = result;
  if (!result) {
    return result;
  }
  id v143 = v11;
  uint64_t v144 = v9;
  uint64_t v147 = v7;
  uint64_t v148 = v8;
  uint64_t v145 = v5;
  uint64_t v146 = v4;
  uint64_t v30 = 0;
  unint64_t v31 = sub_10037B7F8((unint64_t)a2);
  if (qword_100907388 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = sub_10008E2DC(v32, (uint64_t)qword_100915D60);
  swift_bridgeObjectRetain_n();
  uint64_t v139 = v33;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  id v136 = a2;
  unint64_t v140 = v31;
  uint64_t v135 = v13;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v162 = (void *)swift_slowAlloc();
    id v167 = v162;
    *(_DWORD *)uint64_t v37 = 136315394;
    aBlock[0] = v154;
    swift_getMetatypeMetadata();
    uint64_t v38 = String.init<A>(describing:)();
    aBlock[0] = (id)sub_1000C51B8(v38, v39, (uint64_t *)&v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2082;
    sub_1003755E0((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    uint64_t v40 = Dictionary.description.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    aBlock[0] = (id)sub_1000C51B8(v40, v42, (uint64_t *)&v167);
    a2 = v136;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s: Did fetch expected mapping of 'mostRecentTargetTemplateIdentifierByCurrentUser' by 'sourceListIdentifier' {mapping: %{public}s}", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v43 = (uint64_t)v160;
  unint64_t v58 = sub_10037C160((uint64_t)a2);
  swift_bridgeObjectRetain_n();
  uint64_t v59 = Logger.logObject.getter();
  int v60 = static os_log_type_t.default.getter();
  BOOL v61 = os_log_type_enabled(v59, (os_log_type_t)v60);
  uint64_t v62 = (void *)(v58 >> 62);
  unint64_t v151 = v58;
  if (!v61)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_35;
  }
  LODWORD(v161) = v60;
  uint64_t v30 = swift_slowAlloc();
  uint64_t v158 = (void *)swift_slowAlloc();
  id v167 = v158;
  *(_DWORD *)uint64_t v30 = 136315650;
  aBlock[0] = v154;
  swift_getMetatypeMetadata();
  uint64_t v63 = String.init<A>(describing:)();
  aBlock[0] = (id)sub_1000C51B8(v63, v64, (uint64_t *)&v167);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v30 + 12) = 2050;
  if (v62) {
    goto LABEL_78;
  }
  unint64_t v65 = *(void **)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    aBlock[0] = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2082;
    aBlock[0] = _swiftEmptyArrayStorage;
    if (v62)
    {
      swift_bridgeObjectRetain();
      uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v66 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v162 = v62;
    if (v66)
    {
      if (v66 < 1) {
        __break(1u);
      }
      uint64_t v68 = 0;
      unint64_t v69 = v58 & 0xC000000000000001;
      do
      {
        if (v69) {
          id v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v70 = *(id *)(v58 + 8 * v68 + 32);
        }
        unint64_t v71 = v70;
        id v72 = [v70 remObjectID];

        if (v72)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          unint64_t v58 = v151;
        }
        ++v68;
      }
      while (v66 != v68);
    }
    swift_bridgeObjectRelease();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    uint64_t v73 = Array.description.getter();
    unint64_t v75 = v74;
    swift_bridgeObjectRelease();
    aBlock[0] = (id)sub_1000C51B8(v73, v75, (uint64_t *)&v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v161, "%s: Did fetch lists shared to current user {count: %{public}ld, objectIDs: %{public}s)}", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v43 = (uint64_t)v160;
    uint64_t v62 = v162;
LABEL_35:
    if (v62) {
      break;
    }
    uint64_t v76 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v76) {
      goto LABEL_73;
    }
LABEL_37:
    if (v76 >= 1)
    {
      uint64_t v77 = 0;
      uint64_t v158 = (void *)(v58 & 0xC000000000000001);
      id v78 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56);
      uint64_t v161 = (void (**)(uint64_t, unsigned char *, uint64_t))(v142 + 32);
      uint64_t v162 = (void *)(v142 + 48);
      uint64_t v134 = v142 + 16;
      uint64_t v141 = (void (**)(unsigned char *, uint64_t))(v142 + 8);
      *(void *)&long long v67 = 136315650;
      long long v133 = v67;
      uint64_t v132 = (char *)&type metadata for Any + 8;
      uint64_t v138 = v25;
      uint64_t v157 = v76;
      uint64_t v137 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56);
      while (1)
      {
        id v79 = v158 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v58 + 8 * v77 + 32);
        unint64_t v80 = v79;
        id v81 = [v79 identifier];
        if (!v81) {
          break;
        }
        uint64_t v82 = v81;
        uint64_t v83 = v164;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v84 = (void (*)(unsigned char *, uint64_t, uint64_t))*v161;
        (*v161)(v43, v83, v25);
        uint64_t v85 = *v78;
        (*v78)(v43, 0, 1, v25);
        uint64_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*v162;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v162)(v43, 1, v25) == 1) {
          goto LABEL_40;
        }
        uint64_t v87 = (uint64_t)v163;
        v84(v163, v43, v25);
        unint64_t v88 = v140;
        if (*(void *)(v140 + 16) && (unint64_t v89 = sub_100306EC4(v87), (v90 & 1) != 0))
        {
          uint64_t v91 = v165;
          (*(void (**)(unsigned char *, unint64_t, uint64_t))(v142 + 16))(v165, *(void *)(v88 + 56) + *(void *)(v142 + 72) * v89, v25);
          uint64_t v92 = 0;
        }
        else
        {
          uint64_t v92 = 1;
          uint64_t v91 = v165;
        }
        uint64_t v93 = 1;
        v85((uint64_t)v91, v92, 1, v25);
        id v94 = [v80 mostRecentTargetTemplateIdentifierByCurrentUser];
        if (v94)
        {
          unint64_t v95 = v94;
          id v96 = v159;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v93 = 0;
        }
        else
        {
          id v96 = v159;
        }
        v85((uint64_t)v96, v93, 1, v25);
        uint64_t v97 = v156;
        uint64_t v98 = (uint64_t)&v156[*(int *)(v153 + 48)];
        sub_1001248EC((uint64_t)v96, (uint64_t)v156);
        sub_1001248EC((uint64_t)v165, v98);
        if (v86((uint64_t)v97, 1, v25) == 1)
        {
          sub_1000966BC((uint64_t)v96, (uint64_t *)&unk_100909E50);
          int v99 = v86(v98, 1, v25);
          unint64_t v58 = v151;
          id v78 = v137;
          if (v99 != 1) {
            goto LABEL_59;
          }
          sub_1000966BC((uint64_t)v97, (uint64_t *)&unk_100909E50);
        }
        else
        {
          unint64_t v100 = v149;
          sub_1001248EC((uint64_t)v97, (uint64_t)v149);
          if (v86(v98, 1, v25) == 1)
          {
            sub_1000966BC((uint64_t)v159, (uint64_t *)&unk_100909E50);
            (*v141)(v100, v25);
            id v78 = v137;
LABEL_59:
            sub_1000966BC((uint64_t)v97, (uint64_t *)&unk_10090B4C0);
LABEL_60:
            unint64_t v101 = v165;
            id v102 = v150;
            sub_1001248EC((uint64_t)v165, (uint64_t)v150);
            uint64_t v25 = v138;
            if (v86((uint64_t)v102, 1, v138) == 1)
            {
              Class isa = 0;
            }
            else
            {
              Class isa = UUID._bridgeToObjectiveC()().super.isa;
              (*v141)(v102, v25);
            }
            uint64_t v104 = (uint64_t)v152;
            [v80 setMostRecentTargetTemplateIdentifierByCurrentUser:isa];

            sub_1001248EC((uint64_t)v101, v104);
            id v105 = v80;
            uint64_t v106 = v104;
            uint64_t v107 = Logger.logObject.getter();
            int v108 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v107, (os_log_type_t)v108))
            {
              uint64_t v109 = swift_slowAlloc();
              id v167 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v109 = v133;
              aBlock[0] = v154;
              swift_getMetatypeMetadata();
              uint64_t v110 = String.init<A>(describing:)();
              *(void *)(v109 + 4) = sub_1000C51B8(v110, v111, (uint64_t *)&v167);
              swift_bridgeObjectRelease();
              *(_WORD *)(v109 + 12) = 2082;
              id v112 = [v105 remObjectID];
              if (v112)
              {
                uint64_t v113 = v112;
                id v114 = [v112 description];
                int v131 = v108;
                id v115 = v114;

                uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v118 = v117;

                LOBYTE(v108) = v131;
              }
              else
              {
                unint64_t v118 = 0xE300000000000000;
                uint64_t v116 = 7104878;
              }
              *(void *)(v109 + 14) = sub_1000C51B8(v116, v118, (uint64_t *)&v167);

              swift_bridgeObjectRelease();
              *(_WORD *)(v109 + 22) = 2082;
              uint64_t v123 = (uint64_t)v152;
              uint64_t v124 = Optional.descriptionOrNil.getter();
              *(void *)(v109 + 24) = sub_1000C51B8(v124, v125, (uint64_t *)&v167);
              swift_bridgeObjectRelease();
              sub_1000966BC(v123, (uint64_t *)&unk_100909E50);
              _os_log_impl((void *)&_mh_execute_header, v107, (os_log_type_t)v108, "%s: Updated mostRecentTargetTemplateIdentifierByCurrentUser of shared-to-me list {list: %{public}s, mostRecentTargetTemplateIdentifierByCurrentUser: %{public}s}", (uint8_t *)v109, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v119 = v165;
            }
            else
            {

              sub_1000966BC(v106, (uint64_t *)&unk_100909E50);
              uint64_t v119 = v101;
            }
            sub_1000966BC((uint64_t)v119, (uint64_t *)&unk_100909E50);
            (*v141)(v163, v25);
            uint64_t v43 = (uint64_t)v160;
            unint64_t v58 = v151;
            goto LABEL_41;
          }
          id v120 = v164;
          v84(v164, v98, v25);
          sub_1003755E0((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v121 = dispatch thunk of static Equatable.== infix(_:_:)();
          id v122 = *v141;
          (*v141)(v120, v25);
          sub_1000966BC((uint64_t)v159, (uint64_t *)&unk_100909E50);
          v122(v100, v25);
          sub_1000966BC((uint64_t)v156, (uint64_t *)&unk_100909E50);
          unint64_t v58 = v151;
          id v78 = v137;
          if ((v121 & 1) == 0) {
            goto LABEL_60;
          }
        }

        sub_1000966BC((uint64_t)v165, (uint64_t *)&unk_100909E50);
        uint64_t v25 = v138;
        (*v141)(v163, v138);
        uint64_t v43 = (uint64_t)v160;
LABEL_41:
        if (v157 == ++v77) {
          goto LABEL_73;
        }
      }
      (*v78)(v43, 1, 1, v25);
LABEL_40:

      sub_1000966BC(v43, (uint64_t *)&unk_100909E50);
      goto LABEL_41;
    }
    __break(1u);
LABEL_78:
    swift_bridgeObjectRetain();
    unint64_t v65 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v76) {
    goto LABEL_37;
  }
LABEL_73:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v126 = v136;
  unsigned __int8 v127 = [v136 hasChanges];
  uint64_t v52 = v148;
  BOOL v53 = v147;
  if (v127)
  {
    aBlock[0] = 0;
    if ([v126 save:aBlock])
    {
      id v128 = aBlock[0];
    }
    else
    {
      id v129 = aBlock[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100907388 != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      sub_10008E2DC(v44, (uint64_t)qword_100915D60);
      swift_errorRetain();
      swift_errorRetain();
      id v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = swift_slowAlloc();
        id v167 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v47 = 136315394;
        aBlock[0] = v154;
        swift_getMetatypeMetadata();
        uint64_t v48 = String.init<A>(describing:)();
        aBlock[0] = (id)sub_1000C51B8(v48, v49, (uint64_t *)&v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2082;
        swift_getErrorValue();
        uint64_t v50 = Error.rem_errorDescription.getter();
        aBlock[0] = (id)sub_1000C51B8(v50, v51, (uint64_t *)&v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s: Failed to handle event {error: %{public}s}", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v52 = v148;
      BOOL v53 = v147;
    }
  }
  unint64_t v54 = (void *)swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_10037C158;
  aBlock[5] = v54;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C32E0;
  uint64_t v55 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v56 = v143;
  static DispatchQoS.unspecified.getter();
  id v167 = _swiftEmptyArrayStorage;
  sub_1003755E0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  uint64_t v57 = v146;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v55);
  (*(void (**)(unsigned char *, uint64_t))(v145 + 8))(v53, v57);
  (*(void (**)(unsigned char *, uint64_t))(v144 + 8))(v56, v52);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10037B138()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    char v2 = *(unsigned char *)(result
                  + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent);
    *(unsigned char *)(v1
             + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_isHandlingEvent) = 0;
    sub_10037929C(v2);
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v3 = *(void *)(v1 + 24);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v1, ObjectType, v3);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10037B1F8()
{
  sub_1000F3DB4(v0 + 16);

  uint64_t v1 = v0
     + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_debounceInterval;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler_notificationCenter));
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_10037B2B4()
{
  sub_10037B1F8();

  return swift_deallocClassInstance();
}

uint64_t sub_10037B30C()
{
  return type metadata accessor for RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler();
}

uint64_t type metadata accessor for RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler()
{
  uint64_t result = qword_100915DE0;
  if (!qword_100915DE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10037B360()
{
  uint64_t result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10037B434()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10037B46C()
{
  return sub_100378F4C();
}

uint64_t sub_10037B474()
{
  return sub_100378FB8();
}

uint64_t sub_10037B47C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10037B4BC()
{
  return sub_100379B10(*(void *)(v0 + 16), *(id *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10037B4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10037B4D8()
{
  return swift_release();
}

uint64_t sub_10037B4E0()
{
  uint64_t KeyPath = swift_getKeyPath();
  sub_10039F2D8(KeyPath);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_1002F51CC(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  unint64_t v1 = (void *)sub_1002F52FC(_swiftEmptyArrayStorage);
  type metadata accessor for REMCDTemplate();
  id v2 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v3 = [(id)swift_getObjCClassFromMetadata() entity];
  [v2 setEntity:v3];

  [v2 setAffectedStores:0];
  [v2 setPredicate:v1];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100776E80;
  *(void *)(v4 + 32) = 0x696669746E656469;
  *(void *)(v4 + 40) = 0xEA00000000007265;
  *(void *)(v4 + 88) = &type metadata for String;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = 0x694C656372756F73;
  *(void *)(v4 + 72) = 0xEF4C525544497473;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 setPropertiesToFetch:isa];

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10077A530;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  *(void *)(v6 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  specialized Array._endMutation()();
  Class v7 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 setSortDescriptors:v7];

  uint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();
  return v8;
}

unint64_t sub_10037B7F8(unint64_t a1)
{
  unint64_t v94 = a1;
  uint64_t v1 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v1 - 8);
  uint64_t v87 = (char *)&v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for URL();
  uint64_t v93 = *(void *)(v89 - 8);
  uint64_t v3 = __chkstk_darwin(v89);
  uint64_t v82 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v69 - v5;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v69 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v69 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v69 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v69 - v24;
  uint64_t v26 = v95;
  unint64_t result = sub_10037B4E0();
  unint64_t v80 = v26;
  if (v26) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v28 = result;
  id v78 = v6;
  unint64_t v88 = v25;
  uint64_t v86 = v23;
  unint64_t v75 = v20;
  uint64_t v72 = v17;
  unint64_t v71 = v13;
  uint64_t v76 = v10;
  unint64_t v94 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    unint64_t v28 = v94;
  }
  else
  {
    uint64_t v29 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v30 = (uint64_t)v86;
  unint64_t v31 = v88;
  if (v29)
  {
    if (v29 >= 1)
    {
      uint64_t v32 = 0;
      uint64_t v91 = (void (**)(char *, uint64_t, uint64_t))(v72 + 32);
      unint64_t v92 = v28 & 0xC000000000000001;
      unint64_t v95 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
      char v90 = (unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
      id v81 = (void (**)(char *, char *, uint64_t))(v93 + 32);
      unint64_t v84 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 56);
      id v79 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
      id v70 = (void (**)(char *, char *, uint64_t))(v72 + 16);
      uint64_t v83 = (void (**)(uint64_t, uint64_t))(v72 + 8);
      unint64_t v74 = (void (**)(char *, uint64_t))(v93 + 8);
      int64_t v77 = (int64_t)&_swiftEmptyDictionarySingleton;
      uint64_t v93 = v29;
      while (1)
      {
        id v33 = v92 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v28 + 8 * v32 + 32);
        uint64_t v34 = v33;
        id v35 = [v33 identifier];
        if (!v35) {
          break;
        }
        BOOL v36 = v35;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v37 = *v91;
        (*v91)(v15, v30, v16);
        uint64_t v38 = *v95;
        (*v95)(v15, 0, 1, v16);
        unint64_t v39 = *v90;
        if ((*v90)(v15, 1, v16) == 1) {
          goto LABEL_9;
        }
        uint64_t v85 = v38;
        v37(v31, (uint64_t)v15, v16);
        id v40 = [v34 sourceListIDURL];
        if (v40)
        {
          unint64_t v41 = v40;
          unint64_t v42 = v82;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v43 = *v81;
          uint64_t v44 = (uint64_t)v87;
          id v45 = v42;
          uint64_t v46 = v89;
          (*v81)(v87, v45, v89);
          (*v84)(v44, 0, 1, v46);
          uint64_t v47 = v46;
          unint64_t v31 = v88;
          if ((*v79)(v44, 1, v47) != 1)
          {
            uint64_t v48 = v78;
            v43(v78, (char *)v44, v89);
            URL._bridgeToObjectiveC()(v49);
            unint64_t v51 = v50;
            id v52 = [self objectIDWithURL:v50];

            if (v52)
            {
              id v73 = v52;
              id v53 = [v52 uuid];
              uint64_t v54 = (uint64_t)v75;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v55 = (uint64_t)v71;
              (*v70)(v71, v88, v16);
              v85((char *)v55, 0, 1, v16);
              unsigned int v56 = v39((char *)v55, 1, v16);
              uint64_t v57 = (uint64_t)v76;
              if (v56 == 1)
              {
                sub_1000966BC(v55, (uint64_t *)&unk_100909E50);
                int64_t v58 = v77;
                swift_bridgeObjectRetain();
                unint64_t v59 = sub_100306EC4(v54);
                char v61 = v60;
                swift_bridgeObjectRelease();
                if (v61)
                {
                  unint64_t v69 = v59;
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  int64_t v96 = v58;
                  unint64_t v31 = v88;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    sub_10031967C();
                    int64_t v58 = v96;
                  }
                  uint64_t v63 = *(void *)(v58 + 48);
                  int64_t v77 = *(void *)(v72 + 72) * v69;
                  unint64_t v64 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
                  v64(v63 + v77, v16);
                  int64_t v65 = v96;
                  v37(v76, *(void *)(v96 + 56) + v77, v16);
                  int64_t v77 = v65;
                  uint64_t v66 = v65;
                  uint64_t v57 = (uint64_t)v76;
                  sub_1002C2610(v69, v66);
                  swift_bridgeObjectRelease();
                  v85((char *)v57, 0, 1, v16);
                }
                else
                {
                  v85((char *)v57, 1, 1, v16);
                  unint64_t v64 = *v83;
                  unint64_t v31 = v88;
                }
                v64((uint64_t)v75, v16);
                sub_1000966BC(v57, (uint64_t *)&unk_100909E50);
                uint64_t v30 = (uint64_t)v86;
              }
              else
              {
                uint64_t v30 = (uint64_t)v86;
                v37(v86, v55, v16);
                int64_t v67 = v77;
                char v68 = swift_isUniquelyReferenced_nonNull_native();
                int64_t v96 = v67;
                sub_1002C4C4C(v30, v54, v68);
                int64_t v77 = v96;
                swift_bridgeObjectRelease();
                unint64_t v64 = *v83;
                (*v83)(v54, v16);
                unint64_t v31 = v88;
              }

              (*v74)(v78, v89);
              v64((uint64_t)v31, v16);
            }
            else
            {

              (*v74)(v48, v89);
              unint64_t v31 = v88;
              (*v83)((uint64_t)v88, v16);
              uint64_t v30 = (uint64_t)v86;
            }
            goto LABEL_10;
          }
        }
        else
        {
          uint64_t v44 = (uint64_t)v87;
          (*v84)((uint64_t)v87, 1, 1, v89);
        }

        (*v83)((uint64_t)v31, v16);
        sub_1000966BC(v44, (uint64_t *)&unk_100909E40);
        uint64_t v30 = (uint64_t)v86;
LABEL_10:
        ++v32;
        unint64_t v28 = v94;
        if (v93 == v32)
        {
          swift_bridgeObjectRelease();
          return v77;
        }
      }
      (*v95)(v15, 1, 1, v16);
LABEL_9:

      sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
      goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_10037C158()
{
  return sub_10037B138();
}

uint64_t sub_10037C160(uint64_t a1)
{
  uint64_t v3 = _s10PredicatesOMa_1();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10077B710;
  *(void *)(v6 + 32) = swift_getKeyPath();
  *(void *)(v6 + 40) = swift_getKeyPath();
  uint64_t v16 = v6;
  specialized Array._endMutation()();
  unint64_t v7 = v16;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  if (v7 >> 62)
  {
    sub_100094134(&qword_100913A10);
    unint64_t v8 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    swift_bridgeObjectRelease();
    unint64_t v8 = v7;
  }
  uint64_t v9 = (void *)sub_100535B3C();
  uint64_t v10 = (void *)sub_1003BD0F4(v8, 0, 0, (uint64_t)v9);

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v10 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t v12 = a1;
  uint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
  if (!v1)
  {
    uint64_t v16 = v13;
    sub_100094134(&qword_100910160);
    sub_1000967F4((unint64_t *)&qword_10090A988, &qword_100910160);
    uint64_t v12 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();
  }

  sub_1000ECFE0((uint64_t)v5);
  swift_bridgeObjectRelease();
  return v12;
}

const char *sub_10037C438()
{
  return "mostRecentTargetTemplateIdentifierByCurrentUser";
}

uint64_t *sub_10037C464(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      sub_100097E38(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t sub_10037C560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = *v6;
    return sub_100097F34(v8, v7);
  }
  return result;
}

uint64_t sub_10037C5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_100097E38(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t sub_10037C6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      sub_100097E38(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      uint64_t *v8 = v12;
      v8[1] = v10;
      sub_100097F34(v13, v14);
      return a1;
    }
    sub_1000EB0AC((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }
  uint64_t v11 = *v9;
  sub_100097E38(v11, v10);
  uint64_t *v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t sub_10037C790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10037C80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      uint64_t *v8 = *v9;
      v8[1] = v11;
      sub_100097F34(v12, v10);
      return a1;
    }
    sub_1000EB0AC((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t sub_10037C8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10037C8E0);
}

uint64_t sub_10037C8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t sub_10037C9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10037C9C0);
}

uint64_t sub_10037C9C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 20));
    *BOOL v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t type metadata accessor for RDSavedURLAttachment()
{
  uint64_t result = qword_100915F08;
  if (!qword_100915F08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10037CAD8()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10037CB6C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100094134(&qword_100915F58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0DE0(a1, a1[3]);
  sub_10037D274();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for URL();
  sub_10037D388(&qword_100915F60);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for RDSavedURLAttachment() + 20));
    v10[15] = 1;
    sub_1000EB704();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10037CD24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100094134(&qword_100915F40);
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RDSavedURLAttachment();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_10037D274();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  long long v11 = v10;
  uint64_t v12 = v20;
  LOBYTE(v24) = 0;
  sub_10037D388(&qword_100915F50);
  uint64_t v13 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v18 = (uint64_t)v11;
  v14(v11, v5, v13);
  char v25 = 1;
  sub_1000EB648();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v23);
  uint64_t v16 = v18;
  uint64_t v15 = v19;
  *(_OWORD *)(v18 + *(int *)(v8 + 20)) = v24;
  sub_10037D2C8(v16, v15);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  return sub_10037D32C(v16);
}

uint64_t sub_10037D060()
{
  if (*v0) {
    return 0x617461646174656DLL;
  }
  else {
    return 7107189;
  }
}

uint64_t sub_10037D094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10037D5D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10037D0BC(uint64_t a1)
{
  unint64_t v2 = sub_10037D274();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10037D0F8(uint64_t a1)
{
  unint64_t v2 = sub_10037D274();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10037D138@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10037CD24(a1, a2);
}

uint64_t sub_10037D150(void *a1)
{
  return sub_10037CB6C(a1);
}

BOOL sub_10037D168(uint64_t a1, uint64_t a2)
{
  if ((static URL.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for RDSavedURLAttachment() + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = *(void *)(a1 + v4);
  unint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = (uint64_t *)(a2 + v4);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 == 15) {
      return 1;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    sub_100097E24(v6, *(void *)(v5 + 8));
    sub_100097E24(v9, v10);
    sub_100097F20(v6, v7);
    sub_100097F20(v9, v10);
    return 0;
  }
  sub_100097E24(v6, *(void *)(v5 + 8));
  sub_100097E24(v9, v10);
  char v11 = sub_10014D900(v6, v7, v9, v10);
  sub_100097F20(v9, v10);
  sub_100097F20(v6, v7);
  return (v11 & 1) != 0;
}

unint64_t sub_10037D274()
{
  unint64_t result = qword_100915F48;
  if (!qword_100915F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915F48);
  }
  return result;
}

uint64_t sub_10037D2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDSavedURLAttachment();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10037D32C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDSavedURLAttachment();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10037D388(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URL();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RDSavedURLAttachment.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10037D498);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedURLAttachment.CodingKeys()
{
  return &type metadata for RDSavedURLAttachment.CodingKeys;
}

unint64_t sub_10037D4D4()
{
  unint64_t result = qword_100915F68;
  if (!qword_100915F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915F68);
  }
  return result;
}

unint64_t sub_10037D52C()
{
  unint64_t result = qword_100915F70;
  if (!qword_100915F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915F70);
  }
  return result;
}

unint64_t sub_10037D584()
{
  unint64_t result = qword_100915F78;
  if (!qword_100915F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915F78);
  }
  return result;
}

uint64_t sub_10037D5D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10037D6BC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100915F80);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100915F80);
  if (qword_100907838 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424F0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10037D784(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  __chkstk_darwin(v3);
  if (!*(void *)(*(void *)(v1
                              + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_postMigrationDataUpdateByModelVersionIdentifier)
                  + 16))
    return 0;
  unsigned int v4 = sub_10037DAC4(a1);
  if (!v5) {
    return 0;
  }
  sub_10037DBA8((uint64_t)v4, v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (!v7) {
    return 0;
  }
  swift_bridgeObjectRelease();
  return 1;
}

char *sub_10037DAC4(uint64_t a1)
{
  unint64_t result = sub_100380030(a1);
  if (!v1)
  {
    uint64_t v3 = result;
    id v4 = [result versionIdentifiers];
    uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1002B1324(v5, (uint64_t)v7);
    swift_bridgeObjectRelease();

    if (v8)
    {
      if (swift_dynamicCast()) {
        return (char *)v6;
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100916060);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10037DBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2
                 + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_allModelVersionIdentifiers);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v17 = OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_postMigrationDataUpdateByModelVersionIdentifier;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v8 = 0;
    char v9 = 0;
    unint64_t v10 = (uint64_t *)(v3 + 40);
    uint64_t v11 = v4 - 1;
    while (1)
    {
      uint64_t v12 = *(v10 - 1);
      uint64_t v13 = *v10;
      if (v9) {
        break;
      }
      if (v12 == a1 && v13 == a2) {
        goto LABEL_15;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_15;
      }
      if (v11 == v8) {
        goto LABEL_17;
      }
      char v9 = 0;
LABEL_5:
      ++v8;
      v10 += 2;
      if (v8 >= *(void *)(v3 + 16))
      {
        __break(1u);
        return result;
      }
    }
    if (*(void *)(*(void *)(v18 + v17) + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001806F8(v12, v13);
      char v15 = v14;
      swift_bridgeObjectRelease();
      if (v15)
      {
        swift_bridgeObjectRelease();
        return v12;
      }
      uint64_t result = swift_bridgeObjectRelease();
    }
LABEL_15:
    if (v11 == v8)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      return 0;
    }
    char v9 = 1;
    goto LABEL_5;
  }
  return 0;
}

void sub_10037DDF4(NSObject *a1, uint64_t a2, void *a3, NSObject *a4)
{
  int v131 = a3;
  uint64_t v132 = a4;
  uint64_t v138 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v135 = *(void *)(v6 - 8);
  uint64_t v136 = v6;
  __chkstk_darwin(v6);
  long long v133 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v137 = (char *)&v117 - v9;
  __chkstk_darwin(v10);
  uint64_t v139 = (char *)&v117 - v11;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v134 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v117 - v16;
  __n128 v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v117 - v20;
  uint64_t v22 = v13 + 16;
  uint64_t v23 = *(void (**)(char *, NSObject *, uint64_t, __n128))(v13 + 16);
  os_log_t v141 = a1;
  v23((char *)&v117 - v20, a1, v12, v19);
  long long v24 = (objc_class *)type metadata accessor for RDStagedLightweightCoreDataMigrationCoordinator.BabysitTarget();
  char v25 = (char *)objc_allocWithZone(v24);
  uint64_t v26 = &v25[OBJC_IVAR____TtCC7remindd47RDStagedLightweightCoreDataMigrationCoordinatorP33_D88389F778BE955B340162F613733C4913BabysitTarget_crashDetectedAnalyticsEventName];
  *(void *)uint64_t v26 = 0xD00000000000004FLL;
  *((void *)v26 + 1) = 0x80000001007D2D40;
  ((void (*)(char *, char *, uint64_t))v23)(&v25[OBJC_IVAR____TtCC7remindd47RDStagedLightweightCoreDataMigrationCoordinatorP33_D88389F778BE955B340162F613733C4913BabysitTarget_storeURL], v21, v12);
  v148.receiver = v25;
  v148.super_class = v24;
  id v27 = [&v148 init];
  uint64_t v30 = *(void (**)(void, void))(v13 + 8);
  uint64_t v29 = v13 + 8;
  unint64_t v28 = (void (*)(char *, uint64_t))v30;
  v30(v21, v12);
  id v31 = sub_10038195C();

  if (v4) {
    return;
  }
  id v128 = v31;
  id v126 = (void (*)(char *, os_log_t, uint64_t))v23;
  uint64_t v125 = v22;
  uint64_t v123 = v28;
  uint64_t v124 = v29;
  uint64_t v32 = v140;
  os_log_t v33 = v141;
  uint64_t v34 = sub_10037DAC4((uint64_t)v141);
  if (!v35)
  {

    return;
  }
  uint64_t v122 = 0;
  uint64_t v142 = (uint64_t)v34;
  unint64_t v36 = v35;
  if (qword_100907398 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = sub_10008E2DC(v37, (uint64_t)qword_100915F80);
  uint64_t v39 = v12;
  v126(v17, v33, v12);
  swift_bridgeObjectRetain_n();
  id v40 = v32;
  swift_bridgeObjectRetain_n();
  unint64_t v41 = (char *)v40;
  uint64_t v121 = v38;
  unint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  LODWORD(v140) = v43;
  BOOL v44 = os_log_type_enabled(v42, v43);
  id v45 = v123;
  uint64_t v127 = v39;
  if (v44)
  {
    uint64_t v46 = swift_slowAlloc();
    uint64_t v119 = v41;
    uint64_t v47 = v46;
    uint64_t v129 = swift_slowAlloc();
    uint64_t v146 = v129;
    *(_DWORD *)uint64_t v47 = 136446978;
    unint64_t v118 = (void **)(v47 + 4);
    sub_10037D388((unint64_t *)&qword_100916028);
    os_log_t v120 = v42;
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v143 = sub_1000C51B8(v48, v49, &v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v45(v17, v39);
    *(_WORD *)(v47 + 12) = 2082;
    uint64_t v50 = v119;
    uint64_t v51 = *(void *)&v119[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName];
    unint64_t v52 = *(void *)&v119[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName + 8];
    swift_bridgeObjectRetain();
    uint64_t v143 = sub_1000C51B8(v51, v52, &v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v47 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v53 = v142;
    uint64_t v143 = sub_1000C51B8(v142, v36, &v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v47 + 32) = 2080;
    uint64_t v143 = v138;
    sub_100094134(&qword_100916038);
    uint64_t v54 = Optional.descriptionOrNil.getter();
    uint64_t v143 = sub_1000C51B8(v54, v55, &v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v56 = v120;
    _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v140, "Will perform staged lightweight migration {storeURL: %{public}s, modelName: %{public}s, initialVersionIdentifier: %{public}s, persistentStoreDescriptionOptionsOverride: %s}", (uint8_t *)v47, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v57 = (char *)v50;
  }
  else
  {
    v123(v17, v39);

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v57 = v41;
    uint64_t v53 = v142;
  }
  Date.init()();
  uint64_t v146 = v53;
  unint64_t v147 = v36;
  uint64_t v58 = *(void *)&v57[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_allModelVersionIdentifiers];
  uint64_t v59 = *(void *)(v58 + 16);
  char v60 = v137;
  char v61 = v126;
  unint64_t v140 = (void *)v58;
  if (!v59)
  {
    os_log_t v120 = 0;
    int v80 = 1;
    uint64_t v64 = v127;
    id v81 = v128;
    goto LABEL_41;
  }
  uint64_t v62 = (void *)v36;
  uint64_t v129 = OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_postMigrationDataUpdateByModelVersionIdentifier;
  uint64_t v119 = (char *)(v58 + 32);
  uint64_t v63 = (void **)(v58 + 40);
  uint64_t v64 = v127;
  unint64_t v118 = (void **)(v58 + 40);
LABEL_12:
  uint64_t v142 = v53;
  swift_bridgeObjectRetain();
  uint64_t v65 = swift_bridgeObjectRetain();
  uint64_t v66 = v142;
  int64_t v67 = v62;
  unint64_t v68 = 0;
  char v69 = 0;
  uint64_t v70 = v59 - 1;
  unint64_t v71 = v63;
  while (1)
  {
    uint64_t v53 = (uint64_t)*(v71 - 1);
    uint64_t v72 = *v71;
    if (v69)
    {
      uint64_t v63 = *(void ***)&v57[v129];
      if (v63[2])
      {
        id v73 = v57;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1001806F8(v53, (uint64_t)v72);
        char v75 = v74;
        swift_bridgeObjectRelease();
        if (v75)
        {
          swift_bridgeObjectRelease();
          id v78 = v140;
          swift_bridgeObjectRelease();
          uint64_t v57 = v73;
          os_log_t v33 = v141;
          uint64_t v79 = v122;
          sub_10037EC4C(v73, v53, v72, (uint64_t)v141, v138, v131, v132, &v146);
          if (!v79)
          {
            uint64_t v122 = 0;
            swift_bridgeObjectRelease();
            os_log_t v120 = 0;
            uint64_t v146 = v53;
            unint64_t v147 = (unint64_t)v72;
            int v80 = 1;
            uint64_t v62 = v72;
            uint64_t v59 = v78[2];
            char v60 = v137;
            id v81 = v128;
            char v61 = v126;
            uint64_t v64 = v127;
            uint64_t v63 = v118;
            if (v59) {
              goto LABEL_12;
            }
            goto LABEL_41;
          }
LABEL_54:
          (*(void (**)(char *, uint64_t))(v135 + 8))(v139, v136);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          return;
        }
        swift_bridgeObjectRelease();
        uint64_t v57 = v73;
        uint64_t v64 = v127;
        int64_t v67 = v62;
        uint64_t v66 = v142;
        uint64_t v65 = (uint64_t)v140;
      }
    }
    else if (v53 != v66 || v72 != v67)
    {
      char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v65 = (uint64_t)v140;
      uint64_t v66 = v142;
      int64_t v67 = v62;
      if ((v77 & 1) == 0)
      {
        if (v70 == v68) {
          break;
        }
        char v69 = 0;
        goto LABEL_15;
      }
    }
    if (v70 == v68) {
      break;
    }
    char v69 = 1;
LABEL_15:
    ++v68;
    v71 += 2;
    if (v68 >= *(void *)(v65 + 16))
    {
      __break(1u);
      goto LABEL_54;
    }
  }
  uint64_t v82 = v67;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v83 = v140[2];
  if (!v83)
  {
    os_log_t v120 = 0;
    int v80 = 1;
    char v60 = v137;
    id v81 = v128;
    os_log_t v33 = v141;
    char v61 = v126;
    goto LABEL_41;
  }
  os_log_t v120 = (os_log_t)v140[2];
  unint64_t v84 = &v119[16 * v83];
  uint64_t v86 = *((void *)v84 - 2);
  uint64_t v85 = (void *)*((void *)v84 - 1);
  os_log_t v33 = v141;
  BOOL v87 = v142 == v86 && v82 == v85;
  char v60 = v137;
  id v88 = v128;
  char v61 = v126;
  if (v87)
  {
    int v80 = 0;
    goto LABEL_40;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    int v80 = 0;
LABEL_40:
    id v81 = v88;
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  uint64_t v116 = v122;
  sub_10037FC80((uint64_t)v57, v86, v85, (uint64_t)v33, v138);
  if (v116)
  {
    (*(void (**)(char *, uint64_t))(v135 + 8))(v139, v136);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v122 = 0;
  swift_bridgeObjectRelease();
  int v80 = 0;
  id v81 = v128;
  char v61 = v126;
LABEL_41:
  LODWORD(v142) = v80;
  uint64_t v89 = v134;
  v61(v134, v33, v64);
  uint64_t v91 = v135;
  uint64_t v90 = v136;
  unint64_t v92 = v139;
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v60, v139, v136);
  uint64_t v93 = v57;
  unint64_t v94 = Logger.logObject.getter();
  int v95 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v94, (os_log_type_t)v95))
  {

    uint64_t v104 = *(void (**)(char *, uint64_t))(v91 + 8);
    v104(v60, v90);

    v123(v89, v127);
    id v105 = v92;
    goto LABEL_48;
  }
  LODWORD(v138) = v95;
  os_log_t v141 = v94;
  uint64_t v96 = swift_slowAlloc();
  uint64_t v132 = swift_slowAlloc();
  uint64_t v145 = v132;
  *(_DWORD *)uint64_t v96 = 136446978;
  sub_10037D388((unint64_t *)&qword_100916028);
  uint64_t v97 = v127;
  uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v143 = sub_1000C51B8(v98, v99, (uint64_t *)&v145);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v123(v89, v97);
  *(_WORD *)(v96 + 12) = 2082;
  uint64_t v100 = *(void *)&v93[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName];
  unint64_t v101 = *(void *)&v93[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName + 8];
  swift_bridgeObjectRetain();
  uint64_t v143 = sub_1000C51B8(v100, v101, (uint64_t *)&v145);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v96 + 22) = 2082;
  if (v142)
  {
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    goto LABEL_47;
  }
  if ((unint64_t)v120 > v140[2])
  {
    __break(1u);
  }
  else
  {
    uint64_t v106 = &v140[2 * (void)v120];
    uint64_t v102 = v106[2];
    uint64_t v103 = v106[3];
    swift_bridgeObjectRetain();
LABEL_47:
    uint64_t v143 = v102;
    uint64_t v144 = v103;
    sub_100094134((uint64_t *)&unk_10090A4C0);
    uint64_t v107 = Optional.descriptionOrNil.getter();
    unint64_t v109 = v108;
    swift_bridgeObjectRelease();
    uint64_t v143 = sub_1000C51B8(v107, v109, (uint64_t *)&v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v96 + 32) = 2048;
    uint64_t v110 = v133;
    Date.init()();
    unint64_t v111 = v137;
    Date.timeIntervalSince(_:)();
    uint64_t v113 = v112;
    uint64_t v104 = *(void (**)(char *, uint64_t))(v91 + 8);
    v104(v110, v90);
    uint64_t v143 = v113;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v104(v111, v90);
    os_log_t v114 = v141;
    _os_log_impl((void *)&_mh_execute_header, v141, (os_log_type_t)v138, "Did perform staged lightweight migration {storeURL: %{public}s, modelName: %{public}s, finalVersionIdentifier: %{public}s, elapsedSeconds: %f}", (uint8_t *)v96, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v105 = v139;
LABEL_48:
    v104(v105, v90);
    swift_bridgeObjectRelease();
  }
}

void sub_10037EC4C(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, NSObject *a7, uint64_t *a8)
{
  uint64_t v121 = a8;
  id v128 = a7;
  id v123 = a6;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v125 = *(void *)(v14 - 8);
  uint64_t v126 = v14;
  __chkstk_darwin(v14);
  uint64_t v122 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v129 = (char *)&v105 - v17;
  uint64_t v18 = type metadata accessor for URL();
  __n128 v19 = *(void **)(v18 - 8);
  uint64_t v130 = v18;
  int v131 = v19;
  __chkstk_darwin(v18);
  uint64_t v124 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  os_log_t v120 = (char *)&v105 - v22;
  __chkstk_darwin(v23);
  uint64_t v127 = (char *)&v105 - v24;
  sub_1000963CC(0, (unint64_t *)&unk_100916040);
  uint64_t v25 = *(void *)&a1[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName];
  uint64_t v26 = *(void **)&a1[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName + 8];
  uint64_t v27 = static NSManagedObjectModel.rem_loadManagedObjectModel(withModelName:versionIdentifier:from:)();
  if (!v27)
  {
    uint64_t v30 = self;
    v133[0] = 0;
    v133[1] = (id)0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v31._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v31._uint64_t object = (void *)0x80000001007D2D90;
    String.append(_:)(v31);
    swift_bridgeObjectRetain();
    v32._uint64_t countAndFlagsBits = v25;
    v32._uint64_t object = v26;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t object = (void *)0x80000001007D2DC0;
    v33._uint64_t countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = a2;
    v34._uint64_t object = a3;
    String.append(_:)(v34);
    v35._uint64_t countAndFlagsBits = 125;
    v35._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v30 internalErrorWithDebugDescription:v36];

    swift_willThrow();
    return;
  }
  unint64_t v28 = (void *)v27;
  uint64_t v119 = v25;
  id v29 = sub_100381B34(a4, v27, a5);
  if (v8)
  {

    return;
  }
  id v37 = v29;
  uint64_t v116 = a4;
  id v117 = v28;
  uint64_t v38 = *(void *)&a1[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_postMigrationDataUpdateByModelVersionIdentifier];
  uint64_t v39 = *(void *)(v38 + 16);
  id v118 = v29;
  if (!v39)
  {
LABEL_11:
    uint64_t v26 = v131;
    goto LABEL_12;
  }
  a4 = (uint64_t)a3;
  swift_bridgeObjectRetain();
  unint64_t v40 = sub_1001806F8(a2, (uint64_t)a3);
  if ((v41 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v113 = a2;
  long long v115 = *(_OWORD *)(*(void *)(v38 + 56) + 16 * v40);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v114 = swift_allocObject();
  *(_OWORD *)(v114 + 16) = v115;
  if (qword_100907398 != -1) {
    goto LABEL_36;
  }
  while (1)
  {
    uint64_t v42 = type metadata accessor for Logger();
    os_log_type_t v43 = sub_10008E2DC(v42, (uint64_t)qword_100915F80);
    BOOL v44 = (void (*)(char *, uint64_t, uint64_t))v131[2];
    id v45 = v127;
    uint64_t v46 = v130;
    uint64_t v110 = v131 + 2;
    unint64_t v109 = v44;
    ((void (*)(char *, uint64_t))v44)(v127, v116);
    swift_bridgeObjectRetain_n();
    uint64_t v47 = a1;
    os_log_t v111 = v43;
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    LODWORD(v112) = v49;
    BOOL v50 = os_log_type_enabled(v48, v49);
    *(void *)&long long v115 = v26;
    unint64_t v108 = v47;
    if (v50)
    {
      uint64_t v51 = v47;
      uint64_t v52 = swift_slowAlloc();
      uint64_t v107 = (void *)swift_slowAlloc();
      v133[0] = v107;
      *(_DWORD *)uint64_t v52 = 136446722;
      uint64_t v105 = v52 + 4;
      sub_10037D388((unint64_t *)&qword_100916028);
      os_log_t v106 = v48;
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v132 = sub_1000C51B8(v53, v54, (uint64_t *)v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v127 = (char *)v131[1];
      ((void (*)(char *, uint64_t))v127)(v45, v46);
      *(_WORD *)(v52 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v132 = sub_1000C51B8(v119, v115, (uint64_t *)v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v132 = sub_1000C51B8(v113, a4, (uint64_t *)v133);
      id v37 = v118;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v55 = v106;
      _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v112, "Will perform post-migration data update {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s}", (uint8_t *)v52, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v127 = (char *)v131[1];
      ((void (*)(char *, uint64_t))v127)(v45, v46);

      swift_bridgeObjectRelease_n();
    }
    Date.init()();
    id v78 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:1];
    [v78 setPersistentStoreCoordinator:v37];
    uint64_t v79 = v116;
    uint64_t v80 = v114;
    NSString v81 = v128 ? String._bridgeToObjectiveC()() : 0;
    [v78 setTransactionAuthor:v81];

    __chkstk_darwin(v82);
    *(&v105 - 4) = (uint64_t)sub_100382CA4;
    *(&v105 - 3) = v80;
    *(&v105 - 2) = (uint64_t)v78;
    NSManagedObjectContext.performAndWait<A>(_:)();
    id v123 = v78;
    uint64_t v83 = (uint64_t)v122;
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    double v85 = v84;
    uint64_t v86 = v120;
    uint64_t v87 = v79;
    uint64_t v88 = v130;
    v109(v120, v87, v130);
    swift_bridgeObjectRetain_n();
    id v128 = v108;
    uint64_t v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.default.getter();
    int v91 = v90;
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v92 = swift_slowAlloc();
      LODWORD(v113) = v91;
      uint64_t v93 = v92;
      uint64_t v112 = (void *)swift_slowAlloc();
      v133[0] = v112;
      *(_DWORD *)uint64_t v93 = 136446978;
      sub_10037D388((unint64_t *)&qword_100916028);
      os_log_t v111 = v89;
      uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v132 = sub_1000C51B8(v94, v95, (uint64_t *)v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v127)(v86, v88);
      *(_WORD *)(v93 + 12) = 2082;
      unint64_t v96 = v115;
      swift_bridgeObjectRetain();
      uint64_t v132 = sub_1000C51B8(v119, v96, (uint64_t *)v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v97 = v128;

      swift_bridgeObjectRelease();
      *(_WORD *)(v93 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v132 = sub_1000C51B8(a2, a4, (uint64_t *)v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v93 + 32) = 2048;
      uint64_t v132 = *(void *)&v85;
      uint64_t v83 = (uint64_t)v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v98 = v111;
      _os_log_impl((void *)&_mh_execute_header, v111, (os_log_type_t)v113, "Did perform post-migration data update {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s, elapsedSeconds: %f}", (uint8_t *)v93, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v26 = v131;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v26 = v131;
      ((void (*)(char *, uint64_t))v127)(v86, v88);

      swift_bridgeObjectRelease_n();
      unint64_t v99 = v128;

      a2 = v113;
    }
    uint64_t v102 = *v121;
    uint64_t v101 = v121[1];
    swift_bridgeObjectRetain();
    sub_100381D98(v116, v102, v101, a2, a4, v83, v85);
    swift_bridgeObjectRelease();
    uint64_t v103 = v126;
    a1 = (char *)(v125 + 8);
    uint64_t v104 = *(void (**)(char *, uint64_t))(v125 + 8);
    v104(v129, v126);

    swift_release();
    v104((char *)v83, v103);
    id v37 = v118;
LABEL_12:
    id v56 = [v37 persistentStores];
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    unint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v57 >> 62)
    {
      swift_bridgeObjectRetain();
      id v37 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v37)
      {
LABEL_33:

        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      id v37 = *(id *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v37) {
        goto LABEL_33;
      }
    }
    if ((v57 & 0xC000000000000001) != 0) {
      break;
    }
    if (*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v58 = *(id *)(v57 + 32);
      goto LABEL_17;
    }
    __break(1u);
LABEL_36:
    swift_once();
  }
  id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_17:
  uint64_t v59 = v58;
  swift_bridgeObjectRelease();
  v133[0] = 0;
  id v60 = v118;
  if ([v118 removePersistentStore:v59 error:v133])
  {
    id v61 = v133[0];
  }
  else
  {
    id v62 = v133[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100907398 != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    sub_10008E2DC(v63, (uint64_t)qword_100915F80);
    uint64_t v64 = v124;
    uint64_t v65 = v130;
    ((void (*)(char *, uint64_t, uint64_t))v26[2])(v124, v116, v130);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.fault.getter();
    int v68 = v67;
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v69 = swift_slowAlloc();
      LODWORD(v129) = v68;
      uint64_t v70 = v64;
      unint64_t v71 = v26;
      uint64_t v72 = v69;
      int v131 = (void *)swift_slowAlloc();
      v133[0] = v131;
      *(_DWORD *)uint64_t v72 = 136446466;
      sub_10037D388((unint64_t *)&qword_100916028);
      id v128 = v66;
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v132 = sub_1000C51B8(v73, v74, (uint64_t *)v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v71[1])(v70, v65);
      *(_WORD *)(v72 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v75 = Error.rem_errorDescription.getter();
      uint64_t v132 = sub_1000C51B8(v75, v76, (uint64_t *)v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      char v77 = v128;
      _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v129, "Failed to remove persistent store from persistent store coordinator after staged migration {storeURL: %{public}s, error: %{public}s}", (uint8_t *)v72, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      ((void (*)(char *, uint64_t))v26[1])(v64, v65);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_10037FC80(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  sub_1000963CC(0, (unint64_t *)&unk_100916040);
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName);
  uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName + 8);
  uint64_t v13 = static NSManagedObjectModel.rem_loadManagedObjectModel(withModelName:versionIdentifier:from:)();
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    id v15 = sub_100381B34(a4, v13, a5);

    if (!v5) {
  }
    }
  else
  {
    uint64_t v16 = self;
    _StringGuts.grow(_:)(81);
    v17._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v17._uint64_t object = (void *)0x80000001007D2D90;
    String.append(_:)(v17);
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = v12;
    v18._uint64_t object = v11;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._uint64_t object = (void *)0x80000001007D2DC0;
    v19._uint64_t countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = a2;
    v20._uint64_t object = a3;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = 125;
    v21._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 internalErrorWithDebugDescription:v22];

    swift_willThrow();
  }
}

char *sub_100380030(uint64_t a1)
{
  uint64_t v99 = type metadata accessor for URL();
  uint64_t v100 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v3 = (char *)&v93 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v93 - v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v93 - v8;
  uint64_t v10 = type metadata accessor for NSPersistentStore.StoreType();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, &qword_100916050);
  static NSPersistentStore.StoreType.sqlite.getter();
  uint64_t v14 = v114;
  uint64_t v15 = static NSPersistentStoreCoordinator.metadataForPersistentStore(type:at:options:)();
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return v9;
  }
  uint64_t v108 = v15;
  unint64_t v96 = v9;
  unint64_t v95 = v6;
  uint64_t v94 = v3;
  uint64_t v98 = a1;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v16 = v101;
  uint64_t v17 = *(void *)&v101[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_allModelVersionIdentifiers];
  uint64_t v18 = *(void *)(v17 + 16);
  if (!v18) {
    goto LABEL_42;
  }
  uint64_t v97 = 0;
  uint64_t v19 = sub_1000963CC(0, (unint64_t *)&unk_100916040);
  uint64_t v20 = *(void *)&v16[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName + 8];
  uint64_t v113 = *(void *)&v16[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName];
  uint64_t v114 = v20;
  os_log_t v110 = *(os_log_t *)&v16[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_bundle];
  uint64_t v111 = v19;
  uint64_t v109 = v17 + 32;
  uint64_t v105 = NSStoreModelVersionIdentifiersKey;
  swift_bridgeObjectRetain();
  uint64_t v107 = (char *)&type metadata for Any + 8;
  uint64_t v112 = v17;
  while (v18 <= *(void *)(v17 + 16))
  {
    --v18;
    Swift::String v21 = (uint64_t *)(v109 + 16 * v18);
    uint64_t v23 = *v21;
    unint64_t v22 = v21[1];
    swift_bridgeObjectRetain();
    uint64_t v24 = static NSManagedObjectModel.rem_loadManagedObjectModel(withModelName:versionIdentifier:from:)();
    if (!v24) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)v24;
    uint64_t v106 = v23;
    uint64_t v25 = v108;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    unsigned __int8 v27 = [v9 isConfiguration:0 compatibleWithStoreMetadata:isa];

    if (v27)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_100907398 != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      sub_10008E2DC(v44, (uint64_t)qword_100915F80);
      uint64_t v45 = v100;
      uint64_t v46 = v96;
      uint64_t v47 = v99;
      (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v96, v98, v99);
      uint64_t v48 = v101;
      unint64_t v49 = v22;
      swift_bridgeObjectRetain();
      BOOL v50 = v48;
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.default.getter();
      int v53 = v52;
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v54 = swift_slowAlloc();
        uint64_t v112 = swift_slowAlloc();
        *(void *)&long long v117 = v112;
        *(_DWORD *)uint64_t v54 = 136446722;
        uint64_t v104 = v9;
        sub_10037D388((unint64_t *)&qword_100916028);
        LODWORD(v111) = v53;
        uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
        os_log_t v110 = v51;
        uint64_t v115 = sub_1000C51B8(v55, v56, (uint64_t *)&v117);
        uint64_t v9 = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
        *(_WORD *)(v54 + 12) = 2082;
        unint64_t v57 = v114;
        swift_bridgeObjectRetain();
        uint64_t v115 = sub_1000C51B8(v113, v57, (uint64_t *)&v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v54 + 22) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v115 = sub_1000C51B8(v106, v49, (uint64_t *)&v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        id v58 = "Found compatible managed object model of store {storeURL: %{public}s, modelName: %{public}s, versionIdenti"
              "fier: %{public}s}";
LABEL_37:
        os_log_t v67 = v110;
        _os_log_impl((void *)&_mh_execute_header, v110, (os_log_type_t)v111, v58, (uint8_t *)v54, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return v9;
      }
      goto LABEL_38;
    }
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v25 + 16) && (unint64_t v30 = sub_1001806F8(v28, v29), (v31 & 1) != 0))
    {
      sub_10009A1B0(*(void *)(v25 + 56) + 32 * v30, (uint64_t)&v117);
    }
    else
    {
      long long v117 = 0u;
      long long v118 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v118 + 1))
    {

      swift_bridgeObjectRelease();
      sub_1000966BC((uint64_t)&v117, &qword_100908190);
      goto LABEL_7;
    }
    sub_100094134((uint64_t *)&unk_10090AFB0);
    if ((swift_dynamicCast() & 1) == 0)
    {

LABEL_6:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    uint64_t v32 = v115;
    uint64_t v104 = v9;
    id v33 = [v9 versionIdentifiers];
    uint64_t v103 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v34 = *(void *)(v32 + 16);
    if (v34)
    {
      os_log_t v120 = _swiftEmptyArrayStorage;
      sub_1001DE978(0, v34, 0);
      Swift::String v35 = v120;
      uint64_t v102 = v32;
      NSString v36 = (uint64_t *)(v32 + 40);
      do
      {
        uint64_t v37 = *v36;
        uint64_t v115 = *(v36 - 1);
        uint64_t v116 = v37;
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE978(0, v35[2] + 1, 1);
          Swift::String v35 = v120;
        }
        unint64_t v39 = v35[2];
        unint64_t v38 = v35[3];
        if (v39 >= v38 >> 1)
        {
          sub_1001DE978(v38 > 1, v39 + 1, 1);
          Swift::String v35 = v120;
        }
        v36 += 2;
        v35[2] = v39 + 1;
        unint64_t v40 = &v35[5 * v39];
        long long v41 = v117;
        long long v42 = v118;
        v40[8] = v119;
        *((_OWORD *)v40 + 2) = v41;
        *((_OWORD *)v40 + 3) = v42;
        --v34;
      }
      while (v34);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      Swift::String v35 = _swiftEmptyArrayStorage;
    }
    char v43 = sub_1003814D0((uint64_t)v35, v103);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v104;
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_100907398 != -1) {
        swift_once();
      }
      uint64_t v59 = type metadata accessor for Logger();
      sub_10008E2DC(v59, (uint64_t)qword_100915F80);
      uint64_t v45 = v100;
      uint64_t v46 = v95;
      uint64_t v47 = v99;
      (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v95, v98, v99);
      id v60 = v101;
      unint64_t v61 = v22;
      swift_bridgeObjectRetain();
      BOOL v50 = v60;
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      int v63 = v62;
      if (os_log_type_enabled(v51, v62))
      {
        uint64_t v54 = swift_slowAlloc();
        uint64_t v112 = swift_slowAlloc();
        *(void *)&long long v117 = v112;
        *(_DWORD *)uint64_t v54 = 136446722;
        sub_10037D388((unint64_t *)&qword_100916028);
        LODWORD(v111) = v63;
        uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
        os_log_t v110 = v51;
        uint64_t v115 = sub_1000C51B8(v64, v65, (uint64_t *)&v117);
        uint64_t v9 = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
        *(_WORD *)(v54 + 12) = 2082;
        unint64_t v66 = v114;
        swift_bridgeObjectRetain();
        uint64_t v115 = sub_1000C51B8(v113, v66, (uint64_t *)&v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v54 + 22) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v115 = sub_1000C51B8(v106, v61, (uint64_t *)&v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        id v58 = "Found managed object model with matching version identifier {storeURL: %{public}s, modelName: %{public}s, "
              "versionIdentifier: %{public}s}";
        goto LABEL_37;
      }
LABEL_38:
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);

      swift_bridgeObjectRelease_n();
      return v9;
    }
    swift_bridgeObjectRelease();

LABEL_7:
    uint64_t v17 = v112;
    if (!v18) {
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_41:
  swift_bridgeObjectRelease();
LABEL_42:
  uint64_t v9 = (char *)v99;
  swift_bridgeObjectRelease();
  uint64_t v69 = v98;
  id v70 = v101;
  unint64_t v71 = v94;
  if (qword_100907398 != -1) {
    swift_once();
  }
  uint64_t v72 = type metadata accessor for Logger();
  sub_10008E2DC(v72, (uint64_t)qword_100915F80);
  uint64_t v73 = v100;
  (*(void (**)(char *, uint64_t, char *))(v100 + 16))(v71, v69, v9);
  unint64_t v74 = (char *)v70;
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.error.getter();
  char v77 = v71;
  int v78 = v76;
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v79 = swift_slowAlloc();
    uint64_t v114 = swift_slowAlloc();
    *(void *)&long long v117 = v114;
    *(_DWORD *)uint64_t v79 = 136446466;
    sub_10037D388((unint64_t *)&qword_100916028);
    LODWORD(v113) = v78;
    uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v115 = sub_1000C51B8(v80, v81, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *))(v73 + 8))(v77, v9);
    *(_WORD *)(v79 + 12) = 2082;
    uint64_t v82 = *(void *)&v74[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName];
    unint64_t v83 = *(void *)&v74[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName + 8];
    swift_bridgeObjectRetain();
    uint64_t v115 = sub_1000C51B8(v82, v83, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v113, "Failed to find managed object model with matching version identifier {storeURL: %{public}s, modelName: %{public}s}", (uint8_t *)v79, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, char *))(v73 + 8))(v71, v9);
  }
  double v84 = self;
  *(void *)&long long v117 = 0;
  *((void *)&v117 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(99);
  v85._uint64_t countAndFlagsBits = 0xD000000000000045;
  v85._uint64_t object = (void *)0x80000001007D2EF0;
  String.append(_:)(v85);
  sub_10037D388((unint64_t *)&qword_100916028);
  v86._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v86);
  swift_bridgeObjectRelease();
  v87._uint64_t object = (void *)0x80000001007D2F40;
  v87._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v87);
  uint64_t v89 = *(void *)&v74[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName];
  uint64_t v88 = *(void **)&v74[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName + 8];
  swift_bridgeObjectRetain();
  v90._uint64_t countAndFlagsBits = v89;
  v90._uint64_t object = v88;
  String.append(_:)(v90);
  swift_bridgeObjectRelease();
  v91._uint64_t countAndFlagsBits = 125;
  v91._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v91);
  NSString v92 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v84 invalidParameterErrorWithDescription:v92];

  swift_willThrow();
  return v9;
}

uint64_t sub_100381110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 16) = a2;
  swift_errorRetain();
  return swift_errorRelease();
}

id sub_100381264()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStagedLightweightCoreDataMigrationCoordinator.BabysitTarget();
  return [super dealloc];
}

uint64_t type metadata accessor for RDStagedLightweightCoreDataMigrationCoordinator()
{
  return self;
}

uint64_t sub_1003813E4()
{
  return type metadata accessor for RDStagedLightweightCoreDataMigrationCoordinator.BabysitTarget();
}

uint64_t type metadata accessor for RDStagedLightweightCoreDataMigrationCoordinator.BabysitTarget()
{
  uint64_t result = qword_100916018;
  if (!qword_100916018) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100381438()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1003814D0(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 1;
  }
  uint64_t v5 = a2 + 56;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  while (1)
  {
    sub_1002CD348(a1 + 32 + 40 * v6, (uint64_t)v14);
    if (*(void *)(a2 + 16))
    {
      Swift::Int v7 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
      uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v9 = v7 & ~v8;
      if ((*(void *)(v5 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9)) {
        break;
      }
    }
LABEL_4:
    ++v6;
    sub_100233FFC((uint64_t)v14);
    if (v6 == v3)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  uint64_t v10 = ~v8;
  while (1)
  {
    sub_1002CD348(*(void *)(a2 + 48) + 40 * v9, (uint64_t)v13);
    char v11 = static AnyHashable.== infix(_:_:)();
    sub_100233FFC((uint64_t)v13);
    if (v11) {
      break;
    }
    unint64_t v9 = (v9 + 1) & v10;
    if (((*(void *)(v5 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      goto LABEL_4;
    }
  }
  sub_100233FFC((uint64_t)v14);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100381614(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v22 = a1 + 32;
  uint64_t v4 = a2 + 56;
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v2; ++i)
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v6 = (uint64_t *)(v22 + 16 * i);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v9 = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v11 = v9 & ~v10;
      if ((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
      {
        uint64_t v12 = *(void *)(a2 + 48);
        uint64_t v13 = (void *)(v12 + 16 * v11);
        BOOL v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_22:
          swift_bridgeObjectRelease();
          uint64_t v20 = 0;
          goto LABEL_23;
        }
        uint64_t v15 = ~v10;
        for (unint64_t j = v11 + 1; ; unint64_t j = v17 + 1)
        {
          uint64_t v17 = j & v15;
          if (((*(void *)(v4 + (((j & v15) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v15)) & 1) == 0) {
            break;
          }
          uint64_t v18 = (void *)(v12 + 16 * v17);
          BOOL v19 = *v18 == v8 && v18[1] == v7;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_22;
          }
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v20 = 1;
LABEL_23:
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1003817A4(uint64_t a1, void (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v20 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v7) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v20 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v20 + 8 * v9);
        if (!v18)
        {
          int64_t v9 = v17 + 3;
          if (v17 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v20 + 8 * v9);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v18 - 1) & v18;
    unint64_t v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = *(void **)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    id v16 = v15;
    a2(v13, v14, v16);

    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v7) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v7) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v20 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_10038195C()
{
  id result = [self sharedBabysitter];
  if (result)
  {
    uint64_t v2 = result;
    NSString v3 = String._bridgeToObjectiveC()();
    id v4 = [v2 tokenByRegisteringAccount:v0 forOperationWithName:v3];

    if (!v4)
    {
      sub_100094134((uint64_t *)&unk_10090DC70);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      *(void *)(inited + 32) = 0x696669746E656469;
      *(void *)(inited + 40) = 0xEA00000000007265;
      *(void *)(inited + 48) = String._bridgeToObjectiveC()();
      unint64_t v6 = sub_1002EDFE8(inited);
      int64_t v7 = self;
      NSString v8 = String._bridgeToObjectiveC()();
      id v9 = [v7 babySatErrorWithOperationName:v8];

      type metadata accessor for Analytics();
      sub_10042085C(v6);
      swift_bridgeObjectRelease();
      id v10 = v9;
      static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)();
      swift_bridgeObjectRelease();

      swift_willThrow();
    }
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100381B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_allocWithZone((Class)NSPersistentStoreDescription);
  URL._bridgeToObjectiveC()(v6);
  NSString v8 = v7;
  id v9 = [v5 initWithURL:v7];

  [v9 setType:NSSQLiteStoreType];
  [v9 setShouldMigrateStoreAutomatically:1];
  [v9 setShouldInferMappingModelAutomatically:1];
  id v10 = [v9 setShouldAddStoreAsynchronously:0];
  if (a3)
  {
    __chkstk_darwin(v10);
    uint64_t v11 = swift_bridgeObjectRetain();
    sub_1003817A4(v11, (void (*)(uint64_t, uint64_t, id))sub_100382D5C);
    swift_bridgeObjectRelease();
  }
  id v12 = [objc_allocWithZone((Class)NSPersistentStoreCoordinator) initWithManagedObjectModel:a2];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  uint64_t v14 = (void *)(v13 + 16);
  aBlock[4] = sub_100382D3C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100376DD0;
  aBlock[3] = &unk_1008C33E8;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v12 addPersistentStoreWithDescription:v9 completionHandler:v15];
  _Block_release(v15);
  swift_beginAccess();
  if (*v14)
  {
    swift_errorRetain();
    swift_willThrow();
  }
  else
  {
  }
  swift_release();
  return v12;
}

uint64_t sub_100381D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v46 = a4;
  uint64_t v47 = a3;
  uint64_t v11 = type metadata accessor for NSPersistentStore.StoreType();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  int64_t v17 = (char *)&v40 - v16;
  uint64_t v18 = sub_1000963CC(0, &qword_100916050);
  static NSPersistentStore.StoreType.sqlite.getter();
  uint64_t v19 = static NSPersistentStoreCoordinator.metadataForPersistentStore(type:at:options:)();
  uint64_t v50 = v7;
  if (v7) {
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
  uint64_t v21 = v19;
  uint64_t v44 = v14;
  uint64_t v45 = a1;
  uint64_t v23 = v46;
  uint64_t v22 = v47;
  uint64_t v43 = v18;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v40 = v12 + 8;
  long long v41 = v24;
  v24(v17, v11);
  uint64_t v25 = *(void *)(v21 + 16);
  uint64_t v26 = v21;
  uint64_t v42 = v11;
  if (!v25)
  {
    long long v53 = 0u;
    long long v54 = 0u;
    uint64_t v28 = v22;
    uint64_t v30 = v23;
LABEL_11:
    sub_1000966BC((uint64_t)&v53, &qword_100908190);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  unint64_t v27 = sub_1001806F8(0xD000000000000056, 0x80000001007D2DF0);
  uint64_t v28 = v22;
  if (v29)
  {
    sub_10009A1B0(*(void *)(v21 + 56) + 32 * v27, (uint64_t)&v53);
  }
  else
  {
    long long v53 = 0u;
    long long v54 = 0u;
  }
  uint64_t v30 = v23;
  swift_bridgeObjectRelease();
  if (!*((void *)&v54 + 1)) {
    goto LABEL_11;
  }
  sub_100094134(&qword_100916058);
  if (!swift_dynamicCast())
  {
LABEL_12:
    char v31 = _swiftEmptyArrayStorage;
    goto LABEL_13;
  }
  char v31 = *(void **)&v52[0];
LABEL_13:
  sub_100094134(&qword_100908170);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0xD000000000000017;
  *(void *)(inited + 40) = 0x80000001007D2E50;
  *(_OWORD *)(inited + 16) = xmmword_100778370;
  *(void *)(inited + 48) = a2;
  *(void *)(inited + 56) = v28;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0xD00000000000001CLL;
  *(void *)(inited + 88) = 0x80000001007D2E70;
  *(void *)(inited + 96) = v30;
  *(void *)(inited + 104) = v48;
  *(void *)(inited + 120) = &type metadata for String;
  strcpy((char *)(inited + 128), "completionDate");
  *(unsigned char *)(inited + 143) = -18;
  uint64_t v33 = type metadata accessor for Date();
  *(void *)(inited + 168) = v33;
  int64_t v34 = sub_1000C1FE8((uint64_t *)(inited + 144));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v34, v49, v33);
  *(void *)(inited + 176) = 0xD00000000000001CLL;
  *(void *)(inited + 184) = 0x80000001007D2E90;
  *(void *)(inited + 216) = &type metadata for Double;
  *(double *)(inited + 192) = a7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v35 = sub_1001805C0(inited);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v31 = sub_100309F10(0, v31[2] + 1, 1, v31);
  }
  unint64_t v37 = v31[2];
  unint64_t v36 = v31[3];
  if (v37 >= v36 >> 1) {
    char v31 = sub_100309F10((void *)(v36 > 1), v37 + 1, 1, v31);
  }
  void v31[2] = v37 + 1;
  v31[v37 + 4] = v35;
  *((void *)&v54 + 1) = sub_100094134(&qword_100916058);
  *(void *)&long long v53 = v31;
  sub_10009A1A0(&v53, v52);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = v26;
  sub_1002C54C8(v52, 0xD000000000000056, 0x80000001007D2DF0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  unint64_t v39 = v44;
  static NSPersistentStore.StoreType.sqlite.getter();
  static NSPersistentStoreCoordinator.setMetadata(_:type:at:options:)();
  v41(v39, v42);
  return swift_bridgeObjectRelease();
}

void sub_10038223C(uint64_t a1, uint64_t a2)
{
  uint64_t v87 = a2;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v85 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v4 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  double v84 = (char *)&v83 - v6;
  __chkstk_darwin(v7);
  id v9 = (char *)&v83 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v83 - v11;
  id v13 = [self defaultManager];
  URL.path.getter();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v15 = [v13 fileExistsAtPath:v14];

  if (!v15)
  {
    int64_t v17 = self;
    id v88 = 0;
    unint64_t v89 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v18._uint64_t countAndFlagsBits = 0xD000000000000032;
    v18._uint64_t object = (void *)0x80000001007D2BA0;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 125;
    v20._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v17 invalidParameterErrorWithDescription:v21];

    swift_willThrow();
    return;
  }
  id v86 = v13;
  if (URL.pathExtension.getter() == 0x6574696C7173 && v16 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      uint64_t v32 = self;
      id v88 = 0;
      unint64_t v89 = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v33._uint64_t countAndFlagsBits = 0xD000000000000042;
      v33._uint64_t object = (void *)0x80000001007D2BE0;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = URL.path.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 125;
      v35._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v30 = [v32 invalidParameterErrorWithDescription:v29];
      goto LABEL_24;
    }
  }
  sub_10037D388(&qword_1009149E0);
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    uint64_t v23 = self;
    id v88 = 0;
    unint64_t v89 = 0xE000000000000000;
    _StringGuts.grow(_:)(104);
    v24._uint64_t object = (void *)0x80000001007D2CD0;
    v24._uint64_t countAndFlagsBits = 0xD00000000000004CLL;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0xD000000000000017;
    v26._uint64_t object = (void *)0x80000001007D2D20;
    String.append(_:)(v26);
    v27._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 125;
    v28._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v30 = [v23 invalidParameterErrorWithDescription:v29];
LABEL_24:
    v30;

LABEL_25:
    swift_willThrow();

    return;
  }
  if (URL.pathExtension.getter() == 0x6574696C7173 && v31 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      char v77 = self;
      id v88 = 0;
      unint64_t v89 = 0xE000000000000000;
      _StringGuts.grow(_:)(79);
      v78._uint64_t object = (void *)0x80000001007D2C30;
      v78._uint64_t countAndFlagsBits = 0xD00000000000004CLL;
      String.append(_:)(v78);
      v79._uint64_t countAndFlagsBits = URL.path.getter();
      String.append(_:)(v79);
      swift_bridgeObjectRelease();
      v80._uint64_t countAndFlagsBits = 125;
      v80._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v80);
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v30 = [v77 invalidParameterErrorWithDescription:v29];
      goto LABEL_24;
    }
  }
  URL.path.getter();
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v38 = [v86 fileExistsAtPath:v37];

  if (v38)
  {
    uint64_t v40 = self;
    id v88 = 0;
    unint64_t v89 = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v41._uint64_t countAndFlagsBits = 0xD000000000000043;
    v41._uint64_t object = (void *)0x80000001007D2C80;
    String.append(_:)(v41);
    v42._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._uint64_t countAndFlagsBits = 125;
    v43._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v43);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v30 = [v40 invalidParameterErrorWithDescription:v29];
    goto LABEL_24;
  }
  URL._bridgeToObjectiveC()(v39);
  uint64_t v45 = v44;
  URL._bridgeToObjectiveC()(v46);
  uint64_t v48 = v47;
  id v88 = 0;
  unsigned int v49 = [v86 copyItemAtURL:v45 toURL:v47 error:&v88];

  if (!v49)
  {
    id v81 = v88;
    _convertNSErrorToError(_:)();

    goto LABEL_25;
  }
  id v50 = v88;
  URL.deletingPathExtension()();
  URL.appendingPathExtension(_:)();
  uint64_t v51 = v85 + 8;
  os_log_type_t v52 = *(void (**)(char *, uint64_t))(v85 + 8);
  v52(v9, v2);
  uint64_t v53 = v51;
  URL.deletingPathExtension()();
  URL.appendingPathExtension(_:)();
  v52(v9, v2);
  URL.path.getter();
  NSString v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v55 = [v86 fileExistsAtPath:v54];

  if (!v55) {
    goto LABEL_19;
  }
  URL._bridgeToObjectiveC()(v56);
  id v58 = v57;
  URL.deletingPathExtension()();
  URL.appendingPathExtension(_:)();
  v52(v4, v2);
  URL._bridgeToObjectiveC()(v59);
  unint64_t v61 = v60;
  v52(v9, v2);
  id v88 = 0;
  LODWORD(v85) = [v86 copyItemAtURL:v58 toURL:v61 error:&v88];

  id v62 = v88;
  if (!v85)
  {
    uint64_t v82 = v62;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v52(v84, v2);
    v52(v12, v2);
  }
  else
  {
LABEL_19:
    uint64_t v85 = v53;
    unint64_t v83 = v52;
    int v63 = v84;
    URL.path.getter();
    NSString v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v65 = [v86 fileExistsAtPath:v64];

    if (v65)
    {
      URL._bridgeToObjectiveC()(v66);
      int v68 = v67;
      URL.deletingPathExtension()();
      URL.appendingPathExtension(_:)();
      uint64_t v69 = v83;
      v83(v4, v2);
      URL._bridgeToObjectiveC()(v70);
      uint64_t v72 = v71;
      v69(v9, v2);
      id v88 = 0;
      LOBYTE(v69) = [v86 copyItemAtURL:v68 toURL:v72 error:&v88];

      id v73 = v88;
      if ((v69 & 1) == 0)
      {
        unint64_t v74 = v73;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }

    uint64_t v75 = v63;
    os_log_type_t v76 = v83;
    v83(v75, v2);
    v76(v12, v2);
  }
}

uint64_t sub_100382C6C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100382CA4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_100382CD4()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_100382D04()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100382D3C(uint64_t a1, uint64_t a2)
{
  return sub_100381110(a1, a2, v2);
}

uint64_t sub_100382D44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100382D54()
{
  return swift_release();
}

void sub_100382D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(v3 + 16);
  id v6 = String._bridgeToObjectiveC()();
  [v5 setOption:a3 forKey:v6];
}

uint64_t sub_100382DBC()
{
  uint64_t v0 = type metadata accessor for NSPersistentStore.StoreType();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, &qword_100916050);
  static NSPersistentStore.StoreType.sqlite.getter();
  uint64_t v4 = static NSPersistentStoreCoordinator.metadataForPersistentStore(type:at:options:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_1001806F8(0xD000000000000056, 0x80000001007D2DF0), (v6 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v9);
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v10 + 1))
  {
    sub_100094134(&qword_100916058);
    if (swift_dynamicCast()) {
      return v8[1];
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v9, &qword_100908190);
    return 0;
  }
}

void sub_100382F90(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1003849F0();
    sub_100384A30();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v16 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    sub_1003849F0();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v17;
    swift_unknownObjectRelease();
    uint64_t v11 = v3;
    uint64_t v9 = v4;
    if (!v17) {
      goto LABEL_37;
    }
LABEL_33:
    self;
    if (swift_dynamicCastObjCClass())
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
    uint64_t v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
LABEL_32:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v8) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v16 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v16 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v16 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v16 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_37;
            }
            unint64_t v14 = *(void *)(v16 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v16 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              sub_1000C1AF8();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

id sub_100383290()
{
  uint64_t v0 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - v8;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_1001260DC((uint64_t)v2);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
    uint64_t v11 = self;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v10 = [v11 objectIDWithUUID:isa];

    int64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
    v13(v6, v3);
    v13(v9, v3);
  }
  return v10;
}

uint64_t sub_1003834AC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100916070);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100916070);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100383574()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void *sub_1003835CC(uint64_t a1, void *a2)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  id v7 = sub_100383290();
  if (!v7)
  {
    uint64_t v16 = self;
    _StringGuts.grow(_:)(100);
    v17._uint64_t object = (void *)0x80000001007D3230;
    v17._uint64_t countAndFlagsBits = 0xD000000000000061;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = a1;
    v18._uint64_t object = a2;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = 125;
    v19._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 internalErrorWithDebugDescription:v20];

    swift_willThrow();
    return v4;
  }
  uint64_t v8 = v7;
  swift_beginAccess();
  uint64_t v9 = *(void *)(v2 + 144);
  if (!*(void *)(v9 + 16))
  {
LABEL_8:
    uint64_t v4 = self;
    _StringGuts.grow(_:)(105);
    v21._uint64_t countAndFlagsBits = 0xD000000000000066;
    v21._uint64_t object = (void *)0x80000001007D32A0;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = a1;
    v22._uint64_t object = a2;
    String.append(_:)(v22);
    v23._uint64_t countAndFlagsBits = 125;
    v23._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 internalErrorWithDebugDescription:v24];

    swift_willThrow();
    return v4;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1001806F8(a1, (uint64_t)a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100094134(&qword_10090FF18);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = v8;
  uint64_t v30 = inited;
  specialized Array._endMutation()();
  id v14 = v8;
  uint64_t v15 = sub_100714A48(v30, v12);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    if (v15[2])
    {
      id v26 = v14;
      unint64_t v27 = sub_10030703C(v26);
      if (v28)
      {
        uint64_t v4 = *(void **)(v15[7] + 8 * v27);
        id v29 = v4;
        swift_release();
        swift_bridgeObjectRelease();

LABEL_16:
        return v4;
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v4 = 0;
    goto LABEL_16;
  }

  swift_release();
  return v4;
}

void sub_1003838FC()
{
  uint64_t v2 = v0 + 14;
  swift_beginAccess();
  if (*(void *)(v0[14] + 16))
  {
    while (1)
    {
      swift_beginAccess();
      if (!*(void *)(*v2 + 16)) {
        break;
      }
      uint64_t v4 = *(void (**)(uint64_t))(*v2 + 32);
      swift_retain();
      sub_1001ED47C(0, 1);
      uint64_t v5 = swift_endAccess();
      v4(v5);
      if (v1)
      {
LABEL_14:
        swift_release();
        goto LABEL_15;
      }
      swift_release();
      if (!*(void *)(*v2 + 16)) {
        goto LABEL_5;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  uint64_t v6 = v0 + 15;
  swift_beginAccess();
  if (*(void *)(v0[15] + 16))
  {
    while (1)
    {
      swift_beginAccess();
      if (!*(void *)(*v6 + 16)) {
        break;
      }
      id v7 = *(void (**)(uint64_t))(*v6 + 32);
      swift_retain();
      sub_1001ED47C(0, 1);
      uint64_t v8 = swift_endAccess();
      v7(v8);
      if (v1) {
        goto LABEL_14;
      }
      swift_release();
      if (!*(void *)(*v6 + 16)) {
        goto LABEL_9;
      }
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }
LABEL_9:
  uint64_t v9 = v0 + 16;
  swift_beginAccess();
  if (*(void *)(v0[16] + 16))
  {
    do
    {
      swift_beginAccess();
      if (!*(void *)(*v9 + 16)) {
        goto LABEL_18;
      }
      unint64_t v10 = *(void (**)(uint64_t))(*v9 + 32);
      swift_retain();
      sub_1001ED47C(0, 1);
      uint64_t v11 = swift_endAccess();
      v10(v11);
      if (v1) {
        goto LABEL_14;
      }
      swift_release();
    }
    while (*(void *)(*v9 + 16));
  }
  sub_100384340();
LABEL_15:
}

void sub_100383B68()
{
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 136;
  swift_beginAccess();
  if (*(void *)(*(void *)(v0 + 136) + 16))
  {
    while (1)
    {
      swift_beginAccess();
      if (!*(void *)(*(void *)v3 + 16)) {
        break;
      }
      uint64_t v5 = *(void (**)(uint64_t))(*(void *)v3 + 32);
      swift_retain();
      sub_1001ED47C(0, 1);
      uint64_t v6 = swift_endAccess();
      v5(v6);
      if (v1)
      {
        swift_release();
        uint64_t v8 = v4;
        goto LABEL_7;
      }
      swift_release();
      if (!*(void *)(*(void *)v3 + 16)) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_beginAccess();
    *(void *)(v2 + 144) = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    uint64_t v8 = v7;
LABEL_7:
  }
}

void sub_100383C9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t v6 = (uint64_t *)(a2 + 144);
  swift_beginAccess();
  if (!*(void *)(*(void *)(a2 + 144) + 16)
    || (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        sub_1001806F8(v5, (uint64_t)v4),
        char v8 = v7,
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v8 & 1) == 0))
  {
    uint64_t v9 = *(void **)(a2 + 80);
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 storeForAccountIdentifier:v10];

    if (v11)
    {
      type metadata accessor for CDIngestionCoordinator.IngestionContext();
      uint64_t v12 = (void *)swift_allocObject();
      swift_bridgeObjectRetain();
      id v13 = v11;
      v12[5] = sub_1002EF5A8((uint64_t)_swiftEmptyArrayStorage);
      v12[6] = sub_1002EF5A8((uint64_t)_swiftEmptyArrayStorage);
      v12[7] = sub_1002EF5C8((uint64_t)_swiftEmptyArrayStorage);
      v12[2] = v5;
      v12[3] = v4;
      v12[4] = v13;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v36 = *v6;
      *uint64_t v6 = 0x8000000000000000;
      sub_1002C60A4((uint64_t)v12, v5, (uint64_t)v4, isUniquelyReferenced_nonNull_native);
      *uint64_t v6 = v36;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_bridgeObjectRetain();
      id v15 = sub_100383290();
      if (v15)
      {
        uint64_t v16 = v15;
        sub_100094134(&qword_10090FF18);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100776E40;
        *(void *)(inited + 32) = v16;
        v35[0] = inited;
        specialized Array._endMutation()();
        id v18 = v16;
        sub_100714A48(v35[0], (uint64_t)v12);
        swift_bridgeObjectRelease();
        if (!v2) {
          swift_bridgeObjectRelease();
        }

        swift_release();
      }
      else
      {
        if (qword_1009073A0 != -1) {
          swift_once();
        }
        uint64_t v23 = type metadata accessor for Logger();
        sub_10008E2DC(v23, (uint64_t)qword_100916070);
        swift_bridgeObjectRetain_n();
        NSString v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v24, v25))
        {
          id v26 = (uint8_t *)swift_slowAlloc();
          v35[0] = swift_slowAlloc();
          *(_DWORD *)id v26 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v36 = sub_1000C51B8(v5, (unint64_t)v4, v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Could not convert accountIdentifier to CDObjectID to initializeIngestionContexts {accountIdentifier: %{public}s}", v26, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v30 = self;
        v35[0] = 0;
        v35[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(104);
        v31._uint64_t object = (void *)0x80000001007D31A0;
        v31._uint64_t countAndFlagsBits = 0xD000000000000065;
        String.append(_:)(v31);
        v32._uint64_t countAndFlagsBits = v5;
        v32._uint64_t object = v4;
        String.append(_:)(v32);
        v33._uint64_t countAndFlagsBits = 125;
        v33._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v33);
        NSString v34 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v30 internalErrorWithDebugDescription:v34];

        swift_willThrow();
        swift_release();
      }
    }
    else
    {
      if (qword_1009073A0 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_10008E2DC(v19, (uint64_t)qword_100916070);
      swift_bridgeObjectRetain_n();
      NSString v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        Swift::String v22 = (uint8_t *)swift_slowAlloc();
        v35[0] = swift_slowAlloc();
        *(_DWORD *)Swift::String v22 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v36 = sub_1000C51B8(v5, (unint64_t)v4, v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Persistent store not found for some ingestables, the store may have been removed before this save request. Aborting the entire save for integrity. {accountIdentifier: %{public}s}", v22, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v27 = self;
      sub_100094134((uint64_t *)&unk_10090A490);
      uint64_t v28 = swift_initStackObject();
      *(_OWORD *)(v28 + 16) = xmmword_100776E40;
      *(void *)(v28 + 32) = v5;
      *(void *)(v28 + 40) = v4;
      swift_bridgeObjectRetain();
      sub_10012674C(v28);
      swift_setDeallocating();
      swift_arrayDestroy();
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v27 accountStoreMissingError:isa];

      swift_willThrow();
    }
  }
}

uint64_t sub_100384340()
{
  uint64_t v1 = *(void **)(v0 + 88);
  id v2 = [v1 updatedObjects];
  sub_1003849F0();
  sub_100384A30();
  uint64_t v3 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = [v1 insertedObjects];
  unint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10065D2EC(v5, v3);
  sub_100382F90(v6);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  if (qword_1009073A0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain_n();
  NSString v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  unint64_t v12 = v8 >> 62;
  if (!os_log_type_enabled(v10, v11))
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  uint64_t v13 = swift_slowAlloc();
  uint64_t v20 = swift_slowAlloc();
  *(_DWORD *)uint64_t v13 = 136446466;
  sub_1000C51B8(0xD000000000000010, 0x80000001007D3210, &v20);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v13 + 12) = 2048;
  if (v12) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s] Updated objects to inspect for orphan {count: %ld}", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_8:
    NSString v10 = [objc_allocWithZone((Class)NSMutableDictionary) init];
    if (v12)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v13) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v13) {
        goto LABEL_17;
      }
    }
    if (v13 >= 1) {
      break;
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  for (uint64_t i = 0; i != v13; ++i)
  {
    if ((v8 & 0xC000000000000001) != 0) {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v16 = *(id *)(v8 + 8 * i + 32);
    }
    Swift::String v17 = v16;
    [v16 updateDeletedFlagAccordingToOrphanState:v10, v19];
  }
LABEL_17:

  return swift_bridgeObjectRelease();
}

uint64_t sub_1003846A8()
{
  sub_10012227C(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int16 *)(v0 + 68) << 32));
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10038471C()
{
  sub_1003846A8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CDIngestionCoordinator()
{
  return self;
}

uint64_t type metadata accessor for CDIngestionCoordinator.IngestionContext()
{
  return self;
}

uint64_t sub_100384798(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v22 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)(a7 + 16) = 0;
  *(void *)(a7 + 112) = _swiftEmptyArrayStorage;
  *(void *)(a7 + 120) = _swiftEmptyArrayStorage;
  *(void *)(a7 + 128) = _swiftEmptyArrayStorage;
  *(void *)(a7 + 136) = _swiftEmptyArrayStorage;
  *(void *)(a7 + 72) = a1;
  *(void *)(a7 + 80) = a2;
  *(void *)(a7 + 88) = a3;
  sub_10010B4E8(a4, a7 + 24);
  swift_unknownObjectRetain();
  id v17 = a3;
  *(void *)(a7 + 144) = sub_1002EE9BC((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(a7 + 96) = a5;
  *(unsigned char *)(a7 + 104) = a6;
  switch(a5)
  {
    case 0:
      goto LABEL_5;
    case 1:
    case 2:
    case 3:
      swift_unknownObjectRelease();

      *(_WORD *)(a7 + 16) = 257;
      break;
    case 4:
      swift_unknownObjectRelease();

      *(unsigned char *)(a7 + 17) = 1;
      break;
    default:
      uint64_t v18 = v22;
      if (a5 != 4499 && a5 != 4599)
      {
        if (qword_1009073A0 != -1) {
          swift_once();
        }
        uint64_t v20 = sub_10008E2DC(v14, (uint64_t)qword_100916070);
        (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, v20, v14);
        sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
        sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
        sub_10052ECB8((uint64_t)"unknown mode", 12, 2);
        __break(1u);
        JUMPOUT(0x1003849DCLL);
      }
LABEL_5:
      swift_unknownObjectRelease();

      break;
  }
  return a7;
}

unint64_t sub_1003849F0()
{
  unint64_t result = qword_100909B00;
  if (!qword_100909B00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100909B00);
  }
  return result;
}

unint64_t sub_100384A30()
{
  unint64_t result = qword_1009163D0;
  if (!qword_1009163D0)
  {
    sub_1003849F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009163D0);
  }
  return result;
}

uint64_t TantorMigrationAPI.PingOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100384AFC(a1, &qword_1009163E0);
}

uint64_t TantorMigrationAPI.PingOperation.init(request:)(uint64_t a1)
{
  return sub_100384BE4(a1, &qword_1009163E0);
}

void TantorMigrationAPI.PingOperation.init(functionName:request:)()
{
}

uint64_t TantorMigrationAPI.SubmitAllHubbleKpisOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100384AFC(a1, &qword_1009163E8);
}

uint64_t sub_100384AFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = sub_100094134(a2);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_allocWithZone(v2);
  sub_1000BF710(a1, (uint64_t)v7, a2);
  uint64_t v9 = CKCodeOperation.init(functionName:request:)();
  sub_1000966BC(a1, a2);
  return v9;
}

uint64_t TantorMigrationAPI.SubmitAllHubbleKpisOperation.init(request:)(uint64_t a1)
{
  return sub_100384BE4(a1, &qword_1009163E8);
}

uint64_t sub_100384BE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100094134(a2);
  __chkstk_darwin(v4 - 8);
  sub_1000BF710(a1, (uint64_t)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  uint64_t v6 = CKCodeOperation.init(functionName:request:)();
  sub_1000966BC(a1, a2);
  return v6;
}

void TantorMigrationAPI.SubmitAllHubbleKpisOperation.init(functionName:request:)()
{
}

uint64_t TantorMigrationAPI.StartMigrationOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100384AFC(a1, &qword_1009163F0);
}

uint64_t TantorMigrationAPI.StartMigrationOperation.init(request:)(uint64_t a1)
{
  return sub_100384BE4(a1, &qword_1009163F0);
}

void TantorMigrationAPI.StartMigrationOperation.init(functionName:request:)()
{
}

uint64_t TantorMigrationAPI.MigrateOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100384AFC(a1, &qword_1009163F8);
}

uint64_t TantorMigrationAPI.MigrateOperation.init(request:)(uint64_t a1)
{
  return sub_100384BE4(a1, &qword_1009163F8);
}

void TantorMigrationAPI.MigrateOperation.init(functionName:request:)()
{
}

uint64_t TantorMigrationAPI.UnmigrateOperation.__allocating_init(request:)(uint64_t a1)
{
  return sub_100384AFC(a1, &qword_100916400);
}

uint64_t TantorMigrationAPI.UnmigrateOperation.init(request:)(uint64_t a1)
{
  return sub_100384BE4(a1, &qword_100916400);
}

void TantorMigrationAPI.UnmigrateOperation.init(functionName:request:)()
{
}

void sub_100384DEC()
{
}

uint64_t TantorMigrationAPIAsync.ping(message:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for PingRequest(0);
  __chkstk_darwin(v12);
  uint64_t v14 = &v16[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  sub_100386BCC(&qword_100908990, (void (*)(uint64_t))type metadata accessor for PingRequest);
  static Message.with(_:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(v14, a3, a4, a5, a6);
  return sub_100387864((uint64_t)v14, type metadata accessor for PingRequest);
}

uint64_t TantorMigrationAPIAsync.submitAllHubbleKpis(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for EmptyRequest(0);
  __chkstk_darwin(v8 - 8);
  NSString v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(v10, a1, a2, a3, a4);
  return sub_100387864((uint64_t)v10, type metadata accessor for EmptyRequest);
}

uint64_t TantorMigrationAPIAsync.startMigration(archivePath:credential:embeddedTestData:disableCache:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v22 = a8;
  uint64_t v21 = a7;
  uint64_t started = type metadata accessor for StartMigrationRequest(0);
  __chkstk_darwin(started);
  uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  char v28 = a6;
  sub_100386BCC(&qword_1009087F8, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest);
  static Message.with(_:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 24))(v18, v21, v22, a9, a10);
  return sub_100387864((uint64_t)v18, type metadata accessor for StartMigrationRequest);
}

uint64_t TantorMigrationAPIAsync.migrate(user:archivePath:embeddedTestData:options:userInitiated:simulatedError:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v24 = a7;
  uint64_t v25 = a10;
  uint64_t v26 = a9;
  uint64_t v27 = a11;
  uint64_t v19 = type metadata accessor for MigrateRequest(0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  int v33 = a6;
  char v34 = BYTE4(a6) & 1;
  char v35 = v24;
  int v36 = a8;
  char v37 = BYTE4(a8) & 1;
  sub_100386BCC(&qword_100908870, (void (*)(uint64_t))type metadata accessor for MigrateRequest);
  static Message.with(_:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 32))(v21, v26, v25, v27, a12);
  return sub_100387864((uint64_t)v21, type metadata accessor for MigrateRequest);
}

uint64_t TantorMigrationAPIAsync.unmigrate(options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UnmigrateRequest(0);
  __chkstk_darwin(v10);
  uint64_t v12 = &v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v15 = a1;
  char v16 = BYTE4(a1) & 1;
  sub_100386BCC(&qword_100908900, (void (*)(uint64_t))type metadata accessor for UnmigrateRequest);
  static Message.with(_:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 40))(v12, a2, a3, a4, a5);
  return sub_100387864((uint64_t)v12, type metadata accessor for UnmigrateRequest);
}

uint64_t TantorMigrationAPIAsyncClient.__allocating_init(codeService:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t TantorMigrationAPIAsyncClient.init(codeService:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

void TantorMigrationAPIAsyncClient.ping(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009163E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v11 - v6;
  sub_1003877FC(a1, (uint64_t)&v11 - v6, type metadata accessor for PingRequest);
  uint64_t v8 = type metadata accessor for PingRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.PingOperation(0));
  sub_1000BF710((uint64_t)v7, (uint64_t)v4, &qword_1009163E0);
  uint64_t v9 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000966BC((uint64_t)v7, &qword_1009163E0);
  id v10 = v9;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();

  CKCodeService.add<A, B>(_:)();
}

void TantorMigrationAPIAsyncClient.submitAllHubbleKpis(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009163E8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v11 - v6;
  sub_1003877FC(a1, (uint64_t)&v11 - v6, type metadata accessor for EmptyRequest);
  uint64_t v8 = type metadata accessor for EmptyRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.SubmitAllHubbleKpisOperation(0));
  sub_1000BF710((uint64_t)v7, (uint64_t)v4, &qword_1009163E8);
  uint64_t v9 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000966BC((uint64_t)v7, &qword_1009163E8);
  id v10 = v9;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();

  CKCodeService.add<A, B>(_:)();
}

void TantorMigrationAPIAsyncClient.startMigration(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009163F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v11 - v6;
  sub_1003877FC(a1, (uint64_t)&v11 - v6, type metadata accessor for StartMigrationRequest);
  uint64_t started = type metadata accessor for StartMigrationRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(started - 8) + 56))(v7, 0, 1, started);
  objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.StartMigrationOperation(0));
  sub_1000BF710((uint64_t)v7, (uint64_t)v4, &qword_1009163F0);
  uint64_t v9 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000966BC((uint64_t)v7, &qword_1009163F0);
  id v10 = v9;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();

  CKCodeService.add<A, B>(_:)();
}

void TantorMigrationAPIAsyncClient.migrate(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009163F8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v11 - v6;
  sub_1003877FC(a1, (uint64_t)&v11 - v6, type metadata accessor for MigrateRequest);
  uint64_t v8 = type metadata accessor for MigrateRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.MigrateOperation(0));
  sub_1000BF710((uint64_t)v7, (uint64_t)v4, &qword_1009163F8);
  uint64_t v9 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000966BC((uint64_t)v7, &qword_1009163F8);
  id v10 = v9;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();

  CKCodeService.add<A, B>(_:)();
}

void TantorMigrationAPIAsyncClient.unmigrate(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100916400);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v11 - v6;
  sub_1003877FC(a1, (uint64_t)&v11 - v6, type metadata accessor for UnmigrateRequest);
  uint64_t v8 = type metadata accessor for UnmigrateRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.UnmigrateOperation(0));
  sub_1000BF710((uint64_t)v7, (uint64_t)v4, &qword_100916400);
  uint64_t v9 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000966BC((uint64_t)v7, &qword_100916400);
  id v10 = v9;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();

  CKCodeService.add<A, B>(_:)();
}

uint64_t TantorMigrationAPIAsyncClient.deinit()
{
  return v0;
}

void sub_100385CF8(uint64_t a1)
{
}

void sub_100385D1C(uint64_t a1)
{
}

void sub_100385D40(uint64_t a1)
{
}

void sub_100385D64(uint64_t a1)
{
}

void sub_100385D88(uint64_t a1)
{
}

uint64_t TantorMigrationAPIAsyncOperation.ping(message:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for PingRequest(0);
  __chkstk_darwin(v12);
  uint64_t v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  sub_100386BCC(&qword_100908990, (void (*)(uint64_t))type metadata accessor for PingRequest);
  static Message.with(_:)();
  uint64_t v15 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(v14, a3, a4, a5, a6);
  sub_100387864((uint64_t)v14, type metadata accessor for PingRequest);
  return v15;
}

uint64_t TantorMigrationAPIAsyncOperation.submitAllHubbleKpis(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for EmptyRequest(0);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(v10, a1, a2, a3, a4);
  sub_100387864((uint64_t)v10, type metadata accessor for EmptyRequest);
  return v11;
}

uint64_t TantorMigrationAPIAsyncOperation.startMigration(archivePath:credential:embeddedTestData:disableCache:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v23 = a8;
  uint64_t v22 = a7;
  uint64_t started = type metadata accessor for StartMigrationRequest(0);
  __chkstk_darwin(started);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  char v29 = a6;
  sub_100386BCC(&qword_1009087F8, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest);
  static Message.with(_:)();
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 24))(v18, v22, v23, a9, a10);
  sub_100387864((uint64_t)v18, type metadata accessor for StartMigrationRequest);
  return v19;
}

uint64_t sub_100386158(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v30 = a7;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v11 = sub_100094134(&qword_100909990);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for StartMigrationRequest.Credential(0);
  uint64_t v15 = *(void *)(started - 8);
  __chkstk_darwin(started);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v27 - v19;
  if (a3)
  {
    swift_bridgeObjectRetain();
    sub_1000966BC((uint64_t)a1, &qword_1009086D0);
    *a1 = a2;
    a1[1] = a3;
    uint64_t v21 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a1, 0, 1, v21);
  }
  sub_1000BF710(a4, (uint64_t)v13, &qword_100909990);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, started) != 1)
  {
    sub_100387794((uint64_t)v13, (uint64_t)v20, type metadata accessor for StartMigrationRequest.Credential);
    sub_1003877FC((uint64_t)v20, (uint64_t)v17, type metadata accessor for StartMigrationRequest.Credential);
    sub_1000966BC((uint64_t)a1, &qword_1009086D0);
    sub_100387794((uint64_t)v17, (uint64_t)a1, type metadata accessor for StartMigrationRequest.Credential);
    uint64_t v24 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a1, 0, 1, v24);
    uint64_t result = sub_100387864((uint64_t)v20, type metadata accessor for StartMigrationRequest.Credential);
    uint64_t v23 = v29;
    if (!v29) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t result = sub_1000966BC((uint64_t)v13, &qword_100909990);
  uint64_t v23 = v29;
  if (v29)
  {
LABEL_7:
    swift_bridgeObjectRetain();
    sub_1000966BC((uint64_t)a1, &qword_1009086D0);
    *a1 = v28;
    a1[1] = v23;
    uint64_t v25 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload();
    uint64_t result = (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(a1, 0, 1, v25);
  }
LABEL_8:
  if (v30 != 2)
  {
    char v26 = v30 & 1;
    uint64_t result = type metadata accessor for StartMigrationRequest(0);
    *((unsigned char *)a1 + *(int *)(result + 20)) = v26;
  }
  return result;
}

uint64_t TantorMigrationAPIAsyncOperation.migrate(user:archivePath:embeddedTestData:options:userInitiated:simulatedError:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v25 = a7;
  uint64_t v26 = a10;
  uint64_t v27 = a9;
  uint64_t v28 = a11;
  uint64_t v19 = type metadata accessor for MigrateRequest(0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  int v34 = a6;
  char v35 = BYTE4(a6) & 1;
  char v36 = v25;
  int v37 = a8;
  char v38 = BYTE4(a8) & 1;
  sub_100386BCC(&qword_100908870, (void (*)(uint64_t))type metadata accessor for MigrateRequest);
  static Message.with(_:)();
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 32))(v21, v27, v26, v28, a12);
  sub_100387864((uint64_t)v21, type metadata accessor for MigrateRequest);
  return v22;
}

int *sub_100386664(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  int v34 = a8;
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v30 = a3;
  uint64_t v31 = a5;
  uint64_t v12 = sub_100094134(&qword_100909968);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for MigrateRequest.User(0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v29 - v20;
  sub_1000BF710(a2, (uint64_t)v14, &qword_100909968);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    sub_100387794((uint64_t)v14, (uint64_t)v21, type metadata accessor for MigrateRequest.User);
    sub_1003877FC((uint64_t)v21, (uint64_t)v18, type metadata accessor for MigrateRequest.User);
    sub_1000966BC((uint64_t)a1, &qword_1009086E0);
    sub_100387794((uint64_t)v18, (uint64_t)a1, type metadata accessor for MigrateRequest.User);
    uint64_t v24 = type metadata accessor for MigrateRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a1, 0, 1, v24);
    uint64_t result = (int *)sub_100387864((uint64_t)v21, type metadata accessor for MigrateRequest.User);
    uint64_t v23 = v33;
    if (!a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t result = (int *)sub_1000966BC((uint64_t)v14, &qword_100909968);
  uint64_t v23 = v33;
  if (a4)
  {
LABEL_5:
    swift_bridgeObjectRetain();
    sub_1000966BC((uint64_t)a1, &qword_1009086E0);
    *a1 = v30;
    a1[1] = a4;
    uint64_t v25 = type metadata accessor for MigrateRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload();
    uint64_t result = (int *)(*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(a1, 0, 1, v25);
  }
LABEL_6:
  uint64_t v26 = v32;
  if (v32)
  {
    swift_bridgeObjectRetain();
    sub_1000966BC((uint64_t)a1, &qword_1009086E0);
    *a1 = v31;
    a1[1] = v26;
    uint64_t v27 = type metadata accessor for MigrateRequest.OneOf_Source(0);
    swift_storeEnumTagMultiPayload();
    uint64_t result = (int *)(*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(a1, 0, 1, v27);
  }
  if ((v23 & 0x100000000) == 0)
  {
    uint64_t result = (int *)type metadata accessor for MigrateRequest(0);
    *(_DWORD *)((char *)a1 + result[5]) = v23;
  }
  if (v34 != 2)
  {
    char v28 = v34 & 1;
    uint64_t result = (int *)type metadata accessor for MigrateRequest(0);
    *((unsigned char *)a1 + result[6]) = v28;
  }
  if ((a9 & 0x100000000) == 0)
  {
    uint64_t result = (int *)type metadata accessor for MigrateRequest(0);
    *(_DWORD *)((char *)a1 + result[7]) = a9;
  }
  return result;
}

uint64_t TantorMigrationAPIAsyncOperation.unmigrate(options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UnmigrateRequest(0);
  __chkstk_darwin(v10);
  uint64_t v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v16 = a1;
  char v17 = BYTE4(a1) & 1;
  sub_100386BCC(&qword_100908900, (void (*)(uint64_t))type metadata accessor for UnmigrateRequest);
  static Message.with(_:)();
  uint64_t v13 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 40))(v12, a2, a3, a4, a5);
  sub_100387864((uint64_t)v12, type metadata accessor for UnmigrateRequest);
  return v13;
}

uint64_t sub_100386B6C(uint64_t a1)
{
  return sub_100386CB4(a1);
}

uint64_t sub_100386B84(void *a1)
{
  return sub_100386D08(a1);
}

int *sub_100386B9C(void *a1)
{
  return sub_100386D30(a1);
}

_DWORD *sub_100386BB4(_DWORD *a1)
{
  return sub_100386D8C(a1);
}

uint64_t sub_100386BCC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for TantorMigrationAPI.PingOperation(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100916408);
}

uint64_t type metadata accessor for TantorMigrationAPI.SubmitAllHubbleKpisOperation(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100916458);
}

uint64_t type metadata accessor for TantorMigrationAPI.StartMigrationOperation(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_1009164A8);
}

uint64_t type metadata accessor for TantorMigrationAPI.MigrateOperation(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_1009164F8);
}

uint64_t type metadata accessor for TantorMigrationAPI.UnmigrateOperation(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100916548);
}

uint64_t sub_100386CB4(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = *(void *)(v1 + 16);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t sub_100386D08(void *a1)
{
  return sub_100386158(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

int *sub_100386D30(void *a1)
{
  return sub_100386664(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned int *)(v1 + 56) | ((unint64_t)*(unsigned __int8 *)(v1 + 60) << 32), *(unsigned __int8 *)(v1 + 61), *(unsigned int *)(v1 + 64) | ((unint64_t)*(unsigned __int8 *)(v1 + 68) << 32));
}

_DWORD *sub_100386D8C(_DWORD *result)
{
  if ((*(unsigned char *)(v1 + 20) & 1) == 0) {
    *uint64_t result = *(_DWORD *)(v1 + 16);
  }
  return result;
}

id TantorMigrationAPIAsyncOperationClient.ping(_:completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134(&qword_1009163E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - v8;
  sub_1003877FC(a1, (uint64_t)&v17 - v8, type metadata accessor for PingRequest);
  uint64_t v10 = type metadata accessor for PingRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.PingOperation(0));
  sub_1000BF710((uint64_t)v9, (uint64_t)v6, &qword_1009163E0);
  uint64_t v11 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000966BC((uint64_t)v9, &qword_1009163E0);
  id v12 = v11;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();

  uint64_t v13 = *(void **)(v2 + 16);
  id v14 = v12;
  id v15 = v13;
  dispatch thunk of CKCodeOperation.codeService.setter();

  return v14;
}

id TantorMigrationAPIAsyncOperationClient.submitAllHubbleKpis(_:completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134(&qword_1009163E8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - v8;
  sub_1003877FC(a1, (uint64_t)&v17 - v8, type metadata accessor for EmptyRequest);
  uint64_t v10 = type metadata accessor for EmptyRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.SubmitAllHubbleKpisOperation(0));
  sub_1000BF710((uint64_t)v9, (uint64_t)v6, &qword_1009163E8);
  uint64_t v11 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000966BC((uint64_t)v9, &qword_1009163E8);
  id v12 = v11;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();

  uint64_t v13 = *(void **)(v2 + 16);
  id v14 = v12;
  id v15 = v13;
  dispatch thunk of CKCodeOperation.codeService.setter();

  return v14;
}

id TantorMigrationAPIAsyncOperationClient.startMigration(_:completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134(&qword_1009163F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - v8;
  sub_1003877FC(a1, (uint64_t)&v17 - v8, type metadata accessor for StartMigrationRequest);
  uint64_t started = type metadata accessor for StartMigrationRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(started - 8) + 56))(v9, 0, 1, started);
  objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.StartMigrationOperation(0));
  sub_1000BF710((uint64_t)v9, (uint64_t)v6, &qword_1009163F0);
  uint64_t v11 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000966BC((uint64_t)v9, &qword_1009163F0);
  id v12 = v11;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();

  uint64_t v13 = *(void **)(v2 + 16);
  id v14 = v12;
  id v15 = v13;
  dispatch thunk of CKCodeOperation.codeService.setter();

  return v14;
}

id TantorMigrationAPIAsyncOperationClient.migrate(_:completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134(&qword_1009163F8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  sub_1003877FC(a1, (uint64_t)&v17 - v8, type metadata accessor for MigrateRequest);
  uint64_t v10 = type metadata accessor for MigrateRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.MigrateOperation(0));
  sub_1000BF710((uint64_t)v9, (uint64_t)v7, &qword_1009163F8);
  uint64_t v11 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000966BC((uint64_t)v9, &qword_1009163F8);
  id v12 = v11;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();

  uint64_t v13 = *(void **)(v2 + 16);
  id v14 = v12;
  id v15 = v13;
  dispatch thunk of CKCodeOperation.codeService.setter();

  return v14;
}

id TantorMigrationAPIAsyncOperationClient.unmigrate(_:completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134(&qword_100916400);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - v8;
  sub_1003877FC(a1, (uint64_t)&v17 - v8, type metadata accessor for UnmigrateRequest);
  uint64_t v10 = type metadata accessor for UnmigrateRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  objc_allocWithZone((Class)type metadata accessor for TantorMigrationAPI.UnmigrateOperation(0));
  sub_1000BF710((uint64_t)v9, (uint64_t)v6, &qword_100916400);
  uint64_t v11 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000966BC((uint64_t)v9, &qword_100916400);
  id v12 = v11;
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();

  uint64_t v13 = *(void **)(v2 + 16);
  id v14 = v12;
  id v15 = v13;
  dispatch thunk of CKCodeOperation.codeService.setter();

  return v14;
}

id sub_1003875E8(uint64_t a1)
{
  return TantorMigrationAPIAsyncOperationClient.ping(_:completion:)(a1);
}

id sub_10038760C(uint64_t a1)
{
  return TantorMigrationAPIAsyncOperationClient.submitAllHubbleKpis(_:completion:)(a1);
}

id sub_100387630(uint64_t a1)
{
  return TantorMigrationAPIAsyncOperationClient.startMigration(_:completion:)(a1);
}

id sub_100387654(uint64_t a1)
{
  return TantorMigrationAPIAsyncOperationClient.migrate(_:completion:)(a1);
}

id sub_100387678(uint64_t a1)
{
  return TantorMigrationAPIAsyncOperationClient.unmigrate(_:completion:)(a1);
}

ValueMetadata *type metadata accessor for TantorMigrationAPI()
{
  return &type metadata for TantorMigrationAPI;
}

uint64_t sub_1003876AC()
{
  return sub_100387708();
}

uint64_t sub_1003876B8()
{
  return type metadata accessor for TantorMigrationAPI.PingOperation(0);
}

uint64_t sub_1003876C0()
{
  return sub_100387708();
}

uint64_t sub_1003876CC()
{
  return type metadata accessor for TantorMigrationAPI.SubmitAllHubbleKpisOperation(0);
}

uint64_t sub_1003876D4()
{
  return sub_100387708();
}

uint64_t sub_1003876E0()
{
  return type metadata accessor for TantorMigrationAPI.StartMigrationOperation(0);
}

uint64_t sub_1003876E8()
{
  return sub_100387708();
}

uint64_t sub_1003876F4()
{
  return type metadata accessor for TantorMigrationAPI.MigrateOperation(0);
}

uint64_t sub_1003876FC()
{
  return sub_100387708();
}

uint64_t sub_100387708()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100387744()
{
  return type metadata accessor for TantorMigrationAPI.UnmigrateOperation(0);
}

uint64_t type metadata accessor for TantorMigrationAPIAsyncClient()
{
  return self;
}

uint64_t type metadata accessor for TantorMigrationAPIAsyncOperationClient()
{
  return self;
}

uint64_t sub_100387794(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003877FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100387864(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003878D4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100916728);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100916728);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_10038799C()
{
  id result = [self alarmEngine];
  qword_100916740 = (uint64_t)result;
  return result;
}

void sub_100387A70()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1009073A8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  v16[1] = sub_10008E2DC(v6, (uint64_t)qword_100916728);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "os_transaction INIT {name: com.apple.remindd.RDTimeAlarmProducer.reload}", v9, 2u);
    swift_slowDealloc();
  }

  v16[0] = os_transaction_create();
  static os_signpost_type_t.begin.getter();
  if (qword_1009073B0 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  sub_1000C0DE0((void *)(v1 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_dataSource), *(void *)(v1 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_dataSource + 24));
  static os_signpost_type_t.begin.getter();
  if (qword_100907448 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v10(v5, v2);
  uint64_t v11 = swift_retain();
  uint64_t v12 = sub_1003CBBDC(v11);
  swift_release();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v10(v5, v2);
  sub_100387E68(v12);
  sub_1003883E0(v12);
  swift_bridgeObjectRelease();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v10(v5, v2);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "os_transaction RELEASE {name: com.apple.remindd.RDTimeAlarmProducer.reload}", v15, 2u);
    swift_slowDealloc();
  }
  swift_unknownObjectRelease();
}

void sub_100387E68(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  Class isa = v4[-1].isa;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((unsigned char *)v2 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_started) == 1)
  {
    Class v29 = isa;
    os_log_t v30 = v4;
    static os_signpost_type_t.begin.getter();
    if (qword_1009073B0 != -1) {
      swift_once();
    }
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    char v28 = *(void (**)(char *, uint64_t))(v9 + 8);
    v28(v11, v8);
    if (qword_1009073A8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_100916728);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDTimeAlarmProducer is firing expired alarms", v15, 2u);
      swift_slowDealloc();
    }

    uint64_t v16 = Date.init(timeIntervalSinceNow:)();
    __chkstk_darwin(v16);
    *(&v28 - 2) = (void (*)(char *, uint64_t))v7;
    uint64_t v17 = sub_1003B49E4((void (*)(void))sub_10038AC44, (uint64_t)(&v28 - 4), a1);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 134217984;
      uint64_t v31 = v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDTimeAlarmProducer is firing expired alarms, count = %ld", v20, 0xCu);
      swift_slowDealloc();
    }

    uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
    __chkstk_darwin(Strong);
    *(&v28 - 2) = (void (*)(char *, uint64_t))v7;
    id v22 = v2;
    uint64_t v23 = sub_100225504((void (*)(uint64_t *__return_ptr, uint64_t))sub_10038AC60, (uint64_t)(&v28 - 4), (uint64_t)v17);
    swift_bridgeObjectRelease();
    sub_1002280B8(v22, (uint64_t)v23, Strong);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    (*((void (**)(char *, os_log_t))v29 + 1))(v7, v30);

    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    v28(v11, v8);
  }
  else
  {
    if (qword_1009073A8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_100916728);
    os_log_t v30 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v30, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v25, "RDTimeAlarmProducer.start() must be called before fireExpiredAlarms", v26, 2u);
      swift_slowDealloc();
    }
    os_log_t v27 = v30;
  }
}

void sub_1003883E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v142 = a1;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134(&qword_1009167A8);
  __chkstk_darwin(v6 - 8);
  os_log_t v141 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_100094134((uint64_t *)&unk_100913A40);
  uint64_t v140 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v137 = (uint64_t)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v121 - v10;
  __chkstk_darwin(v12);
  os_log_t v134 = (os_log_t)((char *)&v121 - v13);
  __chkstk_darwin(v14);
  uint64_t v138 = (uint64_t *)((char *)&v121 - v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (void **)((char *)&v121 - v17);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v135 = (char *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v121 - v23;
  __chkstk_darwin(v25);
  uint64_t v139 = (char *)&v121 - v26;
  __chkstk_darwin(v27);
  uint64_t v136 = (char *)&v121 - v28;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v121 - v30;
  uint64_t v32 = type metadata accessor for OSSignpostID();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  os_log_t v144 = (os_log_t)((char *)&v121 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_started) == 1)
  {
    id v128 = v24;
    uint64_t v129 = v11;
    uint64_t v133 = v20;
    static os_signpost_type_t.begin.getter();
    if (qword_1009073B0 != -1) {
      swift_once();
    }
    os_log_t v35 = v144;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    char v36 = *(void (**)(os_log_t, uint64_t))(v33 + 8);
    uint64_t v131 = v33 + 8;
    uint64_t v132 = v36;
    v36(v35, v32);
    if (qword_1009073A8 != -1) {
      swift_once();
    }
    uint64_t v127 = v5;
    uint64_t v37 = type metadata accessor for Logger();
    uint64_t v130 = (void *)sub_10008E2DC(v37, (uint64_t)qword_100916728);
    char v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "RDTimeAlarmProducer is setting up the timers", v40, 2u);
      swift_slowDealloc();
    }

    Date.init()();
    sub_1000C0DE0((void *)(v2 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_dataSource), *(void *)(v2 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_dataSource + 24));
    Swift::String v41 = (void **)v141;
    sub_1003C1734((uint64_t)v31, v142, (uint64_t)v141);
    uint64_t v42 = v143;
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v140 + 48))(v41, 1, v143) == 1)
    {
      sub_1000966BC((uint64_t)v41, &qword_1009167A8);
      Swift::String v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "No alarm with future fireDate -- Done", v45, 2u);
        swift_slowDealloc();
      }

      uint64_t v46 = v133;
      if (*(void *)(v2 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_beforeFirstUnlockNotificationEngine))
      {
        uint64_t v47 = (uint64_t)v127;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v133 + 56))(v127, 1, 1, v19);
        sub_1002965AC(v47);
        sub_1000966BC(v47, (uint64_t *)&unk_100909A40);
      }
      (*(void (**)(char *, uint64_t))(v46 + 8))(v31, v19);
      static os_signpost_type_t.end.getter();
      os_log_t v48 = v144;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      os_log_t v49 = v48;
      uint64_t v50 = v32;
    }
    else
    {
      uint64_t v124 = v32;
      uint64_t v55 = *(int *)(v42 + 48);
      unint64_t v56 = (char *)v18 + v55;
      uint64_t v57 = v42;
      uint64_t v59 = *v41;
      id v58 = v41[1];
      NSObject *v18 = *v41;
      v18[1] = v58;
      id v123 = v18;
      uint64_t v60 = v133;
      os_log_t v141 = v31;
      unint64_t v61 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
      v61((char *)v18 + v55, (char *)v41 + v55, v19);
      id v62 = v59;
      uint64_t v122 = v58;
      int v63 = v136;
      Date.init()();
      uint64_t v125 = *(void (**)(char *, uint64_t))(v60 + 8);
      v125(v141, v19);
      v61(v141, v63, v19);
      NSString v64 = (char *)v138 + *(int *)(v57 + 48);
      unsigned int v65 = (char *)(v60 + 16);
      uint64_t v140 = *(void *)(v60 + 16);
      ((void (*)(char *, char *, uint64_t))v140)(v64, v56, v19);
      unint64_t v66 = v139;
      v61(v139, v64, v19);
      uint64_t v67 = (uint64_t)v141;
      char v68 = static Date.> infix(_:_:)();
      uint64_t v126 = v2;
      if (v68)
      {
        uint64_t v69 = v143;
        id v70 = v138;
        unint64_t v71 = (char *)v138 + *(int *)(v143 + 48);
        uint64_t v72 = v122;
        *uint64_t v138 = v62;
        v70[1] = v72;
        id v73 = (void (*)(char *, char *, uint64_t))v140;
        ((void (*)(char *, char *, uint64_t))v140)(v71, v56, v19);
        unint64_t v74 = (objc_class *)v62;
        uint64_t v75 = v71;
        os_log_type_t v76 = v125;
        v125(v75, v19);
        v73(v128, v66, v19);
        uint64_t v77 = *(int *)(v69 + 48);
        os_log_t v78 = v134;
        Swift::String v79 = (char *)v134 + v77;
        v134->Class isa = v74;
        v78[1].Class isa = v72;
        v73(v79, v56, v19);
        sub_10038AB2C((uint64_t)v78, (uint64_t)v129);
        sub_10038AB94((uint64_t)v78, v137);
        Swift::String v80 = v74;
        id v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.default.getter();
        int v83 = v82;
        BOOL v84 = os_log_type_enabled(v81, v82);
        uint64_t v85 = v76;
        uint64_t v136 = v65;
        if (v84)
        {
          uint64_t v86 = swift_slowAlloc();
          uint64_t v130 = (void *)swift_slowAlloc();
          uint64_t v142 = swift_slowAlloc();
          v146[0] = v142;
          *(_DWORD *)uint64_t v86 = 136447234;
          LODWORD(v135) = v83;
          sub_10038ABFC((unint64_t *)&qword_100908230, 255, (void (*)(uint64_t))&type metadata accessor for Date);
          os_log_t v134 = v81;
          uint64_t v87 = v128;
          uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
          v145[0] = sub_1000C51B8(v88, v89, v146);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v85(v87, v19);
          *(_WORD *)(v86 + 12) = 2080;
          uint64_t v90 = *(int *)(v143 + 48);
          Swift::String v91 = v138;
          NSString v92 = (char *)v138 + v90;
          uint64_t v93 = v129;
          uint64_t v94 = (char *)v129 + v90;
          unint64_t v95 = (void *)*v129;
          unint64_t v96 = (void *)v129[1];
          *uint64_t v138 = *v129;
          v91[1] = v96;
          uint64_t v121 = v19;
          ((void (*)(char *, char *, uint64_t))v140)((char *)v91 + v90, v94, v19);
          v145[0] = (uint64_t)v95;
          v145[1] = (uint64_t)v96;
          id v97 = v95;
          id v98 = v96;
          uint64_t v99 = String.init<A>(describing:)();
          unint64_t v101 = v100;
          v125(v92, v19);
          v145[0] = sub_1000C51B8(v99, v101, v146);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000966BC(v137, (uint64_t *)&unk_100913A40);
          sub_1000966BC((uint64_t)v93, (uint64_t *)&unk_100913A40);
          *(_WORD *)(v86 + 22) = 2114;
          id v102 = [(objc_class *)v80 objectID];
          v145[0] = (uint64_t)v102;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v130 = v102;

          *(_WORD *)(v86 + 32) = 2082;
          if ([(objc_class *)v80 isRecurrent]) {
            uint64_t v103 = 89;
          }
          else {
            uint64_t v103 = 78;
          }
          v145[0] = sub_1000C51B8(v103, 0xE100000000000000, v146);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v86 + 42) = 2082;
          if ([(objc_class *)v80 isOverdue]) {
            uint64_t v104 = 89;
          }
          else {
            uint64_t v104 = 78;
          }
          uint64_t v85 = v125;
          uint64_t v105 = (uint64_t)v139;
          v145[0] = sub_1000C51B8(v104, 0xE100000000000000, v146);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          os_log_t v106 = v134;
          _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v135, "Scheduling next alarm {fireDate: %{public}s, nextAlarm: %s, reminderID: %{public}@, recurrent: %{public}s, overdue: %{public}s}", (uint8_t *)v86, 0x34u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v107 = v124;
          uint64_t v19 = v121;
          uint64_t v108 = (uint64_t)v123;
        }
        else
        {
          v76(v128, v19);
          sub_1000966BC(v137, (uint64_t *)&unk_100913A40);
          sub_1000966BC((uint64_t)v129, (uint64_t *)&unk_100913A40);

          uint64_t v107 = v124;
          uint64_t v108 = (uint64_t)v123;
          uint64_t v105 = (uint64_t)v139;
        }
        uint64_t v118 = (uint64_t)v141;
        if (*(void *)(v126 + OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_beforeFirstUnlockNotificationEngine))
        {
          uint64_t v119 = (uint64_t)v127;
          ((void (*)(char *, uint64_t, uint64_t))v140)(v127, v105, v19);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v133 + 56))(v119, 0, 1, v19);
          sub_1002965AC(v119);
          sub_1000966BC(v119, (uint64_t *)&unk_100909A40);
        }
        sub_10035BC98(v105);

        v85((char *)v105, v19);
        sub_1000966BC(v108, (uint64_t *)&unk_100913A40);
        v85((char *)v118, v19);
      }
      else
      {

        uint64_t v109 = v135;
        ((void (*)(char *, char *, uint64_t))v140)(v135, v66, v19);
        os_log_t v110 = Logger.logObject.getter();
        os_log_type_t v111 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v110, v111))
        {
          uint64_t v112 = (uint8_t *)swift_slowAlloc();
          v145[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v112 = 136446210;
          uint64_t v113 = Date.description.getter();
          v146[0] = sub_1000C51B8(v113, v114, v145);
          uint64_t v67 = (uint64_t)v141;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v115 = v125;
          v125(v109, v19);
          os_log_type_t v116 = v111;
          long long v117 = v115;
          _os_log_impl((void *)&_mh_execute_header, v110, v116, "Next alarm is in the past -- Not adding event {fireDate: %{public}s}", v112, 0xCu);
          swift_arrayDestroy();
          unint64_t v66 = v139;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          long long v117 = v125;
          v125(v109, v19);
        }

        uint64_t v107 = v124;
        sub_100387E68(v142);
        v117(v66, v19);
        sub_1000966BC((uint64_t)v123, (uint64_t *)&unk_100913A40);
        v117((char *)v67, v19);
      }
      static os_signpost_type_t.end.getter();
      os_log_t v120 = v144;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      os_log_t v49 = v120;
      uint64_t v50 = v107;
    }
    v132(v49, v50);
  }
  else
  {
    if (qword_1009073A8 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E2DC(v51, (uint64_t)qword_100916728);
    os_log_t v144 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v144, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v144, v52, "RDTimeAlarmProducer.start() must be called before setupTimers", v53, 2u);
      swift_slowDealloc();
    }
    os_log_t v54 = v144;
  }
}

uint64_t sub_10038944C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v63 = a3;
  uint64_t v65 = a2;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void **)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v60 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  NSString v64 = (char *)v56 - v8;
  __chkstk_darwin(v9);
  unint64_t v66 = (char *)v56 - v10;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100913A40);
  uint64_t v12 = v11 - 8;
  __n128 v13 = __chkstk_darwin(v11);
  uint64_t v15 = (void *)((char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(int *)(v12 + 56);
  uint64_t v59 = (void (*)(char *, char *, uint64_t))((char *)v15 + v16);
  unint64_t v61 = (void *)(a1 + v16);
  id v62 = (void (**)(char *, void, uint64_t))v5;
  uint64_t v18 = *(void **)a1;
  uint64_t v17 = *(void **)(a1 + 8);
  *uint64_t v15 = v18;
  v15[1] = v17;
  uint64_t v19 = (void (*)(__n128))v5[2];
  v19(v13);
  uint64_t v20 = (uint64_t (*)(char *, uint64_t))v5[1];
  id v21 = v18;
  id v22 = v17;
  v20((char *)v59, v4);
  uint64_t v23 = (char *)v15 + *(int *)(v12 + 56);
  uint64_t v59 = (void (*)(char *, char *, uint64_t))v19;
  ((void (*)(char *, void *, uint64_t))v19)(v23, v61, v4);
  ((void (**)(char *, char *, uint64_t))v62)[4](v66, v23, v4);
  sub_10038AC80();
  id v24 = v21;
  id v62 = (void (**)(char *, void, uint64_t))v22;
  static NSDateInterval.remNotificationFireDateGracePeriod.getter();
  uint64_t v25 = v64;
  Date.addingTimeInterval(_:)();
  uint64_t v26 = v25;
  int v27 = static Date.> infix(_:_:)();
  uint64_t v65 = v4;
  unint64_t v61 = v5 + 1;
  v20(v26, v4);
  uint64_t v28 = v20;
  if (qword_1009073A8 != -1) {
    swift_once();
  }
  LODWORD(v64) = v27;
  uint64_t v29 = type metadata accessor for Logger();
  sub_10008E2DC(v29, (uint64_t)qword_100916728);
  uint64_t v30 = v60;
  v59(v60, v66, v65);
  id v31 = v24;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  int v34 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    os_log_t v58 = v32;
    uint64_t v37 = (void *)v36;
    v56[1] = v36;
    uint64_t v59 = (void (*)(char *, char *, uint64_t))swift_slowAlloc();
    char v68 = v59;
    *(_DWORD *)uint64_t v35 = 138544130;
    int v57 = v34;
    char v38 = v30;
    id v39 = [v31 objectID];
    uint64_t v67 = (uint64_t)v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v37 = v39;
    *(_WORD *)(v35 + 12) = 2082;
    uint64_t v40 = Date.description.getter();
    uint64_t v67 = sub_1000C51B8(v40, v41, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v20(v38, v65);
    *(_WORD *)(v35 + 22) = 2082;
    if (v64) {
      uint64_t v42 = 0x657669746361;
    }
    else {
      uint64_t v42 = 0x65766973736170;
    }
    if (v64) {
      unint64_t v43 = 0xE600000000000000;
    }
    else {
      unint64_t v43 = 0xE700000000000000;
    }
    uint64_t v67 = sub_1000C51B8(v42, v43, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 32) = 2082;
    if ([v31 isRecurrent]) {
      uint64_t v44 = 89;
    }
    else {
      uint64_t v44 = 78;
    }
    uint64_t v67 = sub_1000C51B8(v44, 0xE100000000000000, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    os_log_t v45 = v58;
    _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v57, "RDTimeAlarmProducer expiredAlarm {reminderID: %{public}@, fireDate: %{public}s alarmType: %{public}s, recurrent: %{public}s}", (uint8_t *)v35, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v20(v30, v65);
  }
  uint64_t v46 = v62;
  uint64_t v47 = sub_100680208(v62);
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  char v53 = v52;

  uint64_t result = v28(v66, v65);
  uint64_t v55 = v63;
  void *v63 = v31;
  v55[1] = v47;
  v55[2] = v49;
  v55[3] = v51;
  *((unsigned char *)v55 + 32) = v53;
  *((unsigned char *)v55 + 33) = (v64 & 1) == 0;
  *((unsigned char *)v55 + 34) = 1;
  return result;
}

void sub_100389AC8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __n128 v3 = __chkstk_darwin(v1);
  uint64_t v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_queue];
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v0[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_started])
  {
    if (qword_1009073A8 == -1)
    {
LABEL_4:
      uint64_t v8 = type metadata accessor for Logger();
      sub_10008E2DC(v8, (uint64_t)qword_100916728);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDTimeAlarmProducer.start() must be called exactly once", v11, 2u);
        swift_slowDealloc();
      }

      return;
    }
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  v0[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_started] = 1;
  if (qword_1009073A8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100916728);
  __n128 v13 = v0;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v26 = 60;
    unint64_t v27 = 0xE100000000000000;
    uint64_t v28 = v17;
    v18._uint64_t countAndFlagsBits = sub_100587438((uint64_t)v13);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 62;
    v19._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    uint64_t v26 = sub_1000C51B8(v26, v27, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting time alarm producer {producer: %s}", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v20 = *(void *)&v13[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_timeEventStream + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v22 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v23 = *(void *)(v20 + 8);
  id v24 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v23 + 16);
  swift_retain();
  v24(sub_10038ACF8, v22, ObjectType, v23);
  swift_release();
  sub_100387A70();
}

void sub_100389EE0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (qword_1009073A8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_100916728);
    __n128 v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received RDTimeEventHandler event on RDTimeAlarmProducer, reloading alarms.", v5, 2u);
      swift_slowDealloc();
    }

    sub_100387A70();
  }
  else
  {
    if (qword_1009073A8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_100916728);
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v1, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v7, "Received RDTimeEventHandler event on deallocated RDTimeAlarmProducer", v8, 2u);
      swift_slowDealloc();
    }
  }
}

unint64_t sub_10038A0A0()
{
  return 0xD000000000000013;
}

void sub_10038A0BC()
{
}

void sub_10038A0E0()
{
  if (qword_1009073A8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_100916728);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    __n128 v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)__n128 v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Alarm trigger did change for time alarm producer", v3, 2u);
    swift_slowDealloc();
  }

  sub_100387A70();
}

uint64_t sub_10038A1C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  os_log_type_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004D83AC(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909A40);
    if (qword_1009073A8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_100916728);
    id v13 = a1;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v26 = a2;
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v28 = v25;
      *(_DWORD *)uint64_t v16 = 136315138;
      v24[1] = v16 + 4;
      id v17 = [v13 description];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      uint64_t v21 = v18;
      a2 = v26;
      uint64_t v27 = sub_1000C51B8(v21, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Tried to fire timeInterval alarm with nil dueDate {reminder: %s}", v16, 0xCu);
      uint64_t v22 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v22 = 1;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    [v2 timeInterval];
    Date.addingTimeInterval(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v22, 1, v8);
}

uint64_t sub_10038A534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v22 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56);
  v17(v8, 1, 1, v12, v14);
  v23(a1, a2, v8);
  sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909A40);
    uint64_t v18 = 1;
    uint64_t v19 = v24;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
    [v22[1] timeInterval];
    uint64_t v20 = v24;
    Date.addingTimeInterval(_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    uint64_t v18 = 0;
    uint64_t v19 = v20;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v17)(v19, v18, 1, v12);
}

uint64_t sub_10038A770@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10038A1C4(a1, a2);
}

uint64_t sub_10038A794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10038A534(a1, a2, (void (*)(uint64_t, uint64_t, char *))sub_1004D80B0, a3);
}

uint64_t sub_10038A7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10038A534(a1, a2, (void (*)(uint64_t, uint64_t, char *))sub_1004D7CE0, a3);
}

uint64_t sub_10038A804@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DateComponents();
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)&double v5 = __chkstk_darwin(v3).n128_u64[0];
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [*v1 dateComponents:v5];
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1004D8614(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_10038A8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10038A92C(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, char *))sub_1004D80B0);
}

uint64_t sub_10038A914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10038A92C(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, char *))sub_1004D7CE0);
}

uint64_t sub_10038A92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, char *))
{
  uint64_t v9 = type metadata accessor for DateComponents();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v14 = __chkstk_darwin(v13 - 8).n128_u64[0];
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [*v5 dateComponents:v14];
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1004D8614((uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  a5(a1, a2, v16);
  return sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909A40);
}

uint64_t type metadata accessor for RDTimeAlarmProducer()
{
  return self;
}

uint64_t sub_10038AAD4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10038ABFC(&qword_1009167A0, a2, (void (*)(uint64_t))type metadata accessor for RDTimeAlarmProducer);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10038AB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100913A40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10038AB94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100913A40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10038ABFC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10038AC44@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1003C29F4(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10038AC60@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10038944C(a1, *(void *)(v2 + 16), a2);
}

unint64_t sub_10038AC80()
{
  unint64_t result = qword_100920F00;
  if (!qword_100920F00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100920F00);
  }
  return result;
}

uint64_t sub_10038ACC0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10038ACF8()
{
}

NSString sub_10038AD00(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    double v5 = (objc_class *)type metadata accessor for RDDaemonController();
    uint64_t v6 = (char *)objc_allocWithZone(v5);
    uint64_t v7 = &v6[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
    *(void *)uint64_t v7 = v4;
    *((void *)v7 + 1) = &off_1008C3598;
    sub_10010B4E8(a2, (uint64_t)&v6[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity]);
    *(void *)&v6[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
    id v8 = v4;
    sub_10010B544(a2);
    v13.receiver = v6;
    v13.super_class = v5;
    id v9 = [super init];
    NSString v10 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:v9];
  }
  else
  {
    uint64_t v11 = self;
    NSString v10 = String._bridgeToObjectiveC()();
    [v11 internalErrorWithDebugDescription:v10];

    swift_willThrow();
  }
  return v10;
}

id sub_10038AE74(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    double v5 = *(NSObject **)(v2 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer);
    id v6 = a2;
    id v7 = (id)sub_10038B4F4(v6, v3, v5);
  }
  else
  {
    id v7 = *(id *)(v2 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_storeController);
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong
    && (id v9 = (void *)Strong,
        uint64_t v10 = *(void *)(Strong + OBJC_IVAR____TtC7remindd8RDDaemon_templateOperationQueue),
        swift_retain(),
        v9,
        v10))
  {
    sub_100096838(v10 + 16, (uint64_t)v37);
    swift_release();
  }
  else
  {
    uint64_t v38 = 0;
    memset(v37, 0, sizeof(v37));
  }
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  sub_10010B4E8(a1, v12 + 24);
  uint64_t v13 = *(void *)(v3 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_dataAccessRequestsWriter);
  uint64_t v14 = *(void *)(v3 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_contactInteractionWriter);
  sub_100096838(v3 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_coreSuggestionsHandler, (uint64_t)v35);
  sub_10038C874((uint64_t)v37, (uint64_t)v34);
  uint64_t v15 = sub_100096204((uint64_t)v35, v36);
  __n128 v16 = __chkstk_darwin(v15);
  uint64_t v18 = (void *)((char *)&v31[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v19 + 16))(v18, v16);
  uint64_t v20 = *v18;
  uint64_t v32 = type metadata accessor for RDCoreSuggestionsController();
  os_log_type_t v33 = &off_1008C3738;
  v31[0] = v20;
  uint64_t v21 = (char *)objc_allocWithZone((Class)type metadata accessor for RDXPCStorePerformer());
  uint64_t v22 = sub_100096204((uint64_t)v31, v32);
  __n128 v23 = __chkstk_darwin(v22);
  uint64_t v25 = (void *)((char *)&v31[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v26 + 16))(v25, v23);
  uint64_t v27 = *v25;
  sub_10010B544(a1);
  sub_10010B544(a1);
  swift_retain();
  swift_retain();
  id v28 = sub_10038C8DC(v7, a1, (uint64_t)sub_10038CC10, v12, v13, v14, v27, (uint64_t)v34, v21);

  swift_release();
  swift_release();
  swift_release();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v31);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v35);
  sub_10038CB68((uint64_t)v37);
  return v28;
}

id sub_10038B21C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDXPCDaemon();
  return [super dealloc];
}

uint64_t type metadata accessor for RDXPCDaemon()
{
  return self;
}

id sub_10038B320(uint64_t a1, void *a2)
{
  return sub_10038C288(a2);
}

char *sub_10038B328(uint64_t a1, void *a2)
{
  return sub_10038C408(a2);
}

id sub_10038B334(uint64_t a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  sub_10010B4E8(a1, v5 + 24);
  sub_10010B544(a1);
  id v6 = sub_10013E49C((uint64_t)sub_10038B4D4, v5, a1, a2);
  swift_release();
  return v6;
}

void *sub_10038B400()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_indexingPerformer);
  id v2 = v1;
  return v1;
}

unint64_t sub_10038B430()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    id v2 = sub_1005C6B10();

    return (unint64_t)v2;
  }
  else
  {
    return sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10038B498()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

NSString sub_10038B4D4()
{
  return sub_10038AD00(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10038B4F4(void *a1, uint64_t a2, NSObject *a3)
{
  dispatch_queue_t v72 = a3;
  uint64_t v67 = a2;
  uint64_t v4 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v70 = (uint64_t)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v6 - 8);
  int v63 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)type metadata accessor for URL();
  uint64_t v13 = *(v12 - 1);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v61 - v17;
  id v75 = self;
  char v68 = a1;
  id v19 = [a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v75 urlForIsolatedContainerWithIdentifier:v20];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  id v81 = 0;
  dispatch_queue_t v22 = v72;
  __n128 v23 = *(NSObject **)((char *)&v72->isa + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_accessQueue);
  uint64_t v24 = *(void (**)(char *, char *, id))(v13 + 16);
  unint64_t v74 = v18;
  unint64_t v71 = v24;
  v24(v15, v18, v12);
  uint64_t v25 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v69 = v14;
  uint64_t v66 = v25 | 7;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = &v81;
  *(void *)(v26 + 24) = v22;
  unint64_t v27 = (unint64_t)v22;
  uint64_t v73 = v13;
  id v28 = *(void (**)(uint64_t, char *, id))(v13 + 32);
  id v62 = v15;
  id v75 = v12;
  uint64_t v29 = v12;
  uint64_t v30 = v26;
  uint64_t v65 = v28;
  v28(v26 + ((v25 + 32) & ~v25), v15, v29);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_10038C5F4;
  *(void *)(v31 + 24) = v30;
  *(void *)&long long v80 = sub_10008F6F4;
  *((void *)&v80 + 1) = v31;
  aBlock = _NSConcreteStackBlock;
  unint64_t v77 = 1107296256;
  os_log_t v78 = sub_1003B3260;
  Swift::String v79 = &unk_1008C3670;
  uint64_t v32 = _Block_copy(&aBlock);
  NSString v64 = (id)v27;
  swift_retain();
  swift_release();
  dispatch_queue_t v72 = v23;
  dispatch_sync(v23, v32);
  _Block_release(v32);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_8;
  }
  if (v81)
  {
    int v34 = *(void (**)(char *, id))(v73 + 8);
    id v35 = v81;
    v34(v74, v75);
    uint64_t v36 = 0;
LABEL_10:
    id v60 = v81;
    swift_release();

    sub_100096314((uint64_t)v36);
    return (uint64_t)v35;
  }
  v61[1] = v30;
  uint64_t v37 = v63;
  id v38 = v75;
  v71(v63, v74, v75);
  uint64_t v39 = v73;
  (*(void (**)(char *, void, uint64_t, id))(v73 + 56))(v37, 0, 1, v38);
  if ((*(unsigned int (**)(char *, uint64_t, id))(v39 + 48))(v37, 1, v38) == 1)
  {
    unint64_t v41 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v40);
    unint64_t v41 = v42;
    (*(void (**)(char *, id))(v39 + 8))(v37, v38);
  }
  unint64_t v27 = ~v25;
  id v43 = [objc_allocWithZone((Class)RDStoreController) initWithIsolatedReminderDataContainerURL:v41];

  type metadata accessor for RDAccountUtils();
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)(v44 + 24) = &off_1008C3598;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  os_log_t v45 = v68;
  *(void *)(v44 + 40) = v68;
  id v46 = v45;
  [v43 setAccountUtils:v44];
  swift_release();
  v82[0] = 0x4014000000000000;
  type metadata accessor for RDStoreControllerNotificationCenter();
  memset(&v82[1], 0, 24);
  __int16 v83 = 0;
  swift_allocObject();
  uint64_t isEscapingClosureAtFileLocation = (uint64_t)v43;
  __n128 v23 = sub_100400110(0, 0, (void *)isEscapingClosureAtFileLocation, (uint64_t)v82);
  if (qword_1009070C8 != -1) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v47 = v70;
  sub_100401C48(0, (void *)qword_100942068, (uint64_t)sub_1000FFAE0, 0, v70);
  sub_100094178(v47);
  uint64_t v48 = v62;
  id v49 = v75;
  v71(v62, v74, v75);
  uint64_t v50 = (v25 + 16) & v27;
  unint64_t v51 = (v69 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v53 = swift_allocObject();
  v65(v53 + v50, v48, v49);
  os_log_t v54 = v64;
  *(void *)(v53 + v51) = v64;
  *(void *)(v53 + v52) = isEscapingClosureAtFileLocation;
  *(void *)(v53 + ((v52 + 15) & 0xFFFFFFFFFFFFFFF8)) = v23;
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = sub_10038C74C;
  *(void *)(v55 + 24) = v53;
  *(void *)&long long v80 = sub_100097240;
  *((void *)&v80 + 1) = v55;
  aBlock = _NSConcreteStackBlock;
  unint64_t v77 = 1107296256;
  os_log_t v78 = sub_1003B3260;
  Swift::String v79 = &unk_1008C36E8;
  unint64_t v56 = _Block_copy(&aBlock);
  int v57 = v54;
  id v35 = (id)isEscapingClosureAtFileLocation;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v72, v56);
  _Block_release(v56);
  char v58 = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v58 & 1) == 0)
  {
    aBlock = (void **)0xD000000000000025;
    unint64_t v77 = 0x80000001007D38F0;
    Swift::String v79 = 0;
    *(void *)&long long v80 = 0;
    os_log_t v78 = 0;
    *(void *)((char *)&v80 + 6) = 0;
    __chkstk_darwin(result);
    v61[-2] = v35;
    sub_1003B5ADC((uint64_t)&aBlock, (uint64_t)sub_10038C800, (uint64_t)&v61[-4]);
    (*(void (**)(char *, id))(v73 + 8))(v74, v75);
    swift_release();
    uint64_t v36 = sub_10038C74C;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

id sub_10038BE44(void *a1, void *a2, void *a3, void *a4, char *a5)
{
  id v38 = a3;
  uint64_t v39 = a4;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v35 = v6;
  __chkstk_darwin(v6);
  os_log_type_t v33 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  v32[1] = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&a5[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerByContainerURL;
  uint64_t v16 = self;
  uint64_t v17 = a5;
  *(void *)&a5[v15] = [v16 strongToWeakObjectsMapTable];
  uint64_t v18 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerNotificationCenterByContainerURL;
  *(void *)&v17[v18] = [self strongToStrongObjectsMapTable];
  uint64_t v19 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_accessQueue;
  sub_1000D0FD4();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.utility(_:), v11);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  static DispatchQoS.unspecified.getter();
  unint64_t v41 = _swiftEmptyArrayStorage;
  sub_10038CBC8((unint64_t *)&qword_10090AAC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1000BFEAC((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v34 + 104))(v33, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v35);
  *(void *)&v17[v19] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v17[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_manualHashtagLabelUpdater] = 0;
  id v21 = v36;
  NSString v20 = v37;
  *(void *)&v17[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController] = v36;
  *(void *)&v17[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeContainerToken] = v20;
  dispatch_queue_t v22 = &v17[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_notificationCenter];
  uint64_t v24 = v38;
  __n128 v23 = v39;
  *(void *)dispatch_queue_t v22 = v38;
  *((void *)v22 + 1) = &off_1008C8BA8;
  uint64_t v25 = &v17[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager];
  *(void *)uint64_t v25 = v23;
  *((void *)v25 + 1) = &off_1008C83D8;
  id v26 = v20;
  id v27 = v24;
  id v28 = v23;
  id v29 = v21;

  uint64_t v30 = (objc_class *)type metadata accessor for RDXPCDebugPerformer();
  v40.receiver = v17;
  v40.super_class = v30;
  return [super init];
}

id sub_10038C288(void *a1)
{
  if (a1)
  {
    id v2 = *(NSObject **)(v1 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer);
    id v3 = a1;
    uint64_t v4 = (void *)sub_10038B4F4(v3, v1, v2);
    uint64_t v5 = (objc_class *)type metadata accessor for RDXPCChangeTrackingPerformer();
    id v6 = objc_allocWithZone(v5);
    uint64_t v7 = (objc_class *)type metadata accessor for REMNSPersistentHistoryTracking();
    uint64_t v8 = (char *)objc_allocWithZone(v7);
    *(void *)&v8[OBJC_IVAR____TtC7remindd30REMNSPersistentHistoryTracking_storeController] = v4;
    v20.receiver = v8;
    v20.super_class = v7;
    uint64_t v9 = (char *)v6;
    id v10 = v4;
    *(void *)&v9[OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation] = [v20 init];

    v19.receiver = v9;
    v19.super_class = v5;
    id v11 = [super init];
  }
  else
  {
    uint64_t v12 = *(void **)(v1 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_storeController);
    uint64_t v13 = (objc_class *)type metadata accessor for RDXPCChangeTrackingPerformer();
    id v14 = objc_allocWithZone(v13);
    uint64_t v15 = (objc_class *)type metadata accessor for REMNSPersistentHistoryTracking();
    uint64_t v16 = (char *)objc_allocWithZone(v15);
    *(void *)&v16[OBJC_IVAR____TtC7remindd30REMNSPersistentHistoryTracking_storeController] = v12;
    v22.receiver = v16;
    v22.super_class = v15;
    id v10 = v12;
    uint64_t v17 = (char *)v14;
    *(void *)&v17[OBJC_IVAR____TtC7remindd28RDXPCChangeTrackingPerformer_implementation] = [v22 init];

    v21.receiver = v17;
    v21.super_class = v13;
    id v11 = [super init];
  }

  return v11;
}

char *sub_10038C408(void *a1)
{
  if (!a1) {
    return (char *)*(id *)(v1 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer);
  }
  id v3 = *(NSObject **)(v1 + OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer);
  id v4 = a1;
  uint64_t v5 = (void *)sub_10038B4F4(v4, v1, v3);
  id v6 = *(Class *)((char *)&v3->isa + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_notificationCenter);
  uint64_t v7 = *(Class *)((char *)&v3->isa + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager);
  uint64_t v8 = (char *)objc_allocWithZone((Class)type metadata accessor for RDXPCDebugPerformer());
  id v9 = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v10 = (char *)sub_10038BE44(v5, a1, v6, v7, v8);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(void *)&v10[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon + 8] = &off_1008C3598;
  swift_unknownObjectWeakAssign();

  return v10;
}

uint64_t sub_10038C528()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10038C5F4()
{
  type metadata accessor for URL();
  uint64_t v1 = *(void ***)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);

  sub_1000FFA58(v1, v2);
}

uint64_t sub_10038C658()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10038C668(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10038C678()
{
  return swift_release();
}

uint64_t sub_10038C680()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();

  return _swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_10038C74C()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v2 = (NSURL *)((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  unint64_t v3 = ((unint64_t)&v2->super.isa + *(void *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + v4);
  uint64_t v7 = *(void *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1000FFBD4(v5, v6, v7, v2);
}

uint64_t sub_10038C7F0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10038C800(uint64_t a1)
{
  return sub_1000FFC68(a1);
}

uint64_t sub_10038C820()
{
  swift_release();
  sub_10012227C(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int16 *)(v0 + 68) << 32));

  return _swift_deallocObject(v0, 70, 7);
}

uint64_t sub_10038C874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100916818);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_10038C8DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  uint64_t v13 = type metadata accessor for UnfairLock.Options();
  __chkstk_darwin(v13);
  v27[3] = type metadata accessor for RDCoreSuggestionsController();
  v27[4] = &off_1008C3738;
  v27[0] = a7;
  *(void *)&a9[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_sharingObserverForAccountID] = _swiftEmptyDictionarySingleton;
  uint64_t v14 = OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordID;
  uint64_t v15 = a9;
  *(void *)&a9[v14] = sub_1002EF700((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v16 = OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordIDLock;
  id v26 = _swiftEmptyArrayStorage;
  sub_10038CBC8((unint64_t *)&qword_100908278, (void (*)(uint64_t))&type metadata accessor for UnfairLock.Options);
  sub_100094134(&qword_100908280);
  sub_1000BFEAC((unint64_t *)&qword_100908288, &qword_100908280);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for UnfairLock();
  swift_allocObject();
  *(void *)&v15[v16] = UnfairLock.init(options:)();
  *(void *)&v15[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController] = a1;
  sub_10010B4E8(a2, (uint64_t)&v15[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity]);
  uint64_t v17 = &v15[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeProvider];
  *(void *)uint64_t v17 = a3;
  *((void *)v17 + 1) = a4;
  *(void *)&v15[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_dataAccessRequestsWriter] = a5;
  *(void *)&v15[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_contactInteractionWriter] = a6;
  sub_100096838((uint64_t)v27, (uint64_t)&v15[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_coreSuggestionsHandler]);
  sub_10038C874(a8, (uint64_t)&v15[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_publicCloudDatabaseController]);
  id v18 = a1;
  swift_retain();
  swift_retain();
  swift_retain();

  v25.receiver = v15;
  v25.super_class = (Class)type metadata accessor for RDXPCStorePerformer();
  id v19 = [super init];
  sub_10038CB68(a8);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v27);
  return v19;
}

uint64_t sub_10038CB68(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100916818);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10038CBC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

NSString sub_10038CC10()
{
  return sub_10038B4D4();
}

uint64_t sub_10038CC30()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100916820);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100916820);
  if (qword_100907808 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942460);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10038CCF8()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDCoreSuggestionsController()
{
  return self;
}

void sub_10038CD54(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v55 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v57 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1009073B8 != -1) {
    goto LABEL_51;
  }
  while (1)
  {
    uint64_t v56 = v2;
    uint64_t v4 = sub_10008E2DC(v2, (uint64_t)qword_100916820);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    LOBYTE(v6) = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, (os_log_type_t)v6);
    uint64_t v2 = a1 >> 62;
    unint64_t v67 = a1;
    uint64_t v63 = v4;
    if (v7)
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 134218242;
      if (v2)
      {
LABEL_59:
        swift_bridgeObjectRetain();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v72 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *((_WORD *)v8 + 6) = 2080;
      sub_1000963CC(0, &qword_1009100F8);
      swift_bridgeObjectRetain();
      uint64_t v10 = Array.description.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      uint64_t v72 = sub_1000C51B8(v10, v12, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      a1 = v67;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, (os_log_type_t)v6, "Processing %ld reminderStorages {reminderStorages: %s}", v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v4 = v63;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (v2) {
      break;
    }
    uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v13) {
      goto LABEL_53;
    }
LABEL_9:
    uint64_t v68 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v64 = 0;
    uint64_t v15 = 0;
    unint64_t v71 = a1 & 0xC000000000000001;
    unint64_t v61 = &v75;
    uint64_t v2 = 4;
    *(void *)&long long v14 = 138412546;
    long long v58 = v14;
    *(void *)&long long v14 = 138412290;
    long long v59 = v14;
    uint64_t v69 = v13;
    while (1)
    {
      id v18 = v71 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v2);
      id v19 = v18;
      uint64_t v20 = v2 - 3;
      if (__OFADD__(v2 - 4, 1)) {
        break;
      }
      id v21 = [v18 siriFoundInAppsData];
      if (v21)
      {
        objc_super v22 = v21;
        uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v6 = v24;

        sub_1000963CC(0, &qword_1009168D8);
        uint64_t v25 = static SGRecordId.createFrom(data:)();
        if (v25)
        {
          id v26 = (void *)v25;
          id v27 = [v19 siriFoundInAppsUserConfirmation];
          if (v27)
          {
            uint64_t v70 = v15;
            if (v27 == (id)2)
            {
              id v60 = v26;
              id v28 = Logger.logObject.getter();
              os_log_type_t v29 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v28, v29))
              {
                uint64_t v30 = swift_slowAlloc();
                uint64_t v31 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v30 = v59;
                uint64_t v32 = v60;
                *(void *)(v30 + 4) = v60;
                *uint64_t v31 = v26;
                os_log_type_t v33 = v32;
                _os_log_impl((void *)&_mh_execute_header, v28, v29, "CoreSuggestions rejectReminder sent {sgRecordID: %@}", (uint8_t *)v30, 0xCu);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                a1 = v67;
                swift_slowDealloc();
                uint64_t v4 = v63;
                swift_slowDealloc();
              }
              else
              {

                os_log_type_t v33 = v60;
                id v28 = v60;
              }

              os_log_t v45 = *(void **)(v62 + 16);
              unint64_t v77 = sub_10038D890;
              uint64_t v78 = 0;
              uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
              uint64_t v74 = 1107296256;
              id v75 = sub_1000E13D0;
              os_log_type_t v76 = &unk_1008C3778;
              id v46 = _Block_copy(&aBlock);
              [v45 rejectReminderByRecordId:v33 withCompletion:v46];

              sub_100097F34(v23, v6);
              _Block_release(v46);
              if (__OFADD__(v65, 1)) {
                goto LABEL_49;
              }
              ++v65;
              uint64_t v15 = v70;
            }
            else
            {
              if (v27 != (id)1)
              {
                (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v57, v4, v56);
                sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
                sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
                sub_10052ECB8((uint64_t)"unknown siriFoundInAppsUserConfirmation", 39, 2);
                __break(1u);
                JUMPOUT(0x10038D86CLL);
              }
              id v60 = v26;
              uint64_t v39 = Logger.logObject.getter();
              os_log_type_t v40 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v39, v40))
              {
                uint64_t v41 = swift_slowAlloc();
                uint64_t v42 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v41 = v59;
                id v43 = v60;
                *(void *)(v41 + 4) = v60;
                void *v42 = v26;
                uint64_t v44 = v43;
                _os_log_impl((void *)&_mh_execute_header, v39, v40, "CoreSuggestions confirmReminder sent {sgRecordID: %@}", (uint8_t *)v41, 0xCu);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                uint64_t v4 = v63;
                swift_slowDealloc();
                a1 = v67;
                swift_slowDealloc();
              }
              else
              {

                uint64_t v44 = v60;
                uint64_t v39 = v60;
              }

              uint64_t v47 = *(void **)(v62 + 16);
              unint64_t v77 = sub_10038D87C;
              uint64_t v78 = 0;
              uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
              uint64_t v74 = 1107296256;
              id v75 = sub_1000E13D0;
              os_log_type_t v76 = &unk_1008C37A0;
              uint64_t v48 = _Block_copy(&aBlock);
              [v47 confirmReminderByRecordId:v44 withCompletion:v48];

              sub_100097F34(v23, v6);
              _Block_release(v48);
              if (__OFADD__(v64, 1)) {
                goto LABEL_50;
              }
              ++v64;
              uint64_t v15 = v70;
            }
          }
          else
          {

            sub_100097F34(v23, v6);
            if (__OFADD__(v66, 1)) {
              goto LABEL_48;
            }
            ++v66;
          }
        }
        else
        {
          uint64_t v8 = v19;
          sub_100097E38(v23, v6);
          uint64_t v5 = Logger.logObject.getter();
          os_log_type_t v34 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v5, v34))
          {
            uint64_t v70 = v15;
            uint64_t v35 = swift_slowAlloc();
            uint64_t v36 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v35 = v58;
            id v37 = [(uint8_t *)v8 objectID];
            *(void *)(v35 + 4) = v37;
            *uint64_t v36 = v37;

            *(_WORD *)(v35 + 12) = 2048;
            uint64_t v38 = 0;
            uint64_t v15 = v70;
            switch(v6 >> 62)
            {
              case 1uLL:
                LODWORD(v38) = HIDWORD(v23) - v23;
                if (!__OFSUB__(HIDWORD(v23), v23))
                {
                  uint64_t v38 = (int)v38;
                  goto LABEL_44;
                }
                __break(1u);
                goto LABEL_58;
              case 2uLL:
                uint64_t v50 = *(void *)(v23 + 16);
                uint64_t v49 = *(void *)(v23 + 24);
                BOOL v17 = __OFSUB__(v49, v50);
                uint64_t v38 = v49 - v50;
                if (!v17) {
                  goto LABEL_44;
                }
LABEL_58:
                __break(1u);
                goto LABEL_59;
              case 3uLL:
                goto LABEL_44;
              default:
                uint64_t v38 = BYTE6(v6);
LABEL_44:
                *(void *)(v35 + 14) = v38;
                sub_100097F34(v23, v6);
                _os_log_impl((void *)&_mh_execute_header, v5, v34, "Unable to get SGRecordId from siriFoundInAppsData. {reminderID: %@, siriFoundInAppsData.count: %ld}", (uint8_t *)v35, 0x16u);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
                uint64_t v16 = v5;
                a1 = v67;
                uint64_t v4 = v63;
                goto LABEL_11;
            }
          }
          sub_100097F34(v23, v6);

          uint64_t v16 = v8;
          uint64_t v8 = (uint8_t *)v5;
LABEL_11:

          sub_100097F34(v23, v6);
          BOOL v17 = __OFADD__(v68++, 1);
          if (v17) {
            goto LABEL_47;
          }
        }
        uint64_t v13 = v69;
      }
      else
      {

        BOOL v17 = __OFADD__(v15++, 1);
        if (v17) {
          goto LABEL_46;
        }
      }
      ++v2;
      if (v20 == v13) {
        goto LABEL_54;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  if (v13) {
    goto LABEL_9;
  }
LABEL_53:
  uint64_t v68 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v64 = 0;
  uint64_t v15 = 0;
LABEL_54:
  swift_bridgeObjectRelease();
  unint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 134219008;
    uint64_t aBlock = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v53 + 12) = 2048;
    uint64_t aBlock = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v53 + 22) = 2048;
    uint64_t aBlock = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v53 + 32) = 2048;
    uint64_t aBlock = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v53 + 42) = 2048;
    uint64_t aBlock = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Done processing reminderStorages, counts {confirm: %ld, reject: %ld, none: %ld, error: %ld, irrelevant: %ld}", (uint8_t *)v53, 0x34u);
    swift_slowDealloc();
  }
}

void sub_10038D87C(uint64_t a1)
{
}

void sub_10038D890(uint64_t a1)
{
}

void sub_10038D8A4(unint64_t a1)
{
  if (qword_1009073B8 != -1) {
    goto LABEL_45;
  }
  while (1)
  {
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_100916820);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    unint64_t v5 = a1 >> 62;
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v6 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 134218242;
      if (v5)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      sub_1000963CC(0, &qword_1009168E0);
      swift_bridgeObjectRetain();
      uint64_t v7 = Array.description.getter();
      unint64_t v9 = v8;
      swift_bridgeObjectRelease();
      sub_1000C51B8(v7, v9, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Processing %ld expiredReminders {reminders: %s}", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (v5) {
      break;
    }
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    if (!v10) {
      goto LABEL_47;
    }
LABEL_9:
    uint64_t v59 = 0;
    unint64_t v61 = a1 & 0xC000000000000001;
    uint64_t v12 = 4;
    unint64_t v57 = a1;
    uint64_t v58 = v10;
    while (1)
    {
      id v15 = v61 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v12);
      uint64_t v16 = v15;
      uint64_t v17 = v12 - 3;
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      id v18 = [v15 siriFoundInAppsData];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v22 = v21;

        sub_1000963CC(0, (unint64_t *)&qword_10090C120);
        id v23 = [v16 list];
        id v24 = [v23 objectID];

        id v25 = [self siriFoundInAppsListID];
        LOBYTE(v19) = static NSObject.== infix(_:_:)();

        if (v19)
        {
          sub_1000963CC(0, &qword_1009168D8);
          uint64_t v26 = static SGRecordId.createFrom(data:)();
          if (v26)
          {
            id v27 = (void *)v26;
            id v28 = *(void **)(v56 + 16);
            aBlock[4] = (uint64_t)sub_10038E274;
            aBlock[5] = 0;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = (uint64_t)sub_1000E13D0;
            aBlock[3] = (uint64_t)&unk_1008C3750;
            os_log_type_t v29 = _Block_copy(aBlock);
            [v28 reminderAlarmTriggeredForRecordId:v27 withCompletion:v29];

            sub_100097F34(v20, v22);
            _Block_release(v29);
            BOOL v14 = __OFADD__(v59++, 1);
            if (v14) {
              goto LABEL_44;
            }
            uint64_t v17 = v12 - 3;
          }
          else
          {
            id v43 = v16;
            sub_100097E38(v20, v22);
            uint64_t v44 = Logger.logObject.getter();
            os_log_type_t v45 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v44, v45))
            {
              uint64_t v46 = swift_slowAlloc();
              uint64_t v47 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v46 = 138412546;
              id v48 = [v43 objectID];
              *(void *)(v46 + 4) = v48;
              *uint64_t v47 = v48;

              *(_WORD *)(v46 + 12) = 2048;
              uint64_t v49 = 0;
              switch(v22 >> 62)
              {
                case 1uLL:
                  LODWORD(v49) = HIDWORD(v20) - v20;
                  if (__OFSUB__(HIDWORD(v20), v20))
                  {
                    __break(1u);
LABEL_52:
                    __break(1u);
                    JUMPOUT(0x10038E264);
                  }
                  uint64_t v49 = (int)v49;
LABEL_37:
                  *(void *)(v46 + 14) = v49;
                  sub_100097F34(v20, v22);
                  _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unable to get SGRecordId from siriFoundInAppsData. {reminderID: %@, siriFoundInAppsData.count: %ld}", (uint8_t *)v46, 0x16u);
                  sub_100094134((uint64_t *)&unk_10090A040);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                  uint64_t v50 = v44;
                  a1 = v57;
                  break;
                case 2uLL:
                  uint64_t v52 = *(void *)(v20 + 16);
                  uint64_t v51 = *(void *)(v20 + 24);
                  BOOL v14 = __OFSUB__(v51, v52);
                  uint64_t v49 = v51 - v52;
                  if (!v14) {
                    goto LABEL_37;
                  }
                  goto LABEL_52;
                case 3uLL:
                  goto LABEL_37;
                default:
                  uint64_t v49 = BYTE6(v22);
                  goto LABEL_37;
              }
            }
            else
            {
              sub_100097F34(v20, v22);

              uint64_t v50 = v43;
              id v43 = v44;
            }
            uint64_t v10 = v58;

            sub_100097F34(v20, v22);
            BOOL v14 = __OFADD__(v11++, 1);
            uint64_t v17 = v12 - 3;
            if (v14)
            {
              __break(1u);
              break;
            }
          }
        }
        else
        {
          uint64_t v60 = v20;
          id v35 = v16;
          uint64_t v36 = Logger.logObject.getter();
          os_log_type_t v37 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v36, v37))
          {
            uint64_t v38 = swift_slowAlloc();
            uint64_t v39 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v38 = 138412546;
            id v40 = [v35 objectID];
            *(void *)(v38 + 4) = v40;
            *uint64_t v39 = v40;

            *(_WORD *)(v38 + 12) = 2112;
            id v41 = [v35 list];
            id v42 = [v41 objectID];

            *(void *)(v38 + 14) = v42;
            v39[1] = v42;

            _os_log_impl((void *)&_mh_execute_header, v36, v37, "Reminder is not in SiriFoundInApps list {reminderID: %@, listID: %@}", (uint8_t *)v38, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            a1 = v57;
            swift_slowDealloc();
            swift_slowDealloc();

            sub_100097F34(v60, v22);
          }
          else
          {
            sub_100097F34(v20, v22);
          }
          uint64_t v10 = v58;
          uint64_t v17 = v12 - 3;

          BOOL v14 = __OFADD__(v11++, 1);
          if (v14) {
            goto LABEL_43;
          }
        }
      }
      else
      {
        uint64_t v30 = v16;
        uint64_t v13 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, v31))
        {
          uint64_t v32 = swift_slowAlloc();
          os_log_type_t v33 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v32 = 138412290;
          id v34 = [v30 objectID];
          *(void *)(v32 + 4) = v34;
          void *v33 = v34;

          _os_log_impl((void *)&_mh_execute_header, v13, v31, "Unable to find siriFoundInAppsData. {reminderID: %@}", (uint8_t *)v32, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v13 = v30;
        }

        BOOL v14 = __OFADD__(v11++, 1);
        if (v14) {
          goto LABEL_42;
        }
      }
      ++v12;
      if (v17 == v10) {
        goto LABEL_48;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v11 = 0;
  if (v10) {
    goto LABEL_9;
  }
LABEL_47:
  uint64_t v59 = 0;
LABEL_48:
  swift_bridgeObjectRelease();
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)uint64_t v55 = 134218240;
    aBlock[0] = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v55 + 12) = 2048;
    aBlock[0] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Done processing expiredReminders, counts {expire: %ld, error: %ld}", (uint8_t *)v55, 0x16u);
    swift_slowDealloc();
  }
}

void sub_10038E274(uint64_t a1)
{
}

void sub_10038E288(uint64_t a1, const char *a2, const char *a3)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_1009073B8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_100916820);
    swift_errorRetain();
    swift_errorRetain();
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_getErrorValue();
      uint64_t v7 = Error.localizedDescription.getter();
      sub_1000C51B8(v7, v8, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, a2, v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_1009073B8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_100916820);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, a3, v12, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10038E548(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10038E558()
{
  return swift_release();
}

uint64_t sub_10038E560(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t sub_10038E5A4(unint64_t a1)
{
  if (!(a1 >> 62)) {
    return *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_10038E604(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v8 = swift_bridgeObjectRetain() + 40;
    do
    {
      unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 8);
      swift_retain();
      v9(a2, a3, a4);
      swift_release();
      v8 += 16;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10038E69C(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t v9 = _swiftEmptyArrayStorage;
    if (!v8) {
      return (uint64_t)v9;
    }
    id v18 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1001DE118(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0) {
      break;
    }
    v17[1] = v2;
    uint64_t v11 = 0;
    unint64_t v9 = v18;
    while (v8 != v11)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(a1 + 8 * v11 + 32);
      }
      uint64_t v13 = v12;
      id v14 = [v12 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 0, 1, v15);

      id v18 = v9;
      unint64_t v2 = v9[2];
      unint64_t v16 = v9[3];
      if (v2 >= v16 >> 1)
      {
        sub_1001DE118(v16 > 1, v2 + 1, 1);
        unint64_t v9 = v18;
      }
      ++v11;
      long long v9[2] = v2 + 1;
      sub_100096408((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v2, (uint64_t *)&unk_100909E50);
      if (v8 == v11) {
        return (uint64_t)v9;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void *sub_10038E8E8(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1;
  unint64_t v7 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v8 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  uint64_t result = _swiftEmptyArrayStorage;
  if (v8)
  {
    id v40 = _swiftEmptyArrayStorage;
    sub_1001DE118(0, v8 & ~(v8 >> 63), 0);
    if (v7)
    {
      uint64_t result = (void *)__CocoaSet.startIndex.getter();
      unsigned __int8 v11 = 1;
    }
    else
    {
      uint64_t result = (void *)sub_1003CA790(a1);
      unsigned __int8 v11 = v12 & 1;
    }
    os_log_type_t v37 = result;
    uint64_t v38 = v10;
    unsigned __int8 v39 = v11;
    if (v8 < 0)
    {
      __break(1u);
LABEL_25:
      __break(1u);
    }
    else
    {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0) {
        uint64_t v13 = a1;
      }
      id v34 = v5;
      uint64_t v35 = v13;
      id v14 = &selRef_stringFromDate_;
      uint64_t v33 = v3;
      do
      {
        while (1)
        {
          sub_1003C9F34((uint64_t)v37, v38, v39, v6);
          id v25 = v24;
          id v26 = [v24 v14[136]];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v27 = type metadata accessor for UUID();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v5, 0, 1, v27);

          id v28 = v40;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1001DE118(0, v28[2] + 1, 1);
            id v28 = v40;
          }
          unint64_t v30 = v28[2];
          unint64_t v29 = v28[3];
          if (v30 >= v29 >> 1)
          {
            sub_1001DE118(v29 > 1, v30 + 1, 1);
            id v28 = v40;
          }
          v28[2] = v30 + 1;
          uint64_t result = (void *)sub_100096408((uint64_t)v5, (uint64_t)v28+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v30, (uint64_t *)&unk_100909E50);
          if (v7) {
            break;
          }
          uint64_t v15 = (uint64_t)v37;
          uint64_t v16 = v38;
          unsigned __int8 v17 = v39;
          uint64_t v18 = sub_1003C9E34(v37, v38, v39, v6);
          uint64_t v20 = v19;
          char v22 = v21;
          char v23 = v17;
          id v14 = &selRef_stringFromDate_;
          sub_1000E4EA4(v15, v16, v23);
          os_log_type_t v37 = (void *)v18;
          uint64_t v38 = v20;
          unint64_t v7 = 0;
          uint64_t v3 = v33;
          uint64_t v5 = v34;
          unsigned __int8 v39 = v22 & 1;
          if (!--v8) {
            goto LABEL_22;
          }
        }
        if ((v39 & 1) == 0) {
          goto LABEL_25;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100094134(&qword_100916988);
        os_log_type_t v31 = (void (*)(char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v31(v36, 0);
        --v8;
      }
      while (v8);
LABEL_22:
      sub_1000E4EA4((uint64_t)v37, v38, v39);
      return v40;
    }
  }
  return result;
}

void *sub_10038EC50(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1001DE058(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 4;
      uint64_t v4 = static String._uncheckedFromUTF8(_:)();
      uint64_t v6 = v5;
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_1001DE058(v7 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      unint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      v9[5] = v6;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10038EDDC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_1001DE184(0, v2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v5 = v6;
      if (v6 >= 0x7FFF) {
        uint64_t v5 = 0x7FFFLL;
      }
      if (v5 <= -32768) {
        __int16 v7 = 0x8000;
      }
      else {
        __int16 v7 = v5;
      }
      unsigned __int8 v11 = result;
      unint64_t v9 = result[2];
      unint64_t v8 = result[3];
      if (v9 >= v8 >> 1)
      {
        sub_1001DE184(v8 > 1, v9 + 1, 1);
        uint64_t result = v11;
      }
      result[2] = v9 + 1;
      uint64_t v10 = (char *)result + 4 * v9;
      *((_WORD *)v10 + 16) = v7;
      v10[34] = 0;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_10038EEC0(uint64_t a1)
{
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v6 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  uint64_t result = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v38 = _swiftEmptyArrayStorage;
    sub_1001DE148(0, v6 & ~(v6 >> 63), 0);
    if (v5)
    {
      uint64_t result = (void *)__CocoaSet.startIndex.getter();
      unsigned __int8 v9 = 1;
    }
    else
    {
      uint64_t result = (void *)sub_1003CA790(a1);
      unsigned __int8 v9 = v10 & 1;
    }
    uint64_t v35 = result;
    uint64_t v36 = v8;
    unsigned __int8 v37 = v9;
    if (v6 < 0)
    {
      __break(1u);
LABEL_25:
      __break(1u);
    }
    else
    {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0) {
        uint64_t v11 = a1;
      }
      uint64_t v31 = v2;
      uint64_t v32 = v11;
      void v29[2] = v2 + 32;
      unint64_t v30 = a1 & 0xC000000000000001;
      do
      {
        while (1)
        {
          sub_1003C9F34((uint64_t)v35, v36, v37, a1);
          char v23 = v22;
          id v24 = [v22 uuid];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          id v25 = v38;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1001DE148(0, v25[2] + 1, 1);
            id v25 = v38;
          }
          unint64_t v27 = v25[2];
          unint64_t v26 = v25[3];
          if (v27 >= v26 >> 1)
          {
            sub_1001DE148(v26 > 1, v27 + 1, 1);
            id v25 = v38;
          }
          v25[2] = v27 + 1;
          uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))((unint64_t)v25+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v27, v4, v33);
          uint64_t v38 = v25;
          if (v5) {
            break;
          }
          uint64_t v12 = (uint64_t)v35;
          uint64_t v13 = v36;
          char v14 = v37;
          uint64_t v15 = v4;
          uint64_t v16 = sub_1003C9E34(v35, v36, v37, a1);
          uint64_t v17 = a1;
          uint64_t v19 = v18;
          char v21 = v20;
          sub_1000E4EA4(v12, v13, v14);
          uint64_t v35 = (void *)v16;
          uint64_t v36 = v19;
          uint64_t v4 = v15;
          a1 = v17;
          unint64_t v5 = v30;
          uint64_t v2 = v31;
          unsigned __int8 v37 = v21 & 1;
          if (!--v6) {
            goto LABEL_22;
          }
        }
        if ((v37 & 1) == 0) {
          goto LABEL_25;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100094134(&qword_100916988);
        id v28 = (void (*)(char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v28(v34, 0);
        --v6;
      }
      while (v6);
LABEL_22:
      sub_1000E4EA4((uint64_t)v35, v36, v37);
      return v38;
    }
  }
  return result;
}

uint64_t sub_10038F1F0()
{
  uint64_t v1042 = 0;
  uint64_t v942 = type metadata accessor for REMSearchableListType();
  v980 = *(char **)(v942 - 8);
  uint64_t v0 = __chkstk_darwin(v942);
  v940 = (char *)&v939 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v0);
  v941 = (char *)&v939 - v2;
  uint64_t v1005 = type metadata accessor for REMStringMatchingStyle();
  v979 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v1005 - 8);
  uint64_t v3 = __chkstk_darwin(v1005);
  v964 = (char *)&v939 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v1019 = (char *)&v939 - v5;
  uint64_t v1021 = type metadata accessor for Logger();
  uint64_t v978 = *(void *)(v1021 - 8);
  uint64_t v6 = __chkstk_darwin(v1021);
  v939 = (char *)&v939 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  v1020 = (char *)&v939 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v943 = (char *)&v939 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v950 = (char *)&v939 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v951 = (char *)&v939 - v15;
  __chkstk_darwin(v14);
  v1023 = (char *)&v939 - v16;
  uint64_t v1025 = type metadata accessor for REMSearchCriterion.Inclusion();
  uint64_t v977 = *(void *)(v1025 - 8);
  uint64_t v17 = __chkstk_darwin(v1025);
  v1004 = (char *)&v939 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v1018 = (char *)&v939 - v19;
  uint64_t v1022 = type metadata accessor for REMSearchCriterion();
  uint64_t v1026 = *(void *)(v1022 - 8);
  uint64_t v20 = __chkstk_darwin(v1022);
  v1016 = (char *)&v939 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  v1030 = (char *)&v939 - v23;
  uint64_t v976 = v24;
  __chkstk_darwin(v22);
  v1033 = (char *)&v939 - v25;
  uint64_t v1036 = type metadata accessor for UUID();
  uint64_t v1037 = *(void *)(v1036 - 8);
  uint64_t v26 = __chkstk_darwin(v1036);
  v971 = (char *)&v939 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v1001 = (char *)&v939 - v28;
  uint64_t v1015 = sub_100094134(&qword_100916900);
  uint64_t v29 = __chkstk_darwin(v1015);
  v1013 = (char *)&v939 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v1014 = (char *)&v939 - v31;
  uint64_t v1029 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v1028 = *(void *)(v1029 - 8);
  uint64_t v32 = __chkstk_darwin(v1029);
  v1003 = (char *)&v939 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  v1000 = (char *)&v939 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v1024 = (char *)&v939 - v37;
  __chkstk_darwin(v36);
  v1027 = (char *)&v939 - v38;
  uint64_t v1040 = type metadata accessor for Date();
  uint64_t v1034 = *(void *)(v1040 - 8);
  uint64_t v39 = __chkstk_darwin(v1040);
  v953 = (char *)&v939 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __chkstk_darwin(v39);
  v956 = (char *)&v939 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v955 = (char *)&v939 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v952 = (char *)&v939 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v963 = (char *)&v939 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v959 = (char *)&v939 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v962 = (char *)&v939 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v958 = (char *)&v939 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v957 = (char *)&v939 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v960 = (void (**)(char *, uint64_t))((char *)&v939 - v58);
  uint64_t v59 = __chkstk_darwin(v57);
  uint64_t v1017 = (uint64_t)&v939 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v961 = (char *)&v939 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v954 = (char *)&v939 - v64;
  __chkstk_darwin(v63);
  uint64_t v1031 = (uint64_t)&v939 - v65;
  uint64_t v66 = type metadata accessor for Calendar.Component();
  uint64_t v974 = *(void *)(v66 - 8);
  uint64_t v975 = v66;
  __chkstk_darwin(v66);
  v973 = (char *)&v939 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for Calendar();
  uint64_t v969 = *(void *)(v68 - 8);
  uint64_t v970 = v68;
  __chkstk_darwin(v68);
  v972 = (char *)&v939 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v71 = __chkstk_darwin(v70 - 8);
  uint64_t v982 = (uint64_t)&v939 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __chkstk_darwin(v71);
  v1002 = (char **)((char *)&v939 - v74);
  uint64_t v75 = __chkstk_darwin(v73);
  uint64_t v993 = (uint64_t)&v939 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  v996 = (char **)((char *)&v939 - v78);
  uint64_t v79 = __chkstk_darwin(v77);
  uint64_t v992 = (uint64_t)&v939 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  uint64_t v998 = (uint64_t)&v939 - v82;
  uint64_t v83 = __chkstk_darwin(v81);
  uint64_t v981 = (uint64_t)&v939 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  uint64_t v1012 = (uint64_t)&v939 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  uint64_t v945 = (uint64_t)&v939 - v88;
  uint64_t v89 = __chkstk_darwin(v87);
  uint64_t v944 = (uint64_t)&v939 - v90;
  uint64_t v91 = __chkstk_darwin(v89);
  uint64_t v947 = (uint64_t)&v939 - v92;
  uint64_t v93 = __chkstk_darwin(v91);
  uint64_t v946 = (uint64_t)&v939 - v94;
  uint64_t v95 = __chkstk_darwin(v93);
  uint64_t v949 = (uint64_t)&v939 - v96;
  uint64_t v97 = __chkstk_darwin(v95);
  uint64_t v948 = (uint64_t)&v939 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  v995 = ((char *)&v939 - v100);
  uint64_t v101 = __chkstk_darwin(v99);
  v987 = (void (**)(uint64_t, void, uint64_t, uint64_t))((char *)&v939 - v102);
  uint64_t v103 = __chkstk_darwin(v101);
  v999 = (char **)((char *)&v939 - v104);
  uint64_t v105 = __chkstk_darwin(v103);
  v1009 = (char **)((char *)&v939 - v106);
  uint64_t v107 = __chkstk_darwin(v105);
  v991 = ((char *)&v939 - v108);
  uint64_t v109 = __chkstk_darwin(v107);
  v986 = ((char *)&v939 - v110);
  uint64_t v111 = __chkstk_darwin(v109);
  v997 = (char **)((char *)&v939 - v112);
  uint64_t v113 = __chkstk_darwin(v111);
  v1008 = (char **)((char *)&v939 - v114);
  uint64_t v115 = __chkstk_darwin(v113);
  v985 = (char *)&v939 - v116;
  uint64_t v117 = __chkstk_darwin(v115);
  v990 = (char **)((char *)&v939 - v118);
  uint64_t v119 = __chkstk_darwin(v117);
  v989 = (char **)((char *)&v939 - v120);
  uint64_t v121 = __chkstk_darwin(v119);
  uint64_t v1006 = (uint64_t)&v939 - v122;
  uint64_t v123 = __chkstk_darwin(v121);
  uint64_t v988 = (uint64_t)&v939 - v124;
  uint64_t v125 = __chkstk_darwin(v123);
  uint64_t v984 = (uint64_t)&v939 - v126;
  uint64_t v127 = __chkstk_darwin(v125);
  v994 = (void (**)(char *, uint64_t))((char *)&v939 - v128);
  uint64_t v129 = __chkstk_darwin(v127);
  uint64_t v1007 = (uint64_t)&v939 - v130;
  uint64_t v131 = __chkstk_darwin(v129);
  uint64_t v968 = (uint64_t)&v939 - v132;
  __chkstk_darwin(v131);
  uint64_t v1032 = (uint64_t)&v939 - v133;
  uint64_t v134 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v983 = *(void *)(v134 - 8);
  uint64_t v135 = __chkstk_darwin(v134 - 8);
  v967 = (char *)&v939 - ((v136 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = __chkstk_darwin(v135);
  v965 = (void (**)(char *, char *, uint64_t))((char *)&v939 - v138);
  uint64_t v139 = __chkstk_darwin(v137);
  os_log_t v141 = (char *)&v939 - v140;
  uint64_t v142 = __chkstk_darwin(v139);
  v966 = (char *)&v939 - v143;
  uint64_t v144 = __chkstk_darwin(v142);
  uint64_t v146 = (char *)&v939 - v145;
  uint64_t v147 = __chkstk_darwin(v144);
  v1035 = (char *)&v939 - v148;
  __chkstk_darwin(v147);
  int v150 = (char *)&v939 - v149;
  uint64_t v151 = _s10PredicatesOMa(0);
  __chkstk_darwin(v151);
  uint64_t v153 = (uint64_t)&v939 - ((v152 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1041 = _s10PredicatesO19CompletionPredicateOMa(0);
  uint64_t v154 = __chkstk_darwin(v1041);
  v1038 = (uint64_t *)((char *)&v939 - ((v155 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v156 = __chkstk_darwin(v154);
  uint64_t v158 = (char *)&v939 - v157;
  uint64_t v159 = __chkstk_darwin(v156);
  uint64_t v161 = (char *)&v939 - v160;
  uint64_t v162 = __chkstk_darwin(v159);
  NSString v164 = (char *)&v939 - v163;
  uint64_t v165 = __chkstk_darwin(v162);
  uint64_t v1010 = (uint64_t)&v939 - v166;
  uint64_t v167 = __chkstk_darwin(v165);
  uint64_t v1011 = (uint64_t)&v939 - v168;
  __chkstk_darwin(v167);
  v1043 = (char *)&v939 - v169;
  uint64_t v1049 = (uint64_t)sub_1001DD9AC();
  sub_10039BBFC((uint64_t)v1039, v153, _s10PredicatesOMa);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      char v358 = *(unsigned char *)(v153 + 8);
      swift_storeEnumTagMultiPayload();
      sub_100332FEC();
      LODWORD(v1039) = 0;
      int v210 = 1;
      int v200 = 1;
      LOBYTE(v153) = 1;
      if (v358) {
        goto LABEL_396;
      }
      goto LABEL_394;
    case 2u:
      id v321 = *(id *)v153;
      int v322 = *(unsigned __int8 *)(v153 + 8);
      swift_storeEnumTagMultiPayload();
      LODWORD(v1039) = v322 ^ 1;
      uint64_t KeyPath = swift_getKeyPath();
      id v324 = [v321 uuid];
      uint64_t v325 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v325, 0, 1, v1036);
      sub_10032E298(KeyPath, v325);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_104;
    case 3u:
      unint64_t v330 = *(void *)v153;
      uint64_t v331 = sub_100094134(&qword_100916980);
      uint64_t v332 = v153 + *(int *)(v331 + 48);
      LODWORD(v1039) = *(unsigned __int8 *)(v153 + *(int *)(v331 + 64));
      uint64_t v333 = v1011;
      sub_10039BE98(v332, v1011);
      sub_10039BBFC(v333, (uint64_t)v1043, _s10PredicatesO19CompletionPredicateOMa);
      uint64_t v334 = swift_getKeyPath();
      uint64_t v335 = sub_10038E5A4(v330);
      if (!v335)
      {
        v342 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DDBD0(0);
        swift_bridgeObjectRelease();
LABEL_323:
        sub_1003A0380(v334, (uint64_t)v342, &qword_1009169A8, (uint64_t *)&unk_10090B070);
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_100349250(*(void *)(v1049 + 16));
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        sub_1003A136C(v1011, _s10PredicatesO19CompletionPredicateOMa);
        int v210 = 0;
        int v200 = 0;
        LODWORD(v153) = 0;
        LOBYTE(v265) = (_BYTE)v1039;
LABEL_326:
        LODWORD(v1039) = v210;
        switch((char)v265)
        {
          case 2:
            goto LABEL_394;
          case 3:
            int v210 = (int)v1039;
            if (v153) {
              goto LABEL_396;
            }
            goto LABEL_330;
          case 4:
            sub_100398760();
            break;
          case 5:
            goto LABEL_329;
          case 6:
            sub_100398760();
            sub_100332FEC();
            sub_100398634();
            break;
          default:
            uint64_t v885 = swift_getKeyPath();
            if (v265) {
              sub_1003A07F0(v885, (uint64_t *)&unk_10090B070);
            }
            else {
              sub_1003A11D4(v885, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
            }
            swift_release();
            sub_100332FEC();
            if (v153) {
              goto LABEL_396;
            }
            goto LABEL_330;
        }
        sub_100332FEC();
        int v210 = (int)v1039;
        goto LABEL_395;
      }
      uint64_t v336 = v335;
      v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DD9AC();
      sub_1001DD9D0(v336);
      if ((v336 & 0x8000000000000000) == 0)
      {
        uint64_t v337 = 0;
        uint64_t v338 = v1042;
        do
        {
          if (v336 == v337) {
            goto LABEL_400;
          }
          if ((v330 & 0xC000000000000001) != 0) {
            id v339 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v339 = *(id *)(v330 + 8 * v337 + 32);
          }
          v340 = v339;
          v1048[0] = v339;
          sub_100399C28(v1048, (uint64_t)v146);

          if (v338) {
            goto LABEL_419;
          }
          ++v337;
          sub_1001DDDB0();
          uint64_t v341 = *((void *)v1046 + 2);
          sub_1001DDE6C(v341);
          sub_1001DDEE4(v341, (uint64_t)v146);
          REMCDList.cleanUpAfterLocalObjectMerge()();
        }
        while (v336 != v337);
        uint64_t v1042 = 0;
        swift_bridgeObjectRelease();
        v342 = v1046;
        goto LABEL_323;
      }
      goto LABEL_410;
    case 4u:
      unint64_t v277 = *(void *)v153;
      uint64_t v278 = sub_100094134(&qword_100916978);
      uint64_t v279 = v153 + *(int *)(v278 + 64);
      uint64_t v280 = v1007;
      sub_100096408(v153 + *(int *)(v278 + 48), v1007, (uint64_t *)&unk_100909A40);
      v281 = v994;
      sub_100096408(v279, (uint64_t)v994, (uint64_t *)&unk_100909A40);
      swift_storeEnumTagMultiPayload();
      uint64_t v282 = v984;
      sub_1000BF710(v280, v984, (uint64_t *)&unk_100909A40);
      uint64_t v283 = v1034;
      v284 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1034 + 48);
      uint64_t v285 = v1040;
      if (v284(v282, 1, v1040) == 1)
      {
        sub_1000966BC(v282, (uint64_t *)&unk_100909A40);
      }
      else
      {
        v785 = v954;
        (*(void (**)(char *, uint64_t, uint64_t))(v283 + 32))(v954, v282, v285);
        uint64_t v786 = swift_getKeyPath();
        uint64_t v787 = v1032;
        (*(void (**)(uint64_t, char *, uint64_t))(v283 + 16))(v1032, v785, v285);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v283 + 56))(v787, 0, 1, v285);
        sub_10039AE14(v786, v787, (uint64_t *)&unk_100909A40, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
        swift_release();
        sub_100332FEC();
        v788 = v785;
        uint64_t v280 = v1007;
        (*(void (**)(char *, uint64_t))(v283 + 8))(v788, v285);
      }
      uint64_t v789 = v988;
      sub_1000BF710((uint64_t)v281, v988, (uint64_t *)&unk_100909A40);
      unsigned int v790 = v284(v789, 1, v285);
      uint64_t v791 = v1042;
      if (v790 == 1)
      {
        sub_1000966BC(v789, (uint64_t *)&unk_100909A40);
      }
      else
      {
        uint64_t v797 = v1034;
        v798 = v961;
        (*(void (**)(char *, uint64_t, uint64_t))(v1034 + 32))(v961, v789, v285);
        uint64_t v799 = swift_getKeyPath();
        uint64_t v800 = v1032;
        (*(void (**)(uint64_t, char *, uint64_t))(v797 + 16))(v1032, v798, v285);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v797 + 56))(v800, 0, 1, v285);
        sub_10039AE14(v799, v800, (uint64_t *)&unk_100909A40, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
        swift_release();
        sub_100332FEC();
        (*(void (**)(char *, uint64_t))(v797 + 8))(v798, v285);
      }
      uint64_t v801 = swift_getKeyPath();
      uint64_t v802 = sub_10038E69C(v277);
      uint64_t v1042 = v791;
      swift_bridgeObjectRelease();
      sub_1003A0380(v801, v802, &qword_1009169A8, (uint64_t *)&unk_10090B070);
      swift_release();
      sub_100332FEC();
      sub_1000966BC((uint64_t)v281, (uint64_t *)&unk_100909A40);
      sub_1000966BC(v280, (uint64_t *)&unk_100909A40);
      goto LABEL_368;
    case 5u:
      id v321 = *(id *)v153;
      int v377 = *(unsigned __int8 *)(v153 + 8);
      uint64_t v378 = *(void *)(v153 + 16);
      swift_storeEnumTagMultiPayload();
      int v379 = v377 ^ 1;
      uint64_t v380 = swift_getKeyPath();
      id v381 = [v321 uuid];
      uint64_t v382 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v382, 0, 1, v1036);
      sub_10032E298(v380, v382);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      LODWORD(v1039) = v379;
      if (!v378)
      {
LABEL_104:

        goto LABEL_369;
      }
      id v383 = [self currentCalendar];
      v384 = v972;
      static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

      v386 = v973;
      uint64_t v385 = v974;
      uint64_t v387 = v975;
      (*(void (**)(char *, void, uint64_t))(v974 + 104))(v973, enum case for Calendar.Component.day(_:), v975);
      if ((v378 & 0x8000000000000000) == 0)
      {
        uint64_t v388 = v1031;
        Date.init()();
        uint64_t v389 = v1032;
        Calendar.date(byAdding:value:to:wrappingComponents:)();
        (*(void (**)(uint64_t, uint64_t))(v1034 + 8))(v388, v1040);
        (*(void (**)(char *, uint64_t))(v385 + 8))(v386, v387);
        (*(void (**)(char *, uint64_t))(v969 + 8))(v384, v970);
        uint64_t v390 = swift_getKeyPath();
        uint64_t v391 = v968;
        sub_1000BF710(v389, v968, (uint64_t *)&unk_100909A40);
        sub_10039AE14(v390, v391, (uint64_t *)&unk_100909A40, 0x4025203E204B25, 0xE700000000000000, (uint64_t *)&unk_10090B070);
        swift_release();
        sub_100332FEC();

        sub_1000966BC(v389, (uint64_t *)&unk_100909A40);
LABEL_369:
        int v210 = 0;
        int v200 = 0;
        LOBYTE(v153) = 0;
        goto LABEL_394;
      }
      goto LABEL_412;
    case 6u:
      v427 = *(void **)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v428 = swift_getKeyPath();
      id v429 = [v427 uuid];
      uint64_t v430 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v430, 0, 1, v1036);
      sub_10032E298(v428, v430);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_368;
    case 7u:
      v343 = *(void **)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v344 = swift_getKeyPath();
      id v345 = [v343 uuid];
      uint64_t v346 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v346, 0, 1, v1036);
      sub_10032E298(v344, v346);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      LODWORD(v1039) = 0;
      int v200 = 0;
      LOBYTE(v153) = 0;
LABEL_329:
      sub_100398760();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      int v210 = (int)v1039;
      if ((v153 & 1) == 0) {
        goto LABEL_330;
      }
      goto LABEL_396;
    case 8u:
      v449 = *(void **)v153;
      uint64_t v450 = v153 + *(int *)(sub_100094134(&qword_100916940) + 48);
      uint64_t v451 = v1028;
      v452 = v1027;
      uint64_t v453 = v1029;
      (*(void (**)(char *, uint64_t, uint64_t))(v1028 + 32))(v1027, v450, v1029);
      uint64_t v454 = (uint64_t)v1024;
      (*(void (**)(char *, char *, uint64_t))(v451 + 16))(v1024, v452, v453);
      sub_100398974(v454, (uint64_t)v1043);
      uint64_t v455 = swift_getKeyPath();
      id v456 = [v449 uuid];
      uint64_t v457 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v458 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56);
      LODWORD(v1039) = 1;
      v458(v457, 0, 1, v1036);
      sub_10032E298(v455, v457);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      (*(void (**)(char *, uint64_t))(v451 + 8))(v452, v453);
      goto LABEL_369;
    case 9u:
      v298 = *(void **)v153;
      uint64_t v299 = sub_100094134(&qword_100916970);
      int v300 = *(unsigned __int8 *)(v153 + *(int *)(v299 + 64));
      uint64_t v301 = v1028;
      v302 = v1000;
      uint64_t v265 = v1029;
      (*(void (**)(char *, uint64_t, uint64_t))(v1028 + 32))(v1000, v153 + *(int *)(v299 + 48), v1029);
      LODWORD(v153) = (v300 & 1) == 0 || (v300 - 2) < 5;
      uint64_t v304 = (uint64_t)v1027;
      (*(void (**)(char *, char *, uint64_t))(v301 + 16))(v1027, v302, v265);
      sub_100398974(v304, (uint64_t)v1043);
      uint64_t v305 = swift_getKeyPath();
      id v306 = [v298 uuid];
      uint64_t v307 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v307, 0, 1, v1036);
      sub_10032E298(v305, v307);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v308 = v265;
      LOBYTE(v265) = v300;
      (*(void (**)(char *, uint64_t))(v301 + 8))(v302, v308);
      goto LABEL_307;
    case 0xAu:
      uint64_t v459 = *(void *)v153;
      uint64_t v460 = sub_100094134(&qword_100916968);
      uint64_t v461 = v1028;
      v462 = v1027;
      uint64_t v463 = v1029;
      (*(void (**)(char *, uint64_t, uint64_t))(v1028 + 32))(v1027, v153 + *(int *)(v460 + 48), v1029);
      uint64_t v464 = (uint64_t)v1024;
      (*(void (**)(char *, char *, uint64_t))(v461 + 16))(v1024, v462, v463);
      sub_100398974(v464, (uint64_t)v1043);
      uint64_t v465 = swift_getKeyPath();
      sub_1003A0380(v465, v459, &qword_100908270, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      (*(void (**)(char *, uint64_t))(v461 + 8))(v462, v463);
      goto LABEL_368;
    case 0xBu:
      uint64_t v271 = v1028;
      v272 = v1027;
      uint64_t v273 = v1029;
      (*(void (**)(char *, uint64_t, uint64_t))(v1028 + 32))(v1027, v153, v1029);
      uint64_t v274 = (uint64_t)v1024;
      (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v1024, v272, v273);
      sub_100398974(v274, (uint64_t)v1043);
      uint64_t v275 = swift_getKeyPath();
      sub_1003A11D4(v275, 0x696E203D21204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      (*(void (**)(char *, uint64_t))(v271 + 8))(v272, v273);
      goto LABEL_391;
    case 0xCu:
      uint64_t v293 = v1028;
      v294 = v1027;
      uint64_t v295 = v1029;
      (*(void (**)(char *, uint64_t, uint64_t))(v1028 + 32))(v1027, v153, v1029);
      uint64_t v296 = (uint64_t)v1024;
      (*(void (**)(char *, char *, uint64_t))(v293 + 16))(v1024, v294, v295);
      sub_100398974(v296, (uint64_t)v1043);
      uint64_t v297 = swift_getKeyPath();
      int v210 = 1;
      sub_1003A0634(v297, 1, (uint64_t)&type metadata for Int64, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      (*(void (**)(char *, uint64_t))(v293 + 8))(v294, v295);
      goto LABEL_302;
    case 0xDu:
      uint64_t v402 = v153 + *(int *)(sub_100094134(&qword_100916960) + 48);
      (*(void (**)(void))(v1028 + 32))();
      uint64_t v403 = v1034;
      uint64_t v404 = v1031;
      uint64_t v405 = v1040;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v1034 + 32))(v1031, v402, v1040);
      v406 = v1014;
      uint64_t v407 = (uint64_t)&v1014[*(int *)(v1015 + 48)];
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      uint64_t v408 = v1017;
      sub_100398C54(v404, v1017);
      uint64_t v409 = swift_getKeyPath();
      uint64_t v410 = v1032;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v403 + 16))(v1032, v408, v405);
      int v210 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v403 + 56))(v410, 0, 1, v405);
      v411 = (void *)sub_10039AE14(v409, v410, (uint64_t *)&unk_100909A40, 0x4025203C204B25, 0xE700000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      v1039 = *(void (**)(uint64_t, uint64_t))(v403 + 8);
      v1039(v408, v405);
      v412 = (void *)sub_10039936C(v407, v411);

      void *v406 = v412;
      uint64_t v413 = v1015;
      v414 = v1013;
      uint64_t v415 = (uint64_t)&v1013[*(int *)(v1015 + 48)];
      sub_10039BBFC(v407, v415, _s10PredicatesO19CompletionPredicateOMa);
      sub_10039BE98(v415, (uint64_t)v1043);
      uint64_t v416 = (uint64_t)v414 + *(int *)(v413 + 48);
      void *v414 = v412;
      sub_10039BBFC(v407, v416, _s10PredicatesO19CompletionPredicateOMa);
      id v417 = v412;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_1000966BC((uint64_t)v406, &qword_100916900);
      v1039(v1031, v1040);
      (*(void (**)(char *, uint64_t))(v1028 + 8))(v1027, v1029);
      sub_1003A136C(v416, _s10PredicatesO19CompletionPredicateOMa);
      goto LABEL_268;
    case 0xEu:
      uint64_t v257 = v1034;
      uint64_t v258 = v1031;
      uint64_t v259 = v1040;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v1034 + 32))(v1031, v153, v1040);
      swift_storeEnumTagMultiPayload();
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      uint64_t v260 = v1017;
      sub_100398C54(v258, v1017);
      uint64_t v261 = swift_getKeyPath();
      uint64_t v262 = v1032;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v257 + 16))(v1032, v260, v259);
      int v210 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v257 + 56))(v262, 0, 1, v259);
      sub_10039AE14(v261, v262, (uint64_t *)&unk_100909A40, 0x4025203C204B25, 0xE700000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      v263 = *(void (**)(uint64_t, uint64_t))(v257 + 8);
      v263(v260, v259);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v263(v258, v259);
      goto LABEL_268;
    case 0xFu:
      uint64_t v326 = v1028;
      v327 = v1027;
      uint64_t v328 = v1029;
      (*(void (**)(char *, uint64_t, uint64_t))(v1028 + 32))(v1027, v153, v1029);
      uint64_t v329 = (uint64_t)v1024;
      (*(void (**)(char *, char *, uint64_t))(v326 + 16))(v1024, v327, v328);
      sub_100398974(v329, (uint64_t)v1043);
      (*(void (**)(char *, uint64_t))(v326 + 8))(v327, v328);
      goto LABEL_266;
    case 0x10u:
      uint64_t v225 = *(void **)v153;
      int v226 = *(unsigned __int8 *)(v153 + 8);
      uint64_t v227 = sub_100094134(&qword_100916958);
      uint64_t v228 = v1006;
      sub_100096408(v153 + *(int *)(v227 + 64), v1006, (uint64_t *)&unk_100909A40);
      LODWORD(v1039) = v226;
      LODWORD(v153) = (v226 & 1) == 0 || (v226 - 2) < 5;
      swift_storeEnumTagMultiPayload();
      uint64_t v230 = swift_getKeyPath();
      id v231 = [v225 uuid];
      uint64_t v232 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v232, 0, 1, v1036);
      sub_10032E298(v230, v232);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v233 = (uint64_t (**)(void, void))v989;
      sub_1000BF710(v228, (uint64_t)v989, (uint64_t *)&unk_100909A40);
      uint64_t v234 = v1034;
      uint64_t v235 = v1040;
      if ((*(unsigned int (**)(uint64_t (**)(void, void), uint64_t, uint64_t))(v1034 + 48))(v233, 1, v1040) == 1)
      {
        sub_1000966BC(v228, (uint64_t *)&unk_100909A40);

        sub_1000966BC((uint64_t)v233, (uint64_t *)&unk_100909A40);
        int v210 = 1;
      }
      else
      {
        v782 = v960;
        (*(void (**)(void (**)(char *, uint64_t), uint64_t (**)(void, void), uint64_t))(v234 + 32))(v960, v233, v235);
        uint64_t v783 = swift_getKeyPath();
        uint64_t v784 = v1032;
        (*(void (**)(uint64_t, void (**)(char *, uint64_t), uint64_t))(v234 + 16))(v1032, v782, v235);
        int v210 = 1;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v234 + 56))(v784, 0, 1, v235);
        sub_10039AE14(v783, v784, (uint64_t *)&unk_100909A40, 0x4025203E204B25, 0xE700000000000000, (uint64_t *)&unk_10090B070);
        swift_release();
        sub_100332FEC();

        (*(void (**)(void, uint64_t))(v234 + 8))(v782, v235);
        sub_1000966BC(v1006, (uint64_t *)&unk_100909A40);
      }
      int v200 = 1;
      LOBYTE(v265) = (_BYTE)v1039;
      goto LABEL_326;
    case 0x11u:
      LODWORD(v265) = *(unsigned __int8 *)(v153 + *(int *)(sub_100094134(&qword_100916950) + 48));
      v366 = (void (**)(void, void, void))v990;
      sub_100096408(v153, (uint64_t)v990, (uint64_t *)&unk_100909A40);
      LODWORD(v153) = (v265 & 1) == 0 || (v265 - 2) < 5;
      swift_storeEnumTagMultiPayload();
      id v368 = v985;
      sub_1000BF710((uint64_t)v366, (uint64_t)v985, (uint64_t *)&unk_100909A40);
      uint64_t v369 = v1034;
      uint64_t v370 = v1040;
      if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v1034 + 48))(v368, 1, v1040) == 1)
      {
        sub_1000966BC((uint64_t)v368, (uint64_t *)&unk_100909A40);
      }
      else
      {
        v803 = v957;
        (*(void (**)(char *, id, uint64_t))(v369 + 32))(v957, v368, v370);
        uint64_t v804 = swift_getKeyPath();
        uint64_t v805 = v1032;
        (*(void (**)(uint64_t, char *, uint64_t))(v369 + 16))(v1032, v803, v370);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v369 + 56))(v805, 0, 1, v370);
        sub_10039AE14(v804, v805, (uint64_t *)&unk_100909A40, 0x4025203C204B25, 0xE700000000000000, (uint64_t *)&unk_10090B070);
        swift_release();
        sub_100332FEC();
        (*(void (**)(char *, uint64_t))(v369 + 8))(v803, v370);
      }
      uint64_t v806 = swift_getKeyPath();
      __int16 v807 = sub_1004B9C28(0);
      sub_10032E2AC(v806, v807);
      swift_release();
      sub_100332FEC();
      sub_1000966BC((uint64_t)v366, (uint64_t *)&unk_100909A40);
      goto LABEL_307;
    case 0x12u:
      v431 = *(char **)(v153 + 8);
      v1039 = *(void (**)(uint64_t, uint64_t))v153;
      v1033 = v431;
      uint64_t v432 = v153 + *(int *)(sub_100094134(&qword_100916948) + 64);
      uint64_t v433 = v1028;
      v434 = v1027;
      (*(void (**)(char *, uint64_t, uint64_t))(v1028 + 32))(v1027, v432, v1029);
      uint64_t v435 = v1015;
      v436 = v1014;
      uint64_t v437 = (uint64_t)&v1014[*(int *)(v1015 + 48)];
      uint64_t v438 = v1031;
      Date.init()();
      v439 = (void *)sub_1001BDB90(v438);
      (*(void (**)(uint64_t, uint64_t))(v1034 + 8))(v438, v1040);
      v440 = (void *)sub_10039936C(v437, v439);

      void *v436 = v440;
      v441 = v1013;
      uint64_t v442 = (uint64_t)&v1013[*(int *)(v435 + 48)];
      sub_10039BBFC(v437, v442, _s10PredicatesO19CompletionPredicateOMa);
      sub_10039BE98(v442, (uint64_t)v1043);
      uint64_t v443 = (uint64_t)v441 + *(int *)(v435 + 48);
      void *v441 = v440;
      sub_10039BBFC(v437, v443, _s10PredicatesO19CompletionPredicateOMa);
      id v444 = v440;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_1003A136C(v443, _s10PredicatesO19CompletionPredicateOMa);
      uint64_t v445 = swift_getKeyPath();
      v446 = v1033;
      id v447 = [v1033 uuid];
      uint64_t v448 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int v210 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v448, 0, 1, v1036);
      sub_10032E298(v445, v448);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      sub_1000966BC((uint64_t)v436, &qword_100916900);
      (*(void (**)(char *, uint64_t))(v433 + 8))(v434, v1029);
      goto LABEL_268;
    case 0x13u:
      unint64_t v691 = *(void *)v153;
      uint64_t v692 = sub_100094134(&qword_10090E538);
      uint64_t v693 = v1028;
      v694 = v1003;
      uint64_t v695 = v1029;
      (*(void (**)(char *, uint64_t, uint64_t))(v1028 + 32))(v1003, v153 + *(int *)(v692 + 48), v1029);
      v696 = *(void (**)(char *, char *, uint64_t))(v693 + 16);
      uint64_t v697 = (uint64_t)v1027;
      v696(v1027, v694, v695);
      sub_100398974(v697, (uint64_t)v1043);
      v698 = (char *)swift_getKeyPath();
      uint64_t v699 = sub_10038E5A4(v691);
      if (!v699)
      {
        v707 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DDBD0(0);
        swift_bridgeObjectRelease();
LABEL_367:
        sub_1003A0380((uint64_t)v698, (uint64_t)v707, &qword_1009169A8, (uint64_t *)&unk_10090B070);
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_100349250(*(void *)(v1049 + 16));
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        (*(void (**)(char *, uint64_t))(v1028 + 8))(v694, v1029);
        goto LABEL_368;
      }
      uint64_t v700 = v699;
      v1039 = (void (*)(uint64_t, uint64_t))v698;
      v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DD9AC();
      sub_1001DD9D0(v700);
      if ((v700 & 0x8000000000000000) == 0)
      {
        uint64_t v701 = 0;
        uint64_t v702 = v1042;
        uint64_t v703 = (uint64_t)v966;
        do
        {
          if (v700 == v701) {
            goto LABEL_405;
          }
          if ((v691 & 0xC000000000000001) != 0) {
            id v704 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v704 = *(id *)(v691 + 8 * v701 + 32);
          }
          v705 = v704;
          v1048[0] = v704;
          sub_100399C28(v1048, v703);

          if (v702) {
            goto LABEL_419;
          }
          ++v701;
          sub_1001DDDB0();
          uint64_t v706 = *((void *)v1046 + 2);
          sub_1001DDE6C(v706);
          sub_1001DDEE4(v706, v703);
          REMCDList.cleanUpAfterLocalObjectMerge()();
        }
        while (v700 != v701);
        uint64_t v1042 = 0;
        swift_bridgeObjectRelease();
        v707 = v1046;
        v698 = (char *)v1039;
        goto LABEL_367;
      }
      goto LABEL_416;
    case 0x14u:
      unint64_t v392 = *(void *)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v393 = swift_getKeyPath();
      uint64_t v394 = sub_10038E5A4(v392);
      if (!v394)
      {
        v401 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DDBD0(0);
        swift_bridgeObjectRelease();
LABEL_358:
        sub_1003A0380(v393, (uint64_t)v401, &qword_1009169A8, (uint64_t *)&unk_10090B070);
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_100349250(*(void *)(v1049 + 16));
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
LABEL_368:
        LODWORD(v1039) = 0;
        goto LABEL_369;
      }
      uint64_t v395 = v394;
      v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DD9AC();
      sub_1001DD9D0(v395);
      if ((v395 & 0x8000000000000000) == 0)
      {
        uint64_t v396 = 0;
        uint64_t v397 = v1042;
        do
        {
          if (v395 == v396) {
            goto LABEL_402;
          }
          if ((v392 & 0xC000000000000001) != 0) {
            id v398 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v398 = *(id *)(v392 + 8 * v396 + 32);
          }
          v399 = v398;
          v1048[0] = v398;
          sub_100399C28(v1048, (uint64_t)v141);

          if (v397) {
            goto LABEL_419;
          }
          ++v396;
          sub_1001DDDB0();
          uint64_t v400 = *((void *)v1046 + 2);
          sub_1001DDE6C(v400);
          sub_1001DDEE4(v400, (uint64_t)v141);
          REMCDList.cleanUpAfterLocalObjectMerge()();
        }
        while (v395 != v396);
        uint64_t v1042 = 0;
        swift_bridgeObjectRelease();
        v401 = v1046;
        goto LABEL_358;
      }
      goto LABEL_413;
    case 0x15u:
      uint64_t v418 = *(void *)v153;
      uint64_t v419 = v153 + *(int *)(sub_100094134(&qword_100912550) + 48);
      uint64_t v420 = v1028;
      v421 = v1027;
      uint64_t v422 = v1029;
      (*(void (**)(char *, uint64_t, uint64_t))(v1028 + 32))(v1027, v419, v1029);
      uint64_t v423 = (uint64_t)v1024;
      (*(void (**)(char *, char *, uint64_t))(v420 + 16))(v1024, v421, v422);
      sub_100398974(v423, (uint64_t)v1043);
      uint64_t v424 = swift_getKeyPath();
      uint64_t v425 = v1042;
      v426 = sub_10038E8E8(v418);
      uint64_t v1042 = v425;
      swift_bridgeObjectRelease();
      sub_1003A0380(v424, (uint64_t)v426, &qword_1009169A8, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      (*(void (**)(char *, uint64_t))(v420 + 8))(v421, v422);
      goto LABEL_266;
    case 0x16u:
      uint64_t v674 = *(void *)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v675 = swift_getKeyPath();
      uint64_t v676 = v1042;
      v677 = sub_10038E8E8(v674);
      uint64_t v1042 = v676;
      swift_bridgeObjectRelease();
      sub_1003A0380(v675, (uint64_t)v677, &qword_1009169A8, (uint64_t *)&unk_10090B070);
      goto LABEL_239;
    case 0x17u:
      v719 = *(void **)v153;
      uint64_t v720 = v153 + *(int *)(sub_100094134(&qword_100916940) + 48);
      uint64_t v721 = v1028;
      v722 = v1027;
      uint64_t v723 = v1029;
      (*(void (**)(char *, uint64_t, uint64_t))(v1028 + 32))(v1027, v720, v1029);
      uint64_t v724 = (uint64_t)v1024;
      (*(void (**)(char *, char *, uint64_t))(v721 + 16))(v1024, v722, v723);
      sub_100398974(v724, (uint64_t)v1043);
      uint64_t v725 = swift_getKeyPath();
      id v726 = [v719 uuid];
      uint64_t v727 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int v210 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v727, 0, 1, v1036);
      sub_10032E298(v725, v727);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      (*(void (**)(char *, uint64_t))(v721 + 8))(v722, v723);
LABEL_268:
      LODWORD(v1039) = 0;
      goto LABEL_269;
    case 0x18u:
      uint64_t v314 = *(void *)v153;
      v310 = *(void **)(v153 + 8);
      swift_storeEnumTagMultiPayload();
      uint64_t v315 = swift_getKeyPath();
      v316 = sub_1001FFB00(v314);
      swift_bridgeObjectRelease();
      sub_1003A0380(v315, (uint64_t)v316, &qword_100916998, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v310) {
        goto LABEL_61;
      }
      goto LABEL_368;
    case 0x19u:
      uint64_t v309 = *(void *)v153;
      v310 = *(void **)(v153 + 8);
      swift_storeEnumTagMultiPayload();
      uint64_t v311 = swift_getKeyPath();
      v312 = sub_1001FFB00(v309);
      swift_bridgeObjectRelease();
      sub_1003A0380(v311, (uint64_t)v312, &qword_100916998, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v310)
      {
LABEL_61:
        uint64_t v317 = swift_getKeyPath();
        id v318 = v310;
        id v319 = [v318 uuid];
        uint64_t v320 = (uint64_t)v1035;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v320, 0, 1, v1036);
        sub_10032E298(v317, v320);
        swift_release();
        sub_100332FEC();
      }
      goto LABEL_368;
    case 0x1Au:
      v751 = *(void **)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v752 = swift_getKeyPath();
      sub_100094134(&qword_10090F5F8);
      uint64_t v753 = swift_allocObject();
      LOBYTE(v153) = 1;
      sub_1001561E8(v753, 1);
      uint64_t v755 = v754;
      id v756 = [v751 uuid];
      v757 = v1001;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v758 = v1037;
      uint64_t v759 = v1036;
      (*(void (**)(uint64_t, char *, uint64_t))(v1037 + 32))(v755, v757, v1036);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v758 + 56))(v755, 0, 1, v759);
      REMCDList.cleanUpAfterLocalObjectMerge()();
      sub_1003A0380(v752, v760, &qword_1009169A8, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      LODWORD(v1039) = 0;
      int v210 = 1;
      int v200 = 1;
      goto LABEL_394;
    case 0x1Bu:
      uint64_t v215 = v153 + *(int *)(sub_100094134(&qword_100916938) + 48);
      uint64_t v216 = v1034;
      v217 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1034 + 32);
      uint64_t v218 = v1031;
      uint64_t v219 = v1040;
      v217(v1031, v153, v1040);
      uint64_t v220 = v1017;
      v217(v1017, v215, v219);
      swift_storeEnumTagMultiPayload();
      sub_10039B76C(v218, v220);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v221 = *(void (**)(uint64_t, uint64_t))(v216 + 8);
      v221(v220, v219);
      v221(v218, v219);
      goto LABEL_58;
    case 0x1Cu:
      unint64_t v728 = *(void *)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v729 = swift_getKeyPath();
      uint64_t v730 = sub_10038E5A4(v728);
      if (!v730)
      {
        v738 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DDBD0(0);
        swift_bridgeObjectRelease();
LABEL_377:
        sub_1003A0380(v729, (uint64_t)v738, &qword_1009169A8, (uint64_t *)&unk_10090B070);
LABEL_378:
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_100349250(*(void *)(v1049 + 16));
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_391;
      }
      uint64_t v731 = v730;
      v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DD9AC();
      sub_1001DD9D0(v731);
      if ((v731 & 0x8000000000000000) == 0)
      {
        uint64_t v732 = 0;
        uint64_t v733 = v1042;
        uint64_t v734 = (uint64_t)v965;
        do
        {
          if (v731 == v732) {
            goto LABEL_406;
          }
          if ((v728 & 0xC000000000000001) != 0) {
            id v735 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v735 = *(id *)(v728 + 8 * v732 + 32);
          }
          v736 = v735;
          v1048[0] = v735;
          sub_100399C28(v1048, v734);

          if (v733) {
            goto LABEL_419;
          }
          ++v732;
          sub_1001DDDB0();
          uint64_t v737 = *((void *)v1046 + 2);
          sub_1001DDE6C(v737);
          sub_1001DDEE4(v737, v734);
          REMCDList.cleanUpAfterLocalObjectMerge()();
        }
        while (v731 != v732);
        uint64_t v1042 = 0;
        swift_bridgeObjectRelease();
        v738 = v1046;
        goto LABEL_377;
      }
      goto LABEL_417;
    case 0x1Du:
      unint64_t v475 = *(void *)v153;
      uint64_t v739 = sub_100094134(&qword_100916930);
      uint64_t v740 = v153 + *(int *)(v739 + 64);
      v478 = (void (**)(void, void))v1008;
      sub_100096408(v153 + *(int *)(v739 + 48), (uint64_t)v1008, (uint64_t *)&unk_100909A40);
      v479 = (void (**)(void, void, void))v997;
      sub_100096408(v740, (uint64_t)v997, (uint64_t *)&unk_100909A40);
      swift_storeEnumTagMultiPayload();
      os_log_t v741 = v986;
      sub_1000BF710((uint64_t)v478, (uint64_t)v986, (uint64_t *)&unk_100909A40);
      uint64_t v742 = v1034;
      v743 = *(unsigned int (**)(os_log_t, uint64_t, uint64_t))(v1034 + 48);
      uint64_t v744 = v1040;
      if (v743(v741, 1, v1040) == 1)
      {
        sub_1000966BC((uint64_t)v741, (uint64_t *)&unk_100909A40);
      }
      else
      {
        v825 = v958;
        (*(void (**)(char *, os_log_t, uint64_t))(v742 + 32))(v958, v741, v744);
        uint64_t v826 = swift_getKeyPath();
        uint64_t v827 = v1032;
        (*(void (**)(uint64_t, char *, uint64_t))(v742 + 16))(v1032, v825, v744);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v742 + 56))(v827, 0, 1, v744);
        sub_10039AE14(v826, v827, (uint64_t *)&unk_100909A40, 0x4025203E204B25, 0xE700000000000000, (uint64_t *)&unk_10090B070);
        swift_release();
        sub_100332FEC();
        v828 = v825;
        v478 = (void (**)(void, void))v1008;
        (*(void (**)(char *, uint64_t))(v742 + 8))(v828, v744);
      }
      v818 = v991;
      sub_1000BF710((uint64_t)v479, (uint64_t)v991, (uint64_t *)&unk_100909A40);
      unsigned int v829 = v743(v818, 1, v744);
      uint64_t v820 = v1042;
      if (v829 == 1) {
        goto LABEL_315;
      }
      uint64_t v830 = v1034;
      v831 = v962;
      (*(void (**)(char *, NSObject *, uint64_t))(v1034 + 32))(v962, v818, v744);
      uint64_t v832 = swift_getKeyPath();
      uint64_t v833 = v1032;
      (*(void (**)(uint64_t, char *, uint64_t))(v830 + 16))(v1032, v831, v744);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v830 + 56))(v833, 0, 1, v744);
      sub_10039AE14(v832, v833, (uint64_t *)&unk_100909A40, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      sub_100332FEC();
      (*(void (**)(char *, uint64_t))(v830 + 8))(v831, v744);
      goto LABEL_317;
    case 0x1Eu:
      unint64_t v475 = *(void *)v153;
      uint64_t v476 = sub_100094134(&qword_100916930);
      uint64_t v477 = v153 + *(int *)(v476 + 64);
      v478 = (void (**)(void, void))v1009;
      sub_100096408(v153 + *(int *)(v476 + 48), (uint64_t)v1009, (uint64_t *)&unk_100909A40);
      v479 = (void (**)(void, void, void))v999;
      sub_100096408(v477, (uint64_t)v999, (uint64_t *)&unk_100909A40);
      swift_storeEnumTagMultiPayload();
      v480 = v987;
      sub_1000BF710((uint64_t)v478, (uint64_t)v987, (uint64_t *)&unk_100909A40);
      uint64_t v481 = v1034;
      v482 = *(unsigned int (**)(void, void, void))(v1034 + 48);
      uint64_t v483 = v1040;
      if (v482(v480, 1, v1040) == 1)
      {
        sub_1000966BC((uint64_t)v480, (uint64_t *)&unk_100909A40);
      }
      else
      {
        v814 = v959;
        (*(void (**)(char *, void (**)(void, void, void, void), uint64_t))(v481 + 32))(v959, v480, v483);
        uint64_t v815 = swift_getKeyPath();
        uint64_t v816 = v1032;
        (*(void (**)(uint64_t, char *, uint64_t))(v481 + 16))(v1032, v814, v483);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v481 + 56))(v816, 0, 1, v483);
        sub_10039AE14(v815, v816, (uint64_t *)&unk_100909A40, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
        swift_release();
        sub_100332FEC();
        v817 = v814;
        v478 = (void (**)(void, void))v1009;
        (*(void (**)(char *, uint64_t))(v481 + 8))(v817, v483);
      }
      v818 = v995;
      sub_1000BF710((uint64_t)v479, (uint64_t)v995, (uint64_t *)&unk_100909A40);
      unsigned int v819 = v482(v818, 1, v483);
      uint64_t v820 = v1042;
      if (v819 == 1)
      {
LABEL_315:
        sub_1000966BC((uint64_t)v818, (uint64_t *)&unk_100909A40);
      }
      else
      {
        uint64_t v821 = v1034;
        v822 = v963;
        (*(void (**)(char *, NSObject *, uint64_t))(v1034 + 32))(v963, v818, v483);
        uint64_t v823 = swift_getKeyPath();
        uint64_t v824 = v1032;
        (*(void (**)(uint64_t, char *, uint64_t))(v821 + 16))(v1032, v822, v483);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v821 + 56))(v824, 0, 1, v483);
        sub_10039AE14(v823, v824, (uint64_t *)&unk_100909A40, 0x4025203C204B25, 0xE700000000000000, (uint64_t *)&unk_10090B070);
        swift_release();
        sub_100332FEC();
        (*(void (**)(char *, uint64_t))(v821 + 8))(v822, v483);
      }
LABEL_317:
      uint64_t v834 = swift_getKeyPath();
      uint64_t v835 = sub_10038E69C(v475);
      uint64_t v1042 = v820;
      swift_bridgeObjectRelease();
      sub_1003A0380(v834, v835, &qword_1009169A8, (uint64_t *)&unk_10090B070);
      swift_release();
      sub_100332FEC();
      sub_1000966BC((uint64_t)v479, (uint64_t *)&unk_100909A40);
      uint64_t v813 = (uint64_t)v478;
      goto LABEL_318;
    case 0x1Fu:
      uint64_t v359 = *(void *)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v360 = swift_getKeyPath();
      sub_100094134((uint64_t *)&unk_10090A050);
      uint64_t v361 = swift_allocObject();
      LOBYTE(v153) = 1;
      sub_1001565E4(v361, 1);
      v363 = v362;
      sub_1000963CC(0, (unint64_t *)&qword_100910E40);
      id v364 = [(id)swift_getObjCClassFromMetadata() entity];
      v363[3] = sub_1000963CC(0, (unint64_t *)&unk_100917C20);
      void *v363 = v364;
      REMCDList.cleanUpAfterLocalObjectMerge()();
      sub_10039F598(v360, 24868, (void *)0xE200000000000000, 0xD000000000000016, (void *)0x80000001007D39B0, v359, v365, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      LODWORD(v1039) = 0;
      int v210 = 1;
      int v200 = 1;
      goto LABEL_394;
    case 0x20u:
      uint64_t v484 = *(void *)v153;
      uint64_t v485 = v1010;
      swift_storeEnumTagMultiPayload();
      v1027 = (char *)sub_1001DD9A4(v484);
      if (!v1027) {
        goto LABEL_294;
      }
      uint64_t v486 = v1026;
      uint64_t v487 = *(unsigned __int8 *)(v1026 + 80);
      v1024 = (char *)(v484 + ((v487 + 32) & ~v487));
      LODWORD(v1017) = enum case for REMSearchCriterion.itemTypes(_:);
      LODWORD(v1012) = enum case for REMSearchCriterion.objectID(_:);
      LODWORD(v1011) = enum case for REMSearchCriterion.accountID(_:);
      LODWORD(v1001) = enum case for REMSearchCriterion.listID(_:);
      LODWORD(v998) = enum case for REMSearchCriterion.textualField(_:);
      LODWORD(v992) = enum case for REMSearchCriterion.displayName(_:);
      LODWORD(v984) = enum case for REMSearchCriterion.isCompleted(_:);
      LODWORD(v981) = enum case for REMSearchCriterion.completionDate(_:);
      LODWORD(v975) = enum case for REMSearchCriterion.hasLocation(_:);
      LODWORD(v974) = enum case for REMSearchCriterion.location(_:);
      LODWORD(v973) = enum case for REMSearchCriterion.dueDate(_:);
      LODWORD(v972) = enum case for REMSearchCriterion.hasDueDate(_:);
      LODWORD(v971) = enum case for REMSearchCriterion.modifiedDate(_:);
      LODWORD(v970) = enum case for REMSearchCriterion.creationDate(_:);
      LODWORD(v969) = enum case for REMSearchCriterion.isRecurrent(_:);
      LODWORD(v968) = enum case for REMSearchCriterion.isFlagged(_:);
      LODWORD(v967) = enum case for REMSearchCriterion.spotlightItemIdentifier(_:);
      v965 = (void (**)(char *, char *, uint64_t))(v980 + 32);
      v963 = v980 + 16;
      v962 = v980 + 88;
      LODWORD(v966) = enum case for REMSearchCriterion.daCalendarItemUniqueIdentifier(_:);
      v1009 = (char **)(v978 + 16);
      v1008 = (char **)(v978 + 8);
      v960 = (void (**)(char *, uint64_t))(v980 + 8);
      LODWORD(v978) = enum case for REMSearchCriterion.listType(_:);
      LODWORD(v961) = enum case for REMSearchableListType.grocery(_:);
      v994 = (void (**)(char *, uint64_t))(v979 + 1);
      v990 = (char **)(v979 + 2);
      v991 = (v979 + 4);
      v989 = (char **)(v979 + 11);
      LODWORD(v959) = enum case for REMSearchableListType.none(_:);
      v996 = (char **)(v977 + 104);
      v997 = (char **)(v977 + 32);
      v1000 = (char *)(v977 + 8);
      LODWORD(v988) = enum case for REMStringMatchingStyle.exact(_:);
      uint64_t v1007 = (v487 + 16) & ~v487;
      uint64_t v1006 = v1007 + v976;
      v1003 = (char *)(v487 | 7);
      LODWORD(v983) = enum case for REMStringMatchingStyle.prefix(_:);
      LODWORD(v980) = enum case for REMStringMatchingStyle.word(_:);
      LODWORD(v995) = enum case for REMSearchCriterion.Inclusion.includeForSiri(_:);
      uint64_t v1028 = v1026 + 16;
      uint64_t v1015 = v1026 + 88;
      v1013 = (char *)(v1026 + 96);
      v1014 = (char *)(v1026 + 8);
      v979 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1034 + 48);
      v1002 = (char **)(v1026 + 32);
      v987 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56);
      uint64_t v993 = v484;
      swift_bridgeObjectRetain();
      uint64_t v488 = 0;
      v999 = (char **)((char *)&type metadata for Any + 8);
      v489 = v1019;
      uint64_t v490 = v1025;
      v491 = v1018;
      uint64_t v492 = v1022;
      v493 = (unint64_t *)v1030;
      do
      {
        if (__OFADD__(v488, 1))
        {
          __break(1u);
LABEL_400:
          __break(1u);
LABEL_401:
          __break(1u);
LABEL_402:
          __break(1u);
LABEL_403:
          __break(1u);
LABEL_404:
          __break(1u);
LABEL_405:
          __break(1u);
LABEL_406:
          __break(1u);
LABEL_407:
          __break(1u);
          goto LABEL_408;
        }
        v1039 = (void (*)(uint64_t, uint64_t))(v488 + 1);
        uint64_t v494 = *(void *)(v486 + 72);
        uint64_t v1029 = v488;
        v495 = *(void (**)(char *, char *, uint64_t))(v486 + 16);
        v496 = v1033;
        v495(v1033, &v1024[v494 * v488], v492);
        v495((char *)v493, v496, v492);
        int v497 = (*(uint64_t (**)(unint64_t *, uint64_t))(v486 + 88))(v493, v492);
        if (v497 == v1017)
        {
          (*(void (**)(char *, uint64_t))v1014)(v496, v492);
          (*(void (**)(unint64_t *, uint64_t))v1013)(v493, v492);
          swift_bridgeObjectRelease();
LABEL_146:
          v532 = (char *)v1039;
          goto LABEL_147;
        }
        if (v497 == v1012)
        {
          (*(void (**)(unint64_t *, uint64_t))v1013)(v493, v492);
          unint64_t v498 = *v493;
          uint64_t v499 = swift_getKeyPath();
          uint64_t v500 = v1042;
          uint64_t v501 = sub_10038E69C(v498);
          uint64_t v1042 = v500;
          swift_bridgeObjectRelease();
          uint64_t v502 = v501;
          v493 = (unint64_t *)v1030;
          sub_1003A0380(v499, v502, &qword_1009169A8, (uint64_t *)&unk_10090B070);
          uint64_t v486 = v1026;
          swift_release();
          sub_100332FEC();
          uint64_t v490 = v1025;
          (*(void (**)(char *, uint64_t))v1014)(v1033, v492);
          goto LABEL_146;
        }
        v503 = v1023;
        if (v497 == v1011)
        {
          (*(void (**)(char *, uint64_t))v1013)(v1030, v492);
          swift_bridgeObjectRelease();
          goto LABEL_134;
        }
        if (v497 == v1001)
        {
          v520 = (void **)v1030;
          (*(void (**)(char *, uint64_t))v1013)(v1030, v492);
          v521 = (char *)*v520;
          uint64_t v522 = sub_100094134(&qword_100916928);
          ((void (*)(char *, char *, uint64_t))*v997)(v491, (char *)v520 + *(int *)(v522 + 48), v490);
          v523 = v491;
          v524 = v1004;
          ((void (*)(char *, void, uint64_t))*v996)(v1004, v995, v490);
          uint64_t v525 = v490;
          char v526 = static REMSearchCriterion.Inclusion.== infix(_:_:)();
          v527 = *(NSObject **)v1000;
          (*(void (**)(char *, uint64_t))v1000)(v524, v525);
          if (v526)
          {
            uint64_t v528 = swift_getKeyPath();
            id v529 = [v521 uuid];
            uint64_t v530 = (uint64_t)v1035;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            (*v987)(v530, 0, 1, v1036);
            sub_10032E298(v528, v530);
            swift_release();
            sub_100332FEC();

            ((void (*)(char *, uint64_t))v527)(v523, v525);
            uint64_t v531 = v1022;
            (*(void (**)(char *, uint64_t))v1014)(v1033, v1022);
            uint64_t v490 = v525;
            v491 = v523;
            uint64_t v492 = v531;
            goto LABEL_144;
          }
          v985 = v521;
          v986 = v527;
          uint64_t v540 = sub_100398910();
          uint64_t v541 = v1021;
          ((void (*)(char *, uint64_t, uint64_t))*v1009)(v503, v540, v1021);
          v542 = v1016;
          v543 = v1033;
          uint64_t v544 = v1022;
          v495(v1016, v1033, v1022);
          uint64_t v545 = swift_allocObject();
          ((void (*)(uint64_t, char *, uint64_t))*v1002)(v545 + v1007, v542, v544);
          v546 = Logger.logObject.getter();
          int v547 = static os_log_type_t.fault.getter();
          uint64_t v548 = v541;
          uint64_t v549 = swift_allocObject();
          *(unsigned char *)(v549 + 16) = 32;
          uint64_t v550 = swift_allocObject();
          *(unsigned char *)(v550 + 16) = 8;
          uint64_t v551 = swift_allocObject();
          *(void *)(v551 + 16) = sub_10039C18C;
          *(void *)(v551 + 24) = v545;
          uint64_t v552 = swift_allocObject();
          *(void *)(v552 + 16) = sub_100332F00;
          *(void *)(v552 + 24) = v551;
          sub_100094134((uint64_t *)&unk_100914A10);
          uint64_t v553 = swift_allocObject();
          sub_1001565E4(v553, 3);
          void *v554 = sub_100332F14;
          v554[1] = v549;
          v554[2] = sub_100332F14;
          v554[3] = v550;
          v554[4] = sub_100332F0C;
          v554[5] = v552;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v982) = v547;
          if (os_log_type_enabled(v546, (os_log_type_t)v547))
          {
            v555 = (uint8_t *)sub_10008C368();
            uint64_t v556 = swift_slowAlloc();
            v1045[0] = 0;
            *(_WORD *)v555 = 258;
            v1044[0] = v556;
            v1048[0] = v555 + 2;
            v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332F14;
            uint64_t v1047 = v549;
            uint64_t v557 = v1042;
            sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
            uint64_t v486 = v1026;
            if (v557) {
              goto LABEL_421;
            }
            swift_release();
            v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332F14;
            uint64_t v1047 = v550;
            sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
            swift_release();
            v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332F0C;
            uint64_t v1047 = v552;
            sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
            uint64_t v1042 = 0;
            v489 = v1019;
            uint64_t v558 = v1021;
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v546, (os_log_type_t)v982, "Dropping unsupported criterion for searching REMCDReminder. {criterion: %s}", v555, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            sub_10008C35C();

            ((void (*)(char *, uint64_t))*v1008)(v1023, v558);
            v491 = v1018;
            uint64_t v490 = v1025;
            ((void (*)(char *, uint64_t))v986)(v1018, v1025);
            uint64_t v492 = v1022;
            (*(void (**)(char *, uint64_t))v1014)(v1033, v1022);
            goto LABEL_145;
          }
          swift_release();
          swift_release();
          swift_release();

          ((void (*)(char *, uint64_t))*v1008)(v1023, v548);
          v491 = v1018;
          uint64_t v490 = v1025;
          ((void (*)(char *, uint64_t))v986)(v1018, v1025);
          uint64_t v492 = v1022;
          (*(void (**)(char *, uint64_t))v1014)(v543, v1022);
          v489 = v1019;
LABEL_144:
          uint64_t v486 = v1026;
LABEL_145:
          v493 = (unint64_t *)v1030;
          goto LABEL_146;
        }
        if (v497 != v998)
        {
          v493 = (unint64_t *)v1030;
          if (v497 == v992)
          {
            (*(void (**)(char *, uint64_t))v1013)(v1030, v492);
            swift_bridgeObjectRelease();
            uint64_t v559 = sub_100094134((uint64_t *)&unk_100915A00);
            (*v994)((char *)v493 + *(int *)(v559 + 48), v1005);
LABEL_134:
            uint64_t v504 = sub_100398910();
            v505 = v1020;
            uint64_t v506 = v1021;
            ((void (*)(char *, uint64_t, uint64_t))*v1009)(v1020, v504, v1021);
            v507 = v1016;
            v495(v1016, v1033, v492);
            uint64_t v508 = swift_allocObject();
            ((void (*)(uint64_t, char *, uint64_t))*v1002)(v508 + v1007, v507, v492);
            v509 = Logger.logObject.getter();
            os_log_type_t v510 = static os_log_type_t.fault.getter();
            uint64_t v511 = swift_allocObject();
            *(unsigned char *)(v511 + 16) = 32;
            uint64_t v512 = swift_allocObject();
            *(unsigned char *)(v512 + 16) = 8;
            uint64_t v513 = swift_allocObject();
            *(void *)(v513 + 16) = sub_10039C18C;
            *(void *)(v513 + 24) = v508;
            uint64_t v514 = swift_allocObject();
            *(void *)(v514 + 16) = sub_10033275C;
            *(void *)(v514 + 24) = v513;
            sub_100094134((uint64_t *)&unk_100914A10);
            uint64_t v515 = swift_allocObject();
            sub_1001565E4(v515, 3);
            void *v516 = sub_100332744;
            v516[1] = v511;
            v516[2] = sub_100332F14;
            v516[3] = v512;
            v516[4] = sub_100332764;
            v516[5] = v514;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v509, v510))
            {
              v517 = (uint8_t *)sub_10008C368();
              uint64_t v518 = swift_slowAlloc();
              v1045[0] = 0;
              *(_WORD *)v517 = 258;
              v1044[0] = v518;
              v1048[0] = v517 + 2;
              v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332744;
              uint64_t v1047 = v511;
              uint64_t v519 = v1042;
              sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
              if (v519) {
                goto LABEL_421;
              }
              swift_release();
              v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332F14;
              uint64_t v1047 = v512;
              sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
              uint64_t v486 = v1026;
              swift_release();
              v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332764;
              uint64_t v1047 = v514;
              sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
              uint64_t v1042 = 0;
              v491 = v1018;
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v509, v510, "Dropping unsupported criterion for searching REMCDReminder. {criterion: %s}", v517, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              sub_10008C35C();

              ((void (*)(char *, uint64_t))*v1008)(v1020, v1021);
LABEL_137:
              uint64_t v492 = v1022;
              (*(void (**)(char *, uint64_t))v1014)(v1033, v1022);
              v489 = v1019;
              uint64_t v490 = v1025;
              goto LABEL_145;
            }
            swift_release();
            swift_release();
            swift_release();

            ((void (*)(char *, uint64_t))*v1008)(v505, v506);
            goto LABEL_142;
          }
          if (v497 == v984)
          {
            (*(void (**)(char *, uint64_t))v1014)(v1033, v492);
            sub_1003A136C(v1010, _s10PredicatesO19CompletionPredicateOMa);
            (*(void (**)(unint64_t *, uint64_t))v1013)(v493, v492);
            swift_storeEnumTagMultiPayload();
            goto LABEL_146;
          }
          if (v497 == v981)
          {
            (*(void (**)(char *, uint64_t))v1013)(v1030, v492);
            uint64_t v561 = sub_100398910();
            v562 = v951;
            uint64_t v563 = v1021;
            ((void (*)(char *, uint64_t, uint64_t))*v1009)(v951, v561, v1021);
            uint64_t v564 = swift_allocObject();
            *(void *)(v564 + 16) = v993;
            uint64_t v565 = swift_allocObject();
            *(void *)(v565 + 16) = sub_10039C32C;
            *(void *)(v565 + 24) = v564;
            swift_bridgeObjectRetain();
            v566 = Logger.logObject.getter();
            os_log_type_t v567 = static os_log_type_t.fault.getter();
            uint64_t v568 = swift_allocObject();
            *(unsigned char *)(v568 + 16) = 32;
            uint64_t v569 = swift_allocObject();
            *(unsigned char *)(v569 + 16) = 8;
            uint64_t v570 = v563;
            uint64_t v571 = swift_allocObject();
            *(void *)(v571 + 16) = sub_1003A94DC;
            *(void *)(v571 + 24) = v565;
            uint64_t v572 = swift_allocObject();
            *(void *)(v572 + 16) = sub_100332F00;
            *(void *)(v572 + 24) = v571;
            sub_100094134((uint64_t *)&unk_100914A10);
            uint64_t v573 = swift_allocObject();
            sub_1001565E4(v573, 3);
            void *v574 = sub_100332F14;
            v574[1] = v568;
            v574[2] = sub_100332F14;
            v574[3] = v569;
            v574[4] = sub_100332F0C;
            v574[5] = v572;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v566, v567))
            {
              v986 = v566;
              v575 = (uint8_t *)sub_10008C368();
              uint64_t v576 = swift_slowAlloc();
              v1045[0] = 0;
              *(_WORD *)v575 = 258;
              v1044[0] = v576;
              v1048[0] = v575 + 2;
              v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332F14;
              uint64_t v1047 = v568;
              uint64_t v577 = v1042;
              sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
              if (v577) {
                goto LABEL_421;
              }
              swift_release();
              v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332F14;
              uint64_t v1047 = v569;
              sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
              uint64_t v486 = v1026;
              swift_release();
              v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332F0C;
              uint64_t v1047 = v572;
              sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
              uint64_t v1042 = 0;
              v578 = v951;
              v491 = v1018;
              swift_release();
              os_log_t v579 = v986;
              _os_log_impl((void *)&_mh_execute_header, v986, v567, "Searching REMCDReminder by completionDate is unsupported. {criteria: %s}", v575, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              sub_10008C35C();

              ((void (*)(char *, uint64_t))*v1008)(v578, v1021);
              uint64_t v492 = v1022;
              (*(void (**)(char *, uint64_t))v1014)(v1033, v1022);
            }
            else
            {
              swift_release();
              swift_release();
              swift_release();

              ((void (*)(char *, uint64_t))*v1008)(v562, v570);
              uint64_t v492 = v1022;
              (*(void (**)(char *, uint64_t))v1014)(v1033, v1022);
              v491 = v1018;
              uint64_t v486 = v1026;
            }
            uint64_t v600 = sub_100094134((uint64_t *)&unk_10091C320);
            v493 = (unint64_t *)v1030;
            sub_1000966BC((uint64_t)&v1030[*(int *)(v600 + 48)], (uint64_t *)&unk_100909A40);
            sub_1000966BC((uint64_t)v493, (uint64_t *)&unk_100909A40);
            v489 = v1019;
            uint64_t v490 = v1025;
            goto LABEL_146;
          }
          if (v497 == v975)
          {
LABEL_171:
            uint64_t v581 = sub_100398910();
            v582 = v950;
            uint64_t v583 = v1021;
            ((void (*)(char *, uint64_t, uint64_t))*v1009)(v950, v581, v1021);
            uint64_t v584 = swift_allocObject();
            *(void *)(v584 + 16) = v993;
            uint64_t v585 = swift_allocObject();
            *(void *)(v585 + 16) = sub_1003A951C;
            *(void *)(v585 + 24) = v584;
            swift_bridgeObjectRetain();
            v586 = Logger.logObject.getter();
            os_log_type_t v587 = static os_log_type_t.fault.getter();
            uint64_t v588 = swift_allocObject();
            *(unsigned char *)(v588 + 16) = 32;
            uint64_t v589 = swift_allocObject();
            *(unsigned char *)(v589 + 16) = 8;
            uint64_t v590 = v583;
            uint64_t v591 = swift_allocObject();
            *(void *)(v591 + 16) = sub_10039C304;
            *(void *)(v591 + 24) = v585;
            uint64_t v592 = swift_allocObject();
            *(void *)(v592 + 16) = sub_100332F00;
            *(void *)(v592 + 24) = v591;
            sub_100094134((uint64_t *)&unk_100914A10);
            uint64_t v593 = swift_allocObject();
            sub_1001565E4(v593, 3);
            void *v594 = sub_100332F14;
            v594[1] = v588;
            v594[2] = sub_100332F14;
            v594[3] = v589;
            v594[4] = sub_100332F0C;
            v594[5] = v592;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v586, v587))
            {
              v986 = v586;
              v595 = (uint8_t *)sub_10008C368();
              uint64_t v596 = swift_slowAlloc();
              v1045[0] = 0;
              *(_WORD *)v595 = 258;
              v1044[0] = v596;
              v1048[0] = v595 + 2;
              v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332F14;
              uint64_t v1047 = v588;
              uint64_t v597 = v1042;
              sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
              if (v597) {
                goto LABEL_421;
              }
              swift_release();
              v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332F14;
              uint64_t v1047 = v589;
              sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
              uint64_t v486 = v1026;
              swift_release();
              v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100332F0C;
              uint64_t v1047 = v592;
              sub_10008F21C(&v1046, (uint64_t)v1048, (uint64_t)v1045, (uint64_t)v1044);
              uint64_t v1042 = 0;
              v598 = v950;
              v491 = v1018;
              swift_release();
              os_log_t v599 = v986;
              _os_log_impl((void *)&_mh_execute_header, v986, v587, "Searching REMCDReminder by location is unsupported. {criteria: %s}", v595, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              sub_10008C35C();

              ((void (*)(char *, uint64_t))*v1008)(v598, v1021);
              goto LABEL_137;
            }
            swift_release();
            swift_release();
            swift_release();

            ((void (*)(char *, uint64_t))*v1008)(v582, v590);
LABEL_142:
            uint64_t v492 = v1022;
            (*(void (**)(char *, uint64_t))v1014)(v1033, v1022);
          }
          else
          {
            if (v497 == v974)
            {
              (*(void (**)(char *, uint64_t))v1013)(v1030, v492);
              swift_bridgeObjectRelease();
              uint64_t v580 = sub_100094134((uint64_t *)&unk_100915A00);
              (*v994)((char *)v493 + *(int *)(v580 + 48), v1005);
              goto LABEL_171;
            }
            if (v497 == v973)
            {
              (*(void (**)(char *, uint64_t))v1013)(v1030, v492);
              v601 = (char *)v493 + *(int *)(sub_100094134((uint64_t *)&unk_10091C320) + 48);
              uint64_t v602 = v948;
              sub_100096408((uint64_t)v493, v948, (uint64_t *)&unk_100909A40);
              uint64_t v603 = (uint64_t)v601;
              uint64_t v604 = v949;
              sub_100096408(v603, v949, (uint64_t *)&unk_100909A40);
              v605 = *v979;
              if ((*v979)(v602, 1, v1040) != 1)
              {
                uint64_t v606 = swift_getKeyPath();
                uint64_t v607 = v1032;
                sub_1000BF710(v948, v1032, (uint64_t *)&unk_100909A40);
                sub_10039AE14(v606, v607, (uint64_t *)&unk_100909A40, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
                swift_release();
                sub_100332FEC();
                uint64_t v604 = v949;
              }
              if (v605(v604, 1, v1040) != 1)
              {
                uint64_t v608 = swift_getKeyPath();
                uint64_t v609 = v1032;
                sub_1000BF710(v949, v1032, (uint64_t *)&unk_100909A40);
                sub_10039AE14(v608, v609, (uint64_t *)&unk_100909A40, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
                swift_release();
                sub_100332FEC();
                uint64_t v604 = v949;
              }
              (*(void (**)(char *, uint64_t))v1014)(v1033, v492);
              sub_1000966BC(v604, (uint64_t *)&unk_100909A40);
              sub_1000966BC(v948, (uint64_t *)&unk_100909A40);
LABEL_160:
              uint64_t v490 = v1025;
              uint64_t v486 = v1026;
              goto LABEL_146;
            }
            if (v497 == v972)
            {
              (*(void (**)(char *, uint64_t))v1013)(v1030, v492);
              int v610 = *(unsigned __int8 *)v493;
              uint64_t v611 = swift_getKeyPath();
              if (v610) {
                uint64_t v612 = 0x696E203D21204B25;
              }
              else {
                uint64_t v612 = 0x696E203D3D204B25;
              }
              sub_1003A11D4(v611, v612, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
              swift_release();
              sub_100332FEC();
              (*(void (**)(char *, uint64_t))v1014)(v1033, v492);
              uint64_t v490 = v1025;
              goto LABEL_146;
            }
            if (v497 == v971)
            {
              v613 = v1030;
              (*(void (**)(char *, uint64_t))v1013)(v1030, v1022);
              uint64_t v614 = (uint64_t)&v613[*(int *)(sub_100094134((uint64_t *)&unk_10091C320) + 48)];
              uint64_t v615 = (uint64_t)v613;
              uint64_t v616 = v946;
              sub_100096408(v615, v946, (uint64_t *)&unk_100909A40);
              sub_100096408(v614, v947, (uint64_t *)&unk_100909A40);
              v617 = *v979;
              if ((*v979)(v616, 1, v1040) != 1)
              {
                uint64_t v618 = swift_getKeyPath();
                uint64_t v619 = v1032;
                sub_1000BF710(v946, v1032, (uint64_t *)&unk_100909A40);
                sub_10039AE14(v618, v619, (uint64_t *)&unk_100909A40, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
                swift_release();
                sub_100332FEC();
              }
              if (v617(v947, 1, v1040) != 1)
              {
                uint64_t v620 = swift_getKeyPath();
                uint64_t v621 = v1032;
                sub_1000BF710(v947, v1032, (uint64_t *)&unk_100909A40);
                sub_10039AE14(v620, v621, (uint64_t *)&unk_100909A40, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
                swift_release();
                sub_100332FEC();
              }
              uint64_t v492 = v1022;
              (*(void (**)(char *, uint64_t))v1014)(v1033, v1022);
              sub_1000966BC(v947, (uint64_t *)&unk_100909A40);
              uint64_t v622 = v946;
            }
            else
            {
              if (v497 != v970)
              {
                if (v497 == v969)
                {
                  v493 = (unint64_t *)v1030;
                  uint64_t v492 = v1022;
                  (*(void (**)(char *, uint64_t))v1013)(v1030, v1022);
                  int v632 = *(unsigned __int8 *)v493;
                  uint64_t v633 = swift_getKeyPath();
                  if (v632) {
                    uint64_t v634 = 0xEE004025203E2074;
                  }
                  else {
                    uint64_t v634 = 0xEF4025203D3D2074;
                  }
                  sub_1003A0634(v633, 0, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, v634, (uint64_t *)&unk_10090B070);
                  swift_release();
                }
                else
                {
                  if (v497 == v968)
                  {
                    v635 = v1030;
                    (*(void (**)(char *, uint64_t))v1013)(v1030, v1022);
                    int v636 = *v635;
                    uint64_t v637 = swift_getKeyPath();
                    if (v636 == 1) {
                      sub_1003A0634(v637, 0, (uint64_t)&type metadata for Int64, 0x4025203E204B25, 0xE700000000000000, (uint64_t *)&unk_10090B070);
                    }
                    else {
                      sub_10032E2CC(v637, 0);
                    }
                    swift_release();
                    sub_100332FEC();
                    goto LABEL_142;
                  }
                  if (v497 == v967)
                  {
                    (*(void (**)(char *, uint64_t))v1013)(v1030, v1022);
                    swift_bridgeObjectRelease();
                    uint64_t v638 = sub_100398910();
                    ((void (*)(char *, uint64_t, uint64_t))*v1009)(v943, v638, v1021);
                    v639 = Logger.logObject.getter();
                    os_log_type_t v640 = static os_log_type_t.error.getter();
                    v641 = sub_1001DDA90(0);
                    os_log_type_t v642 = v640;
                    if (os_log_type_enabled(v639, v640))
                    {
                      uint64_t v643 = sub_10008C368();
                      v1048[0] = 0;
                      v1045[0] = 0;
                      *(_WORD *)uint64_t v643 = 0;
                      v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v643 + 2);
                      uint64_t v644 = v1042;
                      sub_10038E604((uint64_t)v641, (uint64_t)&v1046, (uint64_t)v1048, (uint64_t)v1045);
                      uint64_t v1042 = v644;
                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v639, v642, "Searching by spotlightItemIdentifier in CoreData is unsupported", (uint8_t *)v643, 2u);
                      sub_10008C35C();
                    }
                    else
                    {

                      swift_bridgeObjectRelease();
                    }
                    ((void (*)(char *, uint64_t))*v1008)(v943, v1021);
                    goto LABEL_142;
                  }
                  if (v497 != v966)
                  {
                    if (v497 != v978) {
                      goto LABEL_422;
                    }
                    v649 = v1030;
                    (*(void (**)(char *, uint64_t))v1013)(v1030, v1022);
                    v650 = v941;
                    v651 = v649;
                    uint64_t v652 = v942;
                    (*v965)(v941, v651, v942);
                    v653 = v940;
                    (*(void (**)(char *, char *, uint64_t))v963)(v940, v650, v652);
                    int v654 = (*(uint64_t (**)(char *, uint64_t))v962)(v653, v652);
                    if (v654 == v961)
                    {
                      uint64_t v655 = swift_getKeyPath();
                      sub_1003A11D4(v655, 0x4559203D3D204B25, 0xE900000000000053, (uint64_t *)&unk_10090B070);
                      swift_release();
                      sub_100332FEC();
                    }
                    else
                    {
                      if (v654 != v959) {
                        goto LABEL_422;
                      }
                      uint64_t v656 = sub_100398910();
                      ((void (*)(char *, uint64_t, uint64_t))*v1009)(v939, v656, v1021);
                      v657 = Logger.logObject.getter();
                      os_log_type_t v658 = static os_log_type_t.default.getter();
                      v659 = sub_1001DDA90(0);
                      os_log_type_t v660 = v658;
                      if (os_log_type_enabled(v657, v658))
                      {
                        uint64_t v661 = sub_10008C368();
                        v1048[0] = 0;
                        v1045[0] = 0;
                        *(_WORD *)uint64_t v661 = 0;
                        v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v661 + 2);
                        uint64_t v662 = v1042;
                        sub_10038E604((uint64_t)v659, (uint64_t)&v1046, (uint64_t)v1048, (uint64_t)v1045);
                        uint64_t v1042 = v662;
                        swift_bridgeObjectRelease();
                        _os_log_impl((void *)&_mh_execute_header, v657, v660, "Dropping unsupported .none list type criterion", (uint8_t *)v661, 2u);
                        sub_10008C35C();
                      }
                      else
                      {

                        swift_bridgeObjectRelease();
                      }
                      ((void (*)(char *, uint64_t))*v1008)(v939, v1021);
                    }
                    (*v960)(v941, v942);
                    goto LABEL_142;
                  }
                  v645 = (uint64_t *)v1030;
                  uint64_t v492 = v1022;
                  (*(void (**)(char *, uint64_t))v1013)(v1030, v1022);
                  uint64_t v646 = *v645;
                  uint64_t v647 = v645[1];
                  uint64_t v648 = swift_getKeyPath();
                  sub_10032E05C(v648, v646, v647);
                  swift_release();
                  swift_bridgeObjectRelease();
                  v493 = (unint64_t *)v645;
                }
                sub_100332FEC();
                (*(void (**)(char *, uint64_t))v1014)(v1033, v492);
                v489 = v1019;
                uint64_t v490 = v1025;
                v491 = v1018;
                uint64_t v486 = v1026;
                goto LABEL_146;
              }
              v623 = v1030;
              (*(void (**)(char *, uint64_t))v1013)(v1030, v1022);
              uint64_t v624 = (uint64_t)&v623[*(int *)(sub_100094134((uint64_t *)&unk_10091C320) + 48)];
              uint64_t v625 = (uint64_t)v623;
              uint64_t v626 = v944;
              sub_100096408(v625, v944, (uint64_t *)&unk_100909A40);
              sub_100096408(v624, v945, (uint64_t *)&unk_100909A40);
              v627 = *v979;
              if ((*v979)(v626, 1, v1040) != 1)
              {
                uint64_t v628 = swift_getKeyPath();
                uint64_t v629 = v1032;
                sub_1000BF710(v944, v1032, (uint64_t *)&unk_100909A40);
                sub_10039AE14(v628, v629, (uint64_t *)&unk_100909A40, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
                swift_release();
                sub_100332FEC();
              }
              if (v627(v945, 1, v1040) != 1)
              {
                uint64_t v630 = swift_getKeyPath();
                uint64_t v631 = v1032;
                sub_1000BF710(v945, v1032, (uint64_t *)&unk_100909A40);
                sub_10039AE14(v630, v631, (uint64_t *)&unk_100909A40, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
                swift_release();
                sub_100332FEC();
              }
              uint64_t v492 = v1022;
              (*(void (**)(char *, uint64_t))v1014)(v1033, v1022);
              sub_1000966BC(v945, (uint64_t *)&unk_100909A40);
              uint64_t v622 = v944;
            }
            sub_1000966BC(v622, (uint64_t *)&unk_100909A40);
          }
          v489 = v1019;
          uint64_t v490 = v1025;
          v491 = v1018;
          goto LABEL_144;
        }
        v493 = (unint64_t *)v1030;
        (*(void (**)(char *, uint64_t))v1013)(v1030, v492);
        uint64_t v534 = *v493;
        uint64_t v533 = v493[1];
        uint64_t v535 = sub_100094134((uint64_t *)&unk_100915A00);
        uint64_t v536 = v1005;
        ((void (*)(char *, char *, uint64_t))v991->isa)(v489, (char *)v493 + *(int *)(v535 + 48), v1005);
        v537 = v964;
        ((void (*)(char *, char *, uint64_t))*v990)(v964, v489, v536);
        int v538 = ((uint64_t (*)(char *, uint64_t))*v989)(v537, v536);
        if (v538 != v988)
        {
          if (v538 != v983 && v538 != v980) {
            goto LABEL_422;
          }
          uint64_t v560 = swift_getKeyPath();
          sub_10039F92C(v560, v534, v533, 6, (uint64_t *)&unk_10090B070);
          swift_release();
          sub_100332FEC();
          (*v994)(v489, v1005);
          (*(void (**)(char *, uint64_t))v1014)(v1033, v492);
          goto LABEL_160;
        }
        uint64_t v539 = swift_getKeyPath();
        sub_10032E05C(v539, v534, v533);
        swift_release();
        swift_bridgeObjectRelease();
        sub_100332FEC();
        (*v994)(v489, v536);
        (*(void (**)(char *, uint64_t))v1014)(v1033, v492);
        uint64_t v490 = v1025;
        uint64_t v486 = v1026;
        v532 = (char *)v1039;
LABEL_147:
        uint64_t v488 = v1029 + 1;
      }
      while (v532 != v1027);
      swift_bridgeObjectRelease();
      uint64_t v485 = v1010;
LABEL_294:
      swift_bridgeObjectRelease();
      sub_10039BE98(v485, (uint64_t)v1043);
LABEL_391:
      LODWORD(v1039) = 0;
      int v210 = 1;
LABEL_392:
      int v200 = 1;
LABEL_393:
      LOBYTE(v153) = 1;
LABEL_394:
      sub_100398328(0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_395:
      uint64_t v913 = swift_getKeyPath();
      sub_1003A11D4(v913, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100094134(&qword_10090C688);
      uint64_t inited = swift_initStackObject();
      uint64_t v915 = sub_1001561D8(inited, 2);
      v917 = v916;
      uint64_t v918 = swift_getKeyPath();
      uint64_t v919 = sub_1003A11D4(v918, 0x696E203D3D204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
      swift_release();
      uint64_t *v917 = v919;
      uint64_t v920 = swift_getKeyPath();
      uint64_t v921 = sub_1003A11D4(v920, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      v917[1] = v921;
      sub_10015443C();
      sub_100397E5C(v915);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v922 = swift_initStackObject();
      uint64_t v923 = sub_1001561D8(v922, 2);
      v925 = v924;
      uint64_t v926 = swift_getKeyPath();
      uint64_t v927 = sub_1003A11D4(v926, 0x696E203D3D204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
      swift_release();
      uint64_t *v925 = v927;
      uint64_t v928 = swift_getKeyPath();
      uint64_t v929 = sub_1003A11D4(v928, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      v925[1] = v929;
      sub_10015443C();
      sub_100397E5C(v923);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if ((v153 & 1) == 0)
      {
LABEL_330:
        v843 = v1038;
        if (v200) {
          goto LABEL_397;
        }
LABEL_331:
        if (!v210) {
          goto LABEL_333;
        }
        goto LABEL_332;
      }
LABEL_396:
      sub_100094134(&qword_10090C688);
      uint64_t v930 = swift_initStackObject();
      uint64_t v931 = sub_1001561D8(v930, 2);
      v933 = v932;
      uint64_t v934 = swift_getKeyPath();
      uint64_t v935 = sub_1003A11D4(v934, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      uint64_t *v933 = v935;
      uint64_t v936 = swift_getKeyPath();
      uint64_t v937 = sub_1003A11D4(v936, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      v933[1] = v937;
      sub_10015443C();
      sub_1002F52FC(v931);
      sub_100332FEC();
      v843 = v1038;
      if ((v200 & 1) == 0) {
        goto LABEL_331;
      }
LABEL_397:
      uint64_t v938 = swift_getKeyPath();
      sub_1003A11D4(v938, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      sub_100332FEC();
      if (v210)
      {
LABEL_332:
        uint64_t v844 = swift_getKeyPath();
        id v845 = [self localInternalAccountID];
        id v846 = [v845 uuid];

        uint64_t v847 = (uint64_t)v1035;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v847, 0, 1, v1036);
        sub_10039B56C(v844, v847);
        swift_release();
        sub_100332FEC();
      }
LABEL_333:
      uint64_t v848 = (uint64_t)v1043;
      sub_10039BBFC((uint64_t)v1043, (uint64_t)v843, _s10PredicatesO19CompletionPredicateOMa);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v850 = v1040;
      switch(EnumCaseMultiPayload)
      {
        case 1:
          uint64_t v851 = v1034;
          uint64_t v852 = v1031;
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(v1034 + 32))(v1031, v843, v1040);
          sub_100094134(&qword_10090C688);
          uint64_t v872 = swift_initStackObject();
          uint64_t v873 = sub_1001561D8(v872, 2);
          v875 = v874;
          uint64_t v876 = swift_getKeyPath();
          uint64_t v877 = sub_1003A07F0(v876, (uint64_t *)&unk_10090B070);
          swift_release();
          uint64_t *v875 = v877;
          uint64_t v878 = swift_getKeyPath();
          uint64_t v879 = v1032;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v851 + 16))(v1032, v852, v850);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v851 + 56))(v879, 0, 1, v850);
          uint64_t v880 = sub_10039AE14(v878, v879, (uint64_t *)&unk_100909A40, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
          swift_release();
          v875[1] = v880;
          sub_10015443C();
          sub_1002F52FC(v873);
          goto LABEL_338;
        case 2:
          v862 = sub_10038EEC0(*v843);
          swift_bridgeObjectRelease();
          if (v862[2])
          {
            sub_100094134(&qword_10090C688);
            uint64_t v863 = swift_initStackObject();
            uint64_t v864 = sub_1001561D8(v863, 2);
            v866 = v865;
            uint64_t v867 = swift_getKeyPath();
            uint64_t v868 = sub_1003A11D4(v867, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
            swift_release();
            uint64_t *v866 = v868;
            uint64_t v869 = swift_getKeyPath();
            v870 = sub_1001FF8A4((uint64_t)v862);
            swift_bridgeObjectRelease();
            uint64_t v871 = sub_1003A0380(v869, (uint64_t)v870, &qword_1009169A8, (uint64_t *)&unk_10090B070);
            swift_release();
            v866[1] = v871;
            sub_10015443C();
            sub_100397E5C(v864);
          }
          else
          {
            swift_bridgeObjectRelease();
LABEL_345:
            uint64_t v884 = swift_getKeyPath();
            sub_1003A11D4(v884, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
LABEL_346:
            swift_release();
          }
          sub_100332FEC();
          if ((v1039 & 1) == 0) {
            goto LABEL_341;
          }
          goto LABEL_340;
        case 3:
          goto LABEL_345;
        case 4:
          uint64_t v883 = swift_getKeyPath();
          sub_1003A07F0(v883, (uint64_t *)&unk_10090B070);
          goto LABEL_346;
        case 5:
          goto LABEL_339;
        default:
          uint64_t v851 = v1034;
          uint64_t v852 = v1031;
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(v1034 + 32))(v1031, v843, v1040);
          sub_100094134(&qword_10090C688);
          uint64_t v853 = swift_initStackObject();
          uint64_t v854 = sub_1001561D8(v853, 2);
          v856 = v855;
          uint64_t v857 = swift_getKeyPath();
          uint64_t v858 = sub_1003A11D4(v857, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
          swift_release();
          uint64_t *v856 = v858;
          uint64_t v859 = swift_getKeyPath();
          uint64_t v860 = v1032;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v851 + 16))(v1032, v852, v850);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v851 + 56))(v860, 0, 1, v850);
          uint64_t v861 = sub_10039AE14(v859, v860, (uint64_t *)&unk_100909A40, 0x4025203E204B25, 0xE700000000000000, (uint64_t *)&unk_10090B070);
          swift_release();
          v856[1] = v861;
          sub_10015443C();
          sub_100397E5C(v854);
LABEL_338:
          sub_100332FEC();
          (*(void (**)(uint64_t, uint64_t))(v851 + 8))(v852, v850);
LABEL_339:
          if (v1039)
          {
LABEL_340:
            uint64_t v881 = swift_getKeyPath();
            sub_1003A11D4(v881, 0x696E203D3D204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
            swift_release();
            sub_100332FEC();
          }
LABEL_341:
          uint64_t v195 = sub_1002F52FC(v1049);
          sub_1003A136C(v848, _s10PredicatesO19CompletionPredicateOMa);
          break;
      }
      return v195;
    case 0x21u:
      v264 = *(void **)v153;
      LODWORD(v265) = *(unsigned __int8 *)(v153 + 8);
      LODWORD(v153) = (v265 & 1) == 0 || (v265 - 2) < 5;
      swift_storeEnumTagMultiPayload();
      uint64_t v267 = swift_getKeyPath();
      id v268 = [v264 uuid];
      uint64_t v269 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int v200 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v269, 0, 1, v1036);
      sub_10032E298(v267, v269);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      int v210 = 0;
      goto LABEL_326;
    case 0x22u:
      v196 = *(void **)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v222 = swift_getKeyPath();
      id v223 = [v196 uuid];
      uint64_t v224 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int v200 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v224, 0, 1, v1036);
      sub_10032E298(v222, v224);
      goto LABEL_16;
    case 0x23u:
      uint64_t v206 = *(void **)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v207 = swift_getKeyPath();
      id v208 = [v206 uuid];
      uint64_t v209 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int v210 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v209, 0, 1, v1036);
      sub_10032E298(v207, v209);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v211 = swift_getKeyPath();
      sub_10032E560(v211, 1);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_387;
    case 0x24u:
      v196 = *(void **)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v212 = swift_getKeyPath();
      id v213 = [v196 uuid];
      uint64_t v214 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int v200 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v214, 0, 1, v1036);
      sub_10032E298(v212, v214);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v201 = swift_getKeyPath();
      os_log_t v202 = &type metadata for Int64;
      uint64_t v203 = 0x4025203E204B25;
      uint64_t v204 = 0xE700000000000000;
      goto LABEL_13;
    case 0x25u:
      v196 = *(void **)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v197 = swift_getKeyPath();
      id v198 = [v196 uuid];
      uint64_t v199 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int v200 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v199, 0, 1, v1036);
      sub_10032E298(v197, v199);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v201 = swift_getKeyPath();
      os_log_t v202 = &type metadata for Int;
      uint64_t v203 = 0x6E756F63402E4B25;
      uint64_t v204 = 0xEE004025203E2074;
LABEL_13:
      sub_1003A0634(v201, 0, (uint64_t)v202, v203, v204, (uint64_t *)&unk_10090B070);
LABEL_16:
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      LODWORD(v1039) = 0;
      int v210 = 0;
      LOBYTE(v153) = 1;
      goto LABEL_394;
    case 0x26u:
      v745 = *(void **)v153;
      uint64_t v746 = sub_100094134(&qword_10090B060);
      LODWORD(v265) = *(unsigned __int8 *)(v153 + *(int *)(v746 + 64));
      sub_10039BE98(v153 + *(int *)(v746 + 48), (uint64_t)v164);
      LODWORD(v153) = (v265 & 1) == 0 || (v265 - 2) < 5;
      sub_10039BBFC((uint64_t)v164, (uint64_t)v1043, _s10PredicatesO19CompletionPredicateOMa);
      uint64_t v748 = swift_getKeyPath();
      id v749 = [v745 uuid];
      uint64_t v750 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v750, 0, 1, v1036);
      sub_10032E298(v748, v750);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      sub_1003A136C((uint64_t)v164, _s10PredicatesO19CompletionPredicateOMa);
LABEL_307:
      int v210 = 0;
      int v200 = 0;
      goto LABEL_326;
    case 0x27u:
      unint64_t v678 = *(void *)v153;
      uint64_t v679 = sub_100094134(&qword_100916920);
      sub_100096408(v153 + *(int *)(v679 + 48), v1012, (uint64_t *)&unk_100909A40);
      uint64_t v680 = swift_getKeyPath();
      uint64_t v681 = sub_10038E5A4(v678);
      if (v681)
      {
        uint64_t v682 = v681;
        v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DD9AC();
        sub_1001DD9D0(v682);
        if (v682 < 0) {
          goto LABEL_415;
        }
        uint64_t v683 = 0;
        uint64_t v684 = v1040;
        uint64_t v685 = (uint64_t)v967;
        do
        {
          if (v682 == v683) {
            goto LABEL_404;
          }
          if ((v678 & 0xC000000000000001) != 0) {
            id v686 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v686 = *(id *)(v678 + 8 * v683 + 32);
          }
          v687 = v686;
          v1048[0] = v686;
          uint64_t v688 = v1042;
          sub_100399C28(v1048, v685);

          uint64_t v1042 = v688;
          if (v688) {
            goto LABEL_419;
          }
          ++v683;
          sub_1001DDDB0();
          uint64_t v689 = *((void *)v1046 + 2);
          sub_1001DDE6C(v689);
          sub_1001DDEE4(v689, v685);
          REMCDList.cleanUpAfterLocalObjectMerge()();
        }
        while (v682 != v683);
        swift_bridgeObjectRelease();
        v690 = v1046;
      }
      else
      {
        v690 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DDBD0(0);
        swift_bridgeObjectRelease();
        uint64_t v684 = v1040;
      }
      uint64_t v888 = (uint64_t)v1043;
      sub_1003A0380(v680, (uint64_t)v690, &qword_1009169A8, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v889 = v981;
      sub_100096408(v1012, v981, (uint64_t *)&unk_100909A40);
      uint64_t v890 = v1034;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1034 + 48))(v889, 1, v684) == 1)
      {
        sub_1000966BC(v889, (uint64_t *)&unk_100909A40);
      }
      else
      {
        v891 = *(void (**)(char *, uint64_t, uint64_t))(v890 + 32);
        v892 = v952;
        v891(v952, v889, v684);
        v891((char *)v888, (uint64_t)v892, v684);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_368;
    case 0x28u:
      v287 = *(void **)v153;
      v286 = *(void **)(v153 + 8);
      uint64_t v288 = sub_100094134(&qword_100916918);
      uint64_t v289 = v998;
      sub_100096408(v153 + *(int *)(v288 + 64), v998, (uint64_t *)&unk_100909A40);
      uint64_t v290 = v992;
      sub_1000BF710(v289, v992, (uint64_t *)&unk_100909A40);
      uint64_t v291 = v1034;
      uint64_t v292 = v1040;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1034 + 48))(v290, 1, v1040) == 1)
      {
        sub_1000966BC(v290, (uint64_t *)&unk_100909A40);
      }
      else
      {
        v792 = *(void (**)(char *, uint64_t, uint64_t))(v291 + 32);
        v793 = v955;
        v792(v955, v290, v292);
        v792(v1043, (uint64_t)v793, v292);
      }
      swift_storeEnumTagMultiPayload();
      sub_1001BDAC0();
      sub_100332FEC();
      uint64_t v794 = swift_getKeyPath();
      id v795 = [v286 uuid];
      uint64_t v796 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int v210 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v796, 0, 1, v1036);
      sub_10032E298(v794, v796);
      swift_release();
      sub_100332FEC();

      sub_1000966BC(v289, (uint64_t *)&unk_100909A40);
LABEL_302:
      LODWORD(v1039) = 0;
      goto LABEL_392;
    case 0x29u:
      unint64_t v371 = *(void *)v153;
      uint64_t v372 = v153 + *(int *)(sub_100094134(&qword_100916910) + 48);
      v373 = (void (**)(void, void, void))v996;
      sub_100096408(v372, (uint64_t)v996, (uint64_t *)&unk_100909A40);
      uint64_t v374 = v993;
      sub_1000BF710((uint64_t)v373, v993, (uint64_t *)&unk_100909A40);
      uint64_t v375 = v1034;
      uint64_t v376 = v1040;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1034 + 48))(v374, 1, v1040) == 1)
      {
        sub_1000966BC(v374, (uint64_t *)&unk_100909A40);
      }
      else
      {
        v808 = *(void (**)(char *, uint64_t, uint64_t))(v375 + 32);
        v809 = v956;
        v808(v956, v374, v376);
        v808(v1043, (uint64_t)v809, v376);
      }
      uint64_t v810 = v1042;
      swift_storeEnumTagMultiPayload();
      uint64_t v811 = swift_getKeyPath();
      uint64_t v812 = sub_10038E69C(v371);
      uint64_t v1042 = v810;
      swift_bridgeObjectRelease();
      sub_1003A0380(v811, v812, &qword_1009169A8, (uint64_t *)&unk_10090B070);
      swift_release();
      sub_100332FEC();
      uint64_t v813 = (uint64_t)v373;
LABEL_318:
      sub_1000966BC(v813, (uint64_t *)&unk_100909A40);
      goto LABEL_391;
    case 0x2Au:
      uint64_t v708 = *(void *)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v709 = swift_getKeyPath();
      v710 = sub_1001FFB00(v708);
      swift_bridgeObjectRelease();
      sub_1003A0380(v709, (uint64_t)v710, &qword_100916998, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v1048[0] = sub_1001DD9AC();
      uint64_t v711 = static CharacterSet.hashtagTokenPrefixCharacterArray.getter();
      uint64_t v712 = *(void *)(v711 + 16);
      if (v712)
      {
        v1045[0] = sub_1001DD9AC();
        sub_1001DD9B8(v712);
        uint64_t v713 = 0;
        uint64_t v714 = v1042;
        do
        {
          LODWORD(v1044[0]) = *(_DWORD *)(v711 + 4 * v713 + 32);
          sub_100399CC0((uint64_t *)&v1046);
          if (v714) {
            goto LABEL_420;
          }
          ++v713;
          v715 = v1046;
          uint64_t v716 = v1047;
          sub_1001DDD98();
          uint64_t v717 = *(void *)(v1045[0] + 16);
          sub_1001DDE54(v717);
          sub_1001DDECC(v717, (uint64_t)v715, v716);
          REMCDList.cleanUpAfterLocalObjectMerge()();
        }
        while (v712 != v713);
        swift_bridgeObjectRelease();
        v718 = (void *)v1045[0];
      }
      else
      {
        v718 = sub_1001DDB34(0);
        swift_bridgeObjectRelease();
        uint64_t v714 = v1042;
      }
      uint64_t v893 = sub_1001E9208((uint64_t)v718);
      uint64_t v1042 = v714;
      if (!v893) {
        goto LABEL_389;
      }
      uint64_t v894 = v893;
      if (v893 < 1) {
        goto LABEL_418;
      }
      v1039 = (void (*)(uint64_t, uint64_t))v718;
      v895 = v718 + 5;
      do
      {
        uint64_t v896 = *(v895 - 1);
        uint64_t v897 = *v895;
        uint64_t v898 = swift_getKeyPath();
        swift_bridgeObjectRetain_n();
        sub_10039F92C(v898, v896, v897, 6, (uint64_t *)&unk_10090B070);
        swift_release();
        sub_100332FEC();
        uint64_t v899 = swift_getKeyPath();
        sub_10039F92C(v899, v896, v897, 6, (uint64_t *)&unk_10090B070);
        swift_release();
        sub_100332FEC();
        v895 += 2;
        --v894;
      }
      while (v894);
LABEL_389:
      swift_bridgeObjectRelease();
      sub_100397E5C((uint64_t)v1048[0]);
      goto LABEL_390;
    case 0x2Bu:
      swift_storeEnumTagMultiPayload();
      sub_10039BE98((uint64_t)v161, (uint64_t)v1043);
      v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DD9AC();
      uint64_t v171 = static CharacterSet.hashtagTokenPrefixCharacterArray.getter();
      uint64_t v172 = v1042;
      uint64_t v173 = sub_10038EC50(v171);
      swift_bridgeObjectRelease();
      uint64_t v174 = sub_1001E9208((uint64_t)v173);
      if (v174)
      {
        uint64_t v175 = v174;
        uint64_t v1042 = v172;
        if (v174 < 1)
        {
LABEL_408:
          __break(1u);
LABEL_409:
          __break(1u);
LABEL_410:
          __break(1u);
          goto LABEL_411;
        }
        v1039 = (void (*)(uint64_t, uint64_t))v173;
        uint64_t v176 = v173 + 5;
        do
        {
          uint64_t v177 = *(v176 - 1);
          uint64_t v178 = *v176;
          uint64_t v179 = swift_getKeyPath();
          swift_bridgeObjectRetain_n();
          sub_10039F92C(v179, v177, v178, 6, (uint64_t *)&unk_10090B070);
          swift_release();
          sub_100332FEC();
          uint64_t v180 = swift_getKeyPath();
          sub_10039F92C(v180, v177, v178, 6, (uint64_t *)&unk_10090B070);
          swift_release();
          sub_100332FEC();
          v176 += 2;
          --v175;
        }
        while (v175);
        swift_bridgeObjectRelease();
        uint64_t v172 = v1042;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
LABEL_321:
      uint64_t v836 = swift_bridgeObjectRetain();
      sub_100397E5C(v836);
      sub_100332FEC();
      sub_100094134(&qword_100916908);
      uint64_t v837 = swift_initStackObject();
      sub_1001565E4(v837, 2);
      _OWORD *v838 = xmmword_100776E40;
      REMCDList.cleanUpAfterLocalObjectMerge()();
      uint64_t v840 = v839;
      uint64_t v841 = swift_getKeyPath();
      v842 = sub_10038EDDC(v840);
      uint64_t v1042 = v172;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1003A0380(v841, (uint64_t)v842, &qword_1009169A0, (uint64_t *)&unk_10090B070);
      swift_release();
LABEL_390:
      sub_100332FEC();
      goto LABEL_391;
    case 0x2Cu:
      uint64_t v237 = *(void *)v153;
      uint64_t v236 = *(void **)(v153 + 8);
      swift_storeEnumTagMultiPayload();
      sub_10039BE98((uint64_t)v158, (uint64_t)v1043);
      v1048[0] = sub_1001DD9AC();
      uint64_t v238 = static CharacterSet.hashtagTokenPrefixCharacterArray.getter();
      uint64_t v172 = v1042;
      v239 = sub_10038EC50(v238);
      swift_bridgeObjectRelease();
      uint64_t v240 = sub_1001E9208((uint64_t)v239);
      if (v240)
      {
        uint64_t v241 = v240;
        uint64_t v1042 = v172;
        if (v240 < 1) {
          goto LABEL_409;
        }
        v1039 = (void (*)(uint64_t, uint64_t))v239;
        v242 = (void **)(v239 + 5);
        do
        {
          uint64_t v244 = (uint64_t)*(v242 - 1);
          id v243 = *v242;
          uint64_t v245 = swift_getKeyPath();
          v1046 = 0;
          uint64_t v1047 = 0xE000000000000000;
          swift_bridgeObjectRetain();
          v246._uint64_t countAndFlagsBits = 0;
          v246._uint64_t object = (void *)0xE000000000000000;
          DefaultStringInterpolation.appendLiteral(_:)(v246);
          v247._uint64_t countAndFlagsBits = v244;
          v247._uint64_t object = v243;
          j___sSS6appendyySSF(v247);
          v248._uint64_t countAndFlagsBits = 0;
          v248._uint64_t object = (void *)0xE000000000000000;
          DefaultStringInterpolation.appendLiteral(_:)(v248);
          v249._uint64_t countAndFlagsBits = v237;
          v249._uint64_t object = v236;
          j___sSS6appendyySSF(v249);
          v250._uint64_t countAndFlagsBits = 0;
          v250._uint64_t object = (void *)0xE000000000000000;
          DefaultStringInterpolation.appendLiteral(_:)(v250);
          sub_10039F92C(v245, (uint64_t)v1046, v1047, 2, (uint64_t *)&unk_10090B070);
          swift_release();
          sub_100332FEC();
          uint64_t v251 = swift_getKeyPath();
          v1046 = 0;
          uint64_t v1047 = 0xE000000000000000;
          v252._uint64_t countAndFlagsBits = 0;
          v252._uint64_t object = (void *)0xE000000000000000;
          DefaultStringInterpolation.appendLiteral(_:)(v252);
          v253._uint64_t countAndFlagsBits = v244;
          v253._uint64_t object = v243;
          j___sSS6appendyySSF(v253);
          swift_bridgeObjectRelease();
          v254._uint64_t countAndFlagsBits = 0;
          v254._uint64_t object = (void *)0xE000000000000000;
          DefaultStringInterpolation.appendLiteral(_:)(v254);
          v255._uint64_t countAndFlagsBits = v237;
          v255._uint64_t object = v236;
          j___sSS6appendyySSF(v255);
          v256._uint64_t countAndFlagsBits = 0;
          v256._uint64_t object = (void *)0xE000000000000000;
          DefaultStringInterpolation.appendLiteral(_:)(v256);
          sub_10039F92C(v251, (uint64_t)v1046, v1047, 2, (uint64_t *)&unk_10090B070);
          swift_release();
          sub_100332FEC();
          v242 += 2;
          --v241;
        }
        while (v241);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v172 = v1042;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_321;
    case 0x2Du:
      unint64_t v663 = *(void *)v153;
      swift_storeEnumTagMultiPayload();
      uint64_t v664 = swift_getKeyPath();
      sub_1003A11D4(v664, 0x696E203D21204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v665 = sub_10038E5A4(v663);
      if (v665)
      {
        uint64_t v666 = v665;
        v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DD9AC();
        sub_1001DD9E8(v666);
        if (v666 < 0)
        {
LABEL_414:
          __break(1u);
LABEL_415:
          __break(1u);
LABEL_416:
          __break(1u);
LABEL_417:
          __break(1u);
LABEL_418:
          __break(1u);
LABEL_419:
          swift_release();
          __break(1u);
LABEL_420:
          swift_release();
          __break(1u);
LABEL_421:
          swift_errorRelease();
          __break(1u);
LABEL_422:
          _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          JUMPOUT(0x100397D1CLL);
        }
        uint64_t v667 = 0;
        uint64_t v668 = v1042;
        uint64_t v669 = (uint64_t)v971;
        do
        {
          if (v666 == v667) {
            goto LABEL_403;
          }
          if ((v663 & 0xC000000000000001) != 0) {
            id v670 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v670 = *(id *)(v663 + 8 * v667 + 32);
          }
          v671 = v670;
          v1048[0] = v670;
          sub_100399DEC(v1048);

          if (v668) {
            goto LABEL_419;
          }
          ++v667;
          sub_1001DDDC8();
          uint64_t v672 = *((void *)v1046 + 2);
          sub_1001DDE84(v672);
          sub_1001DDF90(v672, v669);
          REMCDList.cleanUpAfterLocalObjectMerge()();
        }
        while (v666 != v667);
        uint64_t v1042 = 0;
        swift_bridgeObjectRelease();
        v673 = v1046;
      }
      else
      {
        v673 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DDCB8(0);
        swift_bridgeObjectRelease();
      }
      uint64_t v886 = swift_getKeyPath();
      v887 = sub_1001FF8A4((uint64_t)v673);
      swift_bridgeObjectRelease();
      sub_1003A0380(v886, (uint64_t)v887, &qword_1009169A8, (uint64_t *)&unk_10090B070);
      swift_release();
      goto LABEL_390;
    case 0x2Eu:
      v765 = (void (**)(void, void, void))v1002;
      sub_100096408(v153, (uint64_t)v1002, (uint64_t *)&unk_100909A40);
      swift_storeEnumTagMultiPayload();
      sub_100094134(&qword_10090C688);
      uint64_t v766 = swift_initStackObject();
      sub_1001561D8(v766, 2);
      v768 = v767;
      uint64_t v769 = swift_getKeyPath();
      v770 = (void *)sub_1003A11D4(v769, 0x696E203D21204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
      swift_release();
      void *v768 = v770;
      uint64_t v771 = swift_initStackObject();
      uint64_t v772 = sub_1001561D8(v771, 2);
      v774 = v773;
      uint64_t v775 = swift_getKeyPath();
      uint64_t v776 = sub_1003A11D4(v775, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      uint64_t *v774 = v776;
      uint64_t v777 = swift_getKeyPath();
      uint64_t v778 = sub_1003A0634(v777, 0, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEE004025203E2074, (uint64_t *)&unk_10090B070);
      swift_release();
      v774[1] = v778;
      sub_10015443C();
      uint64_t v779 = sub_1002F52FC(v772);
      if (v779)
      {
        v780 = (void *)v779;
        id v781 = [self notPredicateWithSubpredicate:v779];
      }
      else
      {
        id v781 = 0;
      }
      v768[1] = v781;
      uint64_t v900 = v1049;
      uint64_t v901 = *(void *)(v1049 + 16);
      uint64_t v902 = v901 + 2;
      uint64_t v903 = v1040;
      if (__OFADD__(v901, 2)) {
        goto LABEL_407;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v1049 = v900;
      if (!isUniquelyReferenced_nonNull_native || v902 > *(void *)(v900 + 24) >> 1) {
        uint64_t v1049 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._endMutation()();
      id v905 = v770;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v906 = v781;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      uint64_t v907 = v982;
      sub_1000BF710((uint64_t)v765, v982, (uint64_t *)&unk_100909A40);
      uint64_t v908 = v1034;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1034 + 48))(v907, 1, v903) == 1)
      {
        sub_1000966BC((uint64_t)v765, (uint64_t *)&unk_100909A40);
        sub_1000966BC(v907, (uint64_t *)&unk_100909A40);
LABEL_58:
        LODWORD(v1039) = 0;
        int v210 = 1;
      }
      else
      {
        v909 = v953;
        (*(void (**)(char *, uint64_t, uint64_t))(v908 + 32))(v953, v907, v903);
        uint64_t v910 = swift_getKeyPath();
        uint64_t v911 = v1032;
        (*(void (**)(uint64_t, char *, uint64_t))(v908 + 16))(v1032, v909, v903);
        uint64_t v912 = (uint64_t)v765;
        int v210 = 1;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v908 + 56))(v911, 0, 1, v903);
        sub_10039AE14(v910, v911, (uint64_t *)&unk_100909A40, 0x4025203E204B25, 0xE700000000000000, (uint64_t *)&unk_10090B070);
        swift_release();
        sub_100332FEC();
        (*(void (**)(char *, uint64_t))(v908 + 8))(v909, v903);
        sub_1000966BC(v912, (uint64_t *)&unk_100909A40);
LABEL_387:
        LODWORD(v1039) = 0;
      }
      int v200 = 1;
      LOBYTE(v153) = 1;
      goto LABEL_394;
    case 0x2Fu:
      swift_storeEnumTagMultiPayload();
      uint64_t v205 = swift_getKeyPath();
      sub_1003A11D4(v205, 0x696E203D21204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
      goto LABEL_378;
    case 0x30u:
      swift_storeEnumTagMultiPayload();
      uint64_t v270 = swift_getKeyPath();
      int v200 = 1;
      sub_1003A0634(v270, 1, (uint64_t)&type metadata for Int64, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      LODWORD(v1039) = 0;
      int v210 = 1;
      goto LABEL_393;
    case 0x31u:
    case 0x32u:
    case 0x34u:
    case 0x38u:
    case 0x3Au:
    case 0x3Bu:
      swift_storeEnumTagMultiPayload();
      goto LABEL_266;
    case 0x33u:
      swift_storeEnumTagMultiPayload();
      uint64_t v761 = swift_getKeyPath();
      id v762 = [self siriFoundInAppsListID];
      id v763 = [v762 uuid];

      uint64_t v764 = (uint64_t)v1035;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int v200 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1037 + 56))(v764, 0, 1, v1036);
      sub_10032E298(v761, v764);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      LODWORD(v1039) = 0;
      int v210 = 0;
      goto LABEL_393;
    case 0x35u:
      swift_storeEnumTagMultiPayload();
      LODWORD(v1039) = 0;
      int v210 = 0;
      goto LABEL_392;
    case 0x36u:
    case 0x39u:
      swift_storeEnumTagMultiPayload();
      uint64_t v170 = swift_getKeyPath();
      sub_1003A11D4(v170, 0x696E203D21204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
      goto LABEL_239;
    case 0x37u:
      swift_storeEnumTagMultiPayload();
      uint64_t v276 = swift_getKeyPath();
      sub_1003A0634(v276, 0, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEF4025203D3D2074, (uint64_t *)&unk_10090B070);
LABEL_239:
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_266:
      LODWORD(v1039) = 0;
      int v210 = 1;
LABEL_269:
      int v200 = 1;
      goto LABEL_393;
    case 0x3Cu:
    case 0x3Eu:
    case 0x42u:
    case 0x43u:
      swift_storeEnumTagMultiPayload();
      uint64_t v313 = swift_getKeyPath();
      sub_1003A11D4(v313, 0x696E203D21204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
      goto LABEL_57;
    case 0x3Du:
      swift_storeEnumTagMultiPayload();
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      uint64_t v466 = v1017;
      Date.init()();
      uint64_t v467 = v1031;
      sub_100398C54(v466, v1031);
      uint64_t v468 = v1034;
      v469 = *(void (**)(uint64_t, uint64_t))(v1034 + 8);
      uint64_t v470 = v1040;
      v469(v466, v1040);
      uint64_t v471 = swift_getKeyPath();
      uint64_t v472 = v1032;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v468 + 16))(v1032, v467, v470);
      int v210 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v468 + 56))(v472, 0, 1, v470);
      sub_10039AE14(v471, v472, (uint64_t *)&unk_100909A40, 0x4025203C204B25, 0xE700000000000000, (uint64_t *)&unk_10090B070);
      swift_release();
      v469(v467, v470);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v473 = swift_getKeyPath();
      sub_10032E050(v473, 1);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_387;
    case 0x3Fu:
      swift_storeEnumTagMultiPayload();
      goto LABEL_58;
    case 0x40u:
      swift_storeEnumTagMultiPayload();
      uint64_t v474 = swift_getKeyPath();
      sub_1003A0634(v474, 0, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEE004025203E2074, (uint64_t *)&unk_10090B070);
LABEL_57:
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100349250(*(void *)(v1049 + 16));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_58;
    case 0x41u:
      swift_bridgeObjectRelease();
      sub_100094134(&qword_10090C688);
      uint64_t v181 = swift_initStackObject();
      uint64_t v182 = sub_1001561D8(v181, 2);
      id v184 = v183;
      uint64_t v185 = swift_initStackObject();
      uint64_t v186 = sub_1001561D8(v185, 3);
      id v188 = v187;
      uint64_t v189 = swift_getKeyPath();
      uint64_t v190 = sub_1003A11D4(v189, 0x4559203D3D204B25, 0xE900000000000053, (uint64_t *)&unk_10090B070);
      swift_release();
      *id v188 = v190;
      uint64_t v191 = swift_getKeyPath();
      uint64_t v192 = sub_1003A11D4(v191, 0x4559203D3D204B25, 0xE900000000000053, (uint64_t *)&unk_10090B070);
      swift_release();
      v188[1] = v192;
      uint64_t v193 = swift_getKeyPath();
      uint64_t v194 = sub_1003A11D4(v193, 0x4559203D3D204B25, 0xE900000000000053, (uint64_t *)&unk_10090B070);
      swift_release();
      v188[2] = v194;
      sub_10015443C();
      *id v184 = sub_100397E5C(v186);
      v184[1] = sub_100398328(0);
      sub_10015443C();
      return sub_1002F52FC(v182);
    default:
      unint64_t v347 = *(void *)v153;
      if (*(unsigned char *)(v153 + 8)) {
        LOBYTE(v265) = 3;
      }
      else {
        LOBYTE(v265) = 2;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v348 = swift_getKeyPath();
      uint64_t v349 = sub_10038E5A4(v347);
      if (v349)
      {
        uint64_t v350 = v349;
        char v351 = v265;
        v1046 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DD9AC();
        sub_1001DD9D0(v350);
        if (v350 < 0)
        {
LABEL_411:
          __break(1u);
LABEL_412:
          __break(1u);
LABEL_413:
          __break(1u);
          goto LABEL_414;
        }
        uint64_t v352 = 0;
        do
        {
          if (v350 == v352) {
            goto LABEL_401;
          }
          if ((v347 & 0xC000000000000001) != 0) {
            id v353 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v353 = *(id *)(v347 + 8 * v352 + 32);
          }
          v354 = v353;
          v1048[0] = v353;
          uint64_t v355 = v1042;
          sub_100399C28(v1048, (uint64_t)v150);

          uint64_t v1042 = v355;
          if (v355) {
            goto LABEL_419;
          }
          ++v352;
          sub_1001DDDB0();
          uint64_t v356 = *((void *)v1046 + 2);
          sub_1001DDE6C(v356);
          sub_1001DDEE4(v356, (uint64_t)v150);
          REMCDList.cleanUpAfterLocalObjectMerge()();
        }
        while (v350 != v352);
        swift_bridgeObjectRelease();
        v357 = v1046;
        LOBYTE(v265) = v351;
      }
      else
      {
        v357 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001DDBD0(0);
        swift_bridgeObjectRelease();
      }
      sub_1003A0380(v348, (uint64_t)v357, &qword_1009169A8, (uint64_t *)&unk_10090B070);
      swift_release();
      sub_100332FEC();
      int v210 = 0;
      int v200 = 0;
      LODWORD(v153) = 0;
      goto LABEL_326;
  }
}

id sub_100397E5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = *(void **)(a1 + 8 * i + 32);
      if (v4)
      {
        id v5 = v4;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = [self orPredicateWithSubpredicates:isa];

  return v7;
}

void sub_100397F9C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100397FA8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_100397FB4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 completed];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100397FE8(unsigned __int8 *a1, id *a2)
{
  return [*a2 setCompleted:*a1];
}

uint64_t sub_100397FFC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_100398030(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_10039806C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 parentReminder];
  *a2 = result;
  return result;
}

id sub_1003980A8(void *a1, id *a2)
{
  return [*a2 setParentReminder:*a1];
}

void sub_1003980BC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003980C8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1003980D4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_displayDateDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_100398108(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_100398144(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  uint64_t v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    uint64_t v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

id sub_10039828C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 flagged];
  *a2 = result;
  return result;
}

id sub_1003982C0(void *a1, id *a2)
{
  return [*a2 setFlagged:*a1];
}

id sub_1003982D4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 alarmStorage];
  *a2 = result;
  return result;
}

id sub_100398310(void *a1, id *a2)
{
  return [*a2 setAlarmStorage:*a1];
}

id sub_100398328(char a1)
{
  if (a1) {
    return 0;
  }
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100776E60;
  *(void *)(v2 + 32) = 0xD000000000000011;
  *(void *)(v2 + 40) = 0x8000000100788780;
  *(void *)(v2 + 88) = &type metadata for String;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = 0xD000000000000023;
  *(void *)(v2 + 72) = 0x80000001007CE560;
  uint64_t v3 = rem_currentRuntimeVersion();
  *(void *)(v2 + 120) = &type metadata for Int;
  *(void *)(v2 + 96) = v3;
  NSString v4 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v1 = [self predicateWithFormat:v4 argumentArray:isa];

  return v1;
}

id sub_10039844C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 inactive];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100398480(unsigned __int8 *a1, id *a2)
{
  return [*a2 setInactive:*a1];
}

id sub_100398494@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 recurrenceRules];
  *a2 = result;
  return result;
}

id sub_1003984D0(void *a1, id *a2)
{
  return [*a2 setRecurrenceRules:*a1];
}

uint64_t sub_1003984E4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_100398518(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_100398554(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 contactHandles];
  if (v3)
  {
    NSString v4 = v3;
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1003985BC(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v4 = isa;
  [v2 setContactHandles:];
}

id sub_100398634()
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100776E80;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 32) = 0xD000000000000023;
  *(void *)(v0 + 40) = 0x80000001007CE560;
  uint64_t v1 = rem_currentRuntimeVersion();
  *(void *)(v0 + 88) = &type metadata for Int;
  *(void *)(v0 + 64) = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [self predicateWithFormat:v2 argumentArray:isa];

  return v4;
}

id sub_100398760()
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100776E40;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 32) = 0xD000000000000011;
  *(void *)(v0 + 40) = 0x8000000100788780;
  NSString v1 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = [self predicateWithFormat:v1 argumentArray:isa];

  return v3;
}

uint64_t sub_100398848()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009168E8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009168E8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100398910()
{
  if (qword_1009073C0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_10008E2DC(v0, (uint64_t)qword_1009168E8);
}

uint64_t sub_100398974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = _s10PredicatesO19CompletionPredicateOMa(0);
  __chkstk_darwin(v4);
  unint64_t v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  int v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 88))(v10, v7);
  if (v11 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 32))(a2, v10, v12);
    return swift_storeEnumTagMultiPayload();
  }
  if (v11 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
    uint64_t v14 = sub_10033305C(*v10);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    *unint64_t v6 = v14;
    swift_storeEnumTagMultiPayload();
    return sub_10039BE98((uint64_t)v6, a2);
  }
  else
  {
    if (v11 == enum case for REMRemindersListDataView.ShowCompleted.off(_:)
      || v11 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
      return swift_storeEnumTagMultiPayload();
    }
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100398C54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a1;
  uint64_t v56 = a2;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v54 = v2;
  uint64_t v55 = v3;
  __chkstk_darwin(v2);
  uint64_t v43 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  __chkstk_darwin(v5);
  uint64_t v51 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v7 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v42 = *(void *)(v57 - 8);
  uint64_t v9 = v42;
  __chkstk_darwin(v57);
  int v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Calendar();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v44 = v12;
  uint64_t v45 = v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v16 - 8);
  uint64_t v48 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100094134(&qword_100916990);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DateComponents();
  uint64_t v46 = *(void *)(v24 - 8);
  uint64_t v47 = v24;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v23, 1, 1, v12);
  uint64_t v27 = type metadata accessor for TimeZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v20, 1, 1, v27);
  uint64_t v41 = v26;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  id v28 = [self currentCalendar];
  uint64_t v29 = v15;
  static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v30 = v11;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Calendar.MatchingPolicy.nextTime(_:), v57);
  uint64_t v31 = v49;
  uint64_t v32 = v50;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v49, enum case for Calendar.RepeatedTimePolicy.first(_:), v50);
  uint64_t v34 = v51;
  uint64_t v33 = v52;
  uint64_t v35 = v53;
  (*(void (**)(char *, void, uint64_t))(v52 + 104))(v51, enum case for Calendar.SearchDirection.forward(_:), v53);
  uint64_t v36 = (uint64_t)v48;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  uint64_t v37 = v54;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v57);
  uint64_t v38 = v55;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v44);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v41, v47);
  uint64_t v39 = v43;
  (*(void (**)(void))(v38 + 16))();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v56, v39, v37);
    return sub_1000966BC(v36, (uint64_t *)&unk_100909A40);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v56, v36, v37);
  }
}

uint64_t sub_10039936C(uint64_t a1, void *a2)
{
  id v61 = a2;
  *(void *)&long long v63 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  int v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t)&v57 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v14((char *)&v57 - v12, v2, v7);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88))(v13, v7);
  if (v15 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v7);
LABEL_17:
    v14(v11, v2, v7);
    sub_100398974((uint64_t)v11, a1);
    id v23 = v61;
    id v24 = v61;
    return (uint64_t)v23;
  }
  if (v15 != enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    if (v15 == enum case for REMRemindersListDataView.ShowCompleted.off(_:)
      || v15 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
    {
      goto LABEL_17;
    }
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
LABEL_13:
    uint64_t v16 = *(void *)(v13 + 16);
    if (v16) {
      goto LABEL_14;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    a1 = v58;
    goto LABEL_17;
  }
  uint64_t v58 = a1;
  (*(void (**)(uint64_t, uint64_t))(v8 + 96))(v13, v7);
  uint64_t v13 = *(void *)v13;
  unint64_t v60 = v13 & 0xC000000000000001;
  if ((v13 & 0xC000000000000001) == 0) {
    goto LABEL_13;
  }
  if (!__CocoaSet.count.getter()) {
    goto LABEL_16;
  }
  uint64_t v16 = __CocoaSet.count.getter();
  if (!v16)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_35:
    sub_100094134(&qword_10090C688);
    uint64_t inited = swift_initStackObject();
    long long v63 = xmmword_100776E80;
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    uint64_t v49 = swift_initStackObject();
    *(_OWORD *)(v49 + 16) = v63;
    id v50 = v61;
    *(void *)(v49 + 32) = v61;
    uint64_t KeyPath = swift_getKeyPath();
    id v52 = v50;
    uint64_t v53 = sub_1003A11D4(KeyPath, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
    swift_release();
    *(void *)(v49 + 40) = v53;
    v64[0] = v49;
    specialized Array._endMutation()();
    *(void *)(inited + 32) = sub_1002F52FC(v64[0]);
    uint64_t v54 = swift_getKeyPath();
    uint64_t v55 = sub_1001FF8A4((uint64_t)v17);
    swift_bridgeObjectRelease();
    uint64_t v56 = sub_1003A0380(v54, (uint64_t)v55, &qword_1009169A8, (uint64_t *)&unk_10090B070);
    swift_release();
    *(void *)(inited + 40) = v56;
    v64[0] = inited;
    specialized Array._endMutation()();
    id v23 = sub_100397E5C(v64[0]);
    _s10PredicatesO19CompletionPredicateOMa(0);
    swift_storeEnumTagMultiPayload();
    return (uint64_t)v23;
  }
LABEL_14:
  uint64_t v68 = _swiftEmptyArrayStorage;
  sub_1001DE148(0, v16 & ~(v16 >> 63), 0);
  unint64_t v19 = v60;
  if (v60)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    unsigned __int8 v22 = 1;
  }
  else
  {
    uint64_t result = sub_1003CA790(v13);
    unsigned __int8 v22 = v25 & 1;
  }
  uint64_t v26 = v63;
  uint64_t v65 = result;
  uint64_t v66 = v21;
  unsigned __int8 v67 = v22;
  if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v27 = v4 + 32;
    uint64_t v28 = v13 & 0xFFFFFFFFFFFFFF8;
    if (v13 < 0) {
      uint64_t v28 = v13;
    }
    uint64_t v62 = v28;
    uint64_t v59 = v4;
    do
    {
      while (1)
      {
        sub_1003C9F1C(v65, v66, v67, v13);
        uint64_t v42 = v41;
        id v43 = [v41 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v44 = v68;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE148(0, v44[2] + 1, 1);
          uint64_t v44 = v68;
        }
        unint64_t v46 = v44[2];
        unint64_t v45 = v44[3];
        if (v46 >= v45 >> 1)
        {
          sub_1001DE148(v45 > 1, v46 + 1, 1);
          uint64_t v44 = v68;
        }
        v44[2] = v46 + 1;
        uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v44+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v46, v6, v26);
        uint64_t v68 = v44;
        if (v19) {
          break;
        }
        uint64_t v29 = v65;
        uint64_t v30 = v66;
        uint64_t v31 = v6;
        uint64_t v32 = v27;
        unsigned __int8 v33 = v67;
        uint64_t v34 = sub_1003C9E34(v65, v66, v67, v13);
        uint64_t v36 = v35;
        char v38 = v37;
        char v39 = v33;
        uint64_t v27 = v32;
        uint64_t v6 = v31;
        uint64_t v4 = v59;
        sub_1000E4EA4(v29, v30, v39);
        uint64_t v65 = v34;
        uint64_t v66 = v36;
        unint64_t v19 = v60;
        unsigned __int8 v40 = v38 & 1;
        uint64_t v26 = v63;
        unsigned __int8 v67 = v40;
        if (!--v16) {
          goto LABEL_34;
        }
      }
      if ((v67 & 1) == 0) {
        goto LABEL_37;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_100094134(&qword_10090FE48);
      uint64_t v47 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v47(v64, 0);
      --v16;
    }
    while (v16);
LABEL_34:
    sub_1000E4EA4(v65, v66, v67);
    swift_bridgeObjectRelease();
    uint64_t v17 = v68;
    goto LABEL_35;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

void sub_1003999F4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100399A00(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100399A0C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_completionDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_100399A40(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_100399A7C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 shouldCategorizeGroceryItems];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100399AB0(unsigned __int8 *a1, id *a2)
{
  return [*a2 setShouldCategorizeGroceryItems:*a1];
}

uint64_t sub_100399AC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMSearchCriterion();
  __n128 v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v3);
  return String.init<A>(describing:)();
}

void sub_100399B90(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100399BB4(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_100399BD8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 parentList];
  *a2 = result;
  return result;
}

id sub_100399C14(void *a1, id *a2)
{
  return [*a2 setParentList:*a1];
}

uint64_t sub_100399C28@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 0, 1, v4);
}

uint64_t sub_100399CC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._uncheckedFromUTF8(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_100399DA4@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 sharingStatus];
  *a2 = (_WORD)result;
  return result;
}

id sub_100399DD8(__int16 *a1, id *a2)
{
  return [*a2 setSharingStatus:*a1];
}

void sub_100399DEC(id *a1)
{
  id v1 = [*a1 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

id sub_100399E44@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 daIsEventOnlyContainer];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100399E78(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDaIsEventOnlyContainer:*a1];
}

id sub_100399E8C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 daIsNotificationsCollection];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100399EC0(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDaIsNotificationsCollection:*a1];
}

void sub_100399ED4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100399EF8(id *a1@<X0>, SEL *a2@<X3>, unint64_t *a3@<X4>, unint64_t *a4@<X6>, uint64_t *a5@<X8>)
{
  id v8 = [*a1 *a2];
  if (v8)
  {
    uint64_t v9 = v8;
    sub_1000963CC(0, a3);
    sub_1000ED098(a4, a3);
    uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v10 = 0;
  }
  *a5 = v10;
}

void sub_100399F98(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_100399FBC(void *a1, void **a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unint64_t *a7, SEL *a8)
{
  uint64_t v9 = *a2;
  if (*a1)
  {
    sub_1000963CC(0, a5);
    sub_1000ED098(a7, a5);
    v12.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v12.super.Class isa = 0;
  }
  Class isa = v12.super.isa;
  [v9 *a8];
}

uint64_t sub_10039A078(uint64_t a1)
{
  return sub_10039A0A8(a1, (uint64_t)&unk_100788B40, 1, &qword_100942188);
}

uint64_t sub_10039A090(uint64_t a1)
{
  return sub_10039A0A8(a1, (uint64_t)&unk_100788B78, 0, &qword_100942190);
}

uint64_t sub_10039A0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  uint64_t result = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  *a4 = result;
  return result;
}

uint64_t sub_10039A10C(uint64_t a1)
{
  return sub_10039A0A8(a1, (uint64_t)&unk_100788B78, 1, &qword_100942198);
}

uint64_t sub_10039A124(uint64_t a1)
{
  return sub_10039A0A8(a1, (uint64_t)&unk_100788928, 1, &qword_1009421A0);
}

uint64_t sub_10039A13C(uint64_t a1)
{
  return sub_10039A0A8(a1, (uint64_t)&unk_100788928, 0, &qword_1009421A8);
}

uint64_t sub_10039A154(uint64_t a1)
{
  return sub_10039A0A8(a1, (uint64_t)&unk_100788618, 0, &qword_1009421B0);
}

uint64_t sub_10039A16C(uint64_t a1)
{
  return sub_10039A0A8(a1, (uint64_t)&unk_1007889F8, 0, &qword_1009421B8);
}

void sub_10039A184()
{
  id v0 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithKey:v1 ascending:1 reverseNullOrder:1];

  qword_1009421C0 = (uint64_t)v2;
}

uint64_t sub_10039A204(uint64_t a1)
{
  return sub_10039A0A8(a1, (uint64_t)&unk_100788130, 0, &qword_1009421C8);
}

uint64_t sub_10039A21C(uint64_t a1)
{
  return sub_10039A0A8(a1, (uint64_t)&unk_100788418, 0, &qword_1009421D0);
}

id sub_10039A234()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  if (qword_1009073C8 != -1) {
    swift_once();
  }
  id v2 = (void *)qword_100942188;
  *(void *)(v0 + 32) = qword_100942188;
  specialized Array._endMutation()();
  qword_1009421D8 = v0;

  return v2;
}

char *sub_10039A2E4@<X0>(void **a1@<X0>, char **a2@<X8>)
{
  uint64_t result = sub_10024D600(*a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

id sub_10039A314(unint64_t a1, id a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  id result = [a2 includeDueDateDeltaAlerts];
  if (result)
  {
    if (a4 >> 62)
    {
LABEL_18:
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      id result = (id)swift_bridgeObjectRelease();
      if (!v19) {
        return result;
      }
    }
    else if (!*(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      id result = (id)swift_bridgeObjectRelease();
      if (!v11) {
        return result;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v11) {
        return result;
      }
    }
    unint64_t v20 = a4;
    uint64_t v21 = (unsigned __int8 *)a3;
    uint64_t v22 = v5;
    swift_bridgeObjectRetain();
    a3 = 4;
    a4 = (unint64_t)&selRef_willSave;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(a1 + 8 * a3);
      }
      uint64_t v13 = v12;
      uint64_t v5 = a3 - 3;
      if (__OFADD__(a3 - 4, 1))
      {
        __break(1u);
        goto LABEL_18;
      }
      id v14 = [v12 dueDateDeltaAlertsData];
      if (v14) {
        break;
      }

      ++a3;
      if (v5 == v11) {
        return (id)swift_bridgeObjectRelease();
      }
    }
    int v15 = v14;
    uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    sub_100097F34(v16, v18);
    swift_bridgeObjectRelease();

    id result = (id)sub_1001BBCE0(a1, (int)[a2 includeConcealed], v21);
    if (!v22)
    {
      sub_10039A544(v20, (uint64_t)result);
      return (id)swift_bridgeObjectRelease();
    }
  }
  return result;
}

id sub_10039A508@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 remObjectID];
  *a2 = result;
  return result;
}

unint64_t sub_10039A544(unint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v3 = a2;
    unint64_t v4 = result;
    if (result >> 62) {
      goto LABEL_20;
    }
    uint64_t v5 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v6 = 4;
      uint64_t v15 = v5;
      uint64_t v16 = v3;
      while (1)
      {
        id v8 = (v4 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v4 + 8 * v6);
        uint64_t v9 = v8;
        uint64_t v10 = v6 - 3;
        if (__OFADD__(v6 - 4, 1)) {
          break;
        }
        uint64_t v11 = sub_100693E40([v8 remObjectID]);
        if (v2)
        {

          return swift_bridgeObjectRelease();
        }
        id v12 = v11;
        if (*(void *)(v3 + 16))
        {
          id v13 = v11;
          sub_10030703C(v13);
          if (v14)
          {
            swift_bridgeObjectRetain();

            sub_1000963CC(0, (unint64_t *)&unk_100920C30);
            v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            [v9 setFetchedDueDateDeltaAlerts:v7.super.isa];
          }
          else
          {
            v7.super.Class isa = (Class)v9;
            uint64_t v9 = v13;
          }

          uint64_t v5 = v15;
          uint64_t v3 = v16;
        }

        ++v6;
        if (v10 == v5) {
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10039A704(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  type metadata accessor for REMSearchCriterion();
  uint64_t v1 = Array.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

id sub_10039A770@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id v4 = *a1;
  sub_10009A1B0((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v4;

  return v4;
}

uint64_t sub_10039A7C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v47 = a1;
  uint64_t v48 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v49 = v8;
  uint64_t v50 = 0;
  uint64_t v51 = v11 & v9;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001A618C((uint64_t)&v45);
  id v12 = v45;
  if (!v45) {
    goto LABEL_26;
  }
  sub_10009A1A0(v46, v44);
  id v13 = *(void **)a5;
  unint64_t v15 = sub_100306FE8((uint64_t)v12);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_10031858C();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    id v23 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(void *)(v23[6] + 8 * v15) = v12;
    sub_10009A1A0(v44, (_OWORD *)(v23[7] + 32 * v15));
    uint64_t v24 = v23[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v23[2] = v26;
LABEL_16:
    sub_1001A618C((uint64_t)&v45);
    for (uint64_t i = v45; v45; uint64_t i = v45)
    {
      sub_10009A1A0(v46, v44);
      uint64_t v30 = *(void **)a5;
      unint64_t v31 = sub_100306FE8((uint64_t)i);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v25 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v25) {
        goto LABEL_27;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        sub_10030DF30(v35, 1);
        unint64_t v31 = sub_100306FE8((uint64_t)i);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_29;
        }
      }
      if (v36)
      {
        uint64_t v28 = 32 * v31;
        sub_10009A1B0(*(void *)(*(void *)a5 + 56) + 32 * v31, (uint64_t)v42);
        sub_10009A1B0((uint64_t)v42, (uint64_t)v43);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v42);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v44);

        uint64_t v29 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + v28);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v29);
        sub_10009A1A0(v43, v29);
      }
      else
      {
        char v38 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(void *)(v38[6] + 8 * v31) = i;
        sub_10009A1A0(v44, (_OWORD *)(v38[7] + 32 * v31));
        uint64_t v39 = v38[2];
        BOOL v25 = __OFADD__(v39, 1);
        uint64_t v40 = v39 + 1;
        if (v25) {
          goto LABEL_28;
        }
        v38[2] = v40;
      }
      sub_1001A618C((uint64_t)&v45);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000C1AF8();
    return swift_release();
  }
  sub_10030DF30(v18, a4 & 1);
  unint64_t v20 = sub_100306FE8((uint64_t)v12);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_10009A1B0(*(void *)(*(void *)a5 + 56) + 32 * v15, (uint64_t)v42);
    sub_10009A1B0((uint64_t)v42, (uint64_t)v43);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v42);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v44);

    uint64_t v22 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v15);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
    sub_10009A1A0(v43, v22);
    goto LABEL_16;
  }
LABEL_29:
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _s10PredicatesOMa(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100916B10);
}

uint64_t _s10PredicatesO19CompletionPredicateOMa(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100916A68);
}

uint64_t sub_10039AB78@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_displayDateDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10039ABC0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10039AC10()
{
  return sub_1003E84D8();
}

void *sub_10039AC1C(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v3) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v3 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = 0;
    while (v3 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      id v8 = [v6 objectID];
      dispatch thunk of REMStoreObjectsContainer.storedReminder(with:)();

      if (v1) {
        return (void *)swift_release();
      }
      ++v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v3 == v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10039AD8C(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10039ADB0(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10039ADC4(uint64_t a1, uint64_t a2)
{
  return sub_10039AE14(a1, a2, (uint64_t *)&unk_100909A40, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10039ADEC(uint64_t a1, uint64_t a2)
{
  return sub_10039AE14(a1, a2, (uint64_t *)&unk_100909A40, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10039AE14(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100776E80;
  uint64_t v10 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v11)
  {
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v11;
    *(void *)(v9 + 88) = sub_100094134(a3);
    id v12 = sub_1000C1FE8((uint64_t *)(v9 + 64));
    sub_1000BF710(a2, (uint64_t)v12, a3);
    NSString v13 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v15 = [self predicateWithFormat:v13 argumentArray:isa];

    sub_1000966BC(a2, a3);
    return (uint64_t)v15;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v17._uint64_t object = (void *)0x80000001007CAF70;
    v17._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v17);
    sub_100094134(a6);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10039AFE8(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10039B008(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10039F92C(a1, a2, a3, a4, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10039B014(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_100913A10);
}

uint64_t sub_10039B038(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_100913A10);
}

uint64_t sub_10039B04C(uint64_t a1)
{
  return sub_1003A07F0(a1, &qword_100913A10);
}

uint64_t sub_10039B058(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_100913A10);
}

uint64_t sub_10039B07C(uint64_t a1, __int16 a2)
{
  return sub_10039C650(a1, a2, &qword_100913A10);
}

uint64_t sub_10039B088(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_100916998, &qword_100913A10);
}

uint64_t sub_10039B09C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10039F92C(a1, a2, a3, a4, &qword_100913A10);
}

uint64_t sub_10039B0A8(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4559203D3D204B25, 0xE900000000000053, &qword_100913A10);
}

uint64_t sub_10039B0CC(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_100913A10);
}

uint64_t sub_10039B0EC(uint64_t a1, uint64_t a2)
{
  return sub_10039AE14(a1, a2, (uint64_t *)&unk_100909E50, 0x4025203D21204B25, 0xE800000000000000, &qword_100913A10);
}

uint64_t sub_10039B114(uint64_t a1, uint64_t a2)
{
  return sub_1003A0634(a1, a2, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEF4025203D3D2074, &qword_100913A10);
}

uint64_t sub_10039B148(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10039F92C(a1, a2, a3, a4, &qword_10090FF50);
}

uint64_t sub_10039B154(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_10090FF50);
}

uint64_t sub_10039B178(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_10090FF50);
}

uint64_t sub_10039B19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100776E80;
  uint64_t v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v7)
  {
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v7;
    *(void *)(v5 + 88) = sub_100094134((uint64_t *)&unk_10090A4C0);
    *(void *)(v5 + 64) = a2;
    *(void *)(v5 + 72) = a3;
    swift_bridgeObjectRetain();
    NSString v8 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v10 = [self predicateWithFormat:v8 argumentArray:isa];

    return (uint64_t)v10;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v12._uint64_t object = (void *)0x80000001007CAF70;
    v12._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    sub_100094134(&qword_10090FF50);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10039B354(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, (uint64_t *)&unk_10090B070);
}

id sub_10039B378@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 completed];
  *a2 = (_BYTE)result;
  return result;
}

id sub_10039B3AC(unsigned __int8 *a1, id *a2)
{
  return [*a2 setCompleted:*a1];
}

id sub_10039B3C0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 recurrenceRules];
  *a2 = result;
  return result;
}

id sub_10039B3FC(void *a1, id *a2)
{
  return [*a2 setRecurrenceRules:*a1];
}

uint64_t sub_10039B410(uint64_t a1, uint64_t a2)
{
  return sub_1003A0634(a1, a2, (uint64_t)&type metadata for Int64, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10039B438(uint64_t a1)
{
  return sub_1003A07F0(a1, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10039B444(uint64_t a1, uint64_t a2)
{
  return sub_1003A0634(a1, a2, (uint64_t)&type metadata for Int64, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10039B46C(uint64_t a1, uint64_t a2)
{
  return sub_1003A0634(a1, a2, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEE004025203E2074, (uint64_t *)&unk_10090B070);
}

id sub_10039B4A0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 list];
  *a2 = result;
  return result;
}

id sub_10039B4DC(void *a1, id *a2)
{
  return [*a2 setList:*a1];
}

id sub_10039B4F0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 markedForDeletion];
  *a2 = (_BYTE)result;
  return result;
}

id sub_10039B524(unsigned __int8 *a1, id *a2)
{
  return [*a2 setMarkedForDeletion:*a1];
}

uint64_t sub_10039B538(uint64_t a1, uint64_t a2)
{
  return sub_1003A0634(a1, a2, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEF4025203D3D2074, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10039B56C(uint64_t a1, uint64_t a2)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100776E80;
  swift_retain();
  uint64_t v4 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    swift_release();
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 32) = v6;
    *(void *)(v3 + 40) = v7;
    *(void *)(v3 + 88) = sub_100094134((uint64_t *)&unk_100909E50);
    NSString v8 = sub_1000C1FE8((uint64_t *)(v3 + 64));
    sub_1000BF710(a2, (uint64_t)v8, (uint64_t *)&unk_100909E50);
    NSString v9 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v11 = [self predicateWithFormat:v9 argumentArray:isa];

    sub_1000966BC(a2, (uint64_t *)&unk_100909E50);
    return (uint64_t)v11;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v13._uint64_t object = (void *)0x80000001007CAF70;
    v13._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v13);
    sub_100094134((uint64_t *)&unk_10090B070);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10039B758(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_100916998, (uint64_t *)&unk_10090B070);
}

id sub_10039B76C(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  v26[0] = a1;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[1] = sub_100094134(&qword_10090C688);
  uint64_t inited = swift_initStackObject();
  long long v27 = xmmword_100776E80;
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_100776E60;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = sub_1003A07F0(KeyPath, (uint64_t *)&unk_10090B070);
  swift_release();
  *(void *)(v6 + 32) = v8;
  uint64_t v9 = swift_getKeyPath();
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  Swift::String v12 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v12(v5, a1, v10);
  Swift::String v13 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
  v13(v5, 0, 1, v10);
  uint64_t v14 = sub_10039AE14(v9, (uint64_t)v5, (uint64_t *)&unk_100909A40, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
  swift_release();
  *(void *)(v6 + 40) = v14;
  uint64_t v15 = swift_getKeyPath();
  v12(v5, v28, v10);
  v13(v5, 0, 1, v10);
  uint64_t v16 = sub_10039AE14(v15, (uint64_t)v5, (uint64_t *)&unk_100909A40, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
  swift_release();
  *(void *)(v6 + 48) = v16;
  uint64_t v30 = v6;
  specialized Array._endMutation()();
  uint64_t v17 = sub_1002F52FC(v30);
  *(void *)(inited + 32) = v17;
  uint64_t v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = v27;
  uint64_t v19 = swift_getKeyPath();
  v12(v5, v26[0], v10);
  v13(v5, 0, 1, v10);
  uint64_t v20 = sub_10039AE14(v19, (uint64_t)v5, (uint64_t *)&unk_100909A40, 0x4025203D3E204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
  swift_release();
  *(void *)(v18 + 32) = v20;
  uint64_t v21 = swift_getKeyPath();
  v12(v5, v28, v10);
  v13(v5, 0, 1, v10);
  uint64_t v22 = sub_10039AE14(v21, (uint64_t)v5, (uint64_t *)&unk_100909A40, 0x4025203D3C204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
  swift_release();
  *(void *)(v18 + 40) = v22;
  uint64_t v30 = v18;
  specialized Array._endMutation()();
  uint64_t v23 = sub_1002F52FC(v30);
  uint64_t v24 = inited;
  *(void *)(inited + 40) = v23;
  uint64_t v30 = v24;
  specialized Array._endMutation()();
  return sub_100397E5C(v30);
}

const char *sub_10039BB50()
{
  return "parentList";
}

id sub_10039BB5C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 parentList];
  *a2 = result;
  return result;
}

id sub_10039BB98(void *a1, id *a2)
{
  return [*a2 setParentList:*a1];
}

id sub_10039BBAC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 parentReminder];
  *a2 = result;
  return result;
}

id sub_10039BBE8(void *a1, id *a2)
{
  return [*a2 setParentReminder:*a1];
}

uint64_t sub_10039BBFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

const char *sub_10039BC6C()
{
  return "completionDate";
}

uint64_t sub_10039BC78@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_completionDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10039BCC0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_10039BD28@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 inactive];
  *a2 = (_BYTE)result;
  return result;
}

id sub_10039BD5C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setInactive:*a1];
}

id sub_10039BD70@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 daIsEventOnlyContainer];
  *a2 = (_BYTE)result;
  return result;
}

id sub_10039BDA4(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDaIsEventOnlyContainer:*a1];
}

id sub_10039BDB8@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 daIsNotificationsCollection];
  *a2 = (_BYTE)result;
  return result;
}

id sub_10039BDEC(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDaIsNotificationsCollection:*a1];
}

uint64_t sub_10039BE00@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_lastModifiedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10039BE48(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10039BE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10PredicatesO19CompletionPredicateOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10039BF04(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10039BF24(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_10039BF44()
{
  return "sharingStatus";
}

id sub_10039BF50@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 sharingStatus];
  *a2 = (_WORD)result;
  return result;
}

id sub_10039BF84(__int16 *a1, id *a2)
{
  return [*a2 setSharingStatus:*a1];
}

void sub_10039BF98(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10039BFB8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10039BFD8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10039C020(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_10039C070()
{
  return "children";
}

void sub_10039C07C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10039C0B4(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_10039C0EC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 flagged];
  *a2 = result;
  return result;
}

id sub_10039C120(void *a1, id *a2)
{
  return [*a2 setFlagged:*a1];
}

const char *sub_10039C134()
{
  return "shouldCategorizeGroceryItems";
}

id sub_10039C140@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 shouldCategorizeGroceryItems];
  *a2 = (_BYTE)result;
  return result;
}

id sub_10039C174(unsigned __int8 *a1, id *a2)
{
  return [*a2 setShouldCategorizeGroceryItems:*a1];
}

uint64_t sub_10039C190()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10039C1A0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10039C1B0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

const char *sub_10039C1E8()
{
  return "daCalendarItemUniqueIdentifier";
}

void sub_10039C1F4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10039C214(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10039C234@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10039C27C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10039C2CC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10039C304()
{
  return sub_10039A704(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_10039C30C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10039C31C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10039C32C@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10039C338()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10039C348()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10039C35C()
{
  uint64_t v1 = type metadata accessor for REMSearchCriterion();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10039C3EC()
{
  uint64_t v1 = *(void *)(type metadata accessor for REMSearchCriterion() - 8);
  return sub_100399AC4(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_10039C440()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10039C450()
{
  return _swift_deallocObject(v0, 17, 7);
}

id sub_10039C468@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 alarmStorage];
  *a2 = result;
  return result;
}

id sub_10039C4A4(void *a1, id *a2)
{
  return [*a2 setAlarmStorage:*a1];
}

const char *sub_10039C4C8()
{
  return "externalIdentifier";
}

void sub_10039C4D4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10039C4F4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_10039C514(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10039C54C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_10039C584@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 ckDirtyFlags];
  *a2 = (_WORD)result;
  return result;
}

id sub_10039C5B8(__int16 *a1, id *a2)
{
  return [*a2 setCkDirtyFlags:*a1];
}

uint64_t sub_10039C5D4(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_10090FEB0);
}

uint64_t sub_10039C5E8(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_100916998, &qword_10090FEB0);
}

uint64_t sub_10039C5FC(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_10090FEB0);
}

uint64_t sub_10039C61C(uint64_t a1, uint64_t a2)
{
  return sub_10039AE14(a1, a2, (uint64_t *)&unk_100909E50, 0x4025203D21204B25, 0xE800000000000000, &qword_10090FEB0);
}

uint64_t sub_10039C644(uint64_t a1, __int16 a2)
{
  return sub_10039C650(a1, a2, &qword_10090FEB0);
}

uint64_t sub_10039C650(uint64_t a1, __int16 a2, uint64_t *a3)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100776E80;
  uint64_t v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v7)
  {
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v7;
    *(void *)(v5 + 88) = &type metadata for Int16;
    *(_WORD *)(v5 + 64) = a2;
    NSString v8 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v10 = [self predicateWithFormat:v8 argumentArray:isa];

    return (uint64_t)v10;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v12._uint64_t object = (void *)0x80000001007CAF70;
    v12._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    sub_100094134(a3);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *sub_10039C7F8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  uint64_t v44 = a3;
  uint64_t v54 = a2;
  uint64_t v43 = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder();
  uint64_t v6 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v42 = (uint64_t)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v53 = (char *)v35 - v15;
  uint64_t v57 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_28;
  }
  uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v16)
  {
    while (1)
    {
      v35[1] = v4;
      unint64_t v17 = 0;
      uint64_t v48 = a1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v49 = a1 & 0xC000000000000001;
      v35[0] = a1;
      unint64_t v45 = a1 + 32;
      uint64_t v46 = v16;
      uint64_t v39 = (void (**)(char *, char *, uint64_t))(v36 + 32);
      uint64_t v40 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
      char v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
      uint64_t v50 = v36 + 16;
      uint64_t v51 = v54 + 56;
      uint64_t v52 = (void (**)(char *, uint64_t))(v36 + 8);
      uint64_t v41 = (void (**)(uint64_t, uint64_t))(v6 + 8);
      uint64_t v47 = v10;
      while (v49)
      {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_10:
        uint64_t v19 = v18;
        if (__OFADD__(v17++, 1)) {
          goto LABEL_27;
        }
        if (*(void *)(v54 + 16))
        {
          id v21 = [v18 identifier:v35[0]];
          if (!v21)
          {
            (*v40)(v10, 1, 1, v11);
LABEL_21:
            sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
            goto LABEL_22;
          }
          uint64_t v22 = v21;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v23 = *v39;
          (*v39)(v10, v13, v11);
          (*v40)(v10, 0, 1, v11);
          if ((*v38)(v10, 1, v11) == 1) {
            goto LABEL_21;
          }
          char v37 = v19;
          v23(v53, v10, v11);
          if (*(void *)(v54 + 16))
          {
            uint64_t v24 = v54;
            sub_1003A006C((unint64_t *)&qword_100913920);
            uint64_t v25 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v26 = -1 << *(unsigned char *)(v24 + 32);
            a1 = v25 & ~v26;
            if ((*(void *)(v51 + ((a1 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a1))
            {
              uint64_t v27 = ~v26;
              uint64_t v28 = *(void *)(v36 + 72);
              uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
              while (1)
              {
                v29(v13, *(void *)(v54 + 48) + v28 * a1, v11);
                sub_1003A006C((unint64_t *)&qword_10090B4D0);
                char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
                unint64_t v31 = *v52;
                (*v52)(v13, v11);
                if (v30) {
                  break;
                }
                a1 = (a1 + 1) & v27;
                if (((*(void *)(v51 + ((a1 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a1) & 1) == 0) {
                  goto LABEL_19;
                }
              }
              v31(v53, v11);
              goto LABEL_5;
            }
          }
LABEL_19:
          (*v52)(v53, v11);
          uint64_t v19 = v37;
        }
LABEL_22:
        uint64_t v55 = v44;
        uint64_t v56 = v44;
        id v4 = v19;
        sub_100094134(&qword_1009169B0);
        a1 = sub_1000BFEAC(&qword_1009169B8, &qword_1009169B0);
        uint64_t Predicate = Sequence<>.postFetchPredicateTypes.getter();
        uint64_t v33 = v42;
        sub_10057EFFC(v4, Predicate, v42);
        uint64_t v6 = Sequence<>.evaluate(with:)();
        (*v41)(v33, v43);
        if ((v6 & 1) == 0)
        {

          goto LABEL_6;
        }
LABEL_5:
        uint64_t v6 = (uint64_t)&v57;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        id v4 = (id)v57[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_6:
        id v10 = v47;
        if (v17 == v46) {
          return v57;
        }
      }
      if (v17 < *(void *)(v48 + 16)) {
        break;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      if (!v16) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v18 = *(id *)(v45 + 8 * v17);
    goto LABEL_10;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10039CDD0(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_10090F508);
}

uint64_t sub_10039CDE4(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_10090F508);
}

uint64_t sub_10039CE08(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_10090F508);
}

void *sub_10039CE28()
{
  uint64_t v0 = 7;
  sub_1001DE058(0, 7, 0);
  uint64_t v1 = &byte_1008B1380;
  do
  {
    int v2 = *v1++;
    unint64_t v3 = 0xE400000000000000;
    uint64_t v4 = 1953720684;
    switch(v2)
    {
      case 1:
        unint64_t v3 = 0xEE007265646E696DLL;
        uint64_t v4 = 0x6552746E65726170;
        break;
      case 2:
        unint64_t v3 = 0xEC00000065676172;
        uint64_t v4 = 0x6F74536D72616C61;
        break;
      case 3:
        uint64_t v5 = 0x686361747461;
        goto LABEL_8;
      case 4:
        unint64_t v3 = 0xEF73656C75526563;
        uint64_t v4 = 0x6E65727275636572;
        break;
      case 5:
        uint64_t v5 = 0x6E6769737361;
LABEL_8:
        uint64_t v4 = v5 & 0xFFFFFFFFFFFFLL | 0x656D000000000000;
        unint64_t v3 = 0xEB0000000073746ELL;
        break;
      case 6:
        unint64_t v3 = 0xE800000000000000;
        uint64_t v4 = 0x7367617468736168;
        break;
      default:
        break;
    }
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    unint64_t v6 = _swiftEmptyArrayStorage[3];
    if (v7 >= v6 >> 1) {
      sub_1001DE058(v6 > 1, v7 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v7 + 1;
    uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
    v8[4] = v4;
    v8[5] = v3;
    --v0;
  }
  while (v0);
  swift_bridgeObjectRetain();
  uint64_t v9 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = sub_100308F88(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    uint64_t v9 = sub_100308F88((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  long long v9[2] = v11 + 1;
  uint64_t v12 = &v9[2 * v11];
  v12[4] = 0xD000000000000014;
  v12[5] = 0x80000001007D39D0;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_10039D074(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_10090DC48, &qword_100913B30);
}

uint64_t sub_10039D088(uint64_t a1, uint64_t a2)
{
  return sub_1003A0634(a1, a2, (uint64_t)&type metadata for Int64, 0x4025203D3C204B25, 0xE800000000000000, &qword_100913B30);
}

unint64_t sub_10039D0B0(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v106 = a3;
  id v108 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v105 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v99 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v100 = (char *)&v91 - v8;
  __chkstk_darwin(v9);
  uint64_t v102 = (char *)&v91 - v10;
  uint64_t v115 = (char *)&_swiftEmptySetSingleton;
  uint64_t v116 = &_swiftEmptySetSingleton;
  unint64_t v113 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v114 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v98 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_53;
  }
  uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v107 = a1;
    uint64_t v104 = v5;
    if (!v11) {
      break;
    }
    unint64_t v12 = a1 & 0xC000000000000001;
    uint64_t v13 = 4;
    while (1)
    {
      uint64_t v5 = v13 - 4;
      id v14 = v12 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v13);
      uint64_t v15 = v14;
      uint64_t v16 = v13 - 3;
      if (__OFADD__(v5, 1)) {
        break;
      }
      if (([v108 includeConcealed] & 1) != 0
        || ![v15 isConcealed])
      {
        id v17 = [v15 list];
        if (v17)
        {
          id v112 = 0;
          id v18 = v17;
          id v19 = [v18 remObjectIDWithError:&v112];
          id v20 = v112;
          if (!v19) {
            goto LABEL_31;
          }
          id v21 = v19;
          id v22 = v112;
          uint64_t v23 = sub_100694D98(v21);
          if (v3) {
            goto LABEL_32;
          }
          uint64_t v24 = v23;

          sub_10031E20C(&v109, v24);
          id v25 = v18;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          a1 = v107;
        }
        id v26 = [v15 parentReminder];
        if (v26)
        {
          id v112 = 0;
          id v18 = v26;
          id v27 = [v18 remObjectIDWithError:&v112];
          id v20 = v112;
          if (!v27)
          {
LABEL_31:
            id v46 = v20;
            _convertNSErrorToError(_:)();

            swift_willThrow();
LABEL_32:
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_33:
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          uint64_t v28 = v27;
          id v29 = v112;
          char v30 = sub_100693E40(v28);
          if (v3) {
            goto LABEL_32;
          }
          unint64_t v31 = v30;

          sub_10031E1F8(&v109, v31);
          id v32 = v18;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          a1 = v107;
        }
      }

      ++v13;
      if (v16 == v11)
      {
        swift_bridgeObjectRelease();
        uint64_t v33 = v116;
        unint64_t v34 = v114;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_53:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  uint64_t v33 = &_swiftEmptySetSingleton;
  unint64_t v34 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_26:
  uint64_t v35 = swift_bridgeObjectRetain();
  uint64_t v36 = sub_100209A14(v35);
  swift_bridgeObjectRelease();
  uint64_t v101 = v33;
  unint64_t v103 = (unint64_t)v36;
  if (v34 >> 62)
  {
    sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    swift_bridgeObjectRetain();
    char v37 = (void *)_bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    char v37 = (void *)v34;
  }
  swift_bridgeObjectRelease();
  uint64_t v109 = v37;
  uint64_t v38 = sub_100094134(&qword_10090FF00);
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  uint64_t v39 = sub_1000BFEAC((unint64_t *)&qword_10090FE58, &qword_10090FF00);
  uint64_t v40 = sub_1000ED098((unint64_t *)&qword_100910050, (unint64_t *)&qword_10090FE00);
  uint64_t v97 = v38;
  uint64_t v41 = Sequence.compactMapToSet<A>(_:)();
  uint64_t v42 = (objc_class *)sub_1002099D8(v41);
  swift_bridgeObjectRelease();
  uint64_t v43 = sub_10069705C(v103, 0, 1, 0, v42);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  uint64_t v44 = v43;
  uint64_t v95 = v40;
  uint64_t v96 = v39;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v45 = sub_10053ACE4((unint64_t)v44);
  unint64_t v49 = v48;
  unint64_t v103 = (unint64_t)v45;
  if (qword_1009073C0 != -1) {
    swift_once();
  }
  uint64_t v50 = sub_10008E2DC(v104, (uint64_t)qword_1009168E8);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 16);
  uint64_t v52 = v102;
  uint64_t v94 = v50;
  uint64_t v101 = (void *)(v105 + 16);
  uint64_t v93 = v51;
  uint64_t v53 = ((uint64_t (*)(char *))v51)(v102);
  uint64_t v109 = v44;
  __chkstk_darwin(v53);
  *(&v91 - 2) = (uint64_t)v52;
  sub_100094134(&qword_100910160);
  sub_1000963CC(0, (unint64_t *)&unk_100914440);
  sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
  uint64_t v54 = (void *)Sequence.map<A>(skippingError:_:)();
  uint64_t v55 = v104;
  uint64_t v56 = *(void (**)(char *, uint64_t))(v105 + 8);
  v105 += 8;
  v56(v102, v104);
  swift_bridgeObjectRelease();
  id v112 = v54;
  sub_100201C64(v49);
  uint64_t v57 = v115;
  uint64_t v58 = swift_bridgeObjectRetain();
  uint64_t v59 = sub_100209A08(v58);
  swift_bridgeObjectRelease();
  unint64_t v60 = (void *)v113;
  if (v113 >> 62)
  {
    sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    swift_bridgeObjectRetain();
    id v61 = (void *)_bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    id v61 = v60;
  }
  swift_bridgeObjectRelease();
  uint64_t v109 = v61;
  uint64_t v62 = Sequence.compactMapToSet<A>(_:)();
  long long v63 = (objc_class *)sub_1002099D8(v62);
  swift_bridgeObjectRelease();
  unint64_t v64 = (unint64_t)sub_100697018((uint64_t)v59, 0, 1, 0, v63);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unsigned __int8 v65 = [v108 includeConcealed];
  uint64_t v92 = v56;
  if ((v65 & 1) == 0)
  {
    uint64_t v109 = _swiftEmptyArrayStorage;
    if (v64 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v66) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v66 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v66)
      {
LABEL_42:
        uint64_t v102 = v57;
        if (v66 < 1)
        {
          __break(1u);
LABEL_80:
          __break(1u);
        }
        for (uint64_t i = 0; i != v66; ++i)
        {
          if ((v64 & 0xC000000000000001) != 0) {
            id v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v68 = *(id *)(v64 + 8 * i + 32);
          }
          uint64_t v69 = v68;
          if ([v68 isConcealed])
          {
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v64 = (unint64_t)v109;
        uint64_t v55 = v104;
        goto LABEL_58;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v64 = (unint64_t)_swiftEmptyArrayStorage;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v70 = v100;
  uint64_t v71 = v93(v100, v94, v55);
  uint64_t v109 = (void *)v64;
  __chkstk_darwin(v71);
  *(&v91 - 2) = (uint64_t)v70;
  swift_bridgeObjectRetain();
  sub_100094134(&qword_10090D750);
  sub_1000963CC(0, &qword_1009100F8);
  sub_1000BFEAC((unint64_t *)&qword_10090FD80, &qword_10090D750);
  unint64_t v72 = Sequence.map<A>(skippingError:_:)();
  uint64_t v73 = v106;
  v92(v100, v55);
  swift_bridgeObjectRelease();
  sub_10039A314(v64, v108, v73, v72);
  swift_bridgeObjectRelease();
  unint64_t result = v103;
  if (v103 >> 62) {
    goto LABEL_77;
  }
  if (*(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return result;
  }
LABEL_60:
  swift_bridgeObjectRelease();
  if (v98)
  {
    swift_bridgeObjectRetain();
    uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v74 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v75 = _swiftEmptyArrayStorage;
  if (!v74) {
    goto LABEL_73;
  }
  uint64_t v111 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v74 < 0) {
    goto LABEL_80;
  }
  uint64_t v55 = 0;
  unint64_t v76 = v107 & 0xC000000000000001;
  while (1)
  {
    if (v74 == v55)
    {
      __break(1u);
LABEL_77:
      swift_bridgeObjectRetain();
      uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t result = v103;
      if (v90) {
        return result;
      }
      goto LABEL_60;
    }
    id v77 = v76 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v107 + 8 * v55 + 32);
    uint64_t v78 = v77;
    if (![v77 account]) {
      break;
    }
    ++v55;

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v74 == v55)
    {
      uint64_t v75 = v111;
      uint64_t v55 = v104;
LABEL_73:
      uint64_t v79 = v99;
      uint64_t v80 = v93(v99, v94, v55);
      uint64_t v109 = v75;
      __chkstk_darwin(v80);
      *(&v91 - 2) = (uint64_t)v79;
      sub_100094134(&qword_100910070);
      sub_1000963CC(0, &qword_100910180);
      sub_1000BFEAC((unint64_t *)&qword_1009133E0, &qword_100910070);
      uint64_t v89 = Sequence.map<A>(skippingError:_:)();
      v92(v99, v55);
      swift_bridgeObjectRelease();
      return v89;
    }
  }
  uint64_t v81 = self;
  uint64_t v109 = 0;
  unint64_t v110 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  uint64_t v109 = (void *)0xD000000000000021;
  unint64_t v110 = 0x80000001007D3A60;
  id v82 = [v78 description];
  uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v85 = v84;

  v86._uint64_t countAndFlagsBits = v83;
  v86._uint64_t object = v85;
  String.append(_:)(v86);
  swift_bridgeObjectRelease();
  v87._uint64_t countAndFlagsBits = 125;
  v87._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v87);
  NSString v88 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v81 internalErrorWithDebugDescription:v88];

  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10039E084(unint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void **)(v9 - 8);
  *(void *)&double v11 = __chkstk_darwin(v9).n128_u64[0];
  id v61 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = a2;
  unsigned int v13 = [a2 includeConcealed:v11];
  id v56 = a4;
  uint64_t v60 = a3;
  uint64_t v58 = v4;
  if (v13)
  {
    swift_bridgeObjectRetain();
    goto LABEL_17;
  }
  uint64_t v62 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    if (v14) {
      goto LABEL_5;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    a1 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v14) {
    goto LABEL_16;
  }
LABEL_5:
  if (v14 < 1)
  {
    __break(1u);
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  uint64_t v55 = v10;
  uint64_t v57 = v9;
  for (uint64_t i = 0; i != v14; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v16 = *(id *)(a1 + 8 * i + 32);
    }
    id v17 = v16;
    if ([v16 isConcealed])
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  a1 = (unint64_t)v62;
  uint64_t v9 = v57;
  uint64_t v10 = v55;
LABEL_17:
  type metadata accessor for REMReminderStorageCDIngestor();
  uint64_t inited = swift_initStackObject();
  uint64_t v19 = qword_1009073C0;
  swift_bridgeObjectRetain();
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_10008E2DC(v9, (uint64_t)qword_1009168E8);
  id v21 = v10;
  id v22 = (uint64_t (*)(char *, uint64_t, uint64_t))v10[2];
  uint64_t v23 = v61;
  uint64_t v24 = v9;
  uint64_t v25 = v22(v61, v20, v9);
  uint64_t v62 = (void *)a1;
  __chkstk_darwin(v25);
  *(&v54 - 2) = (uint64_t)v23;
  sub_100094134(&qword_10090D750);
  sub_1000963CC(0, &qword_1009100F8);
  sub_1000BFEAC((unint64_t *)&qword_10090FD80, &qword_10090D750);
  uint64_t v57 = inited;
  uint64_t v26 = v58;
  uint64_t v27 = Sequence.map<A>(skippingError:_:)();
  if (v26)
  {
    swift_errorRelease();
    uint64_t v28 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v28 = (void *)v27;
  }
  id v29 = v59;
  uint64_t v30 = v60;
  ((void (*)(char *, uint64_t))v21[1])(v61, v24);
  swift_bridgeObjectRelease();
  sub_10039A314(a1, v29, v30, (unint64_t)v28);
  unint64_t v32 = sub_10039D0B0(a1, v29, v30);
  uint64_t v55 = v33;
  id v61 = v34;
  swift_bridgeObjectRelease();
  uint64_t v62 = v28;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v35 = sub_100094134(&qword_100910100);
  uint64_t v36 = sub_1000BFEAC(&qword_1009169E0, &qword_100910100);
  uint64_t v58 = sub_1000ED098((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
  uint64_t v59 = (void *)v36;
  unint64_t v37 = Sequence.indexBy<A, B>(key:value:)();
  swift_release();
  swift_release();
  uint64_t v38 = sub_100420004(v37);
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v62 = _swiftEmptyDictionarySingleton;
  sub_10039A7C0(v38, (uint64_t)sub_10039A770, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v62);
  uint64_t v60 = v35;
  uint64_t v40 = v62;
  swift_bridgeObjectRelease();
  uint64_t v62 = (void *)v32;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_100094134(&qword_1009101F0);
  sub_1000BFEAC(&qword_1009169E8, &qword_1009101F0);
  unint64_t v41 = Sequence.indexBy<A, B>(key:value:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v42 = sub_100420018(v41);
  swift_bridgeObjectRelease();
  char v43 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v62 = v40;
  sub_10039A7C0(v42, (uint64_t)sub_10039A770, 0, v43, (uint64_t)&v62);
  uint64_t v44 = v62;
  swift_bridgeObjectRelease();
  uint64_t v62 = v55;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_100094134(&qword_1009100B0);
  sub_1000BFEAC(&qword_10090ADB0, &qword_1009100B0);
  unint64_t v45 = Sequence.indexBy<A, B>(key:value:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v46 = sub_10042048C(v45);
  swift_bridgeObjectRelease();
  char v47 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v62 = v44;
  sub_10039A7C0(v46, (uint64_t)sub_10039A770, 0, v47, (uint64_t)&v62);
  unint64_t v48 = v62;
  swift_bridgeObjectRelease();
  uint64_t v62 = v61;
  swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v49 = Sequence.indexBy<A, B>(key:value:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v50 = sub_100420004(v49);
  swift_bridgeObjectRelease();
  char v51 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v62 = v48;
  sub_10039A7C0(v50, (uint64_t)sub_10039A770, 0, v51, (uint64_t)&v62);
  swift_bridgeObjectRelease();
  type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  id v52 = v56;
  REMStoreObjectsContainer.init(store:storages:)();
  uint64_t v53 = sub_10039AC1C((unint64_t)v28);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (uint64_t)v53;
}

uint64_t sub_10039E88C(uint64_t a1, objc_class *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = (void *)sub_10038F1F0();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v13 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v14 = [(id)swift_getObjCClassFromMetadata() entity];
  [v13 setEntity:v14];

  if (a9)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v15.super.Class isa = 0;
  }
  [v13 setAffectedStores:v15.super.isa];

  [v13 setPredicate:v12];
  [v13 setFetchLimit:a6];
  [v13 setFetchOffset:a5];
  sub_100094134(&qword_1009169B0);
  sub_1000BFEAC(&qword_1009169B8, &qword_1009169B0);
  uint64_t Predicate = Sequence<>.postFetchPredicateTypes.getter();
  id v17 = _swiftEmptyArrayStorage;
  id v64 = v13;
  if (a7)
  {
    if (a7 >> 62) {
      goto LABEL_20;
    }
    uint64_t v18 = *(void *)((a7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18)
    {
      while (1)
      {
        sub_1001DE058(0, v18 & ~(v18 >> 63), 0);
        if (v18 < 0) {
          break;
        }
        uint64_t v60 = Predicate;
        uint64_t Predicate = 0;
        uint64_t v19 = v17;
        unint64_t v67 = a7 & 0xC000000000000001;
        id v17 = (void *)a7;
        while (v18 != Predicate)
        {
          if (v67) {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            swift_retain();
          }
          uint64_t v20 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
          if (!v21) {
            goto LABEL_70;
          }
          uint64_t v22 = v20;
          uint64_t v23 = v21;
          swift_release();
          unint64_t v25 = v19[2];
          unint64_t v24 = v19[3];
          if (v25 >= v24 >> 1) {
            sub_1001DE058(v24 > 1, v25 + 1, 1);
          }
          ++Predicate;
          v19[2] = v25 + 1;
          uint64_t v26 = &v19[2 * v25];
          v26[4] = v22;
          v26[5] = v23;
          a7 = (unint64_t)v17;
          if (v18 == Predicate)
          {
            swift_bridgeObjectRelease();
            id v13 = v64;
            id v17 = _swiftEmptyArrayStorage;
            uint64_t Predicate = v60;
            goto LABEL_22;
          }
        }
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        if (!v18) {
          goto LABEL_21;
        }
      }
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    uint64_t v19 = _swiftEmptyArrayStorage;
    id v13 = v64;
  }
  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }
LABEL_22:
  uint64_t v70 = v19;
  uint64_t v59 = *(void *)(a4 + 16);
  if (!v59)
  {
LABEL_41:
    if (v19[2])
    {
      sub_100094134((uint64_t *)&unk_10090AFB0);
      Array<A>.removeDuplicates()();
      uint64_t v19 = v70;
      uint64_t v38 = swift_bridgeObjectRetain();
      sub_1001FFC40(v38);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v13 setPropertiesToFetch:isa];
    }
    sub_10039CE28();
    uint64_t v40 = swift_bridgeObjectRetain();
    sub_100201B10(v40);
    uint64_t v41 = sub_1001C06B0(Predicate);
    swift_bridgeObjectRelease();
    unint64_t v42 = (unint64_t)sub_100209C78(v41);
    swift_bridgeObjectRelease();
    if ((v42 & 0x8000000000000000) != 0 || (v42 & 0x4000000000000000) != 0) {
      goto LABEL_58;
    }
    uint64_t v43 = *(void *)(v42 + 16);
    if (!v43)
    {
LABEL_59:
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v45 = _swiftEmptyArrayStorage;
LABEL_60:
      sub_100201B10((uint64_t)v45);
      sub_100094134((uint64_t *)&unk_10090AFB0);
      Array<A>.removeDuplicates()();
      Class v52 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v64 setRelationshipKeyPathsForPrefetching:v52];

      Class v53 = a2;
      if (a2)
      {
        sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
        Class v53 = Array._bridgeToObjectiveC()().super.isa;
      }
      [v64 setSortDescriptors:v53];

      uint64_t v54 = NSManagedObjectContext.fetch<A>(_:)();
      if (v63 || (uint64_t v19 = (void *)v54, !v59))
      {
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v55 = swift_bridgeObjectRetain();
        id v56 = sub_10039C7F8(v55, (uint64_t)&_swiftEmptySetSingleton, a4);

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return (uint64_t)v56;
      }
      return (uint64_t)v19;
    }
    while (1)
    {
      sub_1001DE058(0, v43 & ~(v43 >> 63), 0);
      if (v43 < 0) {
        break;
      }
      uint64_t v44 = 0;
      unint64_t v45 = v17;
      unint64_t v66 = v42 & 0xC000000000000001;
      uint64_t v69 = (void *)v42;
      while (v43 != v44)
      {
        if (v66) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        uint64_t v46 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
        if (!v47) {
          goto LABEL_70;
        }
        uint64_t v48 = v46;
        id v17 = v47;
        swift_release();
        unint64_t v50 = v45[2];
        unint64_t v49 = v45[3];
        if (v50 >= v49 >> 1) {
          sub_1001DE058(v49 > 1, v50 + 1, 1);
        }
        ++v44;
        v45[2] = v50 + 1;
        char v51 = &v45[2 * v50];
        v51[4] = v48;
        v51[5] = v17;
        unint64_t v42 = (unint64_t)v69;
        if (v43 == v44)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_60;
        }
      }
      __break(1u);
LABEL_58:
      swift_bridgeObjectRetain();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (!v43) {
        goto LABEL_59;
      }
    }
    __break(1u);
    goto LABEL_68;
  }
  uint64_t v27 = sub_1001C0698(Predicate);
  unint64_t v28 = (unint64_t)sub_100209C78(v27);
  swift_bridgeObjectRelease();
  if ((v28 & 0x8000000000000000) != 0 || (v28 & 0x4000000000000000) != 0) {
    goto LABEL_38;
  }
  uint64_t v29 = *(void *)(v28 + 16);
  if (!v29)
  {
LABEL_39:
    swift_release();
    uint64_t v30 = _swiftEmptyArrayStorage;
LABEL_40:
    sub_100201B10((uint64_t)v30);
    uint64_t v19 = v70;
    id v13 = v64;
    goto LABEL_41;
  }
  while (1)
  {
    sub_1001DE058(0, v29 & ~(v29 >> 63), 0);
    if (v29 < 0) {
      break;
    }
    uint64_t v61 = Predicate;
    uint64_t Predicate = 0;
    uint64_t v30 = v17;
    unint64_t v68 = v28 & 0xC000000000000001;
    while (v29 != Predicate)
    {
      if (v68) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      id v17 = (void *)v28;
      uint64_t v31 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
      if (!v32) {
        goto LABEL_70;
      }
      uint64_t v33 = v31;
      uint64_t v34 = v32;
      swift_release();
      unint64_t v36 = v30[2];
      unint64_t v35 = v30[3];
      if (v36 >= v35 >> 1) {
        sub_1001DE058(v35 > 1, v36 + 1, 1);
      }
      ++Predicate;
      v30[2] = v36 + 1;
      unint64_t v37 = &v30[2 * v36];
      v37[4] = v33;
      v37[5] = v34;
      unint64_t v28 = (unint64_t)v17;
      if (v29 == Predicate)
      {
        swift_release();
        id v17 = _swiftEmptyArrayStorage;
        uint64_t Predicate = v61;
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v29) {
      goto LABEL_39;
    }
  }
LABEL_69:
  __break(1u);
LABEL_70:
  _StringGuts.grow(_:)(46);
  v58._uint64_t object = (void *)0x80000001007CAF70;
  v58._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v58);
  sub_100094134((uint64_t *)&unk_10090B070);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10039F13C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10039F92C(a1, a2, a3, a4, (uint64_t *)&unk_100913AB0);
}

uint64_t sub_10039F148(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, (uint64_t *)&unk_100913AB0);
}

id sub_10039F16C(uint64_t a1, uint64_t a2)
{
  return sub_10039F1AC(a1, a2, (uint64_t *)&unk_100909E50);
}

id sub_10039F18C(uint64_t a1, uint64_t a2)
{
  return sub_10039F1AC(a1, a2, (uint64_t *)&unk_100909A40);
}

id sub_10039F1AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100776E80;
  uint64_t v6 = sub_10029F8F8();
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v7;
  *(void *)(v5 + 88) = sub_100094134(a3);
  uint64_t v8 = sub_1000C1FE8((uint64_t *)(v5 + 64));
  sub_1000BF710(a2, (uint64_t)v8, a3);
  NSString v9 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [self predicateWithFormat:v9 argumentArray:isa];

  sub_1000966BC(a2, a3);
  return v11;
}

uint64_t sub_10039F2C4(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_10090FF80);
}

uint64_t sub_10039F2D8(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_10090FF80);
}

uint64_t sub_10039F2FC(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_100913AA0);
}

uint64_t sub_10039F310(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_100913AA0);
}

uint64_t sub_10039F334(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_100913AA0);
}

uint64_t sub_10039F358(uint64_t a1)
{
  return sub_1003A07F0(a1, &qword_100913AA0);
}

uint64_t sub_10039F364(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, (uint64_t *)&unk_100913A88);
}

uint64_t sub_10039F378(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, (uint64_t *)&unk_100913A88);
}

uint64_t sub_10039F39C(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_100913A88);
}

uint64_t sub_10039F3BC(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_100913B78);
}

uint64_t sub_10039F3D0(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_100913B78);
}

uint64_t sub_10039F3F4(uint64_t a1)
{
  return sub_1003A07F0(a1, &qword_100913B78);
}

uint64_t sub_10039F400(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4559203D3D204B25, 0xE900000000000053, &qword_100913B78);
}

uint64_t sub_10039F424(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_100913B78);
}

uint64_t sub_10039F444(uint64_t a1, uint64_t a2)
{
  return sub_10039AE14(a1, a2, (uint64_t *)&unk_100909E50, 0x4025203D21204B25, 0xE800000000000000, &qword_100913B78);
}

uint64_t sub_10039F46C(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_100913B50);
}

uint64_t sub_10039F480(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_100913B50);
}

uint64_t sub_10039F4A4(uint64_t a1)
{
  return sub_1003A07F0(a1, &qword_100913B50);
}

uint64_t sub_10039F4B0(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4559203D3D204B25, 0xE900000000000053, &qword_100913B50);
}

uint64_t sub_10039F4D4(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_100913B50);
}

uint64_t sub_10039F4F4(uint64_t a1, uint64_t a2)
{
  return sub_10039AE14(a1, a2, (uint64_t *)&unk_100909E50, 0x4025203D21204B25, 0xE800000000000000, &qword_100913B50);
}

uint64_t sub_10039F51C(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_10090DC60);
}

uint64_t sub_10039F540(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_10090DC60);
}

uint64_t sub_10039F564(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_10090DC60);
}

uint64_t sub_10039F578(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_1009169F0);
}

uint64_t sub_10039F58C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  return sub_10039F598(a1, a2, a3, a4, a5, a6, a7, &qword_10090DC68);
}

uint64_t sub_10039F598(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100776E40;
  uint64_t v15 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v16)
  {
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v16;
    if (a7) {
      sub_100200B74(a7);
    }
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = a2;
    v17._uint64_t object = a3;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 8236;
    v18._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = a4;
    v19._uint64_t object = a5;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 0x746E756F63402E29;
    v20._uint64_t object = (void *)0xEB00000000203E20;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v24 = [self predicateWithFormat:v22 argumentArray:isa];

    return (uint64_t)v24;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v26._uint64_t object = (void *)0x80000001007CAF70;
    v26._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v26);
    sub_100094134(a8);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10039F83C(uint64_t a1, uint64_t a2)
{
  return sub_1003A0634(a1, a2, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEE004025203E2074, &qword_10090DC68);
}

uint64_t sub_10039F870(uint64_t a1, uint64_t a2)
{
  return sub_1003A0634(a1, a2, (uint64_t)&type metadata for Int, 0x6E756F63402E4B25, 0xEF4025203D3D2074, &qword_10090DC68);
}

uint64_t sub_10039F8A4(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_1009139F0);
}

uint64_t sub_10039F8B8(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_1009139F0);
}

uint64_t sub_10039F8DC(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_1009139F0);
}

uint64_t sub_10039F8FC(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D21204B25, 0xE90000000000006CLL, &qword_100913B78);
}

uint64_t sub_10039F920(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10039F92C(a1, a2, a3, a4, &qword_100913B78);
}

uint64_t sub_10039F92C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = sub_10034D54C(a4);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 4203808;
  v10._uint64_t object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100776E80;
  swift_retain();
  uint64_t v12 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v13)
  {
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    swift_release();
    *(void *)(v11 + 32) = v14;
    *(void *)(v11 + 40) = v15;
    *(void *)(v11 + 88) = &type metadata for String;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = a2;
    *(void *)(v11 + 72) = a3;
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v18 = [self predicateWithFormat:v16 argumentArray:isa];

    return (uint64_t)v18;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v20._uint64_t object = (void *)0x80000001007CAF70;
    v20._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v20);
    sub_100094134(a5);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_10039FB64(void *a1, unint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath();
  id v5 = a1;
  uint64_t v6 = (void *)sub_10032E028(KeyPath, a1);
  swift_release();

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10077A530;
  *(void *)(v7 + 32) = v5;
  id v18 = (void *)v7;
  specialized Array._endMutation()();
  id v8 = v5;
  sub_100094134(&qword_10090FF00);
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  sub_1000BFEAC((unint64_t *)&qword_10090FE58, &qword_10090FF00);
  sub_1000ED098((unint64_t *)&qword_100910050, (unint64_t *)&qword_10090FE00);
  uint64_t v9 = Sequence.compactMapToSet<A>(_:)();
  Swift::String v10 = sub_1002099D8(v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)sub_1003BC8C4(a2, 0, (uint64_t)v10, (uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_release();
  id v17 = [v8 managedObjectContext];
  sub_100094134(&qword_1009169D0);
  Optional.tryUnwrap(_:file:line:)();

  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  unint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();

  if (qword_1009073C0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_1009168E8);
  swift_bridgeObjectRetain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    NSString v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)NSString v16 = 134217984;
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Pre-fetching {result.count: %ld}", v16, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10039FFBC(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_100913980);
}

uint64_t sub_10039FFD0(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_100913980);
}

uint64_t sub_10039FFF4(uint64_t a1)
{
  return sub_1003A07F0(a1, &qword_100913980);
}

uint64_t sub_1003A0000(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4559203D3D204B25, 0xE900000000000053, &qword_100913980);
}

uint64_t sub_1003A0024(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_100913980);
}

uint64_t sub_1003A0044(uint64_t a1, uint64_t a2)
{
  return sub_10039AE14(a1, a2, (uint64_t *)&unk_100909E50, 0x4025203D21204B25, 0xE800000000000000, &qword_100913980);
}

uint64_t sub_1003A006C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003A00B0(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, (uint64_t *)&unk_100913AB0);
}

uint64_t sub_1003A00D0(uint64_t a1, int a2)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100776E80;
  uint64_t v4 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v5)
  {
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v5;
    *(void *)(v3 + 88) = &type metadata for Int32;
    *(_DWORD *)(v3 + 64) = a2;
    NSString v6 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v8 = [self predicateWithFormat:v6 argumentArray:isa];

    return (uint64_t)v8;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v10._uint64_t object = (void *)0x80000001007CAF70;
    v10._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v10);
    sub_100094134((uint64_t *)&unk_100913AB0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1003A0270(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_1009169D8);
}

uint64_t sub_1003A0290(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_100913A98);
}

uint64_t sub_1003A02A4(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_100914468);
}

uint64_t sub_1003A02B8(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169C8, &qword_1009169D8);
}

uint64_t sub_1003A02CC(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_1009169D8);
}

uint64_t sub_1003A02E0(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169C8, &qword_1009145D8);
}

uint64_t sub_1003A02F4(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_100916998, &qword_10090DC60);
}

uint64_t sub_1003A0308(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, (uint64_t *)&unk_10090DC30);
}

uint64_t sub_1003A031C(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169C8, &qword_1009169C0);
}

uint64_t sub_1003A0330(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_1009169C0);
}

uint64_t sub_1003A0344(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, &qword_1009143E0);
}

uint64_t sub_1003A0358(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_100916998, &qword_100914378);
}

uint64_t sub_1003A036C(uint64_t a1, uint64_t a2)
{
  return sub_1003A0380(a1, a2, &qword_1009169A8, (uint64_t *)&unk_100914540);
}

uint64_t sub_1003A0380(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100776E80;
  uint64_t v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v9)
  {
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v9;
    *(void *)(v7 + 88) = sub_100094134(a3);
    *(void *)(v7 + 64) = a2;
    NSString v10 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v12 = [self predicateWithFormat:v10 argumentArray:isa];

    return (uint64_t)v12;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v14._uint64_t object = (void *)0x80000001007CAF70;
    v14._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v14);
    sub_100094134(a4);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1003A052C(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_1009169C0);
}

uint64_t sub_1003A054C(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4F4E203D3D204B25, 0xE800000000000000, &qword_1009143E0);
}

uint64_t sub_1003A056C(uint64_t a1)
{
  return sub_1003A07F0(a1, &qword_1009169C0);
}

uint64_t sub_1003A0578(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_1009143E0);
}

uint64_t sub_1003A059C(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_100914468);
}

uint64_t sub_1003A05C0(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x696E203D3D204B25, 0xE90000000000006CLL, &qword_100913A98);
}

uint64_t sub_1003A05E4(uint64_t a1, uint64_t a2)
{
  return sub_10039AE14(a1, a2, (uint64_t *)&unk_100909E50, 0x4025203D21204B25, 0xE800000000000000, &qword_1009143E0);
}

uint64_t sub_1003A060C(uint64_t a1, uint64_t a2)
{
  return sub_1003A0634(a1, a2, (uint64_t)&type metadata for Int64, 0x4025203D21204B25, 0xE800000000000000, (uint64_t *)&unk_10090B070);
}

uint64_t sub_1003A0634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100776E80;
  uint64_t v10 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v11)
  {
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v11;
    *(void *)(v9 + 88) = a3;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = a2;
    NSString v12 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v14 = [self predicateWithFormat:v12 argumentArray:isa];

    return (uint64_t)v14;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v16._uint64_t object = (void *)0x80000001007CAF70;
    v16._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v16);
    sub_100094134(a6);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1003A07D8(uint64_t a1)
{
  return sub_1003A07F0(a1, &qword_1009169D8);
}

uint64_t sub_1003A07E4(uint64_t a1)
{
  return sub_1003A07F0(a1, &qword_1009143E0);
}

uint64_t sub_1003A07F0(uint64_t a1, uint64_t *a2)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100776E80;
  swift_retain();
  uint64_t v4 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v5) {
    goto LABEL_4;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  swift_release();
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v7;
  swift_retain();
  uint64_t v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    swift_release();
    *(void *)(v3 + 88) = &type metadata for String;
    *(void *)(v3 + 64) = v10;
    *(void *)(v3 + 72) = v11;
    NSString v12 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v14 = [self predicateWithFormat:v12 argumentArray:isa];

    return (uint64_t)v14;
  }
  else
  {
LABEL_4:
    _StringGuts.grow(_:)(46);
    v16._uint64_t object = (void *)0x80000001007CAF70;
    v16._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v16);
    sub_100094134(a2);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id sub_1003A09CC(void *a1, uint64_t a2)
{
  uint64_t v45 = a2;
  id v40 = a1;
  id v41 = (id)_s10PredicatesOMa(0);
  __chkstk_darwin(v41);
  uint64_t v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Calendar.Component();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Calendar();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v12 - 8);
  id v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for Date();
  uint64_t v44 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  Swift::String v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  static Calendar.current.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Calendar.Component.day(_:), v4);
  if (v45 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v17 = *(int *)(sub_100094134(&qword_100916950) + 48);
  sub_1000BF710((uint64_t)v14, (uint64_t)v3, (uint64_t *)&unk_100909A40);
  v3[v17] = 1;
  swift_storeEnumTagMultiPayload();
  id v18 = (id)sub_10038F1F0();
  sub_1003A136C((uint64_t)v3, _s10PredicatesOMa);
  Swift::String v19 = v42;
  uint64_t v20 = sub_100551A0C((uint64_t)v18);
  if (!v19)
  {
    uint64_t v3 = (char *)v20;
    uint64_t v5 = (uint64_t)v14;

    id v14 = (char *)[objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v3];
    [v14 setResultType:1];
    id v46 = 0;
    id v22 = [v40 executeRequest:v14 error:&v46];
    id v18 = v46;
    if (!v22)
    {
      id v25 = v46;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v21 = v5;
      goto LABEL_11;
    }
    id v23 = v22;
    *((void *)&v49 + 1) = sub_1000963CC(0, (unint64_t *)&unk_100916F40);
    *(void *)&long long v48 = v23;
    sub_1000963CC(0, (unint64_t *)&unk_10090B030);
    id v24 = v18;
    throwingCast<A>(_:as:failureMessage:)();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v48);
    id v26 = v47;
    if ([v47 result])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v48 = 0u;
      long long v49 = 0u;
    }
    uint64_t v27 = sub_100094134(&qword_100908270);
    throwingCast<A>(_:as:failureMessage:)();
    id v41 = v26;
    unint64_t v42 = v16;
    sub_1000966BC((uint64_t)&v48, &qword_100908190);
    unint64_t v29 = (unint64_t)v47;
    uint64_t v45 = self;
    sub_100094134(&qword_10090AF50);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)&long long v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v48 + 1) = v31;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = v27;
    *(void *)(inited + 72) = v29;
    swift_bridgeObjectRetain();
    sub_1002EE418(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_10077A530;
    id v34 = v40;
    *(void *)(v33 + 32) = v40;
    *(void *)&long long v48 = v33;
    specialized Array._endMutation()();
    sub_1000963CC(0, (unint64_t *)&unk_100916F50);
    id v35 = v34;
    Class v36 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [(id)v45 mergeChangesFromRemoteContextSave:isa intoContexts:v36];

    if (!(v29 >> 62))
    {
      id v18 = *(id *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);

LABEL_15:
      uint64_t v37 = v44;
      uint64_t v38 = v42;

      swift_bridgeObjectRelease();
      sub_1000966BC(v5, (uint64_t *)&unk_100909A40);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v43);
      return v18;
    }
LABEL_17:
    swift_bridgeObjectRetain();
    id v18 = (id)_CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  uint64_t v21 = (uint64_t)v14;
LABEL_11:
  sub_1000966BC(v21, (uint64_t *)&unk_100909A40);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v43);
  return v18;
}

uint64_t sub_1003A11B0(uint64_t a1)
{
  return sub_1003A11D4(a1, 0x4559203D3D204B25, 0xE900000000000053, &qword_1009143E0);
}

uint64_t sub_1003A11D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100776E40;
  uint64_t v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v7)
  {
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v7;
    NSString v8 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v10 = [self predicateWithFormat:v8 argumentArray:isa];

    return (uint64_t)v10;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v12._uint64_t object = (void *)0x80000001007CAF70;
    v12._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    sub_100094134(a4);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1003A136C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003A13CC()
{
  return sub_10044B428();
}

uint64_t sub_1003A13D4()
{
  return sub_1003E84D8();
}

const char *sub_1003A13E0()
{
  return "remObjectID";
}

id sub_1003A13EC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 remObjectID];
  *a2 = result;
  return result;
}

uint64_t _s10PredicatesO18ConcealedPredicateOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA)
  {
    unsigned int v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 6;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 6;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1003A14D8);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 6;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 4;
  if (v8 <= 4) {
    return 0;
  }
  return result;
}

unsigned char *_s10PredicatesO18ConcealedPredicateOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFA) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v7 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1003A15C0);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t sub_1003A15E8(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

unsigned char *sub_1003A1604(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *_s10PredicatesO18ConcealedPredicateOMa()
{
  return &_s10PredicatesO18ConcealedPredicateON;
}

uint64_t *sub_1003A162C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1003A17A4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    return swift_bridgeObjectRelease();
  }
  else if (result <= 1)
  {
    uint64_t v3 = type metadata accessor for Date();
    int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_1003A184C(void *a1, void *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1003A1980(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003A136C((uint64_t)a1, _s10PredicatesO19CompletionPredicateOMa);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_1003A1AD8(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1003A1BE4(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003A136C((uint64_t)a1, _s10PredicatesO19CompletionPredicateOMa);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1003A1D14()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *sub_1003A1DAC(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *(void *)a1 = *a2;
    a1 = &v7[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(void *)a1 = *a2;
        a1[8] = *((unsigned char *)a2 + 8);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 1u:
      case 2u:
      case 0x21u:
        unint64_t v66 = *a2;
        *(void *)a1 = *a2;
        a1[8] = *((unsigned char *)a2 + 8);
        unint64_t v67 = v66;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 3u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v9 = sub_100094134(&qword_100916980);
        uint64_t v10 = *(int *)(v9 + 48);
        uint64_t v11 = &a1[v10];
        Swift::String v12 = (char **)((char *)a2 + v10);
        uint64_t v13 = _s10PredicatesO19CompletionPredicateOMa(0);
        unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2) {
          goto LABEL_66;
        }
        if (EnumCaseMultiPayload > 1) {
          goto LABEL_67;
        }
        goto LABEL_8;
      case 4u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_100094134(&qword_100916978);
        uint64_t v17 = *(int *)(v16 + 48);
        id v18 = &a1[v17];
        Swift::String v19 = (char *)a2 + v17;
        uint64_t v20 = type metadata accessor for Date();
        uint64_t v21 = *(void *)(v20 - 8);
        id v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
        if (v22(v19, 1, v20))
        {
          uint64_t v23 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        uint64_t v114 = *(int *)(v16 + 64);
        uint64_t v115 = &a1[v114];
        uint64_t v116 = (char *)a2 + v114;
        if (v22(v116, 1, v20)) {
          goto LABEL_63;
        }
        goto LABEL_64;
      case 5u:
        id v24 = *a2;
        *(void *)a1 = *a2;
        a1[8] = *((unsigned char *)a2 + 8);
        *((void *)a1 + 2) = a2[2];
        id v25 = v24;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 6u:
      case 7u:
      case 0x1Au:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
        Swift::String v86 = *a2;
        *(void *)a1 = *a2;
        Swift::String v87 = v86;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 8u:
      case 0x17u:
        id v26 = *a2;
        *(void *)a1 = *a2;
        uint64_t v27 = v26;
        uint64_t v28 = *(int *)(sub_100094134(&qword_100916940) + 48);
        unint64_t v29 = &a1[v28];
        uint64_t v30 = (uint64_t)a2 + v28;
        uint64_t v31 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
        swift_storeEnumTagMultiPayload();
        return a1;
      case 9u:
        NSString v88 = *a2;
        *(void *)a1 = *a2;
        uint64_t v89 = v88;
        uint64_t v90 = sub_100094134(&qword_100916970);
        uint64_t v91 = *(int *)(v90 + 48);
        uint64_t v92 = &a1[v91];
        uint64_t v93 = (uint64_t)a2 + v91;
        uint64_t v94 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v94 - 8) + 16))(v92, v93, v94);
        a1[*(int *)(v90 + 64)] = *((unsigned char *)a2 + *(int *)(v90 + 64));
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xAu:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v32 = *(int *)(sub_100094134(&qword_100916968) + 48);
        uint64_t v33 = &a1[v32];
        uint64_t v34 = (uint64_t)a2 + v32;
        uint64_t v35 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xBu:
      case 0xCu:
      case 0xFu:
        uint64_t v96 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v96 - 8) + 16))(a1, a2, v96);
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xDu:
        uint64_t v36 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v36 - 8) + 16))(a1, a2, v36);
        uint64_t v37 = *(int *)(sub_100094134(&qword_100916960) + 48);
        uint64_t v38 = &a1[v37];
        uint64_t v39 = (uint64_t)a2 + v37;
        uint64_t v40 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xEu:
        uint64_t v95 = type metadata accessor for Date();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v95 - 8) + 16))(a1, a2, v95);
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x10u:
        uint64_t v97 = *a2;
        *(void *)a1 = *a2;
        a1[8] = *((unsigned char *)a2 + 8);
        unint64_t v98 = v97;
        uint64_t v99 = *(int *)(sub_100094134(&qword_100916958) + 64);
        uint64_t v73 = &a1[v99];
        uint64_t v74 = (char *)a2 + v99;
        uint64_t v75 = type metadata accessor for Date();
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75)) {
          goto LABEL_40;
        }
        goto LABEL_53;
      case 0x11u:
        uint64_t v101 = type metadata accessor for Date();
        uint64_t v102 = *(void *)(v101 - 8);
        if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(v102 + 48))(a2, 1, v101))
        {
          uint64_t v103 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(a1, a2, *(void *)(*(void *)(v103 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char **, uint64_t))(v102 + 16))(a1, a2, v101);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(a1, 0, 1, v101);
        }
        uint64_t v118 = sub_100094134(&qword_100916950);
        a1[*(int *)(v118 + 48)] = *((unsigned char *)a2 + *(int *)(v118 + 48));
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x12u:
        id v41 = *a2;
        unint64_t v42 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v42;
        uint64_t v43 = v41;
        uint64_t v44 = v42;
        uint64_t v45 = *(int *)(sub_100094134(&qword_100916948) + 64);
        id v46 = &a1[v45];
        uint64_t v47 = (uint64_t)a2 + v45;
        uint64_t v48 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(v46, v47, v48);
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x13u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v49 = *(int *)(sub_100094134(&qword_10090E538) + 48);
        unint64_t v50 = &a1[v49];
        uint64_t v51 = (uint64_t)a2 + v49;
        uint64_t v52 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x14u:
      case 0x16u:
      case 0x1Cu:
      case 0x20u:
      case 0x2Au:
      case 0x2Du:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x15u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v53 = *(int *)(sub_100094134(&qword_100912550) + 48);
        uint64_t v54 = &a1[v53];
        uint64_t v55 = (uint64_t)a2 + v53;
        uint64_t v56 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x18u:
      case 0x19u:
        uint64_t v57 = *a2;
        Swift::String v58 = a2[1];
        *(void *)a1 = v57;
        *((void *)a1 + 1) = v58;
        swift_bridgeObjectRetain();
        uint64_t v59 = v58;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x1Bu:
        uint64_t v104 = type metadata accessor for Date();
        uint64_t v105 = *(void (**)(char *, char **, uint64_t))(*(void *)(v104 - 8) + 16);
        v105(a1, a2, v104);
        uint64_t v106 = sub_100094134(&qword_100916938);
        v105(&a1[*(int *)(v106 + 48)], (char **)((char *)a2 + *(int *)(v106 + 48)), v104);
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x1Du:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v60 = sub_100094134(&qword_100916930);
        uint64_t v61 = *(int *)(v60 + 48);
        uint64_t v62 = &a1[v61];
        uint64_t v63 = (char *)a2 + v61;
        uint64_t v20 = type metadata accessor for Date();
        uint64_t v21 = *(void *)(v20 - 8);
        id v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
        if (v64(v63, 1, v20))
        {
          uint64_t v65 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v62, v63, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v62, v63, v20);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v62, 0, 1, v20);
        }
        uint64_t v117 = *(int *)(v60 + 64);
        uint64_t v115 = &a1[v117];
        uint64_t v116 = (char *)a2 + v117;
        if (v64(v116, 1, v20)) {
          goto LABEL_63;
        }
        goto LABEL_64;
      case 0x1Eu:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v107 = sub_100094134(&qword_100916930);
        uint64_t v108 = *(int *)(v107 + 48);
        uint64_t v109 = &a1[v108];
        unint64_t v110 = (char *)a2 + v108;
        uint64_t v20 = type metadata accessor for Date();
        uint64_t v21 = *(void *)(v20 - 8);
        uint64_t v111 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
        if (v111(v110, 1, v20))
        {
          uint64_t v112 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v109, v110, *(void *)(*(void *)(v112 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v109, v110, v20);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v109, 0, 1, v20);
        }
        uint64_t v119 = *(int *)(v107 + 64);
        uint64_t v115 = &a1[v119];
        uint64_t v116 = (char *)a2 + v119;
        if (v111(v116, 1, v20))
        {
LABEL_63:
          uint64_t v120 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v115, v116, *(void *)(*(void *)(v120 - 8) + 64));
        }
        else
        {
LABEL_64:
          (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v115, v116, v20);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v115, 0, 1, v20);
        }
        goto LABEL_65;
      case 0x26u:
        unint64_t v68 = *a2;
        *(void *)a1 = *a2;
        uint64_t v69 = v68;
        uint64_t v9 = sub_100094134(&qword_10090B060);
        uint64_t v70 = *(int *)(v9 + 48);
        uint64_t v11 = &a1[v70];
        Swift::String v12 = (char **)((char *)a2 + v70);
        uint64_t v13 = _s10PredicatesO19CompletionPredicateOMa(0);
        unsigned int v71 = swift_getEnumCaseMultiPayload();
        if (v71 == 2)
        {
LABEL_66:
          *(void *)uint64_t v11 = *v12;
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v71 > 1)
        {
LABEL_67:
          memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
LABEL_8:
          uint64_t v15 = type metadata accessor for Date();
          (*(void (**)(char *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v11, v12, v15);
          swift_storeEnumTagMultiPayload();
        }
        a1[*(int *)(v9 + 64)] = *((unsigned char *)a2 + *(int *)(v9 + 64));
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x27u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v72 = *(int *)(sub_100094134(&qword_100916920) + 48);
        uint64_t v73 = &a1[v72];
        uint64_t v74 = (char *)a2 + v72;
        uint64_t v75 = type metadata accessor for Date();
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75)) {
          goto LABEL_40;
        }
        goto LABEL_53;
      case 0x28u:
        id v77 = *a2;
        uint64_t v78 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v78;
        uint64_t v79 = v77;
        uint64_t v80 = v78;
        uint64_t v81 = *(int *)(sub_100094134(&qword_100916918) + 64);
        uint64_t v73 = &a1[v81];
        uint64_t v74 = (char *)a2 + v81;
        uint64_t v75 = type metadata accessor for Date();
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75)) {
          goto LABEL_40;
        }
        goto LABEL_53;
      case 0x29u:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        uint64_t v82 = *(int *)(sub_100094134(&qword_100916910) + 48);
        uint64_t v73 = &a1[v82];
        uint64_t v74 = (char *)a2 + v82;
        uint64_t v75 = type metadata accessor for Date();
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
        {
LABEL_40:
          uint64_t v100 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v73, v74, *(void *)(*(void *)(v100 - 8) + 64));
        }
        else
        {
LABEL_53:
          (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v73, v74, v75);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
        }
        goto LABEL_65;
      case 0x2Cu:
        unint64_t v113 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v113;
        a1[16] = *((unsigned char *)a2 + 16);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x2Eu:
        uint64_t v83 = type metadata accessor for Date();
        uint64_t v84 = *(void *)(v83 - 8);
        if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(v84 + 48))(a2, 1, v83))
        {
          uint64_t v85 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(a1, a2, *(void *)(*(void *)(v85 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char **, uint64_t))(v84 + 16))(a1, a2, v83);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(a1, 0, 1, v83);
        }
LABEL_65:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void sub_1003A3580(id *a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 0x14u:
    case 0x16u:
    case 0x1Cu:
    case 0x20u:
    case 0x2Au:
    case 0x2Cu:
    case 0x2Du:
      goto LABEL_21;
    case 1u:
    case 2u:
    case 5u:
    case 6u:
    case 7u:
    case 0x1Au:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
      id v2 = *a1;
      goto LABEL_3;
    case 3u:
      swift_bridgeObjectRelease();
      uint64_t v6 = &qword_100916980;
      goto LABEL_18;
    case 4u:
      swift_bridgeObjectRelease();
      int v5 = &qword_100916978;
      goto LABEL_26;
    case 8u:
    case 0x17u:

      uint64_t v3 = &qword_100916940;
      goto LABEL_32;
    case 9u:

      uint64_t v3 = &qword_100916970;
      goto LABEL_32;
    case 0xAu:
      swift_bridgeObjectRelease();
      uint64_t v3 = &qword_100916968;
      goto LABEL_32;
    case 0xBu:
    case 0xCu:
    case 0xFu:
      goto LABEL_34;
    case 0xDu:
      uint64_t v7 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(id *, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
      a1 = (id *)((char *)a1 + *(int *)(sub_100094134(&qword_100916960) + 48));
      goto LABEL_20;
    case 0xEu:
      goto LABEL_20;
    case 0x10u:

      uint64_t v8 = &qword_100916958;
      goto LABEL_43;
    case 0x11u:
    case 0x2Eu:
      uint64_t v4 = type metadata accessor for Date();
      uint64_t v21 = *(void *)(v4 - 8);
      if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(v21 + 48))(a1, 1, v4)) {
        goto LABEL_29;
      }
      return;
    case 0x12u:

      uint64_t v9 = *(int *)(sub_100094134(&qword_100916948) + 64);
      goto LABEL_33;
    case 0x13u:
      swift_bridgeObjectRelease();
      uint64_t v3 = &qword_10090E538;
      goto LABEL_32;
    case 0x15u:
      swift_bridgeObjectRelease();
      uint64_t v3 = &qword_100912550;
LABEL_32:
      uint64_t v9 = *(int *)(sub_100094134(v3) + 48);
LABEL_33:
      a1 = (id *)((char *)a1 + v9);
LABEL_34:
      uint64_t v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      goto LABEL_35;
    case 0x18u:
    case 0x19u:
      swift_bridgeObjectRelease();
      id v2 = a1[1];
LABEL_3:

      return;
    case 0x1Bu:
      uint64_t v19 = type metadata accessor for Date();
      id v22 = *(void (**)(id *, uint64_t))(*(void *)(v19 - 8) + 8);
      ((void (*)(void *__return_ptr, id *, uint64_t))v22)((void *)(v19 - 8), a1, v19);
      uint64_t v17 = (id *)((char *)a1 + *(int *)(sub_100094134(&qword_100916938) + 48));
      uint64_t v18 = v19;
      uint64_t v16 = v22;
      goto LABEL_36;
    case 0x1Du:
    case 0x1Eu:
      swift_bridgeObjectRelease();
      int v5 = &qword_100916930;
LABEL_26:
      uint64_t v13 = sub_100094134(v5);
      id v14 = (char *)a1 + *(int *)(v13 + 48);
      uint64_t v4 = type metadata accessor for Date();
      uint64_t v21 = *(void *)(v4 - 8);
      uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
      if (!v15(v14, 1, v4)) {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v14, v4);
      }
      a1 = (id *)((char *)a1 + *(int *)(v13 + 64));
      if (!v15((char *)a1, 1, v4)) {
        goto LABEL_29;
      }
      return;
    case 0x26u:

      uint64_t v6 = &qword_10090B060;
LABEL_18:
      a1 = (id *)((char *)a1 + *(int *)(sub_100094134(v6) + 48));
      _s10PredicatesO19CompletionPredicateOMa(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
LABEL_21:
        swift_bridgeObjectRelease();
      }
      else if (EnumCaseMultiPayload <= 1)
      {
LABEL_20:
        uint64_t v11 = type metadata accessor for Date();
LABEL_35:
        uint64_t v16 = *(void (**)(id *, uint64_t))(*(void *)(v11 - 8) + 8);
        uint64_t v18 = v11;
        uint64_t v17 = a1;
LABEL_36:
        v16(v17, v18);
      }
      return;
    case 0x27u:
      swift_bridgeObjectRelease();
      Swift::String v12 = &qword_100916920;
      goto LABEL_41;
    case 0x28u:

      uint64_t v8 = &qword_100916918;
LABEL_43:
      uint64_t v20 = *(int *)(sub_100094134(v8) + 64);
      goto LABEL_44;
    case 0x29u:
      swift_bridgeObjectRelease();
      Swift::String v12 = &qword_100916910;
LABEL_41:
      uint64_t v20 = *(int *)(sub_100094134(v12) + 48);
LABEL_44:
      a1 = (id *)((char *)a1 + v20);
      uint64_t v4 = type metadata accessor for Date();
      uint64_t v21 = *(void *)(v4 - 8);
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v21 + 48))(a1, 1, v4)) {
        return;
      }
LABEL_29:
      uint64_t v16 = *(void (**)(id *, uint64_t))(v21 + 8);
      uint64_t v17 = a1;
      uint64_t v18 = v4;
      goto LABEL_36;
    default:
      return;
  }
}

uint64_t sub_1003A3B34(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_67;
    case 1u:
    case 2u:
    case 0x21u:
      uint64_t v63 = (void *)*a2;
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      id v64 = v63;
      goto LABEL_67;
    case 3u:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_100094134(&qword_100916980);
      uint64_t v7 = *(int *)(v6 + 48);
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (uint64_t *)((char *)a2 + v7);
      uint64_t v10 = _s10PredicatesO19CompletionPredicateOMa(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        void *v8 = *v9;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload > 1)
      {
        memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        uint64_t v12 = type metadata accessor for Date();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v9, v12);
        swift_storeEnumTagMultiPayload();
      }
      *(unsigned char *)(a1 + *(int *)(v6 + 64)) = *((unsigned char *)a2 + *(int *)(v6 + 64));
      goto LABEL_67;
    case 4u:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_100094134(&qword_100916978);
      uint64_t v14 = *(int *)(v13 + 48);
      uint64_t v15 = (void *)(a1 + v14);
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for Date();
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
      if (v19(v16, 1, v17))
      {
        uint64_t v20 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      uint64_t v116 = *(int *)(v13 + 64);
      uint64_t v117 = (void *)(a1 + v116);
      uint64_t v118 = (char *)a2 + v116;
      if (v19(v118, 1, v17)) {
        goto LABEL_59;
      }
      goto LABEL_60;
    case 5u:
      uint64_t v21 = (void *)*a2;
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)(a1 + 16) = a2[2];
      id v22 = v21;
      goto LABEL_67;
    case 6u:
    case 7u:
    case 0x1Au:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
      NSString v88 = (void *)*a2;
      *(void *)a1 = *a2;
      id v89 = v88;
      goto LABEL_67;
    case 8u:
    case 0x17u:
      uint64_t v23 = (void *)*a2;
      *(void *)a1 = *a2;
      id v24 = v23;
      uint64_t v25 = *(int *)(sub_100094134(&qword_100916940) + 48);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = (uint64_t)a2 + v25;
      uint64_t v28 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      goto LABEL_67;
    case 9u:
      uint64_t v90 = (void *)*a2;
      *(void *)a1 = *a2;
      id v91 = v90;
      uint64_t v92 = sub_100094134(&qword_100916970);
      uint64_t v93 = *(int *)(v92 + 48);
      uint64_t v94 = a1 + v93;
      uint64_t v95 = (uint64_t)a2 + v93;
      uint64_t v96 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 16))(v94, v95, v96);
      *(unsigned char *)(a1 + *(int *)(v92 + 64)) = *((unsigned char *)a2 + *(int *)(v92 + 64));
      goto LABEL_67;
    case 0xAu:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      uint64_t v29 = *(int *)(sub_100094134(&qword_100916968) + 48);
      uint64_t v30 = a1 + v29;
      uint64_t v31 = (uint64_t)a2 + v29;
      uint64_t v32 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
      goto LABEL_67;
    case 0xBu:
    case 0xCu:
    case 0xFu:
      uint64_t v98 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v98 - 8) + 16))(a1, a2, v98);
      goto LABEL_67;
    case 0xDu:
      uint64_t v33 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
      uint64_t v34 = *(int *)(sub_100094134(&qword_100916960) + 48);
      uint64_t v35 = a1 + v34;
      uint64_t v36 = (uint64_t)a2 + v34;
      uint64_t v37 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
      goto LABEL_67;
    case 0xEu:
      uint64_t v97 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v97 - 8) + 16))(a1, a2, v97);
      goto LABEL_67;
    case 0x10u:
      uint64_t v99 = (void *)*a2;
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      id v100 = v99;
      uint64_t v101 = *(int *)(sub_100094134(&qword_100916958) + 64);
      uint64_t v75 = (void *)(a1 + v101);
      uint64_t v76 = (char *)a2 + v101;
      uint64_t v77 = type metadata accessor for Date();
      uint64_t v78 = *(void *)(v77 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77)) {
        goto LABEL_37;
      }
      goto LABEL_50;
    case 0x11u:
      uint64_t v103 = type metadata accessor for Date();
      uint64_t v104 = *(void *)(v103 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v104 + 48))(a2, 1, v103))
      {
        uint64_t v105 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy((void *)a1, a2, *(void *)(*(void *)(v105 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v104 + 16))(a1, a2, v103);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(a1, 0, 1, v103);
      }
      uint64_t v120 = sub_100094134(&qword_100916950);
      *(unsigned char *)(a1 + *(int *)(v120 + 48)) = *((unsigned char *)a2 + *(int *)(v120 + 48));
      goto LABEL_67;
    case 0x12u:
      uint64_t v38 = (void *)*a2;
      uint64_t v39 = (void *)a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v39;
      id v40 = v38;
      id v41 = v39;
      uint64_t v42 = *(int *)(sub_100094134(&qword_100916948) + 64);
      uint64_t v43 = a1 + v42;
      uint64_t v44 = (uint64_t)a2 + v42;
      uint64_t v45 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
      goto LABEL_67;
    case 0x13u:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      uint64_t v46 = *(int *)(sub_100094134(&qword_10090E538) + 48);
      uint64_t v47 = a1 + v46;
      uint64_t v48 = (uint64_t)a2 + v46;
      uint64_t v49 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
      goto LABEL_67;
    case 0x14u:
    case 0x16u:
    case 0x1Cu:
    case 0x20u:
    case 0x2Au:
    case 0x2Du:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_67;
    case 0x15u:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      uint64_t v50 = *(int *)(sub_100094134(&qword_100912550) + 48);
      uint64_t v51 = a1 + v50;
      uint64_t v52 = (uint64_t)a2 + v50;
      uint64_t v53 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
      goto LABEL_67;
    case 0x18u:
    case 0x19u:
      uint64_t v54 = *a2;
      uint64_t v55 = (void *)a2[1];
      *(void *)a1 = v54;
      *(void *)(a1 + 8) = v55;
      swift_bridgeObjectRetain();
      id v56 = v55;
      goto LABEL_67;
    case 0x1Bu:
      uint64_t v106 = type metadata accessor for Date();
      uint64_t v107 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v106 - 8) + 16);
      v107(a1, a2, v106);
      uint64_t v108 = sub_100094134(&qword_100916938);
      v107(a1 + *(int *)(v108 + 48), (uint64_t *)((char *)a2 + *(int *)(v108 + 48)), v106);
      goto LABEL_67;
    case 0x1Du:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      uint64_t v57 = sub_100094134(&qword_100916930);
      uint64_t v58 = *(int *)(v57 + 48);
      uint64_t v59 = (void *)(a1 + v58);
      uint64_t v60 = (char *)a2 + v58;
      uint64_t v17 = type metadata accessor for Date();
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v61 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
      if (v61(v60, 1, v17))
      {
        uint64_t v62 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(v59, v60, *(void *)(*(void *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v59, v60, v17);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v59, 0, 1, v17);
      }
      uint64_t v119 = *(int *)(v57 + 64);
      uint64_t v117 = (void *)(a1 + v119);
      uint64_t v118 = (char *)a2 + v119;
      if (v61(v118, 1, v17)) {
        goto LABEL_59;
      }
      goto LABEL_60;
    case 0x1Eu:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      uint64_t v109 = sub_100094134(&qword_100916930);
      uint64_t v110 = *(int *)(v109 + 48);
      uint64_t v111 = (void *)(a1 + v110);
      uint64_t v112 = (char *)a2 + v110;
      uint64_t v17 = type metadata accessor for Date();
      uint64_t v18 = *(void *)(v17 - 8);
      unint64_t v113 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
      if (v113(v112, 1, v17))
      {
        uint64_t v114 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(v111, v112, *(void *)(*(void *)(v114 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v111, v112, v17);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v111, 0, 1, v17);
      }
      uint64_t v121 = *(int *)(v109 + 64);
      uint64_t v117 = (void *)(a1 + v121);
      uint64_t v118 = (char *)a2 + v121;
      if (v113(v118, 1, v17))
      {
LABEL_59:
        uint64_t v122 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(v117, v118, *(void *)(*(void *)(v122 - 8) + 64));
      }
      else
      {
LABEL_60:
        (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v117, v118, v17);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v117, 0, 1, v17);
      }
      goto LABEL_67;
    case 0x26u:
      uint64_t v65 = (void *)*a2;
      *(void *)a1 = *a2;
      id v66 = v65;
      uint64_t v67 = sub_100094134(&qword_10090B060);
      uint64_t v68 = *(int *)(v67 + 48);
      uint64_t v69 = (void *)(a1 + v68);
      uint64_t v70 = (uint64_t *)((char *)a2 + v68);
      uint64_t v71 = _s10PredicatesO19CompletionPredicateOMa(0);
      unsigned int v72 = swift_getEnumCaseMultiPayload();
      if (v72 == 2)
      {
        *uint64_t v69 = *v70;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (v72 > 1)
      {
        memcpy(v69, v70, *(void *)(*(void *)(v71 - 8) + 64));
      }
      else
      {
        uint64_t v73 = type metadata accessor for Date();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v73 - 8) + 16))(v69, v70, v73);
        swift_storeEnumTagMultiPayload();
      }
      *(unsigned char *)(a1 + *(int *)(v67 + 64)) = *((unsigned char *)a2 + *(int *)(v67 + 64));
      goto LABEL_67;
    case 0x27u:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      uint64_t v74 = *(int *)(sub_100094134(&qword_100916920) + 48);
      uint64_t v75 = (void *)(a1 + v74);
      uint64_t v76 = (char *)a2 + v74;
      uint64_t v77 = type metadata accessor for Date();
      uint64_t v78 = *(void *)(v77 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77)) {
        goto LABEL_37;
      }
      goto LABEL_50;
    case 0x28u:
      uint64_t v79 = (void *)*a2;
      uint64_t v80 = (void *)a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v80;
      id v81 = v79;
      id v82 = v80;
      uint64_t v83 = *(int *)(sub_100094134(&qword_100916918) + 64);
      uint64_t v75 = (void *)(a1 + v83);
      uint64_t v76 = (char *)a2 + v83;
      uint64_t v77 = type metadata accessor for Date();
      uint64_t v78 = *(void *)(v77 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77)) {
        goto LABEL_37;
      }
      goto LABEL_50;
    case 0x29u:
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
      uint64_t v84 = *(int *)(sub_100094134(&qword_100916910) + 48);
      uint64_t v75 = (void *)(a1 + v84);
      uint64_t v76 = (char *)a2 + v84;
      uint64_t v77 = type metadata accessor for Date();
      uint64_t v78 = *(void *)(v77 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
      {
LABEL_37:
        uint64_t v102 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(v75, v76, *(void *)(*(void *)(v102 - 8) + 64));
      }
      else
      {
LABEL_50:
        (*(void (**)(void *, char *, uint64_t))(v78 + 16))(v75, v76, v77);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
      }
      goto LABEL_67;
    case 0x2Cu:
      uint64_t v115 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v115;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_67;
    case 0x2Eu:
      uint64_t v85 = type metadata accessor for Date();
      uint64_t v86 = *(void *)(v85 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v86 + 48))(a2, 1, v85))
      {
        uint64_t v87 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy((void *)a1, a2, *(void *)(*(void *)(v87 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v86 + 16))(a1, a2, v85);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(a1, 0, 1, v85);
      }
LABEL_67:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy((void *)a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t sub_1003A5214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003A136C(a1, _s10PredicatesOMa);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_68;
      case 1u:
      case 2u:
      case 0x21u:
        uint64_t v62 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        id v63 = v62;
        goto LABEL_68;
      case 3u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        uint64_t v6 = sub_100094134(&qword_100916980);
        uint64_t v7 = *(int *)(v6 + 48);
        uint64_t v8 = (void *)(a1 + v7);
        uint64_t v9 = (void *)(a2 + v7);
        uint64_t v10 = _s10PredicatesO19CompletionPredicateOMa(0);
        unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          void *v8 = *v9;
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (EnumCaseMultiPayload > 1)
        {
          memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
        }
        else
        {
          uint64_t v12 = type metadata accessor for Date();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v9, v12);
          swift_storeEnumTagMultiPayload();
        }
        *(unsigned char *)(a1 + *(int *)(v6 + 64)) = *(unsigned char *)(a2 + *(int *)(v6 + 64));
        goto LABEL_68;
      case 4u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        uint64_t v13 = sub_100094134(&qword_100916978);
        uint64_t v14 = *(int *)(v13 + 48);
        uint64_t v15 = (void *)(a1 + v14);
        uint64_t v16 = (const void *)(a2 + v14);
        uint64_t v17 = type metadata accessor for Date();
        uint64_t v18 = *(void *)(v17 - 8);
        uint64_t v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
        if (v19(v16, 1, v17))
        {
          uint64_t v20 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v15, v16, v17);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
        }
        uint64_t v114 = *(int *)(v13 + 64);
        uint64_t v115 = (void *)(a1 + v114);
        uint64_t v116 = (const void *)(a2 + v114);
        if (v19(v116, 1, v17)) {
          goto LABEL_60;
        }
        goto LABEL_61;
      case 5u:
        uint64_t v21 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        id v22 = v21;
        goto LABEL_68;
      case 6u:
      case 7u:
      case 0x1Au:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
        uint64_t v87 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v88 = v87;
        goto LABEL_68;
      case 8u:
      case 0x17u:
        uint64_t v23 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v24 = v23;
        uint64_t v25 = *(int *)(sub_100094134(&qword_100916940) + 48);
        uint64_t v26 = a1 + v25;
        uint64_t v27 = a2 + v25;
        uint64_t v28 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
        goto LABEL_68;
      case 9u:
        id v89 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v90 = v89;
        uint64_t v91 = sub_100094134(&qword_100916970);
        uint64_t v92 = *(int *)(v91 + 48);
        uint64_t v93 = a1 + v92;
        uint64_t v94 = a2 + v92;
        uint64_t v95 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 16))(v93, v94, v95);
        *(unsigned char *)(a1 + *(int *)(v91 + 64)) = *(unsigned char *)(a2 + *(int *)(v91 + 64));
        goto LABEL_68;
      case 0xAu:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        uint64_t v29 = *(int *)(sub_100094134(&qword_100916968) + 48);
        uint64_t v30 = a1 + v29;
        uint64_t v31 = a2 + v29;
        uint64_t v32 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
        goto LABEL_68;
      case 0xBu:
      case 0xCu:
      case 0xFu:
        uint64_t v97 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 16))(a1, a2, v97);
        goto LABEL_68;
      case 0xDu:
        uint64_t v33 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
        uint64_t v34 = *(int *)(sub_100094134(&qword_100916960) + 48);
        uint64_t v35 = a1 + v34;
        uint64_t v36 = a2 + v34;
        uint64_t v37 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
        goto LABEL_68;
      case 0xEu:
        uint64_t v96 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 16))(a1, a2, v96);
        goto LABEL_68;
      case 0x10u:
        uint64_t v98 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        id v99 = v98;
        uint64_t v100 = *(int *)(sub_100094134(&qword_100916958) + 64);
        uint64_t v74 = (void *)(a1 + v100);
        uint64_t v75 = (const void *)(a2 + v100);
        uint64_t v76 = type metadata accessor for Date();
        uint64_t v77 = *(void *)(v76 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76)) {
          goto LABEL_38;
        }
        goto LABEL_51;
      case 0x11u:
        uint64_t v102 = type metadata accessor for Date();
        uint64_t v103 = *(void *)(v102 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(a2, 1, v102))
        {
          uint64_t v104 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v104 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))(a1, a2, v102);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(a1, 0, 1, v102);
        }
        uint64_t v118 = sub_100094134(&qword_100916950);
        *(unsigned char *)(a1 + *(int *)(v118 + 48)) = *(unsigned char *)(a2 + *(int *)(v118 + 48));
        goto LABEL_68;
      case 0x12u:
        uint64_t v38 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        uint64_t v39 = *(void **)(a2 + 8);
        *(void *)(a1 + 8) = v39;
        id v40 = v38;
        id v41 = v39;
        uint64_t v42 = *(int *)(sub_100094134(&qword_100916948) + 64);
        uint64_t v43 = a1 + v42;
        uint64_t v44 = a2 + v42;
        uint64_t v45 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
        goto LABEL_68;
      case 0x13u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        uint64_t v46 = *(int *)(sub_100094134(&qword_10090E538) + 48);
        uint64_t v47 = a1 + v46;
        uint64_t v48 = a2 + v46;
        uint64_t v49 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
        goto LABEL_68;
      case 0x14u:
      case 0x16u:
      case 0x1Cu:
      case 0x20u:
      case 0x2Au:
      case 0x2Du:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_68;
      case 0x15u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        uint64_t v50 = *(int *)(sub_100094134(&qword_100912550) + 48);
        uint64_t v51 = a1 + v50;
        uint64_t v52 = a2 + v50;
        uint64_t v53 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
        goto LABEL_68;
      case 0x18u:
      case 0x19u:
        *(void *)a1 = *(void *)a2;
        uint64_t v54 = *(void **)(a2 + 8);
        *(void *)(a1 + 8) = v54;
        swift_bridgeObjectRetain();
        id v55 = v54;
        goto LABEL_68;
      case 0x1Bu:
        uint64_t v105 = type metadata accessor for Date();
        uint64_t v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 16);
        v106(a1, a2, v105);
        uint64_t v107 = sub_100094134(&qword_100916938);
        v106(a1 + *(int *)(v107 + 48), a2 + *(int *)(v107 + 48), v105);
        goto LABEL_68;
      case 0x1Du:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        uint64_t v56 = sub_100094134(&qword_100916930);
        uint64_t v57 = *(int *)(v56 + 48);
        uint64_t v58 = (void *)(a1 + v57);
        uint64_t v59 = (const void *)(a2 + v57);
        uint64_t v17 = type metadata accessor for Date();
        uint64_t v18 = *(void *)(v17 - 8);
        uint64_t v60 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
        if (v60(v59, 1, v17))
        {
          uint64_t v61 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v58, v59, v17);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v58, 0, 1, v17);
        }
        uint64_t v117 = *(int *)(v56 + 64);
        uint64_t v115 = (void *)(a1 + v117);
        uint64_t v116 = (const void *)(a2 + v117);
        if (v60(v116, 1, v17)) {
          goto LABEL_60;
        }
        goto LABEL_61;
      case 0x1Eu:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        uint64_t v108 = sub_100094134(&qword_100916930);
        uint64_t v109 = *(int *)(v108 + 48);
        uint64_t v110 = (void *)(a1 + v109);
        uint64_t v111 = (const void *)(a2 + v109);
        uint64_t v17 = type metadata accessor for Date();
        uint64_t v18 = *(void *)(v17 - 8);
        uint64_t v112 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
        if (v112(v111, 1, v17))
        {
          uint64_t v113 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v110, v111, *(void *)(*(void *)(v113 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v110, v111, v17);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v110, 0, 1, v17);
        }
        uint64_t v119 = *(int *)(v108 + 64);
        uint64_t v115 = (void *)(a1 + v119);
        uint64_t v116 = (const void *)(a2 + v119);
        if (v112(v116, 1, v17))
        {
LABEL_60:
          uint64_t v120 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v115, v116, *(void *)(*(void *)(v120 - 8) + 64));
        }
        else
        {
LABEL_61:
          (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v115, v116, v17);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v115, 0, 1, v17);
        }
        goto LABEL_68;
      case 0x26u:
        id v64 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v65 = v64;
        uint64_t v66 = sub_100094134(&qword_10090B060);
        uint64_t v67 = *(int *)(v66 + 48);
        uint64_t v68 = (void *)(a1 + v67);
        uint64_t v69 = (void *)(a2 + v67);
        uint64_t v70 = _s10PredicatesO19CompletionPredicateOMa(0);
        unsigned int v71 = swift_getEnumCaseMultiPayload();
        if (v71 == 2)
        {
          void *v68 = *v69;
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v71 > 1)
        {
          memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64));
        }
        else
        {
          uint64_t v72 = type metadata accessor for Date();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v72 - 8) + 16))(v68, v69, v72);
          swift_storeEnumTagMultiPayload();
        }
        *(unsigned char *)(a1 + *(int *)(v66 + 64)) = *(unsigned char *)(a2 + *(int *)(v66 + 64));
        goto LABEL_68;
      case 0x27u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        uint64_t v73 = *(int *)(sub_100094134(&qword_100916920) + 48);
        uint64_t v74 = (void *)(a1 + v73);
        uint64_t v75 = (const void *)(a2 + v73);
        uint64_t v76 = type metadata accessor for Date();
        uint64_t v77 = *(void *)(v76 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76)) {
          goto LABEL_38;
        }
        goto LABEL_51;
      case 0x28u:
        uint64_t v78 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        uint64_t v79 = *(void **)(a2 + 8);
        *(void *)(a1 + 8) = v79;
        id v80 = v78;
        id v81 = v79;
        uint64_t v82 = *(int *)(sub_100094134(&qword_100916918) + 64);
        uint64_t v74 = (void *)(a1 + v82);
        uint64_t v75 = (const void *)(a2 + v82);
        uint64_t v76 = type metadata accessor for Date();
        uint64_t v77 = *(void *)(v76 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76)) {
          goto LABEL_38;
        }
        goto LABEL_51;
      case 0x29u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        uint64_t v83 = *(int *)(sub_100094134(&qword_100916910) + 48);
        uint64_t v74 = (void *)(a1 + v83);
        uint64_t v75 = (const void *)(a2 + v83);
        uint64_t v76 = type metadata accessor for Date();
        uint64_t v77 = *(void *)(v76 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
        {
LABEL_38:
          uint64_t v101 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v74, v75, *(void *)(*(void *)(v101 - 8) + 64));
        }
        else
        {
LABEL_51:
          (*(void (**)(void *, const void *, uint64_t))(v77 + 16))(v74, v75, v76);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
        }
        goto LABEL_68;
      case 0x2Cu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        swift_bridgeObjectRetain();
        goto LABEL_68;
      case 0x2Eu:
        uint64_t v84 = type metadata accessor for Date();
        uint64_t v85 = *(void *)(v84 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(a2, 1, v84))
        {
          uint64_t v86 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v86 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(a1, a2, v84);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v85 + 56))(a1, 0, 1, v84);
        }
LABEL_68:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_1003A6940(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
      *(void *)a1 = *(void *)a2;
      uint64_t v6 = sub_100094134(&qword_100916980);
      uint64_t v7 = *(int *)(v6 + 48);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      uint64_t v10 = _s10PredicatesO19CompletionPredicateOMa(0);
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        uint64_t v11 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
        swift_storeEnumTagMultiPayload();
      }
      a1[*(int *)(v6 + 64)] = a2[*(int *)(v6 + 64)];
      goto LABEL_57;
    case 4u:
      *(void *)a1 = *(void *)a2;
      uint64_t v12 = sub_100094134(&qword_100916978);
      uint64_t v13 = *(int *)(v12 + 48);
      uint64_t v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      uint64_t v16 = type metadata accessor for Date();
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      if (v18(v15, 1, v16))
      {
        uint64_t v19 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      uint64_t v88 = *(int *)(v12 + 64);
      id v89 = &a1[v88];
      id v90 = &a2[v88];
      if (v18(v90, 1, v16)) {
        goto LABEL_43;
      }
      goto LABEL_56;
    case 8u:
    case 0x17u:
      *(void *)a1 = *(void *)a2;
      uint64_t v20 = *(int *)(sub_100094134(&qword_100916940) + 48);
      uint64_t v21 = &a1[v20];
      id v22 = &a2[v20];
      uint64_t v23 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      goto LABEL_57;
    case 9u:
      *(void *)a1 = *(void *)a2;
      uint64_t v24 = sub_100094134(&qword_100916970);
      uint64_t v25 = *(int *)(v24 + 48);
      uint64_t v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      uint64_t v28 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
      a1[*(int *)(v24 + 64)] = a2[*(int *)(v24 + 64)];
      goto LABEL_57;
    case 0xAu:
      *(void *)a1 = *(void *)a2;
      uint64_t v29 = *(int *)(sub_100094134(&qword_100916968) + 48);
      uint64_t v30 = &a1[v29];
      uint64_t v31 = &a2[v29];
      uint64_t v32 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
      goto LABEL_57;
    case 0xBu:
    case 0xCu:
    case 0xFu:
      uint64_t v76 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32))(a1, a2, v76);
      goto LABEL_57;
    case 0xDu:
      uint64_t v33 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
      uint64_t v34 = *(int *)(sub_100094134(&qword_100916960) + 48);
      uint64_t v35 = &a1[v34];
      uint64_t v36 = &a2[v34];
      uint64_t v37 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
      goto LABEL_57;
    case 0xEu:
      uint64_t v75 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(a1, a2, v75);
      goto LABEL_57;
    case 0x10u:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      uint64_t v38 = *(int *)(sub_100094134(&qword_100916958) + 64);
      uint64_t v39 = &a1[v38];
      id v40 = &a2[v38];
      uint64_t v41 = type metadata accessor for Date();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
        goto LABEL_34;
      }
      goto LABEL_44;
    case 0x11u:
      uint64_t v43 = type metadata accessor for Date();
      uint64_t v44 = *(void *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(a2, 1, v43))
      {
        uint64_t v45 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(a1, a2, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(a1, a2, v43);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(a1, 0, 1, v43);
      }
      uint64_t v91 = sub_100094134(&qword_100916950);
      a1[*(int *)(v91 + 48)] = a2[*(int *)(v91 + 48)];
      goto LABEL_57;
    case 0x12u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v46 = *(int *)(sub_100094134(&qword_100916948) + 64);
      uint64_t v47 = &a1[v46];
      uint64_t v48 = &a2[v46];
      uint64_t v49 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32))(v47, v48, v49);
      goto LABEL_57;
    case 0x13u:
      *(void *)a1 = *(void *)a2;
      uint64_t v50 = *(int *)(sub_100094134(&qword_10090E538) + 48);
      uint64_t v51 = &a1[v50];
      uint64_t v52 = &a2[v50];
      uint64_t v53 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 32))(v51, v52, v53);
      goto LABEL_57;
    case 0x15u:
      *(void *)a1 = *(void *)a2;
      uint64_t v54 = *(int *)(sub_100094134(&qword_100912550) + 48);
      id v55 = &a1[v54];
      uint64_t v56 = &a2[v54];
      uint64_t v57 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v55, v56, v57);
      goto LABEL_57;
    case 0x1Bu:
      uint64_t v77 = type metadata accessor for Date();
      uint64_t v78 = *(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 32);
      v78(a1, a2, v77);
      uint64_t v79 = sub_100094134(&qword_100916938);
      v78(&a1[*(int *)(v79 + 48)], &a2[*(int *)(v79 + 48)], v77);
      goto LABEL_57;
    case 0x1Du:
      *(void *)a1 = *(void *)a2;
      uint64_t v80 = sub_100094134(&qword_100916930);
      uint64_t v81 = *(int *)(v80 + 48);
      uint64_t v82 = &a1[v81];
      uint64_t v83 = &a2[v81];
      uint64_t v16 = type metadata accessor for Date();
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      if (v84(v83, 1, v16))
      {
        uint64_t v85 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(v82, v83, *(void *)(*(void *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v82, v83, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v82, 0, 1, v16);
      }
      uint64_t v94 = *(int *)(v80 + 64);
      id v89 = &a1[v94];
      id v90 = &a2[v94];
      if (v84(v90, 1, v16)) {
        goto LABEL_43;
      }
      goto LABEL_56;
    case 0x1Eu:
      *(void *)a1 = *(void *)a2;
      uint64_t v58 = sub_100094134(&qword_100916930);
      uint64_t v59 = *(int *)(v58 + 48);
      uint64_t v60 = &a1[v59];
      uint64_t v61 = &a2[v59];
      uint64_t v16 = type metadata accessor for Date();
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      if (v62(v61, 1, v16))
      {
        uint64_t v63 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(v60, v61, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v60, v61, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v60, 0, 1, v16);
      }
      uint64_t v92 = *(int *)(v58 + 64);
      id v89 = &a1[v92];
      id v90 = &a2[v92];
      if (v62(v90, 1, v16))
      {
LABEL_43:
        uint64_t v93 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
      }
      else
      {
LABEL_56:
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v89, v90, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v89, 0, 1, v16);
      }
      goto LABEL_57;
    case 0x26u:
      *(void *)a1 = *(void *)a2;
      uint64_t v64 = sub_100094134(&qword_10090B060);
      uint64_t v65 = *(int *)(v64 + 48);
      uint64_t v66 = &a1[v65];
      uint64_t v67 = &a2[v65];
      uint64_t v68 = _s10PredicatesO19CompletionPredicateOMa(0);
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
      }
      else
      {
        uint64_t v69 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v66, v67, v69);
        swift_storeEnumTagMultiPayload();
      }
      a1[*(int *)(v64 + 64)] = a2[*(int *)(v64 + 64)];
      goto LABEL_57;
    case 0x27u:
      *(void *)a1 = *(void *)a2;
      uint64_t v86 = *(int *)(sub_100094134(&qword_100916920) + 48);
      uint64_t v39 = &a1[v86];
      id v40 = &a2[v86];
      uint64_t v41 = type metadata accessor for Date();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
        goto LABEL_34;
      }
      goto LABEL_44;
    case 0x28u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v70 = *(int *)(sub_100094134(&qword_100916918) + 64);
      uint64_t v39 = &a1[v70];
      id v40 = &a2[v70];
      uint64_t v41 = type metadata accessor for Date();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
        goto LABEL_34;
      }
      goto LABEL_44;
    case 0x29u:
      *(void *)a1 = *(void *)a2;
      uint64_t v71 = *(int *)(sub_100094134(&qword_100916910) + 48);
      uint64_t v39 = &a1[v71];
      id v40 = &a2[v71];
      uint64_t v41 = type metadata accessor for Date();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
LABEL_34:
        uint64_t v87 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(v39, v40, *(void *)(*(void *)(v87 - 8) + 64));
      }
      else
      {
LABEL_44:
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      goto LABEL_57;
    case 0x2Eu:
      uint64_t v72 = type metadata accessor for Date();
      uint64_t v73 = *(void *)(v72 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(a2, 1, v72))
      {
        uint64_t v74 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(a1, a2, *(void *)(*(void *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(a1, a2, v72);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(a1, 0, 1, v72);
      }
LABEL_57:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_1003A7CF0(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003A136C((uint64_t)a1, _s10PredicatesOMa);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
        *(void *)a1 = *(void *)a2;
        uint64_t v6 = sub_100094134(&qword_100916980);
        uint64_t v7 = *(int *)(v6 + 48);
        uint64_t v8 = &a1[v7];
        uint64_t v9 = &a2[v7];
        uint64_t v10 = _s10PredicatesO19CompletionPredicateOMa(0);
        if (swift_getEnumCaseMultiPayload() > 1)
        {
          memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
        }
        else
        {
          uint64_t v11 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
          swift_storeEnumTagMultiPayload();
        }
        a1[*(int *)(v6 + 64)] = a2[*(int *)(v6 + 64)];
        goto LABEL_58;
      case 4u:
        *(void *)a1 = *(void *)a2;
        uint64_t v12 = sub_100094134(&qword_100916978);
        uint64_t v13 = *(int *)(v12 + 48);
        uint64_t v14 = &a1[v13];
        uint64_t v15 = &a2[v13];
        uint64_t v16 = type metadata accessor for Date();
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
        if (v18(v15, 1, v16))
        {
          uint64_t v19 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        }
        uint64_t v88 = *(int *)(v12 + 64);
        id v89 = &a1[v88];
        id v90 = &a2[v88];
        if (v18(v90, 1, v16)) {
          goto LABEL_44;
        }
        goto LABEL_57;
      case 8u:
      case 0x17u:
        *(void *)a1 = *(void *)a2;
        uint64_t v20 = *(int *)(sub_100094134(&qword_100916940) + 48);
        uint64_t v21 = &a1[v20];
        id v22 = &a2[v20];
        uint64_t v23 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
        goto LABEL_58;
      case 9u:
        *(void *)a1 = *(void *)a2;
        uint64_t v24 = sub_100094134(&qword_100916970);
        uint64_t v25 = *(int *)(v24 + 48);
        uint64_t v26 = &a1[v25];
        uint64_t v27 = &a2[v25];
        uint64_t v28 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
        a1[*(int *)(v24 + 64)] = a2[*(int *)(v24 + 64)];
        goto LABEL_58;
      case 0xAu:
        *(void *)a1 = *(void *)a2;
        uint64_t v29 = *(int *)(sub_100094134(&qword_100916968) + 48);
        uint64_t v30 = &a1[v29];
        uint64_t v31 = &a2[v29];
        uint64_t v32 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
        goto LABEL_58;
      case 0xBu:
      case 0xCu:
      case 0xFu:
        uint64_t v76 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32))(a1, a2, v76);
        goto LABEL_58;
      case 0xDu:
        uint64_t v33 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
        uint64_t v34 = *(int *)(sub_100094134(&qword_100916960) + 48);
        uint64_t v35 = &a1[v34];
        uint64_t v36 = &a2[v34];
        uint64_t v37 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
        goto LABEL_58;
      case 0xEu:
        uint64_t v75 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(a1, a2, v75);
        goto LABEL_58;
      case 0x10u:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        uint64_t v38 = *(int *)(sub_100094134(&qword_100916958) + 64);
        uint64_t v39 = &a1[v38];
        id v40 = &a2[v38];
        uint64_t v41 = type metadata accessor for Date();
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
          goto LABEL_35;
        }
        goto LABEL_45;
      case 0x11u:
        uint64_t v43 = type metadata accessor for Date();
        uint64_t v44 = *(void *)(v43 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(a2, 1, v43))
        {
          uint64_t v45 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(a1, a2, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v44 + 32))(a1, a2, v43);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(a1, 0, 1, v43);
        }
        uint64_t v91 = sub_100094134(&qword_100916950);
        a1[*(int *)(v91 + 48)] = a2[*(int *)(v91 + 48)];
        goto LABEL_58;
      case 0x12u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v46 = *(int *)(sub_100094134(&qword_100916948) + 64);
        uint64_t v47 = &a1[v46];
        uint64_t v48 = &a2[v46];
        uint64_t v49 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32))(v47, v48, v49);
        goto LABEL_58;
      case 0x13u:
        *(void *)a1 = *(void *)a2;
        uint64_t v50 = *(int *)(sub_100094134(&qword_10090E538) + 48);
        uint64_t v51 = &a1[v50];
        uint64_t v52 = &a2[v50];
        uint64_t v53 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 32))(v51, v52, v53);
        goto LABEL_58;
      case 0x15u:
        *(void *)a1 = *(void *)a2;
        uint64_t v54 = *(int *)(sub_100094134(&qword_100912550) + 48);
        id v55 = &a1[v54];
        uint64_t v56 = &a2[v54];
        uint64_t v57 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v55, v56, v57);
        goto LABEL_58;
      case 0x1Bu:
        uint64_t v77 = type metadata accessor for Date();
        uint64_t v78 = *(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 32);
        v78(a1, a2, v77);
        uint64_t v79 = sub_100094134(&qword_100916938);
        v78(&a1[*(int *)(v79 + 48)], &a2[*(int *)(v79 + 48)], v77);
        goto LABEL_58;
      case 0x1Du:
        *(void *)a1 = *(void *)a2;
        uint64_t v80 = sub_100094134(&qword_100916930);
        uint64_t v81 = *(int *)(v80 + 48);
        uint64_t v82 = &a1[v81];
        uint64_t v83 = &a2[v81];
        uint64_t v16 = type metadata accessor for Date();
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
        if (v84(v83, 1, v16))
        {
          uint64_t v85 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v82, v83, *(void *)(*(void *)(v85 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v82, v83, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v82, 0, 1, v16);
        }
        uint64_t v94 = *(int *)(v80 + 64);
        id v89 = &a1[v94];
        id v90 = &a2[v94];
        if (v84(v90, 1, v16)) {
          goto LABEL_44;
        }
        goto LABEL_57;
      case 0x1Eu:
        *(void *)a1 = *(void *)a2;
        uint64_t v58 = sub_100094134(&qword_100916930);
        uint64_t v59 = *(int *)(v58 + 48);
        uint64_t v60 = &a1[v59];
        uint64_t v61 = &a2[v59];
        uint64_t v16 = type metadata accessor for Date();
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
        if (v62(v61, 1, v16))
        {
          uint64_t v63 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v60, v61, *(void *)(*(void *)(v63 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v60, v61, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v60, 0, 1, v16);
        }
        uint64_t v92 = *(int *)(v58 + 64);
        id v89 = &a1[v92];
        id v90 = &a2[v92];
        if (v62(v90, 1, v16))
        {
LABEL_44:
          uint64_t v93 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
        }
        else
        {
LABEL_57:
          (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v89, v90, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v89, 0, 1, v16);
        }
        goto LABEL_58;
      case 0x26u:
        *(void *)a1 = *(void *)a2;
        uint64_t v64 = sub_100094134(&qword_10090B060);
        uint64_t v65 = *(int *)(v64 + 48);
        uint64_t v66 = &a1[v65];
        uint64_t v67 = &a2[v65];
        uint64_t v68 = _s10PredicatesO19CompletionPredicateOMa(0);
        if (swift_getEnumCaseMultiPayload() > 1)
        {
          memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
        }
        else
        {
          uint64_t v69 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v66, v67, v69);
          swift_storeEnumTagMultiPayload();
        }
        a1[*(int *)(v64 + 64)] = a2[*(int *)(v64 + 64)];
        goto LABEL_58;
      case 0x27u:
        *(void *)a1 = *(void *)a2;
        uint64_t v86 = *(int *)(sub_100094134(&qword_100916920) + 48);
        uint64_t v39 = &a1[v86];
        id v40 = &a2[v86];
        uint64_t v41 = type metadata accessor for Date();
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
          goto LABEL_35;
        }
        goto LABEL_45;
      case 0x28u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v70 = *(int *)(sub_100094134(&qword_100916918) + 64);
        uint64_t v39 = &a1[v70];
        id v40 = &a2[v70];
        uint64_t v41 = type metadata accessor for Date();
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
          goto LABEL_35;
        }
        goto LABEL_45;
      case 0x29u:
        *(void *)a1 = *(void *)a2;
        uint64_t v71 = *(int *)(sub_100094134(&qword_100916910) + 48);
        uint64_t v39 = &a1[v71];
        id v40 = &a2[v71];
        uint64_t v41 = type metadata accessor for Date();
        uint64_t v42 = *(void *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        {
LABEL_35:
          uint64_t v87 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(v39, v40, *(void *)(*(void *)(v87 - 8) + 64));
        }
        else
        {
LABEL_45:
          (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
        }
        goto LABEL_58;
      case 0x2Eu:
        uint64_t v72 = type metadata accessor for Date();
        uint64_t v73 = *(void *)(v72 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(a2, 1, v72))
        {
          uint64_t v74 = sub_100094134((uint64_t *)&unk_100909A40);
          memcpy(a1, a2, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(a1, a2, v72);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(a1, 0, 1, v72);
        }
LABEL_58:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void sub_1003A90C4()
{
  uint64_t v29 = "\t";
  uint64_t v30 = &unk_100788CE0;
  uint64_t v31 = "\t";
  _s10PredicatesO19CompletionPredicateOMa(319);
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v32 = &v28;
    sub_1000D68FC();
    if (v2 <= 0x3F)
    {
      uint64_t v3 = *(void *)(v1 - 8) + 64;
      swift_getTupleTypeLayout3();
      uint64_t v33 = &v27;
      uint64_t v34 = &unk_100788D10;
      uint64_t v35 = (char *)&value witness table for Builtin.UnknownObject + 64;
      uint64_t v36 = (char *)&value witness table for Builtin.UnknownObject + 64;
      uint64_t v4 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      if (v5 <= 0x3F)
      {
        uint64_t v6 = *(void *)(v4 - 8) + 64;
        swift_getTupleTypeLayout2();
        uint64_t v37 = &v26;
        swift_getTupleTypeLayout3();
        uint64_t v38 = &v25;
        swift_getTupleTypeLayout2();
        uint64_t v39 = &v24;
        uint64_t v40 = v6;
        uint64_t v41 = v6;
        uint64_t v7 = type metadata accessor for Date();
        if (v8 <= 0x3F)
        {
          uint64_t v9 = *(void *)(v7 - 8) + 64;
          swift_getTupleTypeLayout2();
          uint64_t v42 = &v23;
          uint64_t v43 = v9;
          uint64_t v44 = v6;
          swift_getTupleTypeLayout3();
          uint64_t v45 = &v22;
          swift_getTupleTypeLayout2();
          uint64_t v46 = &v21;
          swift_getTupleTypeLayout3();
          uint64_t v47 = &v20;
          swift_getTupleTypeLayout2();
          uint64_t v48 = &v19;
          uint64_t v49 = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_getTupleTypeLayout2();
          uint64_t v50 = &v18;
          uint64_t v51 = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_getTupleTypeLayout2();
          uint64_t v52 = &v17;
          uint64_t v53 = &unk_100788D28;
          uint64_t v54 = &unk_100788D28;
          id v55 = (char *)&value witness table for Builtin.UnknownObject + 64;
          swift_getTupleTypeLayout2();
          uint64_t v56 = &v16;
          uint64_t v57 = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_getTupleTypeLayout3();
          uint64_t v58 = &v15;
          swift_getTupleTypeLayout3();
          uint64_t v59 = &v14;
          uint64_t v60 = (char *)&value witness table for Builtin.Int64 + 64;
          uint64_t v61 = (char *)&value witness table for Builtin.BridgeObject + 64;
          uint64_t v62 = "\t";
          uint64_t v63 = (char *)&value witness table for Builtin.UnknownObject + 64;
          uint64_t v64 = (char *)&value witness table for Builtin.UnknownObject + 64;
          uint64_t v65 = (char *)&value witness table for Builtin.UnknownObject + 64;
          uint64_t v66 = (char *)&value witness table for Builtin.UnknownObject + 64;
          swift_getTupleTypeLayout3();
          uint64_t v67 = &v13;
          swift_getTupleTypeLayout2();
          uint64_t v68 = &v12;
          swift_getTupleTypeLayout3();
          uint64_t v69 = &v11;
          swift_getTupleTypeLayout2();
          uint64_t v70 = &v10;
          uint64_t v71 = (char *)&value witness table for Builtin.BridgeObject + 64;
          uint64_t v72 = &unk_100788D40;
          uint64_t v73 = &unk_100788D58;
          uint64_t v74 = (char *)&value witness table for Builtin.BridgeObject + 64;
          uint64_t v75 = v3;
          swift_initEnumMetadataMultiPayload();
        }
      }
    }
  }
}

void *REMOwlEmbeddingClassifier.__allocating_init(locale:embeddingVersion:headerModelURL:numOfClasses:labels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v7;
  uint64_t v28 = a7;
  uint64_t v26 = a6;
  uint64_t v27 = a4;
  uint64_t v24 = a1;
  uint64_t v25 = a3;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_allocWithZone((Class)MLModelConfiguration);
  id v16 = [v15 init:v24];
  [v16 setComputeUnits:2];
  sub_1000963CC(0, &qword_100916B60);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a5, v11);
  id v17 = v16;
  id v18 = sub_1003ABD58((uint64_t)v14, (uint64_t)v17);
  if (v8)
  {

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a5, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v19 = v18;

    uint64_t v9 = (void *)swift_allocObject();
    v9[3] = [objc_allocWithZone((Class)CDMClient) init];
    Locale.init(identifier:)();

    char v20 = (void *)((char *)v9 + OBJC_IVAR____TtC7remindd25REMOwlEmbeddingClassifier_embeddingVersion);
    uint64_t v21 = v27;
    *char v20 = v25;
    v20[1] = v21;
    uint64_t v22 = v26;
    v9[4] = v19;
    v9[5] = v22;
    long long v9[2] = v28;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a5, v11);
  }
  return v9;
}

uint64_t sub_1003A9764()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100916B48);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100916B48);
  if (qword_1009077F0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942418);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t REMOwlEmbeddingClassifier.predict(_:thresholds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[42] = a3;
  v4[43] = v3;
  v4[40] = a1;
  v4[41] = a2;
  return _swift_task_switch(sub_1003A9850, 0, 0);
}

uint64_t sub_1003A9850(int32x2_t a1)
{
  uint64_t v2 = v1[42];
  uint64_t v3 = v1[43];
  if (!v2)
  {
    unint64_t v4 = *(void *)(v3 + 40);
    a1.i32[0] = 0.5;
    unint64_t v5 = sub_1001D7980(v4, a1);
    uint64_t v3 = v1[43];
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(v2 + 16);
  if (v4 == *(void *)(v3 + 40))
  {
    unint64_t v5 = (int32x4_t *)v1[42];
LABEL_5:
    v1[44] = v5;
    v1[45] = v4;
    uint64_t v6 = *(void **)(v3 + 24);
    v1[46] = v6;
    swift_bridgeObjectRetain();
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    v1[47] = isa;
    NSString v8 = String._bridgeToObjectiveC()();
    v1[48] = v8;
    v1[10] = v1;
    v1[11] = sub_1003A9A34;
    uint64_t v9 = swift_continuation_init();
    v1[28] = _NSConcreteStackBlock;
    v1[29] = 0x40000000;
    v1[30] = sub_1003AA938;
    v1[31] = &unk_1008C3BC8;
    v1[32] = v9;
    [v6 setupWithLocale:isa embeddingVersion:v8 completionHandler:v1 + 28];
    return _swift_continuation_await(v1 + 10);
  }
  sub_1003ABEB8();
  swift_allocError();
  *uint64_t v10 = 0;
  swift_willThrow();
  uint64_t v11 = (uint64_t (*)(void))v1[1];
  return v11();
}

uint64_t sub_1003A9A34()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 392) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1003AA7D0;
  }
  else
  {
    uint64_t v2 = sub_1003A9B4C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003A9B4C()
{
  uint64_t v1 = *(void **)(v0 + 376);
  uint64_t v2 = *(void **)(v0 + 368);

  NSString v3 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 400) = v3;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 304;
  *(void *)(v0 + 24) = sub_1003A9C84;
  uint64_t v4 = swift_continuation_init();
  *(void *)(v0 + 264) = _NSConcreteStackBlock;
  *(void *)(v0 + 272) = 0x40000000;
  *(void *)(v0 + 280) = sub_1003AA9D0;
  *(void *)(v0 + 288) = &unk_1008C3BE0;
  *(void *)(v0 + 296) = v4;
  [v2 processEmbeddingRequest:v3 completionHandler:v0 + 264];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1003A9C84()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 408) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1003AA848;
  }
  else
  {
    uint64_t v2 = sub_1003A9D9C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003A9D9C()
{
  uint64_t v1 = (void *)v0[50];
  uint64_t v2 = (void *)v0[38];
  v0[52] = v2;

  id v3 = [v2 subwordTokenEmbedding];
  uint64_t v4 = v3;
  v0[53] = v3;
  if (!v3) {
    goto LABEL_11;
  }
  id v5 = v3;
  id v6 = [v5 embeddingTensor];
  if (!v6)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  NSString v8 = v6;
  id v9 = [v6 values];

  if (!v9)
  {

LABEL_11:
    swift_bridgeObjectRelease();
    sub_1003ABEB8();
    swift_allocError();
    *char v14 = 2;
    swift_willThrow();
    goto LABEL_15;
  }
  if ([v5 embeddingDim] == (id)192)
  {
    id v6 = [v5 embeddingTensor];
    if (!v6)
    {
LABEL_34:
      __break(1u);
      return MLModel.prediction(from:options:)(v6, v7);
    }
    uint64_t v10 = v6;
    uint64_t v11 = (uint64_t)[v6 numToken];

    if (v11 < 0)
    {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_8;
    }
    if (v11)
    {
LABEL_8:
      uint64_t v12 = 192 * v11;
      if ((unsigned __int128)(v11 * (__int128)192) >> 64 == (192 * v11) >> 63)
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_10077B710;
        sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
        *(NSNumber *)(v13 + 32) = NSNumber.init(integerLiteral:)(1);
        *(NSNumber *)(v13 + 40) = Int._bridgeToObjectiveC()();
        specialized Array._endMutation()();
        objc_allocWithZone((Class)MLMultiArray);
        id v6 = sub_1003AAFB8(v13, 65600);
        v0[54] = v6;
        id v37 = v5;
        if ((v12 & 0x8000000000000000) == 0)
        {
          id v19 = v6;
          if (v12)
          {
            for (uint64_t i = 0; i != v12; ++i)
            {
              uint64_t v24 = i % 192;
              if (i > 191)
              {
                id v21 = [v19 objectAtIndexedSubscript:i % 192, v37];
                [v21 doubleValue];

                v22.super.super.Class isa = Double._bridgeToObjectiveC()().super.super.isa;
              }
              else
              {
                v22.super.super.Class isa = Float._bridgeToObjectiveC()().super.super.isa;
              }
              Class isa = v22.super.super.isa;
              [v19 setObject:v22.super.super.isa atIndexedSubscript:v24];
            }
          }
          for (uint64_t j = 0; j != 192; ++j)
          {
            id v26 = [v19 objectAtIndexedSubscript:j];
            [v26 doubleValue];

            Class v27 = Double._bridgeToObjectiveC()().super.super.isa;
            [v19 setObject:v27 atIndexedSubscript:j];
          }
          sub_100094134(&qword_100908170);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100776E40;
          *(void *)(inited + 32) = 0x7475706E69;
          *(void *)(inited + 40) = 0xE500000000000000;
          id v29 = [self featureValueWithMultiArray:v19];
          *(void *)(inited + 72) = sub_1000963CC(0, (unint64_t *)&unk_100916B88);
          *(void *)(inited + 48) = v29;
          sub_1001805C0(inited);
          id v30 = objc_allocWithZone((Class)MLDictionaryFeatureProvider);
          id v31 = sub_1003AB0B4();
          v0[55] = v31;
          uint64_t v32 = v31;
          id v33 = objc_allocWithZone((Class)MLPredictionOptions);
          id v34 = v32;
          id v35 = [v33 init];
          v0[56] = v35;
          uint64_t v36 = (void *)swift_task_alloc();
          v0[57] = v36;
          *uint64_t v36 = v0;
          v36[1] = sub_1003AA338;
          id v6 = v34;
          id v7 = v35;
          return MLModel.prediction(from:options:)(v6, v7);
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    sub_1003ABEB8();
    swift_allocError();
    char v16 = 3;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1003ABEB8();
    swift_allocError();
    char v16 = 1;
  }
  *id v15 = v16;
  swift_willThrow();

  uint64_t v4 = v5;
LABEL_15:

  id v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1003AA338(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 464) = a1;
  *(void *)(v4 + 472) = v1;
  swift_task_dealloc();
  id v5 = *(void **)(v3 + 448);
  id v6 = *(void **)(v3 + 440);
  if (v1)
  {
    swift_bridgeObjectRelease();

    id v7 = sub_1003AA8B8;
  }
  else
  {

    id v7 = sub_1003AA4A4;
  }
  return _swift_task_switch(v7, 0, 0);
}

void sub_1003AA4A4()
{
  uint64_t v29 = v0;
  uint64_t v1 = *(void **)(v0 + 464);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 featureValueForName:v2];

  if (v3 && (id v4 = [v3 multiArrayValue], v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 360);
    if (v5 < 0)
    {
      __break(1u);
      return;
    }
    if (v5)
    {
      uint64_t v6 = 0;
      id v7 = _swiftEmptyArrayStorage;
      do
      {
        id v8 = [v4 objectAtIndexedSubscript:v6];
        Float.init(truncating:)();
        int v10 = v9;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v7 = sub_10030A7C0(0, v7[2] + 1, 1, v7);
        }
        unint64_t v12 = v7[2];
        unint64_t v11 = v7[3];
        if (v12 >= v11 >> 1) {
          id v7 = sub_10030A7C0((void *)(v11 > 1), v12 + 1, 1, v7);
        }
        ++v6;
        uint64_t v13 = *(void *)(v0 + 360);
        v7[2] = v12 + 1;
        *((_DWORD *)v7 + v12 + 8) = v10;
      }
      while (v6 != v13);
    }
    uint64_t v19 = *(void *)(v0 + 472);
    uint64_t v20 = *(void *)(v0 + 344);
    uint64_t v21 = *(void *)(v0 + 352);
    swift_bridgeObjectRetain();
    uint64_t v22 = Array<A>.softmax()();
    swift_bridgeObjectRelease();
    uint64_t v23 = swift_task_alloc();
    *(void *)(v23 + 16) = v20;
    *(void *)(v23 + 24) = v21;
    uint64_t v24 = sub_1003ABC28(v22, (uint64_t (*)(float))sub_1003ABF0C);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v28 = v24;
    swift_bridgeObjectRetain();
    sub_1003AAF4C((uint64_t *)&v28);
    if (v19)
    {
      swift_release();
      return;
    }
    uint64_t v25 = *(void **)(v0 + 440);
    Class v27 = *(void **)(v0 + 432);
    id v26 = *(void **)(v0 + 416);
    swift_bridgeObjectRelease();
    char v16 = sub_1003ABB1C((uint64_t)v28, (uint64_t (*)(void, float))sub_1003ABF14);

    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    char v14 = *(void **)(v0 + 440);
    id v15 = *(void **)(v0 + 416);

    swift_unknownObjectRelease();
    char v16 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  id v17 = *(void **)(v0 + 424);

  id v18 = *(void (**)(void *))(v0 + 8);
  v18(v16);
}

uint64_t sub_1003AA7D0()
{
  uint64_t v1 = (void *)v0[48];
  NSString v2 = (void *)v0[47];
  swift_willThrow();

  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1003AA848()
{
  uint64_t v1 = *(void **)(v0 + 400);
  swift_willThrow();

  NSString v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1003AA8B8()
{
  uint64_t v1 = *(void **)(v0 + 432);
  id v3 = *(void **)(v0 + 416);
  NSString v2 = *(void **)(v0 + 424);

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1003AA938(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_100094134((uint64_t *)&unk_10090ABB0);
    uint64_t v4 = swift_allocError();
    void *v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1003AA9D0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100094134((uint64_t *)&unk_10090ABB0);
    uint64_t v5 = swift_allocError();
    *id v6 = a3;
    id v7 = a3;
    a1 = v3;
    a2 = (void *)v5;
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  if (!a2)
  {
    __break(1u);
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  **(void **)(*(void *)(v3 + 64) + 40) = a2;
  id v8 = a2;

  return swift_continuation_throwingResume();
}

BOOL sub_1003AAA90(unint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  if (*(void *)(*(void *)(a2 + 16) + 16) > (int64_t)a1)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > a1)
    {
      return *(float *)(a3 + 4 * a1 + 32) < a4;
    }
    __break(1u);
    goto LABEL_11;
  }
  if (qword_100907420 != -1) {
LABEL_11:
  }
    swift_once();
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100916B48);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Label index out of range. Mismatched model and labels.", v8, 2u);
    swift_slowDealloc();
  }

  return 0;
}

unint64_t sub_1003AABA8(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = result;
    if (*(void *)(*(void *)(a2 + 16) + 16) > result)
    {
      swift_bridgeObjectRetain();
      return v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t REMOwlEmbeddingClassifier.labels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t REMOwlEmbeddingClassifier.deinit()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd25REMOwlEmbeddingClassifier_locale;
  uint64_t v2 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t REMOwlEmbeddingClassifier.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd25REMOwlEmbeddingClassifier_locale;
  uint64_t v2 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1003AAD7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  int v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *int v9 = v4;
  v9[1] = sub_1003AAE40;
  v9[42] = a3;
  v9[43] = v8;
  v9[40] = a1;
  v9[41] = a2;
  return _swift_task_switch(sub_1003A9850, 0, 0);
}

uint64_t sub_1003AAE40(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_1003AAF40()
{
  return swift_bridgeObjectRetain();
}

Swift::Int sub_1003AAF4C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001F5430(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1003AB19C(v5);
  *a1 = v2;
  return result;
}

id sub_1003AAFB8(uint64_t a1, uint64_t a2)
{
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = 0;
  id v5 = [v2 initWithShape:isa dataType:a2 error:&v9];

  if (v5)
  {
    id v6 = v9;
  }
  else
  {
    id v7 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

id sub_1003AB0B4()
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = 0;
  id v2 = [v0 initWithDictionary:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

Swift::Int sub_1003AB19C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_141;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v84 = *a1;
      uint64_t v85 = *a1 + 16;
      uint64_t v86 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v88 = v86;
        uint64_t v89 = v85;
        do
        {
          float v90 = *(float *)(v89 + 8);
          if (*(float *)(v89 - 8) >= v90) {
            break;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v91 = *(void *)v89;
          *(_OWORD *)uint64_t v89 = *(_OWORD *)(v89 - 16);
          *(float *)(v89 - 8) = v90;
          *(void *)(v89 - 16) = v91;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_150;
  }
  Swift::Int v6 = result;
  uint64_t v101 = a1;
  if (v3 < 2)
  {
    id v9 = _swiftEmptyArrayStorage;
    __dst = (float *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v93 = v12;
      uint64_t v104 = v9;
      if (v13 >= 2)
      {
        uint64_t v94 = *v101;
        do
        {
          unint64_t v95 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_136;
          }
          if (!v94) {
            goto LABEL_149;
          }
          uint64_t v96 = v93;
          uint64_t v97 = *(void *)&v93[16 * v95 + 32];
          uint64_t v98 = *(void *)&v93[16 * v13 + 24];
          sub_1003AB890((float *)(v94 + 16 * v97), (float *)(v94 + 16 * *(void *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1) {
            break;
          }
          if (v98 < v97) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v96 = sub_1001F433C((uint64_t)v96);
          }
          if (v95 >= *((void *)v96 + 2)) {
            goto LABEL_138;
          }
          id v99 = &v96[16 * v95 + 32];
          *(void *)id v99 = v97;
          *((void *)v99 + 1) = v98;
          unint64_t v100 = *((void *)v96 + 2);
          if (v13 > v100) {
            goto LABEL_139;
          }
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          uint64_t v93 = v96;
          *((void *)v96 + 2) = v100 - 1;
          unint64_t v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_100094134(&qword_100916C78);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v104 = (void *)v8;
    __dst = (float *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v102 = *a1 + 40;
  uint64_t v103 = *a1 + 8;
  unint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v105 = v6;
  Swift::Int v106 = v3;
  uint64_t v107 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      float v15 = *(float *)(v103 + 16 * v10);
      uint64_t v16 = 16 * v14;
      float v17 = *(float *)(v103 + 16 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        id v18 = (float *)(v102 + 16 * v14);
        while (v17 < v15 != *(v18 - 4) >= *v18)
        {
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v17 < v15)
      {
        if (v10 < v14) {
          goto LABEL_142;
        }
        if (v14 < v10)
        {
          uint64_t v19 = 16 * v10 - 16;
          Swift::Int v20 = v10;
          Swift::Int v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11) {
                goto LABEL_148;
              }
              uint64_t v23 = (_OWORD *)(v11 + v16);
              uint64_t v24 = (_OWORD *)(v11 + v19);
              uint64_t v25 = *(void *)(v11 + v16);
              int v26 = *(_DWORD *)(v11 + v16 + 8);
              if (v16 != v19 || v23 >= v24 + 1) {
                *uint64_t v23 = *v24;
              }
              uint64_t v22 = v11 + v19;
              *(void *)uint64_t v22 = v25;
              *(_DWORD *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v16 += 16;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_50;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_140;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_50;
    }
    Swift::Int v27 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_143;
    }
    if (v27 >= v3) {
      Swift::Int v27 = v3;
    }
    if (v27 < v14) {
      break;
    }
    if (v10 != v27)
    {
      uint64_t v28 = (float *)(v11 + 16 * v10);
      do
      {
        uint64_t v29 = v28;
        Swift::Int v30 = v14;
        do
        {
          float v31 = v29[2];
          if (*(v29 - 2) >= v31) {
            break;
          }
          if (!v11) {
            goto LABEL_146;
          }
          uint64_t v32 = *(void *)v29;
          *(_OWORD *)uint64_t v29 = *((_OWORD *)v29 - 1);
          *(v29 - 2) = v31;
          *((void *)v29 - 2) = v32;
          v29 -= 4;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 4;
      }
      while (v10 != v27);
      Swift::Int v10 = v27;
    }
LABEL_50:
    if (v10 < v14) {
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = sub_1001F3D80(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v34 = *((void *)v12 + 2);
    unint64_t v33 = *((void *)v12 + 3);
    unint64_t v13 = v34 + 1;
    uint64_t v11 = v107;
    if (v34 >= v33 >> 1)
    {
      uint64_t v83 = sub_1001F3D80((char *)(v33 > 1), v34 + 1, 1, v12);
      uint64_t v11 = v107;
      unint64_t v12 = v83;
    }
    *((void *)v12 + 2) = v13;
    id v35 = v12 + 32;
    uint64_t v36 = &v12[16 * v34 + 32];
    *(void *)uint64_t v36 = v14;
    *((void *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        unint64_t v37 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v42 = &v35[16 * v13];
          uint64_t v43 = *((void *)v42 - 8);
          uint64_t v44 = *((void *)v42 - 7);
          BOOL v48 = __OFSUB__(v44, v43);
          uint64_t v45 = v44 - v43;
          if (v48) {
            goto LABEL_124;
          }
          uint64_t v47 = *((void *)v42 - 6);
          uint64_t v46 = *((void *)v42 - 5);
          BOOL v48 = __OFSUB__(v46, v47);
          uint64_t v40 = v46 - v47;
          char v41 = v48;
          if (v48) {
            goto LABEL_125;
          }
          unint64_t v49 = v13 - 2;
          uint64_t v50 = &v35[16 * v13 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          BOOL v48 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v48) {
            goto LABEL_127;
          }
          BOOL v48 = __OFADD__(v40, v53);
          uint64_t v54 = v40 + v53;
          if (v48) {
            goto LABEL_130;
          }
          if (v54 >= v45)
          {
            uint64_t v72 = &v35[16 * v37];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v48 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v48) {
              goto LABEL_134;
            }
            BOOL v65 = v40 < v75;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v66 = *((void *)v12 + 4);
            uint64_t v67 = *((void *)v12 + 5);
            BOOL v48 = __OFSUB__(v67, v66);
            uint64_t v59 = v67 - v66;
            char v60 = v48;
            goto LABEL_81;
          }
          uint64_t v39 = *((void *)v12 + 4);
          uint64_t v38 = *((void *)v12 + 5);
          BOOL v48 = __OFSUB__(v38, v39);
          uint64_t v40 = v38 - v39;
          char v41 = v48;
        }
        if (v41) {
          goto LABEL_126;
        }
        unint64_t v49 = v13 - 2;
        id v55 = &v35[16 * v13 - 32];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v58 = __OFSUB__(v56, v57);
        uint64_t v59 = v56 - v57;
        char v60 = v58;
        if (v58) {
          goto LABEL_129;
        }
        uint64_t v61 = &v35[16 * v37];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v48 = __OFSUB__(v62, v63);
        uint64_t v64 = v62 - v63;
        if (v48) {
          goto LABEL_132;
        }
        if (__OFADD__(v59, v64)) {
          goto LABEL_133;
        }
        if (v59 + v64 >= v40)
        {
          BOOL v65 = v40 < v64;
LABEL_87:
          if (v65) {
            unint64_t v37 = v49;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v60) {
          goto LABEL_128;
        }
        uint64_t v68 = &v35[16 * v37];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v48 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v48) {
          goto LABEL_131;
        }
        if (v71 < v59) {
          goto LABEL_15;
        }
LABEL_89:
        unint64_t v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11) {
          goto LABEL_147;
        }
        uint64_t v77 = v12;
        uint64_t v78 = &v35[16 * v76];
        uint64_t v79 = *(void *)v78;
        uint64_t v80 = &v35[16 * v37];
        uint64_t v81 = *((void *)v80 + 1);
        sub_1003AB890((float *)(v11 + 16 * *(void *)v78), (float *)(v11 + 16 * *(void *)v80), v11 + 16 * v81, __dst);
        if (v1) {
          goto LABEL_97;
        }
        if (v81 < v79) {
          goto LABEL_121;
        }
        if (v37 > *((void *)v77 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v78 = v79;
        *(void *)&v35[16 * v76 + 8] = v81;
        unint64_t v82 = *((void *)v77 + 2);
        if (v37 >= v82) {
          goto LABEL_123;
        }
        unint64_t v12 = v77;
        unint64_t v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((void *)v77 + 2) = v82 - 1;
        uint64_t v11 = v107;
        if (v82 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v105;
    Swift::Int v3 = v106;
    if (v10 >= v106)
    {
      id v9 = v104;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003AB890(float *__src, float *a2, unint64_t a3, float *__dst)
{
  id v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  int v26 = __dst;
  Swift::Int v27 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      uint64_t v19 = 4 * v13;
      if (__dst != a2 || &a2[v19] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      Swift::Int v20 = &v4[v19];
      uint64_t v25 = &v4[v19];
      Swift::Int v27 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        Swift::Int v21 = (float *)(a3 - 16);
        do
        {
          uint64_t v22 = v21 + 4;
          if (*(v6 - 2) >= *(v20 - 2))
          {
            uint64_t v25 = v20 - 4;
            if (v22 < v20 || v21 >= v20 || v22 != v20) {
              *(_OWORD *)Swift::Int v21 = *((_OWORD *)v20 - 1);
            }
            uint64_t v23 = v6;
            v20 -= 4;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v23 = v6 - 4;
            if (v22 != v6 || v21 >= v6) {
              *(_OWORD *)Swift::Int v21 = *(_OWORD *)v23;
            }
            Swift::Int v27 = v6 - 4;
            if (v23 <= v7) {
              break;
            }
          }
          v21 -= 4;
          Swift::Int v6 = v23;
        }
        while (v20 > v4);
      }
LABEL_44:
      sub_1001F40E0((void **)&v27, (const void **)&v26, &v25);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    size_t v14 = 4 * v10;
    if (__dst != __src || &__src[v14] <= __dst) {
      memmove(__dst, __src, v14 * 4);
    }
    float v15 = &v4[v14];
    uint64_t v25 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      uint64_t v16 = v4;
      while (1)
      {
        if (v16[2] >= v6[2])
        {
          id v4 = v16 + 4;
          id v18 = v16;
          float v17 = v6;
          if (v7 == v16)
          {
            v16 += 4;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v16 += 4;
          }
        }
        else
        {
          float v17 = v6 + 4;
          id v18 = v6;
          if (v7 == v6 && v7 < v17) {
            goto LABEL_22;
          }
        }
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v18;
LABEL_22:
        v7 += 4;
        if (v16 < v15)
        {
          Swift::Int v6 = v17;
          if ((unint64_t)v17 < a3) {
            continue;
          }
        }
        int v26 = v4;
        Swift::Int v27 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1003ABB1C(uint64_t a1, uint64_t (*a2)(void, float))
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1001DE6F8(0, v2, 0);
    id v4 = (float *)(a1 + 40);
    do
    {
      uint64_t v5 = a2(*((void *)v4 - 1), *v4);
      uint64_t v7 = v6;
      uint64_t v9 = v8;
      int v11 = v10;
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1) {
        sub_1001DE6F8(v12 > 1, v13 + 1, 1);
      }
      v4 += 4;
      _swiftEmptyArrayStorage[2] = v13 + 1;
      size_t v14 = &_swiftEmptyArrayStorage[4 * v13];
      v14[4] = v5;
      v14[5] = v7;
      v14[6] = v9;
      *((_DWORD *)v14 + 14) = v11;
      --v2;
    }
    while (v2);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1003ABC28(uint64_t a1, uint64_t (*a2)(float))
{
  uint64_t v3 = v2;
  uint64_t v5 = 0;
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v7 = a1 + 32;
LABEL_2:
  if (v5 <= v6) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v5;
  }
  uint64_t result = v5;
  while (1)
  {
    if (v6 == result) {
      return _swiftEmptyArrayStorage;
    }
    if (v8 == result) {
      break;
    }
    float v10 = *(float *)(v7 + 4 * (void)result);
    uint64_t v5 = (void *)((char *)result + 1);
    char v11 = a2(v10);
    uint64_t result = v5;
    if (v11)
    {
      uint64_t v15 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1001DE718(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1) {
        sub_1001DE718(v12 > 1, v13 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v13 + 1;
      size_t v14 = (float *)&_swiftEmptyArrayStorage[2 * v13];
      *((void *)v14 + 4) = (char *)v5 - 1;
      v14[10] = v10;
      uint64_t v3 = v15;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

id sub_1003ABD58(uint64_t a1, uint64_t a2)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v5 = v4;
  id v14 = 0;
  id v6 = [(id)swift_getObjCClassFromMetadata() modelWithContentsOfURL:v4 configuration:a2 error:&v14];

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    id v10 = v7;
    v9(a1, v8);
  }
  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

unint64_t sub_1003ABEB8()
{
  unint64_t result = qword_100916B80;
  if (!qword_100916B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100916B80);
  }
  return result;
}

BOOL sub_1003ABF0C(unint64_t a1, float a2)
{
  return sub_1003AAA90(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

unint64_t sub_1003ABF14(unint64_t a1)
{
  return sub_1003AABA8(a1, v1);
}

uint64_t sub_1003ABF1C()
{
  return type metadata accessor for REMOwlEmbeddingClassifier();
}

uint64_t type metadata accessor for REMOwlEmbeddingClassifier()
{
  uint64_t result = qword_100916BC0;
  if (!qword_100916BC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003ABF70()
{
  uint64_t result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for REMOwlEmbeddingClassifierError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003AC100);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMOwlEmbeddingClassifierError()
{
  return &type metadata for REMOwlEmbeddingClassifierError;
}

unint64_t sub_1003AC13C()
{
  unint64_t result = qword_100916C70;
  if (!qword_100916C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100916C70);
  }
  return result;
}

uint64_t sub_1003AC190(uint64_t a1)
{
  uint64_t result = sub_1003AD3E4(&qword_100916CB8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledFlatInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1003AC1E8(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v78 = a4;
  uint64_t v69 = a3;
  uint64_t v76 = a2;
  uint64_t v67 = a5;
  uint64_t v68 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v74 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v72 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v73 = (char *)&v58 - v8;
  uint64_t v9 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v9 - 8);
  uint64_t v63 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v70 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v66 = (uint64_t *)((char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v75 = (char *)&v58 - v13;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v65 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v71 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v58 - v21;
  uint64_t v23 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v58 - v27;
  uint64_t v29 = a1;
  uint64_t v30 = v79;
  NSString v31 = sub_1003ACCD4(a1, (uint64_t)v78);
  if (!v30)
  {
    uint64_t v79 = (uint64_t)v31;
    uint64_t v59 = v25;
    char v60 = v19;
    uint64_t v61 = v17;
    uint64_t v62 = v22;
    sub_1003AC9B4(a1, (uint64_t)v28);
    id v32 = [v77 fetchResultTokenToDiffAgainst];
    uint64_t v33 = (uint64_t)v62;
    sub_10051F2BC(v32, v29, (uint64_t)v62);
    id v77 = 0;
    uint64_t v76 = v29;

    REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter();
    unint64_t v34 = v75;
    REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v16, Configuration);
    uint64_t v35 = v70;
    uint64_t v36 = v66;
    unint64_t v37 = v34;
    uint64_t v38 = v64;
    (*(void (**)(uint64_t *, char *, uint64_t))(v70 + 16))(v66, v37, v64);
    int v39 = (*(uint64_t (**)(uint64_t *, uint64_t))(v35 + 88))(v36, v38);
    BOOL v58 = v28;
    if (v39 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v35 + 96))(v36, v38);
      uint64_t v40 = *v36;
      uint64_t v41 = v79;
      swift_bridgeObjectRetain();
      uint64_t v78 = sub_1005280D0(v40, v41, v76, v69, 0);
      uint64_t v42 = v73;
      uint64_t v43 = v60;
    }
    else
    {
      uint64_t v42 = v73;
      uint64_t v43 = v60;
      if (v39 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
      {
        (*(void (**)(uint64_t *, uint64_t))(v35 + 96))(v36, v38);
        uint64_t v44 = *v36;
        swift_bridgeObjectRetain();
        uint64_t v78 = sub_100528BCC(v44, v33, v76, v69, 0);
      }
      else
      {
        uint64_t v45 = v69;
        if (v39 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
        {
          uint64_t v52 = v68;
          uint64_t v54 = v74;
          id v55 = v72;
          if (v39 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
          {
            _diagnoseUnexpectedEnumCase<A>(type:)();
            __break(1u);
            return;
          }
          uint64_t v78 = _swiftEmptyArrayStorage;
          uint64_t v53 = v75;
          goto LABEL_9;
        }
        (*(void (**)(uint64_t *, uint64_t))(v35 + 96))(v36, v38);
        uint64_t v46 = *v36;
        uint64_t v47 = sub_100094134(&qword_100909C78);
        uint64_t v48 = v63;
        sub_1001326D0((uint64_t)v36 + *(int *)(v47 + 48), v63);
        uint64_t v49 = v79;
        swift_bridgeObjectRetain();
        uint64_t v50 = v46;
        uint64_t v51 = v76;
        uint64_t v78 = sub_1005280D0(v50, v49, v76, v45, 0);
        sub_10052929C(v48, v49, v51, v45, 0);
        sub_1000966BC(v48, &qword_100909C68);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v52 = v68;
    uint64_t v54 = v74;
    uint64_t v53 = v75;
    id v55 = v72;
LABEL_9:
    (*(void (**)(char *, uint64_t))(v35 + 8))(v53, v38);
    sub_100132738((uint64_t)v58, (uint64_t)v59);
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v55, v42, v52);
    uint64_t v56 = v71;
    uint64_t v57 = (uint64_t)v62;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v43, v62, v61);
    sub_1003AD3E4(&qword_10090BC38, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
    sub_1003AD3E4((unint64_t *)&unk_10090BC40, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v52);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v61);
    sub_1000966BC((uint64_t)v58, &qword_100909C70);
  }
}

void sub_1003AC9B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = _s10PredicatesOMa(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v9 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter();
  char v12 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, Configuration);
  if (v12)
  {
    uint64_t v13 = enum case for REMRemindersListDataView.ShowCompleted.on(_:);
    uint64_t v14 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v7, v13, v14);
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = (void *)sub_10038F1F0();
    sub_10012607C((uint64_t)v7, _s10PredicatesOMa);
    sub_10051EB6C(a1, (uint64_t)v15);
    if (!v2)
    {
      uint64_t v16 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 0, 1, v16);
    }
  }
  else
  {
    uint64_t v17 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a2, 1, 1, v17);
  }
}

uint64_t sub_1003ACC20()
{
  uint64_t v0 = _s9UtilitiesO12SortingStyleOMa();
  sub_10008E278(v0, qword_100916C80);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100916C80);
  uint64_t v2 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v3 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(v1, v2, v3);

  return swift_storeEnumTagMultiPayload();
}

NSString sub_1003ACCD4(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a1;
  uint64_t v3 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v62 = *(void *)(v3 - 8);
  uint64_t v63 = v3;
  __chkstk_darwin(v3);
  uint64_t v61 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v5 - 8);
  uint64_t v53 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v54);
  uint64_t v55 = (uint64_t)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v59 = (uint64_t)v47 - v9;
  uint64_t v48 = (void *)_s10PredicatesOMa(0);
  __chkstk_darwin(v48);
  uint64_t v49 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v12 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v57 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v47 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v47 - v18;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v21 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v52 = (char *)v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v50 = (char *)v47 - v24;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)v47 - v26;
  uint64_t v56 = a2;
  REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
  uint64_t v64 = *(void (**)(char *, uint64_t))(v21 + 8);
  v64(v27, Configuration);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v16, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), Subtasks);
  sub_1003AD3E4(&qword_100911210, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FetchSubtasks);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v28 = v12 + 8;
  v29(v16, Subtasks);
  uint64_t v51 = v29;
  v29(v19, Subtasks);
  if (a2)
  {
    uint64_t v30 = self;
    NSString v31 = String._bridgeToObjectiveC()();
    [v30 internalErrorWithDebugDescription:v31];

    swift_willThrow();
  }
  else
  {
    v47[1] = v28;
    REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter();
    uint64_t v32 = (uint64_t)v49;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
    uint64_t v33 = v64;
    v64(v27, Configuration);
    swift_storeEnumTagMultiPayload();
    uint64_t v48 = (void *)sub_10038F1F0();
    sub_10012607C(v32, _s10PredicatesOMa);
    REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter();
    uint64_t v34 = (uint64_t)v53;
    REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
    v33(v27, Configuration);
    if (qword_100907428 != -1) {
      swift_once();
    }
    uint64_t v35 = sub_10008E2DC(v54, (uint64_t)qword_100916C80);
    uint64_t v36 = v55;
    sub_1001F82BC(v35, v55);
    uint64_t v37 = v59;
    sub_100520FD4(v34, v36, v59);
    uint64_t v38 = v50;
    REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter();
    uint64_t v39 = (uint64_t)v61;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
    uint64_t v40 = v64;
    v64(v38, Configuration);
    uint64_t v41 = v52;
    REMRemindersListDataView.ScheduledFlatInvocation.Parameters.configuration.getter();
    uint64_t v42 = v57;
    NSString v31 = v41;
    REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
    v40(v41, Configuration);
    uint64_t v43 = v48;
    uint64_t v44 = v60;
    uint64_t v45 = sub_100522260(v58, (uint64_t)v48, v37, 0, 0, v39, v42, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
    if (!v44)
    {
      NSString v31 = v45;
      swift_bridgeObjectRelease();
    }

    v51(v42, Subtasks);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v39, v63);
    sub_10012607C(v37, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  }
  return v31;
}

uint64_t sub_1003AD3E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003AD42C(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6 - 8);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t KeyPath = (char *)&v58 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v58 - v14;
  uint64_t v61 = _swiftEmptyArrayStorage;
  switch(a3)
  {
    case 1:
      uint64_t KeyPath = (char *)swift_getKeyPath();
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        sub_10029BF8C(a1, a2, 1);
      }
      else
      {
        uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v18 = _swiftEmptyArrayStorage;
      if (!v17) {
        goto LABEL_39;
      }
      uint64_t v58 = KeyPath;
      uint64_t v59 = v10;
      uint64_t v60 = _swiftEmptyArrayStorage;
      sub_1001DE118(0, v17 & ~(v17 >> 63), 0);
      if ((v17 & 0x8000000000000000) == 0)
      {
        uint64_t v19 = 0;
        uint64_t v18 = v60;
        do
        {
          if ((a1 & 0xC000000000000001) != 0) {
            id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v20 = *(id *)(a1 + 8 * v19 + 32);
          }
          uint64_t v21 = v20;
          id v22 = [v20 uuid];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v23 = type metadata accessor for UUID();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v15, 0, 1, v23);

          uint64_t v60 = v18;
          unint64_t v25 = v18[2];
          unint64_t v24 = v18[3];
          if (v25 >= v24 >> 1)
          {
            sub_1001DE118(v24 > 1, v25 + 1, 1);
            uint64_t v18 = v60;
          }
          ++v19;
          void v18[2] = v25 + 1;
          sub_100096408((uint64_t)v15, (uint64_t)v18+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v25, (uint64_t *)&unk_100909E50);
        }
        while (v17 != v19);
        uint64_t KeyPath = v58;
        uint64_t v10 = v59;
LABEL_39:
        sub_10039C5D4((uint64_t)KeyPath, (uint64_t)v18);
        goto LABEL_40;
      }
      __break(1u);
      goto LABEL_66;
    case 2:
      uint64_t v26 = swift_getKeyPath();
      uint64_t v27 = sub_1001FFB00(a1);
      sub_10039C5E8(v26, (uint64_t)v27);
LABEL_40:
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v61[2] >= v61[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_43:
      LODWORD(KeyPath) = 0;
LABEL_44:
      LODWORD(v15) = 0;
      goto LABEL_49;
    case 3:
    case 4:
      LODWORD(v15) = a1 & 1;
      uint64_t v28 = swift_getKeyPath();
      __int16 v29 = REMAccountType.asInt16.getter();
      sub_10032E710(v28, v29);
      swift_release();
      goto LABEL_21;
    case 5:
      LODWORD(v15) = a1 & 1;
      sub_100094134(&qword_100916CD8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E80;
      uint64_t v31 = swift_getKeyPath();
      __int16 v32 = REMAccountType.asInt16.getter();
      uint64_t v33 = sub_10032E710(v31, v32);
      swift_release();
      *(void *)(inited + 32) = v33;
      uint64_t v34 = swift_getKeyPath();
      __int16 v35 = REMAccountType.asInt16.getter();
      uint64_t v36 = sub_10032E710(v34, v35);
      swift_release();
      *(void *)(inited + 40) = v36;
      uint64_t v60 = (void *)inited;
      specialized Array._endMutation()();
      sub_100397E58(v60);
LABEL_21:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v61[2] >= v61[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      LODWORD(KeyPath) = 0;
      goto LABEL_49;
    case 6:
      uint64_t v15 = (char *)swift_getKeyPath();
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
        sub_10029BF8C(a1, a2, 6);
      }
      else
      {
        uint64_t v37 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v38 = _swiftEmptyArrayStorage;
      if (!v37) {
        goto LABEL_45;
      }
      uint64_t v58 = v15;
      uint64_t v59 = v10;
      uint64_t v60 = _swiftEmptyArrayStorage;
      sub_1001DE118(0, v37 & ~(v37 >> 63), 0);
      if (v37 < 0)
      {
LABEL_66:
        __break(1u);
LABEL_67:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_38:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        uint64_t v39 = 0;
        uint64_t v38 = v60;
        do
        {
          if ((a1 & 0xC000000000000001) != 0) {
            id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v40 = *(id *)(a1 + 8 * v39 + 32);
          }
          uint64_t v41 = v40;
          id v42 = [v40 uuid];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v43 = type metadata accessor for UUID();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(KeyPath, 0, 1, v43);

          uint64_t v60 = v38;
          unint64_t v45 = v38[2];
          unint64_t v44 = v38[3];
          if (v45 >= v44 >> 1)
          {
            sub_1001DE118(v44 > 1, v45 + 1, 1);
            uint64_t v38 = v60;
          }
          ++v39;
          v38[2] = v45 + 1;
          sub_100096408((uint64_t)KeyPath, (uint64_t)v38+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v45, (uint64_t *)&unk_100909E50);
        }
        while (v37 != v39);
        uint64_t v15 = v58;
        uint64_t v10 = v59;
LABEL_45:
        sub_10039C5D4((uint64_t)v15, (uint64_t)v38);
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v61[2] >= v61[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        LODWORD(KeyPath) = 1;
LABEL_48:
        LODWORD(v15) = 1;
      }
LABEL_49:
      sub_1002F51CC(0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v61[2] >= v61[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v15)
      {
        uint64_t v48 = swift_getKeyPath();
        sub_10039C5FC(v48);
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v61[2] >= v61[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (KeyPath)
      {
        uint64_t v49 = swift_getKeyPath();
        id v50 = [self localInternalAccountID];
        id v51 = [v50 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v52 = type metadata accessor for UUID();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v10, 0, 1, v52);
        sub_10039C61C(v49, (uint64_t)v10);
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v61[2] >= v61[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      uint64_t v53 = swift_getKeyPath();
      __int16 v54 = REMAccountType.asInt16.getter();
      sub_10039C644(v53, v54);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v61[2] >= v61[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      return sub_1002F52FC(v61);
    case 7:
      LODWORD(KeyPath) = 1;
      LODWORD(v15) = 1;
      switch(a1)
      {
        case 1uLL:
          uint64_t v46 = swift_getKeyPath();
          __int16 v47 = REMAccountType.asInt16.getter();
          sub_10032E710(v46, v47);
          swift_release();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v61[2] < v61[3] >> 1) {
            goto LABEL_38;
          }
          goto LABEL_67;
        case 2uLL:
          uint64_t v56 = swift_getKeyPath();
          _auto_REMAccountTypeForPrimaryCloudKit();
          __int16 v57 = REMAccountType.asInt16.getter();
          sub_10032E710(v56, v57);
          goto LABEL_40;
        case 4uLL:
          goto LABEL_44;
        case 5uLL:
          goto LABEL_43;
        default:
          goto LABEL_49;
      }
      goto LABEL_49;
    default:
      uint64_t v16 = swift_getKeyPath();
      sub_1003AFC74(a1, a2, 0);
      sub_10032E704(v16, a1, a2);
      sub_10029BF8C(a1, a2, 0);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v61[2] >= v61[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      LODWORD(KeyPath) = 0;
      goto LABEL_48;
  }
}

uint64_t sub_1003ADE78(void *a1)
{
  return sub_1003ADF18(a1);
}

uint64_t sub_1003ADEC8(void *a1)
{
  return sub_1003ADF18(a1);
}

uint64_t sub_1003ADF18(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = _s10PredicatesOMa_1();
  *(void *)&double v6 = __chkstk_darwin(v5).n128_u64[0];
  uint64_t v8 = (uint64_t *)((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46[0] = 0;
  id v9 = [v3 remObjectIDWithError:v46, v6];
  id v10 = v46[0];
  if (!v9)
  {
    id v32 = v46[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (uint64_t)v32;
  }
  void *v8 = v9;
  swift_storeEnumTagMultiPayload();
  id v11 = v10;
  uint64_t v12 = (void *)sub_100535B3C();
  sub_1003B0A6C((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10077A530;
  *(void *)(v13 + 32) = v3;
  v46[0] = (id)v13;
  specialized Array._endMutation()();
  id v14 = v3;
  sub_100094134(&qword_10090FF00);
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  sub_1000BFEAC((unint64_t *)&qword_10090FE58, &qword_10090FF00);
  sub_1001FF5BC();
  uint64_t v15 = Sequence.compactMapToSet<A>(_:)();
  uint64_t v40 = v2;
  sub_1002099D8(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v17 = [objc_allocWithZone((Class)NSFetchRequest) init];
  uint64_t v41 = v16;
  id v18 = [(id)swift_getObjCClassFromMetadata() entity];
  [v17 setEntity:v18];

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v17 setAffectedStores:isa];

  id v42 = v12;
  [v17 setPredicate:v12];
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_100907888 != -1) {
LABEL_20:
  }
    swift_once();
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class v20 = Array._bridgeToObjectiveC()().super.isa;
  [v17 setSortDescriptors:v20];

  if (qword_100907890 != -1) {
    swift_once();
  }
  uint64_t v21 = qword_100942570;
  if (!((unint64_t)qword_100942570 >> 62))
  {
    uint64_t v22 = *(void *)((qword_100942570 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v43 = a1;
    if (v22) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v43 = a1;
  if (!v22)
  {
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    Class v33 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v17 setRelationshipKeyPathsForPrefetching:v33];

    uint64_t v34 = v40;
    id v32 = v43;
    __int16 v35 = NSManagedObjectContext.fetch<A>(_:)();
    if (!v34)
    {
      v46[0] = v35;
      sub_100094134(&qword_100910160);
      sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
      id v32 = (id)Sequence.elements<A>(ofType:)();
      swift_bridgeObjectRelease();
    }

    return (uint64_t)v32;
  }
LABEL_7:
  __int16 v47 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v22 & ~(v22 >> 63), 0);
  if (v22 < 0) {
    __break(1u);
  }
  id v39 = v17;
  uint64_t v23 = 0;
  a1 = v47;
  unint64_t v44 = v21 & 0xC000000000000001;
  id v17 = (id)v21;
  while (1)
  {
    if (v22 == v23)
    {
      __break(1u);
      goto LABEL_20;
    }
    if (v44)
    {
      uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v24 = *(void *)(v21 + 8 * v23 + 32);
      swift_retain();
    }
    uint64_t v25 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v26) {
      break;
    }
    uint64_t v27 = v25;
    uint64_t v28 = v26;
    swift_release();
    __int16 v47 = a1;
    unint64_t v30 = a1[2];
    unint64_t v29 = a1[3];
    if (v30 >= v29 >> 1)
    {
      sub_1001DE058(v29 > 1, v30 + 1, 1);
      a1 = v47;
    }
    ++v23;
    a1[2] = v30 + 1;
    uint64_t v31 = &a1[2 * v30];
    v31[4] = v27;
    v31[5] = v28;
    uint64_t v21 = (uint64_t)v17;
    if (v22 == v23)
    {
      swift_bridgeObjectRelease();
      id v17 = v39;
      goto LABEL_23;
    }
  }
  v46[0] = 0;
  v46[1] = (id)0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v37._uint64_t object = (void *)0x80000001007CAF70;
  v37._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v37);
  uint64_t v45 = v24;
  sub_100094134(&qword_100913A10);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003AE574()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100916CC0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100916CC0);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1003AE63C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003AE648(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1003AE654(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v53 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s10PredicatesOMa_1();
  *(void *)&double v9 = __chkstk_darwin(v8).n128_u64[0];
  id v11 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56[0] = 0;
  id v12 = [v3 remObjectIDWithError:v56, v9];
  id v13 = v56[0];
  if (!v12)
  {
    id v33 = v56[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (uint64_t)v11;
  }
  uint64_t v48 = v6;
  uint64_t v49 = v5;
  *id v11 = v12;
  swift_storeEnumTagMultiPayload();
  id v14 = v13;
  id v15 = (id)sub_100535B3C();
  sub_1003B0A6C((uint64_t)v11, (uint64_t (*)(void))_s10PredicatesOMa_1);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10077A530;
  *(void *)(v16 + 32) = v3;
  v56[0] = (id)v16;
  specialized Array._endMutation()();
  id v47 = v3;
  sub_100094134(&qword_10090FF00);
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  sub_1000BFEAC((unint64_t *)&qword_10090FE58, &qword_10090FF00);
  sub_1001FF5BC();
  uint64_t v17 = Sequence.compactMapToSet<A>(_:)();
  uint64_t v51 = v2;
  sub_1002099D8(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v19 = [objc_allocWithZone((Class)NSFetchRequest) init];
  uint64_t v52 = v18;
  id v20 = [(id)swift_getObjCClassFromMetadata() entity];
  [v19 setEntity:v20];

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v19 setAffectedStores:isa];

  [v19 setPredicate:v15];
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_100907888 != -1) {
LABEL_20:
  }
    swift_once();
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class v22 = Array._bridgeToObjectiveC()().super.isa;
  [v19 setSortDescriptors:v22];

  if (qword_100907890 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_100942570;
  if (!((unint64_t)qword_100942570 >> 62))
  {
    uint64_t v24 = *(void *)((qword_100942570 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    id v50 = v15;
    if (v24) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  id v50 = v15;
  if (!v24)
  {
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    Class v34 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v19 setRelationshipKeyPathsForPrefetching:v34];

    uint64_t v35 = v51;
    id v11 = a1;
    uint64_t v36 = NSManagedObjectContext.fetch<A>(_:)();
    uint64_t v24 = v35;
    if (!v35)
    {
      v56[0] = v36;
      sub_100094134(&qword_100910160);
      sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
      id v15 = (id)Sequence.elements<A>(ofType:)();
      swift_bridgeObjectRelease();
      if (qword_100907430 == -1)
      {
LABEL_26:
        uint64_t v37 = v49;
        uint64_t v38 = sub_10008E2DC(v49, (uint64_t)qword_100916CC0);
        uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 16))(v53, v38, v37);
        __chkstk_darwin(v39);
        v56[0] = v15;
        __chkstk_darwin(v40);
        uint64_t v41 = Sequence.map<A>(skippingError:_:)();
        if (v24)
        {
          swift_errorRelease();

          id v11 = _swiftEmptyArrayStorage;
        }
        else
        {
          id v11 = (void *)v41;
        }
        (*(void (**)(char *, uint64_t))(v48 + 8))(v53, v49);
        swift_bridgeObjectRelease();
        return (uint64_t)v11;
      }
LABEL_32:
      swift_once();
      goto LABEL_26;
    }

    return (uint64_t)v11;
  }
LABEL_7:
  __int16 v57 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v24 & ~(v24 >> 63), 0);
  if (v24 < 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  id v45 = v19;
  uint64_t v46 = a1;
  a1 = 0;
  uint64_t v25 = v57;
  unint64_t v54 = v23 & 0xC000000000000001;
  id v19 = (id)v23;
  while (1)
  {
    if ((void *)v24 == a1)
    {
      __break(1u);
      goto LABEL_20;
    }
    if (v54)
    {
      uint64_t v26 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v26 = *(void *)(v23 + 8 * (void)a1 + 32);
      swift_retain();
    }
    uint64_t v27 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v28) {
      break;
    }
    uint64_t v29 = v27;
    id v15 = v28;
    swift_release();
    __int16 v57 = v25;
    unint64_t v31 = v25[2];
    unint64_t v30 = v25[3];
    if (v31 >= v30 >> 1)
    {
      sub_1001DE058(v30 > 1, v31 + 1, 1);
      uint64_t v25 = v57;
    }
    a1 = (void *)((char *)a1 + 1);
    v25[2] = v31 + 1;
    id v32 = &v25[2 * v31];
    v32[4] = v29;
    v32[5] = v15;
    uint64_t v23 = (uint64_t)v19;
    if ((void *)v24 == a1)
    {
      swift_bridgeObjectRelease();
      id v15 = v50;
      id v19 = v45;
      a1 = v46;
      goto LABEL_23;
    }
  }
  v56[0] = 0;
  v56[1] = (id)0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v43._uint64_t object = (void *)0x80000001007CAF70;
  v43._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v43);
  uint64_t v55 = v26;
  sub_100094134(&qword_100913A10);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_1003AEE8C@<X0>(id *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v5 = *a1;
  id v6 = [*a1 remObjectID];

  if (v6)
  {
    *a3 = v5;
    return v5;
  }
  else
  {
    _StringGuts.grow(_:)(98);
    v8._uint64_t object = (void *)0x80000001007D3BC0;
    v8._uint64_t countAndFlagsBits = 0xD000000000000055;
    String.append(_:)(v8);
    id v9 = [a2 remObjectID:0, 0xE000000000000000];
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = [v9 description];

      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v14 = v13;
    }
    else
    {
      id v14 = (void *)0xE300000000000000;
      uint64_t v12 = 7104878;
    }
    id v15 = self;
    v16._uint64_t countAndFlagsBits = v12;
    v16._uint64_t object = v14;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 0x203A44496F6D202CLL;
    v17._uint64_t object = (void *)0xE800000000000000;
    String.append(_:)(v17);
    id v18 = [v5 objectID];
    id v19 = [v18 description];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Class v22 = v21;

    v23._uint64_t countAndFlagsBits = v20;
    v23._uint64_t object = v22;
    String.append(_:)(v23);

    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 125;
    v24._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 internalErrorWithDebugDescription:v25];

    return (id)swift_willThrow();
  }
}

uint64_t sub_1003AF094()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100788F20;
  *(void *)(v0 + 32) = swift_getKeyPath();
  *(void *)(v0 + 40) = swift_getKeyPath();
  *(void *)(v0 + 48) = swift_getKeyPath();
  *(void *)(v0 + 56) = swift_getKeyPath();
  *(void *)(v0 + 64) = swift_getKeyPath();
  *(void *)(v0 + 72) = swift_getKeyPath();
  *(void *)(v0 + 80) = swift_getKeyPath();
  *(void *)(v0 + 88) = swift_getKeyPath();
  *(void *)(v0 + 96) = swift_getKeyPath();
  *(void *)(v0 + 104) = swift_getKeyPath();
  *(void *)(v0 + 112) = swift_getKeyPath();
  *(void *)(v0 + 120) = swift_getKeyPath();
  *(void *)(v0 + 128) = swift_getKeyPath();
  *(void *)(v0 + 136) = swift_getKeyPath();
  *(void *)(v0 + 144) = swift_getKeyPath();
  *(void *)(v0 + 152) = swift_getKeyPath();
  *(void *)(v0 + 160) = swift_getKeyPath();
  *(void *)(v0 + 168) = swift_getKeyPath();
  *(void *)(v0 + 176) = swift_getKeyPath();
  *(void *)(v0 + 184) = swift_getKeyPath();
  *(void *)(v0 + 192) = swift_getKeyPath();
  *(void *)(v0 + 200) = swift_getKeyPath();
  *(void *)(v0 + 208) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  qword_1009421E0 = v0;
  return result;
}

void sub_1003AF268(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

unint64_t sub_1003AF270@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7remindd27RDSynchronizedKeyValueStoreC11ChangeEventV6ReasonO05ubkvsfhC0AGSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

id sub_1003AF29C@<X0>(id *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v5 = *a1;
  id v6 = [*a1 remObjectID];

  if (v6)
  {
    *a3 = v5;
    return v5;
  }
  else
  {
    uint64_t v8 = 7104878;
    if (a2 && (id v9 = [a2 remObjectID]) != 0)
    {
      uint64_t v10 = v9;
      id v11 = [v9 description];

      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v13 = v12;
    }
    else
    {
      id v13 = (void *)0xE300000000000000;
    }
    id v14 = self;
    _StringGuts.grow(_:)(106);
    v15._uint64_t object = (void *)0x80000001007D3B60;
    v15._uint64_t countAndFlagsBits = 0xD00000000000005DLL;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = v8;
    v16._uint64_t object = v13;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 0x203A44496F4D202CLL;
    v17._uint64_t object = (void *)0xE800000000000000;
    String.append(_:)(v17);
    id v18 = [v5 objectID:0:0xE000000000000000];
    id v19 = [v18 description];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Class v22 = v21;

    v23._uint64_t countAndFlagsBits = v20;
    v23._uint64_t object = v22;
    String.append(_:)(v23);

    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 125;
    v24._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 internalErrorWithDebugDescription:v25];

    return (id)swift_willThrow();
  }
}

void sub_1003AF4B0(char a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v62 = a3;
  uint64_t v56 = a4;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = (void *)type metadata accessor for UUID();
  uint64_t v58 = *(v67 - 1);
  uint64_t v9 = __chkstk_darwin(v67);
  uint64_t v55 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v63 = (char *)v52 - v12;
  __chkstk_darwin(v11);
  id v14 = (char *)v52 - v13;
  sub_1000963CC(0, &qword_10090ABC0);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v16 = [ObjCClassFromMetadata cdEntityName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v17 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v19 = [v17 initWithEntityName:v18];

  uint64_t v20 = (void *)sub_1003AD42C(a2 & 1, 0, a1 + 3);
  [v19 setPredicate:v20];
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100776E40;
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 32) = 0x696669746E656469;
  *(void *)(v21 + 40) = 0xEA00000000007265;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v19 setPropertiesToFetch:isa];

  [v19 setResultType:2];
  sub_1000963CC(0, &qword_10090E4F0);
  Swift::String v23 = v64;
  unint64_t v24 = NSManagedObjectContext.fetch<A>(_:)();
  if (v23)
  {

    return;
  }
  uint64_t v60 = v14;
  id v61 = ObjCClassFromMetadata;
  unint64_t v62 = v24;
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v26 = v67;
  id v53 = v20;
  id v54 = v19;
  v52[1] = 0;
  if (v25)
  {
    unint64_t v27 = v62;
    if (v25 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v28 = 0;
    unint64_t v59 = v62 & 0xC000000000000001;
    uint64_t v29 = (void (**)(char *, uint64_t, uint64_t, void *))(v58 + 56);
    unint64_t v30 = (uint64_t (**)(char *, uint64_t, void *))(v58 + 48);
    unint64_t v31 = (void (**)(void))(v58 + 32);
    uint64_t v64 = _swiftEmptyArrayStorage;
    __int16 v57 = (char *)&type metadata for Any + 8;
    do
    {
      if (v59) {
        id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v32 = *(id *)(v27 + 8 * v28 + 32);
      }
      id v33 = v32;
      *(void *)&v65[0] = 0x696669746E656469;
      *((void *)&v65[0] + 1) = 0xEA00000000007265;
      id v34 = [v32 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v34)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v65, 0, sizeof(v65));
      }
      uint64_t v26 = v67;
      sub_100096408((uint64_t)v65, (uint64_t)v66, &qword_100908190);
      if (v66[3])
      {
        int v35 = swift_dynamicCast();
        (*v29)(v8, v35 ^ 1u, 1, v26);
      }
      else
      {
        sub_1000966BC((uint64_t)v66, &qword_100908190);
        (*v29)(v8, 1, 1, v26);
      }

      int v36 = (*v30)(v8, 1, v26);
      uint64_t v37 = v60;
      if (v36 == 1)
      {
        sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v38 = *v31;
        ((void (*)(char *, char *, void *))*v31)(v60, v8, v26);
        ((void (*)(char *, char *, void *))v38)(v63, v37, v26);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v39 = (unint64_t)v64;
        }
        else {
          unint64_t v39 = sub_100309EC8(0, v64[2] + 1, 1, (unint64_t)v64);
        }
        unint64_t v41 = *(void *)(v39 + 16);
        unint64_t v40 = *(void *)(v39 + 24);
        if (v41 >= v40 >> 1) {
          unint64_t v39 = sub_100309EC8(v40 > 1, v41 + 1, 1, v39);
        }
        *(void *)(v39 + 16) = v41 + 1;
        unint64_t v42 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
        uint64_t v64 = (void *)v39;
        unint64_t v43 = v39 + v42 + *(void *)(v58 + 72) * v41;
        uint64_t v26 = v67;
        v38(v43);
      }
      ++v28;
      unint64_t v27 = v62;
    }
    while (v25 != v28);
  }
  else
  {
    uint64_t v64 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease_n();
  uint64_t v44 = v64[2];
  if (v44)
  {
    v66[0] = _swiftEmptyArrayStorage;
    id v45 = v64;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v67 = *(void **)(v58 + 16);
    uint64_t v46 = (char *)v45 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
    uint64_t v63 = *(char **)(v58 + 72);
    id v47 = (void (**)(char *, void *))(v58 + 8);
    uint64_t v48 = v55;
    do
    {
      ((void (*)(char *, char *, void *))v67)(v48, v46, v26);
      Class v49 = UUID._bridgeToObjectiveC()().super.isa;
      id v50 = [v61 objectIDWithUUID:v49];

      (*v47)(v48, v26);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v46 = &v63[(void)v46];
      --v44;
    }
    while (v44);
    uint64_t v51 = v66[0];
    swift_bridgeObjectRelease();

    void *v56 = v51;
  }
  else
  {
    swift_bridgeObjectRelease();

    void *v56 = _swiftEmptyArrayStorage;
  }
}

void sub_1003AFBF4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003AFC14(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1003AFC34(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003AFC54(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1003AFC74(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 6:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003AFCD0(uint64_t a1, void *a2, Class a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  __chkstk_darwin(v8);
  uint64_t v56 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = _s10PredicatesOMa_3();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  Swift::String v15 = (char *)&v52 - v14;
  if (a1)
  {
    v62[0] = 0;
    id v16 = (id)a1;
    id v17 = [v16 remObjectIDWithError:v62];
    id v18 = v62[0];
    if (!v17)
    {
      unint64_t v41 = v62[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      goto LABEL_29;
    }
    id v19 = v17;
    uint64_t v54 = a1;
    uint64_t v55 = a2;
    *(void *)Swift::String v15 = v17;
    swift_storeEnumTagMultiPayload();
    id v20 = v18;
    id v60 = v19;
    uint64_t v21 = (void *)sub_100646F04();
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_10077A530;
    *(void *)(v22 + 32) = v16;
    v62[0] = (id)v22;
    specialized Array._endMutation()();
    id v23 = v16;
    sub_100094134(&qword_10090FF00);
    a1 = sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    sub_1000BFEAC((unint64_t *)&qword_10090FE58, &qword_10090FF00);
    sub_1001FF5BC();
    uint64_t v24 = Sequence.compactMapToSet<A>(_:)();
    uint64_t v4 = v3;
    sub_1002099D8(v24);
    swift_bridgeObjectRelease();
    sub_1000963CC(0, (unint64_t *)&unk_100910210);
    uint64_t v25 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v26 = [(id)swift_getObjCClassFromMetadata() entity];
    [v25 setEntity:v26];

    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v25 setAffectedStores:isa];

    [v25 setPredicate:v21];
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v12 = v15;
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = (void *)sub_100646F04();
    sub_1000963CC(0, (unint64_t *)&unk_100910210);
    id v29 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v30 = [(id)swift_getObjCClassFromMetadata() entity];
    [v29 setEntity:v30];

    uint64_t v54 = 0;
    uint64_t v55 = a2;
    if (a3)
    {
      sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
      a3 = Array._bridgeToObjectiveC()().super.isa;
    }
    uint64_t v25 = v29;
    [v29 setAffectedStores:a3];

    [v29 setPredicate:v28];
  }
  sub_1003B0A6C((uint64_t)v12, (uint64_t (*)(void))_s10PredicatesOMa_3);
  if (qword_100907AB0 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v31 = qword_100942608;
  if (!((unint64_t)qword_100942608 >> 62))
  {
    uint64_t v32 = *(void *)((qword_100942608 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    id v59 = v25;
    if (v32) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  id v59 = v25;
  if (!v32)
  {
LABEL_25:
    swift_bridgeObjectRelease();
LABEL_26:
    Class v42 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v16 = v59;
    [v59 setRelationshipKeyPathsForPrefetching:v42];

    if (qword_100907AB8 != -1) {
      swift_once();
    }
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    Class v43 = Array._bridgeToObjectiveC()().super.isa;
    [v16 setSortDescriptors:v43];

    sub_1000963CC(0, (unint64_t *)&unk_100910210);
    unint64_t v41 = v55;
    uint64_t v44 = NSManagedObjectContext.fetch<A>(_:)();
    a1 = v4;
    if (!v4)
    {
      uint64_t v31 = v44;
      if (qword_100907430 == -1)
      {
LABEL_31:
        uint64_t v45 = v58;
        uint64_t v46 = sub_10008E2DC(v58, (uint64_t)qword_100916CC0);
        uint64_t v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v46, v45);
        __chkstk_darwin(v47);
        v62[0] = (id)v31;
        __chkstk_darwin(v48);
        sub_100094134((uint64_t *)&unk_100921B00);
        sub_1000BFEAC((unint64_t *)&qword_100911190, (uint64_t *)&unk_100921B00);
        uint64_t v49 = Sequence.map<A>(skippingError:_:)();
        if (a1)
        {
          swift_errorRelease();

          unint64_t v41 = _swiftEmptyArrayStorage;
        }
        else
        {
          unint64_t v41 = (void *)v49;
        }
        (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
        swift_bridgeObjectRelease();
        return (uint64_t)v41;
      }
LABEL_37:
      swift_once();
      goto LABEL_31;
    }
LABEL_29:

    return (uint64_t)v41;
  }
LABEL_10:
  uint64_t v63 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v32 & ~(v32 >> 63), 0);
  if (v32 < 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v53 = v4;
  a1 = 0;
  uint64_t v25 = v63;
  id v60 = (id)(v31 & 0xC000000000000001);
  while (1)
  {
    if (v32 == a1)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v60)
    {
      uint64_t v33 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v33 = *(void *)(v31 + 8 * a1 + 32);
      swift_retain();
    }
    uint64_t v4 = v31;
    uint64_t v34 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v35) {
      break;
    }
    uint64_t v36 = v34;
    uint64_t v37 = v35;
    swift_release();
    uint64_t v63 = v25;
    unint64_t v39 = v25[2];
    unint64_t v38 = v25[3];
    if (v39 >= v38 >> 1)
    {
      sub_1001DE058(v38 > 1, v39 + 1, 1);
      uint64_t v25 = v63;
    }
    ++a1;
    v25[2] = v39 + 1;
    unint64_t v40 = &v25[2 * v39];
    v40[4] = v36;
    v40[5] = v37;
    uint64_t v31 = v4;
    if (v32 == a1)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v53;
      goto LABEL_26;
    }
  }
  v62[0] = 0;
  v62[1] = (id)0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v51._uint64_t object = (void *)0x80000001007CAF70;
  v51._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v51);
  uint64_t v61 = v33;
  sub_100094134(&qword_10090FF50);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003B0634(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, &qword_10090ABC0);
  uint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();
  if (!v2)
  {
    uint64_t v9 = v8;
    type metadata accessor for REMAccountStorageCDIngestor();
    v13[1] = swift_initStackObject();
    if (qword_100907430 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_10008E2DC(v4, (uint64_t)qword_100916CC0);
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
    v13[0] = v13;
    v13[5] = v9;
    __chkstk_darwin(v11);
    v13[-2] = v7;
    sub_100094134(&qword_100910070);
    sub_1000963CC(0, &qword_100910180);
    sub_1000BFEAC((unint64_t *)&qword_1009133E0, &qword_100910070);
    a2 = Sequence.map<A>(skippingError:_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return a2;
}

id sub_1003B08C0(unint64_t a1)
{
  if (qword_100907B10 != -1) {
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v2 = swift_retain();
    id v3 = sub_10034A86C(v2);
    swift_release();
    if (v3) {
      return v3;
    }
    id v4 = [self allCloudKitAccountsInContext:a1];
    sub_1000963CC(0, &qword_10090ABC0);
    a1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5)
      {
LABEL_12:
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v5) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      id v3 = v7;
      uint64_t v8 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      if (([v7 inactive] & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        return v3;
      }

      ++v6;
      if (v8 == v5) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_16:
    swift_once();
  }
}

uint64_t sub_1003B0A6C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_1003B0ACC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_1003AF29C(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1003B0AE8(uint64_t a1, uint64_t a2)
{
  return sub_1003E8BEC(a2, *(void *)(v2 + 16));
}

id sub_1003B0AF4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_1003AEE8C(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1003B0B10(uint64_t a1, uint64_t a2)
{
  return sub_1003EAF40(a2, *(void *)(v2 + 16));
}

const char *sub_1003B0B1C()
{
  return "daPushKey";
}

void sub_1003B0B28(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003B0B48(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1003B0B68()
{
  return "daSyncToken";
}

void sub_1003B0B74(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003B0B94(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1003B0BB4()
{
  return "effectiveMinimumSupportedAppVersion";
}

id sub_1003B0BC0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 effectiveMinimumSupportedAppVersion];
  *a2 = result;
  return result;
}

id sub_1003B0BF4(void *a1, id *a2)
{
  return [*a2 setEffectiveMinimumSupportedAppVersion:*a1];
}

const char *sub_1003B0C08()
{
  return "externalModificationTag";
}

void sub_1003B0C14(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003B0C34(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_1003B0C54@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 minimumSupportedAppVersion];
  *a2 = result;
  return result;
}

id sub_1003B0C88(void *a1, id *a2)
{
  return [*a2 setMinimumSupportedAppVersion:*a1];
}

void sub_1003B0C9C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003B0CBC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1003B0CDC()
{
  return "daAllowsCalendarAddDeleteModify";
}

id sub_1003B0CE8@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 daAllowsCalendarAddDeleteModify];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1003B0D1C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDaAllowsCalendarAddDeleteModify:*a1];
}

const char *sub_1003B0D30()
{
  return "daConstraintsDescriptionPath";
}

void sub_1003B0D3C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003B0D5C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1003B0D7C()
{
  return "daSupportsSharedCalendars";
}

id sub_1003B0D88@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 daSupportsSharedCalendars];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1003B0DBC(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDaSupportsSharedCalendars:*a1];
}

const char *sub_1003B0DD0()
{
  return "daWasMigrated";
}

id sub_1003B0DDC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 daWasMigrated];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1003B0E10(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDaWasMigrated:*a1];
}

const char *sub_1003B0E24()
{
  return "debugSyncDisabled";
}

id sub_1003B0E30@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 debugSyncDisabled];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1003B0E64(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDebugSyncDisabled:*a1];
}

const char *sub_1003B0E78()
{
  return "didChooseToMigrate";
}

id sub_1003B0E84@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 didChooseToMigrate];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1003B0EB8(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDidChooseToMigrate:*a1];
}

const char *sub_1003B0ECC()
{
  return "didChooseToMigrateLocally";
}

id sub_1003B0ED8@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 didChooseToMigrateLocally];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1003B0F0C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDidChooseToMigrateLocally:*a1];
}

const char *sub_1003B0F20()
{
  return "didFinishMigration";
}

id sub_1003B0F2C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 didFinishMigration];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1003B0F60(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDidFinishMigration:*a1];
}

const char *sub_1003B0F74()
{
  return "listIDsMergeableOrdering_v2";
}

void sub_1003B0F80(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003B0FA0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1003B0FC0()
{
  return "persistenceCloudSchemaVersion";
}

id sub_1003B0FCC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 persistenceCloudSchemaVersion];
  *a2 = result;
  return result;
}

id sub_1003B1000(void *a1, id *a2)
{
  return [*a2 setPersistenceCloudSchemaVersion:*a1];
}

const char *sub_1003B101C()
{
  return "personIDSalt_v1";
}

unsigned char *_s16AccountSortOrderOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *id result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003B10FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s16AccountSortOrderOMa()
{
  return &_s16AccountSortOrderON;
}

unint64_t sub_1003B1138()
{
  unint64_t result = qword_100916CE0;
  if (!qword_100916CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100916CE0);
  }
  return result;
}

uint64_t sub_1003B118C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v50 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (void *)sub_1002329F4(a1, 0x40u);
  id v8 = [objc_allocWithZone((Class)NSFetchRequest) init];
  sub_1000963CC(0, &qword_100910E00);
  id v9 = [(id)swift_getObjCClassFromMetadata() entity];
  [v8 setEntity:v9];

  [v8 setAffectedStores:0];
  [v8 setPredicate:v7];
  [v8 setResultType:2];

  uint64_t v49 = sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  long long v48 = xmmword_10077A530;
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)&long long v56 = inited;
  specialized Array._endMutation()();
  uint64_t v11 = v56;
  *(void *)&v55[0] = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 1, 0);
  uint64_t v12 = *(void *)&v55[0];
  uint64_t v47 = v4;
  uint64_t v13 = v8;
  if ((v11 & 0xC000000000000001) != 0)
  {
    int64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    int64_t v14 = *(void *)(v11 + 32);
    swift_retain();
  }
  uint64_t v15 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v16)
  {
    uint64_t v17 = v15;
    uint64_t v18 = v16;
    uint64_t v57 = &type metadata for String;
    swift_release();
    *(void *)&long long v56 = v17;
    *((void *)&v56 + 1) = v18;
    unint64_t v20 = *(void *)(v12 + 16);
    unint64_t v19 = *(void *)(v12 + 24);
    int64_t v14 = v20 + 1;
    if (v20 >= v19 >> 1)
    {
LABEL_39:
      sub_1001DE1C4(v19 > 1, v14, 1);
      uint64_t v12 = *(void *)&v55[0];
    }
    *(void *)(v12 + 16) = v14;
    sub_10009A1A0(&v56, (_OWORD *)(v12 + 32 * v20 + 32));
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    [v13 setPropertiesToFetch:isa];

    sub_1000963CC(0, &qword_10090E4F0);
    unint64_t v22 = NSManagedObjectContext.fetch<A>(_:)();
    if (v2)
    {
    }
    else
    {
      unint64_t v20 = v22;
      id v46 = v13;
      uint64_t v58 = _swiftEmptyDictionarySingleton;
      if (v22 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      v45[1] = 0;
      if (v23)
      {
        unint64_t v54 = v20 & 0xC000000000000001;
        uint64_t v13 = _swiftEmptyDictionarySingleton;
        uint64_t v2 = 4;
        uint64_t v52 = v23;
        unint64_t v53 = 0x8000000100789670;
        int64_t v14 = (int64_t)&qword_100908190;
        Swift::String v51 = (char *)&type metadata for Any + 8;
        while (1)
        {
          if (v54) {
            id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v25 = *(id *)(v20 + 8 * v2);
          }
          id v26 = v25;
          uint64_t v27 = v2 - 3;
          if (__OFADD__(v2 - 4, 1))
          {
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
          NSString v28 = String._bridgeToObjectiveC()();
          id v29 = [v26 valueForKey:v28];

          if (v29)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            memset(v55, 0, sizeof(v55));
          }
          sub_100096408((uint64_t)v55, (uint64_t)&v56, &qword_100908190);
          if (v57)
          {
            uint64_t v30 = type metadata accessor for UUID();
            int v31 = swift_dynamicCast();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v6, v31 ^ 1u, 1, v30);
          }
          else
          {
            sub_1000966BC((uint64_t)&v56, &qword_100908190);
            uint64_t v32 = type metadata accessor for UUID();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v6, 1, 1, v32);
          }
          unint64_t v34 = sub_10030768C((uint64_t)v6);
          unint64_t v19 = v13[2];
          BOOL v35 = (v33 & 1) == 0;
          uint64_t v36 = v19 + v35;
          if (__OFADD__(v19, v35)) {
            goto LABEL_37;
          }
          int64_t v14 = v33;
          if (v13[3] < v36)
          {
            sub_1003126C4(v36, 1);
            uint64_t v13 = v58;
            unint64_t v37 = sub_10030768C((uint64_t)v6);
            if ((v14 & 1) != (v38 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              goto LABEL_42;
            }
            unint64_t v34 = v37;
          }
          if (v14)
          {
            sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
            uint64_t v13 = v58;
            uint64_t v24 = (void *)(v58[7] + 8 * v34);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
            uint64_t v39 = swift_allocObject();
            *(_OWORD *)(v39 + 16) = v48;
            *(void *)(v39 + 32) = v26;
            *(void *)&long long v56 = v39;
            specialized Array._endMutation()();
            uint64_t v40 = v56;
            v13[(v34 >> 6) + 8] |= 1 << v34;
            sub_100096408((uint64_t)v6, v13[6] + *(void *)(v50 + 72) * v34, (uint64_t *)&unk_100909E50);
            *(void *)(v13[7] + 8 * v34) = v40;
            uint64_t v41 = v13[2];
            BOOL v42 = __OFADD__(v41, 1);
            unint64_t v19 = v41 + 1;
            if (v42) {
              goto LABEL_38;
            }
            v13[2] = v19;
          }
          int64_t v14 = (int64_t)&qword_100908190;
          ++v2;
          if (v27 == v52) {
            goto LABEL_34;
          }
        }
      }
      uint64_t v13 = _swiftEmptyDictionarySingleton;
LABEL_34:

      swift_bridgeObjectRelease();
    }
    return (uint64_t)v13;
  }
  else
  {
LABEL_42:
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v44._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v44._uint64_t object = (void *)0x80000001007CAF70;
    String.append(_:)(v44);
    uint64_t v58 = (void *)v14;
    sub_100094134(&qword_100913980);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1003B18D4(void *a1, unint64_t a2)
{
  unint64_t v75 = a2;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v70 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v6 = (void *)sub_100231588(a1, 0x20u);
  id v7 = [objc_allocWithZone((Class)NSFetchRequest) init];
  sub_1000963CC(0, &qword_100910E10);
  id v8 = [(id)swift_getObjCClassFromMetadata() entity];
  [v7 setEntity:v8];

  [v7 setAffectedStores:0];
  [v7 setPredicate:v6];
  uint64_t v68 = v7;
  [v7 setResultType:2];

  uint64_t v72 = sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077DE90;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)(inited + 48) = swift_getKeyPath();
  *(void *)&long long v79 = inited;
  specialized Array._endMutation()();
  unint64_t v10 = v79;
  unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v81 = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 3, 0);
  uint64_t v12 = v81;
  unint64_t v13 = v10 & 0xC000000000000001;
  v67[2] = v3;
  if ((v10 & 0xC000000000000001) != 0)
  {
    int64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    int64_t v14 = *(void *)(v10 + 32);
    swift_retain();
  }
  uint64_t v15 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v16) {
    goto LABEL_60;
  }
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  unint64_t v19 = &type metadata for String;
  uint64_t v80 = &type metadata for String;
  swift_release();
  *(void *)&long long v79 = v17;
  *((void *)&v79 + 1) = v18;
  unint64_t v21 = v12[2];
  unint64_t v20 = v12[3];
  int64_t v14 = v21 + 1;
  if (v21 >= v20 >> 1)
  {
LABEL_57:
    sub_1001DE1C4(v20 > 1, v14, 1);
    uint64_t v12 = v81;
  }
  v12[2] = v14;
  sub_10009A1A0(&v79, &v12[4 * v21 + 4]);
  if (v13)
  {
    int64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    int64_t v14 = *(void *)(v10 + 40);
    swift_retain();
  }
  uint64_t v22 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v23) {
    goto LABEL_60;
  }
  uint64_t v24 = v22;
  uint64_t v25 = v23;
  uint64_t v80 = v19;
  swift_release();
  *(void *)&long long v79 = v24;
  *((void *)&v79 + 1) = v25;
  uint64_t v81 = v12;
  unint64_t v27 = v12[2];
  unint64_t v26 = v12[3];
  if (v27 >= v26 >> 1)
  {
    sub_1001DE1C4(v26 > 1, v27 + 1, 1);
    uint64_t v12 = v81;
  }
  v12[2] = v27 + 1;
  sub_10009A1A0(&v79, &v12[4 * v27 + 4]);
  if (v13)
  {
    int64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    int64_t v14 = *(void *)(v10 + 48);
    swift_retain();
  }
  uint64_t v28 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v29)
  {
LABEL_60:
    *(void *)&v77[0] = 0;
    *((void *)&v77[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v65._uint64_t object = (void *)0x80000001007CAF70;
    v65._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v65);
    int64_t v78 = v14;
    sub_100094134(&qword_100913B78);
    _print_unlocked<A, B>(_:_:)();
LABEL_62:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v30 = v28;
  uint64_t v31 = v29;
  uint64_t v80 = v19;
  swift_release();
  *(void *)&long long v79 = v30;
  *((void *)&v79 + 1) = v31;
  uint64_t v81 = v12;
  unint64_t v33 = v12[2];
  unint64_t v32 = v12[3];
  if (v33 >= v32 >> 1)
  {
    sub_1001DE1C4(v32 > 1, v33 + 1, 1);
    uint64_t v12 = v81;
  }
  v12[2] = v33 + 1;
  sub_10009A1A0(&v79, &v12[4 * v33 + 4]);
  swift_bridgeObjectRelease();
  uint64_t v34 = swift_initStackObject();
  long long v69 = xmmword_10077A530;
  *(_OWORD *)(v34 + 16) = xmmword_10077A530;
  *(void *)(v34 + 32) = swift_getKeyPath();
  *(void *)&long long v79 = v34;
  specialized Array._endMutation()();
  uint64_t v35 = v79;
  *(void *)&v77[0] = v11;
  sub_1001DE1C4(0, 1, 0);
  uint64_t v36 = *(void *)&v77[0];
  if ((v35 & 0xC000000000000001) != 0)
  {
    uint64_t v37 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v37 = *(void *)(v35 + 32);
    swift_retain();
  }
  uint64_t v38 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v39)
  {
    *(void *)&long long v79 = 0;
    *((void *)&v79 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v66._uint64_t object = (void *)0x80000001007CAF70;
    v66._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v66);
    uint64_t v81 = (void *)v37;
    sub_100094134(&qword_100913980);
    _print_unlocked<A, B>(_:_:)();
    goto LABEL_62;
  }
  uint64_t v40 = v38;
  uint64_t v41 = v39;
  uint64_t v80 = v19;
  swift_release();
  *(void *)&long long v79 = v40;
  *((void *)&v79 + 1) = v41;
  unint64_t v43 = *(void *)(v36 + 16);
  unint64_t v42 = *(void *)(v36 + 24);
  if (v43 >= v42 >> 1)
  {
    sub_1001DE1C4(v42 > 1, v43 + 1, 1);
    uint64_t v36 = *(void *)&v77[0];
  }
  *(void *)(v36 + 16) = v43 + 1;
  sub_10009A1A0(&v79, (_OWORD *)(v36 + 32 * v43 + 32));
  swift_bridgeObjectRelease();
  *(void *)&long long v79 = v12;
  sub_100200B74(v36);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v10 = (unint64_t)v68;
  [v68 setPropertiesToFetch:isa];

  sub_1000963CC(0, &qword_10090E4F0);
  unint64_t v45 = v76;
  unint64_t v46 = NSManagedObjectContext.fetch<A>(_:)();
  if (v45)
  {
  }
  else
  {
    unint64_t v13 = v46;
    uint64_t v81 = _swiftEmptyDictionarySingleton;
    if (v46 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v11 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v67[1] = 0;
    if (v11)
    {
      unint64_t v76 = v13 & 0xC000000000000001;
      unint64_t v10 = (unint64_t)_swiftEmptyDictionarySingleton;
      int64_t v14 = 4;
      unint64_t v75 = 0xD000000000000019;
      unint64_t v74 = 0x8000000100789670;
      uint64_t v71 = (char *)&type metadata for Any + 8;
      uint64_t v73 = (void *)v11;
      while (1)
      {
        if (v76) {
          id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v48 = *(id *)(v13 + 8 * v14);
        }
        unint64_t v21 = (unint64_t)v48;
        unint64_t v19 = (void *)(v14 - 3);
        if (__OFADD__(v14 - 4, 1))
        {
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
        NSString v49 = String._bridgeToObjectiveC()();
        id v50 = [(id)v21 valueForKey:v49];

        if (v50)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v77, 0, sizeof(v77));
        }
        sub_100096408((uint64_t)v77, (uint64_t)&v79, &qword_100908190);
        if (v80)
        {
          uint64_t v51 = type metadata accessor for UUID();
          int v52 = swift_dynamicCast();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v5, v52 ^ 1u, 1, v51);
        }
        else
        {
          sub_1000966BC((uint64_t)&v79, &qword_100908190);
          uint64_t v53 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v5, 1, 1, v53);
        }
        unint64_t v11 = sub_10030768C((uint64_t)v5);
        unint64_t v20 = *(void *)(v10 + 16);
        BOOL v55 = (v54 & 1) == 0;
        uint64_t v56 = v20 + v55;
        if (__OFADD__(v20, v55)) {
          goto LABEL_55;
        }
        char v57 = v54;
        if (*(void *)(v10 + 24) < v56)
        {
          sub_1003126C4(v56, 1);
          unint64_t v10 = (unint64_t)v81;
          unint64_t v58 = sub_10030768C((uint64_t)v5);
          if ((v57 & 1) != (v59 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            goto LABEL_60;
          }
          unint64_t v11 = v58;
        }
        if (v57)
        {
          sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909E50);
          unint64_t v10 = (unint64_t)v81;
          uint64_t v47 = (void *)(v81[7] + 8 * v11);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v11 = *(void *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v11 >= *(void *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          uint64_t v60 = swift_allocObject();
          *(_OWORD *)(v60 + 16) = v69;
          *(void *)(v60 + 32) = v21;
          *(void *)&long long v79 = v60;
          specialized Array._endMutation()();
          uint64_t v61 = v79;
          *(void *)(v10 + 8 * (v11 >> 6) + 64) |= 1 << v11;
          sub_100096408((uint64_t)v5, *(void *)(v10 + 48) + *(void *)(v70 + 72) * v11, (uint64_t *)&unk_100909E50);
          *(void *)(*(void *)(v10 + 56) + 8 * v11) = v61;
          uint64_t v62 = *(void *)(v10 + 16);
          BOOL v63 = __OFADD__(v62, 1);
          unint64_t v20 = v62 + 1;
          if (v63) {
            goto LABEL_56;
          }
          *(void *)(v10 + 16) = v20;
        }
        ++v14;
        if (v19 == v73) {
          goto LABEL_52;
        }
      }
    }
    unint64_t v10 = (unint64_t)_swiftEmptyDictionarySingleton;
LABEL_52:

    swift_bridgeObjectRelease();
  }
  return v10;
}

const char *sub_1003B2334()
{
  return "contactLabel";
}

void sub_1003B2340(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003B2360(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1003B2388()
{
  return "proximity";
}

id sub_1003B2394@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 proximity];
  *a2 = (_WORD)result;
  return result;
}

id sub_1003B23C8(__int16 *a1, id *a2)
{
  return [*a2 setProximity:*a1];
}

id sub_1003B23E4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 reminder];
  *a2 = result;
  return result;
}

id sub_1003B2420(void *a1, id *a2)
{
  return [*a2 setReminder:*a1];
}

Class sub_1003B243C(unint64_t a1)
{
  unint64_t v88 = a1;
  uint64_t v80 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v83 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v2 = (char *)v79 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = (void *)sub_100231588((void *)4, 0xA0u);
  id v4 = [objc_allocWithZone((Class)NSFetchRequest) init];
  sub_1000963CC(0, &qword_100910E10);
  id v5 = [(id)swift_getObjCClassFromMetadata() entity];
  [v4 setEntity:v5];

  [v4 setAffectedStores:0];
  [v4 setPredicate:v3];
  id v81 = v4;
  [v4 setResultType:2];

  uint64_t v85 = sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1007895E0;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)(inited + 48) = swift_getKeyPath();
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)&long long v91 = inited;
  specialized Array._endMutation()();
  uint64_t v7 = v91;
  v90[0] = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 4, 0);
  uint64_t v8 = 0;
  unint64_t v9 = v90[0];
  unint64_t v10 = (unint64_t)&type metadata for String;
  do
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      unint64_t v11 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      unint64_t v11 = *(objc_class **)(v7 + 8 * v8 + 32);
      swift_retain();
    }
    uint64_t v12 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v13)
    {
      *(void *)&long long v91 = 0;
      *((void *)&v91 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v75._uint64_t object = (void *)0x80000001007CAF70;
      v75._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v75);
      uint64_t v93 = v11;
      unint64_t v76 = &qword_100913B78;
LABEL_68:
      sub_100094134(v76);
      _print_unlocked<A, B>(_:_:)();
      goto LABEL_69;
    }
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    uint64_t v92 = &type metadata for String;
    swift_release();
    *(void *)&long long v91 = v14;
    *((void *)&v91 + 1) = v15;
    v90[0] = v9;
    unint64_t v17 = *(void *)(v9 + 16);
    unint64_t v16 = *(void *)(v9 + 24);
    if (v17 >= v16 >> 1)
    {
      sub_1001DE1C4(v16 > 1, v17 + 1, 1);
      unint64_t v9 = v90[0];
    }
    ++v8;
    *(void *)(v9 + 16) = v17 + 1;
    sub_10009A1A0(&v91, (_OWORD *)(v9 + 32 * v17 + 32));
  }
  while (v8 != 4);
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_initStackObject();
  long long v87 = xmmword_10077B710;
  *(_OWORD *)(v18 + 16) = xmmword_10077B710;
  *(void *)(v18 + 32) = swift_getKeyPath();
  *(void *)(v18 + 40) = swift_getKeyPath();
  *(void *)&long long v91 = v18;
  specialized Array._endMutation()();
  Class v19 = (Class)v91;
  uint64_t v93 = (objc_class *)_swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 2, 0);
  uint64_t v20 = (uint64_t)v93;
  unint64_t v21 = (unint64_t)v19 & 0xC000000000000001;
  if (((unint64_t)v19 & 0xC000000000000001) != 0)
  {
    unint64_t v11 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    unint64_t v11 = (objc_class *)*((void *)v19 + 4);
    swift_retain();
  }
  uint64_t v22 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v23) {
    goto LABEL_71;
  }
  uint64_t v24 = v22;
  uint64_t v25 = v23;
  uint64_t v92 = &type metadata for String;
  swift_release();
  *(void *)&long long v91 = v24;
  *((void *)&v91 + 1) = v25;
  unint64_t v27 = *(void *)(v20 + 16);
  unint64_t v26 = *(void *)(v20 + 24);
  unint64_t v11 = (objc_class *)(v27 + 1);
  if (v27 >= v26 >> 1) {
    goto LABEL_65;
  }
  while (1)
  {
    *(void *)(v20 + 16) = v11;
    sub_10009A1A0(&v91, (_OWORD *)(v20 + 32 * v27 + 32));
    if (v21)
    {
      unint64_t v11 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      unint64_t v11 = (objc_class *)*((void *)v19 + 5);
      swift_retain();
    }
    uint64_t v28 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    id v30 = v81;
    if (!v29) {
      goto LABEL_71;
    }
    uint64_t v31 = v28;
    uint64_t v32 = v29;
    uint64_t v92 = (void *)v10;
    swift_release();
    *(void *)&long long v91 = v31;
    *((void *)&v91 + 1) = v32;
    uint64_t v93 = (objc_class *)v20;
    unint64_t v34 = *(void *)(v20 + 16);
    unint64_t v33 = *(void *)(v20 + 24);
    if (v34 >= v33 >> 1)
    {
      sub_1001DE1C4(v33 > 1, v34 + 1, 1);
      uint64_t v20 = (uint64_t)v93;
    }
    *(void *)(v20 + 16) = v34 + 1;
    sub_10009A1A0(&v91, (_OWORD *)(v20 + 32 * v34 + 32));
    swift_bridgeObjectRelease();
    *(void *)&long long v91 = v9;
    sub_100200B74(v20);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v30 setPropertiesToFetch:isa];

    uint64_t v36 = swift_initStackObject();
    *(_OWORD *)(v36 + 16) = v87;
    *(void *)(v36 + 32) = swift_getKeyPath();
    *(void *)(v36 + 40) = swift_getKeyPath();
    *(void *)&long long v91 = v36;
    specialized Array._endMutation()();
    uint64_t v37 = v91;
    v90[0] = _swiftEmptyArrayStorage;
    sub_1001DE058(0, 2, 0);
    uint64_t v38 = v90[0];
    if ((v37 & 0xC000000000000001) != 0)
    {
      unint64_t v11 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      unint64_t v11 = *(objc_class **)(v37 + 32);
      swift_retain();
    }
    uint64_t v39 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v40) {
      goto LABEL_72;
    }
    uint64_t v41 = v39;
    uint64_t v42 = v40;
    swift_release();
    unint64_t v44 = *(void *)(v38 + 16);
    unint64_t v43 = *(void *)(v38 + 24);
    if (v44 >= v43 >> 1)
    {
      sub_1001DE058(v43 > 1, v44 + 1, 1);
      uint64_t v38 = v90[0];
    }
    *(void *)(v38 + 16) = v44 + 1;
    uint64_t v45 = v38 + 16 * v44;
    *(void *)(v45 + 32) = v41;
    *(void *)(v45 + 40) = v42;
    if ((v37 & 0xC000000000000001) != 0)
    {
      unint64_t v11 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      unint64_t v11 = *(objc_class **)(v37 + 40);
      swift_retain();
    }
    uint64_t v46 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v47)
    {
LABEL_72:
      *(void *)&long long v91 = 0;
      *((void *)&v91 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v78._uint64_t object = (void *)0x80000001007CAF70;
      v78._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v78);
      uint64_t v93 = v11;
      unint64_t v76 = &qword_100913980;
      goto LABEL_68;
    }
    uint64_t v48 = v46;
    uint64_t v49 = v47;
    swift_release();
    v90[0] = v38;
    unint64_t v51 = *(void *)(v38 + 16);
    unint64_t v50 = *(void *)(v38 + 24);
    if (v51 >= v50 >> 1)
    {
      sub_1001DE058(v50 > 1, v51 + 1, 1);
      uint64_t v38 = v90[0];
    }
    *(void *)(v38 + 16) = v51 + 1;
    uint64_t v52 = v38 + 16 * v51;
    *(void *)(v52 + 32) = v48;
    *(void *)(v52 + 40) = v49;
    swift_bridgeObjectRelease();
    Class v19 = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    id v53 = v81;
    [v81 setRelationshipKeyPathsForPrefetching:v19];

    sub_1000963CC(0, &qword_10090E4F0);
    unint64_t v54 = v89;
    unint64_t v55 = NSManagedObjectContext.fetch<A>(_:)();
    if (v54)
    {

      return v19;
    }
    unint64_t v10 = v55;
    uint64_t v93 = (objc_class *)_swiftEmptyDictionarySingleton;
    if (v55 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v56 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v79[1] = 0;
    if (!v56) {
      break;
    }
    unint64_t v89 = v10 & 0xC000000000000001;
    Class v19 = (Class)_swiftEmptyDictionarySingleton;
    unint64_t v21 = 4;
    unint64_t v88 = 0xD000000000000019;
    *(void *)&long long v87 = 0x8000000100789670;
    unint64_t v27 = (unint64_t)&qword_100908190;
    long long v82 = xmmword_10077A530;
    uint64_t v84 = (char *)&type metadata for Any + 8;
    uint64_t v86 = v56;
    while (1)
    {
      unint64_t v58 = v89
          ? (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (objc_class *)*(id *)(v10 + 8 * v21);
      unint64_t v11 = v58;
      unint64_t v9 = v21 - 3;
      if (__OFADD__(v21 - 4, 1)) {
        break;
      }
      NSString v59 = String._bridgeToObjectiveC()();
      id v60 = [(objc_class *)v11 valueForKey:v59];

      if (v60)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v90, 0, 32);
      }
      sub_100096408((uint64_t)v90, (uint64_t)&v91, &qword_100908190);
      if (v92)
      {
        uint64_t v61 = type metadata accessor for UUID();
        int v62 = swift_dynamicCast();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v2, v62 ^ 1u, 1, v61);
      }
      else
      {
        sub_1000966BC((uint64_t)&v91, &qword_100908190);
        uint64_t v63 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v2, 1, 1, v63);
      }
      unint64_t v27 = sub_10030768C((uint64_t)v2);
      unint64_t v26 = *((void *)v19 + 2);
      BOOL v65 = (v64 & 1) == 0;
      uint64_t v66 = v26 + v65;
      if (__OFADD__(v26, v65)) {
        goto LABEL_63;
      }
      char v67 = v64;
      if (*((void *)v19 + 3) < v66)
      {
        sub_1003126C4(v66, 1);
        Class v19 = v93;
        unint64_t v68 = sub_10030768C((uint64_t)v2);
        if ((v67 & 1) != (v69 & 1))
        {
          while (1)
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
LABEL_71:
            v90[0] = 0;
            v90[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(46);
            v77._uint64_t object = (void *)0x80000001007CAF70;
            v77._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
            String.append(_:)(v77);
            v90[10] = v11;
            sub_100094134(&qword_100913980);
            _print_unlocked<A, B>(_:_:)();
LABEL_69:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
        }
        unint64_t v27 = v68;
      }
      if (v67)
      {
        sub_1000966BC((uint64_t)v2, (uint64_t *)&unk_100909E50);
        Class v19 = v93;
        char v57 = (void *)(*((void *)v93 + 7) + 8 * v27);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v57 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v57 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        uint64_t v70 = swift_allocObject();
        *(_OWORD *)(v70 + 16) = v82;
        *(void *)(v70 + 32) = v11;
        *(void *)&long long v91 = v70;
        specialized Array._endMutation()();
        uint64_t v71 = v91;
        *((void *)v19 + (v27 >> 6) + 8) |= 1 << v27;
        sub_100096408((uint64_t)v2, *((void *)v19 + 6) + *(void *)(v83 + 72) * v27, (uint64_t *)&unk_100909E50);
        *(void *)(*((void *)v19 + 7) + 8 * v27) = v71;
        uint64_t v72 = *((void *)v19 + 2);
        BOOL v73 = __OFADD__(v72, 1);
        unint64_t v26 = v72 + 1;
        if (v73) {
          goto LABEL_64;
        }
        *((void *)v19 + 2) = v26;
      }
      unint64_t v27 = (unint64_t)&qword_100908190;
      ++v21;
      if (v9 == v86) {
        goto LABEL_60;
      }
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    sub_1001DE1C4(v26 > 1, (int64_t)v11, 1);
    uint64_t v20 = (uint64_t)v93;
  }
  Class v19 = (Class)_swiftEmptyDictionarySingleton;
LABEL_60:

  swift_bridgeObjectRelease();
  return v19;
}

const char *sub_1003B30C0()
{
  return "latitude";
}

id sub_1003B30CC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 latitude];
  *a2 = v4;
  return result;
}

id sub_1003B3100(double *a1, id *a2)
{
  return [*a2 setLatitude:*a1];
}

const char *sub_1003B3114()
{
  return "longitude";
}

id sub_1003B3120@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 longitude];
  *a2 = v4;
  return result;
}

id sub_1003B3154(double *a1, id *a2)
{
  return [*a2 setLongitude:*a1];
}

const char *sub_1003B3168()
{
  return "radius";
}

id sub_1003B3174@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 radius];
  *a2 = v4;
  return result;
}

id sub_1003B31A8(double *a1, id *a2)
{
  return [*a2 setRadius:*a1];
}

const char *sub_1003B31BC()
{
  return "locationUID";
}

void sub_1003B31C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003B31E8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1003B3238(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1003B3260(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1003B328C(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
}

char *sub_1003B32C8(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v6 = sub_100094134(&qword_100916EC8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMListPickerDataView.Model.Account();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v33 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v30 = (char *)v25 - v13;
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v15 = *(void *)(type metadata accessor for REMAccountsListDataView.Model.Account() - 8);
  uint64_t v16 = v10;
  uint64_t v17 = a3 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v27 = v16;
  uint64_t v32 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v31 = *(void *)(v15 + 72);
  v25[1] = a3;
  swift_bridgeObjectRetain();
  Class v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v28 = v9;
  uint64_t v29 = a1;
  unint64_t v26 = v18;
  do
  {
    a1(v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((*v18)(v8, 1, v9) == 1)
    {
      sub_1000966BC((uint64_t)v8, &qword_100916EC8);
    }
    else
    {
      uint64_t v20 = *v32;
      unint64_t v21 = v30;
      (*v32)(v30, v8, v9);
      v20(v33, v21, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Class v19 = (char *)sub_1003092B4(0, *((void *)v19 + 2) + 1, 1, (unint64_t)v19);
      }
      unint64_t v23 = *((void *)v19 + 2);
      unint64_t v22 = *((void *)v19 + 3);
      if (v23 >= v22 >> 1) {
        Class v19 = (char *)sub_1003092B4(v22 > 1, v23 + 1, 1, (unint64_t)v19);
      }
      *((void *)v19 + 2) = v23 + 1;
      uint64_t v9 = v28;
      v20(&v19[((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v23], v33, v28);
      a1 = v29;
      uint64_t v18 = v26;
    }
    v17 += v31;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v19;
}

void *sub_1003B3604(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  void (*v19)(uint64_t *__return_ptr, void *);

  Class v19 = a1;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = (uint64_t *)(a3 + 40);
  uint64_t v8 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v10 = *v7;
    v18[0] = *(v7 - 1);
    v18[1] = v10;
    swift_bridgeObjectRetain();
    v19(&v16, v18);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v17;
    if (v17)
    {
      uint64_t v12 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_100308F88(0, v8[2] + 1, 1, v8);
      }
      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1) {
        uint64_t v8 = sub_100308F88((void *)(v13 > 1), v14 + 1, 1, v8);
      }
      void v8[2] = v14 + 1;
      uint64_t v9 = &v8[2 * v14];
      v9[4] = v12;
      v9[5] = v11;
    }
    v7 += 2;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_1003B3768(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
}

void sub_1003B37B0(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
}

void sub_1003B37EC(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v9 = v6;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v34 = a4;
  uint64_t v11 = sub_100094134(a4);
  __chkstk_darwin(v11 - 8);
  unint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = a3;
  uint64_t v15 = (void *)sub_100094134(a5);
  uint64_t v35 = *(v15 - 1);
  __chkstk_darwin(v15);
  uint64_t v39 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v33 = (char *)&v30 - v18;
  if (a3 >> 62) {
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v19; uint64_t v19 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v31 = (uint64_t (*)(BOOL, uint64_t, uint64_t))a6;
    uint64_t v37 = (unsigned int (**)(char *, uint64_t, void *))(v35 + 48);
    unint64_t v38 = v14 & 0xC000000000000001;
    uint64_t v36 = v35 + 32;
    uint64_t v42 = v15;
    unint64_t v43 = _swiftEmptyArrayStorage;
    a6 = 4;
    unint64_t v32 = v14;
    uint64_t v20 = (void (**)(char *, char *, void *))(v35 + 32);
    while (1)
    {
      unint64_t v21 = v38 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v14 + 8 * a6);
      uint64_t v15 = v21;
      uint64_t v22 = a6 - 3;
      if (__OFADD__(a6 - 4, 1)) {
        break;
      }
      id v44 = v21;
      v40(&v44);
      if (v9)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

      unint64_t v23 = v42;
      if ((*v37)(v13, 1, v42) == 1)
      {
        sub_1000966BC((uint64_t)v13, v34);
      }
      else
      {
        uint64_t v24 = *v20;
        uint64_t v25 = v33;
        (*v20)(v33, v13, v23);
        v24(v39, v25, v23);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v26 = (uint64_t)v43;
        }
        else {
          uint64_t v26 = v31(0, v43[2] + 1, 1);
        }
        unint64_t v28 = *(void *)(v26 + 16);
        unint64_t v27 = *(void *)(v26 + 24);
        if (v28 >= v27 >> 1) {
          uint64_t v26 = v31(v27 > 1, v28 + 1, 1);
        }
        *(void *)(v26 + 16) = v28 + 1;
        unint64_t v29 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
        unint64_t v43 = (void *)v26;
        v24((char *)(v26 + v29 + *(void *)(v35 + 72) * v28), v39, v42);
        unint64_t v14 = v32;
      }
      ++a6;
      if (v22 == v19) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
LABEL_22:
  swift_bridgeObjectRelease();
}

char *sub_1003B3B88(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v6 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v33 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v30 = (char *)v25 - v13;
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v15 = *(void *)(sub_100094134(&qword_100916E10) - 8);
  uint64_t v16 = v10;
  uint64_t v17 = a3 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v27 = v16;
  unint64_t v32 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v31 = *(void *)(v15 + 72);
  v25[1] = a3;
  swift_bridgeObjectRetain();
  uint64_t v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v28 = v9;
  unint64_t v29 = a1;
  uint64_t v26 = v18;
  do
  {
    a1(v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((*v18)(v8, 1, v9) == 1)
    {
      sub_1000966BC((uint64_t)v8, &qword_10090FD78);
    }
    else
    {
      uint64_t v20 = *v32;
      unint64_t v21 = v30;
      (*v32)(v30, v8, v9);
      v20(v33, v21, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = (char *)sub_1003091E4(0, *((void *)v19 + 2) + 1, 1, (unint64_t)v19);
      }
      unint64_t v23 = *((void *)v19 + 2);
      unint64_t v22 = *((void *)v19 + 3);
      if (v23 >= v22 >> 1) {
        uint64_t v19 = (char *)sub_1003091E4(v22 > 1, v23 + 1, 1, (unint64_t)v19);
      }
      *((void *)v19 + 2) = v23 + 1;
      uint64_t v9 = v28;
      v20(&v19[((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v23], v33, v28);
      a1 = v29;
      uint64_t v18 = v26;
    }
    v17 += v31;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v19;
}

void *sub_1003B3EC8(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2)
{
  void (*v40)(uint64_t *__return_ptr, uint64_t *);
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  uint64_t v40 = a1;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100910990);
  uint64_t v6 = *(void **)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100916EE0);
  uint64_t v10 = v9 - 8;
  __n128 v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v6;
  uint64_t v15 = (void (*)(char *, char *, uint64_t))v6[2];
  uint64_t v14 = v6 + 2;
  unint64_t v38 = v15;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v15)(v8, v2, v5, v11);
  sub_1003CC2B0(&qword_100911F50);
  uint64_t v39 = v8;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v16 = &v13[*(int *)(v10 + 44)];
  sub_1003CC2B0(&qword_100916EF0);
  uint64_t v17 = *(void *)v16;
  dispatch thunk of Collection.endIndex.getter();
  if (v17 == v42)
  {
    uint64_t v41 = _swiftEmptyArrayStorage;
LABEL_3:
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100916EE0);
  }
  else
  {
    uint64_t v36 = (void (**)(char *, uint64_t))(v41 + 1);
    uint64_t v37 = v14;
    uint64_t v41 = _swiftEmptyArrayStorage;
    uint64_t v34 = v13;
    uint64_t v35 = a2;
    unint64_t v33 = v16;
    while (1)
    {
      unint64_t v21 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v23 = *v22;
      v21(&v42, 0);
      uint64_t v24 = v39;
      v38(v39, v13, v5);
      dispatch thunk of Collection.formIndex(after:)();
      (*v36)(v24, v5);
      uint64_t v46 = v23;
      v40(&v42, &v46);
      if (v3) {
        break;
      }
      uint64_t v25 = v43;
      if (v43)
      {
        uint64_t v26 = v42;
        uint64_t v27 = v44;
        uint64_t v28 = v45;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v41 = sub_100309784(0, v41[2] + 1, 1, v41);
        }
        unint64_t v30 = v41[2];
        unint64_t v29 = v41[3];
        if (v30 >= v29 >> 1) {
          uint64_t v41 = sub_100309784((void *)(v29 > 1), v30 + 1, 1, v41);
        }
        uint64_t v18 = v41;
        v41[2] = v30 + 1;
        uint64_t v19 = &v18[4 * v30];
        v19[4] = v26;
        v19[5] = v25;
        v19[6] = v27;
        v19[7] = v28;
        uint64_t v13 = v34;
        uint64_t v16 = v33;
      }
      uint64_t v20 = *(void *)v16;
      dispatch thunk of Collection.endIndex.getter();
      if (v20 == v42) {
        goto LABEL_3;
      }
    }
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100916EE0);
    swift_bridgeObjectRelease();
  }
  return v41;
}

void *sub_1003B4248(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030A178);
}

void *sub_1003B4274(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030A2C4);
}

void *sub_1003B42A0(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030A334);
}

void *sub_1003B42CC(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030A4C0);
}

void *sub_1003B42F8(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030A4E8);
}

void *sub_1003B4324(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030A510);
}

void *sub_1003B4350(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030A538);
}

void sub_1003B437C(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (v4)
  {
    v4 &= v4 - 1;
LABEL_22:
    id v10 = objc_allocWithZone((Class)CNPhoneNumber);
    swift_bridgeObjectRetain();
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v10 initWithStringValue:v11];
    swift_bridgeObjectRelease();

    if (v12)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  int64_t v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v7 >= v5) {
    goto LABEL_26;
  }
  uint64_t v8 = *(void *)(v1 + 8 * v7);
  ++v6;
  if (v8) {
    goto LABEL_21;
  }
  int64_t v6 = v7 + 1;
  if (v7 + 1 >= v5) {
    goto LABEL_26;
  }
  uint64_t v8 = *(void *)(v1 + 8 * v6);
  if (v8) {
    goto LABEL_21;
  }
  int64_t v6 = v7 + 2;
  if (v7 + 2 >= v5) {
    goto LABEL_26;
  }
  uint64_t v8 = *(void *)(v1 + 8 * v6);
  if (v8) {
    goto LABEL_21;
  }
  int64_t v6 = v7 + 3;
  if (v7 + 3 >= v5) {
    goto LABEL_26;
  }
  uint64_t v8 = *(void *)(v1 + 8 * v6);
  if (v8)
  {
LABEL_21:
    uint64_t v4 = (v8 - 1) & v8;
    goto LABEL_22;
  }
  int64_t v9 = v7 + 4;
  if (v9 >= v5)
  {
LABEL_26:
    swift_release();
    return;
  }
  uint64_t v8 = *(void *)(v1 + 8 * v9);
  if (v8)
  {
    int64_t v6 = v9;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v6 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v6 >= v5) {
      goto LABEL_26;
    }
    uint64_t v8 = *(void *)(v1 + 8 * v6);
    ++v9;
    if (v8) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
}

void *sub_1003B458C(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030B16C);
}

void *sub_1003B45B8(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030B194);
}

void *sub_1003B45E4(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030B1BC);
}

void *sub_1003B4610(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030B1E4);
}

void *sub_1003B463C(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030B20C);
}

void *sub_1003B4668(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030B234);
}

void *sub_1003B4694(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_100916EF8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v29 = (uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v27 = (uint64_t)&v23 - v13;
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v15 = *(void *)(type metadata accessor for RDTimelineEngineDueReminder(0) - 8);
  uint64_t v16 = a3 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v24 = v10;
  uint64_t v17 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v28 = *(void *)(v15 + 72);
  uint64_t v23 = a3;
  swift_bridgeObjectRetain();
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v25 = v9;
  uint64_t v26 = a1;
  do
  {
    a1(v16);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
    if ((*v17)(v8, 1, v9) == 1)
    {
      sub_1000966BC((uint64_t)v8, &qword_100916EF8);
    }
    else
    {
      uint64_t v19 = v27;
      sub_10026B6E8((uint64_t)v8, v27);
      sub_10026B6E8(v19, v29);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = (void *)sub_10030B2E4(0, v18[2] + 1, 1, (unint64_t)v18);
      }
      unint64_t v21 = v18[2];
      unint64_t v20 = v18[3];
      if (v21 >= v20 >> 1) {
        uint64_t v18 = (void *)sub_10030B2E4(v20 > 1, v21 + 1, 1, (unint64_t)v18);
      }
      void v18[2] = v21 + 1;
      sub_10026B6E8(v29, (uint64_t)v18+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v21);
      uint64_t v9 = v25;
      a1 = v26;
    }
    v16 += v28;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v18;
}

void *sub_1003B498C(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030B858);
}

void *sub_1003B49B8(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030B880);
}

void *sub_1003B49E4(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a2;
  uint64_t v6 = sub_100094134(&qword_1009167A8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100094134((uint64_t *)&unk_100913A40);
  __chkstk_darwin(v29);
  uint64_t v28 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v27 = (uint64_t)&v24 - v12;
  uint64_t v13 = *(void *)(a3 + 16);
  if (!v13) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v24 = a3;
  unint64_t v25 = v14;
  uint64_t v15 = a3 + v14;
  uint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v17 = *(void *)(v11 + 72);
  swift_bridgeObjectRetain();
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v26 = a1;
  do
  {
    a1(v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
    if ((*v16)(v8, 1, v29) == 1)
    {
      sub_1000966BC((uint64_t)v8, &qword_1009167A8);
    }
    else
    {
      uint64_t v19 = v17;
      uint64_t v20 = v27;
      sub_100096408((uint64_t)v8, v27, (uint64_t *)&unk_100913A40);
      sub_100096408(v20, v28, (uint64_t *)&unk_100913A40);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = (void *)sub_10030B8A8(0, v18[2] + 1, 1, (unint64_t)v18);
      }
      unint64_t v22 = v18[2];
      unint64_t v21 = v18[3];
      if (v22 >= v21 >> 1) {
        uint64_t v18 = (void *)sub_10030B8A8(v21 > 1, v22 + 1, 1, (unint64_t)v18);
      }
      void v18[2] = v22 + 1;
      uint64_t v17 = v19;
      sub_100096408(v28, (uint64_t)v18 + v25 + v22 * v19, (uint64_t *)&unk_100913A40);
      a1 = v26;
    }
    v15 += v17;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v18;
}

char *sub_1003B4CAC(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v44 = (void (*)(void *))a1;
  uint64_t v6 = sub_100094134(&qword_100911F60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMSuggestedAttributeOutput();
  __chkstk_darwin(v9);
  unint64_t v43 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v38 = (char *)v36 - v13;
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v42 = v8;
  uint64_t v50 = v4;
  uint64_t v37 = v12;
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
  uint64_t v40 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  v36[1] = a3;
  uint64_t v15 = (char *)(a3 + 80);
  uint64_t v45 = (char *)_swiftEmptyArrayStorage;
  uint64_t v41 = v9;
  do
  {
    uint64_t v46 = v15;
    uint64_t v47 = v14;
    uint64_t v16 = *((void *)v15 - 6);
    uint64_t v17 = *((void *)v15 - 5);
    uint64_t v19 = *((void *)v15 - 4);
    uint64_t v18 = *((void *)v15 - 3);
    uint64_t v20 = *((void *)v15 - 2);
    uint64_t v21 = *((void *)v15 - 1);
    char v22 = *v15;
    v48[0] = v16;
    v48[1] = v17;
    v48[2] = v19;
    v48[3] = v18;
    v48[4] = v20;
    v48[5] = v21;
    char v49 = v22;
    sub_10028742C(v16, v17, v19, v18, v20, v21, v22);
    uint64_t v23 = (uint64_t)v42;
    uint64_t v24 = v50;
    v44(v48);
    uint64_t v50 = v24;
    if (v24)
    {
      sub_1002874C8(v16, v17, v19, v18, v20, v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v45;
    }
    sub_1002874C8(v16, v17, v19, v18, v20, v21, v22);
    uint64_t v25 = v41;
    int v26 = (*v40)(v23, 1, v41);
    uint64_t v27 = v23;
    if (v26 == 1)
    {
      sub_1000966BC(v23, &qword_100911F60);
    }
    else
    {
      uint64_t v28 = v38;
      uint64_t v29 = *v39;
      (*v39)(v38, v27, v25);
      v29(v43, (uint64_t)v28, v25);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v45 = (char *)sub_10030BA0C(0, *((void *)v45 + 2) + 1, 1, (unint64_t)v45);
      }
      unint64_t v31 = *((void *)v45 + 2);
      unint64_t v30 = *((void *)v45 + 3);
      uint64_t v32 = v37;
      if (v31 >= v30 >> 1)
      {
        uint64_t v34 = (char *)sub_10030BA0C(v30 > 1, v31 + 1, 1, (unint64_t)v45);
        uint64_t v32 = v37;
        uint64_t v45 = v34;
      }
      unint64_t v33 = v45;
      *((void *)v45 + 2) = v31 + 1;
      v29(&v33[((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v31], (uint64_t)v43, v25);
    }
    uint64_t v15 = v46 + 56;
    uint64_t v14 = v47 - 1;
  }
  while (v47 != 1);
  swift_bridgeObjectRelease();
  return v45;
}

void *sub_1003B5014(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030BFE8);
}

void *sub_1003B5040(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v28 = a1;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100916E70);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100094134((uint64_t *)&unk_100920EF0);
  uint64_t v23 = *(void *)(v27 - 8);
  uint64_t v8 = __chkstk_darwin(v27);
  uint64_t v26 = (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v22 = (uint64_t)&v21 - v10;
  if (a3 >> 62) {
    goto LABEL_20;
  }
  uint64_t v11 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; uint64_t v11 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v25 = a3 & 0xC000000000000001;
    uint64_t v12 = &_swiftEmptyArrayStorage;
    uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    uint64_t v13 = 4;
    unint64_t v21 = a3;
    while (1)
    {
      id v14 = v25 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a3 + 8 * v13);
      uint64_t v15 = v14;
      uint64_t v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1)) {
        break;
      }
      id v29 = v14;
      v28(&v29);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v12;
      }

      if ((*v24)(v7, 1, v27) == 1)
      {
        sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100916E70);
      }
      else
      {
        uint64_t v17 = v22;
        sub_100096408((uint64_t)v7, v22, (uint64_t *)&unk_100920EF0);
        sub_100096408(v17, v26, (uint64_t *)&unk_100920EF0);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = (void *)sub_10030BFFC(0, v12[2] + 1, 1, (unint64_t)v12);
        }
        unint64_t v19 = v12[2];
        unint64_t v18 = v12[3];
        if (v19 >= v18 >> 1) {
          uint64_t v12 = (void *)sub_10030BFFC(v18 > 1, v19 + 1, 1, (unint64_t)v12);
        }
        v12[2] = v19 + 1;
        sub_100096408(v26, (uint64_t)v12+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v19, (uint64_t *)&unk_100920EF0);
        a3 = v21;
      }
      ++v13;
      if (v16 == v11)
      {
        swift_bridgeObjectRelease();
        return v12;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptyArrayStorage;
}

void sub_1003B5384(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
}

void sub_1003B53CC(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v9 = v6;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v34 = a4;
  uint64_t v11 = sub_100094134(a4);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = a3;
  uint64_t v15 = (void *)a5(0);
  uint64_t v35 = *(v15 - 1);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v39 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v33 = (char *)&v30 - v18;
  if (a3 >> 62) {
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v19; uint64_t v19 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v31 = (uint64_t (*)(BOOL, uint64_t, uint64_t))a6;
    uint64_t v37 = (unsigned int (**)(char *, uint64_t, void *))(v35 + 48);
    unint64_t v38 = v14 & 0xC000000000000001;
    uint64_t v36 = v35 + 32;
    uint64_t v42 = v15;
    unint64_t v43 = &_swiftEmptyArrayStorage;
    a6 = 4;
    unint64_t v32 = v14;
    uint64_t v20 = (void (**)(char *, char *, void *))(v35 + 32);
    while (1)
    {
      unint64_t v21 = v38 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v14 + 8 * a6);
      uint64_t v15 = v21;
      uint64_t v22 = a6 - 3;
      if (__OFADD__(a6 - 4, 1)) {
        break;
      }
      id v44 = v21;
      v40(&v44);
      if (v9)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

      uint64_t v23 = v42;
      if ((*v37)(v13, 1, v42) == 1)
      {
        sub_1000966BC((uint64_t)v13, v34);
      }
      else
      {
        uint64_t v24 = *v20;
        unint64_t v25 = v33;
        (*v20)(v33, v13, v23);
        v24(v39, v25, v23);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v26 = (uint64_t)v43;
        }
        else {
          uint64_t v26 = v31(0, v43[2] + 1, 1);
        }
        unint64_t v28 = *(void *)(v26 + 16);
        unint64_t v27 = *(void *)(v26 + 24);
        if (v28 >= v27 >> 1) {
          uint64_t v26 = v31(v27 > 1, v28 + 1, 1);
        }
        *(void *)(v26 + 16) = v28 + 1;
        unint64_t v29 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
        unint64_t v43 = (void *)v26;
        v24((char *)(v26 + v29 + *(void *)(v35 + 72) * v28), v39, v42);
        unint64_t v14 = v32;
      }
      ++a6;
      if (v22 == v19) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
LABEL_22:
  swift_bridgeObjectRelease();
}

void *sub_1003B576C(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030C024);
}

void *sub_1003B5798(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030C04C);
}

void *sub_1003B57C4(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030C074);
}

void *sub_1003B57F0(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030C09C);
}

void *sub_1003B581C(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030C0C4);
}

void *sub_1003B5848(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030C0EC);
}

void *sub_1003B5874(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030C114);
}

void *sub_1003B58A0(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030C13C);
}

void *sub_1003B58CC(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  return sub_1003B58F8(a1, a2, a3, (unint64_t)sub_10030C150);
}

void *sub_1003B58F8(void (*a1)(__n128 *__return_ptr, id *), uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a3 >> 62) {
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v17 = (uint64_t (*)(BOOL, unint64_t, uint64_t, void *, __n128))a4;
    uint64_t v8 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4; ; ++i)
    {
      id v10 = (a3 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(a3 + 8 * i);
      uint64_t v11 = v10;
      uint64_t v12 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v21 = v10;
      a1(&v20, &v21);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v8;
      }

      if (v20.n128_u64[0])
      {
        __n128 v19 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = (void *)((uint64_t (*)(void, uint64_t, uint64_t, void *))v17)(0, v8[2] + 1, 1, v8);
        }
        a4 = v8[2];
        unint64_t v13 = v8[3];
        __n128 v14 = v19;
        if (a4 >= v13 >> 1)
        {
          uint64_t v15 = v17(v13 > 1, a4 + 1, 1, v8, v19);
          __n128 v14 = v19;
          uint64_t v8 = (void *)v15;
        }
        void v8[2] = a4 + 1;
        *(__n128 *)&v8[2 * a4 + 4] = v14;
      }
      if (v12 == v7)
      {
        swift_bridgeObjectRelease();
        return v8;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1003B5ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v35 = 1;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  __n128 v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CBE90;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C3F60;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v31)
  {
    swift_errorRetain();
    swift_willThrow();

    swift_errorRelease();
    return swift_release();
  }
  if (v35)
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x1003B5F4CLL);
  }

  swift_errorRelease();
  return swift_release();
}

uint64_t sub_1003B5F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  __n128 v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB8B4;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4410;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B63ECLL);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003B63FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 1;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  __n128 v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CC260;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4668;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35 != 1)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      sub_1003CC2A0(v35);
      swift_release();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B688CLL);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  sub_1003CC2A0(v35);
  swift_release();
  return v15;
}

uint64_t sub_1003B689C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v40 = 0;
  sub_100696CF4();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v4 newBackgroundContextWithAuthor:v12];

  sub_10010B4E8(a1, (uint64_t)v37);
  unint64_t v14 = v38 | ((unint64_t)v39 << 32);
  switch(v39 >> 14)
  {
    case 2:
      unsigned __int16 v39 = WORD2(v14) & 0x3FFF;
      if ((v14 & 2) == 0)
      {
        id v22 = [self localInternalAccountID];
        id v23 = [v22 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v25 = [v4 storeForAccountIdentifier:v24];

        if (v25)
        {
          id v26 = [v4 persistentStoreCoordinator];
          id v27 = [v26 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v29 = v25;
          uint64_t v30 = v32;
          sub_1003CA81C(v28);
          uint64_t v32 = v30;
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v13 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v39 = WORD2(v14) & 0x3FFF;
      break;
  }
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = &v34;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = v13;
  v15[6] = &v40;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1003CC1DC;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C45F0;
  id v17 = _Block_copy(aBlock);
  id v18 = v13;
  swift_retain();
  swift_release();
  [v18 performBlockAndWait:v17];
  _Block_release(v17);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v40)
  {
    if (v35)
    {
      id v20 = v36;
      uint64_t isEscapingClosureAtFileLocation = v34;
      swift_bridgeObjectRetain();
      v20;

      swift_errorRelease();
      sub_1003CC21C(v34, v35, v36);
      swift_release();
      return isEscapingClosureAtFileLocation;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B6D44);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  sub_1003CC21C(v34, v35, v36);
  swift_release();
  return isEscapingClosureAtFileLocation;
}

uint64_t sub_1003B6D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB8B4;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4578;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B71E4);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003B71F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB8B4;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4500;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B7684);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003B7694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB8B4;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4488;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B7B24);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003B7B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB8B4;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C3E70;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B7FC4);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003B7FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = 0;
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v45 = 0;
  sub_100696CF4();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v5 newBackgroundContextWithAuthor:v13];

  sub_10010B4E8(a1, (uint64_t)v42);
  unint64_t v15 = v43 | ((unint64_t)v44 << 32);
  switch(v44 >> 14)
  {
    case 2:
      unsigned __int16 v44 = WORD2(v15) & 0x3FFF;
      if ((v15 & 2) == 0)
      {
        id v25 = [self localInternalAccountID];
        id v26 = [v25 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        NSString v27 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v28 = [v5 storeForAccountIdentifier:v27];

        if (v28)
        {
          id v29 = [v5 persistentStoreCoordinator];
          id v30 = [v29 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v32 = v28;
          uint64_t v33 = v37;
          sub_1003CA81C(v31);
          uint64_t v37 = v33;
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v14 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v44 = WORD2(v15) & 0x3FFF;
      break;
  }
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = &v39;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = v14;
  v16[6] = &v45;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1003CC0FC;
  *(void *)(v17 + 24) = v16;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C42A8;
  id v18 = _Block_copy(aBlock);
  id v19 = v14;
  swift_retain();
  swift_release();
  [v19 performBlockAndWait:v18];
  _Block_release(v18);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v18)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v45)
  {
    swift_errorRetain();
    swift_willThrow();

    swift_errorRelease();
    sub_1003CC124(v39, v40, v41);
    return swift_release();
  }
  uint64_t v21 = v41;
  if (!v41)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B847CLL);
  }
  uint64_t v23 = v39;
  unint64_t v22 = v40;
  sub_100097E38(v39, v40);
  swift_bridgeObjectRetain();

  id v24 = v36;
  *uint64_t v36 = v23;
  v24[1] = v22;
  void v24[2] = v21;
  swift_errorRelease();
  sub_1003CC124(v39, v40, v41);
  return swift_release();
}

uint64_t sub_1003B848C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  id v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB8B4;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C41B8;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B891CLL);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003B892C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  id v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB8B4;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C47D0;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B8DBCLL);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003B8DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  id v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB8B4;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4758;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B925CLL);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003B926C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  id v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB8B4;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C46E0;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B96FCLL);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

void sub_1003B970C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v38 = 0;
  uint64_t v34 = 0;
  sub_100696CF4();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v4 newBackgroundContextWithAuthor:v12];

  sub_10010B4E8(a1, (uint64_t)v35);
  unint64_t v14 = v36 | ((unint64_t)v37 << 32);
  switch(v37 >> 14)
  {
    case 2:
      unsigned __int16 v37 = WORD2(v14) & 0x3FFF;
      if ((v14 & 2) == 0)
      {
        id v22 = [self localInternalAccountID];
        id v23 = [v22 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v25 = [v4 storeForAccountIdentifier:v24];

        if (v25)
        {
          id v26 = [v4 persistentStoreCoordinator];
          id v27 = [v26 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v29 = v25;
          uint64_t v30 = v32;
          sub_1003CA81C(v28);
          uint64_t v32 = v30;
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v13 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v37 = WORD2(v14) & 0x3FFF;
      break;
  }
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = &v38;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = v13;
  v15[6] = &v34;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1003CC164;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4320;
  id v17 = _Block_copy(aBlock);
  id v18 = v13;
  swift_retain();
  swift_release();
  [v18 performBlockAndWait:v17];
  _Block_release(v17);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v34)
  {
    swift_errorRetain();
    swift_willThrow();

    swift_errorRelease();
    id v20 = v38;
    swift_release();

    return;
  }
  if (!v38)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003B9B90);
  }
  v38;

  swift_errorRelease();
  id v21 = v38;
  swift_release();
}

uint64_t sub_1003B9BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB844;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4050;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003BA030);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003BA040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB844;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C3FD8;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003BA4D0);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003BA4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB844;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011C6C0;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C3DF8;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003BA970);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003BA980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB844;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C3EE8;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003BAE10);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003BAE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v30 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v36 = 2;
  uint64_t v32 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v33);
  unint64_t v13 = v34 | ((unint64_t)v35 << 32);
  switch(v35 >> 14)
  {
    case 2:
      unsigned __int16 v35 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v21 = [self localInternalAccountID];
        id v22 = [v21 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v24 = [v4 storeForAccountIdentifier:v23];

        if (v24)
        {
          id v25 = [v4 persistentStoreCoordinator];
          id v26 = [v25 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v28 = v24;
          sub_1003CA81C(v27);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v35 = WORD2(v13) & 0x3FFF;
      break;
  }
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = &v36;
  v14[3] = a2;
  v14[4] = v30;
  v14[5] = v12;
  v14[6] = &v32;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CC074;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C40C8;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v32)
  {
    char v19 = v36;
    if (v36 != 2)
    {

      LOBYTE(v17) = v19 & 1;
      swift_errorRelease();
      swift_release();
      return v17 & 1;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003BB29CLL);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  return v17 & 1;
}

uint64_t sub_1003BB2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = 0;
  uint64_t v31 = 0;
  sub_100696CF4();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v4 newBackgroundContextWithAuthor:v11];

  sub_10010B4E8(a1, (uint64_t)v32);
  unint64_t v13 = v33 | ((unint64_t)v34 << 32);
  switch(v34 >> 14)
  {
    case 2:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      if ((v13 & 2) == 0)
      {
        id v20 = [self localInternalAccountID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v23 = [v4 storeForAccountIdentifier:v22];

        if (v23)
        {
          id v24 = [v4 persistentStoreCoordinator];
          id v25 = [v24 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = v23;
          sub_1003CA81C(v26);
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v12 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v34 = WORD2(v13) & 0x3FFF;
      break;
  }
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = &v35;
  v14[3] = a2;
  v14[4] = v29;
  v14[5] = v12;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CB844;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4230;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v12;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v16];
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v31)
  {
    uint64_t v15 = v35;
    if (v35)
    {
      swift_bridgeObjectRetain();

      swift_errorRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003BB73CLL);
  }
  swift_errorRetain();
  swift_willThrow();

  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

void sub_1003BB74C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v38 = 0;
  uint64_t v34 = 0;
  sub_100696CF4();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v4 newBackgroundContextWithAuthor:v12];

  sub_10010B4E8(a1, (uint64_t)v35);
  unint64_t v14 = v36 | ((unint64_t)v37 << 32);
  switch(v37 >> 14)
  {
    case 2:
      unsigned __int16 v37 = WORD2(v14) & 0x3FFF;
      if ((v14 & 2) == 0)
      {
        id v22 = [self localInternalAccountID];
        id v23 = [v22 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v25 = [v4 storeForAccountIdentifier:v24];

        if (v25)
        {
          id v26 = [v4 persistentStoreCoordinator];
          id v27 = [v26 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v29 = v25;
          uint64_t v30 = v32;
          sub_1003CA81C(v28);
          uint64_t v32 = v30;
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v13 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v37 = WORD2(v14) & 0x3FFF;
      break;
  }
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = &v38;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = v13;
  v15[6] = &v34;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1003CC0B4;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4398;
  id v17 = _Block_copy(aBlock);
  id v18 = v13;
  swift_retain();
  swift_release();
  [v18 performBlockAndWait:v17];
  _Block_release(v17);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v34)
  {
    swift_errorRetain();
    swift_willThrow();

    swift_errorRelease();
    id v20 = v38;
    swift_release();

    return;
  }
  if (!v38)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003BBBD0);
  }
  v38;

  swift_errorRelease();
  id v21 = v38;
  swift_release();
}

void sub_1003BBBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v38 = 0;
  uint64_t v34 = 0;
  sub_100696CF4();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v4 newBackgroundContextWithAuthor:v12];

  sub_10010B4E8(a1, (uint64_t)v35);
  unint64_t v14 = v36 | ((unint64_t)v37 << 32);
  switch(v37 >> 14)
  {
    case 2:
      unsigned __int16 v37 = WORD2(v14) & 0x3FFF;
      if ((v14 & 2) == 0)
      {
        id v22 = [self localInternalAccountID];
        id v23 = [v22 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v25 = [v4 storeForAccountIdentifier:v24];

        if (v25)
        {
          id v26 = [v4 persistentStoreCoordinator];
          id v27 = [v26 persistentStores];

          sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
          unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v29 = v25;
          uint64_t v30 = v32;
          sub_1003CA81C(v28);
          uint64_t v32 = v30;
          swift_bridgeObjectRelease();

          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v13 set__unsafe_doesNotWorkUniversally_affectedStores:isa];
        }
      }
      break;
    case 3:
      break;
    default:
      unsigned __int16 v37 = WORD2(v14) & 0x3FFF;
      break;
  }
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = &v38;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = v13;
  v15[6] = &v34;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1003CC0B4;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_10011FD40;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4140;
  id v17 = _Block_copy(aBlock);
  id v18 = v13;
  swift_retain();
  swift_release();
  [v18 performBlockAndWait:v17];
  _Block_release(v17);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v34)
  {
    swift_errorRetain();
    swift_willThrow();

    swift_errorRelease();
    id v20 = v38;
    swift_release();

    return;
  }
  if (!v38)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x1003BC064);
  }
  v38;

  swift_errorRelease();
  id v21 = v38;
  swift_release();
}

uint64_t sub_1003BC074(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003BC124(a1, a2, a3, a4, (unint64_t *)&unk_100910210, (uint64_t)off_1008AA4A0, (int64_t)sub_10031DE18, &qword_10090FF50, &qword_100916E58);
}

uint64_t sub_1003BC0CC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003BC124(a1, a2, a3, a4, &qword_10090ABC0, (uint64_t)off_1008AA3D8, (int64_t)sub_10031DE2C, &qword_10090FEB0, (uint64_t *)&unk_100916E00);
}

uint64_t sub_1003BC124(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, int64_t a7, uint64_t *a8, uint64_t *a9)
{
  sub_1000963CC(0, a5);
  id v15 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v16 = [(id)swift_getObjCClassFromMetadata() entity];
  [v15 setEntity:v16];

  if (a3)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    v17.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v17.super.Class isa = 0;
  }
  [v15 setAffectedStores:v17.super.isa];

  [v15 setPredicate:a4];
  uint64_t v69 = (uint64_t)&_swiftEmptySetSingleton;
  id v59 = v15;
  if (!a2) {
    goto LABEL_30;
  }
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    if (v18) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v18 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18)
    {
LABEL_7:
      if (v18 < 1)
      {
        __break(1u);
        goto LABEL_66;
      }
      for (uint64_t i = 0; i != v18; ++i)
      {
        if ((a2 & 0xC000000000000001) != 0)
        {
          uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v20 = *(void *)(a2 + 8 * i + 32);
          swift_retain();
        }
        ((void (*)(long long *, uint64_t))a7)(&v63, v20);
        swift_release();
      }
    }
  }
  swift_bridgeObjectRelease();
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v21)
  {
    BOOL v65 = _swiftEmptyArrayStorage;
    sub_1001DE058(0, v21 & ~(v21 >> 63), 0);
    if ((v21 & 0x8000000000000000) == 0)
    {
      unint64_t v60 = a1;
      uint64_t v61 = (void (*)(void, void))a7;
      a1 = 0;
      id v22 = v65;
      while (v21 != a1)
      {
        if ((a2 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v9 = *(void *)(a2 + 8 * a1 + 32);
          swift_retain();
        }
        uint64_t v23 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
        if (!v24) {
          goto LABEL_70;
        }
        uint64_t v25 = v23;
        uint64_t v26 = v24;
        swift_release();
        BOOL v65 = v22;
        a7 = v22[2];
        unint64_t v27 = v22[3];
        uint64_t v9 = a7 + 1;
        if (a7 >= v27 >> 1)
        {
          sub_1001DE058(v27 > 1, a7 + 1, 1);
          id v22 = v65;
        }
        ++a1;
        id v22[2] = v9;
        unint64_t v28 = &v22[2 * a7];
        v28[4] = v25;
        v28[5] = v26;
        if (v21 == a1)
        {
          id v15 = v59;
          a1 = v60;
          a7 = (int64_t)v61;
          goto LABEL_29;
        }
      }
      __break(1u);
      goto LABEL_41;
    }
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
LABEL_29:
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v15 setRelationshipKeyPathsForPrefetching:isa];

LABEL_30:
  if (!a1)
  {
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  if (!(a1 >> 62))
  {
    uint64_t v30 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v30) {
      goto LABEL_42;
    }
    goto LABEL_33;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
  if (!v30) {
    goto LABEL_42;
  }
LABEL_33:
  if (v30 < 1)
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    *(void *)&long long v63 = 0;
    *((void *)&v63 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v57._uint64_t object = (void *)0x80000001007CAF70;
    v57._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v57);
    unint64_t v68 = (void *)v9;
    sub_100094134(a8);
    goto LABEL_72;
  }
  for (uint64_t j = 0; j != v30; ++j)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v32 = *(void *)(a1 + 8 * j + 32);
      swift_retain();
    }
    ((void (*)(long long *, uint64_t))a7)(&v63, v32);
    swift_release();
  }
LABEL_42:
  swift_bridgeObjectRelease();
  uint64_t v33 = v69;
  unint64_t v34 = v69 & 0xC000000000000001;
  if ((v69 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = __CocoaSet.count.getter();
    if (v35) {
      goto LABEL_44;
    }
    goto LABEL_47;
  }
  uint64_t v35 = *(void *)(v69 + 16);
  swift_bridgeObjectRetain();
  if (!v35)
  {
LABEL_47:
    swift_bridgeObjectRelease();
LABEL_63:
    swift_bridgeObjectRelease();
    Class v55 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v15 = v59;
    [v59 setPropertiesToFetch:v55];

    return (uint64_t)v15;
  }
LABEL_44:
  unint64_t v68 = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, v35 & ~(v35 >> 63), 0);
  if (v34)
  {
    unsigned int v36 = (void *)__CocoaSet.startIndex.getter();
    unsigned __int8 v38 = 1;
  }
  else
  {
    unsigned int v36 = (void *)sub_1003CA794(v33);
    unsigned __int8 v38 = v39 & 1;
  }
  BOOL v65 = v36;
  uint64_t v66 = v37;
  unsigned __int8 v67 = v38;
  if (v35 < 0) {
    goto LABEL_68;
  }
  while (1)
  {
    int64_t v46 = (int64_t)v65;
    uint64_t v45 = v66;
    uint64_t v9 = v67;
    sub_1003CA52C((uint64_t)v65, v66, v67, v33, a8);
    uint64_t v47 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v48) {
      break;
    }
    uint64_t v49 = v47;
    uint64_t v50 = v48;
    char v64 = &type metadata for String;
    swift_release();
    *(void *)&long long v63 = v49;
    *((void *)&v63 + 1) = v50;
    unint64_t v51 = v68;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1001DE1C4(0, v51[2] + 1, 1);
      unint64_t v51 = v68;
    }
    unint64_t v53 = v51[2];
    unint64_t v52 = v51[3];
    if (v53 >= v52 >> 1)
    {
      sub_1001DE1C4(v52 > 1, v53 + 1, 1);
      unint64_t v51 = v68;
    }
    v51[2] = v53 + 1;
    sub_10009A1A0(&v63, &v51[4 * v53 + 4]);
    if (v34)
    {
      if ((v9 & 1) == 0) {
        goto LABEL_69;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_100094134(a9);
      unint64_t v54 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v54(&v63, 0);
      if (!--v35)
      {
LABEL_62:
        sub_1000E4EA4((uint64_t)v65, v66, v67);
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
    }
    else
    {
      unint64_t v40 = (void *)sub_1003C9E38(v46, v45, v9, v33);
      uint64_t v42 = v41;
      char v44 = v43;
      sub_1000E4EA4(v46, v45, v9);
      BOOL v65 = v40;
      uint64_t v66 = v42;
      unsigned __int8 v67 = v44 & 1;
      if (!--v35) {
        goto LABEL_62;
      }
    }
  }
  *(void *)&long long v63 = 0;
  *((void *)&v63 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v58._uint64_t object = (void *)0x80000001007CAF70;
  v58._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v58);
  sub_100094134(a8);
LABEL_72:
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003BC8C4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003BC124(a1, a2, a3, a4, (unint64_t *)&qword_10090B040, (uint64_t)off_1008AA488, (int64_t)sub_10031DE40, (uint64_t *)&unk_10090B070, (uint64_t *)&unk_100916DD0);
}

uint64_t sub_1003BC91C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003BC958(a1, a2, a3, a4, (void (*)(void))type metadata accessor for REMCDDueDateDeltaAlert, (int64_t)sub_10031E1E4, &qword_100913B30, &qword_100916E20);
}

uint64_t sub_1003BC958(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), int64_t a6, uint64_t *a7, uint64_t *a8)
{
  a5(0);
  uint64_t j = (uint64_t)[objc_allocWithZone((Class)NSFetchRequest) init];
  id v14 = [(id)swift_getObjCClassFromMetadata() entity];
  [(id)j setEntity:v14];

  if (a3)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v15.super.Class isa = 0;
  }
  [(id)j setAffectedStores:v15.super.isa];

  [(id)j setPredicate:a4];
  uint64_t v68 = (uint64_t)&_swiftEmptySetSingleton;
  id v58 = (id)j;
  if (!a2) {
    goto LABEL_30;
  }
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v16)
    {
LABEL_7:
      if (v16 < 1)
      {
        __break(1u);
        goto LABEL_66;
      }
      for (uint64_t i = 0; i != v16; ++i)
      {
        if ((a2 & 0xC000000000000001) != 0)
        {
          uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v18 = *(void *)(a2 + 8 * i + 32);
          swift_retain();
        }
        ((void (*)(long long *, uint64_t))a6)(&v62, v18);
        swift_release();
      }
    }
  }
  swift_bridgeObjectRelease();
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t j = (uint64_t)v58;
  if (v19)
  {
    char v64 = _swiftEmptyArrayStorage;
    sub_1001DE058(0, v19 & ~(v19 >> 63), 0);
    if ((v19 & 0x8000000000000000) == 0)
    {
      unint64_t v57 = a1;
      id v59 = (void (*)(void, void))a6;
      a1 = 0;
      uint64_t v20 = v64;
      while (v19 != a1)
      {
        if ((a2 & 0xC000000000000001) != 0)
        {
          uint64_t j = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t j = *(void *)(a2 + 8 * a1 + 32);
          swift_retain();
        }
        uint64_t v21 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
        if (!v22) {
          goto LABEL_70;
        }
        uint64_t v23 = v21;
        uint64_t v24 = v22;
        swift_release();
        char v64 = v20;
        a6 = v20[2];
        unint64_t v25 = v20[3];
        uint64_t j = a6 + 1;
        if (a6 >= v25 >> 1)
        {
          sub_1001DE058(v25 > 1, a6 + 1, 1);
          uint64_t v20 = v64;
        }
        ++a1;
        v20[2] = j;
        uint64_t v26 = &v20[2 * a6];
        v26[4] = v23;
        v26[5] = v24;
        if (v19 == a1)
        {
          uint64_t j = (uint64_t)v58;
          a6 = (int64_t)v59;
          a1 = v57;
          goto LABEL_29;
        }
      }
      __break(1u);
      goto LABEL_41;
    }
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
LABEL_29:
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [(id)j setRelationshipKeyPathsForPrefetching:isa];

LABEL_30:
  if (!a1)
  {
    swift_bridgeObjectRelease();
    return j;
  }
  if (!(a1 >> 62))
  {
    uint64_t v28 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v28) {
      goto LABEL_42;
    }
    goto LABEL_33;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  if (!v28) {
    goto LABEL_42;
  }
LABEL_33:
  if (v28 < 1)
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    *(void *)&long long v62 = 0;
    *((void *)&v62 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v55._uint64_t object = (void *)0x80000001007CAF70;
    v55._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v55);
    unsigned __int8 v67 = (void *)j;
    sub_100094134(a7);
    goto LABEL_72;
  }
  for (uint64_t j = 0; j != v28; ++j)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v29 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v29 = *(void *)(a1 + 8 * j + 32);
      swift_retain();
    }
    ((void (*)(long long *, uint64_t))a6)(&v62, v29);
    swift_release();
  }
LABEL_42:
  swift_bridgeObjectRelease();
  uint64_t v30 = v68;
  unint64_t v31 = v68 & 0xC000000000000001;
  if ((v68 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = __CocoaSet.count.getter();
    if (v32) {
      goto LABEL_44;
    }
    goto LABEL_47;
  }
  uint64_t v32 = *(void *)(v68 + 16);
  swift_bridgeObjectRetain();
  if (!v32)
  {
LABEL_47:
    swift_bridgeObjectRelease();
LABEL_63:
    swift_bridgeObjectRelease();
    Class v53 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t j = (uint64_t)v58;
    [v58 setPropertiesToFetch:v53];

    return j;
  }
LABEL_44:
  unsigned __int8 v67 = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, v32 & ~(v32 >> 63), 0);
  if (v31)
  {
    uint64_t v33 = (void *)__CocoaSet.startIndex.getter();
    char v35 = 1;
  }
  else
  {
    uint64_t v33 = (void *)sub_1003CA794(v30);
    char v35 = v36 & 1;
  }
  char v64 = v33;
  uint64_t v65 = v34;
  char v66 = v35;
  if (v32 < 0) {
    goto LABEL_68;
  }
  while (1)
  {
    int64_t v43 = (int64_t)v64;
    uint64_t v42 = v65;
    char v44 = v66;
    sub_1003CA52C((uint64_t)v64, v65, v66, v30, a7);
    uint64_t v45 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v46) {
      break;
    }
    uint64_t v47 = v45;
    uint64_t v48 = v46;
    long long v63 = &type metadata for String;
    swift_release();
    *(void *)&long long v62 = v47;
    *((void *)&v62 + 1) = v48;
    uint64_t v49 = v67;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1001DE1C4(0, v49[2] + 1, 1);
      uint64_t v49 = v67;
    }
    unint64_t v51 = v49[2];
    unint64_t v50 = v49[3];
    uint64_t j = v51 + 1;
    if (v51 >= v50 >> 1)
    {
      sub_1001DE1C4(v50 > 1, v51 + 1, 1);
      uint64_t v49 = v67;
    }
    v49[2] = j;
    sub_10009A1A0(&v62, &v49[4 * v51 + 4]);
    if (v31)
    {
      if ((v44 & 1) == 0) {
        goto LABEL_69;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_100094134(a8);
      unint64_t v52 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v52(&v62, 0);
      if (!--v32)
      {
LABEL_62:
        sub_1000E4EA4((uint64_t)v64, v65, v66);
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t v37 = (void *)sub_1003C9E38(v43, v42, v44, v30);
      uint64_t v39 = v38;
      char v41 = v40;
      sub_1000E4EA4(v43, v42, v44);
      char v64 = v37;
      uint64_t v65 = v39;
      char v66 = v41 & 1;
      if (!--v32) {
        goto LABEL_62;
      }
    }
  }
  *(void *)&long long v62 = 0;
  *((void *)&v62 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v56._uint64_t object = (void *)0x80000001007CAF70;
  v56._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v56);
  sub_100094134(a7);
LABEL_72:
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003BD0F4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003BC124(a1, a2, a3, a4, (unint64_t *)&qword_100909AD0, (uint64_t)off_1008AA460, (int64_t)sub_10031E544, &qword_100913A10, &qword_100916DE8);
}

uint64_t sub_1003BD14C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003BC958(a1, a2, a3, a4, (void (*)(void))type metadata accessor for REMCDAccountListData, (int64_t)sub_10031EBA0, &qword_100916E60, &qword_100916E68);
}

uint64_t sub_1003BD188(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003BC124(a1, a2, a3, a4, (unint64_t *)&qword_10090DC20, (uint64_t)off_1008AA448, (int64_t)sub_10031F048, &qword_10090DC60, &qword_100916EA0);
}

uint64_t sub_1003BD1E0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003BC124(a1, a2, a3, a4, &qword_100914BE0, (uint64_t)off_1008AA490, (int64_t)sub_10031F05C, (uint64_t *)&unk_10090DC30, &qword_100916EB8);
}

uint64_t sub_1003BD238(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003BC124(a1, a2, a3, a4, (unint64_t *)&unk_100916E80, (uint64_t)off_1008AA468, (int64_t)sub_10031F6D4, &qword_1009141B0, (uint64_t *)&unk_100916E90);
}

id sub_1003BD290@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 minimumSupportedAppVersion];
  *a2 = result;
  return result;
}

id sub_1003BD2C4(void *a1, id *a2)
{
  return [*a2 setMinimumSupportedAppVersion:*a1];
}

void *sub_1003BD2D8(unsigned char *a1, void *(*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  id result = a2(&v6, a4);
  *a1 = 0;
  return result;
}

uint64_t sub_1003BD5A0(uint64_t *a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  a2(&v7, a4);
  uint64_t v5 = *a1;
  *a1 = v7;
  return sub_1003CC2A0(v5);
}

void sub_1003BD874(uint64_t *a1, void (*a2)(long long *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  a2(&v9, a4);
  uint64_t v5 = v10;
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = (void *)a1[2];
  *(_OWORD *)a1 = v9;
  a1[2] = v5;
  sub_1003CC21C(v6, v7, v8);
}

uint64_t sub_1003BDB54(void *a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  a2(&v6, a4);
  *a1 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003BDE28(uint64_t *a1, void (*a2)(long long *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  a2(&v10, a4);
  uint64_t v5 = v11;
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  *(_OWORD *)a1 = v10;
  a1[2] = v5;
  return sub_1003CC124(v6, v7, v8);
}

void sub_1003BE108(void **a1, void (*a2)(void **__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  a2(&v6, a4);
  uint64_t v5 = *a1;
  *a1 = v6;
}

uint64_t sub_1003BE3DC(void *a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  a2(&v7, a4);
  uint64_t v5 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v5;
  return result;
}

void *sub_1003BE6B0(unsigned char *a1, void *(*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a4);
  *a1 = v6;
  return result;
}

void sub_1003BE97C(id *a1, void (*a2)(void **__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  a2(&v6, a4);
  uint64_t v5 = v6;

  *a1 = v5;
}

uint64_t sub_1003BEC50()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100916CF0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100916CF0);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1003BED18()
{
  id result = [self alarmEngine];
  qword_100916D08 = (uint64_t)result;
  return result;
}

uint64_t sub_1003BED54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(v4 + 40) = xmmword_100789970;
  *(void *)(v4 + 56) = 0xED00007265637564;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 86) = 0;
  *(void *)(v4 + 16) = a1;
  uint64_t v8 = (objc_class *)type metadata accessor for RDDaemonController();
  long long v9 = (char *)objc_allocWithZone(v8);
  long long v10 = &v9[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(void *)long long v10 = a2;
  *((void *)v10 + 1) = a3;
  uint64_t v11 = &v9[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(_OWORD *)uint64_t v11 = xmmword_100789980;
  *(void *)(v11 + 38) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)&v9[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  v13.receiver = v9;
  v13.super_class = v8;
  [super init];
  *(void *)(v4 + 32) = a4;
  return v4;
}

void sub_1003BEE38(uint64_t a1@<X1>, void *a2@<X8>)
{
  id v5 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(a1 + 24)];
  uint64_t v6 = (void *)sub_100231588((void *)1, 0xA0u);
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  unint64_t v34 = inited;
  specialized Array._endMutation()();
  uint64_t v8 = (void *)sub_1003BC124(inited, 0, 0, (uint64_t)v6, &qword_100910E10, (uint64_t)off_1008AA3F0, (int64_t)sub_10031EC04, &qword_100913B78, &qword_100916E50);
  swift_bridgeObjectRelease();
  id v9 = [self daemonUserDefaults];
  unsigned __int8 v10 = [v9 disableAlarmEngineDataSourcePrefetching];

  if ((v10 & 1) == 0)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v8 setRelationshipKeyPathsForPrefetching:isa];
  }
  sub_1000963CC(0, &qword_100910E10);
  unint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
    id v13 = v5;
    id v5 = v8;
LABEL_5:

    return;
  }
  unint64_t v14 = v12;
  uint64_t v33 = v8;
  uint64_t v31 = a1;
  unint64_t v34 = (unint64_t)_swiftEmptyArrayStorage;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v32 = a2;
    if (!v15) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v32 = a2;
    if (!v15) {
      goto LABEL_23;
    }
  }
  if (v15 < 1) {
    __break(1u);
  }
  for (uint64_t i = 0; i != v15; ++i)
  {
    if ((v14 & 0xC000000000000001) != 0) {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v17 = *(id *)(v14 + 8 * i + 32);
    }
    uint64_t v18 = v17;
    id v19 = [v17 alarm];
    if (v19
      && (uint64_t v20 = v19, v21 = [v19 reminder], v20, v21))
    {
      id v22 = [v21 remObjectID];

      if (v22)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    else
    {
    }
  }
LABEL_23:
  swift_bridgeObjectRelease();
  id v13 = [objc_allocWithZone((Class)REMRemindersDataView) initWithStore:v5];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  Class v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v24 = [self defaultFetchOptions];
  unint64_t v34 = 0;
  id v25 = [v13 fetchRemindersWithObjectIDs:v23 fetchOptions:v24 error:&v34];

  id v26 = (id)v34;
  if (!v25)
  {
    id v30 = (id)v34;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_5;
  }
  sub_1000963CC(0, &qword_1009168E0);
  sub_1001207D4();
  uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v28 = v26;

  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v29 = sub_1003CAD74(v14, v27, v31);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  swift_release();

  *uint64_t v32 = v29;
}

void sub_1003BF368(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v6, (uint64_t *)&unk_100909E50);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setIdentifier:isa];
}

void sub_1003BF49C(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v7 = *a1;
  id v8 = [*a1 alarm];
  if (!v8)
  {
    if (qword_100907440 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_10008E2DC(v36, (uint64_t)qword_100916CF0);
    id v37 = v7;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      char v40 = (uint8_t *)swift_slowAlloc();
      typec = (void *)swift_slowAlloc();
      *(_DWORD *)char v40 = 138412290;
      v98[0] = (uint64_t)v37;
      char v41 = a4;
      id v42 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *typec = v37;

      a4 = v41;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "LocationDataSourceAlarms: Failed to get cdAlarm from trigger. {cdTrigger: %@}", v40, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_47;
  }
  uint64_t v9 = v8;
  id v10 = [v8 reminder];
  if (!v10
    || (uint64_t v11 = v10, v12 = [v10 remObjectID], v11, !v12))
  {
    if (qword_100907440 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_100916CF0);
    id v30 = v9;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v31, v32))
    {

      goto LABEL_47;
    }
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    unint64_t v34 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 138412290;
    v98[0] = (uint64_t)v30;
    char v35 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v34 = v9;

    _os_log_impl((void *)&_mh_execute_header, v31, v32, "LocationDataSourceAlarms: Failed to get reminderID from cdAlarm.reminder. {cdAlarm: %@}", v33, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_16;
  }
  id v13 = v12;
  unint64_t v14 = sub_1002F0054(v13, a2);

  if (!v14)
  {
    type = v9;
    if (qword_100907440 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_10008E2DC(v43, (uint64_t)qword_100916CF0);
    char v44 = v13;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v31, v45))
    {

      goto LABEL_40;
    }
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v86 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 138543362;
    v98[0] = (uint64_t)v44;
    char v35 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v86 = v12;

    _os_log_impl((void *)&_mh_execute_header, v31, v45, "LocationDataSourceAlarms: Failed to get remReminder from dataView result {reminderID: %{public}@}", v46, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_16:
LABEL_47:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  id v15 = [v14 assignmentContext];
  id v16 = [v15 currentAssignment];

  if (v16)
  {

    id v17 = *(void **)(a3 + 40);
    id v18 = v17;
    LOBYTE(v17) = sub_10056DE04((void (**)(char *, uint64_t))v17);

    if ((v17 & 1) == 0)
    {
      type = v9;
      if (qword_100907440 != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      sub_10008E2DC(v47, (uint64_t)qword_100916CF0);
      char v35 = v14;
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        long long v87 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 138543362;
        v98[0] = (uint64_t)[v35 objectID];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v87 = v98[0];

        _os_log_impl((void *)&_mh_execute_header, v31, v48, "LocationDataSourceAlarms: remReminder is not assigned to current user. Skipping {reminderID: %{public}@}", v49, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_16;
      }

LABEL_40:
      goto LABEL_47;
    }
  }
  id v19 = [v14 alarms];
  unint64_t v95 = v13;
  if (!v19)
  {
LABEL_33:
    if (qword_100907440 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_10008E2DC(v50, (uint64_t)qword_100916CF0);
    id v51 = v9;
    unint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      os_log_type_t v88 = v53;
      *(void *)os_log_type_t typea = a4;
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      v98[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v54 = 136446210;
      id v55 = [v51 remObjectID];
      if (v55)
      {
        Swift::String v56 = v55;
        id v57 = [v55 description];

        uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v60 = v59;
      }
      else
      {
        unint64_t v60 = 0xE300000000000000;
        uint64_t v58 = 7104878;
      }
      *(void *)&v96[0] = sub_1000C51B8(v58, v60, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v52, v88, "LocationDataSourceAlarms: Failed to get remAlarm from remReminder.alarms {alarmID: %{public}s}", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = *(void **)typea;
    }
    else
    {
    }
    goto LABEL_47;
  }
  uint64_t v20 = v19;
  sub_1000963CC(0, (unint64_t *)&qword_10090C4B8);
  unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v22 = v9;
  Class v23 = v9;
  id v24 = sub_1003CABA8(v21, v22);
  swift_bridgeObjectRelease();

  if (!v24)
  {
    uint64_t v9 = v23;
    goto LABEL_33;
  }
  id v101 = [v24 trigger];
  sub_1000963CC(0, (unint64_t *)&unk_100911060);
  sub_100094134((uint64_t *)&qword_100916E38);
  if (swift_dynamicCast())
  {
    sub_1000967D4(v96, (uint64_t)v98);
    uint64_t v25 = v99;
    uint64_t v26 = v100;
    sub_1000C0DE0(v98, v99);
    uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 8))(v14, v25, v26);
    if (v27)
    {
      uint64_t v28 = v27;

      *a4 = v14;
      a4[1] = v24;
      a4[2] = v28;
    }
    else
    {
      if (qword_100907440 != -1) {
        swift_once();
      }
      uint64_t v70 = type metadata accessor for Logger();
      sub_10008E2DC(v70, (uint64_t)qword_100916CF0);
      id v71 = v24;
      id v72 = v14;
      BOOL v73 = v71;
      unint64_t v74 = v72;
      Swift::String v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = swift_slowAlloc();
        uint64_t v85 = v75;
        Swift::String v78 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v77 = 138412546;
        float v90 = v22;
        id v79 = [v73 trigger];
        *(void *)&v96[0] = v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v78 = v79;

        *(_WORD *)(v77 + 12) = 2114;
        id v80 = [v74 objectID];
        *(void *)&v96[0] = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v81 = v78;
        long long v82 = v85;
        v81[1] = v80;

        _os_log_impl((void *)&_mh_execute_header, v85, v76, "LocationDataSourceAlarms: Unable to get CLRegion from remAlarm.trigger {remAlarm.trigger: %@, reminderID: %{public}@}", (uint8_t *)v77, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v83 = v90;
        uint64_t v84 = v95;
      }
      else
      {

        uint64_t v83 = v73;
        uint64_t v84 = v73;
        unint64_t v74 = v73;
        BOOL v73 = v95;
        long long v82 = v22;
      }

      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v98);
  }
  else
  {
    typeb = a4;
    uint64_t v97 = 0;
    memset(v96, 0, sizeof(v96));
    sub_1000966BC((uint64_t)v96, (uint64_t *)&unk_100916E40);
    if (qword_100907440 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_10008E2DC(v61, (uint64_t)qword_100916CF0);
    long long v62 = v24;
    long long v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v63, v64))
    {
      unint64_t v89 = v22;
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      char v66 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v65 = 138412290;
      id v67 = [v62 trigger];
      v98[0] = (uint64_t)v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v66 = v67;

      _os_log_impl((void *)&_mh_execute_header, v63, v64, "LocationDataSourceAlarms: remAlarm.trigger is not a RDCLRegionSource (REMAlarmLocationTrigger) {remAlarm.trigger: %@}", v65, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v68 = v89;
      uint64_t v69 = v95;
    }
    else
    {

      uint64_t v68 = v62;
      uint64_t v69 = v62;
      unint64_t v14 = v62;
      long long v62 = v95;
      long long v63 = v22;
    }

    void *typeb = 0;
    typeb[1] = 0;
    typeb[2] = 0;
  }
}

void sub_1003C02E4(uint64_t a1@<X1>, void *a2@<X8>)
{
  id v5 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(a1 + 24)];
  uint64_t v6 = (void *)sub_1002329F4((void *)2, 0xA0u);
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  unint64_t v34 = inited;
  specialized Array._endMutation()();
  id v8 = (void *)sub_1003BC124(inited, 0, 0, (uint64_t)v6, &qword_100910E00, (uint64_t)off_1008AA408, (int64_t)sub_10031FB44, &qword_100913B50, (uint64_t *)&unk_100916E28);
  swift_bridgeObjectRelease();
  id v9 = [self daemonUserDefaults];
  unsigned __int8 v10 = [v9 disableAlarmEngineDataSourcePrefetching];

  if ((v10 & 1) == 0)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v8 setRelationshipKeyPathsForPrefetching:isa];
  }
  sub_1000963CC(0, &qword_100910E00);
  unint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
    id v13 = v5;
    id v5 = v8;
LABEL_5:

    return;
  }
  unint64_t v14 = v12;
  uint64_t v33 = v8;
  uint64_t v31 = a1;
  unint64_t v34 = (unint64_t)_swiftEmptyArrayStorage;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    os_log_type_t v32 = a2;
    if (!v15) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    os_log_type_t v32 = a2;
    if (!v15) {
      goto LABEL_23;
    }
  }
  if (v15 < 1) {
    __break(1u);
  }
  for (uint64_t i = 0; i != v15; ++i)
  {
    if ((v14 & 0xC000000000000001) != 0) {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v17 = *(id *)(v14 + 8 * i + 32);
    }
    id v18 = v17;
    id v19 = [v17 alarm];
    if (v19
      && (uint64_t v20 = v19, v21 = [v19 reminder], v20, v21))
    {
      id v22 = [v21 remObjectID];

      if (v22)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    else
    {
    }
  }
LABEL_23:
  swift_bridgeObjectRelease();
  id v13 = [objc_allocWithZone((Class)REMRemindersDataView) initWithStore:v5];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  Class v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v24 = [self defaultFetchOptions];
  unint64_t v34 = 0;
  id v25 = [v13 fetchRemindersWithObjectIDs:v23 fetchOptions:v24 error:&v34];

  id v26 = (id)v34;
  if (!v25)
  {
    id v30 = (id)v34;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_5;
  }
  sub_1000963CC(0, &qword_1009168E0);
  sub_1001207D4();
  uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v28 = v26;

  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v29 = sub_1003CAF48(v14, v27, v31);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  swift_release();

  *os_log_type_t v32 = v29;
}

void sub_1003C0814(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v7 = *a1;
  id v8 = [*a1 alarm];
  if (v8)
  {
    id v9 = v8;
    id v10 = [v8 reminder];
    if (v10)
    {
      uint64_t v11 = v10;
      id v12 = [v10 remObjectID];

      if (v12)
      {
        id v13 = v12;
        unint64_t v14 = sub_1002F0054(v13, a2);

        if (v14)
        {
          id v15 = [v14 alarms];
          if (!v15) {
            goto LABEL_11;
          }
          id v16 = v15;
          sub_1000963CC(0, &qword_10090C4B8);
          unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v9 = v9;
          id v18 = sub_1003CABA8(v17, v9);
          swift_bridgeObjectRelease();

          if (v18)
          {
            uint64_t v46 = v13;
            id v19 = [v18 trigger];
            self;
            uint64_t v20 = swift_dynamicCastObjCClass();
            id v21 = v18;
            if (v20)
            {
              id v43 = (id)v20;
              char v44 = v18;
              id v22 = [v14 assignmentContext];
              id v23 = [v22 currentAssignment];

              if (!v23
                || (v23,
                    id v24 = *(void **)(a3 + 40),
                    id v25 = v24,
                    LOBYTE(v24) = sub_10056DE04((void (**)(char *, uint64_t))v24),
                    v25,
                    (v24 & 1) != 0))
              {
                id v26 = v14;
                id v27 = v44;
                id v28 = [v43 event];

                *a4 = v14;
                a4[1] = v44;
                a4[2] = v28;
                return;
              }
              if (qword_100907440 != -1) {
                swift_once();
              }
              uint64_t v37 = type metadata accessor for Logger();
              sub_10008E2DC(v37, (uint64_t)qword_100916CF0);
              id v38 = v14;
              os_log_type_t v39 = Logger.logObject.getter();
              os_log_type_t v40 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v39, v40))
              {
                char v41 = (uint8_t *)swift_slowAlloc();
                id v42 = (void *)swift_slowAlloc();
                *(_DWORD *)char v41 = 138543362;
                id v47 = [v38 objectID];
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                void *v42 = v47;

                _os_log_impl((void *)&_mh_execute_header, v39, v40, "Fetched reminder is not assigned to current user. Skipping {reminderID: %{public}@}", v41, 0xCu);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
              }
              goto LABEL_20;
            }
            uint64_t v29 = a4;

            uint64_t v36 = v14;
            unint64_t v14 = v21;
            id v9 = v19;
            id v13 = v36;
          }
          else
          {
LABEL_11:
            uint64_t v29 = a4;
          }
          id v30 = v9;

          id v9 = v14;
          id v13 = v30;
          a4 = v29;
        }

        id v9 = v13;
      }
    }
  }
  if (qword_100907440 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10008E2DC(v31, (uint64_t)qword_100916CF0);
  id v9 = v7;
  os_log_type_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v32, v33))
  {

LABEL_20:
    goto LABEL_21;
  }
  unint64_t v34 = (uint8_t *)swift_slowAlloc();
  os_log_type_t v45 = (void *)swift_slowAlloc();
  *(_DWORD *)unint64_t v34 = 138412290;
  id v35 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  void *v45 = v9;

  _os_log_impl((void *)&_mh_execute_header, v32, v33, "VehicleDataSourceAlarms: Failed to get REMReminder, REMAlarm or triggerEvent from cdTrigger -- skipping {cdTrigger: %@}", v34, 0xCu);
  sub_100094134((uint64_t *)&unk_10090A040);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_21:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

void sub_1003C0DC8(uint64_t a1@<X1>, void *a2@<X8>)
{
  id v38 = a2;
  uint64_t v4 = _s10PredicatesOMa(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(a1 + 24)];
  swift_storeEnumTagMultiPayload();
  id v8 = (void *)sub_10038F1F0();
  sub_1000C6DAC((uint64_t)v6);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  unint64_t v40 = inited;
  specialized Array._endMutation()();
  id v39 = v8;
  id v10 = (id)sub_1003BC124(v40, 0, 0, (uint64_t)v8, (unint64_t *)&qword_10090B040, (uint64_t)off_1008AA488, (int64_t)sub_10031DE40, (uint64_t *)&unk_10090B070, (uint64_t *)&unk_100916DD0);
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  uint64_t v11 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
    id v12 = v7;
LABEL_3:

    return;
  }
  unint64_t v13 = v11;
  uint64_t v14 = a1;
  id v15 = v38;
  id v36 = v10;
  id v16 = objc_allocWithZone((Class)REMRemindersDataView);
  id v37 = v7;
  id v35 = [v16 initWithStore:v7];
  unint64_t v40 = (unint64_t)_swiftEmptyArrayStorage;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v17 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  id v18 = v15;
  uint64_t v19 = v14;
  if (v17)
  {
    uint64_t v34 = v14;
    if (v17 < 1) {
      __break(1u);
    }
    for (uint64_t i = 0; i != v17; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(v13 + 8 * i + 32);
      }
      id v22 = v21;
      id v23 = [v21 remObjectID];

      if (v23)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    id v18 = v38;
    uint64_t v19 = v34;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v25 = [self defaultFetchOptions];
  unint64_t v40 = 0;
  id v12 = v35;
  id v26 = [v35 fetchRemindersWithObjectIDs:isa fetchOptions:v25 error:&v40];

  id v27 = (id)v40;
  if (!v26)
  {
    id v32 = (id)v40;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v10 = v37;
    goto LABEL_3;
  }
  sub_1000963CC(0, &qword_1009168E0);
  sub_1001207D4();
  unint64_t v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v29 = v27;

  swift_retain();
  sub_1003CB11C(v28, v19);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();

  swift_release();
  void *v18 = v31;
}

void sub_1003C1290(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v5 = *a1;
  id v6 = [*a1 contactHandles];
  if (v6)
  {
    id v7 = v6;
    id v8 = [v5 assignmentContext];
    id v9 = [v8 currentAssignment];

    if (!v9
      || (v9,
          id v10 = *(void **)(a2 + 40),
          id v11 = v10,
          LOBYTE(v10) = sub_10056DE04((void (**)(char *, uint64_t))v10),
          v11,
          (v10 & 1) != 0))
    {
      id v12 = [objc_allocWithZone((Class)REMAlarmContactTrigger) initWithContactRepresentation:v7];
      id v13 = [objc_allocWithZone((Class)REMAlarm) initWithTrigger:v12];

      *a3 = v5;
      a3[1] = v13;
      a3[2] = v7;
      id v14 = v5;
      return;
    }
    if (qword_100907440 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E2DC(v20, (uint64_t)qword_100916CF0);
    id v21 = v5;
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      id v25 = (void *)swift_slowAlloc();
      *(_DWORD *)id v24 = 138543362;
      id v27 = [v21 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v25 = v27;

      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Fetched reminder is not assigned to current user. Skipping {reminderID: %{public}@}", v24, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_16;
    }

LABEL_15:
    goto LABEL_16;
  }
  if (qword_100907440 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_100916CF0);
  id v7 = v5;
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v16, v17))
  {

    goto LABEL_15;
  }
  id v18 = (uint8_t *)swift_slowAlloc();
  uint64_t v19 = (void *)swift_slowAlloc();
  *(_DWORD *)id v18 = 138543362;
  id v26 = [v7 objectID];
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v19 = v26;

  _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetched reminder is missing contact handle. Skipping {reminderID: %{public}@}", v18, 0xCu);
  sub_100094134((uint64_t *)&unk_10090A040);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_16:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

uint64_t sub_1003C16A4()
{
  sub_10012227C(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned int *)(v0 + 88) | ((unint64_t)*(unsigned __int16 *)(v0 + 92) << 32));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDAlarmProducerDataSource()
{
  return self;
}

uint64_t sub_1003C1734@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1003C5360(a1, a2, (void (*)(void))sub_1003CB8DC, a3);
}

uint64_t sub_1003C174C@<X0>(NSObject *a1@<X0>, uint64_t a2@<X1>, objc_class **a3@<X8>)
{
  uint64_t v176 = a2;
  uint64_t v175 = (objc_class **)a3;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v177 = &v158[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v169 = &v158[-v8];
  __chkstk_darwin(v9);
  uint64_t v162 = &v158[-v10];
  __chkstk_darwin(v11);
  uint64_t v165 = &v158[-v12];
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v13 - 8);
  uint64_t v168 = &v158[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  os_log_type_t v17 = &v158[-v16];
  __chkstk_darwin(v18);
  uint64_t v20 = (long long *)&v158[-v19];
  uint64_t v21 = sub_100094134((uint64_t *)&unk_100913A40);
  uint64_t v174 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v178 = &v158[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  uint64_t v167 = &v158[-v24];
  __chkstk_darwin(v25);
  uint64_t v166 = &v158[-v26];
  __chkstk_darwin(v27);
  uint64_t v163 = &v158[-v28];
  __chkstk_darwin(v29);
  NSString v164 = &v158[-v30];
  __chkstk_darwin(v31);
  uint64_t v161 = &v158[-v32];
  __n128 v34 = __chkstk_darwin(v33);
  id v36 = (Class *)&v158[-v35];
  uint64_t v188 = v37;
  uint64_t v38 = *(int *)(v37 + 48);
  id v39 = &v158[v38 - v35];
  unint64_t v40 = (char *)a1 + v38;
  os_log_t v172 = a1;
  Class isa = a1->isa;
  Class v42 = a1[1].isa;
  *id v36 = isa;
  v36[1] = v42;
  uint64_t v179 = &v158[-v35];
  id v43 = *(void (**)(void, __n128))(v5 + 16);
  uint64_t v171 = v40;
  id v184 = (void (*)(void, void, void))v43;
  uint64_t v185 = v5 + 16;
  v43(v39, v34);
  uint64_t v187 = v5;
  os_log_type_t v45 = *(void (**)(void, void))(v5 + 8);
  uint64_t v44 = v5 + 8;
  uint64_t v46 = isa;
  id v47 = v42;
  uint64_t v189 = v4;
  uint64_t v180 = v45;
  v45(v39, v4);
  uint64_t v48 = qword_100907440;
  uint64_t v49 = v46;
  uint64_t v50 = v47;
  if (v48 != -1) {
    swift_once();
  }
  uint64_t v51 = type metadata accessor for Logger();
  uint64_t v52 = sub_10008E2DC(v51, (uint64_t)qword_100916CF0);
  os_log_type_t v53 = v50;
  unint64_t v54 = v49;
  id v55 = v53;
  Swift::String v56 = v54;
  id v57 = v55;
  uint64_t v182 = v52;
  uint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.info.getter();
  int v60 = v59;
  BOOL v61 = os_log_type_enabled(v58, v59);
  uint64_t v183 = v20;
  uint64_t v181 = v44;
  if (v61)
  {
    uint64_t v62 = swift_slowAlloc();
    int v159 = v60;
    uint64_t v63 = v62;
    uint64_t v64 = swift_slowAlloc();
    uint64_t v170 = v17;
    uint64_t v65 = (void *)v64;
    uint64_t v160 = swift_slowAlloc();
    uint64_t v192 = v160;
    *(_DWORD *)uint64_t v63 = 138543874;
    id v66 = [(objc_class *)v57 objectID];
    *(void *)&v190[0] = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v65 = v66;
    *(_WORD *)(v63 + 12) = 2082;
    if ([(objc_class *)v57 isSnooze]) {
      uint64_t v67 = 89;
    }
    else {
      uint64_t v67 = 78;
    }
    *(void *)&v190[0] = sub_1000C51B8(v67, 0xE100000000000000, &v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 22) = 2082;
    if ([(objc_class *)v56 isRecurrent]) {
      uint64_t v68 = 89;
    }
    else {
      uint64_t v68 = 78;
    }
    *(void *)&v190[0] = sub_1000C51B8(v68, 0xE100000000000000, &v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v159, "RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter alarm {alarmID: %{public}@ isSnooze: %{public}s isRecurring: %{public}s}", (uint8_t *)v63, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    os_log_type_t v17 = v170;
    uint64_t v20 = v183;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v69 = v187;
  uint64_t v70 = v184;
  id v71 = v57;
  uint64_t v72 = v189;
  uint64_t v170 = *(unsigned char **)(v187 + 56);
  ((void (*)(long long *, uint64_t, uint64_t, uint64_t))v170)(v20, 1, 1, v189);
  unsigned __int8 v73 = [(objc_class *)v71 isSnooze];
  uint64_t v173 = v56;
  uint64_t v186 = v71;
  if ((v73 & 1) != 0 || ![(objc_class *)v56 isOverdue])
  {
    Swift::String v78 = (uint64_t *)&unk_100909A40;
    id v79 = v20;
LABEL_18:
    sub_1000966BC((uint64_t)v79, v78);
    uint64_t v77 = v20;
    goto LABEL_19;
  }
  id v195 = [(objc_class *)v71 trigger];
  sub_1000963CC(0, (unint64_t *)&unk_100911060);
  sub_100094134((uint64_t *)&unk_100916DF0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v191 = 0;
    memset(v190, 0, sizeof(v190));
    sub_1000966BC((uint64_t)v20, (uint64_t *)&unk_100909A40);
    Swift::String v78 = &qword_100911070;
    id v79 = v190;
    goto LABEL_18;
  }
  sub_1000967D4(v190, (uint64_t)&v192);
  uint64_t v74 = v193;
  uint64_t v75 = v194;
  sub_1000C0DE0(&v192, v193);
  uint64_t v76 = v74;
  uint64_t v69 = v187;
  (*(void (**)(objc_class *, uint64_t, uint64_t, uint64_t))(v75 + 16))(v56, v176, v76, v75);
  sub_1000966BC((uint64_t)v20, (uint64_t *)&unk_100909A40);
  uint64_t v77 = v20;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v69 + 48))(v17, 1, v72) == 1)
  {
    sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909A40);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v192);
    uint64_t v70 = v184;
LABEL_19:
    uint64_t v80 = v188;
    id v81 = (char *)v179 + *(int *)(v188 + 48);
    long long v82 = v171;
    v70(v81, v171, v72);
    uint64_t v165 = *(unsigned char **)(v69 + 32);
    ((void (*)(long long *, char *, uint64_t))v165)(v77, v81, v72);
    ((void (*)(long long *, void, uint64_t, uint64_t))v170)(v77, 0, 1, v72);
    uint64_t v83 = *(int *)(v80 + 48);
    uint64_t v84 = (uint64_t)v166;
    uint64_t v85 = (char *)v166 + v83;
    Class v86 = v172->isa;
    Class v87 = v172[1].isa;
    v166->Class isa = v172->isa;
    *(void *)(v84 + 8) = v87;
    v70(v85, v82, v72);
    os_log_type_t v88 = v167;
    sub_1000BF710(v84, (uint64_t)v167, (uint64_t *)&unk_100913A40);
    unint64_t v89 = v178;
    sub_100096408(v84, (uint64_t)v178, (uint64_t *)&unk_100913A40);
    float v90 = v186;
    long long v91 = v86;
    uint64_t v92 = v87;
    uint64_t v93 = Logger.logObject.getter();
    uint64_t v94 = v70;
    os_log_type_t v95 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v93, v95))
    {
      uint64_t v96 = swift_slowAlloc();
      uint64_t v97 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v96 = 138543618;
      uint64_t v98 = v94;
      id v99 = [v90 objectID];
      os_log_t v172 = v93;
      uint64_t v100 = v88;
      id v101 = v99;
      uint64_t v192 = (uint64_t)v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v97 = v101;

      *(_WORD *)(v96 + 12) = 2114;
      uint64_t v102 = v189;
      uint64_t v103 = *(int *)(v188 + 48);
      uint64_t v104 = v179;
      Swift::Int v105 = (char *)v179 + v103;
      *uint64_t v179 = *v100;
      v98((char *)v104 + v103, (char *)v100 + v103, v102);
      Class v106 = Date._bridgeToObjectiveC()().super.isa;
      v180(v105, v189);
      uint64_t v192 = (uint64_t)v106;
      uint64_t v72 = v189;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v97[1] = v106;
      sub_1000966BC((uint64_t)v178, (uint64_t *)&unk_100913A40);
      sub_1000966BC((uint64_t)v100, (uint64_t *)&unk_100913A40);
      uint64_t v93 = v172;
      _os_log_impl((void *)&_mh_execute_header, v172, v95, "RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}", (uint8_t *)v96, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1000966BC((uint64_t)v89, (uint64_t *)&unk_100913A40);
      sub_1000966BC((uint64_t)v88, (uint64_t *)&unk_100913A40);
    }

    uint64_t v107 = (uint64_t)v183;
    uint64_t v108 = v177;
    uint64_t v109 = v176;
    uint64_t v110 = v169;
    uint64_t v111 = (uint64_t)v168;
    uint64_t v112 = (void (*)(void, void, void))v165;
    goto LABEL_23;
  }
  uint64_t v112 = *(void (**)(void, void, void))(v69 + 32);
  uint64_t v130 = v165;
  v112(v165, v17, v72);
  uint64_t v131 = v184;
  v184(v77, v130, v72);
  ((void (*)(long long *, void, uint64_t, uint64_t))v170)(v77, 0, 1, v72);
  uint64_t v132 = (uint64_t)v161;
  uint64_t v133 = (char *)v161 + *(int *)(v188 + 48);
  Class v134 = v172->isa;
  Class v135 = v172[1].isa;
  v161->Class isa = v172->isa;
  *(void *)(v132 + 8) = v135;
  v131(v133, v171, v72);
  sub_1000BF710(v132, (uint64_t)v164, (uint64_t *)&unk_100913A40);
  sub_100096408(v132, (uint64_t)v163, (uint64_t *)&unk_100913A40);
  uint64_t v136 = v162;
  v131(v162, v130, v72);
  uint64_t v137 = v186;
  uint64_t v138 = v134;
  uint64_t v139 = v135;
  uint64_t v140 = Logger.logObject.getter();
  os_log_type_t v141 = static os_log_type_t.info.getter();
  int v142 = v141;
  if (os_log_type_enabled(v140, v141))
  {
    uint64_t v143 = swift_slowAlloc();
    uint64_t v144 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v143 = 138543874;
    LODWORD(v178) = v142;
    id v145 = [v137 objectID];
    *(void *)&v190[0] = v145;
    os_log_t v172 = v140;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v144 = v145;
    uint64_t v146 = v144;
    uint64_t v171 = v144;

    *(_WORD *)(v143 + 12) = 2114;
    uint64_t v147 = *(int *)(v188 + 48);
    uint64_t v148 = v179;
    uint64_t v149 = (char *)v179 + v147;
    int v150 = v164;
    uint64_t v151 = (char *)v164 + v147;
    *uint64_t v179 = *v164;
    v184((char *)v148 + v147, v151, v72);
    uint64_t v152 = v112;
    Class v153 = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v154 = v180;
    v180(v149, v189);
    *(void *)&v190[0] = v153;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v146[1] = v153;
    uint64_t v112 = v152;
    uint64_t v72 = v189;
    sub_1000966BC((uint64_t)v163, (uint64_t *)&unk_100913A40);
    sub_1000966BC((uint64_t)v150, (uint64_t *)&unk_100913A40);
    *(_WORD *)(v143 + 22) = 2114;
    uint64_t v155 = v162;
    Class v156 = Date._bridgeToObjectiveC()().super.isa;
    *(void *)&v190[0] = v156;
    uint64_t v157 = v172;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v171[2] = v156;
    v154(v155, v72);
    _os_log_impl((void *)&_mh_execute_header, v157, (os_log_type_t)v178, "RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter is calculating fireDate for overdue recurring alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ nextFireDate: %{public}@}", (uint8_t *)v143, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v154 = v180;
    v180(v136, v72);
    sub_1000966BC((uint64_t)v163, (uint64_t *)&unk_100913A40);
    sub_1000966BC((uint64_t)v164, (uint64_t *)&unk_100913A40);

    uint64_t v157 = v137;
  }
  uint64_t v108 = v177;
  uint64_t v109 = v176;
  uint64_t v110 = v169;

  v154(v165, v72);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v192);
  uint64_t v107 = (uint64_t)v183;
  uint64_t v111 = (uint64_t)v168;
LABEL_23:
  sub_1000BF710(v107, v111, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v187 + 48))(v111, 1, v72) == 1)
  {
    sub_1000966BC(v111, (uint64_t *)&unk_100909A40);
  }
  else
  {
    v112(v110, v111, v72);
    if (static Date.> infix(_:_:)())
    {
      sub_1000966BC(v107, (uint64_t *)&unk_100909A40);
      uint64_t v113 = v173;

      uint64_t v114 = v186;
      uint64_t v115 = v188;
      uint64_t v116 = v175;
      uint64_t v117 = (char *)v175 + *(int *)(v188 + 48);
      char *v175 = v113;
      v116[1] = v114;
      v112(v117, v110, v72);
      return (*(uint64_t (**)(objc_class **, void, uint64_t, uint64_t))(v174 + 56))((objc_class **)v116, 0, 1, v115);
    }
    v180(v110, v72);
  }
  v184(v108, v109, v72);
  uint64_t v119 = v186;
  uint64_t v120 = Logger.logObject.getter();
  os_log_type_t v121 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v120, v121))
  {
    uint64_t v122 = swift_slowAlloc();
    uint64_t v123 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v122 = 138543618;
    id v124 = [v119 objectID];
    uint64_t v192 = (uint64_t)v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v123 = v124;

    *(_WORD *)(v122 + 12) = 2114;
    uint64_t v125 = v177;
    Class v126 = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v192 = (uint64_t)v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v123[1] = v126;
    v180(v125, v189);
    _os_log_impl((void *)&_mh_execute_header, v120, v121, "RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter fireDate is earlier than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}", (uint8_t *)v122, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v127 = v173;
    uint64_t v128 = (uint64_t)v183;
  }
  else
  {

    uint64_t v129 = v173;
    v180(v108, v72);

    uint64_t v128 = v107;
  }
  sub_1000966BC(v128, (uint64_t *)&unk_100909A40);
  return (*(uint64_t (**)(objc_class **, uint64_t, uint64_t, uint64_t))(v174 + 56))(v175, 1, 1, v188);
}

uint64_t sub_1003C29F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v214 = a2;
  uint64_t v204 = a3;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v198 = (char *)&v188 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v188 = (char *)&v188 - v8;
  __chkstk_darwin(v9);
  os_log_t v202 = (char *)&v188 - v10;
  __chkstk_darwin(v11);
  uint64_t v191 = (char *)&v188 - v12;
  __chkstk_darwin(v13);
  uint64_t v189 = (char *)&v188 - v14;
  __chkstk_darwin(v15);
  os_log_type_t v17 = (char *)&v188 - v16;
  __chkstk_darwin(v18);
  uint64_t v193 = (char *)&v188 - v19;
  __chkstk_darwin(v20);
  id v195 = (char *)&v188 - v21;
  uint64_t v22 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v22 - 8);
  uint64_t v194 = (char *)&v188 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v207 = (uint64_t)&v188 - v25;
  __chkstk_darwin(v26);
  uint64_t v201 = (void (*)(uint64_t, char *, uint64_t))((char *)&v188 - v27);
  __chkstk_darwin(v28);
  uint64_t v221 = (char *)&v188 - v29;
  uint64_t v30 = sub_100094134((uint64_t *)&unk_100913A40);
  uint64_t v203 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v188 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  int v200 = (char *)&v188 - v34;
  __chkstk_darwin(v35);
  uint64_t v199 = (char **)((char *)&v188 - v36);
  __chkstk_darwin(v37);
  os_log_t v209 = (os_log_t)((char *)&v188 - v38);
  __chkstk_darwin(v39);
  uint64_t v192 = (_OWORD *)((char *)&v188 - v40);
  __chkstk_darwin(v41);
  uint64_t v190 = (char **)((char *)&v188 - v42);
  __n128 v44 = __chkstk_darwin(v43);
  uint64_t v46 = (char **)((char *)&v188 - v45);
  uint64_t v223 = v47;
  uint64_t v48 = *(int *)(v47 + 48);
  uint64_t v49 = (char *)&v188 + v48 - v45;
  uint64_t v50 = a1 + v48;
  uint64_t v206 = a1;
  uint64_t v51 = *(void **)a1;
  uint64_t v52 = *(void **)(a1 + 8);
  *uint64_t v46 = v51;
  v46[1] = v52;
  id v213 = (_OWORD *)((char *)&v188 - v45);
  os_log_type_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v205 = v50;
  uint64_t v218 = v53;
  uint64_t v219 = (void *)(v5 + 16);
  ((void (*)(char *, __n128))v53)(v49, v44);
  unint64_t v54 = *(void (**)(char *, uint64_t))(v5 + 8);
  id v55 = v51;
  id v56 = v52;
  uint64_t v215 = v54;
  uint64_t v216 = v5 + 8;
  v54(v49, v4);
  uint64_t v57 = qword_100907440;
  id v58 = v56;
  if (v57 != -1) {
    swift_once();
  }
  uint64_t v197 = v5;
  uint64_t v220 = v5;
  uint64_t v59 = type metadata accessor for Logger();
  uint64_t v60 = sub_10008E2DC(v59, (uint64_t)qword_100916CF0);
  id v61 = v58;
  id v62 = v55;
  id v63 = v61;
  id v64 = v62;
  uint64_t v65 = v63;
  uint64_t v217 = v60;
  id v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.info.getter();
  BOOL v68 = os_log_type_enabled(v66, v67);
  uint64_t v224 = v65;
  uint64_t v222 = v4;
  id v208 = v17;
  id v210 = v64;
  id v212 = v32;
  if (v68)
  {
    uint64_t v69 = swift_slowAlloc();
    uint64_t v70 = v64;
    id v71 = (void *)swift_slowAlloc();
    uint64_t v211 = (objc_class *)swift_slowAlloc();
    Class v227 = v211;
    *(_DWORD *)uint64_t v69 = 138543874;
    id v72 = [v65 objectID];
    *(void *)&v225[0] = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v71 = v72;
    *(_WORD *)(v69 + 12) = 2082;
    if ([v224 isSnooze]) {
      uint64_t v73 = 89;
    }
    else {
      uint64_t v73 = 78;
    }
    *(void *)&v225[0] = sub_1000C51B8(v73, 0xE100000000000000, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v69 + 22) = 2082;
    if ([v70 isRecurrent]) {
      uint64_t v74 = 89;
    }
    else {
      uint64_t v74 = 78;
    }
    *(void *)&v225[0] = sub_1000C51B8(v74, 0xE100000000000000, (uint64_t *)&v227);
    uint64_t v65 = v224;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v75 = &selRef_willSave;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore alarm {alarmID: %{public}@ isSnooze: %{public}s isRecurring: %{public}s}", (uint8_t *)v69, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v222;
    swift_slowDealloc();

    uint64_t v76 = (uint64_t)v221;
  }
  else
  {

    uint64_t v76 = (uint64_t)v221;
    uint64_t v75 = &selRef_willSave;
  }
  uint64_t v77 = v220;
  uint64_t v78 = v220 + 56;
  uint64_t v211 = *(objc_class **)(v220 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v211)(v76, 1, 1, v4);
  unsigned __int8 v79 = [v65 v75[198]];
  uint64_t v80 = v218;
  os_log_t v81 = v209;
  uint64_t v196 = v78;
  if (v79)
  {
    uint64_t v82 = v4;
    uint64_t v83 = v218;
    uint64_t v84 = (uint64_t *)&unk_100909A40;
    uint64_t v85 = (long long *)v76;
LABEL_18:
    sub_1000966BC((uint64_t)v85, v84);
    float v90 = v213;
LABEL_19:
    uint64_t v91 = v223;
    uint64_t v92 = (char *)v90 + *(int *)(v223 + 48);
    uint64_t v93 = v205;
    v83(v92, v205, v82);
    uint64_t v201 = *(void (**)(uint64_t, char *, uint64_t))(v77 + 32);
    v201(v76, v92, v82);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v211)(v76, 0, 1, v82);
    uint64_t v94 = (uint64_t)v199;
    os_log_type_t v95 = (char *)v199 + *(int *)(v91 + 48);
    uint64_t v96 = *(void **)v206;
    uint64_t v97 = *(void **)(v206 + 8);
    *uint64_t v199 = *(void *)v206;
    *(void *)(v94 + 8) = v97;
    v83(v95, v93, v82);
    uint64_t v98 = v200;
    sub_1000BF710(v94, (uint64_t)v200, (uint64_t *)&unk_100913A40);
    uint64_t v99 = (uint64_t)v212;
    sub_100096408(v94, (uint64_t)v212, (uint64_t *)&unk_100913A40);
    uint64_t v100 = v224;
    id v101 = v96;
    id v102 = v97;
    uint64_t v103 = Logger.logObject.getter();
    uint64_t v104 = v83;
    os_log_type_t v105 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v103, v105))
    {
      uint64_t v106 = swift_slowAlloc();
      os_log_t v209 = v103;
      uint64_t v107 = v106;
      uint64_t v108 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v107 = 138543618;
      uint64_t v109 = (void (*)(char *, char *, uint64_t))v104;
      Class v110 = (Class)[v100 objectID];
      Class v227 = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v108 = v110;

      *(_WORD *)(v107 + 12) = 2114;
      uint64_t v111 = v222;
      uint64_t v112 = *(int *)(v223 + 48);
      uint64_t v113 = (char *)v213;
      uint64_t v114 = (char *)v213 + v112;
      *id v213 = *(_OWORD *)v98;
      v109(&v113[v112], &v98[v112], v111);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      v215(v114, v222);
      Class v227 = isa;
      uint64_t v76 = (uint64_t)v221;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v108[1] = isa;
      sub_1000966BC((uint64_t)v212, (uint64_t *)&unk_100913A40);
      sub_1000966BC((uint64_t)v98, (uint64_t *)&unk_100913A40);
      os_log_t v116 = v209;
      _os_log_impl((void *)&_mh_execute_header, v209, v105, "RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}", (uint8_t *)v107, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      uint64_t v4 = v222;
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v117 = v208;
      uint64_t v118 = v202;
    }
    else
    {

      sub_1000966BC(v99, (uint64_t *)&unk_100913A40);
      sub_1000966BC((uint64_t)v98, (uint64_t *)&unk_100913A40);

      uint64_t v117 = v208;
      uint64_t v118 = v202;
      uint64_t v76 = (uint64_t)v221;
      uint64_t v4 = v82;
    }
    goto LABEL_26;
  }
  id v230 = [v65 trigger];
  sub_1000963CC(0, (unint64_t *)&unk_100911060);
  sub_100094134((uint64_t *)&unk_100916DF0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v82 = v4;
    uint64_t v83 = v80;
    uint64_t v226 = 0;
    memset(v225, 0, sizeof(v225));
    sub_1000966BC(v76, (uint64_t *)&unk_100909A40);
    uint64_t v84 = &qword_100911070;
    uint64_t v85 = v225;
    goto LABEL_18;
  }
  sub_1000967D4(v225, (uint64_t)&v227);
  uint64_t v86 = v228;
  uint64_t v87 = v229;
  sub_1000C0DE0(&v227, v228);
  uint64_t v88 = v86;
  uint64_t v89 = (uint64_t)v201;
  (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v87 + 24))(v210, v214, v88, v87);
  uint64_t v77 = v220;
  sub_1000966BC(v76, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v89, 1, v4) == 1)
  {
    uint64_t v82 = v4;
    uint64_t v83 = v80;
    sub_1000966BC(v89, (uint64_t *)&unk_100909A40);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v227);
    float v90 = v213;
    goto LABEL_19;
  }
  uint64_t v119 = v195;
  uint64_t v201 = *(void (**)(uint64_t, char *, uint64_t))(v77 + 32);
  v201((uint64_t)v195, (char *)v89, v4);
  v80((char *)v76, (uint64_t)v119, v4);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v211)(v76, 0, 1, v4);
  uint64_t v120 = (uint64_t)v190;
  os_log_type_t v121 = (char *)v190 + *(int *)(v223 + 48);
  uint64_t v123 = *(void **)v206;
  id v212 = *(id *)(v206 + 8);
  id v122 = v212;
  void *v190 = v123;
  *(void *)(v120 + 8) = v122;
  v80(v121, v205, v4);
  sub_1000BF710(v120, (uint64_t)v192, (uint64_t *)&unk_100913A40);
  sub_100096408(v120, (uint64_t)v81, (uint64_t *)&unk_100913A40);
  v80(v193, (uint64_t)v119, v4);
  id v124 = v224;
  id v125 = v123;
  id v126 = v212;
  uint64_t v127 = Logger.logObject.getter();
  os_log_type_t v128 = static os_log_type_t.info.getter();
  int v129 = v128;
  if (os_log_type_enabled(v127, v128))
  {
    uint64_t v130 = swift_slowAlloc();
    uint64_t v131 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v130 = 138543874;
    LODWORD(v212) = v129;
    id v132 = [v124 objectID];
    *(void *)&v225[0] = v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v131 = v132;

    *(_WORD *)(v130 + 12) = 2114;
    uint64_t v133 = v222;
    uint64_t v134 = *(int *)(v223 + 48);
    Class v135 = (char *)v213;
    uint64_t v136 = (char *)v213 + v134;
    uint64_t v137 = v192;
    uint64_t v138 = (char *)v192 + v134;
    *id v213 = *v192;
    v218(&v135[v134], (uint64_t)v138, v133);
    Class v139 = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v140 = v215;
    v215(v136, v222);
    *(void *)&v225[0] = v139;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v131[1] = v139;
    sub_1000966BC((uint64_t)v209, (uint64_t *)&unk_100913A40);
    sub_1000966BC((uint64_t)v137, (uint64_t *)&unk_100913A40);
    *(_WORD *)(v130 + 22) = 2114;
    os_log_type_t v141 = v193;
    Class v142 = Date._bridgeToObjectiveC()().super.isa;
    *(void *)&v225[0] = v142;
    uint64_t v76 = (uint64_t)v221;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v131[2] = v142;
    v140(v141, v222);
    _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v212, "RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore is calculating fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ previousFireDate: %{public}@}", (uint8_t *)v130, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    uint64_t v4 = v222;
    swift_slowDealloc();
    uint64_t v143 = v140;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v143 = v215;
    v215(v193, v4);
    sub_1000966BC((uint64_t)v81, (uint64_t *)&unk_100913A40);
    sub_1000966BC((uint64_t)v192, (uint64_t *)&unk_100913A40);

    uint64_t v127 = v124;
  }
  uint64_t v144 = v202;

  v143(v195, v4);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v227);
  uint64_t v117 = v208;
  uint64_t v118 = v144;
LABEL_26:
  uint64_t v145 = v76;
  uint64_t v146 = v207;
  sub_1000BF710(v76, v207, (uint64_t *)&unk_100909A40);
  uint64_t v147 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v220 + 48);
  if (v147(v146, 1, v4) == 1)
  {
    sub_1000966BC(v146, (uint64_t *)&unk_100909A40);
LABEL_30:
    uint64_t v149 = v198;
    v218(v198, v214, v4);
    int v150 = v224;
    uint64_t v151 = Logger.logObject.getter();
    uint64_t v152 = v4;
    os_log_type_t v153 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v151, v153))
    {
      uint64_t v154 = swift_slowAlloc();
      uint64_t v155 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v154 = 138543618;
      Class v156 = (Class)[v150 objectID];
      Class v227 = v156;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v155 = v156;

      *(_WORD *)(v154 + 12) = 2114;
      Class v157 = Date._bridgeToObjectiveC()().super.isa;
      Class v227 = v157;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v155[1] = v157;
      v215(v149, v222);
      _os_log_impl((void *)&_mh_execute_header, v151, v153, "RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore fireDate is later than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}", (uint8_t *)v154, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_32:
      uint64_t v158 = (uint64_t)v221;
LABEL_35:
      sub_1000966BC(v158, (uint64_t *)&unk_100909A40);
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v203 + 56))(v204, 1, 1, v223);
    }

    v215(v149, v152);
    goto LABEL_34;
  }
  uint64_t v148 = v118;
  v201((uint64_t)v117, (char *)v146, v4);
  sub_1003CB8F8((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    v215(v117, v4);
    goto LABEL_30;
  }
  id v160 = [v224 acknowledgedDate];
  if (!v160)
  {
    uint64_t v163 = (uint64_t)v194;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v211)(v194, 1, 1, v4);
    goto LABEL_42;
  }
  uint64_t v161 = v160;
  uint64_t v162 = v191;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v163 = (uint64_t)v194;
  v201((uint64_t)v194, v162, v4);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v211)(v163, 0, 1, v4);
  if (v147(v163, 1, v4) == 1)
  {
LABEL_42:
    uint64_t v182 = v224;

    sub_1000966BC(v76, (uint64_t *)&unk_100909A40);
    goto LABEL_43;
  }
  NSString v164 = v189;
  v201((uint64_t)v189, (char *)v163, v4);
  if (static Date.< infix(_:_:)())
  {
    uint64_t v165 = v148;
    uint64_t v166 = (void (*)(char *, char *, uint64_t))v218;
    v218(v148, (uint64_t)v117, v4);
    uint64_t v167 = v188;
    v166(v188, v164, v4);
    uint64_t v168 = v224;
    uint64_t v169 = Logger.logObject.getter();
    os_log_type_t v170 = static os_log_type_t.info.getter();
    int v171 = v170;
    if (os_log_type_enabled(v169, v170))
    {
      uint64_t v172 = swift_slowAlloc();
      uint64_t v219 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v172 = 138543874;
      uint64_t v224 = v169;
      Class v173 = (Class)[v168 objectID];
      Class v227 = v173;
      LODWORD(v220) = v171;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v174 = v219;
      *uint64_t v219 = v173;

      *(_WORD *)(v172 + 12) = 2114;
      Class v175 = Date._bridgeToObjectiveC()().super.isa;
      Class v227 = v175;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v174[1] = v175;
      uint64_t v176 = v4;
      uint64_t v177 = v215;
      v215(v165, v176);
      *(_WORD *)(v172 + 22) = 2114;
      Class v178 = Date._bridgeToObjectiveC()().super.isa;
      Class v227 = v178;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v174[2] = v178;
      uint64_t v179 = v167;
      uint64_t v180 = v222;
      v177(v179, v222);
      uint64_t v181 = v224;
      _os_log_impl((void *)&_mh_execute_header, v224, (os_log_type_t)v220, "RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore fireDate is earlier than ackDate for alarm. Skipping {alarmID: %{public}@ finalFireDate: %{public}@ ackDate: %{public}@}", (uint8_t *)v172, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v177(v189, v180);
      v177(v208, v180);
      goto LABEL_32;
    }

    uint64_t v186 = v167;
    uint64_t v187 = v215;
    v215(v186, v4);
    v187(v165, v4);

    v187(v164, v4);
    v187(v117, v4);
LABEL_34:
    uint64_t v158 = v145;
    goto LABEL_35;
  }
  uint64_t v182 = v224;

  v215(v164, v4);
  uint64_t v163 = v76;
LABEL_43:
  sub_1000966BC(v163, (uint64_t *)&unk_100909A40);
  uint64_t v183 = v223;
  id v184 = v204;
  uint64_t v185 = (char *)v204 + *(int *)(v223 + 48);
  *uint64_t v204 = v210;
  v184[1] = v182;
  v201((uint64_t)v185, v117, v4);
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v203 + 56))(v184, 0, 1, v183);
}

void sub_1003C41E0(uint64_t a1@<X1>, void *a2@<X8>)
{
  id v5 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(a1 + 24)];
  uint64_t v6 = (void *)sub_1002316A8((void *)3, 0xA0u);
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  unint64_t v34 = inited;
  specialized Array._endMutation()();
  uint64_t v8 = (void *)sub_1003BC124(inited, 0, 0, (uint64_t)v6, (unint64_t *)&unk_100910DD0, (uint64_t)off_1008AA400, (int64_t)sub_10031EC50, &qword_100913980, &qword_100916DE0);
  swift_bridgeObjectRelease();
  id v9 = [self daemonUserDefaults];
  unsigned __int8 v10 = [v9 disableAlarmEngineDataSourcePrefetching];

  if ((v10 & 1) == 0)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v8 setRelationshipKeyPathsForPrefetching:isa];
  }
  sub_1000963CC(0, (unint64_t *)&unk_100910DD0);
  unint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
    id v13 = v5;
    id v5 = v8;
LABEL_5:

    return;
  }
  unint64_t v14 = v12;
  uint64_t v33 = v8;
  uint64_t v31 = a1;
  unint64_t v34 = (unint64_t)_swiftEmptyArrayStorage;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v32 = a2;
    if (!v15) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v32 = a2;
    if (!v15) {
      goto LABEL_23;
    }
  }
  if (v15 < 1) {
    __break(1u);
  }
  for (uint64_t i = 0; i != v15; ++i)
  {
    if ((v14 & 0xC000000000000001) != 0) {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v17 = *(id *)(v14 + 8 * i + 32);
    }
    uint64_t v18 = v17;
    id v19 = [v17 alarm];
    if (v19
      && (uint64_t v20 = v19, v21 = [v19 reminder], v20, v21))
    {
      id v22 = [v21 remObjectID];

      if (v22)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    else
    {
    }
  }
LABEL_23:
  swift_bridgeObjectRelease();
  id v13 = [objc_allocWithZone((Class)REMRemindersDataView) initWithStore:v5];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  Class v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v24 = [self defaultFetchOptions];
  unint64_t v34 = 0;
  id v25 = [v13 fetchRemindersWithObjectIDs:v23 fetchOptions:v24 error:&v34];

  id v26 = (id)v34;
  if (!v25)
  {
    id v30 = (id)v34;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_5;
  }
  sub_1000963CC(0, &qword_1009168E0);
  sub_1001207D4();
  uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v28 = v26;

  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v29 = sub_1003CB484(v14, v27, v31, (void (*)(id **, uint64_t, uint64_t))sub_1003C4724);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  swift_release();

  *uint64_t v32 = v29;
}

uint64_t sub_1003C4724@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v64 = a4;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)&double v12 = __chkstk_darwin(v10).n128_u64[0];
  unint64_t v14 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = *a1;
  id v16 = [*a1 alarm:v12];
  if (!v16) {
    goto LABEL_15;
  }
  id v17 = v16;
  uint64_t v63 = v11;
  id v18 = [v16 reminder];
  if (!v18) {
    goto LABEL_14;
  }
  id v19 = v18;
  id v20 = [v18 remObjectID];

  if (!v20) {
    goto LABEL_14;
  }
  id v21 = v20;
  id v22 = sub_1002F0054(v21, a2);

  if (!v22)
  {

    goto LABEL_15;
  }
  id v23 = [v22 alarms];
  if (!v23)
  {

LABEL_13:
LABEL_14:

    goto LABEL_15;
  }
  id v24 = v23;
  id v62 = v21;
  sub_1000963CC(0, &qword_10090C4B8);
  unint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v17 = v17;
  uint64_t v26 = v65;
  uint64_t v27 = sub_1003CABA8(v25, v17);
  uint64_t v65 = v26;
  swift_bridgeObjectRelease();

  if (!v27)
  {

    goto LABEL_13;
  }
  id v71 = [v27 trigger];
  sub_1000963CC(0, (unint64_t *)&unk_100911060);
  sub_100094134((uint64_t *)&unk_100916DF0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v67 = 0;
    memset(v66, 0, sizeof(v66));

    sub_1000966BC((uint64_t)v66, &qword_100911070);
    goto LABEL_15;
  }
  id v60 = v27;
  id v61 = v17;
  sub_1000967D4(v66, (uint64_t)v68);
  uint64_t v28 = v69;
  uint64_t v29 = v70;
  sub_1000C0DE0(v68, v69);
  (*(void (**)(void *, uint64_t, uint64_t))(v29 + 8))(v22, v28, v29);
  uint64_t v30 = v63;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v9, 1, v10) == 1)
  {

    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909A40);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v68);
LABEL_15:
    if (qword_100907440 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E2DC(v31, (uint64_t)qword_100916CF0);
    uint64_t v32 = v15;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 138412290;
      v68[0] = v32;
      uint64_t v37 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v36 = v32;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "TimeDataSourceAlarms: Failed to get REMReminder, REMAlarm or triggerEvent from cdTrigger -- skipping {cdTrigger: %@}", v35, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v33 = v32;
    }

    uint64_t v38 = sub_100094134((uint64_t *)&unk_100913A40);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v64, 1, 1, v38);
  }
  uint64_t v40 = v9;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v41(v14, v40, v10);
  id v42 = [v22 assignmentContext];
  id v43 = [v42 currentAssignment];

  if (v43
    && (v43,
        __n128 v44 = *(void **)(a3 + 40),
        id v45 = v44,
        LOBYTE(v44) = sub_10056DE04((void (**)(char *, uint64_t))v44),
        v45,
        uint64_t v46 = v63,
        (v44 & 1) == 0))
  {
    if (qword_100907440 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E2DC(v51, (uint64_t)qword_100916CF0);
    id v52 = v22;
    os_log_type_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v53, v54))
    {
      id v55 = (uint8_t *)swift_slowAlloc();
      id v56 = (void *)swift_slowAlloc();
      *(_DWORD *)id v55 = 138543362;
      v59[1] = v55 + 4;
      id v57 = [v52 objectID];
      *(void *)&v66[0] = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v56 = v57;

      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Fetched reminder is not assigned to current user. Skipping {reminderID: %{public}@}", v55, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v63 + 8))(v14, v10);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v10);
    }
    uint64_t v58 = sub_100094134((uint64_t *)&unk_100913A40);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v64, 1, 1, v58);
  }
  else
  {

    uint64_t v47 = sub_100094134((uint64_t *)&unk_100913A40);
    uint64_t v48 = v64;
    uint64_t v49 = (char *)v64 + *(int *)(v47 + 48);
    id v50 = v60;
    *id v64 = v22;
    v48[1] = v50;
    v41(v49, v14, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v48, 0, 1, v47);
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v68);
}

void sub_1003C4F68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  id v7 = *(id *)(a1 + 16);
  id v8 = [v7 phones];
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = sub_100381614(v9, a2);
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
  {

    return;
  }
  uint64_t v34 = a4;
  id v35 = v7;
  id v10 = [v7 phones];
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = v11 + 40;
    do
    {
      id v14 = objc_allocWithZone((Class)CNPhoneNumber);
      swift_bridgeObjectRetain();
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v16 = [v14 initWithStringValue:v15];

      if (v16)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v13 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a3 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    if (v17) {
      goto LABEL_13;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v28 = [v35 emails];
    uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100381614(v29, v34);
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v17) {
    goto LABEL_32;
  }
LABEL_13:
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v19 = 0;
  unint64_t v20 = a3 & 0xC000000000000001;
  uint64_t v32 = (char *)(a3 + 32);
  uint64_t v33 = a3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v30 = a3 & 0xC000000000000001;
  uint64_t v31 = v17;
  while (1)
  {
    if (v20)
    {
      id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_20;
    }
    if (v19 >= *(void *)(v33 + 16)) {
      break;
    }
    id v21 = *(id *)&v32[8 * v19];
LABEL_20:
    a3 = (unint64_t)v21;
    if (__OFADD__(v19++, 1)) {
      goto LABEL_35;
    }
    if (v18)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = 4;
      while (1)
      {
        id v24 = ((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : (id)_swiftEmptyArrayStorage[v23];
        unint64_t v25 = v24;
        uint64_t v26 = v23 - 3;
        if (__OFADD__(v23 - 4, 1)) {
          break;
        }
        unsigned __int8 v27 = [(id)a3 isLikePhoneNumber:v24];

        if (v27)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();

          return;
        }
        ++v23;
        if (v26 == v18)
        {

          swift_bridgeObjectRelease();
          unint64_t v20 = v30;
          uint64_t v17 = v31;
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }

LABEL_31:
    if (v19 == v17) {
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t sub_1003C5348@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1003C5360(a1, a2, (void (*)(void))sub_1003CBEB8, a3);
}

uint64_t sub_1003C5360@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100913A40);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  id v14 = &v22[-v13];
  uint64_t v23 = a1;
  NSString v15 = sub_1003B49E4(a3, (uint64_t)v22, a2);
  id v16 = v15;
  uint64_t v17 = v15[2];
  if (!v17)
  {
    uint64_t v20 = 1;
    goto LABEL_5;
  }
  uint64_t v18 = (uint64_t)v15 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t result = sub_1000BF710(v18, (uint64_t)v14, (uint64_t *)&unk_100913A40);
  if (v17 == 1)
  {
LABEL_3:
    sub_100096408((uint64_t)v14, a4, (uint64_t *)&unk_100913A40);
    uint64_t v20 = 0;
LABEL_5:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v20, 1, v8);
    return swift_bridgeObjectRelease();
  }
  unint64_t v21 = 1;
  while (v21 < v16[2])
  {
    sub_1000BF710(v18 + *(void *)(v9 + 72) * v21, (uint64_t)v11, (uint64_t *)&unk_100913A40);
    if (static Date.< infix(_:_:)())
    {
      sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_100913A40);
      uint64_t result = sub_100096408((uint64_t)v11, (uint64_t)v14, (uint64_t *)&unk_100913A40);
    }
    else
    {
      uint64_t result = sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100913A40);
    }
    if (v17 == ++v21) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1003C5564@<X0>(NSObject *a1@<X0>, uint64_t a2@<X1>, objc_class **a3@<X8>)
{
  uint64_t v167 = a2;
  uint64_t v166 = (objc_class **)a3;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v161 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v160 = (char *)&v152 - v8;
  __chkstk_darwin(v9);
  os_log_type_t v153 = (char *)&v152 - v10;
  __chkstk_darwin(v11);
  Class v156 = (char *)&v152 - v12;
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v13 - 8);
  uint64_t v162 = (char *)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  Class v157 = (char *)&v152 - v16;
  __chkstk_darwin(v17);
  uint64_t v179 = (uint64_t)&v152 - v18;
  uint64_t v19 = sub_100094134((uint64_t *)&unk_100913A40);
  uint64_t v165 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v168 = (uint64_t)&v152 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v159 = (uint64_t)&v152 - v22;
  __chkstk_darwin(v23);
  uint64_t v158 = ((char *)&v152 - v24);
  __chkstk_darwin(v25);
  uint64_t v154 = (uint64_t)&v152 - v26;
  __chkstk_darwin(v27);
  uint64_t v155 = (_OWORD *)((char *)&v152 - v28);
  __chkstk_darwin(v29);
  uint64_t v152 = ((char *)&v152 - v30);
  __n128 v32 = __chkstk_darwin(v31);
  uint64_t v34 = (Class *)((char *)&v152 - v33);
  uint64_t v36 = *(int *)(v35 + 48);
  uint64_t v37 = (char *)&v152 + v36 - v33;
  Class isa = a1->isa;
  Class v39 = a1[1].isa;
  os_log_t v164 = a1;
  Class *v34 = isa;
  v34[1] = v39;
  os_log_type_t v170 = (_OWORD *)((char *)&v152 - v33);
  uint64_t v40 = *(void (**)(void, __n128))(v5 + 16);
  uint64_t v163 = (char *)a1 + v36;
  uint64_t v175 = v5 + 16;
  Class v173 = (void (*)(void, void, void))v40;
  v40(v37, v32);
  uint64_t v180 = v5;
  uint64_t v41 = *(void (**)(void, void))(v5 + 8);
  id v42 = isa;
  id v43 = v39;
  uint64_t v174 = v4;
  uint64_t v169 = v5 + 8;
  int v171 = v41;
  v41(v37, v4);
  uint64_t v44 = qword_100907440;
  id v45 = v42;
  uint64_t v46 = v43;
  if (v44 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  uint64_t v48 = sub_10008E2DC(v47, (uint64_t)qword_100916CF0);
  uint64_t v49 = v45;
  id v50 = v46;
  uint64_t v51 = v49;
  id v52 = v50;
  uint64_t v172 = v48;
  os_log_type_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.info.getter();
  BOOL v55 = os_log_type_enabled(v53, v54);
  uint64_t v177 = v52;
  uint64_t v178 = v19;
  uint64_t v176 = v51;
  if (v55)
  {
    uint64_t v56 = swift_slowAlloc();
    id v57 = (void *)swift_slowAlloc();
    uint64_t v183 = swift_slowAlloc();
    *(_DWORD *)uint64_t v56 = 138543618;
    id v58 = [(objc_class *)v52 objectID];
    *(void *)&v181[0] = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v57 = v58;
    *(_WORD *)(v56 + 12) = 2082;
    if ([(objc_class *)v176 isRecurrent]) {
      uint64_t v59 = 89;
    }
    else {
      uint64_t v59 = 78;
    }
    *(void *)&v181[0] = sub_1000C51B8(v59, 0xE100000000000000, &v183);
    uint64_t v51 = v176;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "RDDueDateDeltaAlarmProducerDataSource: nextProducerDueDateDeltaAlarmFiringAfter alarm {alarmID: %{public}@ isRecurring: %{public}s}", (uint8_t *)v56, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    id v60 = v170;
    uint64_t v61 = v178;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v62 = v61;
    swift_slowDealloc();

    uint64_t v63 = v179;
    uint64_t v64 = v180;
  }
  else
  {
    uint64_t v62 = v19;

    uint64_t v63 = v179;
    uint64_t v64 = v180;
    id v60 = v170;
  }
  uint64_t v65 = *(void (**)(void, void, void, void))(v64 + 56);
  uint64_t v66 = v174;
  v65(v63, 1, 1, v174);
  if (![(objc_class *)v51 isOverdue])
  {
    id v71 = (uint64_t *)&unk_100909A40;
    id v72 = (long long *)v63;
LABEL_15:
    sub_1000966BC((uint64_t)v72, v71);
    goto LABEL_16;
  }
  id v186 = [(objc_class *)v177 trigger];
  sub_1000963CC(0, (unint64_t *)&unk_100911060);
  sub_100094134((uint64_t *)&unk_100916DF0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v182 = 0;
    memset(v181, 0, sizeof(v181));
    sub_1000966BC(v63, (uint64_t *)&unk_100909A40);
    id v71 = &qword_100911070;
    id v72 = v181;
    goto LABEL_15;
  }
  sub_1000967D4(v181, (uint64_t)&v183);
  uint64_t v67 = v184;
  uint64_t v68 = v185;
  sub_1000C0DE0(&v183, v184);
  uint64_t v69 = v67;
  uint64_t v70 = (uint64_t)v157;
  (*(void (**)(objc_class *, uint64_t, uint64_t, uint64_t))(v68 + 16))(v176, v167, v69, v68);
  sub_1000966BC(v63, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v70, 1, v66) != 1)
  {
    uint64_t v106 = v156;
    Class v157 = *(char **)(v64 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v157)(v156, v70, v66);
    uint64_t v107 = v173;
    v173(v63, v106, v66);
    v65(v63, 0, 1, v66);
    uint64_t v108 = (uint64_t)v152;
    uint64_t v109 = (char *)v152 + *(int *)(v178 + 48);
    Class v110 = v164->isa;
    Class v111 = v164[1].isa;
    v152->Class isa = v164->isa;
    *(void *)(v108 + 8) = v111;
    v107(v109, v163, v66);
    sub_1000BF710(v108, (uint64_t)v155, (uint64_t *)&unk_100913A40);
    sub_100096408(v108, v154, (uint64_t *)&unk_100913A40);
    uint64_t v112 = v153;
    v107(v153, v106, v66);
    uint64_t v113 = v177;
    uint64_t v114 = v110;
    uint64_t v115 = v111;
    os_log_t v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.info.getter();
    int v118 = v117;
    if (os_log_type_enabled(v116, v117))
    {
      uint64_t v119 = swift_slowAlloc();
      uint64_t v120 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v119 = 138543874;
      LODWORD(v168) = v118;
      id v121 = [v113 objectID];
      *(void *)&v181[0] = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v120 = v121;

      *(_WORD *)(v119 + 12) = 2114;
      uint64_t v122 = *(int *)(v178 + 48);
      uint64_t v123 = v170;
      id v124 = (char *)v170 + v122;
      id v125 = v155;
      id v126 = (char *)v155 + v122;
      _OWORD *v170 = *v155;
      v173((char *)v123 + v122, v126, v174);
      Class v127 = Date._bridgeToObjectiveC()().super.isa;
      v171(v124, v174);
      *(void *)&v181[0] = v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v120[1] = v127;
      sub_1000966BC(v154, (uint64_t *)&unk_100913A40);
      sub_1000966BC((uint64_t)v125, (uint64_t *)&unk_100913A40);
      *(_WORD *)(v119 + 22) = 2114;
      os_log_type_t v128 = v153;
      Class v129 = Date._bridgeToObjectiveC()().super.isa;
      *(void *)&v181[0] = v129;
      uint64_t v66 = v174;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void v120[2] = v129;
      uint64_t v130 = v171;
      v171(v128, v66);
      _os_log_impl((void *)&_mh_execute_header, v116, (os_log_type_t)v168, "RDDueDateDeltaAlarmProducerDataSource: nextProducerDueDateDeltaAlarmFiringAfter is calculating fireDate for overdue recurring alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ nextFireDate: %{public}@}", (uint8_t *)v119, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      uint64_t v64 = v180;
      swift_slowDealloc();
      uint64_t v131 = v130;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v131 = v171;
      v171(v112, v66);
      sub_1000966BC(v154, (uint64_t *)&unk_100913A40);
      sub_1000966BC((uint64_t)v155, (uint64_t *)&unk_100913A40);

      os_log_t v116 = v113;
    }
    id v102 = v161;
    uint64_t v103 = v167;
    uint64_t v104 = v160;

    v131(v156, v66);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v183);
    uint64_t v101 = v179;
    goto LABEL_23;
  }
  sub_1000966BC(v70, (uint64_t *)&unk_100909A40);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v183);
  uint64_t v62 = v178;
LABEL_16:
  uint64_t v73 = (char *)v60 + *(int *)(v62 + 48);
  uint64_t v74 = v163;
  uint64_t v75 = v173;
  v173(v73, v163, v66);
  Class v157 = *(char **)(v180 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v157)(v63, v73, v66);
  v65(v63, 0, 1, v66);
  uint64_t v76 = (uint64_t)v158;
  uint64_t v77 = (char *)v158 + *(int *)(v62 + 48);
  Class v78 = v164->isa;
  Class v79 = v164[1].isa;
  v158->Class isa = v164->isa;
  *(void *)(v76 + 8) = v79;
  v75(v77, v74, v66);
  uint64_t v80 = v159;
  sub_1000BF710(v76, v159, (uint64_t *)&unk_100913A40);
  uint64_t v81 = v168;
  sub_100096408(v76, v168, (uint64_t *)&unk_100913A40);
  uint64_t v82 = v66;
  uint64_t v83 = v177;
  uint64_t v84 = v78;
  uint64_t v85 = v79;
  uint64_t v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.info.getter();
  int v88 = v87;
  if (!os_log_type_enabled(v86, v87))
  {

    sub_1000966BC(v81, (uint64_t *)&unk_100913A40);
    sub_1000966BC(v80, (uint64_t *)&unk_100913A40);

    uint64_t v66 = v82;
    id v102 = v161;
    uint64_t v103 = v167;
    uint64_t v104 = v160;
    uint64_t v105 = (uint64_t)v162;
    uint64_t v101 = v179;
    uint64_t v64 = v180;
    goto LABEL_24;
  }
  uint64_t v89 = swift_slowAlloc();
  os_log_t v164 = v86;
  uint64_t v90 = v89;
  uint64_t v91 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v90 = 138543618;
  LODWORD(v163) = v88;
  uint64_t v92 = v75;
  uint64_t v93 = v82;
  uint64_t v94 = (_OWORD *)v80;
  id v95 = [(objc_class *)v83 objectID];
  uint64_t v183 = (uint64_t)v95;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v91 = v95;

  *(_WORD *)(v90 + 12) = 2114;
  uint64_t v96 = *(int *)(v178 + 48);
  uint64_t v97 = v170;
  uint64_t v98 = (char *)v170 + v96;
  _OWORD *v170 = *v94;
  v92((char *)v97 + v96, (char *)v94 + v96, v93);
  Class v99 = Date._bridgeToObjectiveC()().super.isa;
  v171(v98, v93);
  uint64_t v183 = (uint64_t)v99;
  uint64_t v64 = v180;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v91[1] = v99;
  sub_1000966BC(v168, (uint64_t *)&unk_100913A40);
  sub_1000966BC((uint64_t)v94, (uint64_t *)&unk_100913A40);
  os_log_t v100 = v164;
  _os_log_impl((void *)&_mh_execute_header, v164, (os_log_type_t)v163, "RDDueDateDeltaAlarmProducerDataSource: nextProducerDueDateDeltaAlarmFiringAfter is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}", (uint8_t *)v90, 0x16u);
  sub_100094134((uint64_t *)&unk_10090A040);
  swift_arrayDestroy();
  uint64_t v101 = v179;
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v66 = v174;
  id v102 = v161;
  uint64_t v103 = v167;
  uint64_t v104 = v160;
LABEL_23:
  uint64_t v105 = (uint64_t)v162;
LABEL_24:
  sub_1000BF710(v101, v105, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v105, 1, v66) == 1)
  {
    sub_1000966BC(v105, (uint64_t *)&unk_100909A40);
  }
  else
  {
    id v132 = (void (*)(void, void, void))v157;
    ((void (*)(char *, uint64_t, uint64_t))v157)(v104, v105, v66);
    if (static Date.> infix(_:_:)())
    {
      sub_1000966BC(v101, (uint64_t *)&unk_100909A40);
      uint64_t v133 = v176;

      uint64_t v134 = v177;
      uint64_t v135 = v178;
      uint64_t v136 = v166;
      uint64_t v137 = (char *)v166 + *(int *)(v178 + 48);
      *uint64_t v166 = v133;
      v136[1] = v134;
      v132(v137, v104, v66);
      return (*(uint64_t (**)(objc_class **, void, uint64_t, uint64_t))(v165 + 56))((objc_class **)v136, 0, 1, v135);
    }
    v171(v104, v66);
  }
  Class v139 = v177;
  v173(v102, v103, v66);
  uint64_t v140 = v139;
  os_log_type_t v141 = Logger.logObject.getter();
  os_log_type_t v142 = static os_log_type_t.info.getter();
  BOOL v143 = os_log_type_enabled(v141, v142);
  uint64_t v144 = v178;
  if (v143)
  {
    uint64_t v145 = v102;
    uint64_t v146 = swift_slowAlloc();
    uint64_t v147 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v146 = 138543618;
    id v148 = [(objc_class *)v140 objectID];
    uint64_t v183 = (uint64_t)v148;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v147 = v148;

    *(_WORD *)(v146 + 12) = 2114;
    Class v149 = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v183 = (uint64_t)v149;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v147[1] = v149;
    v171(v145, v174);
    _os_log_impl((void *)&_mh_execute_header, v141, v142, "RDDueDateDeltaAlarmProducerDataSource: nextProducerDueDateDeltaAlarmFiringAfter fireDate is earlier than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}", (uint8_t *)v146, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    int v150 = v176;
    sub_1000966BC(v179, (uint64_t *)&unk_100909A40);
    return (*(uint64_t (**)(objc_class **, uint64_t, uint64_t, uint64_t))(v165 + 56))(v166, 1, 1, v178);
  }
  else
  {

    uint64_t v151 = v176;
    v171(v102, v66);

    sub_1000966BC(v179, (uint64_t *)&unk_100909A40);
    return (*(uint64_t (**)(objc_class **, uint64_t, uint64_t, uint64_t))(v165 + 56))(v166, 1, 1, v144);
  }
}

uint64_t sub_1003C67D0@<X0>(NSObject *a1@<X0>, uint64_t a2@<X1>, objc_class **a3@<X8>)
{
  uint64_t v274 = a2;
  v263 = a3;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(NSObject **)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v261 = (char *)&v245 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  Swift::String v249 = (char *)&v245 - v8;
  __chkstk_darwin(v9);
  Swift::String v248 = (char *)&v245 - v10;
  __chkstk_darwin(v11);
  Swift::String v247 = (char *)&v245 - v12;
  __chkstk_darwin(v13);
  uint64_t v251 = (char *)&v245 - v14;
  __chkstk_darwin(v15);
  Swift::String v246 = (char *)&v245 - v16;
  __chkstk_darwin(v17);
  uint64_t v245 = (char *)&v245 - v18;
  __chkstk_darwin(v19);
  Swift::String v252 = (char *)&v245 - v20;
  __chkstk_darwin(v21);
  Swift::String v250 = (char *)&v245 - v22;
  __chkstk_darwin(v23);
  id v268 = (char *)&v245 - v24;
  __chkstk_darwin(v25);
  Swift::String v255 = (char *)&v245 - v26;
  __chkstk_darwin(v27);
  uint64_t v258 = (char *)&v245 - v28;
  uint64_t v29 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v29 - 8);
  Swift::String v253 = (char *)&v245 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v267 = (char *)&v245 - v32;
  __chkstk_darwin(v33);
  v266 = (void (*)(char *, uint64_t, uint64_t))((char *)&v245 - v34);
  __chkstk_darwin(v35);
  v284 = (uint64_t)&v245 - v36;
  uint64_t v37 = sub_100094134((uint64_t *)&unk_100913A40);
  uint64_t v262 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v269 = (char **)((char *)&v245 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v39);
  v272 = (_OWORD *)((char *)&v245 - v40);
  __chkstk_darwin(v41);
  uint64_t v260 = ((char *)&v245 - v42);
  __chkstk_darwin(v43);
  uint64_t v256 = (uint64_t)&v245 - v44;
  __chkstk_darwin(v45);
  uint64_t v257 = (_OWORD *)((char *)&v245 - v46);
  __chkstk_darwin(v47);
  Swift::String v254 = ((char *)&v245 - v48);
  __n128 v50 = __chkstk_darwin(v49);
  id v52 = (Class *)((char *)&v245 - v51);
  uint64_t v281 = v53;
  uint64_t v54 = *(int *)(v53 + 48);
  BOOL v55 = (char *)&v245 + v54 - v51;
  uint64_t v56 = (char *)a1 + v54;
  Class isa = a1->isa;
  Class v58 = a1[1].isa;
  os_log_t v265 = a1;
  *id v52 = isa;
  v52[1] = v58;
  uint64_t v273 = ((char *)&v245 - v51);
  id v60 = v5 + 2;
  uint64_t v59 = (void (*)(void, __n128))v5[2].isa;
  v264 = v56;
  uint64_t v280 = (void (*)(void, void, void))v59;
  v59(v55, v50);
  uint64_t v61 = v5;
  uint64_t v62 = (void (*)(void, void))v5[1].isa;
  uint64_t v63 = isa;
  uint64_t v64 = v58;
  uint64_t v285 = v4;
  uint64_t v275 = v5 + 1;
  uint64_t v276 = v62;
  v62(v55, v4);
  uint64_t v65 = qword_100907440;
  uint64_t v66 = v64;
  if (v65 != -1) {
    swift_once();
  }
  uint64_t v283 = (char *)v5;
  uint64_t v67 = type metadata accessor for Logger();
  uint64_t v68 = sub_10008E2DC(v67, (uint64_t)qword_100916CF0);
  uint64_t v69 = v63;
  uint64_t v70 = v66;
  id v71 = v69;
  id v72 = v70;
  unint64_t v277 = (void *)v68;
  uint64_t v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.info.getter();
  BOOL v75 = os_log_type_enabled(v73, v74);
  os_log_t v278 = v60;
  uint64_t v279 = v71;
  uint64_t v282 = v72;
  uint64_t v259 = v61;
  if (v75)
  {
    uint64_t v76 = swift_slowAlloc();
    uint64_t v77 = (void *)swift_slowAlloc();
    uint64_t v288 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v76 = 138543618;
    id v78 = [v282 objectID];
    *(void *)&v286[0] = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v77 = v78;
    *(_WORD *)(v76 + 12) = 2082;
    if ([(objc_class *)v279 isRecurrent]) {
      uint64_t v79 = 89;
    }
    else {
      uint64_t v79 = 78;
    }
    *(void *)&v286[0] = sub_1000C51B8(v79, 0xE100000000000000, (uint64_t *)&v288);
    id v71 = v279;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerDueDateDeltaAlarmsBefore alarm {alarmID: %{public}@ isRecurring: %{public}s}", (uint8_t *)v76, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    id v72 = v282;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v80 = (void (*)(uint64_t, char *, uint64_t))v280;
  uint64_t v81 = (void (*)(void, void, void, void))*((void *)v283 + 7);
  uint64_t v271 = v283 + 56;
  uint64_t v270 = v81;
  v81((char *)v284, 1, 1, v285);
  id v291 = [v72 trigger];
  sub_1000963CC(0, (unint64_t *)&unk_100911060);
  sub_100094134((uint64_t *)&unk_100916DF0);
  char v82 = swift_dynamicCast();
  uint64_t v83 = v273;
  if (v82)
  {
    sub_1000967D4(v286, (uint64_t)&v288);
    uint64_t v84 = v289;
    uint64_t v85 = v290;
    sub_1000C0DE0(&v288, v289);
    uint64_t v86 = v84;
    uint64_t v87 = (uint64_t)v266;
    (*(void (**)(objc_class *, uint64_t, uint64_t, uint64_t))(v85 + 24))(v71, v274, v86, v85);
    sub_1000966BC(v284, (uint64_t *)&unk_100909A40);
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v283 + 6))(v87, 1, v285) != 1)
    {
      uint64_t v119 = v258;
      uint64_t v120 = v285;
      v266 = (void (*)(char *, uint64_t, uint64_t))*((void *)v283 + 4);
      v266(v258, v87, v285);
      uint64_t v121 = v284;
      v80(v284, v119, v120);
      v270(v121, 0, 1, v120);
      uint64_t v122 = (uint64_t)v254;
      uint64_t v123 = (char *)v254 + *(int *)(v281 + 48);
      Class v124 = v265->isa;
      Class v125 = v265[1].isa;
      v254->Class isa = v265->isa;
      *(void *)(v122 + 8) = v125;
      v80((uint64_t)v123, v264, v120);
      sub_1000BF710(v122, (uint64_t)v257, (uint64_t *)&unk_100913A40);
      sub_100096408(v122, v256, (uint64_t *)&unk_100913A40);
      id v126 = v255;
      v80((uint64_t)v255, v119, v120);
      Class v127 = v72;
      os_log_type_t v128 = v124;
      Class v129 = v125;
      uint64_t v130 = Logger.logObject.getter();
      os_log_type_t v131 = static os_log_type_t.info.getter();
      int v132 = v131;
      if (os_log_type_enabled(v130, v131))
      {
        uint64_t v133 = swift_slowAlloc();
        uint64_t v134 = (void *)swift_slowAlloc();
        uint64_t v269 = v134;
        *(_DWORD *)uint64_t v133 = 138543874;
        LODWORD(v272) = v132;
        id v135 = [v127 objectID];
        *(void *)&v286[0] = v135;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v134 = v135;

        *(_WORD *)(v133 + 12) = 2114;
        os_log_t v265 = (os_log_t)(v133 + 14);
        uint64_t v136 = *(int *)(v281 + 48);
        uint64_t v137 = v273;
        uint64_t v138 = (char *)v273 + v136;
        Class v139 = v257;
        uint64_t v140 = (char *)v257 + v136;
        *(_OWORD *)&v273->Class isa = *v257;
        uint64_t v141 = v285;
        v80((uint64_t)v137 + v136, v140, v285);
        Class v142 = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v273 = v130;
        BOOL v143 = v276;
        v276(v138, v141);
        *(void *)&v286[0] = v142;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v144 = (uint64_t)v269;
        v269[1] = v142;
        sub_1000966BC(v256, (uint64_t *)&unk_100913A40);
        sub_1000966BC((uint64_t)v139, (uint64_t *)&unk_100913A40);
        *(_WORD *)(v133 + 22) = 2114;
        uint64_t v145 = v255;
        Class v146 = Date._bridgeToObjectiveC()().super.isa;
        *(void *)&v286[0] = v146;
        uint64_t v115 = v266;
        uint64_t v147 = (void (*)(char *, uint64_t))v143;
        id v148 = v273;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)(v144 + 16) = v146;
        v147(v145, v141);
        _os_log_impl((void *)&_mh_execute_header, v148, (os_log_type_t)v272, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerDueDateDeltaAlarmsBefore is calculating fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ previousFireDate: %{public}@}", (uint8_t *)v133, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        os_log_type_t v117 = v268;
      }
      else
      {

        Class v149 = v276;
        v276(v126, v285);
        sub_1000966BC(v256, (uint64_t *)&unk_100913A40);
        sub_1000966BC((uint64_t)v257, (uint64_t *)&unk_100913A40);

        id v148 = v127;
        uint64_t v147 = (void (*)(char *, uint64_t))v149;
        os_log_type_t v117 = v268;
        uint64_t v115 = v266;
      }

      v147(v258, v285);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v288);
      goto LABEL_20;
    }
    sub_1000966BC(v87, (uint64_t *)&unk_100909A40);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v288);
  }
  else
  {
    uint64_t v287 = 0;
    memset(v286, 0, sizeof(v286));
    sub_1000966BC(v284, (uint64_t *)&unk_100909A40);
    sub_1000966BC((uint64_t)v286, &qword_100911070);
  }
  uint64_t v88 = v281;
  uint64_t v89 = (char *)v83 + *(int *)(v281 + 48);
  uint64_t v90 = v264;
  uint64_t v91 = v285;
  v80((uint64_t)v89, v264, v285);
  uint64_t v92 = v284;
  v266 = (void (*)(char *, uint64_t, uint64_t))*((void *)v283 + 4);
  v266((char *)v284, (uint64_t)v89, v91);
  v270(v92, 0, 1, v91);
  uint64_t v93 = (uint64_t)v260;
  uint64_t v94 = (char *)v260 + *(int *)(v88 + 48);
  Class v95 = v265->isa;
  Class v96 = v265[1].isa;
  v260->Class isa = v265->isa;
  *(void *)(v93 + 8) = v96;
  v80((uint64_t)v94, v90, v91);
  uint64_t v97 = v272;
  sub_1000BF710(v93, (uint64_t)v272, (uint64_t *)&unk_100913A40);
  uint64_t v98 = v93;
  uint64_t v99 = (uint64_t)v269;
  sub_100096408(v98, (uint64_t)v269, (uint64_t *)&unk_100913A40);
  os_log_t v100 = v72;
  uint64_t v101 = v95;
  id v102 = v96;
  uint64_t v103 = Logger.logObject.getter();
  os_log_type_t v104 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v103, v104))
  {

    sub_1000966BC(v99, (uint64_t *)&unk_100913A40);
    sub_1000966BC((uint64_t)v97, (uint64_t *)&unk_100913A40);

    os_log_type_t v117 = v268;
    uint64_t v118 = (uint64_t)v267;
    uint64_t v115 = v266;
    goto LABEL_21;
  }
  uint64_t v105 = swift_slowAlloc();
  uint64_t v106 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v105 = 138543618;
  uint64_t v107 = [v100 objectID];
  uint64_t v108 = v273;
  os_log_t v265 = v103;
  uint64_t v109 = v285;
  Class v110 = v107;
  uint64_t v288 = v107;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  void *v106 = v110;

  *(_WORD *)(v105 + 12) = 2114;
  uint64_t v111 = *(int *)(v281 + 48);
  uint64_t v112 = (char *)v108 + v111;
  uint64_t v113 = (char *)v272 + v111;
  *(_OWORD *)&v108->Class isa = *v272;
  v280((char *)v108 + v111, v113, v109);
  Class v114 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v115 = v266;
  v276(v112, v109);
  uint64_t v288 = v114;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v106[1] = v114;
  sub_1000966BC((uint64_t)v269, (uint64_t *)&unk_100913A40);
  sub_1000966BC((uint64_t)v272, (uint64_t *)&unk_100913A40);
  os_log_t v116 = v265;
  _os_log_impl((void *)&_mh_execute_header, v265, v104, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerDueDateDeltaAlarmsBefore is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}", (uint8_t *)v105, 0x16u);
  sub_100094134((uint64_t *)&unk_10090A040);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  os_log_type_t v117 = v268;
LABEL_20:
  uint64_t v118 = (uint64_t)v267;
LABEL_21:
  sub_1000BF710(v284, v118, (uint64_t *)&unk_100909A40);
  int v150 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v283 + 6);
  if (v150(v118, 1, v285) == 1)
  {
    sub_1000966BC(v118, (uint64_t *)&unk_100909A40);
    goto LABEL_25;
  }
  v115(v117, v118, v285);
  sub_1003CB8F8((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    v276(v117, v285);
LABEL_25:
    uint64_t v151 = v261;
    v280(v261, v274, v285);
    uint64_t v152 = v282;
    os_log_type_t v153 = Logger.logObject.getter();
    os_log_type_t v154 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v153, v154))
    {
      uint64_t v155 = swift_slowAlloc();
      Class v156 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v155 = 138543618;
      Class v157 = [v152 objectID];
      uint64_t v288 = v157;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v156 = v157;

      *(_WORD *)(v155 + 12) = 2114;
      Class v158 = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v288 = v158;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v156[1] = v158;
      v276(v151, v285);
      _os_log_impl((void *)&_mh_execute_header, v153, v154, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerDueDateDeltaAlarmsBefore fireDate is later than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}", (uint8_t *)v155, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v276(v151, v285);
    }
LABEL_44:
    sub_1000966BC(v284, (uint64_t *)&unk_100909A40);
    return (*(uint64_t (**)(objc_class **, uint64_t, uint64_t, uint64_t))(v262 + 56))(v263, 1, 1, v281);
  }
  uint64_t v159 = v282;
  id v160 = (char *)[v282 trigger];
  self;
  uint64_t v161 = (void *)swift_dynamicCastObjCClass();
  if (!v161)
  {

    goto LABEL_46;
  }
  uint64_t v162 = v161;
  id v163 = [v161 acknowledgedDate];
  if (v163)
  {
    os_log_t v164 = v163;
    uint64_t v283 = v160;
    uint64_t v165 = v252;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v166 = (uint64_t)v253;
    uint64_t v167 = v165;
    uint64_t v168 = v285;
    v115(v253, (uint64_t)v167, v285);
    v270(v166, 0, 1, v168);
    uint64_t v169 = v168;
    id v160 = v283;
    if (v150(v166, 1, v169) != 1)
    {
      uint64_t v170 = v166;
      int v171 = v250;
      v115(v250, v170, v285);
      if (static Date.< infix(_:_:)())
      {
        uint64_t v172 = v245;
        uint64_t v173 = v285;
        uint64_t v174 = (void (*)(char *, char *, uint64_t))v280;
        v280(v245, v117, v285);
        uint64_t v175 = v246;
        v174(v246, v171, v173);
        uint64_t v176 = v282;
        uint64_t v177 = Logger.logObject.getter();
        os_log_type_t v178 = static os_log_type_t.info.getter();
        int v179 = v178;
        if (os_log_type_enabled(v177, v178))
        {
          uint64_t v180 = swift_slowAlloc();
          uint64_t v181 = swift_slowAlloc();
          *(_DWORD *)uint64_t v180 = 138543874;
          uint64_t v282 = v177;
          uint64_t v182 = [v176 objectID];
          uint64_t v288 = v182;
          LODWORD(v280) = v179;
          uint64_t v183 = v285;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v181->Class isa = (Class)v182;
          os_log_t v278 = v181;

          *(_WORD *)(v180 + 12) = 2114;
          Class v184 = Date._bridgeToObjectiveC()().super.isa;
          uint64_t v288 = v184;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v181[1].Class isa = v184;
          uint64_t v185 = v172;
          id v186 = (void (*)(char *, uint64_t))v276;
          v276(v185, v183);
          *(_WORD *)(v180 + 22) = 2114;
          uint64_t v187 = Date._bridgeToObjectiveC()().super.isa;
          uint64_t v288 = v187;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v278[2].Class isa = v187;
          v186(v175, v183);
          uint64_t v188 = v282;
          _os_log_impl((void *)&_mh_execute_header, v282, (os_log_type_t)v280, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerDueDateDeltaAlarmsBefore fireDate is earlier than ackDate for alarm. Skipping {alarmID: %{public}@ finalFireDate: %{public}@ ackDate: %{public}@}", (uint8_t *)v180, 0x20u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v186(v250, v183);
          v186(v268, v183);
        }
        else
        {

          v242 = v175;
          uint64_t v243 = v285;
          uint64_t v244 = (void (*)(char *, uint64_t))v276;
          v276(v242, v285);
          v244(v172, v243);

          v244(v250, v243);
          v244(v117, v243);
        }
        goto LABEL_44;
      }
      v276(v171, v285);
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v166 = (uint64_t)v253;
    v270((uint64_t)v253, 1, 1, v285);
  }
  sub_1000966BC(v166, (uint64_t *)&unk_100909A40);
LABEL_37:
  id v189 = [v162 dueDateDelta];
  unsigned __int8 v190 = [v189 isEmpty];

  if (v190)
  {
    uint64_t v191 = v249;
    v280(v249, v117, v285);
    uint64_t v192 = v160;
    uint64_t v193 = Logger.logObject.getter();
    os_log_type_t v194 = static os_log_type_t.error.getter();
    int v195 = v194;
    if (os_log_type_enabled(v193, v194))
    {
      uint64_t v196 = swift_slowAlloc();
      uint64_t v197 = swift_slowAlloc();
      LODWORD(v280) = v195;
      uint64_t v198 = v285;
      unint64_t v277 = (void *)v197;
      uint64_t v283 = (char *)swift_slowAlloc();
      uint64_t v288 = v283;
      *(_DWORD *)uint64_t v196 = 136446722;
      os_log_t v278 = v193;
      sub_1003CB8F8((unint64_t *)&qword_100908230, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v199 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&v286[0] = sub_1000C51B8(v199, v200, (uint64_t *)&v288);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v276(v191, v198);
      *(_WORD *)(v196 + 12) = 2114;
      id v201 = [v162 dueDateDelta];
      *(void *)&v286[0] = v201;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v202 = v277;
      *unint64_t v277 = v201;

      *(_WORD *)(v196 + 22) = 2114;
      id v203 = [v162 objectID];
      *(void *)&v286[0] = v203;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v202[1] = v203;

      os_log_t v204 = v278;
      _os_log_impl((void *)&_mh_execute_header, v278, (os_log_type_t)v280, "RDDueDateDeltaAlarmProducerDataSource: unable to calculate dueDate fireDate {finalFireDate: %{public}s, un-inverted dueDateDelta: %{public}@, triggerID: %{public}@}", (uint8_t *)v196, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v205 = v282;

      v276(v268, v285);
    }
    else
    {

      id v231 = v191;
      uint64_t v232 = v285;
      uint64_t v233 = (void (*)(char *, uint64_t))v276;
      v276(v231, v285);
      uint64_t v234 = v282;

      v233(v117, v232);
    }
    goto LABEL_44;
  }
  id v206 = [v162 dueDateDelta];
  id v207 = [v206 inverted];

  Class v208 = Date._bridgeToObjectiveC()().super.isa;
  id v209 = [v207 addedTo:v208];

  id v210 = v251;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  if (static Date.< infix(_:_:)())
  {
    uint64_t v211 = v247;
    uint64_t v212 = v285;
    id v213 = (void (*)(char *, char *, uint64_t))v280;
    v280(v247, v117, v285);
    uint64_t v214 = v248;
    v213(v248, v210, v212);
    uint64_t v215 = v282;
    uint64_t v216 = Logger.logObject.getter();
    os_log_type_t v217 = static os_log_type_t.info.getter();
    int v218 = v217;
    if (os_log_type_enabled(v216, v217))
    {
      uint64_t v219 = swift_slowAlloc();
      uint64_t v283 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v219 = 138543874;
      uint64_t v282 = v216;
      uint64_t v220 = [v215 objectID];
      LODWORD(v280) = v218;
      uint64_t v221 = v211;
      uint64_t v222 = v220;
      uint64_t v288 = v220;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v223 = v283;
      *(void *)uint64_t v283 = v222;

      *(_WORD *)(v219 + 12) = 2114;
      Class v224 = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v288 = v224;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((void *)v223 + 1) = v224;
      uint64_t v225 = v221;
      uint64_t v226 = v285;
      Class v227 = v248;
      uint64_t v228 = (void (*)(char *, uint64_t))v276;
      v276(v225, v285);
      *(_WORD *)(v219 + 22) = 2114;
      Class v229 = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v288 = v229;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((void *)v283 + 2) = v229;
      v228(v227, v226);
      id v230 = v282;
      _os_log_impl((void *)&_mh_execute_header, v282, (os_log_type_t)v280, "RDDueDateDeltaAlarmProducerDataSource: expiredProducerAlarmsBefore dueDate alarm notification has already past. Skipping {alarmID: %{public}@ finalFireDate: %{public}@ calculatedDueDateFireDate: %{public}@}", (uint8_t *)v219, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v228(v251, v226);
      v228(v268, v226);
    }
    else
    {

      v239 = v214;
      uint64_t v240 = v285;
      uint64_t v241 = (void (*)(char *, uint64_t))v276;
      v276(v239, v285);
      v241(v211, v240);

      v241(v210, v240);
      v241(v117, v240);
    }
    goto LABEL_44;
  }
  uint64_t v159 = v282;

  v276(v210, v285);
LABEL_46:
  sub_1000966BC(v284, (uint64_t *)&unk_100909A40);
  uint64_t v236 = v281;
  uint64_t v237 = v263;
  uint64_t v238 = (char *)v263 + *(int *)(v281 + 48);
  *v263 = v279;
  v237[1] = (objc_class *)v159;
  v115(v238, (uint64_t)v117, v285);
  return (*(uint64_t (**)(objc_class **, void, uint64_t, uint64_t))(v262 + 56))(v237, 0, 1, v236);
}

void sub_1003C874C(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v45 = a2;
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v5 = *(void (***)(char *, uint64_t))(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = a1;
  id v46 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(a1 + 24)];
  unint64_t v53 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v8 = rem_currentRuntimeVersion();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10039D088(KeyPath, v8);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(v53 + 16) >= *(void *)(v53 + 24) >> 1) {
    goto LABEL_34;
  }
  while (1)
  {
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v10 = (void *)sub_1002F52FC(v53);
    unint64_t v11 = sub_100747F48();
    uint64_t v12 = (void *)sub_1003BC958(v11, 0, 0, (uint64_t)v10, (void (*)(void))type metadata accessor for REMCDDueDateDeltaAlert, (int64_t)sub_10031E1E4, &qword_100913B30, &qword_100916E20);
    swift_bridgeObjectRelease();
    type metadata accessor for REMCDDueDateDeltaAlert();
    unint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
    if (v3)
    {

      return;
    }
    unint64_t v3 = v13;
    uint64_t v42 = v12;
    unint64_t v14 = v13 >> 62;
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id v43 = v10;
    if (!v15) {
      break;
    }
    unint64_t v47 = v14;
    uint64_t v48 = v5;
    unint64_t v53 = (unint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v15 < 0)
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v16 = 0;
    while (v15 != v16)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(v3 + 8 * v16 + 32);
      }
      uint64_t v18 = v17;
      id v51 = v17;
      sub_1003C8E1C(&v51, &v50, &v52);

      ++v16;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v5 = *(void (***)(char *, uint64_t))(v53 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v15 == v16)
      {
        uint64_t v41 = (void *)v53;
        unint64_t v14 = v47;
        uint64_t v5 = v48;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_34:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  uint64_t v41 = _swiftEmptyArrayStorage;
LABEL_16:
  unint64_t v53 = (unint64_t)_swiftEmptyArrayStorage;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    if (!v19) {
      goto LABEL_30;
    }
LABEL_18:
    uint64_t v48 = (void (**)(char *, uint64_t))self;
    if (v19 >= 1)
    {
      uint64_t v20 = 0;
      unint64_t v47 = v3 & 0xC000000000000001;
      uint64_t v21 = v5 + 1;
      uint64_t v22 = v19;
      do
      {
        if (v47) {
          id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v23 = *(id *)(v3 + 8 * v20 + 32);
        }
        uint64_t v24 = v23;
        id v25 = [v23 reminderIdentifier:v41];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*v21)(v7, v49);
        id v27 = [v48 objectIDWithUUID:isa];

        if (v27)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v20;
      }
      while (v22 != v20);
      goto LABEL_30;
    }
LABEL_37:
    __break(1u);
  }
  uint64_t v19 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v19) {
    goto LABEL_18;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v28 = objc_allocWithZone((Class)REMRemindersDataView);
  id v29 = v46;
  id v30 = [v28 initWithStore:v46];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  Class v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v32 = [self defaultFetchOptions];
  unint64_t v53 = 0;
  id v33 = [v30 fetchRemindersWithObjectIDs:v31 fetchOptions:v32 error:&v53];

  id v34 = (id)v53;
  uint64_t v35 = v42;
  if (v33)
  {
    sub_1000963CC(0, &qword_1009168E0);
    sub_1001207D4();
    uint64_t v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v37 = v34;

    swift_bridgeObjectRetain();
    uint64_t v38 = v44;
    swift_retain();
    uint64_t v39 = sub_1003CB484((unint64_t)v41, v36, v38, (void (*)(id **, uint64_t, uint64_t))sub_1003C919C);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    swift_release();

    void *v45 = v39;
  }
  else
  {
    id v40 = (id)v53;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_1003C8E1C(id *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  id v30 = a2;
  uint64_t v4 = v3;
  id v28 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *a1;
  id v34 = [*a1 account:v8];
  id v31 = 0;
  unint64_t v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  id v31 = (id)0xD000000000000025;
  unint64_t v32 = 0x80000001007D3C80;
  id v29 = v11;
  id v12 = [v11 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1003CB8F8((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  unint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, v6);
  v15._uint64_t countAndFlagsBits = 8317;
  v15._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  sub_100094134((uint64_t *)&unk_10090AF30);
  Optional.tryUnwrap(_:file:line:)();
  uint64_t v16 = v34;
  swift_bridgeObjectRelease();

  if (v3) {
    goto LABEL_2;
  }
  id v17 = v33;
  uint64_t v18 = self;
  id v19 = [v29 reminderIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v14(v10, v6);
  id v21 = [v18 objectIDWithUUID:isa];

  id v31 = 0;
  id v22 = [v17 remObjectIDWithError:&v31];
  if (!v22)
  {
    id v27 = v31;
    uint64_t v4 = _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_2:
    *id v30 = v4;
    return;
  }
  id v23 = v22;
  id v24 = v31;
  id v25 = v21;
  id v26 = sub_100747480(v29);

  *id v28 = v26;
}

uint64_t sub_1003C919C@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  uint64_t v87 = a3;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v89 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  Swift::String v13 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v15 = __chkstk_darwin(v14).n128_u64[0];
  id v17 = (char *)&v83 - v16;
  id v18 = *a1;
  id v19 = [*a1 reminderID:v15];
  uint64_t v20 = sub_1002F0054(v19, a2);

  if (v20)
  {
    uint64_t v88 = v20;
    uint64_t v90 = a4;
    id v21 = [v18 dueDateDelta];
    unsigned __int8 v22 = [v21 isEmpty];

    if (v22)
    {
      if (qword_100907440 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E2DC(v23, (uint64_t)qword_100916CF0);
      id v24 = v18;
      id v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        id v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v89 = swift_slowAlloc();
        *(_DWORD *)id v27 = 138412290;
        v93[0] = v24;
        id v28 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)uint64_t v89 = v24;

        _os_log_impl((void *)&_mh_execute_header, v25, v26, "DueDateDeltaDataSourceAlarms: Invalid dueDateDelta of 0 for remEarlyAlert -- skipping {remEarlyAlert: %@}", v27, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v43 = v90;
      uint64_t v44 = sub_100094134((uint64_t *)&unk_100913A40);
      return (*(uint64_t (**)(NSObject **, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
    }
    uint64_t v86 = v4;
    id v35 = [v18 dueDateDelta];
    Class isa = (Class)[v18 acknowledgedDate];
    if (isa)
    {
      uint64_t v85 = v10;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v37 = v89;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v17, 0, 1, v8);
      id v38 = objc_allocWithZone((Class)REMAlarmDueDateDeltaAlertTrigger);
      int v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v17, 1, v8);
      id v40 = v88;
      if (v39 == 1)
      {
        Class isa = 0;
      }
      else
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v17, v8);
      }
      uint64_t v45 = v40;
      uint64_t v10 = v85;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56))(v17, 1, 1, v8);
      id v38 = objc_allocWithZone((Class)REMAlarmDueDateDeltaAlertTrigger);
      uint64_t v45 = v88;
    }
    id v46 = (char *)[v38 initWithDueDateDelta:v35 acknowledgedDate:isa];

    unint64_t v47 = (char *)[objc_allocWithZone((Class)REMAlarm) initWithTrigger:v46];
    id v96 = [v47 trigger];
    sub_1000963CC(0, (unint64_t *)&unk_100911060);
    sub_100094134((uint64_t *)&unk_100916DF0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v92 = 0;
      memset(v91, 0, sizeof(v91));
      sub_1000966BC((uint64_t)v91, &qword_100911070);
      goto LABEL_25;
    }
    uint64_t v85 = v46;
    sub_1000967D4(v91, (uint64_t)v93);
    uint64_t v48 = v94;
    uint64_t v49 = v95;
    sub_1000C0DE0(v93, v94);
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v49 + 8))(v45, v48, v49);
    uint64_t v50 = v45;
    uint64_t v51 = v89;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v13, 1, v8) == 1)
    {
      sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909A40);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v93);
      id v46 = v85;
      uint64_t v45 = v50;
LABEL_25:
      if (qword_100907440 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_10008E2DC(v52, (uint64_t)qword_100916CF0);
      unint64_t v53 = (char *)v18;
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v89 = swift_slowAlloc();
        uint64_t v85 = v46;
        *(_DWORD *)uint64_t v56 = 138412290;
        v93[0] = v53;
        id v57 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)uint64_t v89 = v53;

        Class v58 = v88;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "DueDateDeltaDataSourceAlarms: Failed to get fireDate from remEarlyAlert -- skipping {remEarlyAlert: %@}", v56, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        unint64_t v53 = v85;
      }
      else
      {
        uint64_t v59 = v45;

        Class v58 = v47;
        uint64_t v54 = v59;
        unint64_t v47 = v46;
      }
      id v60 = v90;

      uint64_t v61 = sub_100094134((uint64_t *)&unk_100913A40);
      return (*(uint64_t (**)(NSObject **, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v60, 1, 1, v61);
    }
    uint64_t v84 = v47;
    uint64_t v62 = v50;
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    v63(v10, v13, v8);
    id v64 = [v50 assignmentContext];
    id v65 = [v64 currentAssignment];

    if (v65
      && (v65,
          uint64_t v66 = *(void **)(v87 + 40),
          id v67 = v66,
          LOBYTE(v66) = sub_10056DE04((void (**)(char *, uint64_t))v66),
          v67,
          (v66 & 1) == 0))
    {
      if (qword_100907440 != -1) {
        swift_once();
      }
      uint64_t v72 = type metadata accessor for Logger();
      sub_10008E2DC(v72, (uint64_t)qword_100916CF0);
      uint64_t v73 = v88;
      os_log_type_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.info.getter();
      BOOL v76 = os_log_type_enabled(v74, v75);
      uint64_t v77 = v90;
      if (v76)
      {
        id v78 = (uint8_t *)swift_slowAlloc();
        uint64_t v79 = (void *)swift_slowAlloc();
        *(_DWORD *)id v78 = 138543362;
        uint64_t v88 = (v78 + 4);
        id v80 = [v73 objectID];
        *(void *)&v91[0] = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v79 = v80;

        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Fetched reminder is not assigned to current user. Skipping {reminderID: %{public}@}", v78, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v89 + 8))(v10, v8);
        uint64_t v81 = sub_100094134((uint64_t *)&unk_100913A40);
        (*(void (**)(NSObject **, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v90, 1, 1, v81);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v89 + 8))(v10, v8);
        uint64_t v82 = sub_100094134((uint64_t *)&unk_100913A40);
        (*(void (**)(NSObject **, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v77, 1, 1, v82);
      }
    }
    else
    {

      uint64_t v68 = sub_100094134((uint64_t *)&unk_100913A40);
      uint64_t v69 = v90;
      uint64_t v70 = (char *)v90 + *(int *)(v68 + 48);
      id v71 = v84;
      char *v90 = v62;
      v69[1] = v71;
      v63(v70, v10, v8);
      (*(void (**)(NSObject **, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v69, 0, 1, v68);
    }
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v93);
  }
  else
  {
    if (qword_100907440 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_100916CF0);
    id v30 = v18;
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v90 = a4;
      id v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      *(_DWORD *)id v33 = 138412290;
      v93[0] = v30;
      id v34 = v30;
      a4 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v89 = v30;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "DueDateDeltaDataSourceAlarms: Failed to get REMReminder from remEarlyAlert -- skipping {remEarlyAlert: %@}", v33, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v41 = sub_100094134((uint64_t *)&unk_100913A40);
    return (*(uint64_t (**)(NSObject **, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(a4, 1, 1, v41);
  }
}

int64_t sub_1003C9E38(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_1003C9F1C(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003C9F34(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003C9F48(uint64_t a1, int a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_1000963CC(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_1000963CC(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  a5 = v17;
  swift_unknownObjectRelease();
  Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v7 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v7 = (v7 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_23;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
      char v14 = static NSObject.== infix(_:_:)();
    }
    while ((v14 & 1) == 0);
  }

LABEL_17:
  double v15 = *(void **)(*(void *)(a4 + 48) + 8 * v7);

  id v16 = v15;
}

void sub_1003CA1B8(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003CA1CC(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003CA1E0(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003CA1F4(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003CA20C(uint64_t a1, int a2, char a3, uint64_t a4, void (*a5)(void))
{
  unint64_t v8 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      a5(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  a5(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v5 = v18;
  swift_unknownObjectRelease();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v8 = v9 & ~v10;
  if (((*(void *)(a4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v11 = *(id *)(*(void *)(a4 + 48) + 8 * v8);
  char v12 = static NSObject.== infix(_:_:)();

  if ((v12 & 1) == 0)
  {
    uint64_t v13 = ~v10;
    do
    {
      unint64_t v8 = (v8 + 1) & v13;
      if (((*(void *)(a4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_23;
      }
      id v14 = *(id *)(*(void *)(a4 + 48) + 8 * v8);
      char v15 = static NSObject.== infix(_:_:)();
    }
    while ((v15 & 1) == 0);
  }

LABEL_17:
  id v16 = *(void **)(*(void *)(a4 + 48) + 8 * v8);

  id v17 = v16;
}

void sub_1003CA470(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003CA484(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003CA498(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003CA4AC(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003CA4C0(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

uint64_t sub_1003CA4D4@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || 1 << *(unsigned char *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2) {
    return sub_1002CD348(*(void *)(a3 + 48) + 40 * result, a4);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1003CA52C(uint64_t result, int a2, char a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v7 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
      {
        __break(1u);
      }
      else if ((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result))
      {
        if (*(_DWORD *)(a4 + 36) == a2)
        {
LABEL_17:
          uint64_t v8 = *(void *)(*(void *)(a4 + 48) + 8 * v7);
          swift_retain();
          return v8;
        }
        __break(1u);
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_21;
    }
LABEL_10:
    uint64_t result = __CocoaSet.Index.age.getter();
    if (result == *(_DWORD *)(a4 + 36))
    {
      __CocoaSet.Index.element.getter();
      swift_unknownObjectRetain();
      sub_100094134(a5);
      swift_dynamicCast();
      swift_unknownObjectRelease();
      uint64_t v9 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v10 = -1 << *(unsigned char *)(a4 + 32);
      unint64_t v7 = v9 & ~v10;
      if ((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
      {
        uint64_t v11 = ~v10;
        while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v11;
          if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        swift_release();
        __break(1u);
      }
      swift_release();
      goto LABEL_17;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a3)
  {
    __CocoaSet.element(at:)();
    swift_unknownObjectRetain();
    sub_100094134(a5);
    swift_dynamicCast();
    uint64_t v8 = v12;
    swift_unknownObjectRelease();
    return v8;
  }
LABEL_22:
  __break(1u);
  return result;
}

void sub_1003CA754(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003CA768(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

void sub_1003CA77C(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

uint64_t sub_1003CA794(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *sub_1003CA81C(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unsigned int v6 = v5;
        unint64_t v7 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
        if (static NSObject.== infix(_:_:)())
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        ++v3;
        if (v7 == v2) {
          return &_swiftEmptyArrayStorage;
        }
      }
      if (v3 < *(void *)(v4 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    id v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1003CA9AC(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_1003CAA00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    unint64_t v7 = 0;
    unint64_t v8 = (_OWORD *)(a1 + 40);
    uint64_t v9 = _swiftEmptyArrayStorage;
    while (v7 < *(void *)(a1 + 16))
    {
      long long v21 = *v8;
      id v22 = (id)*((void *)v8 - 1);
      long long v23 = v21;
      id v10 = v22;
      id v11 = (id)v21;
      id v12 = *((id *)&v21 + 1);
      sub_1003C4F68((uint64_t)&v22, a2, a3, a4);
      if (v4)
      {
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (v13)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        id v24 = v9;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1001DE794(0, v9[2] + 1, 1);
          uint64_t v9 = v24;
        }
        unint64_t v16 = v9[2];
        unint64_t v15 = v9[3];
        if (v16 >= v15 >> 1)
        {
          sub_1001DE794(v15 > 1, v16 + 1, 1);
          uint64_t v9 = v24;
        }
        long long v9[2] = v16 + 1;
        id v17 = &v9[3 * v16];
        v17[4] = v10;
        *(_OWORD *)(v17 + 5) = v21;
      }
      else
      {
      }
      ++v7;
      unint64_t v8 = (_OWORD *)((char *)v8 + 24);
      if (v6 == v7) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
  }
}

void *sub_1003CABA8(unint64_t a1, void *a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      unint64_t v17 = v3;
      unint64_t v18 = v3 & 0xC000000000000001;
      uint64_t v5 = 4;
      while (1)
      {
        if (v18) {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v7 = *(id *)(v3 + 8 * v5);
        }
        uint64_t v6 = v7;
        uint64_t v8 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
          goto LABEL_19;
        }
        id v9 = [v7 remObjectID];
        id v10 = [a2 remObjectID];
        id v11 = v10;
        if (!v9) {
          break;
        }
        if (!v10)
        {
          id v11 = v9;
LABEL_5:

          uint64_t v6 = v11;
          goto LABEL_6;
        }
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        uint64_t v12 = v4;
        char v13 = a2;
        id v14 = v9;
        char v15 = static NSObject.== infix(_:_:)();

        a2 = v13;
        uint64_t v4 = v12;
        unint64_t v3 = v17;

        if (v15)
        {
LABEL_17:
          swift_bridgeObjectRelease();
          return v6;
        }
LABEL_6:

        ++v5;
        if (v8 == v4) {
          goto LABEL_20;
        }
      }
      if (!v10) {
        goto LABEL_17;
      }
      goto LABEL_5;
    }
  }
LABEL_20:
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_1003CAD74(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4; ; ++i)
    {
      id v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * i);
      id v10 = v9;
      uint64_t v11 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v23 = v9;
      sub_1003BF49C(&v23, a2, a3, &v21);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v6;
      }

      if ((void)v21)
      {
        long long v20 = v21;
        uint64_t v12 = v22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_10030B8BC(0, v6[2] + 1, 1, v6);
        }
        unint64_t v14 = v6[2];
        unint64_t v13 = v6[3];
        long long v15 = v20;
        if (v14 >= v13 >> 1)
        {
          unint64_t v16 = sub_10030B8BC((void *)(v13 > 1), v14 + 1, 1, v6);
          long long v15 = v20;
          uint64_t v6 = v16;
        }
        v6[2] = v14 + 1;
        uint64_t v8 = &v6[3 * v14];
        *((_OWORD *)v8 + 2) = v15;
        v8[6] = v12;
      }
      if (v11 == v5)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_1003CAF48(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4; ; ++i)
    {
      id v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * i);
      id v10 = v9;
      uint64_t v11 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v23 = v9;
      sub_1003C0814(&v23, a2, a3, &v21);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v6;
      }

      if ((void)v21)
      {
        long long v20 = v21;
        uint64_t v12 = v22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_10030B8D0(0, v6[2] + 1, 1, v6);
        }
        unint64_t v14 = v6[2];
        unint64_t v13 = v6[3];
        long long v15 = v20;
        if (v14 >= v13 >> 1)
        {
          unint64_t v16 = sub_10030B8D0((void *)(v13 > 1), v14 + 1, 1, v6);
          long long v15 = v20;
          uint64_t v6 = v16;
        }
        v6[2] = v14 + 1;
        uint64_t v8 = &v6[3 * v14];
        *((_OWORD *)v8 + 2) = v15;
        v8[6] = v12;
      }
      if (v11 == v5)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_1003CB11C(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    unint64_t v28 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v4 = ~v7;
    unint64_t v28 = a1 + 64;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 64);
    unint64_t v6 = a1;
  }
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  int64_t v27 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v11 = _swiftEmptyArrayStorage;
  while ((v6 & 0x8000000000000000) != 0)
  {
    if (!__CocoaDictionary.Iterator.next()()) {
      goto LABEL_41;
    }
    unint64_t v17 = v16;
    swift_unknownObjectRelease();
    id v33 = v17;
    sub_1000963CC(0, &qword_1009168E0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v18 = (id)v31;
    swift_unknownObjectRelease();
    int64_t v15 = v10;
    uint64_t v13 = v5;
    if (!v18) {
      goto LABEL_41;
    }
LABEL_28:
    id v33 = v18;
    sub_1003C1290(&v33, a2, &v31);
    if (v3)
    {

      sub_1000C1AF8();
      swift_bridgeObjectRelease();
      return;
    }

    if ((void)v31)
    {
      long long v30 = v31;
      uint64_t v21 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = sub_10030B9F8(0, v11[2] + 1, 1, v11);
      }
      unint64_t v23 = v11[2];
      unint64_t v22 = v11[3];
      long long v24 = v30;
      if (v23 >= v22 >> 1)
      {
        id v25 = sub_10030B9F8((void *)(v22 > 1), v23 + 1, 1, v11);
        long long v24 = v30;
        uint64_t v11 = v25;
      }
      void v11[2] = v23 + 1;
      uint64_t v12 = &v11[3 * v23];
      *((_OWORD *)v12 + 2) = v24;
      v12[6] = v21;
    }
    int64_t v10 = v15;
    unint64_t v5 = v13;
  }
  if (v5)
  {
    uint64_t v13 = (v5 - 1) & v5;
    unint64_t v14 = __clz(__rbit64(v5)) | (v10 << 6);
    int64_t v15 = v10;
LABEL_27:
    id v18 = *(id *)(*(void *)(v6 + 56) + 8 * v14);
    if (!v18) {
      goto LABEL_41;
    }
    goto LABEL_28;
  }
  int64_t v15 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v15 >= v27) {
      goto LABEL_41;
    }
    unint64_t v19 = *(void *)(v28 + 8 * v15);
    if (!v19)
    {
      int64_t v20 = v10 + 2;
      if (v10 + 2 >= v27) {
        goto LABEL_41;
      }
      unint64_t v19 = *(void *)(v28 + 8 * v20);
      if (v19) {
        goto LABEL_25;
      }
      int64_t v20 = v10 + 3;
      if (v10 + 3 >= v27) {
        goto LABEL_41;
      }
      unint64_t v19 = *(void *)(v28 + 8 * v20);
      if (v19) {
        goto LABEL_25;
      }
      int64_t v20 = v10 + 4;
      if (v10 + 4 >= v27) {
        goto LABEL_41;
      }
      unint64_t v19 = *(void *)(v28 + 8 * v20);
      if (v19)
      {
LABEL_25:
        int64_t v15 = v20;
      }
      else
      {
        int64_t v15 = v10 + 5;
        if (v10 + 5 >= v27) {
          goto LABEL_41;
        }
        unint64_t v19 = *(void *)(v28 + 8 * v15);
        if (!v19)
        {
          int64_t v26 = v10 + 6;
          while (v27 != v26)
          {
            unint64_t v19 = *(void *)(v28 + 8 * v26++);
            if (v19)
            {
              int64_t v15 = v26 - 1;
              goto LABEL_26;
            }
          }
LABEL_41:
          sub_1000C1AF8();
          return;
        }
      }
    }
LABEL_26:
    uint64_t v13 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v15 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

void *sub_1003CB484(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id **, uint64_t, uint64_t))
{
  uint64_t v30 = a3;
  long long v31 = a4;
  uint64_t v29 = a2;
  uint64_t v6 = sub_100094134(&qword_1009167A8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100094134((uint64_t *)&unk_100913A40);
  uint64_t v24 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v27 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v23 = (uint64_t)&v22 - v11;
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v26 = a1 & 0xC000000000000001;
    uint64_t v13 = _swiftEmptyArrayStorage;
    unint64_t v14 = (unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    uint64_t v15 = 4;
    id v25 = (id *)a1;
    while (1)
    {
      unint64_t v16 = v26 ? (id *)specialized _ArrayBuffer._getElementSlowPath(_:)() : (id *)*(id *)(a1 + 8 * v15);
      a1 = (unint64_t)v16;
      uint64_t v17 = v15 - 3;
      if (__OFADD__(v15 - 4, 1)) {
        break;
      }
      uint64_t v32 = v16;
      v31(&v32, v29, v30);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v13;
      }

      if ((*v14)(v8, 1, v28) == 1)
      {
        sub_1000966BC((uint64_t)v8, &qword_1009167A8);
      }
      else
      {
        uint64_t v18 = v23;
        sub_100096408((uint64_t)v8, v23, (uint64_t *)&unk_100913A40);
        sub_100096408(v18, v27, (uint64_t *)&unk_100913A40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = (void *)sub_10030B8A8(0, v13[2] + 1, 1, (unint64_t)v13);
        }
        unint64_t v20 = v13[2];
        unint64_t v19 = v13[3];
        if (v20 >= v19 >> 1) {
          uint64_t v13 = (void *)sub_10030B8A8(v19 > 1, v20 + 1, 1, (unint64_t)v13);
        }
        v13[2] = v20 + 1;
        sub_100096408(v27, (uint64_t)v13+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v20, (uint64_t *)&unk_100913A40);
      }
      a1 = (unint64_t)v25;
      ++v15;
      if (v17 == v12)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1003CB7C4(uint64_t a1)
{
  return sub_1003CBC08(a1, (uint64_t)sub_1003CB7F0, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))sub_1003BA4E0);
}

void sub_1003CB7F0(void *a1@<X8>)
{
  sub_1003C0DC8(v1, a1);
}

uint64_t sub_1003CB80C()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1003CB844()
{
  return sub_1003CC318((uint64_t (*)(void, void, void, void, void))sub_1003BE3DC);
}

uint64_t sub_1003CB85C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CB86C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003CB87C()
{
  return swift_release();
}

uint64_t sub_1003CB884@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10022FB64(a1, a2);
}

void sub_1003CB89C(uint64_t a1, void **a2)
{
}

uint64_t sub_1003CB8B4()
{
  return sub_1003CC318((uint64_t (*)(void, void, void, void, void))sub_1003BDB54);
}

uint64_t sub_1003CB8CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CB8DC@<X0>(NSObject *a1@<X0>, objc_class **a2@<X8>)
{
  return sub_1003C174C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1003CB8F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1003CB940(unint64_t a1)
{
  uint64_t v2 = swift_retain();
  uint64_t v3 = sub_1003CBC08(v2, (uint64_t)sub_1003CB7F0, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))sub_1003BA4E0);
  swift_release();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v20 = v3;
    if (!v4) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v20 = v3;
    if (!v4) {
      goto LABEL_11;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    __break(1u);
    return;
  }
  uint64_t v5 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(a1 + 8 * v5 + 32);
    }
    uint64_t v7 = v6;
    ++v5;
    id v8 = [v6 phones];
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100201B10(v9);
  }
  while (v4 != v5);
LABEL_11:
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_10012674C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  sub_1003B437C(v10);
  unint64_t v12 = v11;
  if (v4)
  {
    unint64_t v19 = v11;
    swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(a1 + 8 * v13 + 32);
      }
      uint64_t v15 = v14;
      ++v13;
      id v16 = [v14 emails];
      uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100201B10(v17);
    }
    while (v4 != v13);
    swift_bridgeObjectRelease();
    unint64_t v12 = v19;
  }
  uint64_t v18 = sub_10012674C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  sub_1003CAA00(v20, v10, v12, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1003CBBDC(uint64_t a1)
{
  return sub_1003CBC08(a1, (uint64_t)sub_1003CBE34, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))sub_1003BA980);
}

uint64_t sub_1003CBC08(uint64_t a1, uint64_t a2, uint64_t (*a3)(unsigned char *, uint64_t, uint64_t))
{
  sub_10010B4E8(a1 + 48, (uint64_t)v9);
  uint64_t v7 = a3(v9, a2, a1);
  return v7;
}

void sub_1003CBE34(void *a1@<X8>)
{
  sub_1003C41E0(v1, a1);
}

uint64_t sub_1003CBE50()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CBE60@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10022FB64(a1, a2);
}

void sub_1003CBE78(uint64_t a1, void **a2)
{
}

uint64_t sub_1003CBE90()
{
  return sub_1003CC08C((uint64_t (*)(void, void, void, void, void))sub_1003BD2D8);
}

uint64_t sub_1003CBEA8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CBEB8@<X0>(NSObject *a1@<X0>, objc_class **a2@<X8>)
{
  return sub_1003C5564(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1003CBED4(uint64_t a1)
{
  return sub_1003CBC08(a1, (uint64_t)sub_1003CBF00, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))sub_1003BA980);
}

void sub_1003CBF00(void *a1@<X8>)
{
  sub_1003C874C(v1, a1);
}

id sub_1003CBF1C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 minimumSupportedAppVersion];
  *a2 = result;
  return result;
}

id sub_1003CBF50(void *a1, id *a2)
{
  return [*a2 setMinimumSupportedAppVersion:*a1];
}

uint64_t sub_1003CBF64(uint64_t a1)
{
  return sub_1003CBC08(a1, (uint64_t)sub_1003CC018, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))sub_1003B9BA0);
}

uint64_t sub_1003CBF90(uint64_t a1)
{
  return sub_1003CBC08(a1, (uint64_t)sub_1003CBFBC, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))sub_1003BA040);
}

void sub_1003CBFBC(void *a1@<X8>)
{
  sub_1003C02E4(v1, a1);
}

uint64_t sub_1003CBFD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CBFE8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10022FB64(a1, a2);
}

void sub_1003CC000(uint64_t a1, void **a2)
{
}

void sub_1003CC018(void *a1@<X8>)
{
  sub_1003BEE38(v1, a1);
}

uint64_t sub_1003CC034()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC044@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10022FB64(a1, a2);
}

void sub_1003CC05C(uint64_t a1, void **a2)
{
}

uint64_t sub_1003CC074()
{
  return sub_1003CC08C((uint64_t (*)(void, void, void, void, void))sub_1003BE6B0);
}

uint64_t sub_1003CC08C(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1003CC0A4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC0B4()
{
  return sub_1003CC318((uint64_t (*)(void, void, void, void, void))sub_1003BE97C);
}

uint64_t sub_1003CC0CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC0DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC0EC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC0FC()
{
  return sub_1003CC1F4((uint64_t (*)(void, void, void, void, void))sub_1003BDE28);
}

uint64_t sub_1003CC114()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC124(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    sub_100097F34(result, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003CC164()
{
  return sub_1003CC278((uint64_t (*)(void, void, void, void, void))sub_1003BE108);
}

uint64_t sub_1003CC17C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC18C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC19C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC1AC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC1BC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC1CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC1DC()
{
  return sub_1003CC1F4((uint64_t (*)(void, void, void, void, void))sub_1003BD874);
}

uint64_t sub_1003CC1F4(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1003CC20C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1003CC21C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1003CC260()
{
  return sub_1003CC278((uint64_t (*)(void, void, void, void, void))sub_1003BD5A0);
}

uint64_t sub_1003CC278(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1003CC290()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC2A0(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003CC2B0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058((uint64_t *)&unk_100910990);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003CC2F8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC308()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC318(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1003CC344()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CC450()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100916F00);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100916F00);
  if (qword_100907830 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424D8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  *(void *)&v8[0] = 0xD000000000000049;
  *((void *)&v8[0] + 1) = 0x8000000100789B10;
  id v4 = [(objc_class *)metadata.super.super.isa __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_1000D6CBC((uint64_t)v8, (uint64_t)v9);
  if (!v9[3])
  {
    sub_1000966BC((uint64_t)v9, &qword_100908190);
LABEL_9:
    sub_1003CC730(_.super.isa);
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    v9[0] = 0xD000000000000049;
    v9[1] = 0x8000000100789B10;
    [(objc_class *)metadata.super.super.isa __swift_setObject:isa forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    return;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_9;
  }
  id v5 = [v7 integerValue];

  if ((uint64_t)v5 <= 0) {
    goto LABEL_9;
  }
}

uint64_t sub_1003CC730(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  if (qword_100907450 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_100916F00);
  id v4 = a1;
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    aBlock[0] = ObjectType;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_getMetatypeMetadata();
    uint64_t v8 = String.init<A>(describing:)();
    aBlock[0] = sub_1000C51B8(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    id v10 = sub_1002ECF34();
    aBlock[0] = sub_1000C51B8((uint64_t)v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: BEGIN {store: %{public}s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v12 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:1];
  id v13 = [v4 persistentStoreCoordinator];
  [v12 setPersistentStoreCoordinator:v13];

  [v12 setTransactionAuthor:RDStoreControllerMostRecentTargetTemplateIdentifierByCurrentUserMigrationAuthor];
  id v14 = (void *)swift_allocObject();
  v14[2] = v12;
  v14[3] = v4;
  v14[4] = ObjectType;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1003CF284;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10008F6F4;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C4848;
  id v16 = _Block_copy(aBlock);
  id v17 = v4;
  id v18 = v12;
  swift_retain();
  swift_release();
  [v18 performBlockAndWait:v16];

  _Block_release(v16);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v18) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003CCAD0(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  id v12 = &v35[-v11];
  __chkstk_darwin(v13);
  uint64_t v15 = &v35[-v14];
  Date.init()();
  sub_1003CD184(a1, a2, (uint64_t)v15, (uint64_t)a3);
  v40[0] = 0;
  sub_1003CDC44((uint64_t)a1, v40, a2, (uint64_t)v15, (uint64_t)a3);
  sub_1003CE5D8(a1, v40, a2, (uint64_t)v15, a3);
  if (qword_100907450 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_100916F00);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v12, v15, v6);
  id v20 = a2;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  int v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc();
    os_log_t v37 = v21;
    uint64_t v25 = v24;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v39 = v38;
    *(_DWORD *)uint64_t v25 = 136315650;
    int v36 = v23;
    uint64_t v41 = (uint64_t)a3;
    swift_getMetatypeMetadata();
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v41 = sub_1000C51B8(v26, v27, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2082;
    id v28 = sub_1002ECF34();
    uint64_t v41 = sub_1000C51B8((uint64_t)v28, v29, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22) = 2050;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v31 = v30;
    uint64_t v32 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
    v32(v9, v6);
    uint64_t v41 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32(v12, v6);
    os_log_t v33 = v37;
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v36, "%s: END {store: %{public}s, elapsedSeconds: %{public}f}", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v32 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
    v32(v12, v6);
  }
  v32(v15, v6);
  return swift_bridgeObjectRelease();
}

void sub_1003CD184(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a4;
  uint64_t v62 = a3;
  id v63 = a2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v65 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v64 = (char *)&v55 - v9;
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v10 = [(id)swift_getObjCClassFromMetadata() entity];
  id v11 = [objc_allocWithZone((Class)NSBatchUpdateRequest) initWithEntity:v10];

  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = (void *)sub_10039B058(KeyPath);
  swift_release();
  [v11 setPredicate:v13];

  sub_100094134(&qword_10090AF50);
  uint64_t inited = swift_initStackObject();
  long long v61 = xmmword_100776E40;
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)&long long v68 = 0xD00000000000002FLL;
  *((void *)&v68 + 1) = 0x80000001007D3D80;
  AnyHashable.init<A>(_:)();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [self expressionForKeyPath:v15];

  *(void *)(inited + 96) = sub_1000963CC(0, &qword_10090B098);
  *(void *)(inited + 72) = v16;
  sub_1002EE418(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v11 setPropertiesToUpdate:isa];

  [v11 setResultType:1];
  v67[0] = 0;
  id v18 = [a1 executeRequest:v11 error:v67];
  id v19 = v67[0];
  if (v18)
  {
    id v20 = v18;
    *((void *)&v69 + 1) = sub_1000963CC(0, (unint64_t *)&unk_100916F40);
    *(void *)&long long v68 = v20;
    sub_1000963CC(0, &qword_1009133F0);
    id v21 = v19;
    throwingCast<A>(_:as:failureMessage:)();
    if (v4)
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v68);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v68);
      id v23 = v70;
      if ([v70 result])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v68 = 0u;
        long long v69 = 0u;
      }
      uint64_t v24 = sub_100094134(&qword_100908270);
      throwingCast<A>(_:as:failureMessage:)();
      sub_1000966BC((uint64_t)&v68, &qword_100908190);
      id v58 = v23;
      id v25 = v70;
      id v57 = self;
      uint64_t v26 = swift_initStackObject();
      *(_OWORD *)(v26 + 16) = v61;
      *(void *)&long long v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v68 + 1) = v27;
      AnyHashable.init<A>(_:)();
      *(void *)(v26 + 96) = v24;
      *(void *)(v26 + 72) = v25;
      *(void *)&long long v61 = v25;
      swift_bridgeObjectRetain();
      sub_1002EE418(v26);
      Class v28 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_10077A530;
      *(void *)(v29 + 32) = a1;
      *(void *)&long long v68 = v29;
      specialized Array._endMutation()();
      sub_1000963CC(0, (unint64_t *)&unk_100916F50);
      id v30 = a1;
      Class v31 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v57 mergeChangesFromRemoteContextSave:v28 intoContexts:v31];

      if (qword_100907450 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10008E2DC(v32, (uint64_t)qword_100916F00);
      id v34 = v64;
      uint64_t v33 = v65;
      uint64_t v35 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v62, v66);
      id v36 = v63;
      unint64_t v37 = v61;
      swift_bridgeObjectRetain();
      id v63 = v36;
      uint64_t v38 = Logger.logObject.getter();
      LODWORD(v62) = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, (os_log_type_t)v62))
      {
        id v57 = v38;
        uint64_t v39 = swift_slowAlloc();
        uint64_t v56 = (void *)swift_slowAlloc();
        id v70 = v56;
        *(_DWORD *)uint64_t v39 = 136315906;
        *(void *)&long long v68 = v60;
        swift_getMetatypeMetadata();
        uint64_t v40 = String.init<A>(describing:)();
        *(void *)&long long v68 = sub_1000C51B8(v40, v41, (uint64_t *)&v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2082;
        id v42 = v63;
        id v43 = sub_1002ECF34();
        *(void *)&long long v68 = sub_1000C51B8((uint64_t)v43, v44, (uint64_t *)&v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 22) = 2050;
        if (v37 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v45 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        id v46 = v59;
        swift_bridgeObjectRelease();
        *(void *)&long long v68 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 32) = 2050;
        id v63 = (id)(v39 + 34);
        Date.init()();
        unint64_t v47 = v64;
        Date.timeIntervalSince(_:)();
        uint64_t v49 = v48;
        uint64_t v50 = *(void (**)(char *, uint64_t))(v65 + 8);
        uint64_t v51 = v46;
        uint64_t v52 = v66;
        v50(v51, v66);
        *(void *)&long long v68 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v50(v47, v52);
        unint64_t v53 = v57;
        _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v62, "%s: Copied value of '\\REMCDList.mostRecentTargetTemplateIdentifier' to '\\REMCDList.mostRecentTargetTemplateIdentifierByCurrentUser' via 'NSBatchUpdateRequest' {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}", (uint8_t *)v39, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        id v54 = v63;

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
      }
    }
  }
  else
  {
    id v22 = v67[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t sub_1003CDA50@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 mostRecentTargetTemplateIdentifier];
  if (v3)
  {
    uint64_t v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1003CDB18(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001248EC(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setMostRecentTargetTemplateIdentifier:isa];
}

void sub_1003CDC44(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v83 = a5;
  uint64_t v70 = a4;
  id v71 = a3;
  uint64_t v72 = a2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v77 = *(char **)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v82 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v79 = (uint64_t)&v64 - v11;
  __chkstk_darwin(v12);
  uint64_t v84 = (char *)&v64 - v13;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v73 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v19 = (char *)&v64 - v18;
  id v20 = (void *)sub_1002F51CC(0);
  uint64_t v21 = (uint64_t)[objc_allocWithZone((Class)NSFetchRequest) init];
  type metadata accessor for REMCDTemplate();
  id v22 = [(id)swift_getObjCClassFromMetadata() entity];
  [(id)v21 setEntity:v22];

  [(id)v21 setAffectedStores:0];
  [(id)v21 setPredicate:v20];
  [(id)v21 setResultType:2];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100776E40;
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 32) = 0x696669746E656469;
  *(void *)(v23 + 40) = 0xEA00000000007265;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [(id)v21 setPropertiesToFetch:isa];

  sub_1000963CC(0, &qword_10090E4F0);
  id v25 = (char *)v81;
  unint64_t v26 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v27 = v25;
  if (v25)
  {

    return;
  }
  Class v28 = (void (**)(char *, void, uint64_t, uint64_t))v77;
  uint64_t v29 = v73;
  uint64_t v65 = v16;
  long long v69 = v19;
  v89[0] = (uint64_t)&_swiftEmptySetSingleton;
  unint64_t v81 = v26;
  if (v26 >> 62) {
    goto LABEL_31;
  }
  uint64_t v30 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_5:
  uint64_t v31 = v83;
  uint64_t v66 = v27;
  id v67 = (id)v21;
  uint64_t v68 = v14;
  if (v30)
  {
    uint64_t v32 = v28;
    unint64_t v33 = v81;
    unint64_t v80 = v81 & 0xC000000000000001;
    v28 += 7;
    id v78 = (unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 6);
    BOOL v76 = (void (**)(char *, char *, uint64_t))(v32 + 4);
    os_log_type_t v74 = (char **)(v32 + 1);
    os_log_type_t v75 = (void (**)(char *, char *, uint64_t))(v32 + 2);
    uint64_t v21 = 4;
    uint64_t v77 = (char *)&type metadata for Any + 8;
    while (1)
    {
      uint64_t v14 = v30;
      uint64_t v29 = v21 - 4;
      if (v80) {
        id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v35 = *(id *)(v33 + 8 * v21);
      }
      id v36 = v35;
      uint64_t v37 = v21 - 3;
      if (__OFADD__(v29, 1))
      {
        __break(1u);
LABEL_31:
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_5;
      }
      *(void *)&v86[0] = 0x696669746E656469;
      *((void *)&v86[0] + 1) = 0xEA00000000007265;
      id v38 = [v35 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v38)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v86, 0, sizeof(v86));
      }
      uint64_t v27 = v82;
      uint64_t v39 = v84;
      sub_1000D6CBC((uint64_t)v86, (uint64_t)v87);
      if (v88)
      {
        int v40 = swift_dynamicCast();
        (*v28)(v7, v40 ^ 1u, 1, v8);
        if ((*v78)(v7, 1, v8) != 1)
        {
          (*v76)(v39, v7, v8);
          (*v75)(v27, v39, v8);
          sub_10031DEC0(v79, v27);
          uint64_t v27 = *v74;
          ((void (*)(uint64_t, uint64_t))*v74)(v79, v8);
          ((void (*)(char *, uint64_t))v27)(v84, v8);
          goto LABEL_9;
        }
      }
      else
      {
        sub_1000966BC((uint64_t)v87, &qword_100908190);
        (*v28)(v7, 1, 1, v8);
      }
      sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909E50);
LABEL_9:

      ++v21;
      BOOL v34 = v37 == v30;
      uint64_t v31 = v83;
      unint64_t v33 = v81;
      if (v34)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v41 = (void *)v89[0];
        uint64_t v14 = v68;
        uint64_t v42 = v73;
        goto LABEL_22;
      }
    }
  }
  swift_bridgeObjectRelease_n();
  unint64_t v41 = &_swiftEmptySetSingleton;
  uint64_t v42 = v29;
LABEL_22:
  id v43 = v72;
  swift_beginAccess();
  uint64_t *v43 = (uint64_t)v41;
  swift_bridgeObjectRelease();
  unint64_t v44 = v71;
  uint64_t v45 = v70;
  if (qword_100907450 != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  sub_10008E2DC(v46, (uint64_t)qword_100916F00);
  unint64_t v47 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v69, v45, v14);
  id v48 = v44;
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = swift_slowAlloc();
    uint64_t v84 = (char *)swift_slowAlloc();
    v89[0] = (uint64_t)v84;
    *(_DWORD *)uint64_t v51 = 136315906;
    *(void *)&v86[0] = v31;
    swift_getMetatypeMetadata();
    uint64_t v52 = String.init<A>(describing:)();
    *(void *)&v86[0] = sub_1000C51B8(v52, v53, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v51 + 12) = 2082;
    id v54 = sub_1002ECF34();
    *(void *)&v86[0] = sub_1000C51B8((uint64_t)v54, v55, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v51 + 22) = 2050;
    swift_beginAccess();
    uint64_t v56 = *v43;
    if (*v43) {
      uint64_t v56 = *(void *)(v56 + 16);
    }
    id v57 = v65;
    uint64_t v85 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 32) = 2050;
    Date.init()();
    id v58 = v69;
    Date.timeIntervalSince(_:)();
    uint64_t v60 = v59;
    long long v61 = *(void (**)(char *, uint64_t))(v42 + 8);
    uint64_t v62 = v57;
    uint64_t v63 = v68;
    v61(v62, v68);
    uint64_t v85 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v61(v58, v63);
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s: Fetched '\\REMCDTemplate.identifier' of all non-deleted templates in persistent stores {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}", (uint8_t *)v51, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v42 + 8))(v47, v14);
  }
}

void sub_1003CE5D8(void *a1, uint64_t *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v90 = a5;
  uint64_t v80 = a4;
  id v81 = a3;
  uint64_t v89 = a2;
  uint64_t v86 = type metadata accessor for Date();
  uint64_t v84 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v79 = (char *)v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v85 = (char *)v77 - v8;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v9 - 8);
  uint64_t v98 = (char *)v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v16 = (char *)v77 - v15;
  uint64_t v17 = _s10PredicatesOMa_1();
  __chkstk_darwin(v17);
  id v19 = (char *)v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  id v20 = (void *)sub_100535B3C();
  sub_1000ECFE0((uint64_t)v19);
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v21 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v22 = [(id)swift_getObjCClassFromMetadata() entity];
  [v21 setEntity:v22];

  [v21 setAffectedStores:0];
  [v21 setPredicate:v20];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100776E40;
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 32) = 0xD00000000000002FLL;
  *(void *)(v23 + 40) = 0x80000001007D3D80;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v21 setPropertiesToFetch:isa];

  uint64_t v25 = v106;
  unint64_t v26 = NSManagedObjectContext.fetch<A>(_:)();
  unint64_t v27 = v25;
  if (v25) {
    goto LABEL_2;
  }
  uint64_t v103 = v16;
  uint64_t v105 = v13;
  uint64_t v106 = v11;
  Class v28 = v85;
  uint64_t v29 = v86;
  id v78 = a1;
  unint64_t v93 = v26;
  if (v26 >> 62) {
    goto LABEL_43;
  }
  uint64_t v30 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  uint64_t v31 = v90;
  uint64_t v32 = v83;
  unint64_t v33 = v105;
  v77[1] = v27;
  id v82 = v21;
  if (v30)
  {
    uint64_t v95 = v30;
    unint64_t v34 = v93;
    unint64_t v97 = v93 & 0xC000000000000001;
    swift_beginAccess();
    uint64_t v91 = 0;
    unint64_t v27 = 0;
    uint64_t v88 = v34 & 0xFFFFFFFFFFFFFF8;
    unint64_t v87 = v34 + 32;
    uint64_t v94 = (void (**)(char *, char *, uint64_t))(v32 + 32);
    id v96 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    uint64_t v92 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
    uint64_t v99 = v32 + 16;
    id v102 = (void (**)(char *, uint64_t))(v32 + 8);
    uint64_t v35 = v84;
    while (1)
    {
      if (v97)
      {
        id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v38 = __OFADD__(v27++, 1);
        if (v38) {
          goto LABEL_40;
        }
      }
      else
      {
        if (v27 >= *(void *)(v88 + 16)) {
          goto LABEL_41;
        }
        id v37 = *(id *)(v87 + 8 * v27);
        BOOL v38 = __OFADD__(v27++, 1);
        if (v38)
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          swift_bridgeObjectRetain();
          uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
      }
      id v104 = v37;
      id v39 = [v37 mostRecentTargetTemplateIdentifierByCurrentUser];
      if (!v39) {
        break;
      }
      int v40 = v39;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v41 = *v94;
      uint64_t v36 = (uint64_t)v98;
      uint64_t v42 = v33;
      uint64_t v43 = v106;
      (*v94)(v98, v42, v106);
      (*v96)(v36, 0, 1, v43);
      uint64_t v44 = v43;
      unint64_t v33 = v105;
      if ((*v92)(v36, 1, v44) == 1) {
        goto LABEL_8;
      }
      uint64_t v45 = v36;
      uint64_t v46 = v106;
      v41(v103, (char *)v45, v106);
      uint64_t v47 = *v89;
      if (*v89 && *(void *)(v47 + 16))
      {
        sub_1003A006C((unint64_t *)&qword_100913920);
        swift_bridgeObjectRetain();
        uint64_t v48 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v49 = -1 << *(unsigned char *)(v47 + 32);
        unint64_t v50 = v48 & ~v49;
        uint64_t v101 = v47 + 56;
        if ((*(void *)(v47 + 56 + ((v50 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v50))
        {
          uint64_t v100 = ~v49;
          uint64_t v51 = *(void *)(v83 + 72);
          uint64_t v52 = *(void (**)(char *, unint64_t, uint64_t))(v83 + 16);
          while (1)
          {
            id v54 = v105;
            uint64_t v53 = v106;
            v52(v105, *(void *)(v47 + 48) + v51 * v50, v106);
            sub_1003A006C((unint64_t *)&qword_10090B4D0);
            char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v56 = *v102;
            (*v102)(v54, v53);
            if (v55) {
              break;
            }
            unint64_t v50 = (v50 + 1) & v100;
            if (((*(void *)(v101 + ((v50 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v50) & 1) == 0) {
              goto LABEL_24;
            }
          }

          swift_bridgeObjectRelease();
          v56(v103, v106);
          uint64_t v29 = v86;
          uint64_t v35 = v84;
          Class v28 = v85;
          id v21 = v82;
          uint64_t v31 = v90;
          unint64_t v33 = v105;
          goto LABEL_9;
        }
LABEL_24:
        swift_bridgeObjectRelease();
        uint64_t v29 = v86;
        uint64_t v35 = v84;
        Class v28 = v85;
        id v21 = v82;
        unint64_t v33 = v105;
        uint64_t v46 = v106;
      }
      id v57 = v104;
      [v104 setMostRecentTargetTemplateIdentifierByCurrentUser:0];

      (*v102)(v103, v46);
      BOOL v38 = __OFADD__(v91++, 1);
      uint64_t v31 = v90;
      if (v38) {
        goto LABEL_42;
      }
LABEL_9:
      if (v27 == v95) {
        goto LABEL_30;
      }
    }
    uint64_t v36 = (uint64_t)v98;
    (*v96)((uint64_t)v98, 1, 1, v106);
LABEL_8:

    sub_1000966BC(v36, (uint64_t *)&unk_100909E50);
    goto LABEL_9;
  }
  uint64_t v91 = 0;
  uint64_t v35 = v84;
LABEL_30:
  swift_bridgeObjectRelease();
  id v58 = v78;
  uint64_t v59 = v29;
  if ([v78 hasChanges])
  {
    id v107 = 0;
    if (![v58 save:&v107])
    {
      id v76 = v107;
      _convertNSErrorToError(_:)();

      swift_willThrow();
LABEL_2:

      return;
    }
    id v60 = v107;
  }
  if (qword_100907450 != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  sub_10008E2DC(v61, (uint64_t)qword_100916F00);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v28, v80, v29);
  id v62 = v81;
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.default.getter();
  int v65 = v64;
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v66 = v35;
    uint64_t v67 = swift_slowAlloc();
    uint64_t v106 = swift_slowAlloc();
    id v107 = v31;
    uint64_t v108 = v106;
    *(_DWORD *)uint64_t v67 = 136315906;
    LODWORD(v105) = v65;
    swift_getMetatypeMetadata();
    uint64_t v68 = String.init<A>(describing:)();
    id v107 = (id)sub_1000C51B8(v68, v69, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v67 + 12) = 2082;
    id v70 = sub_1002ECF34();
    id v107 = (id)sub_1000C51B8((uint64_t)v70, v71, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v67 + 22) = 2050;
    id v107 = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v67 + 32) = 2050;
    uint64_t v72 = v79;
    Date.init()();
    Date.timeIntervalSince(_:)();
    os_log_type_t v74 = v73;
    os_log_type_t v75 = *(void (**)(char *, uint64_t))(v66 + 8);
    v75(v72, v59);
    id v107 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v75(v28, v59);
    _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v105, "%s: Set '\\REMCDList.mostRecentTargetTemplateIdentifierByCurrentUser' of some shared lists to nil {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}", (uint8_t *)v67, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v29);
  }
}

id RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser();
  return [super init];
}

uint64_t type metadata accessor for RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser()
{
  return self;
}

id RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser();
  return [super dealloc];
}

uint64_t sub_1003CF244()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003CF284()
{
  return sub_1003CCAD0(v0[2], v0[3], v0[4]);
}

uint64_t sub_1003CF290()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CF2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003CF2B0()
{
  return swift_release();
}

const char *sub_1003CF2B8()
{
  return "mostRecentTargetTemplateIdentifier";
}

uint64_t sub_1003CF2CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = _s10PredicatesOMa_0();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = _swiftEmptyArrayStorage;
  sub_1003CFC78(v1, (uint64_t)v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  sub_10032F5A0(KeyPath, (uint64_t)v4);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v15[2] >= v15[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_1002F52FC(v15);
}

uint64_t sub_1003CF50C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 publicLinkURLUUID];
  if (v3)
  {
    uint64_t v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1003CF5D4(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001248EC(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setPublicLinkURLUUID:isa];
}

void *sub_1003CF700()
{
  sub_1001DE058(0, 6, 0);
  uint64_t v0 = 0;
  uint64_t result = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v2 = 0xEB000000006D656CLL;
    unint64_t v3 = 0x626D456567646162;
    switch(*((unsigned char *)&off_1008B15F8 + v0 + 32))
    {
      case 1:
        unint64_t v2 = 0xE500000000000000;
        unint64_t v3 = 0x726F6C6F63;
        break;
      case 2:
        unint64_t v3 = 0xD000000000000015;
        unint64_t v2 = 0x80000001007D3DB0;
        break;
      case 3:
        unint64_t v2 = 0xE400000000000000;
        unint64_t v3 = 1701667182;
        break;
      case 4:
        unint64_t v2 = 0x8000000100789BB0;
        unint64_t v3 = 0xD000000000000011;
        break;
      case 5:
        unint64_t v2 = 0xEC000000656C7974;
        unint64_t v3 = 0x53676E6974726F73;
        break;
      default:
        break;
    }
    uint64_t v7 = result;
    unint64_t v5 = result[2];
    unint64_t v4 = result[3];
    if (v5 >= v4 >> 1)
    {
      sub_1001DE058(v4 > 1, v5 + 1, 1);
      uint64_t result = v7;
    }
    ++v0;
    result[2] = v5 + 1;
    uint64_t v6 = &result[2 * v5];
    v6[4] = v3;
    v6[5] = v2;
  }
  while (v0 != 6);
  return result;
}

unint64_t sub_1003CF89C(NSString a1, uint64_t a2, Class isa)
{
  uint64_t v6 = _s10PredicatesOMa_0();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, NSString, uint64_t))(*(void *)(v9 - 8) + 16))(v8, a1, v9);
  uint64_t v10 = (void *)sub_1003CF2CC();
  type metadata accessor for REMCDPublicTemplate();
  id v11 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v12 = [(id)swift_getObjCClassFromMetadata() entity];
  [v11 setEntity:v12];

  [v11 setAffectedStores:0];
  [v11 setPredicate:v10];

  if (isa)
  {
    sub_1001FFC40((uint64_t)isa);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v11 setPropertiesToFetch:isa];

  [v11 setFetchLimit:1];
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {
    sub_1003CFC1C((uint64_t)v8);

    return (unint64_t)a1;
  }
  unint64_t v14 = result;
  if (!(result >> 62))
  {
    if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v17 = self;
    id v18 = objc_allocWithZone((Class)REMObjectID);
    Class v19 = UUID._bridgeToObjectiveC()().super.isa;
    a1 = String._bridgeToObjectiveC()();
    id v20 = [v18 initWithUUID:v19 entityName:a1];

    [v17 noSuchObjectErrorWithObjectID:v20];
    swift_willThrow();

    sub_1003CFC1C((uint64_t)v8);
    return (unint64_t)a1;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_13;
  }
LABEL_7:
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_10;
  }
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v15 = *(id *)(v14 + 32);
LABEL_10:
    a1 = v15;
    swift_bridgeObjectRelease();
    sub_1003CFC1C((uint64_t)v8);

    return (unint64_t)a1;
  }
  __break(1u);
  return result;
}

uint64_t _s10PredicatesOMa_0()
{
  uint64_t result = qword_100916FD0;
  if (!qword_100916FD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003CFC1C(uint64_t a1)
{
  uint64_t v2 = _s10PredicatesOMa_0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003CFC78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10PredicatesOMa_0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_1003CFCE4(void *a1, uint64_t a2)
{
  if (qword_100907B10 != -1) {
    swift_once();
  }
  id v5 = (id)qword_100942618;
  uint64_t v6 = swift_retain();
  id v7 = sub_10034A86C(v6);
  swift_release();
  if (v7)
  {
    uint64_t v8 = (objc_class *)sub_1003CF700();
    unint64_t v9 = sub_1003CF89C(a1, a2, v8);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_getErrorValue();
      if (Error.isREMError(withErrorCode:)())
      {
        type metadata accessor for REMCDPublicTemplate();
        id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:a2];
        [v5 setAccount:v7];
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        [v5 setPublicLinkURLUUID:isa];

        swift_errorRelease();
      }
      else
      {
        swift_willThrow();
      }
    }
    else
    {
      id v5 = (id)v9;

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    [self noPrimaryActiveCloudKitAccountError];
    swift_willThrow();
  }
  return v5;
}

uint64_t *sub_1003CFE90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  return a1;
}

uint64_t sub_1003CFF40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1003CFFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, a2, a3, v6);
}

uint64_t sub_1003D0028(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID();
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t type metadata accessor for RDSuggestedAttributeCache()
{
  uint64_t result = qword_100916FF8;
  if (!qword_100916FF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003D0118()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1003D0158()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100916FE0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100916FE0);
  if (qword_1009077E8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942400);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1003D0220()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v13 = *(void *)(v0 - 8);
  uint64_t v14 = v0;
  __chkstk_darwin(v0);
  id v12 = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D0FD4();
  id v15 = (void *)type metadata accessor for RDSuggestedAttributeCache();
  sub_100094134(&qword_100917068);
  uint64_t v8 = String.init<A>(reflecting:)();
  v11[0] = v9;
  v11[1] = v8;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v4);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static DispatchQoS.unspecified.getter();
  id v15 = _swiftEmptyArrayStorage;
  sub_1003D2B2C((unint64_t *)&qword_10090AAC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1001D5480();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v14);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  swift_allocObject();
  uint64_t result = REMCache.init(cacheQueue:countLimit:)();
  qword_1009421E8 = result;
  return result;
}

uint64_t sub_1003D055C()
{
  return REMCache.init(cacheQueue:countLimit:)();
}

uint64_t sub_1003D05A8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v69 = a7;
  id v70 = a5;
  uint64_t v71 = a8;
  uint64_t v68 = a6;
  uint64_t v72 = a1;
  uint64_t v11 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v67 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v53 - v15;
  uint64_t v17 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v60 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = v19;
  __chkstk_darwin(v20);
  id v22 = (char *)&v53 - v21;
  if (qword_100907458 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_10008E2DC(v23, (uint64_t)qword_100916FE0);
  uint64_t v73 = v18;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v64 = a3;
  id v62 = v24;
  v24(v22, a3, v17);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v66 = a4;
  uint64_t v61 = v25;
  v25(v16, a4, v11);
  swift_bridgeObjectRetain_n();
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  int v28 = v27;
  BOOL v29 = os_log_type_enabled(v26, v27);
  uint64_t v74 = v11;
  unint64_t v59 = a2;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    int v57 = v28;
    uint64_t v31 = v30;
    uint64_t v56 = swift_slowAlloc();
    v76[0] = v56;
    *(_DWORD *)uint64_t v31 = 136446722;
    uint64_t v54 = v12;
    os_log_t v55 = v26;
    uint64_t v32 = REMSuggestedAttributesHarvester.CachedSuggestionType.rawValue.getter();
    uint64_t v75 = sub_1000C51B8(v32, v33, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v22, v17);
    *(_WORD *)(v31 + 12) = 2082;
    uint64_t v34 = REMSuggestedAttributeOutput.Pipeline.rawValue.getter();
    uint64_t v75 = sub_1000C51B8(v34, v35, v76);
    uint64_t v36 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v74);
    *(_WORD *)(v31 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v75 = sub_1000C51B8(v72, a2, v76);
    uint64_t v11 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v37 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v57, "RDSuggestedAttributeCache: Recording %{public}s suggestion from %{public}s with value: %s", (uint8_t *)v31, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v73 + 8))(v22, v17);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);

    swift_bridgeObjectRelease_n();
    uint64_t v36 = v12;
  }
  uint64_t v58 = v17;
  BOOL v38 = v60;
  v62(v60, v64, v17);
  id v39 = v67;
  v61(v67, v66, v11);
  uint64_t v40 = v73;
  unint64_t v41 = (*(unsigned __int8 *)(v73 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
  unint64_t v42 = (v63 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = (*(unsigned __int8 *)(v36 + 80) + v42 + 16) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  unint64_t v44 = (v65 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v45 = swift_allocObject();
  uint64_t v46 = v70;
  *(void *)(v45 + 16) = v70;
  (*(void (**)(unint64_t, char *, uint64_t))(v40 + 32))(v45 + v41, v38, v58);
  uint64_t v47 = (void *)(v45 + v42);
  unint64_t v48 = v59;
  *uint64_t v47 = v72;
  v47[1] = v48;
  (*(void (**)(unint64_t, char *, uint64_t))(v36 + 32))(v45 + v43, v39, v74);
  uint64_t v49 = (void *)(v45 + v44);
  uint64_t v50 = v71;
  *uint64_t v49 = v69;
  v49[1] = v50;
  swift_bridgeObjectRetain();
  id v51 = v46;
  swift_retain();
  dispatch thunk of REMCache.performReadAndWrite(_:operations:)();
  return swift_release();
}

uint64_t sub_1003D0B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v72 = a6;
  uint64_t v73 = a5;
  uint64_t v78 = a4;
  uint64_t v13 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v67 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v68 = (uint64_t)&v67 - v17;
  uint64_t v18 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = a2;
  uint64_t v75 = a1;
  uint64_t v22 = REMCacheContext.object(forKey:)();
  id v76 = a7;
  uint64_t v77 = a8;
  if (v22)
  {
    *(void *)&long long v71 = a3;
    uint64_t v23 = v19;
    uint64_t v69 = v13;
    REMStructWrapper.value.getter();
    swift_release();
    unint64_t v24 = v80;
    uint64_t v25 = *(void *)(v80 + 16);
    uint64_t v26 = v18;
    uint64_t v27 = v73;
    uint64_t v70 = v18;
    if (v25)
    {
      swift_bridgeObjectRetain();
      unint64_t v28 = sub_100307890(v71);
      if (v29)
      {
        uint64_t v30 = *(void *)(*(void *)(v24 + 56) + 8 * v28);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (*(void *)(v30 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v31 = sub_1001806F8(v78, v27);
          uint64_t v32 = v69;
          uint64_t v33 = v23;
          uint64_t v34 = (uint64_t)v21;
          unint64_t v35 = v67;
          if (v36)
          {
            os_log_t v37 = *(void **)(*(void *)(v30 + 56) + 8 * v31);
            swift_bridgeObjectRetain();
          }
          else
          {
            os_log_t v37 = &_swiftEmptySetSingleton;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v58 = v72;
        }
        else
        {
          os_log_t v37 = &_swiftEmptySetSingleton;
          uint64_t v32 = v69;
          uint64_t v33 = v23;
          uint64_t v58 = v72;
          uint64_t v34 = (uint64_t)v21;
          unint64_t v35 = v67;
        }
        unint64_t v80 = (unint64_t)v37;
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v35, v58, v32);
        uint64_t v59 = v68;
        sub_10031FE1C(v68, v35);
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v59, v32);
        uint64_t v60 = v80;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v79 = v30;
        sub_1002C60E4(v60, v78, v27, isUniquelyReferenced_nonNull_native);
        uint64_t v62 = v79;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v63 = v70;
        (*(void (**)(uint64_t, void, uint64_t))(v33 + 16))(v34, v71, v70);
        char v64 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v79 = v24;
        sub_1002C6110(v62, v34, v64);
        unint64_t v57 = v79;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v63);
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v49 = v23;
    uint64_t v50 = (uint64_t)v21;
    (*(void (**)(char *, void, uint64_t))(v23 + 16))(v21, v71, v26);
    sub_100094134(&qword_100917050);
    uint64_t inited = swift_initStackObject();
    long long v71 = xmmword_100776E40;
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)(inited + 32) = v78;
    *(void *)(inited + 40) = v27;
    sub_100094134(&qword_100917058);
    unint64_t v52 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = v71;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 16))(v53 + v52, v72, v69);
    swift_bridgeObjectRetain();
    uint64_t v54 = sub_100331CA4(v53);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    *(void *)(inited + 48) = v54;
    unint64_t v55 = sub_1002EF720(inited);
    char v56 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v80 = v24;
    sub_1002C6110(v55, v50, v56);
    unint64_t v57 = v80;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v70);
LABEL_14:
    unint64_t v80 = v57;
    sub_100094134(&qword_100917060);
    swift_allocObject();
    REMStructWrapper.init(_:)();
    uint64_t v47 = v76;
    goto LABEL_15;
  }
  sub_100094134(&qword_100917048);
  BOOL v38 = (int *)(sub_100094134(&qword_100914858) - 8);
  unint64_t v39 = (*(unsigned __int8 *)(*(void *)v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v38 + 80);
  uint64_t v40 = swift_allocObject();
  long long v71 = xmmword_100776E40;
  *(_OWORD *)(v40 + 16) = xmmword_100776E40;
  unint64_t v41 = v40 + v39;
  uint64_t v69 = v38[14];
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16))(v40 + v39, a3, v18);
  sub_100094134(&qword_100917050);
  uint64_t v42 = swift_initStackObject();
  *(_OWORD *)(v42 + 16) = v71;
  uint64_t v43 = v73;
  *(void *)(v42 + 32) = v78;
  *(void *)(v42 + 40) = v43;
  sub_100094134(&qword_100917058);
  unint64_t v44 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v71;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 16))(v45 + v44, v72, v13);
  swift_bridgeObjectRetain();
  uint64_t v46 = sub_100331CA4(v45);
  swift_setDeallocating();
  uint64_t v47 = v76;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v42 + 48) = v46;
  unint64_t v48 = sub_1002EF720(v42);
  *(void *)(v41 + v69) = v48;
  unint64_t v80 = sub_1002EF72C(v40);
  sub_100094134(&qword_100917060);
  swift_allocObject();
  REMStructWrapper.init(_:)();
LABEL_15:
  uint64_t v65 = v75;
  REMCacheContext.setObject(_:forKey:)();
  swift_release();
  return v47(v65);
}

void sub_1003D12C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType();
  uint64_t v69 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v74 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v55 - v6;
  uint64_t v8 = sub_100094134(&qword_100917070);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v55 - v12;
  uint64_t v75 = a2;
  uint64_t v14 = (void *)REMSuggestedAttributeInput.reminderID.getter();
  uint64_t v15 = REMCacheContext.object(forKey:)();

  if (!v15) {
    return;
  }
  REMStructWrapper.value.getter();
  swift_release();
  uint64_t v16 = v78;
  if (qword_100907458 != -1) {
LABEL_64:
  }
    swift_once();
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100916FE0);
  swift_bridgeObjectRetain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v68 = v16;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 134217984;
    uint64_t v78 = *(void *)(v68 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDSuggestedAttributeCache: Posting suggestion metric for %ld suggestions", v21, 0xCu);
    uint64_t v16 = v68;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  int64_t v76 = 0;
  uint64_t v22 = *(void *)(v16 + 64);
  uint64_t v64 = v16 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v24 = -1;
  int v73 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.list(_:);
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  uint64_t v77 = (void (**)(char *, char *, uint64_t))(v69 + 16);
  long long v71 = (uint64_t (**)(char *, uint64_t))(v69 + 88);
  uint64_t v72 = (void (**)(char *, char *, uint64_t))(v69 + 32);
  int v67 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.recurrence(_:);
  int v65 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.dueDayOfWeek(_:);
  int v63 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.nlpDueDate(_:);
  int v62 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.location(_:);
  int v61 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.vehicle(_:);
  int v60 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.flagged(_:);
  int v59 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.priority(_:);
  int v58 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.tag(_:);
  uint64_t v70 = (void (**)(char *, uint64_t))(v69 + 8);
  int64_t v66 = (unint64_t)(v23 + 63) >> 6;
  int64_t v56 = v66 - 1;
  int v57 = enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.contact(_:);
  while (1)
  {
    if (v25)
    {
      unint64_t v30 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v31 = v30 | (v76 << 6);
LABEL_13:
      (*(void (**)(char *, unint64_t, uint64_t))(v69 + 16))(v10, *(void *)(v16 + 48) + *(void *)(v69 + 72) * v31, v3);
      uint64_t v32 = *(void *)(v16 + 56);
      uint64_t v33 = sub_100094134(&qword_100917078);
      *(void *)&v10[*(int *)(v33 + 48)] = *(void *)(v32 + 8 * v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v10, 0, 1, v33);
      swift_bridgeObjectRetain();
      goto LABEL_32;
    }
    int64_t v34 = v76 + 1;
    if (__OFADD__(v76, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v34 < v66)
    {
      unint64_t v35 = *(void *)(v64 + 8 * v34);
      if (v35) {
        goto LABEL_17;
      }
      int64_t v36 = v76 + 2;
      ++v76;
      if (v34 + 1 < v66)
      {
        unint64_t v35 = *(void *)(v64 + 8 * v36);
        if (v35) {
          goto LABEL_20;
        }
        int64_t v76 = v34 + 1;
        if (v34 + 2 < v66)
        {
          unint64_t v35 = *(void *)(v64 + 8 * (v34 + 2));
          if (v35)
          {
            v34 += 2;
            goto LABEL_17;
          }
          int64_t v36 = v34 + 3;
          int64_t v76 = v34 + 2;
          if (v34 + 3 < v66) {
            break;
          }
        }
      }
    }
LABEL_31:
    uint64_t v37 = sub_100094134(&qword_100917078);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v10, 1, 1, v37);
    unint64_t v25 = 0;
LABEL_32:
    sub_1003D1E38((uint64_t)v10, (uint64_t)v13);
    uint64_t v38 = sub_100094134(&qword_100917078);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v13, 1, v38) == 1)
    {
      swift_release();
      return;
    }
    uint64_t v39 = *(void *)&v13[*(int *)(v38 + 48)];
    (*v72)(v7, v13, v3);
    uint64_t v40 = v74;
    (*v77)(v74, v7, v3);
    int v41 = (*v71)(v40, v3);
    if (v41 == v73)
    {
      REMSuggestedAttributeInput.list.getter();
      uint64_t v26 = REMSuggestedList.description.getter();
      unint64_t v28 = v27;
      swift_release();
      uint64_t v29 = v26;
      uint64_t v16 = v68;
      sub_1003D1EA0((uint64_t)v7, v39, v29, v28, 0);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    if (v41 == v67)
    {
      uint64_t v42 = REMSuggestedAttributeInput.recurrence.getter();
LABEL_36:
      sub_1003D24C4((uint64_t)v7, v39, v42, 0);
      goto LABEL_44;
    }
    if (v41 == v65)
    {
      REMSuggestedAttributeInput.dueDayOfWeek.getter();
      uint64_t v43 = REMSuggestedWeekDay.description.getter();
LABEL_39:
      uint64_t v45 = v43;
      unint64_t v46 = v44;
      swift_release();
      sub_1003D1EA0((uint64_t)v7, v39, v45, v46, 0);
      uint64_t v16 = v68;
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    if (v41 == v63)
    {
      uint64_t v47 = REMSuggestedAttributeInput.dueDateTime.getter();
      goto LABEL_42;
    }
    if (v41 == v62 || v41 == v61)
    {
      REMSuggestedAttributeInput.location.getter();
      uint64_t v43 = dispatch thunk of ClassificationLabel.description.getter();
      goto LABEL_39;
    }
    if (v41 == v60)
    {
      char v51 = REMSuggestedAttributeInput.flagged.getter();
      if (v51) {
        uint64_t v49 = 1702195828;
      }
      else {
        uint64_t v49 = 0x65736C6166;
      }
      if (v51) {
        unint64_t v50 = 0xE400000000000000;
      }
      else {
        unint64_t v50 = 0xE500000000000000;
      }
      goto LABEL_43;
    }
    if (v41 == v59)
    {
      uint64_t v78 = REMSuggestedAttributeInput.priority.getter();
      sub_1003D2AD8();
      uint64_t v47 = BinaryInteger.description.getter();
LABEL_42:
      uint64_t v49 = v47;
      unint64_t v50 = v48;
LABEL_43:
      sub_1003D1EA0((uint64_t)v7, v39, v49, v50, 0);
LABEL_44:
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    if (v41 == v58)
    {
      uint64_t v42 = REMSuggestedAttributeInput.tags.getter();
      goto LABEL_36;
    }
    if (v41 != v57) {
      goto LABEL_66;
    }
    REMSuggestedAttributeInput.contact.getter();
    uint64_t v52 = dispatch thunk of ClassificationLabel.description.getter();
    unint64_t v54 = v53;
    swift_release();
    sub_1003D1EA0((uint64_t)v7, v39, v52, v54, 0);
    swift_bridgeObjectRelease();
    uint64_t v16 = v68;
LABEL_10:
    swift_bridgeObjectRelease();
    (*v70)(v7, v3);
  }
  unint64_t v35 = *(void *)(v64 + 8 * v36);
  if (v35)
  {
LABEL_20:
    int64_t v34 = v36;
LABEL_17:
    unint64_t v25 = (v35 - 1) & v35;
    unint64_t v31 = __clz(__rbit64(v35)) + (v34 << 6);
    int64_t v76 = v34;
    goto LABEL_13;
  }
  while (1)
  {
    int64_t v34 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v34 >= v66)
    {
      int64_t v76 = v56;
      goto LABEL_31;
    }
    unint64_t v35 = *(void *)(v64 + 8 * v34);
    ++v36;
    if (v35) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_66:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

uint64_t sub_1003D1B50()
{
  REMCache.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_1003D1B80()
{
  return type metadata accessor for RDSuggestedAttributeCache();
}

uint64_t sub_1003D1B88()
{
  uint64_t v1 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 16) & ~v8;
  uint64_t v12 = v3 | v8 | 7;
  unint64_t v10 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release();

  return _swift_deallocObject(v0, v10 + 16, v12);
}

uint64_t sub_1003D1D1C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for REMSuggestedAttributeOutput.Pipeline() - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + v5);
  uint64_t v10 = *(void *)(v1 + v5 + 8);
  uint64_t v11 = v1 + v7;
  uint64_t v12 = v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = *(uint64_t (**)(uint64_t))v12;
  uint64_t v14 = *(void *)(v12 + 8);

  return sub_1003D0B6C(a1, v8, v1 + v4, v9, v10, v11, v13, v14);
}

uint64_t sub_1003D1E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100917070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003D1EA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v5 = (char *__ptr32 *)a4;
  uint64_t v6 = a3;
  uint64_t v8 = &off_100776000;
  if (a5)
  {
    if (qword_100907458 != -1) {
LABEL_41:
    }
      swift_once();
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100916FE0);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = *((void *)v8 + 440);
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, &v39);
      unint64_t v5 = (char *__ptr32 *)a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDSuggestedAttributeCache: Comparing cached suggestions with true value {%s} from the commited reminder", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v6 = a3;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v34 = a2 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(a2 + 64);
  int64_t v35 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  int v33 = *((void *)v8 + 440);
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_26;
    }
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v19 >= v35) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v34 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v35) {
        return swift_release();
      }
      unint64_t v20 = *(void *)(v34 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v35) {
          return swift_release();
        }
        unint64_t v20 = *(void *)(v34 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_26:
    uint64_t v22 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v18);
    uint64_t v23 = *v22;
    uint64_t v8 = (char *__ptr32 *)v22[1];
    if (*v22 != v6 || v8 != v5) {
      _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    type metadata accessor for Analytics();
    sub_100094134((uint64_t *)&unk_10090A420);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E60;
    *(void *)(inited + 32) = 0x74636572726F63;
    *(void *)(inited + 40) = 0xE700000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
    *(void *)(inited + 56) = 0x7475626972747461;
    *(void *)(inited + 64) = 0xE900000000000065;
    REMSuggestedAttributesHarvester.CachedSuggestionType.rawValue.getter();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 72) = v26;
    *(void *)(inited + 80) = 0x656372756F73;
    *(void *)(inited + 88) = 0xE600000000000000;
    type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
    sub_1003D2B2C(&qword_100914828, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline);
    Set.description.getter();
    swift_bridgeObjectRelease();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 96) = v27;
    sub_1002ED104(inited);
    static Analytics.postEvent(_:payload:duration:)();
    swift_bridgeObjectRelease();
    if (a5)
    {
      if (qword_100907458 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_100916FE0);
      swift_bridgeObjectRetain();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      unint64_t v5 = (char *__ptr32 *)a4;
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = v33;
        swift_bridgeObjectRetain();
        *(void *)(v31 + 4) = sub_1000C51B8(v23, (unint64_t)v8, &v39);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "RDSuggestedAttributeCache: Sugestion record {%s}", (uint8_t *)v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v6 = a3;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = a3;
      unint64_t v5 = (char *__ptr32 *)a4;
    }
  }
  int64_t v21 = v19 + 3;
  if (v21 < v35)
  {
    unint64_t v20 = *(void *)(v34 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        int64_t v16 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_40;
        }
        if (v16 >= v35) {
          return swift_release();
        }
        unint64_t v20 = *(void *)(v34 + 8 * v16);
        ++v21;
        if (v20) {
          goto LABEL_25;
        }
      }
    }
    int64_t v16 = v21;
    goto LABEL_25;
  }
  return swift_release();
}

uint64_t sub_1003D24C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = a3;
  uint64_t v6 = &off_100776000;
  if (a4)
  {
    if (qword_100907458 != -1) {
LABEL_36:
    }
      swift_once();
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_100916FE0);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = *((void *)v6 + 440);
      uint64_t v11 = Set.description.getter();
      sub_1000C51B8(v11, v12, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDSuggestedAttributeCache: Comparing cached suggestions with true values {%s} from the commited reminder", v10, 0xCu);
      swift_arrayDestroy();
      uint64_t v4 = a3;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v33 = a2 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(a2 + 64);
  int64_t v34 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  int v32 = *((void *)v6 + 440);
  while (v15)
  {
    unint64_t v17 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v18 = v17 | (v16 << 6);
LABEL_26:
    uint64_t v22 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v18);
    uint64_t v24 = *v22;
    unint64_t v23 = v22[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001CBC20(v24, v23, v4);
    type metadata accessor for Analytics();
    sub_100094134((uint64_t *)&unk_10090A420);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E60;
    *(void *)(inited + 32) = 0x74636572726F63;
    *(void *)(inited + 40) = 0xE700000000000000;
    *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
    *(void *)(inited + 56) = 0x7475626972747461;
    *(void *)(inited + 64) = 0xE900000000000065;
    REMSuggestedAttributesHarvester.CachedSuggestionType.rawValue.getter();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 72) = v26;
    *(void *)(inited + 80) = 0x656372756F73;
    *(void *)(inited + 88) = 0xE600000000000000;
    type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
    sub_1003D2B2C(&qword_100914828, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline);
    Set.description.getter();
    swift_bridgeObjectRelease();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 96) = v27;
    uint64_t v6 = (char *__ptr32 *)sub_1002ED104(inited);
    static Analytics.postEvent(_:payload:duration:)();
    swift_bridgeObjectRelease();
    if (a4)
    {
      if (qword_100907458 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_100916FE0);
      swift_bridgeObjectRetain();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v6 = (char *__ptr32 *)swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        *uint64_t v6 = (char *__ptr32)v32;
        swift_bridgeObjectRetain();
        *(void *)(v6 + 1) = sub_1000C51B8(v24, v23, &v37);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "RDSuggestedAttributeCache: Sugestion record {%s}", (uint8_t *)v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v4 = a3;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = a3;
    }
  }
  int64_t v19 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v19 >= v34) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v33 + 8 * v19);
  ++v16;
  if (v20) {
    goto LABEL_25;
  }
  int64_t v16 = v19 + 1;
  if (v19 + 1 >= v34) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v33 + 8 * v16);
  if (v20) {
    goto LABEL_25;
  }
  int64_t v16 = v19 + 2;
  if (v19 + 2 >= v34) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v33 + 8 * v16);
  if (v20)
  {
LABEL_25:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
    goto LABEL_26;
  }
  int64_t v21 = v19 + 3;
  if (v21 < v34)
  {
    unint64_t v20 = *(void *)(v33 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        int64_t v16 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_35;
        }
        if (v16 >= v34) {
          return swift_release();
        }
        unint64_t v20 = *(void *)(v33 + 8 * v16);
        ++v21;
        if (v20) {
          goto LABEL_25;
        }
      }
    }
    int64_t v16 = v21;
    goto LABEL_25;
  }
  return swift_release();
}

unint64_t sub_1003D2AD8()
{
  unint64_t result = qword_100917080;
  if (!qword_100917080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100917080);
  }
  return result;
}

uint64_t sub_1003D2B2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003D2B74(uint64_t a1)
{
  uint64_t result = sub_1003D9BDC(&qword_1009170C8, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.Invocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1003D2BCC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917088);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917088);
  if (qword_1009077E8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942400);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1003D2C94()
{
  Swift::Int v0 = sub_10032D9A0((uint64_t)&off_1008B14B0);
  uint64_t result = swift_arrayDestroy();
  qword_1009170A0 = v0;
  return result;
}

uint64_t sub_1003D2CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v108 = a3;
  uint64_t v7 = sub_100094134(&qword_1009171B8);
  __chkstk_darwin(v7 - 8);
  id v107 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v106 = (char *)&v95 - v10;
  __chkstk_darwin(v11);
  uint64_t v105 = (char *)&v95 - v12;
  uint64_t v101 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v97 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v100 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v99 = (char *)&v95 - v15;
  uint64_t v104 = sub_100094134(&qword_1009171C0);
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  id v102 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for REMSuggestedAttributesHarvester.Request();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100094134(&qword_1009171C8);
  uint64_t v113 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  Class v129 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_100094134(&qword_1009148C8);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v111 = (char *)&v95 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v114 = (uint64_t)&v95 - v25;
  sub_1001D28B8(&v122);
  if (qword_100907468 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v112 = sub_10008E2DC(v26, (uint64_t)qword_100917088);
  NSString v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v96 = a1;
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "loaded model in invocation", v29, 2u);
    uint64_t v4 = v3;
    a1 = v96;
    swift_slowDealloc();
  }

  os_log_type_t v30 = _swiftEmptyArrayStorage;
  if (REMSuggestedAttributesHarvester.Request.allowLocalOverrides.getter())
  {
    (*(void (**)(void))(a1 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource + 48))();
    sub_1003D9BDC(&qword_100917200, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.Request);
    Partial<A>.init(dictionary:)();
    if (v4) {
      return sub_1001D4B6C((uint64_t)&v122);
    }
    uint64_t v96 = 0;
    os_log_type_t v30 = (void *)sub_10030973C(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    unint64_t v32 = v30[2];
    unint64_t v31 = v30[3];
    if (v32 >= v31 >> 1) {
      os_log_type_t v30 = (void *)sub_10030973C(v31 > 1, v32 + 1, 1, (unint64_t)v30);
    }
    v30[2] = v32 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v109 + 32))((unint64_t)v30+ ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80))+ *(void *)(v109 + 72) * v32, v114, v110);
    uint64_t v4 = v96;
  }
  if (REMSuggestedAttributesHarvester.Request.allowCloudOverrides.getter())
  {
    (*(void (**)(void))(a1 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource + 32))();
    sub_1003D9BDC(&qword_100917200, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.Request);
    Partial<A>.init(dictionary:)();
    if (v4)
    {
      swift_bridgeObjectRelease();
      return sub_1001D4B6C((uint64_t)&v122);
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      os_log_type_t v30 = (void *)sub_10030973C(0, v30[2] + 1, 1, (unint64_t)v30);
    }
    unint64_t v35 = v30[2];
    unint64_t v34 = v30[3];
    if (v35 >= v34 >> 1) {
      os_log_type_t v30 = (void *)sub_10030973C(v34 > 1, v35 + 1, 1, (unint64_t)v30);
    }
    v30[2] = v35 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v109 + 32))((unint64_t)v30+ ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80))+ *(void *)(v109 + 72) * v35, v111, v110);
    uint64_t v4 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a2, v17);
  swift_bridgeObjectRetain();
  uint64_t v36 = (uint64_t)v129;
  PartialOverride.init(full:partials:)();
  uint64_t v37 = sub_1003D7D24(v36);
  if (v4) {
    uint64_t v38 = v4;
  }
  else {
    uint64_t v38 = (uint64_t)v37;
  }
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  if (LOBYTE(v117[0]) == 1)
  {
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v96 = 0;
    if (v41)
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "SuggestedAttributes harvesting is enabled on iOS: YES", v42, 2u);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    swift_getKeyPath();
    unint64_t v46 = v102;
    PartialOverride.subscript.getter();
    swift_release();
    uint64_t v47 = v104;
    PartialOverride._full.getter();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v46, v47);
    uint64_t v48 = *(void *)&v117[0];
    uint64_t v49 = REMSuggestedAttributeInput.title.getter();
    uint64_t v51 = v50;
    swift_getKeyPath();
    PartialOverride.subscript.getter();
    swift_release();
    LOBYTE(v49) = sub_1003D8018(v49, v51, *(uint64_t *)&v117[0], *((uint64_t *)&v117[0] + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v114 = v38;
    if ((v49 & 1) == 0)
    {
      *(void *)&v117[0] = v38;
      BYTE8(v117[0]) = v4 != 0;
      sub_100094134(&qword_1009171D8);
      Result.eraseToCodableError()();
      *(void *)&v117[0] = _swiftEmptyArrayStorage;
      BYTE8(v117[0]) = 0;
      Result.eraseToCodableError()();
      *(void *)&v117[0] = _swiftEmptyArrayStorage;
      BYTE8(v117[0]) = 0;
      Result.eraseToCodableError()();
      REMSuggestedAttributesHarvester.Response.init(heuristicResult:embeddingResult:coreBehaviorResult:)();
      swift_release();
      sub_1003D9BCC(v114, v4 != 0, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
      sub_1001D4B6C((uint64_t)&v122);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v36, v21);
    }
    uint64_t v112 = v21;
    sub_1000BF710((uint64_t)&v122, (uint64_t)v117, (uint64_t *)&unk_10090F350);
    uint64_t v104 = v48;
    uint64_t v110 = v4;
    if (v118 == 1)
    {
      uint64_t v115 = *(void *)&v117[0];
      sub_100094134((uint64_t *)&unk_10090ABB0);
      swift_willThrowTypedImpl();
      swift_errorRelease();
      uint64_t v111 = 0;
      v117[0] = 0uLL;
      uint64_t v52 = v101;
    }
    else
    {
      sub_1000967D4(v117, (uint64_t)&v119);
      sub_1000C0DE0(&v119, v121);
      REMSuggestedAttributeInput.title.getter();
      uint64_t v53 = dispatch thunk of REMTitleEmbedding.vector(for:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v119);
      v117[0] = 0uLL;
      uint64_t v52 = v101;
      uint64_t v111 = (char *)v53;
      if (v53)
      {
        uint64_t v54 = v125;
        uint64_t v55 = v97;
        if (v126)
        {
          uint64_t v119 = v125;
          sub_100094134((uint64_t *)&unk_10090ABB0);
          swift_willThrowTypedImpl();
          uint64_t v56 = 0;
          uint64_t v57 = 0;
        }
        else
        {
          swift_retain();
          sub_1001D448C(v54, 0);
          uint64_t v56 = RDIntentClusterModel.predict(for:)();
          uint64_t v57 = v58;
          swift_release();
          sub_1003D9BCC(v54, 0, (uint64_t (*)(void))&_swift_release);
        }
        *(void *)&v117[0] = v56;
        *((void *)&v117[0] + 1) = v57;
        goto LABEL_41;
      }
      uint64_t v111 = 0;
    }
    uint64_t v55 = v97;
LABEL_41:
    swift_getKeyPath();
    sub_1003D9B04();
    PartialOverride.subscript.getter();
    swift_release();
    uint64_t v59 = v119;
    int v60 = *(void (**)(char *, void, uint64_t))(v55 + 104);
    int v61 = v99;
    v60(v99, enum case for REMSuggestedAttributeOutput.Pipeline.kNN(_:), v52);
    uint64_t v62 = REMSuggestedAttributeOutput.Pipeline.rawValue.getter();
    uint64_t v63 = v52;
    uint64_t v64 = v62;
    uint64_t v66 = v65;
    int v67 = *(void (**)(char *, uint64_t))(v55 + 8);
    uint64_t v68 = v63;
    v67(v61, v63);
    if (*(void *)(v59 + 16) && (unint64_t v69 = sub_1001806F8(v64, v66), (v70 & 1) != 0)) {
      int v71 = *(unsigned __int8 *)(*(void *)(v59 + 56) + v69);
    }
    else {
      int v71 = 1;
    }
    LODWORD(v109) = v71;
    swift_bridgeObjectRelease();
    uint64_t v72 = v100;
    v60(v100, enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:), v68);
    uint64_t v73 = REMSuggestedAttributeOutput.Pipeline.rawValue.getter();
    uint64_t v75 = v74;
    v67(v72, v68);
    uint64_t v76 = v110;
    if (*(void *)(v59 + 16) && (unint64_t v77 = sub_1001806F8(v73, v75), (v78 & 1) != 0))
    {
      int v79 = *(unsigned __int8 *)(*(void *)(v59 + 56) + v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v80 = v98;
      uint64_t v81 = v104;
      if ((v109 & 1) == 0)
      {
        LODWORD(v103) = 0;
        char v91 = 0;
        uint64_t v90 = _swiftEmptyArrayStorage;
        uint64_t v86 = _swiftEmptyArrayStorage;
        unint64_t v87 = v129;
        if (!v79) {
          goto LABEL_57;
        }
        goto LABEL_54;
      }
      uint64_t v82 = v104;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v80 = v98;
      uint64_t v81 = v104;
      if (!v109)
      {
        LODWORD(v103) = 0;
        uint64_t v86 = _swiftEmptyArrayStorage;
        unint64_t v87 = v129;
        goto LABEL_54;
      }
      uint64_t v82 = v104;
      LOBYTE(v79) = 1;
    }
    uint64_t v115 = v123;
    char v116 = v124;
    __chkstk_darwin(v123);
    uint64_t v83 = v111;
    *(&v95 - 4) = v80;
    *(&v95 - 3) = (uint64_t)v83;
    *(&v95 - 2) = (uint64_t)v129;
    sub_1001D448C(v84, v85);
    sub_100094134(&qword_1009171F8);
    sub_100094134(&qword_1009171F0);
    Result<>.tryMap<A>(transform:)();
    sub_1003D9BCC(v115, v116, (uint64_t (*)(void))&_swift_release);
    uint64_t v86 = (void *)v119;
    LODWORD(v103) = v120;
    if ((v79 & 1) == 0)
    {
      char v91 = 0;
      uint64_t v90 = _swiftEmptyArrayStorage;
      goto LABEL_57;
    }
    unint64_t v87 = v129;
    uint64_t v81 = v82;
LABEL_54:
    uint64_t v115 = v127;
    char v116 = v128;
    __chkstk_darwin(v127);
    *(&v95 - 4) = v80;
    *(&v95 - 3) = v81;
    *(&v95 - 2) = (uint64_t)v117;
    *(&v95 - 1) = (uint64_t)v87;
    sub_1001D448C(v88, v89);
    sub_100094134(&qword_10090F398);
    sub_100094134(&qword_1009171F0);
    Result<>.tryMap<A>(transform:)();
    sub_1003D9BCC(v115, v116, (uint64_t (*)(void))&_swift_release);
    uint64_t v90 = (void *)v119;
    char v91 = v120;
LABEL_57:
    LODWORD(v110) = v76 != 0;
    uint64_t v119 = v114;
    BOOL v120 = v76 != 0;
    uint64_t v92 = v90;
    uint64_t v109 = (uint64_t)v90;
    char v93 = v91;
    sub_100094134(&qword_1009171D8);
    Result.eraseToCodableError()();
    uint64_t v119 = (uint64_t)v86;
    char v94 = v103;
    BOOL v120 = v103;
    Result.eraseToCodableError()();
    uint64_t v119 = (uint64_t)v92;
    BOOL v120 = v93;
    Result.eraseToCodableError()();
    REMSuggestedAttributesHarvester.Response.init(heuristicResult:embeddingResult:coreBehaviorResult:)();
    swift_release();
    sub_1003D9BCC(v109, v93, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
    sub_1003D9BCC((uint64_t)v86, v94, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
    sub_1003D9BCC(v114, v110, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
    swift_release();
    sub_1001D4B6C((uint64_t)&v122);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v129, v112);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "SuggestedAttributes harvesting is enabled on iOS: NO", v45, 2u);
    swift_slowDealloc();
  }

  sub_1003D9A2C();
  swift_allocError();
  swift_willThrow();
  sub_1003D9BCC(v38, v4 != 0, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  sub_1001D4B6C((uint64_t)&v122);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v36, v21);
}

uint64_t sub_1003D3F1C@<X0>(unint64_t a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X4>, char **a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1004AA4D0(a1, v7, v8, 0, 0);
  v12[2] = a3;
  uint64_t v10 = sub_1003B4CAC((void (*)(void *))sub_1003DA2D0, (uint64_t)v12, (uint64_t)v9);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v10;
  return result;
}

uint64_t sub_1003D3FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v123 = a2;
  uint64_t v3 = sub_100094134(&qword_100917208);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v121 = v3;
  uint64_t v122 = v4;
  __chkstk_darwin(v3);
  BOOL v120 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType();
  uint64_t v125 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  char v128 = (char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v124 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v119 = (char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMSuggestedAttributeOutput.Source();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v115 = (void (*)(char *))v8;
  uint64_t v116 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMSuggestedAttributesHarvester.Request();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)a1;
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v118 = *(void *)(a1 + 24);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v126 = *(void *)(a1 + 32);
  uint64_t v19 = *(unsigned __int8 *)(a1 + 48);
  sub_100094134(&qword_1009171C8);
  PartialOverride._full.getter();
  REMSuggestedAttributesHarvester.Request.reminder.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v127 = (void *)REMSuggestedAttributeInput.reminderID.getter();
  swift_release();
  switch(v19)
  {
    case 1:
      uint64_t v35 = qword_100907460;
      swift_retain();
      swift_bridgeObjectRetain();
      if (v35 != -1) {
        swift_once();
      }
      uint64_t v116 = qword_1009421E8;
      swift_retain();
      uint64_t v117 = v16;
      uint64_t v113 = (void (*)(char *, void, uint64_t))dispatch thunk of ClassificationLabel.description.getter();
      unint64_t v37 = v36;
      swift_release();
      uint64_t v38 = v125;
      uint64_t v39 = (uint64_t)v128;
      (*(void (**)(char *, void, uint64_t))(v125 + 104))(v128, enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.location(_:), v129);
      LODWORD(v115) = enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:);
      uint64_t v40 = v124;
      uint64_t v114 = *(void (**)(char *))(v124 + 104);
      uint64_t v41 = (uint64_t)v119;
      v114(v119);
      uint64_t v42 = v121;
      uint64_t v43 = v122;
      uint64_t v44 = (uint64_t)v120;
      (*(void (**)(char *, void, uint64_t))(v122 + 104))(v120, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v121);
      sub_1003D05A8((uint64_t)v113, v37, v39, v41, v127, v44, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v42);
      uint64_t v45 = v130;
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v130);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v128, v129);
      ((void (*)(uint64_t, void, uint64_t))v114)(v41, v115, v45);
      uint64_t v33 = v123;
      REMSuggestedAttributeOutput.Source.init(pipeline:predictor:)();

      uint64_t v46 = sub_100094134(&qword_100911F90);
      *(void *)(v33 + *(int *)(v46 + 48)) = v117;
      unint64_t v34 = (unsigned int *)&enum case for REMSuggestedAttributeOutput.location(_:);
      break;
    case 2:
      uint64_t v47 = qword_100907460;
      swift_retain();
      swift_bridgeObjectRetain();
      if (v47 != -1) {
        swift_once();
      }
      uint64_t v114 = (void (*)(char *))qword_1009421E8;
      uint64_t v117 = v16;
      uint64_t v113 = (void (*)(char *, void, uint64_t))REMSuggestedWeekDay.description.getter();
      unint64_t v49 = v48;
      uint64_t v50 = v125;
      uint64_t v51 = (uint64_t)v128;
      (*(void (**)(char *, void, uint64_t))(v125 + 104))(v128, enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.dueDayOfWeek(_:), v129);
      LODWORD(v116) = enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:);
      uint64_t v52 = v124;
      uint64_t v115 = *(void (**)(char *))(v124 + 104);
      uint64_t v53 = (uint64_t)v119;
      v115(v119);
      uint64_t v55 = v121;
      uint64_t v54 = v122;
      uint64_t v56 = (uint64_t)v120;
      (*(void (**)(char *, void, uint64_t))(v122 + 104))(v120, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v121);
      sub_1003D05A8((uint64_t)v113, v49, v51, v53, v127, v56, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v56, v55);
      uint64_t v57 = v130;
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v130);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v128, v129);
      ((void (*)(uint64_t, void, uint64_t))v115)(v53, v116, v57);
      uint64_t v33 = v123;
      REMSuggestedAttributeOutput.Source.init(pipeline:predictor:)();

      uint64_t v58 = sub_100094134(&qword_100911F88);
      *(void *)(v33 + *(int *)(v58 + 48)) = v117;
      unint64_t v34 = (unsigned int *)&enum case for REMSuggestedAttributeOutput.dueDate(_:);
      break;
    case 3:
      uint64_t v59 = v16 & 1;
      uint64_t v60 = qword_100907460;
      swift_bridgeObjectRetain();
      if (v60 != -1) {
        swift_once();
      }
      uint64_t v61 = 1702195828;
      if (!v59) {
        uint64_t v61 = 0x65736C6166;
      }
      uint64_t v113 = (void (*)(char *, void, uint64_t))v61;
      uint64_t v114 = (void (*)(char *))qword_1009421E8;
      if (v59) {
        unint64_t v62 = 0xE400000000000000;
      }
      else {
        unint64_t v62 = 0xE500000000000000;
      }
      uint64_t v63 = v125;
      uint64_t v64 = (uint64_t)v128;
      (*(void (**)(char *, void, uint64_t))(v125 + 104))(v128, enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.flagged(_:), v129);
      LODWORD(v116) = enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:);
      uint64_t v65 = v124;
      uint64_t v117 = v59;
      uint64_t v115 = *(void (**)(char *))(v124 + 104);
      uint64_t v66 = (uint64_t)v119;
      v115(v119);
      uint64_t v68 = v121;
      uint64_t v67 = v122;
      uint64_t v69 = (uint64_t)v120;
      (*(void (**)(char *, void, uint64_t))(v122 + 104))(v120, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v121);
      sub_1003D05A8((uint64_t)v113, v62, v64, v66, v127, v69, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v69, v68);
      uint64_t v70 = v130;
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v130);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v128, v129);
      ((void (*)(uint64_t, void, uint64_t))v115)(v66, v116, v70);
      uint64_t v33 = v123;
      REMSuggestedAttributeOutput.Source.init(pipeline:predictor:)();

      uint64_t v71 = sub_100094134(&qword_100917220);
      *(unsigned char *)(v33 + *(int *)(v71 + 48)) = v117;
      unint64_t v34 = (unsigned int *)&enum case for REMSuggestedAttributeOutput.flagged(_:);
      break;
    case 4:
      uint64_t v72 = qword_100907460;
      swift_bridgeObjectRetain();
      if (v72 != -1) {
        swift_once();
      }
      uint64_t v116 = qword_1009421E8;
      uint64_t v117 = v16;
      uint64_t v131 = v16;
      sub_1003D2AD8();
      uint64_t v113 = (void (*)(char *, void, uint64_t))BinaryInteger.description.getter();
      unint64_t v74 = v73;
      uint64_t v75 = v125;
      uint64_t v76 = (uint64_t)v128;
      (*(void (**)(char *, void, uint64_t))(v125 + 104))(v128, enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.priority(_:), v129);
      LODWORD(v115) = enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:);
      uint64_t v77 = v124;
      uint64_t v114 = *(void (**)(char *))(v124 + 104);
      uint64_t v78 = (uint64_t)v119;
      v114(v119);
      uint64_t v80 = v121;
      uint64_t v79 = v122;
      uint64_t v81 = (uint64_t)v120;
      (*(void (**)(char *, void, uint64_t))(v122 + 104))(v120, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v121);
      sub_1003D05A8((uint64_t)v113, v74, v76, v78, v127, v81, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v81, v80);
      uint64_t v82 = v130;
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v78, v130);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v128, v129);
      ((void (*)(uint64_t, void, uint64_t))v114)(v78, v115, v82);
      uint64_t v33 = v123;
      REMSuggestedAttributeOutput.Source.init(pipeline:predictor:)();

      uint64_t v83 = sub_100094134(&qword_100917218);
      *(void *)(v33 + *(int *)(v83 + 48)) = v117;
      unint64_t v34 = (unsigned int *)&enum case for REMSuggestedAttributeOutput.priority(_:);
      break;
    case 5:
      uint64_t v84 = qword_100907460;
      uint64_t v118 = v17;
      swift_bridgeObjectRetain();
      uint64_t v116 = v18;
      swift_bridgeObjectRetain();
      if (v84 != -1) {
        swift_once();
      }
      uint64_t v85 = (uint64_t)v128;
      (*(void (**)(char *, void, uint64_t))(v125 + 104))(v128, enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.tag(_:), v129);
      LODWORD(v115) = enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:);
      uint64_t v86 = v124;
      uint64_t v114 = *(void (**)(char *))(v124 + 104);
      uint64_t v87 = (uint64_t)v119;
      v114(v119);
      uint64_t v89 = v121;
      uint64_t v88 = v122;
      uint64_t v90 = (uint64_t)v120;
      (*(void (**)(char *, void, uint64_t))(v122 + 104))(v120, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v121);
      uint64_t v117 = v16;
      uint64_t v91 = v16;
      uint64_t v92 = v127;
      sub_1003D05A8(v91, v118, v85, v87, v127, v90, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v90, v89);
      uint64_t v93 = v130;
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v130);
      (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v85, v129);
      ((void (*)(uint64_t, void, uint64_t))v114)(v87, v115, v93);
      uint64_t v33 = v123;
      REMSuggestedAttributeOutput.Source.init(pipeline:predictor:)();

      char v94 = (uint64_t *)(v33 + *(int *)(sub_100094134(&qword_100911F78) + 48));
      uint64_t v95 = v118;
      *char v94 = v117;
      v94[1] = v95;
      unint64_t v34 = (unsigned int *)&enum case for REMSuggestedAttributeOutput.tag(_:);
      break;
    case 6:
      uint64_t v96 = qword_100907460;
      swift_retain();
      swift_bridgeObjectRetain();
      if (v96 != -1) {
        swift_once();
      }
      uint64_t v114 = (void (*)(char *))qword_1009421E8;
      uint64_t v117 = v16;
      uint64_t v113 = (void (*)(char *, void, uint64_t))REMSuggestedContact.name.getter();
      unint64_t v98 = v97;
      uint64_t v99 = v125;
      uint64_t v100 = (uint64_t)v128;
      (*(void (**)(char *, void, uint64_t))(v125 + 104))(v128, enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.contact(_:), v129);
      LODWORD(v116) = enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:);
      uint64_t v101 = v124;
      uint64_t v115 = *(void (**)(char *))(v124 + 104);
      uint64_t v102 = (uint64_t)v119;
      v115(v119);
      uint64_t v104 = v121;
      uint64_t v103 = v122;
      uint64_t v105 = (uint64_t)v120;
      (*(void (**)(char *, void, uint64_t))(v122 + 104))(v120, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v121);
      sub_1003D05A8((uint64_t)v113, v98, v100, v102, v127, v105, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v105, v104);
      uint64_t v106 = v130;
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v102, v130);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v128, v129);
      ((void (*)(uint64_t, void, uint64_t))v115)(v102, v116, v106);
      uint64_t v33 = v123;
      REMSuggestedAttributeOutput.Source.init(pipeline:predictor:)();

      uint64_t v107 = sub_100094134(&qword_100911F70);
      *(void *)(v33 + *(int *)(v107 + 48)) = v117;
      unint64_t v34 = (unsigned int *)&enum case for REMSuggestedAttributeOutput.contact(_:);
      break;
    default:
      unint64_t v20 = *(void (**)(void))(v124 + 104);
      uint64_t v21 = v119;
      LODWORD(v114) = enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:);
      uint64_t v22 = v130;
      uint64_t v113 = (void (*)(char *, void, uint64_t))v20;
      v20(v119);
      swift_retain();
      swift_bridgeObjectRetain();
      REMSuggestedAttributeOutput.Source.init(pipeline:predictor:)();
      if (qword_100907460 != -1) {
        swift_once();
      }
      uint64_t v126 = qword_1009421E8;
      uint64_t v117 = v16;
      uint64_t v118 = REMSuggestedList.listIdentifier.getter();
      unint64_t v24 = v23;
      uint64_t v25 = v125;
      uint64_t v26 = (uint64_t)v128;
      (*(void (**)(char *, void, uint64_t))(v125 + 104))(v128, enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.list(_:), v129);
      v113(v21, v114, v22);
      uint64_t v27 = v122;
      uint64_t v28 = (uint64_t)v120;
      uint64_t v29 = (uint64_t)v21;
      uint64_t v30 = v121;
      (*(void (**)(char *, void, uint64_t))(v122 + 104))(v120, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v121);
      unint64_t v31 = v127;
      sub_1003D05A8(v118, v24, v26, v29, v127, v28, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v30);
      (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v29, v130);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v128, v129);
      uint64_t v32 = *(int *)(sub_100094134(&qword_100911F98) + 48);
      uint64_t v33 = v123;
      (*(void (**)(uint64_t, char *, void (*)(char *)))(v116 + 32))(v123, v11, v115);
      *(void *)(v33 + v32) = v117;
      unint64_t v34 = (unsigned int *)&enum case for REMSuggestedAttributeOutput.list(_:);
      break;
  }
  uint64_t v108 = *v34;
  uint64_t v109 = type metadata accessor for REMSuggestedAttributeOutput();
  uint64_t v110 = *(void *)(v109 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 104))(v33, v108, v109);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v110 + 56))(v33, 0, 1, v109);
}

uint64_t sub_1003D50E0(uint64_t a1)
{
  uint64_t result = sub_1003D9BDC(&qword_1009170F0, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

id sub_1003D5138@<X0>(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v5 = *a1;
  id v6 = [*a1 objectID];
  uint64_t v7 = sub_1002F0164(v6, a2);

  if (v7)
  {
    id v8 = [v7 givenName];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    uint64_t v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (v12)
    {
      sub_100094134((uint64_t *)&unk_10090A490);
      uint64_t v13 = (void *)swift_allocObject();
      *((_OWORD *)v13 + 1) = xmmword_100776E40;
      v13[4] = v9;
      v13[5] = v11;
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  id v14 = [v5 firstName];
  if (v14 || (id v14 = [v5 displayName]) != 0)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    swift_bridgeObjectRetain();
    uint64_t v13 = sub_100308F88(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v19 = v13[2];
    unint64_t v18 = v13[3];
    if (v19 >= v18 >> 1) {
      uint64_t v13 = sub_100308F88((void *)(v18 > 1), v19 + 1, 1, v13);
    }
    v13[2] = v19 + 1;
    unint64_t v20 = &v13[2 * v19];
    v20[4] = v15;
    v20[5] = v17;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
LABEL_12:

  if (v13[2])
  {
    id result = v5;
  }
  else
  {
    id result = (id)swift_bridgeObjectRelease();
    uint64_t v13 = 0;
    id v5 = 0;
  }
  *a3 = v13;
  a3[1] = v5;
  return result;
}

uint64_t sub_1003D5320(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (!*(void *)(a1 + 16)) {
    return (uint64_t)v2;
  }
  uint64_t v22 = sub_1003D6290(a2);
  id v3 = objc_allocWithZone((Class)NSRegularExpression);
  id v4 = sub_1002AE71C(0x4029775C213C3F28, 0xED00002A5D405E5BLL, 0);
  if (!v4)
  {
LABEL_16:
    __chkstk_darwin(v4);
    sub_100094134(&qword_100917188);
    sub_100094134(&qword_100917190);
    sub_1000967F4(&qword_100917198, &qword_100917188);
    Sequence.firstMap<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v23) {
      return (uint64_t)v23;
    }
    return (uint64_t)v2;
  }
  id v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  unint64_t v23 = (void *)v22;
  swift_bridgeObjectRetain();
  sub_100094134(&qword_1009171A0);
  sub_1000967F4(&qword_1009171A8, &qword_1009171A0);
  sub_1000E4FD8();
  uint64_t v7 = _NSRange.init<A, B>(_:in:)();
  id v9 = [v5 matchesInString:v6 options:0 range:v7];

  sub_1000963CC(0, &qword_1009171B0);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v11)
  {
LABEL_15:
    swift_bridgeObjectRelease();

    goto LABEL_16;
  }
LABEL_5:
  uint64_t result = sub_1001DE998(0, v11 & ~(v11 >> 63), 0);
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = 0;
    do
    {
      if ((v10 & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(v10 + 8 * v13 + 32);
      }
      uint64_t v15 = v14;
      id v16 = [v14 range];
      uint64_t v18 = v17;

      unint64_t v23 = _swiftEmptyArrayStorage;
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      unint64_t v19 = _swiftEmptyArrayStorage[3];
      if (v20 >= v19 >> 1) {
        sub_1001DE998(v19 > 1, v20 + 1, 1);
      }
      ++v13;
      _swiftEmptyArrayStorage[2] = v20 + 1;
      uint64_t v21 = &_swiftEmptyArrayStorage[2 * v20];
      v21[4] = v16;
      v21[5] = v18;
    }
    while (v11 != v13);
    swift_bridgeObjectRelease();

    uint64_t v2 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003D5728(uint64_t a1)
{
  uint64_t result = sub_1003D9BDC(&qword_100917118, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.FeedbackInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1003D5780@<X0>(unint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v3 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v60 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v62 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134(&qword_100917170);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = type metadata accessor for REMSuggestedAttributeOutput.Source();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001D28B8(v67);
  char v71 = 0;
  unint64_t v51 = a1;
  REMSuggestedAttributesHarvester.FeedbackRequest.source.getter();
  uint64_t v15 = REMSuggestedAttributeOutput.Source.predictors.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  unint64_t v16 = 0;
  uint64_t v17 = *(void *)(v15 + 64);
  uint64_t v54 = v15 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  unint64_t v21 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v58 = v60 + 16;
  uint64_t v61 = (void (**)(char *, char *, uint64_t))(v60 + 32);
  uint64_t v22 = (uint64_t (**)(char *, uint64_t))(v60 + 88);
  int v70 = enum case for REMSuggestedAttributeOutput.Pipeline.nlQueryParser(_:);
  int v57 = enum case for REMSuggestedAttributeOutput.Pipeline.kNN(_:);
  int v55 = enum case for REMSuggestedAttributeOutput.Pipeline.coreBehavior(_:);
  int v50 = enum case for REMSuggestedAttributeOutput.Pipeline.heuristic(_:);
  int v48 = enum case for REMSuggestedAttributeOutput.Pipeline.anchoredBubble(_:);
  int v46 = enum case for REMSuggestedAttributeOutput.Pipeline.spotlight(_:);
  unint64_t v43 = v21 - 1;
  int64_t v56 = v21;
  unint64_t v45 = v21 - 5;
  uint64_t v59 = v15;
  uint64_t v44 = v15 + 104;
  unint64_t v23 = (uint64_t *)&unk_100917178;
  unint64_t v49 = (char *)&type metadata for () + 8;
  while (1)
  {
    if (v20)
    {
      unint64_t v27 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      int64_t v28 = v16;
      unint64_t v29 = v27 | (v16 << 6);
LABEL_8:
      uint64_t v30 = v59;
      (*(void (**)(char *, unint64_t, uint64_t))(v60 + 16))(v7, *(void *)(v59 + 48) + *(void *)(v60 + 72) * v29, v3);
      uint64_t v31 = *(void *)(v30 + 56);
      uint64_t v32 = sub_100094134(v23);
      *(void *)&v7[*(int *)(v32 + 48)] = *(void *)(v31 + 8 * v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v7, 0, 1, v32);
      swift_bridgeObjectRetain();
      unint64_t v16 = v28;
      goto LABEL_15;
    }
    int64_t v33 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_40:
      swift_once();
      goto LABEL_37;
    }
    if (v33 >= v56)
    {
      unint64_t v35 = v16;
    }
    else
    {
      unint64_t v34 = *(void *)(v54 + 8 * v33);
      if (v34) {
        goto LABEL_12;
      }
      unint64_t v35 = v16 + 1;
      if ((uint64_t)(v16 + 2) < v56)
      {
        unint64_t v34 = *(void *)(v54 + 8 * (v16 + 2));
        if (v34)
        {
          int64_t v33 = v16 + 2;
LABEL_12:
          unint64_t v20 = (v34 - 1) & v34;
          unint64_t v29 = __clz(__rbit64(v34)) + (v33 << 6);
          int64_t v28 = v33;
          goto LABEL_8;
        }
        unint64_t v35 = v16 + 2;
        if ((uint64_t)(v16 + 3) < v56)
        {
          unint64_t v34 = *(void *)(v54 + 8 * (v16 + 3));
          if (v34)
          {
            int64_t v33 = v16 + 3;
            goto LABEL_12;
          }
          int64_t v33 = v16 + 4;
          unint64_t v35 = v16 + 3;
          if ((uint64_t)(v16 + 4) < v56)
          {
            unint64_t v34 = *(void *)(v54 + 8 * v33);
            if (v34) {
              goto LABEL_12;
            }
            while (v45 != v16)
            {
              unint64_t v34 = *(void *)(v44 + 8 * v16++);
              if (v34)
              {
                int64_t v33 = v16 + 4;
                goto LABEL_12;
              }
            }
            unint64_t v35 = v43;
          }
        }
      }
    }
    uint64_t v36 = sub_100094134(v23);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v7, 1, 1, v36);
    unint64_t v20 = 0;
    unint64_t v16 = v35;
LABEL_15:
    sub_1003D619C((uint64_t)v7, (uint64_t)v10);
    uint64_t v37 = sub_100094134(v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v10, 1, v37) == 1) {
      break;
    }
    uint64_t v38 = v23;
    unint64_t v39 = *(void *)&v10[*(int *)(v37 + 48)];
    uint64_t v40 = v62;
    (*v61)(v62, v10, v3);
    int v41 = (*v22)(v40, v3);
    if (v41 != v70 && v41 != v57)
    {
      if (v41 == v55)
      {
        uint64_t v52 = &v43;
        uint64_t v63 = v68;
        char v64 = v69;
        __chkstk_darwin(v68);
        unint64_t v53 = v16;
        unint64_t v24 = v51;
        *(&v43 - 4) = v39;
        *(&v43 - 3) = v24;
        *(&v43 - 2) = (unint64_t)&v71;
        sub_1001D448C(v25, v26);
        sub_100094134(&qword_10090F398);
        unint64_t v16 = v53;
        Result<>.tryMap<A>(transform:)();
        sub_1003D9BCC(v63, v64, (uint64_t (*)(void))&_swift_release);
        sub_1000CD9D0(v65, v66);
      }
      else if (v41 != v50 && v41 != v48 && v41 != v46)
      {
        uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        return result;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v23 = v38;
  }
  swift_release();
  if (v71 != 1) {
    goto LABEL_38;
  }
  if (qword_1009070B0 != -1) {
    goto LABEL_40;
  }
LABEL_37:
  sub_100094134(&qword_10090F368);
  sub_1000967F4(&qword_100911EF0, &qword_10090F368);
  Subject<>.send()();
LABEL_38:
  REMSuggestedAttributesHarvester.BooleanResponse.init(result:)();
  return sub_1001D4B6C((uint64_t)v67);
}

uint64_t sub_1003D5F2C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a2 + 56);
  int64_t v21 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v17 >= v21) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v21) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v20 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v21) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v20 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    uint64_t v13 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v12);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    swift_bridgeObjectRetain();
    REMSuggestedAttributesHarvester.FeedbackRequest.feedbackFactor.getter();
    sub_1004AB320(v14, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
    *a4 = 1;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v21) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v21) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v20 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1003D60EC(uint64_t a1)
{
  uint64_t result = sub_1003D9BDC(&qword_100917140, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.PostSuggestionAnalyticsInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1003D6144(uint64_t a1)
{
  uint64_t result = sub_1003D9BDC(&qword_100917168, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.RecordSuggestionInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1003D619C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100917170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003D6204(uint64_t a1)
{
  return sub_1003D5F2C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char **)(v1 + 32));
}

Swift::Int sub_1003D6224(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_1001F54A8(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_1003D6DA0(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1003D6290(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)NSRegularExpression);
  id v3 = sub_1002AE71C(2847580, 0xE300000000000000, 0);
  uint64_t v4 = v3;
  if (!v3)
  {
    swift_bridgeObjectRetain();
    sub_1003D6C34((uint64_t)_swiftEmptyArrayStorage);
    return a1;
  }
  swift_bridgeObjectRetain();
  sub_100094134(&qword_1009171A0);
  sub_1000967F4(&qword_1009171A8, &qword_1009171A0);
  sub_1000E4FD8();
  uint64_t v5 = _NSRange.init<A, B>(_:in:)();
  uint64_t v7 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v4 matchesInString:v8 options:0 range:v5];

  sub_1000963CC(0, &qword_1009171B0);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11) {
      goto LABEL_6;
    }
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    NSString v22 = String._bridgeToObjectiveC()();
    NSString v23 = String._bridgeToObjectiveC()();
    id v24 = [v4 stringByReplacingMatchesInString:v22 options:0 range:v5 withTemplate:v7];

    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1003D6C34((uint64_t)_swiftEmptyArrayStorage);

    return a1;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_16;
  }
LABEL_6:
  uint64_t v25 = v7;
  uint64_t v26 = v5;
  uint64_t result = sub_1001DE998(0, v11 & ~(v11 >> 63), 0);
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = 0;
    do
    {
      if ((v10 & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(v10 + 8 * v13 + 32);
      }
      unint64_t v15 = v14;
      id v16 = [v14 range];
      uint64_t v18 = v17;

      unint64_t v20 = _swiftEmptyArrayStorage[2];
      unint64_t v19 = _swiftEmptyArrayStorage[3];
      if (v20 >= v19 >> 1) {
        sub_1001DE998(v19 > 1, v20 + 1, 1);
      }
      ++v13;
      _swiftEmptyArrayStorage[2] = v20 + 1;
      int64_t v21 = &_swiftEmptyArrayStorage[2 * v20];
      v21[4] = v16;
      v21[5] = v18;
    }
    while (v11 != v13);
    swift_bridgeObjectRelease();
    uint64_t v5 = v26;
    uint64_t v7 = v25;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003D65D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = result;
  if (a2 != 1)
  {
    if (a2 > 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v11 = sub_1003D9830(a6, a3, a4, a5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v11[2]) {
        return (uint64_t)v11;
      }
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  uint64_t v9 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v9 < result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v9 == result)
  {
LABEL_8:
    int64_t v10 = *(void *)(a6 + 16);
    uint64_t v11 = _swiftEmptyArrayStorage;
    if (v10)
    {
      sub_1001DE9FC(0, v10, 0);
      uint64_t v11 = _swiftEmptyArrayStorage;
      unint64_t v12 = (id *)(a6 + 40);
      do
      {
        unint64_t v13 = _swiftEmptyArrayStorage[2];
        unint64_t v14 = _swiftEmptyArrayStorage[3];
        id v15 = *v12;
        if (v13 >= v14 >> 1) {
          sub_1001DE9FC(v14 > 1, v13 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v13 + 1;
        id v16 = &_swiftEmptyArrayStorage[3 * v13];
        v16[4] = v15;
        v16[5] = v8;
        v16[6] = 1;
        v12 += 2;
        --v10;
      }
      while (v10);
    }
    return (uint64_t)v11;
  }
  if (v9 > result)
  {
    if (*(void *)(a5 + 16)) {
      sub_100307370(result);
    }
    goto LABEL_8;
  }
LABEL_21:
  __break(1u);
  return result;
}

int64_t sub_1003D6790(int64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v3 = result + a2;
  if (__OFADD__(result, a2))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  int64_t v4 = result;
  if (v3 < result)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v3 == result) {
    return v4;
  }
  if (v3 <= result) {
    goto LABEL_19;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = 1;
  uint64_t v10 = result;
  while (1)
  {
    if (v8)
    {
      uint64_t result = sub_100307370(v10);
      if (v11)
      {
        uint64_t v12 = *(void *)(*(void *)(a3 + 56) + 8 * result);
        BOOL v13 = __OFADD__(v7, v12);
        v7 += v12;
        if (v13)
        {
          __break(1u);
          goto LABEL_17;
        }
      }
    }
    if (a2 == v9) {
      break;
    }
    int64_t v14 = v4 + v9++;
    uint64_t v10 = v14 + v7;
    if (__OFADD__(v14, v7))
    {
      __break(1u);
      break;
    }
  }
  if (__OFSUB__(v10, v4)) {
    goto LABEL_20;
  }
  if (!__OFADD__(v10 - v4, 1)) {
    return v4;
  }
LABEL_21:
  __break(1u);
  return result;
}

void *sub_1003D6868(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  sub_100094134((uint64_t *)&unk_10090AFB0);
  type metadata accessor for _NSRange(0);
  sub_1000967F4((unint64_t *)&unk_100915BA0, (uint64_t *)&unk_10090AFB0);
  Sequence.firstMap<A>(_:)();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if ((v11 & 1) == 0)
  {
    sub_1003D6790(v9, v10, a5);
    id v8 = a2;
    return a2;
  }
  return result;
}

unint64_t sub_1003D697C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Range<>.init(_:in:)();
  if (v8) {
    return 0;
  }
  String.subscript.getter();
  unint64_t v10 = v9;
  unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
  if (v12) {
    unint64_t result = v10;
  }
  if (v10 >> 14 >= result >> 14)
  {
    uint64_t v31 = a6;
    Substring.subscript.getter();
    swift_bridgeObjectRelease();
    sub_10013B8E4();
    sub_1000E4FD8();
    uint64_t v13 = StringProtocol.commonPrefix<A>(with:options:)();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    uint64_t v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0) {
      uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (v16)
    {
      uint64_t v17 = self;
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v19 = [v17 escapedPatternForString:v18];

      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v22 = v21;

      v23._uint64_t countAndFlagsBits = v20;
      v23._uint64_t object = v22;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = 25180;
      v24._uint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v24);
      id v25 = objc_allocWithZone((Class)NSRegularExpression);
      id v26 = sub_1002AE71C(16478, 0xE200000000000000, 0);
      int64_t v28 = v26;
      if (v26)
      {
        NSString v29 = String._bridgeToObjectiveC()();
        id v30 = [v28 firstMatchInString:v29 options:0 range:a5];

        if (v30)
        {
          id v27 = [v30 range];

          return (unint64_t)v27;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  __break(1u);
  return result;
}

void *sub_1003D6C34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    id v2 = (uint64_t *)(a1 + 40);
    int64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v5 = *v2;
      if (*v2 >= 2)
      {
        uint64_t v6 = *(v2 - 1);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v3 = sub_10030BA40(0, v3[2] + 1, 1, v3);
        }
        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1) {
          int64_t v3 = sub_10030BA40((void *)(v7 > 1), v8 + 1, 1, v3);
        }
        v3[2] = v8 + 1;
        int64_t v4 = &v3[2 * v8];
        v4[4] = v6;
        v4[5] = v5 - 1;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
  }
  else
  {
    int64_t v3 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  if (v3[2])
  {
    sub_100094134(&qword_100914888);
    unint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v9 = _swiftEmptyDictionarySingleton;
  }
  char v12 = v9;
  unint64_t v10 = (void *)swift_bridgeObjectRetain();
  sub_1003D79DC(v10, 1, &v12);
  swift_bridgeObjectRelease();
  return v12;
}

Swift::Int sub_1003D6DA0(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_131;
    }
    if (v4) {
      return sub_1003D7558(0, v4, 1, a1);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_139;
  }
  Swift::Int v103 = result;
  unint64_t v97 = a1;
  if (v4 < 2)
  {
    unint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v111 = (char *)&_swiftEmptyArrayStorage[4];
    uint64_t v102 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
LABEL_97:
      if (v12 >= 2)
      {
        uint64_t v91 = *v97;
        do
        {
          unint64_t v92 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_126;
          }
          if (!v91) {
            goto LABEL_138;
          }
          uint64_t v93 = *(void *)&v9[16 * v92 + 32];
          uint64_t v94 = *(void *)&v9[16 * v12 + 24];
          sub_1003D7688((char *)(v91 + 16 * v93), (char *)(v91 + 16 * *(void *)&v9[16 * v12 + 16]), v91 + 16 * v94, v111);
          if (v2) {
            break;
          }
          if (v94 < v93) {
            goto LABEL_127;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v9 = sub_1001F433C((uint64_t)v9);
          }
          if (v92 >= *((void *)v9 + 2)) {
            goto LABEL_128;
          }
          uint64_t v95 = &v9[16 * v92 + 32];
          *(void *)uint64_t v95 = v93;
          *((void *)v95 + 1) = v94;
          unint64_t v96 = *((void *)v9 + 2);
          if (v12 > v96) {
            goto LABEL_129;
          }
          memmove(&v9[16 * v12 + 16], &v9[16 * v12 + 32], 16 * (v96 - v12));
          *((void *)v9 + 2) = v96 - 1;
          unint64_t v12 = v96 - 1;
        }
        while (v96 > 2);
      }
LABEL_108:
      swift_bridgeObjectRelease();
      v102[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    sub_100094134(&qword_10090F7B8);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v102 = (void *)v8;
    uint64_t v111 = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v98 = *a1 - 16;
  uint64_t v99 = *a1 + 40;
  unint64_t v9 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v108 = v4;
  uint64_t v115 = *a1;
  while (1)
  {
    Swift::Int v13 = v10;
    Swift::Int v14 = v10 + 1;
    Swift::Int v107 = v10;
    if (v10 + 1 < v4)
    {
      uint64_t v104 = v9;
      unint64_t v15 = *(void **)(v11 + 16 * v14 + 8);
      uint64_t v16 = *(void **)(v11 + 16 * v10 + 8);
      swift_bridgeObjectRetain();
      id v17 = v15;
      swift_bridgeObjectRetain();
      id v18 = v16;
      uint64_t v112 = NSObject.hashValue.getter();
      uint64_t v109 = NSObject.hashValue.getter();

      Swift::Int v4 = v108;
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      Swift::Int v14 = v13 + 2;
      if (v13 + 2 < v108)
      {
        uint64_t v100 = v2;
        id v19 = (void **)(v99 + 16 * v13);
        while (1)
        {
          Swift::Int v20 = v14;
          int64_t v21 = *v19;
          NSString v22 = *(v19 - 2);
          swift_bridgeObjectRetain();
          id v23 = v21;
          swift_bridgeObjectRetain();
          id v24 = v22;
          uint64_t v25 = NSObject.hashValue.getter();
          uint64_t v26 = NSObject.hashValue.getter();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v112 < v109 == v25 >= v26) {
            break;
          }
          ++v14;
          v19 += 2;
          Swift::Int v4 = v108;
          if (v108 == v20 + 1)
          {
            Swift::Int v14 = v108;
            uint64_t v2 = v100;
            goto LABEL_22;
          }
        }
        uint64_t v2 = v100;
        Swift::Int v4 = v108;
LABEL_22:
        Swift::Int v13 = v107;
      }
      unint64_t v9 = v104;
      uint64_t v11 = v115;
      if (v112 < v109)
      {
        if (v14 < v13) {
          goto LABEL_132;
        }
        if (v13 < v14)
        {
          id v27 = (long long *)(v98 + 16 * v14);
          Swift::Int v28 = v14;
          Swift::Int v29 = v13;
          id v30 = (long long *)(v115 + 16 * v13);
          do
          {
            if (v29 != --v28)
            {
              if (!v115) {
                goto LABEL_137;
              }
              long long v31 = *v30;
              *id v30 = *v27;
              *id v27 = v31;
            }
            ++v29;
            --v27;
            ++v30;
          }
          while (v29 < v28);
        }
      }
    }
    if (v14 < v4)
    {
      if (__OFSUB__(v14, v13)) {
        goto LABEL_130;
      }
      if (v14 - v13 < v103) {
        break;
      }
    }
LABEL_49:
    if (v14 < v13) {
      goto LABEL_125;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v9 = sub_1001F3D80(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v42 = *((void *)v9 + 2);
    unint64_t v41 = *((void *)v9 + 3);
    unint64_t v12 = v42 + 1;
    uint64_t v11 = v115;
    if (v42 >= v41 >> 1)
    {
      uint64_t v90 = sub_1001F3D80((char *)(v41 > 1), v42 + 1, 1, v9);
      uint64_t v11 = v115;
      unint64_t v9 = v90;
    }
    *((void *)v9 + 2) = v12;
    unint64_t v43 = v9 + 32;
    uint64_t v44 = &v9[16 * v42 + 32];
    *(void *)uint64_t v44 = v13;
    *((void *)v44 + 1) = v14;
    Swift::Int v113 = v14;
    if (v42)
    {
      while (1)
      {
        unint64_t v45 = v12 - 1;
        if (v12 >= 4)
        {
          int v50 = &v43[16 * v12];
          uint64_t v51 = *((void *)v50 - 8);
          uint64_t v52 = *((void *)v50 - 7);
          BOOL v56 = __OFSUB__(v52, v51);
          uint64_t v53 = v52 - v51;
          if (v56) {
            goto LABEL_114;
          }
          uint64_t v55 = *((void *)v50 - 6);
          uint64_t v54 = *((void *)v50 - 5);
          BOOL v56 = __OFSUB__(v54, v55);
          uint64_t v48 = v54 - v55;
          char v49 = v56;
          if (v56) {
            goto LABEL_115;
          }
          unint64_t v57 = v12 - 2;
          uint64_t v58 = &v43[16 * v12 - 32];
          uint64_t v60 = *(void *)v58;
          uint64_t v59 = *((void *)v58 + 1);
          BOOL v56 = __OFSUB__(v59, v60);
          uint64_t v61 = v59 - v60;
          if (v56) {
            goto LABEL_117;
          }
          BOOL v56 = __OFADD__(v48, v61);
          uint64_t v62 = v48 + v61;
          if (v56) {
            goto LABEL_120;
          }
          if (v62 >= v53)
          {
            uint64_t v80 = &v43[16 * v45];
            uint64_t v82 = *(void *)v80;
            uint64_t v81 = *((void *)v80 + 1);
            BOOL v56 = __OFSUB__(v81, v82);
            uint64_t v83 = v81 - v82;
            if (v56) {
              goto LABEL_124;
            }
            BOOL v73 = v48 < v83;
            goto LABEL_86;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v74 = *((void *)v9 + 4);
            uint64_t v75 = *((void *)v9 + 5);
            BOOL v56 = __OFSUB__(v75, v74);
            uint64_t v67 = v75 - v74;
            char v68 = v56;
            goto LABEL_80;
          }
          uint64_t v47 = *((void *)v9 + 4);
          uint64_t v46 = *((void *)v9 + 5);
          BOOL v56 = __OFSUB__(v46, v47);
          uint64_t v48 = v46 - v47;
          char v49 = v56;
        }
        if (v49) {
          goto LABEL_116;
        }
        unint64_t v57 = v12 - 2;
        uint64_t v63 = &v43[16 * v12 - 32];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        BOOL v66 = __OFSUB__(v64, v65);
        uint64_t v67 = v64 - v65;
        char v68 = v66;
        if (v66) {
          goto LABEL_119;
        }
        char v69 = &v43[16 * v45];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v56 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v56) {
          goto LABEL_122;
        }
        if (__OFADD__(v67, v72)) {
          goto LABEL_123;
        }
        if (v67 + v72 >= v48)
        {
          BOOL v73 = v48 < v72;
LABEL_86:
          if (v73) {
            unint64_t v45 = v57;
          }
          goto LABEL_88;
        }
LABEL_80:
        if (v68) {
          goto LABEL_118;
        }
        uint64_t v76 = &v43[16 * v45];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v56 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v56) {
          goto LABEL_121;
        }
        if (v79 < v67) {
          goto LABEL_14;
        }
LABEL_88:
        unint64_t v84 = v45 - 1;
        if (v45 - 1 >= v12)
        {
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
        if (!v11) {
          goto LABEL_136;
        }
        uint64_t v85 = &v43[16 * v84];
        uint64_t v86 = *(void *)v85;
        uint64_t v87 = &v43[16 * v45];
        uint64_t v88 = *((void *)v87 + 1);
        sub_1003D7688((char *)(v11 + 16 * *(void *)v85), (char *)(v11 + 16 * *(void *)v87), v11 + 16 * v88, v111);
        if (v2) {
          goto LABEL_108;
        }
        if (v88 < v86) {
          goto LABEL_111;
        }
        if (v45 > *((void *)v9 + 2)) {
          goto LABEL_112;
        }
        *(void *)uint64_t v85 = v86;
        *(void *)&v43[16 * v84 + 8] = v88;
        unint64_t v89 = *((void *)v9 + 2);
        if (v45 >= v89) {
          goto LABEL_113;
        }
        unint64_t v12 = v89 - 1;
        memmove(&v43[16 * v45], v87 + 16, 16 * (v89 - 1 - v45));
        *((void *)v9 + 2) = v89 - 1;
        uint64_t v11 = v115;
        if (v89 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_14:
    Swift::Int v4 = v108;
    Swift::Int v10 = v113;
    if (v113 >= v108) {
      goto LABEL_97;
    }
  }
  if (__OFADD__(v13, v103)) {
    goto LABEL_133;
  }
  if (v13 + v103 >= v4) {
    Swift::Int v32 = v4;
  }
  else {
    Swift::Int v32 = v13 + v103;
  }
  if (v32 >= v13)
  {
    if (v14 != v32)
    {
      uint64_t v105 = v9;
      Swift::Int v106 = v32;
      uint64_t v101 = v2;
      uint64_t v33 = v98 + 16 * v14;
      do
      {
        long long v34 = *(_OWORD *)(v11 + 16 * v14);
        Swift::Int v35 = v13;
        uint64_t v110 = v33;
        while (1)
        {
          uint64_t v114 = (void *)*((void *)&v34 + 1);
          uint64_t v36 = *(void **)(v33 + 8);
          swift_bridgeObjectRetain();
          id v37 = v114;
          swift_bridgeObjectRetain();
          id v38 = v36;
          uint64_t v39 = NSObject.hashValue.getter();
          uint64_t v40 = NSObject.hashValue.getter();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v39 >= v40) {
            break;
          }
          uint64_t v11 = v115;
          if (!v115) {
            goto LABEL_135;
          }
          long long v34 = *(_OWORD *)(v33 + 16);
          *(_OWORD *)(v33 + 16) = *(_OWORD *)v33;
          *(_OWORD *)uint64_t v33 = v34;
          v33 -= 16;
          if (v14 == ++v35) {
            goto LABEL_42;
          }
        }
        uint64_t v11 = v115;
LABEL_42:
        ++v14;
        uint64_t v33 = v110 + 16;
        Swift::Int v13 = v107;
      }
      while (v14 != v106);
      Swift::Int v14 = v106;
      uint64_t v2 = v101;
      unint64_t v9 = v105;
    }
    goto LABEL_49;
  }
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003D7558(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v14 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v17 = *a4;
    uint64_t v5 = *a4 + 16 * a3 - 16;
LABEL_5:
    long long v6 = *(_OWORD *)(v17 + 16 * v4);
    uint64_t v7 = v14;
    uint64_t v15 = v5;
    while (1)
    {
      uint64_t v16 = (void *)*((void *)&v6 + 1);
      uint64_t v8 = *(void **)(v5 + 8);
      swift_bridgeObjectRetain();
      id v9 = v16;
      swift_bridgeObjectRetain();
      id v10 = v8;
      uint64_t v11 = NSObject.hashValue.getter();
      uint64_t v12 = NSObject.hashValue.getter();

      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      if (v11 >= v12)
      {
LABEL_4:
        ++v4;
        uint64_t v5 = v15 + 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v17) {
        break;
      }
      long long v6 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)v5;
      *(_OWORD *)uint64_t v5 = v6;
      v5 -= 16;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1003D7688(char *a1, char *__src, unint64_t a3, char *__dst)
{
  uint64_t v5 = __src;
  uint64_t v6 = __src - a1;
  uint64_t v7 = __src - a1 + 15;
  if (__src - a1 >= 0) {
    uint64_t v7 = __src - a1;
  }
  uint64_t v8 = v7 >> 4;
  uint64_t v9 = a3 - (void)__src;
  uint64_t v10 = a3 - (void)__src + 15;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v10 = a3 - (void)__src;
  }
  uint64_t v11 = v10 >> 4;
  uint64_t v40 = a1;
  uint64_t v39 = __dst;
  if (v8 >= v10 >> 4)
  {
    if (v9 >= -15)
    {
      if (__dst != __src || &__src[16 * v11] <= __dst) {
        memmove(__dst, __src, 16 * v11);
      }
      Swift::Int v32 = __dst;
      NSString v22 = &__dst[16 * v11];
      id v38 = v22;
      uint64_t v40 = v5;
      if (a1 < v5 && v9 >= 16)
      {
        id v23 = (char *)(a3 - 16);
        id v24 = v5;
        do
        {
          long long v34 = v22;
          uint64_t v36 = v23 + 16;
          uint64_t v25 = (void *)*((void *)v22 - 1);
          v22 -= 16;
          uint64_t v26 = (void *)*((void *)v24 - 1);
          v24 -= 16;
          swift_bridgeObjectRetain();
          id v27 = v25;
          swift_bridgeObjectRetain();
          id v28 = v26;
          uint64_t v29 = NSObject.hashValue.getter();
          uint64_t v30 = NSObject.hashValue.getter();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v29 >= v30)
          {
            id v38 = v22;
            id v24 = v5;
            if (v36 < v34 || v23 >= v34 || v36 != v34) {
              *(_OWORD *)id v23 = *(_OWORD *)v22;
            }
          }
          else
          {
            NSString v22 = v34;
            if (v36 != v5 || v23 >= v5) {
              *(_OWORD *)id v23 = *(_OWORD *)v24;
            }
            uint64_t v40 = v24;
          }
          if (v24 <= a1) {
            break;
          }
          v23 -= 16;
          uint64_t v5 = v24;
        }
        while (v22 > v32);
      }
      goto LABEL_42;
    }
  }
  else if (v6 >= -15)
  {
    uint64_t v12 = a1;
    if (__dst != a1 || &a1[16 * v8] <= __dst) {
      memmove(__dst, a1, 16 * v8);
    }
    Swift::Int v35 = &__dst[16 * v8];
    id v38 = v35;
    if ((unint64_t)v5 < a3 && v6 >= 16)
    {
      Swift::Int v13 = __dst;
      do
      {
        uint64_t v14 = (void *)*((void *)v5 + 1);
        uint64_t v15 = (void *)*((void *)v13 + 1);
        swift_bridgeObjectRetain();
        id v16 = v14;
        swift_bridgeObjectRetain();
        id v17 = v15;
        id v18 = v5;
        uint64_t v19 = NSObject.hashValue.getter();
        uint64_t v20 = NSObject.hashValue.getter();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v19 >= v20)
        {
          int64_t v21 = v18;
          if (v12 != v13) {
            *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
          }
          v13 += 16;
          uint64_t v39 = v13;
        }
        else
        {
          int64_t v21 = v18 + 16;
          if (v12 < v18 || v12 >= v21 || v12 != v18) {
            *(_OWORD *)uint64_t v12 = *(_OWORD *)v18;
          }
        }
        v12 += 16;
        if (v13 >= v35) {
          break;
        }
        uint64_t v5 = v21;
      }
      while ((unint64_t)v21 < a3);
      uint64_t v40 = v12;
    }
LABEL_42:
    sub_1001F3F68((void **)&v40, (const void **)&v39, &v38);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003D79DC(void *a1, char a2, void *a3)
{
  uint64_t v4 = a1[2];
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = a1[4];
  uint64_t v41 = a1[5];
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)*a3;
  unint64_t v10 = sub_100307370(v7);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12)) {
    goto LABEL_23;
  }
  char v14 = v9;
  if (v8[3] >= v13)
  {
    if (a2)
    {
      if (v9) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10031B918();
      if (v14) {
        goto LABEL_10;
      }
    }
LABEL_13:
    id v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v18[6] + v19) = v7;
    *(void *)(v18[7] + v19) = v41;
    uint64_t v20 = v18[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v18[2] = v22;
    uint64_t v23 = v4 - 1;
    if (v4 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      uint64_t v25 = *(i - 1);
      uint64_t v26 = *i;
      id v27 = (void *)*a3;
      unint64_t v28 = sub_100307370(v25);
      uint64_t v30 = v27[2];
      BOOL v31 = (v29 & 1) == 0;
      BOOL v21 = __OFADD__(v30, v31);
      uint64_t v32 = v30 + v31;
      if (v21) {
        break;
      }
      char v33 = v29;
      if (v27[3] < v32)
      {
        sub_100314390(v32, 1);
        unint64_t v28 = sub_100307370(v25);
        if ((v33 & 1) != (v34 & 1)) {
          goto LABEL_25;
        }
      }
      if (v33) {
        goto LABEL_10;
      }
      Swift::Int v35 = (void *)*a3;
      *(void *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      uint64_t v36 = 8 * v28;
      *(void *)(v35[6] + v36) = v25;
      *(void *)(v35[7] + v36) = v26;
      uint64_t v37 = v35[2];
      BOOL v21 = __OFADD__(v37, 1);
      uint64_t v38 = v37 + 1;
      if (v21) {
        goto LABEL_24;
      }
      void v35[2] = v38;
      if (!--v23) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100314390(v13, a2 & 1);
  unint64_t v15 = sub_100307370(v7);
  if ((v14 & 1) == (v16 & 1))
  {
    unint64_t v10 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v39._uint64_t object = (void *)0x80000001007D3E70;
  v39._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v39);
  _print_unlocked<A, B>(_:_:)();
  v40._uint64_t countAndFlagsBits = 39;
  v40._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1003D7D24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134(&qword_1009171C8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  int v10 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  if (v10 != 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return _swiftEmptyArrayStorage;
  }
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v17) {
    return _swiftEmptyArrayStorage;
  }
  sub_100094134((uint64_t *)&unk_1009148D0);
  uint64_t v11 = type metadata accessor for REMSuggestedAttributeOutput();
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100776E40;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for REMSuggestedAttributeOutput.Pipeline.heuristic(_:), v2);
  REMSuggestedAttributeOutput.Source.init(pipeline:)();
  (*(void (**)(unint64_t, void, uint64_t))(v12 + 104))(v14 + v13, enum case for REMSuggestedAttributeOutput.pasteboardURL(_:), v11);
  return (void *)v14;
}

BOOL sub_1003D8018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CharacterSet();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    if (qword_100907470 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1009170A0;
    uint64_t v12 = self;
    NSString v13 = String._bridgeToObjectiveC()();
    id v14 = [v12 baseLanguageFromLanguage:v13];

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    LOBYTE(v15) = sub_1001CBC20(v15, v17, v11);
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0 && String.count.getter() < 5) {
      return 0;
    }
  }
  v23[0] = a1;
  v23[1] = a2;
  static CharacterSet.whitespaces.getter();
  sub_1000E4FD8();
  uint64_t v19 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  uint64_t v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0) {
    uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
  }
  return v22 != 0;
}

void *sub_1003D821C(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4; ; ++i)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * i);
      uint64_t v8 = v7;
      uint64_t v9 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v18 = v7;
      sub_1003D5138(&v18, a2, &v17);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v5;
      }

      if ((void)v17)
      {
        long long v16 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = sub_10030BB64(0, v5[2] + 1, 1, v5);
        }
        unint64_t v11 = v5[2];
        unint64_t v10 = v5[3];
        long long v12 = v16;
        if (v11 >= v10 >> 1)
        {
          NSString v13 = sub_10030BB64((void *)(v10 > 1), v11 + 1, 1, v5);
          long long v12 = v16;
          uint64_t v5 = v13;
        }
        uint64_t v5[2] = v11 + 1;
        *(_OWORD *)&v5[2 * v11 + 4] = v12;
      }
      if (v9 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

char *sub_1003D83DC(char *a1, void (**a2)(char *, void, uint64_t), void *a3)
{
  uint64_t v147 = a2;
  uint64_t v152 = a1;
  uint64_t v149 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v151 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  id v148 = (char *)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for REMSuggestedAttributeOutput();
  uint64_t v150 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v140 = (char *)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionRequest();
  uint64_t v155 = *(void *)(v6 - 8);
  Class v156 = (void *)v6;
  __chkstk_darwin(v6);
  os_log_type_t v154 = (uint64_t *)((char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  BOOL v143 = (char *)&v136 - v9;
  __chkstk_darwin(v10);
  Class v142 = (char *)&v136 - v11;
  os_log_type_t v153 = (void *)type metadata accessor for UUID();
  uint64_t v12 = *(v153 - 1);
  __chkstk_darwin(v153);
  uint64_t v144 = (char *)&v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v14);
  long long v16 = (char *)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v17 - 8);
  Class v146 = (char *)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v145 = (char *)&v136 - v20;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v136 - v22;
  Class v158 = a3;
  id v24 = (void *)REMSuggestedAttributesHarvester.MentionsExtractionRequest.listID.getter();
  id v25 = [v24 entityName];

  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  id v29 = [self cdEntityName];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  if (v26 == v30 && v28 == v32)
  {
    swift_bridgeObjectRelease_n();
LABEL_5:
    char v34 = v158;
    if (qword_100907468 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_10008E2DC(v35, (uint64_t)qword_100917088);
    uint64_t v37 = v154;
    uint64_t v36 = v155;
    uint64_t v38 = v156;
    (*(void (**)(void *, void *, void *))(v155 + 16))(v154, v34, v156);
    Swift::String v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      Class v158 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 138543362;
      unint64_t v42 = (void *)REMSuggestedAttributesHarvester.MentionsExtractionRequest.listID.getter();
      v160[3] = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Class v158 = v42;
      (*(void (**)(void *, void *))(v36 + 8))(v37, v38);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "REMSuggestedAttributesHarvester.MentionsExtractionInvocation should not be called with 'parameters.listID', which belongs to list representation of a template. {parameters.listID: %{public}@}", v41, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void *, void *))(v36 + 8))(v37, v38);
    }

    return (char *)_swiftEmptyArrayStorage;
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v33) {
    goto LABEL_5;
  }
  REMSuggestedAttributesHarvester.MentionsExtractionRequest.editingSessionID.getter();
  unint64_t v45 = *(void (**)(uint64_t, void, uint64_t, void *))(v12 + 56);
  uint64_t v46 = v153;
  uint64_t v138 = v12 + 56;
  uint64_t v137 = v45;
  v45((uint64_t)v23, 0, 1, v153);
  uint64_t v47 = &v152[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedEditingSessionID];
  swift_beginAccess();
  uint64_t v48 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_1000BF710((uint64_t)v23, (uint64_t)v16, (uint64_t *)&unk_100909E50);
  os_log_type_t v154 = v47;
  sub_1000BF710((uint64_t)v47, v48, (uint64_t *)&unk_100909E50);
  uint64_t v139 = v12;
  char v49 = *(unsigned int (**)(uint64_t, uint64_t, void *))(v12 + 48);
  if (v49((uint64_t)v16, 1, v46) != 1)
  {
    int v50 = v145;
    sub_1000BF710((uint64_t)v16, (uint64_t)v145, (uint64_t *)&unk_100909E50);
    if (v49(v48, 1, v46) != 1)
    {
      uint64_t v51 = v139;
      uint64_t v52 = v144;
      (*(void (**)(char *, uint64_t, void *))(v139 + 32))(v144, v48, v46);
      sub_1003D9BDC((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v54 = *(void (**)(char *, void *))(v51 + 8);
      v54(v52, v153);
      sub_1000966BC((uint64_t)v23, (uint64_t *)&unk_100909E50);
      v54(v50, v153);
      sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
      if ((v53 & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_20;
    }
    sub_1000966BC((uint64_t)v23, (uint64_t *)&unk_100909E50);
    (*(void (**)(char *, void *))(v139 + 8))(v50, v46);
LABEL_18:
    sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_10090B4C0);
    goto LABEL_27;
  }
  sub_1000966BC((uint64_t)v23, (uint64_t *)&unk_100909E50);
  if (v49(v48, 1, v46) != 1) {
    goto LABEL_18;
  }
  sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
LABEL_20:
  uint64_t v55 = *(void **)&v152[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedList];
  if (v55)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    BOOL v56 = v55;
    unint64_t v57 = (void *)REMSuggestedAttributesHarvester.MentionsExtractionRequest.listID.getter();
    id v58 = [v56 remObjectID];
    char v59 = static NSObject.== infix(_:_:)();

    if (v59)
    {
      if (qword_100907468 != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      sub_10008E2DC(v60, (uint64_t)qword_100917088);
      uint64_t v61 = v155;
      uint64_t v62 = v156;
      uint64_t v63 = *(void (**)(char *, void *, void *))(v155 + 16);
      uint64_t v64 = v142;
      uint64_t v65 = v158;
      v63(v142, v158, v156);
      v63(v143, v65, v62);
      BOOL v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      int v68 = v67;
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v69 = swift_slowAlloc();
        os_log_type_t v154 = (void *)swift_slowAlloc();
        v160[0] = v154;
        *(_DWORD *)uint64_t v69 = 136315394;
        LODWORD(v147) = v68;
        uint64_t v70 = (void *)REMSuggestedAttributesHarvester.MentionsExtractionRequest.listID.getter();
        id v71 = [v70 description];

        uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v145 = v56;
        unint64_t v74 = v73;

        uint64_t v159 = sub_1000C51B8(v72, v74, (uint64_t *)v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v75 = v143;
        uint64_t v155 = *(void *)(v61 + 8);
        ((void (*)(char *, void *))v155)(v64, v62);
        *(_WORD *)(v69 + 12) = 2080;
        Class v146 = (char *)(v69 + 14);
        uint64_t v76 = v66;
        uint64_t v77 = v144;
        REMSuggestedAttributesHarvester.MentionsExtractionRequest.editingSessionID.getter();
        uint64_t v78 = UUID.description.getter();
        unint64_t v80 = v79;
        (*(void (**)(char *, void *))(v139 + 8))(v77, v153);
        uint64_t v159 = sub_1000C51B8(v78, v80, (uint64_t *)v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        BOOL v56 = v145;
        swift_bridgeObjectRelease();
        ((void (*)(char *, void *))v155)(v75, v62);
        _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v147, "Loading cached list: %s for session: %s", (uint8_t *)v69, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v134 = *(void (**)(char *, void *))(v61 + 8);
        v134(v64, v62);
        v134(v143, v62);
      }
      goto LABEL_40;
    }
  }
LABEL_27:
  if (qword_100907468 != -1) {
    swift_once();
  }
  uint64_t v81 = type metadata accessor for Logger();
  sub_10008E2DC(v81, (uint64_t)qword_100917088);
  unint64_t v43 = v152;
  uint64_t v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v82, v83))
  {
    uint64_t v84 = swift_slowAlloc();
    Class v156 = (void *)swift_slowAlloc();
    v160[0] = v156;
    *(_DWORD *)uint64_t v84 = 136315394;
    uint64_t v86 = v153;
    uint64_t v85 = v154;
    if (v49((uint64_t)v154, 1, v153))
    {
      unint64_t v87 = 0xE300000000000000;
      uint64_t v88 = 7104878;
    }
    else
    {
      uint64_t v89 = v139;
      uint64_t v90 = v144;
      (*(void (**)(char *, void *, void *))(v139 + 16))(v144, v85, v86);
      uint64_t v88 = UUID.description.getter();
      unint64_t v87 = v91;
      (*(void (**)(char *, void *))(v89 + 8))(v90, v86);
    }
    uint64_t v159 = sub_1000C51B8(v88, v87, (uint64_t *)v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v84 + 12) = 2080;
    unint64_t v92 = *(void **)&v43[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedList];
    uint64_t v93 = 7104878;
    if (v92)
    {
      id v94 = [v92 remObjectID];
      id v95 = [v94 description];

      uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v97 = v96;
    }
    else
    {
      unint64_t v97 = 0xE300000000000000;
    }
    uint64_t v159 = sub_1000C51B8(v93, v97, (uint64_t *)v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "No cached value found for session: %s list: %s", (uint8_t *)v84, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v98 = v147;
  uint64_t v99 = (void *)REMSuggestedAttributesHarvester.MentionsExtractionRequest.listID.getter();
  v160[0] = 0;
  id v100 = [v98 fetchListWithObjectID:v99 error:v160];

  uint64_t v101 = v160[0];
  uint64_t v102 = v153;
  if (!v100)
  {
    uint64_t v133 = v160[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v43;
  }
  Swift::Int v103 = *(void **)&v43[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedList];
  *(void *)&v43[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedList] = v100;
  uint64_t v104 = v101;
  BOOL v56 = (char *)v100;

  uint64_t v105 = (uint64_t)v146;
  REMSuggestedAttributesHarvester.MentionsExtractionRequest.editingSessionID.getter();
  v137(v105, 0, 1, v102);
  uint64_t v106 = (uint64_t)v154;
  swift_beginAccess();
  sub_1003D9788(v105, v106);
  swift_endAccess();
LABEL_40:
  id v107 = [v56 account];
  id v108 = [v107 capabilities];

  LODWORD(v107) = [v108 supportsAssignments];
  if (!v107) {
    goto LABEL_59;
  }
  id v109 = [v56 shareeContext];
  if (!v109) {
    goto LABEL_59;
  }
  uint64_t v110 = v109;
  id v111 = [v109 sharees];

  sub_1000963CC(0, &qword_10090A3E8);
  unint64_t v112 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v112 >> 62))
  {
    if (*(void *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_44;
    }
    goto LABEL_58;
  }
  swift_bridgeObjectRetain();
  uint64_t v135 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v135)
  {
LABEL_58:
    swift_bridgeObjectRelease();
LABEL_59:

    return (char *)_swiftEmptyArrayStorage;
  }
LABEL_44:
  uint64_t v113 = sub_1001D3648(v112);
  uint64_t v114 = v157;
  uint64_t v115 = sub_1003D821C(v112, v113);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v160[0] = v115;
  swift_bridgeObjectRetain();
  sub_1003D6224(v160);
  uint64_t v157 = v114;
  if (!v114)
  {
    swift_bridgeObjectRelease();
    uint64_t v116 = v160[0];
    if (v160[0][2])
    {
      sub_100094134(&qword_100917180);
      uint64_t inited = swift_initStackObject();
      uint64_t v118 = REMSuggestedAttributesHarvester.MentionsExtractionRequest.reminderTitle.getter();
      uint64_t v119 = sub_1003D5320((uint64_t)v116, v118);
      swift_bridgeObjectRelease();
      swift_release();
      int64_t v120 = *(void *)(v119 + 16);
      if (v120)
      {
        BOOL v143 = (char *)inited;
        uint64_t v145 = v56;
        v160[0] = _swiftEmptyArrayStorage;
        sub_1001DE9C0(0, v120, 0);
        unint64_t v43 = (char *)v160[0];
        LODWORD(v154) = enum case for REMSuggestedAttributeOutput.Pipeline.heuristic(_:);
        os_log_type_t v153 = *(void **)(v151 + 104);
        v151 += 104;
        LODWORD(v152) = enum case for REMSuggestedAttributeOutput.assignee(_:);
        uint64_t v147 = (void (**)(char *, void, uint64_t))(v150 + 104);
        Class v146 = (char *)(v150 + 32);
        uint64_t v144 = (char *)v119;
        uint64_t v121 = (void **)(v119 + 48);
        uint64_t v122 = v141;
        uint64_t v123 = v140;
        do
        {
          uint64_t v124 = *(v121 - 2);
          Class v158 = *(v121 - 1);
          Class v156 = *v121;
          uint64_t v125 = sub_100094134(&qword_100911F80);
          uint64_t v155 = *(int *)(v125 + 48);
          uint64_t v126 = &v123[*(int *)(v125 + 64)];
          ((void (*)(char *, void, uint64_t))v153)(v148, v154, v149);
          id v127 = v124;
          REMSuggestedAttributeOutput.Source.init(pipeline:)();
          id v128 = [v127 objectID];
          uint64_t v129 = REMObjectID.codable.getter();

          *(void *)&v123[v155] = v129;
          uint64_t v130 = v156;
          *(void *)uint64_t v126 = v158;
          *((void *)v126 + 1) = v130;
          (*v147)(v123, v152, v122);

          v160[0] = v43;
          unint64_t v132 = *((void *)v43 + 2);
          unint64_t v131 = *((void *)v43 + 3);
          if (v132 >= v131 >> 1)
          {
            sub_1001DE9C0(v131 > 1, v132 + 1, 1);
            unint64_t v43 = (char *)v160[0];
          }
          v121 += 3;
          *((void *)v43 + 2) = v132 + 1;
          (*(void (**)(char *, char *, uint64_t))(v150 + 32))(&v43[((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80))+ *(void *)(v150 + 72) * v132], v123, v122);
          --v120;
        }
        while (v120);
        swift_release();
      }
      else
      {
        swift_release();

        unint64_t v43 = (char *)_swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease();
      return v43;
    }

    swift_release();
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t result = (char *)swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1003D9788(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003D97F0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003D65D8(*a1, a1[1], v2[2], v2[3], v2[4], v2[5]);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

void *sub_1003D9830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v7 = (void **)(swift_bridgeObjectRetain() + 40);
  uint64_t v8 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v11 = (uint64_t)*(v7 - 1);
    uint64_t v10 = *v7;
    swift_bridgeObjectRetain();
    id v12 = v10;
    uint64_t v13 = sub_1003D6868(v11, v12, a2, a3, a4);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return v8;
    }
    long long v16 = v13;
    uint64_t v17 = v14;
    uint64_t v18 = v15;

    swift_bridgeObjectRelease();
    if (v16)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_10030BB50(0, v8[2] + 1, 1, v8);
      }
      unint64_t v20 = v8[2];
      unint64_t v19 = v8[3];
      if (v20 >= v19 >> 1) {
        uint64_t v8 = sub_10030BB50((void *)(v19 > 1), v20 + 1, 1, v8);
      }
      _OWORD v8[2] = v20 + 1;
      uint64_t v9 = &v8[3 * v20];
      void v9[4] = v16;
      v9[5] = v17;
      void v9[6] = v18;
    }
    v7 += 2;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_1003D99B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1003D697C(*a1, a1[1], v2[2], v2[3], v2[5], v2[6]);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t sub_1003D99FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesHarvester.Request.enabledOniOS.getter();
  *a1 = result & 1;
  return result;
}

unint64_t sub_1003D9A2C()
{
  unint64_t result = qword_1009171D0;
  if (!qword_1009171D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009171D0);
  }
  return result;
}

uint64_t sub_1003D9A80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesHarvester.Request.reminder.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1003D9AAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesHarvester.Request.languageIdentifier.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1003D9AD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesHarvester.Request.modelPipelineSwitcher.getter();
  *a1 = result;
  return result;
}

unint64_t sub_1003D9B04()
{
  unint64_t result = qword_1009171E0;
  if (!qword_1009171E0)
  {
    sub_100096058(&qword_1009171E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009171E0);
  }
  return result;
}

uint64_t sub_1003D9B78@<X0>(char **a1@<X8>)
{
  return sub_1003D3F1C(*(void *)(v1 + 24), *(uint64_t **)(v1 + 32), *(void *)(v1 + 40), a1);
}

void *sub_1003D9B98@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_1003D9C24(*a1, *(void *)(v2 + 24), *(void *)(v2 + 32));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1003D9BCC(uint64_t a1, char a2, uint64_t (*a3)(void))
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return a3();
  }
}

uint64_t sub_1003D9BDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1003D9C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v53 = a1;
  uint64_t v6 = sub_100094134(&qword_100917208);
  uint64_t v50 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v49 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMSuggestedAttributesHarvester.Request();
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v48 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v51 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType();
  uint64_t v47 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v46 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134(&qword_100917210);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v40 = v6;
  uint64_t v52 = v11;
  uint64_t v43 = v3;
  swift_getKeyPath();
  swift_retain();
  sub_100094134(&qword_1009171C8);
  uint64_t v39 = a3;
  PartialOverride.subscript.getter();
  swift_release();
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v42 = a2;
  uint64_t v18 = REMkNNByTitleEmbedding.predict(for:neighborCountToConsider:)();
  if (v19)
  {
    unint64_t v41 = v19;
    uint64_t v53 = v18;
    if (qword_100907460 != -1) {
      swift_once();
    }
    v36[0] = qword_1009421E8;
    uint64_t v20 = (uint64_t)v46;
    uint64_t v21 = v47;
    (*(void (**)(char *, void, uint64_t))(v47 + 104))(v46, enum case for REMSuggestedAttributesHarvester.CachedSuggestionType.list(_:), v54);
    unsigned int v38 = enum case for REMSuggestedAttributeOutput.Pipeline.kNN(_:);
    uint64_t v22 = v48;
    uint64_t v23 = *(void (**)(void))(v48 + 104);
    v36[1] = v48 + 104;
    uint64_t v37 = (void (*)(uint64_t, void, uint64_t))v23;
    uint64_t v24 = (uint64_t)v51;
    v23(v51);
    PartialOverride._full.getter();
    REMSuggestedAttributesHarvester.Request.reminder.getter();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v45);
    id v25 = (void *)REMSuggestedAttributeInput.reminderID.getter();
    swift_release();
    uint64_t v27 = (uint64_t)v49;
    uint64_t v26 = v50;
    uint64_t v28 = v40;
    (*(void (**)(char *, void, uint64_t))(v50 + 104))(v49, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v40);
    sub_1003D05A8(v53, v41, v20, v24, v25, v27, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
    uint64_t v29 = v52;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v52);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v54);
    sub_100094134((uint64_t *)&unk_1009148D0);
    uint64_t v30 = type metadata accessor for REMSuggestedAttributeOutput();
    uint64_t v31 = *(void *)(v30 - 8);
    unint64_t v32 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    char v33 = (void *)swift_allocObject();
    *((_OWORD *)v33 + 1) = xmmword_100776E40;
    uint64_t v34 = *(int *)(sub_100094134(&qword_100911F98) + 48);
    v37(v24, v38, v29);
    REMSuggestedAttributeOutput.Source.init(pipeline:)();
    type metadata accessor for REMSuggestedList();
    *(void *)((char *)v33 + v32 + v34) = REMSuggestedList.__allocating_init(stringLiteral:)();
    (*(void (**)(char *, void, uint64_t))(v31 + 104))((char *)v33 + v32, enum case for REMSuggestedAttributeOutput.list(_:), v30);
  }
  else
  {
    char v33 = _swiftEmptyArrayStorage;
  }
  swift_release();
  return v33;
}

uint64_t sub_1003DA278()
{
  return REMSuggestedAttributesHarvester.Request.embedding.getter();
}

uint64_t sub_1003DA29C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesHarvester.Request.Embedding.neighborsToConsider.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1003DA2D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003D3FD4(a1, a2);
}

uint64_t sub_1003DA2EC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesHarvester.Request.hasPasteboardURL.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1003DA31C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesHarvester.Request.reminderHasURL.getter();
  *a1 = result & 1;
  return result;
}

ValueMetadata *type metadata accessor for SuggestedAttributesDisabledError()
{
  return &type metadata for SuggestedAttributesDisabledError;
}

uint64_t sub_1003DA35C(uint64_t a1)
{
  return sub_1003DBEEC(a1);
}

uint64_t sub_1003DA374(uint64_t a1)
{
  char v3 = v1;
  uint64_t v5 = _s10PredicatesOMa(0);
  *(void *)&double v6 = __chkstk_darwin(v5).n128_u64[0];
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v9 = [v3 listIDs:v6];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t *v8 = v10;
  swift_storeEnumTagMultiPayload();
  if (qword_100907418 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10039E88C((uint64_t)v8, (objc_class *)qword_1009421D8, a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (v2)
  {
    sub_1003DC140((uint64_t)v8, _s10PredicatesOMa);
  }
  else
  {
    unint64_t v12 = v11;
    id v13 = [self defaultFetchOptions];
    a1 = sub_10044B6AC(v12, v13, a1);
    sub_1003DC140((uint64_t)v8, _s10PredicatesOMa);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1003DA560(uint64_t a1)
{
  return sub_1003DA374(a1);
}

id sub_1003DA584(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v72 = a1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v76 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v68 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = _s10PredicatesOMa(0);
  __chkstk_darwin(v69);
  id v71 = (uint64_t *)((char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  BOOL v66 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  os_log_type_t v67 = (char *)&v66 - v9;
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v66 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v66 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v66 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v66 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v66 - v23;
  *(void *)&double v26 = __chkstk_darwin(v25).n128_u64[0];
  uint64_t v28 = (char *)&v66 - v27;
  id v78 = v2;
  id v29 = [v2 startDate:v26];
  if (v29)
  {
    uint64_t v30 = v29;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v31 = v76;
    unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56);
    char v33 = v21;
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v31 = v76;
    unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56);
    char v33 = v21;
    uint64_t v34 = 1;
  }
  unint64_t v74 = v32;
  v32(v33, v34, 1, v3);
  sub_1000CAAB4((uint64_t)v21, (uint64_t)v24);
  unint64_t v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v35 = v73(v24, 1, v3);
  uint64_t v75 = v18;
  if (v35 == 1)
  {
    sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909A40);
    uint64_t v36 = 1;
  }
  else
  {
    Date.addingTimeInterval(_:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v24, v3);
    uint64_t v36 = 0;
  }
  uint64_t v37 = v74;
  uint64_t v38 = 1;
  uint64_t v77 = v31 + 56;
  v74(v28, v36, 1, v3);
  id v39 = [v78 endDate];
  if (v39)
  {
    uint64_t v40 = v39;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v38 = 0;
  }
  uint64_t v41 = (uint64_t)v28;
  v37(v12, v38, 1, v3);
  sub_1000CAAB4((uint64_t)v12, (uint64_t)v15);
  int v42 = v73(v15, 1, v3);
  uint64_t v43 = v76;
  if (v42 == 1)
  {
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909A40);
    uint64_t v44 = 1;
    uint64_t v45 = v71;
    uint64_t v46 = (uint64_t)v75;
  }
  else
  {
    uint64_t v46 = (uint64_t)v75;
    Date.addingTimeInterval(_:)();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v3);
    uint64_t v44 = 0;
    uint64_t v45 = v71;
  }
  v37((char *)v46, v44, 1, v3);
  uint64_t v47 = sub_100094134(&qword_100916930);
  uint64_t v48 = (uint64_t)v45 + *(int *)(v47 + 48);
  uint64_t v49 = (uint64_t)v45 + *(int *)(v47 + 64);
  id v50 = [v78 listIDs];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t *v45 = v51;
  sub_1000CAA4C(v41, v48);
  sub_1000CAA4C(v46, v49);
  swift_storeEnumTagMultiPayload();
  if (qword_100907418 != -1) {
    swift_once();
  }
  uint64_t v52 = v72;
  uint64_t v53 = v70;
  uint64_t v54 = sub_10039E88C((uint64_t)v45, (objc_class *)qword_1009421D8, v72, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  uint64_t v55 = v41;
  if (v53)
  {
    sub_1003DC140((uint64_t)v45, _s10PredicatesOMa);
    sub_1000966BC((uint64_t)v75, (uint64_t *)&unk_100909A40);
    sub_1000966BC(v41, (uint64_t *)&unk_100909A40);
    return v50;
  }
  BOOL v56 = (void *)v54;
  id v57 = [v78 startDate];
  if (v57)
  {
    id v58 = v57;
    char v59 = v68;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v60 = (uint64_t)v67;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v67, v59, v3);
    v74((char *)v60, 0, 1, v3);
    if (v73((char *)v60, 1, v3) != 1) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v60 = (uint64_t)v67;
    v74(v67, 1, 1, v3);
    char v59 = v68;
  }
  sub_1000966BC(v60, (uint64_t *)&unk_100909A40);
  id v61 = [v78 endDate];
  if (!v61)
  {
    uint64_t v60 = (uint64_t)v66;
    v74(v66, 1, 1, v3);
    goto LABEL_23;
  }
  uint64_t v62 = v61;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v60 = (uint64_t)v66;
  (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v66, v59, v3);
  v74((char *)v60, 0, 1, v3);
  if (v73((char *)v60, 1, v3) == 1)
  {
LABEL_23:
    sub_1000966BC(v60, (uint64_t *)&unk_100909A40);
    goto LABEL_24;
  }
LABEL_21:
  sub_1000966BC(v60, (uint64_t *)&unk_100909A40);
  uint64_t v63 = v78;
  BOOL v56 = sub_1003DBD54((unint64_t)v56, v63);

LABEL_24:
  id v64 = [self defaultFetchOptions];
  id v50 = (id)sub_10044B6AC((unint64_t)v56, v64, v52);
  swift_bridgeObjectRelease();

  sub_1003DC140((uint64_t)v45, _s10PredicatesOMa);
  sub_1000966BC((uint64_t)v75, (uint64_t *)&unk_100909A40);
  sub_1000966BC(v55, (uint64_t *)&unk_100909A40);
  return v50;
}

uint64_t sub_1003DADC0(void **a1, void *a2)
{
  id v110 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v105 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v90 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v97 = (char *)&v89 - v6;
  __chkstk_darwin(v7);
  unint64_t v91 = (char *)&v89 - v8;
  __chkstk_darwin(v9);
  uint64_t v106 = (char *)&v89 - v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v89 - v12;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v14 - 8);
  uint64_t v101 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for DateComponents();
  uint64_t v108 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v99 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v95 = (char *)&v89 - v18;
  uint64_t v19 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v19 - 8);
  uint64_t v92 = (uint64_t)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v104 = (char *)&v89 - v22;
  __chkstk_darwin(v23);
  uint64_t v96 = (uint64_t)&v89 - v24;
  __chkstk_darwin(v25);
  Swift::Int v103 = (char *)&v89 - v26;
  __chkstk_darwin(v27);
  id v94 = (char *)&v89 - v28;
  __chkstk_darwin(v29);
  uint64_t v111 = (uint64_t)&v89 - v30;
  uint64_t v31 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v31 - 8);
  char v33 = (char *)&v89 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for TimeZone();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v89 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v39 = __chkstk_darwin(v38).n128_u64[0];
  uint64_t v41 = (char *)&v89 - v40;
  int v42 = *a1;
  id v43 = [v42 timeZone:v39];
  uint64_t v107 = v34;
  id v109 = v41;
  uint64_t v100 = v35;
  uint64_t v98 = v13;
  if (v43)
  {
    uint64_t v44 = v43;
    uint64_t v93 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    TimeZone.init(identifier:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) == 1)
    {
      static TimeZone.current.getter();
      sub_1000966BC((uint64_t)v33, &qword_100910408);
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    }
    else
    {
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v45(v37, v33, v34);
    }
    uint64_t v3 = v93;
    id v50 = v41;
    uint64_t v49 = v108;
    v45(v50, v37, v34);
    uint64_t v46 = v105;
    uint64_t v47 = v102;
    uint64_t v48 = (uint64_t)v103;
  }
  else
  {
    static TimeZone.current.getter();
    uint64_t v46 = v105;
    uint64_t v47 = v102;
    uint64_t v48 = (uint64_t)v103;
    uint64_t v49 = v108;
  }
  id v51 = [v42 dueDateComponents];
  if (!v51)
  {
    uint64_t v55 = (uint64_t)v101;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v101, 1, 1, v47);
    goto LABEL_12;
  }
  uint64_t v52 = v51;
  uint64_t v53 = v99;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
  uint64_t v55 = (uint64_t)v101;
  v54(v101, v53, v47);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v55, 0, 1, v47);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v55, 1, v47) == 1)
  {
LABEL_12:
    sub_1000966BC(v55, (uint64_t *)&unk_100911810);
    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
    v62(v111, 1, 1, v3);
    goto LABEL_15;
  }
  BOOL v56 = v95;
  v54(v95, (char *)v55, v47);
  id v57 = self;
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  Class v59 = TimeZone._bridgeToObjectiveC()().super.isa;
  id v60 = [v57 rem_dateWithDateComponents:isa timeZone:v59];

  if (v60)
  {
    uint64_t v61 = (uint64_t)v94;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, uint64_t))(v108 + 8))(v56, v47);
    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
    v62(v61, 0, 1, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v108 + 8))(v56, v47);
    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
    uint64_t v61 = (uint64_t)v94;
    v62((uint64_t)v94, 1, 1, v3);
  }
  sub_1000CAAB4(v61, v111);
LABEL_15:
  id v63 = [v110 startDate];
  if (!v63)
  {
    v62(v48, 1, 1, v3);
    goto LABEL_20;
  }
  id v64 = v63;
  uint64_t v65 = v106;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  BOOL v66 = *(void (**)(uint64_t, char *, uint64_t))(v46 + 32);
  v66(v48, v65, v3);
  v62(v48, 0, 1, v3);
  os_log_type_t v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  if (v67(v48, 1, v3) == 1)
  {
LABEL_20:
    sub_1000966BC(v48, (uint64_t *)&unk_100909A40);
    char v69 = 1;
    goto LABEL_21;
  }
  v66((uint64_t)v98, (char *)v48, v3);
  uint64_t v68 = v96;
  sub_1000CAA4C(v111, v96);
  if (v67(v68, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v98, v3);
    sub_1000966BC(v68, (uint64_t *)&unk_100909A40);
    char v69 = 0;
  }
  else
  {
    os_log_type_t v83 = v91;
    v66((uint64_t)v91, (char *)v68, v3);
    uint64_t v84 = v98;
    char v69 = static Date.< infix(_:_:)();
    uint64_t v85 = *(void (**)(char *, uint64_t))(v46 + 8);
    v85(v83, v3);
    v85(v84, v3);
  }
LABEL_21:
  uint64_t v70 = v107;
  id v71 = [v110 endDate];
  if (!v71)
  {
    uint64_t v75 = (uint64_t)v104;
    v62((uint64_t)v104, 1, 1, v3);
    goto LABEL_27;
  }
  uint64_t v72 = v71;
  unint64_t v73 = v106;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v74 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  uint64_t v75 = (uint64_t)v104;
  v74(v104, v73, v3);
  v62(v75, 0, 1, v3);
  uint64_t v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  if (v76(v75, 1, v3) == 1)
  {
LABEL_27:
    sub_1000966BC(v111, (uint64_t *)&unk_100909A40);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v109, v70);
    sub_1000966BC(v75, (uint64_t *)&unk_100909A40);
    return v69 & 1;
  }
  uint64_t v77 = v97;
  v74(v97, (char *)v75, v3);
  if (v69)
  {
    uint64_t v78 = v92;
    sub_1000CAA4C(v111, v92);
    unsigned int v79 = v76(v78, 1, v3);
    unint64_t v80 = v77;
    uint64_t v81 = v107;
    uint64_t v82 = v100;
    if (v79 != 1)
    {
      uint64_t v86 = v90;
      v74(v90, (char *)v78, v3);
      sub_100265DDC();
      char v69 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
      unint64_t v87 = *(void (**)(char *, uint64_t))(v46 + 8);
      v87(v86, v3);
      v87(v80, v3);
      sub_1000966BC(v111, (uint64_t *)&unk_100909A40);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v109, v81);
      return v69 & 1;
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v80, v3);
    sub_1000966BC(v111, (uint64_t *)&unk_100909A40);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v109, v81);
    sub_1000966BC(v78, (uint64_t *)&unk_100909A40);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v77, v3);
    sub_1000966BC(v111, (uint64_t *)&unk_100909A40);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v109, v107);
  }
  char v69 = 0;
  return v69 & 1;
}

id sub_1003DB940(uint64_t a1)
{
  return sub_1003DA584(a1);
}

uint64_t sub_1003DB964(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v30 - v9;
  uint64_t v11 = _s10PredicatesOMa(0);
  *(void *)&double v12 = __chkstk_darwin(v11).n128_u64[0];
  uint64_t v14 = (void *)((char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v15 = [v3 listIDs:v12];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *uint64_t v14 = v16;
  id v17 = [v3 startDate];
  if (v17)
  {
    uint64_t v18 = v17;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v10, 0, 1, v19);
  }
  else
  {
    uint64_t v20 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v10, 1, 1, v20);
  }
  uint64_t v21 = sub_100094134(&qword_100916930);
  sub_1000CAAB4((uint64_t)v10, (uint64_t)v14 + *(int *)(v21 + 48));
  id v22 = [v3 endDate];
  if (v22)
  {
    uint64_t v23 = v22;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 0, 1, v24);
  }
  else
  {
    uint64_t v25 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 1, 1, v25);
  }
  sub_1000CAAB4((uint64_t)v7, (uint64_t)v14 + *(int *)(v21 + 64));
  swift_storeEnumTagMultiPayload();
  if (qword_100907418 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_10039E88C((uint64_t)v14, (objc_class *)qword_1009421D8, a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (v2)
  {
    sub_1003DC140((uint64_t)v14, _s10PredicatesOMa);
  }
  else
  {
    unint64_t v27 = v26;
    id v28 = [self defaultFetchOptions];
    a1 = sub_10044B6AC(v27, v28, a1);
    sub_1003DC140((uint64_t)v14, _s10PredicatesOMa);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1003DBD30(uint64_t a1)
{
  return sub_1003DB964(a1);
}

void *sub_1003DBD54(unint64_t a1, void *a2)
{
  unint64_t v4 = a1;
  id v17 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      unint64_t v6 = 0;
      unint64_t v7 = v4 & 0xC000000000000001;
      uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
      uint64_t v14 = v5;
      unint64_t v15 = v4;
      while (v7)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v10 = v9;
        unint64_t v11 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_17;
        }
        uint64_t v16 = v9;
        char v12 = sub_1003DADC0(&v16, a2);
        if (v2)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return a2;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v5 = v14;
          unint64_t v4 = v15;
        }
        else
        {
        }
        ++v6;
        if (v11 == v5)
        {
          a2 = v17;
          goto LABEL_20;
        }
      }
      if (v6 < *(void *)(v8 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v4 + 8 * v6 + 32);
    goto LABEL_9;
  }
LABEL_19:
  a2 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_1003DBEEC(uint64_t a1)
{
  uint64_t v3 = _s10PredicatesOMa_1();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  if (qword_100907890 != -1) {
    swift_once();
  }
  unint64_t v6 = qword_100942570;
  unint64_t v7 = (void *)sub_100535B3C();
  uint64_t v8 = (void *)sub_1003BD0F4(0, v6, 0, (uint64_t)v7);

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v8 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t v10 = a1;
  uint64_t v11 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    sub_1003DC140((uint64_t)v5, (uint64_t (*)(void))_s10PredicatesOMa_1);
  }
  else
  {
    v14[1] = v11;
    sub_100094134(&qword_100910160);
    sub_1000ED03C();
    unint64_t v12 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    uint64_t v10 = sub_10016EC98(v12);
    sub_1003DC140((uint64_t)v5, (uint64_t (*)(void))_s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t sub_1003DC140(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003DC1A0()
{
  id v1 = [v0 fileName];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1003DC208(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v3 = 0;
  }
  [v2 setSha512Sum:v3];
}

id sub_1003DC274@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 template];
  *a2 = result;
  return result;
}

id sub_1003DC2B0(void *a1, id *a2)
{
  return [*a2 setTemplate:*a1];
}

uint64_t sub_1003DC2C4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003DCAC4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1003DC2F8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1003DC334(unint64_t a1, char a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v34 = _swiftEmptyArrayStorage;
  if (a2 < 0)
  {
    uint64_t KeyPath = swift_getKeyPath();
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      sub_1001D78D4((id)a1, a2);
    }
    else
    {
      uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v16 = _swiftEmptyArrayStorage;
    if (v15)
    {
      char v33 = _swiftEmptyArrayStorage;
      uint64_t result = sub_1001DE118(0, v15 & ~(v15 >> 63), 0);
      if (v15 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v32 = KeyPath;
      uint64_t v18 = 0;
      uint64_t v16 = v33;
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v19 = *(id *)(a1 + 8 * v18 + 32);
        }
        uint64_t v20 = v19;
        id v21 = [v19 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v22 = type metadata accessor for UUID();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v7, 0, 1, v22);

        char v33 = v16;
        unint64_t v24 = v16[2];
        unint64_t v23 = v16[3];
        if (v24 >= v23 >> 1)
        {
          sub_1001DE118(v23 > 1, v24 + 1, 1);
          uint64_t v16 = v33;
        }
        ++v18;
        void v16[2] = v24 + 1;
        sub_1000F44F4((uint64_t)v7, (uint64_t)v16+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v24);
      }
      while (v15 != v18);
      uint64_t KeyPath = v32;
    }
    sub_10039F364(KeyPath, (uint64_t)v16);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v34[2] >= v34[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  else
  {
    uint64_t v11 = swift_getKeyPath();
    id v12 = [(id)a1 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 0, 1, v13);
    sub_10032ED4C(v11, (uint64_t)v10);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v34[2] >= v34[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    sub_1001D78D4((id)a1, a2);
    if ((a2 & 1) == 0) {
      goto LABEL_26;
    }
  }
  sub_100398324(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v34[2] >= v34[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_100094134(&qword_100917228);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = sub_10039F378(v26);
  swift_release();
  *(void *)(inited + 32) = v27;
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = sub_10039F39C(v28);
  swift_release();
  *(void *)(inited + 40) = v29;
  char v33 = (void *)inited;
  specialized Array._endMutation()();
  sub_100397E58(v33);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v34[2] >= v34[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
LABEL_26:
  uint64_t v30 = swift_getKeyPath();
  sub_10039F39C(v30);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v34[2] >= v34[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return sub_1002F52FC(v34);
}

void sub_1003DC854(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  id v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    uint64_t v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

uint64_t sub_1003DC99C()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  sub_1001BCA48();
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_100942200 = v0;
  return result;
}

uint64_t sub_1003DCA24()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077B710;
  sub_1001BCA48();
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  swift_getKeyPath();
  *(void *)(v0 + 40) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_100942208 = v0;
  return result;
}

uint64_t sub_1003DCAC4@<X0>(id *a1@<X0>, SEL *a2@<X3>, void (*a3)(void)@<X4>, uint64_t (*a4)(void)@<X5>, uint64_t a5@<X8>)
{
  id v8 = [*a1 *a2];
  if (v8)
  {
    uint64_t v9 = v8;
    a3();

    uint64_t v10 = ((uint64_t (*)(void))a4)(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v12 = v10;
    uint64_t v13 = a5;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = a4();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v12 = v15;
    uint64_t v13 = a5;
    uint64_t v14 = 1;
  }

  return v11(v13, v14, 1, v12);
}

void *sub_1003DCBA4()
{
  sub_1001DE058(0, 5, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  unint64_t v1 = _swiftEmptyArrayStorage[3];
  unint64_t v3 = v2 + 1;
  if (v2 >= v1 >> 1)
  {
    sub_1001DE058(v1 > 1, v2 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v3;
  uint64_t v4 = &_swiftEmptyArrayStorage[2 * v2];
  v4[4] = 0xD000000000000023;
  v4[5] = 0x80000001007CE560;
  unint64_t v5 = _swiftEmptyArrayStorage[3];
  int64_t v6 = v2 + 2;
  if (v3 >= v5 >> 1)
  {
    sub_1001DE058(v5 > 1, v6, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v6;
  unint64_t v7 = &_swiftEmptyArrayStorage[2 * v3];
  v7[4] = 0x696669746E656469;
  v7[5] = 0xEA00000000007265;
  unint64_t v9 = _swiftEmptyArrayStorage[2];
  unint64_t v8 = _swiftEmptyArrayStorage[3];
  unint64_t v10 = v9 + 1;
  if (v9 >= v8 >> 1)
  {
    sub_1001DE058(v8 > 1, v9 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v10;
  uint64_t v11 = &_swiftEmptyArrayStorage[2 * v9];
  v11[4] = 0xD00000000000001ALL;
  v11[5] = 0x80000001007C6B40;
  unint64_t v12 = _swiftEmptyArrayStorage[3];
  int64_t v13 = v9 + 2;
  if (v10 >= v12 >> 1)
  {
    sub_1001DE058(v12 > 1, v13, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v13;
  uint64_t v14 = &_swiftEmptyArrayStorage[2 * v10];
  v14[4] = 0xD00000000000001ELL;
  v14[5] = 0x80000001007C8BC0;
  unint64_t v16 = _swiftEmptyArrayStorage[2];
  unint64_t v15 = _swiftEmptyArrayStorage[3];
  if (v16 >= v15 >> 1)
  {
    sub_1001DE058(v15 > 1, v16 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v16 + 1;
  id v17 = &_swiftEmptyArrayStorage[2 * v16];
  v17[4] = 0x4E79616C70736964;
  v17[5] = 0xEB00000000656D61;
  return result;
}

uint64_t sub_1003DD0C4()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  specialized Array._endMutation()();
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v1 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v2) {
    goto LABEL_18;
  }
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  swift_release();
  unint64_t v5 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_100308F88(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    unint64_t v5 = sub_100308F88((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  uint64_t v5[2] = v7 + 1;
  unint64_t v8 = &v5[2 * v7];
  v8[4] = v3;
  v8[5] = v4;
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v9 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v10)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v5 = sub_100308F88(0, v5[2] + 1, 1, v5);
    }
    unint64_t v14 = v5[2];
    unint64_t v13 = v5[3];
    if (v14 >= v13 >> 1) {
      unint64_t v5 = sub_100308F88((void *)(v13 > 1), v14 + 1, 1, v5);
    }
    uint64_t v5[2] = v14 + 1;
    unint64_t v15 = &v5[2 * v14];
    v15[4] = v11;
    v15[5] = v12;
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  else
  {
LABEL_18:
    _StringGuts.grow(_:)(46);
    v17._uint64_t object = (void *)0x80000001007CAF70;
    v17._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v17);
    sub_100094134((uint64_t *)&unk_100913A88);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1003DD360(unint64_t a1, char a2, uint64_t a3, Class a4, Class isa, Class a6)
{
  uint64_t v9 = (void *)sub_1003DC334(a1, a2);
  type metadata accessor for REMCDTemplateSection();
  id v10 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v11 = [(id)swift_getObjCClassFromMetadata() entity];
  [v10 setEntity:v11];

  [v10 setAffectedStores:0];
  [v10 setPredicate:v9];

  if (isa)
  {
    sub_1001FFC40((uint64_t)isa);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v10 setPropertiesToFetch:isa];

  if (a6) {
    a6 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v10 setRelationshipKeyPathsForPrefetching:a6];

  if (a4)
  {
    sub_1001BCA48();
    a4 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v10 setSortDescriptors:a4];

  uint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();
  return v12;
}

uint64_t sub_1003DD510@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003DCAC4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1003DD558(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1003DD5A8()
{
  return "template";
}

id sub_1003DD5B4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 template];
  *a2 = result;
  return result;
}

id sub_1003DD5F0(void *a1, id *a2)
{
  return [*a2 setTemplate:*a1];
}

id sub_1003DD604@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 markedForDeletion];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1003DD638(unsigned __int8 *a1, id *a2)
{
  return [*a2 setMarkedForDeletion:*a1];
}

id sub_1003DD64C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_1003DD688(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

uint64_t sub_1003DD6A4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003DCAC4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1003DD6EC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1003DD73C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003DCAC4(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1003DD784(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1003DD7D4(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    if (!v8) {
      return (uint64_t)v9;
    }
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1001DE118(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0) {
      break;
    }
    v18[1] = v2;
    uint64_t v11 = 0;
    uint64_t v9 = v19;
    unint64_t v2 = a1 & 0xC000000000000001;
    while (v8 != v11)
    {
      if (v2) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(a1 + 8 * v11 + 32);
      }
      unint64_t v13 = v12;
      id v14 = [v12 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 0, 1, v15);

      uint64_t v19 = v9;
      unint64_t v17 = v9[2];
      unint64_t v16 = v9[3];
      if (v17 >= v16 >> 1)
      {
        sub_1001DE118(v16 > 1, v17 + 1, 1);
        uint64_t v9 = v19;
      }
      ++v11;
      long long v9[2] = v17 + 1;
      sub_1000F44F4((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v17);
      if (v8 == v11) {
        return (uint64_t)v9;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1003DDA18(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 < 0)
  {
    uint64_t KeyPath = swift_getKeyPath();
    if (a1) {
      sub_1003A07D8(KeyPath);
    }
    else {
      sub_1003A0270(KeyPath);
    }
    goto LABEL_18;
  }
  if (a3)
  {
    uint64_t v5 = swift_getKeyPath();
    sub_1003A0270(v5);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v6 = swift_getKeyPath();
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    sub_1001DE560(0, v7, 0);
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v9 = (unsigned __int8 *)(a1 + 32);
    unint64_t v10 = _swiftEmptyArrayStorage[2];
    do
    {
      __int16 v12 = *v9++;
      __int16 v11 = v12;
      uint64_t v18 = v8;
      unint64_t v13 = v8[3];
      if (v10 >= v13 >> 1)
      {
        sub_1001DE560(v13 > 1, v10 + 1, 1);
        uint64_t v8 = v18;
      }
      _OWORD v8[2] = v10 + 1;
      *((_WORD *)v8 + v10++ + 16) = v11 + 1;
      --v7;
    }
    while (v7);
  }
  sub_1003A02B8(v6, (uint64_t)v8);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (a2)
  {
    uint64_t v14 = swift_getKeyPath();
    uint64_t v15 = sub_1003DD7D4(a2);
    sub_1003A02CC(v14, v15);
LABEL_18:
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  return sub_1002F52FC(_swiftEmptyArrayStorage);
}

id sub_1003DDC90(void *a1)
{
  id v3 = [(id)swift_getObjCClassFromMetadata() entity];
  id v4 = [objc_allocWithZone((Class)NSBatchUpdateRequest) initWithEntity:v3];

  *(void *)&long long v27 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1003A0270(KeyPath);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(v27 + 16) >= *(void *)(v27 + 24) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v6 = (void *)sub_1002F52FC(v27);
  [v4 setPredicate:v6];

  id v7 = (id)sub_100094134(&qword_10090AF50);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)&long long v27 = 0x656C706D6F437369;
  *((void *)&v27 + 1) = 0xEB00000000646574;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for Bool;
  *(unsigned char *)(inited + 72) = 1;
  sub_1002EE418(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 setPropertiesToUpdate:isa];

  [v4 setResultType:1];
  id v25 = 0;
  id v10 = [a1 executeRequest:v4 error:&v25];
  id v11 = v25;
  if (v10)
  {
    id v12 = v10;
    *((void *)&v28 + 1) = sub_1000963CC(0, (unint64_t *)&unk_100916F40);
    *(void *)&long long v27 = v12;
    sub_1000963CC(0, &qword_1009133F0);
    id v13 = v11;
    throwingCast<A>(_:as:failureMessage:)();
    if (v1)
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v27);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v27);
      id v14 = v26;
      if ([v26 result])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v27 = 0u;
        long long v28 = 0u;
      }
      uint64_t v15 = sub_100094134(&qword_100908270);
      throwingCast<A>(_:as:failureMessage:)();
      sub_1000F5B8C((uint64_t)&v27);
      unint64_t v16 = (unint64_t)v26;
      id v24 = self;
      uint64_t v17 = swift_initStackObject();
      *(_OWORD *)(v17 + 16) = xmmword_100776E40;
      *(void *)&long long v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v27 + 1) = v18;
      AnyHashable.init<A>(_:)();
      *(void *)(v17 + 96) = v15;
      *(void *)(v17 + 72) = v16;
      swift_bridgeObjectRetain();
      sub_1002EE418(v17);
      Class v19 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_10077A530;
      *(void *)(v20 + 32) = a1;
      *(void *)&long long v27 = v20;
      specialized Array._endMutation()();
      sub_1000963CC(0, (unint64_t *)&unk_100916F50);
      id v21 = a1;
      Class v22 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v24 mergeChangesFromRemoteContextSave:v19 intoContexts:v22];

      if (v16 >> 62)
      {
        swift_bridgeObjectRetain();
        id v7 = (id)_CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease_n();
      }
      else
      {
        id v7 = *(id *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);

        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    id v7 = v25;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v7;
}

uint64_t sub_1003DE1C0()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077B710;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  swift_getKeyPath();
  *(void *)(v0 + 40) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_100917230 = v0;
  return result;
}

void sub_1003DE270(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  uint64_t v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    uint64_t v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

unint64_t sub_1003DE3B8(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  sub_1003A0270(KeyPath);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v4 = (void *)sub_1002F52FC(_swiftEmptyArrayStorage);
  type metadata accessor for REMCDTemplateOperationQueueItem();
  id v5 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v6 = [(id)swift_getObjCClassFromMetadata() entity];
  [v5 setEntity:v6];

  [v5 setAffectedStores:0];
  [v5 setPredicate:v4];

  [v5 setFetchLimit:1];
  if (qword_100907488 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v5 setSortDescriptors:isa];

  [v5 setReturnsObjectsAsFaults:0];
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return a1;
  }
  unint64_t v9 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    a1 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!a1) {
      goto LABEL_13;
    }
  }
  else
  {
    a1 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!a1)
    {
LABEL_13:
      swift_bridgeObjectRelease();

      return a1;
    }
  }
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_12;
  }
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v10 = *(id *)(v9 + 32);
LABEL_12:
    a1 = (uint64_t)v10;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003DE658(uint64_t a1, void *a2)
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = a2;
  unint64_t v12 = inited;
  specialized Array._endMutation()();
  swift_bridgeObjectRetain();
  id v5 = a2;
  id v6 = (void *)sub_1003DDA18(a1, v12, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for REMCDTemplateOperationQueueItem();
  id v7 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v8 = [(id)swift_getObjCClassFromMetadata() entity];
  [v7 setEntity:v8];

  [v7 setAffectedStores:0];
  [v7 setPredicate:v6];

  if (qword_100907488 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v7 setSortDescriptors:isa];

  [v7 setReturnsObjectsAsFaults:0];
  uint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();

  return v10;
}

id sub_1003DE840@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 priorityRawValue];
  *a2 = (_WORD)result;
  return result;
}

id sub_1003DE874(__int16 *a1, id *a2)
{
  return [*a2 setPriorityRawValue:*a1];
}

uint64_t sub_1003DE888@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1003DE8D0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_1003DE920@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isCompleted];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1003DE954(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsCompleted:*a1];
}

id sub_1003DE968@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 operationTypeRawValue];
  *a2 = (_WORD)result;
  return result;
}

id sub_1003DE99C(__int16 *a1, id *a2)
{
  return [*a2 setOperationTypeRawValue:*a1];
}

const char *sub_1003DE9B0()
{
  return "templateIdentifier";
}

uint64_t sub_1003DE9BC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_templateIdentifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1003DEA04(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

BOOL sub_1003DEA54(char a1)
{
  sub_100094134(&qword_100917238);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(unsigned char *)(inited + 32) = a1;
  id v3 = (void *)sub_1003DDA18(inited, 0, 1);
  swift_setDeallocating();
  type metadata accessor for REMCDTemplateOperationQueueItem();
  id v4 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v5 = [(id)swift_getObjCClassFromMetadata() entity];
  [v4 setEntity:v5];

  [v4 setAffectedStores:0];
  [v4 setPredicate:v3];

  uint64_t v6 = NSManagedObjectContext.count<A>(for:)();
  return v6 > 0;
}

id sub_1003DEB88(void *a1)
{
  *(void *)&long long v25 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1003A07D8(KeyPath);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(v25 + 16) >= *(void *)(v25 + 24) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v4 = (id)sub_1002F52FC(v25);
  uint64_t v5 = sub_100551B80((uint64_t)v4);
  if (v1)
  {
  }
  else
  {
    id v7 = (void *)v5;

    id v8 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v7];
    [v8 setResultType:1];
    id v23 = 0;
    id v9 = [a1 executeRequest:v8 error:&v23];
    id v4 = v23;
    if (v9)
    {
      id v10 = v9;
      *((void *)&v26 + 1) = sub_1000963CC(0, (unint64_t *)&unk_100916F40);
      *(void *)&long long v25 = v10;
      sub_1000963CC(0, (unint64_t *)&unk_10090B030);
      id v11 = v4;
      throwingCast<A>(_:as:failureMessage:)();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v25);
      id v13 = v24;
      if ([v24 result])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v25 = 0u;
        long long v26 = 0u;
      }
      uint64_t v14 = sub_100094134(&qword_100908270);
      throwingCast<A>(_:as:failureMessage:)();
      sub_1000F5B8C((uint64_t)&v25);
      unint64_t v15 = (unint64_t)v24;
      id v22 = self;
      sub_100094134(&qword_10090AF50);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      *(void *)&long long v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v25 + 1) = v17;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = v14;
      *(void *)(inited + 72) = v15;
      swift_bridgeObjectRetain();
      sub_1002EE418(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_10077A530;
      *(void *)(v19 + 32) = a1;
      *(void *)&long long v25 = v19;
      specialized Array._endMutation()();
      sub_1000963CC(0, (unint64_t *)&unk_100916F50);
      id v20 = a1;
      Class v21 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v22 mergeChangesFromRemoteContextSave:isa intoContexts:v21];

      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        id v4 = (id)_CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
      }
      else
      {
        id v4 = *(id *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      id v12 = v23;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  return v4;
}

uint64_t sub_1003DEFEC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917240);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917240);
  if (qword_100907828 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424C0);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1003DF0B4(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = (uint64_t)v4;
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  Class v59 = a1;
  uint64_t v7 = *v4;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  id v9 = *(void **)(v54 + 64);
  __chkstk_darwin(v8);
  uint64_t v62 = (char *)&v47 - (((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for Date();
  uint64_t v56 = *(void *)(v63 - 8);
  uint64_t v10 = *(void *)(v56 + 64);
  __chkstk_darwin(v63);
  uint64_t v53 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v61 = (char *)&v47 - v12;
  id v13 = (char *)v4 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicLinkURLUUID;
  Class v14 = sub_1000D5500();
  if (qword_100907490 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_100917240);
  id v60 = v14;
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v52 = v7;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    uint64_t v64 = v48;
    uint64_t v65 = v7;
    *(_DWORD *)uint64_t v19 = 136446466;
    swift_getMetatypeMetadata();
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v51 = v5;
    uint64_t v65 = sub_1000C51B8(v20, v21, &v64);
    id v50 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2082;
    uint64_t v49 = (uint64_t)v13;
    id v22 = v60;
    id v23 = [(objc_class *)v60 recordName];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    uint64_t v65 = sub_1000C51B8(v24, v26, &v64);
    id v9 = v50;
    uint64_t v5 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    id v13 = (char *)v49;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s: Start execution {recordName: %{public}s}", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v16 = v60;
  }

  long long v27 = v61;
  Date.init()();
  uint64_t v28 = *(void *)(v5
                  + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController
                  + 32);
  uint64_t v51 = *(void *)(v5
                  + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController
                  + 24);
  uint64_t v48 = v28;
  id v50 = sub_1000C0DE0((void *)(v5+ OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController), v51);
  uint64_t v49 = type metadata accessor for RDPublicTemplate();
  uint64_t v29 = v56;
  uint64_t v30 = v53;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v27, v63);
  uint64_t v32 = v54;
  uint64_t v31 = v55;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v62, v13, v55);
  unint64_t v33 = (*(unsigned __int8 *)(v29 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v34 = (v10 + *(unsigned __int8 *)(v32 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  unint64_t v35 = ((unint64_t)v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v47 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = swift_allocObject();
  uint64_t v37 = v60;
  *(void *)(v36 + 16) = v60;
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v36 + v33, v30, v63);
  (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v36 + v34, v62, v31);
  uint64_t v38 = (void *)(v36 + v35);
  uint64_t v39 = v58;
  *uint64_t v38 = v57;
  v38[1] = v39;
  uint64_t v40 = v48;
  unint64_t v41 = v36 + v47;
  int v42 = v59;
  *(void *)unint64_t v41 = v59;
  *(unsigned char *)(v41 + 8) = 0;
  *(void *)(v36 + ((v35 + 39) & 0xFFFFFFFFFFFFFFF8)) = v52;
  id v43 = *(void (**)(objc_class *, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t, double))(v40 + 24);
  uint64_t v44 = v37;
  swift_retain();
  id v45 = v42;
  v43(v44, v49, sub_1003E15EC, v36, v49, &off_1008B8DD8, v51, v40, a4);

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v61, v63);
}

uint64_t sub_1003DF628(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t (*a5)(void, void), uint64_t a6, uint64_t a7)
{
  int v43 = a2;
  uint64_t v44 = a1;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int v42 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  os_log_type_t v17 = (char *)&v37 - v16;
  if (qword_100907490 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_100917240);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, a4, v12);
  id v19 = a3;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v41 = a6;
    uint64_t v24 = v23;
    uint64_t v40 = swift_slowAlloc();
    uint64_t v45 = v40;
    uint64_t v46 = a7;
    *(_DWORD *)uint64_t v24 = 136446722;
    int v39 = v22;
    swift_getMetatypeMetadata();
    os_log_t v38 = v20;
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v46 = sub_1000C51B8(v25, v26, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2082;
    id v27 = [v19 recordName:v24 + 14];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = a5;
    unint64_t v31 = v30;

    uint64_t v46 = sub_1000C51B8(v28, v31, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a5 = v29;
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 22) = 2048;
    uint64_t v32 = v42;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v34 = v33;
    unint64_t v35 = *(void (**)(char *, uint64_t))(v13 + 8);
    v35(v32, v12);
    uint64_t v46 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v35(v17, v12);
    uint64_t v20 = v38;
    _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v39, "%{public}s: Finished execution {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
  }

  return a5(v44, v43 & 1);
}

uint64_t sub_1003DF9DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void), uint64_t a6, NSObject *a7, int a8, uint64_t a9)
{
  int v129 = a8;
  uint64_t v138 = a7;
  uint64_t v140 = a5;
  uint64_t v141 = a6;
  uint64_t v134 = a4;
  uint64_t v146 = a3;
  uint64_t v139 = a2;
  uint64_t v144 = (void *)a9;
  uint64_t v137 = type metadata accessor for UUID();
  uint64_t v128 = *(void *)(v137 - 8);
  uint64_t v10 = *(void *)(v128 + 64);
  __chkstk_darwin(v137);
  uint64_t v136 = (char *)v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  uint64_t v132 = (uint64_t)v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for Date();
  uint64_t v143 = *(void *)(v145 - 8);
  uint64_t v13 = *(void *)(v143 + 64);
  __chkstk_darwin(v145);
  uint64_t v14 = (char *)v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v133 = (char *)v120 - v16;
  __chkstk_darwin(v17);
  Class v142 = (char *)v120 - v18;
  __chkstk_darwin(v19);
  os_log_type_t v21 = (char *)v120 - v20;
  uint64_t v131 = type metadata accessor for RDPublicTemplate();
  uint64_t v127 = *(void *)(v131 - 8);
  uint64_t v22 = *(void *)(v127 + 64);
  __chkstk_darwin(v131);
  uint64_t v135 = (uint64_t)v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v120 - v24;
  uint64_t v26 = sub_100094134(&qword_100917330);
  __chkstk_darwin(v26);
  uint64_t v28 = (void **)((char *)v120 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000BF710(a1, (uint64_t)v28, &qword_100917330);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = *v28;
    if (qword_100907490 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_10008E2DC(v30, (uint64_t)qword_100917240);
    uint64_t v31 = v143;
    uint64_t v32 = v145;
    (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v14, v146, v145);
    uint64_t v33 = v139;
    swift_errorRetain();
    id v34 = v33;
    swift_errorRetain();
    unint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    int v37 = v36;
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v139 = (void *)swift_slowAlloc();
      os_log_type_t v153 = v139;
      *(_DWORD *)uint64_t v38 = 136446978;
      uint64_t v138 = v35;
      uint64_t aBlock = v144;
      swift_getMetatypeMetadata();
      uint64_t v39 = String.init<A>(describing:)();
      LODWORD(v137) = v37;
      uint64_t v40 = v31;
      uint64_t aBlock = (void *)sub_1000C51B8(v39, v41, (uint64_t *)&v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2082;
      id v42 = [v34 recordName];
      int v43 = v34;
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v46 = v45;

      uint64_t v47 = v44;
      id v34 = v43;
      uint64_t aBlock = (void *)sub_1000C51B8(v47, v46, (uint64_t *)&v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v48 = Error.rem_errorDescription.getter();
      uint64_t aBlock = (void *)sub_1000C51B8(v48, v49, (uint64_t *)&v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v38 + 32) = 2048;
      id v50 = v142;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v52 = v51;
      uint64_t v53 = *(void (**)(char *, uint64_t))(v40 + 8);
      uint64_t v54 = v145;
      v53(v50, v145);
      uint64_t aBlock = (void *)v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v53(v14, v54);
      unint64_t v35 = v138;
      _os_log_impl((void *)&_mh_execute_header, v138, (os_log_type_t)v137, "%{public}s: Failed to download public template {recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v38, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
    }

    uint64_t v80 = v141;
    uint64_t aBlock = v29;
    swift_errorRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      uint64_t v81 = v153;
      sub_1003E1714();
      _BridgedStoredNSError.code.getter();
      if (aBlock == (void *)4)
      {
        id v86 = [self internetNotReachableError];
        goto LABEL_26;
      }
      if (aBlock == (void *)11)
      {
        uint64_t v82 = self;
        type metadata accessor for REMCDTemplate();
        uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        id v85 = [ObjCClassFromMetadata objectIDWithUUID:isa];

        id v86 = [v82 noSuchObjectErrorWithObjectID:v85];
LABEL_26:

LABEL_29:
        swift_errorRetain();
        sub_1003DF628((uint64_t)v86, 1, v34, v146, v140, v80, (uint64_t)v144);
        swift_errorRelease();
        swift_errorRelease();
        return swift_errorRelease();
      }
    }
    id v86 = v29;
    goto LABEL_29;
  }
  sub_1003E176C((uint64_t)v28, (uint64_t)v25);
  uint64_t v55 = (uint64_t)v25;
  if (qword_100907490 != -1) {
    swift_once();
  }
  uint64_t v56 = type metadata accessor for Logger();
  sub_10008E2DC(v56, (uint64_t)qword_100917240);
  uint64_t v57 = v143;
  uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v143 + 16);
  uint64_t v59 = v145;
  uint64_t v126 = v143 + 16;
  uint64_t v125 = v58;
  v58(v21, v146, v145);
  id v60 = v139;
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.default.getter();
  int v63 = v62;
  BOOL v64 = os_log_type_enabled(v61, v62);
  uint64_t v130 = v55;
  uint64_t v139 = v60;
  if (v64)
  {
    uint64_t v65 = swift_slowAlloc();
    int v122 = v63;
    uint64_t v66 = v65;
    uint64_t v123 = swift_slowAlloc();
    os_log_type_t v153 = (void *)v123;
    *(_DWORD *)uint64_t v66 = 136446722;
    os_log_t v121 = v61;
    uint64_t aBlock = v144;
    swift_getMetatypeMetadata();
    uint64_t v67 = String.init<A>(describing:)();
    uint64_t aBlock = (void *)sub_1000C51B8(v67, v68, (uint64_t *)&v153);
    v120[1] = &v148;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v66 + 12) = 2082;
    id v69 = [v60 recordName];
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v71 = v60;
    uint64_t v72 = v70;
    uint64_t v124 = v10;
    unint64_t v73 = v71;
    unint64_t v75 = v74;

    uint64_t aBlock = (void *)sub_1000C51B8(v72, v75, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v59 = v145;
    swift_bridgeObjectRelease();
    *(_WORD *)(v66 + 22) = 2048;
    uint64_t v76 = v142;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v78 = v77;
    unsigned int v79 = *(void (**)(char *, uint64_t))(v143 + 8);
    uint64_t v10 = v124;
    v79(v76, v59);
    uint64_t aBlock = (void *)v78;
    uint64_t v55 = v130;
    uint64_t v57 = v143;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v79(v21, v59);
    uint64_t v61 = v121;
    _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v122, "%{public}s: Downloaded public template {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v66, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unsigned int v79 = *(void (**)(char *, uint64_t))(v57 + 8);
    v79(v21, v59);
  }

  unint64_t v87 = v133;
  uint64_t v88 = v132;
  sub_1000BF710(v55 + *(int *)(v131 + 36), v132, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v88, 1, v59) == 1)
  {
    uint64_t v89 = v55;
    sub_1000EACF4(v88);
  }
  else
  {
    uint64_t v90 = v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v87, v88, v59);
    unint64_t v91 = v87;
    uint64_t v92 = v142;
    static Date.now.getter();
    char v93 = static Date.< infix(_:_:)();
    v79(v92, v59);
    if (v93)
    {
      id v94 = self;
      type metadata accessor for REMCDTemplate();
      id v95 = (void *)swift_getObjCClassFromMetadata();
      Class v96 = UUID._bridgeToObjectiveC()().super.isa;
      id v97 = [v95 objectIDWithUUID:v96];

      id v98 = [v94 noSuchObjectErrorWithObjectID:v97];
      id v99 = v98;
      sub_1003DF628((uint64_t)v98, 1, v139, v146, v140, v141, (uint64_t)v144);

      v79(v91, v59);
      return sub_1003589D0(v130);
    }
    v79(v91, v59);
    uint64_t v10 = v90;
    uint64_t v89 = v130;
  }
  uint64_t v101 = v128;
  (*(void (**)(char *, uint64_t, uint64_t))(v128 + 16))(v136, v134, v137);
  sub_1003E17D0(v89, v135);
  v125(v142, v146, v59);
  unint64_t v102 = (*(unsigned __int8 *)(v101 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
  unint64_t v103 = (v10 + v102 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v104 = (*(unsigned __int8 *)(v127 + 80) + v103 + 8) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80);
  unint64_t v105 = (v22 + v104 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v106 = v57;
  unint64_t v107 = (*(unsigned __int8 *)(v57 + 80) + v105 + 8) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
  unint64_t v108 = (v13 + v107 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v109 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v101 + 32))(v109 + v102, v136, v137);
  *(void *)(v109 + v103) = v138;
  sub_1003E176C(v135, v109 + v104);
  id v110 = v139;
  *(void *)(v109 + v105) = v139;
  (*(void (**)(unint64_t, char *, uint64_t))(v106 + 32))(v109 + v107, v142, v145);
  uint64_t v111 = (void *)(v109 + v108);
  uint64_t v112 = v141;
  *uint64_t v111 = v140;
  v111[1] = v112;
  *(void *)(v109 + ((v108 + 23) & 0xFFFFFFFFFFFFFFF8)) = v144;
  if (v129)
  {
    uint64_t v113 = swift_allocObject();
    *(void *)(v113 + 16) = sub_1003E1B34;
    *(void *)(v113 + 24) = v109;
    uint64_t v151 = sub_10008F6F4;
    uint64_t v152 = v113;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v148 = 1107296256;
    uint64_t v149 = sub_1003B3260;
    uint64_t v150 = &unk_1008C4A08;
    uint64_t v114 = _Block_copy(&aBlock);
    id v115 = v110;
    uint64_t v116 = v138;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    [v116 performBlockAndWait:v114];
    _Block_release(v114);
    sub_1003589D0(v130);
    LOBYTE(v114) = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    uint64_t result = swift_release();
    if ((v114 & 1) == 0) {
      return result;
    }
    __break(1u);
  }
  uint64_t v151 = sub_1003E1B34;
  uint64_t v152 = v109;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v148 = 1107296256;
  uint64_t v149 = sub_100236C78;
  uint64_t v150 = &unk_1008C49B8;
  uint64_t v117 = _Block_copy(&aBlock);
  id v118 = v110;
  uint64_t v119 = v138;
  swift_retain();
  swift_retain();
  swift_release();
  [v119 performBlock:v117];
  _Block_release(v117);
  sub_1003589D0(v130);
  return swift_release();
}

void sub_1003E0A10(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t (*a6)(void, void), uint64_t a7, void *a8)
{
  uint64_t v89 = a7;
  uint64_t v90 = a8;
  uint64_t v88 = a6;
  uint64_t v91 = a5;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v87 = (char *)&v81 - v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v81 - v19;
  os_log_type_t v21 = v15;
  uint64_t v22 = sub_1003CFCE4(a1, (uint64_t)a2);
  sub_10062CF9C(a3);
  id v85 = v22;
  id v92 = 0;
  if ([a2 save:&v92])
  {
    uint64_t v23 = qword_100907490;
    id v24 = v92;
    uint64_t v25 = v12;
    if (v23 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100917240);
    uint64_t v27 = v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v20, v91, v12);
    id v84 = a4;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    int v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v31 = swift_slowAlloc();
      LODWORD(v82) = v30;
      uint64_t v32 = v31;
      os_log_t v83 = (os_log_t)swift_slowAlloc();
      os_log_t v93 = v83;
      *(_DWORD *)uint64_t v32 = 136446722;
      id v92 = v90;
      swift_getMetatypeMetadata();
      uint64_t v33 = String.init<A>(describing:)();
      id v92 = (id)sub_1000C51B8(v33, v34, (uint64_t *)&v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2082;
      unint64_t v35 = v84;
      id v36 = [v84 recordName];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v86 = v25;
      uint64_t v38 = v37;
      unint64_t v40 = v39;

      id v92 = (id)sub_1000C51B8(v38, v40, (uint64_t *)&v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 22) = 2048;
      unint64_t v41 = v87;
      Date.init()();
      Date.timeIntervalSince(_:)();
      int v43 = v42;
      uint64_t v44 = *(void (**)(char *, uint64_t))(v27 + 8);
      unint64_t v45 = v41;
      uint64_t v46 = v86;
      v44(v45, v86);
      id v92 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v44(v20, v46);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v82, "%{public}s: Saved public template in cache {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v32, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v72 = v84;

      (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v12);
    }

    unint64_t v73 = v85;
    id v74 = sub_10062D2FC();
    if (v74)
    {
      uint64_t v75 = (uint64_t)v74;
      id v76 = v74;
      sub_1003DF628(v75, 0, v84, v91, v88, v89, (uint64_t)v90);
    }
    else
    {
      type metadata accessor for REMCDPublicTemplate();
      uint64_t v77 = self;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v79 = String._bridgeToObjectiveC()();
      id v80 = [v77 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v79];

      sub_1003DF628((uint64_t)v80, 1, v84, v91, v88, v89, (uint64_t)v90);
    }
  }
  else
  {
    id v47 = v92;
    uint64_t v48 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100907490 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_10008E2DC(v49, (uint64_t)qword_100917240);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v21, v91, v12);
    id v50 = a4;
    swift_errorRetain();
    id v51 = v50;
    swift_errorRetain();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    int v54 = v53;
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v55 = swift_slowAlloc();
      id v85 = swift_slowAlloc();
      os_log_t v93 = v85;
      *(_DWORD *)uint64_t v55 = 136446978;
      LODWORD(v84) = v54;
      id v92 = v90;
      swift_getMetatypeMetadata();
      os_log_t v83 = v52;
      uint64_t v56 = String.init<A>(describing:)();
      id v92 = (id)sub_1000C51B8(v56, v57, (uint64_t *)&v93);
      uint64_t v82 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 12) = 2082;
      id v58 = [v51 recordName];
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v86 = v12;
      uint64_t v60 = v59;
      unint64_t v62 = v61;

      id v92 = (id)sub_1000C51B8(v60, v62, (uint64_t *)&v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v63 = Error.rem_errorDescription.getter();
      id v92 = (id)sub_1000C51B8(v63, v64, (uint64_t *)&v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v55 + 32) = 2048;
      uint64_t v65 = v87;
      Date.init()();
      uint64_t v66 = v82;
      Date.timeIntervalSince(_:)();
      unint64_t v68 = v67;
      id v69 = *(void (**)(char *, uint64_t))(v13 + 8);
      uint64_t v70 = v65;
      uint64_t v71 = v86;
      v69(v70, v86);
      id v92 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v69(v66, v71);
      uint64_t v52 = v83;
      _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v84, "%{public}s: Failed to save public template in cache {recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v55, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
    }

    swift_errorRetain();
    sub_1003DF628(v48, 1, v51, v91, v88, v89, (uint64_t)v90);
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_1003E12B0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicLinkURLUUID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController);

  return swift_deallocClassInstance();
}

uint64_t sub_1003E1360()
{
  return type metadata accessor for RDTemplateOperationDownloadPublicTemplate();
}

uint64_t type metadata accessor for RDTemplateOperationDownloadPublicTemplate()
{
  uint64_t result = qword_100917298;
  if (!qword_100917298) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003E13B4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1003E1458()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v12 = v3 | v8 | 7;
  unint64_t v10 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release();

  return _swift_deallocObject(v0, ((v10 + 39) & 0xFFFFFFFFFFFFFFF8) + 8, v12);
}

uint64_t sub_1003E15EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1003DF9DC(a1, *(void **)(v1 + 16), v1 + v4, v1 + v7, *(uint64_t (**)(void, void))(v1 + v8), *(void *)(v1 + v8 + 8), *(NSObject **)(v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + ((v8 + 39) & 0xFFFFFFFFFFFFFFF8)));
}

unint64_t sub_1003E1714()
{
  unint64_t result = qword_100908408;
  if (!qword_100908408)
  {
    type metadata accessor for CKError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100908408);
  }
  return result;
}

uint64_t sub_1003E176C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDPublicTemplate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003E17D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDPublicTemplate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003E1834()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v19 + 16) & ~v19;
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = type metadata accessor for RDPublicTemplate();
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v16 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = *(void *)(v7 + 64);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v3, v1);
  uint64_t v9 = *(void **)(v0 + v4);
  uint64_t v10 = (v4 + v18 + 8) & ~v18;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v0 + v10 + *(int *)(v5 + 32), v1);
  uint64_t v11 = v0 + v10 + *(int *)(v5 + 36);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  }
  unint64_t v12 = (v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = (v12 + v17 + 8) & ~v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v13, v6);
  swift_release();

  return _swift_deallocObject(v0, ((((v15 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v19 | v18 | v17 | 7);
}

void sub_1003E1B34()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(type metadata accessor for RDPublicTemplate() - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void **)(v0 + v3);
  uint64_t v11 = *(void **)(v0 + v6);
  unint64_t v12 = *(uint64_t (**)(void, void))(v0 + v9);
  uint64_t v13 = *(void *)(v0 + v9 + 8);
  uint64_t v14 = *(void **)(v0 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8));

  sub_1003E0A10((void *)(v0 + v2), v10, (void *)(v0 + v5), v11, v0 + v8, v12, v13, v14);
}

uint64_t sub_1003E1CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003E1CD0()
{
  return swift_release();
}

uint64_t sub_1003E1CD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003E1CF0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917338);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917338);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

_UNKNOWN **static REMCDRecurrenceRule.recordTypes()()
{
  return &off_1008B6A98;
}

uint64_t static REMCDRecurrenceRule.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  swift_bridgeObjectRetain();
  id v6 = a4;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [self objectWithRecordID:v5 accountID:v7 context:v6];

  if (v8)
  {
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDRecurrenceRule.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      unint64_t v12 = v11;
      [v10 mergeDataFromRecord:a1 accountID:v11];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_100907498 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_100917338);
      id v14 = a2;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          os_log_type_t v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDRecurrenceRule.recordType()()
{
  uint64_t v0 = 0x6E65727275636552;
  uint64_t v1 = (void *)0xEE00656C75526563;
  result._uint64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDRecurrenceRule.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  NSString v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v8 = String._bridgeToObjectiveC()();
  v41.receiver = v3;
  v41.super_class = (Class)REMCDRecurrenceRule;
  [super mergeDataFromRecord:from.super.isa accountID:v8];

  id v9 = [(objc_class *)from.super.isa recordID];
  NSString v10 = [v9 recordName];

  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v11 = [v3 ckIdentifierFromRecordName:v10];

  if (!v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setCkIdentifier:v11];

  uint64_t v12 = 12;
  v38[1] = 0x80000001007D3F20;
  uint64_t v13 = &byte_1008B6A88;
  while (2)
  {
    int v14 = *v13++;
    switch(v14)
    {
      case 1:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        if (BYTE2(v39)) {
          __int16 v18 = 0;
        }
        else {
          __int16 v18 = v39;
        }
        [v3 setFrequency:v18];
        goto LABEL_8;
      case 2:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        if (BYTE2(v39)) {
          __int16 v19 = 0;
        }
        else {
          __int16 v19 = v39;
        }
        [v3 setInterval:v19];
        goto LABEL_8;
      case 3:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        if ((_BYTE)v40) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = v39;
        }
        [v3 setOccurrenceCount:v20];
        goto LABEL_8;
      case 4:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        Class isa = 0;
        unint64_t v21 = v40;
        if (v40 >> 60 != 15)
        {
          uint64_t v22 = v39;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F20(v22, v21);
        }
        [v3 setSetPositions:isa];
        goto LABEL_7;
      case 5:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        Class isa = 0;
        unint64_t v23 = v40;
        if (v40 >> 60 != 15)
        {
          uint64_t v24 = v39;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F20(v24, v23);
        }
        [v3 setDaysOfTheMonth:isa];
        goto LABEL_7;
      case 6:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        Class isa = 0;
        unint64_t v25 = v40;
        if (v40 >> 60 != 15)
        {
          uint64_t v26 = v39;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F20(v26, v25);
        }
        [v3 setDaysOfTheWeek:isa];
        goto LABEL_7;
      case 7:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        Class isa = 0;
        unint64_t v27 = v40;
        if (v40 >> 60 != 15)
        {
          uint64_t v28 = v39;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F20(v28, v27);
        }
        [v3 setDaysOfTheYear:isa];
        goto LABEL_7;
      case 8:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        if (BYTE2(v39)) {
          __int16 v29 = 0;
        }
        else {
          __int16 v29 = v39;
        }
        [v3 setFirstDayOfTheWeek:v29];
        goto LABEL_8;
      case 9:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        Class isa = 0;
        unint64_t v30 = v40;
        if (v40 >> 60 != 15)
        {
          uint64_t v31 = v39;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F20(v31, v30);
        }
        [v3 setMonthsOfTheYear:isa];
        goto LABEL_7;
      case 10:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        Class isa = 0;
        unint64_t v32 = v40;
        if (v40 >> 60 != 15)
        {
          uint64_t v33 = v39;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F20(v33, v32);
        }
        [v3 setWeeksOfTheYear:isa];
        goto LABEL_7;
      case 11:
        if (CKRecord.subscript.getter())
        {
          self;
          unint64_t v34 = (void *)swift_dynamicCastObjCClass();
          if (!v34) {
            swift_unknownObjectRelease();
          }
        }
        else
        {
          unint64_t v34 = 0;
        }
        id v35 = sub_1000C497C(v34);
        if (v35)
        {
          id v36 = v35;
          self;
          uint64_t v37 = (void *)swift_dynamicCastObjCClass();
          if (!v37) {
        }
          }
        else
        {
          uint64_t v37 = 0;
        }

        [v3 setReminder:v37];
        goto LABEL_8;
      default:
        sub_10012451C();
        uint64_t v15 = type metadata accessor for Date();
        CKRecordKeyValueSetting.subscript.getter();
        uint64_t v16 = *(void *)(v15 - 8);
        Class isa = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v7, 1, v15) != 1)
        {
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v15);
        }
        [v3 setEndDate:isa];
LABEL_7:

LABEL_8:
        if (--v12) {
          continue;
        }
        return;
    }
  }
}

CKRecord_optional __swiftcall REMCDRecurrenceRule.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v6 = __chkstk_darwin(v5).n128_u64[0];
  NSString v8 = (char *)v33 - v7;
  v37.receiver = v0;
  v37.super_class = (Class)REMCDRecurrenceRule;
  NSString v10 = (objc_class *)[v37 newlyCreatedRecord:v6];
  if (v10)
  {
    uint64_t v11 = 12;
    v33[1] = 0x80000001007D3F20;
    uint64_t v12 = &byte_1008B6A88;
    while (2)
    {
      int v13 = *v12++;
      switch(v13)
      {
        case 1:
          unsigned __int16 v17 = (unsigned __int16)[v1 frequency];
          *((void *)&v35 + 1) = &type metadata for Int16;
          id v36 = &protocol witness table for Int16;
          LOWORD(v34) = v17;
          sub_10012451C();
          goto LABEL_5;
        case 2:
          unsigned __int16 v18 = (unsigned __int16)[v1 interval];
          *((void *)&v35 + 1) = &type metadata for Int16;
          id v36 = &protocol witness table for Int16;
          LOWORD(v34) = v18;
          sub_10012451C();
          goto LABEL_5;
        case 3:
          id v19 = [v1 occurrenceCount];
          id v36 = &protocol witness table for Int64;
          *((void *)&v35 + 1) = &type metadata for Int64;
          *(void *)&long long v34 = v19;
          sub_10012451C();
          goto LABEL_5;
        case 4:
          id v20 = [v1 setPositions];
          if (v20) {
            goto LABEL_15;
          }
          id v36 = 0;
          long long v34 = 0u;
          long long v35 = 0u;
          goto LABEL_4;
        case 5:
          id v20 = [v1 daysOfTheMonth];
          if (v20) {
            goto LABEL_15;
          }
          id v36 = 0;
          long long v34 = 0u;
          long long v35 = 0u;
          goto LABEL_4;
        case 6:
          id v20 = [v1 daysOfTheWeek];
          if (v20) {
            goto LABEL_15;
          }
          id v36 = 0;
          long long v34 = 0u;
          long long v35 = 0u;
          goto LABEL_4;
        case 7:
          id v20 = [v1 daysOfTheYear];
          if (v20) {
            goto LABEL_15;
          }
          id v36 = 0;
          long long v34 = 0u;
          long long v35 = 0u;
          goto LABEL_4;
        case 8:
          unsigned __int16 v25 = (unsigned __int16)[v1 firstDayOfTheWeek];
          *((void *)&v35 + 1) = &type metadata for Int16;
          id v36 = &protocol witness table for Int16;
          LOWORD(v34) = v25;
          sub_10012451C();
          goto LABEL_5;
        case 9:
          id v20 = [v1 monthsOfTheYear];
          if (v20) {
            goto LABEL_15;
          }
          id v36 = 0;
          long long v34 = 0u;
          long long v35 = 0u;
          goto LABEL_4;
        case 10:
          id v20 = [v1 weeksOfTheYear];
          if (v20)
          {
LABEL_15:
            unint64_t v21 = v20;
            uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v24 = v23;

            *((void *)&v35 + 1) = &type metadata for Data;
            id v36 = &protocol witness table for Data;
            *(void *)&long long v34 = v22;
            *((void *)&v34 + 1) = v24;
          }
          else
          {
            id v36 = 0;
            long long v34 = 0u;
            long long v35 = 0u;
          }
          goto LABEL_4;
        case 11:
          id v26 = [v1 reminder];
          if (v26)
          {
            unint64_t v27 = v26;
            id v28 = [v26 recordID];
          }
          else
          {
            id v28 = 0;
          }
          id v31 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v28];

          CKRecord.subscript.setter();
          if (--v11) {
            continue;
          }
          goto LABEL_38;
        default:
          id v14 = [v1 endDate];
          if (v14)
          {
            uint64_t v15 = v14;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v16 = type metadata accessor for Date();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v4, 0, 1, v16);
          }
          else
          {
            uint64_t v16 = type metadata accessor for Date();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v4, 1, 1, v16);
          }
          sub_1000CAAB4((uint64_t)v4, (uint64_t)v8);
          type metadata accessor for Date();
          uint64_t v29 = *(void *)(v16 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v8, 1, v16) == 1)
          {
            sub_1000EACF4((uint64_t)v8);
            long long v34 = 0u;
            long long v35 = 0u;
            id v36 = 0;
          }
          else
          {
            *((void *)&v35 + 1) = v16;
            id v36 = &protocol witness table for Date;
            unint64_t v30 = sub_1000C1FE8((uint64_t *)&v34);
            (*(void (**)(uint64_t *, char *, uint64_t))(v29 + 32))(v30, v8, v16);
          }
LABEL_4:
          sub_10012451C();
LABEL_5:
          CKRecordKeyValueSetting.subscript.setter();
          if (--v11) {
            continue;
          }
          goto LABEL_38;
      }
    }
  }
LABEL_38:
  unint64_t v32 = v10;
  result.value.super.Class isa = v32;
  result.is_nil = v9;
  return result;
}

Swift::Void __swiftcall REMCDRecurrenceRule.cleanUpAfterLocalObjectMerge()()
{
  if (qword_100907498 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100917338);
  id v7 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917350);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Void __swiftcall REMCDRecurrenceRule.fixBrokenReferences()()
{
  if (qword_100907498 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100917338);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &selRef_intersectsSet_;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  uint64_t v6 = swift_slowAlloc();
  uint64_t v43 = swift_slowAlloc();
  *(_DWORD *)uint64_t v6 = 136446466;
  id v7 = [v2 remObjectID];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 description];

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  sub_1000C51B8(v10, v12, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v6 + 12) = 2082;
  id v13 = [v2 reminder];
  if (!v13) {
    goto LABEL_12;
  }
  id v14 = v13;
  id v15 = [v13 remObjectID];
  if (!v15)
  {

LABEL_12:
    unint64_t v20 = 0xE300000000000000;
    uint64_t v5 = &selRef_intersectsSet_;
    uint64_t v21 = 7104878;
    goto LABEL_13;
  }
  uint64_t v16 = v15;
  id v17 = [v15 description];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  uint64_t v21 = v18;
  uint64_t v5 = &selRef_intersectsSet_;
LABEL_13:
  sub_1000C51B8(v21, v20, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for recurrence rule {recurrenceRuleID: %{public}s, reminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  id v22 = [v2 v5[467]];
  if (v22)
  {
    uint64_t v23 = v22;
    if ([v22 markedForDeletion]
      && ([v2 markedForDeletion] & 1) == 0)
    {
      id v24 = v2;
      id v25 = v23;
      id v26 = v24;
      id v27 = v25;
      id v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446466;
        id v31 = [v26 remObjectID];
        if (v31)
        {
          unint64_t v32 = v31;
          id v33 = [v31 description];

          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;
        }
        else
        {
          unint64_t v36 = 0xE300000000000000;
          uint64_t v34 = 7104878;
        }
        sub_1000C51B8(v34, v36, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2082;
        id v37 = [v27 remObjectID];
        if (v37)
        {
          uint64_t v38 = v37;
          id v39 = [v37 description];

          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;
        }
        else
        {
          unint64_t v42 = 0xE300000000000000;
          uint64_t v40 = 7104878;
        }
        sub_1000C51B8(v40, v42, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Reminder is marked for deletion but recurrence rule is not {recurrenceRuleID: %{public}s, reminderID: %{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v26 markForDeletion];
    }
    [v23 forcePushToCloud];
  }
}

uint64_t _sSo19REMCDRecurrenceRuleC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_100907498 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100917338);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917350);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _sSo19REMCDRecurrenceRuleC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_100907498 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100917338);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917350);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_1003E418C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  uint64_t v25 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    unint64_t v20 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    id v22 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    v26[0] = *v20;
    v26[1] = v21;
    void v26[2] = (uint64_t)v22;
    swift_bridgeObjectRetain();
    id v23 = v22;
    sub_1003E5160(v26, a2, a3, a4);
    if (v5)
    {
      swift_release();

      return swift_bridgeObjectRelease();
    }

    uint64_t result = swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v27) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v25 + 8 * v14);
    if (!v18)
    {
      int64_t v19 = v14 + 1;
      if (v14 + 1 >= v27) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v25 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 2;
      if (v14 + 2 >= v27) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v25 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 3;
      if (v14 + 3 >= v27) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v25 + 8 * v19);
      if (v18)
      {
LABEL_14:
        int64_t v14 = v19;
        goto LABEL_15;
      }
      int64_t v24 = v14 + 4;
      if (v14 + 4 >= v27) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v25 + 8 * v24);
      v14 += 4;
      if (!v18) {
        break;
      }
    }
LABEL_15:
    unint64_t v12 = (v18 - 1) & v18;
  }
  while (1)
  {
    int64_t v14 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v14 >= v27) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v25 + 8 * v14);
    ++v24;
    if (v18) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1003E439C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1001FD4B0();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v18 = v21;
    uint64_t v2 = v22;
    int64_t v3 = v23;
    unint64_t v4 = v24;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  uint64_t v17 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_36;
    }
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v19;
    swift_unknownObjectRelease();
    int64_t v11 = v3;
    uint64_t v9 = v4;
    if (!v19) {
      goto LABEL_36;
    }
LABEL_26:
    id v15 = [v12 remObjectID:v17];

    int64_t v3 = v11;
    unint64_t v4 = v9;
    if (v15)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      int64_t v3 = v11;
      unint64_t v4 = v9;
    }
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    int64_t v11 = v3;
LABEL_25:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  int64_t v11 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v11 >= v8) {
      goto LABEL_36;
    }
    unint64_t v13 = *(void *)(v18 + 8 * v11);
    if (!v13)
    {
      int64_t v14 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13) {
        goto LABEL_23;
      }
      int64_t v14 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13) {
        goto LABEL_23;
      }
      int64_t v14 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13)
      {
LABEL_23:
        int64_t v11 = v14;
      }
      else
      {
        int64_t v11 = v3 + 5;
        if (v3 + 5 >= v8) {
          goto LABEL_36;
        }
        unint64_t v13 = *(void *)(v18 + 8 * v11);
        if (!v13)
        {
          int64_t v16 = v3 + 6;
          while (v8 != v16)
          {
            unint64_t v13 = *(void *)(v18 + 8 * v16++);
            if (v13)
            {
              int64_t v11 = v16 - 1;
              goto LABEL_24;
            }
          }
LABEL_36:
          sub_1000C1AF8();
          return;
        }
      }
    }
LABEL_24:
    uint64_t v9 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

void sub_1003E46C4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003E46D0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1003E46DC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 hashtags];
  if (v3)
  {
    unint64_t v4 = v3;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1001FD4B0();
    uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
}

void sub_1003E4768(void *a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*a1)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1001FD4B0();
    v3.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.Class isa = 0;
  }
  Class isa = v3.super.isa;
  [v2 setHashtags:];
}

uint64_t sub_1003E4804()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917358);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917358);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  NSSet v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1003E48CC(uint64_t a1, char a2)
{
  if (!a2)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v8 = sub_1003336E0(a1);
    sub_100726D48(KeyPath, v8);
LABEL_6:
    swift_release();
    goto LABEL_7;
  }
  if (a2 == 1)
  {
    uint64_t v3 = swift_getKeyPath();
    uint64_t v4 = sub_1003336E0(a1);
    uint64_t v5 = (void *)sub_100726D48(v3, v4);
    swift_release();
    if (v5)
    {
      id v6 = [self notPredicateWithSubpredicate:v5];
    }
LABEL_7:
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    return sub_1002F52FC(_swiftEmptyArrayStorage);
  }
  uint64_t result = 0;
  switch(a1)
  {
    case 1:
      sub_100094134(&qword_100917380);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E60;
      *(void *)(inited + 32) = sub_1002308B0(0x6761746873616824, 0xE800000000000000, 1);
      *(void *)(inited + 40) = sub_1002308B0(0xD000000000000011, 0x80000001007D3F40, 1);
      sub_100094134((uint64_t *)&unk_10090A050);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_100776E40;
      *(void *)(v11 + 56) = &type metadata for String;
      *(void *)(v11 + 32) = 0xD000000000000011;
      *(void *)(v11 + 40) = 0x80000001007D3F40;
      NSString v12 = String._bridgeToObjectiveC()();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v14 = [self predicateWithFormat:v12 argumentArray:isa];

      *(void *)(inited + 48) = v14;
      specialized Array._endMutation()();
      id v15 = (void *)sub_100397E58(inited);
      if (v15)
      {
        int64_t v16 = v15;
        id v17 = [v15 description];

        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;

        uint64_t v21 = swift_getKeyPath();
        sub_10039F58C(v21, 0x6761746873616824, (void *)0xE800000000000000, v18, v20, 0, 0);
        goto LABEL_6;
      }
      if (qword_1009074A0 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_10008E2DC(v24, (uint64_t)qword_100917358);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v25, v26))
      {
        int64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to compute subQueryPredicate for REMCDHashtagLabel.Predicates.withConcealedHashtag", v27, 2u);
        swift_slowDealloc();
      }

      break;
    case 2:
      uint64_t v22 = swift_getKeyPath();
      sub_10039F83C(v22, 0);
      goto LABEL_6;
    case 3:
      uint64_t v23 = swift_getKeyPath();
      sub_10039F870(v23, 0);
      goto LABEL_6;
    default:
      return result;
  }
  return sub_1002F52FC(_swiftEmptyArrayStorage);
}

void sub_1003E4CD4()
{
  sub_1000963CC(0, &qword_10090B098);
  swift_getKeyPath();
  uint64_t v0 = NSExpression.init<A, B>(forKeyPath:)();
  id v1 = [v0 keyPath];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v2 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithKey:v3 ascending:1 selector:"localizedStandardCompare:"];

  qword_100942210 = (uint64_t)v4;
}

void sub_1003E4DB4()
{
  sub_1000963CC(0, &qword_10090B098);
  swift_getKeyPath();
  uint64_t v0 = NSExpression.init<A, B>(forKeyPath:)();
  id v1 = [v0 keyPath];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v2 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithKey:v3 ascending:0];

  qword_100942218 = (uint64_t)v4;
}

uint64_t sub_1003E4E88@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 recencyDate];
  if (v3)
  {
    id v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1003E4F50(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CAA4C(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setRecencyDate:isa];
}

void sub_1003E507C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 name];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    *a2 = v5;
    a2[1] = v7;
  }
  else
  {
    uint64_t v8 = self;
    sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v10 = String._bridgeToObjectiveC()();
    [v8 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v10];

    swift_willThrow();
  }
}

void sub_1003E5160(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  if (!*(void *)(*a2 + 16)) {
    goto LABEL_8;
  }
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_1001806F8(v8, v7);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    if (qword_1009074A0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100917358);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Skipping nil HashtagLabel in reminderIDsByHashtagLabelNames(from:)", v25, 2u);
      swift_slowDealloc();
    }

    return;
  }
  id v11 = *(id *)(*(void *)(v4 + 56) + 8 * v9);
  swift_bridgeObjectRelease();
  id v12 = [v11 name];
  if (v12)
  {
    unint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    uint64_t v17 = *a4;
    if (*(void *)(*a4 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v18 = sub_1001806F8(v8, v7);
      if (v19)
      {
        uint64_t v20 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v32 = *a3;
        *a3 = 0x8000000000000000;
        sub_1002C4098(v20, v14, v16, isUniquelyReferenced_nonNull_native);
        *a3 = v32;
LABEL_19:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
    }
    sub_10030C304(v14, v16);
    goto LABEL_19;
  }
  if (qword_1009074A0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10008E2DC(v26, (uint64_t)qword_100917358);
  id v27 = v11;
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    id v31 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 138543362;
    id v33 = [v27 objectID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v31 = v33;

    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Skipping HashtagLabel with nil name in reminderIDsByHashtagLabelNames(from:) {mid: %{public}@}", v30, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1003E54EC()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_100094134(&qword_100911518);
    sub_100094134(&qword_1009173C8);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&unk_100909EB0);
    sub_100094134(&qword_1009173D0);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003E5740(uint64_t a1, char a2, char a3, Class isa, Class a5)
{
  unint64_t v8 = (void *)sub_1003E48CC(a1, a2);
  sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
  id v9 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v10 = [(id)swift_getObjCClassFromMetadata() entity];
  [v9 setEntity:v10];

  [v9 setAffectedStores:0];
  [v9 setPredicate:v8];
  if (isa) {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  [v9 setPropertiesToFetch:isa];

  if (a5) {
    a5 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v9 setRelationshipKeyPathsForPrefetching:a5];

  if (a3 != 2)
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    if (a3)
    {
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_10077B710;
      if (qword_1009074B0 != -1) {
        swift_once();
      }
      uint64_t v14 = (void *)qword_100942218;
      *(void *)(v13 + 32) = qword_100942218;
      uint64_t v15 = qword_1009074A8;
      id v16 = v14;
      if (v15 != -1) {
        swift_once();
      }
      id v12 = (void *)qword_100942210;
      *(void *)(v13 + 40) = qword_100942210;
    }
    else
    {
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_10077A530;
      if (qword_1009074A8 != -1) {
        swift_once();
      }
      id v12 = (void *)qword_100942210;
      *(void *)(v11 + 32) = qword_100942210;
    }
    specialized Array._endMutation()();
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    id v17 = v12;
    Class v18 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v9 setSortDescriptors:v18];
  }
  uint64_t v19 = NSManagedObjectContext.fetch<A>(_:)();

  return v19;
}

uint64_t sub_1003E5A30(unint64_t a1)
{
  uint64_t v97 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  unint64_t v4 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  unint64_t v87 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t)&v80 - v8;
  unint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v88 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v90 = (char *)&v80 - v15;
  __chkstk_darwin(v14);
  Class v96 = (char *)&v80 - v16;
  unint64_t v105 = a1;
  if (a1 >> 62) {
    goto LABEL_80;
  }
  uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (uint64_t i = v17; i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v99 = v10;
    uint64_t v86 = v9;
    id v80 = v4;
    uint64_t v81 = v2;
    uint64_t v19 = 0;
    unint64_t v102 = a1 & 0xC000000000000001;
    unint64_t v92 = a1 + 32;
    uint64_t v93 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v20 = (void (**)(char *, char *, unint64_t))(v11 + 32);
    id v95 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v11 + 56);
    uint64_t v89 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))(v11 + 48);
    id v85 = (uint64_t *)(v11 + 8);
    uint64_t v21 = _swiftEmptyDictionarySingleton;
    *(void *)&long long v18 = 138543362;
    long long v84 = v18;
    unint64_t v94 = a1;
    unint64_t v4 = (char *)i;
    unint64_t v103 = (void (**)(char *, char *, unint64_t))(v11 + 32);
    while (1)
    {
      if (v102)
      {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((unint64_t)v19 >= *(void *)(v93 + 16)) {
          goto LABEL_74;
        }
        id v22 = *(id *)(v92 + 8 * (void)v19);
      }
      uint64_t v11 = (uint64_t)v22;
      BOOL v23 = __OFADD__(v19++, 1);
      if (v23) {
        break;
      }
      id v24 = [v22 canonicalName];
      if (!v24)
      {
        if (qword_1009074A0 != -1) {
          swift_once();
        }
        sub_10008E2DC(v97, (uint64_t)qword_100917358);
        uint64_t v11 = (uint64_t)(id)v11;
        unint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        uint64_t v9 = v37;
        if (os_log_type_enabled(v36, v37))
        {
          unint64_t v10 = swift_slowAlloc();
          uint64_t v2 = swift_slowAlloc();
          *(_DWORD *)unint64_t v10 = v84;
          id v38 = [(id)v11 objectID];
          *(void *)(v10 + 4) = v38;
          *(void *)uint64_t v2 = v38;

          _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v9, "Unexpected nil canonical name REMCDHashtagLabel from hashtagLabelNames(from:) {mid: %{public}@}", (uint8_t *)v10, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        goto LABEL_5;
      }
      uint64_t v25 = v24;
      unint64_t v4 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v26;

      if (!v21[2]) {
        goto LABEL_22;
      }
      swift_bridgeObjectRetain();
      unint64_t v27 = sub_1001806F8((uint64_t)v4, v9);
      if ((v28 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_22:
        uint64_t v11 = (uint64_t)(id)v11;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v104 = v21;
        unint64_t v10 = sub_1001806F8((uint64_t)v4, v9);
        uint64_t v41 = v21[2];
        BOOL v42 = (v40 & 1) == 0;
        uint64_t v43 = v41 + v42;
        if (__OFADD__(v41, v42)) {
          goto LABEL_73;
        }
        uint64_t v2 = v40;
        if (v21[3] >= v43)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_100318A08();
          }
        }
        else
        {
          sub_10030E648(v43, isUniquelyReferenced_nonNull_native);
          unint64_t v44 = sub_1001806F8((uint64_t)v4, v9);
          if ((v2 & 1) != (v45 & 1)) {
            goto LABEL_86;
          }
          unint64_t v10 = v44;
        }
        uint64_t v20 = v103;
        uint64_t v21 = v104;
        if (v2)
        {
          uint64_t v46 = v104[7];
          v10 *= 8;

          *(void *)(v46 + v10) = v11;
        }
        else
        {
          v104[(v10 >> 6) + 8] |= 1 << v10;
          id v47 = (char **)(v21[6] + 16 * v10);
          *id v47 = v4;
          v47[1] = (char *)v9;
          *(void *)(v21[7] + 8 * v10) = v11;
          uint64_t v48 = v21[2];
          BOOL v23 = __OFADD__(v48, 1);
          uint64_t v49 = v48 + 1;
          if (v23) {
            goto LABEL_76;
          }
          v21[2] = v49;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_52:
        unint64_t v4 = (char *)i;
        goto LABEL_5;
      }
      id v100 = *(id *)(v21[7] + 8 * v27);
      swift_bridgeObjectRelease();
      id v98 = (id)v11;
      id v29 = [v98 firstOccurrenceCreationDate];
      if (v29)
      {
        uint64_t v30 = v29;
        id v31 = v90;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v32 = *v20;
        uint64_t v33 = v86;
        unint64_t v34 = v99;
        (*v20)((char *)v86, v31, v99);
        unint64_t v35 = *v95;
        (*v95)(v33, 0, 1, v34);
        if ((*v89)(v33, 1, v34) != 1)
        {
          v32(v96, (char *)v33, v34);
          goto LABEL_35;
        }
      }
      else
      {
        unint64_t v35 = *v95;
        uint64_t v33 = v86;
        (*v95)(v86, 1, 1, v99);
      }
      static Date.distantFuture.getter();
      sub_1000966BC(v33, (uint64_t *)&unk_100909A40);
LABEL_35:
      id v50 = [v100 firstOccurrenceCreationDate:v80, v81];
      if (v50)
      {
        id v51 = v50;
        uint64_t v52 = v90;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        os_log_type_t v53 = *v20;
        int v54 = v87;
        uint64_t v55 = v52;
        unint64_t v56 = v99;
        (*v20)(v87, v55, v99);
        v35((uint64_t)v54, 0, 1, v56);
        uint64_t v57 = (uint64_t)v54;
        if ((*v89)((uint64_t)v54, 1, v56) != 1)
        {
          unint64_t v58 = a1;
          uint64_t v59 = v88;
          v53(v88, (char *)v57, v99);
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v60 = v87;
        v35((uint64_t)v87, 1, 1, v99);
        uint64_t v57 = (uint64_t)v60;
      }
      unint64_t v58 = a1;
      uint64_t v59 = v88;
      static Date.distantFuture.getter();
      sub_1000966BC(v57, (uint64_t *)&unk_100909A40);
LABEL_40:
      unint64_t v61 = v96;
      char v62 = static Date.< infix(_:_:)();
      uint64_t v11 = *v85;
      uint64_t v63 = v59;
      unint64_t v10 = v99;
      ((void (*)(char *, unint64_t))*v85)(v63, v99);
      ((void (*)(char *, unint64_t))v11)(v61, v10);
      if (v62)
      {
        uint64_t v11 = (uint64_t)v98;

        uint64_t v2 = (uint64_t)v100;
        unint64_t v10 = (unint64_t)(id)v11;
        char v64 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v104 = v21;
        sub_1002C3EE4(v10, (uint64_t)v4, v9, v64);
        uint64_t v21 = v104;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = (uint64_t)v98;
      }
      a1 = v58;
      uint64_t v9 = v105;
      uint64_t v20 = v103;
      if (v105 >> 62)
      {
        swift_bridgeObjectRetain();
        id v74 = (id)v2;
        unint64_t v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
        if (!v4)
        {
LABEL_51:
          swift_bridgeObjectRelease();

          goto LABEL_52;
        }
      }
      else
      {
        unint64_t v4 = *(char **)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        id v65 = (id)v2;
        if (!v4) {
          goto LABEL_51;
        }
      }
      unint64_t v91 = v9 & 0xC000000000000001;
      if ((v9 & 0xC000000000000001) != 0)
      {
        id v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_77;
        }
        id v66 = *(id *)(v9 + 32);
      }
      uint64_t v67 = v66;
      sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
      char v68 = static NSObject.== infix(_:_:)();

      unint64_t v10 = 0;
      if ((v68 & 1) == 0)
      {
        a1 = v94;
        uint64_t v20 = v103;
        if (v4 == (char *)1) {
          goto LABEL_51;
        }
        if (v91)
        {
          id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          {
            __break(1u);
LABEL_86:
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          id v69 = *(id *)(v9 + 40);
        }
        uint64_t v70 = v69;
        char v71 = static NSObject.== infix(_:_:)();

        if ((v71 & 1) == 0)
        {
          uint64_t v83 = v9 & 0xFFFFFFFFFFFFFF8;
          uint64_t v82 = v9 + 32;
          uint64_t v11 = 1;
          while (1)
          {
            unint64_t v10 = v11 + 1;
            if (__OFADD__(v11, 1)) {
              goto LABEL_75;
            }
            a1 = v94;
            uint64_t v20 = v103;
            if ((char *)v10 == v4) {
              goto LABEL_51;
            }
            if (v91)
            {
              id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if ((v10 & 0x8000000000000000) != 0) {
                goto LABEL_78;
              }
              if (v10 >= *(void *)(v83 + 16)) {
                goto LABEL_79;
              }
              id v72 = *(id *)(v82 + 8 * v10);
            }
            unint64_t v73 = v72;
            a1 = static NSObject.== infix(_:_:)();

            ++v11;
            if (a1) {
              goto LABEL_49;
            }
          }
        }
        unint64_t v10 = 1;
      }
LABEL_49:
      swift_bridgeObjectRelease();

      a1 = v94;
      unint64_t v4 = (char *)i;
      uint64_t v20 = v103;
LABEL_5:
      if (v19 == v4)
      {
        swift_bridgeObjectRelease();
        a1 = v105;
        uint64_t v2 = v81;
        unint64_t v4 = v80;
        goto LABEL_82;
      }
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    swift_bridgeObjectRetain_n();
  }
  swift_bridgeObjectRelease();
LABEL_82:
  if (qword_1009074A0 != -1) {
    swift_once();
  }
  uint64_t v75 = v97;
  uint64_t v76 = sub_10008E2DC(v97, (uint64_t)qword_100917358);
  uint64_t v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v76, v75);
  unint64_t v104 = (void *)a1;
  __chkstk_darwin(v77);
  *(&v80 - 2) = v4;
  sub_100094134(&qword_10090BFD0);
  sub_1003E847C();
  uint64_t v78 = Sequence.map<A>(skippingError:_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v97);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v78;
}

uint64_t sub_1003E6678(unint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v152 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v145 = (char *)&v123 - v9;
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v10 - 8);
  uint64_t v127 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v126 = (char *)&v123 - v13;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(NSObject **)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v125 = (char *)&v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  int v129 = (char *)&v123 - v18;
  __chkstk_darwin(v19);
  uint64_t v134 = (char *)&v123 - v20;
  v159[0] = sub_1002EDB18((uint64_t)_swiftEmptyArrayStorage);
  Class v158 = (void *)sub_1002EDB18((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v157 = sub_1002EDB24((uint64_t)_swiftEmptyArrayStorage);
  if (a1 >> 62) {
    goto LABEL_104;
  }
  uint64_t v21 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v22 = a1;
  swift_bridgeObjectRetain();
  if (!v21)
  {
LABEL_105:
    swift_bridgeObjectRelease();
    uint64_t v120 = swift_bridgeObjectRetain();
    sub_1003E418C(v120, (uint64_t *)&v157, v159, (uint64_t *)&v158);
    swift_bridgeObjectRelease();
    uint64_t v121 = v159[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v121;
  }
LABEL_3:
  uint64_t v137 = v21;
  uint64_t v135 = v14;
  unint64_t v24 = 0;
  uint64_t v14 = v22;
  unint64_t v138 = v22 & 0xC000000000000001;
  uint64_t v132 = v22 & 0xFFFFFFFFFFFFFF8;
  uint64_t v131 = v22 + 32;
  uint64_t v130 = v15 + 4;
  uint64_t v133 = v15 + 7;
  uint64_t v128 = v15 + 6;
  uint64_t v124 = v15 + 1;
  os_log_type_t v153 = (NSObject **)(v6 + 32);
  a1 = v6 + 56;
  uint64_t v151 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v144 = (void (**)(char *, uint64_t))(v6 + 8);
  *(void *)&long long v23 = 138543362;
  long long v123 = v23;
  uint64_t v146 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v139 = v22;
  while (1)
  {
    if (v138)
    {
      id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v24 >= *(void *)(v132 + 16)) {
        goto LABEL_102;
      }
      id v27 = *(id *)(v131 + 8 * v24);
    }
    char v28 = v27;
    BOOL v29 = __OFADD__(v24, 1);
    unint64_t v30 = v24 + 1;
    if (v29) {
      goto LABEL_100;
    }
    id v31 = [v27 canonicalName];
    if (!v31)
    {
      unint64_t v47 = v30;
      if (qword_1009074A0 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      sub_10008E2DC(v48, (uint64_t)qword_100917358);
      uint64_t v6 = v28;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v51 = v14;
        uint64_t v52 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = v123;
        id v53 = [(id)v6 objectID];
        *(void *)(v50 + 4) = v53;
        *uint64_t v52 = v53;

        _os_log_impl((void *)&_mh_execute_header, v15, v49, "Skipping HashtagLabel with nil canonicalName in reminderIDsByHashtagLabelNames(from:) {mid: %{public}@}", (uint8_t *)v50, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        uint64_t v14 = v51;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      unint64_t v24 = v47;
      goto LABEL_6;
    }
    uint64_t v32 = v31;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    uint64_t v15 = v157;
    uint64_t v36 = *(void *)(v157 + 16);
    uint64_t v142 = v35;
    uint64_t v143 = v33;
    unint64_t v140 = v30;
    id v141 = v28;
    if (v36)
    {
      swift_bridgeObjectRetain();
      unint64_t v37 = sub_1001806F8(v33, v35);
      if (v38)
      {
        id v39 = *((id *)v15[7].isa + v37);
        swift_bridgeObjectRelease();
        id v40 = [v39 firstOccurrenceCreationDate];
        if (v40)
        {
          uint64_t v41 = v40;
          BOOL v42 = v129;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          Class isa = (void (*)(char *, uint64_t, uint64_t))v130->isa;
          uint64_t v44 = (uint64_t)v126;
          uint64_t v45 = v135;
          ((void (*)(char *, char *, uint64_t))v130->isa)(v126, v42, v135);
          uint64_t v46 = (void (*)(void, void, void, void))v133->isa;
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v133->isa)(v44, 0, 1, v45);
          if (((unint64_t (*)(uint64_t, uint64_t, uint64_t))v128->isa)(v44, 1, v45) != 1)
          {
            isa(v134, v44, v45);
            goto LABEL_38;
          }
        }
        else
        {
          uint64_t v46 = (void (*)(void, void, void, void))v133->isa;
          uint64_t v44 = (uint64_t)v126;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v133->isa)(v126, 1, 1, v135);
        }
        static Date.distantFuture.getter();
        sub_1000966BC(v44, (uint64_t *)&unk_100909A40);
LABEL_38:
        id v71 = [v141 firstOccurrenceCreationDate:v123];
        if (v71)
        {
          id v72 = v71;
          unint64_t v73 = v129;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v74 = (void (*)(char *, uint64_t, uint64_t))v130->isa;
          uint64_t v75 = v127;
          uint64_t v76 = v73;
          uint64_t v77 = v135;
          ((void (*)(char *, char *, uint64_t))v130->isa)(v127, v76, v135);
          v46(v75, 0, 1, v77);
          uint64_t v78 = (uint64_t)v75;
          if (((unint64_t (*)(char *, uint64_t, uint64_t))v128->isa)(v75, 1, v77) != 1)
          {
            NSString v79 = v125;
            v74(v125, v78, v135);
LABEL_43:
            uint64_t v81 = v134;
            char v82 = static Date.> infix(_:_:)();
            uint64_t v83 = (void (*)(char *, uint64_t))v124->isa;
            long long v84 = v79;
            uint64_t v85 = v135;
            ((void (*)(char *, uint64_t))v124->isa)(v84, v135);
            v83(v81, v85);
            id v70 = v141;
            if (v82) {
              id v86 = v141;
            }
            else {
              id v86 = v39;
            }
            id v87 = v86;
            uint64_t v66 = v142;
            swift_bridgeObjectRetain();
            id v88 = v87;
            unint64_t v89 = v157;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v156 = v89;
            unint64_t v157 = 0x8000000000000000;
            sub_1002C3EE4((uint64_t)v88, v143, v66, isUniquelyReferenced_nonNull_native);
            unint64_t v157 = v156;

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v14 = v139;
            goto LABEL_47;
          }
        }
        else
        {
          id v80 = v127;
          v46(v127, 1, 1, v135);
          uint64_t v78 = (uint64_t)v80;
        }
        NSString v79 = v125;
        static Date.distantFuture.getter();
        sub_1000966BC(v78, (uint64_t *)&unk_100909A40);
        goto LABEL_43;
      }
      swift_bridgeObjectRelease();
      uint64_t v15 = v157;
    }
    swift_bridgeObjectRetain();
    int v54 = v28;
    uint64_t v6 = v28;
    uint64_t v14 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v156 = (unint64_t)v15;
    unint64_t v157 = 0x8000000000000000;
    uint64_t v55 = v143;
    unint64_t v57 = sub_1001806F8(v143, v35);
    Class v58 = v15[2].isa;
    BOOL v59 = (v56 & 1) == 0;
    uint64_t v60 = (uint64_t)v58 + v59;
    if (__OFADD__(v58, v59)) {
      goto LABEL_101;
    }
    char v61 = v56;
    if ((uint64_t)v15[3].isa >= v60)
    {
      if ((v14 & 1) == 0) {
        sub_100318A08();
      }
      goto LABEL_30;
    }
    sub_10030E648(v60, v14);
    unint64_t v62 = sub_1001806F8(v55, v142);
    if ((v61 & 1) != (v63 & 1)) {
      break;
    }
    unint64_t v57 = v62;
LABEL_30:
    uint64_t v14 = v139;
    uint64_t v15 = v156;
    if (v61)
    {
      uint64_t v64 = *(void *)(v156 + 56);
      uint64_t v65 = 8 * v57;

      *(void *)(v64 + v65) = v6;
      uint64_t v66 = v142;
    }
    else
    {
      *(void *)(v156 + 8 * (v57 >> 6) + 64) |= 1 << v57;
      uint64_t v67 = (uint64_t *)((char *)v15[6].isa + 16 * v57);
      uint64_t v66 = v142;
      uint64_t *v67 = v55;
      v67[1] = v66;
      *((void *)v15[7].isa + v57) = v6;
      Class v68 = v15[2].isa;
      BOOL v29 = __OFADD__(v68, 1);
      id v69 = (Class)((char *)v68 + 1);
      if (v29) {
        goto LABEL_103;
      }
      v15[2].Class isa = v69;
      swift_bridgeObjectRetain();
    }
    unint64_t v157 = (unint64_t)v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v70 = v54;
LABEL_47:
    unint64_t v91 = v158;
    if (!v158[2]) {
      goto LABEL_51;
    }
    swift_bridgeObjectRetain();
    unint64_t v92 = sub_1001806F8(v143, v66);
    if ((v93 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_51:
      uint64_t v6 = (uint64_t)&_swiftEmptySetSingleton;
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
      {
        if (_CocoaArrayWrapper.endIndex.getter())
        {
          sub_10032EECC((unint64_t)_swiftEmptyArrayStorage);
          uint64_t v6 = v119;
        }
        else
        {
          uint64_t v6 = (uint64_t)&_swiftEmptySetSingleton;
        }
      }
      goto LABEL_52;
    }
    uint64_t v6 = *(void *)(v91[7] + 8 * v92);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_52:
    unint64_t v156 = v6;
    id v94 = [v70 hashtags:v123];
    if (v94)
    {
      id v95 = v94;
      uint64_t v96 = sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
      uint64_t v15 = sub_1001FD4B0();
      uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v147 = v96;
      if ((v6 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v6 = v159[1];
        uint64_t v150 = v159[2];
        uint64_t v97 = v159[3];
        uint64_t v98 = v159[4];
        unint64_t v99 = v159[5];
      }
      else
      {
        uint64_t v98 = 0;
        uint64_t v100 = -1 << *(unsigned char *)(v6 + 32);
        uint64_t v101 = *(void *)(v6 + 56);
        uint64_t v150 = v6 + 56;
        uint64_t v102 = ~v100;
        uint64_t v103 = -v100;
        if (v103 < 64) {
          uint64_t v104 = ~(-1 << v103);
        }
        else {
          uint64_t v104 = -1;
        }
        unint64_t v99 = v104 & v101;
        uint64_t v97 = v102;
      }
      uint64_t v148 = v6 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v136 = v97;
      int64_t v149 = (unint64_t)(v97 + 64) >> 6;
      while (2)
      {
        if (v6 < 0)
        {
          uint64_t v108 = __CocoaSet.Iterator.next()();
          if (!v108) {
            goto LABEL_89;
          }
          uint64_t v15 = v108;
          uint64_t v154 = v108;
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v14 = (uint64_t)v155;
          swift_unknownObjectRelease();
          uint64_t v107 = v98;
          uint64_t v105 = v99;
          if (!v14) {
            goto LABEL_89;
          }
        }
        else
        {
          if (v99)
          {
            uint64_t v105 = (v99 - 1) & v99;
            unint64_t v106 = __clz(__rbit64(v99)) | (v98 << 6);
            uint64_t v107 = v98;
          }
          else
          {
            int64_t v109 = v98 + 1;
            if (__OFADD__(v98, 1))
            {
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              uint64_t v22 = a1;
              swift_bridgeObjectRetain();
              uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
              if (!v21) {
                goto LABEL_105;
              }
              goto LABEL_3;
            }
            if (v109 >= v149) {
              goto LABEL_89;
            }
            unint64_t v110 = *(void *)(v150 + 8 * v109);
            uint64_t v107 = v98 + 1;
            if (!v110)
            {
              uint64_t v107 = v98 + 2;
              if (v98 + 2 >= v149) {
                goto LABEL_89;
              }
              unint64_t v110 = *(void *)(v150 + 8 * v107);
              if (!v110)
              {
                uint64_t v107 = v98 + 3;
                if (v98 + 3 >= v149) {
                  goto LABEL_89;
                }
                unint64_t v110 = *(void *)(v150 + 8 * v107);
                if (!v110)
                {
                  uint64_t v107 = v98 + 4;
                  if (v98 + 4 >= v149) {
                    goto LABEL_89;
                  }
                  unint64_t v110 = *(void *)(v150 + 8 * v107);
                  if (!v110)
                  {
                    uint64_t v111 = v98 + 5;
                    while (v149 != v111)
                    {
                      unint64_t v110 = *(void *)(v150 + 8 * v111++);
                      if (v110)
                      {
                        uint64_t v107 = v111 - 1;
                        goto LABEL_82;
                      }
                    }
LABEL_89:
                    sub_1000C1AF8();
                    uint64_t v6 = v156;
                    uint64_t v14 = v139;
                    id v70 = v141;
                    uint64_t v66 = v142;
                    break;
                  }
                }
              }
            }
LABEL_82:
            uint64_t v105 = (v110 - 1) & v110;
            unint64_t v106 = __clz(__rbit64(v110)) + (v107 << 6);
          }
          uint64_t v14 = (uint64_t)*(id *)(*(void *)(v6 + 48) + 8 * v106);
          if (!v14) {
            goto LABEL_89;
          }
        }
        id v112 = [(id)v14 reminderIdentifier];
        if (v112)
        {
          uint64_t v113 = v112;
          uint64_t v114 = v152;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v15 = *v153;
          ((void (*)(char *, char *, uint64_t))*v153)(v4, v114, v5);
          (*(void (**)(char *, void, uint64_t, uint64_t))a1)(v4, 0, 1, v5);
          if ((*v151)(v4, 1, v5) != 1)
          {
            id v115 = v145;
            ((void (*)(char *, char *, uint64_t))v15)(v145, v4, v5);
            if ([(id)v14 isConcealed])
            {
              (*v144)(v115, v5);
            }
            else
            {
              sub_1000963CC(0, (unint64_t *)&qword_10090B040);
              uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
              Class v117 = UUID._bridgeToObjectiveC()().super.isa;
              id v118 = [ObjCClassFromMetadata objectIDWithUUID:v117];

              uint64_t v15 = &v156;
              sub_10031DE54(&v155, v118);

              (*v144)(v115, v5);
            }
            goto LABEL_62;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))a1)(v4, 1, 1, v5);
        }

        sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909E50);
LABEL_62:
        uint64_t v98 = v107;
        unint64_t v99 = v105;
        continue;
      }
    }
    if ((v6 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = *(NSObject **)(v6 + 16);
    }
    unint64_t v24 = v140;
    if (v15)
    {
      uint64_t v25 = v158;
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      id v155 = v25;
      Class v158 = (void *)0x8000000000000000;
      uint64_t v15 = &v155;
      sub_1002C4098(v6, v143, v66, v26);
      uint64_t v6 = (uint64_t)v158;
      Class v158 = v155;

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_6:
    if (v24 == v137) {
      goto LABEL_105;
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1003E76F8(uint64_t a1, char a2, uint64_t a3)
{
  return sub_1003E7CE0(a1, a2, a3, (uint64_t)&unk_10078A4C8, (uint64_t (*)(uint64_t))sub_1003E6678);
}

uint64_t sub_1003E772C(unint64_t a1)
{
  uint64_t v2 = (void *)sub_1002EDB18((uint64_t)_swiftEmptyArrayStorage);
  if (a1 >> 62)
  {
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_55:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_55;
  }
LABEL_3:
  unint64_t v5 = 0;
  unint64_t v53 = a1 & 0xC000000000000001;
  unint64_t v49 = a1 + 32;
  uint64_t v50 = a1 & 0xFFFFFFFFFFFFFF8;
  *(void *)&long long v4 = 138543362;
  long long v48 = v4;
  uint64_t v51 = v3;
  unint64_t v52 = a1;
  while (1)
  {
    if (v53)
    {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v5 >= *(void *)(v50 + 16)) {
        goto LABEL_52;
      }
      id v7 = *(id *)(v49 + 8 * v5);
    }
    uint64_t v8 = v7;
    BOOL v9 = __OFADD__(v5++, 1);
    if (v9)
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    id v10 = [v7 canonicalName];
    if (!v10)
    {
      if (qword_1009074A0 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_10008E2DC(v18, (uint64_t)qword_100917358);
      id v19 = v8;
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        long long v23 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = v48;
        id v24 = [v19 objectID];
        *(void *)(v22 + 4) = v24;
        *long long v23 = v24;

        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Skipping HashtagLabel with nil canonicalName in hashtagIDsByCanonicalNames(from:) {mid: %{public}@}", (uint8_t *)v22, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      goto LABEL_6;
    }
    uint64_t v11 = v10;
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    unint64_t v14 = (unint64_t)_swiftEmptyArrayStorage;
    if (v2[2])
    {
      swift_bridgeObjectRetain();
      unint64_t v15 = sub_1001806F8(v54, v13);
      if (v16)
      {
        uint64_t v17 = *(void **)(v2[7] + 8 * v15);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v17 = &_swiftEmptySetSingleton;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    {
      sub_10032EECC((unint64_t)_swiftEmptyArrayStorage);
      uint64_t v17 = v46;
    }
LABEL_22:
    unint64_t v56 = (unint64_t)v17;
    id v25 = [v8 hashtags:v48];
    if (v25)
    {
      char v26 = v25;
      sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
      sub_1001FD4B0();
      uint64_t v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1003E439C(v27);
      unint64_t v14 = (unint64_t)v28;
      swift_bridgeObjectRelease();
    }
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v29) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v29 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v29) {
        goto LABEL_34;
      }
    }
    if (v29 < 1) {
      goto LABEL_51;
    }
    if ((v14 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v29; ++i)
      {
        id v31 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_10031DE54(&v55, v31);
      }
    }
    else
    {
      for (uint64_t j = 0; j != v29; ++j)
      {
        uint64_t v33 = *(void **)(v14 + 8 * j + 32);
        sub_10031DE54(&v55, v33);
      }
    }
LABEL_34:
    swift_bridgeObjectRelease();
    a1 = v56;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v55 = v2;
    unint64_t v36 = sub_1001806F8(v54, v13);
    uint64_t v37 = v2[2];
    BOOL v38 = (v35 & 1) == 0;
    uint64_t v39 = v37 + v38;
    if (__OFADD__(v37, v38)) {
      goto LABEL_50;
    }
    char v40 = v35;
    if (v2[3] < v39) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v2 = v55;
      if ((v35 & 1) == 0) {
        goto LABEL_41;
      }
    }
    else
    {
      sub_100318D74();
      uint64_t v2 = v55;
      if ((v40 & 1) == 0)
      {
LABEL_41:
        v2[(v36 >> 6) + 8] |= 1 << v36;
        uint64_t v43 = (uint64_t *)(v2[6] + 16 * v36);
        uint64_t *v43 = v54;
        v43[1] = v13;
        *(void *)(v2[7] + 8 * v36) = a1;
        uint64_t v44 = v2[2];
        BOOL v9 = __OFADD__(v44, 1);
        uint64_t v45 = v44 + 1;
        if (v9) {
          goto LABEL_53;
        }
        v2[2] = v45;
        swift_bridgeObjectRetain();
        goto LABEL_5;
      }
    }
LABEL_4:
    uint64_t v6 = v2[7];
    swift_bridgeObjectRelease();
    *(void *)(v6 + 8 * v36) = a1;
LABEL_5:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = v51;
    a1 = v52;
LABEL_6:
    if (v5 == v3) {
      goto LABEL_55;
    }
  }
  sub_10030ECA8(v39, isUniquelyReferenced_nonNull_native);
  unint64_t v41 = sub_1001806F8(v54, v13);
  if ((v40 & 1) == (v42 & 1))
  {
    unint64_t v36 = v41;
    uint64_t v2 = v55;
    if ((v40 & 1) == 0) {
      goto LABEL_41;
    }
    goto LABEL_4;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1003E7CAC(uint64_t a1, char a2, uint64_t a3)
{
  return sub_1003E7CE0(a1, a2, a3, (uint64_t)&unk_10078A498, (uint64_t (*)(uint64_t))sub_1003E772C);
}

uint64_t sub_1003E7CE0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)&long long v31 = inited;
  specialized Array._endMutation()();
  uint64_t v33 = (objc_class *)_swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 1, 0);
  uint64_t v8 = (objc_class *)_swiftEmptyArrayStorage;
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v9 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  uint64_t v32 = &type metadata for String;
  swift_release();
  *(void *)&long long v31 = v11;
  *((void *)&v31 + 1) = v12;
  unint64_t v14 = _swiftEmptyArrayStorage[2];
  unint64_t v13 = _swiftEmptyArrayStorage[3];
  if (v14 >= v13 >> 1)
  {
    sub_1001DE1C4(v13 > 1, v14 + 1, 1);
    uint64_t v8 = v33;
  }
  *((void *)v8 + 2) = v14 + 1;
  sub_10009A1A0(&v31, (_OWORD *)v8 + 2 * v14 + 2);
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_10077A530;
  *(void *)(v15 + 32) = swift_getKeyPath();
  *(void *)&long long v31 = v15;
  specialized Array._endMutation()();
  uint64_t v16 = v31;
  uint64_t v33 = (objc_class *)_swiftEmptyArrayStorage;
  sub_1001DE058(0, 1, 0);
  uint64_t v17 = v33;
  if ((v16 & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  char v28 = a5;
  uint64_t v18 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v19)
  {
    uint64_t v20 = v18;
    uint64_t v21 = v19;
    swift_release();
    unint64_t v23 = *((void *)v17 + 2);
    unint64_t v22 = *((void *)v17 + 3);
    if (v23 >= v22 >> 1)
    {
      sub_1001DE058(v22 > 1, v23 + 1, 1);
      uint64_t v17 = v33;
    }
    *((void *)v17 + 2) = v23 + 1;
    id v24 = (void *)((char *)v17 + 16 * v23);
    v24[4] = v20;
    v24[5] = v21;
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_1003E5740(a1, a2, 2, v8, v17);
    swift_release();
    swift_release();
    if (!v5)
    {
      uint64_t v20 = v28(v25);
      swift_bridgeObjectRelease();
    }
    return v20;
  }
  else
  {
LABEL_16:
    *(void *)&long long v31 = 0;
    *((void *)&v31 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v27._uint64_t object = (void *)0x80000001007CAF70;
    v27._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v27);
    sub_100094134(&qword_10090DC68);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1003E8030(uint64_t a1, uint64_t a2, Class isa, Class a4)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = sub_1003336E0(a1);
  sub_100726D48(KeyPath, v8);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v9 = (void *)sub_1002F52FC(_swiftEmptyArrayStorage);
  sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
  id v10 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v11 = [(id)swift_getObjCClassFromMetadata() entity];
  [v10 setEntity:v11];

  [v10 setAffectedStores:0];
  [v10 setPredicate:v9];

  if (isa) {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  [v10 setPropertiesToFetch:isa];

  if (a4) {
    a4 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v10 setRelationshipKeyPathsForPrefetching:a4];

  uint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();
  return v12;
}

void *sub_1003E823C()
{
  uint64_t v0 = &off_1008B5BD8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v0 = sub_100308F88(0, 2, 1, &off_1008B5BD8);
  }
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 >= v1 >> 1) {
    uint64_t v0 = sub_100308F88((void *)(v1 > 1), v2 + 1, 1, v0);
  }
  v0[2] = v2 + 1;
  uint64_t v3 = &v0[2 * v2];
  v3[4] = 1701667182;
  v3[5] = 0xE400000000000000;
  return v0;
}

void *sub_1003E82E0(uint64_t a1, char a2)
{
  uint64_t v3 = (void *)sub_1003E48CC(a1, a2);
  sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
  id v4 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v5 = [(id)swift_getObjCClassFromMetadata() entity];
  [v4 setEntity:v5];

  [v4 setAffectedStores:0];
  [v4 setPredicate:v3];
  sub_1001FFC40((uint64_t)&off_1008B6AF8);
  swift_arrayDestroy();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 setPropertiesToFetch:isa];

  unint64_t v7 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
  }
  else
  {
    uint64_t v8 = sub_1003E5A30(v7);
    swift_bridgeObjectRelease();

    uint64_t v3 = *(void **)(v8 + 16);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_1003E8470()
{
  return sub_1003E8E58();
}

unint64_t sub_1003E847C()
{
  unint64_t result = qword_10090BFD8;
  if (!qword_10090BFD8)
  {
    sub_100096058(&qword_10090BFD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090BFD8);
  }
  return result;
}

uint64_t sub_1003E84D8()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, &qword_10090ABC0);
    sub_100094134(&qword_1009173E0);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, &qword_100910180);
    sub_100094134(&qword_1009173E8);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003E8734()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    sub_100094134(&qword_1009173F0);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, &qword_1009100F8);
    sub_100094134(&qword_1009173F8);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003E8990()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    sub_100094134(&qword_10090D2F0);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    sub_100094134(&qword_1009173B0);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003E8BEC(uint64_t a1, uint64_t a2)
{
  return sub_1003EA614(a1, a2, (unint64_t *)&unk_100910210, (uint64_t)off_1008AA4A0, &qword_10090D5E0);
}

uint64_t sub_1003E8C08()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, &qword_100910230);
    sub_100094134(&qword_100909AB8);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_100094134((uint64_t *)&unk_10090A4C0);
    sub_100094134(&qword_100917408);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003E8E58()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
    sub_100094134(&qword_100917370);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_100094134(&qword_100917378);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

void sub_1003E90AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003E90CC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1003E90EC()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, &qword_100910230);
    sub_100094134(&qword_100909AB8);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_100914150);
    sub_100094134(&qword_100917410);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003E9348()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    type metadata accessor for REMCDListSection();
    sub_100094134(&qword_100917438);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_10090AD98);
    sub_100094134((uint64_t *)&unk_100917440);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003E9594()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, (unint64_t *)&qword_100921E40);
    sub_100094134(&qword_100917398);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, &qword_1009173A0);
    sub_100094134(&qword_1009173A8);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003E97F0()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
    sub_100094134(&qword_100917388);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, &qword_10090A3E8);
    sub_100094134(&qword_100917390);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003E9A4C()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    type metadata accessor for REMCDSavedReminder();
    sub_100094134(&qword_100915028);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, &qword_1009100F8);
    sub_100094134(&qword_1009173F8);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003E9C98()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    type metadata accessor for REMCDTemplate();
    sub_100094134((uint64_t *)&unk_10090FE80);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    sub_100094134(&qword_1009173B0);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003E9EE4()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_100094134(&qword_10090F248);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, &qword_10090DC80);
    sub_100094134(&qword_1009173B8);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003EA140()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, (unint64_t *)&unk_100909AC0);
    sub_100094134(&qword_10090C760);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, &qword_10090C4B8);
    sub_100094134(&qword_1009173C0);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003EA39C()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, (unint64_t *)&qword_100911820);
    sub_100094134(&qword_100917350);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_100911840);
    sub_100094134(&qword_1009173D8);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003EA5F8(uint64_t a1, uint64_t a2)
{
  return sub_1003EA614(a1, a2, (unint64_t *)&qword_10090DC20, (uint64_t)off_1008AA448, &qword_10090F248);
}

uint64_t sub_1003EA614(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446722;
    sub_1000963CC(0, a3);
    sub_100094134(a5);
    uint64_t v10 = String.init<A>(describing:)();
    sub_1000C51B8(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    uint64_t v12 = String.init<A>(describing:)();
    sub_1000C51B8(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v14 = Error.localizedDescription.getter();
    sub_1000C51B8(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003EA85C()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    type metadata accessor for REMCDSmartListSection();
    sub_100094134(&qword_100917428);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_100911180);
    sub_100094134(&qword_100917430);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003EAAA8()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    type metadata accessor for REMCDTemplate();
    sub_100094134((uint64_t *)&unk_10090FE80);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, &qword_10090D2A0);
    sub_100094134(&qword_100917418);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003EACF4()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    type metadata accessor for REMCDTemplateSection();
    sub_100094134(&qword_10090B458);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, &qword_100913418);
    sub_100094134(&qword_100917420);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003EAF40(uint64_t a1, uint64_t a2)
{
  return sub_1003EA614(a1, a2, (unint64_t *)&qword_100909AD0, (uint64_t)off_1008AA460, &qword_10090D2F0);
}

uint64_t sub_1003EAF5C()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    sub_1000963CC(0, &qword_100910230);
    sub_100094134(&qword_100909AB8);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&unk_10090FFF0);
    sub_100094134(&qword_100911550);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

uint64_t sub_1003EB1B8()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446722;
    type metadata accessor for REMCDSavedAttachment();
    sub_100094134(&qword_100917400);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    sub_1000963CC(0, (unint64_t *)&unk_100909EB0);
    sub_100094134(&qword_1009173D0);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_1000C51B8(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Error occured when mapping object from %{public}s to %{public}s {error: %s}", (uint8_t *)v2, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 1;
}

void sub_1003EB404(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003EB424(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1003EB444()
{
  return "recencyDate";
}

uint64_t sub_1003EB458()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917450);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917450);
  if (qword_1009077B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942370);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1003EB520()
{
  id result = [self housekeepingingActivityScheduler];
  qword_100917468 = (uint64_t)result;
  return result;
}

uint64_t sub_1003EB55C()
{
  uint64_t v0 = sub_100094134(&qword_100909BE0);
  __chkstk_darwin(v0 - 8);
  uint64_t v64 = (char *)&v57 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v63 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v70 = (char *)&v57 - v6;
  uint64_t v62 = v7;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v57 - v9;
  uint64_t v11 = type metadata accessor for OSSignpostID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1009074B8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  id v71 = (uint64_t (*)(char *, uint64_t))sub_10008E2DC(v15, (uint64_t)qword_100917450);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "os_transaction INIT {name: com.apple.remindd.housekeeping.analyticsActivity}", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = os_transaction_create();
  static os_signpost_type_t.begin.getter();
  if (qword_1009074C0 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v20 = *(void *)&v72[OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_name];
  unint64_t v21 = *(void *)&v72[OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_name
                      + 8];
  swift_bridgeObjectRetain_n();
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v65 = v20;
  if (v24)
  {
    uint64_t v66 = v3;
    uint64_t v67 = v10;
    uint64_t v25 = v20;
    char v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v68 = v19;
    uint64_t v76 = v27;
    *(_DWORD *)char v26 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v73 = sub_1000C51B8(v25, v21, &v76);
    uint64_t v3 = v66;
    uint64_t v10 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%{public}s] start execute()", v26, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v68;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  char v28 = v70;
  Date.init()();
  v74[0] = 0xD000000000000013;
  v74[1] = 0x800000010078A630;
  v74[3] = 0;
  v75[0] = 0;
  v74[2] = 0;
  *(void *)((char *)v75 + 6) = 0;
  uint64_t v29 = v69;
  uint64_t v30 = sub_1003B5F5C((uint64_t)v74, (uint64_t)sub_1003EEF60, 0);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    id v70 = (char *)v30;
    uint64_t v67 = v10;
    uint64_t v68 = v19;
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v32(v28, v10, v2);
    swift_bridgeObjectRetain_n();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v66 = v3;
    unint64_t v60 = v21;
    uint64_t v61 = v2;
    uint64_t v69 = 0;
    if (v35)
    {
      uint64_t v36 = swift_slowAlloc();
      os_log_t v57 = v33;
      unint64_t v37 = v21;
      uint64_t v38 = v36;
      uint64_t v76 = swift_slowAlloc();
      Class v58 = v32;
      *(_DWORD *)uint64_t v38 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v73 = sub_1000C51B8(v65, v37, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v38 + 12) = 2048;
      Date.rem_elapsedInMilliseconds.getter();
      uint64_t v73 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      char v40 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
      uint64_t v59 = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      id v71 = v40;
      v40(v28, v61);
      os_log_t v41 = v57;
      _os_log_impl((void *)&_mh_execute_header, v57, v34, "[%{public}s] posted CA data, elapsedSeconds: %f ms", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      uint64_t v32 = v58;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      char v42 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
      uint64_t v59 = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      id v71 = v42;
      v42(v28, v2);
    }
    uint64_t v43 = v62;
    uint64_t v44 = type metadata accessor for TaskPriority();
    uint64_t v45 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v64, 1, 1, v44);
    uint64_t v46 = v63;
    unint64_t v47 = v67;
    uint64_t v48 = v61;
    v32(v63, v67, v61);
    uint64_t v49 = v66;
    unint64_t v50 = (*(unsigned __int8 *)(v66 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    unint64_t v51 = (v43 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v52 = (char *)swift_allocObject();
    *((void *)v52 + 2) = 0;
    *((void *)v52 + 3) = 0;
    unint64_t v53 = v72;
    uint64_t v54 = v65;
    *((void *)v52 + 4) = v72;
    *((void *)v52 + 5) = v54;
    id v55 = v70;
    *((void *)v52 + 6) = v60;
    *((void *)v52 + 7) = v55;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(&v52[v50], v46, v48);
    *(void *)&v52[v51] = v68;
    id v56 = v53;
    swift_unknownObjectRetain();
    sub_1002BBD8C(v45, (uint64_t)&unk_100917608, (uint64_t)v52);
    swift_release();
    swift_unknownObjectRelease();
    return v71(v47, v48);
  }
}

uint64_t sub_1003EBD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[10] = a4;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  v8[15] = v9;
  v8[16] = *(void *)(v9 - 8);
  v8[17] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  v8[18] = v10;
  v8[19] = *(void *)(v10 - 8);
  v8[20] = swift_task_alloc();
  return _swift_task_switch(sub_1003EBEC0, 0, 0);
}

uint64_t sub_1003EBEC0()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v5[2] = v4;
  v5[3] = v3;
  v5[4] = v1;
  v5[5] = v2;
  uint64_t v6 = type metadata accessor for RDSimpleExecutable();
  uint64_t v7 = (void *)swift_allocObject();
  v0[21] = v7;
  v7[2] = 0xD00000000000001CLL;
  v7[3] = 0x80000001007D40E0;
  v7[4] = &unk_100917618;
  v7[5] = v5;
  v0[5] = v6;
  v0[6] = &off_1008C8608;
  v0[2] = v7;
  v0[7] = &off_1008C85F8;
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&dword_100917620 + dword_100917620);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[22] = v8;
  void *v8 = v0;
  v8[1] = sub_1003EC050;
  return v10((uint64_t)(v0 + 2));
}

uint64_t sub_1003EC050()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1003EC524;
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v2 + 16);
    uint64_t v3 = sub_1003EC16C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003EC16C()
{
  char v26 = v0;
  if (qword_1009074B8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[14];
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100917450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[19];
  uint64_t v10 = v0[20];
  uint64_t v11 = v0[18];
  unint64_t v12 = v0[12];
  if (v8)
  {
    uint64_t v24 = v0[18];
    uint64_t v13 = v0[11];
    uint64_t v14 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    swift_bridgeObjectRetain();
    v0[8] = sub_1000C51B8(v13, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2048;
    Date.rem_elapsedInMilliseconds.getter();
    v0[9] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v24);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] end execute(), elapsedSeconds: %f ms", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  }
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "os_transaction RELEASE {name: com.apple.remindd.housekeeping.analyticsActivity}", v18, 2u);
    swift_slowDealloc();

    swift_release();
  }
  else
  {
    swift_release();
  }
  static os_signpost_type_t.end.getter();
  if (qword_1009074C0 != -1) {
    swift_once();
  }
  uint64_t v20 = v0[16];
  uint64_t v19 = v0[17];
  uint64_t v21 = v0[15];
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_1003EC524()
{
  swift_release();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)(v0 + 2));
  static os_signpost_type_t.end.getter();
  if (qword_1009074C0 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[15];
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1003EC648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = sub_100094134(&qword_100917630);
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_1003EC710, 0, 0);
}

uint64_t sub_1003EC710()
{
  uint64_t v14 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[14] = Strong;
  if (Strong)
  {
    if (qword_1009074B8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    v0[15] = sub_10008E2DC(v2, (uint64_t)qword_100917450);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    unint64_t v6 = v0[9];
    if (v5)
    {
      uint64_t v7 = v0[8];
      BOOL v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)BOOL v8 = 136446210;
      swift_bridgeObjectRetain();
      v0[6] = sub_1000C51B8(v7, v6, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] start DES donation", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v11 = (void *)swift_task_alloc();
    v0[16] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1003EC9B8;
    uint64_t v12 = v0[10];
    return sub_1003F24AC(v12);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1003EC9B8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003ECAB4, 0, 0);
}

uint64_t sub_1003ECAB4()
{
  uint64_t v13 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[8];
    unint64_t v3 = v0[9];
    BOOL v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)BOOL v5 = 136446210;
    swift_bridgeObjectRetain();
    v0[5] = sub_1000C51B8(v4, v3, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%{public}s] start posting grocery correction to CA", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (qword_1009071E0 != -1) {
    swift_once();
  }
  uint64_t v6 = v0[13];
  uint64_t v7 = (void *)v0[14];
  uint64_t v8 = v0[11];
  uint64_t v9 = v0[12];
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v6, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), v8);
  sub_100262310();

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1003ECCE4(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_1003ECDA4, 0, 0);
}

void sub_1003ECDA4()
{
  uint64_t v41 = v0;
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[5];
  sub_1000C0DE0(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  *(void *)(v0 + 120) = sub_1003F0474(v4, v5, (void (*)(uint64_t, uint64_t))sub_100426878);
  swift_bridgeObjectRelease();
  if (qword_100907710 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v9 = *(void **)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v11 = sub_10008E2DC(v8, (uint64_t)qword_10091BA40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v11, v8);
  sub_1003F08EC(v10, v0 + 16);
  id v12 = v9;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v36 = v14;
    os_log_t log = v13;
    uint64_t v38 = (void *)(v0 + 16);
    uint64_t v15 = *(void **)(v0 + 88);
    uint64_t v16 = swift_slowAlloc();
    v40[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446466;
    id v17 = [v15 waiterID];
    if (!v17)
    {

      __break(1u);
      return;
    }
    uint64_t v18 = v17;
    uint64_t v33 = *(void *)(v0 + 104);
    uint64_t v19 = *(void **)(v0 + 88);
    uint64_t v34 = *(void *)(v0 + 96);
    uint64_t v35 = *(void *)(v0 + 112);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    *(void *)(v0 + 64) = sub_1000C51B8(v20, v22, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v16 + 12) = 2082;
    uint64_t v23 = *(void *)(v0 + 40);
    uint64_t v24 = *(void *)(v0 + 56);
    sub_1000C0DE0(v38, v23);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    *(void *)(v0 + 72) = sub_1000C51B8(v25, v26, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v38);
    _os_log_impl((void *)&_mh_execute_header, log, v36, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
  }
  else
  {
    uint64_t v28 = *(void *)(v0 + 104);
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v30 = *(void **)(v0 + 88);
    uint64_t v29 = *(void *)(v0 + 96);

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 16);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
  }
  long long v31 = sub_1000C0DE0(*(void **)(v0 + 80), v1[3]);
  uint64_t v39 = (void (*)(void))(*(void *)(*v31 + 32) + **(int **)(*v31 + 32));
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_1003ED200;
  v39();
}

uint64_t sub_1003ED200()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1003ED388;
  }
  else {
    uint64_t v2 = sub_1003ED314;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003ED314()
{
  uint64_t v1 = *(void **)(v0 + 120);
  sub_1003F619C(*(void **)(v0 + 88), *(void *)(v0 + 80));

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1003ED388()
{
  uint64_t v1 = *(void **)(v0 + 120);
  sub_1003F619C(*(void **)(v0 + 88), *(void *)(v0 + 80));

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1003ED3FC(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_1003ED4BC, 0, 0);
}

void sub_1003ED4BC()
{
  uint64_t v41 = v0;
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[5];
  sub_1000C0DE0(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  *(void *)(v0 + 120) = sub_1003F0474(v4, v5, (void (*)(uint64_t, uint64_t))sub_100426878);
  swift_bridgeObjectRelease();
  if (qword_100907710 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v9 = *(void **)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v11 = sub_10008E2DC(v8, (uint64_t)qword_10091BA40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v11, v8);
  sub_1003F08EC(v10, v0 + 16);
  id v12 = v9;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v36 = v14;
    os_log_t log = v13;
    uint64_t v38 = (void *)(v0 + 16);
    uint64_t v15 = *(void **)(v0 + 88);
    uint64_t v16 = swift_slowAlloc();
    v40[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446466;
    id v17 = [v15 waiterID];
    if (!v17)
    {

      __break(1u);
      return;
    }
    uint64_t v18 = v17;
    uint64_t v33 = *(void *)(v0 + 104);
    uint64_t v19 = *(void **)(v0 + 88);
    uint64_t v34 = *(void *)(v0 + 96);
    uint64_t v35 = *(void *)(v0 + 112);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    *(void *)(v0 + 64) = sub_1000C51B8(v20, v22, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v16 + 12) = 2082;
    uint64_t v23 = *(void *)(v0 + 40);
    uint64_t v24 = *(void *)(v0 + 56);
    sub_1000C0DE0(v38, v23);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    *(void *)(v0 + 72) = sub_1000C51B8(v25, v26, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v38);
    _os_log_impl((void *)&_mh_execute_header, log, v36, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
  }
  else
  {
    uint64_t v28 = *(void *)(v0 + 104);
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v30 = *(void **)(v0 + 88);
    uint64_t v29 = *(void *)(v0 + 96);

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 16);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
  }
  long long v31 = sub_1000C0DE0(*(void **)(v0 + 80), v1[3]);
  uint64_t v39 = (void (*)(void))(*(void *)(*v31 + 32) + **(int **)(*v31 + 32));
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_1003ED918;
  v39();
}

uint64_t sub_1003ED918()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1003F64DC;
  }
  else {
    uint64_t v2 = sub_1003F64E0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003EDA2C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100094134((uint64_t *)&unk_10090ABB0);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    type metadata accessor for UUID();
    sub_100094134((uint64_t *)&unk_100917670);
    sub_10013E30C();
    **(void **)(*(void *)(v3 + 64) + 40) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

void sub_1003EDB18(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100094134((uint64_t *)&unk_100913970);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v35 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  uint64_t v6 = &v41;
  int64_t v34 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v8 = (uint64_t *)&unk_100917668;
  uint64_t v9 = (unint64_t *)&qword_10090C120;
  uint64_t v10 = NSObject_ptr;
  while (1)
  {
    if (v5)
    {
      uint64_t v36 = (v5 - 1) & v5;
      int64_t v37 = v7;
      unint64_t v19 = __clz(__rbit64(v5)) | (v7 << 6);
    }
    else
    {
      int64_t v20 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_36;
      }
      if (v20 >= v34)
      {
LABEL_33:
        sub_1000C1AF8();
        return;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v20);
      int64_t v22 = v7 + 1;
      if (!v21)
      {
        int64_t v22 = v7 + 2;
        if (v7 + 2 >= v34) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v7 + 3;
          if (v7 + 3 >= v34) {
            goto LABEL_33;
          }
          unint64_t v21 = *(void *)(v35 + 8 * v22);
          if (!v21)
          {
            int64_t v22 = v7 + 4;
            if (v7 + 4 >= v34) {
              goto LABEL_33;
            }
            unint64_t v21 = *(void *)(v35 + 8 * v22);
            if (!v21)
            {
              uint64_t v23 = v7 + 5;
              if (v7 + 5 >= v34) {
                goto LABEL_33;
              }
              unint64_t v21 = *(void *)(v35 + 8 * v23);
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_37;
                  }
                  if (v22 >= v34) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = *(void *)(v35 + 8 * v22);
                  ++v23;
                  if (v21) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v22 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v36 = (v21 - 1) & v21;
      int64_t v37 = v22;
      unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    uint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    sub_10009A1B0(*(void *)(v1 + 56) + 32 * v19, (uint64_t)v6);
    v40[0] = v26;
    v40[1] = v25;
    sub_10009A1B0((uint64_t)v6, (uint64_t)v39);
    swift_bridgeObjectRetain_n();
    sub_1000966BC((uint64_t)v40, v8);
    sub_1000963CC(0, v9);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();

      sub_1000C1AF8();
      swift_release();
      return;
    }
    unint64_t v27 = sub_1001806F8(v26, v25);
    unint64_t v28 = v27;
    if (v29)
    {
      uint64_t v11 = v10;
      id v12 = v9;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v8;
      uint64_t v16 = (uint64_t *)(v2[6] + 16 * v27);
      swift_bridgeObjectRelease();
      *uint64_t v16 = v26;
      v16[1] = v25;
      uint64_t v8 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      uint64_t v9 = v12;
      uint64_t v10 = v11;
      uint64_t v17 = v2[7];
      uint64_t v18 = 8 * v28;

      *(void *)(v17 + v18) = v38;
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v27;
    uint64_t v30 = (uint64_t *)(v2[6] + 16 * v27);
    *uint64_t v30 = v26;
    v30[1] = v25;
    *(void *)(v2[7] + 8 * v27) = v38;
    uint64_t v31 = v2[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_35;
    }
    v2[2] = v33;
LABEL_8:
    unint64_t v5 = v36;
    int64_t v7 = v37;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t sub_1003EDEB0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  **(void **)(*(void *)(v2 + 64) + 40) = a2;
  id v3 = a2;

  return _swift_continuation_resume(v2);
}

uint64_t sub_1003EDF04(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100094134((uint64_t *)&unk_10090ABB0);
    uint64_t v10 = swift_allocError();
    *uint64_t v11 = a3;
    id v12 = a3;
    return _swift_continuation_throwingResumeWithError(v9, v10);
  }
  else
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(void, char *, uint64_t))(v6 + 32))(*(void *)(*(void *)(v9 + 64) + 40), v8, v5);
    return swift_continuation_throwingResume();
  }
}

id sub_1003EE0D0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDAnalyticsActivity.RDAnalyticsActivityExecutable();
  return [super dealloc];
}

uint64_t sub_1003EE15C()
{
  return sub_1003EB55C();
}

uint64_t sub_1003EE180(uint64_t a1, uint64_t a2)
{
  return sub_1003EEC78(a1, a2, &OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_name);
}

unint64_t sub_1003EE18C()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_identifier);
  objc_super v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_identifier + 8);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._uint64_t object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x746973796261622ELL;
  v4._uint64_t object = (void *)0xEB00000000726574;
  String.append(_:)(v4);
  return 0xD000000000000012;
}

double sub_1003EE2B4()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_1000C0DE0(v0, v1);
  Swift::String v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  [v3 doubleValue];
  double v5 = v4;

  return v5;
}

uint64_t sub_1003EE32C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100096838(a1, (uint64_t)v20);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDAnalyticsActivity();
  if (swift_dynamicCast())
  {

    swift_beginAccess();
    sub_100096838(v2 + 16, (uint64_t)v16);
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    sub_1000C0DE0(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
  }
  else
  {
    if (qword_1009074B8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_100917450);
    sub_100096838(a1, (uint64_t)v16);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      id v19 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      sub_100096838((uint64_t)v16, (uint64_t)v15);
      uint64_t v12 = String.init<A>(describing:)();
      v15[0] = sub_1000C51B8(v12, v13, (uint64_t *)&v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDAnalyticsExecutionDateStorage.lastExecutedDate(for:) must work with RDAnalyticsActivity only {executable: %{public}s}", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
    uint64_t v14 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t sub_1003EE5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100096838(a1, (uint64_t)v22);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDAnalyticsActivity();
  if (swift_dynamicCast())
  {

    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    swift_beginAccess();
    uint64_t v10 = *(void *)(v2 + 40);
    uint64_t v11 = *(void *)(v2 + 48);
    sub_100096204(v2 + 16, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, v10, v11);
    swift_endAccess();
  }
  else
  {
    if (qword_1009074B8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_100917450);
    sub_100096838(a1, (uint64_t)v21);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      sub_100096838((uint64_t)v21, (uint64_t)v19);
      uint64_t v16 = String.init<A>(describing:)();
      v19[0] = (id)sub_1000C51B8(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDAnalyticsExecutionDateStorage.updateLastExecutedDate(for:) must work with RDAnalyticsActivity only {executable: %{public}s}", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
    }
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
}

uint64_t sub_1003EE900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003EE32C(a1, a2);
}

uint64_t sub_1003EE924(uint64_t a1, uint64_t a2)
{
  return sub_1003EE5D8(a1, a2);
}

id sub_1003EEA38@<X0>(void *a1@<X8>)
{
  id v4 = *(id *)(v1 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_executable);
  a1[3] = type metadata accessor for RDAnalyticsActivity.RDAnalyticsActivityExecutable();
  a1[4] = &off_1008C4AB0;
  a1[5] = &off_1008C4AC0;
  *a1 = v4;

  return v4;
}

uint64_t sub_1003EEAA8()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations + 24);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations + 32);
  sub_1000C0DE0(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 8))(v2);
}

uint64_t sub_1003EEAFC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BF710(v1 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_rateReducerConfiguration, a1, (uint64_t *)&unk_10090EEB0);
}

uint64_t sub_1003EEB2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_babysitter;
  swift_beginAccess();
  return sub_1000BF710(v3, a1, (uint64_t *)&unk_10090E4D0);
}

uint64_t sub_1003EEB88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (char *)*v2 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations;
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[4];
  sub_1000C0DE0(v6, v7);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(double (**)(uint64_t, uint64_t))(v9 + 8);
  id v11 = v5;
  double v12 = v10(v7, v9);
  uint64_t v17 = a1;
  uint64_t v18 = &off_1008C4B00;
  *(void *)&long long v16 = v11;
  uint64_t v13 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  uint64_t v14 = swift_allocObject();
  uint64_t result = sub_1000967D4(&v16, v14 + 16);
  *(double *)(v14 + 56) = v12;
  a2[3] = v13;
  a2[4] = (uint64_t)&off_1008C8B10;
  *a2 = v14;
  return result;
}

uint64_t sub_1003EEC6C(uint64_t a1, uint64_t a2)
{
  return sub_1003EEC78(a1, a2, &OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_identifier);
}

uint64_t sub_1003EEC78(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(*v3 + *a3);
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t sub_1003EECB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100096838(*v1 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_executionDateStorage, a1);
}

uint64_t sub_1003EECE0@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 analyticsActivityLastExecutionDate];
  if (v3)
  {
    uint64_t v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1003EEDA8(uint64_t a1)
{
  id v3 = *v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  Class v7 = 0;
  if (v6 != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    Class v7 = isa;
  }
  Class v9 = v7;
  [v3 setAnalyticsActivityLastExecutionDate:];
}

id sub_1003EEEAC()
{
  return [*v0 postAnalyticsDefaultThrottleInterval];
}

id sub_1003EEEBC()
{
  id v1 = [*v0 postAnalyticsRateReduceFactor];

  return v1;
}

uint64_t type metadata accessor for RDAnalyticsActivity()
{
  return self;
}

uint64_t type metadata accessor for RDAnalyticsActivity.RDAnalyticsActivityExecutable()
{
  return self;
}

uint64_t type metadata accessor for RDAnalyticsActivity.RDAnalyticsExecutionDateStorage()
{
  return self;
}

void sub_1003EEF60(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100094134(&qword_100917680);
  __chkstk_darwin(v5 - 8);
  Class v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMAccountSnapshotSummary();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  double v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v15 = sub_1003E82E0(4, 2);
  if (v2)
  {
  }
  else
  {
    uint64_t v45 = v12;
    uint64_t v46 = (uint64_t)v15;
    uint64_t v38 = v14;
    uint64_t v39 = v9;
    uint64_t v48 = v8;
    sub_1000963CC(0, &qword_10090ABC0);
    id v16 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v17 = [(id)swift_getObjCClassFromMetadata() entity];
    [v16 setEntity:v17];

    [v16 setAffectedStores:0];
    [v16 setPredicate:0];
    uint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();

    if (v18 < 0 || (v18 & 0x4000000000000000) != 0) {
      goto LABEL_27;
    }
    uint64_t v19 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v49 = v19;
      sub_1003F03F8(&v49);
      swift_bridgeObjectRelease();
      uint64_t v20 = v49;
      if (v49 < 0 || (v49 & 0x4000000000000000) != 0)
      {
        swift_retain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v21 = *(void *)(v49 + 16);
        swift_retain();
      }
      uint64_t v36 = a2;
      if (!v21) {
        break;
      }
      unint64_t v44 = v20 & 0xC000000000000001;
      uint64_t v41 = (void (**)(char *))(v39 + 32);
      uint64_t v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      int64_t v22 = _swiftEmptyArrayStorage;
      uint64_t v23 = 4;
      uint64_t v37 = a1;
      uint64_t v43 = v20;
      uint64_t v40 = v21;
      while (1)
      {
        a2 = (void *)(v23 - 4);
        id v25 = v44 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v20 + 8 * v23);
        uint64_t v26 = v25;
        uint64_t v27 = v23 - 3;
        if (__OFADD__(a2, 1)) {
          break;
        }
        sub_1003EF55C(v26, a1, v46, (uint64_t)v7);

        uint64_t v29 = v48;
        if ((*v42)(v7, 1, v48) == 1)
        {
          sub_1000966BC((uint64_t)v7, &qword_100917680);
        }
        else
        {
          uint64_t v30 = *v41;
          uint64_t v31 = v38;
          (*v41)(v38);
          ((void (*)(char *, char *, uint64_t))v30)(v45, v31, v29);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v22 = (void *)sub_10030BC74(0, v22[2] + 1, 1, (unint64_t)v22);
          }
          unint64_t v33 = v22[2];
          unint64_t v32 = v22[3];
          if (v33 >= v32 >> 1) {
            int64_t v22 = (void *)sub_10030BC74(v32 > 1, v33 + 1, 1, (unint64_t)v22);
          }
          id v22[2] = v33 + 1;
          ((void (*)(char *, char *, uint64_t))v30)((char *)v22+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v33, v45, v48);
          a1 = v37;
        }
        ++v23;
        BOOL v24 = v27 == v40;
        uint64_t v20 = v43;
        if (v24) {
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_27:
      unint64_t v34 = swift_bridgeObjectRetain();
      uint64_t v19 = (uint64_t)sub_100209D74(v34);
      swift_bridgeObjectRelease();
    }
    int64_t v22 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_release_n();
    *uint64_t v36 = v22;
  }
}

uint64_t sub_1003EF430()
{
  id v1 = v0;
  [v0 type];
  uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = 95;
  v2._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  id v3 = [v0 ckIdentifier];
  if (!v3)
  {
    id v4 = [v1 objectID];
    id v3 = [v4 description];
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Class v7 = v6;

  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v5;
  v8._uint64_t object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

void sub_1003EF55C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v105 = a3;
  uint64_t v116 = a2;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = _s10PredicatesOMa_3();
  __chkstk_darwin(v106);
  uint64_t v107 = (void *)((char *)v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v115 = (void *)_s10PredicatesOMa(0);
  uint64_t v11 = __chkstk_darwin(v115);
  uint64_t v108 = (void *)((char *)v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v11);
  int64_t v109 = (void *)((char *)v100 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  id v112 = (void *)((char *)v100 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v113 = (void *)((char *)v100 - v18);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v114 = (void *)((char *)v100 - v20);
  __chkstk_darwin(v19);
  int64_t v22 = (char *)v100 - v21;
  uint64_t v23 = _s10PredicatesOMa_1();
  uint64_t v24 = __chkstk_darwin(v23);
  unint64_t v110 = (void *)((char *)v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v111 = (void *)((char *)v100 - v27);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (void *)((char *)v100 - v29);
  __chkstk_darwin(v28);
  unint64_t v32 = (void *)((char *)v100 - v31);
  id v33 = [a1 remObjectID];
  if (v33)
  {
    unint64_t v34 = v33;
    uint64_t v103 = a4;
    uint64_t v104 = v9;
    *unint64_t v32 = v33;
    swift_storeEnumTagMultiPayload();
    uint64_t v35 = v34;
    id v36 = v34;
    uint64_t v37 = (void *)sub_100535B3C();
    sub_1003F60DC((uint64_t)v32, (uint64_t (*)(void))_s10PredicatesOMa_1);
    uint64_t v38 = sub_1003F01EC((uint64_t)v37, v116, a1, (unint64_t *)&qword_100909AD0);
    if (v4)
    {
    }
    else
    {
      v100[1] = v38;
      uint64_t v101 = v35;

      *uint64_t v30 = v36;
      swift_storeEnumTagMultiPayload();
      id v102 = v36;
      id v39 = v36;
      uint64_t v40 = (void *)sub_100535B3C();
      sub_1003F60DC((uint64_t)v30, (uint64_t (*)(void))_s10PredicatesOMa_1);
      sub_1003F01EC((uint64_t)v40, v116, a1, (unint64_t *)&qword_100909AD0);
      v100[0] = v23;

      *(void *)int64_t v22 = v39;
      v22[8] = 2;
      swift_storeEnumTagMultiPayload();
      id v42 = v39;
      uint64_t v43 = (void *)sub_10038F1F0();
      sub_1003F60DC((uint64_t)v22, _s10PredicatesOMa);
      uint64_t v44 = v116;
      uint64_t v45 = sub_1003F01EC((uint64_t)v43, v116, a1, (unint64_t *)&qword_10090B040);
      uint64_t v46 = a1;
      uint64_t v47 = v44;

      uint64_t v48 = (uint64_t)v114;
      *uint64_t v114 = v42;
      *(unsigned char *)(v48 + 8) = 1;
      swift_storeEnumTagMultiPayload();
      id v49 = v42;
      unint64_t v50 = (void *)sub_10038F1F0();
      sub_1003F60DC(v48, _s10PredicatesOMa);
      uint64_t v114 = (void *)sub_1003F01EC((uint64_t)v50, v47, v46, (unint64_t *)&qword_10090B040);

      uint64_t v51 = v47;
      unint64_t v52 = v46;
      unint64_t v53 = v113;
      void *v113 = v49;
      swift_storeEnumTagMultiPayload();
      id v54 = v49;
      id v55 = (void *)sub_10038F1F0();
      uint64_t v56 = (uint64_t)v53;
      os_log_t v57 = v52;
      uint64_t v58 = v51;
      sub_1003F60DC(v56, _s10PredicatesOMa);
      uint64_t v59 = sub_1003F01EC((uint64_t)v55, v51, v57, (unint64_t *)&qword_10090B040);
      uint64_t v113 = (void *)v45;

      uint64_t v60 = (uint64_t)v112;
      *id v112 = v54;
      swift_storeEnumTagMultiPayload();
      id v61 = v54;
      uint64_t v62 = (void *)sub_10038F1F0();
      sub_1003F60DC(v60, _s10PredicatesOMa);
      id v112 = (void *)sub_1003F01EC((uint64_t)v62, v58, v57, (unint64_t *)&qword_10090B040);

      uint64_t v63 = (uint64_t)v111;
      *uint64_t v111 = v61;
      swift_storeEnumTagMultiPayload();
      id v64 = v61;
      uint64_t v65 = (void *)sub_100535B3C();
      sub_1003F60DC(v63, (uint64_t (*)(void))_s10PredicatesOMa_1);
      uint64_t v111 = (void *)sub_1003F01EC((uint64_t)v65, v58, v57, (unint64_t *)&qword_100909AD0);

      uint64_t v66 = (uint64_t)v110;
      void *v110 = v64;
      swift_storeEnumTagMultiPayload();
      id v67 = v64;
      uint64_t v68 = (void *)sub_100535B3C();
      sub_1003F60DC(v66, (uint64_t (*)(void))_s10PredicatesOMa_1);
      unint64_t v110 = (void *)sub_1003F01EC((uint64_t)v68, v58, v57, (unint64_t *)&qword_100909AD0);

      uint64_t v69 = (uint64_t)v109;
      *int64_t v109 = v67;
      swift_storeEnumTagMultiPayload();
      id v70 = v67;
      id v71 = (void *)sub_10038F1F0();
      sub_1003F60DC(v69, _s10PredicatesOMa);
      v100[0] = sub_1003F01EC((uint64_t)v71, v58, v57, (unint64_t *)&qword_10090B040);
      int64_t v109 = (void *)v59;

      uint64_t v72 = (uint64_t)v108;
      *uint64_t v108 = v70;
      swift_storeEnumTagMultiPayload();
      id v73 = v70;
      id v74 = (void *)sub_10038F1F0();
      sub_1003F60DC(v72, _s10PredicatesOMa);
      sub_1003F01EC((uint64_t)v74, v58, v57, (unint64_t *)&qword_10090B040);

      uint64_t v75 = (uint64_t)v107;
      *uint64_t v107 = v73;
      swift_storeEnumTagMultiPayload();
      id v76 = v73;
      uint64_t v77 = (void *)sub_100646F04();
      sub_1003F60DC(v75, (uint64_t (*)(void))_s10PredicatesOMa_3);
      id v115 = v57;
      sub_1003F01EC((uint64_t)v77, v58, v57, (unint64_t *)&unk_100910210);

      id v78 = v76;
      NSString v79 = (void *)sub_1002E0D64(v101, 1);

      sub_1003F01EC((uint64_t)v79, v116, v115, (unint64_t *)&qword_10090DC20);
      id v80 = v78;
      uint64_t v81 = (void *)sub_1002E0D64(v101, 2);

      uint64_t v108 = (void *)sub_1003F01EC((uint64_t)v81, v116, v115, (unint64_t *)&qword_10090DC20);
      Class v117 = _swiftEmptyArrayStorage;
      uint64_t KeyPath = swift_getKeyPath();
      id v83 = v80;
      id v84 = [v83 uuid];
      uint64_t v85 = (uint64_t)v104;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v86 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v85, 0, 1, v86);
      id v87 = (void *)sub_10032F828(KeyPath, v85);
      swift_release();
      id v88 = v87;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v117[2] >= v117[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      unint64_t v89 = (void *)sub_1002F52FC(v117);
      sub_1003F01EC((uint64_t)v89, v116, v115, (unint64_t *)&unk_10090AFC0);

      id v90 = v83;
      unint64_t v91 = (void *)sub_1002316A8(v101, 0x61u);

      uint64_t v107 = (void *)sub_1003F01EC((uint64_t)v91, v116, v115, (unint64_t *)&unk_100910DD0);
      id v92 = v90;
      char v93 = (void *)sub_1002316A8(v101, 0x60u);

      sub_1003F01EC((uint64_t)v93, v116, v115, (unint64_t *)&unk_100910DD0);
      id v94 = v92;
      id v95 = (void *)sub_100231588(v101, 0x80u);

      uint64_t v106 = sub_1003F01EC((uint64_t)v95, v116, v115, &qword_100910E10);
      uint64_t v96 = (char *)v94;
      uint64_t v97 = (void *)sub_100232B14(v101, 0x80u);
      uint64_t v104 = v96;

      sub_1003F01EC((uint64_t)v97, v116, v115, (unint64_t *)&qword_100910E40);
      [v115 type];
      uint64_t v98 = v103;
      REMAccountSnapshotSummary.init(accountID:accountType:tagLabelCount:totalListCount:totalGroceryListCount:totalReminderCount:softDeletedReminderCount:incompleteReminderCount:incompleteGroceryReminderCount:sharedListsCount:groupCount:parentReminderCount:flaggedReminderCount:customSmartListCount:inlineTagCount:structuredTagCount:attachmentCount:nonDeletedAlarmCount:softDeletedAlarmCount:incompleteLocationAlarmsCount:incompleteTimeAlarmsCount:)();
      uint64_t v99 = type metadata accessor for REMAccountSnapshotSummary();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v98, 0, 1, v99);
    }
  }
  else
  {
    uint64_t v41 = type metadata accessor for REMAccountSnapshotSummary();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(a4, 1, 1, v41);
  }
}

uint64_t sub_1003F01EC(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10077A530;
  *(void *)(v7 + 32) = a3;
  specialized Array._endMutation()();
  id v8 = a3;
  sub_100094134(&qword_10090FF00);
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  sub_1001FF560();
  sub_1001FF5BC();
  uint64_t v9 = Sequence.compactMapToSet<A>(_:)();
  sub_1002099D8(v9);
  swift_bridgeObjectRelease();
  sub_1000963CC(0, a4);
  id v10 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v11 = [(id)swift_getObjCClassFromMetadata() entity];
  [v10 setEntity:v11];

  [v10 setAffectedStores:0];
  [v10 setPredicate:a1];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v10 setAffectedStores:isa];

  uint64_t v13 = NSManagedObjectContext.count<A>(for:)();
  swift_bridgeObjectRelease();
  swift_release();

  if (v13 < 0) {
    return -1;
  }
  else {
    return v13;
  }
}

uint64_t sub_1003F03F8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1001F8BC8(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1003F0950(v6);
  return specialized ContiguousArray._endMutation()();
}

id sub_1003F0474(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = (void *)v3;
  id v8 = [self sharedBabysitter];
  if (!v8
    || (id v11 = v8,
        sub_1000963CC(0, (unint64_t *)&qword_10090F1A8),
        id v9 = sub_1004F6058(v3),
        v11,
        !v9))
  {
    id v9 = v5;
    a3(a1, a2);
    swift_willThrow();
  }
  return v9;
}

uint64_t sub_1003F0570()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1003F0670(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = v1[7];
  uint64_t v11 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_1000C6EF4;
  return sub_1003EBD98(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1003F07C0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003F07F8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003F0840()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_1000C75D4;
  return sub_1003EC648(v2, v3, v5, v4);
}

uint64_t sub_1003F08EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

Swift::Int sub_1003F0950(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_150;
    }
    if (v4) {
      return sub_1003F1598(0, v4, 1, a1);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_158;
  }
  Swift::Int v140 = result;
  Swift::Int v144 = v4;
  uint64_t v137 = a1;
  if (v4 < 2)
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v166 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
LABEL_116:
      if (v14 >= 2)
      {
        uint64_t v131 = *v137;
        do
        {
          unint64_t v132 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_145;
          }
          if (!v131) {
            goto LABEL_157;
          }
          uint64_t v133 = *(void *)&v9[16 * v132 + 32];
          uint64_t v134 = *(void *)&v9[16 * v14 + 24];
          sub_1003F18F4((id *)(v131 + 8 * v133), (id *)(v131 + 8 * *(void *)&v9[16 * v14 + 16]), (id *)(v131 + 8 * v134), __dst);
          if (v2) {
            break;
          }
          if (v134 < v133) {
            goto LABEL_146;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v9 = sub_1001F433C((uint64_t)v9);
          }
          if (v132 >= *((void *)v9 + 2)) {
            goto LABEL_147;
          }
          uint64_t v135 = &v9[16 * v132 + 32];
          *(void *)uint64_t v135 = v133;
          *((void *)v135 + 1) = v134;
          unint64_t v136 = *((void *)v9 + 2);
          if (v14 > v136) {
            goto LABEL_148;
          }
          memmove(&v9[16 * v14 + 16], &v9[16 * v14 + 32], 16 * (v136 - v14));
          *((void *)v9 + 2) = v136 - 1;
          unint64_t v14 = v136 - 1;
        }
        while (v136 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease();
      *(void *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    sub_1000963CC(0, &qword_10090ABC0);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    __dst = (char *)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v166 = v8;
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v138 = *a1 + 16;
  uint64_t v139 = *a1 - 8;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  uint64_t v12 = &stru_1008F6000;
  Swift::Int v13 = v144;
  uint64_t v149 = *a1;
  while (1)
  {
    Swift::Int v15 = v10;
    Swift::Int v16 = v10 + 1;
    uint64_t v143 = v9;
    if (v10 + 1 < v13)
    {
      uint64_t v17 = *(void **)(v11 + 8 * v10);
      id v18 = *(id *)(v11 + 8 * v16);
      id v19 = v17;
      uint64_t v20 = sub_1003EF430();
      uint64_t v22 = v21;
      if (v20 == sub_1003EF430() && v22 == v23) {
        int v154 = 0;
      }
      else {
        int v154 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      Swift::Int v16 = v15 + 2;
      if (v15 + 2 < v144)
      {
        Swift::Int v142 = v15;
        uint64_t v25 = (id *)(v138 + 8 * v15);
        do
        {
          Swift::Int v150 = v16;
          uint64_t v146 = v2;
          uint64_t v27 = *(v25 - 1);
          id v28 = *v25;
          id v29 = v27;
          [v28 type];
          uint64_t v158 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v162 = v30;
          swift_bridgeObjectRetain();
          v31._uint64_t countAndFlagsBits = 95;
          v31._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v31);
          swift_bridgeObjectRelease();
          id v32 = [v28 ckIdentifier];
          if (!v32)
          {
            id v33 = [v28 objectID];
            id v32 = [v33 description];
          }
          unint64_t v156 = v28;
          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v36 = v35;

          swift_bridgeObjectRetain();
          v37._uint64_t countAndFlagsBits = v34;
          v37._uint64_t object = v36;
          String.append(_:)(v37);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v38 = v158;
          uint64_t v39 = v162;
          [v29 type];
          uint64_t v159 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v163 = v40;
          swift_bridgeObjectRetain();
          v41._uint64_t countAndFlagsBits = 95;
          v41._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v41);
          swift_bridgeObjectRelease();
          id v42 = [v29 ckIdentifier];
          if (!v42)
          {
            id v43 = [v29 objectID];
            id v42 = [v43 description];
          }
          uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v46 = v45;

          swift_bridgeObjectRetain();
          v47._uint64_t countAndFlagsBits = v44;
          v47._uint64_t object = v46;
          String.append(_:)(v47);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v38 == v159 && v39 == v163)
          {

            swift_bridgeObjectRelease_n();
            uint64_t v2 = v146;
            uint64_t v9 = v143;
            Swift::Int v16 = v150;
            if (v154)
            {
              uint64_t v11 = v149;
              uint64_t v12 = &stru_1008F6000;
              Swift::Int v15 = v142;
              goto LABEL_37;
            }
          }
          else
          {
            int v26 = _stringCompareWithSmolCheck(_:_:expecting:)();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v2 = v146;
            uint64_t v9 = v143;
            Swift::Int v16 = v150;
            if ((v154 ^ v26)) {
              goto LABEL_35;
            }
          }
          ++v16;
          ++v25;
        }
        while (v144 != v16);
        Swift::Int v16 = v144;
LABEL_35:
        Swift::Int v15 = v142;
      }
      uint64_t v11 = v149;
      uint64_t v12 = &stru_1008F6000;
      if (v154)
      {
LABEL_37:
        if (v16 < v15) {
          goto LABEL_151;
        }
        if (v15 < v16)
        {
          uint64_t v48 = (uint64_t *)(v139 + 8 * v16);
          Swift::Int v49 = v16;
          Swift::Int v50 = v15;
          uint64_t v51 = (uint64_t *)(v11 + 8 * v15);
          do
          {
            if (v50 != --v49)
            {
              if (!v11) {
                goto LABEL_156;
              }
              uint64_t v52 = *v51;
              uint64_t *v51 = *v48;
              uint64_t *v48 = v52;
            }
            ++v50;
            --v48;
            ++v51;
          }
          while (v50 < v49);
        }
      }
    }
    if (v16 < v144)
    {
      if (__OFSUB__(v16, v15)) {
        goto LABEL_149;
      }
      if (v16 - v15 < v140) {
        break;
      }
    }
LABEL_68:
    if (v16 < v15) {
      goto LABEL_144;
    }
    Swift::Int v152 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_1001F3D80(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v82 = *((void *)v9 + 2);
    unint64_t v81 = *((void *)v9 + 3);
    unint64_t v14 = v82 + 1;
    uint64_t v11 = v149;
    if (v82 >= v81 >> 1)
    {
      uint64_t v130 = sub_1001F3D80((char *)(v81 > 1), v82 + 1, 1, v9);
      uint64_t v11 = v149;
      uint64_t v9 = v130;
    }
    *((void *)v9 + 2) = v14;
    id v83 = v9 + 32;
    id v84 = &v9[16 * v82 + 32];
    *(void *)id v84 = v15;
    *((void *)v84 + 1) = v152;
    if (v82)
    {
      while (1)
      {
        unint64_t v85 = v14 - 1;
        if (v14 >= 4)
        {
          id v90 = &v83[16 * v14];
          uint64_t v91 = *((void *)v90 - 8);
          uint64_t v92 = *((void *)v90 - 7);
          BOOL v96 = __OFSUB__(v92, v91);
          uint64_t v93 = v92 - v91;
          if (v96) {
            goto LABEL_133;
          }
          uint64_t v95 = *((void *)v90 - 6);
          uint64_t v94 = *((void *)v90 - 5);
          BOOL v96 = __OFSUB__(v94, v95);
          uint64_t v88 = v94 - v95;
          char v89 = v96;
          if (v96) {
            goto LABEL_134;
          }
          unint64_t v97 = v14 - 2;
          uint64_t v98 = &v83[16 * v14 - 32];
          uint64_t v100 = *(void *)v98;
          uint64_t v99 = *((void *)v98 + 1);
          BOOL v96 = __OFSUB__(v99, v100);
          uint64_t v101 = v99 - v100;
          if (v96) {
            goto LABEL_136;
          }
          BOOL v96 = __OFADD__(v88, v101);
          uint64_t v102 = v88 + v101;
          if (v96) {
            goto LABEL_139;
          }
          if (v102 >= v93)
          {
            uint64_t v120 = &v83[16 * v85];
            uint64_t v122 = *(void *)v120;
            uint64_t v121 = *((void *)v120 + 1);
            BOOL v96 = __OFSUB__(v121, v122);
            uint64_t v123 = v121 - v122;
            if (v96) {
              goto LABEL_143;
            }
            BOOL v113 = v88 < v123;
            goto LABEL_105;
          }
        }
        else
        {
          if (v14 != 3)
          {
            uint64_t v114 = *((void *)v9 + 4);
            uint64_t v115 = *((void *)v9 + 5);
            BOOL v96 = __OFSUB__(v115, v114);
            uint64_t v107 = v115 - v114;
            char v108 = v96;
            goto LABEL_99;
          }
          uint64_t v87 = *((void *)v9 + 4);
          uint64_t v86 = *((void *)v9 + 5);
          BOOL v96 = __OFSUB__(v86, v87);
          uint64_t v88 = v86 - v87;
          char v89 = v96;
        }
        if (v89) {
          goto LABEL_135;
        }
        unint64_t v97 = v14 - 2;
        uint64_t v103 = &v83[16 * v14 - 32];
        uint64_t v105 = *(void *)v103;
        uint64_t v104 = *((void *)v103 + 1);
        BOOL v106 = __OFSUB__(v104, v105);
        uint64_t v107 = v104 - v105;
        char v108 = v106;
        if (v106) {
          goto LABEL_138;
        }
        int64_t v109 = &v83[16 * v85];
        uint64_t v111 = *(void *)v109;
        uint64_t v110 = *((void *)v109 + 1);
        BOOL v96 = __OFSUB__(v110, v111);
        uint64_t v112 = v110 - v111;
        if (v96) {
          goto LABEL_141;
        }
        if (__OFADD__(v107, v112)) {
          goto LABEL_142;
        }
        if (v107 + v112 >= v88)
        {
          BOOL v113 = v88 < v112;
LABEL_105:
          if (v113) {
            unint64_t v85 = v97;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v108) {
          goto LABEL_137;
        }
        uint64_t v116 = &v83[16 * v85];
        uint64_t v118 = *(void *)v116;
        uint64_t v117 = *((void *)v116 + 1);
        BOOL v96 = __OFSUB__(v117, v118);
        uint64_t v119 = v117 - v118;
        if (v96) {
          goto LABEL_140;
        }
        if (v119 < v107) {
          goto LABEL_14;
        }
LABEL_107:
        unint64_t v124 = v85 - 1;
        if (v85 - 1 >= v14)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!v11) {
          goto LABEL_155;
        }
        uint64_t v125 = &v83[16 * v124];
        uint64_t v126 = *(void *)v125;
        uint64_t v127 = &v83[16 * v85];
        uint64_t v128 = *((void *)v127 + 1);
        sub_1003F18F4((id *)(v11 + 8 * *(void *)v125), (id *)(v11 + 8 * *(void *)v127), (id *)(v11 + 8 * v128), __dst);
        if (v2) {
          goto LABEL_127;
        }
        if (v128 < v126) {
          goto LABEL_130;
        }
        if (v85 > *((void *)v9 + 2)) {
          goto LABEL_131;
        }
        *(void *)uint64_t v125 = v126;
        *(void *)&v83[16 * v124 + 8] = v128;
        unint64_t v129 = *((void *)v9 + 2);
        if (v85 >= v129) {
          goto LABEL_132;
        }
        unint64_t v14 = v129 - 1;
        memmove(&v83[16 * v85], v127 + 16, 16 * (v129 - 1 - v85));
        *((void *)v9 + 2) = v129 - 1;
        uint64_t v11 = v149;
        if (v129 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v14 = 1;
LABEL_14:
    Swift::Int v13 = v144;
    Swift::Int v10 = v152;
    uint64_t v12 = &stru_1008F6000;
    if (v152 >= v144) {
      goto LABEL_116;
    }
  }
  if (__OFADD__(v15, v140)) {
    goto LABEL_152;
  }
  Swift::Int v53 = v144;
  if (v15 + v140 < v144) {
    Swift::Int v53 = v15 + v140;
  }
  if (v53 >= v15)
  {
    if (v16 != v53)
    {
      uint64_t v147 = v2;
      uint64_t v54 = v139 + 8 * v16;
      id v55 = &selRef_stringFromDate_;
      Swift::Int v141 = v53;
      do
      {
        os_log_t v57 = *(void **)(v11 + 8 * v16);
        Swift::Int v58 = v15;
        uint64_t v145 = v54;
        Swift::Int v151 = v16;
        while (1)
        {
          Swift::Int v153 = v58;
          uint64_t v59 = *(void **)v54;
          id v60 = v57;
          id v155 = v59;
          [v60 v55[88]];
          uint64_t v160 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v164 = v61;
          swift_bridgeObjectRetain();
          v62._uint64_t countAndFlagsBits = 95;
          v62._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v62);
          swift_bridgeObjectRelease();
          unint64_t v157 = v60;
          id v63 = [v60 v12[168].types];
          if (!v63)
          {
            id v64 = [v60 objectID];
            id v63 = [v64 description];
          }
          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v67 = v66;

          swift_bridgeObjectRetain();
          v68._uint64_t countAndFlagsBits = v65;
          v68._uint64_t object = v67;
          String.append(_:)(v68);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v70 = v160;
          uint64_t v69 = v164;
          [v155 v55[88]];
          uint64_t v161 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v165 = v71;
          swift_bridgeObjectRetain();
          v72._uint64_t countAndFlagsBits = 95;
          v72._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v72);
          swift_bridgeObjectRelease();
          id v73 = [v155 ckIdentifier];
          if (!v73)
          {
            id v74 = [v155 objectID];
            id v73 = [v74 description];
          }
          uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v77 = v76;

          swift_bridgeObjectRetain();
          v78._uint64_t countAndFlagsBits = v75;
          v78._uint64_t object = v77;
          String.append(_:)(v78);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v70 == v161 && v69 == v165) {
            break;
          }
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v79 & 1) == 0) {
            goto LABEL_54;
          }
          uint64_t v11 = v149;
          id v55 = &selRef_stringFromDate_;
          uint64_t v12 = &stru_1008F6000;
          if (!v149) {
            goto LABEL_154;
          }
          id v80 = *(void **)v54;
          os_log_t v57 = *(void **)(v54 + 8);
          *(void *)uint64_t v54 = v57;
          *(void *)(v54 + 8) = v80;
          v54 -= 8;
          Swift::Int v56 = v151;
          Swift::Int v58 = v153 + 1;
          if (v151 == v153 + 1) {
            goto LABEL_55;
          }
        }

        swift_bridgeObjectRelease_n();
LABEL_54:
        uint64_t v11 = v149;
        Swift::Int v56 = v151;
        id v55 = &selRef_stringFromDate_;
        uint64_t v12 = &stru_1008F6000;
LABEL_55:
        Swift::Int v16 = v56 + 1;
        uint64_t v54 = v145 + 8;
      }
      while (v16 != v141);
      Swift::Int v16 = v141;
      uint64_t v2 = v147;
      uint64_t v9 = v143;
    }
    goto LABEL_68;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003F1598(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v31 = result;
  if (a3 != a2)
  {
    uint64_t v33 = *a4;
    uint64_t v4 = *a4 + 8 * a3 - 8;
    uint64_t v5 = &selRef_stringFromDate_;
LABEL_6:
    uint64_t v7 = *(void **)(v33 + 8 * a3);
    uint64_t v34 = a3;
    uint64_t v35 = v31;
    uint64_t v32 = v4;
    while (1)
    {
      uint64_t v8 = *(void **)v4;
      id v9 = v7;
      id v36 = v8;
      [v9 v5[88]];
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = v10;
      swift_bridgeObjectRetain();
      v11._uint64_t countAndFlagsBits = 95;
      v11._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      uint64_t v12 = v39;
      id v13 = [v9 ckIdentifier];
      if (!v13)
      {
        id v14 = [v9 objectID];
        id v13 = [v14 description];
      }
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      swift_bridgeObjectRetain();
      v18._uint64_t countAndFlagsBits = v15;
      v18._uint64_t object = v17;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v19 = v37;
      [v36 v5[88]];
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = v20;
      swift_bridgeObjectRetain();
      v21._uint64_t countAndFlagsBits = 95;
      v21._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      id v22 = [v36 ckIdentifier];
      if (!v22)
      {
        id v23 = [v36 objectID];
        id v22 = [v23 description];
      }
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v26 = v25;

      swift_bridgeObjectRetain();
      v27._uint64_t countAndFlagsBits = v24;
      v27._uint64_t object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19 == v38 && v12 == v40)
      {

        Swift::Int result = swift_bridgeObjectRelease_n();
        uint64_t v6 = v34;
        uint64_t v5 = &selRef_stringFromDate_;
LABEL_5:
        a3 = v6 + 1;
        uint64_t v4 = v32 + 8;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      uint64_t v6 = v34;
      uint64_t v5 = &selRef_stringFromDate_;
      if ((v28 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v33) {
        break;
      }
      id v29 = *(void **)v4;
      uint64_t v7 = *(void **)(v4 + 8);
      *(void *)uint64_t v4 = v7;
      *(void *)(v4 + 8) = v29;
      v4 -= 8;
      if (v34 == ++v35) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1003F18F4(id *a1, id *__src, id *a3, char *__dst)
{
  uint64_t v5 = a3;
  uint64_t v6 = __src;
  uint64_t v7 = (char *)__src - (char *)a1;
  uint64_t v8 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0) {
    uint64_t v8 = (char *)__src - (char *)a1;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = (char *)a3 - (char *)__src;
  uint64_t v11 = (char *)a3 - (char *)__src + 7;
  if ((char *)a3 - (char *)__src >= 0) {
    uint64_t v11 = (char *)a3 - (char *)__src;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v45 = a1;
  uint64_t v44 = (void **)__dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7) {
      goto LABEL_54;
    }
    if (__dst != (char *)__src || &__src[v12] <= (id *)__dst) {
      memmove(__dst, __src, 8 * v12);
    }
    uint64_t v39 = __dst;
    int v26 = (id *)&__dst[8 * v12];
    id v43 = (char *)v26;
    uint64_t v45 = v6;
    if (a1 >= v6 || v10 < 8)
    {
LABEL_53:
      sub_1001F3F4C(&v45, &v44, &v43);
      return 1;
    }
    Swift::String v27 = v6;
    while (1)
    {
      id v42 = v5;
      char v28 = *--v27;
      id v29 = *(v26 - 1);
      id v30 = v28;
      uint64_t v31 = sub_1003EF430();
      uint64_t v33 = v32;
      if (v31 == sub_1003EF430() && v33 == v34) {
        break;
      }
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = (char *)v42;
      uint64_t v5 = v42 - 1;
      if ((v36 & 1) == 0) {
        goto LABEL_46;
      }
      if (v42 != v6 || v5 >= v6) {
        id *v5 = *v27;
      }
      uint64_t v45 = v27;
LABEL_51:
      if (v27 > a1)
      {
        uint64_t v6 = v27;
        if (v26 > (id *)v39) {
          continue;
        }
      }
      goto LABEL_53;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v37 = (char *)v42;
    uint64_t v5 = v42 - 1;
LABEL_46:
    id v43 = (char *)(v26 - 1);
    if (v37 < (char *)v26 || v5 >= v26 || v37 != (char *)v26) {
      id *v5 = *(v26 - 1);
    }
    Swift::String v27 = v6;
    --v26;
    goto LABEL_51;
  }
  if (v7 >= -7)
  {
    if (__dst != (char *)a1 || &a1[v9] <= (id *)__dst) {
      memmove(__dst, a1, 8 * v9);
    }
    Swift::String v41 = (void **)&__dst[8 * v9];
    id v43 = (char *)v41;
    if (v6 < v5 && v7 >= 8)
    {
      id v13 = (void **)__dst;
      id v14 = a1;
      while (1)
      {
        uint64_t v15 = v5;
        Swift::Int v16 = *v13;
        id v17 = *v6;
        id v18 = v16;
        uint64_t v19 = sub_1003EF430();
        uint64_t v21 = v20;
        if (v19 == sub_1003EF430() && v21 == v22) {
          break;
        }
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v24 & 1) == 0) {
          goto LABEL_23;
        }
        uint64_t v25 = v6 + 1;
        uint64_t v5 = v15;
        if (v14 < v6 || v14 >= v25 || v14 != v6) {
          *id v14 = *v6;
        }
LABEL_26:
        ++v14;
        if (v13 < v41)
        {
          uint64_t v6 = v25;
          if (v25 < v5) {
            continue;
          }
        }
        uint64_t v45 = v14;
        goto LABEL_53;
      }

      swift_bridgeObjectRelease_n();
LABEL_23:
      uint64_t v5 = v15;
      if (v14 != v13) {
        *id v14 = *v13;
      }
      uint64_t v44 = ++v13;
      uint64_t v25 = v6;
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_54:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *sub_1003F1C90(uint64_t isStackAllocationSafe, uint64_t *a2)
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = sub_1003F1F54((uint64_t)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return (uint64_t *)v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = (uint64_t *)sub_1003F1F54((uint64_t)v9, v6, v4, a2);
    swift_slowDealloc();
  }
  return a2;
}

uint64_t sub_1003F1DFC(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1003F22C8((uint64_t)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    size_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_1003F22C8((uint64_t)v7, v4, v2);
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_1003F1F54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = a3;
  id v30 = (unint64_t *)result;
  uint64_t v31 = 0;
  int64_t v5 = 0;
  uint64_t v33 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v34 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v5 << 6);
      goto LABEL_20;
    }
    BOOL v11 = __OFADD__(v5++, 1);
    if (v11)
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v5 >= v34) {
      return sub_100546940(v30, a2, v31, v4);
    }
    unint64_t v12 = *(void *)(v33 + 8 * v5);
    if (!v12) {
      break;
    }
LABEL_19:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v5 << 6);
LABEL_20:
    id v14 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v10);
    uint64_t v15 = v14[1];
    uint64_t v16 = *a4;
    if (!*(void *)(*a4 + 16))
    {
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
    unint64_t v36 = v8;
    int64_t v37 = v5;
    uint64_t v17 = *v14;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v20 = v18 & ~v19;
    uint64_t v21 = v16 + 56;
    if ((*(void *)(v16 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
    {
      uint64_t v22 = *(void *)(v16 + 48);
      id v23 = (void *)(v22 + 16 * v20);
      BOOL v24 = *v23 == v17 && v23[1] == v15;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v4 = a3;
        int64_t v5 = v37;
        unint64_t v8 = v36;
        uint64_t result = swift_bridgeObjectRelease();
        *(unint64_t *)((char *)v30 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        BOOL v11 = __OFADD__(v31++, 1);
        if (v11) {
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v25 = ~v19;
        for (unint64_t i = (v20 + 1) & v25; ((*(void *)(v21 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v25)
        {
          Swift::String v27 = (void *)(v22 + 16 * i);
          BOOL v28 = *v27 == v17 && v27[1] == v15;
          if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_36;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v4 = a3;
        int64_t v5 = v37;
        unint64_t v8 = v36;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v5 = v37;
      unint64_t v8 = v36;
LABEL_6:
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v13 = v5 + 1;
  if (v5 + 1 >= v34) {
    return sub_100546940(v30, a2, v31, v4);
  }
  unint64_t v12 = *(void *)(v33 + 8 * v13);
  if (v12) {
    goto LABEL_18;
  }
  int64_t v13 = v5 + 2;
  if (v5 + 2 >= v34) {
    return sub_100546940(v30, a2, v31, v4);
  }
  unint64_t v12 = *(void *)(v33 + 8 * v13);
  if (v12) {
    goto LABEL_18;
  }
  int64_t v13 = v5 + 3;
  if (v5 + 3 >= v34) {
    return sub_100546940(v30, a2, v31, v4);
  }
  unint64_t v12 = *(void *)(v33 + 8 * v13);
  if (v12)
  {
LABEL_18:
    int64_t v5 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v5 >= v34) {
      return sub_100546940(v30, a2, v31, v4);
    }
    unint64_t v12 = *(void *)(v33 + 8 * v5);
    ++v13;
    if (v12) {
      goto LABEL_19;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1003F22C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = (unint64_t *)result;
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (2)
  {
    uint64_t v18 = v4;
    do
    {
      if (v9)
      {
        unint64_t v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v12 = v11 | (v5 << 6);
      }
      else
      {
        int64_t v13 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
        if (v13 >= v10) {
          return sub_10054694C(v17, a2, v18, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v13);
        ++v5;
        if (!v14)
        {
          int64_t v5 = v13 + 1;
          if (v13 + 1 >= v10) {
            return sub_10054694C(v17, a2, v18, a3);
          }
          unint64_t v14 = *(void *)(v6 + 8 * v5);
          if (!v14)
          {
            int64_t v5 = v13 + 2;
            if (v13 + 2 >= v10) {
              return sub_10054694C(v17, a2, v18, a3);
            }
            unint64_t v14 = *(void *)(v6 + 8 * v5);
            if (!v14)
            {
              int64_t v15 = v13 + 3;
              if (v15 >= v10) {
                return sub_10054694C(v17, a2, v18, a3);
              }
              unint64_t v14 = *(void *)(v6 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v5 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_25;
                  }
                  if (v5 >= v10) {
                    return sub_10054694C(v17, a2, v18, a3);
                  }
                  unint64_t v14 = *(void *)(v6 + 8 * v5);
                  ++v15;
                  if (v14) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v5 = v15;
            }
          }
        }
LABEL_22:
        unint64_t v9 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
      }
      sub_1003F6034();
      sub_1003F6088();
      uint64_t result = BidirectionalCollection<>.starts<A>(with:)();
    }
    while ((result & 1) != 0);
    *(unint64_t *)((char *)v17 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v4 = v18 + 1;
    if (!__OFADD__(v18, 1)) {
      continue;
    }
    break;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1003F24AC(uint64_t a1)
{
  v1[92] = a1;
  sub_100094134((uint64_t *)&unk_100909E50);
  v1[93] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for UUID();
  v1[94] = v2;
  v1[95] = *(void *)(v2 - 8);
  v1[96] = swift_task_alloc();
  v1[97] = swift_task_alloc();
  v1[98] = swift_task_alloc();
  v1[99] = swift_task_alloc();
  v1[100] = swift_task_alloc();
  v1[101] = swift_task_alloc();
  v1[102] = swift_task_alloc();
  v1[103] = swift_task_alloc();
  v1[104] = swift_task_alloc();
  v1[105] = swift_task_alloc();
  v1[106] = swift_task_alloc();
  v1[107] = swift_task_alloc();
  v1[108] = swift_task_alloc();
  v1[109] = swift_task_alloc();
  v1[110] = sub_100094134(&qword_100917648);
  v1[111] = swift_task_alloc();
  v1[112] = swift_task_alloc();
  v1[113] = swift_task_alloc();
  return _swift_task_switch(sub_1003F268C, 0, 0);
}

uint64_t sub_1003F268C()
{
  id v1 = objc_allocWithZone((Class)DESRecordStore);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithBundleIdentifier:v2];
  v0[114] = v3;

  if (v3)
  {
    if ([v3 isPermitted])
    {
      v0[10] = v0;
      v0[15] = v0 + 90;
      v0[11] = sub_1003F2A94;
      uint64_t v4 = swift_continuation_init();
      v0[26] = _NSConcreteStackBlock;
      v0[27] = 0x40000000;
      v0[28] = sub_1003EDA2C;
      v0[29] = &unk_1008C4C18;
      v0[30] = v4;
      [v3 fetchSavedRecordInfoWithCompletion:v0 + 26];
      return _swift_continuation_await(v0 + 10);
    }
    if (qword_1009074B8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100917450);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v10, "Record store not permited. Not saving records", v11, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_1009074B8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100917450);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to get record store. Not saving records", v8, 2u);
      swift_slowDealloc();
    }
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1003F2A94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 920) = v1;
  if (v1) {
    NSString v2 = sub_1003F5764;
  }
  else {
    NSString v2 = sub_1003F2BA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003F2BA4()
{
  uint64_t v240 = v0;
  uint64_t v219 = (uint64_t)(v0 + 49);
  uint64_t v223 = (uint64_t)(v0 + 61);
  Class v224 = v0 + 57;
  uint64_t v221 = (uint64_t)(v0 + 65);
  uint64_t v1 = v0[92];
  uint64_t v216 = v0 + 84;
  uint64_t v231 = v0[90];
  unint64_t v2 = sub_1002EF768((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v226 = v0 + 53;
  if (v3)
  {
    uint64_t v236 = v0 + 41;
    uint64_t v4 = v0[92];
    uint64_t v5 = *(void *)(type metadata accessor for REMAccountSnapshotSummary() - 8);
    uint64_t v6 = v4 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v237 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    do
    {
      os_log_type_t v7 = (void *)REMAccountSnapshotSummary.accountID.getter();
      uint64_t v8 = REMAccountSnapshotSummary.nsPayload.getter();
      unint64_t v9 = sub_10042175C(v8);
      swift_bridgeObjectRelease();
      id v10 = [v7 stringRepresentation];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      v0[48] = &type metadata for String;
      v0[45] = v11;
      v0[46] = v13;
      sub_10009A1A0(v0 + 45, v236);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1002C54C8(v236, 0x49746E756F636361, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
      uint64_t v15 = v9;
      swift_bridgeObjectRelease();
      id v16 = [v7 stringRepresentation];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      char v20 = swift_isUniquelyReferenced_nonNull_native();
      v239[0] = v2;
      sub_1002C6428(v15, v17, v19, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v6 += v237;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  os_log_type_t v217 = v0 + 78;
  uint64_t v214 = v0 + 79;
  uint64_t v215 = v0 + 80;
  v0[116] = v2;
  id v209 = v0 + 81;
  id v210 = v0 + 77;
  id v213 = v0 + 82;
  uint64_t v230 = v0[110];
  int v218 = v0 + 83;
  uint64_t v21 = (void *)v0[95];
  uint64_t v211 = v0 + 89;
  uint64_t v212 = v0 + 91;
  uint64_t v22 = swift_bridgeObjectRetain();
  unint64_t v222 = v2;
  int64_t v23 = 0;
  v0[84] = sub_1001261C0(v22);
  v0[83] = _swiftEmptyArrayStorage;
  uint64_t v24 = -1;
  uint64_t v227 = v231 + 64;
  uint64_t v25 = -1 << *(unsigned char *)(v231 + 32);
  if (-v25 < 64) {
    uint64_t v24 = ~(-1 << -(char)v25);
  }
  unint64_t v26 = v24 & *(void *)(v231 + 64);
  int64_t v228 = (unint64_t)(63 - v25) >> 6;
  uint64_t v238 = v21;
  uint64_t v235 = (void (**)(uint64_t, uint64_t))(v21 + 1);
  unint64_t v27 = (unint64_t)&off_100776000;
  Class v229 = v0;
  if (!v26) {
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v233 = (v26 - 1) & v26;
  int64_t v234 = v23;
  for (unint64_t i = __clz(__rbit64(v26)) | (v23 << 6); ; unint64_t i = __clz(__rbit64(v27)) + (v30 << 6))
  {
    uint64_t v32 = v0[113];
    unint64_t v33 = v0[112];
    uint64_t v34 = v0[111];
    uint64_t v35 = v0;
    uint64_t v36 = v0[109];
    uint64_t v37 = v35[94];
    uint64_t v232 = v238[9];
    uint64_t v38 = (void (*)(uint64_t, unint64_t, uint64_t))v238[2];
    v38(v32, *(void *)(v231 + 48) + v232 * i, v37);
    uint64_t v39 = *(void *)(*(void *)(v231 + 56) + 8 * i);
    *(void *)(v32 + *(int *)(v230 + 48)) = v39;
    uint64_t v40 = *(int *)(v230 + 48);
    Swift::String v41 = (void (*)(uint64_t, uint64_t, uint64_t))v238[4];
    v41(v33, v32, v37);
    *(void *)(v33 + v40) = v39;
    v38(v34, v33, v37);
    v41(v36, v34, v37);
    uint64_t v42 = *(void *)(v39 + 16);
    swift_bridgeObjectRetain();
    if (!v42) {
      goto LABEL_32;
    }
    swift_bridgeObjectRetain();
    unint64_t v43 = sub_1001806F8(0x49746E756F636361, 0xE900000000000044);
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_32:
      if (qword_1009074B8 != -1) {
        swift_once();
      }
      uint64_t v0 = v229;
      unint64_t v67 = v229[109];
      uint64_t v68 = v229[99];
      uint64_t v69 = v229[94];
      uint64_t v70 = type metadata accessor for Logger();
      sub_10008E2DC(v70, (uint64_t)qword_100917450);
      v38(v68, v67, v69);
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.default.getter();
      BOOL v73 = os_log_type_enabled(v71, v72);
      uint64_t v74 = v229[99];
      uint64_t v75 = v229[94];
      if (v73)
      {
        uint64_t v76 = swift_slowAlloc();
        v239[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v76 = 136446210;
        uint64_t v77 = UUID.uuidString.getter();
        *(void *)(v76 + 4) = sub_1000C51B8(v77, v78, v239);
        swift_bridgeObjectRelease();
        uint64_t v66 = *v235;
        (*v235)(v74, v75);
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "AccountID == nil, deleting record {recordID: %{public}s}", (uint8_t *)v76, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v66 = *v235;
        (*v235)(v229[99], v229[94]);
      }

      int64_t v23 = v234;
      v38(v229[98], v229[109], v229[94]);
      uint64_t v21 = (void *)v229[83];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v21 = (void *)sub_100309EC8(0, v21[2] + 1, 1, (unint64_t)v21);
      }
      unint64_t v80 = v21[2];
      unint64_t v79 = v21[3];
      if (v80 >= v79 >> 1) {
        uint64_t v21 = (void *)sub_100309EC8(v79 > 1, v80 + 1, 1, (unint64_t)v21);
      }
      uint64_t v81 = v229[112];
      uint64_t v82 = v229[109];
      uint64_t v83 = v229[98];
      uint64_t v84 = v229[94];
      v21[2] = v80 + 1;
      v41((uint64_t)v21+ ((*((unsigned __int8 *)v238 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v238 + 80))+ v80 * v232, v83, v84);
      v229[83] = v21;
      goto LABEL_42;
    }
    sub_10009A1B0(*(void *)(v39 + 56) + 32 * v43, (uint64_t)v224);
    sub_10009A1A0(v224, v226);
    sub_10009A1B0((uint64_t)v226, v223);
    uint64_t v225 = (void (*)(char *, uint64_t, uint64_t))v41;
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v0 = v229;
      if (qword_1009074B8 != -1) {
        swift_once();
      }
      unint64_t v85 = v229[109];
      uint64_t v86 = v229[101];
      uint64_t v87 = v229[94];
      uint64_t v88 = type metadata accessor for Logger();
      sub_10008E2DC(v88, (uint64_t)qword_100917450);
      sub_10009A1B0((uint64_t)v226, v221);
      v38(v86, v85, v87);
      char v89 = Logger.logObject.getter();
      os_log_type_t v90 = static os_log_type_t.fault.getter();
      BOOL v91 = os_log_type_enabled(v89, v90);
      uint64_t v92 = v229[101];
      uint64_t v93 = v229[94];
      if (v91)
      {
        uint64_t v94 = swift_slowAlloc();
        v239[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v94 = 136446466;
        sub_10009A1B0(v221, v219);
        uint64_t v95 = String.init<A>(describing:)();
        *(void *)(v94 + 4) = sub_1000C51B8(v95, v96, v239);
        swift_bridgeObjectRelease();
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v221);
        *(_WORD *)(v94 + 12) = 2082;
        uint64_t v97 = UUID.uuidString.getter();
        *(void *)(v94 + 14) = sub_1000C51B8(v97, v98, v239);
        swift_bridgeObjectRelease();
        uint64_t v99 = *v235;
        (*v235)(v92, v93);
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "AccountID.Type != String, deleting record {accountID: %{public}s, recordID: %{public}s}", (uint8_t *)v94, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v221);
        uint64_t v99 = *v235;
        (*v235)(v92, v93);
      }

      int64_t v23 = v234;
      v38(v229[100], v229[109], v229[94]);
      uint64_t v21 = (void *)v229[83];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v21 = (void *)sub_100309EC8(0, v21[2] + 1, 1, (unint64_t)v21);
      }
      unint64_t v101 = v21[2];
      unint64_t v100 = v21[3];
      if (v101 >= v100 >> 1) {
        uint64_t v21 = (void *)sub_100309EC8(v100 > 1, v101 + 1, 1, (unint64_t)v21);
      }
      uint64_t v81 = v229[112];
      uint64_t v102 = v229[109];
      uint64_t v103 = v229[100];
      uint64_t v104 = v229[94];
      v21[2] = v101 + 1;
      v225((char *)v21+ ((*((unsigned __int8 *)v238 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v238 + 80))+ v101 * v232, v103, v104);
      v229[83] = v21;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v226);
      v99(v102, v104);
LABEL_43:
      sub_1000966BC(v81, &qword_100917648);
      unint64_t v26 = v233;
      if (v233) {
        goto LABEL_8;
      }
      goto LABEL_9;
    }
    uint64_t v0 = v229;
    uint64_t v45 = v229[75];
    unint64_t v46 = v229[76];
    if (!*(void *)(v222 + 16)) {
      goto LABEL_60;
    }
    swift_bridgeObjectRetain();
    unint64_t v47 = sub_1001806F8(v45, v46);
    if ((v48 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_60:
      swift_bridgeObjectRelease();
      if (qword_1009074B8 != -1) {
        swift_once();
      }
      unint64_t v105 = v229[109];
      uint64_t v106 = v229[103];
      uint64_t v107 = v229[94];
      uint64_t v108 = type metadata accessor for Logger();
      sub_10008E2DC(v108, (uint64_t)qword_100917450);
      v38(v106, v105, v107);
      swift_bridgeObjectRetain();
      int64_t v109 = Logger.logObject.getter();
      os_log_type_t v110 = static os_log_type_t.default.getter();
      BOOL v111 = os_log_type_enabled(v109, v110);
      uint64_t v112 = v229[103];
      uint64_t v113 = v229[94];
      if (v111)
      {
        uint64_t v114 = swift_slowAlloc();
        v239[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v114 = 136446466;
        swift_bridgeObjectRetain();
        *(void *)(v114 + 4) = sub_1000C51B8(v45, v46, v239);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v114 + 12) = 2082;
        uint64_t v115 = UUID.uuidString.getter();
        *(void *)(v114 + 14) = sub_1000C51B8(v115, v116, v239);
        swift_bridgeObjectRelease();
        uint64_t v66 = *v235;
        (*v235)(v112, v113);
        _os_log_impl((void *)&_mh_execute_header, v109, v110, "Record missing from accountRecords. Deleting {accountID: %{public}s, recordID: %{public}s}", (uint8_t *)v114, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        uint64_t v66 = *v235;
        (*v235)(v112, v113);
      }

      v38(v229[102], v229[109], v229[94]);
      uint64_t v21 = (void *)v229[83];
      int64_t v23 = v234;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v21 = (void *)sub_100309EC8(0, v21[2] + 1, 1, (unint64_t)v21);
      }
      unint64_t v118 = v21[2];
      unint64_t v117 = v21[3];
      unint64_t v119 = v118 + 1;
      if (v118 >= v117 >> 1) {
        uint64_t v21 = (void *)sub_100309EC8(v117 > 1, v118 + 1, 1, (unint64_t)v21);
      }
      uint64_t v81 = v229[112];
      uint64_t v82 = v229[109];
      uint64_t v120 = v229[102];
LABEL_86:
      uint64_t v84 = v229[94];
      v21[2] = v119;
      v225((char *)v21+ ((*((unsigned __int8 *)v238 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v238 + 80))+ v118 * v232, v120, v84);
      v229[83] = v21;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v226);
LABEL_42:
      v66(v82, v84);
      goto LABEL_43;
    }
    uint64_t v49 = *(void *)(*(void *)(v222 + 56) + 8 * v47);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1003EDB18(v49);
    uint64_t v51 = v50;
    swift_bridgeObjectRelease();
    if (!v51)
    {
      swift_bridgeObjectRelease();
      if (qword_1009074B8 != -1) {
        swift_once();
      }
      unint64_t v121 = v229[109];
      uint64_t v122 = v229[105];
      uint64_t v123 = v229[94];
      uint64_t v124 = type metadata accessor for Logger();
      sub_10008E2DC(v124, (uint64_t)qword_100917450);
      v38(v122, v121, v123);
      swift_bridgeObjectRetain();
      uint64_t v125 = Logger.logObject.getter();
      os_log_type_t v126 = static os_log_type_t.fault.getter();
      BOOL v127 = os_log_type_enabled(v125, v126);
      uint64_t v128 = v229[105];
      uint64_t v129 = v229[94];
      if (v127)
      {
        uint64_t v130 = swift_slowAlloc();
        v239[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v130 = 136446466;
        swift_bridgeObjectRetain();
        *id v213 = sub_1000C51B8(v45, v46, v239);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v130 + 12) = 2082;
        uint64_t v131 = UUID.uuidString.getter();
        *id v210 = sub_1000C51B8(v131, v132, v239);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v66 = *v235;
        (*v235)(v128, v129);
        _os_log_impl((void *)&_mh_execute_header, v125, v126, "Failed to cast accountRecord to NSObject. Deleting {accountID: %{public}s, recordID: %{public}s}", (uint8_t *)v130, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        uint64_t v66 = *v235;
        (*v235)(v128, v129);
      }

      int64_t v23 = v234;
      v38(v229[104], v229[109], v229[94]);
      uint64_t v21 = (void *)v229[83];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v21 = (void *)sub_100309EC8(0, v21[2] + 1, 1, (unint64_t)v21);
      }
      unint64_t v118 = v21[2];
      unint64_t v134 = v21[3];
      unint64_t v119 = v118 + 1;
      if (v118 >= v134 >> 1) {
        uint64_t v21 = (void *)sub_100309EC8(v134 > 1, v118 + 1, 1, (unint64_t)v21);
      }
      uint64_t v81 = v229[112];
      uint64_t v82 = v229[109];
      uint64_t v120 = v229[104];
      goto LABEL_86;
    }
    sub_1003EDB18(v39);
    uint64_t v53 = v52;
    swift_bridgeObjectRelease();
    if (!v53)
    {
      swift_bridgeObjectRelease();
      if (qword_1009074B8 != -1) {
        swift_once();
      }
      unint64_t v54 = v229[109];
      uint64_t v55 = v229[107];
      uint64_t v56 = v229[94];
      uint64_t v57 = type metadata accessor for Logger();
      sub_10008E2DC(v57, (uint64_t)qword_100917450);
      v38(v55, v54, v56);
      swift_bridgeObjectRetain();
      Swift::Int v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.fault.getter();
      BOOL v60 = os_log_type_enabled(v58, v59);
      uint64_t v61 = v229[107];
      uint64_t v62 = v229[94];
      if (v60)
      {
        uint64_t v63 = swift_slowAlloc();
        v239[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 136446466;
        swift_bridgeObjectRetain();
        uint64_t *v217 = sub_1000C51B8(v45, v46, v239);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v63 + 12) = 2082;
        uint64_t v64 = UUID.uuidString.getter();
        *uint64_t v214 = sub_1000C51B8(v64, v65, v239);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v66 = *v235;
        (*v235)(v61, v62);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Failed to cast fetchedRecord to NSObject. Deleting {accountID: %{public}s, recordID: %{public}s}", (uint8_t *)v63, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        uint64_t v66 = *v235;
        (*v235)(v61, v62);
      }

      int64_t v23 = v234;
      v38(v229[106], v229[109], v229[94]);
      uint64_t v21 = (void *)v229[83];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v21 = (void *)sub_100309EC8(0, v21[2] + 1, 1, (unint64_t)v21);
      }
      unint64_t v118 = v21[2];
      unint64_t v133 = v21[3];
      unint64_t v119 = v118 + 1;
      if (v118 >= v133 >> 1) {
        uint64_t v21 = (void *)sub_100309EC8(v133 > 1, v118 + 1, 1, (unint64_t)v21);
      }
      uint64_t v81 = v229[112];
      uint64_t v82 = v229[109];
      uint64_t v120 = v229[106];
      goto LABEL_86;
    }
    uint64_t v135 = sub_1003F1DFC(v53);
    swift_bridgeObjectRelease();
    sub_100485F34(v135, v51);
    if ((v136 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if (qword_1009074B8 != -1) {
        swift_once();
      }
      uint64_t v144 = type metadata accessor for Logger();
      sub_10008E2DC(v144, (uint64_t)qword_100917450);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v145 = Logger.logObject.getter();
      os_log_type_t v146 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v145, v146))
      {
        os_log_type_t type = v146;
        uint64_t v147 = swift_slowAlloc();
        v239[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v147 = 136446466;
        sub_1000963CC(0, (unint64_t *)&qword_10090C120);
        swift_retain();
        uint64_t v148 = Dictionary.description.getter();
        unint64_t v150 = v149;
        swift_release();
        *uint64_t v215 = sub_1000C51B8(v148, v150, v239);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v147 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v151 = Dictionary.description.getter();
        unint64_t v153 = v152;
        swift_bridgeObjectRelease();
        uint64_t *v209 = sub_1000C51B8(v151, v153, v239);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v145, type, "Records don't match replacing {nsFetchedRecord: %{public}s, nsAccountRecord: %{public}s}", (uint8_t *)v147, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
        swift_bridgeObjectRelease_n();
      }

      v38(v229[108], v229[109], v229[94]);
      uint64_t v21 = (void *)v229[83];
      int64_t v23 = v234;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v21 = (void *)sub_100309EC8(0, v21[2] + 1, 1, (unint64_t)v21);
      }
      unint64_t v155 = v21[2];
      unint64_t v154 = v21[3];
      if (v155 >= v154 >> 1) {
        uint64_t v21 = (void *)sub_100309EC8(v154 > 1, v155 + 1, 1, (unint64_t)v21);
      }
      uint64_t v81 = v229[112];
      uint64_t v156 = v229[109];
      uint64_t v157 = v229[108];
      uint64_t v158 = v229[94];
      v21[2] = v155 + 1;
      v225((char *)v21+ ((*((unsigned __int8 *)v238 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v238 + 80))+ v155 * v232, v157, v158);
      v229[83] = v21;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v226);
      ((void (*)(uint64_t, uint64_t))v238[1])(v156, v158);
      goto LABEL_43;
    }
    swift_bridgeObjectRelease();
    swift_release();
    if (qword_1009074B8 != -1) {
      swift_once();
    }
    uint64_t v137 = type metadata accessor for Logger();
    sub_10008E2DC(v137, (uint64_t)qword_100917450);
    uint64_t v138 = Logger.logObject.getter();
    os_log_type_t v139 = static os_log_type_t.info.getter();
    int64_t v23 = v234;
    if (os_log_type_enabled(v138, v139))
    {
      Swift::Int v140 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::Int v140 = 0;
      _os_log_impl((void *)&_mh_execute_header, v138, v139, "Records match. No need to update", v140, 2u);
      swift_slowDealloc();
    }
    uint64_t v141 = v229[112];
    uint64_t v142 = v229[109];
    uint64_t v143 = v229[94];

    uint64_t v21 = v216;
    sub_10065ACF8(v45, v46);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v226);
    (*v235)(v142, v143);
    sub_1000966BC(v141, &qword_100917648);
    swift_bridgeObjectRelease();
    unint64_t v26 = v233;
    if (v233) {
      goto LABEL_8;
    }
LABEL_9:
    BOOL v29 = __OFADD__(v23, 1);
    int64_t v30 = v23 + 1;
    if (v29)
    {
      __break(1u);
      goto LABEL_136;
    }
    if (v30 >= v228) {
      goto LABEL_104;
    }
    unint64_t v27 = *(void *)(v227 + 8 * v30);
    if (!v27) {
      break;
    }
LABEL_19:
    uint64_t v233 = (v27 - 1) & v27;
    int64_t v234 = v30;
  }
  int64_t v31 = v30 + 1;
  if (v30 + 1 >= v228) {
    goto LABEL_104;
  }
  unint64_t v27 = *(void *)(v227 + 8 * v31);
  if (v27) {
    goto LABEL_18;
  }
  int64_t v31 = v30 + 2;
  if (v30 + 2 >= v228) {
    goto LABEL_104;
  }
  unint64_t v27 = *(void *)(v227 + 8 * v31);
  if (v27) {
    goto LABEL_18;
  }
  int64_t v31 = v30 + 3;
  if (v30 + 3 >= v228)
  {
LABEL_104:
    swift_release();
    uint64_t v159 = swift_bridgeObjectRetain();
    uint64_t v160 = sub_1003F1C90(v159, v216);
    v0[117] = v160;
    swift_bridgeObjectRelease();
    if (!v160[2] && !*(void *)(*v218 + 16))
    {
      if (qword_1009074B8 != -1) {
        swift_once();
      }
      uint64_t v198 = type metadata accessor for Logger();
      sub_10008E2DC(v198, (uint64_t)qword_100917450);
      uint64_t v199 = Logger.logObject.getter();
      os_log_type_t v200 = static os_log_type_t.info.getter();
      BOOL v201 = os_log_type_enabled(v199, v200);
      os_log_t v202 = (void *)v0[114];
      if (v201)
      {
        id v203 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v203 = 0;
        _os_log_impl((void *)&_mh_execute_header, v199, v200, "No records changed. Done", v203, 2u);
        swift_slowDealloc();

        swift_release();
      }
      else
      {
        swift_release();
      }
      goto LABEL_153;
    }
    if (qword_1009074B8 != -1) {
      swift_once();
    }
    uint64_t v161 = type metadata accessor for Logger();
    v0[118] = sub_10008E2DC(v161, (uint64_t)qword_100917450);
    swift_retain();
    uint64_t v162 = Logger.logObject.getter();
    os_log_type_t v163 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v162, v163))
    {
      uint64_t v164 = swift_slowAlloc();
      *(_DWORD *)uint64_t v164 = 134218240;
      *uint64_t v211 = v160[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v164 + 12) = 2048;
      swift_beginAccess();
      *uint64_t v212 = *(void *)(*v218 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v162, v163, "Updating Records {recordsToAdd.count: %ld, recordIDsToDelete.count: %ld}", (uint8_t *)v164, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }

    swift_beginAccess();
    uint64_t v165 = v0[83];
    v0[119] = v165;
    uint64_t v166 = *(void *)(v165 + 16);
    v0[120] = v166;
    uint64_t v167 = v0[95];
    if (v166)
    {
      int v168 = *((_DWORD *)v238 + 20);
      *((_DWORD *)v0 + 264) = v168;
      v0[121] = v238[9];
      uint64_t v169 = (void (*)(uint64_t, uint64_t, uint64_t))v238[2];
      v0[122] = v169;
      v0[123] = 0;
      uint64_t v170 = v0[94];
      uint64_t v171 = v0[93];
      uint64_t v172 = v165 + ((v168 + 32) & ~(unint64_t)v168);
      swift_bridgeObjectRetain();
      v169(v171, v172, v170);
      uint64_t v173 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v167 + 56);
      v0[124] = v173;
      v173(v171, 0, 1, v170);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v171, 1, v170) != 1)
      {
        uint64_t v174 = v0 + 18;
        uint64_t v175 = (void *)v0[114];
        uint64_t v176 = v0[97];
        uint64_t v177 = v0[95];
        uint64_t v178 = v0[94];
        (*(void (**)(uint64_t, void, uint64_t))(v177 + 32))(v176, v0[93], v178);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        v0[125] = isa;
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v176, v178);
        v0[18] = v0;
        v0[23] = v0 + 86;
        v0[19] = sub_1003F4BA0;
        uint64_t v180 = swift_continuation_init();
        v0[31] = _NSConcreteStackBlock;
        v0[32] = 0x40000000;
        v0[33] = sub_1003EDEB0;
        v0[34] = &unk_1008C4C48;
        v0[35] = v180;
        [v175 deleteSavedRecordWithIdentfier:isa completion:v0 + 31];
LABEL_120:
        return _swift_continuation_await(v174);
      }
    }
    else
    {
      uint64_t v181 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v167 + 56);
      uint64_t v182 = v0[94];
      uint64_t v183 = v0[93];
      swift_bridgeObjectRetain();
      v181(v183, 1, 1, v182);
    }
    uint64_t v184 = v0[117];
    swift_bridgeObjectRelease();
    char v185 = *(unsigned char *)(v184 + 32);
    *((unsigned char *)v0 + 1060) = v185;
    uint64_t v186 = -1;
    uint64_t v187 = -1 << v185;
    if (-(-1 << v185) < 64) {
      uint64_t v186 = ~(-1 << -(char)v187);
    }
    unint64_t v188 = v186 & *(void *)(v184 + 64);
    swift_retain();
    if (v188)
    {
      uint64_t v189 = 0;
      unint64_t v190 = __clz(__rbit64(v188));
      uint64_t v191 = (v188 - 1) & v188;
      uint64_t v21 = (void *)v0[117];
LABEL_119:
      uint64_t v174 = v0 + 2;
      v0[127] = v189;
      v0[126] = v191;
      uint64_t v192 = (void *)v0[114];
      uint64_t v193 = v0[96];
      v0[128] = *(void *)(v21[7] + 8 * v190);
      swift_bridgeObjectRetain();
      Class v194 = Data._bridgeToObjectiveC()().super.isa;
      v0[129] = v194;
      Class v195 = Dictionary._bridgeToObjectiveC()().super.isa;
      v0[130] = v195;
      v0[2] = v0;
      v0[7] = v193;
      v0[3] = sub_1003F5264;
      uint64_t v196 = swift_continuation_init();
      v0[36] = _NSConcreteStackBlock;
      v0[37] = 0x40000000;
      v0[38] = sub_1003EDF04;
      v0[39] = &unk_1008C4C30;
      v0[40] = v196;
      [v192 saveRecordWithData:v194 recordInfo:v195 completion:v0 + 36];
      goto LABEL_120;
    }
    unint64_t v27 = 63 - v187;
    uint64_t v21 = (void *)v0[117];
    if ((unint64_t)(63 - v187) <= 0x7F) {
      goto LABEL_152;
    }
    unint64_t v197 = v21[9];
    if (v197)
    {
      uint64_t v189 = 1;
      goto LABEL_126;
    }
    if (v27 < 0xC0) {
      goto LABEL_152;
    }
    unint64_t v197 = v21[10];
    if (v197)
    {
      uint64_t v189 = 2;
      goto LABEL_126;
    }
LABEL_136:
    if (v27 < 0x100) {
      goto LABEL_152;
    }
    unint64_t v197 = v21[11];
    if (!v197) {
      goto LABEL_140;
    }
    uint64_t v189 = 3;
LABEL_126:
    uint64_t v191 = (v197 - 1) & v197;
    unint64_t v190 = __clz(__rbit64(v197)) + (v189 << 6);
    goto LABEL_119;
  }
  unint64_t v27 = *(void *)(v227 + 8 * v31);
  if (v27)
  {
LABEL_18:
    int64_t v30 = v31;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v228) {
      goto LABEL_104;
    }
    unint64_t v27 = *(void *)(v227 + 8 * v30);
    ++v31;
    if (v27) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_140:
  if (v27 >= 0x140)
  {
    unint64_t v197 = v21[12];
    if (v197)
    {
      uint64_t v189 = 4;
      goto LABEL_126;
    }
    if (v27 >= 0x180)
    {
      unint64_t v197 = v21[13];
      if (v197)
      {
        uint64_t v189 = 5;
        goto LABEL_126;
      }
      uint64_t v204 = 0;
      uint64_t v205 = v27 >> 6;
      if (v205 <= 6) {
        uint64_t v205 = 6;
      }
      uint64_t v206 = v205 - 6;
      while (v206 != v204)
      {
        unint64_t v197 = v21[v204++ + 14];
        if (v197)
        {
          uint64_t v189 = v204 + 5;
          goto LABEL_126;
        }
      }
    }
  }
LABEL_152:

  swift_release_n();
LABEL_153:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v207 = (uint64_t (*)(void))v0[1];
  return v207();
}

uint64_t sub_1003F4BA0()
{
  return _swift_task_switch(sub_1003F4C80, 0, 0);
}

uint64_t sub_1003F4C80()
{
  uint64_t v1 = *(void **)(v0 + 1000);
  uint64_t v2 = *(void *)(v0 + 960);
  uint64_t v3 = *(void *)(v0 + 984) + 1;
  swift_errorRelease();

  if (v3 == v2)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 992))(*(void *)(v0 + 744), 1, 1, *(void *)(v0 + 752));
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 984) + 1;
    *(void *)(v0 + 984) = v4;
    uint64_t v5 = *(void *)(v0 + 760);
    uint64_t v6 = *(void *)(v0 + 752);
    uint64_t v7 = *(void *)(v0 + 744);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 976))(v7, *(void *)(v0 + 952)+ ((*(unsigned __int8 *)(v0 + 1056) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1056))+ *(void *)(v0 + 968) * v4, v6);
    uint64_t v8 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56);
    *(void *)(v0 + 992) = v8;
    v8(v7, 0, 1, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v6) != 1)
    {
      uint64_t v18 = v0 + 144;
      id v36 = *(id *)(v0 + 912);
      uint64_t v26 = *(void *)(v0 + 776);
      uint64_t v27 = *(void *)(v0 + 760);
      uint64_t v28 = *(void *)(v0 + 752);
      (*(void (**)(uint64_t, void, uint64_t))(v27 + 32))(v26, *(void *)(v0 + 744), v28);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 1000) = isa;
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
      *(void *)(v0 + 144) = v0;
      *(void *)(v0 + 184) = v0 + 688;
      *(void *)(v0 + 152) = sub_1003F4BA0;
      uint64_t v30 = swift_continuation_init();
      *(void *)(v0 + 248) = _NSConcreteStackBlock;
      *(void *)(v0 + 256) = 0x40000000;
      *(void *)(v0 + 264) = sub_1003EDEB0;
      *(void *)(v0 + 272) = &unk_1008C4C48;
      *(void *)(v0 + 280) = v30;
      [v36 deleteSavedRecordWithIdentfier:isa completion:v0 + 248];
      goto LABEL_14;
    }
  }
  uint64_t v9 = *(void *)(v0 + 936);
  swift_bridgeObjectRelease();
  char v10 = *(unsigned char *)(v9 + 32);
  *(unsigned char *)(v0 + 1060) = v10;
  uint64_t v11 = -1;
  uint64_t v12 = -1 << v10;
  if (-(-1 << v10) < 64) {
    uint64_t v11 = ~(-1 << -(char)v12);
  }
  unint64_t v13 = v11 & *(void *)(v9 + 64);
  swift_retain();
  if (v13)
  {
    uint64_t v14 = 0;
    unint64_t v15 = __clz(__rbit64(v13));
    uint64_t v16 = (v13 - 1) & v13;
    uint64_t v17 = *(void **)(v0 + 936);
LABEL_8:
    uint64_t v18 = v0 + 16;
    *(void *)(v0 + 1016) = v14;
    *(void *)(v0 + 1008) = v16;
    uint64_t v19 = *(void **)(v0 + 912);
    uint64_t v20 = *(void *)(v0 + 768);
    *(void *)(v0 + 1024) = *(void *)(v17[7] + 8 * v15);
    swift_bridgeObjectRetain();
    Class v21 = Data._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 1032) = v21;
    Class v22 = Dictionary._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 1040) = v22;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v20;
    *(void *)(v0 + 24) = sub_1003F5264;
    uint64_t v23 = swift_continuation_init();
    *(void *)(v0 + 288) = _NSConcreteStackBlock;
    *(void *)(v0 + 296) = 0x40000000;
    *(void *)(v0 + 304) = sub_1003EDF04;
    *(void *)(v0 + 312) = &unk_1008C4C30;
    *(void *)(v0 + 320) = v23;
    [v19 saveRecordWithData:v21 recordInfo:v22 completion:v0 + 288];
LABEL_14:
    return _swift_continuation_await(v18);
  }
  unint64_t v24 = 63 - v12;
  uint64_t v17 = *(void **)(v0 + 936);
  if ((unint64_t)(63 - v12) > 0x7F)
  {
    unint64_t v25 = v17[9];
    if (v25)
    {
      uint64_t v14 = 1;
LABEL_12:
      uint64_t v16 = (v25 - 1) & v25;
      unint64_t v15 = __clz(__rbit64(v25)) + (v14 << 6);
      goto LABEL_8;
    }
    if (v24 >= 0xC0)
    {
      unint64_t v25 = v17[10];
      if (v25)
      {
        uint64_t v14 = 2;
        goto LABEL_12;
      }
      if (v24 >= 0x100)
      {
        unint64_t v25 = v17[11];
        if (v25)
        {
          uint64_t v14 = 3;
          goto LABEL_12;
        }
        if (v24 >= 0x140)
        {
          unint64_t v25 = v17[12];
          if (v25)
          {
            uint64_t v14 = 4;
            goto LABEL_12;
          }
          if (v24 >= 0x180)
          {
            unint64_t v25 = v17[13];
            if (v25)
            {
              uint64_t v14 = 5;
              goto LABEL_12;
            }
            uint64_t v31 = 0;
            uint64_t v32 = v24 >> 6;
            if (v32 <= 6) {
              uint64_t v32 = 6;
            }
            uint64_t v33 = v32 - 6;
            while (v33 != v31)
            {
              unint64_t v25 = v17[v31++ + 14];
              if (v25)
              {
                uint64_t v14 = v31 + 5;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
  }

  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t sub_1003F5264()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 1048) = v1;
  if (v1)
  {
    uint64_t v2 = sub_1003F5A90;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1003F537C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003F537C()
{
  uint64_t v1 = *(void **)(v0 + 1040);
  uint64_t v2 = *(void **)(v0 + 1032);
  (*(void (**)(void, void))(*(void *)(v0 + 760) + 8))(*(void *)(v0 + 768), *(void *)(v0 + 752));

  int64_t v4 = *(void *)(v0 + 1016);
  unint64_t v5 = *(void *)(v0 + 1008);
  if (v5)
  {
    uint64_t v6 = (v5 - 1) & v5;
    unint64_t v7 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v8 = *(void *)(v0 + 936);
    goto LABEL_3;
  }
  int64_t v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  int64_t v15 = (unint64_t)((1 << *(unsigned char *)(v0 + 1060)) + 63) >> 6;
  uint64_t v8 = *(void *)(v0 + 936);
  if (v14 < v15)
  {
    uint64_t v16 = v8 + 64;
    unint64_t v17 = *(void *)(v8 + 64 + 8 * v14);
    ++v4;
    if (v17)
    {
LABEL_9:
      uint64_t v6 = (v17 - 1) & v17;
      unint64_t v7 = __clz(__rbit64(v17)) + (v4 << 6);
LABEL_3:
      *(void *)(v0 + 1016) = v4;
      *(void *)(v0 + 1008) = v6;
      uint64_t v9 = *(void **)(v0 + 912);
      uint64_t v10 = *(void *)(v0 + 768);
      *(void *)(v0 + 1024) = *(void *)(*(void *)(v8 + 56) + 8 * v7);
      swift_bridgeObjectRetain();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 1032) = isa;
      Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 1040) = v12;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v10;
      *(void *)(v0 + 24) = sub_1003F5264;
      uint64_t v13 = swift_continuation_init();
      *(void *)(v0 + 288) = _NSConcreteStackBlock;
      *(void *)(v0 + 296) = 0x40000000;
      *(void *)(v0 + 304) = sub_1003EDF04;
      *(void *)(v0 + 312) = &unk_1008C4C30;
      *(void *)(v0 + 320) = v13;
      [v9 saveRecordWithData:isa recordInfo:v12 completion:v0 + 288];
      uint64_t v3 = v0 + 16;
      return _swift_continuation_await(v3);
    }
    int64_t v4 = v14 + 1;
    if (v14 + 1 < v15)
    {
      unint64_t v17 = *(void *)(v16 + 8 * v4);
      if (v17) {
        goto LABEL_9;
      }
      int64_t v4 = v14 + 2;
      if (v14 + 2 < v15)
      {
        unint64_t v17 = *(void *)(v16 + 8 * v4);
        if (v17) {
          goto LABEL_9;
        }
        int64_t v4 = v14 + 3;
        if (v14 + 3 < v15)
        {
          unint64_t v17 = *(void *)(v16 + 8 * v4);
          if (v17) {
            goto LABEL_9;
          }
          int64_t v18 = v14 + 4;
          if (v18 < v15)
          {
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (v17)
            {
              int64_t v4 = v18;
              goto LABEL_9;
            }
            while (1)
            {
              int64_t v4 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                break;
              }
              if (v4 >= v15) {
                goto LABEL_22;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v4);
              ++v18;
              if (v17) {
                goto LABEL_9;
              }
            }
LABEL_26:
            __break(1u);
            return _swift_continuation_await(v3);
          }
        }
      }
    }
  }
LABEL_22:

  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1003F5764()
{
  uint64_t v13 = v0;
  swift_willThrow();
  if (qword_1009074B8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100917450);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 920);
  if (v4)
  {
    uint64_t v11 = *(void **)(v0 + 912);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    *(void *)(v0 + 704) = v5;
    swift_errorRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 696) = sub_1000C51B8(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to fetch records {error: %{public}s}", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1003F5A90()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void **)(v0 + 1040);
  uint64_t v2 = *(void **)(v0 + 1032);
  swift_willThrow();

  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 1048);
    uint64_t v6 = swift_slowAlloc();
    v30[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    *(void *)(v0 + 680) = v5;
    swift_errorRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v6 + 4) = sub_1000C51B8(v7, v8, v30);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v6 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v9 = Dictionary.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    *(void *)(v6 + 14) = sub_1000C51B8(v9, v11, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to save record {error: %{public}s, record: %{public}s}", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v12 = swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
  }
  int64_t v13 = *(void *)(v0 + 1016);
  unint64_t v14 = *(void *)(v0 + 1008);
  if (v14)
  {
    uint64_t v15 = (v14 - 1) & v14;
    unint64_t v16 = __clz(__rbit64(v14)) | (v13 << 6);
    uint64_t v17 = *(void *)(v0 + 936);
    goto LABEL_6;
  }
  int64_t v23 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  int64_t v24 = (unint64_t)((1 << *(unsigned char *)(v0 + 1060)) + 63) >> 6;
  uint64_t v17 = *(void *)(v0 + 936);
  if (v23 < v24)
  {
    uint64_t v25 = v17 + 64;
    unint64_t v26 = *(void *)(v17 + 64 + 8 * v23);
    ++v13;
    if (v26)
    {
LABEL_12:
      uint64_t v15 = (v26 - 1) & v26;
      unint64_t v16 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_6:
      *(void *)(v0 + 1016) = v13;
      *(void *)(v0 + 1008) = v15;
      int64_t v18 = *(void **)(v0 + 912);
      uint64_t v19 = *(void *)(v0 + 768);
      *(void *)(v0 + 1024) = *(void *)(*(void *)(v17 + 56) + 8 * v16);
      swift_bridgeObjectRetain();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 1032) = isa;
      Class v21 = Dictionary._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 1040) = v21;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v19;
      *(void *)(v0 + 24) = sub_1003F5264;
      uint64_t v22 = swift_continuation_init();
      *(void *)(v0 + 288) = _NSConcreteStackBlock;
      *(void *)(v0 + 296) = 0x40000000;
      *(void *)(v0 + 304) = sub_1003EDF04;
      *(void *)(v0 + 312) = &unk_1008C4C30;
      *(void *)(v0 + 320) = v22;
      [v18 saveRecordWithData:isa recordInfo:v21 completion:v0 + 288];
      uint64_t v12 = v0 + 16;
      return _swift_continuation_await(v12);
    }
    int64_t v13 = v23 + 1;
    if (v23 + 1 < v24)
    {
      unint64_t v26 = *(void *)(v25 + 8 * v13);
      if (v26) {
        goto LABEL_12;
      }
      int64_t v13 = v23 + 2;
      if (v23 + 2 < v24)
      {
        unint64_t v26 = *(void *)(v25 + 8 * v13);
        if (v26) {
          goto LABEL_12;
        }
        int64_t v13 = v23 + 3;
        if (v23 + 3 < v24)
        {
          unint64_t v26 = *(void *)(v25 + 8 * v13);
          if (v26) {
            goto LABEL_12;
          }
          int64_t v27 = v23 + 4;
          if (v27 < v24)
          {
            unint64_t v26 = *(void *)(v25 + 8 * v27);
            if (v26)
            {
              int64_t v13 = v27;
              goto LABEL_12;
            }
            while (1)
            {
              int64_t v13 = v27 + 1;
              if (__OFADD__(v27, 1)) {
                break;
              }
              if (v13 >= v24) {
                goto LABEL_25;
              }
              unint64_t v26 = *(void *)(v25 + 8 * v13);
              ++v27;
              if (v26) {
                goto LABEL_12;
              }
            }
LABEL_29:
            __break(1u);
            return _swift_continuation_await(v12);
          }
        }
      }
    }
  }
LABEL_25:

  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

unint64_t sub_1003F6034()
{
  unint64_t result = qword_100917650;
  if (!qword_100917650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100917650);
  }
  return result;
}

unint64_t sub_1003F6088()
{
  unint64_t result = qword_100917658;
  if (!qword_100917658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100917658);
  }
  return result;
}

uint64_t sub_1003F60DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_1003F613C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 reminder];
  *a2 = result;
  return result;
}

id sub_1003F6178(void *a1, id *a2)
{
  return [*a2 setReminder:*a1];
}

void sub_1003F619C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907710 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10008E2DC(v4, (uint64_t)qword_10091BA40);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_1003F08EC(a2, (uint64_t)v26);
  id v9 = a1;
  unint64_t v10 = Logger.logObject.getter();
  int v11 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v10, (os_log_type_t)v11))
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v26);
    goto LABEL_7;
  }
  int v23 = v11;
  uint64_t v12 = swift_slowAlloc();
  uint64_t v22 = swift_slowAlloc();
  uint64_t v25 = v22;
  *(_DWORD *)uint64_t v12 = 136446466;
  id v13 = [v9 waiterID:v22];
  if (v13)
  {
    unint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    uint64_t v24 = sub_1000C51B8(v15, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v18 = v27;
    uint64_t v19 = v28;
    sub_1000C0DE0(v26, v27);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
    uint64_t v24 = sub_1000C51B8(v20, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v26);
    _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v23, "Released babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_7:

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return;
  }

  __break(1u);
}

uint64_t destroy for RDAnalyticsActivity.RDAnalyticsRateReducer(uint64_t a1)
{
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
}

ValueMetadata *type metadata accessor for RDAnalyticsActivity.RDAnalyticsRateReducer()
{
  return &type metadata for RDAnalyticsActivity.RDAnalyticsRateReducer;
}

void sub_1003F64E4(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(0x44497463656A626FLL, 0xE800000000000000, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(a1, 1, AssociatedTypeWitness) == 1)
  {
    if (qword_1009074C8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_100917690);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      swift_getAssociatedTypeWitness();
      id v7 = [(id)swift_getObjCClassFromMetadata() description];
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      sub_1000C51B8(v8, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_1003F6798()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917690);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917690);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Int sub_1003F6860()
{
  return sub_10015BABC();
}

uint64_t sub_1003F687C()
{
  return String.hash(into:)();
}

Swift::Int sub_1003F6898()
{
  return sub_10015BB44();
}

uint64_t sub_1003F68B4@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B6B28;
  return sub_10015BB9C(v2, a1, a2);
}

void sub_1003F68C0(void *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x80000001007C70F0;
}

uint64_t sub_1003F68E0@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B52C8;
  return sub_10015BC18(a1, v2, a2);
}

unint64_t sub_1003F68EC()
{
  return 0xD000000000000017;
}

void sub_1003F6908(void *a1@<X8>)
{
  *a1 = &off_1008B6B60;
}

Swift::Int sub_1003F6918()
{
  return sub_10015BABC();
}

uint64_t sub_1003F6934()
{
  return String.hash(into:)();
}

Swift::Int sub_1003F6950()
{
  return sub_10015BB44();
}

uint64_t sub_1003F696C@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B6B88;
  return sub_10015BB9C(v2, a1, a2);
}

void sub_1003F6978(void *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001007C7110;
}

uint64_t sub_1003F6998@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B5300;
  return sub_10015BC18(a1, v2, a2);
}

unint64_t sub_1003F69A4()
{
  return 0xD000000000000010;
}

void sub_1003F69C0(void *a1@<X8>)
{
  *a1 = &off_1008B6BC0;
}

ValueMetadata *type metadata accessor for CDIngestionValidationError()
{
  return &type metadata for CDIngestionValidationError;
}

ValueMetadata *type metadata accessor for CDIngestorPredefinedIngestableKey.NoRelationshipOrderingValueKey()
{
  return &type metadata for CDIngestorPredefinedIngestableKey.NoRelationshipOrderingValueKey;
}

ValueMetadata *type metadata accessor for CDIngestorPredefinedIngestableKey()
{
  return &type metadata for CDIngestorPredefinedIngestableKey;
}

unsigned char *_s7remindd26CDIngestionValidationErrorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *id result = a2;
        return result;
      case 2:
        *(_WORD *)id result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)id result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *id result = 0;
      break;
    case 2:
      *(_WORD *)id result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1003F6AA0);
    case 4:
      *(_DWORD *)id result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CDIngestorPredefinedIngestableKey.NoOrderableRelationshipKey()
{
  return &type metadata for CDIngestorPredefinedIngestableKey.NoOrderableRelationshipKey;
}

uint64_t sub_1003F6AD8()
{
  return sub_1000B2138(&qword_1009176A8, &qword_1009176B0);
}

unint64_t sub_1003F6B04()
{
  unint64_t result = qword_1009176B8;
  if (!qword_1009176B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009176B8);
  }
  return result;
}

uint64_t sub_1003F6B58()
{
  return sub_1000B2138(&qword_1009176C0, &qword_1009176C8);
}

unint64_t sub_1003F6B84()
{
  unint64_t result = qword_1009176D0;
  if (!qword_1009176D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009176D0);
  }
  return result;
}

unint64_t sub_1003F6BDC()
{
  unint64_t result = qword_1009176D8;
  if (!qword_1009176D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009176D8);
  }
  return result;
}

uint64_t sub_1003F6C30(uint64_t a1)
{
  return sub_100156B24(a1, qword_1009176E0, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_1003F6C5C(uint64_t a1)
{
  return sub_100156B24(a1, qword_1009176F8, &qword_100907840, (uint64_t)qword_100942508);
}

unint64_t sub_1003F6C88(char a1)
{
  unint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6972745364697575;
      break;
    case 2:
      unint64_t result = 0x4C525574736F68;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0x6F54636E79536164;
      break;
    case 6:
      unint64_t result = 0x654B687375506164;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003F6D90(unsigned __int8 *a1, char *a2)
{
  return sub_1002F1BA0(*a1, *a2);
}

Swift::Int sub_1003F6D9C()
{
  return sub_1002F10B4();
}

uint64_t sub_1003F6DA8()
{
  return sub_1002F468C();
}

Swift::Int sub_1003F6DB0()
{
  return sub_1002F10B4();
}

unint64_t sub_1003F6DB8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1003F7320(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1003F6DE8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1003F6C88(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1003F6E14(void *a1@<X8>)
{
  *a1 = &off_1008B5778;
}

unint64_t sub_1003F6E24@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1003F7320(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1003F6E4C()
{
  return sub_1003F6C88(*v0);
}

uint64_t sub_1003F6E54(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002F171C(*a1, *a2);
}

Swift::Int sub_1003F6E60()
{
  return Hasher._finalize()();
}

uint64_t sub_1003F6EE4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003F6F54()
{
  return Hasher._finalize()();
}

uint64_t sub_1003F6FD4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B5278, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1003F7034(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x49746E756F636361;
  if (*v1) {
    uint64_t v2 = 0x44497473696CLL;
  }
  unint64_t v3 = 0xE900000000000044;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1003F7074(void *a1@<X8>)
{
  *a1 = &off_1008B6BE8;
}

uint64_t sub_1003F7084@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  uint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._uint64_t object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B5278, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1003F70E8()
{
  if (*v0) {
    return 0x44497473696CLL;
  }
  else {
    return 0x49746E756F636361;
  }
}

uint64_t type metadata accessor for REMCalDAVNotificationCDIngestor()
{
  return self;
}

_UNKNOWN **sub_1003F7148()
{
  return &off_1008C4F70;
}

_UNKNOWN **sub_1003F7154()
{
  return &off_1008C4F40;
}

id sub_1003F7160(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a5)
  {
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v15 = 0;
  }
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a6, 1, v16) != 1)
  {
    URL._bridgeToObjectiveC()(v18);
    uint64_t v19 = v20;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a6, v16);
  }
  if (!a8)
  {
    NSString v21 = 0;
    if (a10) {
      goto LABEL_8;
    }
LABEL_10:
    NSString v22 = 0;
    goto LABEL_11;
  }
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a10) {
    goto LABEL_10;
  }
LABEL_8:
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_11:
  id v23 = [v25 initCalDAVNotificationWithObjectID:a1 accountID:a2 listID:a3 uuidString:v15 hostURL:v19 externalIdentifier:v21 externalModificationTag:v22];

  return v23;
}

unint64_t sub_1003F7320(Swift::String string)
{
  uint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._uint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4CC0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

void sub_1003F736C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v52 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v9 - 8);
  Swift::Int v58 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for UUID();
  int v11 = *(void (***)(char *, char *, uint64_t))(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v56 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003F64E4((uint64_t)&v60);
  uint64_t v13 = v60;
  uint64_t v59 = v6;
  if (v60 == 7)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15) {
      goto LABEL_36;
    }
    return;
  }
  uint64_t v51 = v11;
  uint64_t v53 = v7;
  uint64_t v16 = *(void *)(a3 + 16);
  if (!v16)
  {
    uint64_t v14 = 0;
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  unint64_t v54 = (unint64_t)"externalIdentifier";
  unint64_t v55 = (unint64_t)"shouldUpdateSectionsOrdering";
  while (2)
  {
    uint64_t v18 = a3 + v17++;
    unint64_t v19 = 0xE800000000000000;
    unint64_t v20 = 0x44497463656A626FLL;
    switch(*(unsigned char *)(v18 + 32))
    {
      case 1:
        unint64_t v20 = 0x6972745364697575;
        unint64_t v19 = 0xEA0000000000676ELL;
        break;
      case 2:
        unint64_t v19 = 0xE700000000000000;
        unint64_t v20 = 0x4C525574736F68;
        break;
      case 3:
        unint64_t v19 = v55 | 0x8000000000000000;
        unint64_t v20 = 0xD000000000000012;
        break;
      case 4:
        unint64_t v20 = 0xD000000000000017;
        unint64_t v19 = v54 | 0x8000000000000000;
        break;
      case 5:
        unint64_t v20 = 0x6F54636E79536164;
        unint64_t v19 = 0xEB000000006E656BLL;
        break;
      case 6:
        unint64_t v20 = 0x654B687375506164;
        unint64_t v19 = 0xE900000000000079;
        break;
      default:
        break;
    }
    unint64_t v21 = 0xE800000000000000;
    uint64_t v22 = 0x44497463656A626FLL;
    switch(v13)
    {
      case 1:
        unint64_t v21 = 0xEA0000000000676ELL;
        if (v20 == 0x6972745364697575) {
          goto LABEL_24;
        }
        goto LABEL_25;
      case 2:
        unint64_t v21 = 0xE700000000000000;
        if (v20 != 0x4C525574736F68) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 3:
        unint64_t v21 = v55 | 0x8000000000000000;
        if (v20 != 0xD000000000000012) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 4:
        unint64_t v21 = v54 | 0x8000000000000000;
        if (v20 != 0xD000000000000017) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 5:
        uint64_t v22 = 0x6F54636E79536164;
        unint64_t v21 = 0xEB000000006E656BLL;
        goto LABEL_23;
      case 6:
        unint64_t v21 = 0xE900000000000079;
        if (v20 != 0x654B687375506164) {
          goto LABEL_25;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (v20 != v22) {
          goto LABEL_25;
        }
LABEL_24:
        if (v19 == v21)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_33;
        }
LABEL_25:
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0)
        {
          if (v16 == v17)
          {
            swift_bridgeObjectRelease();
            uint64_t v14 = 0;
            goto LABEL_34;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_33:
        uint64_t v14 = 1;
LABEL_34:
        uint64_t v6 = v59;
LABEL_35:
        uint64_t v7 = v53;
        int v11 = v51;
        uint64_t v15 = *(void *)(a3 + 16);
        if (v15)
        {
LABEL_36:
          uint64_t v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
          uint64_t v51 = (void (**)(char *, char *, uint64_t))(v7 + 32);
          uint64_t v49 = (void (**)(char *, uint64_t))(v7 + 8);
          unint64_t v54 = (unint64_t)(v11 + 1);
          unint64_t v55 = v7 + 56;
          swift_bridgeObjectRetain();
          uint64_t v24 = 0;
          uint64_t v53 = v15;
          while (2)
          {
            uint64_t v35 = *(unsigned __int8 *)(a3 + v24++ + 32);
            switch(v35)
            {
              case 1:
                v33.super.Class isa = (Class)[a1 uuidString];
                [a2 setUuidString:v33.super.isa];
                goto LABEL_38;
              case 2:
                v33.super.Class isa = (Class)[a1 hostURL];
                if (v33.super.isa)
                {
                  id v36 = v52;
                  static URL._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v37 = v58;
                  (*v51)(v58, v36, v6);
                  (*(void (**)(char *, void, uint64_t, uint64_t))v55)(v37, 0, 1, v6);
                  if ((*v50)(v37, 1, v6) == 1)
                  {
                    v33.super.Class isa = 0;
                  }
                  else
                  {
                    unint64_t v47 = v37;
                    URL._bridgeToObjectiveC()(v38);
                    v33.super.Class isa = v48;
                    (*v49)(v47, v6);
                  }
                }
                else
                {
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v55)(v58, 1, 1, v6);
                }
                [a2 setHostURL:v33.super.isa];
                goto LABEL_38;
              case 3:
                v33.super.Class isa = (Class)[a1 externalIdentifier];
                [a2 setExternalIdentifier:v33.super.isa];
                goto LABEL_38;
              case 4:
                v33.super.Class isa = (Class)[a1 externalModificationTag];
                [a2 setExternalModificationTag:v33.super.isa];
                goto LABEL_38;
              case 5:
                if (v14) {
                  goto LABEL_39;
                }
                if (qword_1009074D0 != -1) {
                  swift_once();
                }
                uint64_t v39 = type metadata accessor for Logger();
                sub_10008E2DC(v39, (uint64_t)qword_1009176E0);
                v33.super.Class isa = (Class)Logger.logObject.getter();
                os_log_type_t v40 = static os_log_type_t.fault.getter();
                if (!os_log_type_enabled((os_log_t)v33.super.isa, v40)) {
                  goto LABEL_58;
                }
                Swift::String v41 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)Swift::String v41 = 0;
                Class isa = v33.super.isa;
                os_log_type_t v43 = v40;
                char v44 = ".daSyncToken should not be practically used in REMCalDAVNotification";
                goto LABEL_57;
              case 6:
                if (v14) {
                  goto LABEL_39;
                }
                if (qword_1009074D0 != -1) {
                  swift_once();
                }
                uint64_t v45 = type metadata accessor for Logger();
                sub_10008E2DC(v45, (uint64_t)qword_1009176E0);
                v33.super.Class isa = (Class)Logger.logObject.getter();
                os_log_type_t v46 = static os_log_type_t.fault.getter();
                if (os_log_type_enabled((os_log_t)v33.super.isa, v46))
                {
                  Swift::String v41 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)Swift::String v41 = 0;
                  Class isa = v33.super.isa;
                  os_log_type_t v43 = v46;
                  char v44 = ".daPushKey should not be practically used in REMCalDAVNotification";
LABEL_57:
                  _os_log_impl((void *)&_mh_execute_header, isa, v43, v44, v41, 2u);
                  swift_slowDealloc();
                  uint64_t v6 = v59;
                }
                else
                {
LABEL_58:
                  uint64_t v6 = v59;
                }
LABEL_38:

LABEL_39:
                if (v15 != v24) {
                  continue;
                }
                swift_bridgeObjectRelease();
                break;
              default:
                id v25 = [a1 objectID];
                id v26 = [v25 uuid];

                uint64_t v27 = a3;
                uint64_t v28 = v6;
                BOOL v29 = a1;
                uint64_t v30 = a2;
                uint64_t v31 = v14;
                uint64_t v32 = v56;
                static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                v33.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
                uint64_t v34 = v32;
                uint64_t v14 = v31;
                a2 = v30;
                a1 = v29;
                uint64_t v6 = v28;
                a3 = v27;
                uint64_t v15 = v53;
                (*(void (**)(char *, uint64_t))v54)(v34, v57);
                [a2 setIdentifier:v33.super.isa];
                goto LABEL_38;
            }
            break;
          }
        }
        return;
    }
  }
}

NSObject *sub_1003F7C60(void *a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E40);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  Swift::Int v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v59 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v59 - v9;
  uint64_t v63 = 0;
  id v11 = [a1 remObjectIDWithError:&v63];
  if (!v11)
  {
    char v23 = v63;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v23;
  }
  uint64_t v62 = v11;
  uint64_t v12 = v63;
  id v13 = [a1 account];
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = [v13 remObjectID];

    if (v15)
    {
      id v16 = [a1 owner];
      if (v16)
      {
        uint64_t v17 = v16;
        id v18 = [v16 remObjectID];

        if (v18)
        {
          id v19 = [a1 uuidString];
          if (v19)
          {
            unint64_t v20 = v19;
            uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v60 = v22;
            uint64_t v61 = v21;
          }
          else
          {
            uint64_t v60 = 0;
            uint64_t v61 = 0;
          }
          id v44 = [a1 hostURL];
          if (v44)
          {
            uint64_t v45 = v44;
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v46 = type metadata accessor for URL();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v8, 0, 1, v46);
          }
          else
          {
            uint64_t v47 = type metadata accessor for URL();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v8, 1, 1, v47);
          }
          char v48 = v18;
          sub_10036B73C((uint64_t)v8, (uint64_t)v10);
          id v49 = [a1 externalIdentifier];
          if (v49)
          {
            uint64_t v50 = v49;
            uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v52 = v51;
          }
          else
          {
            uint64_t v59 = 0;
            uint64_t v52 = 0;
          }
          id v53 = [a1 externalModificationTag:v59];
          if (v53)
          {
            unint64_t v54 = v53;
            uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v57 = v56;
          }
          else
          {
            uint64_t v55 = 0;
            uint64_t v57 = 0;
          }
          sub_10016D52C((uint64_t)v10, (uint64_t)v5);
          id v58 = objc_allocWithZone((Class)REMCalDAVNotification);
          char v23 = sub_1003F7160(v62, v15, v48, v61, v60, (uint64_t)v5, v59, v52, v55, v57);
          sub_10016D594((uint64_t)v10);
          return v23;
        }
      }
    }
  }
  id v24 = [a1 account];

  if (v24)
  {
    id v25 = v62;
  }
  else
  {
    id v25 = v62;
    if (qword_1009074D8 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_1009176F8);
    uint64_t v27 = v25;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 138412290;
      uint64_t v63 = v27;
      uint64_t v32 = v27;
      id v25 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v25;

      _os_log_impl((void *)&_mh_execute_header, v28, v29, "REMCalDAVNotificationCDIngestor: cdCalDAVNotification.account is nil {cdCalDAVNotification.remObjectID: %@}", v30, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v28 = v27;
    }
  }
  id v33 = [a1 owner];

  if (!v33)
  {
    swift_bridgeObjectRelease();
    if (qword_1009074D8 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_10008E2DC(v34, (uint64_t)qword_1009176F8);
    uint64_t v35 = v25;
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 138412290;
      uint64_t v63 = v35;
      os_log_type_t v40 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v39 = v25;

      _os_log_impl((void *)&_mh_execute_header, v36, v37, "REMCalDAVNotificationCDIngestor: cdCalDAVNotification.owner is nil {cdCalDAVNotification.remObjectID: %@}", v38, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v36 = v35;
    }
  }
  char v23 = self;
  sub_1003F8394();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v23 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v42];

  swift_willThrow();
  return v23;
}

unint64_t sub_1003F8394()
{
  unint64_t result = qword_100921E40;
  if (!qword_100921E40)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100921E40);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for REMCalDAVNotificationCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003F84A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMCalDAVNotificationCDIngestor.RelationshipKey()
{
  return &type metadata for REMCalDAVNotificationCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for RDDynamicXPCActivity.MotionState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for REMCalDAVNotificationCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003F8634);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMCalDAVNotificationCDIngestor.ValueKey()
{
  return &type metadata for REMCalDAVNotificationCDIngestor.ValueKey;
}

uint64_t sub_1003F866C()
{
  return sub_1000B2138(&qword_100917900, &qword_100917908);
}

unint64_t sub_1003F8698()
{
  unint64_t result = qword_100917910;
  if (!qword_100917910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100917910);
  }
  return result;
}

uint64_t sub_1003F86EC()
{
  return sub_1000B2138(&qword_100917918, &qword_100917920);
}

unint64_t sub_1003F8718()
{
  unint64_t result = qword_100917928;
  if (!qword_100917928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100917928);
  }
  return result;
}

uint64_t static REMCDTemplate.cdEntityName.getter()
{
  id v0 = [self cdEntityName];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t sub_1003F87CC(uint64_t a1)
{
  return sub_100156B24(a1, qword_100917930, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_1003F87F8(uint64_t a1)
{
  return sub_100156B24(a1, qword_100917948, &qword_100907840, (uint64_t)qword_100942508);
}

Swift::Int __swiftcall REMCDTemplate.parentEffectiveMinimumSupportedVersion()()
{
  id v1 = [v0 parentAccount];
  if (!v1) {
    return kREMSupportedVersionUnset;
  }
  int v2 = v1;
  id v3 = [v1 effectiveMinimumSupportedVersion];

  return (Swift::Int)v3;
}

uint64_t static REMCDTemplate.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0 = sub_10012674C((uint64_t)&off_1008B6C10);
  swift_arrayDestroy();
  return v0;
}

Swift::Bool __swiftcall REMCDTemplate.isConnected(toAccountObject:)(NSMutableDictionary toAccountObject)
{
  id v3 = [v1 remObjectID];
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = v3;
  if ([(objc_class *)toAccountObject.super.super.isa objectForKeyedSubscript:v3])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_100096408((uint64_t)v13, (uint64_t)v14, &qword_100908190);
  if (!v14[3])
  {
    sub_1000966BC((uint64_t)v14, &qword_100908190);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    id v6 = v4;
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    [(objc_class *)toAccountObject.super.super.isa setObject:isa forKeyedSubscript:v6];

    id v8 = [v1 parentAccount];
    if (v8)
    {
      uint64_t v9 = v8;
      unsigned int v5 = [v8 isConnectedToAccountObject:toAccountObject.super.super.isa];

      v14[0] = v5;
      type metadata accessor for REMObjectIsConnectedState(0);
      id v10 = v6;
      [(objc_class *)toAccountObject.super.super.isa setObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() forKeyedSubscript:v10];

      swift_unknownObjectRelease();
      return v5;
    }

LABEL_12:
    LOBYTE(v5) = 0;
    return v5;
  }

  LOBYTE(v5) = v12 == 1;
  return v5;
}

id REMCDTemplate.publicLink.getter()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)v76 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v89 = v4;
  uint64_t v90 = v5;
  __chkstk_darwin(v4);
  BOOL v7 = (char *)v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v84 = (char *)v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v85 = (char *)v76 - v12;
  __chkstk_darwin(v13);
  uint64_t v87 = (char *)v76 - v14;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v76 - v16;
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)v76 - v19;
  uint64_t v21 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v21 - 8);
  uint64_t v83 = (char *)v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v86 = (char *)v76 - v24;
  __chkstk_darwin(v25);
  uint64_t v88 = (char *)v76 - v26;
  __chkstk_darwin(v27);
  os_log_type_t v29 = (char *)v76 - v28;
  *(void *)&double v31 = __chkstk_darwin(v30).n128_u64[0];
  id v33 = (char *)v76 - v32;
  id v34 = [v0 mostRecentPublicLinkUpdateRequestDate:v31];
  if (!v34)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v33, 1, 1, v8);
    goto LABEL_6;
  }
  uint64_t v35 = v34;
  unint64_t v80 = v17;
  uint64_t v82 = v7;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v79 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v79(v33, v20, v8);
  id v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
  v36(v33, 0, 1, v8);
  uint64_t v78 = v9;
  uint64_t v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v81(v33, 1, v8) == 1)
  {
LABEL_6:
    os_log_type_t v40 = (uint64_t *)&unk_100909A40;
    uint64_t v41 = (uint64_t)v33;
    goto LABEL_7;
  }
  uint64_t v77 = v36;
  sub_1000966BC((uint64_t)v33, (uint64_t *)&unk_100909A40);
  id v37 = [self sharedInstance];
  v91[3] = sub_1000963CC(0, &qword_100917968);
  v91[4] = &off_1008C96B8;
  v91[0] = v37;
  sub_1003F9EC8(v91, (uint64_t)v3);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v91);
  uint64_t v38 = v89;
  uint64_t v39 = v90;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v3, 1, v89) != 1)
  {
    v76[1] = (id)(v9 + 56);
    id v44 = v82;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v82, v3, v38);
    id v45 = REMCDTemplate.publicLinkConfiguration.getter();
    if (!v45)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v44, v38);
      return 0;
    }
    uint64_t v46 = v45;
    id v47 = [v0 publicLinkCreationDate];
    if (v47)
    {
      char v48 = v47;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v49 = v79;
      v79(v29, v20, v8);
      uint64_t v50 = v77;
      v77(v29, 0, 1, v8);
      if (v81(v29, 1, v8) != 1)
      {
        v49(v80, v29, v8);
        id v51 = [v0 publicLinkLastModifiedDate];
        if (v51)
        {
          uint64_t v52 = v49;
          id v53 = v51;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v33 = v88;
          v52(v88, v20, v8);
          v50(v33, 0, 1, v8);
          if (v81(v33, 1, v8) != 1)
          {
            v76[0] = v46;
            v52(v87, v33, v8);
            id v54 = [v0 publicLinkExpirationDate];
            if (v54)
            {
              uint64_t v55 = v52;
              uint64_t v56 = v54;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              os_log_type_t v29 = v86;
              v55(v86, v20, v8);
              v50(v29, 0, 1, v8);
              if (v81(v29, 1, v8) != 1)
              {
                v55(v85, v29, v8);
                id v57 = [v0 lastModifiedDate];
                if (v57)
                {
                  id v58 = v57;
                  static Date._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v59 = (uint64_t)v83;
                  v55(v83, v20, v8);
                  v50((char *)v59, 0, 1, v8);
                  unsigned int v60 = v81((char *)v59, 1, v8);
                  uint64_t v61 = v84;
                  if (v60 != 1)
                  {
                    v55(v84, (char *)v59, v8);
LABEL_30:
                    uint64_t v63 = v78;
                    char v64 = static Date.< infix(_:_:)();
                    unint64_t v65 = *(void (**)(char *, uint64_t))(v63 + 8);
                    v65(v61, v8);
                    id v66 = objc_allocWithZone((Class)REMTemplatePublicLink);
                    URL._bridgeToObjectiveC()(v67);
                    uint64_t v69 = v68;
                    Class isa = Date._bridgeToObjectiveC()().super.isa;
                    Class v71 = Date._bridgeToObjectiveC()().super.isa;
                    os_log_type_t v72 = v85;
                    Class v73 = Date._bridgeToObjectiveC()().super.isa;
                    uint64_t v74 = v66;
                    id v75 = v76[0];
                    id v42 = [v74 initWithURL:v69 configuration:v76[0] creationDate:isa lastModifiedDate:v71 expirationDate:v73 canBeUpdated:v64 & 1];

                    v65(v72, v8);
                    v65(v87, v8);
                    v65(v80, v8);
                    (*(void (**)(char *, uint64_t))(v90 + 8))(v82, v89);
                    return v42;
                  }
                }
                else
                {
                  uint64_t v59 = (uint64_t)v83;
                  v50(v83, 1, 1, v8);
                  uint64_t v61 = v84;
                }
                static Date.distantPast.getter();
                sub_1000966BC(v59, (uint64_t *)&unk_100909A40);
                goto LABEL_30;
              }
            }
            else
            {
              os_log_type_t v29 = v86;
              v50(v86, 1, 1, v8);
            }

            uint64_t v62 = *(void (**)(char *, uint64_t))(v78 + 8);
            v62(v87, v8);
            v62(v80, v8);
LABEL_23:
            (*(void (**)(char *, uint64_t))(v90 + 8))(v82, v89);
            os_log_type_t v40 = (uint64_t *)&unk_100909A40;
            uint64_t v41 = (uint64_t)v29;
            goto LABEL_7;
          }
        }
        else
        {
          id v33 = v88;
          v50(v88, 1, 1, v8);
        }

        (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v8);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v82, v89);
        goto LABEL_6;
      }
    }
    else
    {
      v77(v29, 1, 1, v8);
    }

    goto LABEL_23;
  }
  os_log_type_t v40 = (uint64_t *)&unk_100909E40;
  uint64_t v41 = (uint64_t)v3;
LABEL_7:
  sub_1000966BC(v41, v40);
  return 0;
}

id REMCDTemplate.publicLinkConfiguration.getter()
{
  id v1 = [v0 publicLinkConfigurationData];
  if (v1)
  {
    uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v4 = v3;

    sub_1000963CC(0, &qword_100917970);
    sub_1000963CC(0, (unint64_t *)&unk_100917978);
    id v1 = (id)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    sub_100097F34(v2, v4);
  }
  return v1;
}

void REMCDTemplate.publicLinkConfiguration.setter(void *a1)
{
  if (a1)
  {
    id v3 = a1;
    id v32 = 0;
    id v5 = [self archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v32];
    id v6 = v32;
    if (v5)
    {
      uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100097F34(v7, v9);
      [v1 setPublicLinkConfigurationData:isa];
    }
    else
    {
      uint64_t v11 = v6;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1009074E0 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_10008E2DC(v12, (uint64_t)qword_100917930);
      id v13 = v3;
      id v14 = v1;
      swift_errorRetain();
      id v15 = v13;
      id v16 = v14;
      swift_errorRetain();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        id v32 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136446722;
        id v21 = [v16 remObjectID];
        double v31 = (void *)v20;
        os_log_type_t v30 = v18;
        if (v21)
        {
          uint64_t v22 = v21;
          id v23 = [v21 description];

          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v26 = v25;
        }
        else
        {
          unint64_t v26 = 0xE300000000000000;
          uint64_t v24 = 7104878;
        }
        sub_1000C51B8(v24, v26, (uint64_t *)&v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2114;
        id v27 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *double v31 = a1;

        *(_WORD *)(v19 + 22) = 2082;
        swift_getErrorValue();
        uint64_t v28 = Error.rem_errorDescription.getter();
        sub_1000C51B8(v28, v29, (uint64_t *)&v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v30, "Failed to set '\\REMCDTemplate.publicLinkConfiguration' due to error upon encoding 'newValue' as 'Data' {remObjectID: %{public}s, newValue: %{public}@, error: %{public}s}", (uint8_t *)v19, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }

      [v16 setPublicLinkConfigurationData:0];
      swift_errorRelease();
    }
  }
  else
  {
    [v1 setPublicLinkConfigurationData:0];
  }
}

void (*REMCDTemplate.publicLinkConfiguration.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = REMCDTemplate.publicLinkConfiguration.getter();
  return sub_1003F9E60;
}

void sub_1003F9E60(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    REMCDTemplate.publicLinkConfiguration.setter(v2);
  }
  else
  {
    REMCDTemplate.publicLinkConfiguration.setter(*a1);
  }
}

uint64_t sub_1003F9EC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  uint64_t v107 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v99 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v99);
  uint64_t v102 = (uint64_t)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v104 = (char *)&v97 - v7;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_1009179C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URLComponents();
  uint64_t v105 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v103 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v13 - 8);
  id v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v101 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  id v21 = (char *)&v97 - v20;
  *(void *)&double v23 = __chkstk_darwin(v22).n128_u64[0];
  unint64_t v25 = (char *)&v97 - v24;
  id v26 = [v3 publicLinkURLUUID:v23];
  if (!v26)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    goto LABEL_11;
  }
  id v27 = v26;
  uint64_t v106 = v25;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v28(v15, v21, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
LABEL_11:
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
LABEL_12:
    uint64_t v41 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v107, 1, 1, v41);
  }
  v28(v106, v15, v16);
  id v29 = [v3 parentAccount];
  if (v29)
  {
    os_log_type_t v30 = v29;
    id v31 = [v29 ckIdentifier];

    if (v31)
    {
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v33;

      uint64_t v35 = a1[3];
      uint64_t v36 = a1[4];
      sub_1000C0DE0(a1, v35);
      uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8))(v32, v34, v35, v36);
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      if (v39)
      {
        uint64_t v40 = HIBYTE(v39) & 0xF;
        if ((v39 & 0x2000000000000000) == 0) {
          uint64_t v40 = v37 & 0xFFFFFFFFFFFFLL;
        }
        if (v40)
        {
          int v98 = 1;
          goto LABEL_15;
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  uint64_t v37 = *(void *)&v3[OBJC_IVAR___REMCDTemplate_defaultPublicLinkURLHostname];
  unint64_t v39 = *(void *)&v3[OBJC_IVAR___REMCDTemplate_defaultPublicLinkURLHostname + 8];
  swift_bridgeObjectRetain();
  int v98 = 0;
LABEL_15:
  uint64_t v109 = 0;
  unint64_t v110 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v109 = 0x2F2F3A7370747468;
  unint64_t v110 = 0xE800000000000000;
  swift_bridgeObjectRetain();
  v43._uint64_t countAndFlagsBits = v37;
  v43._uint64_t object = (void *)v39;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t object = (void *)0x80000001007D4250;
  v44._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v44);
  id v45 = v106;
  v46._uint64_t countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  URLComponents.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v47 = v105;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v10, 1, v11) == 1)
  {
    uint64_t v105 = v37;
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_1009179C0);
    if (qword_1009074E8 != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    sub_10008E2DC(v48, (uint64_t)qword_100917948);
    id v49 = v101;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v101, v45, v16);
    uint64_t v50 = v3;
    swift_bridgeObjectRetain();
    id v51 = v50;
    uint64_t v52 = Logger.logObject.getter();
    int v53 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v52, (os_log_type_t)v53))
    {
      LODWORD(v104) = v53;
      uint64_t v54 = swift_slowAlloc();
      uint64_t v103 = (char *)swift_slowAlloc();
      uint64_t v108 = v103;
      *(_DWORD *)uint64_t v54 = 136316162;
      uint64_t v109 = ObjectType;
      swift_getMetatypeMetadata();
      uint64_t v55 = String.init<A>(describing:)();
      uint64_t v109 = sub_1000C51B8(v55, v56, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v54 + 12) = 2082;
      id v57 = [v51 remObjectID];
      if (v57)
      {
        id v58 = v57;
        id v59 = [v57 description];

        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v62 = v61;
      }
      else
      {
        uint64_t v60 = 7104878;
        unint64_t v62 = 0xE300000000000000;
      }
      uint64_t v109 = sub_1000C51B8(v60, v62, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v54 + 22) = 2082;
      Class v71 = v101;
      uint64_t v72 = UUID.uuidString.getter();
      uint64_t v109 = sub_1000C51B8(v72, v73, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v74 = *(void (**)(char *, uint64_t))(v17 + 8);
      v74(v71, v16);
      *(_WORD *)(v54 + 32) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v109 = sub_1000C51B8(v105, v39, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v54 + 42) = 2082;
      if (v98) {
        uint64_t v75 = 1702195828;
      }
      else {
        uint64_t v75 = 0x65736C6166;
      }
      if (v98) {
        unint64_t v76 = 0xE400000000000000;
      }
      else {
        unint64_t v76 = 0xE500000000000000;
      }
      uint64_t v109 = sub_1000C51B8(v75, v76, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v104, "%s: Failed to compute public link URL {templateID: %{public}s, publicLinkURLUUID: %{public}s, hostname: %{public}s, isUsingDisplayedHostnameOfACAccount: %{public}s}", (uint8_t *)v54, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v74(v106, v16);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      uint64_t v70 = *(void (**)(char *, uint64_t))(v17 + 8);
      v70(v49, v16);

      v70(v45, v16);
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  uint64_t v63 = v103;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v103, v10, v11);
  id v64 = [v3 name];
  if (v64)
  {
    unint64_t v65 = v64;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v66 = String.urlFragmentRepresentation.getter();
    unint64_t v68 = v67;
    swift_bridgeObjectRelease();
    if (v68)
    {
      uint64_t v69 = HIBYTE(v68) & 0xF;
      if ((v68 & 0x2000000000000000) == 0) {
        uint64_t v69 = v66 & 0xFFFFFFFFFFFFLL;
      }
      if (v69) {
        URLComponents.percentEncodedFragment.setter();
      }
      else {
        swift_bridgeObjectRelease();
      }
    }
  }
  uint64_t v77 = (uint64_t)v104;
  URLComponents.url.getter();
  if (qword_1009074E8 != -1) {
    swift_once();
  }
  uint64_t v78 = type metadata accessor for Logger();
  sub_10008E2DC(v78, (uint64_t)qword_100917948);
  uint64_t v79 = v102;
  sub_10016D52C(v77, v102);
  unint64_t v80 = v3;
  uint64_t v81 = Logger.logObject.getter();
  int v82 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v81, (os_log_type_t)v82))
  {
    LODWORD(v101) = v82;
    uint64_t v83 = swift_slowAlloc();
    uint64_t v97 = swift_slowAlloc();
    uint64_t v108 = (char *)v97;
    *(_DWORD *)uint64_t v83 = 136315906;
    uint64_t v109 = ObjectType;
    swift_getMetatypeMetadata();
    uint64_t v84 = String.init<A>(describing:)();
    uint64_t v109 = sub_1000C51B8(v84, v85, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v83 + 12) = 2082;
    id v86 = [v80 remObjectID];
    if (v86)
    {
      uint64_t v87 = v86;
      id v88 = [v86 description];

      uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v91 = v90;
    }
    else
    {
      uint64_t v89 = 7104878;
      unint64_t v91 = 0xE300000000000000;
    }
    uint64_t v109 = sub_1000C51B8(v89, v91, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v83 + 22) = 2082;
    uint64_t v92 = v102;
    uint64_t v93 = Optional.descriptionOrNil.getter();
    uint64_t v109 = sub_1000C51B8(v93, v94, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000966BC(v92, (uint64_t *)&unk_100909E40);
    *(_WORD *)(v83 + 32) = 2082;
    if (v98) {
      uint64_t v95 = 1702195828;
    }
    else {
      uint64_t v95 = 0x65736C6166;
    }
    if (v98) {
      unint64_t v96 = 0xE400000000000000;
    }
    else {
      unint64_t v96 = 0xE500000000000000;
    }
    uint64_t v109 = sub_1000C51B8(v95, v96, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v101, "%s: Computed public link URL {templateID: %{public}s, publicLinkURL: %{public}s, isUsingDisplayedHostnameOfACAccount: %{public}s}", (uint8_t *)v83, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v11);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v106, v16);
    uint64_t v77 = (uint64_t)v104;
  }
  else
  {

    sub_1000966BC(v79, (uint64_t *)&unk_100909E40);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v63, v11);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v106, v16);
  }
  return sub_100096408(v77, v107, (uint64_t *)&unk_100909E40);
}

uint64_t sub_1003FAC10(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1009074E0 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10008E2DC(v4, (uint64_t)qword_100917930);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  id v9 = a1;
  swift_retain_n();
  id v10 = v9;
  uint64_t v11 = Logger.logObject.getter();
  int v12 = static os_log_type_t.fault.getter();
  if (!os_log_type_enabled(v11, (os_log_type_t)v12))
  {

    swift_release_n();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  int v23 = v12;
  uint64_t v13 = swift_slowAlloc();
  uint64_t v24 = swift_slowAlloc();
  uint64_t v28 = v24;
  *(_DWORD *)uint64_t v13 = 136446466;
  v22[1] = v13 + 4;
  id v14 = [v10 remObjectID];
  uint64_t v26 = (uint64_t)v14;
  sub_100094134((uint64_t *)&unk_100914BC0);
  uint64_t v15 = Optional.descriptionOrNil.getter();
  unint64_t v17 = v16;

  uint64_t v26 = sub_1000C51B8(v15, v17, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v13 + 12) = 2082;
  uint64_t v18 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v19)
  {
    uint64_t v26 = sub_1000C51B8(v18, v19, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v23, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with newValue, which has incorrect type {objectID: %{public}s, keyPath: %{public}s}}", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_release();
  uint64_t v26 = 0;
  unint64_t v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v21._uint64_t object = (void *)0x80000001007CAF70;
  v21._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v21);
  uint64_t v25 = a2;
  sub_100094134(&qword_10090FF80);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id REMCDTemplate.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDTemplate();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

id REMCDTemplate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDTemplate();
  return [super dealloc];
}

Swift::Void __swiftcall REMCDTemplate.willSave_Swift()()
{
  if ((*(unsigned char *)(v0 + OBJC_IVAR___REMCDTemplate_didCleanUpManualSortHintOnMarkingForDeletion) & 1) == 0)
  {
    *(unsigned char *)(v0 + OBJC_IVAR___REMCDTemplate_didCleanUpManualSortHintOnMarkingForDeletion) = 1;
    sub_1003FB128();
  }
}

void sub_1003FB128()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  *(void *)&double v3 = __chkstk_darwin(v1).n128_u64[0];
  id v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend(v0, "markedForDeletion", v3)) {
    return;
  }
  id v6 = [v0 remObjectID];
  if (!v6) {
    return;
  }
  id v63 = v6;
  id v7 = [v0 storeControllerManagedObjectContext];
  if (!v7) {
    goto LABEL_21;
  }
  uint64_t v8 = v7;
  id v9 = [v0 account];
  if (!v9
    || (id v10 = v9, v11 = [v9 remObjectID], v10, !v11))
  {
    if (qword_1009074E0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E2DC(v27, (uint64_t)qword_100917930);
    id v11 = v0;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v30 = 136446210;
      id v31 = [v11 remObjectID];
      if (v31)
      {
        uint64_t v32 = v31;
        id v33 = [v31 description];

        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v36 = v35;
      }
      else
      {
        uint64_t v34 = 7104878;
        unint64_t v36 = 0xE300000000000000;
      }
      uint64_t v64 = sub_1000C51B8(v34, v36, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "cleanUpManualSortHintIfNeeded: Unexpectedly nil template account.remObjectID {templateID: %{public}s}", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_34;
    }

    goto LABEL_20;
  }
  id v12 = [v8 transactionAuthor];
  if (!v12
    || (uint64_t v13 = v12,
        static String._unconditionallyBridgeFromObjectiveC(_:)(),
        v13,
        v14._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        Swift::Bool v15 = String.hasPrefix(_:)(v14),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        v15))
  {
    if (qword_1009074E0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_100917930);
    id v17 = v0;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136446210;
      id v21 = [v17 remObjectID];
      if (v21)
      {
        uint64_t v22 = v21;
        id v23 = [v21 description];

        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v26 = v25;
      }
      else
      {
        uint64_t v24 = 7104878;
        unint64_t v26 = 0xE300000000000000;
      }
      uint64_t v64 = sub_1000C51B8(v24, v26, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "cleanUpManualSortHintIfNeeded: Template was deleted due to non-user-initiated changes, cleanup is not needed {templateID: %{public}s}", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_34:
      return;
    }

LABEL_20:
LABEL_21:
    id v37 = v63;

    return;
  }
  if (qword_1009074E0 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  uint64_t v39 = sub_10008E2DC(v38, (uint64_t)qword_100917930);
  id v40 = v0;
  uint64_t v41 = Logger.logObject.getter();
  int v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, (os_log_type_t)v42))
  {
    int v59 = v42;
    os_log_t v60 = v41;
    uint64_t v62 = v39;
    Swift::String v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    uint64_t v65 = v58;
    *(_DWORD *)Swift::String v43 = 136446210;
    id v61 = v40;
    id v44 = [v40 remObjectID];
    if (v44)
    {
      id v45 = v44;
      id v46 = [v44 description];

      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v49 = v48;
    }
    else
    {
      uint64_t v47 = 7104878;
      unint64_t v49 = 0xE300000000000000;
    }
    uint64_t v64 = sub_1000C51B8(v47, v49, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v50 = v61;

    swift_bridgeObjectRelease();
    os_log_t v51 = v60;
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v59, "cleanUpManualSortHintIfNeeded: Template was deleted due to user-initiated changes, will delete its associated sort hint {templateID: %{public}s}", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v52 = [v63 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v53 = UUID.uuidString.getter();
  uint64_t v55 = v54;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  swift_bridgeObjectRetain();
  id v56 = v11;
  sub_1000D01B8(6uLL, v53, v55, v11);

  swift_bridgeObjectRelease_n();
}

Swift::Void __swiftcall REMCDTemplate.didSave_Swift()()
{
  *(unsigned char *)(v0 + OBJC_IVAR___REMCDTemplate_didCleanUpManualSortHintOnMarkingForDeletion) = 0;
}

uint64_t type metadata accessor for REMCDTemplate()
{
  return self;
}

void sub_1003FBC0C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v9 = *(void **)(v0 + qword_10090A658);
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    id v11 = (uint64_t *)(v0 + qword_10090A668);
    id v12 = *(void (**)(uint64_t))(v0 + qword_10090A668);
    if ((*(unsigned char *)(v0 + qword_10090A668 + 32) & 1) == 0) {
      return;
    }
    uint64_t v13 = v11[1];
    if (*(void *)(v0 + qword_10090A670))
    {
      uint64_t v14 = v11[2];
      uint64_t v15 = v11[3];
      sub_1000E6BA4(*(void *)(v0 + qword_10090A668), v11[1], v14, v15, 1);
      uint64_t v16 = swift_retain();
      v12(v16);
      swift_release();
      sub_1000E6BB8((uint64_t)v12, v13, v14, v15, 1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v17 = qword_100906EA0;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_10008E2DC(v1, (uint64_t)qword_10090A4D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v18, v1);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  sub_10052ECB8((uint64_t)"loadFactor wasn't properly initialized even with debouncing interval option set to .loadFunction", 96, 2);
  __break(1u);
}

uint64_t sub_1003FBED8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v53 = a3;
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)&v44 - v9;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint8_t **)((char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(v4 + qword_10090A658);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v51 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once();
    goto LABEL_10;
  }
  if (*(unsigned char *)(v4 + qword_10090A680) != 1)
  {
LABEL_7:
    uint64_t v22 = *(uint64_t (**)(uint64_t))(v4 + qword_10090A660);
    uint64_t v23 = v54;
    uint64_t result = v22(v54);
    if (v55) {
      return v55(1, v23);
    }
    return result;
  }
  sub_1003FD654();
  if (*(void *)(v4 + qword_10090A688))
  {
    uint64_t result = sub_1003FE34C(v54, (uint64_t)v55, v53, (void (*)(uint64_t))sub_1002F59BC, (uint64_t)&unk_1008C5618, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1003098FC, (uint64_t)sub_1004094EC);
    uint64_t v18 = qword_10090A6A0;
    uint64_t v19 = *(void *)(v4 + qword_10090A6A0);
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
LABEL_21:
      *(void *)(v4 + v18) = v21;
      return result;
    }
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v48 = qword_10090A688;
  uint64_t v15 = *(void **)(v4 + qword_10090A678 + 8);
  uint64_t v50 = *(void *)(v4 + qword_10090A678);
  uint64_t v24 = qword_100906EA0;
  swift_bridgeObjectRetain();
  if (v24 != -1) {
    goto LABEL_27;
  }
LABEL_10:
  uint64_t v25 = type metadata accessor for Logger();
  sub_10008E2DC(v25, (uint64_t)qword_10090A4D0);
  swift_bridgeObjectRetain_n();
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  int v28 = v27;
  unint64_t v49 = v26;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v29 = swift_slowAlloc();
    int v45 = v28;
    os_log_type_t v30 = (uint8_t *)v29;
    uint64_t v46 = swift_slowAlloc();
    aBlock[0] = v46;
    id v44 = v30;
    *(_DWORD *)os_log_type_t v30 = 136315138;
    uint64_t v47 = v5;
    if (v15) {
      uint64_t v31 = v50;
    }
    else {
      uint64_t v31 = 7104878;
    }
    if (v15) {
      unint64_t v32 = (unint64_t)v15;
    }
    else {
      unint64_t v32 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v33 = v31;
    uint64_t v5 = v47;
    id v56 = (void *)sub_1000C51B8(v33, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v34 = v49;
    _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v45, "os_transaction INIT {name: com.apple.remindd.rddebouncer}, label: %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v35 = os_transaction_create();
  uint64_t v36 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v37 = (void *)swift_allocObject();
  uint64_t v38 = v50;
  _OWORD v37[2] = v36;
  v37[3] = v38;
  v37[4] = v15;
  v37[5] = v35;
  aBlock[4] = (uint64_t)sub_100409090;
  aBlock[5] = (uint64_t)v37;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100236C78;
  aBlock[3] = (uint64_t)&unk_1008C55E0;
  unint64_t v49 = _Block_copy(aBlock);
  id v56 = _swiftEmptyArrayStorage;
  sub_100403B28((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  uint64_t v50 = v35;
  swift_unknownObjectRetain();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v39 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  *(void *)(v4 + v48) = v39;
  swift_retain();
  swift_release();
  static DispatchTime.now()();
  sub_1003FBC0C();
  + infix(_:_:)();
  id v40 = *(void (**)(char *, uint64_t))(v52 + 8);
  v40(v8, v5);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  v40(v10, v5);
  if (*(unsigned char *)(v4 + qword_10090A668 + 33) == 1)
  {
    sub_1003FE34C(v54, (uint64_t)v55, v53, (void (*)(uint64_t))sub_1002F59BC, (uint64_t)&unk_1008C5618, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1003098FC, (uint64_t)sub_1004094EC);
    swift_release();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v18 = qword_10090A6A0;
    uint64_t v41 = *(void *)(v4 + qword_10090A6A0);
    BOOL v20 = __OFADD__(v41, 1);
    uint64_t v21 = v41 + 1;
    if (v20)
    {
      __break(1u);
      return result;
    }
    goto LABEL_21;
  }
  int v42 = *(void (**)(uint64_t))(v4 + qword_10090A660);
  uint64_t v43 = v54;
  v42(v54);
  if (v55) {
    v55(1, v43);
  }
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1003FC6AC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v53 = a3;
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)&v44 - v9;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint8_t **)((char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(v4 + qword_10090A658);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v51 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once();
    goto LABEL_10;
  }
  if (*(unsigned char *)(v4 + qword_10090A680) != 1)
  {
LABEL_7:
    uint64_t v22 = *(uint64_t (**)(uint64_t))(v4 + qword_10090A660);
    uint64_t v23 = v54;
    uint64_t result = v22(v54);
    if (v55) {
      return v55(1, v23);
    }
    return result;
  }
  sub_1003FD654();
  if (*(void *)(v4 + qword_10090A688))
  {
    uint64_t result = sub_1003FE34C(v54, (uint64_t)v55, v53, (void (*)(uint64_t))sub_1002F5CC0, (uint64_t)&unk_1008C5578, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_100309A2C, (uint64_t)sub_1004094EC);
    uint64_t v18 = qword_10090A6A0;
    uint64_t v19 = *(void *)(v4 + qword_10090A6A0);
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
LABEL_21:
      *(void *)(v4 + v18) = v21;
      return result;
    }
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v48 = qword_10090A688;
  uint64_t v15 = *(void **)(v4 + qword_10090A678 + 8);
  uint64_t v50 = *(void *)(v4 + qword_10090A678);
  uint64_t v24 = qword_100906EA0;
  swift_bridgeObjectRetain();
  if (v24 != -1) {
    goto LABEL_27;
  }
LABEL_10:
  uint64_t v25 = type metadata accessor for Logger();
  sub_10008E2DC(v25, (uint64_t)qword_10090A4D0);
  swift_bridgeObjectRetain_n();
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  int v28 = v27;
  unint64_t v49 = v26;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v29 = swift_slowAlloc();
    int v45 = v28;
    os_log_type_t v30 = (uint8_t *)v29;
    uint64_t v46 = swift_slowAlloc();
    aBlock[0] = v46;
    id v44 = v30;
    *(_DWORD *)os_log_type_t v30 = 136315138;
    uint64_t v47 = v5;
    if (v15) {
      uint64_t v31 = v50;
    }
    else {
      uint64_t v31 = 7104878;
    }
    if (v15) {
      unint64_t v32 = (unint64_t)v15;
    }
    else {
      unint64_t v32 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v33 = v31;
    uint64_t v5 = v47;
    id v56 = (void *)sub_1000C51B8(v33, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v34 = v49;
    _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v45, "os_transaction INIT {name: com.apple.remindd.rddebouncer}, label: %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v35 = os_transaction_create();
  uint64_t v36 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v37 = (void *)swift_allocObject();
  uint64_t v38 = v50;
  _OWORD v37[2] = v36;
  v37[3] = v38;
  v37[4] = v15;
  v37[5] = v35;
  aBlock[4] = (uint64_t)sub_100409010;
  aBlock[5] = (uint64_t)v37;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100236C78;
  aBlock[3] = (uint64_t)&unk_1008C5540;
  unint64_t v49 = _Block_copy(aBlock);
  id v56 = _swiftEmptyArrayStorage;
  sub_100403B28((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  uint64_t v50 = v35;
  swift_unknownObjectRetain();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v39 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  *(void *)(v4 + v48) = v39;
  swift_retain();
  swift_release();
  static DispatchTime.now()();
  sub_1003FBC0C();
  + infix(_:_:)();
  id v40 = *(void (**)(char *, uint64_t))(v52 + 8);
  v40(v8, v5);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  v40(v10, v5);
  if (*(unsigned char *)(v4 + qword_10090A668 + 33) == 1)
  {
    sub_1003FE34C(v54, (uint64_t)v55, v53, (void (*)(uint64_t))sub_1002F5CC0, (uint64_t)&unk_1008C5578, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_100309A2C, (uint64_t)sub_1004094EC);
    swift_release();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v18 = qword_10090A6A0;
    uint64_t v41 = *(void *)(v4 + qword_10090A6A0);
    BOOL v20 = __OFADD__(v41, 1);
    uint64_t v21 = v41 + 1;
    if (v20)
    {
      __break(1u);
      return result;
    }
    goto LABEL_21;
  }
  int v42 = *(void (**)(uint64_t))(v4 + qword_10090A660);
  uint64_t v43 = v54;
  v42(v54);
  if (v55) {
    v55(1, v43);
  }
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1003FCE80(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v54 = a3;
  uint64_t v55 = a1;
  id v56 = a2;
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v53 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v10 = (char *)&v45 - v9;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = __chkstk_darwin(v12);
  uint64_t v16 = (uint8_t **)((char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void **)(v4 + qword_10090A658);
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t, __n128))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12, v14);
  id v52 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once();
    goto LABEL_10;
  }
  if (*(unsigned char *)(v4 + qword_10090A680) != 1)
  {
LABEL_7:
    uint64_t v23 = *(uint64_t (**)(uint64_t))(v4 + qword_10090A660);
    uint64_t v24 = v55;
    uint64_t result = v23(v55);
    if (v56) {
      return v56(1, v24);
    }
    return result;
  }
  sub_1003FD654();
  if (*(void *)(v4 + qword_10090A688))
  {
    uint64_t result = sub_1003FE34C(v55, (uint64_t)v56, v54, sub_1002F6144, (uint64_t)&unk_1008C53C0, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_10030BCBC, (uint64_t)sub_100408B7C);
    uint64_t v19 = qword_10090A6A0;
    uint64_t v20 = *(void *)(v4 + qword_10090A6A0);
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
LABEL_21:
      *(void *)(v4 + v19) = v22;
      return result;
    }
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v49 = qword_10090A688;
  uint64_t v16 = *(void **)(v4 + qword_10090A678 + 8);
  uint64_t v51 = *(void *)(v4 + qword_10090A678);
  uint64_t v25 = qword_100906EA0;
  swift_bridgeObjectRetain();
  if (v25 != -1) {
    goto LABEL_27;
  }
LABEL_10:
  uint64_t v26 = type metadata accessor for Logger();
  sub_10008E2DC(v26, (uint64_t)qword_10090A4D0);
  swift_bridgeObjectRetain_n();
  os_log_type_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  int v29 = v28;
  uint64_t v50 = v27;
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v30 = swift_slowAlloc();
    int v46 = v29;
    uint64_t v31 = (uint8_t *)v30;
    uint64_t v47 = swift_slowAlloc();
    aBlock[0] = v47;
    int v45 = v31;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v48 = v5;
    if (v16) {
      uint64_t v32 = v51;
    }
    else {
      uint64_t v32 = 7104878;
    }
    if (v16) {
      unint64_t v33 = (unint64_t)v16;
    }
    else {
      unint64_t v33 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v34 = v32;
    uint64_t v5 = v48;
    uint64_t v57 = (void *)sub_1000C51B8(v34, v33, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v35 = v50;
    _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v46, "os_transaction INIT {name: com.apple.remindd.rddebouncer}, label: %s", v45, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v36 = os_transaction_create();
  uint64_t v37 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v38 = (void *)swift_allocObject();
  uint64_t v39 = v51;
  void v38[2] = v37;
  v38[3] = v39;
  v38[4] = v16;
  v38[5] = v36;
  aBlock[4] = (uint64_t)sub_100408BE8;
  aBlock[5] = (uint64_t)v38;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100236C78;
  aBlock[3] = (uint64_t)&unk_1008C5428;
  uint64_t v50 = _Block_copy(aBlock);
  uint64_t v57 = _swiftEmptyArrayStorage;
  sub_100403B28((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  uint64_t v51 = v36;
  swift_unknownObjectRetain();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v40 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  *(void *)(v4 + v49) = v40;
  swift_retain();
  swift_release();
  static DispatchTime.now()();
  sub_1003FBC0C();
  + infix(_:_:)();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v53 + 8);
  v41(v7, v5);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  v41(v10, v5);
  if (*(unsigned char *)(v4 + qword_10090A668 + 33) == 1)
  {
    sub_1003FE34C(v55, (uint64_t)v56, v54, sub_1002F6144, (uint64_t)&unk_1008C53C0, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_10030BCBC, (uint64_t)sub_100408B7C);
    swift_release();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v19 = qword_10090A6A0;
    uint64_t v42 = *(void *)(v4 + qword_10090A6A0);
    BOOL v21 = __OFADD__(v42, 1);
    uint64_t v22 = v42 + 1;
    if (v21)
    {
      __break(1u);
      return result;
    }
    goto LABEL_21;
  }
  uint64_t v43 = *(void (**)(uint64_t))(v4 + qword_10090A660);
  uint64_t v44 = v55;
  v43(v55);
  if (v56) {
    v56(1, v44);
  }
  swift_release();
  return swift_unknownObjectRelease();
}

void sub_1003FD654()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_100094134(&qword_10090A7C0);
  uint64_t v87 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v86 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100917CC0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v82 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v82 - v12;
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v15 = *(void (***)(char *, char *, uint64_t))(v14 - 8);
  uint64_t v89 = v14;
  unint64_t v90 = v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v91 = (char *)&v82 - v19;
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (void (**)(char *, char *, uint64_t))((char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))&v2[qword_10090A658];
  *uint64_t v23 = v24;
  (*(void (**)(char *, void, uint64_t))(v21 + 104))((char *)v23, enum case for DispatchPredicate.onQueue(_:), v20);
  uint64_t v25 = v24;
  uint64_t v26 = _dispatchPreconditionTest(_:)();
  os_log_type_t v28 = *(void (**)(void (**)(char *, char *, uint64_t), uint64_t))(v21 + 8);
  uint64_t v27 = v21 + 8;
  v28(v23, v20);
  if ((v26 & 1) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v29 = *(void *)&v2[qword_10090A670];
  if (!v29) {
    return;
  }
  swift_retain();
  static DispatchTime.now()();
  uint64_t v27 = v29 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_lastFire;
  swift_beginAccess();
  sub_1000BF710(v27, (uint64_t)v13, (uint64_t *)&unk_100917CC0);
  uint64_t v26 = v89;
  uint64_t v23 = v90;
  int v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v90[6])(v13, 1, v89);
  uint64_t v88 = v29;
  if (v30 != 1)
  {
    v23[4](v18, v13, v26);
    uint64_t v38 = *(void *)(v29 + 40);
    BOOL v39 = __OFADD__(v38, 1);
    uint64_t v40 = v38 + 1;
    if (v39)
    {
      __break(1u);
    }
    else
    {
      uint64_t v85 = v3;
      *(void *)(v29 + 40) = v40;
      v23[2](v11, v91, v26);
      ((void (*)(char *, void, uint64_t, uint64_t))v23[7])(v11, 0, 1, v26);
      sub_100096408((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_100917CC0);
      swift_beginAccess();
      sub_1000B1CB4((uint64_t)v8, v27, (uint64_t *)&unk_100917CC0);
      swift_endAccess();
      double v41 = *(double *)(v29 + 24);
      unint64_t v42 = DispatchTime.uptimeNanoseconds.getter();
      unint64_t v43 = DispatchTime.uptimeNanoseconds.getter();
      if (v42 >= v43)
      {
        double v1 = (double)(v42 - v43) / 1000000000.0;
        if (v1 >= v41)
        {
          if (qword_100906EA0 != -1) {
            swift_once();
          }
          uint64_t v55 = type metadata accessor for Logger();
          sub_10008E2DC(v55, (uint64_t)qword_10090A4D0);
          id v56 = v2;
          uint64_t v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.info.getter();
          BOOL v59 = os_log_type_enabled(v57, v58);
          uint64_t v60 = v88;
          if (v59)
          {
            uint64_t v61 = swift_slowAlloc();
            v95[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v61 = 136315650;
            if (*(void *)&v56[qword_10090A678 + 8])
            {
              uint64_t v62 = *(void *)&v56[qword_10090A678];
              unint64_t v63 = *(void *)&v56[qword_10090A678 + 8];
            }
            else
            {
              uint64_t v62 = 7104878;
              unint64_t v63 = 0xE300000000000000;
            }
            swift_bridgeObjectRetain();
            uint64_t v94 = sub_1000C51B8(v62, v63, v95);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v61 + 12) = 2048;
            uint64_t v94 = *(void *)&v1;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v61 + 22) = 2048;
            uint64_t v94 = *(void *)&v41;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v57, v58, "RDDebouncer.sampleFire: Sample exceeds threshold for starting a new window, resetting load measurements {label: %s, elapsed: %f, threshold: %f}", (uint8_t *)v61, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v23 = v90;
            uint64_t v60 = v88;
          }
          else
          {
          }
          *(void *)(v60 + 32) = 0;
          *(void *)(v60 + 40) = 0;
          swift_beginAccess();
          DoubleStacksQueue.reset()();
          swift_endAccess();
          swift_release();
          unint64_t v76 = v23[1];
          ((void (*)(char *, uint64_t))v76)(v18, v26);
          uint64_t v77 = v91;
          uint64_t v78 = v26;
          goto LABEL_39;
        }
        if (qword_100906EA0 == -1)
        {
LABEL_12:
          uint64_t v44 = type metadata accessor for Logger();
          uint64_t v45 = sub_10008E2DC(v44, (uint64_t)qword_10090A4D0);
          uint64_t v46 = v88;
          swift_retain_n();
          uint64_t v47 = v2;
          uint64_t v48 = Logger.logObject.getter();
          os_log_type_t v49 = static os_log_type_t.info.getter();
          BOOL v50 = os_log_type_enabled(v48, v49);
          uint64_t v51 = v85;
          if (v50)
          {
            uint64_t v84 = v45;
            uint64_t v52 = swift_slowAlloc();
            uint64_t v83 = swift_slowAlloc();
            v95[0] = v83;
            *(_DWORD *)uint64_t v52 = 136315650;
            if (*(void *)&v47[qword_10090A678 + 8])
            {
              uint64_t v53 = *(void *)&v47[qword_10090A678];
              unint64_t v54 = *(void *)&v47[qword_10090A678 + 8];
            }
            else
            {
              uint64_t v53 = 7104878;
              unint64_t v54 = 0xE300000000000000;
            }
            swift_bridgeObjectRetain();
            uint64_t v94 = sub_1000C51B8(v53, v54, v95);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v52 + 12) = 2048;
            uint64_t v94 = *(void *)&v1;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v52 + 22) = 2048;
            uint64_t v64 = v88;
            uint64_t v65 = *(void *)(v88 + 40);
            swift_release();
            uint64_t v94 = v65;
            uint64_t v46 = v64;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v48, v49, "RDDebouncer.sampleFire: Sampled {label: %s, elapsed: %f, n: %ld}", (uint8_t *)v52, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
          }
          uint64_t v66 = *(void *)(v46 + 16);
          uint64_t v67 = *(void *)(v46 + 40);
          if (v66 >= v67)
          {
            uint64_t v79 = v89;
            if (__OFSUB__(v67, 1))
            {
              __break(1u);
              return;
            }
            double v80 = v1 / (double)v67 + *(double *)(v46 + 32) * (double)(v67 - 1) / (double)v67;
          }
          else
          {
            uint64_t v68 = v46 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_measurements;
            swift_beginAccess();
            uint64_t v69 = v86;
            uint64_t v70 = v87;
            (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v86, v68, v51);
            char v71 = DoubleStacksQueue.isEmpty.getter();
            (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v51);
            if ((v71 & 1) != 0
              || (swift_beginAccess(), DoubleStacksQueue.dequeue()(), swift_endAccess(), (v93 & 1) != 0))
            {
              uint64_t v72 = Logger.logObject.getter();
              os_log_type_t v73 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled(v72, v73))
              {
                uint64_t v74 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v74 = 0;
                _os_log_impl((void *)&_mh_execute_header, v72, v73, "No measurements to dequeue from to get the oldest sample value when updating load factor", v74, 2u);
                swift_slowDealloc();
              }
              swift_release();

              uint64_t v75 = v89;
              unint64_t v76 = v90[1];
              ((void (*)(char *, uint64_t))v76)(v18, v89);
              uint64_t v77 = v91;
              uint64_t v78 = v75;
LABEL_39:
              ((void (*)(char *, uint64_t))v76)(v77, v78);
              return;
            }
            uint64_t v46 = v88;
            uint64_t v79 = v89;
            double v80 = *(double *)(v88 + 32) + (v1 - v92) / (double)v66;
          }
          *(double *)(v46 + 32) = v80;
          double v92 = v1;
          swift_beginAccess();
          DoubleStacksQueue.enqueue(_:)();
          swift_endAccess();
          swift_release();
          uint64_t v81 = v90[1];
          ((void (*)(char *, uint64_t))v81)(v18, v79);
          ((void (*)(char *, uint64_t))v81)(v91, v79);
          return;
        }
LABEL_47:
        swift_once();
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_47;
  }
  sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100917CC0);
  if (qword_100906EA0 != -1) {
LABEL_44:
  }
    swift_once();
  uint64_t v31 = type metadata accessor for Logger();
  sub_10008E2DC(v31, (uint64_t)qword_10090A4D0);
  uint64_t v32 = v2;
  unint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v87 = swift_slowAlloc();
    v95[0] = v87;
    *(_DWORD *)uint64_t v35 = 136315138;
    if (*(void *)&v32[qword_10090A678 + 8])
    {
      uint64_t v36 = *(void *)&v32[qword_10090A678];
      unint64_t v37 = *(void *)&v32[qword_10090A678 + 8];
    }
    else
    {
      uint64_t v36 = 7104878;
      unint64_t v37 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v94 = sub_1000C51B8(v36, v37, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "RDDebouncer.sampleFire: First fire sampled {label: %s}", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v26 = v89;
    uint64_t v23 = v90;
  }
  else
  {
  }
  v23[4](v11, v91, v26);
  ((void (*)(char *, void, uint64_t, uint64_t))v23[7])(v11, 0, 1, v26);
  sub_100096408((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_100917CC0);
  swift_beginAccess();
  sub_1000B1CB4((uint64_t)v8, v27, (uint64_t *)&unk_100917CC0);
  swift_endAccess();
  swift_release();
}

uint64_t sub_1003FE34C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(BOOL, uint64_t, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v9 = v7;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void **)((char *)v9 + qword_10090A658);
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    a2 = v26(0, *(void *)(a2 + 16) + 1, 1, a2);
    *uint64_t v9 = a2;
    goto LABEL_4;
  }
  swift_beginAccess();
  uint64_t v19 = swift_bridgeObjectRetain();
  a4(v19);
  uint64_t result = swift_endAccess();
  if (!a2) {
    return result;
  }
  a1 = swift_allocObject();
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  uint64_t v9 = (uint64_t *)((char *)v9 + qword_10090A698);
  swift_beginAccess();
  a2 = *v9;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v9 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  unint64_t v23 = *(void *)(a2 + 16);
  unint64_t v22 = *(void *)(a2 + 24);
  if (v23 >= v22 >> 1)
  {
    a2 = v26(v22 > 1, v23 + 1, 1, a2);
    *uint64_t v9 = a2;
  }
  *(void *)(a2 + 16) = v23 + 1;
  uint64_t v24 = a2 + 16 * v23;
  *(void *)(v24 + 32) = v27;
  *(void *)(v24 + 40) = a1;
  return swift_endAccess();
}

void sub_1003FE5A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    *(void *)(Strong + qword_10090A688) = 0;
    uint64_t v10 = swift_release();
    a5(v10);
    if (qword_100906EA0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_10090A4D0);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      if (a3)
      {
        unint64_t v15 = a3;
      }
      else
      {
        a2 = 7104878;
        unint64_t v15 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      sub_1000C51B8(a2, v15, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "os_transaction RELEASE {name: com.apple.remindd.rddebouncer}, label: %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_1003FE7C8()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint8_t **)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)&v2[qword_10090A658];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  uint64_t v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v9 = qword_10090A688;
  double v1 = &unk_100906000;
  if (!*(void *)&v2[qword_10090A688]) {
    goto LABEL_8;
  }
  uint64_t v10 = qword_100906EA0;
  swift_retain();
  if (v10 != -1) {
    goto LABEL_24;
  }
LABEL_4:
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_10090A4D0);
  uint64_t v12 = v2;
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    v58[0] = v53;
    uint64_t v52 = v15;
    *(_DWORD *)unint64_t v15 = 136315138;
    uint64_t v51 = v15 + 4;
    uint64_t v16 = v12;
    id v17 = [v16 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    v57[0] = sub_1000C51B8(v18, v20, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    double v1 = (void *)&unk_100906000;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Cancelling pending work item {debouncer: %s}", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release();
  *(void *)&v2[v9] = 0;
  swift_release();
LABEL_8:
  uint64_t v21 = &v2[qword_10090A690];
  uint64_t result = swift_beginAccess();
  if ((*(void *)v21 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = __CocoaSet.count.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v23) {
      return result;
    }
  }
  else if (!*(void *)(*(void *)v21 + 16))
  {
    return result;
  }
  if (v1[468] != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_10008E2DC(v24, (uint64_t)qword_10090A4D0);
  uint64_t v25 = v2;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  int v28 = v27;
  p_class_meths = &OBJC_PROTOCOL___RDStoreControllerMigrator.class_meths;
  int v30 = &OBJC_PROTOCOL___RDStoreControllerMigrator.class_meths;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v31 = swift_slowAlloc();
    LODWORD(v52) = v28;
    uint64_t v32 = v31;
    uint64_t v53 = swift_slowAlloc();
    v57[0] = v53;
    *(_DWORD *)uint64_t v32 = 134218754;
    uint64_t v54 = *(void *)&v25[qword_10090A6A0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 12) = 2080;
    sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
    sub_1000E4F40(&qword_100917D50, (unint64_t *)&qword_100909FB0);
    swift_bridgeObjectRetain();
    uint64_t v33 = Set.description.getter();
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v54 = sub_1000C51B8(v33, v35, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2048;
    uint64_t v36 = &v25[qword_10090A698];
    swift_beginAccess();
    uint64_t v37 = *(void *)(*(void *)v36 + 16);

    uint64_t v55 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v32 + 32) = 2080;
    uint64_t v38 = v25;
    id v39 = [v38 description];
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v42 = v41;

    uint64_t v55 = sub_1000C51B8(v40, v42, v57);
    p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___RDStoreControllerMigrator + 32);
    int v30 = (__objc2_meth_list **)(&OBJC_PROTOCOL___RDStoreControllerMigrator + 32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v52, "Firing latest value after delay {coalescedUpdates: %ld, value: %s, completionBlocks: %ld, debouncer: %s}", (uint8_t *)v32, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v43 = *(void *)v21;
  *(void *)uint64_t v21 = &_swiftEmptySetSingleton;
  uint64_t v44 = (uint64_t *)((char *)v30[211] + (void)v25);
  swift_beginAccess();
  uint64_t v45 = *v44;
  uint64_t *v44 = (uint64_t)_swiftEmptyArrayStorage;
  *(__objc2_meth_list *)((char *)p_class_meths[212] + (void)v25) = 0;
  (*(void (**)(uint64_t))&v25[qword_10090A660])(v43);
  uint64_t v46 = *(void *)(v45 + 16);
  if (v46)
  {
    uint64_t v47 = *(void (**)(char *, uint64_t *))(v45 + 32);
    char v56 = 1;
    uint64_t v55 = v43;
    swift_retain();
    v47(&v56, &v55);
    swift_release();
    uint64_t v48 = v46 - 1;
    if (v48)
    {
      uint64_t v49 = v45 + 56;
      do
      {
        BOOL v50 = *(void (**)(char *, uint64_t *))(v49 - 8);
        char v56 = 0;
        uint64_t v55 = v43;
        swift_retain();
        v50(&v56, &v55);
        swift_release();
        v49 += 16;
        --v48;
      }
      while (v48);
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003FEF20()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint8_t **)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)&v2[qword_10090A658];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  uint64_t v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v9 = qword_10090A688;
  double v1 = &unk_100906000;
  if (!*(void *)&v2[qword_10090A688]) {
    goto LABEL_8;
  }
  uint64_t v10 = qword_100906EA0;
  swift_retain();
  if (v10 != -1) {
    goto LABEL_24;
  }
LABEL_4:
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_10090A4D0);
  uint64_t v12 = v2;
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    v58[0] = v53;
    uint64_t v52 = v15;
    *(_DWORD *)unint64_t v15 = 136315138;
    uint64_t v51 = v15 + 4;
    uint64_t v16 = v12;
    id v17 = [v16 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    v57[0] = sub_1000C51B8(v18, v20, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    double v1 = (void *)&unk_100906000;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Cancelling pending work item {debouncer: %s}", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release();
  *(void *)&v2[v9] = 0;
  swift_release();
LABEL_8:
  uint64_t v21 = &v2[qword_10090A690];
  uint64_t result = swift_beginAccess();
  if ((*(void *)v21 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = __CocoaSet.count.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v23) {
      return result;
    }
  }
  else if (!*(void *)(*(void *)v21 + 16))
  {
    return result;
  }
  if (v1[468] != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_10008E2DC(v24, (uint64_t)qword_10090A4D0);
  uint64_t v25 = v2;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  int v28 = v27;
  p_class_meths = &OBJC_PROTOCOL___RDStoreControllerMigrator.class_meths;
  int v30 = &OBJC_PROTOCOL___RDStoreControllerMigrator.class_meths;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v31 = swift_slowAlloc();
    LODWORD(v52) = v28;
    uint64_t v32 = v31;
    uint64_t v53 = swift_slowAlloc();
    v57[0] = v53;
    *(_DWORD *)uint64_t v32 = 134218754;
    uint64_t v54 = *(void *)&v25[qword_10090A6A0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 12) = 2080;
    type metadata accessor for RDDebounceableCKDatabaseNotification();
    sub_100403B28(&qword_100914630, (void (*)(uint64_t))type metadata accessor for RDDebounceableCKDatabaseNotification);
    swift_bridgeObjectRetain();
    uint64_t v33 = Set.description.getter();
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v54 = sub_1000C51B8(v33, v35, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2048;
    uint64_t v36 = &v25[qword_10090A698];
    swift_beginAccess();
    uint64_t v37 = *(void *)(*(void *)v36 + 16);

    uint64_t v55 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v32 + 32) = 2080;
    uint64_t v38 = v25;
    id v39 = [v38 description];
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v42 = v41;

    uint64_t v55 = sub_1000C51B8(v40, v42, v57);
    p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___RDStoreControllerMigrator + 32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    int v30 = (__objc2_meth_list **)(&OBJC_PROTOCOL___RDStoreControllerMigrator + 32);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v52, "Firing latest value after delay {coalescedUpdates: %ld, value: %s, completionBlocks: %ld, debouncer: %s}", (uint8_t *)v32, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v43 = *(void *)v21;
  *(void *)uint64_t v21 = &_swiftEmptySetSingleton;
  uint64_t v44 = (uint64_t *)((char *)v30[211] + (void)v25);
  swift_beginAccess();
  uint64_t v45 = *v44;
  uint64_t *v44 = (uint64_t)_swiftEmptyArrayStorage;
  *(__objc2_meth_list *)((char *)p_class_meths[212] + (void)v25) = 0;
  (*(void (**)(uint64_t))&v25[qword_10090A660])(v43);
  uint64_t v46 = *(void *)(v45 + 16);
  if (v46)
  {
    uint64_t v47 = *(void (**)(char *, uint64_t *))(v45 + 32);
    char v56 = 1;
    uint64_t v55 = v43;
    swift_retain();
    v47(&v56, &v55);
    swift_release();
    uint64_t v48 = v46 - 1;
    if (v48)
    {
      uint64_t v49 = v45 + 56;
      do
      {
        BOOL v50 = *(void (**)(char *, uint64_t *))(v49 - 8);
        char v56 = 0;
        uint64_t v55 = v43;
        swift_retain();
        v50(&v56, &v55);
        swift_release();
        v49 += 16;
        --v48;
      }
      while (v48);
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003FF668()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  uint64_t v7 = (uint8_t **)((char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = *(void **)&v2[qword_10090A658];
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t, __n128))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  id v9 = v8;
  uint64_t v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v10 = qword_10090A688;
  double v1 = &unk_100906000;
  if (!*(void *)&v2[qword_10090A688]) {
    goto LABEL_8;
  }
  uint64_t v11 = qword_100906EA0;
  swift_retain();
  if (v11 != -1) {
    goto LABEL_21;
  }
LABEL_4:
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_10090A4D0);
  os_log_type_t v13 = v2;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    v58[0] = v53;
    uint64_t v52 = v16;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v51 = v16 + 4;
    id v17 = v13;
    id v18 = [v17 description];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    v57[0] = sub_1000C51B8(v19, v21, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    double v1 = (void *)&unk_100906000;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Cancelling pending work item {debouncer: %s}", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release();
  *(void *)&v2[v10] = 0;
  swift_release();
LABEL_8:
  unint64_t v22 = &v2[qword_10090A690];
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)v22 + 16))
  {
    if (v1[468] != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_10090A4D0);
    uint64_t v25 = v2;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    int v28 = v27;
    p_class_meths = &OBJC_PROTOCOL___RDStoreControllerMigrator.class_meths;
    int v30 = &OBJC_PROTOCOL___RDStoreControllerMigrator.class_meths;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v31 = swift_slowAlloc();
      LODWORD(v52) = v28;
      uint64_t v32 = v31;
      uint64_t v53 = swift_slowAlloc();
      v57[0] = v53;
      *(_DWORD *)uint64_t v32 = 134218754;
      uint64_t v54 = *(void *)&v25[qword_10090A6A0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2080;
      sub_1001284DC();
      swift_bridgeObjectRetain();
      uint64_t v33 = Set.description.getter();
      unint64_t v35 = v34;
      swift_bridgeObjectRelease();
      uint64_t v54 = sub_1000C51B8(v33, v35, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 22) = 2048;
      uint64_t v36 = &v25[qword_10090A698];
      swift_beginAccess();
      uint64_t v37 = *(void *)(*(void *)v36 + 16);

      uint64_t v55 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v32 + 32) = 2080;
      uint64_t v38 = v25;
      id v39 = [v38 description];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v42 = v41;

      uint64_t v55 = sub_1000C51B8(v40, v42, v57);
      p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___RDStoreControllerMigrator + 32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      int v30 = (__objc2_meth_list **)(&OBJC_PROTOCOL___RDStoreControllerMigrator + 32);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v52, "Firing latest value after delay {coalescedUpdates: %ld, value: %s, completionBlocks: %ld, debouncer: %s}", (uint8_t *)v32, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v43 = *(void *)v22;
    *(void *)unint64_t v22 = &_swiftEmptySetSingleton;
    uint64_t v44 = (uint64_t *)((char *)v30[211] + (void)v25);
    swift_beginAccess();
    uint64_t v45 = *v44;
    uint64_t *v44 = (uint64_t)_swiftEmptyArrayStorage;
    *(__objc2_meth_list *)((char *)p_class_meths[212] + (void)v25) = 0;
    (*(void (**)(uint64_t))&v25[qword_10090A660])(v43);
    uint64_t v46 = *(void *)(v45 + 16);
    if (v46)
    {
      uint64_t v47 = *(void (**)(char *, uint64_t *))(v45 + 32);
      char v56 = 1;
      uint64_t v55 = v43;
      swift_retain();
      v47(&v56, &v55);
      swift_release();
      uint64_t v48 = v46 - 1;
      if (v48)
      {
        uint64_t v49 = v45 + 56;
        do
        {
          BOOL v50 = *(void (**)(char *, uint64_t *))(v49 - 8);
          char v56 = 0;
          uint64_t v55 = v43;
          swift_retain();
          v50(&v56, &v55);
          swift_release();
          v49 += 16;
          --v48;
        }
        while (v48);
      }
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003FFD40()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009179D0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009179D0);
  if (qword_100907858 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942550);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Int sub_1003FFE08()
{
  uint64_t v2 = *(void **)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  id v3 = v2;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1003FFE6C()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  id v2 = *(id *)v0;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
}

Swift::Int sub_1003FFEB8()
{
  id v2 = *(void **)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  id v3 = v2;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1003FFF18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  sub_1000963CC(0, (unint64_t *)&qword_10090C120);
  return static NSObject.== infix(_:_:)() & (v2 == v3);
}

Swift::Int sub_1003FFF80()
{
  return Hasher._finalize()();
}

uint64_t sub_100400008()
{
  type metadata accessor for UUID();
  sub_100403B28((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);

  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_10040008C()
{
  return Hasher._finalize()();
}

void *sub_100400110(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  __n128 v5 = v4;
  uint64_t v10 = (_DWORD *)swift_slowAlloc();
  v5[6] = _swiftEmptyArrayStorage;
  v5[7] = 0;
  v5[4] = a2;
  v5[5] = v10;
  uint64_t v5[2] = a3;
  v5[3] = a1;
  *uint64_t v10 = 0;
  swift_bridgeObjectRetain();
  id v11 = a3;
  sub_100406C74(a4, (void (*)(void, void, void, void, void))sub_1000E6BA4);
  if (qword_1009070C0 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)qword_100942060;
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  id v14 = objc_allocWithZone((Class)sub_100094134(&qword_100917C08));
  id v15 = v12;
  id v16 = sub_100407F58(a1, a2, a4, v15, (uint64_t)sub_100406C6C, v13);

  swift_release();
  sub_100406C74(a4, (void (*)(void, void, void, void, void))sub_1000E6BB8);
  id v17 = (void *)v5[7];
  v5[7] = v16;

  id v18 = self;
  id v19 = [v18 defaultCenter];
  swift_retain();
  id v20 = [v11 persistentStoreCoordinator];
  [v19 addObserver:v5 selector:"handleNotification:" name:NSManagedObjectContextDidSaveObjectIDsNotification object:v20];

  swift_release();
  id v21 = [v18 defaultCenter];
  id v22 = v11;
  swift_retain();
  [v21 addObserver:v5 selector:"handleNotification:" name:@"RDStoreControllerDidRemoveAccountStoresNotification" object:v22];
  sub_100406C74(a4, (void (*)(void, void, void, void, void))sub_1000E6BB8);

  swift_release();
  return v5;
}

void sub_10040039C(uint64_t a1)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1004004BC(a1);
    swift_release();
  }
  else
  {
    if (qword_1009074F0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_1009179D0);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      __n128 v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__n128 v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received store did change notification but observer is deallocated", v5, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1004004BC(uint64_t a1)
{
  uint64_t v155 = a1;
  uint64_t v2 = 0;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100917C10);
  __chkstk_darwin(v3 - 8);
  __n128 v5 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = sub_100094134((uint64_t *)&unk_100913A60);
  uint64_t v6 = *(void *)(v171 - 8);
  uint64_t v7 = __chkstk_darwin(v171);
  uint64_t v163 = (uint64_t)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v164 = (uint64_t)&v153 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v176 = (uint64_t)&v153 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v165 = (uint64_t)&v153 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v153 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v177 = (unint64_t)&v153 - v19;
  __chkstk_darwin(v18);
  uint64_t v162 = (uint64_t)&v153 - v20;
  uint64_t v180 = (char *)type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  uint64_t v21 = *((void *)v180 - 1);
  uint64_t v22 = __chkstk_darwin(v180);
  uint64_t v175 = (uint64_t)&v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v159 = (uint64_t)&v153 - v25;
  __chkstk_darwin(v24);
  os_log_type_t v27 = (char *)&v153 - v26;
  int v28 = *(os_unfair_lock_s **)(v1 + 40);
  os_unfair_lock_lock(v28);
  swift_beginAccess();
  int64_t v29 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v28);
  int v30 = *(void **)(v29 + 16);
  uint64_t v161 = v6;
  uint64_t v160 = v17;
  id v174 = v30;
  if (v30)
  {
    id v173 = self;
    int64_t v172 = v29 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    uint64_t v169 = (char *)(v6 + 56);
    int v168 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    unint64_t v170 = *(void *)(v21 + 72);
    int64_t v158 = v29;
    swift_bridgeObjectRetain();
    id v31 = 0;
    uint64_t v178 = _swiftEmptyArrayStorage;
    int64_t v167 = (int64_t)v5;
    uint64_t v166 = v27;
    while (1)
    {
      sub_100404DF8(v172 + v170 * (void)v31, (uint64_t)v27, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
      uint64_t v32 = *(void *)&v27[*((int *)v180 + 5)];
      id v33 = [v173 managedObjectModel];
      if (v32)
      {
        id v181 = v31;
        v184[0] = _swiftEmptyArrayStorage;
        uint64_t v34 = v32 + 56;
        uint64_t v35 = 1 << *(unsigned char *)(v32 + 32);
        if (v35 < 64) {
          uint64_t v36 = ~(-1 << v35);
        }
        else {
          uint64_t v36 = -1;
        }
        unint64_t v37 = v36 & *(void *)(v32 + 56);
        int64_t v38 = (unint64_t)(v35 + 63) >> 6;
        swift_bridgeObjectRetain();
        int64_t v39 = 0;
        while (1)
        {
          if (v37)
          {
            unint64_t v40 = __clz(__rbit64(v37));
            v37 &= v37 - 1;
            unint64_t v41 = v40 | (v39 << 6);
          }
          else
          {
            BOOL v42 = __OFADD__(v39++, 1);
            if (v42)
            {
LABEL_206:
              __break(1u);
LABEL_207:
              __break(1u);
LABEL_208:
              __break(1u);
LABEL_209:
              __break(1u);
LABEL_210:
              __break(1u);
LABEL_211:
              __break(1u);
LABEL_212:
              __break(1u);
LABEL_213:
              __break(1u);
LABEL_214:
              __break(1u);
LABEL_215:
              __break(1u);
LABEL_216:
              __break(1u);
              goto LABEL_217;
            }
            if (v39 >= v38) {
              goto LABEL_36;
            }
            unint64_t v43 = *(void *)(v34 + 8 * v39);
            if (!v43)
            {
              int64_t v44 = v39 + 1;
              if (v39 + 1 >= v38) {
                goto LABEL_36;
              }
              unint64_t v43 = *(void *)(v34 + 8 * v44);
              if (!v43)
              {
                int64_t v44 = v39 + 2;
                if (v39 + 2 >= v38) {
                  goto LABEL_36;
                }
                unint64_t v43 = *(void *)(v34 + 8 * v44);
                if (!v43)
                {
                  int64_t v44 = v39 + 3;
                  if (v39 + 3 >= v38) {
                    goto LABEL_36;
                  }
                  unint64_t v43 = *(void *)(v34 + 8 * v44);
                  if (!v43)
                  {
                    int64_t v44 = v39 + 4;
                    if (v39 + 4 >= v38) {
                      goto LABEL_36;
                    }
                    unint64_t v43 = *(void *)(v34 + 8 * v44);
                    if (!v43)
                    {
                      int64_t v44 = v39 + 5;
                      if (v39 + 5 >= v38) {
                        goto LABEL_36;
                      }
                      unint64_t v43 = *(void *)(v34 + 8 * v44);
                      if (!v43)
                      {
                        while (1)
                        {
                          int64_t v39 = v44 + 1;
                          if (__OFADD__(v44, 1)) {
                            goto LABEL_219;
                          }
                          if (v39 >= v38) {
                            break;
                          }
                          unint64_t v43 = *(void *)(v34 + 8 * v39);
                          ++v44;
                          if (v43) {
                            goto LABEL_26;
                          }
                        }
LABEL_36:
                        uint64_t v179 = v2;
                        swift_release();
                        unint64_t v47 = (unint64_t)v184[0];
                        __n128 v5 = (char *)v167;
                        os_log_type_t v27 = v166;
LABEL_41:
                        id v31 = v181;
                        goto LABEL_42;
                      }
                    }
                  }
                }
              }
              int64_t v39 = v44;
            }
LABEL_26:
            unint64_t v37 = (v43 - 1) & v43;
            unint64_t v41 = __clz(__rbit64(v43)) + (v39 << 6);
          }
          uint64_t v45 = *(void *)(v32 + 48) + 16 * v41;
          uint64_t v46 = *(void **)(v45 + 8);
          char v185 = *(void **)v45;
          uint64_t v186 = v46;
          swift_bridgeObjectRetain();
          sub_100403BF0(v33, (uint64_t *)&v185, &v183);
          if (v2) {
            goto LABEL_224;
          }
          swift_bridgeObjectRelease();
          if (v183)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)v184[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v184[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
      }
      uint64_t v179 = v2;
      id v48 = [self subclassesOfREMCDObjectRepresentingRootCoreDataEntities];
      sub_100094134(&qword_100917C30);
      uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v50 = *(void *)(v49 + 16);
      if (v50)
      {
        id v181 = v31;
        char v185 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v51 = 0;
        do
        {
          uint64_t v52 = v51 + 1;
          id v53 = [(id)swift_getObjCClassFromMetadata() entity];
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v51 = v52;
        }
        while (v50 != v52);
        unint64_t v47 = (unint64_t)v185;
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
      swift_bridgeObjectRelease();
      unint64_t v47 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_42:
      if (v47 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      sub_1000963CC(0, (unint64_t *)&unk_100917C20);
      sub_1000E4F40(&qword_10090B7C8, (unint64_t *)&unk_100917C20);
      char v185 = (void *)Set.init(minimumCapacity:)();
      if (v47 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v2 = v179;
        if (!v54) {
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v54 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v2 = v179;
        if (!v54) {
          goto LABEL_52;
        }
      }
      if (v54 < 1) {
        goto LABEL_216;
      }
      if ((v47 & 0xC000000000000001) == 0)
      {
        for (uint64_t i = 0; i != v54; ++i)
        {
          os_log_type_t v58 = *(void **)(v47 + 8 * i + 32);
          sub_100320140(v184, v58);
        }
        swift_bridgeObjectRelease();
        uint64_t v2 = v179;
        goto LABEL_56;
      }
      for (uint64_t j = 0; j != v54; ++j)
      {
        char v56 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100320140(v184, v56);
      }
LABEL_52:

      swift_bridgeObjectRelease();
LABEL_56:
      BOOL v59 = v185;
      uint64_t v60 = v171;
      uint64_t v61 = *(int *)(v171 + 48);
      sub_100404DF8((uint64_t)v27, (uint64_t)v5, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
      *(void *)&v5[v61] = v59;
      (*(void (**)(char *, void, uint64_t, uint64_t))v169)(v5, 0, 1, v60);
      sub_100406BD8((uint64_t)v27);
      BOOL v62 = (*v168)(v5, 1, v60) == 1;
      unint64_t v63 = (unint64_t)v178;
      if (v62)
      {
        sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100917C10);
      }
      else
      {
        uint64_t v64 = v162;
        sub_100096408((uint64_t)v5, v162, (uint64_t *)&unk_100913A60);
        sub_100096408(v64, v177, (uint64_t *)&unk_100913A60);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v63 = sub_10030BCA8(0, *(void *)(v63 + 16) + 1, 1, v63);
        }
        unint64_t v66 = *(void *)(v63 + 16);
        unint64_t v65 = *(void *)(v63 + 24);
        if (v66 >= v65 >> 1) {
          unint64_t v63 = sub_10030BCA8(v65 > 1, v66 + 1, 1, v63);
        }
        *(void *)(v63 + 16) = v66 + 1;
        sub_100096408(v177, v63+ ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80))+ *(void *)(v161 + 72) * v66, (uint64_t *)&unk_100913A60);
      }
      uint64_t v178 = (void *)v63;
      id v31 = (char *)v31 + 1;
      if (v31 == v174)
      {
        swift_bridgeObjectRelease_n();
        id v17 = v160;
        uint64_t v67 = v178;
        goto LABEL_65;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v67 = _swiftEmptyArrayStorage;
LABEL_65:
  uint64_t v68 = v161;
  if (!v67[2]) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v178 = v67;
  uint64_t v69 = *(void *)(v155 + 56);
  uint64_t v153 = v155 + 56;
  uint64_t v70 = 1 << *(unsigned char *)(v155 + 32);
  if (v70 < 64) {
    uint64_t v71 = ~(-1 << v70);
  }
  else {
    uint64_t v71 = -1;
  }
  unint64_t v72 = v71 & v69;
  int64_t v154 = (unint64_t)(v70 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v73 = 0;
  uint64_t v180 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    if (v72)
    {
      uint64_t v157 = (v72 - 1) & v72;
      unint64_t v76 = __clz(__rbit64(v72)) | (v73 << 6);
    }
    else
    {
      BOOL v42 = __OFADD__(v73++, 1);
      if (v42) {
        goto LABEL_222;
      }
      if (v73 >= v154) {
        goto LABEL_204;
      }
      unint64_t v77 = *(void *)(v153 + 8 * v73);
      if (!v77)
      {
        int64_t v78 = v73 + 1;
        if (v73 + 1 >= v154) {
          goto LABEL_204;
        }
        unint64_t v77 = *(void *)(v153 + 8 * v78);
        if (!v77)
        {
          int64_t v78 = v73 + 2;
          if (v73 + 2 >= v154) {
            goto LABEL_204;
          }
          unint64_t v77 = *(void *)(v153 + 8 * v78);
          if (!v77)
          {
            int64_t v78 = v73 + 3;
            if (v73 + 3 >= v154) {
              goto LABEL_204;
            }
            unint64_t v77 = *(void *)(v153 + 8 * v78);
            if (!v77)
            {
              while (1)
              {
                int64_t v73 = v78 + 1;
                if (__OFADD__(v78, 1)) {
                  goto LABEL_223;
                }
                if (v73 >= v154) {
                  break;
                }
                unint64_t v77 = *(void *)(v153 + 8 * v73);
                ++v78;
                if (v77) {
                  goto LABEL_86;
                }
              }
LABEL_204:
              swift_bridgeObjectRelease();
              return swift_release();
            }
          }
        }
        int64_t v73 = v78;
      }
LABEL_86:
      uint64_t v157 = (v77 - 1) & v77;
      unint64_t v76 = __clz(__rbit64(v77)) + (v73 << 6);
    }
    int64_t v158 = v73;
    uint64_t v79 = *(void *)(v155 + 48) + 16 * v76;
    double v80 = *(void **)v79;
    unint64_t v81 = (unint64_t)v178;
    int64_t v172 = v178[2];
    id v156 = v80;
    if (!v172)
    {
      id v141 = v80;
      int64_t v108 = 0;
      int64_t v109 = 0;
      goto LABEL_184;
    }
    uint64_t v162 = *(void *)(v79 + 8);
    unint64_t v170 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
    uint64_t v82 = (char *)v178 + v170;
    id v181 = v80;
    swift_bridgeObjectRetain();
    unint64_t v83 = 0;
    uint64_t v84 = *(char **)(v68 + 72);
    uint64_t v85 = v159;
    uint64_t v166 = v84;
    uint64_t v169 = v82;
LABEL_89:
    uint64_t v179 = v2;
    sub_1000BF710((uint64_t)&v82[(void)v84 * v83], (uint64_t)v17, (uint64_t *)&unk_100913A60);
    uint64_t v86 = *(int *)(v171 + 48);
    uint64_t v87 = v165;
    sub_100404DF8((uint64_t)v17, v165, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
    unint64_t v88 = *(void *)&v17[v86];
    sub_100406B74(v87, v85);
    unint64_t v177 = v83;
    id v174 = (id)v88;
    if ((v88 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain_n();
      __CocoaSet.makeIterator()();
      sub_1000963CC(0, (unint64_t *)&unk_100917C20);
      sub_1000E4F40(&qword_10090B7C8, (unint64_t *)&unk_100917C20);
      Set.Iterator.init(_cocoa:)();
      unint64_t v89 = (unint64_t)v184[0];
      unint64_t v90 = v184[1];
      uint64_t v92 = (uint64_t)v184[2];
      int64_t v91 = (int64_t)v184[3];
      unint64_t v93 = (unint64_t)v184[4];
    }
    else
    {
      uint64_t v94 = -1 << *(unsigned char *)(v88 + 32);
      unint64_t v90 = (void *)(v88 + 56);
      uint64_t v92 = ~v94;
      uint64_t v95 = -v94;
      if (v95 < 64) {
        uint64_t v96 = ~(-1 << v95);
      }
      else {
        uint64_t v96 = -1;
      }
      unint64_t v93 = v96 & *(void *)(v88 + 56);
      swift_bridgeObjectRetain_n();
      int64_t v91 = 0;
      unint64_t v89 = v88;
    }
    id v173 = (id)v92;
    int64_t v97 = (unint64_t)(v92 + 64) >> 6;
    do
    {
      int64_t v102 = v91;
      if ((v89 & 0x8000000000000000) != 0)
      {
        uint64_t v105 = __CocoaSet.Iterator.next()();
        if (!v105) {
          goto LABEL_123;
        }
        uint64_t v182 = v105;
        sub_1000963CC(0, (unint64_t *)&unk_100917C20);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v100 = v183;
        swift_unknownObjectRelease();
        if (!v100) {
          goto LABEL_123;
        }
      }
      else
      {
        if (v93)
        {
          unint64_t v98 = __clz(__rbit64(v93));
          v93 &= v93 - 1;
          unint64_t v99 = v98 | (v91 << 6);
        }
        else
        {
          ++v91;
          if (__OFADD__(v102, 1)) {
            goto LABEL_210;
          }
          if (v91 >= v97)
          {
LABEL_123:
            uint64_t v2 = v179;
LABEL_124:
            sub_1000C1AF8();
            swift_bridgeObjectRelease();
            uint64_t v85 = v159;
            sub_100406BD8(v159);
            id v17 = v160;
            sub_1000966BC((uint64_t)v160, (uint64_t *)&unk_100913A60);
            unint64_t v83 = v177 + 1;
            uint64_t v84 = v166;
            uint64_t v82 = v169;
            if (v177 + 1 == v172)
            {
              unint64_t v81 = (unint64_t)v178;
              swift_bridgeObjectRelease();
              int64_t v109 = *(void *)(v81 + 16);
              int64_t v108 = v172;
              if (v109 >= v172) {
                goto LABEL_130;
              }
LABEL_202:
              __break(1u);
              return swift_bridgeObjectRelease();
            }
            goto LABEL_89;
          }
          unint64_t v103 = v90[v91];
          if (!v103)
          {
            int64_t v104 = v102 + 2;
            if (v102 + 2 >= v97) {
              goto LABEL_123;
            }
            unint64_t v103 = v90[v104];
            if (v103) {
              goto LABEL_112;
            }
            int64_t v104 = v102 + 3;
            if (v102 + 3 >= v97) {
              goto LABEL_123;
            }
            unint64_t v103 = v90[v104];
            if (v103) {
              goto LABEL_112;
            }
            int64_t v104 = v102 + 4;
            if (v102 + 4 >= v97) {
              goto LABEL_123;
            }
            unint64_t v103 = v90[v104];
            if (v103) {
              goto LABEL_112;
            }
            int64_t v104 = v102 + 5;
            if (v102 + 5 >= v97) {
              goto LABEL_123;
            }
            unint64_t v103 = v90[v104];
            if (v103)
            {
LABEL_112:
              int64_t v91 = v104;
            }
            else
            {
              int64_t v91 = v102 + 6;
              if (v102 + 6 >= v97) {
                goto LABEL_123;
              }
              unint64_t v103 = v90[v91];
              if (!v103)
              {
                int64_t v106 = v102 + 7;
                uint64_t v2 = v179;
                do
                {
                  if (v97 == v106) {
                    goto LABEL_124;
                  }
                  unint64_t v103 = v90[v106++];
                }
                while (!v103);
                int64_t v91 = v106 - 1;
              }
            }
          }
          unint64_t v93 = (v103 - 1) & v103;
          unint64_t v99 = __clz(__rbit64(v103)) + (v91 << 6);
        }
        id v100 = *(id *)(*(void *)(v89 + 48) + 8 * v99);
        if (!v100) {
          goto LABEL_123;
        }
      }
      unsigned int v101 = [v181 isKindOfEntity:v100, v153];
    }
    while (!v101);
    sub_1000C1AF8();
    swift_bridgeObjectRelease();
    uint64_t v107 = v159;
    sub_100401EA4(v162);
    sub_100406BD8(v107);
    sub_1000966BC((uint64_t)v160, (uint64_t *)&unk_100913A60);
    unint64_t v81 = (unint64_t)v178;
    swift_bridgeObjectRelease();
    int64_t v108 = v177;
    int64_t v109 = v177 + 1;
    uint64_t v2 = v179;
    if (__OFADD__(v177, 1)) {
      goto LABEL_220;
    }
    unint64_t v110 = *(void *)(v81 + 16);
    BOOL v111 = v166;
    if (v109 == v110) {
      goto LABEL_129;
    }
    while (2)
    {
      if (v109 >= v110) {
        goto LABEL_207;
      }
      uint64_t v178 = (void *)v81;
      uint64_t v112 = (char *)(v81 + v170);
      id v174 = (id)v109;
      int64_t v167 = v109 * (void)v111;
      uint64_t v113 = (unsigned int (**)(char *, uint64_t, uint64_t))(v81 + v170 + v109 * (void)v111);
      uint64_t v114 = v176;
      sub_1000BF710((uint64_t)v113, v176, (uint64_t *)&unk_100913A60);
      uint64_t v115 = *(int *)(v171 + 48);
      uint64_t v116 = v165;
      sub_100404DF8(v114, v165, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
      unint64_t v117 = *(void *)(v114 + v115);
      sub_100406B74(v116, v175);
      uint64_t v179 = v2;
      unint64_t v177 = v108;
      int v168 = v113;
      uint64_t v169 = v112;
      id v173 = (id)v117;
      if ((v117 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain_n();
        __CocoaSet.makeIterator()();
        sub_1000963CC(0, (unint64_t *)&unk_100917C20);
        sub_1000E4F40(&qword_10090B7C8, (unint64_t *)&unk_100917C20);
        Set.Iterator.init(_cocoa:)();
        unint64_t v117 = (unint64_t)v185;
        unint64_t v118 = v186;
        uint64_t v119 = v187;
        int64_t v120 = v188;
        unint64_t v121 = v189;
      }
      else
      {
        uint64_t v122 = -1 << *(unsigned char *)(v117 + 32);
        unint64_t v118 = (void *)(v117 + 56);
        uint64_t v119 = ~v122;
        uint64_t v123 = -v122;
        if (v123 < 64) {
          uint64_t v124 = ~(-1 << v123);
        }
        else {
          uint64_t v124 = -1;
        }
        unint64_t v121 = v124 & *(void *)(v117 + 56);
        swift_bridgeObjectRetain_n();
        int64_t v120 = 0;
      }
      int64_t v172 = v119;
      int64_t v125 = (unint64_t)(v119 + 64) >> 6;
      while (1)
      {
        int64_t v130 = v120;
        if ((v117 & 0x8000000000000000) == 0) {
          break;
        }
        uint64_t v133 = __CocoaSet.Iterator.next()();
        if (!v133) {
          goto LABEL_168;
        }
        uint64_t v182 = v133;
        sub_1000963CC(0, (unint64_t *)&unk_100917C20);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v128 = v183;
        swift_unknownObjectRelease();
        if (!v128) {
          goto LABEL_168;
        }
LABEL_142:
        unsigned int v129 = [v181 isKindOfEntity:v128];

        if (v129)
        {
          sub_1000C1AF8();
          swift_bridgeObjectRelease();
          uint64_t v135 = v175;
          sub_100401EA4(v162);
          sub_100406BD8(v135);
          sub_1000966BC(v176, (uint64_t *)&unk_100913A60);
          unint64_t v81 = (unint64_t)v178;
          uint64_t v2 = v179;
          int64_t v108 = v177;
          BOOL v111 = v166;
          unint64_t v136 = (unint64_t)v174;
          goto LABEL_180;
        }
      }
      if (v121)
      {
        unint64_t v126 = __clz(__rbit64(v121));
        v121 &= v121 - 1;
        unint64_t v127 = v126 | (v120 << 6);
        goto LABEL_141;
      }
      ++v120;
      if (__OFADD__(v130, 1))
      {
        __break(1u);
        goto LABEL_206;
      }
      if (v120 >= v125) {
        goto LABEL_168;
      }
      unint64_t v131 = v118[v120];
      if (v131) {
        goto LABEL_157;
      }
      int64_t v132 = v130 + 2;
      if (v130 + 2 >= v125) {
        goto LABEL_168;
      }
      unint64_t v131 = v118[v132];
      if (v131) {
        goto LABEL_156;
      }
      int64_t v132 = v130 + 3;
      if (v130 + 3 >= v125) {
        goto LABEL_168;
      }
      unint64_t v131 = v118[v132];
      if (v131) {
        goto LABEL_156;
      }
      int64_t v132 = v130 + 4;
      if (v130 + 4 >= v125) {
        goto LABEL_168;
      }
      unint64_t v131 = v118[v132];
      if (v131) {
        goto LABEL_156;
      }
      int64_t v132 = v130 + 5;
      if (v130 + 5 >= v125) {
        goto LABEL_168;
      }
      unint64_t v131 = v118[v132];
      if (v131)
      {
LABEL_156:
        int64_t v120 = v132;
LABEL_157:
        unint64_t v121 = (v131 - 1) & v131;
        unint64_t v127 = __clz(__rbit64(v131)) + (v120 << 6);
LABEL_141:
        id v128 = *(id *)(*(void *)(v117 + 48) + 8 * v127);
        if (!v128) {
          goto LABEL_168;
        }
        goto LABEL_142;
      }
      int64_t v120 = v130 + 6;
      if (v130 + 6 >= v125) {
        goto LABEL_168;
      }
      unint64_t v131 = v118[v120];
      if (v131) {
        goto LABEL_157;
      }
      int64_t v134 = v130 + 7;
      while (v125 != v134)
      {
        unint64_t v131 = v118[v134++];
        if (v131)
        {
          int64_t v120 = v134 - 1;
          goto LABEL_157;
        }
      }
LABEL_168:
      sub_1000C1AF8();
      swift_bridgeObjectRelease();
      sub_100406BD8(v175);
      sub_1000966BC(v176, (uint64_t *)&unk_100913A60);
      unint64_t v137 = v177;
      unint64_t v136 = (unint64_t)v174;
      if ((id)v177 == v174)
      {
        unint64_t v81 = (unint64_t)v178;
        uint64_t v2 = v179;
        BOOL v111 = v166;
        int64_t v108 = v177 + 1;
        if (__OFADD__(v177, 1)) {
          goto LABEL_209;
        }
      }
      else
      {
        unint64_t v81 = (unint64_t)v178;
        uint64_t v2 = v179;
        BOOL v111 = v166;
        if ((v177 & 0x8000000000000000) != 0) {
          goto LABEL_211;
        }
        unint64_t v138 = v178[2];
        if (v177 >= v138) {
          goto LABEL_212;
        }
        uint64_t v139 = v177 * (void)v166;
        sub_1000BF710((uint64_t)&v169[v177 * (void)v166], v164, (uint64_t *)&unk_100913A60);
        if (v136 >= v138) {
          goto LABEL_213;
        }
        sub_1000BF710((uint64_t)v168, v163, (uint64_t *)&unk_100913A60);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v81 = sub_1001ECE20(v81);
        }
        if (v137 >= *(void *)(v81 + 16)) {
          goto LABEL_214;
        }
        unint64_t v140 = v81 + v170;
        sub_1000B1CB4(v163, v81 + v170 + v139, (uint64_t *)&unk_100913A60);
        if (v136 >= *(void *)(v81 + 16)) {
          goto LABEL_215;
        }
        sub_1000B1CB4(v164, v140 + v167, (uint64_t *)&unk_100913A60);
        BOOL v42 = __OFADD__(v137, 1);
        int64_t v108 = v137 + 1;
        if (v42) {
          goto LABEL_209;
        }
      }
LABEL_180:
      BOOL v42 = __OFADD__(v136, 1);
      int64_t v109 = v136 + 1;
      if (v42) {
        goto LABEL_208;
      }
      unint64_t v110 = *(void *)(v81 + 16);
      if (v109 != v110) {
        continue;
      }
      break;
    }
LABEL_129:
    if (v109 < v108) {
      goto LABEL_202;
    }
LABEL_130:
    if (v108 < 0) {
      break;
    }
LABEL_184:
    uint64_t v179 = v2;
    int64_t v142 = v108 - v109;
    if (__OFADD__(v109, v108 - v109)) {
      goto LABEL_218;
    }
    int64_t v143 = v108;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v108 > *(void *)(v81 + 24) >> 1)
    {
      if (v109 <= v108) {
        int64_t v145 = v108;
      }
      else {
        int64_t v145 = v109;
      }
      unint64_t v81 = sub_10030BCA8(isUniquelyReferenced_nonNull_native, v145, 1, v81);
    }
    int64_t v146 = v109;
    uint64_t v147 = (void *)v81;
    unint64_t v148 = v81 + ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80));
    uint64_t v149 = *(void *)(v161 + 72);
    int64_t v150 = v149 * v143;
    swift_arrayDestroy();
    if (v146 != v143)
    {
      uint64_t v151 = v147[2] - v146;
      if (v151 < 0) {
        goto LABEL_225;
      }
      if (v150 < v149 * v146 || v148 + v149 * v143 >= v148 + v149 * v146 + v151 * v149)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v150 != v149 * v146)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v74 = v147[2];
      BOOL v42 = __OFADD__(v74, v142);
      uint64_t v75 = v74 + v142;
      if (v42) {
        goto LABEL_221;
      }
      v147[2] = v75;
    }
    uint64_t v178 = v147;

    uint64_t v2 = v179;
    uint64_t v68 = v161;
    id v17 = v160;
    int64_t v73 = v158;
    unint64_t v72 = v157;
  }
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  __break(1u);
LABEL_224:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_225:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100401BE8()
{
  swift_slowDealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100401C48@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0) - 8;
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v17 = (char *)&v27 - v16;
  UUID.init()();
  sub_100404DF8(a5, (uint64_t)v17, type metadata accessor for RDStoreControllerNotificationCenter.Token);
  *(void *)&v17[*(int *)(v11 + 28)] = a1;
  *(void *)&v17[*(int *)(v11 + 32)] = a2;
  uint64_t v18 = &v17[*(int *)(v11 + 36)];
  *(void *)uint64_t v18 = a3;
  *((void *)v18 + 1) = a4;
  uint64_t v19 = *(os_unfair_lock_s **)(v5 + 40);
  swift_bridgeObjectRetain();
  id v20 = a2;
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_100404DF8((uint64_t)v17, (uint64_t)v15, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
  uint64_t v21 = (unint64_t *)(v5 + 48);
  swift_beginAccess();
  unint64_t v22 = *(void *)(v5 + 48);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 48) = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v22 = sub_100308C8C(0, *(void *)(v22 + 16) + 1, 1, v22);
    unint64_t *v21 = v22;
  }
  unint64_t v25 = *(void *)(v22 + 16);
  unint64_t v24 = *(void *)(v22 + 24);
  if (v25 >= v24 >> 1)
  {
    unint64_t v22 = sub_100308C8C(v24 > 1, v25 + 1, 1, v22);
    unint64_t *v21 = v22;
  }
  *(void *)(v22 + 16) = v25 + 1;
  sub_100406B74((uint64_t)v15, v22+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v25);
  swift_endAccess();
  os_unfair_lock_unlock(v19);
  return sub_100406BD8((uint64_t)v17);
}

uint64_t sub_100401E78()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_100401EA4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  v18[1] = *(void *)(v2 + *(int *)(__chkstk_darwin(v11 - 8) + 32));
  sub_100404DF8(v2, (uint64_t)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for RDStoreControllerNotificationCenter.Observer);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  sub_100406B74((uint64_t)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14);
  *(void *)(v15 + ((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
  aBlock[4] = sub_100406E28;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C5270;
  uint64_t v16 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  id v20 = _swiftEmptyArrayStorage;
  sub_100403B28((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v19);
  return swift_release();
}

void sub_10040221C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(NSObject **)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004087A4(a1);
  uint64_t v13 = v12;
  unint64_t v14 = (void *)v2[2];
  Class isa = Notification._bridgeToObjectiveC()().super.isa;
  LODWORD(v14) = [v14 notificationContainsInternalChangesOnly:isa];

  if (v14)
  {
    swift_bridgeObjectRelease();
    if (qword_1009074F0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_1009179D0);
    os_log_t v34 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v17, "RDStoreControllerNotificationCenter: Store notification is ICCC or change tracking internal changes only. Skipping.", v18, 2u);
      swift_slowDealloc();
    }
    os_log_t v19 = v34;
  }
  else
  {
    uint64_t v31 = v13;
    if (qword_1009074F0 != -1) {
      swift_once();
    }
    uint64_t v32 = v9;
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E2DC(v20, (uint64_t)qword_1009179D0);
    swift_retain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v33 = v8;
    os_log_t v34 = v5;
    if (v23)
    {
      uint64_t v30 = v4;
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v24 = 136315138;
      if (v2[4])
      {
        uint64_t v25 = v2[3];
        unint64_t v26 = v2[4];
      }
      else
      {
        unint64_t v26 = 0xE300000000000000;
        uint64_t v25 = 7104878;
      }
      swift_bridgeObjectRetain();
      uint64_t v35 = (void *)sub_1000C51B8(v25, v26, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter}, label: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v4 = v30;
    }
    else
    {

      swift_release_n();
    }
    uint64_t v27 = os_transaction_create();
    if (qword_1009070C0 != -1) {
      swift_once();
    }
    int v28 = (void *)swift_allocObject();
    v28[2] = v31;
    v28[3] = v2;
    v28[4] = v27;
    aBlock[4] = (uint64_t)sub_100408B70;
    aBlock[5] = (uint64_t)v28;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100236C78;
    aBlock[3] = (uint64_t)&unk_1008C5388;
    int64_t v29 = _Block_copy(aBlock);
    swift_retain();
    swift_unknownObjectRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v35 = _swiftEmptyArrayStorage;
    sub_100403B28((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v29);
    swift_unknownObjectRelease();
    ((void (*)(char *, uint64_t))v34[1].isa)(v7, v4);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v33);
    swift_release();
  }
}

void sub_1004027F4(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = a2;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = [self currentThread];
  BOOL v62 = (char *)[v7 qualityOfService];

  unint64_t v8 = a1 & 0xC000000000000001;
  uint64_t v58 = v4;
  uint64_t v59 = v3;
  uint64_t v57 = v6;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v9 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v9 = *(void *)(a1 + 16);
  }
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v67 = _swiftEmptyArrayStorage;
    sub_1001DEA1C(0, v9 & ~(v9 >> 63), 0);
    if (v8)
    {
      uint64_t v11 = __CocoaSet.startIndex.getter();
      unsigned __int8 v13 = 1;
    }
    else
    {
      uint64_t v11 = sub_1003CA790(a1);
      unsigned __int8 v13 = v14 & 1;
    }
    uint64_t v64 = v11;
    uint64_t v65 = v12;
    unsigned __int8 v66 = v13;
    if ((v9 & 0x8000000000000000) == 0)
    {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0) {
        uint64_t v15 = a1;
      }
      uint64_t v61 = v15;
      while (1)
      {
        while (1)
        {
          uint64_t v21 = v64;
          uint64_t v22 = v65;
          uint64_t v23 = v66;
          sub_1003CA754(v64, v65, v66, a1);
          uint64_t v25 = v24;
          unint64_t v26 = v67;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1001DEA1C(0, v26[2] + 1, 1);
            unint64_t v26 = v67;
          }
          unint64_t v28 = v26[2];
          unint64_t v27 = v26[3];
          if (v28 >= v27 >> 1)
          {
            sub_1001DEA1C(v27 > 1, v28 + 1, 1);
            unint64_t v26 = v67;
          }
          void v26[2] = v28 + 1;
          int64_t v29 = &v26[2 * v28];
          uint64_t v30 = v62;
          v29[4] = v25;
          v29[5] = v30;
          if (v8) {
            break;
          }
          uint64_t v16 = sub_1003C9E34(v21, v22, v23, a1);
          uint64_t v18 = v17;
          char v20 = v19;
          sub_1000E4EA4(v21, v22, v23);
          uint64_t v64 = v16;
          uint64_t v65 = v18;
          unsigned __int8 v66 = v20 & 1;
          if (!--v9) {
            goto LABEL_22;
          }
        }
        if ((v23 & 1) == 0) {
          break;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100094134((uint64_t *)&unk_100917CB0);
        uint64_t v31 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v31(v63, 0);
        if (!--v9)
        {
LABEL_22:
          sub_1000E4EA4(v64, v65, v66);
          uint64_t v10 = v67;
          goto LABEL_23;
        }
      }
      __break(1u);
      goto LABEL_50;
    }
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  LOBYTE(v32) = (_BYTE)v62 + 1;
  uint64_t v6 = &qword_100907000;
  uint64_t v9 = v60;
  if ((unint64_t)(v62 + 1) > 0x22) {
    goto LABEL_32;
  }
  if (((1 << (char)v32) & 0x40401) != 0)
  {
    uint64_t v32 = *(void **)(v60 + 56);
    if (v32)
    {
LABEL_36:
      os_log_t v34 = v32;
      uint64_t v50 = sub_100127AA8((uint64_t)v10);
      swift_bridgeObjectRelease();
      sub_1003FCE80(v50, 0, 0);
      goto LABEL_37;
    }
    __break(1u);
  }
  if (((1 << (char)v32) & 0x404000000) == 0)
  {
LABEL_32:
    if (qword_1009074F0 == -1) {
      goto LABEL_33;
    }
    goto LABEL_48;
  }
  uint64_t v33 = *(void **)(v9 + 56);
  if (!v33)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    return;
  }
  os_log_t v34 = v33;
  sub_100127AA8((uint64_t)v10);
  swift_bridgeObjectRelease();
  BOOL v62 = (char *)qword_10090A658;
  uint64_t v35 = *(void **)((char *)v34 + qword_10090A658);
  uint64_t v9 = (uint64_t)v57;
  uint64_t v36 = v58;
  uint64_t *v57 = (uint64_t)v35;
  uint64_t v37 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v10 = *(void **)(v36 + 104);
  uint64_t v38 = v59;
  ((void (*)(uint64_t, void, uint64_t))v10)(v9, enum case for DispatchPredicate.onQueue(_:), v59);
  id v39 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)();
  unint64_t v41 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  uint64_t v6 = (uint64_t *)(v36 + 8);
  unint64_t v40 = v41;
  v41(v9, v38);
  if ((v35 & 1) == 0) {
    goto LABEL_46;
  }
  sub_1003FD654();
  BOOL v42 = *(void **)&v62[(void)v34];
  *(void *)uint64_t v9 = v42;
  ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v9, v37, v38);
  id v43 = v42;
  char v44 = _dispatchPreconditionTest(_:)();
  v40(v9, v38);
  if ((v44 & 1) == 0)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    swift_once();
LABEL_33:
    uint64_t v46 = type metadata accessor for Logger();
    sub_10008E2DC(v46, (uint64_t)qword_1009179D0);
    unint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 134349056;
      v63[0] = (uint64_t)v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_slowDealloc();
    }

    uint64_t v32 = *(void **)(v9 + 56);
    if (!v32) {
      goto LABEL_51;
    }
    goto LABEL_36;
  }
  swift_beginAccess();
  uint64_t v45 = swift_bridgeObjectRetain();
  sub_1002F6144(v45);
  swift_endAccess();
  sub_1003FF668();
  uint64_t v9 = v60;
  uint64_t v6 = &qword_100907000;
LABEL_37:

  swift_bridgeObjectRelease();
  if (v6[158] != -1) {
    swift_once();
  }
  uint64_t v51 = type metadata accessor for Logger();
  sub_10008E2DC(v51, (uint64_t)qword_1009179D0);
  swift_retain_n();
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    v63[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136315138;
    if (*(void *)(v9 + 32))
    {
      uint64_t v55 = *(void *)(v9 + 24);
      unint64_t v56 = *(void *)(v9 + 32);
    }
    else
    {
      unint64_t v56 = 0xE300000000000000;
      uint64_t v55 = 7104878;
    }
    swift_bridgeObjectRetain();
    uint64_t v64 = sub_1000C51B8(v55, v56, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter}, label: %s", v54, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}