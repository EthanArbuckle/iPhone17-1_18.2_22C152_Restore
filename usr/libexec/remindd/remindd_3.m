Swift::Int sub_1002342F4()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_100783098[v1]);
  return Hasher._finalize()();
}

void sub_100234344()
{
  Hasher._combine(_:)(word_100783098[*v0]);
}

Swift::Int sub_10023437C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_100783098[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1002343C8@<X0>(unsigned __int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100236638(*a1);
  *a2 = result;
  return result;
}

void sub_1002343F4(_WORD *a1@<X8>)
{
  *a1 = word_100783098[*v1];
}

unint64_t sub_10023440C()
{
  return sub_10023420C(*v0);
}

void sub_100234414(void *a1@<X8>)
{
  *a1 = &off_1008B60D0;
}

id sub_100234424()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  v4 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  v15 = (char *)&v84 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v84 - v16;
  id v18 = [v1 accountIdentifier];
  if (!v18)
  {
    v44 = self;
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    __chkstk_darwin(ObjCClassFromMetadata);
    swift_getKeyPath();
    sub_10034D384();
    swift_release();
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v47 = [v44 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v46];
LABEL_13:
    v47;

    swift_willThrow();
    goto LABEL_14;
  }
  v19 = v18;
  uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v94 = v20;

  id v21 = [v1 activityDate];
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_12;
  }
  v22 = v21;
  v93 = v17;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v23 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v23(v7, v15, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909A40);
    v48 = self;
    uint64_t v49 = swift_getObjCClassFromMetadata();
    __chkstk_darwin(v49);
    swift_getKeyPath();
    sub_10034D384();
    swift_release();
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v47 = [v48 unexpectedNilPropertyWithClass:v49 property:v46];
    goto LABEL_13;
  }
  v24 = v93;
  v23(v93, v7, v8);
  unsigned int v25 = [v1 activityTypeRawValue];
  if (v25 > 5)
  {
    swift_bridgeObjectRelease();
    v62 = self;
    uint64_t v63 = swift_getObjCClassFromMetadata();
    __chkstk_darwin(v63);
    swift_getKeyPath();
    sub_10034D384();
    swift_release();
    NSString v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v62 unexpectedNilPropertyWithClass:v63 property:v64];

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v24, v8);
  }
  else
  {
    char v26 = v25;
    id v27 = [v1 authorUserRecordIDString];
    if (v27)
    {
      v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;

      id v32 = [v1 ckIdentifier];
      if (v32)
      {
        v33 = v32;
        uint64_t v90 = v29;
        uint64_t v91 = v31;
        uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v35 = v34;

        id v36 = [v1 sharedEntityName];
        if (v36)
        {
          v37 = v36;
          uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v87 = v39;
          uint64_t v88 = v38;

          (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v93, v8);
          uint64_t v86 = qword_100783068[(0x20504030100uLL >> (8 * v26)) & 7];
          id v40 = [v1 ckParentCloudObjectEntityName];
          if (v40)
          {
            v41 = v40;
            uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v84 = v43;
            uint64_t v85 = v42;
          }
          else
          {
            uint64_t v84 = 0;
            uint64_t v85 = 0;
          }
          id v73 = [v1 ckParentCloudObjectIdentifier:v84, v85];
          v74 = v93;
          if (v73)
          {
            v75 = v73;
            uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v78 = v77;
          }
          else
          {
            uint64_t v76 = 0;
            uint64_t v78 = 0;
          }
          id v79 = [v1 uuidForChangeTracking];
          if (v79)
          {
            v80 = v79;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v81 = type metadata accessor for UUID();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v4, 0, 1, v81);
          }
          else
          {
            uint64_t v82 = type metadata accessor for UUID();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v4, 1, 1, v82);
          }
          id v83 = objc_allocWithZone((Class)REMSharedEntitySyncActivity);
          id v60 = sub_10010B65C(v92, v94, (uint64_t)v12, v86, v90, v91, v85, v84, v76, v78, v89, v35, v88, v87, (uint64_t)v4);
          (*(void (**)(char *, uint64_t))(v9 + 8))(v74, v8);
          return v60;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v71 = self;
        uint64_t v72 = swift_getObjCClassFromMetadata();
        __chkstk_darwin(v72);
        swift_getKeyPath();
        sub_10034D384();
        swift_release();
        NSString v67 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v68 = [v71 unexpectedNilPropertyWithClass:v72 property:v67];
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v69 = self;
        uint64_t v70 = swift_getObjCClassFromMetadata();
        __chkstk_darwin(v70);
        swift_getKeyPath();
        sub_10034D384();
        swift_release();
        NSString v67 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v68 = [v69 unexpectedNilPropertyWithClass:v70 property:v67];
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v65 = self;
      uint64_t v66 = swift_getObjCClassFromMetadata();
      __chkstk_darwin(v66);
      swift_getKeyPath();
      sub_10034D384();
      swift_release();
      NSString v67 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v68 = [v65 unexpectedNilPropertyWithClass:v66 property:v67];
    }
    v68;

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v93, v8);
  }
LABEL_14:
  if (qword_100907198 != -1) {
    swift_once();
  }
  uint64_t v50 = type metadata accessor for Logger();
  sub_10008E2DC(v50, (uint64_t)qword_100910E50);
  swift_errorRetain();
  id v51 = v1;
  swift_errorRetain();
  id v52 = v51;
  v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v55 = 136315650;
    uint64_t v95 = sub_1000C51B8(0xD000000000000014, 0x80000001007CF690, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v55 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v56 = Error.rem_errorDescription.getter();
    uint64_t v95 = sub_1000C51B8(v56, v57, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v55 + 22) = 2082;
    uint64_t v58 = sub_1002351F8();
    uint64_t v95 = sub_1000C51B8(v58, v59, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "ðŸ““ %s: An unexpected error occurred {description: %{public}s, activityObject: %{public}s}", (uint8_t *)v55, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  return 0;
}

uint64_t sub_100235004@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 activityDate];
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1002350CC(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CAA4C(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setActivityDate:isa];
}

uint64_t sub_1002351F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v45 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v44 - v9;
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100778380;
  id v12 = [v1 accountIdentifier];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v16 = 0;
  }
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v17 = sub_1000C5B38();
  *(void *)(v11 + 64) = v17;
  if (v16) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = 7104878;
  }
  unint64_t v19 = 0xE300000000000000;
  if (v16) {
    unint64_t v20 = v16;
  }
  else {
    unint64_t v20 = 0xE300000000000000;
  }
  *(void *)(v11 + 32) = v18;
  *(void *)(v11 + 40) = v20;
  unsigned int v21 = [v1 activityTypeRawValue];
  unint64_t v22 = 6579297;
  switch(v21)
  {
    case 0u:
      unint64_t v19 = 0xE700000000000000;
      unint64_t v22 = 0x6E776F6E6B6E75;
      goto LABEL_18;
    case 1u:
      goto LABEL_18;
    case 2u:
      v23 = "titleMayHaveDirtyHashtag";
      goto LABEL_15;
    case 3u:
      v23 = "notesMayHaveDirtyHashtag";
LABEL_15:
      unint64_t v19 = (unint64_t)(v23 - 32) | 0x8000000000000000;
      unint64_t v22 = 0xD000000000000018;
      goto LABEL_18;
    case 4u:
      unint64_t v22 = 0xD00000000000001BLL;
      unint64_t v19 = 0x80000001007CF560;
      goto LABEL_18;
    case 5u:
      unint64_t v19 = 0xE800000000000000;
      unint64_t v22 = 0x6574656C706D6F63;
LABEL_18:
      *(void *)(v11 + 96) = &type metadata for String;
      *(void *)(v11 + 104) = v17;
      *(void *)(v11 + 72) = v22;
      break;
    default:
      *(void *)(v11 + 96) = &type metadata for String;
      *(void *)(v11 + 104) = v17;
      *(void *)(v11 + 72) = 7104878;
      break;
  }
  *(void *)(v11 + 80) = v19;
  id v24 = [v1 ckIdentifier];
  if (v24)
  {
    unsigned int v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;

    uint64_t v29 = (uint64_t *)(v11 + 112);
    *(void *)(v11 + 136) = &type metadata for String;
    *(void *)(v11 + 144) = v17;
    if (v28)
    {
      *uint64_t v29 = v26;
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v29 = (uint64_t *)(v11 + 112);
    *(void *)(v11 + 136) = &type metadata for String;
    *(void *)(v11 + 144) = v17;
  }
  *uint64_t v29 = 7104878;
  unint64_t v28 = 0xE300000000000000;
LABEL_24:
  *(void *)(v11 + 120) = v28;
  id v30 = [v1 sharedEntityName];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

    uint64_t v35 = (uint64_t *)(v11 + 152);
    *(void *)(v11 + 176) = &type metadata for String;
    *(void *)(v11 + 184) = v17;
    if (v34)
    {
      *uint64_t v35 = v32;
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v35 = (uint64_t *)(v11 + 152);
    *(void *)(v11 + 176) = &type metadata for String;
    *(void *)(v11 + 184) = v17;
  }
  *uint64_t v35 = 7104878;
  unint64_t v34 = 0xE300000000000000;
LABEL_29:
  *(void *)(v11 + 160) = v34;
  id v36 = [v1 uuidForChangeTracking];
  if (v36)
  {
    v37 = v36;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v38 = v45;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v8, 0, 1, v2);
  }
  else
  {
    uint64_t v38 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v8, 1, 1, v2);
  }
  sub_1000F44F4((uint64_t)v8, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v10, 1, v2))
  {
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
    uint64_t v39 = (uint64_t *)(v11 + 192);
    *(void *)(v11 + 216) = &type metadata for String;
    *(void *)(v11 + 224) = v17;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v4, v10, v2);
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
    uint64_t v41 = UUID.uuidString.getter();
    unint64_t v40 = v42;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v2);
    uint64_t v39 = (uint64_t *)(v11 + 192);
    *(void *)(v11 + 216) = &type metadata for String;
    *(void *)(v11 + 224) = v17;
    if (v40)
    {
      *uint64_t v39 = v41;
      goto LABEL_37;
    }
  }
  *uint64_t v39 = 7104878;
  unint64_t v40 = 0xE300000000000000;
LABEL_37:
  *(void *)(v11 + 200) = v40;
  return String.init(format:_:)();
}

void sub_100235704(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v6 = __chkstk_darwin(v4).n128_u64[0];
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v9 = [a1 accountIdentifier:v6];
  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setAccountIdentifier:v9];

  id v10 = [a1 activityDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  [v2 setActivityDate:isa];

  [v2 setActivityTypeRawValue:(__int16)word_100783098[(char)sub_100236664((unint64_t)objc_msgSend(a1, "activityType"))]];
  NSString v12 = [a1 authorUserRecordIDString];
  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setAuthorUserRecordIDString:v12];

  id v13 = [a1 ckParentCloudObjectEntityName];
  [v2 setCkParentCloudObjectEntityName:v13];

  id v14 = [a1 ckParentCloudObjectIdentifier];
  [v2 setCkParentCloudObjectIdentifier:v14];

  NSString v15 = [a1 ckIdentifier];
  if (!v15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setCkIdentifier:v15];

  NSString v16 = [a1 sharedEntityName];
  if (!v16)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setSharedEntityName:v16];
}

void sub_100235A64(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  type metadata accessor for REMCKSharedEntitySyncActivity();
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v9 = [ObjCClassFromMetadata entity];
  id v10 = [objc_allocWithZone((Class)ObjCClassFromMetadata) initWithEntity:v9 insertIntoManagedObjectContext:a1];
  id v11 = a2;
  id v12 = v10;
  [a1 assignObject:v12 toPersistentStore:v11];

  sub_100235704(a3);
  *a4 = v12;
}

id sub_100235B28()
{
  uint64_t v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  double v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  *(void *)&double v8 = __chkstk_darwin(v7 - 8).n128_u64[0];
  id v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [v1 uuidForChangeTracking:v8];
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v10, 1, 1, v3);
    goto LABEL_5;
  }
  id v12 = v11;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v6, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v10, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
LABEL_5:
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
    UUID.init()();
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    [v1 setUuidForChangeTracking:isa];

    goto LABEL_6;
  }
  sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
LABEL_6:
  v15.receiver = v1;
  v15.super_class = ObjectType;
  return [super willSave];
}

uint64_t type metadata accessor for REMCKSharedEntitySyncActivity()
{
  return self;
}

id sub_100235E34()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v10 = __chkstk_darwin(v9).n128_u64[0];
  id v12 = (char *)&v28 - v11;
  id v13 = [v0 uuidForChangeTracking:v10];
  if (v13)
  {
    id v14 = v13;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    objc_super v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v15(v4, v8, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v15(v12, v4, v5);
      uint64_t v29 = ObjectType;
      sub_100094134(&qword_10090F108);
      String.init<A>(describing:)();
      id v16 = objc_allocWithZone((Class)REMObjectID);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v19 = [v16 initWithUUID:isa entityName:v18];

      (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
      return v19;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909E50);
  if (qword_100907198 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10008E2DC(v20, (uint64_t)qword_100910E50);
  id v21 = v0;
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    unsigned int v25 = (void *)swift_slowAlloc();
    *(_DWORD *)id v24 = 138412290;
    id v26 = [v21 objectID];
    uint64_t v29 = (uint64_t)v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unsigned int v25 = v26;

    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Cannot return a -remObjectID because REMCKSharedEntitySyncActivity does not have a UUID for change tracking {%@}", v24, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_100236284(void *a1, id a2)
{
  uint64_t v3 = [a2 storeController];
  if (v3)
  {
    uint64_t v4 = v3;
    NSString v5 = [a1 accountIdentifier];
    if (!v5)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v6 = [v4 storeForAccountIdentifier:v5];

    if (v6)
    {
      __chkstk_darwin(v7);
      type metadata accessor for REMCKSharedEntitySyncActivity();
      NSManagedObjectContext.rem_performAndWait<A>(_:)();

      return v16;
    }
    if (qword_100907198 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_100910E50);
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      objc_super v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)objc_super v15 = 136315138;
      sub_1000C51B8(0xD000000000000022, 0x80000001007CF660, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ðŸ““ REMCKSharedEntitySyncActivity:%s | Unable to get persistentStore for accountIdentifier.", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_100907198 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100910E50);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      sub_1000C51B8(0xD000000000000022, 0x80000001007CF660, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v10, "ðŸ““ REMCKSharedEntitySyncActivity:%s | Unable to get storeController from RDStoreControllerManagedObjectContext", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }

  return 0;
}

uint64_t sub_100236638(unsigned __int16 a1)
{
  if (a1 >= 6u) {
    return 6;
  }
  else {
    return (0x20504030100uLL >> (8 * a1));
  }
}

unint64_t sub_100236664(unint64_t a1)
{
  if (a1 < 6) {
    return 0x20504030100uLL >> (8 * a1);
  }
  if (qword_100907198 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_100910E50);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    sub_1000C51B8(0xD000000000000026, 0x80000001007CF630, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2082;
    if (a1 == 5) {
      uint64_t v7 = 0x6574656C706D6F63;
    }
    else {
      uint64_t v7 = 0x206E776F6E6B6E75;
    }
    if (a1 == 5) {
      unint64_t v8 = 0xE800000000000000;
    }
    else {
      unint64_t v8 = 0xEF746C7561666564;
    }
    unint64_t v9 = v8;
    String.append(_:)(*(Swift::String *)&v7);
    swift_bridgeObjectRelease();
    sub_1000C51B8(0, 0xE000000000000000, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ðŸ““ %s: An unexpected error occurred: unknown activityType: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return 0;
}

void sub_10023689C(void *a1@<X8>)
{
  sub_100235A64(v1[2], v1[3], v1[4], a1);
}

const char *sub_1002368A8()
{
  return "accountIdentifier";
}

void sub_1002368B4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1002368D4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1002368F4()
{
  return "activityDate";
}

uint64_t sub_100236908@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1002340FC();
  *a1 = result;
  return result;
}

id sub_100236934(char *a1, id *a2)
{
  return [*a2 setActivityTypeRawValue:word_1007830A4[*a1]];
}

const char *sub_100236954()
{
  return "authorUserRecordIDString";
}

void sub_100236960(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100236980(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002369A0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1002369C0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1002369E0()
{
  return "sharedEntityName";
}

void sub_1002369EC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100236A0C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t getEnumTagSinglePayload for REMCKSharedEntitySyncActivity.ActivityType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for REMCKSharedEntitySyncActivity.ActivityType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100236B88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMCKSharedEntitySyncActivity.ActivityType()
{
  return &type metadata for REMCKSharedEntitySyncActivity.ActivityType;
}

unint64_t sub_100236BC4()
{
  unint64_t result = qword_100910E90;
  if (!qword_100910E90)
  {
    sub_100096058(&qword_100910E98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910E90);
  }
  return result;
}

unint64_t sub_100236C24()
{
  unint64_t result = qword_100910EA0;
  if (!qword_100910EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910EA0);
  }
  return result;
}

uint64_t sub_100236C78(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_100236CBC(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    NSString v18 = (void *)(*(void *)(a3 + 48) + 16 * i);
    uint64_t v19 = v18[1];
    v20[0] = *v18;
    v20[1] = v19;
    swift_bridgeObjectRetain();
    a1(v20);
    if (v3)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v16 - 1) & v16;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100236E70(void (*a1)(void *), uint64_t a2, unint64_t a3)
{
}

void sub_100236E9C(void (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    sub_1001207D4();
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v23;
    uint64_t v22 = v24;
    uint64_t v7 = v25;
    int64_t v8 = v26;
    unint64_t v9 = v27;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v22 = a3 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v21 = (unint64_t)(v7 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v28;
    swift_unknownObjectRelease();
    int64_t v15 = v8;
    uint64_t v16 = v9;
    while (v14)
    {
      id v28 = v14;
      a1(&v28);

      if (v4) {
        break;
      }
      int64_t v8 = v15;
      unint64_t v9 = v16;
      if (v5 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v9)
      {
        uint64_t v16 = (v9 - 1) & v9;
        unint64_t v17 = __clz(__rbit64(v9)) | (v8 << 6);
        int64_t v15 = v8;
      }
      else
      {
        int64_t v15 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          return;
        }
        if (v15 >= v21) {
          break;
        }
        unint64_t v18 = *(void *)(v22 + 8 * v15);
        if (!v18)
        {
          int64_t v19 = v8 + 2;
          if (v8 + 2 >= v21) {
            break;
          }
          unint64_t v18 = *(void *)(v22 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v8 + 3;
          if (v8 + 3 >= v21) {
            break;
          }
          unint64_t v18 = *(void *)(v22 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v8 + 4;
          if (v8 + 4 >= v21) {
            break;
          }
          unint64_t v18 = *(void *)(v22 + 8 * v19);
          if (v18)
          {
LABEL_22:
            int64_t v15 = v19;
          }
          else
          {
            int64_t v15 = v8 + 5;
            if (v8 + 5 >= v21) {
              break;
            }
            unint64_t v18 = *(void *)(v22 + 8 * v15);
            if (!v18)
            {
              int64_t v20 = v8 + 6;
              while (v21 != v20)
              {
                unint64_t v18 = *(void *)(v22 + 8 * v20++);
                if (v18)
                {
                  int64_t v15 = v20 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v16 = (v18 - 1) & v18;
        unint64_t v17 = __clz(__rbit64(v18)) + (v15 << 6);
      }
      id v14 = *(id *)(*(void *)(v5 + 48) + 8 * v17);
    }
  }
  sub_1000C1AF8();
}

void sub_1002371A0(void (*a1)(void *), uint64_t a2, unint64_t a3)
{
}

void sub_1002371CC(void (*a1)(void *), uint64_t a2, unint64_t a3, void (*a4)(void))
{
  uint64_t v5 = v4;
  if ((a3 & 0xC000000000000001) != 0)
  {
    unint64_t v27 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v6 = ~v9;
    unint64_t v27 = a3 + 64;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v7 = v11 & *(void *)(a3 + 64);
    unint64_t v8 = a3;
  }
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  int64_t v26 = (unint64_t)(v6 + 64) >> 6;
  if ((v8 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v13 = __CocoaDictionary.Iterator.next()();
  if (v13)
  {
    uint64_t v15 = v14;
    uint64_t v30 = v13;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v16 = (id)v29[0];
    swift_unknownObjectRelease();
    uint64_t v30 = v15;
    a4(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v17 = v29[0];
    swift_unknownObjectRelease();
    int64_t v18 = v12;
    uint64_t v19 = v7;
    while (v16)
    {
      v29[0] = v16;
      v29[1] = v17;
      a1(v29);
      swift_release();

      if (v5) {
        break;
      }
      int64_t v12 = v18;
      unint64_t v7 = v19;
      if ((v8 & 0x8000000000000000) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v7)
      {
        uint64_t v19 = (v7 - 1) & v7;
        unint64_t v20 = __clz(__rbit64(v7)) | (v12 << 6);
        int64_t v18 = v12;
      }
      else
      {
        int64_t v18 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          return;
        }
        if (v18 >= v26) {
          break;
        }
        unint64_t v21 = *(void *)(v27 + 8 * v18);
        if (!v21)
        {
          int64_t v22 = v12 + 2;
          if (v12 + 2 >= v26) {
            break;
          }
          unint64_t v21 = *(void *)(v27 + 8 * v22);
          if (v21) {
            goto LABEL_22;
          }
          int64_t v22 = v12 + 3;
          if (v12 + 3 >= v26) {
            break;
          }
          unint64_t v21 = *(void *)(v27 + 8 * v22);
          if (v21) {
            goto LABEL_22;
          }
          int64_t v22 = v12 + 4;
          if (v12 + 4 >= v26) {
            break;
          }
          unint64_t v21 = *(void *)(v27 + 8 * v22);
          if (v21)
          {
LABEL_22:
            int64_t v18 = v22;
          }
          else
          {
            int64_t v18 = v12 + 5;
            if (v12 + 5 >= v26) {
              break;
            }
            unint64_t v21 = *(void *)(v27 + 8 * v18);
            if (!v21)
            {
              int64_t v24 = v12 + 6;
              while (v26 != v24)
              {
                unint64_t v21 = *(void *)(v27 + 8 * v24++);
                if (v21)
                {
                  int64_t v18 = v24 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v19 = (v21 - 1) & v21;
        unint64_t v20 = __clz(__rbit64(v21)) + (v18 << 6);
      }
      uint64_t v23 = 8 * v20;
      uint64_t v17 = *(void *)(*(void *)(v8 + 56) + v23);
      id v16 = *(id *)(*(void *)(v8 + 48) + v23);
      swift_retain();
    }
  }
  sub_1000C1AF8();
}

uint64_t sub_1002374F0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100910EB0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100910EB0);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_1002375B8(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v146 = a4;
  v147 = a3;
  v138 = a2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  v136 = &v125[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v139 = &v125[-v9];
  uint64_t v144 = type metadata accessor for Date();
  uint64_t v140 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  v135 = &v125[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v145 = &v125[-v12];
  __chkstk_darwin(v13);
  uint64_t v15 = &v125[-v14];
  uint64_t v16 = type metadata accessor for RDUserNotificationType();
  uint64_t v142 = *(void *)(v16 - 8);
  uint64_t v143 = v16;
  __chkstk_darwin(v16);
  v141 = &v125[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for REMNotificationIdentifier();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v21 = &v125[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = type metadata accessor for DispatchPredicate();
  uint64_t v23 = *(void *)(v22 - 8);
  __n128 v24 = __chkstk_darwin(v22);
  int64_t v26 = &v125[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v137 = v4;
  unint64_t v27 = *(void **)(v4 + 32);
  *int64_t v26 = v27;
  (*(void (**)(void *, void, uint64_t, __n128))(v23 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v22, v24);
  id v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v23 + 8))(v26, v22);
  if ((v27 & 1) == 0)
  {
    __break(1u);
LABEL_54:
    swift_once();
LABEL_4:
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_100910EB0);
    uint64_t v30 = v26;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      unint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v33 = 138412290;
      id v35 = [v30 objectID];
      aBlock[0] = (uint64_t)v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v34 = v35;

      id v36 = "Not presenting reminderAlarm banner for completed reminder. {reminderID: %@}";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v31, v32, v36, v33, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  int64_t v26 = *(id *)a1;
  if ([v26 isCompleted])
  {
    if (qword_1009071A0 == -1) {
      goto LABEL_4;
    }
    goto LABEL_54;
  }
  id v37 = [v26 list];
  id v38 = [v37 objectID];

  id v39 = [self siriFoundInAppsListID];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  LOBYTE(v37) = static NSObject.== infix(_:_:)();

  if (v37)
  {
    if (qword_1009071A0 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_10008E2DC(v40, (uint64_t)qword_100910EB0);
    uint64_t v30 = v26;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v33 = 138412290;
      id v42 = [v30 objectID];
      aBlock[0] = (uint64_t)v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v41 = v42;

      id v36 = "Not presenting reminderAlarm banner for SiriFoundInApps reminder. {reminderID: %@}";
      goto LABEL_11;
    }
LABEL_12:

    uint64_t v31 = v30;
LABEL_13:
    unint64_t v43 = (unint64_t)v147;

    if (v43)
    {
      ((void (*)(void))v43)(0);

      return 0;
    }
    else
    {
    }
    return v43;
  }
  uint64_t v44 = v26;
  REMNotificationIdentifier.init(reminder:)();
  uint64_t v130 = REMNotificationIdentifier.requestIdentifier.getter();
  uint64_t v132 = v45;
  (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v21, v18);
  id v47 = *(void **)(a1 + 8);
  uint64_t v46 = *(void *)(a1 + 16);
  uint64_t v48 = *(void *)(a1 + 24);
  uint64_t v49 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v50 = v44;
  id v51 = v141;
  REMNotificationIdentifier.init(reminder:)();
  id v52 = (unsigned int *)&enum case for RDUserNotificationType.reminderAlarm(_:);
  if (v49 >= 4) {
    id v52 = (unsigned int *)&enum case for RDUserNotificationType.dueDateDeltaAlarm(_:);
  }
  (*(void (**)(unsigned char *, void, uint64_t))(v142 + 104))(v51, *v52, v143);
  Date.init()();
  id v134 = v50;
  id v53 = sub_10026D9CC(v50, 0, 0);
  UNMutableNotificationContent.setFiresBeforeFirstUnlock(_:)(*(unsigned char *)(a1 + 34));
  sub_1002705B8(v53, a1, v15);
  uint64_t v54 = v140;
  uint64_t v55 = v144;
  v131 = *(void (**)(char *, uint64_t))(v140 + 8);
  uint64_t v133 = v140 + 8;
  v131(v15, v144);
  Date.init()();
  uint64_t v56 = &qword_100907000;
  if ((v49 - 1) < 3)
  {
    char v57 = 2;
    id v58 = v134;
LABEL_32:
    unint64_t v43 = v57 == 2;
    LODWORD(v140) = v57 != 2;
    id v81 = [v58 objectID];
    id v82 = [v81 stringRepresentation];

    uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v85 = v84;

    uint64_t v86 = (unsigned char *)0xE800000000000000;
    unint64_t v87 = 0x6C61726F706D6574;
    switch(v49)
    {
      case 1:
        unint64_t v87 = 0x6E6F697461636F6CLL;
        break;
      case 2:
        uint64_t v86 = (unsigned char *)0xE700000000000000;
        unint64_t v87 = 0x656C6369686576;
        break;
      case 3:
        uint64_t v86 = (unsigned char *)0x80000001007CF7A0;
        unint64_t v87 = 0xD000000000000011;
        break;
      case 4:
        uint64_t v86 = (unsigned char *)0xEC00000061746C65;
        unint64_t v87 = 0x4465746144657564;
        break;
      default:
        break;
    }
    v136 = (unsigned char *)v87;
    v139 = v86;
    if (qword_1009071A0 != -1) {
      swift_once();
    }
    uint64_t v94 = type metadata accessor for Logger();
    sub_10008E2DC(v94, (uint64_t)qword_100910EB0);
    swift_bridgeObjectRetain_n();
    uint64_t v95 = v53;
    v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.default.getter();
    int v98 = v97;
    BOOL v99 = os_log_type_enabled(v96, v97);
    v135 = v95;
    if (v99)
    {
      uint64_t v100 = swift_slowAlloc();
      LODWORD(v128) = v98;
      uint64_t v101 = v100;
      v127 = (void *)swift_slowAlloc();
      id v129 = (id)swift_slowAlloc();
      aBlock[0] = (uint64_t)v129;
      *(_DWORD *)uint64_t v101 = 136446722;
      swift_bridgeObjectRetain();
      *(void *)&v148[0] = sub_1000C51B8(v83, v85, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v101 + 12) = 2082;
      if (v57 == 2) {
        uint64_t v102 = 78;
      }
      else {
        uint64_t v102 = 89;
      }
      *(void *)&v148[0] = sub_1000C51B8(v102, 0xE100000000000000, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v101 + 22) = 2112;
      *(void *)&v148[0] = v95;
      v103 = v95;
      BOOL v126 = v57 == 2;
      v104 = v96;
      unint64_t v105 = v85;
      uint64_t v106 = v83;
      char v107 = v57;
      id v108 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v127 = v95;

      char v57 = v107;
      uint64_t v83 = v106;
      unint64_t v85 = v105;
      v109 = v104;
      unint64_t v43 = v126;
      _os_log_impl((void *)&_mh_execute_header, v109, (os_log_type_t)v128, "notificationCenter.retainNotification {reminderID: %{public}s, skipBanner: %{public}s, content: %@}", (uint8_t *)v101, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v110 = *(void **)(v137 + 16);
    uint64_t v111 = v138[3];
    uint64_t v112 = v138[4];
    sub_1000C0DE0(v138, v111);
    (*(void (**)(uint64_t, uint64_t))(v112 + 16))(v111, v112);
    uint64_t v113 = swift_allocObject();
    uint64_t v115 = v146;
    uint64_t v114 = (uint64_t)v147;
    *(void *)(v113 + 16) = v147;
    *(void *)(v113 + 24) = v115;
    *(void *)(v113 + 32) = v83;
    *(void *)(v113 + 40) = v85;
    *(unsigned char *)(v113 + 48) = v57;
    v116 = v139;
    *(void *)(v113 + 56) = v136;
    *(void *)(v113 + 64) = v116;
    sub_1000E4F30(v114);
    NSString v117 = String._bridgeToObjectiveC()();
    NSString v118 = String._bridgeToObjectiveC()();
    v153 = sub_100242018;
    uint64_t v154 = v113;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000E13D0;
    v152 = &unk_1008BF3C0;
    v119 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    v120 = v110;
    v121 = v135;
    [v120 retainNotificationWithIdentifier:v117 reference:v118 content:v135 skipBanner:v140 completion:v119];
    _Block_release(v119);

    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();

    v131(v145, v144);
    (*(void (**)(unsigned char *, uint64_t))(v142 + 8))(v141, v143);
    return v43;
  }
  id v129 = v53;
  unint64_t v59 = *(void **)(v54 + 56);
  id v60 = v139;
  ((void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))v59)(v139, 1, 1, v55);
  uint64_t v128 = v49;
  sub_1001D5B5C(v47, v46, v48, v49);
  id v150 = [v47 trigger];
  sub_1000963CC(0, (unint64_t *)&unk_100911060);
  sub_100094134((uint64_t *)&unk_100916DF0);
  uint64_t v61 = v48;
  if (swift_dynamicCast())
  {
    v127 = v59;
    sub_1000967D4(v148, (uint64_t)aBlock);
    v62 = v152;
    uint64_t v63 = v153;
    sub_1000C0DE0(aBlock, (uint64_t)v152);
    uint64_t v64 = (uint64_t)v136;
    id v58 = v134;
    v65 = v62;
    uint64_t v66 = v140;
    (*((void (**)(id, char *, void *, void (*)(uint64_t)))v63 + 3))(v134, v145, v65, v63);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v55) == 1)
    {
      sub_1000966BC(v64, (uint64_t *)&unk_100909A40);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)aBlock);
      id v60 = v139;
    }
    else
    {
      NSString v67 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v66 + 32);
      id v68 = v135;
      v67(v135, v64, v144);
      UNMutableNotificationContent.setLastRecurringFireDate(_:)();
      id v60 = v139;
      sub_1000966BC((uint64_t)v139, (uint64_t *)&unk_100909A40);
      uint64_t v69 = v144;
      v67(v60, (uint64_t)v68, v144);
      ((void (*)(unsigned char *, void, uint64_t, uint64_t))v127)(v60, 0, 1, v69);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)aBlock);
    }
    uint64_t v56 = &qword_100907000;
  }
  else
  {
    uint64_t v149 = 0;
    memset(v148, 0, sizeof(v148));
    sub_1000966BC((uint64_t)v148, &qword_100911070);
    id v58 = v134;
  }
  LODWORD(v140) = sub_1002410D8(v58, v47, v145, (uint64_t)v60);
  uint64_t v70 = v61;
  uint64_t v49 = v128;
  sub_1001D5BC4(v47, v46, v70, v128);
  if (v56[52] != -1) {
    swift_once();
  }
  uint64_t v71 = type metadata accessor for Logger();
  uint64_t v72 = sub_10008E2DC(v71, (uint64_t)qword_100910EB0);
  id v73 = v58;
  v136 = (unsigned char *)v72;
  v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = swift_slowAlloc();
    uint64_t v77 = (void *)swift_slowAlloc();
    v135 = (unsigned char *)swift_slowAlloc();
    aBlock[0] = (uint64_t)v135;
    *(_DWORD *)uint64_t v76 = 136446466;
    char v57 = v140;
    LOBYTE(v148[0]) = v140;
    uint64_t v78 = String.init<A>(describing:)();
    *(void *)&v148[0] = sub_1000C51B8(v78, v79, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v76 + 12) = 2114;
    id v80 = [v73 objectID];
    *(void *)&v148[0] = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v77 = v80;

    _os_log_impl((void *)&_mh_execute_header, v74, v75, "bannerBehavior determined {bannerBehavior: %{public}s, reminderID: %{public}@}", (uint8_t *)v76, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    id v58 = v134;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_1000966BC((uint64_t)v139, (uint64_t *)&unk_100909A40);
  }
  else
  {

    sub_1000966BC((uint64_t)v60, (uint64_t *)&unk_100909A40);
    char v57 = v140;
  }
  id v53 = v129;
  if (v57) {
    goto LABEL_32;
  }
  swift_bridgeObjectRelease();
  uint64_t v88 = v73;
  uint64_t v89 = Logger.logObject.getter();
  os_log_type_t v90 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v89, v90))
  {
    uint64_t v91 = (uint8_t *)swift_slowAlloc();
    uint64_t v92 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v91 = 138543362;
    id v93 = [v88 objectID];
    aBlock[0] = (uint64_t)v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v92 = v93;

    _os_log_impl((void *)&_mh_execute_header, v89, v90, "notificationCenter.retainNotification will not be called because lastBannerPresentationDate is too recent {reminderID: %{public}@}", v91, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v89 = v88;
  }
  v123 = v147;
  v124 = v131;

  if (v123) {
    v123(0);
  }

  v124(v145, v144);
  (*(void (**)(unsigned char *, uint64_t))(v142 + 8))(v141, v143);
  return 0;
}

void sub_100238928(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, unint64_t a5, char a6, uint64_t a7, unint64_t a8)
{
  uint64_t v61 = a7;
  unint64_t v62 = a8;
  uint64_t v63 = a3;
  uint64_t v64 = a2;
  uint64_t v12 = type metadata accessor for DateComponents();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TimeZone();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Date();
  __chkstk_darwin(v20);
  __n128 v24 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_1009071A0 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_100910EB0);
    swift_errorRetain();
    swift_errorRetain();
    int64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      v66[0] = swift_slowAlloc();
      *(_DWORD *)id v28 = 136315138;
      swift_getErrorValue();
      uint64_t v29 = Error.localizedDescription.getter();
      uint64_t v65 = sub_1000C51B8(v29, v30, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDAlarmNotificationConsumer: Unable to post Alarm notification {error: %s}", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v51 = a4;
    id v52 = v24;
    uint64_t v53 = v22;
    uint64_t v54 = v21;
    uint64_t v55 = v19;
    uint64_t v58 = v17;
    uint64_t v59 = v16;
    id v60 = v15;
    uint64_t v56 = v13;
    uint64_t v57 = v12;
    if (qword_1009071A0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E2DC(v31, (uint64_t)qword_100910EB0);
    swift_bridgeObjectRetain_n();
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      v66[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v34 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v65 = sub_1000C51B8(v51, a5, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDAlarmNotificationConsumer: Posted Alarm notification {reminderID: %{public}s}", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v35 = v60;
    uint64_t v36 = v59;
    uint64_t v37 = v58;
    if (a6 == 2)
    {
      id v38 = self;
      id v39 = v52;
      Date.init()();
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v54);
      uint64_t v41 = v55;
      static TimeZone.current.getter();
      Class v42 = TimeZone._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v41, v36);
      id v43 = [v38 rem_dateComponentsWithDate:isa timeZone:v42 isAllDay:0];

      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
      DateComponents.hour.getter();
      LOBYTE(v42) = v44;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v57);
      if (v42)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v47))
        {
          unint64_t v48 = v62;
          uint64_t v49 = (uint8_t *)swift_slowAlloc();
          v66[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v49 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v65 = sub_1000C51B8(v61, v48, v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to compute current hour when posting analytics to event com.apple.reminders.notification with {type: %s}", v49, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        type metadata accessor for Analytics();
        sub_100094134((uint64_t *)&unk_10090A420);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100776E80;
        *(void *)(inited + 32) = 1701869940;
        *(void *)(inited + 40) = 0xE400000000000000;
        *(void *)(inited + 48) = String._bridgeToObjectiveC()();
        *(void *)(inited + 56) = 0x4872656767697274;
        *(void *)(inited + 64) = 0xEB0000000072756FLL;
        *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
        sub_1002ED104(inited);
        static Analytics.postEvent(_:payload:duration:)();
        swift_bridgeObjectRelease();
      }
    }
  }
  if (v64) {
    v64(a1);
  }
}

void sub_100239158(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v32 = a4;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(v6 + 32);
  void *v15 = v16;
  (*(void (**)(void *, void, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if (v18)
  {
    if (qword_1009071A0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_100910EB0);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v31 = a5;
    aBlock[0] = v23;
    *(_DWORD *)uint64_t v22 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_1000C51B8(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "notificationCenter.releaseNotification {identifier: %{public}s}", v22, 0xCu);
    swift_arrayDestroy();
    a5 = v31;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  __n128 v24 = *(void **)(v6 + 16);
  uint64_t v25 = a3[3];
  uint64_t v26 = a3[4];
  sub_1000C0DE0(a3, v25);
  (*(void (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
  NSString v27 = String._bridgeToObjectiveC()();
  NSString v28 = String._bridgeToObjectiveC()();
  if (v32)
  {
    aBlock[4] = v32;
    aBlock[5] = a5;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000E13D0;
    uint64_t aBlock[3] = (uint64_t)&unk_1008BF370;
    uint64_t v29 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v29 = 0;
  }
  [v24 releaseNotificationWithIdentifier:v27 reference:v28 completion:v29];
  _Block_release(v29);
  swift_bridgeObjectRelease();
}

uint64_t sub_100239500()
{
  swift_unknownObjectRelease();

  swift_release();
  sub_10012227C(*(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned int *)(v0 + 96) | ((unint64_t)*(unsigned __int16 *)(v0 + 100) << 32));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDAlarmNotificationConsumer()
{
  return self;
}

id sub_100239590(uint64_t a1, void *a2)
{
  v250 = a2;
  uint64_t v240 = type metadata accessor for Date();
  uint64_t v238 = *(void *)(v240 - 8);
  __chkstk_darwin(v240);
  v233 = (char *)v231 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v234 = (char *)v231 - v7;
  uint64_t v232 = v8;
  __chkstk_darwin(v9);
  v249 = (char *)v231 - v10;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  v254 = *(void (***)(char *, char *))(v11 - 8);
  __chkstk_darwin(v11);
  v252 = (char *)v231 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = (void *)type metadata accessor for DispatchQoS();
  uint64_t v251 = *(v253 - 1);
  __chkstk_darwin(v253);
  *(void *)&long long v242 = (char *)v231 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for REMNotificationIdentifier();
  v255 = *(char **)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v231 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __n128 v19 = __chkstk_darwin(v17);
  os_log_type_t v21 = (void *)((char *)v231 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v247 = v2;
  uint64_t v22 = *(void **)(v2 + 32);
  *os_log_type_t v21 = v22;
  (*(void (**)(void *, void, uint64_t, __n128))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17, v19);
  id v237 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v21, v17);
  if ((v22 & 1) == 0)
  {
    __break(1u);
LABEL_99:
    swift_once();
    goto LABEL_41;
  }
  v241 = (char *)v11;
  uint64_t v23 = *(char **)(a1 + 16);
  __n128 v24 = _swiftEmptyArrayStorage;
  uint64_t v243 = a1;
  uint64_t v259 = v14;
  *(void *)&long long v258 = v16;
  v257 = v23;
  if (v23)
  {
    *(void *)&long long aBlock = _swiftEmptyArrayStorage;
    sub_1001DE058(0, (int64_t)v23, 0);
    v256 = (void (**)(uint64_t, uint64_t))(v255 + 8);
    uint64_t v25 = (unsigned __int8 *)(a1 + 64);
    do
    {
      uint64_t v26 = (void *)*((void *)v25 - 3);
      uint64_t v27 = *((void *)v25 - 2);
      uint64_t v28 = *((void *)v25 - 1);
      unsigned __int8 v29 = *v25;
      id v30 = *((id *)v25 - 4);
      sub_1001D5B5C(v26, v27, v28, v29);
      uint64_t v31 = v258;
      REMNotificationIdentifier.init(reminder:)();
      uint64_t v32 = REMNotificationIdentifier.requestIdentifier.getter();
      uint64_t v34 = v33;
      (*v256)(v31, v259);

      sub_1001D5BC4(v26, v27, v28, v29);
      __n128 v24 = (void *)aBlock;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE058(0, v24[2] + 1, 1);
        __n128 v24 = (void *)aBlock;
      }
      unint64_t v36 = v24[2];
      unint64_t v35 = v24[3];
      if (v36 >= v35 >> 1)
      {
        sub_1001DE058(v35 > 1, v36 + 1, 1);
        __n128 v24 = (void *)aBlock;
      }
      v25 += 40;
      v24[2] = v36 + 1;
      uint64_t v37 = &v24[2 * v36];
      v37[4] = v32;
      v37[5] = v34;
      --v23;
    }
    while (v23);
    a1 = v243;
    uint64_t v23 = v257;
  }
  uint64_t v244 = sub_10012674C((uint64_t)v24);
  swift_bridgeObjectRelease();
  if (v23)
  {
    swift_bridgeObjectRetain();
    id v38 = (unsigned __int8 *)(a1 + 66);
    id v39 = _swiftEmptyArrayStorage;
    uint64_t v40 = v23;
    do
    {
      if ((*(v38 - 1) & 1) == 0)
      {
        char v44 = *(void **)(v38 - 34);
        uint64_t v45 = *(void **)(v38 - 26);
        uint64_t v46 = *(void *)(v38 - 18);
        uint64_t v47 = *(void *)(v38 - 10);
        unsigned __int8 v48 = *(v38 - 2);
        LODWORD(v256) = *v38;
        id v49 = v44;
        sub_1001D5B5C(v45, v46, v47, v48);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long aBlock = v39;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1001DE7B4(0, v39[2] + 1, 1);
          id v39 = (void *)aBlock;
        }
        unint64_t v42 = v39[2];
        unint64_t v41 = v39[3];
        if (v42 >= v41 >> 1)
        {
          sub_1001DE7B4(v41 > 1, v42 + 1, 1);
          id v39 = (void *)aBlock;
        }
        v39[2] = v42 + 1;
        id v43 = &v39[5 * v42];
        v43[4] = v49;
        v43[5] = v45;
        v43[6] = v46;
        v43[7] = v47;
        *((unsigned char *)v43 + 64) = v48;
        *((unsigned char *)v43 + 65) = 0;
        *((unsigned char *)v43 + 66) = (_BYTE)v256;
      }
      v38 += 40;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
    uint64_t v51 = v39;
    int64_t v52 = v39[2];
    if (v52) {
      goto LABEL_20;
    }
LABEL_28:
    swift_release();
    uint64_t v63 = _swiftEmptyArrayStorage;
    goto LABEL_29;
  }
  uint64_t v51 = _swiftEmptyArrayStorage;
  int64_t v52 = _swiftEmptyArrayStorage[2];
  if (!v52) {
    goto LABEL_28;
  }
LABEL_20:
  *(void *)&long long aBlock = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v52, 0);
  v256 = (void (**)(uint64_t, uint64_t))(v255 + 8);
  v248 = (void **)v51;
  uint64_t v53 = (unsigned __int8 *)(v51 + 8);
  do
  {
    uint64_t v54 = (void *)*((void *)v53 - 3);
    uint64_t v55 = *((void *)v53 - 2);
    uint64_t v56 = *((void *)v53 - 1);
    unsigned __int8 v57 = *v53;
    id v58 = *((id *)v53 - 4);
    sub_1001D5B5C(v54, v55, v56, v57);
    uint64_t v59 = v258;
    REMNotificationIdentifier.init(reminder:)();
    uint64_t v60 = REMNotificationIdentifier.requestIdentifier.getter();
    uint64_t v62 = v61;
    (*v256)(v59, v259);

    sub_1001D5BC4(v54, v55, v56, v57);
    uint64_t v63 = (void *)aBlock;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1001DE058(0, v63[2] + 1, 1);
      uint64_t v63 = (void *)aBlock;
    }
    unint64_t v65 = v63[2];
    unint64_t v64 = v63[3];
    if (v65 >= v64 >> 1)
    {
      sub_1001DE058(v64 > 1, v65 + 1, 1);
      uint64_t v63 = (void *)aBlock;
    }
    v53 += 40;
    v63[2] = v65 + 1;
    uint64_t v66 = &v63[2 * v65];
    v66[4] = v60;
    v66[5] = v62;
    --v52;
  }
  while (v52);
  swift_release();
LABEL_29:
  uint64_t v3 = sub_10012674C((uint64_t)v63);
  swift_bridgeObjectRelease();
  uint64_t v67 = v250[3];
  uint64_t v68 = v250[4];
  sub_1000C0DE0(v250, v67);
  uint64_t v235 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 16))(v67, v68);
  uint64_t v236 = v69;
  uint64_t v70 = swift_allocObject();
  uint64_t v246 = v70;
  *(void *)(v70 + 16) = 0;
  v248 = (void **)(v70 + 16);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 0;
  v245 = (unsigned char *)(v11 + 16);
  uint64_t v71 = *(void (***)(uint64_t, uint64_t))(v247 + 40);
  uint64_t v72 = &qword_100907000;
  uint64_t v239 = v11;
  if (v71)
  {
    swift_retain();
    dispatch_group_t v73 = dispatch_group_create();
    v74 = (dispatch_group_t *)v248;
    os_log_type_t v75 = *v248;
    *v248 = v73;

    if (*v74) {
      dispatch_group_enter(*v74);
    }
    if (qword_1009071A0 != -1) {
      swift_once();
    }
    uint64_t v76 = type metadata accessor for Logger();
    sub_10008E2DC(v76, (uint64_t)qword_100910EB0);
    sub_100096838((uint64_t)v250, (uint64_t)&aBlock);
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.default.getter();
    BOOL v79 = os_log_type_enabled(v77, v78);
    v256 = v71;
    if (v79)
    {
      id v80 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v266 = swift_slowAlloc();
      *(_DWORD *)id v80 = 136446210;
      v231[1] = v80 + 4;
      id v81 = v263;
      uint64_t v82 = v3;
      uint64_t v83 = v264;
      sub_1000C0DE0(&aBlock, (uint64_t)v263);
      unint64_t v84 = (uint64_t (*)(void *, void *))v83[2];
      unint64_t v85 = v81;
      uint64_t v11 = v239;
      uint64_t v86 = v83;
      uint64_t v3 = v82;
      uint64_t v87 = v84(v85, v86);
      v269[0] = sub_1000C51B8(v87, v88, (uint64_t *)&v266);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "os_transaction INIT {name: com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms, producer: %{public}s}", v80, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v71 = v256;
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
    }

    uint64_t v89 = os_transaction_create();
    os_log_type_t v90 = *v248;
    if (*v248)
    {
      sub_100096838((uint64_t)v250, (uint64_t)&v266);
      uint64_t v91 = (void *)swift_allocObject();
      sub_1000967D4(&v266, (uint64_t)(v91 + 2));
      v91[7] = v89;
      v91[8] = v11;
      v91[9] = v71;
      v264 = sub_1002410C8;
      v265 = v91;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      v262 = sub_100236C78;
      v263 = &unk_1008BF348;
      uint64_t v92 = _Block_copy(&aBlock);
      swift_retain();
      id v93 = v90;
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t v94 = v242;
      static DispatchQoS.unspecified.getter();
      v269[0] = _swiftEmptyArrayStorage;
      sub_10024202C((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100094134((uint64_t *)&unk_10090AFD0);
      sub_1000D10E0();
      uint64_t v95 = v3;
      uint64_t v96 = v11;
      os_log_type_t v97 = v252;
      int v98 = v241;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_group.notify(qos:flags:queue:execute:)();
      _Block_release(v92);
      swift_unknownObjectRelease();
      swift_release();

      BOOL v99 = v97;
      uint64_t v11 = v96;
      uint64_t v3 = v95;
      uint64_t v72 = &qword_100907000;
      v254[1](v99, v98);
      (*(void (**)(uint64_t, void *))(v251 + 8))(v94, v253);
      swift_release();
    }
    else
    {
      swift_release();
      swift_unknownObjectRelease();
    }
  }
  unint64_t v268 = (unint64_t)_swiftEmptyArrayStorage;
  v267 = &_swiftEmptySetSingleton;
  if (v72[52] != -1) {
    goto LABEL_99;
  }
LABEL_41:
  uint64_t v100 = type metadata accessor for Logger();
  uint64_t v101 = sub_10008E2DC(v100, (uint64_t)qword_100910EB0);
  sub_100096838((uint64_t)v250, (uint64_t)&aBlock);
  swift_bridgeObjectRetain_n();
  uint64_t v251 = v101;
  uint64_t v102 = Logger.logObject.getter();
  os_log_type_t v103 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v102, v103))
  {
    uint64_t v104 = swift_slowAlloc();
    *(void *)&long long v266 = swift_slowAlloc();
    *(_DWORD *)uint64_t v104 = 136446722;
    unint64_t v105 = v263;
    uint64_t v106 = (uint64_t (**)(void *, void *))v264;
    sub_1000C0DE0(&aBlock, (uint64_t)v263);
    uint64_t v107 = v106[2](v105, v106);
    v269[0] = sub_1000C51B8(v107, v108, (uint64_t *)&v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
    *(_WORD *)(v104 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v109 = Set.description.getter();
    unint64_t v111 = v110;
    swift_bridgeObjectRelease();
    v269[0] = sub_1000C51B8(v109, v111, (uint64_t *)&v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v104 + 22) = 2050;
    uint64_t v112 = *(void *)(v244 + 16);
    swift_bridgeObjectRelease();
    v269[0] = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "RDAlarmNotificationConsumer {identifier: %{public}s allowedSet: %s, count %{public}ld}", (uint8_t *)v104, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
    swift_bridgeObjectRelease_n();
  }

  sub_100096838((uint64_t)v250, (uint64_t)&aBlock);
  swift_bridgeObjectRetain_n();
  uint64_t v113 = Logger.logObject.getter();
  os_log_type_t v114 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v113, v114))
  {
    uint64_t v115 = swift_slowAlloc();
    *(void *)&long long v266 = swift_slowAlloc();
    *(_DWORD *)uint64_t v115 = 136446722;
    v116 = v263;
    NSString v117 = (uint64_t (**)(void *, void *))v264;
    sub_1000C0DE0(&aBlock, (uint64_t)v263);
    uint64_t v118 = v117[2](v116, v117);
    v269[0] = sub_1000C51B8(v118, v119, (uint64_t *)&v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
    *(_WORD *)(v115 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v120 = Set.description.getter();
    unint64_t v122 = v121;
    swift_bridgeObjectRelease();
    v269[0] = sub_1000C51B8(v120, v122, (uint64_t *)&v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v115 + 22) = 2050;
    uint64_t v123 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    v269[0] = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v113, v114, "RDAlarmNotificationConsumer {identifier: %{public}s createSet: %s, count: %{public}ld}", (uint8_t *)v115, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
    swift_bridgeObjectRelease_n();
  }

  uint64_t v124 = v243;
  v125 = v257;
  if (v257)
  {
    v254 = (void (**)(char *, char *))v3;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    BOOL v126 = (char **)(v255 + 8);
    v127 = (void (**)(uint64_t, uint64_t))(v124 + 66);
    *(void *)&long long v128 = 136446466;
    long long v242 = v128;
    v241 = (char *)&type metadata for Any + 8;
    do
    {
      v257 = v125;
      id v129 = *(void (**)(uint64_t, uint64_t))((char *)v127 - 34);
      uint64_t v130 = *(char **)((char *)v127 - 26);
      uint64_t v131 = *(uint64_t *)((char *)v127 - 18);
      uint64_t v132 = *(void (**)(uint64_t, uint64_t))((char *)v127 - 10);
      int v133 = *((unsigned __int8 *)v127 - 2);
      char v134 = *((unsigned char *)v127 - 1);
      v256 = v127;
      char v135 = *(unsigned char *)v127;
      v269[0] = v129;
      v269[1] = v130;
      v269[2] = v131;
      v269[3] = v132;
      char v270 = v133;
      char v271 = v134;
      char v272 = v135;
      id v136 = v129;
      sub_1001D5B5C(v130, v131, (uint64_t)v132, v133);
      uint64_t v137 = v258;
      REMNotificationIdentifier.init(reminder:)();
      uint64_t v138 = REMNotificationIdentifier.requestIdentifier.getter();
      uint64_t v140 = v139;
      v141 = *v126;
      uint64_t v142 = v126;
      uint64_t v143 = v259;
      v255 = v141;
      ((void (*)(uint64_t, uint64_t))v141)(v137, v259);
      LOBYTE(v138) = sub_1001CBC20(v138, v140, (uint64_t)v254);
      swift_bridgeObjectRelease();
      if (v138)
      {
        v252 = v130;
        v253 = v132;
        id v144 = v136;
        REMNotificationIdentifier.init(reminder:)();
        uint64_t v145 = REMNotificationIdentifier.requestIdentifier.getter();
        unint64_t v147 = v146;
        ((void (*)(uint64_t, uint64_t))v255)(v137, v143);
        uint64_t v148 = (uint64_t)v267;
        swift_bridgeObjectRetain();
        char v149 = sub_1001CBC20(v145, v147, v148);
        swift_bridgeObjectRelease();
        BOOL v126 = v142;
        if (v149)
        {
          swift_bridgeObjectRetain();
          id v150 = Logger.logObject.getter();
          os_log_type_t v151 = static os_log_type_t.default.getter();
          int v152 = v133;
          uint64_t v153 = v131;
          if (os_log_type_enabled(v150, v151))
          {
            uint64_t v154 = swift_slowAlloc();
            LODWORD(v255) = v152;
            uint64_t v155 = v154;
            *(void *)&long long aBlock = swift_slowAlloc();
            *(_DWORD *)uint64_t v155 = v242;
            swift_bridgeObjectRetain();
            *(void *)(v155 + 4) = sub_1000C51B8(v145, v147, (uint64_t *)&aBlock);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v155 + 12) = 2082;
            swift_bridgeObjectRetain();
            uint64_t v156 = Set.description.getter();
            v157 = v150;
            unint64_t v159 = v158;
            swift_bridgeObjectRelease();
            *(void *)(v155 + 14) = sub_1000C51B8(v156, v159, (uint64_t *)&aBlock);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v157, v151, "RDAlarmNotificationConsumer skipping retain on alarm because already retained alarm for reminder in this consumeAlarms() run { identifier: %{public}s identifiersPresentedInThisRun:%{public}s }", (uint8_t *)v155, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_1001D5BC4(v252, v153, (uint64_t)v253, v255);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            sub_1001D5BC4(v252, v131, (uint64_t)v253, v152);
          }
        }
        else
        {
          v160 = *v248;
          LODWORD(v255) = v133;
          uint64_t v161 = v131;
          if (v160) {
            dispatch_group_enter(v160);
          }
          unsigned char *v245 = 1;
          uint64_t v162 = v246;
          swift_retain();
          char v163 = sub_1002375B8((uint64_t)v269, v250, sub_10024105C, v162);
          swift_release();
          v164 = (void (*)(void, void))v253;
          id v165 = v252;
          if (v163)
          {
            id v166 = v144;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v268 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v268 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          swift_beginAccess();
          sub_10031DC68((Swift::Int *)&v266, v145, v147);
          swift_endAccess();

          sub_1001D5BC4(v165, v161, (uint64_t)v164, v255);
          swift_bridgeObjectRelease();
        }
      }
      else
      {

        sub_1001D5BC4(v130, v131, (uint64_t)v132, v133);
        BOOL v126 = v142;
      }
      v127 = v256 + 5;
      v125 = v257 - 1;
    }
    while (v257 != (char *)1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v239;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v167 = (dispatch_group_t *)v248;
  swift_beginAccess();
  if (*v167) {
    dispatch_group_enter(*v167);
  }
  uint64_t v168 = v247;
  sub_100096838((uint64_t)v250, (uint64_t)&aBlock);
  v169 = (void *)swift_allocObject();
  v169[2] = v244;
  sub_1000967D4(&aBlock, (uint64_t)(v169 + 3));
  uint64_t v170 = v246;
  v169[8] = v246;
  v169[9] = v11;
  v169[10] = v168;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10050F314(v235, v236, (uint64_t)sub_100240E8C, (uint64_t)v169);
  swift_release();
  swift_bridgeObjectRelease();
  v171 = *(NSObject **)(v170 + 16);
  if (v171) {
    dispatch_group_leave(v171);
  }
  unint64_t v172 = v268;
  if (!(v268 >> 62))
  {
    if (*(void *)((v268 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_71;
    }
LABEL_101:
    swift_bridgeObjectRelease();
    swift_release();
LABEL_108:
    swift_release();
    return (id)swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v213 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v213) {
    goto LABEL_101;
  }
LABEL_71:
  v257 = (char *)[objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(v247 + 48)];
  Date.init()();
  if (v172 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v173 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v173 = *(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v173)
  {
    *(void *)&long long aBlock = _swiftEmptyArrayStorage;
    id result = (id)specialized ContiguousArray.reserveCapacity(_:)();
    if (v173 < 0)
    {
      __break(1u);
      goto LABEL_110;
    }
    uint64_t v175 = 0;
    do
    {
      if ((v172 & 0xC000000000000001) != 0) {
        id v176 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v176 = *(id *)(v172 + 8 * v175 + 32);
      }
      v177 = v176;
      ++v175;
      id v178 = [v176 objectID];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v173 != v175);
    v179 = (void (**)(uint64_t, uint64_t))aBlock;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v179 = (void (**)(uint64_t, uint64_t))_swiftEmptyArrayStorage;
  }
  uint64_t v180 = v238;
  v181 = *(void (***)(char *, char *))(v238 + 16);
  v182 = v234;
  uint64_t v183 = v240;
  v255 = (char *)(v238 + 16);
  v254 = v181;
  ((void (*)(char *, char *, uint64_t))v181)(v234, v249, v240);
  swift_bridgeObjectRetain_n();
  v184 = Logger.logObject.getter();
  os_log_type_t v185 = static os_log_type_t.default.getter();
  BOOL v186 = os_log_type_enabled(v184, v185);
  v256 = v179;
  if (v186)
  {
    uint64_t v187 = swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v187 = 136446466;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_bridgeObjectRetain();
    uint64_t v188 = Array.description.getter();
    unint64_t v190 = v189;
    swift_bridgeObjectRelease();
    *(void *)&long long v266 = sub_1000C51B8(v188, v190, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v187 + 12) = 2082;
    uint64_t v191 = Date.description.getter();
    *(void *)&long long v266 = sub_1000C51B8(v191, v192, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v253 = *(void **)(v180 + 8);
    ((void (*)(char *, uint64_t))v253)(v182, v240);
    _os_log_impl((void *)&_mh_execute_header, v184, v185, "Updating lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}", (uint8_t *)v187, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v253 = *(void **)(v180 + 8);
    ((void (*)(char *, uint64_t))v253)(v182, v183);
  }

  id v193 = objc_allocWithZone((Class)REMSaveRequest);
  v194 = (char *)[v193 initWithStore:v257];
  [v194 setAuthor:RDNotificationConsumerLastBannerPresentationDateAuthor];
  [v194 setUpdateLastModifiedDates:0];
  id result = [v194 setSyncToCloudKit:0];
  unint64_t v196 = v268;
  if (!(v268 >> 62))
  {
    uint64_t v197 = *(void *)((v268 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v197) {
      goto LABEL_87;
    }
LABEL_104:
    v252 = v194;
    swift_bridgeObjectRelease();
    sub_100096838((uint64_t)v250, (uint64_t)&aBlock);
    v214 = Logger.logObject.getter();
    os_log_type_t v215 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v214, v215))
    {
      v216 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v266 = swift_slowAlloc();
      *(_DWORD *)v216 = 136446210;
      v217 = v263;
      v218 = (uint64_t (**)(void *, void *))v264;
      sub_1000C0DE0(&aBlock, (uint64_t)v263);
      uint64_t v219 = v218[2](v217, v218);
      uint64_t v260 = sub_1000C51B8(v219, v220, (uint64_t *)&v266);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
      _os_log_impl((void *)&_mh_execute_header, v214, v215, "os_transaction INIT {name: com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate, producer: %{public}s}", v216, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
    }

    uint64_t v221 = os_transaction_create();
    v222 = v233;
    v223 = v249;
    uint64_t v224 = v240;
    ((void (*)(char *, char *, uint64_t))v254)(v233, v249, v240);
    sub_100096838((uint64_t)v250, (uint64_t)&v266);
    uint64_t v225 = v238;
    unint64_t v226 = (*(unsigned __int8 *)(v238 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v238 + 80);
    unint64_t v227 = (v232 + v226 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v228 = swift_allocObject();
    *(void *)(v228 + 16) = v256;
    (*(void (**)(unint64_t, char *, uint64_t))(v225 + 32))(v228 + v226, v222, v224);
    sub_1000967D4(&v266, v228 + v227);
    *(void *)(v228 + ((v227 + 47) & 0xFFFFFFFFFFFFFFF8)) = v221;
    v264 = sub_100240F98;
    v265 = (void *)v228;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    v262 = sub_1000E13D0;
    v263 = &unk_1008BF2F8;
    v229 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_release();
    id v230 = v252;
    [v252 saveWithQueue:v237 completion:v229];
    _Block_release(v229);

    swift_unknownObjectRelease();
    ((void (*)(char *, uint64_t))v253)(v223, v224);
    swift_release();
    goto LABEL_108;
  }
  swift_bridgeObjectRetain();
  uint64_t v197 = _CocoaArrayWrapper.endIndex.getter();
  id result = (id)swift_bridgeObjectRelease();
  if (!v197) {
    goto LABEL_104;
  }
LABEL_87:
  if (v197 >= 1)
  {
    uint64_t v198 = 0;
    unint64_t v199 = v196 & 0xC000000000000001;
    v200 = &selRef_includeReminderTitles;
    *(void *)&long long v195 = 138543362;
    long long v258 = v195;
    uint64_t v259 = v197;
    do
    {
      if (v199) {
        v203 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        v203 = *(id *)(v196 + 8 * v198 + 32);
      }
      Class isa = v203;
      if ([v203 v200[34]])
      {
        v202.super.Class isa = (Class)isa;
        Class isa = Logger.logObject.getter();
        os_log_type_t v205 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(isa, v205))
        {
          uint64_t v206 = swift_slowAlloc();
          unint64_t v207 = v196;
          unint64_t v208 = v199;
          v209 = v200;
          v210 = v194;
          v211 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v206 = v258;
          id v212 = [(objc_class *)v202.super.isa objectID];
          *(void *)(v206 + 4) = v212;
          void *v211 = v212;

          _os_log_impl((void *)&_mh_execute_header, isa, v205, "Unable to update lastBannerPresentationDate reminder is Phantom {reminderID: %{public}@}", (uint8_t *)v206, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          v194 = v210;
          v200 = v209;
          unint64_t v199 = v208;
          unint64_t v196 = v207;
          uint64_t v197 = v259;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          Class isa = v202.super.isa;
        }
      }
      else
      {
        id v201 = [v194 updateReminder:isa];
        v202.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
        [v201 setLastBannerPresentationDate:v202.super.isa];
      }
      ++v198;
    }
    while (v197 != v198);
    goto LABEL_104;
  }
LABEL_110:
  __break(1u);
  return result;
}

void sub_10023B724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 16) == 1) {
    sub_1002920F8();
  }
  sub_100241DDC(a1);
}

void sub_10023B788(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v60 = a4;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v58 = a6;
  uint64_t v59 = a3;
  if (v11)
  {
    v63[0] = _swiftEmptyArrayStorage;
    sub_1001DE058(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v56 = a2;
    uint64_t v57 = a5;
    uint64_t v13 = 0;
    uint64_t v12 = (void *)v63[0];
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(a1 + 8 * v13 + 32);
      }
      uint64_t v15 = v14;
      id v16 = [v14 request];
      id v17 = [v16 identifier];

      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      v63[0] = v12;
      unint64_t v22 = v12[2];
      unint64_t v21 = v12[3];
      if (v22 >= v21 >> 1)
      {
        sub_1001DE058(v21 > 1, v22 + 1, 1);
        uint64_t v12 = (void *)v63[0];
      }
      ++v13;
      v12[2] = v22 + 1;
      uint64_t v23 = &v12[2 * v22];
      v23[4] = v18;
      v23[5] = v20;
    }
    while (v11 != v13);
    a3 = v59;
    a2 = v56;
    a5 = v57;
  }
  uint64_t v24 = sub_10012674C((uint64_t)v12);
  swift_bridgeObjectRelease();
  if (*(void *)(a2 + 16) <= *(void *)(v24 + 16) >> 3)
  {
    v63[0] = v24;
    swift_bridgeObjectRetain();
    sub_10065A5FC(a2);
    uint64_t v25 = (unint64_t *)v24;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_10023CBC4(a2, v24);
  }
  if (qword_1009071A0 != -1) {
    swift_once();
  }
  uint64_t v57 = a5 + 16;
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = sub_10008E2DC(v26, (uint64_t)qword_100910EB0);
  sub_100096838(a3, (uint64_t)v63);
  swift_bridgeObjectRetain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v56 = v60 + 16;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    v62[0] = v54;
    *(_DWORD *)uint64_t v30 = 136446722;
    uint64_t v55 = v27;
    uint64_t v31 = v64;
    uint64_t v32 = v65;
    sub_1000C0DE0(v63, v64);
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
    sub_1000C51B8(v33, v34, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v63);
    *(_WORD *)(v30 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v35 = Set.description.getter();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    uint64_t v61 = sub_1000C51B8(v35, v37, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a3 = v59;
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2050;
    uint64_t v38 = *(void *)(v24 + 16);
    swift_bridgeObjectRelease();
    uint64_t v61 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "RDAlarmNotificationConsumer {identifier: %{public}s currentSet: %s, count: %{public}ld}", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v63);
    swift_bridgeObjectRelease_n();
  }

  sub_100096838(a3, (uint64_t)v63);
  swift_bridgeObjectRetain_n();
  id v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc();
    v62[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 136446722;
    uint64_t v42 = v64;
    uint64_t v43 = v65;
    sub_1000C0DE0(v63, v64);
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 16))(v42, v43);
    sub_1000C51B8(v44, v45, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v63);
    *(_WORD *)(v41 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v46 = Set.description.getter();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    uint64_t v61 = sub_1000C51B8(v46, v48, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 22) = 2050;
    uint64_t v49 = v25[2];
    swift_bridgeObjectRelease();
    uint64_t v61 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "RDAlarmNotificationConsumer {identifier: %{public}s removeSet: %s, count: %{public}ld}", (uint8_t *)v41, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v59;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v63);
    swift_bridgeObjectRelease_n();
  }

  __chkstk_darwin(v50);
  uint64_t v51 = v60;
  v53[2] = v60;
  v53[3] = v57;
  v53[4] = v58;
  v53[5] = a3;
  sub_100236CBC((void (*)(void *))sub_100241FA8, (uint64_t)v53, (uint64_t)v25);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  int64_t v52 = *(NSObject **)(v51 + 16);
  if (v52) {
    dispatch_group_leave(v52);
  }
}

uint64_t sub_10023BE84(uint64_t *a1, uint64_t a2, unsigned char *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  swift_beginAccess();
  uint64_t v10 = *(NSObject **)(a2 + 16);
  if (v10) {
    dispatch_group_enter(v10);
  }
  swift_beginAccess();
  *a3 = 1;
  swift_retain();
  sub_100239158(v8, v9, a5, (uint64_t)sub_10024105C, a2);
  return swift_release();
}

void sub_10023BF50(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v3 = *(NSObject **)(a2 + 16);
  if (v3) {
    dispatch_group_leave(v3);
  }
}

void sub_10023BF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a4;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = &qword_100907000;
  if (a1)
  {
    swift_errorRetain();
    if (qword_1009071A0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_100910EB0);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      v42[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v15 = Array.description.getter();
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      uint64_t v41 = sub_1000C51B8(v15, v17, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v10 = &qword_100907000;
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      uint64_t v41 = sub_1000C51B8(v18, v19, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to update lastBannerPresentationDate {reminderIDs: %{public}s, error: %s}", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_1009071A0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E2DC(v20, (uint64_t)qword_100910EB0);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
    swift_bridgeObjectRetain_n();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      v42[0] = v38;
      *(_DWORD *)uint64_t v23 = 136446466;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v24 = Array.description.getter();
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      uint64_t v41 = sub_1000C51B8(v24, v26, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2082;
      uint64_t v27 = Date.description.getter();
      uint64_t v41 = sub_1000C51B8(v27, v28, v42);
      uint64_t v10 = &qword_100907000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Updated lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  if (v10[52] != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_10008E2DC(v29, (uint64_t)qword_100910EB0);
  sub_100096838(v39, (uint64_t)v42);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136446210;
    uint64_t v33 = v43;
    uint64_t v34 = v44;
    sub_1000C0DE0(v42, v43);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 16))(v33, v34);
    uint64_t v40 = sub_1000C51B8(v35, v36, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v42);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "os_transaction RELEASE {name: com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate, producer: %{public}s}", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v42);
  }
}

id sub_10023C660(uint64_t a1, void *a2)
{
  return sub_100239590(a1, a2);
}

void *sub_10023C684(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for REMObjectID_Codable();
    sub_10024202C((unint64_t *)&unk_1009110C0, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v46;
    uint64_t v4 = v47;
    uint64_t v6 = v48;
    int64_t v5 = v49;
    unint64_t v7 = v50;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v4 = a1 + 56;
    uint64_t v6 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  uint64_t v41 = v3;
  uint64_t v42 = v4;
  uint64_t v43 = v6;
  int64_t v44 = v5;
  unint64_t v45 = v7;
  uint64_t v11 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v7)
      {
        uint64_t v12 = (v7 - 1) & v7;
        unint64_t v13 = __clz(__rbit64(v7)) | (v5 << 6);
LABEL_14:
        uint64_t v14 = *(void **)(*(void *)(v3 + 48) + 8 * v13);
        id v15 = v14;
        goto LABEL_15;
      }
      int64_t v25 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        __break(1u);
      }
      int64_t v26 = (unint64_t)(v6 + 64) >> 6;
      if (v25 >= v26)
      {
        uint64_t v14 = 0;
        uint64_t v12 = 0;
        goto LABEL_15;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v25);
      if (v27)
      {
LABEL_28:
        uint64_t v12 = (v27 - 1) & v27;
        unint64_t v13 = __clz(__rbit64(v27)) + (v25 << 6);
        int64_t v5 = v25;
        goto LABEL_14;
      }
      int64_t v28 = v5 + 2;
      if (v5 + 2 >= v26) {
        goto LABEL_44;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v28);
      if (v27)
      {
LABEL_32:
        int64_t v25 = v28;
        goto LABEL_28;
      }
      if (v5 + 3 < v26)
      {
        unint64_t v27 = *(void *)(v42 + 8 * (v5 + 3));
        if (v27)
        {
          int64_t v25 = v5 + 3;
          goto LABEL_28;
        }
        int64_t v28 = v5 + 4;
        if (v5 + 4 >= v26)
        {
          uint64_t v14 = 0;
          uint64_t v12 = 0;
          v5 += 3;
LABEL_15:
          int64_t v44 = v5;
          unint64_t v45 = v12;
          if (!v14) {
            goto LABEL_53;
          }
          goto LABEL_19;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v28);
        if (v27) {
          goto LABEL_32;
        }
        int64_t v25 = v5 + 5;
        if (v5 + 5 < v26)
        {
          unint64_t v27 = *(void *)(v42 + 8 * v25);
          if (v27) {
            goto LABEL_28;
          }
          int64_t v25 = v26 - 1;
          int64_t v29 = v5 + 6;
          while (v26 != v29)
          {
            unint64_t v27 = *(void *)(v42 + 8 * v29++);
            if (v27)
            {
              int64_t v25 = v29 - 1;
              goto LABEL_28;
            }
          }
LABEL_44:
          uint64_t v14 = 0;
          uint64_t v12 = 0;
          int64_t v5 = v25;
          goto LABEL_15;
        }
      }
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      int64_t v5 = v28;
      goto LABEL_15;
    }
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16
      || (uint64_t v39 = v16,
          type metadata accessor for REMObjectID_Codable(),
          swift_unknownObjectRetain(),
          swift_dynamicCast(),
          uint64_t v14 = v40,
          swift_unknownObjectRelease(),
          !v40))
    {
LABEL_53:
      sub_1000C1AF8();
      return (void *)v2;
    }
LABEL_19:
    Swift::Int v17 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v18 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v19 = v17 & ~v18;
    if (((*(void *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      goto LABEL_10;
    }
    type metadata accessor for REMObjectID_Codable();
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v19);
    char v21 = static NSObject.== infix(_:_:)();

    if (v21) {
      break;
    }
    uint64_t v22 = ~v18;
    while (1)
    {
      unint64_t v19 = (v19 + 1) & v22;
      if (((*(void *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        break;
      }
      id v23 = *(id *)(*(void *)(v2 + 48) + 8 * v19);
      char v24 = static NSObject.== infix(_:_:)();

      if (v24) {
        goto LABEL_47;
      }
    }
LABEL_10:

    uint64_t v3 = v41;
    uint64_t v6 = v43;
    int64_t v5 = v44;
    unint64_t v7 = v45;
  }
LABEL_47:

  char v31 = *(unsigned char *)(v2 + 32);
  unint64_t v32 = (unint64_t)((1 << v31) + 63) >> 6;
  size_t v33 = 8 * v32;
  if ((v31 & 0x3Fu) < 0xE
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v33);
    sub_10023E95C((unint64_t *)((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0)), v32, v2, v19, &v41);
    uint64_t v35 = v34;
    swift_release();
    sub_1000C1AF8();
  }
  else
  {
    unint64_t v36 = (void *)swift_slowAlloc();
    memcpy(v36, (const void *)(v2 + 56), v33);
    sub_10023E95C((unint64_t *)v36, v32, v2, v19, &v41);
    uint64_t v35 = v37;
    swift_release();
    sub_1000C1AF8();
    swift_slowDealloc();
  }
  return (void *)v35;
}

unint64_t *sub_10023CBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  sub_1000C1AF8();
                  return (unint64_t *)v2;
                }
                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        int64_t v9 = v14;
      }
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void *)(v2 + 48);
    id v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        int64_t v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      unint64_t v32 = sub_10023ECD4((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v2, v21, &v38);
      swift_release();
      sub_1000C1AF8();
    }
    else
    {
      size_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      unint64_t v32 = sub_10023ECD4((unint64_t *)v33, v30, v2, v21, &v38);
      swift_release();
      sub_1000C1AF8();
      swift_slowDealloc();
    }
    return v32;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

void *sub_10023D034(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100910FF0);
}

void *sub_10023D094(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, (uint64_t *)&unk_100910FB0);
}

void *sub_10023D0F4(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911028);
}

void *sub_10023D154(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100913D90);
}

void *sub_10023D1B4(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911098);
}

void *sub_10023D214(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911090);
}

void *sub_10023D274(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911088);
}

void *sub_10023D2D4(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911080);
}

void *sub_10023D334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v45 = (char *)v35 - v12;
  if (*(void *)(a2 + 16))
  {
    uint64_t v46 = a1;
    unint64_t v47 = 0;
    unint64_t v13 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v40 = (void (**)(char *, char *, uint64_t))(v8 + 32);
      uint64_t v41 = v8 + 48;
      uint64_t v43 = (char *)(a2 + 56);
      uint64_t v44 = v8 + 16;
      int64_t v15 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v42 = v8 + 56;
      v35[1] = (v8 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      int64_t v36 = v6;
      uint64_t v38 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v39 = v8;
      while (1)
      {
        if (v14 >= v13) {
          __break(1u);
        }
        uint64_t v16 = *(void *)(v8 + 72);
        uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
        v17(v6, a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v16 * v14, v7);
        unint64_t v47 = v14 + 1;
        uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v18(v6, 0, 1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
          break;
        }
        uint64_t v37 = v18;
        (*v40)(v45, v6, v7);
        sub_10024202C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v20 = -1 << *(unsigned char *)(a2 + 32);
        unint64_t v21 = v19 & ~v20;
        if ((*(void *)&v43[(v21 >> 3) & 0xFFFFFFFFFFFFFF8] >> v21))
        {
          uint64_t v22 = a2;
          uint64_t v23 = ~v20;
          while (1)
          {
            v17(v10, *(void *)(v22 + 48) + v21 * v16, v7);
            sub_10024202C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v25 = *v15;
            (*v15)(v10, v7);
            if (v24) {
              break;
            }
            unint64_t v21 = (v21 + 1) & v23;
            if (((*(void *)&v43[(v21 >> 3) & 0xFFFFFFFFFFFFFF8] >> v21) & 1) == 0)
            {
              a2 = v22;
              uint64_t v6 = v36;
              goto LABEL_12;
            }
          }
          uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v25)(v45, v7);
          char v27 = *(unsigned char *)(v22 + 32);
          unint64_t v28 = (unint64_t)((1 << v27) + 63) >> 6;
          size_t v29 = 8 * v28;
          if ((v27 & 0x3Fu) <= 0xD
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)v35 - ((v29 + 15) & 0x3FFFFFFFFFFFFFF0), v43, v29);
            sub_10023F200((void *)((char *)v35 - ((v29 + 15) & 0x3FFFFFFFFFFFFFF0)), v28, v22, v21, &v46);
            uint64_t v31 = v30;
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v32 = (void *)swift_slowAlloc();
            memcpy(v32, v43, v29);
            sub_10023F200((unint64_t *)v32, v28, v22, v21, &v46);
            uint64_t v31 = v33;
            swift_release();
            swift_bridgeObjectRelease();
            swift_slowDealloc();
          }
          return (void *)v31;
        }
        uint64_t v25 = *v15;
LABEL_12:
        v25(v45, v7);
        a1 = v46;
        unint64_t v14 = v47;
        unint64_t v13 = *(void *)(v46 + 16);
        uint64_t v8 = v39;
        if (v47 == v13)
        {
          v37(v6, 1, 1, v7);
          break;
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    }
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
  }
  else
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  return (void *)a2;
}

void *sub_10023D8B8(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911000);
}

void *sub_10023D918(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911008);
}

void *sub_10023D978(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911010);
}

void *sub_10023D9D8(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911018);
}

void *sub_10023DA38(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911020);
}

void *sub_10023DA98(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911030);
}

void *sub_10023DAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v61 = (char *)&v51 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v62 = a1;
  uint64_t v63 = a1 + 56;
  uint64_t v56 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v57 = v6;
  uint64_t v64 = v14;
  uint64_t v65 = 0;
  unint64_t v66 = v18;
  uint64_t v55 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v59 = v8 + 16;
  uint64_t v60 = (char *)(a2 + 56);
  uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v58 = v8;
  uint64_t v54 = a2;
  uint64_t v52 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v57;
  v25(v57, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v56)(v26, v27, 1, v7);
    uint64_t v62 = a1;
    uint64_t v63 = v15;
    uint64_t v64 = v14;
    uint64_t v65 = v23;
    unint64_t v66 = v21;
    if ((*v55)(v26, 1, v7) == 1)
    {
      sub_1000C1AF8();
      sub_1000966BC(v26, (uint64_t *)&unk_100909E50);
      return (void *)v54;
    }
    (*v53)(v61, v26, v7);
    uint64_t v31 = v54;
    sub_10024202C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v60[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    uint64_t v40 = *v19;
    uint64_t v8 = v58;
LABEL_35:
    v40(v61, v7);
    int64_t v20 = v65;
    unint64_t v18 = v66;
    a1 = v62;
    uint64_t v15 = v63;
    uint64_t v14 = v64;
    uint64_t v52 = v65;
    if (v66) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v52 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v57;
  }
  uint64_t v52 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v58 + 72);
  uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v58 + 16);
  while (1)
  {
    v38(v10, *(void *)(v35 + 48) + v37 * v34, v7);
    sub_10024202C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *v19;
    (*v19)(v10, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v60[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v58;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v61, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v51 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v60, v44);
    sub_10023F6E4((unint64_t *)((char *)&v51 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v62);
    uint64_t v46 = v45;
    swift_release();
    sub_1000C1AF8();
    return (void *)v46;
  }
  else
  {
    uint64_t v48 = (void *)swift_slowAlloc();
    memcpy(v48, v60, v44);
    sub_10023F6E4((unint64_t *)v48, v43, v35, v34, &v62);
    uint64_t v50 = v49;
    swift_release();
    sub_1000C1AF8();
    swift_slowDealloc();
    return (void *)v50;
  }
}

void *sub_10023E1BC(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100913C90);
}

void *sub_10023E21C(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, (uint64_t *)&unk_100911040);
}

void *sub_10023E27C(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100914250);
}

void *sub_10023E2DC(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100914970);
}

void *sub_10023E33C(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100913C00);
}

void *sub_10023E39C(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100910FC0);
}

void *sub_10023E3FC(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100910FC8);
}

void *sub_10023E45C(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, (uint64_t *)&unk_100910FD0);
}

void *sub_10023E4BC(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, (uint64_t *)&unk_100910FE0);
}

void *sub_10023E51C(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100913E80);
}

void *sub_10023E57C(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100910FF8);
}

void *sub_10023E5DC(uint64_t a1, uint64_t a2)
{
  return sub_10023E63C(a1, a2, &qword_100911038);
}

void *sub_10023E63C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v28[0] = a1;
  uint64_t v26 = *(void *)(a1 + 16);
  if (v26)
  {
    uint64_t v25 = a3;
    uint64_t v4 = a2 + 56;
    uint64_t v27 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = *(void **)(v27 + 8 * v5++);
      Hasher.init(_seed:)();
      id v7 = v6;
      NSObject.hash(into:)();

      Swift::Int v8 = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = v8 & ~v9;
      if ((*(void *)(v4 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
      {
        sub_1000963CC(0, (unint64_t *)&qword_10090C120);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
        char v12 = static NSObject.== infix(_:_:)();

        if (v12)
        {
LABEL_10:

          v28[1] = v5;
          char v17 = *(unsigned char *)(v3 + 32);
          unint64_t v18 = (unint64_t)((1 << v17) + 63) >> 6;
          size_t v19 = 8 * v18;
          if ((v17 & 0x3Fu) < 0xE
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)&v25 - ((v19 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v3 + 56), v19);
            sub_10023EFCC((unint64_t *)((char *)&v25 - ((v19 + 15) & 0x3FFFFFFFFFFFFFF0)), v18, v3, v10, v28, v25);
            uint64_t v21 = v20;
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v22 = (void *)swift_slowAlloc();
            memcpy(v22, (const void *)(v3 + 56), v19);
            sub_10023EFCC((unint64_t *)v22, v18, v3, v10, v28, v25);
            uint64_t v21 = v23;
            swift_release();
            swift_bridgeObjectRelease();
            swift_slowDealloc();
          }
          return (void *)v21;
        }
        uint64_t v13 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v13;
          if (((*(void *)(v4 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
            break;
          }
          id v14 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
          char v15 = static NSObject.== infix(_:_:)();

          if (v15) {
            goto LABEL_10;
          }
        }
      }

      if (v5 == v26)
      {
        swift_bridgeObjectRelease();
        return (void *)v3;
      }
    }
  }
  return (void *)v3;
}

void sub_10023E95C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v39 = a3 + 56;
  while (2)
  {
    uint64_t v36 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000) == 0)
        {
          int64_t v10 = v5[3];
          unint64_t v9 = v5[4];
          if (v9)
          {
            uint64_t v11 = (v9 - 1) & v9;
            unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            uint64_t v13 = *(void **)(*(void *)(*v5 + 48) + 8 * v12);
            id v14 = v13;
            goto LABEL_8;
          }
          int64_t v27 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            goto LABEL_49;
          }
          int64_t v28 = (unint64_t)(v5[2] + 64) >> 6;
          if (v27 >= v28)
          {
            uint64_t v13 = 0;
            uint64_t v11 = 0;
            goto LABEL_8;
          }
          uint64_t v29 = v5[1];
          unint64_t v30 = *(void *)(v29 + 8 * v27);
          if (v30)
          {
LABEL_22:
            uint64_t v11 = (v30 - 1) & v30;
            unint64_t v12 = __clz(__rbit64(v30)) + (v27 << 6);
            int64_t v10 = v27;
            goto LABEL_7;
          }
          int64_t v33 = v10 + 2;
          if (v10 + 2 >= v28) {
            goto LABEL_41;
          }
          unint64_t v30 = *(void *)(v29 + 8 * v33);
          if (v30)
          {
LABEL_29:
            int64_t v27 = v33;
            goto LABEL_22;
          }
          if (v10 + 3 < v28)
          {
            unint64_t v30 = *(void *)(v29 + 8 * (v10 + 3));
            if (v30)
            {
              int64_t v27 = v10 + 3;
              goto LABEL_22;
            }
            int64_t v33 = v10 + 4;
            if (v10 + 4 >= v28)
            {
              uint64_t v13 = 0;
              uint64_t v11 = 0;
              v10 += 3;
LABEL_8:
              v5[3] = v10;
              v5[4] = v11;
              if (!v13) {
                goto LABEL_47;
              }
              goto LABEL_12;
            }
            unint64_t v30 = *(void *)(v29 + 8 * v33);
            if (v30) {
              goto LABEL_29;
            }
            int64_t v27 = v10 + 5;
            if (v10 + 5 < v28)
            {
              unint64_t v30 = *(void *)(v29 + 8 * v27);
              if (v30) {
                goto LABEL_22;
              }
              int64_t v27 = v28 - 1;
              int64_t v34 = v10 + 6;
              while (v28 != v34)
              {
                unint64_t v30 = *(void *)(v29 + 8 * v34++);
                if (v30)
                {
                  int64_t v27 = v34 - 1;
                  goto LABEL_22;
                }
              }
LABEL_41:
              uint64_t v13 = 0;
              uint64_t v11 = 0;
              int64_t v10 = v27;
              goto LABEL_8;
            }
          }
          uint64_t v13 = 0;
          uint64_t v11 = 0;
          int64_t v10 = v33;
          goto LABEL_8;
        }
        if (!__CocoaSet.Iterator.next()()
          || (type metadata accessor for REMObjectID_Codable(),
              swift_unknownObjectRetain(),
              swift_dynamicCast(),
              uint64_t v13 = v40,
              swift_unknownObjectRelease(),
              !v40))
        {
LABEL_47:
          swift_retain();
          sub_100240918(a1, a2, v36, a3, &qword_1009110B8);
          return;
        }
LABEL_12:
        Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
        uint64_t v16 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v17 = v15 & ~v16;
        unint64_t v18 = v17 >> 6;
        uint64_t v19 = 1 << v17;
        if (((1 << v17) & *(void *)(v39 + 8 * (v17 >> 6))) == 0) {
          goto LABEL_3;
        }
        type metadata accessor for REMObjectID_Codable();
        id v20 = *(id *)(*(void *)(a3 + 48) + 8 * v17);
        char v21 = static NSObject.== infix(_:_:)();

        if (v21) {
          break;
        }
        uint64_t v22 = ~v16;
        for (unint64_t i = v17 + 1; ; unint64_t i = v24 + 1)
        {
          unint64_t v24 = i & v22;
          if (((*(void *)(v39 + (((i & v22) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v22)) & 1) == 0) {
            break;
          }
          id v25 = *(id *)(*(void *)(a3 + 48) + 8 * v24);
          char v26 = static NSObject.== infix(_:_:)();

          if (v26)
          {

            unint64_t v18 = v24 >> 6;
            uint64_t v19 = 1 << v24;
            goto LABEL_25;
          }
        }
LABEL_3:

        uint64_t v5 = a5;
      }

LABEL_25:
      unint64_t v31 = a1[v18];
      a1[v18] = v31 & ~v19;
      BOOL v32 = (v19 & v31) == 0;
      uint64_t v5 = a5;
    }
    while (v32);
    uint64_t v8 = v36 - 1;
    if (__OFSUB__(v36, 1))
    {
LABEL_49:
      __break(1u);
      return;
    }
    if (v36 != 1) {
      continue;
    }
    break;
  }
}

unint64_t *sub_10023ECD4(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v39 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_45;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_15;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_45;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v15 = v14 - 1;
                int64_t v36 = v9 + 6;
                while (v14 != v36)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return (unint64_t *)sub_1002402D0(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          int64_t v13 = v18;
        }
LABEL_15:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_16:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_3;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        int64_t v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          int64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            id result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        id result = (unint64_t *)swift_bridgeObjectRelease();
      }
      id result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_23:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

void sub_10023EFCC(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t *a6)
{
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v30 = v7 - 1;
  uint64_t v9 = *a5;
  unint64_t v8 = a5[1];
  unint64_t v10 = *(void *)(*a5 + 16);
  if (v8 == v10)
  {
LABEL_2:
    swift_retain();
    sub_100240B74(a1, a2, v30, a3, a6);
    return;
  }
  uint64_t v32 = a3 + 56;
  uint64_t v31 = a5;
  while ((v8 & 0x8000000000000000) == 0)
  {
    if (v8 >= v10) {
      goto LABEL_21;
    }
    uint64_t v11 = *(void **)(v9 + 8 * v8 + 32);
    a5[1] = v8 + 1;
    Hasher.init(_seed:)();
    id v12 = v11;
    NSObject.hash(into:)();
    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v15 = v13 & ~v14;
    unint64_t v16 = v15 >> 6;
    uint64_t v17 = 1 << v15;
    if (((1 << v15) & *(void *)(v32 + 8 * (v15 >> 6))) == 0) {
      goto LABEL_4;
    }
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    id v18 = *(id *)(*(void *)(a3 + 48) + 8 * v15);
    char v19 = static NSObject.== infix(_:_:)();

    if ((v19 & 1) == 0)
    {
      uint64_t v20 = ~v14;
      for (unint64_t i = v15 + 1; ; unint64_t i = v22 + 1)
      {
        unint64_t v22 = i & v20;
        if (((*(void *)(v32 + (((i & v20) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v20)) & 1) == 0) {
          break;
        }
        id v23 = *(id *)(*(void *)(a3 + 48) + 8 * v22);
        char v24 = static NSObject.== infix(_:_:)();

        if (v24)
        {

          unint64_t v16 = v22 >> 6;
          uint64_t v17 = 1 << v22;
          goto LABEL_16;
        }
      }
LABEL_4:

      a5 = v31;
      goto LABEL_5;
    }

LABEL_16:
    unint64_t v25 = a1[v16];
    a1[v16] = v25 & ~v17;
    a5 = v31;
    if ((v17 & v25) != 0)
    {
      uint64_t v26 = v30 - 1;
      if (__OFSUB__(v30, 1)) {
        goto LABEL_22;
      }
      --v30;
      if (!v26) {
        return;
      }
    }
LABEL_5:
    uint64_t v9 = *a5;
    unint64_t v8 = a5[1];
    unint64_t v10 = *(void *)(*a5 + 16);
    if (v8 == v10) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
}

void sub_10023F200(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v43 = a2;
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v19 = __chkstk_darwin(v16);
  uint64_t v20 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  size_t v44 = a1;
  uint64_t v45 = v20 - 1;
  uint64_t v21 = *a5;
  unint64_t v22 = a5[1];
  unint64_t v23 = *(void *)(*a5 + 16);
  uint64_t v54 = a3;
  if (v22 == v23)
  {
    uint64_t v24 = v43;
    uint64_t v25 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v18 + 56))(v12, 1, 1, v13, v19);
LABEL_22:
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909E50);
    uint64_t v41 = v54;
    swift_retain();
    sub_100240580(v44, v24, v25, v41);
    return;
  }
  uint64_t v42 = v5;
  uint64_t v53 = v18 + 56;
  uint64_t v52 = v18 + 48;
  uint64_t v50 = a5;
  uint64_t v51 = (void (**)(char *, char *, uint64_t))(v18 + 32);
  uint64_t v55 = a3 + 56;
  uint64_t v56 = v18 + 16;
  uint64_t v57 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v26 = v18;
  uint64_t v46 = v12;
  uint64_t v49 = v18;
  uint64_t v58 = (char *)&v42 - v17;
  while (v22 < v23)
  {
    uint64_t v28 = *(void *)(v26 + 72);
    BOOL v29 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v26 + 16);
    v29(v12, v21 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80)) + v28 * v22, v13, v19);
    a5[1] = v22 + 1;
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v26 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v48)(v12, 0, 1, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v12, 1, v13) == 1)
    {
      uint64_t v24 = v43;
      uint64_t v25 = v45;
      goto LABEL_22;
    }
    (*v51)(v58, v12, v13);
    uint64_t v30 = v54;
    sub_10024202C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = v30;
    uint64_t v33 = -1 << *(unsigned char *)(v30 + 32);
    unint64_t v34 = v31 & ~v33;
    if (((*(void *)(v55 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
    {
      uint64_t v27 = *v57;
LABEL_5:
      v27(v58, v13);
      goto LABEL_6;
    }
    uint64_t v47 = (unint64_t)v57 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v35 = v32;
    uint64_t v36 = ~v33;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v29)(v15, *(void *)(v35 + 48) + v34 * v28, v13);
      sub_10024202C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v27 = *v57;
      (*v57)(v15, v13);
      if (v37) {
        break;
      }
      unint64_t v34 = (v34 + 1) & v36;
      if (((*(void *)(v55 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
      {
        id v12 = v46;
        goto LABEL_5;
      }
    }
    v27(v58, v13);
    uint64_t v38 = (v34 >> 3) & 0x1FFFFFFFFFFFFFF8;
    uint64_t v39 = *(unint64_t *)((char *)v44 + v38);
    *(unint64_t *)((char *)v44 + v38) = v39 & ~(1 << v34);
    if ((v39 & (1 << v34)) == 0)
    {
      id v12 = v46;
LABEL_6:
      uint64_t v26 = v49;
      a5 = v50;
      goto LABEL_7;
    }
    uint64_t v40 = v45 - 1;
    uint64_t v26 = v49;
    a5 = v50;
    if (__OFSUB__(v45, 1)) {
      goto LABEL_24;
    }
    id v12 = v46;
    --v45;
    if (!v40) {
      return;
    }
LABEL_7:
    uint64_t v21 = *a5;
    unint64_t v22 = a5[1];
    unint64_t v23 = *(void *)(*a5 + 16);
    if (v22 == v23)
    {
      uint64_t v24 = v43;
      uint64_t v25 = v45;
      v48(v12, 1, 1, v13, v19);
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void sub_10023F6E4(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v16 = __chkstk_darwin(v15);
  uint64_t v65 = (char *)&v52 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v54 = a1;
  uint64_t v55 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v63 = v21 + 16;
  uint64_t v64 = a3;
  uint64_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v56 = a5;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v62 = a3 + 56;
  uint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v60 = v21;
  while (2)
  {
    uint64_t v53 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v29 = a5[2];
        int64_t v28 = a5[3];
        unint64_t v30 = a5[4];
        if (v30)
        {
          uint64_t v61 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v28 << 6);
LABEL_7:
          unint64_t v32 = *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31;
          uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v22 + 16);
          uint64_t v34 = v26;
          v33(v11, v32, v12, v16);
          uint64_t v35 = 0;
          goto LABEL_8;
        }
        int64_t v44 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        int64_t v45 = (unint64_t)(v29 + 64) >> 6;
        if (v44 >= v45)
        {
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v44);
        if (v46) {
          goto LABEL_17;
        }
        int64_t v49 = v28 + 2;
        if (v28 + 2 >= v45) {
          goto LABEL_35;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v49);
        if (v46) {
          goto LABEL_23;
        }
        if (v28 + 3 >= v45) {
          goto LABEL_36;
        }
        unint64_t v46 = *(void *)(v27 + 8 * (v28 + 3));
        if (v46)
        {
          int64_t v44 = v28 + 3;
          goto LABEL_17;
        }
        int64_t v49 = v28 + 4;
        if (v28 + 4 < v45)
        {
          unint64_t v46 = *(void *)(v27 + 8 * v49);
          if (v46)
          {
LABEL_23:
            int64_t v44 = v49;
LABEL_17:
            uint64_t v61 = (v46 - 1) & v46;
            unint64_t v31 = __clz(__rbit64(v46)) + (v44 << 6);
            int64_t v28 = v44;
            goto LABEL_7;
          }
          int64_t v44 = v28 + 5;
          if (v28 + 5 < v45)
          {
            unint64_t v46 = *(void *)(v27 + 8 * v44);
            if (v46) {
              goto LABEL_17;
            }
            int64_t v44 = v45 - 1;
            int64_t v50 = v28 + 6;
            while (v45 != v50)
            {
              unint64_t v46 = *(void *)(v27 + 8 * v50++);
              if (v46)
              {
                int64_t v44 = v50 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            uint64_t v61 = 0;
            uint64_t v35 = 1;
            int64_t v28 = v44;
            uint64_t v34 = v26;
            goto LABEL_8;
          }
LABEL_36:
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          int64_t v28 = v49;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        uint64_t v61 = 0;
        uint64_t v35 = 1;
        v28 += 3;
        uint64_t v34 = v26;
LABEL_8:
        (*v59)(v11, v35, 1, v12);
        *a5 = v34;
        a5[1] = v27;
        a5[2] = v29;
        a5[3] = v28;
        a5[4] = v61;
        if ((*v58)(v11, 1, v12) == 1)
        {
          sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
          uint64_t v51 = v64;
          swift_retain();
          sub_100240580(v54, v52, v53, v51);
          return;
        }
        (*v57)(v65, v11, v12);
        uint64_t v36 = v64;
        sub_10024202C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v39 = v37 & ~v38;
        if ((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39)) {
          break;
        }
        uint64_t v25 = *v24;
        uint64_t v22 = v60;
LABEL_4:
        v25(v65, v12);
      }
      uint64_t v61 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v40 = ~v38;
      uint64_t v41 = *(void *)(v60 + 72);
      uint64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      while (1)
      {
        v42(v14, *(void *)(v64 + 48) + v41 * v39, v12);
        sub_10024202C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v25 = *v24;
        (*v24)(v14, v12);
        if (v43) {
          break;
        }
        unint64_t v39 = (v39 + 1) & v40;
        if (((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        {
          uint64_t v11 = v55;
          a5 = v56;
          uint64_t v22 = v60;
          goto LABEL_4;
        }
      }
      v25(v65, v12);
      uint64_t v47 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v55;
      uint64_t v48 = *(unint64_t *)((char *)v54 + v47);
      *(unint64_t *)((char *)v54 + v47) = v48 & ~(1 << v39);
      a5 = v56;
      uint64_t v22 = v60;
    }
    while ((v48 & (1 << v39)) == 0);
    uint64_t v23 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_43:
      __break(1u);
      return;
    }
    if (v53 != 1) {
      continue;
    }
    break;
  }
}

uint64_t sub_10023FC68(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v8 = &_swiftEmptySetSingleton;
LABEL_34:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100094134((uint64_t *)&unk_100910FA0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v8 = (unsigned char *)result;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_22;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_37;
    }
    if (v14 >= v34) {
      goto LABEL_34;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v34) {
        goto LABEL_34;
      }
      unint64_t v15 = a1[v10];
      if (!v15) {
        break;
      }
    }
LABEL_21:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_22:
    uint64_t v17 = *(void *)(v4 + 48) + 24 * v13;
    Swift::UInt v18 = *(void *)v17;
    long long v36 = *(_OWORD *)(v17 + 8);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    id v19 = (id)v36;
    id v20 = *((id *)&v36 + 1);
    id v21 = v19;
    id v22 = v20;
    NSObject.hash(into:)();
    id v23 = v22;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << v8[32];
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
      }
      while (v31 == -1);
      unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t v32 = *((void *)v8 + 6) + 24 * v27;
    *(void *)uint64_t v32 = v18;
    *(_OWORD *)(v32 + 8) = v36;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_34;
    }
  }
  uint64_t v16 = v14 + 2;
  if (v16 >= v34) {
    goto LABEL_34;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v34) {
      goto LABEL_34;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_21;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_10023FF44(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v37 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100094134(&qword_1009110A8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, PredicateType);
    sub_10024202C(&qword_1009110B0, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, PredicateType);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1002402D0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100094134(&qword_1009139A0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    void *v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100240568(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100240918(a1, a2, a3, a4, &qword_1009110B8);
}

uint64_t sub_100240574(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100240918(a1, a2, a3, a4, &qword_1009110A0);
}

uint64_t sub_100240580(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100094134(&qword_100911078);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_10024202C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10024090C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100240918(a1, a2, a3, a4, (uint64_t *)&unk_100911050);
}

uint64_t sub_100240918(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v10;
  }
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  sub_100094134(a5);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = (void *)result;
  uint64_t v30 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v30[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = v10[5];
    id v20 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *((unsigned char *)v10 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(void *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  unint64_t v17 = v30[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100240B74(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v10;
  }
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  sub_100094134(a5);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = (unsigned char *)result;
  uint64_t v30 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v30[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void **)(*(void *)(v5 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    id v20 = v19;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << v10[32];
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(void *)(*((void *)v10 + 6) + 8 * v24) = v20;
    ++*((void *)v10 + 2);
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  unint64_t v17 = v30[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100240DEC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100240E24()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100240E34()
{
  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 24);
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_100240E8C(unint64_t a1)
{
  sub_10023B788(a1, v1[2], (uint64_t)(v1 + 3), v1[8], v1[9], v1[10]);
}

uint64_t sub_100240EA0()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + v6);
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, ((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_100240F98(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);

  sub_10023BF98(a1, v5, v1 + v4, v6);
}

uint64_t sub_100241044(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100241054()
{
  return swift_release();
}

void sub_10024105C(uint64_t a1)
{
  sub_10023BF50(a1, v1);
}

uint64_t sub_100241078()
{
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 16);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

void sub_1002410C8()
{
  sub_10023B724(v0 + 16, *(void *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_1002410D8(void *a1, void *a2, char *a3, uint64_t a4)
{
  id v112 = a1;
  uint64_t v113 = a3;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v110 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v108 = (char *)&v102 - v10;
  __chkstk_darwin(v11);
  uint64_t v107 = (char *)&v102 - v12;
  __chkstk_darwin(v13);
  uint64_t v104 = (char *)&v102 - v14;
  __chkstk_darwin(v15);
  uint64_t v106 = (char *)&v102 - v16;
  __chkstk_darwin(v17);
  os_log_type_t v103 = (char *)&v102 - v18;
  __chkstk_darwin(v19);
  uint64_t v109 = (char *)&v102 - v20;
  __chkstk_darwin(v21);
  uint64_t v115 = (char *)&v102 - v22;
  __chkstk_darwin(v23);
  char v25 = (char *)&v102 - v24;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v102 - v27;
  uint64_t v29 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v29 - 8);
  unint64_t v105 = (char *)&v102 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v102 - v32;
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v102 - v35;
  __chkstk_darwin(v37);
  unint64_t v39 = (char *)&v102 - v38;
  __n128 v41 = __chkstk_darwin(v40);
  uint64_t v42 = *(void (**)(__n128))(v7 + 56);
  uint64_t v114 = (uint64_t)&v102 - v43;
  unint64_t v111 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v42;
  v42(v41);
  if (([a2 isSnooze] & 1) == 0)
  {
    sub_1000CAA4C(a4, (uint64_t)v39);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v39, 1, v6) != 1)
    {
      uint64_t v46 = v114;
      sub_1000966BC(v114, (uint64_t *)&unk_100909A40);
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v47(v28, v39, v6);
      v47((char *)v46, v28, v6);
      v111(v46, 0, 1, v6);
      goto LABEL_10;
    }
    sub_1000966BC((uint64_t)v39, (uint64_t *)&unk_100909A40);
  }
  id v118 = [a2 trigger];
  sub_1000963CC(0, (unint64_t *)&unk_100911060);
  sub_100094134((uint64_t *)&unk_100916DF0);
  if (swift_dynamicCast())
  {
    sub_1000967D4(v116, (uint64_t)v119);
    uint64_t v44 = v120;
    uint64_t v45 = v121;
    sub_1000C0DE0(v119, v120);
    (*(void (**)(id, uint64_t, uint64_t))(v45 + 8))(v112, v44, v45);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v36, 1, v6) == 1)
    {
      sub_1000966BC((uint64_t)v36, (uint64_t *)&unk_100909A40);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v119);
      uint64_t v46 = v114;
    }
    else
    {
      uint64_t v48 = v114;
      sub_1000966BC(v114, (uint64_t *)&unk_100909A40);
      int64_t v49 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v49(v25, v36, v6);
      int64_t v50 = v25;
      uint64_t v46 = v48;
      v49((char *)v48, v50, v6);
      v111(v48, 0, 1, v6);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v119);
    }
  }
  else
  {
    uint64_t v117 = 0;
    memset(v116, 0, sizeof(v116));
    sub_1000966BC((uint64_t)v116, &qword_100911070);
    uint64_t v46 = v114;
  }
LABEL_10:
  sub_1000CAA4C(v46, (uint64_t)v33);
  uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v51(v33, 1, v6) == 1)
  {
    sub_1000966BC((uint64_t)v33, (uint64_t *)&unk_100909A40);
    if (qword_1009071A0 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_10008E2DC(v52, (uint64_t)qword_100910EB0);
    id v53 = a2;
    id v54 = v112;
    id v55 = v53;
    id v56 = v54;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = swift_slowAlloc();
      uint64_t v60 = (void *)swift_slowAlloc();
      uint64_t v115 = (char *)swift_slowAlloc();
      *(void *)&v116[0] = v55;
      v119[0] = (uint64_t)v115;
      *(_DWORD *)uint64_t v59 = 138412546;
      id v61 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v60 = v55;

      *(_WORD *)(v59 + 12) = 2080;
      id v62 = [v56 description];
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v65 = v64;

      *(void *)&v116[0] = sub_1000C51B8(v63, v65, v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Unable to determine fireDate. An alarm without fireDate shouldn't have reached here. {alarm: %@, reminder: %s}", (uint8_t *)v59, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v66 = v114;
    }
    else
    {

      uint64_t v66 = v46;
    }
    sub_1000966BC(v66, (uint64_t *)&unk_100909A40);
    return 2;
  }
  uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v67(v115, v33, v6);
  id v68 = [v112 lastBannerPresentationDate];
  if (!v68)
  {
    uint64_t v71 = (uint64_t)v105;
    v111((uint64_t)v105, 1, 1, v6);
    goto LABEL_21;
  }
  uint64_t v69 = v68;
  uint64_t v70 = v103;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v71 = (uint64_t)v105;
  v67(v105, v70, v6);
  v111(v71, 0, 1, v6);
  if (v51((char *)v71, 1, v6) == 1)
  {
LABEL_21:
    dispatch_group_t v73 = v109;
    static Date.distantPast.getter();
    sub_1000966BC(v71, (uint64_t *)&unk_100909A40);
    goto LABEL_22;
  }
  uint64_t v72 = v109;
  v67(v109, (char *)v71, v6);
  dispatch_group_t v73 = v72;
LABEL_22:
  os_log_type_t v75 = v113;
  uint64_t v76 = v104;
  uint64_t v77 = v115;
  char v78 = static Date.< infix(_:_:)();
  BOOL v79 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  id v80 = v106;
  v79(v106, v77, v6);
  v79(v76, v75, v6);
  id v81 = v110;
  if (v78) {
    LODWORD(v112) = static Date.< infix(_:_:)();
  }
  else {
    LODWORD(v112) = 0;
  }
  uint64_t v82 = v80;
  uint64_t v83 = *(void (**)(char *, uint64_t))(v7 + 8);
  v83(v76, v6);
  v83(v82, v6);
  unint64_t v84 = v108;
  if (qword_1009071A0 != -1) {
    swift_once();
  }
  uint64_t v85 = type metadata accessor for Logger();
  sub_10008E2DC(v85, (uint64_t)qword_100910EB0);
  uint64_t v86 = v107;
  v79(v107, v73, v6);
  v79(v84, v115, v6);
  v79(v81, v113, v6);
  uint64_t v87 = Logger.logObject.getter();
  os_log_type_t v88 = static os_log_type_t.default.getter();
  int v89 = v88;
  if (os_log_type_enabled(v87, v88))
  {
    uint64_t v90 = swift_slowAlloc();
    unint64_t v111 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))swift_slowAlloc();
    v119[0] = (uint64_t)v111;
    *(_DWORD *)uint64_t v90 = 136446978;
    LODWORD(v106) = v89;
    uint64_t v91 = Date.description.getter();
    *(void *)&v116[0] = sub_1000C51B8(v91, v92, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v83(v86, v6);
    *(_WORD *)(v90 + 12) = 2082;
    uint64_t v93 = Date.description.getter();
    *(void *)&v116[0] = sub_1000C51B8(v93, v94, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v83(v84, v6);
    *(_WORD *)(v90 + 22) = 2082;
    uint64_t v95 = v110;
    uint64_t v96 = Date.description.getter();
    *(void *)&v116[0] = sub_1000C51B8(v96, v97, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v83(v95, v6);
    *(_WORD *)(v90 + 32) = 2082;
    if (v112) {
      uint64_t v98 = 89;
    }
    else {
      uint64_t v98 = 78;
    }
    *(void *)&v116[0] = sub_1000C51B8(v98, 0xE100000000000000, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v106, "allowBanner? {lastBannerPresentationDate: %{public}s, fireDate: %{public}s, now: %{public}s, showBanner: %{public}s}", (uint8_t *)v90, 0x2Au);
    swift_arrayDestroy();
    dispatch_group_t v73 = v109;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v99 = v114;
  }
  else
  {
    v83(v86, v6);
    v83(v84, v6);
    v83(v81, v6);

    uint64_t v99 = v114;
  }
  Date.timeIntervalSince(_:)();
  double v101 = v100;
  v83(v73, v6);
  v83(v115, v6);
  sub_1000966BC(v99, (uint64_t *)&unk_100909A40);
  if (v101 < 10.0) {
    return 0;
  }
  if (v112) {
    return 2;
  }
  return 1;
}

void sub_100241DDC(uint64_t a1)
{
  if (qword_1009071A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_100910EB0);
  sub_100096838(a1, (uint64_t)v11);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v6 = v12;
    uint64_t v7 = v13;
    sub_1000C0DE0(v11, v12);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
    sub_1000C51B8(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "os_transaction RELEASE {name: com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms, producer: %{public}s}", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v11);
  }
}

uint64_t sub_100241FA8(uint64_t *a1)
{
  return sub_10023BE84(a1, *(void *)(v1 + 16), *(unsigned char **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100241FC8()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_100242018(uint64_t a1)
{
  sub_100238928(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_10024202C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RDAlarmNotificationConsumer.BannerBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100242140);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDAlarmNotificationConsumer.BannerBehavior()
{
  return &type metadata for RDAlarmNotificationConsumer.BannerBehavior;
}

unint64_t sub_10024217C()
{
  unint64_t result = qword_1009110D0;
  if (!qword_1009110D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009110D0);
  }
  return result;
}

unint64_t static REMCDSavedReminder.cdEntityName.getter()
{
  return 0xD000000000000012;
}

id REMCDSavedReminder.parentSavedReminderObjectID.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v10 = __chkstk_darwin(v9).n128_u64[0];
  uint64_t v12 = (char *)&v20 - v11;
  id v13 = [v1 parentSavedReminderIdentifier:v10];
  if (!v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  uint64_t v14 = v13;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v15(v4, v8, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909E50);
    return 0;
  }
  v15(v12, v4, v5);
  type metadata accessor for REMCDSavedReminder();
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v18 = [ObjCClassFromMetadata objectIDWithUUID:isa];

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return v18;
}

uint64_t type metadata accessor for REMCDSavedReminder()
{
  return self;
}

uint64_t static REMCDSavedReminder.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0 = sub_10012674C((uint64_t)&off_1008B60F8);
  swift_arrayDestroy();
  return v0;
}

Swift::Bool __swiftcall REMCDSavedReminder.isConnected(toAccountObject:)(NSMutableDictionary toAccountObject)
{
  id v3 = [v1 remObjectID];
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = v3;
  if ([(objc_class *)toAccountObject.super.super.isa objectForKeyedSubscript:v3])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_1000D6CBC((uint64_t)v13, (uint64_t)v14);
  if (!v14[3])
  {
    sub_1000966BC((uint64_t)v14, &qword_100908190);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    id v6 = v4;
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    [(objc_class *)toAccountObject.super.super.isa setObject:isa forKeyedSubscript:v6];

    id v8 = [v1 template];
    if (v8)
    {
      uint64_t v9 = v8;
      unsigned int v5 = [v8 isConnectedToAccountObject:toAccountObject.super.super.isa];

      v14[0] = v5;
      type metadata accessor for REMObjectIsConnectedState(0);
      id v10 = v6;
      [(objc_class *)toAccountObject.super.super.isa setObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() forKeyedSubscript:v10];

      swift_unknownObjectRelease();
      return v5;
    }

LABEL_12:
    LOBYTE(v5) = 0;
    return v5;
  }

  LOBYTE(v5) = v12 == 1;
  return v5;
}

uint64_t sub_10024281C()
{
  id v1 = [v0 metadata];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    type metadata accessor for RDSavedReminder();
    sub_100242F14(&qword_100911108, (void (*)(uint64_t))type metadata accessor for RDSavedReminder);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    return sub_100097F34(v3, v5);
  }
  else
  {
    uint64_t v7 = self;
    type metadata accessor for REMCDSavedReminder();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v9 = String._bridgeToObjectiveC()();
    [v7 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v9];

    return swift_willThrow();
  }
}

void sub_100242988(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v8);
  id v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  uint64_t v32 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v15 = &v29[-v14];
  *(void *)&double v17 = __chkstk_darwin(v16).n128_u64[0];
  uint64_t v19 = &v29[-v18];
  id v20 = [v2 parentSavedReminderIdentifier:v17];
  if (v20)
  {
    uint64_t v21 = v20;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v19, 1, 1, v4);
  }
  uint64_t v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1001248EC((uint64_t)v19, (uint64_t)v10);
  uint64_t v33 = a1;
  sub_1001248EC(a1, v22);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v23((uint64_t)v10, 1, v4) == 1)
  {
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    if (v23(v22, 1, v4) == 1)
    {
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
      return;
    }
  }
  else
  {
    sub_1001248EC((uint64_t)v10, (uint64_t)v15);
    if (v23(v22, 1, v4) != 1)
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 32))(v7, v22, v4);
      sub_100242F14((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v31 = v2;
      uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
      v24(v7, v4);
      sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
      v24(v15, v4);
      uint64_t v2 = v31;
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
      if (v30) {
        return;
      }
      goto LABEL_11;
    }
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v15, v4);
  }
  sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_10090B4C0);
LABEL_11:
  char v25 = v32;
  sub_1001248EC(v33, (uint64_t)v32);
  if (v23((uint64_t)v25, 1, v4) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v25, v4);
  }
  [v2 setParentSavedReminderIdentifier:isa];

  id v27 = [v2 createResolutionTokenMapIfNecessary];
  NSString v28 = String._bridgeToObjectiveC()();
  [v27 updateForKey:v28];
}

id REMCDSavedReminder.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDSavedReminder();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

id REMCDSavedReminder.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDSavedReminder();
  return [super dealloc];
}

uint64_t sub_100242F14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100242F5C(uint64_t a1)
{
  uint64_t result = sub_100243784(&qword_100911130, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SiriFoundInAppsInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_100242FB4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v30 = a3;
  uint64_t v5 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  objc_super v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v36 = (uint64_t)&v26 - v9;
  uint64_t v10 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v33 = (char *)&v26 - v18;
  uint64_t v35 = a1;
  sub_100243370(a1);
  if (!v3)
  {
    uint64_t v28 = v13;
    uint64_t v29 = v14;
    uint64_t v26 = v7;
    uint64_t v27 = v5;
    uint64_t v19 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
    id v20 = v33;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    id v21 = [v32 fetchResultTokenToDiffAgainst];
    uint64_t v22 = v36;
    sub_10051F2BC(v21, v35, v36);

    uint64_t v23 = v28;
    uint64_t v24 = v29;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v16, v20, v28);
    uint64_t v25 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v26, v22, v27);
    uint64_t v35 = sub_100243784(&qword_10090BC38, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
    sub_100243784((unint64_t *)&unk_10090BC40, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v22, v27);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v23);
  }
}

uint64_t sub_100243370(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v2 = *(void *)(Subtasks - 8);
  uint64_t v29 = Subtasks;
  uint64_t v30 = v2;
  __chkstk_darwin(Subtasks);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v33 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v16 = _s10PredicatesOMa(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = (void *)sub_10038F1F0();
  sub_10012607C((uint64_t)v18, _s10PredicatesOMa);
  REMRemindersListDataView.SiriFoundInAppsInvocation.Parameters.sortingStyle.getter();
  uint64_t v20 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v21 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v12, v20, v21);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = (uint64_t)v9;
  uint64_t v23 = v29;
  sub_100520FD4(v22, (uint64_t)v12, (uint64_t)v15);
  uint64_t v24 = v30;
  REMRemindersListDataView.SiriFoundInAppsInvocation.Parameters.showCompleted.getter();
  (*(void (**)(char *, void, uint64_t))(v24 + 104))(v4, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), v23);
  uint64_t v25 = v32;
  uint64_t v26 = sub_100522260(v31, (uint64_t)v19, (uint64_t)v15, 0, 0, (uint64_t)v6, v4, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (!v25)
  {
    uint64_t v10 = (uint64_t)v26;
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v34);
  sub_10012607C((uint64_t)v15, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  return v10;
}

uint64_t sub_100243784(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002437CC(uint64_t a1, uint64_t a2)
{
  id v5 = [*(id *)(v2 + OBJC_IVAR____TtC7remindd30REMNSPersistentHistoryTracking_storeController) newBackgroundContextWithAuthor:REMNSPersistentHistoryTrackingAuthor];
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = v5;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_100243DD0;
  *(void *)(v7 + 24) = v6;
  v11[4] = sub_10008F6F4;
  v11[5] = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1003B3260;
  void v11[3] = &unk_1008BF500;
  uint64_t v8 = _Block_copy(v11);
  swift_retain();
  id v9 = v5;
  swift_retain();
  swift_release();
  [v9 performBlockAndWait:v8];

  _Block_release(v8);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v9) {
    __break(1u);
  }
  return result;
}

id sub_100243C9C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMNSPersistentHistoryTracking();
  return [super dealloc];
}

uint64_t type metadata accessor for REMNSPersistentHistoryTracking()
{
  return self;
}

unint64_t sub_100243D04()
{
  unint64_t result = qword_10090FE00;
  if (!qword_10090FE00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090FE00);
  }
  return result;
}

uint64_t sub_100243D44()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100243D7C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100243D90()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100243DD0()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_100243E00()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100243E10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100243E20()
{
  return swift_release();
}

uint64_t sub_100243E28()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100911168);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100911168);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100243EF0(uint64_t a1)
{
  id v3 = [*v1 objectIDs];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v5 = sub_1002440A0(a1, v4, 128, 0);
  swift_bridgeObjectRelease();
  return v5;
}

id sub_100243F94(uint64_t a1)
{
  id v3 = [*v1 smartListObjectID];
  if (qword_100907100 != -1) {
    swift_once();
  }
  id v4 = sub_1002440A0(a1, (unint64_t)v3, 1, (objc_class *)qword_100942090);

  return v4;
}

NSString sub_10024403C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  id v4 = *a1;
  type metadata accessor for REMSmartListSectionStorageCDIngestor();
  swift_initStackObject();
  NSString result = sub_1004E744C(v4);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

id sub_1002440A0(uint64_t a1, unint64_t a2, char a3, objc_class *a4)
{
  id v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v47 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (objc_class *)sub_1001D6E88();
  uint64_t v14 = (objc_class *)sub_1001D73A8();
  unint64_t v15 = sub_1001D7584(a2, a3, a1, a4, v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4) {
    return v5;
  }
  uint64_t v16 = v47;
  if (qword_1009071A8 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10008E2DC(v10, (uint64_t)qword_100911168);
  uint64_t v18 = v16[2](v12, v17, v10);
  uint64_t v46 = v42;
  unint64_t v48 = v15;
  __chkstk_darwin(v18);
  v42[-2] = v12;
  sub_100094134(&qword_100921A00);
  uint64_t v19 = sub_1000963CC(0, (unint64_t *)&qword_100911180);
  sub_1000967F4(&qword_100911188, &qword_100921A00);
  uint64_t v44 = v19;
  uint64_t v20 = Sequence.map<A>(skippingError:_:)();
  ((void (*)(char *, uint64_t))v16[1])(v12, v10);
  unint64_t v48 = (unint64_t)_swiftEmptyArrayStorage;
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    int64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v45 = v20;
    if (v21) {
      goto LABEL_6;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v26 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  int64_t v21 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v45 = v20;
  if (!v21) {
    goto LABEL_18;
  }
LABEL_6:
  if (v21 < 1)
  {
    __break(1u);
    goto LABEL_28;
  }
  for (uint64_t i = 0; i != v21; ++i)
  {
    if ((v15 & 0xC000000000000001) != 0) {
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v23 = *(id *)(v15 + 8 * i + 32);
    }
    uint64_t v24 = v23;
    id v25 = [v23 smartList];

    if (v25)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)v48;
LABEL_19:
  swift_bridgeObjectRelease();
  unint64_t v48 = (unint64_t)v26;
  sub_100094134((uint64_t *)&unk_100921B00);
  sub_1000967F4((unint64_t *)&qword_100911190, (uint64_t *)&unk_100921B00);
  sub_1000ED098(&qword_100911198, (unint64_t *)&unk_100910210);
  uint64_t v27 = (void *)Sequence<>.unique()();
  swift_bridgeObjectRelease();
  unint64_t v15 = sub_1005014E0(v27);
  swift_bridgeObjectRelease();
  id v29 = [(id)v15 accountStorages];
  uint64_t v30 = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t v31 = sub_1000963CC(0, &qword_100910180);
  sub_1000ED098((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
  v42[2] = v30;
  uint64_t v46 = (void *)v31;
  uint64_t v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v48 = v32;
  sub_100094134(&qword_1009111A0);
  sub_1000967F4(&qword_1009111A8, &qword_1009111A0);
  sub_1000ED098(&qword_10090B688, &qword_100910180);
  int64_t v21 = Sequence<>.unique()();
  swift_bridgeObjectRelease();
  if ((v21 & 0x8000000000000000) == 0 && (v21 & 0x4000000000000000) == 0)
  {
    uint64_t v43 = v21 & 0xFFFFFFFFFFFFFF8;
    goto LABEL_24;
  }
LABEL_28:
  uint64_t v43 = (uint64_t)sub_10020B39C(v21);
  swift_bridgeObjectRelease();
LABEL_24:
  id v33 = [(id)v15 smartListStorages];
  v42[1] = sub_1000963CC(0, &qword_10090B328);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v47 = (uint64_t (**)(char *, uint64_t, uint64_t))v15;
  id v34 = [(id)v15 parentListStorages];
  sub_1000963CC(0, (unint64_t *)&unk_100914440);
  uint64_t v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v48 = v35;
  sub_100094134(&qword_1009111B0);
  sub_1000967F4(&qword_1009111B8, &qword_1009111B0);
  sub_1000ED098(&qword_10090ADB8, (unint64_t *)&unk_100914440);
  unint64_t v36 = Sequence<>.unique()();
  swift_bridgeObjectRelease();
  if ((v36 & 0x8000000000000000) != 0 || (v36 & 0x4000000000000000) != 0)
  {
    sub_10020B384(v36);
    swift_bridgeObjectRelease();
  }
  id v37 = objc_allocWithZone((Class)REMSmartListSectionsDataViewInvocationResult);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v40 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  Class v41 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v37 initWithAccountStorages:isa smartListStorages:v39 groupStorages:v40 smartListSectionStorages:v41];

  return v5;
}

uint64_t sub_10024485C()
{
  return sub_1003EA85C();
}

uint64_t sub_100244868(uint64_t a1)
{
  uint64_t result = sub_100247724(&qword_1009111F8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledByDayInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1002448C0(void (**a1)(uint64_t, char *, uint64_t)@<X1>, uint64_t a2@<X2>, void *a3@<X3>, void (**a4)(char *, uint64_t, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v53 = a2;
  id v54 = a4;
  uint64_t v46 = a3;
  uint64_t v49 = a5;
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.DatesModel();
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v51 = v6;
  __chkstk_darwin(v6);
  uint64_t v47 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v48 = (char *)&v37 - v9;
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v45 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v43 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  unint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v37 - v21);
  uint64_t v23 = (uint64_t)a1;
  uint64_t v24 = v55;
  sub_100244FE8(a1, v54);
  if (!v24)
  {
    uint64_t v38 = v15;
    uint64_t v39 = Configuration;
    uint64_t v55 = v25;
    Class v40 = v12;
    Class v41 = v19;
    uint64_t v42 = v17;
    sub_1002474E8();
    char v27 = v26;
    id v28 = [v52 fetchResultTokenToDiffAgainst];
    sub_10051F2BC(v28, v23, (uint64_t)v22);

    uint64_t v53 = 0;
    LODWORD(v52) = v27 & 1;
    id v29 = v38;
    REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter();
    uint64_t v30 = (uint64_t)v40;
    REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v29, v39);
    uint64_t v31 = v55;
    swift_bridgeObjectRetain();
    sub_10052A220(v30, v22, v23, v46, 0, v31);
    uint64_t v32 = v22;
    id v37 = v22;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v30, v45);
    id v33 = v48;
    REMRemindersListDataView.DatesModel.init(groups:completedRemindersCount:prefetchedReminders:prefetchedDueReminders:)();
    uint64_t v35 = v50;
    uint64_t v34 = v51;
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v33, v51);
    uint64_t v36 = v42;
    (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v42 + 16))(v41, v32, v16);
    sub_100247724(&qword_100911200, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.DatesModel);
    sub_100247724(&qword_100911208, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.DatesModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
    (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v36 + 8))(v37, v16);
  }
}

uint64_t sub_100244D9C()
{
  uint64_t v0 = _s9UtilitiesO12SortingStyleOMa();
  sub_10008E278(v0, qword_1009111C0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009111C0);
  uint64_t v2 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v3 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(v1, v2, v3);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100244E50(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t result = type metadata accessor for Date();
    uint64_t v4 = 0;
    uint64_t v5 = v2;
    while (!__OFSUB__(v5, v4))
    {
      unint64_t v6 = v4 + (v5 - v4) / 2;
      if (__OFADD__(v4, (v5 - v4) / 2)) {
        goto LABEL_16;
      }
      if (v6 >= v2) {
        goto LABEL_17;
      }
      sub_100247724((unint64_t *)&qword_100909F80, (void (*)(uint64_t))&type metadata accessor for Date);
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        return 0;
      }
      sub_100247724((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t result = dispatch thunk of static Comparable.< infix(_:_:)();
      if (result) {
        uint64_t v4 = v6 + 1;
      }
      else {
        uint64_t v5 = v4 + (v5 - v4) / 2;
      }
      if (v4 >= v5) {
        return v4;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

void sub_100244FE8(void (**a1)(uint64_t, char *, uint64_t), void (**a2)(char *, uint64_t, uint64_t))
{
  v250 = a1;
  uint64_t v3 = sub_100094134(&qword_10090FC70);
  __chkstk_darwin(v3 - 8);
  unint64_t v227 = (char *)&v226 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v5 - 8);
  char v270 = (char *)&v226 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v280 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v257 = *(void *)(v280 - 8);
  __chkstk_darwin(v280);
  v269 = (char *)&v226 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v268 = (char *)&v226 - v9;
  uint64_t v275 = type metadata accessor for REMRemindersListDataView.DatesModel.Group();
  uint64_t v245 = *(void *)(v275 - 8);
  __chkstk_darwin(v275);
  uint64_t v260 = (char *)&v226 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v229 = (char *)&v226 - v12;
  __chkstk_darwin(v13);
  id v230 = (char *)&v226 - v14;
  __chkstk_darwin(v15);
  v252 = (char *)&v226 - v16;
  __chkstk_darwin(v17);
  uint64_t v251 = (char *)&v226 - v18;
  uint64_t v19 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v19 - 8);
  uint64_t v239 = (char *)&v226 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v267 = (uint64_t)&v226 - v22;
  __chkstk_darwin(v23);
  uint64_t v281 = (uint64_t)&v226 - v24;
  __chkstk_darwin(v25);
  v286 = (id *)((char *)&v226 - v26);
  __chkstk_darwin(v27);
  v282 = (char *)&v226 - v28;
  __chkstk_darwin(v29);
  v278 = (char *)&v226 - v30;
  uint64_t v237 = type metadata accessor for REMRemindersListDataView.ScheduledTodayGroup();
  uint64_t v236 = *(void *)(v237 - 8);
  __chkstk_darwin(v237);
  uint64_t v235 = (char *)&v226 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v277 = type metadata accessor for Date();
  uint64_t v264 = *(void *)(v277 - 8);
  __chkstk_darwin(v277);
  uint64_t v259 = (char *)&v226 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v231 = (uint64_t)&v226 - v34;
  __chkstk_darwin(v35);
  uint64_t v228 = (char *)&v226 - v36;
  __chkstk_darwin(v37);
  v261 = (char *)&v226 - v38;
  __chkstk_darwin(v39);
  char v271 = (char *)&v226 - v40;
  __chkstk_darwin(v41);
  v265 = (char *)&v226 - v42;
  __chkstk_darwin(v43);
  v253 = (char *)&v226 - v44;
  uint64_t v234 = type metadata accessor for Calendar.Identifier();
  uint64_t v233 = *(void *)(v234 - 8);
  __chkstk_darwin(v234);
  uint64_t v232 = (char *)&v226 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v288 = type metadata accessor for Calendar();
  uint64_t v238 = *(void *)(v288 - 8);
  __chkstk_darwin(v288);
  v284 = (char *)&v226 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v276 = (char *)&v226 - v48;
  v256 = (void (**)(void, void, void))type metadata accessor for REMRemindersListDataView.ShowCompleted();
  unint64_t v258 = (unint64_t)*(v256 - 1);
  __chkstk_darwin(v256);
  uint64_t v244 = (void (**)(char *, char *, uint64_t))((char *)&v226 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v50);
  v248 = (char *)&v226 - v51;
  uint64_t v247 = _s10PredicatesOMa(0);
  __chkstk_darwin(v247);
  uint64_t v246 = (char *)&v226 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  unint64_t v266 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  long long v242 = (char *)&v226 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  uint64_t v243 = (char *)&v226 - v55;
  __chkstk_darwin(v56);
  unint64_t v263 = (unint64_t)&v226 - v57;
  __chkstk_darwin(v58);
  v262 = (char *)&v226 - v59;
  v273 = (void *)type metadata accessor for REMRemindersListDataView.ScheduledByDayInvocation.Parameters();
  uint64_t v285 = *(v273 - 1);
  __chkstk_darwin(v273);
  v283 = (char *)&v226 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v62 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  unint64_t v64 = (char *)&v226 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  uint64_t v67 = (char *)&v226 - v66;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v69 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v241 = (char *)&v226 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v71);
  uint64_t v240 = (char *)&v226 - v72;
  __chkstk_darwin(v73);
  os_log_type_t v75 = (char *)&v226 - v74;
  REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
  uint64_t v76 = *(void (**)(void, void))(v69 + 8);
  v287 = (void (*)(void, void, void, void))Configuration;
  v279 = (char *)(v69 + 8);
  v289 = v76;
  v76(v75, Configuration);
  v254 = *(void (**)(char *, void, uint64_t))(v62 + 104);
  v254(v64, enum case for REMRemindersListDataView.SortingStyle.default(_:), v61);
  char v77 = static REMRemindersListDataView.SortingStyle.== infix(_:_:)();
  char v78 = *(void (**)(char *, uint64_t))(v62 + 8);
  v78(v64, v61);
  v255 = (uint64_t (**)(void, void, void))v61;
  v78(v67, v61);
  BOOL v79 = *(void (**)(void))(v285 + 16);
  id v80 = v283;
  id v81 = a2;
  uint64_t v82 = v273;
  char v272 = v81;
  v79();
  if (v77)
  {
    (*(void (**)(char *, void *))(v285 + 8))(v80, v82);
    uint64_t v83 = v287;
    unint64_t v84 = v289;
  }
  else
  {
    REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter();
    REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
    v289(v75, v287);
    uint64_t v85 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
    uint64_t v86 = type metadata accessor for REMRemindersListDataView.SortingDirection();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v86 - 8) + 104))(v64, v85, v86);
    uint64_t v87 = v255;
    v254(v64, enum case for REMRemindersListDataView.SortingStyle.displayDate(_:), (uint64_t)v255);
    LOBYTE(v85) = static REMRemindersListDataView.SortingStyle.== infix(_:_:)();
    v78(v64, (uint64_t)v87);
    v78(v67, (uint64_t)v87);
    (*(void (**)(char *, void *))(v285 + 8))(v283, v82);
    uint64_t v83 = v287;
    unint64_t v84 = v289;
    if ((v85 & 1) == 0)
    {
LABEL_12:
      uint64_t v113 = self;
      NSString v114 = String._bridgeToObjectiveC()();
      [v113 internalErrorWithDebugDescription:v114];

      swift_willThrow();
      return;
    }
  }
  REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter();
  os_log_type_t v88 = v262;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
  v84(v75, v83);
  unint64_t v89 = v266;
  uint64_t v90 = *(void (**)(unint64_t))(v266 + 104);
  unint64_t v91 = v263;
  LODWORD(v285) = enum case for REMRemindersListDataView.FetchSubtasks.on(_:);
  uint64_t v92 = Subtasks;
  v90(v263);
  sub_100247724(&qword_100911210, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FetchSubtasks);
  char v93 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v94 = *(char **)(v89 + 8);
  ((void (*)(unint64_t, uint64_t))v94)(v91, v92);
  ((void (*)(char *, uint64_t))v94)(v88, v92);
  uint64_t v95 = (uint64_t)v289;
  if (v93) {
    goto LABEL_12;
  }
  REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter();
  uint64_t v96 = (uint64_t)v246;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  ((void (*)(char *, void (*)(void, void, void, void)))v95)(v75, v287);
  swift_storeEnumTagMultiPayload();
  uint64_t v97 = sub_10038F1F0();
  sub_1000C6DAC(v96);
  if (qword_100907790 != -1) {
    goto LABEL_88;
  }
  while (1)
  {
    v283 = v94;
    uint64_t v98 = (char *)qword_100942318;
    uint64_t v99 = v277;
    if (qword_100907798 != -1) {
      swift_once();
    }
    v291 = v98;
    swift_bridgeObjectRetain();
    unint64_t v100 = swift_bridgeObjectRetain();
    sub_1002014E4(v100);
    uint64_t v246 = (char *)v97;
    double v101 = (void *)sub_1003BC8C4((unint64_t)v291, 0, 0, v97);
    swift_bridgeObjectRelease();
    if (qword_1009071B0 != -1) {
      swift_once();
    }
    uint64_t v102 = _s9UtilitiesO12SortingStyleOMa();
    uint64_t v103 = sub_10008E2DC(v102, (uint64_t)qword_1009111C0);
    unint64_t v104 = v258;
    uint64_t v105 = (uint64_t)v248;
    uint64_t v106 = v256;
    (*(void (**)(char *, void, void))(v258 + 104))(v248, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v256);
    sub_100527148(v103, v105, 0);
    uint64_t v109 = *(void **)(v104 + 8);
    unint64_t v107 = v104 + 8;
    unint64_t v108 = v109;
    ((void (*)(uint64_t, void (**)(void, void, void)))v109)(v105, v106);
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v101 setSortDescriptors:isa];

    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    unint64_t v111 = v249;
    uint64_t v112 = NSManagedObjectContext.fetch<A>(_:)();
    uint64_t v247 = (uint64_t)v111;
    if (v111)
    {

      return;
    }
    v273 = v108;
    unint64_t v258 = v107;
    unint64_t v263 = v112;
    id v226 = v101;
    uint64_t v115 = v240;
    REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter();
    v116 = v243;
    REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
    uint64_t v117 = v115;
    id v118 = v287;
    ((void (*)(char *, void (*)(void, void, void, void)))v95)(v117, v287);
    unint64_t v119 = (void (*)(void, void))v95;
    uint64_t v120 = v241;
    REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter();
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
    v119(v120, v118);
    unint64_t v121 = v266;
    unint64_t v122 = v242;
    uint64_t v123 = Subtasks;
    (*(void (**)(char *, char *, uint64_t))(v266 + 16))(v242, v116, Subtasks);
    int v124 = (*(uint64_t (**)(char *, uint64_t))(v121 + 88))(v122, v123);
    if (v124 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:) || v124 == v285)
    {
      unint64_t v266 = sub_1002EDB5C((uint64_t)_swiftEmptyArrayStorage);
      unint64_t v125 = v263;
      BOOL v126 = v283;
      ((void (*)(void (**)(char *, char *, uint64_t), void (**)(void, void, void)))v273)(v244, v256);
    }
    else
    {
      unint64_t v125 = v263;
      BOOL v126 = v283;
      v127 = (void (*)(void, void))v273;
      if (v124 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:)) {
        goto LABEL_92;
      }
      long long v128 = v244;
      uint64_t v129 = v247;
      sub_1005242F8(v263, v244, v250, 0);
      uint64_t v247 = v129;
      id v131 = v246;
      if (v129)
      {

        v127(v128, v256);
        ((void (*)(char *, uint64_t))v126)(v243, Subtasks);
        swift_bridgeObjectRelease();
        return;
      }
      unint64_t v266 = v130;
      v127(v128, v256);
    }
    ((void (*)(char *, uint64_t))v126)(v243, Subtasks);
    v291 = (char *)_swiftEmptyArrayStorage;
    uint64_t v132 = v233;
    int v133 = v232;
    uint64_t v134 = v234;
    (*(void (**)(char *, void, uint64_t))(v233 + 104))(v232, enum case for Calendar.Identifier.gregorian(_:), v234);
    Calendar.init(identifier:)();
    (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v134);
    char v135 = v235;
    REMRemindersListDataView.ScheduledByDayInvocation.Parameters.includeTodayGroup.getter();
    uint64_t v136 = v236;
    uint64_t v137 = v237;
    int v138 = (*(uint64_t (**)(char *, uint64_t))(v236 + 88))(v135, v237);
    LODWORD(v234) = v138;
    LODWORD(v233) = enum case for REMRemindersListDataView.ScheduledTodayGroup.always(_:);
    if (v138 == enum case for REMRemindersListDataView.ScheduledTodayGroup.always(_:))
    {
      (*(void (**)(char *, uint64_t))(v136 + 96))(v135, v137);
      uint64_t v139 = v264;
      uint64_t v97 = (uint64_t)v265;
      (*(void (**)(char *, char *, uint64_t))(v264 + 32))(v265, v135, v99);
      unint64_t v94 = v278;
      uint64_t v140 = (uint64_t)v286;
      v141 = v284;
    }
    else
    {
      unint64_t v94 = v278;
      uint64_t v97 = (uint64_t)v265;
      uint64_t v139 = v264;
      uint64_t v140 = (uint64_t)v286;
      v141 = v284;
      if (v138 != enum case for REMRemindersListDataView.ScheduledTodayGroup.asNeeded(_:)) {
        goto LABEL_93;
      }
      Date.init()();
    }
    Calendar.startOfDay(for:)();
    uint64_t v142 = *(char **)(v139 + 8);
    uint64_t v285 = v139 + 8;
    v283 = v142;
    ((void (*)(uint64_t, uint64_t))v142)(v97, v99);
    uint64_t v143 = *(void (**)(void, void, void, void))(v139 + 56);
    v289 = (void (*)(void, void))(v139 + 56);
    v287 = v143;
    v143(v94, 1, 1, v99);
    if (v125 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v144 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v144 = *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v145 = (uint64_t)v239;
    if (!v144) {
      break;
    }
    unint64_t v258 = v125 & 0xC000000000000001;
    v256 = (void (**)(void, void, void))(v238 + 16);
    v255 = (uint64_t (**)(void, void, void))(v139 + 48);
    char v272 = (void (**)(char *, uint64_t, uint64_t))(v139 + 32);
    v262 = (char *)(v238 + 8);
    v250 = (void (**)(uint64_t, char *, uint64_t))(v139 + 16);
    long long v242 = (char *)(v245 + 16);
    v241 = (char *)(v245 + 32);
    uint64_t v240 = (char *)(v245 + 8);
    v249 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v257 + 48);
    v248 = (char *)(v257 + 32);
    uint64_t v244 = (void (**)(char *, char *, uint64_t))(v257 + 16);
    uint64_t v243 = (char *)(v257 + 8);
    uint64_t v95 = 4;
    v273 = _swiftEmptyArrayStorage;
    v254 = (void (*)(char *, void, uint64_t))v144;
    while (1)
    {
      unint64_t v146 = v258
           ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : (char *)*(id *)(v125 + 8 * v95);
      unint64_t v147 = v146;
      if (__OFADD__(v95 - 4, 1)) {
        break;
      }
      id v148 = [v146 displayDateDate];
      if (v148)
      {
        char v149 = v148;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v150 = 0;
      }
      else
      {
        uint64_t v150 = 1;
      }
      v279 = v147;
      uint64_t v151 = 1;
      v287(v140, v150, 1, v99);
      (*v256)(v141, v276, v288);
      uint64_t v152 = v281;
      sub_1000CAA4C(v140, v281);
      uint64_t v153 = *v255;
      if ((*v255)(v152, 1, v99) != 1)
      {
        uint64_t v154 = v265;
        (*v272)(v265, v281, v99);
        Calendar.startOfDay(for:)();
        ((void (*)(char *, uint64_t))v283)(v154, v99);
        uint64_t v151 = 0;
      }
      uint64_t v155 = (uint64_t)v282;
      v287(v282, v151, 1, v99);
      sub_1000966BC((uint64_t)v286, (uint64_t *)&unk_100909A40);
      uint64_t v156 = *(void (**)(char *, uint64_t))v262;
      (*(void (**)(char *, uint64_t))v262)(v141, v288);
      int v157 = v153(v155, 1, v99);
      unint64_t v158 = v271;
      if (v157 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000966BC(v155, (uint64_t *)&unk_100909A40);
        v194 = self;
        NSString v195 = String._bridgeToObjectiveC()();
        [v194 internalErrorWithDebugDescription:v195];

        swift_willThrow();
        sub_1000966BC((uint64_t)v278, (uint64_t *)&unk_100909A40);
        ((void (*)(char *, uint64_t))v283)(v253, v99);
        v156(v276, v288);
        return;
      }
      uint64_t Subtasks = v95 - 3;
      unint64_t v159 = *v272;
      (*v272)(v271, v155, v99);
      uint64_t v160 = (uint64_t)v278;
      uint64_t v161 = v267;
      sub_1000CAA4C((uint64_t)v278, v267);
      if (v153(v161, 1, v99) == 1)
      {
        sub_1000966BC(v160, (uint64_t *)&unk_100909A40);
        sub_1000966BC(v161, (uint64_t *)&unk_100909A40);
        (*v250)(v160, v158, v99);
        v287(v160, 0, 1, v99);
        uint64_t v162 = v158;
        uint64_t v97 = (uint64_t)v270;
        unint64_t v94 = v279;
      }
      else
      {
        char v163 = v261;
        v159(v261, v161, v99);
        sub_100247724((unint64_t *)&qword_100909F80, (void (*)(uint64_t))&type metadata accessor for Date);
        char v164 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v162 = v158;
        unint64_t v94 = v279;
        if (v164)
        {
          ((void (*)(char *, uint64_t))v283)(v163, v99);
          uint64_t v97 = (uint64_t)v270;
        }
        else
        {
          uint64_t v165 = v99;
          id v166 = *v250;
          (*v250)((uint64_t)v265, v163, v165);
          static Date.== infix(_:_:)();
          v167 = v251;
          REMRemindersListDataView.DatesModel.Group.init(date:reminders:isToday:)();
          (*(void (**)(char *, char *, uint64_t))v242)(v252, v167, v275);
          unint64_t v168 = (unint64_t)v291;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v97 = (uint64_t)v270;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            unint64_t v168 = sub_100309638(0, *(void *)(v168 + 16) + 1, 1, v168);
          }
          unint64_t v171 = *(void *)(v168 + 16);
          unint64_t v170 = *(void *)(v168 + 24);
          if (v171 >= v170 >> 1) {
            unint64_t v168 = sub_100309638(v170 > 1, v171 + 1, 1, v168);
          }
          *(void *)(v168 + 16) = v171 + 1;
          uint64_t v172 = v245;
          unint64_t v173 = v168
               + ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80))
               + *(void *)(v172 + 72) * v171;
          uint64_t v174 = v275;
          (*(void (**)(unint64_t, char *, uint64_t))(v245 + 32))(v173, v252, v275);
          v291 = (char *)v168;
          (*(void (**)(char *, uint64_t))(v172 + 8))(v251, v174);
          uint64_t v175 = v277;
          ((void (*)(char *, uint64_t))v283)(v261, v277);
          uint64_t v176 = (uint64_t)v278;
          sub_1000966BC((uint64_t)v278, (uint64_t *)&unk_100909A40);
          v166(v176, v162, v175);
          uint64_t v99 = v175;
          v287(v176, 0, 1, v175);
          v273 = _swiftEmptyArrayStorage;
        }
      }
      id v177 = [v94 objectID];
      id v178 = v177;
      unint64_t v179 = v266;
      v141 = v284;
      if (*(void *)(v266 + 16) && (unint64_t v180 = sub_100306F98((uint64_t)v177), (v181 & 1) != 0)) {
        uint64_t v182 = *(void *)(*(void *)(v179 + 56) + 8 * v180);
      }
      else {
        uint64_t v182 = 0;
      }

      uint64_t v183 = v94;
      sub_100521784(v183, v182, 0, v97);
      uint64_t v184 = v280;
      if ((*v249)(v97, 1, v280) == 1)
      {
        ((void (*)(char *, uint64_t))v283)(v162, v99);

        sub_1000966BC(v97, &qword_10090FD78);
      }
      else
      {
        os_log_type_t v185 = *(void (**)(char *, char *, uint64_t))v248;
        BOOL v186 = v268;
        (*(void (**)(char *, uint64_t, uint64_t))v248)(v268, v97, v184);
        (*v244)(v269, v186, v184);
        unint64_t v187 = (unint64_t)v273;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v187 = sub_1003091E4(0, *(void *)(v187 + 16) + 1, 1, v187);
        }
        unint64_t v189 = *(void *)(v187 + 16);
        unint64_t v188 = *(void *)(v187 + 24);
        if (v189 >= v188 >> 1) {
          unint64_t v187 = sub_1003091E4(v188 > 1, v189 + 1, 1, v187);
        }
        *(void *)(v187 + 16) = v189 + 1;
        unint64_t v190 = (void *)v187;
        uint64_t v97 = v257;
        unint64_t v191 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
        v273 = v190;
        uint64_t v192 = v280;
        v185((char *)v190 + v191 + *(void *)(v257 + 72) * v189, v269, v280);

        (*(void (**)(char *, uint64_t))(v97 + 8))(v268, v192);
        ((void (*)(char *, uint64_t))v283)(v162, v99);
        v141 = v284;
      }
      ++v95;
      uint64_t v140 = (uint64_t)v286;
      unint64_t v125 = v263;
      if ((void (*)(char *, void, uint64_t))Subtasks == v254)
      {
        swift_bridgeObjectRelease();
        uint64_t v97 = (uint64_t)v265;
        uint64_t v139 = v264;
        uint64_t v145 = (uint64_t)v239;
        id v193 = v273;
        unint64_t v94 = v278;
        goto LABEL_62;
      }
    }
    __break(1u);
LABEL_88:
    swift_once();
  }
  swift_bridgeObjectRelease();
  id v193 = _swiftEmptyArrayStorage;
LABEL_62:
  swift_bridgeObjectRelease();
  v273 = v193;
  if (v193[2])
  {
    sub_1000CAA4C((uint64_t)v94, v145);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48))(v145, 1, v99) == 1)
    {
      sub_1000966BC(v145, (uint64_t *)&unk_100909A40);
    }
    else
    {
      unint64_t v196 = v228;
      (*(void (**)(char *, uint64_t, uint64_t))(v139 + 32))(v228, v145, v99);
      (*(void (**)(uint64_t, char *, uint64_t))(v139 + 16))(v97, v196, v99);
      swift_bridgeObjectRetain();
      static Date.== infix(_:_:)();
      uint64_t v197 = v230;
      REMRemindersListDataView.DatesModel.Group.init(date:reminders:isToday:)();
      (*(void (**)(char *, char *, uint64_t))(v245 + 16))(v229, v197, v275);
      unint64_t v198 = (unint64_t)v291;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v198 = sub_100309638(0, *(void *)(v198 + 16) + 1, 1, v198);
      }
      unint64_t v200 = *(void *)(v198 + 16);
      unint64_t v199 = *(void *)(v198 + 24);
      if (v200 >= v199 >> 1) {
        unint64_t v198 = sub_100309638(v199 > 1, v200 + 1, 1, v198);
      }
      *(void *)(v198 + 16) = v200 + 1;
      uint64_t v201 = v245;
      uint64_t v202 = v275;
      (*(void (**)(unint64_t, char *, uint64_t))(v245 + 32))(v198+ ((*(unsigned __int8 *)(v201 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v201 + 80))+ *(void *)(v201 + 72) * v200, v229, v275);
      v291 = (char *)v198;
      (*(void (**)(char *, uint64_t))(v201 + 8))(v230, v202);
      ((void (*)(char *, uint64_t))v283)(v228, v99);
      unint64_t v94 = v278;
    }
  }
  if (v234 != v233)
  {

    sub_1000966BC((uint64_t)v94, (uint64_t *)&unk_100909A40);
    ((void (*)(char *, uint64_t))v283)(v253, v99);
    (*(void (**)(char *, uint64_t))(v238 + 8))(v276, v288);
    swift_bridgeObjectRelease();
    return;
  }
  v203 = *(id **)(v139 + 16);
  ((void (*)(uint64_t, char *, uint64_t))v203)(v231, v253, v99);
  v204 = v291;
  int64_t v205 = *((void *)v291 + 2);
  if (v205)
  {
    v286 = v203;
    v287 = (void (*)(void, void, void, void))(v139 + 16);
    v290 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1001DE448(0, v205, 0);
    v289 = *(void (**)(void, void))(v245 + 16);
    uint64_t v206 = *(unsigned __int8 *)(v245 + 80);
    v284 = v204;
    unint64_t v207 = &v204[(v206 + 32) & ~v206];
    uint64_t v208 = *(void *)(v245 + 72);
    v209 = (void (**)(char *, uint64_t))(v245 + 8);
    do
    {
      v210 = v260;
      uint64_t v211 = v275;
      ((void (*)(char *, char *, uint64_t))v289)(v260, v207, v275);
      REMRemindersListDataView.DatesModel.Group.date.getter();
      (*v209)(v210, v211);
      id v212 = v290;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE448(0, v212[2] + 1, 1);
        id v212 = v290;
      }
      unint64_t v214 = v212[2];
      unint64_t v213 = v212[3];
      os_log_type_t v215 = v259;
      if (v214 >= v213 >> 1)
      {
        sub_1001DE448(v213 > 1, v214 + 1, 1);
        os_log_type_t v215 = v259;
        id v212 = v290;
      }
      v212[2] = v214 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v264 + 32))((unint64_t)v212+ ((*(unsigned __int8 *)(v264 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v264 + 80))+ *(void *)(v264 + 72) * v214, v215, v277);
      v290 = v212;
      v207 += v208;
      --v205;
    }
    while (v205);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v99 = v277;
    uint64_t v97 = (uint64_t)v265;
    v203 = v286;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v212 = _swiftEmptyArrayStorage;
  }
  uint64_t v216 = v231;
  uint64_t v217 = sub_100244E50(v231, (uint64_t)v212);
  char v219 = v218;
  swift_bridgeObjectRelease();
  uint64_t v220 = v216;
  uint64_t v221 = v283;
  ((void (*)(uint64_t, uint64_t))v283)(v220, v99);
  if (v219)
  {

    sub_1000966BC((uint64_t)v278, (uint64_t *)&unk_100909A40);
    ((void (*)(char *, uint64_t))v221)(v253, v99);
    goto LABEL_86;
  }
  ((void (*)(uint64_t, char *, uint64_t))v203)(v97, v253, v99);
  REMRemindersListDataView.DatesModel.Group.init(date:reminders:isToday:)();
  if (*((void *)v291 + 2) < v217)
  {
    __break(1u);
  }
  else if ((v217 & 0x8000000000000000) == 0)
  {
    uint64_t v222 = v245;
    uint64_t v223 = (uint64_t)v227;
    uint64_t v224 = v260;
    uint64_t v225 = v275;
    (*(void (**)(char *, char *, uint64_t))(v245 + 16))(v227, v260, v275);
    sub_1001EC99C(v217, v217, v223);

    (*(void (**)(char *, uint64_t))(v222 + 8))(v224, v225);
    sub_1000966BC((uint64_t)v278, (uint64_t *)&unk_100909A40);
    ((void (*)(char *, uint64_t))v283)(v253, v99);
LABEL_86:
    (*(void (**)(char *, uint64_t))(v238 + 8))(v276, v288);
    return;
  }
  __break(1u);
LABEL_92:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
LABEL_93:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

uint64_t sub_1002474E8()
{
  uint64_t v0 = _s10PredicatesOMa(0);
  __chkstk_darwin(v0);
  unint64_t v2 = (char *)v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v4 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter();
  char v7 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, Configuration);
  if ((v7 & 1) == 0) {
    return 0;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = (void *)sub_10038F1F0();
  sub_1000C6DAC((uint64_t)v2);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v9 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v10 = [(id)swift_getObjCClassFromMetadata() entity];
  [v9 setEntity:v10];

  [v9 setAffectedStores:0];
  [v9 setPredicate:v8];
  uint64_t v11 = NSManagedObjectContext.count<A>(for:)();

  return v11;
}

uint64_t sub_100247724(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10024776C(char a1)
{
  uint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
      return 0xD00000000000001ELL;
    case 2:
      return 0xD000000000000012;
    case 3:
      return 0xD000000000000017;
    case 4:
      return 0x6F54636E79536164;
    case 5:
      return 0x654B687375506164;
    case 6:
      return 0xD000000000000017;
    case 7:
    case 17:
    case 20:
      return 0xD000000000000011;
    case 8:
      uint64_t v3 = 0x44656C746974;
      return v3 & 0xFFFFFFFFFFFFLL | 0x636F000000000000;
    case 9:
      return 0x6574656C706D6F63;
    case 10:
      return 0x6974656C706D6F63;
    case 11:
      return 0x797469726F697270;
    case 12:
      return 0x64656767616C66;
    case 13:
      return 0x6E6F697461657263;
    case 14:
      return 0xD000000000000010;
    case 15:
      return 0x6E65727275636572;
    case 16:
      return 0xD000000000000013;
    case 18:
      return 0x656E6F5A656D6974;
    case 19:
      return 0x7961446C6C61;
    case 21:
      uint64_t v3 = 0x447365746F6ELL;
      return v3 & 0xFFFFFFFFFFFFLL | 0x636F000000000000;
    case 22:
      uint64_t v4 = 0x686361747461;
      goto LABEL_25;
    case 23:
      return 0x736D72616C61;
    case 24:
      uint64_t v4 = 0x6E6769737361;
LABEL_25:
      uint64_t result = v4 & 0xFFFFFFFFFFFFLL | 0x656D000000000000;
      break;
    case 25:
      uint64_t result = 0x7367617468736168;
      break;
    case 26:
      uint64_t result = 0xD000000000000016;
      break;
    case 27:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 28:
      uint64_t result = 0xD000000000000024;
      break;
    case 29:
      uint64_t result = 0x48746361746E6F63;
      break;
    case 30:
      uint64_t result = 0x6C70736944736369;
      break;
    case 31:
      uint64_t result = 0x6C7255736369;
      break;
    case 32:
      uint64_t result = 0x646574726F706D69;
      break;
    case 33:
      uint64_t result = 0x6974634172657375;
      break;
    case 34:
      uint64_t result = 0xD000000000000013;
      break;
    case 35:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 36:
      uint64_t result = 0xD000000000000029;
      break;
    case 37:
      uint64_t result = 0xD000000000000026;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100247BF8(char *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (void *)type metadata accessor for UUID();
  uint64_t v35 = *(v8 - 1);
  __chkstk_darwin(v8);
  uint64_t v45 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v38 = (char *)v34 - v11;
  unint64_t v47 = (unint64_t)a1;
  if (a2 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_3:
      v34[1] = v4;
      uint64_t v39 = (void (**)(char *, id))(v35 + 8);
      unint64_t v40 = a2 & 0xC000000000000001;
      uint64_t v41 = v8;
      uint64_t v42 = (void (**)(uint64_t, char *, id))(v35 + 16);
      uint64_t v13 = 4;
      a1 = v38;
      uint64_t v36 = v12;
      unint64_t v37 = a2;
      while (1)
      {
        uint64_t v4 = (void *)(v13 - 4);
        if (v40) {
          id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v16 = *(id *)(a2 + 8 * v13);
        }
        uint64_t v17 = v16;
        uint64_t v18 = v13 - 3;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        id v19 = [v16 identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(void *)(*(void *)a3 + 16) && (sub_100306EC4((uint64_t)a1), (v20 & 1) != 0))
        {
          (*v39)(a1, v8);
        }
        else
        {
          uint64_t v43 = v17;
          uint64_t v44 = v13 - 3;
          a2 = v17;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v21 = *v42;
          uint64_t v22 = (uint64_t)v45;
          (*v42)((uint64_t)v45, a1, v8);
          uint64_t v8 = (id)a2;
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v46 = *(void **)a3;
          uint64_t v4 = v46;
          a1 = (char *)a3;
          *(void *)a3 = 0x8000000000000000;
          a3 = sub_100306EC4(v22);
          uint64_t v25 = v4[2];
          BOOL v26 = (v24 & 1) == 0;
          uint64_t v27 = v25 + v26;
          if (__OFADD__(v25, v26)) {
            goto LABEL_27;
          }
          a2 = v24;
          if (v4[3] >= v27)
          {
            uint64_t v18 = v44;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_10031AB04();
            }
          }
          else
          {
            sub_1003126B8(v27, isUniquelyReferenced_nonNull_native);
            unint64_t v28 = sub_100306EC4((uint64_t)v45);
            uint64_t v18 = v44;
            if ((a2 & 1) != (v29 & 1))
            {
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            a3 = v28;
          }
          uint64_t v17 = v43;
          uint64_t v4 = v46;
          if (a2)
          {
            uint64_t v14 = v46[7];

            *(void *)(v14 + 8 * a3) = v8;
          }
          else
          {
            v46[(a3 >> 6) + 8] |= 1 << a3;
            v21(v4[6] + *(void *)(v35 + 72) * a3, v45, v41);
            *(void *)(v4[7] + 8 * a3) = v8;
            uint64_t v30 = v4[2];
            BOOL v31 = __OFADD__(v30, 1);
            uint64_t v32 = v30 + 1;
            if (v31) {
              goto LABEL_28;
            }
            v4[2] = v32;
          }
          a3 = (unint64_t)a1;
          *(void *)a1 = v4;
          swift_bridgeObjectRelease();
          uint64_t v15 = *v39;
          uint64_t v8 = v41;
          (*v39)(v45, v41);
          a1 = v38;
          v15(v38, v8);
          uint64_t v12 = v36;
          a2 = v37;
        }

        ++v13;
        if (v18 == v12)
        {
          swift_bridgeObjectRelease();
          return v47;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return (uint64_t)a1;
}

uint64_t sub_100248010(uint64_t a1)
{
  return sub_100156B24(a1, qword_100911218, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_10024803C(uint64_t a1)
{
  return sub_100156B24(a1, qword_100911230, &qword_100907840, (uint64_t)qword_100942508);
}

unint64_t sub_100248068(char a1)
{
  unint64_t result = 0x49746E756F636361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x44497473696CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD00000000000001FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100248138(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_10024776C(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10024776C(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1002481C4()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10024776C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100248228()
{
  sub_10024776C(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10024827C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10024776C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002482DC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10024BBD4();
  *a1 = result;
  return result;
}

uint64_t sub_10024830C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10024776C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100248338@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10024BBD4();
  *a1 = result;
  return result;
}

uint64_t sub_100248360()
{
  return sub_10024776C(*v0);
}

void sub_100248368(void *a1@<X8>)
{
  *a1 = &off_1008B16B8;
}

uint64_t sub_100248378(unsigned __int8 *a1, char *a2)
{
  return sub_1002F24B0(*a1, *a2);
}

Swift::Int sub_100248384()
{
  return sub_10059517C();
}

uint64_t sub_10024838C()
{
  return sub_1002F48E8();
}

Swift::Int sub_100248394()
{
  return sub_1002F0D7C();
}

unint64_t sub_10024839C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10024BB88(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1002483CC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100248068(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1002483F8@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10024BB88(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100248420()
{
  return sub_100248068(*v0);
}

void sub_100248428(void *a1@<X8>)
{
  *a1 = &off_1008B6158;
}

void *sub_100248438()
{
  unint64_t result = sub_100248458();
  qword_1009420D0 = (uint64_t)result;
  return result;
}

void *sub_100248458()
{
  uint64_t v0 = 38;
  char v1 = &byte_1008B16D8;
  do
  {
    int v4 = *v1++;
    char v3 = v4;
    unint64_t v5 = 0xE900000000000065;
    uint64_t v6 = 0x7461447472617473;
    switch(v4)
    {
      case 16:
        break;
      case 17:
        unint64_t v5 = 0xE700000000000000;
        uint64_t v6 = 0x65746144657564;
        break;
      case 23:
        unint64_t v5 = 0xEC00000065676172;
        uint64_t v6 = 0x6F74536D72616C61;
        break;
      default:
        uint64_t v6 = sub_10024776C(v3);
        unint64_t v5 = v7;
        break;
    }
    uint64_t v8 = sub_10024776C(v3);
    uint64_t v10 = v9;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v13 = sub_1001806F8(v8, v10);
    uint64_t v14 = _swiftEmptyDictionarySingleton[2];
    BOOL v15 = (v12 & 1) == 0;
    uint64_t v16 = v14 + v15;
    if (__OFADD__(v14, v15)) {
      goto LABEL_45;
    }
    char v17 = v12;
    if (_swiftEmptyDictionarySingleton[3] >= v16)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v12) {
          goto LABEL_2;
        }
      }
      else
      {
        sub_100318A14();
        if (v17) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      sub_10030E654(v16, isUniquelyReferenced_nonNull_native);
      unint64_t v18 = sub_1001806F8(v8, v10);
      if ((v17 & 1) != (v19 & 1)) {
        goto LABEL_48;
      }
      unint64_t v13 = v18;
      if (v17)
      {
LABEL_2:
        char v2 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v13);
        swift_bridgeObjectRelease();
        *char v2 = v6;
        v2[1] = v5;
        goto LABEL_3;
      }
    }
    _swiftEmptyDictionarySingleton[(v13 >> 6) + 8] |= 1 << v13;
    char v20 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v13);
    *char v20 = v8;
    v20[1] = v10;
    uint64_t v21 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v13);
    *uint64_t v21 = v6;
    v21[1] = v5;
    uint64_t v22 = _swiftEmptyDictionarySingleton[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_47;
    }
    _swiftEmptyDictionarySingleton[2] = v24;
    swift_bridgeObjectRetain();
LABEL_3:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    --v0;
  }
  while (v0);
  unint64_t v25 = 0;
  do
  {
    if (v25 >= 6)
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x100248918);
    }
    unint64_t v27 = v25 + 1;
    unint64_t v28 = 0xE900000000000044;
    uint64_t v29 = 0x49746E756F636361;
    unint64_t v30 = 0x49746E756F636361;
    unint64_t v31 = 0xE900000000000044;
    switch(*((unsigned char *)&off_1008B1700 + v25 + 32))
    {
      case 1:
        unint64_t v31 = 0xE400000000000000;
        unint64_t v28 = 0xE600000000000000;
        uint64_t v29 = 0x44497473696CLL;
        unint64_t v30 = 1953720684;
        break;
      case 2:
        uint64_t v29 = 0xD000000000000010;
        unint64_t v28 = 0x80000001007C67E0;
        unint64_t v31 = 0xEE007265646E696DLL;
        unint64_t v30 = 0x6552746E65726170;
        break;
      case 3:
        uint64_t v32 = "parentReminderID";
        goto LABEL_28;
      case 4:
        uint64_t v32 = "subtaskIDsToUndelete";
LABEL_28:
        unint64_t v28 = (unint64_t)v32 | 0x8000000000000000;
        uint64_t v29 = 0xD000000000000014;
        unint64_t v30 = 0xD000000000000014;
        goto LABEL_30;
      case 5:
        uint64_t v29 = 0xD00000000000001FLL;
        unint64_t v28 = 0x80000001007C6840;
        unint64_t v30 = 0xD00000000000001FLL;
LABEL_30:
        unint64_t v31 = v28;
        break;
      default:
        break;
    }
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v35 = sub_1001806F8(v29, v28);
    uint64_t v36 = _swiftEmptyDictionarySingleton[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      goto LABEL_44;
    }
    char v39 = v34;
    if (_swiftEmptyDictionarySingleton[3] >= v38)
    {
      if (v33)
      {
        if (v34) {
          goto LABEL_20;
        }
      }
      else
      {
        sub_100318A14();
        if (v39) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      sub_10030E654(v38, v33);
      unint64_t v40 = sub_1001806F8(v29, v28);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_48;
      }
      unint64_t v35 = v40;
      if (v39)
      {
LABEL_20:
        BOOL v26 = (unint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v35);
        swift_bridgeObjectRelease();
        *BOOL v26 = v30;
        v26[1] = v31;
        goto LABEL_21;
      }
    }
    _swiftEmptyDictionarySingleton[(v35 >> 6) + 8] |= 1 << v35;
    uint64_t v42 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v35);
    *uint64_t v42 = v29;
    v42[1] = v28;
    uint64_t v43 = (unint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v35);
    *uint64_t v43 = v30;
    v43[1] = v31;
    uint64_t v44 = _swiftEmptyDictionarySingleton[2];
    BOOL v23 = __OFADD__(v44, 1);
    uint64_t v45 = v44 + 1;
    if (v23) {
      goto LABEL_46;
    }
    _swiftEmptyDictionarySingleton[2] = v45;
    swift_bridgeObjectRetain();
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v25 = v27;
  }
  while (v27 != 6);
  return _swiftEmptyDictionarySingleton;
}

void sub_1002489C8(void **a1@<X0>, void *a2@<X8>)
{
  sub_100363770(*a1);
  if (!v2) {
    *a2 = v4;
  }
}

uint64_t sub_1002489F8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_1000C0DE0(a1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100248A64(void **a1)
{
  char v1 = *a1;
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = [v2 domain];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0) {
      goto LABEL_18;
    }
  }
  if ([v2 code] != (id)-3005) {
    goto LABEL_18;
  }
  id v10 = [v2 userInfo];
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v11 + 16) || (unint64_t v14 = sub_1001806F8(v12, v13), (v15 & 1) == 0))
  {
    long long v65 = 0u;
    long long v66 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  sub_10009A1B0(*(void *)(v11 + 56) + 32 * v14, (uint64_t)&v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v66 + 1))
  {
LABEL_17:
    sub_1000966BC((uint64_t)&v65, &qword_100908190);
    goto LABEL_18;
  }
  if (swift_dynamicCast())
  {
    if (v63 == 0x65656E6769737361 && v64 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v27)
    {
LABEL_26:
      if (qword_1009071B8 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_100911218);
      id v29 = v1;
      char v17 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v17, v30))
      {

        return 1;
      }
      uint64_t v31 = swift_slowAlloc();
      *(void *)&long long v65 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315906;
      id v32 = [v29 remObjectID];
      if (v32)
      {
        char v33 = v32;
        id v34 = [v32 description];

        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;
      }
      else
      {
        unint64_t v37 = 0xE300000000000000;
        uint64_t v35 = 7104878;
      }
      sub_1000C51B8(v35, v37, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      id v38 = [v29 originator];
      os_log_type_t v62 = v30;
      if (v38)
      {
        char v39 = v38;
        id v40 = [v38 remObjectID];
        if (v40)
        {
          char v41 = v40;
          id v42 = [v40 description];

          uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v45 = v44;

LABEL_39:
          sub_1000C51B8(v43, v45, (uint64_t *)&v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v31 + 22) = 2080;
          id v46 = [v29 assignee];
          if (v46)
          {
            unint64_t v47 = v46;
            id v48 = [v46 remObjectID];
            if (v48)
            {
              uint64_t v49 = v48;
              id v50 = [v48 description];

              uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v53 = v52;
            }
            else
            {

              unint64_t v53 = 0xE300000000000000;
              uint64_t v51 = 7104878;
            }
          }
          else
          {
            unint64_t v53 = 0xE300000000000000;
            uint64_t v51 = 7104878;
          }
          sub_1000C51B8(v51, v53, (uint64_t *)&v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v31 + 32) = 2080;
          id v54 = [v29 reminder];
          if (v54)
          {
            uint64_t v55 = v54;
            id v56 = [v54 remObjectID];
            if (v56)
            {
              uint64_t v57 = v56;
              id v58 = [v56 description];

              uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v61 = v60;
            }
            else
            {

              unint64_t v61 = 0xE300000000000000;
              uint64_t v59 = 7104878;
            }
          }
          else
          {
            unint64_t v61 = 0xEF3E44497265646ELL;
            uint64_t v59 = 0x696D65725F6F6E3CLL;
          }
          sub_1000C51B8(v59, v61, (uint64_t *)&v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v17, v62, "Found a dangling assignment with nullified assignee, we will skip it from the reminder.assignments {objectID: %s, originator: %s, assignee: %s, reminderID: %s}", (uint8_t *)v31, 0x2Au);
          swift_arrayDestroy();
          goto LABEL_22;
        }
      }
      unint64_t v45 = 0xE300000000000000;
      uint64_t v43 = 7104878;
      goto LABEL_39;
    }
  }
LABEL_18:
  if (qword_1009071B8 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_10008E2DC(v16, (uint64_t)qword_100911218);
  swift_errorRetain();
  swift_errorRetain();
  char v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v17, v18))
  {

    swift_errorRelease();
    swift_errorRelease();

    return 1;
  }
  uint64_t v19 = swift_slowAlloc();
  *(void *)&long long v65 = swift_slowAlloc();
  *(_DWORD *)uint64_t v19 = 136315650;
  sub_1000963CC(0, &qword_100910230);
  sub_100094134(&qword_100909AB8);
  uint64_t v20 = String.init<A>(describing:)();
  sub_1000C51B8(v20, v21, (uint64_t *)&v65);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v19 + 12) = 2080;
  sub_1000963CC(0, (unint64_t *)&unk_10090FFF0);
  sub_100094134(&qword_100911550);
  uint64_t v22 = String.init<A>(describing:)();
  sub_1000C51B8(v22, v23, (uint64_t *)&v65);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v19 + 22) = 2080;
  swift_errorRetain();
  sub_100094134((uint64_t *)&unk_10090ABB0);
  uint64_t v24 = String.init<A>(describing:)();
  sub_1000C51B8(v24, v25, (uint64_t *)&v65);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error occured when mapping object from %s to %s {error: %s}", (uint8_t *)v19, 0x20u);
  swift_arrayDestroy();
LABEL_22:
  swift_slowDealloc();
  swift_slowDealloc();

  return 1;
}

void *sub_10024938C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  id v12 = [v6 createResolutionTokenMapIfNecessary];
  NSString v13 = String._bridgeToObjectiveC()();
  unsigned int v14 = [v12 mergeWithMap:a4 forKey:v13];

  if (a5)
  {
    if (v14)
    {
      if (a1)
      {
        id v15 = a1;
        id v16 = [v15 serializedData];
        a1 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();

        id v17 = [v15 attributedString];
        id v18 = [v17 string];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
      }
      return a1;
    }
LABEL_24:

    return 0;
  }
  id v19 = [v6 remObjectID];
  if (!v19)
  {
    if (qword_1009071B8 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10008E2DC(v23, (uint64_t)qword_100911218);
    id v24 = v6;
    swift_bridgeObjectRetain_n();
    id v25 = v24;
    BOOL v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      log = v26;
      id v29 = (void *)swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412546;
      id v30 = [v25 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v29 = v30;

      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v38[0] = sub_1000C51B8(a2, a3, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, log, v27, "Can't merge documents for reminder because remObjectID is nil {reminder.objectID: %@, key: %s}", (uint8_t *)v28, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }

    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  uint64_t v20 = v19;
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v6 valueForKey:v21];

  if (v22)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v38, 0, sizeof(v38));
  }
  sub_100096408((uint64_t)v38, (uint64_t)v39, &qword_100908190);
  if (v39[3])
  {
    int v31 = swift_dynamicCast();
    if (v31) {
      uint64_t v32 = v36;
    }
    else {
      uint64_t v32 = 0;
    }
    if (v31) {
      unint64_t v33 = v37;
    }
    else {
      unint64_t v33 = 0xF000000000000000;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)v39, &qword_100908190);
    uint64_t v32 = 0;
    unint64_t v33 = 0xF000000000000000;
  }
  a1 = (void *)sub_10025007C(a1, v32, v33, a2, a3, v20);
  sub_100097F20(v32, v33);

  return a1;
}

uint64_t sub_100249840(_OWORD *a1)
{
  if (qword_100907A78 != -1) {
    swift_once();
  }
  return sub_100627818(a1);
}

void *sub_1002498B0()
{
  uint64_t v2 = (char *)[v0 cachedDeserializedDueDateDeltaAlerts];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects];
    swift_bridgeObjectRetain();
  }
  else
  {
    id v6 = [v0 dueDateDeltaAlertsData];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      uint64_t v4 = type metadata accessor for RDDueDateDeltaAlerts();
      sub_10024D4EC(&qword_10090C4C8, (void (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlerts);
      static REMJSONRepresentable.fromJSONData(_:)();
      if (!v1)
      {
        uint64_t v4 = *(void *)&v12[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects];
        swift_bridgeObjectRetain();
      }
      sub_100097F34(v8, v10);
    }
    else
    {
      return _swiftEmptyArrayStorage;
    }
  }
  return (void *)v4;
}

id sub_100249A1C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 reminderID];
  *a2 = result;
  return result;
}

uint64_t sub_100249A60(void **a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v6 = __chkstk_darwin(v4).n128_u64[0];
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *a1;
  id v10 = [v9 dueDateDelta:v6];
  unsigned __int8 v11 = [v10 isEmpty];

  if (v11)
  {
    if (qword_1009071B8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_100911218);
    id v13 = v9;
    unsigned int v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    int v16 = v15;
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v17 = swift_slowAlloc();
      id v29 = (void *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v32 = v30;
      *(_DWORD *)uint64_t v17 = 136315394;
      v27[1] = v17 + 4;
      id v18 = [v13 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10024D4EC((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      int v28 = v16;
      unint64_t v21 = v20;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      uint64_t v31 = sub_1000C51B8(v19, v21, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2112;
      id v22 = [v13 reminderID];
      uint64_t v31 = (uint64_t)v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v29 = v22;

      _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v28, "REMReminderStorageCDIngestor:applyDueDateDeltaAlertChanges: Found existing invalid empty early alert %s, dropping it from reminder %@", (uint8_t *)v17, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    char v25 = 0;
  }
  else
  {
    id v23 = [v9 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    char v24 = sub_1001CBD6C((uint64_t)v8, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    char v25 = v24 ^ 1;
  }
  return v25 & 1;
}

void sub_100249E5C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  double v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  os_log_type_t v15 = *(void (**)(char *, uint64_t))(v11 + 8);
  v15(v13, v10);
  [v2 setIdentifier:isa];

  id v16 = [a1 identifier];
  if (v16)
  {
    uint64_t v17 = v16;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, v18, 1, v10);
  sub_100096408((uint64_t)v6, (uint64_t)v9, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
    NSString v19 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v9, v10);
    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
    UUID.uuidString.getter();
    v15(v13, v10);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setReminderIdentifier:v19];

  id v20 = [a1 account];
  [v2 setAccount:v20];
}

void sub_10024A120(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  os_log_type_t v15 = (char *)&v20 - v14;
  sub_100249E5C(a2);
  id v16 = [a3 externalIdentifier];
  [a1 setOldExternalIdentifier:v16];

  id v17 = [a3 identifier];
  if (v17)
  {
    uint64_t v18 = v17;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  sub_100096408((uint64_t)v12, (uint64_t)v15, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6))
  {
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
    NSString v19 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, v6);
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [a1 setOldListIdentifier:v19];
}

Swift::Void __swiftcall REMCDReminder.willChange(_:to:)(REMCDList_optional *_, REMCDList_optional *to)
{
  id v3 = v2;
  if (_)
  {
    uint64_t v5 = _;
    id v6 = [v2 managedObjectContext];
    if (v6)
    {
      uint64_t v7 = v6;
      self;
      uint64_t v8 = swift_dynamicCastObjCClass();
      if (v8)
      {
        id v9 = (id)v8;
        if (to)
        {
          id v85 = (id)v8;
          if (qword_1009071B8 != -1) {
            swift_once();
          }
          uint64_t v10 = type metadata accessor for Logger();
          sub_10008E2DC(v10, (uint64_t)qword_100911218);
          uint64_t v11 = to;
          uint64_t v12 = v5;
          id v13 = v2;
          uint64_t v14 = v11;
          id v15 = v13;
          id v16 = v12;
          id v17 = v15;
          uint64_t v18 = Logger.logObject.getter();
          os_log_type_t v19 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v18, v19))
          {
            uint64_t v20 = swift_slowAlloc();
            uint64_t v88 = swift_slowAlloc();
            *(_DWORD *)uint64_t v20 = 136446978;
            id v21 = [v17 remObjectID];
            sub_100094134((uint64_t *)&unk_100914BC0);
            id v80 = v14;
            id v22 = v16;
            os_log_type_t type = v19;
            uint64_t v23 = Optional.descriptionOrNil.getter();
            unint64_t v25 = v24;

            sub_1000C51B8(v23, v25, &v88);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v20 + 12) = 2082;
            id v26 = [(REMCDList_optional *)v16 remObjectID];
            uint64_t v27 = Optional.descriptionOrNil.getter();
            unint64_t v29 = v28;

            sub_1000C51B8(v27, v29, &v88);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v20 + 22) = 2082;
            id v30 = [(REMCDList_optional *)v80 remObjectID];
            uint64_t v31 = Optional.descriptionOrNil.getter();
            unint64_t v33 = v32;

            sub_1000C51B8(v31, v33, &v88);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            id v16 = v22;
            swift_bridgeObjectRelease();
            *(_WORD *)(v20 + 32) = 1026;
            [v17 isDeleted];

            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v18, type, "Adding an auxiliary reminder change MOVE info {reminder: %{public}s, oldList: %{public}s, newList: %{public}s, isDeleted: %{BOOL,public}d}", (uint8_t *)v20, 0x26u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          uint64_t v36 = v16;
          id v67 = v17;
          id v68 = v67;
          uint64_t v69 = (unint64_t *)&unk_100911558;
          uint64_t v70 = v36;
          uint64_t v71 = v85;
        }
        else
        {
          if (qword_1009071B8 != -1) {
            swift_once();
          }
          uint64_t v48 = type metadata accessor for Logger();
          sub_10008E2DC(v48, (uint64_t)qword_100911218);
          id v49 = v2;
          id v50 = v5;
          id v51 = v49;
          unint64_t v52 = v50;
          id v53 = v51;
          id v54 = Logger.logObject.getter();
          os_log_type_t v55 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v54, v55))
          {
            log = v54;
            uint64_t v56 = swift_slowAlloc();
            uint64_t v88 = swift_slowAlloc();
            *(_DWORD *)uint64_t v56 = 136446978;
            id v87 = v9;
            id v57 = [v53 remObjectID];
            sub_100094134((uint64_t *)&unk_100914BC0);
            os_log_type_t typea = v55;
            uint64_t v58 = Optional.descriptionOrNil.getter();
            unint64_t v60 = v59;

            sub_1000C51B8(v58, v60, &v88);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v56 + 12) = 2082;
            id v61 = [(REMCDList_optional *)v52 remObjectID];
            uint64_t v62 = Optional.descriptionOrNil.getter();
            unint64_t v64 = v63;

            sub_1000C51B8(v62, v64, &v88);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v56 + 22) = 2080;
            uint64_t v65 = Optional.descriptionOrNil.getter();
            sub_1000C51B8(v65, v66, &v88);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v56 + 32) = 1026;
            [v53 isDeleted];

            id v9 = v87;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl((void *)&_mh_execute_header, log, typea, "Adding an auxiliary reminder change DELETE info {reminder: %{public}s, oldList: %{public}s, newList: %s, isDeleted: %{BOOL,public}d}", (uint8_t *)v56, 0x26u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          uint64_t v36 = v52;
          id v67 = v53;
          id v68 = v67;
          uint64_t v69 = (unint64_t *)&unk_100911560;
          uint64_t v70 = v36;
          uint64_t v71 = v9;
        }
        sub_10024B068(v67, v70, v71, v69);

LABEL_34:
        return;
      }
    }
    id v46 = self;
    NSString v47 = String._bridgeToObjectiveC()();
    [v46 internalErrorWithDebugDescription:v47];

    swift_willThrow();
    if (qword_1009071B8 != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    sub_10008E2DC(v72, (uint64_t)qword_100911218);
    id v73 = v3;
    swift_errorRetain();
    id v74 = v73;
    swift_errorRetain();
    os_log_type_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 136446466;
      swift_getErrorValue();
      uint64_t v78 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v78, v79, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v77 + 12) = 1026;
      [v74 isDeleted];

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Failed to add auxiliary reminder change info due to error: %{public}s, isDeleted: %{BOOL,public}d", (uint8_t *)v77, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_1009071B8 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_10008E2DC(v34, (uint64_t)qword_100911218);
    uint64_t v35 = to;
    id v86 = v2;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_type_t v84 = v37;
      uint64_t v38 = swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 67240962;
      [v86 isInserted];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 8) = 2082;
      id v39 = [v86 remObjectID];
      sub_100094134((uint64_t *)&unk_100914BC0);
      uint64_t v40 = Optional.descriptionOrNil.getter();
      unint64_t v42 = v41;

      sub_1000C51B8(v40, v42, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 18) = 2082;
      if (to) {
        to = (REMCDList_optional *)[(REMCDList_optional *)v35 remObjectID];
      }
      uint64_t v43 = Optional.descriptionOrNil.getter();
      unint64_t v45 = v44;

      sub_1000C51B8(v43, v45, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 28) = 1026;
      [v86 isDeleted];

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v36, v84, "Reminder has no oldList, no auxiliary reminder change info is needed {reminder.isInserted: %{BOOL,public}d, reminder: %{public}s, newList: %{public}s, isDeleted: %{BOOL,public}d}", (uint8_t *)v38, 0x22u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_34;
    }
  }
}

void sub_10024B068(void *a1, void *a2, void *a3, unint64_t *a4)
{
  sub_1000963CC(0, a4);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v7 = [ObjCClassFromMetadata description];
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = v8;

  id v10 = [a3 transactionAuthor];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v14 = 0;
  }
  uint64_t v53 = v12;
  unint64_t v54 = v14;
  sub_100094134((uint64_t *)&unk_10090A4C0);
  uint64_t v51 = Optional.descriptionOrNil.getter();
  id v16 = v15;
  swift_bridgeObjectRelease();
  sub_100258400(a1);
  if (!v17)
  {
    if (qword_1009073A0 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_10008E2DC(v32, (uint64_t)qword_100916070);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_1000C51B8(v51, (unint64_t)v16, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v35 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_1000C51B8(v50, (unint64_t)v9, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Tried to insert an auxiliary change info before the related CD object is unlinked from its account. Bailing {author: %{public}s, cdType: %s}.", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v40 = self;
    uint64_t v53 = 0;
    unint64_t v54 = 0xE000000000000000;
    _StringGuts.grow(_:)(133);
    unint64_t v41 = 0xD000000000000075;
    unint64_t v42 = 0x80000001007CF9B0;
    goto LABEL_26;
  }
  id v18 = [a3 storeController];
  if (!v18)
  {
    swift_bridgeObjectRelease();
    if (qword_1009073A0 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_10008E2DC(v36, (uint64_t)qword_100916070);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    os_log_type_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_1000C51B8(v51, (unint64_t)v16, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v39 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_1000C51B8(v50, (unint64_t)v9, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Tried to insert an auxiliary change info but storeController is nil. Bailing {author: %{public}s, cdType: %s}.", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v40 = self;
    uint64_t v53 = 0;
    unint64_t v54 = 0xE000000000000000;
    _StringGuts.grow(_:)(102);
    unint64_t v42 = 0x80000001007CFA30;
    unint64_t v41 = 0xD000000000000056;
LABEL_26:
    String.append(_:)(*(Swift::String *)&v41);
    v43._countAndFlagsBits = v51;
    v43._object = v16;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 0x657079546463202CLL;
    v44._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v44);
    v45._countAndFlagsBits = v50;
    v45._object = v9;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = 11901;
    v46._object = (void *)0xE200000000000000;
    String.append(_:)(v46);
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v40 internalErrorWithDebugDescription:v47];

    swift_willThrow();
    return;
  }
  id v49 = a2;
  os_log_type_t v19 = v18;
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v48 = v19;
  id v21 = [v19 storeForAccountIdentifier:v20];

  id v22 = [ObjCClassFromMetadata entity];
  id v23 = [objc_allocWithZone((Class)ObjCClassFromMetadata) initWithEntity:v22 insertIntoManagedObjectContext:a3];
  if (v21)
  {
    id v24 = v21;
    id v25 = v23;
    [a3 assignObject:v25 toPersistentStore:v24];
  }
  uint64_t v26 = qword_1009073A0;
  id v27 = v23;
  if (v26 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_10008E2DC(v28, (uint64_t)qword_100916070);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v55 = sub_1000C51B8(v50, (unint64_t)v9, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v31 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v55 = sub_1000C51B8(v51, (unint64_t)v16, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Inserted %s {author: %{public}s}", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  sub_10024A120(v27, a1, v49);
}

uint64_t type metadata accessor for REMReminderStorageCDIngestor()
{
  return self;
}

_UNKNOWN **sub_10024B9C0()
{
  return &off_1008BF588;
}

_UNKNOWN **sub_10024B9CC()
{
  return &off_1008BF558;
}

uint64_t sub_10024B9D8()
{
  return sub_1003E9EE4();
}

uint64_t sub_10024B9E4()
{
  return sub_1003EA39C();
}

void *sub_10024B9F0(unint64_t a1, void *a2)
{
  unint64_t v4 = a1;
  uint64_t v17 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      unint64_t v6 = 0;
      unint64_t v7 = v4 & 0xC000000000000001;
      uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
      uint64_t v14 = v5;
      unint64_t v15 = v4;
      while (v7)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        id v10 = v9;
        unint64_t v11 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_17;
        }
        id v16 = v9;
        char v12 = sub_100249A60(&v16, (uint64_t)a2);
        if (v2)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return a2;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v5 = v14;
          unint64_t v4 = v15;
        }
        else
        {
        }
        ++v6;
        if (v11 == v5)
        {
          a2 = v17;
          goto LABEL_20;
        }
      }
      if (v6 < *(void *)(v8 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v4 + 8 * v6 + 32);
    goto LABEL_9;
  }
LABEL_19:
  a2 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return a2;
}

unint64_t sub_10024BB88(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B1F50, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

uint64_t sub_10024BBD4()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x26) {
    return 38;
  }
  else {
    return v0;
  }
}

void *sub_10024BC28(unint64_t a1, void *a2)
{
  if (!(a1 >> 62))
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  uint64_t v16 = v2;
  unint64_t v6 = a1 & 0xC000000000000001;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v8 = a1 + 32;
  while (!__OFSUB__(v5--, 1))
  {
    if (v6)
    {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((v5 & 0x8000000000000000) != 0) {
        goto LABEL_17;
      }
      if (v5 >= *(void *)(v7 + 16)) {
        goto LABEL_18;
      }
      id v10 = *(id *)(v8 + 8 * v5);
    }
    unint64_t v11 = v10;
    id v12 = [v10 dueDateDelta:v16];
    unsigned int v13 = [v12 isEmpty];

    if (v13)
    {
      id v14 = v11;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      if (!v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (!v5) {
        return _swiftEmptyArrayStorage;
      }
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return _swiftEmptyArrayStorage;
}

void *sub_10024BDE8(unint64_t a1, uint64_t *a2)
{
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v33 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v36 = (char *)&v23 - v6;
  os_log_type_t v37 = _swiftEmptyArrayStorage;
  if (!(a1 >> 62))
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  unint64_t v29 = a1 & 0xC000000000000001;
  unint64_t v25 = a1 + 32;
  uint64_t v26 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v32 = v24 + 16;
  uint64_t v35 = (void (**)(char *, uint64_t))(v24 + 8);
  unint64_t v27 = a1;
  unint64_t v8 = v33;
  while (1)
  {
    BOOL v9 = __OFSUB__(v7, 1);
    unint64_t v10 = v7 - 1;
    if (v9) {
      break;
    }
    uint64_t v31 = v10;
    if (v29)
    {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((v10 & 0x8000000000000000) != 0) {
        goto LABEL_20;
      }
      if (v10 >= *(void *)(v26 + 16)) {
        goto LABEL_21;
      }
      id v11 = *(id *)(v25 + 8 * v10);
    }
    id v12 = v11;
    uint64_t v13 = *v28;
    swift_bridgeObjectRetain();
    id v30 = v12;
    id v14 = [v12 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v13 + 16)
      && (sub_10024D4EC((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID), v15 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v16 = -1 << *(unsigned char *)(v13 + 32), v17 = v15 & ~v16, ((*(void *)(v13 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) != 0))
    {
      uint64_t v34 = ~v16;
      uint64_t v18 = *(void *)(v24 + 72);
      os_log_type_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v24 + 16);
      while (1)
      {
        v19(v8, *(void *)(v13 + 48) + v18 * v17, v3);
        sub_10024D4EC((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v21 = *v35;
        (*v35)(v8, v3);
        if (v20) {
          break;
        }
        unint64_t v17 = (v17 + 1) & v34;
        if (((*(void *)(v13 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
          goto LABEL_4;
        }
      }
      swift_bridgeObjectRelease();
      v21(v36, v3);
    }
    else
    {
LABEL_4:
      swift_bridgeObjectRelease();
      (*v35)(v36, v3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    uint64_t v7 = v31;
    if (!v31) {
      return v37;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return v37;
}

uint64_t sub_10024C1A0(void *a1, void *a2, void *a3)
{
  uint64_t v152 = a3;
  uint64_t v145 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  int v157 = *(char **)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v147 = ((char *)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v144 = (char *)&v139 - v8;
  __chkstk_darwin(v9);
  uint64_t v151 = (char *)&v139 - v10;
  __chkstk_darwin(v11);
  uint64_t v150 = (char *)&v139 - v12;
  __chkstk_darwin(v13);
  char v149 = (uint64_t *)((char *)&v139 - v14);
  __chkstk_darwin(v15);
  os_log_t v155 = (os_log_t)((char *)&v139 - v16);
  __chkstk_darwin(v17);
  os_log_type_t v19 = (char *)&v139 - v18;
  unint64_t v20 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v164 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v162 = (unint64_t)_swiftEmptyArrayStorage;
  char v163 = _swiftEmptyDictionarySingleton;
  if (a1) {
    id v21 = a1;
  }
  else {
    id v21 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  id v22 = sub_10024BC28((unint64_t)v21, &v162);
  swift_bridgeObjectRelease();
  unint64_t v23 = sub_100247BF8((char *)_swiftEmptyArrayStorage, (unint64_t)v22, (unint64_t)&v163);
  uint64_t v148 = v3;
  swift_bridgeObjectRelease();
  uint64_t v24 = v162;
  unint64_t v25 = v162 >> 62;
  if (v162 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = *(void *)((v162 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v156 = v5;
  unint64_t v146 = v23;
  if (!v26)
  {
    os_log_type_t v19 = v157;
    unint64_t v41 = (unint64_t)v152;
    goto LABEL_26;
  }
  v158[0] = v24;
  swift_bridgeObjectRetain();
  sub_100094134((uint64_t *)&unk_10090FFC0);
  uint64_t v27 = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t v154 = v24;
  uint64_t v28 = v27;
  sub_1000967F4((unint64_t *)&qword_100920C10, (uint64_t *)&unk_10090FFC0);
  uint64_t v29 = sub_1000E4F40((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
  uint64_t v153 = v28;
  uint64_t v30 = v154;
  uint64_t v143 = v29;
  uint64_t v31 = v148;
  uint64_t v5 = Sequence.mapToSet<A>(_:)();
  uint64_t v148 = v31;
  swift_bridgeObjectRelease();
  if (v25)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    if (v32) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v32 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v32)
    {
LABEL_9:
      v158[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_1001DE148(0, v32 & ~(v32 >> 63), 0);
      if (v32 < 0)
      {
        __break(1u);
        goto LABEL_109;
      }
      uint64_t v142 = (void *)v5;
      uint64_t v33 = 0;
      uint64_t v34 = v158[0];
      unint64_t v35 = v30 & 0xC000000000000001;
      do
      {
        if (v35) {
          id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v36 = *(id *)(v30 + 8 * v33 + 32);
        }
        os_log_type_t v37 = v36;
        id v38 = [v36 identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v158[0] = v34;
        unint64_t v40 = *(void *)(v34 + 16);
        unint64_t v39 = *(void *)(v34 + 24);
        if (v40 >= v39 >> 1)
        {
          sub_1001DE148(v39 > 1, v40 + 1, 1);
          uint64_t v34 = v158[0];
        }
        ++v33;
        *(void *)(v34 + 16) = v40 + 1;
        (*((void (**)(unint64_t, char *, uint64_t))v157 + 4))(v34+ ((v157[80] + 32) & ~(unint64_t)v157[80])+ *((void *)v157 + 9) * v40, v19, v156);
        uint64_t v30 = v154;
      }
      while (v32 != v33);
    }
  }
  swift_bridgeObjectRelease();
  if (qword_1009071B8 != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  sub_10008E2DC(v42, (uint64_t)qword_100911218);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = swift_slowAlloc();
    uint64_t v154 = swift_slowAlloc();
    v158[0] = v154;
    *(_DWORD *)uint64_t v45 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v46 = Set.description.getter();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    uint64_t v161 = (char *)sub_1000C51B8(v46, v48, v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v49 = v156;
    uint64_t v50 = Array.description.getter();
    unint64_t v52 = v51;
    swift_bridgeObjectRelease();
    uint64_t v161 = (char *)sub_1000C51B8(v50, v52, v158);
    uint64_t v5 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "REMReminderStorageCDIngestor:applyDueDateDeltaAlertChanges: Detected attempts to insert/update invalid empty early alert with 0 delta {reminderIDs: %{public}s, ids: %{public}s}", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v5 = v156;
  }
  os_log_type_t v19 = v157;
  unint64_t v41 = (unint64_t)v152;
  unint64_t v23 = v146;
LABEL_26:
  uint64_t v161 = (char *)&_swiftEmptySetSingleton;
  unint64_t v20 = (unint64_t)v155;
  if (!(v23 >> 62))
  {
    if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_28;
    }
LABEL_47:
    unint64_t v71 = swift_bridgeObjectRetain();
    sub_100203140(v71);
    goto LABEL_50;
  }
  swift_bridgeObjectRetain();
  uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v70) {
    goto LABEL_47;
  }
LABEL_28:
  if (!(v41 >> 62))
  {
    uint64_t v53 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v53) {
      goto LABEL_30;
    }
LABEL_49:
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  swift_bridgeObjectRetain();
  uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
  if (!v53) {
    goto LABEL_49;
  }
LABEL_30:
  if (v53 < 1)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  uint64_t v54 = 0;
  uint64_t v153 = v53;
  uint64_t v154 = v41 & 0xC000000000000001;
  uint64_t v55 = (void (**)(unint64_t, uint64_t))(v19 + 8);
  do
  {
    if (v154) {
      id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v57 = *(id *)(v41 + 8 * v54 + 32);
    }
    uint64_t v58 = v57;
    id v59 = [v57 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v60 = v163;
    if (v163[2] && (unint64_t v61 = sub_100306EC4(v20), (v62 & 1) != 0))
    {
      unint64_t v63 = *v55;
      id v64 = *(id *)(v60[7] + 8 * v61);
      v63(v20, v5);
      id v65 = v64;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v66 = v5;
      if (*(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v67 = [v58 identifier];
      id v68 = v150;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v69 = (uint64_t)v149;
      sub_10031DEC0((uint64_t)v149, v68);

      v63(v69, v66);
      uint64_t v5 = v66;
      os_log_type_t v19 = v157;
      unint64_t v41 = (unint64_t)v152;
    }
    else
    {
      (*v55)(v20, v5);
      id v56 = v58;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    ++v54;
    unint64_t v20 = (unint64_t)v155;
  }
  while (v153 != v54);
  swift_bridgeObjectRelease();
  unint64_t v23 = v146;
LABEL_50:
  uint64_t v72 = v148;
  unint64_t v20 = (unint64_t)sub_10024BDE8(v23, (uint64_t *)&v161);
  swift_bridgeObjectRelease();
  unint64_t v73 = swift_bridgeObjectRetain();
  sub_100203140(v73);
  if (v145) {
    id v74 = v145;
  }
  else {
    id v74 = &_swiftEmptySetSingleton;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v75 = swift_bridgeObjectRetain();
  os_log_type_t v76 = sub_10024B9F0(v75, v74);
  uint64_t v148 = v72;
  swift_bridgeObjectRelease();
  uint64_t v152 = v74;
  swift_bridgeObjectRelease();
  unint64_t v164 = (unint64_t)v76;
  if (*((void *)v161 + 2)) {
    goto LABEL_56;
  }
  if (v20 >> 62)
  {
LABEL_110:
    swift_bridgeObjectRetain();
    uint64_t v138 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v138) {
      goto LABEL_56;
    }
    goto LABEL_111;
  }
  if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_56:
    LODWORD(v146) = 0;
    goto LABEL_57;
  }
LABEL_111:
  LODWORD(v146) = v152[2] == 0;
LABEL_57:
  uint64_t v77 = v147;
  if (qword_1009071B8 != -1) {
    goto LABEL_106;
  }
  while (1)
  {
    uint64_t v78 = type metadata accessor for Logger();
    uint64_t v79 = sub_10008E2DC(v78, (uint64_t)qword_100911218);
    swift_bridgeObjectRetain();
    id v80 = Logger.logObject.getter();
    int v81 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v80, (os_log_type_t)v81))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_73;
    }
    uint64_t v82 = (_DWORD *)swift_slowAlloc();
    uint64_t v150 = (char *)swift_slowAlloc();
    v158[0] = (uint64_t)v150;
    uint64_t v154 = (uint64_t)v82;
    *uint64_t v82 = 136315138;
    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v83 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v145 = (void *)v79;
    os_log_t v155 = v80;
    LODWORD(v153) = v81;
    if (v83) {
      break;
    }
LABEL_72:
    char v93 = (uint8_t *)v154;
    uint64_t v94 = Array.description.getter();
    unint64_t v96 = v95;
    swift_bridgeObjectRelease();
    uint64_t v160 = (void *)sub_1000C51B8(v94, v96, v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v97 = v155;
    _os_log_impl((void *)&_mh_execute_header, v155, (os_log_type_t)v153, "REMReminderStorageCDIngestor:applyDueDateDeltaAlertChanges: INSERTED = %s", v93, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v77 = v147;
    uint64_t v79 = (uint64_t)v145;
LABEL_73:
    uint64_t v98 = Logger.logObject.getter();
    int v99 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v98, (os_log_type_t)v99))
    {
      LODWORD(v143) = v99;
      unint64_t v100 = (uint8_t *)swift_slowAlloc();
      uint64_t v142 = (void *)swift_slowAlloc();
      uint64_t v160 = v142;
      *(_DWORD *)unint64_t v100 = 136315138;
      swift_beginAccess();
      double v101 = v161;
      os_log_type_t v19 = (char *)*((void *)v161 + 2);
      if (v19)
      {
        uint64_t v140 = v100;
        v141 = v98;
        uint64_t v145 = (void *)v79;
        unint64_t v159 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_1001DE148(0, (int64_t)v19, 0);
        uint64_t v102 = v159;
        uint64_t v104 = sub_1002C8B80(v101);
        int v106 = v105 & 1;
        uint64_t v150 = v157 + 16;
        uint64_t v151 = v101 + 56;
        char v149 = v157 + 32;
        unint64_t v20 = (unint64_t)v144;
        while ((v104 & 0x8000000000000000) == 0 && v104 < 1 << v101[32])
        {
          if (((*(void *)&v151[((unint64_t)v104 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v104) & 1) == 0) {
            goto LABEL_101;
          }
          if (*((_DWORD *)v101 + 9) != v103) {
            goto LABEL_102;
          }
          LODWORD(v153) = v106;
          uint64_t v154 = v103;
          os_log_t v155 = (os_log_t)v19;
          unint64_t v107 = (void (**)(unint64_t, unint64_t, uint64_t))v157;
          uint64_t v108 = *((void *)v157 + 9);
          (*((void (**)(unint64_t, uint64_t, uint64_t))v157 + 2))(v20, *((void *)v101 + 6) + v108 * v104, v5);
          unint64_t v159 = v102;
          uint64_t v109 = v5;
          unint64_t v111 = v102[2];
          unint64_t v110 = v102[3];
          uint64_t v77 = (v111 + 1);
          if (v111 >= v110 >> 1)
          {
            sub_1001DE148(v110 > 1, v111 + 1, 1);
            uint64_t v102 = v159;
          }
          v102[2] = v77;
          v107[4]((unint64_t)v102+ ((*((unsigned __int8 *)v107 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v107 + 80))+ v111 * v108, v20, v109);
          uint64_t v112 = sub_1003C9E34(v104, v154, v153 & 1, v101);
          uint64_t v104 = v112;
          int v106 = v113 & 1;
          os_log_type_t v19 = (char *)&v155[-1].isa + 7;
          uint64_t v5 = v109;
          if (v155 == (os_log_t)1)
          {
            sub_1000E4EA4(v112, v103, v106);
            swift_bridgeObjectRelease();
            uint64_t v98 = v141;
            unint64_t v100 = v140;
            goto LABEL_85;
          }
        }
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
LABEL_85:
      uint64_t v114 = Array.description.getter();
      unint64_t v116 = v115;
      swift_bridgeObjectRelease();
      unint64_t v159 = (void *)sub_1000C51B8(v114, v116, (uint64_t *)&v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v98, (os_log_type_t)v143, "REMReminderStorageCDIngestor:applyDueDateDeltaAlertChanges:  UPDATED = %s", v100, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      os_log_type_t v19 = v157;
      uint64_t v77 = v147;
    }
    else
    {
    }
    uint64_t v117 = v152;
    swift_bridgeObjectRetain();
    id v118 = Logger.logObject.getter();
    int v119 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v118, (os_log_type_t)v119))
    {

      swift_bridgeObjectRelease_n();
LABEL_99:
      uint64_t v137 = v146 ^ 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v137;
    }
    LODWORD(v150) = v119;
    uint64_t v120 = (uint8_t *)swift_slowAlloc();
    char v149 = (void *)swift_slowAlloc();
    uint64_t v160 = v149;
    *(_DWORD *)uint64_t v120 = 136315138;
    int64_t v121 = v117[2];
    if (!v121)
    {
LABEL_98:
      uint64_t v134 = Array.description.getter();
      unint64_t v136 = v135;
      swift_bridgeObjectRelease();
      unint64_t v159 = (void *)sub_1000C51B8(v134, v136, (uint64_t *)&v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v150, "REMReminderStorageCDIngestor:applyDueDateDeltaAlertChanges:  DELETED = %s", v120, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_99;
    }
    uint64_t v145 = v120;
    unint64_t v147 = v118;
    unint64_t v159 = _swiftEmptyArrayStorage;
    sub_1001DE148(0, v121, 0);
    unint64_t v122 = v159;
    unint64_t v20 = sub_1002C8B80(v117);
    int v125 = v124 & 1;
    uint64_t v153 = (uint64_t)(v19 + 16);
    uint64_t v154 = (uint64_t)(v117 + 7);
    uint64_t v151 = v19 + 32;
    BOOL v126 = v117;
    uint64_t v5 = v156;
    while ((v20 & 0x8000000000000000) == 0 && (uint64_t)v20 < 1 << *((unsigned char *)v126 + 32))
    {
      if (((*(void *)(v154 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
        goto LABEL_104;
      }
      if (*((_DWORD *)v126 + 9) != v123) {
        goto LABEL_105;
      }
      LODWORD(v155) = v125;
      int v157 = (char *)v123;
      uint64_t v127 = *((void *)v19 + 9);
      (*((void (**)(NSObject *, unint64_t, uint64_t))v19 + 2))(v77, v126[6] + v127 * v20, v5);
      unint64_t v159 = v122;
      long long v128 = v19;
      unint64_t v130 = v122[2];
      unint64_t v129 = v122[3];
      if (v130 >= v129 >> 1)
      {
        sub_1001DE148(v129 > 1, v130 + 1, 1);
        unint64_t v122 = v159;
      }
      v122[2] = v130 + 1;
      (*((void (**)(unint64_t, NSObject *, uint64_t))v128 + 4))((unint64_t)v122+ ((v128[80] + 32) & ~(unint64_t)v128[80])+ v130 * v127, v77, v5);
      id v131 = v152;
      uint64_t v132 = sub_1003C9E34(v20, v157, v155 & 1, v152);
      unint64_t v20 = v132;
      int v125 = v133 & 1;
      --v121;
      os_log_type_t v19 = v128;
      BOOL v126 = v131;
      if (!v121)
      {
        sub_1000E4EA4(v132, v123, v125);
        id v118 = v147;
        uint64_t v120 = (uint8_t *)v145;
        goto LABEL_98;
      }
    }
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    swift_once();
  }
  uint64_t v160 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1001DE148(0, v83 & ~(v83 >> 63), 0);
  if ((v83 & 0x8000000000000000) == 0)
  {
    uint64_t v85 = 0;
    id v86 = v160;
    id v87 = v151;
    do
    {
      if ((v20 & 0xC000000000000001) != 0) {
        id v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v88 = *(id *)(v20 + 8 * v85 + 32);
      }
      unint64_t v89 = v88;
      id v90 = [v88 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v160 = v86;
      unint64_t v92 = v86[2];
      unint64_t v91 = v86[3];
      if (v92 >= v91 >> 1)
      {
        sub_1001DE148(v91 > 1, v92 + 1, 1);
        id v86 = v160;
      }
      ++v85;
      v86[2] = v92 + 1;
      (*((void (**)(unint64_t, char *, uint64_t))v157 + 4))((unint64_t)v86+ ((v157[80] + 32) & ~(unint64_t)v157[80])+ *((void *)v157 + 9) * v92, v87, v156);
    }
    while (v83 != v85);
    uint64_t v5 = v156;
    os_log_type_t v19 = v157;
    goto LABEL_72;
  }
  __break(1u);
  return result;
}

uint64_t sub_10024D4EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_10024D534()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v5 = 0;
  id v1 = [(id)swift_getObjCClassFromMetadata() userActivityWithDictionaryData:isa error:&v5];

  if (v1)
  {
    id v2 = v5;
  }
  else
  {
    id v3 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

char *sub_10024D600(void *a1)
{
  uint64_t v276 = type metadata accessor for URL();
  uint64_t v275 = *(void *)(v276 - 8);
  __chkstk_darwin(v276);
  v265 = (char *)&v256 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v3 - 8);
  v274 = (char *)&v256 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v280 = (void *)type metadata accessor for DateComponents();
  id v281 = (id)*(v280 - 1);
  __chkstk_darwin(v280);
  uint64_t v277 = (char *)&v256 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v256 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v273 = (char *)&v256 - v10;
  uint64_t v289 = type metadata accessor for Logger();
  uint64_t v286 = *(void *)(v289 - 8);
  __chkstk_darwin(v289);
  unint64_t v268 = (char *)&v256 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v279 = (char *)&v256 - v13;
  __chkstk_darwin(v14);
  v278 = (char *)&v256 - v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v256 - v17;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  char v272 = (char *)&v256 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  char v270 = (char *)&v256 - v23;
  __chkstk_darwin(v24);
  uint64_t v285 = (char *)&v256 - v25;
  uint64_t v26 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v26 - 8);
  uint64_t v264 = (char *)&v256 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v256 - v29;
  __chkstk_darwin(v31);
  uint64_t v267 = (char *)&v256 - v32;
  __chkstk_darwin(v33);
  v282 = (char *)&v256 - v34;
  __chkstk_darwin(v35);
  uint64_t v271 = (uint64_t)&v256 - v36;
  __chkstk_darwin(v37);
  unint64_t v266 = (char *)&v256 - v38;
  __chkstk_darwin(v39);
  unint64_t v41 = (char *)&v256 - v40;
  __chkstk_darwin(v42);
  uint64_t v269 = (uint64_t)&v256 - v43;
  *(void *)&double v45 = __chkstk_darwin(v44).n128_u64[0];
  unint64_t v47 = (char *)&v256 - v46;
  id v291 = 0;
  id v48 = [a1 remObjectIDWithError:&v291, v45];
  if (!v48)
  {
    id v64 = v291;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v41;
  }
  v261 = v8;
  id v283 = v48;
  uint64_t v287 = v20;
  id v49 = v291;
  uint64_t v50 = a1;
  id v51 = [a1 account];
  if (!v51
    || (unint64_t v52 = v51,
        id v53 = [v51 remObjectID],
        v52,
        (id v262 = v53) == 0))
  {
    if (qword_1009071C0 != -1) {
      swift_once();
    }
    sub_10008E2DC(v289, (uint64_t)qword_100911230);
    id v58 = v283;
    id v59 = v283;
    unint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      char v62 = (uint8_t *)swift_slowAlloc();
      v290 = (void *)swift_slowAlloc();
      *(_DWORD *)char v62 = 138412290;
      unint64_t v41 = (char *)(v62 + 12);
      id v291 = v59;
      unint64_t v63 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v290 = v58;

      _os_log_impl((void *)&_mh_execute_header, v60, v61, "REMReminderStorageCDIngestor: cdReminder.account is nil {cdReminder.remObjectID: %@}", v62, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v60 = v59;
    }

    id v65 = self;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v67 = String._bridgeToObjectiveC()();
    [v65 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v67];

    swift_willThrow();
    return v41;
  }
  uint64_t v54 = v50;
  id v55 = [v50 list];
  uint64_t v263 = v19;
  unint64_t v258 = v18;
  if (v55)
  {
    id v56 = v55;
    id v57 = [v55 remObjectID];
  }
  else
  {
    id v57 = 0;
  }
  id v68 = objc_allocWithZone((Class)REMReminderStorage);
  id v259 = v57;
  uint64_t v288 = (char *)[v68 initWithObjectID:v283 listID:v57 accountID:v262];
  id v69 = [v50 parentReminder];
  if (v69)
  {
    uint64_t v70 = v69;
    id v71 = [v69 remObjectID];
  }
  else
  {
    id v71 = 0;
  }
  id v72 = v288;
  [v288 setParentReminderID:v71];

  id v73 = [v50 daCalendarItemUniqueIdentifier];
  [v72 setDaCalendarItemUniqueIdentifier:v73];

  id v74 = [v50 externalIdentifier];
  [v72 setExternalIdentifier:v74];

  id v75 = [v50 externalModificationTag];
  [v72 setExternalModificationTag:v75];

  id v76 = [v50 daSyncToken];
  [v72 setDaSyncToken:v76];

  id v77 = [v50 daPushKey];
  [v72 setDaPushKey:v77];

  [v72 setMinimumSupportedVersion:[v50 minimumSupportedVersion]];
  [v72 setEffectiveMinimumSupportedVersion:[v50 effectiveMinimumSupportedVersion]];
  Class isa = (Class)[v50 titleDocument];
  uint64_t v257 = v30;
  if (isa)
  {
    uint64_t v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v81 = v80;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v79, v81);
  }
  uint64_t v82 = v263;
  uint64_t v83 = v287;
  id v84 = v288;
  [v288 setTitleDocumentData:isa];

  id v85 = [v50 title];
  [v84 setTitleAsStringByCDIngestor:v85];

  [v84 setCompleted:[v50 completed]];
  Class v86 = (Class)[v50 completionDate];
  if (v86)
  {
    id v87 = v285;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v47, v87, v82);
    v284 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56);
    v284(v47, 0, 1, v82);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v47, 1, v82) == 1)
    {
      Class v86 = 0;
    }
    else
    {
      Class v86 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v83 + 8))(v47, v82);
    }
  }
  else
  {
    v284 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56);
    v284(v47, 1, 1, v82);
  }
  id v88 = v288;
  [v288 setCompletionDate:v86];

  uint64_t v89 = (uint64_t)[v50 priority];
  [v88 setPriority:v89 & ~(v89 >> 63)];
  [v88 setFlagged:[v50 flagged]];
  id v90 = [v50 creationDate];
  if (v90)
  {
    unint64_t v91 = v90;
    unint64_t v92 = v285;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    char v93 = *(void (**)(void))(v83 + 32);
    ((void (*)(char *, char *, uint64_t))v93)(v41, v92, v82);
    v284(v41, 0, 1, v82);
    uint64_t v94 = v83 + 48;
    unint64_t v95 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
    if (v95(v41, 1, v82) != 1)
    {
      uint64_t v96 = v94 & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      uint64_t v97 = v269;
      uint64_t v98 = v263;
      v93();
      v284((char *)v97, 0, 1, v98);
      uint64_t v99 = v287;
      goto LABEL_32;
    }
  }
  else
  {
    v284(v41, 1, 1, v82);
  }
  id v100 = [v288 lastModifiedDate];
  if (v100)
  {
    double v101 = v100;
    uint64_t v102 = v266;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v103 = 0;
    uint64_t v98 = v263;
    uint64_t v104 = v287;
  }
  else
  {
    uint64_t v103 = 1;
    uint64_t v98 = v263;
    uint64_t v104 = v287;
    uint64_t v102 = v266;
  }
  v284(v102, v103, 1, v98);
  uint64_t v105 = (uint64_t)v102;
  uint64_t v106 = v269;
  sub_100096408(v105, v269, (uint64_t *)&unk_100909A40);
  uint64_t v107 = (uint64_t)v41;
  uint64_t v97 = v106;
  sub_1000966BC(v107, (uint64_t *)&unk_100909A40);
  uint64_t v99 = v104;
  unint64_t v95 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48);
  uint64_t v96 = (v104 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
LABEL_32:
  uint64_t v269 = v96;
  unint64_t v266 = (char *)v95;
  unsigned int v108 = v95((char *)v97, 1, v98);
  id v109 = v288;
  unint64_t v110 = v270;
  if (v108 == 1)
  {
    Date.init()();
    sub_1000966BC(v97, (uint64_t *)&unk_100909A40);
    uint64_t v111 = v99;
  }
  else
  {
    uint64_t v111 = v99;
    (*(void (**)(char *, uint64_t, uint64_t))(v99 + 32))(v270, v97, v98);
  }
  Class v112 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v260 = *(void (**)(char *, uint64_t))(v111 + 8);
  char v270 = (char *)(v111 + 8);
  v260(v110, v98);
  [v109 setCreationDate:v112];

  id v113 = [v50 lastModifiedDate];
  if (v113)
  {
    uint64_t v114 = v113;
    unint64_t v115 = v285;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v116 = v98;
    uint64_t v117 = *(void (**)(uint64_t, char *, uint64_t))(v111 + 32);
    uint64_t v118 = (uint64_t)v282;
    v117((uint64_t)v282, v115, v116);
    v284((char *)v118, 0, 1, v116);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v266)(v118, 1, v116) != 1)
    {
      int v119 = v258;
      uint64_t v120 = v271;
      uint64_t v121 = v263;
      v117(v271, v282, v263);
      uint64_t v122 = v121;
      v284((char *)v120, 0, 1, v121);
      unint64_t v41 = v288;
      uint64_t v123 = (void (**)(void, void, void *))v281;
      char v124 = v272;
      goto LABEL_43;
    }
  }
  else
  {
    v284(v282, 1, 1, v98);
  }
  id v125 = [v50 creationDate];
  if (v125)
  {
    BOOL v126 = v125;
    int v119 = v258;
    uint64_t v127 = v267;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v128 = 0;
    uint64_t v122 = v263;
    unint64_t v41 = v288;
    uint64_t v123 = (void (**)(void, void, void *))v281;
    char v124 = v272;
  }
  else
  {
    int v119 = v258;
    uint64_t v128 = 1;
    uint64_t v122 = v263;
    unint64_t v41 = v288;
    uint64_t v123 = (void (**)(void, void, void *))v281;
    char v124 = v272;
    uint64_t v127 = v267;
  }
  v284(v127, v128, 1, v122);
  uint64_t v129 = (uint64_t)v127;
  uint64_t v120 = v271;
  sub_100096408(v129, v271, (uint64_t *)&unk_100909A40);
  sub_1000966BC((uint64_t)v282, (uint64_t *)&unk_100909A40);
LABEL_43:
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v266)(v120, 1, v122) == 1)
  {
    Date.init()();
    sub_1000966BC(v120, (uint64_t *)&unk_100909A40);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v111 + 32))(v124, v120, v122);
  }
  Class v130 = Date._bridgeToObjectiveC()().super.isa;
  v260(v124, v122);
  [v41 setLastModifiedDate:v130];

  id v131 = [v54 recurrenceRules];
  if (v131)
  {
    uint64_t v132 = v131;
    char v133 = v119;
    id v291 = v131;
    sub_1000963CC(0, (unint64_t *)&qword_100911820);
    sub_1000963CC(0, (unint64_t *)&unk_10090B010);
    sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
    uint64_t v134 = (void *)Sequence.elements<A>(ofType:)();

    unint64_t v135 = v273;
    if (qword_1009071C0 != -1) {
      swift_once();
    }
    uint64_t v136 = v289;
    uint64_t v137 = sub_10008E2DC(v289, (uint64_t)qword_100911230);
    uint64_t v138 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v286 + 16))(v133, v137, v136);
    id v291 = v134;
    __chkstk_darwin(v138);
    *(&v256 - 2) = (uint64_t)v133;
    sub_100094134(&qword_100921D70);
    sub_1000963CC(0, (unint64_t *)&qword_100911840);
    sub_1000967F4(&qword_100911510, &qword_100921D70);
    uint64_t v139 = v290;
    Sequence.map<A>(skippingError:_:)();
    if (v139) {
      swift_errorRelease();
    }
    v290 = 0;
    unint64_t v41 = v288;
    uint64_t v123 = (void (**)(void, void, void *))v281;
    (*(void (**)(char *, uint64_t))(v286 + 8))(v133, v289);
    swift_bridgeObjectRelease();
    Class v140 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v111 = v287;
  }
  else
  {
    Class v140 = 0;
    unint64_t v135 = v273;
  }
  [v41 setRecurrenceRules:v140];

  Class v141 = (Class)[v54 startDateComponents];
  uint64_t v142 = v280;
  if (v141)
  {
    uint64_t v143 = v277;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    ((void (**)(char *, char *, void *))v123)[4](v135, v143, v142);
    uint64_t v144 = (void (*)(char *, uint64_t, uint64_t, void *))v123[7];
    v144(v135, 0, 1, v142);
    if (((unsigned int (*)(char *, uint64_t, void *))v123[6])(v135, 1, v142) == 1)
    {
      Class v141 = 0;
    }
    else
    {
      v145.super.Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
      uint64_t v142 = v280;
      Class v141 = v145.super.isa;
      ((void (*)(char *, void *))v123[1])(v135, v280);
    }
  }
  else
  {
    uint64_t v144 = (void (*)(char *, uint64_t, uint64_t, void *))v123[7];
    v144(v135, 1, 1, v280);
  }
  [v41 setStartDateComponents:v141];

  Class v146 = (Class)[v54 dueDateComponents];
  if (v146)
  {
    uint64_t v147 = v111;
    uint64_t v148 = v277;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    char v149 = v261;
    ((void (**)(char *, char *, void *))v123)[4](v261, v148, v142);
    v144(v149, 0, 1, v142);
    if (((unsigned int (*)(char *, uint64_t, void *))v123[6])(v149, 1, v142) == 1)
    {
      Class v146 = 0;
    }
    else
    {
      Class v146 = DateComponents._bridgeToObjectiveC()().super.isa;
      ((void (*)(char *, void *))v123[1])(v149, v142);
    }
    uint64_t v111 = v147;
  }
  else
  {
    v144(v261, 1, 1, v142);
  }
  [v41 setDueDateComponents:v146];

  id v150 = [v54 timeZone];
  [v41 setTimeZone:v150];

  [v41 setAllDay:[v54 allDay]];
  Class v151 = (Class)[v54 dueDateDeltaAlertsData];
  uint64_t v152 = v290;
  if (v151)
  {
    uint64_t v153 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v155 = v154;

    Class v151 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v153, v155);
  }
  [v41 setDueDateDeltaAlertsData:v151];

  Class v156 = (Class)[v54 notesDocument];
  if (v156)
  {
    uint64_t v157 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v159 = v158;

    Class v156 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v157, v159);
  }
  [v41 setNotesDocumentData:v156];

  id v160 = [v54 notes];
  [v41 setNotesAsStringByCDIngestor:v160];

  id v161 = [v54 attachments];
  if (v161)
  {
    unint64_t v162 = v161;
    id v291 = v161;
    sub_100094134(&qword_100911518);
    sub_1000963CC(0, (unint64_t *)&unk_10090B010);
    sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
    char v163 = (void *)Sequence.elements<A>(ofType:)();

    if (qword_1009071C0 != -1) {
      swift_once();
    }
    uint64_t v164 = v289;
    uint64_t v165 = sub_10008E2DC(v289, (uint64_t)qword_100911230);
    id v166 = v278;
    uint64_t v167 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v286 + 16))(v278, v165, v164);
    id v291 = v163;
    __chkstk_darwin(v167);
    *(&v256 - 2) = (uint64_t)v166;
    sub_100094134(&qword_100911520);
    sub_1000963CC(0, (unint64_t *)&unk_100909EB0);
    sub_1000967F4(&qword_100911528, &qword_100911520);
    Sequence.map<A>(skippingError:_:)();
    if (v152)
    {
      swift_errorRelease();
      uint64_t v152 = 0;
    }
    unint64_t v41 = v288;
    (*(void (**)(char *, uint64_t))(v286 + 8))(v278, v289);
    swift_bridgeObjectRelease();
    Class v168 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v111 = v287;
  }
  else
  {
    Class v168 = 0;
  }
  [v41 setAttachments:v168];

  type metadata accessor for REMAlarmCDIngestor();
  uint64_t inited = swift_initStackObject();
  unint64_t v170 = v262;
  id v171 = v283;
  v282 = (char *)inited;
  *(void *)(inited + 16) = v262;
  *(void *)(inited + 24) = v171;
  id v172 = v171;
  id v173 = v170;
  id v174 = [v54 alarmStorage];
  if (v174)
  {
    uint64_t v175 = v174;
    v290 = v152;
    id v291 = v174;
    sub_1000963CC(0, (unint64_t *)&unk_100909AC0);
    sub_1000963CC(0, (unint64_t *)&unk_10090B010);
    sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
    uint64_t v176 = (void *)Sequence.elements<A>(ofType:)();

    if (qword_1009071C0 != -1) {
      swift_once();
    }
    uint64_t v177 = v289;
    uint64_t v178 = sub_10008E2DC(v289, (uint64_t)qword_100911230);
    unint64_t v179 = v279;
    uint64_t v180 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v286 + 16))(v279, v178, v177);
    id v291 = v176;
    __chkstk_darwin(v180);
    *(&v256 - 2) = (uint64_t)v179;
    sub_100094134(&qword_100921C20);
    sub_1000963CC(0, &qword_10090C4B8);
    sub_1000967F4(&qword_100911530, &qword_100921C20);
    char v181 = v290;
    Sequence.map<A>(skippingError:_:)();
    uint64_t v152 = v181;
    if (v181)
    {
      swift_errorRelease();
      uint64_t v152 = 0;
    }
    uint64_t v111 = v287;
    (*(void (**)(char *, uint64_t))(v286 + 8))(v279, v289);
    swift_bridgeObjectRelease();
    Class v182 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v41 = v288;
  }
  else
  {
    Class v182 = 0;
  }
  v290 = v152;
  [v41 setAlarms:v182];

  type metadata accessor for REMAssignmentCDIngestor();
  uint64_t v183 = (void *)swift_initStackObject();
  v183[2] = v173;
  v183[3] = v172;
  id v283 = v183;
  id v184 = v172;
  id v185 = v173;
  id v186 = [v54 assignments];
  if (v186)
  {
    unint64_t v187 = v186;
    sub_1000963CC(0, &qword_100910230);
    sub_1000E4F40((unint64_t *)&unk_100914B70, &qword_100910230);
    unint64_t v188 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v291 = v188;
    sub_100094134(&qword_1009114D8);
    sub_1000967F4(&qword_1009114E0, &qword_1009114D8);
    unint64_t v189 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();
    uint64_t v190 = v275;
    if (v189 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v195 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v195) {
        goto LABEL_85;
      }
    }
    else if (*(void *)((v189 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_85:
      id v291 = (id)v189;
      sub_100094134(&qword_100911540);
      sub_1000963CC(0, (unint64_t *)&unk_10090FFF0);
      sub_1000967F4(&qword_100911548, &qword_100911540);
      unint64_t v191 = v290;
      uint64_t v192 = Sequence.map<A>(skippingError:_:)();
      if (v191)
      {
        swift_errorRelease();
        swift_bridgeObjectRelease();
        v290 = 0;
        id v193 = _swiftEmptyArrayStorage;
      }
      else
      {
        id v193 = (void *)v192;
        v290 = 0;
        swift_bridgeObjectRelease();
      }
      sub_1001273E8((unint64_t)v193);
      swift_bridgeObjectRelease();
      sub_1000E4F40(&qword_10090A410, (unint64_t *)&unk_10090FFF0);
      Class v194 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v41 setAssignments:v194];

      goto LABEL_92;
    }
    swift_bridgeObjectRelease();
LABEL_92:
    uint64_t v111 = v287;
    goto LABEL_93;
  }
  uint64_t v190 = v275;
LABEL_93:
  type metadata accessor for REMHashtagCDIngestor();
  uint64_t v196 = swift_initStackObject();
  *(void *)(v196 + 16) = v185;
  *(void *)(v196 + 24) = v184;
  id v281 = v184;
  uint64_t v280 = v185;
  id v197 = [v54 hashtags];
  if (v197)
  {
    unint64_t v198 = v197;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
    unint64_t v199 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v291 = v199;
    sub_100094134(&qword_10090BFA8);
    sub_1000967F4(&qword_10090BFB0, &qword_10090BFA8);
    unint64_t v200 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();
    if (v200 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v201 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v201 = *(void *)((v200 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v202 = v290;
    uint64_t v111 = v287;
    if (v201)
    {
      if (qword_1009071C0 != -1) {
        swift_once();
      }
      uint64_t v203 = v289;
      uint64_t v204 = sub_10008E2DC(v289, (uint64_t)qword_100911230);
      int64_t v205 = v268;
      uint64_t v206 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v286 + 16))(v268, v204, v203);
      id v291 = (id)v200;
      __chkstk_darwin(v206);
      *(&v256 - 2) = (uint64_t)v205;
      sub_100094134(&qword_10090DCA0);
      sub_1000963CC(0, &qword_10090DC80);
      sub_1000967F4((unint64_t *)&unk_10090DCA8, &qword_10090DCA0);
      unint64_t v207 = v290;
      uint64_t v208 = Sequence.map<A>(skippingError:_:)();
      uint64_t v202 = v207;
      if (v207)
      {
        swift_errorRelease();
        uint64_t v202 = 0;
        v209 = _swiftEmptyArrayStorage;
      }
      else
      {
        v209 = (void *)v208;
      }
      uint64_t v111 = v287;
      (*(void (**)(char *, uint64_t))(v286 + 8))(v268, v289);
      swift_bridgeObjectRelease();
      sub_100127418((unint64_t)v209);
      swift_bridgeObjectRelease();
      sub_1000E4F40((unint64_t *)&qword_10090B7C0, &qword_10090DC80);
      Class v210 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      unint64_t v41 = v288;
      [v288 setHashtags:v210];
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v202 = v290;
  }
  [v41 setResolutionTokenMap:0];
  Class v211 = (Class)[v54 resolutionTokenMapData];
  if (v211)
  {
    uint64_t v212 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v214 = v213;

    Class v211 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v212, v214);
  }
  [v41 setResolutionTokenMapData:v211];

  id v215 = [v54 contactHandles];
  if (v215)
  {
    uint64_t v216 = v215;
    uint64_t v217 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v219 = v218;

    sub_100097E38(v217, v219);
    Class v220 = Data._bridgeToObjectiveC()().super.isa;
    id v221 = [self representationFromData:v220];
    sub_100097F34(v217, v219);

    [v41 setContactHandles:v221];
    uint64_t v111 = v287;
    sub_100097F34(v217, v219);
  }
  uint64_t v222 = (uint64_t)[v54 icsDisplayOrder];
  [v41 setIcsDisplayOrder:v222 & ~(v222 >> 63)];
  id v223 = [v54 icsUrl];
  if (v223)
  {
    uint64_t v224 = v265;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v225 = v274;
    id v226 = v224;
    uint64_t v227 = v276;
    (*(void (**)(char *, char *, uint64_t))(v190 + 32))(v274, v226, v276);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v190 + 56))(v225, 0, 1, v227);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v190 + 48))(v225, 1, v227) == 1)
    {
      id v223 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v228);
      id v223 = v229;
      (*(void (**)(char *, uint64_t))(v190 + 8))(v225, v227);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v190 + 56))(v274, 1, 1, v276);
  }
  [v41 setIcsUrl:v223];

  Class v230 = (Class)[v54 importedICSData];
  if (v230)
  {
    uint64_t v231 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v233 = v232;

    Class v230 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v231, v233);
  }
  [v41 setImportedICSData:v230];

  id v234 = [v54 userActivity];
  if (v234)
  {
    uint64_t v235 = v234;
    uint64_t v236 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v238 = v237;

    sub_1000963CC(0, &qword_100911538);
    sub_100097E38(v236, v238);
    id v239 = sub_10024D534();
    if (v202)
    {
      sub_100097F34(v236, v238);
      sub_100097F34(v236, v238);
      swift_setDeallocating();

      uint64_t v240 = (id *)v283;
      swift_setDeallocating();

      uint64_t v241 = (uint64_t)v282;
      swift_setDeallocating();

      return v41;
    }
    uint64_t v243 = v239;
    sub_100097F34(v236, v238);
    [v41 setUserActivity:v243];

    sub_100097F34(v236, v238);
  }
  Class v244 = (Class)[v54 siriFoundInAppsData];
  if (v244)
  {
    uint64_t v245 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v247 = v246;

    Class v244 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v245, v247);
  }
  uint64_t v248 = v263;
  [v41 setSiriFoundInAppsData:v244];

  Class v249 = (Class)[v54 lastBannerPresentationDate];
  if (v249)
  {
    v250 = v285;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v251 = v257;
    (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v257, v250, v248);
    v284(v251, 0, 1, v248);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v266)(v251, 1, v248) == 1)
    {
      Class v249 = 0;
    }
    else
    {
      Class v249 = Date._bridgeToObjectiveC()().super.isa;
      v260(v251, v248);
    }
  }
  else
  {
    v284(v257, 1, 1, v248);
  }
  [v41 setLastBannerPresentationDate:v249];

  id v252 = [v54 displayDate];
  [v41 setDisplayDate:v252];

  Class v253 = (Class)[v54 alternativeDisplayDateDate_forCalendar];
  if (v253)
  {
    v254 = v285;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v255 = v264;
    (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v264, v254, v248);
    v284(v255, 0, 1, v248);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v266)(v255, 1, v248) == 1)
    {
      Class v253 = 0;
    }
    else
    {
      Class v253 = Date._bridgeToObjectiveC()().super.isa;
      v260(v255, v248);
    }
  }
  else
  {
    v284(v264, 1, 1, v248);
  }
  [v41 setAlternativeDisplayDateDate_forCalendar:v253];

  swift_release();
  swift_release();
  swift_release();

  return v41;
}

uint64_t sub_10025007C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v7 = a2;
  if (a1)
  {
    id v11 = a1;
    uint64_t v12 = v11;
    if (a3 >> 60 == 15)
    {
      id v13 = [v11 serializedData];
      uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

      id v14 = [v12 attributedString];
      id v15 = [v14 string];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      sub_100097E24(v7, a3);
      id v16 = [v12 replicaIDSource];
      id v17 = objc_allocWithZone((Class)REMCRMergeableStringDocument);
      sub_100097E38(v7, a3);
      id v27 = sub_10028B1B0((uint64_t)v16);
      sub_100097F20(v7, a3);

      id v40 = 0;
      id v28 = [v27 mergedWithDocument:v12 error:&v40];
      if (v28)
      {
        uint64_t v29 = v28;
        id v30 = v40;
        id v31 = [v29 serializedData];
        uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

        id v33 = [v29 attributedString];
        id v34 = [v33 string];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_100097F20(v7, a3);

        return v32;
      }
      else
      {
        id v36 = v40;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_1009071B8 != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        sub_10008E2DC(v18, (uint64_t)qword_100911218);
        id v19 = a6;
        swift_bridgeObjectRetain();
        swift_errorRetain();
        id v20 = v19;
        swift_bridgeObjectRetain();
        swift_errorRetain();
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v21, v22))
        {
          os_log_type_t type = v22;
          uint64_t v23 = swift_slowAlloc();
          uint64_t v37 = (void *)swift_slowAlloc();
          id v40 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 138412802;
          uint64_t v39 = v12;
          id v24 = v20;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v37 = v20;

          *(_WORD *)(v23 + 12) = 2080;
          swift_bridgeObjectRetain();
          sub_1000C51B8(a4, a5, (uint64_t *)&v40);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v23 + 22) = 2080;
          swift_getErrorValue();
          uint64_t v25 = Error.localizedDescription.getter();
          sub_1000C51B8(v25, v26, (uint64_t *)&v40);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v21, type, "Failed to merge documents for reminder {reminder.objectID: %@, key: %s}: %s", (uint8_t *)v23, 0x20u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          sub_100097F20(v7, a3);
        }
        else
        {
          sub_100097F20(v7, a3);

          swift_errorRelease();
          swift_bridgeObjectRelease_n();

          swift_errorRelease();
          swift_errorRelease();
        }
        return 0;
      }
    }
  }
  else
  {
    sub_100097E24(a2, a3);
  }
  return v7;
}

void sub_100250620(void *a1, void *a2, uint64_t a3, unsigned char *a4, unsigned char *a5, void *a6)
{
  unint64_t v80 = a4;
  unint64_t v84 = (unint64_t)a6;
  id v87 = a5;
  uint64_t v86 = type metadata accessor for DateComponents();
  uint64_t v8 = *(void (***)(char *, uint64_t))(v86 - 8);
  *(void *)&double v9 = __chkstk_darwin(v86).n128_u64[0];
  id v85 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [a1 alarms:v9];
  uint64_t v12 = (SEL *)&selRef_intersectsSet_;
  id v81 = a1;
  if (!v11)
  {
    uint64_t v25 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_32;
  }
  id v13 = v11;
  uint64_t v83 = v8;
  *(void *)&long long v78 = a2;
  sub_1000963CC(0, &qword_10090C4B8);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v15 = [a1 accountID];
  id v16 = [a1 objectID];
  type metadata accessor for REMAlarmCDIngestor();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  *(void *)(v17 + 24) = v16;
  sub_10069E860(v14, v17);
  swift_release();
  uint64_t v18 = v14 >> 62;
  if (v14 >> 62) {
    goto LABEL_65;
  }
  uint64_t v19 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  id v20 = _swiftEmptyArrayStorage;
  if (v19)
  {
    uint64_t v89 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v19 < 0)
    {
      __break(1u);
      goto LABEL_70;
    }
    uint64_t v21 = 0;
    do
    {
      if ((v14 & 0xC000000000000001) != 0) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v22 = *(id *)(v14 + 8 * v21 + 32);
      }
      uint64_t v23 = v22;
      ++v21;
      id v24 = [v22 v12[261]];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v19 != v21);
    id v20 = v89;
  }
  uint64_t v25 = sub_100126B08((unint64_t)v20);
  swift_bridgeObjectRelease();
  if (v18)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v26)
    {
LABEL_14:
      if (v26 >= 1)
      {
        uint64_t v82 = v25;
        uint64_t v27 = 0;
        unint64_t v88 = v14 & 0xC000000000000001;
        ++v83;
        id v28 = &selRef_stringFromDate_;
        do
        {
          if (v88) {
            id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v29 = *(id *)(v14 + 8 * v27 + 32);
          }
          id v30 = v29;
          id v31 = [v29 v28[87]];
          self;
          uint64_t v32 = (void *)swift_dynamicCastObjCClass();
          if (v32)
          {
            unint64_t v33 = v14;
            id v34 = v28;
            uint64_t v35 = v26;
            *id v87 = 1;
            id v36 = [v32 dateComponents];
            uint64_t v37 = v85;
            static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v38 = DateComponents.fifteenMinuteBin.getter();
            char v40 = v39;

            (*v83)(v37, v86);
            unint64_t v41 = (void *)v84;
            if (v40) {
              *(void *)unint64_t v84 = -1;
            }
            else {
              *(void *)unint64_t v84 = v38;
            }
            *((unsigned char *)v41 + 8) = 0;
            uint64_t v26 = v35;
            id v28 = v34;
            unint64_t v14 = v33;
          }
          else
          {

            id v42 = [v30 v28[87]];
            self;
            uint64_t v43 = swift_dynamicCastObjCClass();

            if (v43) {
              unsigned char *v80 = 1;
            }
          }
          ++v27;
        }
        while (v26 != v27);
        swift_bridgeObjectRelease();
        uint64_t v25 = v82;
        goto LABEL_31;
      }
LABEL_70:
      __break(1u);
    }
  }
  else
  {
    uint64_t v26 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v26) {
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
LABEL_31:
  a2 = (void *)v78;
LABEL_32:
  uint64_t v44 = [a2 alarmStorage];
  if (v44)
  {
    unint64_t v14 = (unint64_t)v44;
    uint64_t v89 = v44;
    sub_1000963CC(0, (unint64_t *)&unk_100909AC0);
    sub_1000963CC(0, (unint64_t *)&unk_10090B010);
    sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
    unint64_t v45 = Sequence.elements<A>(ofType:)();
    unint64_t v84 = v45;
    id v77 = (id)v14;
    if (v45 >> 62)
    {
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      if (v18) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v18)
      {
LABEL_35:
        uint64_t v47 = 0;
        unint64_t v80 = (unsigned char *)(v84 + 32);
        id v85 = (char *)(v25 & 0xC000000000000001);
        uint64_t v48 = v25 & 0xFFFFFFFFFFFFFF8;
        if (v25 < 0) {
          uint64_t v48 = v25;
        }
        uint64_t v83 = (void (**)(char *, uint64_t))v48;
        id v87 = (unsigned char *)(v25 + 56);
        unint64_t v88 = v84 & 0xC000000000000001;
        *(void *)&long long v46 = 138412546;
        long long v78 = v46;
        uint64_t v82 = v25;
        uint64_t v86 = v18;
        do
        {
          while (1)
          {
            if (v88) {
              id v49 = (SEL *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v49 = (SEL *)*(id *)&v80[8 * v47];
            }
            uint64_t v12 = v49;
            if (__OFADD__(v47++, 1))
            {
              __break(1u);
LABEL_65:
              swift_bridgeObjectRetain();
              uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_4;
            }
            uint64_t v89 = 0;
            id v51 = [(SEL *)v49 remObjectIDWithError:&v89];
            if (!v51)
            {
              id v74 = v89;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v75 = _convertNSErrorToError(_:)();

              uint64_t v79 = v75;
              swift_willThrow();

              goto LABEL_68;
            }
            unint64_t v14 = (unint64_t)v51;
            if (!v85) {
              break;
            }
            unint64_t v52 = v89;
            id v53 = (id)v14;
            char v54 = __CocoaSet.contains(_:)();

            if ((v54 & 1) == 0) {
              goto LABEL_55;
            }
LABEL_38:

            uint64_t v18 = v86;
            if (v47 == v86) {
              goto LABEL_67;
            }
          }
          if (*(void *)(v25 + 16))
          {
            Swift::Int v55 = *(void *)(v25 + 40);
            id v56 = v89;
            Swift::Int v57 = NSObject._rawHashValue(seed:)(v55);
            uint64_t v58 = -1 << *(unsigned char *)(v25 + 32);
            unint64_t v59 = v57 & ~v58;
            if ((*(void *)&v87[(v59 >> 3) & 0xFFFFFFFFFFFFFF8] >> v59))
            {
              sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
              id v60 = *(id *)(*(void *)(v25 + 48) + 8 * v59);
              char v61 = static NSObject.== infix(_:_:)();

              if ((v61 & 1) == 0)
              {
                uint64_t v62 = ~v58;
                while (1)
                {
                  unint64_t v59 = (v59 + 1) & v62;
                  if (((*(void *)&v87[(v59 >> 3) & 0xFFFFFFFFFFFFFF8] >> v59) & 1) == 0) {
                    goto LABEL_55;
                  }
                  id v63 = *(id *)(*(void *)(v25 + 48) + 8 * v59);
                  char v64 = static NSObject.== infix(_:_:)();

                  if (v64) {
                    goto LABEL_38;
                  }
                }
              }
              goto LABEL_38;
            }
          }
          else
          {
            id v65 = v89;
          }
LABEL_55:
          if (qword_1009071B8 != -1) {
            swift_once();
          }
          uint64_t v66 = type metadata accessor for Logger();
          sub_10008E2DC(v66, (uint64_t)qword_100911218);
          id v67 = (id)v14;
          id v68 = v81;
          id v69 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v69, v70))
          {
            uint64_t v71 = swift_slowAlloc();
            id v72 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v71 = v78;
            id v73 = [v68 objectID];
            *(void *)(v71 + 4) = v73;
            *id v72 = v73;

            *(_WORD *)(v71 + 12) = 2112;
            *(void *)(v71 + 14) = v67;
            v72[1] = v14;
            _os_log_impl((void *)&_mh_execute_header, v69, v70, "Removing alarm from reminder {reminder.objectID: %@, alarm.objectID: %@}", (uint8_t *)v71, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            id v69 = v68;
          }
          uint64_t v18 = v86;

          [(SEL *)v12 setReminder:0];
          uint64_t v25 = v82;
        }
        while (v47 != v18);
      }
    }
LABEL_67:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_68:
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void sub_100250F34(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)&stru_1008F6000;
  id v5 = [a1 assignments];
  id v65 = a1;
  if (!v5)
  {
LABEL_6:
    uint64_t v15 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_19;
  }
  uint64_t v6 = v5;
  uint64_t v68 = a2;
  sub_1000963CC(0, (unint64_t *)&unk_10090FFF0);
  sub_1000E4F40(&qword_10090A410, (unint64_t *)&unk_10090FFF0);
  a2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_10020B4D4(v7);
  swift_bridgeObjectRelease();
  id v9 = [a1 accountID];
  id v10 = [a1 objectID];
  type metadata accessor for REMAssignmentCDIngestor();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v9;
  *(void *)(v11 + 24) = v10;
  sub_10069F0A4((unint64_t)v8, v11);
  swift_release();
  swift_release();
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = __CocoaSet.count.getter();
    if (v12)
    {
      uint64_t v4 = v12;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v72 = __CocoaSet.startIndex.getter();
      uint64_t v73 = v13;
      unsigned __int8 v74 = 1;
      unint64_t v14 = &selRef_intersectsSet_;
      if ((v4 & 0x8000000000000000) == 0) {
        goto LABEL_11;
      }
      __break(1u);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v72 = sub_1003CA790(a2);
      uint64_t v73 = v16;
      unsigned __int8 v74 = v17 & 1;
      unint64_t v14 = &selRef_intersectsSet_;
      do
      {
LABEL_11:
        while (1)
        {
          uint64_t v23 = v72;
          uint64_t v24 = v73;
          uint64_t v25 = v74;
          sub_1003CA4C0(v72, v73, v74, a2);
          uint64_t v27 = v26;
          id v28 = [v26 v14[261]];

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if ((a2 & 0xC000000000000001) != 0) {
            break;
          }
          uint64_t v18 = sub_1003C9E34(v23, v24, v25, a2);
          uint64_t v20 = v19;
          char v22 = v21;
          sub_1000E4EA4(v23, v24, v25);
          uint64_t v72 = v18;
          uint64_t v73 = v20;
          unsigned __int8 v74 = v22 & 1;
          unint64_t v14 = &selRef_intersectsSet_;
          if (!--v4) {
            goto LABEL_16;
          }
        }
        if ((v25 & 1) == 0) {
          __break(1u);
        }
        unint64_t v14 = &selRef_intersectsSet_;
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100094134(&qword_1009114E8);
        id v29 = (void (*)(id *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v29(v71, 0);
        --v4;
      }
      while (v4);
LABEL_16:
      sub_1000E4EA4(v72, v73, v74);
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
LABEL_18:
  uint64_t v15 = sub_100126B08((unint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  a2 = v68;
  uint64_t v4 = (uint64_t)&stru_1008F6000;
LABEL_19:
  id v30 = [(id)a2 *(SEL *)(v4 + 3544)];
  if (v30)
  {
    id v31 = v30;
    sub_1000963CC(0, &qword_100910230);
    sub_1000E4F40((unint64_t *)&unk_100914B70, &qword_100910230);
    uint64_t v32 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

    v71[0] = v32;
    sub_100094134(&qword_1009114D8);
    sub_1000967F4(&qword_1009114E0, &qword_1009114D8);
    unint64_t v33 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();
    if (v33 >> 62) {
      goto LABEL_51;
    }
    uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v34)
    {
      uint64_t v35 = 0;
      unint64_t v63 = v33 + 32;
      unint64_t v66 = v15 & 0xC000000000000001;
      uint64_t v69 = v15 + 56;
      unint64_t v70 = v33 & 0xC000000000000001;
      uint64_t v67 = v34;
      uint64_t v64 = v15;
      while (1)
      {
        id v36 = v70 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v63 + 8 * v35);
        unint64_t v33 = (unint64_t)v36;
        if (__OFADD__(v35++, 1)) {
          break;
        }
        v71[0] = 0;
        id v38 = [v36 remObjectIDWithError:v71];
        if (!v38)
        {
          id v62 = v71[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)();

          swift_willThrow();
          return;
        }
        char v39 = v38;
        if (v66)
        {
          id v40 = v71[0];
          id v41 = v39;
          char v42 = __CocoaSet.contains(_:)();

          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
LABEL_23:

          if (v35 == v67) {
            goto LABEL_52;
          }
        }
        else
        {
          if (*(void *)(v15 + 16))
          {
            Swift::Int v43 = *(void *)(v15 + 40);
            id v44 = v71[0];
            Swift::Int v45 = NSObject._rawHashValue(seed:)(v43);
            uint64_t v46 = -1 << *(unsigned char *)(v15 + 32);
            unint64_t v47 = v45 & ~v46;
            if ((*(void *)(v69 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47))
            {
              sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
              id v48 = *(id *)(*(void *)(v15 + 48) + 8 * v47);
              char v49 = static NSObject.== infix(_:_:)();

              if ((v49 & 1) == 0)
              {
                uint64_t v50 = ~v46;
                while (1)
                {
                  unint64_t v47 = (v47 + 1) & v50;
                  if (((*(void *)(v69 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
                    goto LABEL_40;
                  }
                  id v51 = *(id *)(*(void *)(v15 + 48) + 8 * v47);
                  char v52 = static NSObject.== infix(_:_:)();

                  if (v52) {
                    goto LABEL_23;
                  }
                }
              }
              goto LABEL_23;
            }
          }
          else
          {
            id v53 = v71[0];
          }
LABEL_40:
          if (qword_1009071B8 != -1) {
            swift_once();
          }
          uint64_t v54 = type metadata accessor for Logger();
          sub_10008E2DC(v54, (uint64_t)qword_100911218);
          id v55 = v39;
          id v56 = v65;
          Swift::Int v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v57, v58))
          {
            uint64_t v59 = swift_slowAlloc();
            id v60 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v59 = 138412546;
            id v61 = [v56 objectID];
            *(void *)(v59 + 4) = v61;
            *id v60 = v61;

            *(_WORD *)(v59 + 12) = 2112;
            *(void *)(v59 + 14) = v55;
            v60[1] = v39;
            _os_log_impl((void *)&_mh_execute_header, v57, v58, "Removing assignment from reminder {reminder.objectID: %@, assignment.objectID: %@}", (uint8_t *)v59, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            Swift::Int v57 = v56;
          }

          [(id)v33 setReminder:0];
          [(id)v33 setAssignee:0];
          [(id)v33 setOriginator:0];

          uint64_t v15 = v64;
          if (v35 == v67) {
            goto LABEL_52;
          }
        }
      }
      __break(1u);
LABEL_51:
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_52:
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

void sub_1002517E0(void *a1, void *a2, uint64_t a3, BOOL *a4)
{
  id v75 = a2;
  uint64_t v6 = type metadata accessor for NSFastEnumerationIterator();
  unint64_t v78 = *(void *)(v6 - 8);
  *(void *)&double v7 = __chkstk_darwin(v6).n128_u64[0];
  id v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v74 = a1;
  id v10 = [a1 attachments:v7];
  if (!v10)
  {
    uint64_t v77 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_18;
  }
  uint64_t v11 = v10;
  sub_1000963CC(0, (unint64_t *)&unk_100909EB0);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v82 = v12;
  sub_1000963CC(0, (unint64_t *)&qword_1009114F0);
  sub_100094134(&qword_100921BC0);
  sub_1000967F4(&qword_1009114F8, &qword_100921BC0);
  unint64_t v13 = Sequence.elements<A>(ofExactType:)();
  *(void *)&long long v82 = v12;
  sub_1000963CC(0, &qword_100911500);
  unint64_t v14 = Sequence.elements<A>(ofExactType:)();
  unint64_t v15 = v14;
  if (v14 >> 62) {
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *a4 = v16 != 0;
  *(void *)&long long v82 = v12;
  sub_1000963CC(0, &qword_100911508);
  unint64_t v17 = Sequence.elements<A>(ofExactType:)();
  type metadata accessor for REMFileAttachmentCDIngestor();
  uint64_t v18 = swift_allocObject();
  sub_10069F8E8(v13, v18);
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for REMImageAttachmentCDIngestor();
  uint64_t v19 = swift_allocObject();
  sub_1006A012C(v15, v19);
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for REMURLAttachmentCDIngestor();
  uint64_t v20 = swift_allocObject();
  sub_1006A0970(v17, v20);
  swift_release();
  swift_bridgeObjectRelease();
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v21 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v21)
    {
LABEL_6:
      *(void *)&long long v82 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v21 < 0)
      {
        __break(1u);
        return;
      }
      uint64_t v22 = 0;
      do
      {
        if ((v12 & 0xC000000000000001) != 0) {
          id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v23 = *(id *)(v12 + 8 * v22 + 32);
        }
        uint64_t v24 = v23;
        ++v22;
        id v25 = [v23 objectID];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v21 != v22);
      uint64_t v26 = (void *)v82;
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = _swiftEmptyArrayStorage;
LABEL_17:
  uint64_t v77 = sub_100126B08((unint64_t)v26);
  swift_bridgeObjectRelease();
LABEL_18:
  id v27 = [v75 attachments];
  if (v27)
  {
    unint64_t v84 = (unint64_t)_swiftEmptyArrayStorage;
    id v28 = v27;
    NSOrderedSet.makeIterator()();
    id v67 = v28;

    sub_10024D4EC((unint64_t *)&qword_100910238, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
    dispatch thunk of IteratorProtocol.next()();
    while (v83)
    {
      sub_10009A1A0(&v82, v81);
      sub_10009A1B0((uint64_t)v81, (uint64_t)v79);
      sub_1000963CC(0, (unint64_t *)&unk_10090AFC0);
      if ((swift_dynamicCast() & 1) == 0) {
        uint64_t v80 = 0;
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v81);
      if (v80)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    (*(void (**)(char *, uint64_t))(v78 + 8))(v9, v6);
    unint64_t v30 = v84;
    if (v84 >> 62) {
      goto LABEL_65;
    }
    uint64_t v31 = *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v31)
    {
      unint64_t v32 = 0;
      unint64_t v78 = v30 & 0xC000000000000001;
      uint64_t v72 = v30 & 0xFFFFFFFFFFFFFF8;
      unint64_t v71 = v30 + 32;
      unint64_t v76 = v77 & 0xC000000000000001;
      uint64_t v33 = v77 & 0xFFFFFFFFFFFFFF8;
      if (v77 < 0) {
        uint64_t v33 = v77;
      }
      uint64_t v73 = v33;
      uint64_t v68 = v77 + 56;
      *(void *)&long long v29 = 138412546;
      long long v69 = v29;
      unint64_t v70 = v30;
      while (1)
      {
        if (v78)
        {
          uint64_t v35 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v32 >= *(void *)(v72 + 16)) {
            goto LABEL_64;
          }
          uint64_t v35 = *(id *)(v71 + 8 * v32);
        }
        uint64_t v34 = v35;
        if (__OFADD__(v32++, 1)) {
          break;
        }
        uint64_t v37 = [v35 remObjectID];
        if (!v37)
        {
          if (qword_1009071B8 != -1) {
            swift_once();
          }
          uint64_t v41 = type metadata accessor for Logger();
          sub_10008E2DC(v41, (uint64_t)qword_100911218);
          char v42 = v75;
          char v39 = v34;
          uint64_t v34 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v34, v43))
          {
            uint64_t v44 = swift_slowAlloc();
            Swift::Int v45 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v44 = v69;
            id v46 = [v42 objectID];
            *(void *)(v44 + 4) = v46;
            *Swift::Int v45 = v46;

            *(_WORD *)(v44 + 12) = 2112;
            id v47 = [v39 objectID];
            *(void *)(v44 + 14) = v47;
            v45[1] = v47;

            _os_log_impl((void *)&_mh_execute_header, v34, v43, "Can't merge attachment for reminder because cdAttachment.remObjectID is nil {cdReminder.objectID: %@, cdAttachment.objectID: %@}", (uint8_t *)v44, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            unint64_t v30 = v70;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v34 = v42;
          }
          goto LABEL_34;
        }
        id v38 = v37;
        if (v76)
        {
          char v39 = v37;
          char v40 = __CocoaSet.contains(_:)();

          if ((v40 & 1) == 0) {
            goto LABEL_56;
          }
        }
        else
        {
          if (!*(void *)(v77 + 16)) {
            goto LABEL_56;
          }
          uint64_t v48 = v77;
          Swift::Int v49 = NSObject._rawHashValue(seed:)(*(void *)(v77 + 40));
          uint64_t v50 = -1 << *(unsigned char *)(v48 + 32);
          unint64_t v51 = v49 & ~v50;
          if (((*(void *)(v68 + ((v51 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v51) & 1) == 0) {
            goto LABEL_56;
          }
          sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
          id v52 = *(id *)(*(void *)(v77 + 48) + 8 * v51);
          char v53 = static NSObject.== infix(_:_:)();

          if ((v53 & 1) == 0)
          {
            uint64_t v54 = ~v50;
            unint64_t v55 = (v51 + 1) & v54;
            if (((*(void *)(v68 + ((v55 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v55) & 1) == 0) {
              goto LABEL_56;
            }
            id v56 = *(id *)(*(void *)(v77 + 48) + 8 * v55);
            char v57 = static NSObject.== infix(_:_:)();

            if ((v57 & 1) == 0)
            {
              while (1)
              {
                unint64_t v55 = (v55 + 1) & v54;
                if (((*(void *)(v68 + ((v55 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v55) & 1) == 0) {
                  break;
                }
                id v58 = *(id *)(*(void *)(v77 + 48) + 8 * v55);
                char v59 = static NSObject.== infix(_:_:)();

                if (v59) {
                  goto LABEL_55;
                }
              }
LABEL_56:
              if (qword_1009071B8 != -1) {
                swift_once();
              }
              uint64_t v60 = type metadata accessor for Logger();
              sub_10008E2DC(v60, (uint64_t)qword_100911218);
              char v39 = v38;
              id v61 = v74;
              id v62 = Logger.logObject.getter();
              os_log_type_t v63 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v62, v63))
              {
                uint64_t v64 = swift_slowAlloc();
                id v65 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v64 = v69;
                id v66 = [v61 objectID];
                *(void *)(v64 + 4) = v66;
                void *v65 = v66;

                *(_WORD *)(v64 + 12) = 2112;
                *(void *)(v64 + 14) = v39;
                v65[1] = v38;
                _os_log_impl((void *)&_mh_execute_header, v62, v63, "Removing attachment from reminder {reminder.objectID: %@, attachment.objectID: %@}", (uint8_t *)v64, 0x16u);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                unint64_t v30 = v70;
                swift_slowDealloc();
              }
              else
              {

                id v62 = v61;
              }

              [v34 setReminder:0];
              goto LABEL_34;
            }
          }
LABEL_55:
          char v39 = v38;
        }
LABEL_34:

        if (v32 == v31) {
          goto LABEL_66;
        }
      }
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void sub_1002522D4(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = [a1 hashtags];
  unint64_t v88 = a1;
  if (!v9) {
    goto LABEL_6;
  }
  id v10 = v9;
  uint64_t v83 = a4;
  unint64_t v84 = a5;
  uint64_t v85 = a2;
  sub_1000963CC(0, &qword_10090DC80);
  sub_1000E4F40((unint64_t *)&qword_10090B7C0, &qword_10090DC80);
  uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = swift_bridgeObjectRetain();
  unint64_t v13 = sub_10020B528(v12);
  swift_bridgeObjectRelease();
  id v14 = [a1 accountID];
  id v15 = [a1 objectID];
  type metadata accessor for REMHashtagCDIngestor();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  *(void *)(v16 + 24) = v15;
  sub_10069B724((unint64_t)v13, v16);
  swift_release();
  swift_release();
  unint64_t v17 = v11 & 0xC000000000000001;
  if ((v11 & 0xC000000000000001) != 0)
  {
    uint64_t v18 = __CocoaSet.count.getter();
    if (v18)
    {
      a2 = v18;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v99 = __CocoaSet.startIndex.getter();
      uint64_t v100 = v19;
      unsigned __int8 v101 = 1;
      if ((a2 & 0x8000000000000000) == 0) {
        goto LABEL_11;
      }
      __break(1u);
LABEL_6:
      uint64_t v11 = (uint64_t)&_swiftEmptySetSingleton;
      goto LABEL_58;
    }
  }
  else
  {
    a2 = *(void *)(v11 + 16);
    if (a2)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v99 = sub_1003CA790(v11);
      uint64_t v100 = v20;
      unsigned __int8 v101 = v21 & 1;
      do
      {
LABEL_11:
        while (1)
        {
          uint64_t v27 = v99;
          uint64_t v28 = v100;
          uint64_t v29 = v101;
          sub_1003CA484(v99, v100, v101, v11);
          uint64_t v31 = v30;
          id v32 = [v30 objectID];

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if (v17) {
            break;
          }
          uint64_t v22 = sub_1003C9E34(v27, v28, v29, v11);
          uint64_t v24 = v23;
          char v26 = v25;
          sub_1000E4EA4(v27, v28, v29);
          uint64_t v99 = v22;
          uint64_t v100 = v24;
          unsigned __int8 v101 = v26 & 1;
          if (!--a2) {
            goto LABEL_16;
          }
        }
        if ((v29 & 1) == 0) {
          goto LABEL_93;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100094134(&qword_10090C4C0);
        uint64_t v33 = (void (*)(id *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v33(v98, 0);
        --a2;
      }
      while (a2);
LABEL_16:
      sub_1000E4EA4(v99, v100, v101);
    }
  }
  uint64_t v90 = sub_100126B08((unint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  if (v17)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    uint64_t v11 = v102;
    uint64_t v96 = v103;
    uint64_t v34 = v104;
    uint64_t v35 = v105;
    uint64_t v36 = v106;
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v37 = -1 << *(unsigned char *)(v11 + 32);
    uint64_t v96 = v11 + 56;
    uint64_t v34 = ~v37;
    uint64_t v38 = -v37;
    if (v38 < 64) {
      uint64_t v39 = ~(-1 << v38);
    }
    else {
      uint64_t v39 = -1;
    }
    uint64_t v36 = v39 & *(void *)(v11 + 56);
  }
  uint64_t v40 = 0;
  uint64_t v89 = 0;
  uint64_t v82 = v34;
  int64_t v94 = (unint64_t)(v34 + 64) >> 6;
  while (2)
  {
    uint64_t v87 = v40;
LABEL_25:
    uint64_t v41 = v35;
    unint64_t v42 = v36;
    do
    {
      if (v11 < 0)
      {
        uint64_t v44 = __CocoaSet.Iterator.next()();
        if (!v44) {
          goto LABEL_57;
        }
        uint64_t v99 = v44;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v45 = v98[0];
        swift_unknownObjectRelease();
        uint64_t v35 = v41;
        uint64_t v36 = v42;
        if (!v45) {
          goto LABEL_57;
        }
      }
      else
      {
        if (v42)
        {
          uint64_t v36 = (v42 - 1) & v42;
          unint64_t v43 = __clz(__rbit64(v42)) | (v41 << 6);
          uint64_t v35 = v41;
        }
        else
        {
          uint64_t v35 = v41 + 1;
          if (__OFADD__(v41, 1)) {
            goto LABEL_89;
          }
          if (v35 >= v94) {
            goto LABEL_57;
          }
          unint64_t v46 = *(void *)(v96 + 8 * v35);
          if (!v46)
          {
            uint64_t v47 = v41 + 2;
            if (v41 + 2 >= v94) {
              goto LABEL_57;
            }
            unint64_t v46 = *(void *)(v96 + 8 * v47);
            if (v46) {
              goto LABEL_39;
            }
            uint64_t v47 = v41 + 3;
            if (v41 + 3 >= v94) {
              goto LABEL_57;
            }
            unint64_t v46 = *(void *)(v96 + 8 * v47);
            if (v46)
            {
LABEL_39:
              uint64_t v35 = v47;
            }
            else
            {
              uint64_t v35 = v41 + 4;
              if (v41 + 4 >= v94) {
                goto LABEL_57;
              }
              unint64_t v46 = *(void *)(v96 + 8 * v35);
              if (!v46)
              {
                uint64_t v49 = v41 + 5;
                do
                {
                  if (v94 == v49) {
                    goto LABEL_57;
                  }
                  unint64_t v46 = *(void *)(v96 + 8 * v49++);
                }
                while (!v46);
                uint64_t v35 = v49 - 1;
              }
            }
          }
          uint64_t v36 = (v46 - 1) & v46;
          unint64_t v43 = __clz(__rbit64(v46)) + (v35 << 6);
        }
        id v45 = *(id *)(*(void *)(v11 + 48) + 8 * v43);
        if (!v45) {
          goto LABEL_57;
        }
      }
      id v48 = [v45 type:v82];

      if (!v48)
      {
        BOOL v50 = __OFADD__(v89++, 1);
        if (v50)
        {
          __break(1u);
LABEL_93:
          __break(1u);
        }
        goto LABEL_25;
      }
      uint64_t v41 = v35;
      unint64_t v42 = v36;
    }
    while (v48 != (id)1);
    uint64_t v40 = v87 + 1;
    if (!__OFADD__(v87, 1)) {
      continue;
    }
    break;
  }
  __break(1u);
LABEL_57:
  sub_1000C1AF8();
  uint64_t v11 = v90;
  *uint64_t v83 = v89;
  a2 = v85;
  *unint64_t v84 = v87;
LABEL_58:
  id v51 = [a2 hashtags:v82];
  if (v51)
  {
    id v52 = v51;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
    char v53 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

    v98[0] = v53;
    sub_100094134(&qword_10090BFA8);
    sub_1000967F4(&qword_10090BFB0, &qword_10090BFA8);
    uint64_t v35 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();
    if ((unint64_t)v35 >> 62) {
      goto LABEL_90;
    }
    uint64_t v54 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v54)
    {
      uint64_t v55 = 0;
      unint64_t v92 = v11 & 0xC000000000000001;
      uint64_t v86 = v35 + 32;
      uint64_t v95 = v11 + 56;
      unint64_t v97 = v35 & 0xC000000000000001;
      uint64_t v93 = v54;
      uint64_t v91 = v11;
      while (1)
      {
        id v56 = v97 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v86 + 8 * v55);
        uint64_t v35 = (uint64_t)v56;
        BOOL v50 = __OFADD__(v55++, 1);
        if (v50) {
          break;
        }
        v98[0] = 0;
        id v57 = [v56 remObjectIDWithError:v98];
        if (!v57)
        {
          id v81 = v98[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)();

          swift_willThrow();
          return;
        }
        id v58 = v57;
        if (v92)
        {
          id v59 = v98[0];
          id v60 = v58;
          char v61 = __CocoaSet.contains(_:)();

          if ((v61 & 1) == 0) {
            goto LABEL_79;
          }
LABEL_62:

          if (v55 == v93) {
            goto LABEL_91;
          }
        }
        else
        {
          if (*(void *)(v11 + 16))
          {
            Swift::Int v62 = *(void *)(v11 + 40);
            id v63 = v98[0];
            Swift::Int v64 = NSObject._rawHashValue(seed:)(v62);
            uint64_t v65 = -1 << *(unsigned char *)(v11 + 32);
            unint64_t v66 = v64 & ~v65;
            if ((*(void *)(v95 + ((v66 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v66))
            {
              sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
              id v67 = *(id *)(*(void *)(v11 + 48) + 8 * v66);
              char v68 = static NSObject.== infix(_:_:)();

              if ((v68 & 1) == 0)
              {
                uint64_t v69 = ~v65;
                while (1)
                {
                  unint64_t v66 = (v66 + 1) & v69;
                  if (((*(void *)(v95 + ((v66 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v66) & 1) == 0) {
                    goto LABEL_79;
                  }
                  id v70 = *(id *)(*(void *)(v11 + 48) + 8 * v66);
                  char v71 = static NSObject.== infix(_:_:)();

                  if (v71) {
                    goto LABEL_62;
                  }
                }
              }
              goto LABEL_62;
            }
          }
          else
          {
            id v72 = v98[0];
          }
LABEL_79:
          if (qword_1009071B8 != -1) {
            swift_once();
          }
          uint64_t v73 = type metadata accessor for Logger();
          sub_10008E2DC(v73, (uint64_t)qword_100911218);
          id v74 = v58;
          id v75 = v88;
          unint64_t v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v78 = swift_slowAlloc();
            uint64_t v79 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v78 = 138412546;
            id v80 = [v75 objectID];
            *(void *)(v78 + 4) = v80;
            *uint64_t v79 = v80;

            *(_WORD *)(v78 + 12) = 2112;
            *(void *)(v78 + 14) = v74;
            v79[1] = v58;
            _os_log_impl((void *)&_mh_execute_header, v76, v77, "Removing hashtag from reminder {reminder.objectID: %@, hashtag.objectID: %@}", (uint8_t *)v78, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            unint64_t v76 = v75;
          }

          [(id)v35 setReminder:0];
          uint64_t v11 = v91;
          if (v55 == v93) {
            goto LABEL_91;
          }
        }
      }
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      swift_bridgeObjectRetain();
      uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_91:
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

void sub_100252D90(void *a1, void *a2)
{
  id v67 = a2;
  uint64_t v3 = type metadata accessor for NSFastEnumerationIterator();
  unint64_t v4 = *(void *)(v3 - 8);
  *(void *)&double v5 = __chkstk_darwin(v3).n128_u64[0];
  double v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = &selRef_willSave;
  id v66 = a1;
  id v9 = [a1 recurrenceRules:v5];
  if (!v9)
  {
    uint64_t v69 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_15;
  }
  id v10 = v9;
  sub_1000963CC(0, (unint64_t *)&qword_100911840);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for REMRecurrenceRuleCDIngestor();
  uint64_t v12 = swift_allocObject();
  sub_1006A11A0(v11, v12);
  swift_release();
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13)
    {
LABEL_4:
      *(void *)&long long v74 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v13 < 0)
      {
        __break(1u);
        return;
      }
      unint64_t v70 = v4;
      uint64_t v14 = 0;
      do
      {
        if ((v11 & 0xC000000000000001) != 0) {
          id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v15 = *(id *)(v11 + 8 * v14 + 32);
        }
        uint64_t v16 = v15;
        ++v14;
        id v17 = [v15 objectID];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v13 != v14);
      uint64_t v18 = (void *)v74;
      swift_bridgeObjectRelease();
      unint64_t v4 = v70;
      uint64_t v8 = &selRef_willSave;
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = _swiftEmptyArrayStorage;
LABEL_14:
  uint64_t v69 = sub_100126B08((unint64_t)v18);
  swift_bridgeObjectRelease();
LABEL_15:
  id v19 = [v67 v8[300]];
  if (v19)
  {
    unint64_t v76 = (unint64_t)_swiftEmptyArrayStorage;
    id v20 = v19;
    NSOrderedSet.makeIterator()();
    id v59 = v20;

    sub_10024D4EC((unint64_t *)&qword_100910238, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
    dispatch thunk of IteratorProtocol.next()();
    while (v75)
    {
      sub_10009A1A0(&v74, v73);
      sub_10009A1B0((uint64_t)v73, (uint64_t)v71);
      sub_1000963CC(0, (unint64_t *)&qword_100911820);
      if ((swift_dynamicCast() & 1) == 0) {
        uint64_t v72 = 0;
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v73);
      if (v72)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    unint64_t v22 = v76;
    if (v76 >> 62) {
      goto LABEL_64;
    }
    uint64_t v23 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v23)
    {
      unint64_t v24 = 0;
      unint64_t v70 = v22 & 0xC000000000000001;
      uint64_t v64 = v22 & 0xFFFFFFFFFFFFFF8;
      unint64_t v63 = v22 + 32;
      unint64_t v68 = v69 & 0xC000000000000001;
      uint64_t v25 = v69 & 0xFFFFFFFFFFFFFF8;
      if (v69 < 0) {
        uint64_t v25 = v69;
      }
      uint64_t v65 = v25;
      uint64_t v60 = v69 + 56;
      *(void *)&long long v21 = 138412546;
      long long v61 = v21;
      unint64_t v62 = v22;
      while (1)
      {
        if (v70)
        {
          uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v24 >= *(void *)(v64 + 16)) {
            goto LABEL_63;
          }
          uint64_t v27 = *(id *)(v63 + 8 * v24);
        }
        char v26 = v27;
        if (__OFADD__(v24++, 1)) {
          break;
        }
        uint64_t v29 = [v27 remObjectID];
        if (!v29)
        {
          if (qword_1009071B8 != -1) {
            swift_once();
          }
          uint64_t v33 = type metadata accessor for Logger();
          sub_10008E2DC(v33, (uint64_t)qword_100911218);
          uint64_t v34 = v67;
          uint64_t v31 = v26;
          char v26 = Logger.logObject.getter();
          os_log_type_t v35 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v26, v35))
          {
            uint64_t v36 = swift_slowAlloc();
            uint64_t v37 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v36 = v61;
            id v38 = [v34 objectID];
            *(void *)(v36 + 4) = v38;
            void *v37 = v38;

            *(_WORD *)(v36 + 12) = 2112;
            id v39 = [v31 objectID];
            *(void *)(v36 + 14) = v39;
            v37[1] = v39;

            _os_log_impl((void *)&_mh_execute_header, v26, v35, "Can't merge recurrence rule for reminder because cdRecurrenceRule.remObjectID is nil {cdReminder.objectID: %@, cdRecurrenceRule.objectID: %@}", (uint8_t *)v36, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            unint64_t v22 = v62;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            char v26 = v34;
          }
          goto LABEL_31;
        }
        unint64_t v30 = v29;
        if (v68)
        {
          uint64_t v31 = v29;
          char v32 = __CocoaSet.contains(_:)();

          if ((v32 & 1) == 0) {
            goto LABEL_53;
          }
        }
        else
        {
          if (!*(void *)(v69 + 16)) {
            goto LABEL_53;
          }
          uint64_t v40 = v69;
          Swift::Int v41 = NSObject._rawHashValue(seed:)(*(void *)(v69 + 40));
          uint64_t v42 = -1 << *(unsigned char *)(v40 + 32);
          unint64_t v43 = v41 & ~v42;
          if (((*(void *)(v60 + ((v43 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v43) & 1) == 0) {
            goto LABEL_53;
          }
          sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
          id v44 = *(id *)(*(void *)(v69 + 48) + 8 * v43);
          char v45 = static NSObject.== infix(_:_:)();

          if ((v45 & 1) == 0)
          {
            uint64_t v46 = ~v42;
            unint64_t v47 = (v43 + 1) & v46;
            if (((*(void *)(v60 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
              goto LABEL_53;
            }
            id v48 = *(id *)(*(void *)(v69 + 48) + 8 * v47);
            char v49 = static NSObject.== infix(_:_:)();

            if ((v49 & 1) == 0)
            {
              while (1)
              {
                unint64_t v47 = (v47 + 1) & v46;
                if (((*(void *)(v60 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
                  break;
                }
                id v50 = *(id *)(*(void *)(v69 + 48) + 8 * v47);
                char v51 = static NSObject.== infix(_:_:)();

                if (v51) {
                  goto LABEL_52;
                }
              }
LABEL_53:
              if (qword_1009071B8 != -1) {
                swift_once();
              }
              uint64_t v52 = type metadata accessor for Logger();
              sub_10008E2DC(v52, (uint64_t)qword_100911218);
              uint64_t v31 = v30;
              char v53 = v66;
              uint64_t v54 = Logger.logObject.getter();
              os_log_type_t v55 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v54, v55))
              {
                uint64_t v56 = swift_slowAlloc();
                id v57 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v56 = v61;
                id v58 = [v53 objectID];
                *(void *)(v56 + 4) = v58;
                *id v57 = v58;

                *(_WORD *)(v56 + 12) = 2112;
                *(void *)(v56 + 14) = v31;
                v57[1] = v30;
                _os_log_impl((void *)&_mh_execute_header, v54, v55, "Removing recurrenceRule from reminder {reminder.objectID: %@, recurrenceRule.objectID: %@}", (uint8_t *)v56, 0x16u);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                unint64_t v22 = v62;
                swift_slowDealloc();
              }
              else
              {

                uint64_t v54 = v53;
              }

              [v26 setReminder:0];
              goto LABEL_31;
            }
          }
LABEL_52:
          uint64_t v31 = v30;
        }
LABEL_31:

        if (v24 == v23) {
          goto LABEL_65;
        }
      }
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_65:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void sub_100253730(void *a1, void *a2)
{
  double v5 = sub_1002498B0();
  if (!v2)
  {
    uint64_t v6 = v5;
    id v7 = [a1 dueDateDeltaAlertsToUpsert];
    if (v7)
    {
      uint64_t v8 = v7;
      sub_1000963CC(0, (unint64_t *)&unk_100920C30);
      id v9 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      id v9 = 0;
    }
    id v10 = [a1 dueDateDeltaAlertIdentifiersToDelete];
    if (v10)
    {
      unint64_t v11 = v10;
      type metadata accessor for UUID();
      sub_10024D4EC((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v12 = 0;
    }
    char v13 = sub_10024C1A0(v9, v12, v6);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13)
    {
      if (qword_1009071B8 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_10008E2DC(v16, (uint64_t)qword_100911218);
      id v17 = a2;
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        id v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        *(_DWORD *)id v20 = 136446210;
        char v45 = v17;
        id v21 = [v17 remObjectID];
        if (v21)
        {
          unint64_t v22 = v21;
          id v23 = [v21 description];

          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v26 = v25;
        }
        else
        {
          uint64_t v24 = 7104878;
          unint64_t v26 = 0xE300000000000000;
        }
        sub_1000C51B8(v24, v26, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v17 = v45;

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "REMReminderStorageCDIngestor.mergeDueDateDeltaAlerts: Setting 'cdReminder.dueDateDeltaAlertsData' {reminderID: %{public}s}", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        if (_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v38 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v38)
        {
LABEL_27:
          id v39 = (void *)sub_1000C9EA8(v15);
          uint64_t v46 = (uint64_t)v39;
          type metadata accessor for RDDueDateDeltaAlerts();
          sub_10024D4EC(&qword_10090C4C8, (void (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlerts);
          uint64_t v40 = REMJSONRepresentable.toJSONData()();
          unint64_t v42 = v41;
          sub_100097E38(v40, v41);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F34(v40, v42);
          [v17 setDueDateDeltaAlertsData:isa];

          [v17 setCachedDeserializedDueDateDeltaAlerts:v39];
          sub_100097F34(v40, v42);
          swift_bridgeObjectRelease();

LABEL_32:
          sub_1000963CC(0, (unint64_t *)&unk_100920C30);
          Class v44 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [a1 setFetchedDueDateDeltaAlerts:v44];

          return;
        }
      }
      [v17 setDueDateDeltaAlertsData:0];
      [v17 setCachedDeserializedDueDateDeltaAlerts:0];
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    swift_bridgeObjectRelease();
    if (qword_1009071B8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E2DC(v27, (uint64_t)qword_100911218);
    id v28 = a2;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      id v32 = [v28 remObjectID];
      if (v32)
      {
        uint64_t v33 = v32;
        id v34 = [v32 description];

        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;
      }
      else
      {
        uint64_t v35 = 7104878;
        unint64_t v37 = 0xE300000000000000;
      }
      sub_1000C51B8(v35, v37, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "REMReminderStorageCDIngestor.mergeDueDateDeltaAlerts: Noop to 'cdReminder.dueDateDeltaAlertsData' {reminderID: %s}", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_100253E00(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  double v5 = v4;
  uint64_t v263 = a4;
  uint64_t v9 = type metadata accessor for Calendar();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v255 = (char *)&v217 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v243 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v243 - 8);
  __chkstk_darwin(v243);
  uint64_t v235 = (char *)&v217 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v14 - 8);
  long long v242 = (char *)&v217 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v257 = type metadata accessor for DateComponents();
  uint64_t v261 = *(void *)(v257 - 8);
  __chkstk_darwin(v257);
  v254 = (char *)&v217 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  Class v244 = (char *)&v217 - v18;
  uint64_t v19 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v19 - 8);
  uint64_t v241 = (char *)&v217 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v240 = (char *)&v217 - v22;
  uint64_t v247 = type metadata accessor for CharacterSet();
  uint64_t v23 = *(void *)(v247 - 8);
  __chkstk_darwin(v247);
  unint64_t v246 = (char *)&v217 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v262 = type metadata accessor for Date();
  uint64_t v260 = *(void *)(v262 - 8);
  __chkstk_darwin(v262);
  id v259 = (char *)&v217 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v26 - 8);
  id v239 = (char *)&v217 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  unint64_t v238 = (char *)&v217 - v29;
  __chkstk_darwin(v30);
  unint64_t v237 = (char *)&v217 - v31;
  __chkstk_darwin(v32);
  uint64_t v236 = (char *)&v217 - v33;
  __chkstk_darwin(v34);
  Class v253 = (char *)&v217 - v35;
  uint64_t v258 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v258 - 8);
  *(void *)&double v37 = __chkstk_darwin(v258).n128_u64[0];
  id v252 = (char *)&v217 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v266 = a2;
  id v39 = [a2 createResolutionTokenMapIfNecessary:v37];
  id v40 = [a1 resolutionTokenMap];
  id v265 = v39;
  if (!v40)
  {
    if (qword_1009071B8 != -1) {
      swift_once();
    }
    uint64_t v169 = type metadata accessor for Logger();
    sub_10008E2DC(v169, (uint64_t)qword_100911218);
    swift_bridgeObjectRetain_n();
    id v170 = a1;
    id v171 = Logger.logObject.getter();
    int v172 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v171, (os_log_type_t)v172))
    {
      LODWORD(v270) = v172;
      uint64_t v173 = swift_slowAlloc();
      id v174 = swift_slowAlloc();
      uint64_t v175 = (void *)swift_slowAlloc();
      v272[0] = (uint64_t)v175;
      *(_DWORD *)uint64_t v173 = 138543618;
      uint64_t v176 = (objc_class *)[v170 objectID];
      uint64_t v250 = a3;
      uint64_t v177 = v176;
      uint64_t v275 = v176;
      uint64_t v269 = &v276;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v271 = v174;
      v174->Class isa = v177;
      uint64_t v178 = v250;

      *(_WORD *)(v173 + 12) = 2082;
      int64_t v179 = *(void *)(v178 + 16);
      if (v179)
      {
        id v267 = v175;
        unint64_t v268 = v171;
        uint64_t v275 = _swiftEmptyArrayStorage;
        sub_1001DE058(0, v179, 0);
        uint64_t v180 = v275;
        char v181 = (char *)(v178 + 32);
        unint64_t v182 = v275[2];
        uint64_t v183 = 2 * v182;
        do
        {
          char v184 = *v181++;
          uint64_t v185 = sub_10024776C(v184);
          uint64_t v187 = v186;
          uint64_t v275 = v180;
          unint64_t v188 = v180[3];
          if (v182 >= v188 >> 1)
          {
            sub_1001DE058(v188 > 1, v182 + 1, 1);
            uint64_t v180 = v275;
          }
          v180[2] = v182 + 1;
          unint64_t v189 = &v180[v183];
          v189[4] = v185;
          v189[5] = v187;
          v183 += 2;
          ++v182;
          --v179;
        }
        while (v179);
        id v39 = v265;
        id v171 = v268;
      }
      uint64_t v211 = Array.description.getter();
      unint64_t v213 = v212;
      swift_bridgeObjectRelease();
      uint64_t v275 = (void *)sub_1000C51B8(v211, v213, v272);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v171, (os_log_type_t)v270, "REMReminderStorageCDIngestor: merge(storage:into cdReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v173, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v214 = self;
    sub_1000963CC(0, &qword_1009100F8);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v216 = String._bridgeToObjectiveC()();
    [v214 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v216];

    swift_willThrow();
    return;
  }
  uint64_t v245 = v10;
  uint64_t v248 = v9;
  id v249 = v40;
  id v267 = sub_1004801A8(v40, a3);
  __int16 v291 = 0;
  uint64_t v274 = 0;
  uint64_t v275 = 0;
  char v276 = 1;
  BOOL v290 = 0;
  uint64_t v273 = 0;
  unint64_t v41 = *(NSObject **)(a3 + 16);
  uint64_t v264 = a1;
  if (!v41)
  {
    uint64_t v234 = 0;
    unint64_t v251 = 0xE000000000000000;
    uint64_t v191 = v248;
    goto LABEL_186;
  }
  uint64_t v269 = v5;
  uint64_t v270 = a3 + 32;
  id v226 = (void (**)(char *, uint64_t))(v23 + 8);
  Class v230 = (void (**)(char *, char *, uint64_t))(v260 + 32);
  unint64_t v233 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v260 + 56);
  v229 = (unsigned int (**)(char *, uint64_t, uint64_t))(v260 + 48);
  uint64_t v227 = (void (**)(char *, uint64_t))(v260 + 8);
  unint64_t v232 = (void (**)(char *, uint64_t))(v36 + 8);
  Class v220 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  id v221 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  unint64_t v219 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v217 = (void (**)(char *, uint64_t))(v12 + 8);
  id v223 = (void (**)(char *, char *, uint64_t))(v261 + 32);
  uint64_t v224 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v261 + 56);
  uint64_t v222 = (unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48);
  unint64_t v218 = (void (**)(char *, uint64_t))(v261 + 8);
  uint64_t v250 = a3;
  swift_bridgeObjectRetain();
  int v289 = 0;
  uint64_t v234 = 0;
  unint64_t v42 = 0;
  uint64_t v225 = ((char *)v41 - 1);
  unint64_t v251 = 0xE000000000000000;
  *(void *)&long long v43 = 136315138;
  long long v231 = v43;
  uint64_t v228 = (char *)&type metadata for Any + 8;
  unint64_t v256 = (unint64_t)"daIsNotificationsCollection";
  id v44 = v266;
  uint64_t v45 = v263;
  uint64_t v46 = v41;
  unint64_t v268 = v41;
LABEL_4:
  if (v42 <= v46) {
    unint64_t v47 = v46;
  }
  else {
    unint64_t v47 = v42;
  }
  uint64_t v271 = v47;
  uint64_t v48 = v270;
  while (2)
  {
    if (v271 == v42)
    {
      __break(1u);
LABEL_197:
      swift_bridgeObjectRelease();
      uint64_t v190 = v269;
      uint64_t v191 = v248;
      goto LABEL_182;
    }
    int v55 = *((unsigned __int8 *)&v42->isa + v48);
    switch(*((unsigned char *)&v42->isa + v48))
    {
      case 0:
        id v49 = [a1 objectID];
        id v50 = [v49 uuid];

        char v51 = v252;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v52.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        uint64_t v48 = v270;
        Class isa = v52.super.isa;
        uint64_t v54 = v51;
        uint64_t v46 = v268;
        (*v232)(v54, v258);
        [v44 setIdentifier:isa];
        goto LABEL_9;
      case 1:
        Class isa = (Class)[a1 daCalendarItemUniqueIdentifier];
        [v44 setDaCalendarItemUniqueIdentifier:isa];
        goto LABEL_9;
      case 2:
        Class isa = (Class)[a1 externalIdentifier];
        [v44 setExternalIdentifier:isa];
        goto LABEL_9;
      case 3:
        Class isa = (Class)[a1 externalModificationTag];
        [v44 setExternalModificationTag:isa];
        goto LABEL_9;
      case 4:
        Class isa = (Class)[a1 daSyncToken];
        [v44 setDaSyncToken:isa];
        goto LABEL_9;
      case 5:
        Class isa = (Class)[a1 daPushKey];
        [v44 setDaPushKey:isa];
        goto LABEL_9;
      case 6:
        if (qword_1009071C8 != -1) {
          swift_once();
        }
        unint64_t v56 = v256 | 0x8000000000000000;
        if (!*(void *)(qword_1009420D0 + 16)) {
          goto LABEL_62;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(0xD000000000000017, v56);
        if (v57)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_62:
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v103 = type metadata accessor for Logger();
          sub_10008E2DC(v103, (uint64_t)qword_100917690);
          uint64_t v104 = Logger.logObject.getter();
          os_log_type_t v105 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v104, v105))
          {
            uint64_t v106 = swift_slowAlloc();
            v272[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v106 = v231;
            *(void *)(v106 + 4) = sub_1000C51B8(0xD000000000000017, v256 | 0x8000000000000000, v272);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v104, v105, "Unknown ingestable key {key: %s}", (uint8_t *)v106, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            id v44 = v266;
            swift_slowDealloc();
          }
        }
        NSString v107 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned __int8 v108 = [v39 mergeWithMap:v267 forKey:v107];

        if (v108) {
          [v44 setMinimumSupportedVersion:[a1 minimumSupportedVersion]];
        }
        goto LABEL_97;
      case 7:
      case 0x14:
      case 0x1A:
        goto LABEL_10;
      case 8:
        id v58 = [a1 titleDocument];
        uint64_t v59 = sub_10047DD5C(8);
        long long v61 = sub_10024938C(v58, v59, v60, (uint64_t)v267, *(unsigned char *)(v45 + 16));
        unint64_t v63 = v62;
        uint64_t v65 = v64;
        uint64_t v67 = v66;

        swift_bridgeObjectRelease();
        if (v67 == 1)
        {
          id v39 = v265;
          a1 = v264;
          id v44 = v266;
          goto LABEL_97;
        }
        if (v63 >> 60 == 15)
        {
          Class v101 = 0;
        }
        else
        {
          sub_100097E38((uint64_t)v61, v63);
          Class v101 = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F20((uint64_t)v61, v63);
        }
        id v39 = v265;
        id v115 = v266;
        [v266 setTitleDocument:v101];

        if (!v67)
        {
          sub_100097F20((uint64_t)v61, v63);
          a1 = v264;
          id v44 = v115;
          goto LABEL_96;
        }
        NSString v116 = String._bridgeToObjectiveC()();
        [v115 setTitle:v116];

        v272[0] = v65;
        v272[1] = v67;
        uint64_t v117 = v246;
        static CharacterSet.whitespacesAndNewlines.getter();
        sub_1000E4FD8();
        uint64_t v118 = StringProtocol.trimmingCharacters(in:)();
        unint64_t v120 = v119;
        (*v226)(v117, v247);
        sub_100097F20((uint64_t)v61, v63);
        swift_bridgeObjectRelease();
        uint64_t v121 = HIBYTE(v120) & 0xF;
        if ((v120 & 0x2000000000000000) == 0) {
          uint64_t v121 = v118 & 0xFFFFFFFFFFFFLL;
        }
        if (v121)
        {
          swift_bridgeObjectRelease();
          uint64_t v234 = v65;
          unint64_t v251 = v67;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        goto LABEL_95;
      case 0xF:
        sub_100252D90(a1, v44);
        goto LABEL_10;
      case 0x15:
        id v73 = [a1 notesDocument];
        uint64_t v74 = sub_10047DD5C(21);
        unint64_t v76 = sub_10024938C(v73, v74, v75, (uint64_t)v267, *(unsigned char *)(v45 + 16));
        unint64_t v78 = v77;
        uint64_t v80 = v79;

        swift_bridgeObjectRelease();
        if (v80 == 1)
        {
          id v39 = v265;
LABEL_95:
          a1 = v264;
          id v44 = v266;
        }
        else
        {
          if (v78 >> 60 == 15)
          {
            Class v102 = 0;
          }
          else
          {
            sub_100097E38((uint64_t)v76, v78);
            Class v102 = Data._bridgeToObjectiveC()().super.isa;
            sub_100097F20((uint64_t)v76, v78);
          }
          id v39 = v265;
          id v44 = v266;
          [v266 setNotesDocument:v102];

          if (v80)
          {
            NSString v122 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v44 setNotes:v122];
            sub_100097F20((uint64_t)v76, v78);
          }
          else
          {
            sub_100097F20((uint64_t)v76, v78);
          }
          a1 = v264;
        }
LABEL_96:
        uint64_t v45 = v263;
LABEL_97:
        uint64_t v46 = v268;
        uint64_t v48 = v270;
        goto LABEL_10;
      case 0x16:
        sub_1002517E0(a1, v44, v45, &v290);
        goto LABEL_10;
      case 0x17:
        id v81 = v269;
        sub_100250620(a1, v44, v45, (unsigned char *)&v291 + 1, &v291, &v275);
        uint64_t v82 = v81;
        if (v81) {
          goto LABEL_194;
        }
        goto LABEL_39;
      case 0x18:
        uint64_t v83 = v269;
        sub_100250F34(a1, (uint64_t)v44);
        uint64_t v82 = v83;
        if (v83) {
          goto LABEL_194;
        }
        goto LABEL_39;
      case 0x19:
        unint64_t v84 = v269;
        sub_1002522D4(a1, (uint64_t)v44, v45, &v273, &v274);
        uint64_t v82 = v84;
        if (!v84)
        {
LABEL_39:
          uint64_t v269 = v82;
LABEL_10:
          unint64_t v42 = ((char *)v42 + 1);
          if (v46 == v42)
          {
            swift_bridgeObjectRelease();
            uint64_t v190 = v269;
            uint64_t v191 = v248;
            if (v289)
            {
LABEL_182:
              sub_10047DD5C(26);
              NSString v192 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              unsigned int v193 = [v39 mergeWithMap:v267 forKey:v192];

              if (v193)
              {
                sub_100253730(v264, v44);
                if (v190)
                {

                  goto LABEL_189;
                }
              }
            }
LABEL_186:
            uint64_t v195 = v255;
            static Calendar.current.getter();
            sub_100094134(&qword_1009114D0);
            uint64_t v196 = type metadata accessor for Calendar.Component();
            uint64_t v197 = *(void *)(v196 - 8);
            uint64_t v198 = *(void *)(v197 + 72);
            unint64_t v199 = (*(unsigned __int8 *)(v197 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80);
            uint64_t v200 = swift_allocObject();
            *(_OWORD *)(v200 + 16) = xmmword_100776E80;
            unint64_t v201 = v200 + v199;
            uint64_t v202 = *(void (**)(unint64_t, void, uint64_t))(v197 + 104);
            v202(v201, enum case for Calendar.Component.hour(_:), v196);
            v202(v201 + v198, enum case for Calendar.Component.minute(_:), v196);
            sub_10012788C(v200);
            swift_setDeallocating();
            swift_arrayDestroy();
            swift_deallocClassInstance();
            uint64_t v203 = v259;
            Date.init()();
            uint64_t v204 = v254;
            Calendar.dateComponents(_:from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v260 + 8))(v203, v262);
            (*(void (**)(char *, uint64_t))(v245 + 8))(v195, v191);
            uint64_t v205 = DateComponents.fifteenMinuteBin.getter();
            LOBYTE(v196) = v206;
            (*(void (**)(char *, uint64_t))(v261 + 8))(v204, v257);
            if ((v196 & 1) == 0)
            {
              unint64_t v207 = v264;
              unsigned __int8 v208 = [v264 isRecurrent];
              id v209 = [v207 flagged];
              id v210 = [v207 priority];
              v277[0] = v234;
              v277[1] = v251;
              unsigned __int8 v278 = v208;
              id v279 = v209;
              id v280 = v210;
              char v281 = HIBYTE(v291);
              uint64_t v282 = v205;
              char v283 = v291;
              v284 = v275;
              char v285 = v276;
              BOOL v286 = v290;
              uint64_t v287 = v274;
              uint64_t v288 = v274;
              __chkstk_darwin(v210);
              *(&v217 - 2) = (void (**)(char *, uint64_t))v277;
              static os_log_type_t.info.getter();
              measureTimeElapsed(_:level:block:)();
              swift_bridgeObjectRelease();

              return;
            }

LABEL_189:
            goto LABEL_190;
          }
          continue;
        }
LABEL_194:

        swift_bridgeObjectRelease();
LABEL_190:
        swift_bridgeObjectRelease();
        return;
      case 0x1B:
        id v85 = [a1 dueDateDeltaAlertsToUpsert];
        if (v85)
        {
          uint64_t v86 = v85;
          sub_1000963CC(0, (unint64_t *)&unk_100920C30);
          unint64_t v87 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v87 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v88 = *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          if (v88) {
            goto LABEL_170;
          }
        }
        goto LABEL_47;
      case 0x1C:
        id v89 = [a1 dueDateDeltaAlertIdentifiersToDelete];
        if (!v89) {
          goto LABEL_10;
        }
        uint64_t v90 = v89;
        sub_10024D4EC((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v91 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v92 = *(void *)(v91 + 16);
        swift_bridgeObjectRelease();
        if (v92)
        {
LABEL_170:
          if (v225 == v42) {
            goto LABEL_197;
          }
          unint64_t v42 = ((char *)v42 + 1);
          int v289 = 1;
          goto LABEL_4;
        }
LABEL_47:
        uint64_t v48 = v270;
        goto LABEL_10;
      case 0x22:
        Class isa = (Class)[a1 siriFoundInAppsData];
        if (isa)
        {
          uint64_t v93 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v95 = v94;

          Class isa = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v96 = v93;
          uint64_t v48 = v270;
          unint64_t v97 = v95;
          uint64_t v46 = v268;
          sub_100097F34(v96, v97);
        }
        [v44 setSiriFoundInAppsData:isa];
        goto LABEL_9;
      case 0x23:
        Class isa = (Class)[a1 lastBannerPresentationDate];
        if (isa)
        {
          uint64_t v98 = v259;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v99 = v253;
          uint64_t v100 = v262;
          (*v230)(v253, v98, v262);
          (*v233)(v99, 0, 1, v100);
          if ((*v229)(v99, 1, v100) == 1)
          {
            Class isa = 0;
          }
          else
          {
            Class isa = Date._bridgeToObjectiveC()().super.isa;
            (*v227)(v99, v100);
          }
          uint64_t v46 = v268;
          uint64_t v48 = v270;
        }
        else
        {
          (*v233)(v253, 1, 1, v262);
        }
        [v44 setLastBannerPresentationDate:isa];
LABEL_9:

        goto LABEL_10;
      default:
        if (qword_1009071C8 != -1) {
          swift_once();
        }
        uint64_t v68 = qword_1009420D0;
        uint64_t v69 = sub_10024776C(v55);
        unint64_t v71 = v70;
        if (!*(void *)(v68 + 16)) {
          goto LABEL_71;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(v69, v71);
        if (v72)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v264;
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_71:
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v109 = type metadata accessor for Logger();
          sub_10008E2DC(v109, (uint64_t)qword_100917690);
          unint64_t v110 = Logger.logObject.getter();
          os_log_type_t v111 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v110, v111))
          {
            uint64_t v112 = swift_slowAlloc();
            v272[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v112 = v231;
            *(void *)(v112 + 4) = sub_1000C51B8(v69, v71, v272);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v110, v111, "Unknown ingestable key {key: %s}", (uint8_t *)v112, 0xCu);
            swift_arrayDestroy();
            id v39 = v265;
            swift_slowDealloc();
            a1 = v264;
            swift_slowDealloc();
          }

          id v44 = v266;
        }
        NSString v113 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned __int8 v114 = [v39 mergeWithMap:v267 forKey:v113];

        if ((v114 & 1) == 0) {
          goto LABEL_97;
        }
        uint64_t v46 = v268;
        uint64_t v48 = v270;
        switch(v55)
        {
          case 9:
            [v44 setCompleted:[a1 isCompleted]];
            break;
          case 10:
            Class isa = (Class)[a1 completionDate];
            if (isa)
            {
              uint64_t v123 = v259;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              char v124 = v236;
              uint64_t v125 = v262;
              (*v230)(v236, v123, v262);
              (*v233)(v124, 0, 1, v125);
              if ((*v229)(v124, 1, v125) == 1)
              {
                Class isa = 0;
              }
              else
              {
                Class isa = Date._bridgeToObjectiveC()().super.isa;
                (*v227)(v124, v125);
              }
              uint64_t v46 = v268;
              uint64_t v48 = v270;
            }
            else
            {
              (*v233)(v236, 1, 1, v262);
            }
            [v44 setCompletionDate:isa];
            goto LABEL_9;
          case 11:
            id v126 = [a1 priority];
            if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFFLL) {
              uint64_t v127 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v127 = (uint64_t)v126;
            }
            [v44 setPriority:v127];
            break;
          case 12:
            [v44 setFlagged:[a1 flagged]];
            break;
          case 13:
            Class isa = (Class)[a1 creationDate];
            if (isa)
            {
              uint64_t v128 = v259;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v129 = v237;
              uint64_t v130 = v262;
              (*v230)(v237, v128, v262);
              (*v233)(v129, 0, 1, v130);
              if ((*v229)(v129, 1, v130) == 1)
              {
                Class isa = 0;
              }
              else
              {
                Class isa = Date._bridgeToObjectiveC()().super.isa;
                (*v227)(v129, v130);
              }
              uint64_t v46 = v268;
              uint64_t v48 = v270;
            }
            else
            {
              (*v233)(v237, 1, 1, v262);
            }
            [v44 setCreationDate:isa];
            goto LABEL_9;
          case 14:
            Class isa = (Class)[a1 lastModifiedDate];
            if (isa)
            {
              id v131 = v259;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v132 = v238;
              uint64_t v133 = v262;
              (*v230)(v238, v131, v262);
              (*v233)(v132, 0, 1, v133);
              if ((*v229)(v132, 1, v133) == 1)
              {
                Class isa = 0;
              }
              else
              {
                Class isa = Date._bridgeToObjectiveC()().super.isa;
                (*v227)(v132, v133);
              }
              uint64_t v46 = v268;
              uint64_t v48 = v270;
            }
            else
            {
              (*v233)(v238, 1, 1, v262);
            }
            [v44 setLastModifiedDate:isa];
            goto LABEL_9;
          case 16:
            Class isa = (Class)[a1 startDateComponents];
            if (isa)
            {
              uint64_t v134 = v244;
              static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

              unint64_t v135 = v240;
              uint64_t v136 = v257;
              (*v223)(v240, v134, v257);
              (*v224)(v135, 0, 1, v136);
              if ((*v222)(v135, 1, v136) == 1)
              {
                Class isa = 0;
              }
              else
              {
                Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
                (*v218)(v135, v136);
              }
              uint64_t v46 = v268;
              uint64_t v48 = v270;
            }
            else
            {
              (*v224)(v240, 1, 1, v257);
            }
            [v44 setStartDateComponents:isa];
            goto LABEL_9;
          case 17:
            Class isa = (Class)[a1 dueDateComponents];
            if (isa)
            {
              uint64_t v137 = v244;
              static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v138 = v241;
              uint64_t v139 = v257;
              (*v223)(v241, v137, v257);
              (*v224)(v138, 0, 1, v139);
              if ((*v222)(v138, 1, v139) == 1)
              {
                Class isa = 0;
              }
              else
              {
                Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
                (*v218)(v138, v139);
              }
              uint64_t v46 = v268;
              uint64_t v48 = v270;
            }
            else
            {
              (*v224)(v241, 1, 1, v257);
            }
            [v44 setDueDateComponents:isa];
            goto LABEL_9;
          case 29:
            Class v140 = (objc_class *)[a1 contactHandles];
            Class isa = v140;
            if (v140)
            {
              id v141 = [(objc_class *)v140 archivedData];

              uint64_t v142 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v144 = v143;

              uint64_t v48 = v270;
              Class isa = Data._bridgeToObjectiveC()().super.isa;
              uint64_t v145 = v142;
              a1 = v264;
              unint64_t v146 = v144;
              uint64_t v46 = v268;
              sub_100097F34(v145, v146);
            }
            [v44 setContactHandles:isa];
            goto LABEL_9;
          case 30:
            id v147 = [a1 icsDisplayOrder];
            if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFFFLL) {
              uint64_t v148 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v148 = (uint64_t)v147;
            }
            [v44 setIcsDisplayOrder:v148];
            break;
          case 31:
            Class isa = (Class)[a1 icsUrl];
            if (isa)
            {
              char v149 = v235;
              static URL._unconditionallyBridgeFromObjectiveC(_:)();

              id v150 = v242;
              uint64_t v151 = v243;
              (*v220)(v242, v149, v243);
              (*v221)(v150, 0, 1, v151);
              if ((*v219)(v150, 1, v151) == 1)
              {
                Class isa = 0;
              }
              else
              {
                URL._bridgeToObjectiveC()(v152);
                Class isa = v168;
                (*v217)(v150, v151);
              }
              uint64_t v46 = v268;
              uint64_t v48 = v270;
            }
            else
            {
              (*v221)(v242, 1, 1, v243);
            }
            [v44 setIcsUrl:isa];
            goto LABEL_9;
          case 32:
            Class isa = (Class)[a1 importedICSData];
            if (isa)
            {
              uint64_t v153 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v155 = v154;

              Class isa = Data._bridgeToObjectiveC()().super.isa;
              uint64_t v156 = v153;
              uint64_t v48 = v270;
              unint64_t v157 = v155;
              a1 = v264;
              sub_100097F34(v156, v157);
            }
            [v44 setImportedICSData:isa];
            goto LABEL_9;
          case 33:
            unint64_t v158 = (objc_class *)[a1 userActivity];
            Class isa = v158;
            if (v158)
            {
              id v159 = [(objc_class *)v158 archivedDictionaryData];

              if (v159)
              {
                uint64_t v160 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v162 = v161;

                Class isa = Data._bridgeToObjectiveC()().super.isa;
                uint64_t v163 = v160;
                a1 = v264;
                unint64_t v164 = v162;
                uint64_t v46 = v268;
                sub_100097F34(v163, v164);
              }
              else
              {
                Class isa = 0;
              }
              uint64_t v48 = v270;
            }
            [v44 setUserActivity:isa];
            goto LABEL_9;
          case 37:
            Class isa = (Class)[a1 alternativeDisplayDateDate_forCalendar];
            if (isa)
            {
              uint64_t v165 = v259;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              id v166 = v239;
              uint64_t v167 = v262;
              (*v230)(v239, v165, v262);
              (*v233)(v166, 0, 1, v167);
              if ((*v229)(v166, 1, v167) == 1)
              {
                Class isa = 0;
              }
              else
              {
                Class isa = Date._bridgeToObjectiveC()().super.isa;
                (*v227)(v166, v167);
              }
              uint64_t v46 = v268;
              uint64_t v48 = v270;
            }
            else
            {
              (*v233)(v239, 1, 1, v262);
            }
            [v44 setAlternativeDisplayDateDate_forCalendar:isa];
            goto LABEL_9;
          default:
            goto LABEL_10;
        }
        goto LABEL_10;
    }
  }
}

void *sub_100256648(id a1, char a2)
{
  uint64_t v2 = _swiftEmptyArrayStorage;
  switch(a2)
  {
    case 1:
      id v4 = [a1 listID];
      goto LABEL_5;
    case 2:
      id v4 = [a1 parentReminderID];
LABEL_5:
      id v5 = v4;
      uint64_t v6 = v5;
      if (v5)
      {
        id v7 = v5;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v2 = _swiftEmptyArrayStorage;
      }
      else
      {
      }
      return v2;
    case 3:
      id v8 = [a1 subtaskIDsToUndelete];
      goto LABEL_11;
    case 4:
      id v8 = [a1 hashtagIDsToUndelete];
LABEL_11:
      id v9 = v8;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1000E4F40((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
      uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v2 = sub_10020A3A0(v10);
      swift_bridgeObjectRelease();
      break;
    case 5:
      return v2;
    default:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v2 = (void *)swift_allocObject();
      *((_OWORD *)v2 + 1) = xmmword_10077A530;
      v2[4] = [a1 accountID];
      specialized Array._endMutation()();
      break;
  }
  return v2;
}

void sub_100256874(void *a1, void *a2, char a3, uint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v197 = (void *)a4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v185 = (char *)v168 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v186);
  uint64_t v13 = (char *)v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v14 - 8);
  unint64_t v189 = (char *)v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v190 = (uint64_t)v168 - v17;
  *(void *)&double v19 = __chkstk_darwin(v18).n128_u64[0];
  uint64_t v195 = (uint64_t)v168 - v20;
  id v196 = a2;
  id v21 = [a2 createResolutionTokenMapIfNecessary:v19];
  id v22 = [a1 resolutionTokenMap];
  if (!v22)
  {
    id v193 = v21;
    if (qword_1009071B8 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_10008E2DC(v45, (uint64_t)qword_100911218);
    id v46 = a1;
    unint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      id v50 = (void *)swift_slowAlloc();
      id v210 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 138543618;
      id v51 = [v46 objectID];
      uint64_t v199 = (uint64_t)v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v50 = v51;

      *(_WORD *)(v49 + 12) = 2082;
      unint64_t v52 = 0xE900000000000044;
      uint64_t v53 = 0x49746E756F636361;
      switch(a3)
      {
        case 1:
          unint64_t v52 = 0xE600000000000000;
          uint64_t v53 = 0x44497473696CLL;
          break;
        case 2:
          uint64_t v53 = 0xD000000000000010;
          uint64_t v142 = "parentReminderID";
          goto LABEL_108;
        case 3:
          unint64_t v143 = "subtaskIDsToUndelete";
          goto LABEL_106;
        case 4:
          unint64_t v143 = "hashtagIDsToUndelete";
LABEL_106:
          unint64_t v52 = (unint64_t)(v143 - 32) | 0x8000000000000000;
          uint64_t v53 = 0xD000000000000014;
          break;
        case 5:
          uint64_t v53 = 0xD00000000000001FLL;
          uint64_t v142 = "siriFoundInAppsUserConfirmation";
LABEL_108:
          unint64_t v52 = (unint64_t)(v142 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      uint64_t v199 = sub_1000C51B8(v53, v52, (uint64_t *)&v210);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "REMReminderStorageCDIngestor:establishRelationship(onStorage:into cdReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v49, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    unint64_t v144 = self;
    sub_1000963CC(0, &qword_1009100F8);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v146 = String._bridgeToObjectiveC()();
    [v144 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v146];

    swift_willThrow();
    id v147 = &v212;
    goto LABEL_133;
  }
  id v23 = v22;
  sub_100094134(&qword_1009114C8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(unsigned char *)(inited + 32) = a3;
  id v188 = sub_100480370(v23, inited);
  swift_setDeallocating();
  id v191 = v23;
  switch(a3)
  {
    case 1:
      sub_10047DD94(1);
      NSString v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned int v55 = [v21 mergeWithMap:v188 forKey:v54];

      if (!v55) {
        goto LABEL_132;
      }
      id v56 = [a1 listID];
      if (v56)
      {
        id v57 = v56;
        sub_100476118(1, v57, (uint64_t)v197);
        if (v4) {
          goto LABEL_20;
        }
        uint64_t v59 = v58;
      }
      else
      {
        uint64_t v59 = 0;
      }
      [v196 setList:v59];

      goto LABEL_132;
    case 2:
      sub_10047DD94(2);
      NSString v60 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned int v61 = [v21 mergeWithMap:v188 forKey:v60];

      if (!v61) {
        goto LABEL_132;
      }
      id v62 = [a1 parentReminderID];
      if (v62)
      {
        id v57 = v62;
        sub_100475790(2, v57, (uint64_t)v197);
        if (v4)
        {
LABEL_20:

          return;
        }
        id v149 = v63;
      }
      else
      {
        id v149 = 0;
      }
      id v193 = v21;
      if (qword_1009071B8 != -1) {
        swift_once();
      }
      uint64_t v150 = type metadata accessor for Logger();
      sub_10008E2DC(v150, (uint64_t)qword_100911218);
      id v151 = v149;
      id v152 = v196;
      id v153 = v151;
      id v154 = v152;
      unint64_t v155 = Logger.logObject.getter();
      int v156 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v155, (os_log_type_t)v156))
      {
        LODWORD(v197) = v156;
        unint64_t v198 = v4;
        uint64_t v157 = swift_slowAlloc();
        id v196 = (id)swift_slowAlloc();
        id v210 = v196;
        *(_DWORD *)uint64_t v157 = 136446466;
        uint64_t v195 = v157 + 4;
        id v158 = [v154 remObjectID];
        uint64_t v199 = (uint64_t)v158;
        sub_100094134((uint64_t *)&unk_100914BC0);
        uint64_t v159 = Optional.descriptionOrNil.getter();
        unint64_t v161 = v160;

        uint64_t v199 = sub_1000C51B8(v159, v161, (uint64_t *)&v210);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v157 + 12) = 2082;
        if (v149) {
          id v149 = [v153 remObjectID];
        }
        uint64_t v199 = (uint64_t)v149;
        uint64_t v162 = Optional.descriptionOrNil.getter();
        unint64_t v164 = v163;

        uint64_t v199 = sub_1000C51B8(v162, v164, (uint64_t *)&v210);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v155, (os_log_type_t)v197, "Updating reminder.list {reminder: %{public}s, list: %{public}s}", (uint8_t *)v157, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v23 = v191;
      }
      else
      {
      }
      [v154 setParentReminder:v153];

      goto LABEL_130;
    case 3:
      unint64_t v198 = v4;
      id v64 = [a1 subtaskIDsToUndelete];
      uint64_t v27 = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1000E4F40((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
      uint64_t v65 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      id v193 = v21;
      unint64_t v192 = v27;
      if ((v65 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v65 = v200;
        uint64_t v195 = v201;
        uint64_t v66 = v202;
        int64_t v67 = v203;
        unint64_t v5 = v204;
      }
      else
      {
        int64_t v67 = 0;
        uint64_t v74 = -1 << *(unsigned char *)(v65 + 32);
        uint64_t v75 = *(void *)(v65 + 56);
        uint64_t v195 = v65 + 56;
        uint64_t v76 = ~v74;
        uint64_t v77 = -v74;
        if (v77 < 64) {
          uint64_t v78 = ~(-1 << v77);
        }
        else {
          uint64_t v78 = -1;
        }
        unint64_t v5 = v78 & v75;
        uint64_t v66 = v76;
      }
      unint64_t v189 = (char *)v66;
      int64_t v194 = (unint64_t)(v66 + 64) >> 6;
      uint64_t v190 = (uint64_t)&type metadata for Swift.AnyObject + 8;
      if (v65 < 0) {
        goto LABEL_30;
      }
LABEL_32:
      if (v5)
      {
        uint64_t v82 = (v5 - 1) & v5;
        unint64_t v83 = __clz(__rbit64(v5)) | (v67 << 6);
        int64_t v81 = v67;
        goto LABEL_43;
      }
      int64_t v81 = v67 + 1;
      if (!__OFADD__(v67, 1))
      {
        if (v81 < v194)
        {
          unint64_t v84 = *(void *)(v195 + 8 * v81);
          if (v84)
          {
LABEL_42:
            uint64_t v82 = (v84 - 1) & v84;
            unint64_t v83 = __clz(__rbit64(v84)) + (v81 << 6);
LABEL_43:
            id v80 = *(id *)(*(void *)(v65 + 48) + 8 * v83);
            while (v80)
            {
              unint64_t v86 = v198;
              sub_100475790(3, v80, (uint64_t)v197);
              unint64_t v198 = v86;
              if (v86)
              {
                sub_1000C1AF8();

                return;
              }
              uint64_t v88 = v87;
              [v87 setParentReminder:v196];
              id v89 = [v88 createResolutionTokenMapIfNecessary];
              sub_10047DD94(2);
              uint64_t v27 = v65;
              NSString v90 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v89 updateForKey:v90];

              uint64_t v65 = v27;
              int64_t v67 = v81;
              unint64_t v5 = v82;
              if ((v27 & 0x8000000000000000) == 0) {
                goto LABEL_32;
              }
LABEL_30:
              uint64_t v79 = __CocoaSet.Iterator.next()();
              if (!v79) {
                goto LABEL_118;
              }
              uint64_t v199 = v79;
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v80 = v210;
              swift_unknownObjectRelease();
              int64_t v81 = v67;
              uint64_t v82 = v5;
            }
            goto LABEL_118;
          }
          int64_t v85 = v67 + 2;
          if (v67 + 2 < v194)
          {
            unint64_t v84 = *(void *)(v195 + 8 * v85);
            if (v84)
            {
LABEL_41:
              int64_t v81 = v85;
              goto LABEL_42;
            }
            int64_t v85 = v67 + 3;
            if (v67 + 3 < v194)
            {
              unint64_t v84 = *(void *)(v195 + 8 * v85);
              if (v84) {
                goto LABEL_41;
              }
              int64_t v81 = v67 + 4;
              if (v67 + 4 < v194)
              {
                unint64_t v84 = *(void *)(v195 + 8 * v81);
                if (!v84)
                {
                  int64_t v91 = v67 + 5;
                  id v21 = v193;
                  do
                  {
                    if (v194 == v91) {
                      goto LABEL_119;
                    }
                    unint64_t v84 = *(void *)(v195 + 8 * v91++);
                  }
                  while (!v84);
                  int64_t v81 = v91 - 1;
                }
                goto LABEL_42;
              }
            }
          }
        }
LABEL_118:
        id v21 = v193;
LABEL_119:
        sub_1000C1AF8();
        id v23 = v191;
        goto LABEL_132;
      }
      __break(1u);
      goto LABEL_139;
    case 4:
      id v193 = v21;
      v168[0] = a1;
      id v68 = [a1 hashtagIDsToUndelete];
      uint64_t v69 = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1000E4F40((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
      uint64_t v70 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v172 = v69;
      if ((v70 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v70 = v205;
        uint64_t v179 = v206;
        char v72 = v207;
        uint64_t v27 = v208;
        unint64_t v73 = v209;
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v92 = -1 << *(unsigned char *)(v70 + 32);
        uint64_t v93 = *(void *)(v70 + 56);
        uint64_t v179 = v70 + 56;
        uint64_t v94 = ~v92;
        uint64_t v95 = -v92;
        if (v95 < 64) {
          uint64_t v96 = ~(-1 << v95);
        }
        else {
          uint64_t v96 = -1;
        }
        unint64_t v73 = v96 & v93;
        char v72 = (void *)v94;
      }
      uint64_t v173 = v70 & 0x7FFFFFFFFFFFFFFFLL;
      v168[1] = v72;
      int64_t v174 = ((unint64_t)v72 + 64) >> 6;
      unint64_t v182 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
      uint64_t v175 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      uint64_t v169 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
      id v170 = (void (**)(char *, uint64_t))(v10 + 8);
      *(void *)&long long v71 = 138543618;
      long long v177 = v71;
      uint64_t v176 = (char *)&type metadata for Any + 8;
      id v171 = (char *)&type metadata for Swift.AnyObject + 8;
      id v21 = v193;
      uint64_t v178 = v9;
      char v184 = v13;
      uint64_t v183 = v70;
      while (2)
      {
        unint64_t v187 = v73;
        if (v70 < 0)
        {
          uint64_t v103 = __CocoaSet.Iterator.next()();
          if (v103)
          {
            unint64_t v198 = v5;
            uint64_t v199 = v103;
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v104 = v210;
            swift_unknownObjectRelease();
            uint64_t v102 = v27;
            uint64_t v100 = v187;
            goto LABEL_78;
          }
          goto LABEL_131;
        }
        if (!v73)
        {
          uint64_t v102 = v27 + 1;
          if (__OFADD__(v27, 1))
          {
LABEL_139:
            __break(1u);
LABEL_140:
            swift_once();
LABEL_5:
            uint64_t v28 = type metadata accessor for Logger();
            sub_10008E2DC(v28, (uint64_t)qword_100911218);
            id v29 = v196;
            id v30 = (id)v27;
            id v31 = v29;
            id v32 = v30;
            uint64_t v33 = Logger.logObject.getter();
            os_log_type_t v34 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v33, v34))
            {
              uint64_t v35 = swift_slowAlloc();
              uint64_t v197 = (void *)swift_slowAlloc();
              id v210 = v197;
              *(_DWORD *)uint64_t v35 = 136446466;
              id v196 = (id)(v35 + 4);
              id v36 = [v31 remObjectID];
              unint64_t v198 = v5;
              id v37 = v36;
              uint64_t v199 = (uint64_t)v36;
              sub_100094134((uint64_t *)&unk_100914BC0);
              uint64_t v38 = Optional.descriptionOrNil.getter();
              unint64_t v40 = v39;

              uint64_t v199 = sub_1000C51B8(v38, v40, (uint64_t *)&v210);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v35 + 12) = 2082;
              id v41 = [v32 remObjectID];
              uint64_t v199 = (uint64_t)v41;
              uint64_t v42 = Optional.descriptionOrNil.getter();
              unint64_t v44 = v43;

              uint64_t v199 = sub_1000C51B8(v42, v44, (uint64_t *)&v210);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v33, v34, "Updating reminder.account {reminder: %{public}s, account: %{public}s}", (uint8_t *)v35, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
            }
            id v23 = v191;
            id v148 = v32;
            [v31 setAccount:v148];

LABEL_130:
            id v21 = v193;
            goto LABEL_132;
          }
          if (v102 < v174)
          {
            unint64_t v105 = *(void *)(v179 + 8 * v102);
            if (v105)
            {
LABEL_76:
              unint64_t v198 = v5;
              uint64_t v100 = (v105 - 1) & v105;
              unint64_t v101 = __clz(__rbit64(v105)) + (v102 << 6);
              goto LABEL_77;
            }
            uint64_t v106 = v27 + 2;
            if (v27 + 2 < v174)
            {
              unint64_t v105 = *(void *)(v179 + 8 * v106);
              if (v105)
              {
LABEL_75:
                uint64_t v102 = v106;
                goto LABEL_76;
              }
              uint64_t v106 = v27 + 3;
              if (v27 + 3 < v174)
              {
                unint64_t v105 = *(void *)(v179 + 8 * v106);
                if (v105) {
                  goto LABEL_75;
                }
                uint64_t v102 = v27 + 4;
                if (v27 + 4 < v174)
                {
                  unint64_t v105 = *(void *)(v179 + 8 * v102);
                  if (!v105)
                  {
                    uint64_t v141 = v27 + 5;
                    do
                    {
                      if (v174 == v141) {
                        goto LABEL_120;
                      }
                      unint64_t v105 = *(void *)(v179 + 8 * v141++);
                    }
                    while (!v105);
                    uint64_t v102 = v141 - 1;
                  }
                  goto LABEL_76;
                }
              }
            }
          }
LABEL_120:
          unint64_t v187 = 0;
LABEL_131:
          sub_1000C1AF8();
LABEL_132:

          id v147 = &v211;
LABEL_133:

          return;
        }
        unint64_t v198 = v5;
        uint64_t v100 = (v73 - 1) & v73;
        unint64_t v101 = __clz(__rbit64(v73)) | (v27 << 6);
        uint64_t v102 = v27;
LABEL_77:
        id v104 = *(id *)(*(void *)(v70 + 48) + 8 * v101);
LABEL_78:
        if (!v104) {
          goto LABEL_131;
        }
        unint64_t v192 = v100;
        int64_t v194 = v102;
        uint64_t v181 = v27;
        if (qword_1009071B8 != -1) {
          swift_once();
        }
        uint64_t v107 = type metadata accessor for Logger();
        sub_10008E2DC(v107, (uint64_t)qword_100911218);
        id v108 = v196;
        id v109 = v104;
        id v110 = v108;
        id v99 = v109;
        os_log_type_t v111 = Logger.logObject.getter();
        os_log_type_t v112 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v111, v112))
        {
          uint64_t v113 = swift_slowAlloc();
          unsigned __int8 v114 = v99;
          id v115 = (void *)swift_slowAlloc();
          id v180 = (id)swift_slowAlloc();
          id v210 = v180;
          *(_DWORD *)uint64_t v113 = v177;
          *(void *)(v113 + 4) = v114;
          *id v115 = v104;

          *(_WORD *)(v113 + 12) = 2082;
          id v116 = [v110 remObjectID];
          uint64_t v199 = (uint64_t)v116;
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v117 = Optional.descriptionOrNil.getter();
          unint64_t v119 = v118;

          *(void *)(v113 + 14) = sub_1000C51B8(v117, v119, (uint64_t *)&v210);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v111, v112, "Undeleting hashtag {hashtagID: %{public}@, reminder: %{public}s}", (uint8_t *)v113, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          id v99 = v114;
          swift_slowDealloc();
          swift_arrayDestroy();
          id v21 = v193;
          swift_slowDealloc();
          uint64_t v9 = v178;
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v120 = (uint64_t)v184;
        int64_t v98 = v194;
        uint64_t v121 = v195;
        unint64_t v122 = v198;
        sub_1004760F0(4, v99, (uint64_t)v197);
        unint64_t v5 = v122;
        if (v122)
        {
          sub_1000C1AF8();

          return;
        }
        char v124 = v123;
        if (([v123 markedForDeletion] & 1) == 0)
        {
LABEL_62:

          uint64_t v27 = v98;
          unint64_t v73 = v192;
          id v23 = v191;
          uint64_t v70 = v183;
          continue;
        }
        break;
      }
      id v180 = v99;
      id v125 = [v124 reminderIdentifier];
      if (v125)
      {
        id v126 = v125;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v127 = *v182;
        (*v182)(v121, 0, 1, v9);
      }
      else
      {
        uint64_t v127 = *v182;
        (*v182)(v121, 1, 1, v9);
      }
      id v128 = [v110 remObjectID];
      unint64_t v198 = 0;
      if (v128)
      {
        uint64_t v129 = v128;
        id v130 = [v128 uuid];

        uint64_t v131 = v190;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v132 = 0;
      }
      else
      {
        uint64_t v132 = 1;
        uint64_t v131 = v190;
      }
      v127(v131, v132, 1, v9);
      uint64_t v133 = v131;
      uint64_t v134 = v120 + *(int *)(v186 + 48);
      uint64_t v135 = v195;
      sub_1001248EC(v195, v120);
      sub_1001248EC(v133, v134);
      uint64_t v136 = *v175;
      if ((*v175)(v120, 1, v9) == 1)
      {
        sub_1000966BC(v133, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v135, (uint64_t *)&unk_100909E50);
        unsigned int v97 = v136(v134, 1, v9);
        id v21 = v193;
        if (v97 == 1)
        {
          sub_1000966BC(v120, (uint64_t *)&unk_100909E50);
LABEL_61:
          [v124 setReminder:v110];
          unint64_t v5 = v198;
          int64_t v98 = v194;
          id v99 = v180;
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v137 = (uint64_t)v189;
        sub_1001248EC(v120, (uint64_t)v189);
        if (v136(v134, 1, v9) != 1)
        {
          uint64_t v138 = v185;
          (*v169)(v185, v134, v9);
          sub_10024D4EC((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v139 = dispatch thunk of static Equatable.== infix(_:_:)();
          Class v140 = *v170;
          (*v170)(v138, v9);
          sub_1000966BC(v190, (uint64_t *)&unk_100909E50);
          sub_1000966BC(v195, (uint64_t *)&unk_100909E50);
          v140(v189, v9);
          sub_1000966BC(v120, (uint64_t *)&unk_100909E50);
          id v21 = v193;
          if ((v139 & 1) == 0) {
            goto LABEL_136;
          }
          goto LABEL_61;
        }
        sub_1000966BC(v190, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v195, (uint64_t *)&unk_100909E50);
        (*v170)((char *)v137, v9);
        id v21 = v193;
      }
      sub_1000966BC(v120, (uint64_t *)&unk_10090B4C0);
LABEL_136:
      uint64_t v165 = self;
      id v166 = [v124 remObjectID];
      id v167 = [v168[0] objectID];
      [v165 validationErrorUndeleteHashtagFromAnotherReminder:v166 expectedReminderID:v167];

      swift_willThrow();
      sub_1000C1AF8();
      return;
    case 5:
      goto LABEL_132;
    default:
      id v25 = [a1 accountID];
      sub_100475768(0, v25, (uint64_t)v197);
      uint64_t v27 = v26;

      if (v4) {
        goto LABEL_132;
      }
      id v193 = v21;
      if (qword_1009071B8 == -1) {
        goto LABEL_5;
      }
      goto LABEL_140;
  }
}

uint64_t sub_10025831C()
{
  return sub_100249840(*(_OWORD **)(v0 + 16));
}

uint64_t sub_100258338()
{
  return sub_1003EA39C();
}

uint64_t sub_100258344()
{
  return sub_1003E54EC();
}

id sub_10025834C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  id result = sub_10019E5CC(*a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10025837C()
{
  return sub_1003EA140();
}

id sub_100258388@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  id result = sub_10034DE14(*a1, 0);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002583BC()
{
  return sub_1003E9EE4();
}

NSObject *sub_1002583C8@<X0>(NSObject **a1@<X0>, NSObject **a2@<X8>)
{
  id result = sub_1002A0C4C(*a1, 0, 0);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100258400(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v10 = __chkstk_darwin(v9).n128_u64[0];
  uint64_t v12 = (char *)&v18 - v11;
  id v13 = [a1 account:v10];
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = [v13 identifier];

    if (v15)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    }
    sub_100096408((uint64_t)v8, (uint64_t)v12, (uint64_t *)&unk_100909E50);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2))
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v12, v2);
      sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909E50);
      uint64_t v16 = UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return v16;
    }
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909E50);
  }
  return 0;
}

unsigned char *storeEnumTagSinglePayload for REMReminderStorageCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *id result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100258720);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMReminderStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMReminderStorageCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMReminderStorageCDIngestor.ValueKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDB) {
    goto LABEL_17;
  }
  if (a2 + 37 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 37) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 37;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 37;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 37;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x26;
  int v8 = v6 - 38;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for REMReminderStorageCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 37 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 37) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDA)
  {
    unsigned int v6 = ((a2 - 219) >> 8) + 1;
    *id result = a2 + 37;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002588B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 37;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMReminderStorageCDIngestor.ValueKey()
{
  return &type metadata for REMReminderStorageCDIngestor.ValueKey;
}

uint64_t sub_1002588EC()
{
  return sub_1000967F4(&qword_100911568, &qword_100911570);
}

unint64_t sub_10025892C()
{
  unint64_t result = qword_100911578;
  if (!qword_100911578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100911578);
  }
  return result;
}

uint64_t sub_100258980()
{
  return sub_1000967F4(&qword_100911580, &qword_100911588);
}

unint64_t sub_1002589C0()
{
  unint64_t result = qword_100911590;
  if (!qword_100911590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100911590);
  }
  return result;
}

uint64_t sub_100258A14()
{
  uint64_t v158 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v157 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  NSString v146 = (char *)&v107 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = sub_100094134(&qword_100911690);
  uint64_t v139 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v135 = (char *)&v107 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_100094134(&qword_100911698);
  uint64_t v142 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  uint64_t v136 = (char *)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_100094134(&qword_1009116A0);
  uint64_t v147 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v137 = (char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_100094134(&qword_1009116A8);
  uint64_t v151 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v141 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = sub_100094134(&qword_1009116B0);
  uint64_t v153 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  unint64_t v144 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = sub_100094134(&qword_1009116B8);
  uint64_t v155 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v145 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_100094134(&qword_1009116C0);
  uint64_t v159 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  id v148 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_100094134(&qword_1009116C8);
  uint64_t v161 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  id v149 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for REMNotifyPublisher();
  uint64_t v134 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v129 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_100094134(&qword_1009116D0);
  uint64_t v133 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  id v130 = (char *)&v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_100094134((uint64_t *)&unk_1009116D8);
  unint64_t v119 = *(void (***)(char *, uint64_t))(v118 - 8);
  __chkstk_darwin(v118);
  id v110 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v13 - 8);
  id v15 = (char *)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_100094134(&qword_1009116E8);
  uint64_t v112 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v17 = (char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_100094134(&qword_1009116F0);
  id v115 = *(void (***)(char *, void))(v114 - 8);
  __chkstk_darwin(v114);
  double v19 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_100094134(&qword_1009116F8);
  uint64_t v117 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  id v21 = (char *)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_100094134(&qword_100911700);
  unint64_t v122 = *(void (***)(char *, uint64_t))(v120 - 8);
  __chkstk_darwin(v120);
  id v109 = (char *)&v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_100094134(&qword_100911708);
  char v124 = *(void (***)(char *, uint64_t))(v121 - 8);
  __chkstk_darwin(v121);
  os_log_type_t v111 = (char *)&v107 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_100094134((uint64_t *)&unk_100911710);
  uint64_t v125 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v113 = (char *)&v107 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = v0;
  id v167 = (void *)sub_100407394(*(void **)(v0 + 24), 0xD000000000000022, 0x80000001007CFB10, 0);
  id v166 = *(void **)(v0 + 16);
  id v25 = v166;
  uint64_t v165 = (void *)type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v26 = *(v165 - 1);
  uint64_t v127 = *(void (**)(char *, uint64_t, uint64_t, void *))(v26 + 56);
  uint64_t v128 = v26 + 56;
  v127(v15, 1, 1, v165);
  id v27 = v25;
  sub_100094134((uint64_t *)&unk_10090F110);
  uint64_t v164 = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  id v126 = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_1000967F4((unint64_t *)&unk_10090F120, (uint64_t *)&unk_10090F110);
  uint64_t v163 = sub_1000E4F40((unint64_t *)&qword_10090D990, (unint64_t *)&qword_10090F370);
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_1009081C0);

  swift_release();
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E60;
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v29 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  *(void *)(inited + 32) = v30;
  *(void *)(inited + 40) = v32;
  sub_1000963CC(0, (unint64_t *)&unk_100909AC0);
  id v33 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  *(void *)(inited + 48) = v34;
  *(void *)(inited + 56) = v36;
  sub_1000963CC(0, (unint64_t *)&qword_100910E40);
  id v37 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  *(void *)(inited + 64) = v38;
  *(void *)(inited + 72) = v40;
  Swift::Int v41 = sub_10032D9A0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  *(void *)(swift_allocObject() + 16) = v41;
  swift_bridgeObjectRetain();
  sub_100094134((uint64_t *)&unk_10090DD40);
  uint64_t v107 = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
  sub_1000967F4(&qword_100911720, &qword_1009116E8);
  uint64_t v42 = v110;
  uint64_t v43 = v108;
  Publisher.map<A>(_:)();
  swift_release();
  sub_1000967F4(&qword_100911728, (uint64_t *)&unk_1009116D8);
  uint64_t v44 = v118;
  Publisher.filter(_:)();
  v119[1](v42, v44);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v17, v43);
  sub_1000967F4(&qword_100911730, &qword_1009116F0);
  uint64_t v45 = v114;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  v115[1](v19, v45);
  id v115 = (void (**)(char *, void))&protocol conformance descriptor for Publishers.HandleEvents<A>;
  sub_1000967F4((unint64_t *)&unk_100911738, &qword_1009116F8);
  id v46 = v109;
  uint64_t v47 = v116;
  Publisher.tryMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v117 + 8))(v21, v47);
  uint64_t v118 = sub_100094134((uint64_t *)&unk_10090ABB0);
  unint64_t v119 = (void (**)(char *, uint64_t))&protocol conformance descriptor for Publishers.TryMap<A, B>;
  sub_1000967F4(&qword_100911748, &qword_100911700);
  os_log_type_t v48 = v111;
  uint64_t v49 = v120;
  Publisher.mapError<A>(_:)();
  v122[1](v46, v49);
  unint64_t v122 = (void (**)(char *, uint64_t))&protocol conformance descriptor for Publishers.MapError<A, B>;
  sub_1000967F4(&qword_100911750, &qword_100911708);
  id v50 = v113;
  uint64_t v51 = v121;
  Publisher.replaceError(with:)();
  v124[1](v48, v51);
  char v124 = (void (**)(char *, uint64_t))&protocol conformance descriptor for Publishers.ReplaceError<A>;
  sub_1000967F4(&qword_100911758, (uint64_t *)&unk_100911710);
  uint64_t v52 = v123;
  uint64_t v53 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v125 + 8))(v50, v52);
  sub_10025AC50();
  NSString v54 = v129;
  REMNotifyPublisher.init(name:accessQueue:)();
  sub_10025F7F8(&qword_100911760, (void (*)(uint64_t))&type metadata accessor for REMNotifyPublisher);
  uint64_t v55 = v131;
  id v56 = v130;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  (*(void (**)(char *, uint64_t))(v134 + 8))(v54, v55);
  sub_1000967F4(&qword_100911768, &qword_1009116D0);
  uint64_t v57 = v132;
  uint64_t v58 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v133 + 8))(v56, v57);
  sub_100094134(&qword_100911770);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_100776E80;
  *(void *)(v59 + 32) = v53;
  *(void *)(v59 + 40) = v58;
  id v167 = (void *)v59;
  specialized Array._endMutation()();
  uint64_t v134 = v53;
  swift_retain();
  uint64_t v133 = v58;
  swift_retain();
  sub_100094134(&qword_100911778);
  sub_1000967F4(&qword_100911780, &qword_100911778);
  NSString v60 = v135;
  Publishers.MergeMany.init(_:)();
  uint64_t v61 = v162;
  id v167 = *(void **)(v162 + 16);
  id v62 = v167;
  uint64_t v63 = (uint64_t)v15;
  id v64 = v15;
  uint64_t v65 = (void (*)(uint64_t, uint64_t, uint64_t, void *))v127;
  v127(v64, 1, 1, v165);
  sub_1000967F4(&qword_100911788, &qword_100911690);
  id v66 = v62;
  int64_t v67 = v136;
  uint64_t v68 = v138;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v63, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v139 + 8))(v60, v68);
  swift_allocObject();
  swift_weakInit();
  sub_1000967F4(&qword_100911790, &qword_100911698);
  uint64_t v69 = v140;
  uint64_t v70 = v137;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v142 + 8))(v67, v69);
  long long v71 = v146;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  id v167 = *(void **)(v61 + 16);
  id v72 = v167;
  v65(v63, 1, 1, v165);
  sub_1000967F4(&qword_100911798, &qword_1009116A0);
  id v73 = v72;
  uint64_t v74 = v141;
  uint64_t v75 = v143;
  Publisher.debounce<A>(for:scheduler:options:)();
  sub_1000966BC(v63, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v157 + 8))(v71, v158);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v70, v75);
  swift_allocObject();
  swift_weakInit();
  sub_100094134(&qword_1009117A0);
  sub_1000967F4(&qword_1009117A8, &qword_1009116A8);
  uint64_t v76 = v144;
  uint64_t v77 = v150;
  Publisher.tryMap<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v151 + 8))(v74, v77);
  sub_1000967F4(&qword_1009117B0, &qword_1009116B0);
  uint64_t v78 = v145;
  uint64_t v79 = v152;
  Publisher.mapError<A>(_:)();
  (*(void (**)(char *, uint64_t))(v153 + 8))(v76, v79);
  id v167 = _swiftEmptyArrayStorage;
  sub_1000967F4(&qword_1009117B8, &qword_1009116B8);
  id v80 = v148;
  uint64_t v81 = v154;
  Publisher.replaceError(with:)();
  (*(void (**)(char *, uint64_t))(v155 + 8))(v78, v81);
  swift_allocObject();
  swift_weakInit();
  sub_1000967F4(&qword_1009117C0, &qword_1009116C0);
  uint64_t v82 = v156;
  unint64_t v83 = v149;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v159 + 8))(v80, v82);
  sub_100094134(&qword_1009117C8);
  sub_1000967F4(&qword_1009117D0, &qword_1009116C8);
  sub_1000967F4(&qword_1009117D8, &qword_1009117C8);
  uint64_t v84 = v160;
  int64_t v85 = (void *)Publisher.multicast<A>(_:)();
  (*(void (**)(char *, uint64_t))(v161 + 8))(v83, v84);
  uint64_t v86 = *(void *)(v61 + 32);
  uint64_t v87 = *(void *)(v86 + 16);
  if (v87)
  {
    swift_bridgeObjectRetain();
    uint64_t v88 = 32;
    do
    {
      id v167 = v85;
      swift_unknownObjectRetain();
      sub_100094134(&qword_1009117E0);
      sub_1000967F4(&qword_1009117E8, &qword_1009117E0);
      id v89 = (void *)Publisher.eraseToAnyPublisher()();
      sub_1002667D4(v89);
      swift_unknownObjectRelease();
      swift_release();
      v88 += 16;
      --v87;
    }
    while (v87);
    swift_bridgeObjectRelease();
  }
  Publishers.Multicast.connect()();
  swift_beginAccess();
  sub_10025F8A4((uint64_t)&v167, v61 + 48);
  swift_endAccess();
  if (qword_1009071D0 != -1) {
    swift_once();
  }
  uint64_t v90 = type metadata accessor for Logger();
  sub_10008E2DC(v90, (uint64_t)qword_1009115A0);
  swift_retain_n();
  int64_t v91 = Logger.logObject.getter();
  int v92 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v91, (os_log_type_t)v92))
  {
    uint64_t v93 = (uint8_t *)swift_slowAlloc();
    uint64_t v165 = (void *)swift_slowAlloc();
    id v167 = v165;
    *(_DWORD *)uint64_t v93 = 136446210;
    int64_t v94 = *(void *)(v86 + 16);
    uint64_t v95 = _swiftEmptyArrayStorage;
    if (v94)
    {
      LODWORD(v161) = v92;
      uint64_t v163 = (uint64_t)v93;
      uint64_t v164 = (uint64_t)v91;
      id v166 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1001DE058(0, v94, 0);
      uint64_t v96 = 32;
      uint64_t v95 = v166;
      do
      {
        uint64_t v97 = *(void *)(v86 + v96);
        uint64_t v98 = *(void *)(v97 + 16);
        uint64_t v99 = *(void *)(v97 + 24);
        id v166 = v95;
        unint64_t v101 = v95[2];
        unint64_t v100 = v95[3];
        swift_bridgeObjectRetain();
        if (v101 >= v100 >> 1)
        {
          sub_1001DE058(v100 > 1, v101 + 1, 1);
          uint64_t v95 = v166;
        }
        v95[2] = v101 + 1;
        uint64_t v102 = &v95[2 * v101];
        v102[4] = v98;
        v102[5] = v99;
        v96 += 16;
        --v94;
      }
      while (v94);
      swift_bridgeObjectRelease();
      uint64_t v93 = (uint8_t *)v163;
      int64_t v91 = v164;
      LOBYTE(v92) = v161;
    }
    id v166 = v95;
    sub_100094134((uint64_t *)&unk_10090AFB0);
    sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
    uint64_t v103 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v105 = v104;
    swift_bridgeObjectRelease();
    id v166 = (void *)sub_1000C51B8(v103, v105, (uint64_t *)&v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v92, "TimelineEngine started with processors: %{public}s", v93, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();
  }
  else
  {

    swift_release();
    swift_release_n();
    swift_release();
  }
  return swift_release();
}

void *sub_10025A634(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009117F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  uint64_t v5 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v35 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v33 = (uint64_t)&v32 - v8;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100911800);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v37 = a1 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v38 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v34 = v5;
  uint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  unint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v18 = 0;
  uint64_t v36 = _swiftEmptyArrayStorage;
  if (!v15) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v18 << 6))
  {
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = sub_100094134((uint64_t *)&unk_100909E50);
    sub_1001248EC(v21 + *(void *)(*(void *)(v22 - 8) + 72) * i, (uint64_t)v11);
    unint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    *(void *)&v11[*(int *)(v9 + 48)] = v23;
    swift_bridgeObjectRetain();
    sub_10025D954((uint64_t)v11, v23, (uint64_t)v4);
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100911800);
    if ((*v16)(v4, 1, v39) == 1)
    {
      unint64_t result = (void *)sub_1000966BC((uint64_t)v4, &qword_1009117F0);
      if (v15) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v27 = v33;
      sub_10025F96C((uint64_t)v4, v33, type metadata accessor for RDTimelineEngineLocationReminder);
      sub_10025F96C(v27, v35, type metadata accessor for RDTimelineEngineLocationReminder);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v36 = (void *)sub_10030B2B0(0, v36[2] + 1, 1, (unint64_t)v36);
      }
      unint64_t v29 = v36[2];
      unint64_t v28 = v36[3];
      if (v29 >= v28 >> 1) {
        uint64_t v36 = (void *)sub_10030B2B0(v28 > 1, v29 + 1, 1, (unint64_t)v36);
      }
      uint64_t v30 = v35;
      uint64_t v31 = v36;
      v36[2] = v29 + 1;
      unint64_t result = (void *)sub_10025F96C(v30, (uint64_t)v31+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v29, type metadata accessor for RDTimelineEngineLocationReminder);
      if (v15) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v24 >= v38) {
      goto LABEL_29;
    }
    unint64_t v25 = *(void *)(v37 + 8 * v24);
    ++v18;
    if (!v25)
    {
      int64_t v18 = v24 + 1;
      if (v24 + 1 >= v38) {
        goto LABEL_29;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v18);
      if (!v25)
      {
        int64_t v18 = v24 + 2;
        if (v24 + 2 >= v38) {
          goto LABEL_29;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v18);
        if (!v25)
        {
          int64_t v18 = v24 + 3;
          if (v24 + 3 >= v38) {
            goto LABEL_29;
          }
          unint64_t v25 = *(void *)(v37 + 8 * v18);
          if (!v25) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v15 = (v25 - 1) & v25;
  }
  int64_t v26 = v24 + 4;
  if (v26 >= v38)
  {
LABEL_29:
    swift_release();
    return v36;
  }
  unint64_t v25 = *(void *)(v37 + 8 * v26);
  if (v25)
  {
    int64_t v18 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v18 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v18 >= v38) {
      goto LABEL_29;
    }
    unint64_t v25 = *(void *)(v37 + 8 * v18);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10025AA94()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009115A0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009115A0);
  if (qword_100907818 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942490);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10025AB5C()
{
  if (qword_1009071D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_1009115A0);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "TimelineEngine storeDidChangePublisher triggered", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10025AC44@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10025B8FC(a1, "TimelineEngine could not handle database changes because %s", a2);
}

uint64_t sub_10025AC50()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v13 = *(void *)(v0 - 8);
  uint64_t v14 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  unint64_t v15 = (void *)type metadata accessor for REMNotifyPublisher();
  sub_100094134((uint64_t *)&unk_100911850);
  uint64_t v9 = String.init<A>(reflecting:)();
  v12[1] = v10;
  v12[2] = v9;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v5);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  unint64_t v15 = _swiftEmptyArrayStorage;
  sub_10025F7F8((unint64_t *)&qword_10090AAC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1000967F4((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v14);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

void sub_10025AF88()
{
  if (qword_1009071D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_1009115A0);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "TimelineEngine significantTimeChangedPublisher triggered", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10025B070()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(void **)(result + 16);
  *uint64_t v3 = v6;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v1 + 8))(v3, v0);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (qword_1009071D0 != -1) {
LABEL_9:
  }
    swift_once();
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_1009115A0);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "TimelineEngine will go through debouncer", v11, 2u);
    swift_slowDealloc();
  }

  char v12 = *(unsigned char *)(v5 + 96);
  *(unsigned char *)(v5 + 96) = 1;
  sub_10025BD1C(v12);
  return swift_release();
}

void *sub_10025B278@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  uint64_t v44 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v45 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for RDTimelineEngineDueReminder(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for RDTimelineEngineReminder(0);
  uint64_t v47 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  id v46 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - v12;
  swift_beginAccess();
  uint64_t result = (void *)swift_weakLoadStrong();
  unint64_t v15 = _swiftEmptyArrayStorage;
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = *result;
    long long v43 = xmmword_100783530;
    long long v54 = xmmword_100783530;
    uint64_t v56 = 0;
    v57[0] = 0;
    uint64_t v55 = 0;
    *(void *)((char *)v57 + 6) = 0;
    uint64_t v53 = v17;
    uint64_t v18 = sub_1003B892C((uint64_t)&v54, (uint64_t)sub_10025FA9C, (uint64_t)v52);
    if (v1) {
      return (void *)swift_release();
    }
    uint64_t v40 = a1;
    int64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      Swift::Int v41 = v16;
      uint64_t v42 = 0;
      *(void *)&long long v54 = _swiftEmptyArrayStorage;
      uint64_t v20 = v18;
      sub_1001DE804(0, v19, 0);
      unint64_t v21 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v39 = v20;
      uint64_t v22 = v20 + v21;
      uint64_t v23 = *(void *)(v7 + 72);
      do
      {
        sub_10025F9D4(v22, (uint64_t)v9, type metadata accessor for RDTimelineEngineDueReminder);
        sub_10025F9D4((uint64_t)v9, (uint64_t)v13, type metadata accessor for RDTimelineEngineDueReminder);
        swift_storeEnumTagMultiPayload();
        sub_10025FA3C((uint64_t)v9, type metadata accessor for RDTimelineEngineDueReminder);
        int64_t v24 = (void *)v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE804(0, v24[2] + 1, 1);
          int64_t v24 = (void *)v54;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          sub_1001DE804(v25 > 1, v26 + 1, 1);
          int64_t v24 = (void *)v54;
        }
        v24[2] = v26 + 1;
        sub_10025F96C((uint64_t)v13, (uint64_t)v24+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v26, type metadata accessor for RDTimelineEngineReminder);
        v22 += v23;
        --v19;
      }
      while (v19);
      swift_bridgeObjectRelease();
      uint64_t v2 = v42;
      uint64_t v16 = v41;
    }
    else
    {
      swift_bridgeObjectRelease();
      int64_t v24 = _swiftEmptyArrayStorage;
    }
    long long v48 = v43;
    uint64_t v50 = 0;
    v51[0] = 0;
    uint64_t v49 = 0;
    *(void *)((char *)v51 + 6) = 0;
    uint64_t v27 = sub_1003B8DCC((uint64_t)&v48, (uint64_t)sub_10025D754, 0);
    if (v2)
    {
      swift_release();
      return (void *)swift_bridgeObjectRelease();
    }
    uint64_t v28 = v27;
    int64_t v29 = *(void *)(v27 + 16);
    if (v29)
    {
      Swift::Int v41 = v16;
      uint64_t v42 = 0;
      *(void *)&long long v54 = _swiftEmptyArrayStorage;
      sub_1001DE804(0, v29, 0);
      uint64_t v30 = v28 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
      uint64_t v31 = *(void *)(v44 + 72);
      uint64_t v32 = (uint64_t)v46;
      do
      {
        uint64_t v33 = v45;
        sub_10025F9D4(v30, v45, type metadata accessor for RDTimelineEngineLocationReminder);
        sub_10025F9D4(v33, v32, type metadata accessor for RDTimelineEngineLocationReminder);
        swift_storeEnumTagMultiPayload();
        sub_10025FA3C(v33, type metadata accessor for RDTimelineEngineLocationReminder);
        uint64_t v34 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE804(0, *(void *)(v34 + 16) + 1, 1);
          uint64_t v34 = v54;
        }
        unint64_t v36 = *(void *)(v34 + 16);
        unint64_t v35 = *(void *)(v34 + 24);
        uint64_t v37 = (uint64_t)v46;
        if (v36 >= v35 >> 1)
        {
          sub_1001DE804(v35 > 1, v36 + 1, 1);
          uint64_t v37 = (uint64_t)v46;
          uint64_t v34 = v54;
        }
        *(void *)(v34 + 16) = v36 + 1;
        uint64_t v32 = v37;
        sub_10025F96C(v37, v34+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v36, type metadata accessor for RDTimelineEngineReminder);
        v30 += v31;
        --v29;
      }
      while (v29);
    }
    swift_bridgeObjectRelease();
    *(void *)&long long v54 = v24;
    swift_bridgeObjectRetain();
    uint64_t v38 = swift_bridgeObjectRetain();
    sub_100203158(v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_release();
    unint64_t v15 = (void *)v54;
    a1 = v40;
  }
  *a1 = v15;
  return result;
}

uint64_t sub_10025B8F0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10025B8FC(a1, "TimelineEngine could not fetch reminders because %s", a2);
}

uint64_t sub_10025B8FC@<X0>(uint64_t *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  if (qword_1009071D0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_1009115A0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_errorRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    uint64_t v10 = String.init<A>(describing:)();
    sub_1000C51B8(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, a2, v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a3 = v5;
  return swift_errorRetain();
}

uint64_t sub_10025BADC()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(void **)(result + 16);
  *uint64_t v3 = v6;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v1 + 8))(v3, v0);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (qword_1009071D0 != -1) {
LABEL_9:
  }
    swift_once();
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_1009115A0);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "TimelineEngine is now going to multicast event to processors", v11, 2u);
    swift_slowDealloc();
  }

  char v12 = *(unsigned char *)(v5 + 96);
  *(unsigned char *)(v5 + 96) = 0;
  sub_10025BD1C(v12);
  return swift_release();
}

uint64_t sub_10025BCE0()
{
  return PassthroughSubject.init()();
}

void sub_10025BD1C(char a1)
{
  if (*(unsigned char *)(v1 + 96) != (a1 & 1))
  {
    uint64_t v2 = v1;
    if (*(unsigned char *)(v1 + 96))
    {
      *(void *)(v1 + 88) = os_transaction_create();
      swift_unknownObjectRelease();
      if (qword_1009071D0 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_10008E2DC(v3, (uint64_t)qword_1009115A0);
      oslog = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v4, "os_transaction INIT {name: com.apple.remindd.RDTimelineEngine.debouncingEvents}", v5, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      if (qword_1009071D0 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_10008E2DC(v6, (uint64_t)qword_1009115A0);
      id v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "os_transaction RELEASE {name: com.apple.remindd.RDTimelineEngine.debouncingEvents}", v9, 2u);
        swift_slowDealloc();
      }

      *(void *)(v2 + 88) = 0;
      swift_unknownObjectRelease();
    }
  }
}

void sub_10025BF34(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v82 = a2;
  uint64_t v75 = a1;
  id v72 = a3;
  uint64_t v3 = sub_100094134(&qword_1009117F8);
  __chkstk_darwin(v3 - 8);
  unint64_t v83 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for RDTimelineEngineDueReminder(0);
  uint64_t v79 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v80 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v78 = (char *)&v71 - v7;
  uint64_t v74 = _s10PredicatesOMa(0);
  __chkstk_darwin(v74);
  id v73 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100783540;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)(inited + 48) = swift_getKeyPath();
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = swift_getKeyPath();
  uint64_t v85 = inited;
  specialized Array._endMutation()();
  uint64_t v10 = v85;
  uint64_t v87 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, 5, 0);
  uint64_t v11 = 0;
  uint64_t v12 = (uint64_t)v87;
  do
  {
    if ((v10 & 0xC000000000000001) != 0)
    {
      uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v13 = *(void *)(v10 + 8 * v11 + 32);
      swift_retain();
    }
    uint64_t v14 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v15) {
      goto LABEL_55;
    }
    uint64_t v16 = v14;
    uint64_t v17 = v15;
    swift_release();
    uint64_t v87 = (void *)v12;
    unint64_t v19 = *(void *)(v12 + 16);
    unint64_t v18 = *(void *)(v12 + 24);
    if (v19 >= v18 >> 1)
    {
      sub_1001DE058(v18 > 1, v19 + 1, 1);
      uint64_t v12 = (uint64_t)v87;
    }
    ++v11;
    *(void *)(v12 + 16) = v19 + 1;
    uint64_t v20 = v12 + 16 * v19;
    *(void *)(v20 + 32) = v16;
    *(void *)(v20 + 40) = v17;
  }
  while (v11 != 5);
  swift_bridgeObjectRelease();
  uint64_t v21 = swift_initStackObject();
  *(_OWORD *)(v21 + 16) = xmmword_10077B710;
  *(void *)(v21 + 32) = swift_getKeyPath();
  *(void *)(v21 + 40) = swift_getKeyPath();
  uint64_t v85 = v21;
  specialized Array._endMutation()();
  uint64_t v22 = v85;
  id v23 = [self fetchRequest];
  [v23 setResultType:0];
  uint64_t v24 = (uint64_t)v73;
  swift_storeEnumTagMultiPayload();
  unint64_t v25 = (void *)sub_10038F1F0();
  sub_10025FA3C(v24, _s10PredicatesOMa);
  [v23 setPredicate:v25];

  [v23 setReturnsDistinctResults:0];
  sub_1001FFC40(v12);
  unint64_t v26 = v23;
  swift_release();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v23 setPropertiesToFetch:isa];

  uint64_t v87 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, 2, 0);
  uint64_t v28 = v87;
  if ((v22 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v11 = *(void *)(v22 + 32);
    swift_retain();
  }
  uint64_t v29 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v30) {
    goto LABEL_57;
  }
  uint64_t v31 = v29;
  uint64_t v32 = v30;
  swift_release();
  unint64_t v34 = v28[2];
  unint64_t v33 = v28[3];
  if (v34 >= v33 >> 1)
  {
    sub_1001DE058(v33 > 1, v34 + 1, 1);
    uint64_t v28 = v87;
  }
  void v28[2] = v34 + 1;
  unint64_t v35 = &v28[2 * v34];
  v35[4] = v31;
  v35[5] = v32;
  if ((v22 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v11 = *(void *)(v22 + 40);
    swift_retain();
  }
  uint64_t v36 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v37) {
    goto LABEL_57;
  }
  uint64_t v38 = v36;
  uint64_t v39 = v37;
  swift_release();
  uint64_t v87 = v28;
  unint64_t v41 = v28[2];
  unint64_t v40 = v28[3];
  uint64_t v11 = v41 + 1;
  if (v41 >= v40 >> 1)
  {
    sub_1001DE058(v40 > 1, v41 + 1, 1);
    uint64_t v28 = v87;
  }
  void v28[2] = v11;
  uint64_t v42 = &v28[2 * v41];
  v42[4] = v38;
  v42[5] = v39;
  swift_bridgeObjectRelease();
  Class v43 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v26 setRelationshipKeyPathsForPrefetching:v43];

  if (qword_100907400 != -1) {
    swift_once();
  }
  uint64_t v44 = (void *)qword_1009421C0;
  if (qword_1009421C0)
  {
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_10077A530;
    *(void *)(v45 + 32) = v44;
    uint64_t v85 = v45;
    specialized Array._endMutation()();
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    id v46 = v44;
    Class v47 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v26 setSortDescriptors:v47];
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  uint64_t v48 = v76;
  unint64_t v49 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v13 = v48;
  if (v48)
  {
  }
  else
  {
    unint64_t v50 = v49;
    unint64_t v76 = v49 >> 62;
    if (v49 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v51 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v52 = (uint64_t)v83;
    long long v71 = v26;
    uint64_t v77 = 0;
    if (v51)
    {
      if (v51 < 1)
      {
        __break(1u);
LABEL_55:
        uint64_t v85 = 0;
        unint64_t v86 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v69._object = (void *)0x80000001007CAF70;
        v69._countAndFlagsBits = 0xD00000000000002CLL;
        String.append(_:)(v69);
        for (uint64_t i = v13; ; uint64_t i = v11)
        {
          sub_100094134((uint64_t *)&unk_10090B070);
          _print_unlocked<A, B>(_:_:)();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_57:
          uint64_t v85 = 0;
          unint64_t v86 = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          v70._object = (void *)0x80000001007CAF70;
          v70._countAndFlagsBits = 0xD00000000000002CLL;
          String.append(_:)(v70);
        }
      }
      uint64_t v53 = 0;
      long long v54 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
      uint64_t v55 = _swiftEmptyArrayStorage;
      uint64_t v56 = (uint64_t)v78;
      do
      {
        if ((v50 & 0xC000000000000001) != 0) {
          id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v57 = *(id *)(v50 + 8 * v53 + 32);
        }
        uint64_t v58 = v57;
        sub_10025CA8C(v57, v52);
        uint64_t v52 = (uint64_t)v83;

        if ((*v54)(v52, 1, v81) == 1)
        {
          sub_1000966BC(v52, &qword_1009117F8);
        }
        else
        {
          sub_10025F96C(v52, v56, type metadata accessor for RDTimelineEngineDueReminder);
          sub_10025F96C(v56, v80, type metadata accessor for RDTimelineEngineDueReminder);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v55 = (void *)sub_10030B27C(0, v55[2] + 1, 1, (unint64_t)v55);
          }
          unint64_t v60 = v55[2];
          unint64_t v59 = v55[3];
          if (v60 >= v59 >> 1) {
            uint64_t v55 = (void *)sub_10030B27C(v59 > 1, v60 + 1, 1, (unint64_t)v55);
          }
          v55[2] = v60 + 1;
          sub_10025F96C(v80, (uint64_t)v55+ ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ *(void *)(v79 + 72) * v60, type metadata accessor for RDTimelineEngineDueReminder);
          uint64_t v52 = (uint64_t)v83;
        }
        ++v53;
      }
      while (v51 != v53);
    }
    else
    {
      uint64_t v55 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    if (qword_1009071D0 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_10008E2DC(v61, (uint64_t)qword_1009115A0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    id v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    BOOL v64 = os_log_type_enabled(v62, v63);
    uint64_t v65 = v71;
    if (v64)
    {
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 134218240;
      if (v76)
      {
        swift_bridgeObjectRetain();
        uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v67 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v85 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12) = 2048;
      uint64_t v68 = v55[2];
      swift_bridgeObjectRelease();
      uint64_t v85 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "TimelineEngine fetched %ld DUE reminders and returning %ld", (uint8_t *)v66, 0x16u);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    *id v72 = v55;
  }
}

uint64_t sub_10025CA8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v101 = type metadata accessor for Logger();
  uint64_t v103 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v102 = (char *)v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v5 - 8);
  uint64_t v108 = (char *)v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DateComponents();
  uint64_t v107 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v106 = (char *)v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v105 = (char *)v93 - v10;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v93 - v15;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v111 = v17;
  uint64_t v112 = v18;
  __chkstk_darwin(v17);
  id v109 = (char *)v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  id v110 = (char *)v93 - v21;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)v93 - v23;
  uint64_t v25 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (char *)v93 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)v93 - v29;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  unint64_t v104 = (char *)v93 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v35 = __chkstk_darwin(v34).n128_u64[0];
  id v113 = a1;
  uint64_t v114 = (char *)v93 - v36;
  id v37 = [a1 list:v35];
  if (!v37)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v30, 1, 1, v31);
LABEL_7:
    unint64_t v40 = (uint64_t *)&unk_100909E50;
    uint64_t v41 = (uint64_t)v30;
LABEL_8:
    sub_1000966BC(v41, v40);
LABEL_24:
    uint64_t v81 = type metadata accessor for RDTimelineEngineDueReminder(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(a2, 1, 1, v81);
  }
  uint64_t v38 = v37;
  uint64_t v100 = v7;
  id v39 = [v37 identifier];

  if (v39)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v27, 0, 1, v31);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v27, 1, 1, v31);
  }
  sub_100096408((uint64_t)v27, (uint64_t)v30, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1) {
    goto LABEL_7;
  }
  uint64_t v99 = a2;
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v42(v114, v30, v31);
  id v43 = [v113 displayDateDate];
  if (!v43)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v112 + 56))(v16, 1, 1, v111);
    goto LABEL_20;
  }
  uint64_t v44 = v43;
  uint64_t v95 = (void (*)(uint64_t, char *, uint64_t))v42;
  uint64_t v96 = v32 + 32;
  uint64_t v45 = v110;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v46 = v111;
  uint64_t v47 = v112;
  uint64_t v48 = (void (*)(char *, void, uint64_t, uint64_t))(v112 + 32);
  unint64_t v49 = *(unsigned int (**)(char *, char *, uint64_t))(v112 + 32);
  v49(v16, v45, v111);
  uint64_t v98 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  v98(v16, 0, 1, v46);
  uint64_t v97 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  if (v97(v16, 1, v46) == 1)
  {
LABEL_20:
    (*(void (**)(char *, uint64_t))(v32 + 8))(v114, v31);
    uint64_t v80 = (uint64_t)v16;
LABEL_23:
    sub_1000966BC(v80, (uint64_t *)&unk_100909A40);
    a2 = v99;
    goto LABEL_24;
  }
  v49(v24, v16, v46);
  id v50 = [v113 dueDate];
  uint64_t v51 = v46;
  if (!v50)
  {
    v98(v13, 1, 1, v46);
    goto LABEL_22;
  }
  uint64_t v52 = v50;
  int64_t v94 = v24;
  uint64_t v53 = v110;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  long long v54 = v53;
  uint64_t v24 = v94;
  v49(v13, v54, v51);
  v98(v13, 0, 1, v51);
  if (v97(v13, 1, v51) == 1)
  {
LABEL_22:
    (*(void (**)(char *, uint64_t))(v112 + 8))(v24, v51);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v114, v31);
    uint64_t v80 = (uint64_t)v13;
    goto LABEL_23;
  }
  uint64_t v55 = v48;
  uint64_t v56 = v109;
  uint64_t v97 = (unsigned int (*)(char *, uint64_t, uint64_t))v49;
  uint64_t v98 = v55;
  v49(v109, v13, v51);
  id v57 = self;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v59 = v113;
  id v60 = [v113 displayDateIsAllDay];
  id v61 = [v59 timeZone];
  id v62 = [v57 dueDateComponentsWithDueDate:isa isAllDay:v60 timeZoneName:v61];

  if (!v62)
  {
    uint64_t v65 = v108;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v108, 1, 1, v100);
    a2 = v99;
    goto LABEL_26;
  }
  os_log_type_t v63 = v106;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v64 = v107;
  uint64_t v65 = v108;
  uint64_t v66 = v107 + 32;
  uint64_t v67 = v63;
  uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v107 + 32);
  uint64_t v69 = v100;
  v68(v108, v67, v100);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v65, 0, 1, v69);
  int v70 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48))(v65, 1, v69);
  a2 = v99;
  if (v70 == 1)
  {
LABEL_26:
    uint64_t v83 = v111;
    uint64_t v84 = *(void (**)(char *, uint64_t))(v112 + 8);
    v84(v56, v111);
    v84(v24, v83);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v114, v31);
    unint64_t v40 = (uint64_t *)&unk_100911810;
    uint64_t v41 = (uint64_t)v65;
    goto LABEL_8;
  }
  uint64_t v108 = (char *)v68;
  v68(v105, v65, v69);
  id v71 = [v113 recurrenceRules];
  v93[1] = v66;
  if (v71)
  {
    id v72 = v71;
    uint64_t v115 = (uint64_t)v71;
    sub_1000963CC(0, (unint64_t *)&qword_100911820);
    sub_1000963CC(0, (unint64_t *)&unk_10090B010);
    sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
    uint64_t v73 = Sequence.elements<A>(ofType:)();

    if (qword_1009071D0 != -1) {
      swift_once();
    }
    uint64_t v74 = v101;
    uint64_t v75 = sub_10008E2DC(v101, (uint64_t)qword_1009115A0);
    unint64_t v76 = v102;
    uint64_t v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v103 + 16))(v102, v75, v74);
    uint64_t v106 = (char *)v73;
    uint64_t v115 = v73;
    __chkstk_darwin(v77);
    v93[-2] = v76;
    sub_100094134(&qword_100921D70);
    sub_1000963CC(0, (unint64_t *)&qword_100911840);
    sub_1000967F4(&qword_100911510, &qword_100921D70);
    uint64_t v78 = Sequence.map<A>(skippingError:_:)();
    uint64_t v79 = v111;
    uint64_t v107 = v78;
    (*(void (**)(char *, uint64_t))(v103 + 8))(v102, v74);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v107 = 0;
    uint64_t v79 = v111;
  }
  uint64_t v85 = v114;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v104, v114, v31);
  uint64_t v86 = v112;
  uint64_t v87 = v110;
  uint64_t v88 = v94;
  (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v110, v94, v79);
  uint64_t v89 = v79;
  unsigned __int8 v90 = [v113 displayDateIsAllDay];
  int64_t v91 = *(void (**)(char *, uint64_t))(v86 + 8);
  v91(v109, v89);
  v91(v88, v89);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v85, v31);
  int v92 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
  ((void (*)(uint64_t, char *, uint64_t))v108)(a2 + v92[7], v105, v100);
  v95(a2, v104, v31);
  v97((char *)(a2 + v92[5]), (uint64_t)v87, v89);
  *(unsigned char *)(a2 + v92[6]) = v90;
  *(void *)(a2 + v92[8]) = v107;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v92 - 1) + 56))(a2, 0, 1, v92);
}

void sub_10025D754(unint64_t a1@<X0>, void *a2@<X8>)
{
  Class v4 = sub_1003B243C(a1);
  if (!v2)
  {
    uint64_t v5 = sub_10025A634((uint64_t)v4);
    if (qword_1009071D0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_1009115A0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 134218496;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2048;
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 22) = 2048;
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "TimelineEngine fetched (keys: %ld, values: %ld) LOCATION reminders and returning %ld", (uint8_t *)v9, 0x20u);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    *a2 = v5;
  }
}

uint64_t sub_10025D954@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v49 = a2;
  uint64_t v5 = sub_100094134(&qword_1009117F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v50 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v36 - v18;
  sub_1001248EC(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v13, v14);
    uint64_t v26 = type metadata accessor for RDTimelineEngineLocationReminder(0);
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    uint64_t v29 = v27 + 56;
    v28(v10, 1, 1, v26);
    if (v49 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
      if (v32) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v30 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v32 = v30;
      if (v30)
      {
LABEL_9:
        uint64_t v36 = v29;
        id v37 = v28;
        uint64_t v38 = v26;
        id v39 = v10;
        uint64_t v40 = a3;
        unint64_t v48 = v49 & 0xC000000000000001;
        uint64_t v46 = v15 + 16;
        uint64_t v33 = (void (**)(char *, uint64_t))(v15 + 8);
        id v43 = &v51;
        *(void *)&long long v31 = 136315138;
        long long v42 = v31;
        uint64_t v41 = (char *)&type metadata for Any + 8;
        uint64_t v44 = v19;
        uint64_t v45 = v7;
        uint64_t v47 = v32;
        if ((v49 & 0xC000000000000001) != 0) {
          id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v34 = *(id *)(v49 + 32);
        }
        double v35 = v34;
        sub_10025E068(v34, v7);
        swift_bridgeObjectRelease();

        uint64_t v10 = v39;
        sub_1000966BC((uint64_t)v39, &qword_1009117F0);
        (*v33)(v19, v14);
        v37(v7, 0, 1, v38);
        sub_100096408((uint64_t)v7, (uint64_t)v10, &qword_1009117F0);
        a3 = v40;
        return sub_100096408((uint64_t)v10, a3, &qword_1009117F0);
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    return sub_100096408((uint64_t)v10, a3, &qword_1009117F0);
  }
  sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
  if (qword_1009071D0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10008E2DC(v20, (uint64_t)qword_1009115A0);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "TimelineEngine fetched some location triggers with nil reminder identifier", v23, 2u);
    swift_slowDealloc();
  }

  uint64_t v24 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a3, 1, 1, v24);
}

uint64_t sub_10025E068@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v87 = a2;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v79 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v89 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v88 = (char *)&v79 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v79 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v79 - v18;
  *(void *)&long long v93 = 0xD000000000000019;
  *((void *)&v93 + 1) = 0x80000001007C72B0;
  uint64_t v20 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v91 = a1;
  id v21 = [a1 __swift_objectForKeyedSubscript:v20];
  swift_unknownObjectRelease();
  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v93 = 0u;
    long long v94 = 0u;
  }
  sub_100096408((uint64_t)&v93, (uint64_t)v95, &qword_100908190);
  if (!v96)
  {
    sub_1000966BC((uint64_t)v95, &qword_100908190);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_9;
  }
  uint64_t v86 = v16;
  unsigned __int8 v90 = v19;
  int v22 = swift_dynamicCast();
  uint64_t v23 = v9;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v24(v8, v22 ^ 1u, 1, v9);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v25(v8, 1, v23) == 1)
  {
LABEL_9:
    sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909E50);
    uint64_t v30 = self;
    sub_1000963CC(0, &qword_100910E10);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v32 = String._bridgeToObjectiveC()();
    [v30 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v32];

    return swift_willThrow();
  }
  uint64_t v85 = v10;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v27 = v8;
  uint64_t v28 = v23;
  uint64_t v84 = v10 + 32;
  uint64_t v83 = v26;
  v26(v90, v27, v23);
  *(void *)&long long v93 = 0xD00000000000001ELL;
  *((void *)&v93 + 1) = 0x80000001007CFB80;
  id v29 = [v91 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v29)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v93 = 0u;
    long long v94 = 0u;
  }
  sub_100096408((uint64_t)&v93, (uint64_t)v95, &qword_100908190);
  if (!v96)
  {
    sub_1000966BC((uint64_t)v95, &qword_100908190);
    v24(v5, 1, 1, v23);
    uint64_t v35 = v23;
    goto LABEL_16;
  }
  int v34 = swift_dynamicCast();
  v24(v5, v34 ^ 1u, 1, v23);
  uint64_t v35 = v23;
  if (v25(v5, 1, v23) == 1)
  {
LABEL_16:
    sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909E50);
    uint64_t v38 = self;
    sub_1000963CC(0, &qword_100910E10);
    uint64_t v39 = swift_getObjCClassFromMetadata();
    NSString v40 = String._bridgeToObjectiveC()();
    [v38 unexpectedNilPropertyWithClass:v39 property:v40];

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v90, v35);
  }
  v83(v86, v5, v23);
  *(void *)&long long v93 = 0x656475746974616CLL;
  *((void *)&v93 + 1) = 0xE800000000000000;
  id v36 = [v91 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  id v37 = v90;
  if (v36)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v93 = 0u;
    long long v94 = 0u;
  }
  sub_100096408((uint64_t)&v93, (uint64_t)v95, &qword_100908190);
  if (!v96)
  {
    sub_1000966BC((uint64_t)v95, &qword_100908190);
    goto LABEL_37;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_37;
  }
  double v41 = v92;
  *(void *)&long long v93 = 0x64757469676E6F6CLL;
  *((void *)&v93 + 1) = 0xE900000000000065;
  id v42 = [v91 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v42)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v93 = 0u;
    long long v94 = 0u;
  }
  sub_100096408((uint64_t)&v93, (uint64_t)v95, &qword_100908190);
  if (!v96)
  {
    sub_1000966BC((uint64_t)v95, &qword_100908190);
    goto LABEL_37;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_37;
  }
  double v43 = v92;
  *(void *)&long long v93 = 0x737569646172;
  *((void *)&v93 + 1) = 0xE600000000000000;
  id v44 = [v91 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v44)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v93 = 0u;
    long long v94 = 0u;
  }
  sub_100096408((uint64_t)&v93, (uint64_t)v95, &qword_100908190);
  if (!v96)
  {
    sub_1000966BC((uint64_t)v95, &qword_100908190);
    goto LABEL_37;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_37:
    uint64_t v47 = self;
    sub_1000963CC(0, &qword_100910E10);
    uint64_t v48 = swift_getObjCClassFromMetadata();
    NSString v49 = String._bridgeToObjectiveC()();
    [v47 unexpectedNilPropertyWithClass:v48 property:v49];

    swift_willThrow();
    id v50 = *(void (**)(char *, uint64_t))(v85 + 8);
    v50(v86, v28);
    return ((uint64_t (*)(char *, uint64_t))v50)(v37, v28);
  }
  double v45 = v92;
  *(void *)&long long v93 = 0x6E6F697461636F6CLL;
  *((void *)&v93 + 1) = 0xEB00000000444955;
  id v46 = [v91 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v46)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v93 = 0u;
    long long v94 = 0u;
  }
  sub_100096408((uint64_t)&v93, (uint64_t)v95, &qword_100908190);
  if (v96)
  {
    if (swift_dynamicCast()) {
      goto LABEL_44;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)v95, &qword_100908190);
  }
  v95[0] = 0;
  v95[1] = 0xE000000000000000;
  Double.write<A>(to:)();
  Double.write<A>(to:)();
  Double.write<A>(to:)();
LABEL_44:
  id v51 = objc_allocWithZone((Class)CLCircularRegion);
  NSString v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v53 = [v51 initWithCenter:v52 radius:v41 identifier:v43];

  if (qword_1009071D0 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  sub_10008E2DC(v54, (uint64_t)qword_1009115A0);
  uint64_t v55 = v85;
  uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
  id v57 = v88;
  v56(v88, v37, v35);
  uint64_t v58 = v89;
  v56(v89, v86, v35);
  id v59 = v53;
  id v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  int v62 = v61;
  BOOL v63 = os_log_type_enabled(v60, v61);
  id v91 = v59;
  if (v63)
  {
    uint64_t v64 = swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    v95[0] = v82;
    *(_DWORD *)uint64_t v64 = 136315650;
    os_log_t v81 = v60;
    uint64_t v65 = CLRegion.stringRepresentation.getter();
    *(void *)&long long v93 = sub_1000C51B8(v65, v66, v95);
    int v80 = v62;
    uint64_t v79 = (char *)&v93 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v64 + 12) = 2080;
    sub_10025F7F8((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v67 = v88;
    uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v93 = sub_1000C51B8(v68, v69, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int v70 = *(void (**)(char *, uint64_t))(v55 + 8);
    v70(v67, v35);
    *(_WORD *)(v64 + 22) = 2080;
    id v71 = v89;
    uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v93 = sub_1000C51B8(v72, v73, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v70(v71, v35);
    os_log_t v74 = v81;
    _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v80, "TimelineEngine: Converted fetched dictionary to RDTimelineEngineLocationReminder {region: %s, reminder: %s, list: %s}", (uint8_t *)v64, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v75 = *(void (**)(char *, uint64_t))(v55 + 8);
    v75(v57, v35);
    v75(v58, v35);
  }
  unint64_t v76 = v87;
  uint64_t v77 = (uint64_t (*)(uint64_t, char *, uint64_t))v83;
  v83(v87, v86, v35);
  uint64_t v78 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  uint64_t result = v77((uint64_t)&v76[*(int *)(v78 + 20)], v37, v35);
  *(void *)&v76[*(int *)(v78 + 24)] = v91;
  return result;
}

uint64_t sub_10025EEF4()
{
  swift_bridgeObjectRelease();
  sub_1000966BC(v0 + 48, &qword_100911688);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDTimelineEngine()
{
  return self;
}

void *sub_10025EF78(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009117F8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RDTimelineEngineDueReminder(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v30 = (uint64_t)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v27 = (uint64_t)v24 - v9;
  uint64_t v29 = type metadata accessor for RDTimelineEngineReminder(0);
  __chkstk_darwin(v29);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v24 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v17 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v28 = *(void *)(v13 + 72);
  uint64_t v18 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v24[1] = a1;
  uint64_t v25 = v6;
  swift_bridgeObjectRetain();
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v26 = v5;
  do
  {
    sub_10025F9D4(v17, (uint64_t)v15, type metadata accessor for RDTimelineEngineReminder);
    sub_10025F9D4((uint64_t)v15, (uint64_t)v11, type metadata accessor for RDTimelineEngineReminder);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*v18)(v4, 1, 1, v5);
      sub_10025FA3C((uint64_t)v11, type metadata accessor for RDTimelineEngineReminder);
    }
    else
    {
      sub_10025F96C((uint64_t)v11, (uint64_t)v4, type metadata accessor for RDTimelineEngineDueReminder);
      (*v18)(v4, 0, 1, v5);
    }
    sub_10025FA3C((uint64_t)v15, type metadata accessor for RDTimelineEngineReminder);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_1000966BC((uint64_t)v4, &qword_1009117F8);
    }
    else
    {
      uint64_t v20 = v27;
      sub_10025F96C((uint64_t)v4, v27, type metadata accessor for RDTimelineEngineDueReminder);
      sub_10025F96C(v20, v30, type metadata accessor for RDTimelineEngineDueReminder);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = (void *)sub_10030B27C(0, v19[2] + 1, 1, (unint64_t)v19);
      }
      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      if (v22 >= v21 >> 1) {
        uint64_t v19 = (void *)sub_10030B27C(v21 > 1, v22 + 1, 1, (unint64_t)v19);
      }
      v19[2] = v22 + 1;
      sub_10025F96C(v30, (uint64_t)v19+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v22, type metadata accessor for RDTimelineEngineDueReminder);
      uint64_t v5 = v26;
    }
    v17 += v28;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  return v19;
}

void *sub_10025F39C(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009117F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v30 = (uint64_t)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v27 = (uint64_t)v24 - v9;
  uint64_t v29 = type metadata accessor for RDTimelineEngineReminder(0);
  __chkstk_darwin(v29);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v24 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v17 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v28 = *(void *)(v13 + 72);
  uint64_t v18 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v24[1] = a1;
  uint64_t v25 = v6;
  swift_bridgeObjectRetain();
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v26 = v5;
  do
  {
    sub_10025F9D4(v17, (uint64_t)v15, type metadata accessor for RDTimelineEngineReminder);
    sub_10025F9D4((uint64_t)v15, (uint64_t)v11, type metadata accessor for RDTimelineEngineReminder);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_10025F96C((uint64_t)v11, (uint64_t)v4, type metadata accessor for RDTimelineEngineLocationReminder);
      (*v18)(v4, 0, 1, v5);
    }
    else
    {
      (*v18)(v4, 1, 1, v5);
      sub_10025FA3C((uint64_t)v11, type metadata accessor for RDTimelineEngineReminder);
    }
    sub_10025FA3C((uint64_t)v15, type metadata accessor for RDTimelineEngineReminder);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_1000966BC((uint64_t)v4, &qword_1009117F0);
    }
    else
    {
      uint64_t v20 = v27;
      sub_10025F96C((uint64_t)v4, v27, type metadata accessor for RDTimelineEngineLocationReminder);
      sub_10025F96C(v20, v30, type metadata accessor for RDTimelineEngineLocationReminder);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = (void *)sub_10030B2B0(0, v19[2] + 1, 1, (unint64_t)v19);
      }
      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      if (v22 >= v21 >> 1) {
        uint64_t v19 = (void *)sub_10030B2B0(v21 > 1, v22 + 1, 1, (unint64_t)v19);
      }
      v19[2] = v22 + 1;
      sub_10025F96C(v30, (uint64_t)v19+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v22, type metadata accessor for RDTimelineEngineLocationReminder);
      uint64_t v5 = v26;
    }
    v17 += v28;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_10025F7C0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025F7F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10025F840()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025F878()
{
  return sub_10025B070();
}

void *sub_10025F880@<X0>(void *a1@<X8>)
{
  return sub_10025B278(a1);
}

uint64_t sub_10025F89C()
{
  return sub_10025BADC();
}

uint64_t sub_10025F8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100911688);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for RDTimelineEngineLocationReminder(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100911958);
}

uint64_t type metadata accessor for RDTimelineEngineReminder(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100911A08);
}

uint64_t type metadata accessor for RDTimelineEngineDueReminder(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_1009118B8);
}

uint64_t sub_10025F96C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10025F9D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10025FA3C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10025FA9C(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10025BF34(a1, *(void *)(v2 + 16), a2);
}

const char *sub_10025FAD8()
{
  return "timeZone";
}

const char *sub_10025FAF4()
{
  return "recurrenceRules";
}

uint64_t sub_10025FB08()
{
  return sub_10024B9E4();
}

void *sub_10025FB10(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for DateComponents();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10025FC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = type metadata accessor for DateComponents();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10025FD7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DateComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10025FE9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DateComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10025FFCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DateComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1002600E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DateComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10026020C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100260220);
}

uint64_t sub_100260220(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = type metadata accessor for DateComponents();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[8]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  int v17 = v16 - 1;
  if (v17 < 0) {
    int v17 = -1;
  }
  return (v17 + 1);
}

uint64_t sub_10026038C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002603A0);
}

uint64_t sub_1002603A0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for Date();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = type metadata accessor for DateComponents();
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[8]) = a2;
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[7];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1002604FC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for DateComponents();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_100260610(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v10;
    id v11 = v10;
  }
  return a1;
}

void sub_100260708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  uint64_t v6 = *(void **)(a1 + *(int *)(a2 + 24));
}

uint64_t sub_1002607A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v9;
  id v10 = v9;
  return a1;
}

uint64_t sub_100260850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = *(void **)(a2 + v8);
  id v10 = *(void **)(a1 + v8);
  *(void *)(a1 + v8) = v9;
  id v11 = v9;

  return a1;
}

uint64_t sub_100260900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1002609A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = *(void **)(a1 + v8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);

  return a1;
}

uint64_t sub_100260A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100260A64);
}

uint64_t sub_100260A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100260B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100260B38);
}

uint64_t sub_100260B38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100260BF4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_100260C90(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for RDTimelineEngineLocationReminder(0);
      v8((void *)((char *)a1 + *(int *)(v9 + 20)), (void *)((char *)a2 + *(int *)(v9 + 20)), v7);
      uint64_t v10 = *(int *)(v9 + 24);
      id v11 = *(void **)((char *)a2 + v10);
      *(void *)((char *)a1 + v10) = v11;
      id v12 = v11;
    }
    else
    {
      uint64_t v14 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
      uint64_t v15 = v14[5];
      unint64_t v16 = (char *)a1 + v15;
      int v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      *((unsigned char *)a1 + v14[6]) = *((unsigned char *)a2 + v14[6]);
      uint64_t v19 = v14[7];
      uint64_t v20 = (char *)a1 + v19;
      unint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for DateComponents();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
      *(void *)((char *)a1 + v14[8]) = *(void *)((char *)a2 + v14[8]);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_100260E8C(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(a1, v3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for RDTimelineEngineLocationReminder(0);
    v4(a1 + *(int *)(v5 + 20), v3);
    uint64_t v6 = *(void **)(a1 + *(int *)(v5 + 24));
  }
  else
  {
    uint64_t v7 = type metadata accessor for RDTimelineEngineDueReminder(0);
    uint64_t v8 = a1 + *(int *)(v7 + 20);
    uint64_t v9 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    uint64_t v10 = a1 + *(int *)(v7 + 28);
    uint64_t v11 = type metadata accessor for DateComponents();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100260FFC(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for RDTimelineEngineLocationReminder(0);
    v6(a1 + *(int *)(v7 + 20), a2 + *(int *)(v7 + 20), v5);
    uint64_t v8 = *(int *)(v7 + 24);
    uint64_t v9 = *(void **)(a2 + v8);
    *(void *)(a1 + v8) = v9;
    id v10 = v9;
  }
  else
  {
    uint64_t v11 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
    uint64_t v12 = v11[5];
    uint64_t v13 = a1 + v12;
    uint64_t v14 = a2 + v12;
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    *(unsigned char *)(a1 + v11[6]) = *(unsigned char *)(a2 + v11[6]);
    uint64_t v16 = v11[7];
    uint64_t v17 = a1 + v16;
    uint64_t v18 = a2 + v16;
    uint64_t v19 = type metadata accessor for DateComponents();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *(void *)(a1 + v11[8]) = *(void *)(a2 + v11[8]);
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1002611A0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10025FA3C(a1, type metadata accessor for RDTimelineEngineReminder);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
    v6(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for RDTimelineEngineLocationReminder(0);
      v6(a1 + *(int *)(v7 + 20), a2 + *(int *)(v7 + 20), v5);
      uint64_t v8 = *(int *)(v7 + 24);
      uint64_t v9 = *(void **)(a2 + v8);
      *(void *)(a1 + v8) = v9;
      id v10 = v9;
    }
    else
    {
      uint64_t v11 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
      uint64_t v12 = v11[5];
      uint64_t v13 = a1 + v12;
      uint64_t v14 = a2 + v12;
      uint64_t v15 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      *(unsigned char *)(a1 + v11[6]) = *(unsigned char *)(a2 + v11[6]);
      uint64_t v16 = v11[7];
      uint64_t v17 = a1 + v16;
      uint64_t v18 = a2 + v16;
      uint64_t v19 = type metadata accessor for DateComponents();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      *(void *)(a1 + v11[8]) = *(void *)(a2 + v11[8]);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100261368(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for RDTimelineEngineLocationReminder(0);
    v6(a1 + *(int *)(v7 + 20), a2 + *(int *)(v7 + 20), v5);
    uint64_t v8 = (int *)(v7 + 24);
  }
  else
  {
    uint64_t v9 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
    uint64_t v10 = v9[5];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    *(unsigned char *)(a1 + v9[6]) = *(unsigned char *)(a2 + v9[6]);
    uint64_t v14 = v9[7];
    uint64_t v15 = a1 + v14;
    uint64_t v16 = a2 + v14;
    uint64_t v17 = type metadata accessor for DateComponents();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    uint64_t v8 = v9 + 8;
  }
  *(void *)(a1 + *v8) = *(void *)(a2 + *v8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100261500(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10025FA3C(a1, type metadata accessor for RDTimelineEngineReminder);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
    v6(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for RDTimelineEngineLocationReminder(0);
      v6(a1 + *(int *)(v7 + 20), a2 + *(int *)(v7 + 20), v5);
      uint64_t v8 = (int *)(v7 + 24);
    }
    else
    {
      uint64_t v9 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
      uint64_t v10 = v9[5];
      uint64_t v11 = a1 + v10;
      uint64_t v12 = a2 + v10;
      uint64_t v13 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      *(unsigned char *)(a1 + v9[6]) = *(unsigned char *)(a2 + v9[6]);
      uint64_t v14 = v9[7];
      uint64_t v15 = a1 + v14;
      uint64_t v16 = a2 + v14;
      uint64_t v17 = type metadata accessor for DateComponents();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
      uint64_t v8 = v9 + 8;
    }
    *(void *)(a1 + *v8) = *(void *)(a2 + *v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1002616BC()
{
  uint64_t result = type metadata accessor for RDTimelineEngineDueReminder(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for RDTimelineEngineLocationReminder(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for RDGroceryCorrectionCache()
{
  uint64_t result = qword_100911A60;
  if (!qword_100911A60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002617CC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10026181C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100911A40);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100911A40);
  if (qword_1009077F0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942418);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002618E4()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v13 = *(void *)(v0 - 8);
  uint64_t v14 = v0;
  __chkstk_darwin(v0);
  uint64_t v12 = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  uint64_t v15 = (void *)type metadata accessor for RDGroceryCorrectionCache();
  sub_100094134(&qword_100911AC0);
  uint64_t v8 = String.init<A>(reflecting:)();
  v11[0] = v9;
  v11[1] = v8;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v4);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = _swiftEmptyArrayStorage;
  sub_1001D5428();
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1001D5480();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v14);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(swift_allocObject() + qword_100911A58) = &_swiftEmptySetSingleton;
  uint64_t result = REMCache.init(cacheQueue:countLimit:)();
  qword_1009420D8 = result;
  return result;
}

uint64_t sub_100261C14()
{
  *(void *)(swift_allocObject() + qword_100911A58) = &_swiftEmptySetSingleton;
  return REMCache.init(cacheQueue:countLimit:)();
}

uint64_t sub_100261C74(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  if (qword_1009071D8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100911A40);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v33 = a9;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v29 = v13;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136316162;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, a2, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_type_t type = v19;
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a3, a4, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 22) = 2080;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a5, a6, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 32) = 2080;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a7, a8, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 42) = 2112;
    id v21 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v28 = v33;

    _os_log_impl((void *)&_mh_execute_header, v18, type, "RDGroceryCorrectionCache: Recording {%s: (from: %s, to: %s, locale: %s} in list: %@", (uint8_t *)v20, 0x34u);
    sub_100094134((uint64_t *)&unk_10090A040);
    uint64_t v22 = a5;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    uint64_t v23 = a3;
    swift_slowDealloc();
    uint64_t v13 = v29;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v23 = a3;
    uint64_t v22 = a5;
  }
  uint64_t v24 = (void *)swift_allocObject();
  void v24[2] = v33;
  v24[3] = a1;
  v24[4] = a2;
  v24[5] = v23;
  v24[6] = a4;
  v24[7] = v22;
  v24[8] = a6;
  v24[9] = a7;
  v24[10] = a8;
  v24[11] = v13;
  v24[12] = a11;
  v24[13] = a12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v25 = v33;
  swift_retain();
  swift_retain();
  dispatch thunk of REMCache.performReadAndWrite(_:operations:)();
  return swift_release();
}

uint64_t sub_1002620CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t))
{
  if (REMCacheContext.object(forKey:)())
  {
    REMStructWrapper.value.getter();
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24[5] = a10;
    v24[0] = a5;
    v24[1] = a6;
    void v24[2] = a7;
    v24[3] = a8;
    v24[4] = a9;
    sub_1002C59A4(v24, a3, a4, isUniquelyReferenced_nonNull_native);
    unint64_t v20 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v25 = v20;
    sub_100094134(&qword_100911AB8);
    swift_allocObject();
    REMStructWrapper.init(_:)();
    REMCacheContext.setObject(_:forKey:)();
    swift_release();
  }
  else
  {
    sub_100094134(&qword_100911AB0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)(inited + 32) = a3;
    *(void *)(inited + 40) = a4;
    *(void *)(inited + 48) = a5;
    *(void *)(inited + 56) = a6;
    *(void *)(inited + 64) = a7;
    *(void *)(inited + 72) = a8;
    *(void *)(inited + 80) = a9;
    *(void *)(inited + 88) = a10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v25 = sub_1002EEDD0(inited);
    sub_100094134(&qword_100911AB8);
    swift_allocObject();
    REMStructWrapper.init(_:)();
    REMCacheContext.setObject(_:forKey:)();
    swift_release();
    swift_beginAccess();
    sub_10031DE54(&v26, a2);
    swift_endAccess();
  }
  return a12(a1);
}

uint64_t sub_100262310()
{
  uint64_t v1 = *v0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = v0;
  v3[3] = v2;
  v3[4] = v1;
  swift_retain();
  swift_retain();
  dispatch thunk of REMCache.performReadAndWrite(_:operations:)();
  swift_release();

  return swift_release();
}

uint64_t sub_1002623F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v131 = a4;
  uint64_t v124 = a1;
  uint64_t v139 = type metadata accessor for REMAnalyticsEvent();
  uint64_t v6 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v138 = (uint64_t *)((char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = (void *)(a2 + qword_100911A58);
  swift_beginAccess();
  unint64_t v119 = v8;
  uint64_t v9 = *v8;
  if ((*v8 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    sub_1001207D4();
    Set.Iterator.init(_cocoa:)();
    uint64_t v11 = v151;
    uint64_t v123 = v152;
    uint64_t v12 = v153;
    int64_t v13 = v154;
    unint64_t v14 = v155;
  }
  else
  {
    uint64_t v15 = -1 << *(unsigned char *)(v9 + 32);
    uint64_t v16 = *(void *)(v9 + 56);
    uint64_t v123 = v9 + 56;
    uint64_t v17 = ~v15;
    uint64_t v18 = -v15;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    else {
      uint64_t v19 = -1;
    }
    unint64_t v14 = v19 & v16;
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = v17;
    int64_t v13 = 0;
  }
  uint64_t v20 = 0;
  unint64_t v144 = (uint64_t *)(a3 + 16);
  uint64_t v121 = v11 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v118 = v12;
  int64_t v122 = (unint64_t)(v12 + 64) >> 6;
  unsigned int v137 = enum case for REMAnalyticsEvent.groceryCorrection(_:);
  uint64_t v136 = (void (**)(uint64_t *, void, uint64_t))(v6 + 104);
  uint64_t v135 = (void (**)(uint64_t *, uint64_t))(v6 + 8);
  *(void *)&long long v10 = 136446722;
  long long v130 = v10;
  uint64_t v129 = (char *)&type metadata for Any + 8;
  uint64_t v120 = (char *)&type metadata for Swift.AnyObject + 8;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v11 < 0)
    {
      uint64_t v23 = __CocoaSet.Iterator.next()();
      if (!v23) {
        goto LABEL_187;
      }
      id v149 = (void *)v23;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v24 = (void *)v150;
      swift_unknownObjectRelease();
      id v25 = v24;
      int64_t v22 = v13;
      uint64_t v128 = v14;
      if (!v24) {
        goto LABEL_187;
      }
    }
    else
    {
      if (v14)
      {
        uint64_t v128 = (v14 - 1) & v14;
        unint64_t v21 = __clz(__rbit64(v14)) | (v13 << 6);
        int64_t v22 = v13;
      }
      else
      {
        int64_t v26 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_196;
        }
        if (v26 >= v122)
        {
LABEL_187:
          sub_1000C1AF8();
          REMCacheContext.clearAll()();
          void *v119 = &_swiftEmptySetSingleton;
          return swift_bridgeObjectRelease();
        }
        unint64_t v27 = *(void *)(v123 + 8 * v26);
        if (!v27)
        {
          int64_t v28 = v13 + 2;
          if (v13 + 2 >= v122) {
            goto LABEL_187;
          }
          unint64_t v27 = *(void *)(v123 + 8 * v28);
          if (v27) {
            goto LABEL_23;
          }
          int64_t v28 = v13 + 3;
          if (v13 + 3 >= v122) {
            goto LABEL_187;
          }
          unint64_t v27 = *(void *)(v123 + 8 * v28);
          if (v27)
          {
LABEL_23:
            int64_t v26 = v28;
          }
          else
          {
            int64_t v26 = v13 + 4;
            if (v13 + 4 >= v122) {
              goto LABEL_187;
            }
            unint64_t v27 = *(void *)(v123 + 8 * v26);
            if (!v27)
            {
              uint64_t v116 = v13 + 5;
              do
              {
                if (v122 == v116) {
                  goto LABEL_187;
                }
                unint64_t v27 = *(void *)(v123 + 8 * v116++);
              }
              while (!v27);
              int64_t v26 = v116 - 1;
            }
          }
          uint64_t v11 = i;
        }
        uint64_t v128 = (v27 - 1) & v27;
        int64_t v22 = v26;
        unint64_t v21 = __clz(__rbit64(v27)) + (v26 << 6);
      }
      id v25 = *(id *)(*(void *)(v11 + 48) + 8 * v21);
      if (!v25) {
        goto LABEL_187;
      }
    }
    int64_t v127 = v22;
    uint64_t v29 = v25;
    if (REMCacheContext.object(forKey:)()) {
      break;
    }

LABEL_9:
    int64_t v13 = v127;
    unint64_t v14 = v128;
  }
  id v126 = v29;
  REMStructWrapper.value.getter();
  swift_release();
  int64_t v30 = 0;
  uint64_t v31 = *(void *)(v150 + 64);
  uint64_t v132 = v150 + 64;
  uint64_t v141 = v150;
  uint64_t v32 = 1 << *(unsigned char *)(v150 + 32);
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  else {
    uint64_t v33 = -1;
  }
  unint64_t v34 = v33 & v31;
  int64_t v133 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      unint64_t v42 = __clz(__rbit64(v34));
      uint64_t v43 = (v34 - 1) & v34;
      unint64_t v44 = v42 | (v30 << 6);
    }
    else
    {
      BOOL v45 = __OFADD__(v30++, 1);
      if (v45)
      {
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
        goto LABEL_192;
      }
      if (v30 >= v133) {
        goto LABEL_8;
      }
      unint64_t v46 = *(void *)(v132 + 8 * v30);
      if (!v46)
      {
        int64_t v47 = v30 + 1;
        if (v30 + 1 >= v133) {
          goto LABEL_8;
        }
        unint64_t v46 = *(void *)(v132 + 8 * v47);
        if (!v46)
        {
          int64_t v47 = v30 + 2;
          if (v30 + 2 >= v133) {
            goto LABEL_8;
          }
          unint64_t v46 = *(void *)(v132 + 8 * v47);
          if (!v46)
          {
            int64_t v47 = v30 + 3;
            if (v30 + 3 >= v133)
            {
LABEL_8:

              swift_release();
              goto LABEL_9;
            }
            unint64_t v46 = *(void *)(v132 + 8 * v47);
            if (!v46)
            {
              while (1)
              {
                int64_t v30 = v47 + 1;
                if (__OFADD__(v47, 1)) {
                  goto LABEL_191;
                }
                if (v30 >= v133) {
                  goto LABEL_8;
                }
                unint64_t v46 = *(void *)(v132 + 8 * v30);
                ++v47;
                if (v46) {
                  goto LABEL_47;
                }
              }
            }
          }
        }
        int64_t v30 = v47;
      }
LABEL_47:
      uint64_t v43 = (v46 - 1) & v46;
      unint64_t v44 = __clz(__rbit64(v46)) + (v30 << 6);
    }
    uint64_t v48 = (uint64_t *)(*(void *)(v141 + 56) + 48 * v44);
    NSString v49 = (void *)v48[1];
    uint64_t v145 = *v48;
    unint64_t v50 = v48[3];
    uint64_t v147 = v48[2];
    uint64_t v51 = v48[4];
    unint64_t v52 = v48[5];
    id v53 = v144;
    swift_beginAccess();
    uint64_t v54 = *v53;
    uint64_t v55 = *(void *)(*v53 + 16);
    swift_bridgeObjectRetain();
    unint64_t v146 = v43;
    uint64_t v148 = v51;
    if (v55)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v56 = sub_1001806F8(v51, v52);
      if (v57)
      {
        uint64_t v142 = v20;
        uint64_t v58 = *(void **)(*(void *)(v54 + 56) + 8 * v56);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v59 = v58[2];
        uint64_t v60 = v145;
        if (v59)
        {
          BOOL v61 = v58[4] == v145 && v58[5] == (void)v49;
          if (v61 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_100;
          }
          if (v59 != 1)
          {
            BOOL v95 = v58[6] == v60 && v58[7] == (void)v49;
            if (v95 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_100;
            }
            if (v59 != 2)
            {
              unint64_t v105 = v58 + 9;
              uint64_t v106 = 2;
              while (1)
              {
                int64_t v107 = v30;
                uint64_t v108 = v106 + 1;
                if (__OFADD__(v106, 1)) {
                  break;
                }
                if (*(v105 - 1) == v145 && *v105 == (void)v49)
                {
                  int64_t v30 = v107;
                  uint64_t v60 = v145;
                  goto LABEL_100;
                }
                if (_stringCompareWithSmolCheck(_:_:expecting:)())
                {
                  int64_t v30 = v107;
                  uint64_t v60 = v145;
                  goto LABEL_100;
                }
                v105 += 2;
                ++v106;
                BOOL v61 = v108 == v59;
                int64_t v30 = v107;
                if (v61) {
                  goto LABEL_57;
                }
              }
LABEL_192:
              __break(1u);
              goto LABEL_193;
            }
          }
        }
LABEL_57:
        uint64_t v60 = v145;
        if (v145 != 0x6C6E6F6974636573 || v49 != (void *)0xEB00000000737365)
        {
          unint64_t v62 = 0xE900000000000064;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v145 = 0x65746365746F7270;
            if (!v59) {
              goto LABEL_106;
            }
            goto LABEL_101;
          }
        }
LABEL_100:
        swift_bridgeObjectRetain();
        unint64_t v62 = (unint64_t)v49;
        uint64_t v145 = v60;
        if (!v59) {
          goto LABEL_106;
        }
LABEL_101:
        if (v58[4] == v147 && v58[5] == v50 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_104;
        }
        if (v59 == 1) {
          goto LABEL_106;
        }
        if (v58[6] == v147 && v58[7] == v50 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_104:
          unint64_t v35 = v52;
          unint64_t v39 = v62;
          swift_bridgeObjectRelease();
          uint64_t v20 = v142;
          goto LABEL_159;
        }
        if (v59 == 2)
        {
LABEL_106:
          swift_bridgeObjectRelease();
          uint64_t v20 = v142;
LABEL_107:
          if (v147 == 0x6C6E6F6974636573 && v50 == 0xEB00000000737365)
          {
            unint64_t v35 = v52;
            unint64_t v39 = v62;
            goto LABEL_159;
          }
          unint64_t v35 = v52;
          unint64_t v39 = v62;
LABEL_158:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v36 = 0x65746365746F7270;
            unint64_t v37 = 0xE900000000000064;
            goto LABEL_160;
          }
LABEL_159:
          swift_bridgeObjectRetain();
          unint64_t v37 = v50;
          uint64_t v36 = v147;
LABEL_160:
          uint64_t v38 = v145;
          goto LABEL_34;
        }
        uint64_t v140 = v49;
        int64_t v143 = v30;
        uint64_t v96 = v58 + 9;
        uint64_t v97 = 2;
        while (1)
        {
          uint64_t v98 = v97 + 1;
          if (__OFADD__(v97, 1)) {
            break;
          }
          if (*(v96 - 1) == v147 && *v96 == v50)
          {
            int64_t v30 = v143;
            goto LABEL_104;
          }
          if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            int64_t v30 = v143;
            goto LABEL_104;
          }
          v96 += 2;
          ++v97;
          if (v98 == v59)
          {
            swift_bridgeObjectRelease();
            uint64_t v20 = v142;
            int64_t v30 = v143;
            goto LABEL_107;
          }
        }
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
        goto LABEL_195;
      }
      int64_t v143 = v30;
      swift_bridgeObjectRelease();
    }
    else
    {
      int64_t v143 = v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_endAccess();
    BOOL v63 = sub_1001E2A94(v51, v52, 0, 1);
    if (!v20) {
      break;
    }
    if (qword_1009071D8 != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    sub_10008E2DC(v64, (uint64_t)qword_100911A40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    BOOL v67 = os_log_type_enabled(v65, v66);
    unint64_t v134 = v50;
    if (v67)
    {
      uint64_t v68 = swift_slowAlloc();
      uint64_t v147 = swift_slowAlloc();
      id v149 = (void *)v147;
      *(_DWORD *)uint64_t v68 = v130;
      uint64_t v150 = v131;
      swift_getMetatypeMetadata();
      uint64_t v69 = String.init<A>(describing:)();
      *(void *)(v68 + 4) = sub_1000C51B8(v69, v70, (uint64_t *)&v149);
      swift_bridgeObjectRelease();
      *(_WORD *)(v68 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v68 + 14) = sub_1000C51B8(v148, v52, (uint64_t *)&v149);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      unint64_t v35 = v52;
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v68 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v71 = Error.rem_errorDescription.getter();
      *(void *)(v68 + 24) = sub_1000C51B8(v71, v72, (uint64_t *)&v149);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "%{public}s: Failed to retrieve intelligentCategoryNamesFromTrial {groceryLocaleID: %{public}s, error: %{public}s}", (uint8_t *)v68, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v35 = v52;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    int64_t v30 = v143;
    swift_errorRelease();
    uint64_t v20 = 0;
    uint64_t v36 = 0x65746365746F7270;
    unint64_t v37 = 0xE900000000000064;
    uint64_t v38 = 0x65746365746F7270;
    unint64_t v39 = 0xE900000000000064;
LABEL_34:
    type metadata accessor for REMAnalyticsManager();
    static REMAnalyticsManager.shared.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v40 = v138;
    uint64_t *v138 = v38;
    v40[1] = v39;
    v40[2] = v36;
    v40[3] = v37;
    v40[4] = v148;
    v40[5] = v35;
    uint64_t v41 = v139;
    (*v136)(v40, v137, v139);
    REMAnalyticsManager.post(event:)();
    swift_release();
    (*v135)(v40, v41);
    unint64_t v34 = v146;
  }
  unint64_t v73 = v63;
  uint64_t v142 = 0;
  os_log_t v74 = v144;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v140 = v73;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v149 = (void *)*v74;
  uint64_t v76 = (uint64_t)v149;
  uint64_t *v74 = 0x8000000000000000;
  unint64_t v78 = sub_1001806F8(v51, v52);
  uint64_t v79 = *(void *)(v76 + 16);
  BOOL v80 = (v77 & 1) == 0;
  uint64_t v81 = v79 + v80;
  if (__OFADD__(v79, v80)) {
    goto LABEL_189;
  }
  char v82 = v77;
  if (*(void *)(v76 + 24) >= v81)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_100319638();
    }
  }
  else
  {
    sub_100310668(v81, isUniquelyReferenced_nonNull_native);
    unint64_t v83 = sub_1001806F8(v148, v52);
    if ((v82 & 1) != (v84 & 1)) {
      goto LABEL_197;
    }
    unint64_t v78 = v83;
  }
  uint64_t v20 = v142;
  uint64_t v85 = v140;
  uint64_t v86 = v149;
  if (v82)
  {
    uint64_t v87 = v149[7];
    swift_bridgeObjectRelease();
    *(void *)(v87 + 8 * v78) = v85;
  }
  else
  {
    v149[(v78 >> 6) + 8] |= 1 << v78;
    uint64_t v88 = (void *)(v86[6] + 16 * v78);
    *uint64_t v88 = v148;
    v88[1] = v52;
    *(void *)(v86[7] + 8 * v78) = v85;
    uint64_t v89 = v86[2];
    BOOL v45 = __OFADD__(v89, 1);
    uint64_t v90 = v89 + 1;
    if (v45) {
      goto LABEL_190;
    }
    v86[2] = v90;
    swift_bridgeObjectRetain();
  }
  *unint64_t v144 = (uint64_t)v86;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v91 = v85[2];
  uint64_t v92 = v145;
  if (!v91) {
    goto LABEL_86;
  }
  BOOL v93 = v85[4] == v145 && v85[5] == (void)v49;
  if (v93 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_149;
  }
  if (v91 == 1) {
    goto LABEL_86;
  }
  if (v140[6] == v92 && (void *)v140[7] == v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_149;
  }
  if (v91 != 2)
  {
    uint64_t v100 = (void *)(swift_bridgeObjectRetain() + 72);
    uint64_t v101 = 2;
    while (1)
    {
      uint64_t v102 = v101 + 1;
      if (__OFADD__(v101, 1)) {
        goto LABEL_194;
      }
      uint64_t v103 = v145;
      BOOL v104 = *(v100 - 1) == v145 && *v100 == (void)v49;
      if (v104 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = v142;
        uint64_t v92 = v103;
        goto LABEL_149;
      }
      v100 += 2;
      ++v101;
      if (v102 == v91)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = v142;
        uint64_t v92 = v145;
        break;
      }
    }
  }
LABEL_86:
  if (v92 == 0x6C6E6F6974636573 && v49 == (void *)0xEB00000000737365
    || (unint64_t v94 = 0xE900000000000064, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_149:
    swift_bridgeObjectRetain();
    unint64_t v94 = (unint64_t)v49;
    uint64_t v145 = v92;
    if (v91) {
      goto LABEL_150;
    }
    goto LABEL_155;
  }
  uint64_t v145 = 0x65746365746F7270;
  if (!v91) {
    goto LABEL_155;
  }
LABEL_150:
  if (v140[4] == v147 && v140[5] == v50 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_153:
    unint64_t v35 = v52;
    unint64_t v39 = v94;
    swift_bridgeObjectRelease();
    int64_t v30 = v143;
    goto LABEL_159;
  }
  if (v91 == 1) {
    goto LABEL_155;
  }
  if (v140[6] == v147 && v140[7] == v50 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_153;
  }
  if (v91 == 2)
  {
LABEL_155:
    swift_bridgeObjectRelease();
LABEL_156:
    unint64_t v35 = v52;
    unint64_t v39 = v94;
    int64_t v30 = v143;
    if (v147 == 0x6C6E6F6974636573 && v50 == 0xEB00000000737365) {
      goto LABEL_159;
    }
    goto LABEL_158;
  }
  id v110 = (void *)(swift_bridgeObjectRetain() + 72);
  uint64_t v111 = 2;
  uint64_t v112 = v147;
  while (1)
  {
    uint64_t v113 = v111 + 1;
    if (__OFADD__(v111, 1)) {
      break;
    }
    BOOL v114 = *(v110 - 1) == v112 && *v110 == v50;
    if (v114 || (v115 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t v112 = v147, (v115 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = v142;
      goto LABEL_153;
    }
    v110 += 2;
    ++v111;
    if (v113 == v91)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v20 = v142;
      goto LABEL_156;
    }
  }
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100263628()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100263638()
{
  REMCache.deinit();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100263688()
{
  return type metadata accessor for RDGroceryCorrectionCache();
}

uint64_t sub_100263690()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1002636F8(uint64_t a1)
{
  return sub_1002620CC(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(uint64_t (**)(uint64_t))(v1 + 96));
}

uint64_t sub_10026373C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100263774()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002637B4(uint64_t a1)
{
  return sub_1002623F8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1002637C0(uint64_t a1)
{
  uint64_t result = sub_1002639A0(&qword_100911AE8, (void (*)(uint64_t))&type metadata accessor for REMPrivacyPermissionsDataView.IncompleteRemindersCountWithLocationInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_100263818()
{
  uint64_t v1 = (void *)sub_100231588((void *)1, 0xA0u);
  sub_1000963CC(0, &qword_100910E10);
  id v2 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v3 = [(id)swift_getObjCClassFromMetadata() entity];
  [v2 setEntity:v3];

  [v2 setAffectedStores:0];
  [v2 setPredicate:v1];
  [v2 setFetchLimit:1];
  NSManagedObjectContext.count<A>(for:)();
  if (!v0) {
    REMPrivacyPermissionsDataView.IncompleteRemindersCountWithLocationInvocation.Result.init(hasLocationAlarms:)();
  }
}

uint64_t sub_100263948(uint64_t a1)
{
  uint64_t result = sub_1002639A0(&qword_100911B10, (void (*)(uint64_t))&type metadata accessor for REMPrivacyPermissionsDataView.IncompleteRemindersCountWithDueDateInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002639A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1002639E8()
{
  uint64_t v1 = _s10PredicatesOMa(0);
  __chkstk_darwin(v1);
  id v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = (void *)sub_10038F1F0();
  sub_1000C6DAC((uint64_t)v3);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v5 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v6 = [(id)swift_getObjCClassFromMetadata() entity];
  [v5 setEntity:v6];

  [v5 setAffectedStores:0];
  [v5 setPredicate:v4];
  [v5 setFetchLimit:1];
  NSManagedObjectContext.count<A>(for:)();
  if (!v0) {
    REMPrivacyPermissionsDataView.IncompleteRemindersCountWithDueDateInvocation.Result.init(hasRemindersWithDueDate:)();
  }
}

uint64_t sub_100263B78(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100911B18);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  uint64_t v7 = *(void *)(updated - 8);
  uint64_t v8 = v7;
  if (v5)
  {
    sub_100265D1C(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), (uint64_t)v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, updated);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v4, 1, 1, updated);
  }
  Optional.tryUnwrap(_:file:line:)();
  return sub_1002664BC((uint64_t)v4);
}

uint64_t sub_100263CF0(uint64_t a1)
{
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  __chkstk_darwin(updated);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100263B78(a1);
  if (!v1)
  {
    id v6 = [*(id *)&v5[*(int *)(updated + 28)] list];
    v8[1] = v6;
    sub_100094134((uint64_t *)&unk_100914200);
    Optional.tryUnwrap(_:file:line:)();

    uint64_t updated = v8[3];
    sub_100265D80((uint64_t)v5);
  }
  return updated;
}

void sub_100263E44(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v77 = a1;
  uint64_t v5 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v62[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  __chkstk_darwin(updated - 8);
  uint64_t v11 = &v62[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v13 = v12;
  }
  unint64_t v70 = v8;
  uint64_t v71 = v6;
  uint64_t v72 = v12;
  if (v13)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_38:
        swift_bridgeObjectRelease();
        unint64_t v44 = (void *)v75;
        uint64_t v45 = v72;
        unint64_t v46 = v67;
        goto LABEL_40;
      }
      id v14 = *(id *)(a2 + 32);
    }
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = 0;
  }
  uint64_t v73 = (uint64_t)v15;
  sub_100094134(&qword_100914760);
  Optional.tryUnwrap(_:file:line:)();
  if (v2)
  {

    return;
  }
  uint64_t v68 = v5;

  id v69 = (id)v75;
  id v16 = [(id)v75 title];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v20 = 0;
  }
  uint64_t v73 = v18;
  uint64_t v74 = v20;
  sub_100094134((uint64_t *)&unk_10090A4C0);
  Optional.tryUnwrap(_:file:line:)();
  BOOL v67 = (void *)v13;
  swift_bridgeObjectRelease();
  unint64_t v22 = v75;
  uint64_t v21 = v76;
  uint64_t v23 = v77;
  sub_100263B78(v77);
  uint64_t v65 = v22;
  uint64_t v66 = v21;
  uint64_t v3 = 0;
  uint64_t v24 = (void *)sub_100265910((uint64_t)v11);
  sub_100265D80((uint64_t)v11);
  if (v24)
  {
    id v25 = [v24 shortName];

    uint64_t v26 = (uint64_t)v67;
    if (v25)
    {
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int64_t v28 = v27;
    }
    else
    {
      uint64_t v64 = 0;
      int64_t v28 = 0;
    }
    uint64_t v23 = v77;
  }
  else
  {
    uint64_t v64 = 0;
    int64_t v28 = 0;
    uint64_t v26 = (uint64_t)v67;
  }
  uint64_t v29 = (void *)sub_100263CF0(v23);
  BOOL v67 = v28;
  id v30 = [v29 name];

  if (v30)
  {
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v73 = v31;
  uint64_t v74 = v33;
  Optional.tryUnwrap(_:file:line:)();
  uint64_t v34 = (uint64_t)v67;
  swift_bridgeObjectRelease();
  int64_t v35 = v75;
  uint64_t v36 = v76;
  unint64_t v37 = (void *)sub_100263CF0(v77);
  unsigned int v63 = [v37 shouldCategorizeGroceryItems];

  uint64_t v11 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  uint64_t v38 = v65;
  uint64_t v65 = v35;
  sub_100266044(v64, v34, v38, v66, v72, v35, v36, v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 setBody:v39];

  unint64_t v75 = (unint64_t)_swiftEmptyArrayStorage;
  if (v26)
  {
    BOOL v67 = (void *)v36;
    if (v26 < 1)
    {
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n();
    for (uint64_t i = 0; i != v26; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v41 = *(id *)(a2 + 8 * i + 32);
      }
      unint64_t v42 = v41;
      id v43 = [v41 remObjectID];

      if (v43)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        {
          uint64_t v66 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  unint64_t v44 = _swiftEmptyArrayStorage;
  unint64_t v46 = (void *)v36;
  uint64_t v45 = v72;
LABEL_40:
  swift_bridgeObjectRelease();
  v78.value._rawValue = v44;
  UNMutableNotificationContent.setReminderIDs(_:)(v78);
  swift_bridgeObjectRelease();
  int64_t v47 = (void *)sub_100263CF0(v77);
  NSString v49 = v70;
  uint64_t v48 = v71;
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v50 = v47;
    id v51 = [v47 remObjectID];

    UNMutableNotificationContent.setListID(_:)();
    unint64_t v52 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListSingleReminderAddedNotification(_:);
    if (v45 != 1) {
      unint64_t v52 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListMultipleRemindersAddedNotification(_:);
    }
    uint64_t v53 = v68;
    (*(void (**)(unsigned char *, void, uint64_t))(v48 + 104))(v49, *v52, v68);
    unint64_t v54 = RDUserNotificationCategory.rawValue.getter();
    uint64_t v56 = v55;
    (*(void (**)(unsigned char *, uint64_t))(v48 + 8))(v49, v53);
    NSString v57 = String._bridgeToObjectiveC()();
    [v11 setCategoryIdentifier:v57];

    unint64_t v75 = v54;
    uint64_t v76 = v56;
    swift_bridgeObjectRetain();
    v58._countAndFlagsBits = 45;
    v58._object = (void *)0xE100000000000000;
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v59._countAndFlagsBits = v65;
    v59._object = v46;
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v11 setThreadIdentifier:v60];

    id v61 = [self soundWithAlertType:11];
    [v11 setSound:v61];
  }
}

uint64_t sub_1002646C4()
{
  return swift_bridgeObjectRetain();
}

void sub_1002646CC()
{
  sub_100263E44(*(void *)v0, *(void *)(v0 + 8));
}

Swift::Int sub_1002646E8(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1001F5444(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100264790(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_100264790(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  uint64_t v124 = *(void *)(updated - 8);
  uint64_t v125 = updated;
  uint64_t v5 = __chkstk_darwin(updated);
  uint64_t v122 = (uint64_t)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v131 = (uint64_t)&v115 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v128 = (uint64_t)&v115 - v10;
  __chkstk_darwin(v9);
  uint64_t v127 = (uint64_t)&v115 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_141;
    }
    if (v12) {
      return sub_1002651C4(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_149;
  }
  Swift::Int v118 = result;
  if (v12 < 2)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    unint64_t v123 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80));
    if (v12 != 1)
    {
      unint64_t v21 = _swiftEmptyArrayStorage[2];
      uint64_t v20 = (char *)_swiftEmptyArrayStorage;
LABEL_106:
      uint64_t v117 = v18;
      if (v21 >= 2)
      {
        uint64_t v107 = *a1;
        do
        {
          unint64_t v108 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_136;
          }
          if (!v107) {
            goto LABEL_148;
          }
          id v109 = v20;
          id v110 = v20 + 32;
          uint64_t v111 = *(void *)&v20[16 * v108 + 32];
          uint64_t v112 = *(void *)&v20[16 * v21 + 24];
          sub_100265434(v107 + *(void *)(v124 + 72) * v111, v107 + *(void *)(v124 + 72) * *(void *)&v110[16 * v21 - 16], v107 + *(void *)(v124 + 72) * v112, v123);
          if (v2) {
            break;
          }
          if (v112 < v111) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v109 = sub_1001F433C((uint64_t)v109);
          }
          if (v108 >= *((void *)v109 + 2)) {
            goto LABEL_138;
          }
          uint64_t v113 = &v109[16 * v108 + 32];
          *(void *)uint64_t v113 = v111;
          *((void *)v113 + 1) = v112;
          unint64_t v114 = *((void *)v109 + 2);
          if (v21 > v114) {
            goto LABEL_139;
          }
          uint64_t v20 = v109;
          memmove(&v109[16 * v21 + 16], &v109[16 * v21 + 32], 16 * (v114 - v21));
          *((void *)v109 + 2) = v114 - 1;
          unint64_t v21 = v114 - 1;
        }
        while (v114 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      v117[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v117 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v124 + 80);
    uint64_t v117 = (void *)v16;
    unint64_t v123 = v16 + ((v17 + 32) & ~v17);
  }
  Swift::Int v19 = 0;
  uint64_t v20 = (char *)_swiftEmptyArrayStorage;
  uint64_t v129 = a1;
  while (1)
  {
    Swift::Int v22 = v19;
    Swift::Int v23 = v19 + 1;
    if (v19 + 1 >= v12)
    {
      Swift::Int v37 = v19 + 1;
      goto LABEL_58;
    }
    Swift::Int v24 = *a1;
    uint64_t v25 = *(void *)(v124 + 72);
    uint64_t v133 = v25;
    uint64_t v26 = v127;
    sub_100265D1C(v24 + v25 * v23, v127);
    Swift::Int v132 = v12;
    uint64_t v27 = v128;
    sub_100265D1C(v24 + v25 * v22, v128);
    type metadata accessor for Date();
    unint64_t v126 = sub_100265DDC();
    LODWORD(v130) = dispatch thunk of static Comparable.< infix(_:_:)();
    Swift::Int v28 = v132;
    sub_100265D80(v27);
    sub_100265D80(v26);
    Swift::Int v120 = v24;
    if (v22 + 2 >= v28) {
      break;
    }
    Swift::Int v29 = v24;
    Swift::Int v30 = v22;
    uint64_t v116 = v2;
    unint64_t v119 = v20;
    uint64_t v31 = v133 * v23;
    Swift::Int v32 = v22 + 2;
    uint64_t v33 = v133 * (v22 + 2);
    while (1)
    {
      uint64_t v34 = v127;
      sub_100265D1C(v29 + v33, v127);
      uint64_t v35 = v128;
      sub_100265D1C(v29 + v31, v128);
      int v36 = dispatch thunk of static Comparable.< infix(_:_:)();
      sub_100265D80(v35);
      sub_100265D80(v34);
      if ((v130 ^ v36)) {
        break;
      }
      v29 += v133;
      if (v132 == ++v32)
      {
        Swift::Int v28 = v132;
        Swift::Int v37 = v132;
        uint64_t v20 = v119;
        uint64_t v2 = v116;
        Swift::Int v22 = v30;
        goto LABEL_26;
      }
    }
    uint64_t v20 = v119;
    uint64_t v2 = v116;
    Swift::Int v37 = v32;
    Swift::Int v22 = v30;
    Swift::Int v28 = v132;
LABEL_26:
    Swift::Int v24 = v120;
    if (v130) {
      goto LABEL_27;
    }
LABEL_39:
    uint64_t v45 = v129;
    if (v37 < v28) {
      goto LABEL_42;
    }
LABEL_58:
    if (v37 < v22) {
      goto LABEL_135;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v130 = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v20 = sub_1001F3D80(0, *((void *)v20 + 2) + 1, 1, v20);
    }
    unint64_t v57 = *((void *)v20 + 2);
    unint64_t v56 = *((void *)v20 + 3);
    unint64_t v21 = v57 + 1;
    if (v57 >= v56 >> 1) {
      uint64_t v20 = sub_1001F3D80((char *)(v56 > 1), v57 + 1, 1, v20);
    }
    *((void *)v20 + 2) = v21;
    Swift::String v58 = v20 + 32;
    Swift::String v59 = &v20[16 * v57 + 32];
    Swift::Int v60 = v130;
    *(void *)Swift::String v59 = v22;
    *((void *)v59 + 1) = v60;
    if (v57)
    {
      while (1)
      {
        unint64_t v61 = v21 - 1;
        if (v21 >= 4)
        {
          uint64_t v66 = &v58[16 * v21];
          uint64_t v67 = *((void *)v66 - 8);
          uint64_t v68 = *((void *)v66 - 7);
          BOOL v72 = __OFSUB__(v68, v67);
          uint64_t v69 = v68 - v67;
          if (v72) {
            goto LABEL_124;
          }
          uint64_t v71 = *((void *)v66 - 6);
          uint64_t v70 = *((void *)v66 - 5);
          BOOL v72 = __OFSUB__(v70, v71);
          uint64_t v64 = v70 - v71;
          char v65 = v72;
          if (v72) {
            goto LABEL_125;
          }
          unint64_t v73 = v21 - 2;
          uint64_t v74 = &v58[16 * v21 - 32];
          uint64_t v76 = *(void *)v74;
          uint64_t v75 = *((void *)v74 + 1);
          BOOL v72 = __OFSUB__(v75, v76);
          uint64_t v77 = v75 - v76;
          if (v72) {
            goto LABEL_127;
          }
          BOOL v72 = __OFADD__(v64, v77);
          uint64_t v78 = v64 + v77;
          if (v72) {
            goto LABEL_130;
          }
          if (v78 >= v69)
          {
            uint64_t v96 = &v58[16 * v61];
            uint64_t v98 = *(void *)v96;
            uint64_t v97 = *((void *)v96 + 1);
            BOOL v72 = __OFSUB__(v97, v98);
            uint64_t v99 = v97 - v98;
            if (v72) {
              goto LABEL_134;
            }
            BOOL v89 = v64 < v99;
            goto LABEL_95;
          }
        }
        else
        {
          if (v21 != 3)
          {
            uint64_t v90 = *((void *)v20 + 4);
            uint64_t v91 = *((void *)v20 + 5);
            BOOL v72 = __OFSUB__(v91, v90);
            uint64_t v83 = v91 - v90;
            char v84 = v72;
            goto LABEL_89;
          }
          uint64_t v63 = *((void *)v20 + 4);
          uint64_t v62 = *((void *)v20 + 5);
          BOOL v72 = __OFSUB__(v62, v63);
          uint64_t v64 = v62 - v63;
          char v65 = v72;
        }
        if (v65) {
          goto LABEL_126;
        }
        unint64_t v73 = v21 - 2;
        uint64_t v79 = &v58[16 * v21 - 32];
        uint64_t v81 = *(void *)v79;
        uint64_t v80 = *((void *)v79 + 1);
        BOOL v82 = __OFSUB__(v80, v81);
        uint64_t v83 = v80 - v81;
        char v84 = v82;
        if (v82) {
          goto LABEL_129;
        }
        uint64_t v85 = &v58[16 * v61];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v72 = __OFSUB__(v86, v87);
        uint64_t v88 = v86 - v87;
        if (v72) {
          goto LABEL_132;
        }
        if (__OFADD__(v83, v88)) {
          goto LABEL_133;
        }
        if (v83 + v88 >= v64)
        {
          BOOL v89 = v64 < v88;
LABEL_95:
          if (v89) {
            unint64_t v61 = v73;
          }
          goto LABEL_97;
        }
LABEL_89:
        if (v84) {
          goto LABEL_128;
        }
        uint64_t v92 = &v58[16 * v61];
        uint64_t v94 = *(void *)v92;
        uint64_t v93 = *((void *)v92 + 1);
        BOOL v72 = __OFSUB__(v93, v94);
        uint64_t v95 = v93 - v94;
        if (v72) {
          goto LABEL_131;
        }
        if (v95 < v83) {
          goto LABEL_15;
        }
LABEL_97:
        unint64_t v100 = v61 - 1;
        if (v61 - 1 >= v21)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!*v129) {
          goto LABEL_146;
        }
        uint64_t v101 = v20;
        uint64_t v102 = &v58[16 * v100];
        uint64_t v103 = *(void *)v102;
        BOOL v104 = &v58[16 * v61];
        uint64_t v105 = *((void *)v104 + 1);
        sub_100265434(*v129 + *(void *)(v124 + 72) * *(void *)v102, *v129 + *(void *)(v124 + 72) * *(void *)v104, *v129 + *(void *)(v124 + 72) * v105, v123);
        if (v2) {
          goto LABEL_117;
        }
        if (v105 < v103) {
          goto LABEL_121;
        }
        if (v61 > *((void *)v101 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v102 = v103;
        *(void *)&v58[16 * v100 + 8] = v105;
        unint64_t v106 = *((void *)v101 + 2);
        if (v61 >= v106) {
          goto LABEL_123;
        }
        uint64_t v20 = v101;
        unint64_t v21 = v106 - 1;
        memmove(&v58[16 * v61], v104 + 16, 16 * (v106 - 1 - v61));
        *((void *)v101 + 2) = v106 - 1;
        if (v106 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v21 = 1;
LABEL_15:
    a1 = v129;
    Swift::Int v19 = v130;
    Swift::Int v12 = v129[1];
    if (v130 >= v12)
    {
      uint64_t v18 = v117;
      goto LABEL_106;
    }
  }
  Swift::Int v37 = v22 + 2;
  if ((v130 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_27:
  uint64_t v38 = v133;
  if (v37 < v22) {
    goto LABEL_142;
  }
  if (v22 >= v37) {
    goto LABEL_39;
  }
  unint64_t v119 = v20;
  uint64_t v39 = 0;
  uint64_t v40 = v133 * (v37 - 1);
  uint64_t v41 = v37 * v133;
  Swift::Int v42 = v22;
  uint64_t v121 = v22;
  uint64_t v43 = v22 * v133;
  do
  {
    if (v42 != v37 + v39 - 1)
    {
      if (!v24) {
        goto LABEL_147;
      }
      Swift::Int v130 = v24 + v40;
      sub_100265E34(v24 + v43, v122);
      if (v43 < v40 || v24 + v43 >= (unint64_t)(v24 + v41))
      {
        uint64_t v44 = v130;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        uint64_t v44 = v130;
        if (v43 != v40) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      sub_100265E34(v122, v44);
      Swift::Int v24 = v120;
      uint64_t v38 = v133;
    }
    ++v42;
    --v39;
    v40 -= v38;
    v41 -= v38;
    v43 += v38;
  }
  while (v42 < v37 + v39);
  uint64_t v45 = v129;
  uint64_t v20 = v119;
  Swift::Int v22 = v121;
  Swift::Int v28 = v132;
  if (v37 >= v132) {
    goto LABEL_58;
  }
LABEL_42:
  if (__OFSUB__(v37, v22)) {
    goto LABEL_140;
  }
  if (v37 - v22 >= v118) {
    goto LABEL_58;
  }
  if (__OFADD__(v22, v118)) {
    goto LABEL_143;
  }
  if (v22 + v118 >= v28) {
    Swift::Int v46 = v28;
  }
  else {
    Swift::Int v46 = v22 + v118;
  }
  if (v46 >= v22)
  {
    if (v37 != v46)
    {
      uint64_t v121 = v22;
      unint64_t v119 = v20;
      uint64_t v116 = v2;
      type metadata accessor for Date();
      unint64_t v47 = *(void *)(v124 + 72);
      uint64_t v133 = v47 * (v37 - 1);
      Swift::Int v130 = v37;
      unint64_t v126 = v47;
      Swift::Int v132 = v37 * v47;
      Swift::Int v120 = v46;
      do
      {
        uint64_t v48 = 0;
        uint64_t v49 = v121;
        do
        {
          uint64_t v50 = *v45;
          uint64_t v51 = v127;
          sub_100265D1C(v132 + v48 + *v45, v127);
          uint64_t v52 = v128;
          sub_100265D1C(v133 + v48 + v50, v128);
          sub_100265DDC();
          LOBYTE(v50) = dispatch thunk of static Comparable.< infix(_:_:)();
          sub_100265D80(v52);
          sub_100265D80(v51);
          if ((v50 & 1) == 0) {
            break;
          }
          uint64_t v53 = *v45;
          if (!*v45) {
            goto LABEL_145;
          }
          uint64_t v54 = v53 + v133 + v48;
          sub_100265E34(v53 + v132 + v48, v131);
          swift_arrayInitWithTakeFrontToBack();
          sub_100265E34(v131, v54);
          v48 -= v126;
          ++v49;
          uint64_t v45 = v129;
        }
        while (v130 != v49);
        v133 += v126;
        v132 += v126;
        ++v130;
      }
      while (v130 != v120);
      Swift::Int v37 = v120;
      uint64_t v2 = v116;
      uint64_t v20 = v119;
      Swift::Int v22 = v121;
    }
    goto LABEL_58;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002651C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  uint64_t v7 = *(void *)(updated - 8);
  uint64_t v8 = __chkstk_darwin(updated);
  uint64_t v31 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::Int v12 = (char *)&v24 - v11;
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v30 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void *)(v7 + 72);
    uint64_t v33 = v17 * (v30 - 1);
    uint64_t v28 = v16;
    uint64_t v29 = v17;
    uint64_t v32 = v17 * v30;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v19 = v26;
    while (1)
    {
      uint64_t v20 = *a4;
      sub_100265D1C(v32 + v18 + *a4, (uint64_t)v15);
      sub_100265D1C(v33 + v18 + v20, (uint64_t)v12);
      sub_100265DDC();
      LOBYTE(v20) = dispatch thunk of static Comparable.< infix(_:_:)();
      sub_100265D80((uint64_t)v12);
      uint64_t result = sub_100265D80((uint64_t)v15);
      if ((v20 & 1) == 0)
      {
LABEL_4:
        v33 += v29;
        v32 += v29;
        if (++v30 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v21 = *a4;
      if (!*a4) {
        break;
      }
      Swift::Int v22 = a4;
      uint64_t v23 = v21 + v33 + v18;
      sub_100265E34(v21 + v32 + v18, v31);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_100265E34(v31, v23);
      v18 -= v29;
      ++v19;
      a4 = v22;
      if (v30 == v19) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100265434(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  uint64_t v8 = __chkstk_darwin(updated);
  uint64_t v44 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_63;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v47 = a1;
  unint64_t v46 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v45 = a4 + v18;
      unint64_t v47 = a2;
      unint64_t v42 = a1;
      if (v18 >= 1 && a1 < a2)
      {
        type metadata accessor for Date();
        uint64_t v28 = -v13;
        unint64_t v41 = a4;
        do
        {
          unint64_t v29 = a3 + v28;
          sub_100265D1C(v26 + v28, (uint64_t)v11);
          unint64_t v30 = a2 + v28;
          unint64_t v31 = a3;
          uint64_t v32 = (uint64_t)v11;
          uint64_t v33 = v44;
          sub_100265D1C(a2 + v28, v44);
          sub_100265DDC();
          char v34 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v35 = v33;
          uint64_t v11 = (char *)v32;
          sub_100265D80(v35);
          sub_100265D80(v32);
          if (v34)
          {
            if (v31 < a2 || v29 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v37 = v41;
            }
            else
            {
              BOOL v36 = v31 == a2;
              unint64_t v37 = v41;
              if (!v36) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v47 += v28;
          }
          else
          {
            unint64_t v38 = v45;
            v45 += v28;
            if (v31 < v38 || v29 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v31 != v38)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v30 = a2;
            unint64_t v37 = v41;
          }
          unint64_t v26 = v45;
          if (v45 <= v37) {
            break;
          }
          a2 = v30;
          a3 = v29;
        }
        while (v30 > v42);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v42 = a4 + v17;
    unint64_t v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      type metadata accessor for Date();
      do
      {
        uint64_t v20 = v13;
        sub_100265D1C(a2, (uint64_t)v11);
        uint64_t v21 = v44;
        sub_100265D1C(a4, v44);
        sub_100265DDC();
        char v22 = dispatch thunk of static Comparable.< infix(_:_:)();
        sub_100265D80(v21);
        sub_100265D80((uint64_t)v11);
        unint64_t v23 = v47;
        if (v22)
        {
          uint64_t v13 = v20;
          unint64_t v24 = a2 + v20;
          if (v47 < a2 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          uint64_t v13 = v20;
          unint64_t v25 = v46 + v20;
          if (v47 < v46 || v47 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v46 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v47 = v23 + v13;
        a4 = v46;
        if (v46 >= v42) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_60:
    sub_1001F4198(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_64:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100265910(uint64_t a1)
{
  uint64_t v3 = sub_1002CE1CC();
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = a1;
  sub_1002CE468();
  if (v1)
  {
  }
  else
  {
    uint64_t v7 = v6;
    id v8 = [v6 remObjectID];

    sub_100094134((uint64_t *)&unk_100914BC0);
    Optional.tryUnwrap(_:file:line:)();

    id v9 = [*(id *)(a1+ *(int *)(type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0)+ 28)) list];
    sub_100094134((uint64_t *)&unk_100914200);
    Optional.tryUnwrap(_:file:line:)();

    id v10 = [v8 remObjectID:v9];
    Optional.tryUnwrap(_:file:line:)();

    id v12 = v15;
    id v13 = v15;
    sub_100441580(v4);
    uint64_t v5 = v14;
  }
  return v5;
}

void *sub_100265B7C(void *a1)
{
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  uint64_t v3 = *(void *)(updated - 8);
  __chkstk_darwin(updated);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = a1;
  swift_bridgeObjectRetain();
  sub_1002646E8(&v13);
  uint64_t v6 = v13;
  uint64_t v7 = v13[2];
  if (v7)
  {
    id v13 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v8 = (uint64_t)v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100265D1C(v8, (uint64_t)v5);
      id v10 = *(id *)&v5[*(int *)(updated + 28)];
      sub_100265D80((uint64_t)v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v8 += v9;
      --v7;
    }
    while (v7);
  }
  swift_release();
  return a1;
}

uint64_t sub_100265D1C(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 16))(a2, a1, updated);
  return a2;
}

uint64_t sub_100265D80(uint64_t a1)
{
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(updated - 8) + 8))(a1, updated);
  return a1;
}

unint64_t sub_100265DDC()
{
  unint64_t result = qword_1009123E0;
  if (!qword_1009123E0)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009123E0);
  }
  return result;
}

uint64_t sub_100265E34(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 32))(a2, a1, updated);
  return a2;
}

uint64_t destroy for RDAddedReminderNotificationContent()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s7remindd34RDAddedReminderNotificationContentVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RDAddedReminderNotificationContent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for RDAddedReminderNotificationContent(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDAddedReminderNotificationContent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDAddedReminderNotificationContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDAddedReminderNotificationContent()
{
  return &type metadata for RDAddedReminderNotificationContent;
}

uint64_t sub_100266044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a2)
  {
    if (a5 == 1)
    {
      swift_bridgeObjectRetain();
      id v14 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_100776E60;
      *(void *)(v15 + 56) = &type metadata for String;
      unint64_t v16 = sub_1000C5B38();
      *(void *)(v15 + 32) = a1;
      *(void *)(v15 + 40) = a2;
      *(void *)(v15 + 96) = &type metadata for String;
      *(void *)(v15 + 104) = v16;
      *(void *)(v15 + 64) = v16;
      *(void *)(v15 + 72) = a3;
      *(void *)(v15 + 80) = a4;
      *(void *)(v15 + 136) = &type metadata for String;
      *(void *)(v15 + 144) = v16;
      *(void *)(v15 + 112) = a6;
      *(void *)(v15 + 120) = a7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v17 = static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    if (a8)
    {
      if (a5 >= 2) {
        goto LABEL_13;
      }
    }
    else if (a5 >= 2)
    {
LABEL_13:
      swift_bridgeObjectRetain();
      id v23 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_100776E60;
      *(void *)(v24 + 56) = &type metadata for String;
      unint64_t v25 = sub_1000C5B38();
      *(void *)(v24 + 32) = a1;
      *(void *)(v24 + 40) = a2;
      *(void *)(v24 + 96) = &type metadata for Int;
      *(void *)(v24 + 104) = &protocol witness table for Int;
      *(void *)(v24 + 64) = v25;
      *(void *)(v24 + 72) = a5;
      *(void *)(v24 + 136) = &type metadata for String;
      *(void *)(v24 + 144) = v25;
      *(void *)(v24 + 112) = a6;
      *(void *)(v24 + 120) = a7;
      swift_bridgeObjectRetain();
      uint64_t v22 = static String.localizedStringWithFormat(_:_:)();
      goto LABEL_16;
    }
LABEL_15:
    unint64_t v26 = self;
    _StringGuts.grow(_:)(84);
    v27._object = (void *)0x80000001007CFD10;
    v27._countAndFlagsBits = 0xD000000000000052;
    String.append(_:)(v27);
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v26 internalErrorWithDebugDescription:v29];

    return swift_willThrow();
  }
  if (a5 == 1)
  {
    id v19 = (id)_REMGetLocalizedString();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_100776E80;
    *(void *)(v20 + 56) = &type metadata for String;
    unint64_t v21 = sub_1000C5B38();
    *(void *)(v20 + 32) = a3;
    *(void *)(v20 + 40) = a4;
    *(void *)(v20 + 96) = &type metadata for String;
    *(void *)(v20 + 104) = v21;
    *(void *)(v20 + 64) = v21;
    *(void *)(v20 + 72) = a6;
    *(void *)(v20 + 80) = a7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = static String.localizedStringWithFormat(_:_:)();
  }
  else
  {
    if (a8)
    {
      if (a5 < 2) {
        goto LABEL_15;
      }
    }
    else if (a5 < 2)
    {
      goto LABEL_15;
    }
    id v30 = (id)_REMGetLocalizedString();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_100776E80;
    *(void *)(v31 + 56) = &type metadata for Int;
    *(void *)(v31 + 64) = &protocol witness table for Int;
    *(void *)(v31 + 32) = a5;
    *(void *)(v31 + 96) = &type metadata for String;
    *(void *)(v31 + 104) = sub_1000C5B38();
    *(void *)(v31 + 72) = a6;
    *(void *)(v31 + 80) = a7;
    swift_bridgeObjectRetain();
    uint64_t v22 = static String.localizedStringWithFormat(_:_:)();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_1002664BC(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100911B18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10026651C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 24);
  }
  else
  {
    v7._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    uint64_t v5 = 0x7C6C61636F6CLL;
    uint64_t v6 = 0xE600000000000000;
  }
  uint64_t v8 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (!v8 || (unint64_t v9 = sub_1001806F8(v5, v6), (v10 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    unint64_t v12 = v4;
    if (!v4)
    {
      v13._countAndFlagsBits = UUID.uuidString.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      uint64_t v3 = 0x7C6C61636F6CLL;
      unint64_t v12 = 0xE600000000000000;
    }
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    if (v3 == 0x7C6C61636F6CLL && v12 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16) {
        return 0;
      }
      v17._countAndFlagsBits = UUID.uuidString.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      if (*(void *)(a2 + 16))
      {
        unint64_t v9 = sub_1001806F8(0x7C6C61636F6CLL, 0xE600000000000000);
        if (v18) {
          goto LABEL_6;
        }
      }
    }
    uint64_t v11 = 0;
    goto LABEL_13;
  }
LABEL_6:
  uint64_t v11 = *(void *)(*(void *)(a2 + 56) + 8 * v9);
  swift_bridgeObjectRetain();
LABEL_13:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_10026670C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100911B20);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100911B20);
  if (qword_100907818 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942490);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002667D4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v36 = *v2;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100094134(&qword_100911BF8);
  uint64_t v7 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  unint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134(&qword_100911C00);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  uint64_t v33 = v11;
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134(&qword_100911C08);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v34 = v14;
  uint64_t v35 = v15;
  __chkstk_darwin(v14);
  Swift::String v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v2[8];
  id v37 = a1;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = 1;
  swift_retain_n();
  sub_100094134(&qword_100911C10);
  sub_1000967F4(&qword_100911C18, &qword_100911C10);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  id v37 = (id)v2[6];
  id v20 = v37;
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v6, 1, 1, v21);
  sub_1000D0FD4();
  sub_1000967F4(&qword_100911C20, &qword_100911BF8);
  sub_10026B7E8((unint64_t *)&qword_10090D990, (void (*)(uint64_t))sub_1000D0FD4);
  id v22 = v20;
  uint64_t v23 = v31;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v23);
  swift_allocObject();
  swift_weakInit();
  sub_100094134(&qword_100911C28);
  sub_1000967F4(&qword_100911C30, &qword_100911C00);
  uint64_t v24 = v32;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v24);
  uint64_t v25 = v2[8];
  unint64_t v26 = (void *)swift_allocObject();
  v26[2] = sub_10026809C;
  v26[3] = 0;
  v26[4] = v25;
  sub_1000967F4(&qword_100911C38, &qword_100911C08);
  swift_retain_n();
  uint64_t v27 = v34;
  uint64_t v28 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v27);
  v2[7] = v28;
  return swift_release();
}

uint64_t sub_100266D6C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = sub_10025EF78(v8);
    Date.init()();
    uint64_t v11 = sub_100266F0C((uint64_t)v10, (uint64_t)v7);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v12 = sub_10025F39C(v8);
    sub_100267B28(v12);
    swift_bridgeObjectRelease();
    uint64_t v15 = v11;
    swift_bridgeObjectRetain();
    uint64_t v13 = swift_bridgeObjectRetain();
    sub_100203184(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    uint64_t v14 = v15;
  }
  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  *a2 = v14;
  return result;
}

void *sub_100266F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v98 = sub_100094134(&qword_100911C50);
  __chkstk_darwin(v98);
  uint64_t v105 = (uint64_t)v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100094134(&qword_100909C68);
  uint64_t v106 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v90 = (uint64_t)v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v89 = (uint64_t)v87 - v9;
  __chkstk_darwin(v10);
  uint64_t v94 = (uint64_t)v87 - v11;
  __chkstk_darwin(v12);
  uint64_t v104 = (uint64_t)v87 - v13;
  uint64_t v103 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
  uint64_t v14 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v102 = (uint64_t)v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v99 = (uint64_t)v87 - v17;
  __chkstk_darwin(v18);
  id v20 = (char *)v87 - v19;
  uint64_t v21 = sub_100094134((uint64_t *)&unk_10091BFF0);
  __chkstk_darwin(v21 - 8);
  uint64_t v93 = (uint64_t)v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v87 - v24;
  __chkstk_darwin(v26);
  uint64_t v107 = (char *)v87 - v27;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)v87 - v29;
  uint64_t v114 = a2;
  uint64_t v88 = a1;
  uint64_t v31 = sub_1002251A4((void (*)(uint64_t))sub_10026B74C, (uint64_t)v113, a1);
  uint64_t v111 = a2;
  uint64_t v112 = v5;
  uint64_t v32 = sub_1003B4694((void (*)(void))sub_10026B76C, (uint64_t)v110, (uint64_t)v31);
  swift_bridgeObjectRelease();
  uint64_t v116 = v32;
  swift_bridgeObjectRetain();
  sub_100268B2C(&v116);
  swift_bridgeObjectRelease();
  uint64_t v33 = v116;
  uint64_t v34 = *(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56);
  uint64_t v97 = v106 + 56;
  uint64_t v96 = v34;
  v34(v30, 1, 1, v109);
  uint64_t v117 = _swiftEmptyArrayStorage;
  uint64_t v35 = v33[2];
  unint64_t v108 = v30;
  if (v35)
  {
    uint64_t v36 = (uint64_t)v30;
    unint64_t v37 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v87[0] = v33;
    unint64_t v100 = v37;
    uint64_t v38 = (uint64_t)v33 + v37;
    uint64_t v101 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
    uint64_t v39 = *(void *)(v14 + 72);
    uint64_t v40 = &qword_100909C68;
    uint64_t v41 = (uint64_t)v107;
    uint64_t v92 = v25;
    uint64_t v106 = v39;
    uint64_t v95 = v20;
    do
    {
      sub_10026B830(v38, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      sub_1000BF710(v36, v41, (uint64_t *)&unk_10091BFF0);
      uint64_t v43 = *v101;
      if ((*v101)(v41, 1, v109) == 1)
      {
        sub_1000966BC(v36, (uint64_t *)&unk_10091BFF0);
        sub_1000966BC(v41, (uint64_t *)&unk_10091BFF0);
        sub_1000BF710((uint64_t)&v20[*(int *)(v103 + 24)], v36, (uint64_t *)&unk_10091BFF0);
        sub_10026B830((uint64_t)v20, v102, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        unint64_t v44 = (unint64_t)v117;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v44 = sub_10030B2E4(0, *(void *)(v44 + 16) + 1, 1, v44);
        }
        unint64_t v46 = *(void *)(v44 + 16);
        unint64_t v45 = *(void *)(v44 + 24);
        if (v46 >= v45 >> 1) {
          unint64_t v44 = sub_10030B2E4(v45 > 1, v46 + 1, 1, v44);
        }
        *(void *)(v44 + 16) = v46 + 1;
        uint64_t v47 = v44 + v100 + v46 * v106;
        uint64_t v42 = v106;
        sub_10026B6E8(v102, v47);
        uint64_t v117 = (void *)v44;
        goto LABEL_5;
      }
      uint64_t v48 = v104;
      sub_1001326D0(v41, v104);
      uint64_t v49 = &v20[*(int *)(v103 + 24)];
      sub_1000BF710(v48, (uint64_t)v25, v40);
      uint64_t v50 = v25;
      uint64_t v51 = (uint64_t)v25;
      uint64_t v52 = v109;
      v96(v50, 0, 1, v109);
      uint64_t v53 = v105 + *(int *)(v98 + 48);
      uint64_t v54 = (uint64_t)v49;
      uint64_t v55 = v105;
      sub_1000BF710(v54, v105, (uint64_t *)&unk_10091BFF0);
      sub_1000BF710(v51, v53, (uint64_t *)&unk_10091BFF0);
      if (v43(v55, 1, v52) == 1)
      {
        sub_1000966BC(v51, (uint64_t *)&unk_10091BFF0);
        unsigned int v56 = v43(v53, 1, v109);
        unint64_t v57 = &qword_100911C50;
        uint64_t v25 = (char *)v51;
        id v20 = v95;
        if (v56 != 1) {
          goto LABEL_21;
        }
        sub_1000966BC(v105, (uint64_t *)&unk_10091BFF0);
        uint64_t v42 = v106;
      }
      else
      {
        uint64_t v58 = v93;
        sub_1000BF710(v55, v93, (uint64_t *)&unk_10091BFF0);
        unsigned int v59 = v43(v53, 1, v109);
        unint64_t v57 = &qword_100911C50;
        id v20 = v95;
        if (v59 == 1) {
          goto LABEL_20;
        }
        uint64_t v60 = v94;
        sub_1001326D0(v53, v94);
        type metadata accessor for Date();
        uint64_t v91 = sub_10026B7E8((unint64_t *)&qword_100909F80, (void (*)(uint64_t))&type metadata accessor for Date);
        char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v62 = v89;
        uint64_t v63 = v40;
        sub_1000BF710(v58, v89, v40);
        uint64_t v64 = v60;
        uint64_t v65 = v90;
        sub_1000BF710(v64, v90, v40);
        if ((v61 & 1) == 0)
        {
          sub_1000966BC(v65, v40);
          sub_1000966BC(v62, v40);
          sub_1000966BC(v94, v40);
          unint64_t v57 = (uint64_t *)&unk_10091BFF0;
LABEL_20:
          uint64_t v69 = (uint64_t)v92;
          sub_1000966BC((uint64_t)v92, (uint64_t *)&unk_10091BFF0);
          uint64_t v70 = v58;
          uint64_t v25 = (char *)v69;
          sub_1000966BC(v70, v40);
LABEL_21:
          sub_1000966BC(v105, v57);
LABEL_22:
          sub_10026B830((uint64_t)v20, v99, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
          unint64_t v71 = (unint64_t)v117;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v71 = sub_10030B2E4(0, *(void *)(v71 + 16) + 1, 1, v71);
          }
          unint64_t v73 = *(void *)(v71 + 16);
          unint64_t v72 = *(void *)(v71 + 24);
          if (v73 >= v72 >> 1) {
            unint64_t v71 = sub_10030B2E4(v72 > 1, v73 + 1, 1, v71);
          }
          *(void *)(v71 + 16) = v73 + 1;
          uint64_t v74 = v71 + v100 + v73 * v106;
          uint64_t v42 = v106;
          sub_10026B6E8(v99, v74);
          uint64_t v117 = (void *)v71;
          goto LABEL_4;
        }
        char v66 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_1000966BC(v65, v40);
        sub_1000966BC(v62, v40);
        sub_1000966BC(v94, v40);
        uint64_t v67 = (uint64_t)v92;
        sub_1000966BC((uint64_t)v92, (uint64_t *)&unk_10091BFF0);
        uint64_t v68 = v58;
        uint64_t v25 = (char *)v67;
        sub_1000966BC(v68, v63);
        sub_1000966BC(v105, (uint64_t *)&unk_10091BFF0);
        uint64_t v42 = v106;
        uint64_t v40 = v63;
        if ((v66 & 1) == 0) {
          goto LABEL_22;
        }
      }
LABEL_4:
      sub_1000966BC(v104, v40);
LABEL_5:
      uint64_t v41 = (uint64_t)v107;
      uint64_t v36 = (uint64_t)v108;
      sub_10026B788((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      v38 += v42;
      --v35;
    }
    while (v35);
  }
  swift_release();
  uint64_t v75 = v88;
  uint64_t v76 = v87[1];
  if (qword_1009071E8 != -1) {
    swift_once();
  }
  uint64_t v77 = type metadata accessor for Logger();
  sub_10008E2DC(v77, (uint64_t)qword_100911B20);
  uint64_t v78 = v117;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v79 = Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v79, v80))
  {
    uint64_t v81 = swift_slowAlloc();
    uint64_t v116 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v81 = 136446722;
    uint64_t v82 = *(void *)(v76 + 16);
    unint64_t v83 = *(void *)(v76 + 24);
    swift_bridgeObjectRetain();
    uint64_t v115 = sub_1000C51B8(v82, v83, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v81 + 12) = 2048;
    uint64_t v84 = *(void *)(v75 + 16);
    swift_bridgeObjectRelease();
    uint64_t v115 = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v81 + 22) = 2048;
    uint64_t v85 = v78[2];
    swift_bridgeObjectRelease();
    uint64_t v115 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "%{public}s filtered %ld reminders down to %ld", (uint8_t *)v81, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  sub_1000966BC((uint64_t)v108, (uint64_t *)&unk_10091BFF0);
  swift_beginAccess();
  return v117;
}

void *sub_100267B28(void *a1)
{
  uint64_t v36 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  uint64_t v2 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v38 = a1;
  sub_100094134(&qword_100911C40);
  sub_1000967F4(&qword_100911C48, &qword_100911C40);
  uint64_t v9 = Sequence.unique<A>(by:)();
  int64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v32 = a1;
    uint64_t v38 = _swiftEmptyArrayStorage;
    sub_1001DE87C(0, v10, 0);
    uint64_t v11 = self;
    uint64_t v12 = *(unsigned __int8 *)(v2 + 80);
    v31[1] = v9;
    uint64_t v13 = v9 + ((v12 + 32) & ~v12);
    uint64_t v34 = *(void *)(v2 + 72);
    id v35 = v11;
    uint64_t v14 = v38;
    do
    {
      sub_10026B830(v13, (uint64_t)v4, type metadata accessor for RDTimelineEngineLocationReminder);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v16 = [v35 objectIDWithUUID:isa];

      uint64_t v17 = (char *)v8 + *(int *)(v5 + 24);
      uint64_t v18 = sub_100094134(&qword_100909C68);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
      uint64_t v19 = *(void **)&v4[*(int *)(v36 + 24)];
      *uint64_t v8 = v16;
      v8[1] = 0;
      v8[2] = 0xE000000000000000;
      *(void *)((char *)v8 + *(int *)(v5 + 28)) = v19;
      id v20 = v19;
      sub_10026B788((uint64_t)v4, type metadata accessor for RDTimelineEngineLocationReminder);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE87C(0, v14[2] + 1, 1);
        uint64_t v14 = v38;
      }
      unint64_t v22 = v14[2];
      unint64_t v21 = v14[3];
      if (v22 >= v21 >> 1)
      {
        sub_1001DE87C(v21 > 1, v22 + 1, 1);
        uint64_t v14 = v38;
      }
      v14[2] = v22 + 1;
      sub_10026B6E8((uint64_t)v8, (uint64_t)v14+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v22);
      v13 += v34;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a1 = v32;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v23 = v33;
  if (qword_1009071E8 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_10008E2DC(v24, (uint64_t)qword_100911B20);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v38 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136446722;
    uint64_t v28 = *(void *)(v23 + 16);
    unint64_t v29 = *(void *)(v23 + 24);
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_1000C51B8(v28, v29, (uint64_t *)&v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2048;
    uint64_t v37 = a1[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2048;
    uint64_t v37 = v14[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s filtered %ld LOCATION reminders down to %ld", (uint8_t *)v27, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v14;
}

void sub_10026809C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_100501EBC(v2);
}

uint64_t sub_1002680F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for RDTimelineEngineDueReminder(0);
  uint64_t v30 = *(int *)(v15 + 32);
  uint64_t v16 = *(void *)(a1 + v30);
  if (v16)
  {
    uint64_t v17 = (int *)v15;
    if (static Date.< infix(_:_:)())
    {
      uint64_t v18 = v17[7];
      uint64_t v29 = a2;
      uint64_t v19 = a1 + v18;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1, 1, v11);
      uint64_t v28 = v19;
      sub_1004D7CD4(v16, v29, (uint64_t)v7, (uint64_t)v10);
      sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909A40);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
      {
        unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
        v21(v14, v10, v11);
        uint64_t v22 = type metadata accessor for UUID();
        uint64_t v23 = v31;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v31, a1, v22);
        v21((char *)(v23 + v17[5]), v14, v11);
        char v24 = *(unsigned char *)(a1 + v17[6]);
        uint64_t v25 = v23 + v17[7];
        uint64_t v26 = type metadata accessor for DateComponents();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v25, v28, v26);
        uint64_t v27 = *(void *)(a1 + v30);
        *(unsigned char *)(v23 + v17[6]) = v24;
        *(void *)(v23 + v17[8]) = v27;
        return swift_bridgeObjectRetain();
      }
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
    }
  }
  return sub_10026B830(a1, v31, type metadata accessor for RDTimelineEngineDueReminder);
}

uint64_t sub_1002683EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v55 = a3;
  uint64_t v53 = a2;
  uint64_t v56 = sub_100094134(&qword_100911C58);
  __chkstk_darwin(v56);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v57 = (char *)&v42 - v7;
  uint64_t v54 = sub_100094134(&qword_100909C68);
  uint64_t v43 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v52 = (uint64_t)&v42 - v11;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void **)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (void (*)(char *, uint64_t))((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v20 = a1 + *(int *)(type metadata accessor for RDTimelineEngineDueReminder(0) + 20);
  uint64_t v48 = (void (*)(char *, uint64_t, uint64_t))v13[2];
  uint64_t v49 = v13 + 2;
  v48(v19, v20, v12);
  unint64_t v21 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v23 = [v21 objectIDWithUUID:isa];

  Date.addingTimeInterval(_:)();
  uint64_t v51 = v19;
  Date.addingTimeInterval(_:)();
  uint64_t v24 = sub_10026B7E8((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v50 = v15;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v46 = v24;
    id v47 = v23;
    unint64_t v45 = v9;
    uint64_t v26 = v56;
    uint64_t v27 = &v57[*(int *)(v56 + 48)];
    uint64_t v28 = (void (*)(void))v13[4];
    v28();
    unint64_t v44 = v27;
    ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v28)(v27, v50, v12);
    uint64_t v29 = &v5[*(int *)(v26 + 48)];
    uint64_t v30 = (void (*)(char *, char *, uint64_t))v48;
    v48(v5, (uint64_t)v57, v12);
    v30(v29, v27, v12);
    uint64_t v31 = (uint64_t)v45;
    ((void (*)(char *, char *, uint64_t))v28)(v45, v5, v12);
    uint64_t v50 = (void (*)(char *, uint64_t))v13[1];
    v50(v29, v12);
    uint64_t v32 = &v5[*(int *)(v56 + 48)];
    ((void (*)(char *, char *, uint64_t))v28)(v5, v57, v12);
    ((void (*)(char *, char *, uint64_t))v28)(v32, v44, v12);
    uint64_t v33 = v54;
    ((void (*)(uint64_t, char *, uint64_t))v28)(v31 + *(int *)(v54 + 36), v32, v12);
    uint64_t v34 = v33;
    id v35 = v5;
    uint64_t v36 = v50;
    v50(v35, v12);
    uint64_t v37 = v52;
    sub_1001326D0(v31, v52);
    if (dispatch thunk of static Comparable.< infix(_:_:)())
    {

      sub_1000966BC(v37, &qword_100909C68);
      v36(v51, v12);
      uint64_t v38 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v55, 1, 1, v38);
    }
    else
    {
      v36(v51, v12);
      uint64_t v39 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
      uint64_t v40 = v55;
      uint64_t v41 = (uint64_t)v55 + *(int *)(v39 + 24);
      sub_1001326D0(v37, v41);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v41, 0, 1, v34);
      *uint64_t v40 = v47;
      v40[1] = 0;
      v40[2] = 0xE000000000000000;
      *(void *)((char *)v40 + *(int *)(v39 + 28)) = 0;
      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v40, 0, 1, v39);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100268988(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + *(int *)(type metadata accessor for RDTimelineEngineLocationReminder(0) + 24));
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    id v6 = v3;
    [v5 center];
    Double.write<A>(to:)();
    v7._countAndFlagsBits = 44;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    [v5 center];
    Double.write<A>(to:)();

    uint64_t v8 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  else
  {
    id v10 = [v3 identifier];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v11;
  }
  *a2 = v8;
  a2[1] = v9;
}

uint64_t sub_100268AB0()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDRelevantShortcutsProcessor()
{
  return self;
}

void sub_100268B2C(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for RDIntentsRelevantShortcutsHandlerItem() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1001F5458(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100268BD4(v5);
  *a1 = v3;
}

void sub_100268BD4(void *a1)
{
  uint64_t v250 = type metadata accessor for UUID();
  uint64_t v264 = *(void *)(v250 - 8);
  __chkstk_darwin(v250);
  uint64_t v247 = (char *)&v217 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v246 = (char *)&v217 - v4;
  __chkstk_darwin(v5);
  unint64_t v232 = (char *)&v217 - v6;
  __chkstk_darwin(v7);
  long long v231 = (char *)&v217 - v8;
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v217 - v10;
  __chkstk_darwin(v12);
  uint64_t v224 = (char *)&v217 - v13;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_10091BFF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v217 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v257 = (uint64_t)&v217 - v18;
  __chkstk_darwin(v19);
  uint64_t v230 = (uint64_t)&v217 - v20;
  __chkstk_darwin(v21);
  uint64_t v237 = (uint64_t)&v217 - v22;
  __chkstk_darwin(v23);
  uint64_t v223 = (uint64_t)&v217 - v24;
  __chkstk_darwin(v25);
  uint64_t v225 = (uint64_t)&v217 - v26;
  uint64_t v259 = sub_100094134(&qword_100909C68);
  uint64_t v263 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v259 - 8);
  __chkstk_darwin(v259);
  uint64_t v242 = (uint64_t)&v217 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v245 = (uint64_t)&v217 - v29;
  __chkstk_darwin(v30);
  uint64_t v226 = (uint64_t)&v217 - v31;
  __chkstk_darwin(v32);
  uint64_t v229 = (uint64_t)&v217 - v33;
  __chkstk_darwin(v34);
  uint64_t v222 = (uint64_t)&v217 - v35;
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v217 - v37;
  uint64_t v39 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
  uint64_t v241 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v235 = (uint64_t)&v217 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  uint64_t v260 = (uint64_t)&v217 - v42;
  __chkstk_darwin(v43);
  unint64_t v45 = (id *)((char *)&v217 - v44);
  __chkstk_darwin(v46);
  uint64_t v48 = (id *)((char *)&v217 - v47);
  __chkstk_darwin(v49);
  uint64_t v51 = (char *)&v217 - v50;
  __chkstk_darwin(v52);
  uint64_t v240 = (id *)((char *)&v217 - v53);
  __chkstk_darwin(v54);
  uint64_t v228 = (id *)((char *)&v217 - v55);
  __chkstk_darwin(v56);
  uint64_t v227 = (id *)((char *)&v217 - v57);
  Swift::Int v58 = a1[1];
  Swift::Int v59 = _minimumMergeRunLength(_:)(v58);
  if (v59 >= v58)
  {
    if ((v58 & 0x8000000000000000) == 0)
    {
      if (v58) {
        sub_10026A1F0(0, v58, 1, a1);
      }
      return;
    }
    goto LABEL_171;
  }
  if (v58 >= 0) {
    uint64_t v60 = v58;
  }
  else {
    uint64_t v60 = v58 + 1;
  }
  if (v58 < -1) {
    goto LABEL_179;
  }
  Class v244 = v16;
  Swift::Int v221 = v59;
  Swift::Int v262 = v58;
  if (v58 >= 2)
  {
    unint64_t v219 = v11;
    uint64_t v61 = v60 >> 1;
    uint64_t v62 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v62 + 16) = v61;
    uint64_t v63 = *(unsigned __int8 *)(v241 + 80);
    Class v220 = (void *)v62;
    unint64_t v239 = v62 + ((v63 + 32) & ~v63);
LABEL_13:
    uint64_t v64 = 0;
    uint64_t v258 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)v263 + 48);
    uint64_t v65 = (char *)_swiftEmptyArrayStorage;
    uint64_t v248 = (void (**)(char *, uint64_t))(v264 + 8);
    id v249 = a1;
    unint64_t v218 = v38;
    id v252 = v45;
    uint64_t v253 = v39;
    unint64_t v251 = v48;
    unint64_t v238 = v51;
    Swift::Int v66 = v262;
    while (1)
    {
      uint64_t v68 = v64;
      uint64_t v69 = v64 + 1;
      uint64_t v234 = v65;
      if ((uint64_t)(v64 + 1) >= v66)
      {
        uint64_t v88 = v64;
        goto LABEL_57;
      }
      Swift::Int v262 = v66;
      uint64_t v70 = (char *)*a1;
      uint64_t v71 = *(void *)(v241 + 72);
      unint64_t v256 = v64 + 1;
      unint64_t v72 = v227;
      sub_10026B830((uint64_t)&v70[v71 * (void)v69], (uint64_t)v227, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      uint64_t v236 = v68;
      unint64_t v233 = v70;
      uint64_t v264 = v71;
      uint64_t v73 = (uint64_t)&v70[v71 * (void)v68];
      uint64_t v74 = v228;
      sub_10026B830(v73, (uint64_t)v228, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      uint64_t v75 = v225;
      sub_1000BF710((uint64_t)v72 + *(int *)(v39 + 24), v225, (uint64_t *)&unk_10091BFF0);
      uint64_t v263 = *v258;
      if (v263(v75, 1, v259) == 1) {
        goto LABEL_20;
      }
      uint64_t v76 = (uint64_t)v218;
      sub_1001326D0(v225, (uint64_t)v218);
      uint64_t v75 = v223;
      sub_1000BF710((uint64_t)v74 + *(int *)(v39 + 24), v223, (uint64_t *)&unk_10091BFF0);
      if (v263(v75, 1, v259) == 1) {
        break;
      }
      uint64_t v89 = v75;
      uint64_t v90 = v222;
      sub_1001326D0(v89, v222);
      LODWORD(v261) = static Date.< infix(_:_:)();
      sub_1000966BC(v90, &qword_100909C68);
      sub_1000966BC(v76, &qword_100909C68);
LABEL_27:
      uint64_t v91 = (uint64_t)v227;
      uint64_t v88 = v236;
      uint64_t v92 = (uint64_t)v238;
      a1 = v249;
      sub_10026B788((uint64_t)v228, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      sub_10026B788(v91, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      uint64_t v69 = v88 + 2;
      Swift::Int v66 = v262;
      if ((uint64_t)(v88 + 2) >= v262) {
        goto LABEL_43;
      }
      uint64_t v255 = v264 * (void)v256;
      uint64_t v93 = v233;
      uint64_t v254 = v264 * (void)v69;
      while (1)
      {
        unint64_t v256 = v69;
        uint64_t v94 = (uint64_t)v240;
        sub_10026B830((uint64_t)&v93[v254], (uint64_t)v240, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        uint64_t v95 = (id *)v94;
        sub_10026B830((uint64_t)&v93[v255], v92, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        uint64_t v96 = v94 + *(int *)(v39 + 24);
        uint64_t v97 = v237;
        sub_1000BF710(v96, v237, (uint64_t *)&unk_10091BFF0);
        if (v263(v97, 1, v259) != 1)
        {
          uint64_t v98 = v229;
          sub_1001326D0(v237, v229);
          uint64_t v97 = v230;
          sub_1000BF710(v92 + *(int *)(v39 + 24), v230, (uint64_t *)&unk_10091BFF0);
          if (v263(v97, 1, v259) != 1)
          {
            uint64_t v114 = v97;
            uint64_t v115 = v226;
            sub_1001326D0(v114, v226);
            uint64_t v116 = v98;
            int v113 = static Date.< infix(_:_:)();
            sub_1000966BC(v115, &qword_100909C68);
            sub_1000966BC(v116, &qword_100909C68);
            goto LABEL_38;
          }
          sub_1000966BC(v98, &qword_100909C68);
          uint64_t v95 = v240;
        }
        sub_1000966BC(v97, (uint64_t *)&unk_10091BFF0);
        id v99 = [*v95 uuid];
        unint64_t v100 = v231;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v101 = UUID.uuidString.getter();
        uint64_t v102 = (id *)v92;
        uint64_t v104 = v103;
        uint64_t v105 = *v248;
        uint64_t v106 = v100;
        uint64_t v107 = v250;
        (*v248)(v106, v250);
        id v108 = [*v102 uuid];
        uint64_t v109 = v232;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v110 = UUID.uuidString.getter();
        uint64_t v112 = v111;
        v105(v109, v107);
        if (v101 != v110) {
          goto LABEL_35;
        }
        if (v104 == v112)
        {
          swift_bridgeObjectRelease_n();
          int v113 = 0;
        }
        else
        {
LABEL_35:
          int v113 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        a1 = v249;
        unint64_t v45 = v252;
        uint64_t v39 = v253;
        uint64_t v48 = v251;
LABEL_38:
        Swift::Int v66 = v262;
        sub_10026B788((uint64_t)v238, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        sub_10026B788((uint64_t)v240, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        if ((v261 ^ v113)) {
          break;
        }
        uint64_t v69 = v256 + 1;
        v93 += v264;
        uint64_t v92 = (uint64_t)v238;
        if ((char *)v66 == v256 + 1)
        {
          uint64_t v69 = (char *)v66;
          goto LABEL_42;
        }
      }
      uint64_t v69 = v256;
LABEL_42:
      uint64_t v88 = v236;
LABEL_43:
      if (v261)
      {
        if ((uint64_t)v69 >= (uint64_t)v88)
        {
          if ((uint64_t)v88 < (uint64_t)v69)
          {
            uint64_t v117 = 0;
            Swift::Int v118 = v88;
            uint64_t v119 = v264 * (void)(v69 - 1);
            uint64_t v120 = (void)v69 * v264;
            uint64_t v121 = v118;
            uint64_t v122 = (void)v118 * v264;
            unint64_t v256 = v69;
            do
            {
              if (v121 != &v69[v117 - 1])
              {
                uint64_t v124 = v233;
                if (!v233) {
                  goto LABEL_177;
                }
                unint64_t v125 = (unint64_t)&v233[v122];
                uint64_t v263 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))&v233[v119];
                sub_10026B6E8((uint64_t)&v233[v122], v235);
                if (v122 < v119 || v125 >= (unint64_t)&v124[v120])
                {
                  uint64_t v123 = (uint64_t)v263;
                  swift_arrayInitWithTakeFrontToBack();
                }
                else
                {
                  uint64_t v123 = (uint64_t)v263;
                  if (v122 != v119) {
                    swift_arrayInitWithTakeBackToFront();
                  }
                }
                sub_10026B6E8(v235, v123);
                uint64_t v69 = v256;
              }
              ++v121;
              --v117;
              v119 -= v264;
              v120 -= v264;
              v122 += v264;
            }
            while ((uint64_t)v121 < (uint64_t)&v69[v117]);
            unint64_t v45 = v252;
            uint64_t v39 = v253;
            uint64_t v48 = v251;
            uint64_t v88 = v236;
            Swift::Int v66 = v262;
          }
          goto LABEL_57;
        }
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
        goto LABEL_174;
      }
LABEL_57:
      if ((uint64_t)v69 >= v66) {
        goto LABEL_83;
      }
      if (__OFSUB__(v69, v88)) {
        goto LABEL_170;
      }
      if (v69 - v88 >= v221) {
        goto LABEL_83;
      }
      if (__OFADD__(v88, v221)) {
        goto LABEL_173;
      }
      if ((uint64_t)&v88[v221] >= v66) {
        unint64_t v126 = (char *)v66;
      }
      else {
        unint64_t v126 = &v88[v221];
      }
      if ((uint64_t)v126 < (uint64_t)v88)
      {
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      if (v69 == v126) {
        goto LABEL_83;
      }
      uint64_t v236 = v88;
      uint64_t v127 = *(void *)(v241 + 72);
      uint64_t v128 = v127 * (void)(v69 - 1);
      uint64_t v254 = v127;
      uint64_t v264 = (void)v69 * v127;
      unint64_t v233 = v126;
      while (2)
      {
        uint64_t v130 = 0;
        uint64_t v131 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v236;
        uint64_t v255 = v128;
        unint64_t v256 = v69;
        while (2)
        {
          uint64_t v263 = v131;
          uint64_t v132 = *a1;
          Swift::Int v262 = v264 + v130;
          sub_10026B830(v264 + v130 + v132, (uint64_t)v48, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
          uint64_t v261 = v128 + v130;
          sub_10026B830(v128 + v130 + v132, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
          uint64_t v133 = v257;
          sub_1000BF710((uint64_t)v48 + *(int *)(v39 + 24), v257, (uint64_t *)&unk_10091BFF0);
          unint64_t v134 = *v258;
          if ((*v258)(v133, 1, v259) != 1)
          {
            uint64_t v135 = v245;
            sub_1001326D0(v257, v245);
            uint64_t v133 = (uint64_t)v244;
            sub_1000BF710((uint64_t)v45 + *(int *)(v39 + 24), (uint64_t)v244, (uint64_t *)&unk_10091BFF0);
            if (v134(v133, 1, v259) == 1)
            {
              sub_1000966BC(v135, &qword_100909C68);
              break;
            }
            uint64_t v151 = v133;
            uint64_t v152 = v242;
            sub_1001326D0(v151, v242);
            char v150 = static Date.< infix(_:_:)();
            sub_1000966BC(v152, &qword_100909C68);
            sub_1000966BC(v135, &qword_100909C68);
LABEL_78:
            sub_10026B788((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
            sub_10026B788((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
            uint64_t v128 = v255;
            if ((v150 & 1) == 0)
            {
              uint64_t v129 = v256;
              goto LABEL_68;
            }
            uint64_t v153 = *a1;
            if (!*a1) {
              goto LABEL_175;
            }
            uint64_t v154 = v153 + v255 + v130;
            sub_10026B6E8(v153 + v264 + v130, v260);
            swift_arrayInitWithTakeFrontToBack();
            sub_10026B6E8(v260, v154);
            v130 -= v254;
            uint64_t v131 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)v263 + 1);
            uint64_t v129 = v256;
            if (v256 == (char *)v263 + 1) {
              goto LABEL_68;
            }
            continue;
          }
          break;
        }
        sub_1000966BC(v133, (uint64_t *)&unk_10091BFF0);
        id v136 = [*v48 uuid];
        unsigned int v137 = v246;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v138 = UUID.uuidString.getter();
        uint64_t v140 = v139;
        uint64_t v141 = *v248;
        uint64_t v142 = v137;
        int64_t v143 = v45;
        uint64_t v144 = v250;
        (*v248)(v142, v250);
        id v145 = [*v143 uuid];
        unint64_t v146 = v247;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v147 = UUID.uuidString.getter();
        uint64_t v149 = v148;
        v141(v146, v144);
        if (v138 != v147 || v140 != v149)
        {
          char v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v249;
          unint64_t v45 = v252;
          uint64_t v39 = v253;
          uint64_t v48 = v251;
          goto LABEL_78;
        }
        swift_bridgeObjectRelease_n();
        unint64_t v45 = v252;
        sub_10026B788((uint64_t)v252, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        uint64_t v48 = v251;
        sub_10026B788((uint64_t)v251, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        a1 = v249;
        uint64_t v39 = v253;
        uint64_t v128 = v255;
        uint64_t v129 = v256;
LABEL_68:
        uint64_t v69 = v129 + 1;
        v128 += v254;
        v264 += v254;
        if (v69 != v233) {
          continue;
        }
        break;
      }
      uint64_t v69 = v233;
      uint64_t v88 = v236;
LABEL_83:
      if ((uint64_t)v69 < (uint64_t)v88)
      {
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
        goto LABEL_172;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v256 = v69;
      if (isUniquelyReferenced_nonNull_native) {
        uint64_t v65 = v234;
      }
      else {
        uint64_t v65 = sub_1001F3D80(0, *((void *)v234 + 2) + 1, 1, v234);
      }
      unint64_t v157 = *((void *)v65 + 2);
      unint64_t v156 = *((void *)v65 + 3);
      unint64_t v67 = v157 + 1;
      if (v157 >= v156 >> 1) {
        uint64_t v65 = sub_1001F3D80((char *)(v156 > 1), v157 + 1, 1, v65);
      }
      *((void *)v65 + 2) = v67;
      uint64_t v158 = v65 + 32;
      uint64_t v159 = &v65[16 * v157 + 32];
      uint64_t v160 = v256;
      *(void *)uint64_t v159 = v88;
      *((void *)v159 + 1) = v160;
      if (v157)
      {
        while (1)
        {
          unint64_t v161 = v67 - 1;
          if (v67 >= 4)
          {
            id v166 = &v158[16 * v67];
            uint64_t v167 = *((void *)v166 - 8);
            uint64_t v168 = *((void *)v166 - 7);
            BOOL v172 = __OFSUB__(v168, v167);
            uint64_t v169 = v168 - v167;
            if (v172) {
              goto LABEL_154;
            }
            uint64_t v171 = *((void *)v166 - 6);
            uint64_t v170 = *((void *)v166 - 5);
            BOOL v172 = __OFSUB__(v170, v171);
            uint64_t v164 = v170 - v171;
            char v165 = v172;
            if (v172) {
              goto LABEL_155;
            }
            unint64_t v173 = v67 - 2;
            int64_t v174 = &v158[16 * v67 - 32];
            uint64_t v176 = *(void *)v174;
            uint64_t v175 = *((void *)v174 + 1);
            BOOL v172 = __OFSUB__(v175, v176);
            uint64_t v177 = v175 - v176;
            if (v172) {
              goto LABEL_157;
            }
            BOOL v172 = __OFADD__(v164, v177);
            uint64_t v178 = v164 + v177;
            if (v172) {
              goto LABEL_160;
            }
            if (v178 >= v169)
            {
              id v196 = &v158[16 * v161];
              uint64_t v198 = *(void *)v196;
              uint64_t v197 = *((void *)v196 + 1);
              BOOL v172 = __OFSUB__(v197, v198);
              uint64_t v199 = v197 - v198;
              if (v172) {
                goto LABEL_164;
              }
              BOOL v189 = v164 < v199;
              goto LABEL_120;
            }
          }
          else
          {
            if (v67 != 3)
            {
              uint64_t v190 = *((void *)v65 + 4);
              uint64_t v191 = *((void *)v65 + 5);
              BOOL v172 = __OFSUB__(v191, v190);
              uint64_t v183 = v191 - v190;
              char v184 = v172;
              goto LABEL_114;
            }
            uint64_t v163 = *((void *)v65 + 4);
            uint64_t v162 = *((void *)v65 + 5);
            BOOL v172 = __OFSUB__(v162, v163);
            uint64_t v164 = v162 - v163;
            char v165 = v172;
          }
          if (v165) {
            goto LABEL_156;
          }
          unint64_t v173 = v67 - 2;
          uint64_t v179 = &v158[16 * v67 - 32];
          uint64_t v181 = *(void *)v179;
          uint64_t v180 = *((void *)v179 + 1);
          BOOL v182 = __OFSUB__(v180, v181);
          uint64_t v183 = v180 - v181;
          char v184 = v182;
          if (v182) {
            goto LABEL_159;
          }
          uint64_t v185 = &v158[16 * v161];
          uint64_t v187 = *(void *)v185;
          uint64_t v186 = *((void *)v185 + 1);
          BOOL v172 = __OFSUB__(v186, v187);
          uint64_t v188 = v186 - v187;
          if (v172) {
            goto LABEL_162;
          }
          if (__OFADD__(v183, v188)) {
            goto LABEL_163;
          }
          if (v183 + v188 >= v164)
          {
            BOOL v189 = v164 < v188;
LABEL_120:
            if (v189) {
              unint64_t v161 = v173;
            }
            goto LABEL_122;
          }
LABEL_114:
          if (v184) {
            goto LABEL_158;
          }
          unint64_t v192 = &v158[16 * v161];
          uint64_t v194 = *(void *)v192;
          uint64_t v193 = *((void *)v192 + 1);
          BOOL v172 = __OFSUB__(v193, v194);
          uint64_t v195 = v193 - v194;
          if (v172) {
            goto LABEL_161;
          }
          if (v195 < v183) {
            goto LABEL_15;
          }
LABEL_122:
          unint64_t v200 = v161 - 1;
          if (v161 - 1 >= v67)
          {
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
            goto LABEL_165;
          }
          if (!*a1) {
            goto LABEL_176;
          }
          uint64_t v201 = v65;
          uint64_t v202 = &v158[16 * v200];
          uint64_t v203 = *(void *)v202;
          unint64_t v204 = &v158[16 * v161];
          uint64_t v205 = *((void *)v204 + 1);
          uint64_t v206 = v243;
          sub_10026A8C8((id *)(*a1 + *(void *)(v241 + 72) * *(void *)v202), *a1 + *(void *)(v241 + 72) * *(void *)v204, *a1 + *(void *)(v241 + 72) * v205, v239);
          if (v206)
          {
            uint64_t v208 = v220;
LABEL_132:
            swift_bridgeObjectRelease();
            v208[2] = 0;
            swift_bridgeObjectRelease();
            return;
          }
          if (v205 < v203) {
            goto LABEL_151;
          }
          if (v161 > *((void *)v201 + 2)) {
            goto LABEL_152;
          }
          *(void *)uint64_t v202 = v203;
          *(void *)&v158[16 * v200 + 8] = v205;
          unint64_t v207 = *((void *)v201 + 2);
          if (v161 >= v207) {
            goto LABEL_153;
          }
          uint64_t v243 = 0;
          unint64_t v67 = v207 - 1;
          memmove(&v158[16 * v161], v204 + 16, 16 * (v207 - 1 - v161));
          uint64_t v65 = v201;
          *((void *)v201 + 2) = v207 - 1;
          BOOL v189 = v207 > 2;
          unint64_t v45 = v252;
          uint64_t v39 = v253;
          uint64_t v48 = v251;
          if (!v189) {
            goto LABEL_15;
          }
        }
      }
      unint64_t v67 = 1;
LABEL_15:
      Swift::Int v66 = a1[1];
      uint64_t v64 = v256;
      if ((uint64_t)v256 >= v66) {
        goto LABEL_134;
      }
    }
    sub_1000966BC(v76, &qword_100909C68);
    uint64_t v74 = v228;
    unint64_t v72 = v227;
LABEL_20:
    sub_1000966BC(v75, (uint64_t *)&unk_10091BFF0);
    id v77 = [*v72 uuid];
    uint64_t v78 = v224;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v261 = UUID.uuidString.getter();
    uint64_t v80 = v79;
    uint64_t v81 = *v248;
    uint64_t v82 = v250;
    (*v248)(v78, v250);
    id v83 = [*v74 uuid];
    uint64_t v84 = v219;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v85 = UUID.uuidString.getter();
    uint64_t v87 = v86;
    v81(v84, v82);
    if (v261 == v85 && v80 == v87)
    {
      swift_bridgeObjectRelease_n();
      LODWORD(v261) = 0;
    }
    else
    {
      LODWORD(v261) = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    unint64_t v45 = v252;
    uint64_t v39 = v253;
    uint64_t v48 = v251;
    goto LABEL_27;
  }
  unint64_t v239 = (unint64_t)_swiftEmptyArrayStorage
       + ((*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80));
  Class v220 = _swiftEmptyArrayStorage;
  if (v58 == 1)
  {
    unint64_t v219 = v11;
    goto LABEL_13;
  }
  unint64_t v67 = _swiftEmptyArrayStorage[2];
  uint64_t v65 = (char *)_swiftEmptyArrayStorage;
LABEL_134:
  if (v67 >= 2)
  {
    uint64_t v209 = *a1;
    uint64_t v208 = v220;
    while (1)
    {
      unint64_t v210 = v67 - 2;
      if (v67 < 2) {
        goto LABEL_166;
      }
      if (!v209) {
        goto LABEL_178;
      }
      uint64_t v211 = v65;
      uint64_t v212 = *(void *)&v65[16 * v210 + 32];
      uint64_t v213 = *(void *)&v65[16 * v67 + 24];
      uint64_t v214 = v243;
      sub_10026A8C8((id *)(v209 + *(void *)(v241 + 72) * v212), v209 + *(void *)(v241 + 72) * *(void *)&v65[16 * v67 + 16], v209 + *(void *)(v241 + 72) * v213, v239);
      if (v214) {
        goto LABEL_132;
      }
      if (v213 < v212) {
        goto LABEL_167;
      }
      uint64_t v243 = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v211 = sub_1001F433C((uint64_t)v211);
      }
      if (v210 >= *((void *)v211 + 2)) {
        goto LABEL_168;
      }
      id v215 = &v211[16 * v210 + 32];
      *(void *)id v215 = v212;
      *((void *)v215 + 1) = v213;
      unint64_t v216 = *((void *)v211 + 2);
      if (v67 > v216) {
        goto LABEL_169;
      }
      memmove(&v211[16 * v67 + 16], &v211[16 * v67 + 32], 16 * (v216 - v67));
      uint64_t v65 = v211;
      *((void *)v211 + 2) = v216 - 1;
      unint64_t v67 = v216 - 1;
      if (v216 <= 2) {
        goto LABEL_147;
      }
    }
  }
  uint64_t v208 = v220;
LABEL_147:
  swift_bridgeObjectRelease();
  v208[2] = 0;
  swift_bridgeObjectRelease();
}

void sub_10026A1F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v64 = a1;
  uint64_t v72 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v71 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v70 = (char *)&v62 - v10;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_10091BFF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v67 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v76 = (uint64_t)&v62 - v14;
  uint64_t v75 = sub_100094134(&qword_100909C68);
  uint64_t v15 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v65 = (uint64_t)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v66 = (uint64_t)&v62 - v18;
  uint64_t v19 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
  __chkstk_darwin(v19);
  uint64_t v82 = (uint64_t)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (id *)((char *)&v62 - v22);
  __chkstk_darwin(v24);
  uint64_t v87 = (id *)((char *)&v62 - v26);
  uint64_t v79 = a3;
  uint64_t v63 = a2;
  if (a3 != a2)
  {
    uint64_t v27 = *(void *)(v25 + 72);
    uint64_t v80 = v23;
    uint64_t v81 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    uint64_t v68 = a4;
    uint64_t v69 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v28 = v27 * (v79 - 1);
    uint64_t v77 = v27;
    uint64_t v29 = v27 * v79;
    uint64_t v74 = v19;
LABEL_6:
    uint64_t v30 = 0;
    uint64_t v85 = v64;
    uint64_t v73 = v28;
    uint64_t v78 = v29;
    while (1)
    {
      uint64_t v31 = *a4;
      uint64_t v84 = v29 + v30;
      uint64_t v32 = v29 + v30 + v31;
      uint64_t v33 = a4;
      uint64_t v34 = v87;
      sub_10026B830(v32, (uint64_t)v87, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      uint64_t v86 = v30;
      uint64_t v83 = v28 + v30;
      sub_10026B830(v28 + v30 + v31, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      uint64_t v35 = v28;
      uint64_t v36 = v76;
      sub_1000BF710((uint64_t)v34 + *(int *)(v19 + 24), v76, (uint64_t *)&unk_10091BFF0);
      uint64_t v37 = *v81;
      uint64_t v38 = v75;
      unsigned int v39 = (*v81)(v36, 1, v75);
      uint64_t v40 = v36;
      if (v39 != 1)
      {
        uint64_t v41 = v36;
        uint64_t v28 = v35;
        uint64_t v42 = v66;
        sub_1001326D0(v41, v66);
        uint64_t v43 = v67;
        sub_1000BF710((uint64_t)v23 + *(int *)(v19 + 24), v67, (uint64_t *)&unk_10091BFF0);
        if (v37(v43, 1, v38) != 1)
        {
          uint64_t v57 = v43;
          uint64_t v58 = v65;
          sub_1001326D0(v57, v65);
          char v56 = static Date.< infix(_:_:)();
          sub_1000966BC(v58, &qword_100909C68);
          sub_1000966BC(v42, &qword_100909C68);
          a4 = v33;
          uint64_t v19 = v74;
          goto LABEL_15;
        }
        sub_1000966BC(v42, &qword_100909C68);
        uint64_t v40 = v43;
        uint64_t v23 = v80;
        uint64_t v34 = v87;
      }
      sub_1000966BC(v40, (uint64_t *)&unk_10091BFF0);
      id v44 = [*v34 uuid];
      unint64_t v45 = v70;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v46 = UUID.uuidString.getter();
      uint64_t v48 = v47;
      uint64_t v49 = *v69;
      uint64_t v50 = v72;
      (*v69)(v45, v72);
      id v51 = [*v23 uuid];
      uint64_t v52 = v71;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v53 = UUID.uuidString.getter();
      uint64_t v55 = v54;
      v49(v52, v50);
      if (v46 == v53 && v48 == v55)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v23 = v80;
        sub_10026B788((uint64_t)v80, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        sub_10026B788((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        a4 = v68;
        uint64_t v28 = v73;
        uint64_t v19 = v74;
        uint64_t v29 = v78;
LABEL_5:
        v28 += v77;
        v29 += v77;
        if (++v79 == v63) {
          return;
        }
        goto LABEL_6;
      }
      char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a4 = v68;
      uint64_t v28 = v73;
      uint64_t v19 = v74;
LABEL_15:
      uint64_t v23 = v80;
      sub_10026B788((uint64_t)v80, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      sub_10026B788((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      uint64_t v29 = v78;
      uint64_t v59 = v86;
      if ((v56 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v60 = *a4;
      if (!*a4)
      {
        __break(1u);
        return;
      }
      uint64_t v61 = v60 + v28 + v86;
      sub_10026B6E8(v60 + v78 + v86, v82);
      swift_arrayInitWithTakeFrontToBack();
      sub_10026B6E8(v82, v61);
      uint64_t v30 = v59 - v77;
      if (v79 == ++v85) {
        goto LABEL_5;
      }
    }
  }
}

uint64_t sub_10026A8C8(id *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v134 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  unint64_t v125 = &v116[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v124 = &v116[-v11];
  __chkstk_darwin(v12);
  unint64_t v126 = &v116[-v13];
  __chkstk_darwin(v14);
  uint64_t v123 = &v116[-v15];
  uint64_t v16 = sub_100094134((uint64_t *)&unk_10091BFF0);
  __chkstk_darwin(v16 - 8);
  uint64_t v122 = &v116[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  uint64_t v133 = &v116[-v19];
  __chkstk_darwin(v20);
  uint64_t v121 = &v116[-v21];
  __chkstk_darwin(v22);
  uint64_t v132 = &v116[-v23];
  uint64_t v24 = sub_100094134(&qword_100909C68);
  uint64_t v25 = *(id **)(v24 - 8);
  __chkstk_darwin(v24);
  Swift::Int v118 = &v116[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v27);
  uint64_t v120 = &v116[-v28];
  __chkstk_darwin(v29);
  uint64_t v117 = &v116[-v30];
  __chkstk_darwin(v31);
  uint64_t v119 = &v116[-v32];
  uint64_t v33 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
  __chkstk_darwin(v33);
  uint64_t v128 = (id *)&v116[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v35);
  uint64_t v135 = (id *)&v116[-v36];
  __chkstk_darwin(v37);
  uint64_t v127 = (id *)&v116[-v38];
  __chkstk_darwin(v39);
  id v136 = (id *)&v116[-v40];
  uint64_t v42 = *(void *)(v41 + 72);
  if (!v42)
  {
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  if (a2 - (void)a1 == 0x8000000000000000 && v42 == -1) {
    goto LABEL_80;
  }
  int64_t v43 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v42 == -1) {
    goto LABEL_81;
  }
  uint64_t v44 = (uint64_t)(a2 - (void)a1) / v42;
  unint64_t v140 = (unint64_t)a1;
  uint64_t v139 = (unsigned char *)a4;
  uint64_t v45 = v43 / v42;
  uint64_t v130 = v33;
  uint64_t v131 = v24;
  uint64_t v129 = v42;
  if (v44 >= v43 / v42)
  {
    id v136 = v25;
    if (v45 < 0) {
      goto LABEL_82;
    }
    uint64_t v47 = v8;
    uint64_t v48 = v45 * v42;
    if (a4 < a2 || a2 + v48 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
      uint64_t v49 = v128;
    }
    else
    {
      uint64_t v49 = v128;
      if (a4 != a2) {
        swift_arrayInitWithTakeBackToFront();
      }
    }
    unint64_t v77 = a4 + v48;
    unint64_t v138 = a4 + v48;
    unint64_t v140 = a2;
    uint64_t v127 = a1;
    if (v48 < 1 || (unint64_t)a1 >= a2)
    {
LABEL_78:
      sub_1001F41B0(&v140, (unint64_t *)&v139, (uint64_t *)&v138);
      return 1;
    }
    uint64_t v79 = -v129;
    uint64_t v129 = (uint64_t)(v136 + 6);
    uint64_t v123 = (unsigned char *)(v47 + 8);
    unint64_t v126 = (unsigned char *)a4;
    uint64_t v80 = v79;
    uint64_t v132 = (unsigned char *)v79;
    while (1)
    {
      unint64_t v137 = a3;
      uint64_t v81 = v77 + v80;
      uint64_t v82 = (unsigned char *)v80;
      uint64_t v83 = v135;
      sub_10026B830(v81, (uint64_t)v135, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      uint64_t v84 = (id *)&v82[a2];
      sub_10026B830((uint64_t)&v82[a2], (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      uint64_t v85 = (uint64_t)v83 + *(int *)(v33 + 24);
      uint64_t v86 = v133;
      uint64_t v87 = (id *)a2;
      uint64_t v88 = v33;
      uint64_t v89 = v24;
      sub_1000BF710(v85, (uint64_t)v133, (uint64_t *)&unk_10091BFF0);
      uint64_t v90 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))v129;
      int v91 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))v129)(v86, 1, v24);
      id v136 = v87;
      if (v91 != 1)
      {
        uint64_t v92 = v49;
        uint64_t v93 = v120;
        sub_1001326D0((uint64_t)v133, (uint64_t)v120);
        uint64_t v94 = (uint64_t)v92 + *(int *)(v88 + 24);
        uint64_t v86 = v122;
        sub_1000BF710(v94, (uint64_t)v122, (uint64_t *)&unk_10091BFF0);
        if (v90(v86, 1, v24) != 1)
        {
          uint64_t v109 = (uint64_t)v86;
          uint64_t v110 = v118;
          sub_1001326D0(v109, (uint64_t)v118);
          char v107 = static Date.< infix(_:_:)();
          sub_1000966BC((uint64_t)v110, &qword_100909C68);
          sub_1000966BC((uint64_t)v93, &qword_100909C68);
          unint64_t v108 = v137;
          goto LABEL_62;
        }
        sub_1000966BC((uint64_t)v93, &qword_100909C68);
        uint64_t v49 = v128;
      }
      sub_1000966BC((uint64_t)v86, (uint64_t *)&unk_10091BFF0);
      id v95 = [*v83 uuid];
      uint64_t v96 = v124;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v97 = UUID.uuidString.getter();
      uint64_t v99 = v98;
      unint64_t v100 = *(void (**)(unsigned char *, uint64_t))v123;
      uint64_t v101 = v134;
      (*(void (**)(unsigned char *, uint64_t))v123)(v96, v134);
      id v102 = [*v49 uuid];
      uint64_t v103 = v125;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v104 = UUID.uuidString.getter();
      uint64_t v106 = v105;
      v100(v103, v101);
      if (v97 == v104 && v99 == v106)
      {
        swift_bridgeObjectRelease_n();
        char v107 = 0;
      }
      else
      {
        char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      unint64_t v108 = v137;
      uint64_t v88 = v130;
      uint64_t v89 = v131;
LABEL_62:
      uint64_t v111 = (uint64_t)v132;
      unint64_t v112 = (unint64_t)&v132[v108];
      uint64_t v49 = v128;
      sub_10026B788((uint64_t)v128, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      sub_10026B788((uint64_t)v135, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      if (v107)
      {
        unint64_t v113 = (unint64_t)v126;
        if (v108 < (unint64_t)v136 || v112 >= (unint64_t)v136)
        {
          swift_arrayInitWithTakeFrontToBack();
          uint64_t v80 = (uint64_t)v132;
          uint64_t v24 = v89;
          uint64_t v33 = v88;
        }
        else
        {
          uint64_t v80 = (uint64_t)v132;
          uint64_t v24 = v89;
          uint64_t v33 = v88;
          if ((id *)v108 != v136) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v140 += v80;
        goto LABEL_76;
      }
      unint64_t v114 = v138;
      v138 += v111;
      unint64_t v113 = (unint64_t)v126;
      uint64_t v80 = v111;
      if (v108 < v114 || v112 >= v114)
      {
        swift_arrayInitWithTakeFrontToBack();
        uint64_t v84 = v136;
        uint64_t v24 = v89;
      }
      else
      {
        uint64_t v24 = v89;
        if (v108 != v114)
        {
          uint64_t v33 = v88;
          swift_arrayInitWithTakeBackToFront();
          uint64_t v84 = v136;
          goto LABEL_76;
        }
        uint64_t v84 = v136;
      }
      uint64_t v33 = v88;
LABEL_76:
      unint64_t v77 = v138;
      if (v138 > v113)
      {
        a2 = (unint64_t)v84;
        a3 = v112;
        if (v84 > v127) {
          continue;
        }
      }
      goto LABEL_78;
    }
  }
  if ((v44 & 0x8000000000000000) == 0)
  {
    uint64_t v46 = v44 * v42;
    if (a4 < (unint64_t)a1 || (unint64_t)a1 + v46 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if ((id *)a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v133 = (unsigned char *)(a4 + v46);
    unint64_t v138 = a4 + v46;
    BOOL v50 = v46 < 1 || a2 >= a3;
    id v51 = v127;
    if (!v50)
    {
      uint64_t v135 = v25 + 6;
      uint64_t v128 = (id *)(v8 + 8);
      unint64_t v137 = a3;
      while (1)
      {
        uint64_t v52 = v136;
        sub_10026B830(a2, (uint64_t)v136, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        sub_10026B830(a4, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        uint64_t v53 = v132;
        sub_1000BF710((uint64_t)v52 + *(int *)(v33 + 24), (uint64_t)v132, (uint64_t *)&unk_10091BFF0);
        uint64_t v54 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))*v135;
        if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))*v135)(v53, 1, v24) != 1)
        {
          uint64_t v55 = v119;
          sub_1001326D0((uint64_t)v132, (uint64_t)v119);
          uint64_t v53 = v121;
          sub_1000BF710((uint64_t)v51 + *(int *)(v33 + 24), (uint64_t)v121, (uint64_t *)&unk_10091BFF0);
          if (v54(v53, 1, v24) != 1)
          {
            uint64_t v72 = (uint64_t)v53;
            uint64_t v73 = v117;
            sub_1001326D0(v72, (uint64_t)v117);
            char v71 = static Date.< infix(_:_:)();
            sub_1000966BC((uint64_t)v73, &qword_100909C68);
            sub_1000966BC((uint64_t)v55, &qword_100909C68);
            goto LABEL_31;
          }
          sub_1000966BC((uint64_t)v55, &qword_100909C68);
          uint64_t v52 = v136;
        }
        sub_1000966BC((uint64_t)v53, (uint64_t *)&unk_10091BFF0);
        id v56 = [*v52 uuid];
        uint64_t v57 = v123;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v58 = UUID.uuidString.getter();
        uint64_t v60 = v59;
        uint64_t v61 = (void (*)(unsigned char *, uint64_t))*v128;
        uint64_t v62 = v57;
        uint64_t v63 = v51;
        uint64_t v64 = v134;
        ((void (*)(unsigned char *, uint64_t))*v128)(v62, v134);
        id v65 = [*v63 uuid];
        uint64_t v66 = v126;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v67 = UUID.uuidString.getter();
        uint64_t v69 = v68;
        v61(v66, v64);
        if (v58 == v67 && v60 == v69)
        {
          swift_bridgeObjectRelease_n();
          id v51 = v127;
          sub_10026B788((uint64_t)v127, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
          sub_10026B788((uint64_t)v136, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
          a3 = v137;
          uint64_t v33 = v130;
          uint64_t v24 = v131;
          uint64_t v70 = v129;
LABEL_36:
          unint64_t v74 = v140;
          unint64_t v76 = (unint64_t)&v139[v70];
          if (v140 < (unint64_t)v139 || v140 >= v76)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if ((unsigned char *)v140 != v139)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v139 = (unsigned char *)v76;
          unint64_t v75 = a2;
          goto LABEL_42;
        }
        char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a3 = v137;
        uint64_t v33 = v130;
        uint64_t v24 = v131;
        id v51 = v127;
LABEL_31:
        sub_10026B788((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        sub_10026B788((uint64_t)v136, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        uint64_t v70 = v129;
        if ((v71 & 1) == 0) {
          goto LABEL_36;
        }
        unint64_t v74 = v140;
        unint64_t v75 = a2 + v129;
        if (v140 < a2 || v140 >= v75)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v140 == a2)
        {
          unint64_t v74 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_42:
        unint64_t v140 = v74 + v70;
        a4 = (unint64_t)v139;
        if (v139 < v133)
        {
          a2 = v75;
          if (v75 < a3) {
            continue;
          }
        }
        goto LABEL_78;
      }
    }
    goto LABEL_78;
  }
LABEL_82:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10026B580(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4 = *a2;
  a3(a1, &v4);
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  return swift_release();
}

uint64_t sub_10026B624()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026B65C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10026B694@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100266D6C(a1, a2);
}

uint64_t sub_10026B69C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10026B6DC(uint64_t a1, uint64_t *a2)
{
  return sub_10026B580(a1, a2, *(void (**)(uint64_t, uint64_t *))(v2 + 16));
}

uint64_t sub_10026B6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10026B74C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002680F0(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10026B76C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1002683EC(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10026B788(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10026B7E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10026B830(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10026B898()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100911C60);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100911C60);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10026B960(uint64_t a1)
{
}

void sub_10026B974(uint64_t a1)
{
}

void sub_10026B988(uint64_t a1, SEL *a2)
{
  uint64_t v4 = v2;
  if (*(void *)(a1 + 16))
  {
    sub_100094134(&qword_100911CB0);
    sub_1000967F4((unint64_t *)&qword_100911CB8, &qword_100911CB0);
    sub_1000E4FD8();
    Sequence<>.joined(separator:)();
    swift_bridgeObjectRelease();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 *a2:v5];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = *a2;
    [v2 v6];
  }
}

uint64_t sub_10026BAC0(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v30 - v12;
  sub_10026BF10(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909A40);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  [v2 lastAccessedSinceReferenceDate];
  Date.init(timeIntervalSinceReferenceDate:)();
  sub_10026D764();
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  if (v14)
  {
    v15(v13, v7);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  Date.timeIntervalSinceReferenceDate.getter();
  [v2 setLastAccessedSinceReferenceDate:Int32.init(timeIntervalSinceReferenceDate:)(v18)];
  v15(v10, v7);
  if (qword_1009071F0 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_100911C60);
  id v20 = v2;
  uint64_t v21 = Logger.logObject.getter();
  int v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, (os_log_type_t)v22))
  {
    int v31 = v22;
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v33 = v30;
    *(_DWORD *)uint64_t v23 = 136315138;
    id v24 = [v20 remObjectID:v30];
    if (v24)
    {
      uint64_t v25 = v24;
      id v26 = [v24 description];

      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;
    }
    else
    {
      unint64_t v29 = 0xE300000000000000;
      uint64_t v27 = 7104878;
    }
    uint64_t v32 = sub_1000C51B8(v27, v29, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v31, "Updated lastAccessed in REMCDManualSortHint {objectID: %s}", v23, 0xCu);
    uint64_t v16 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v15(v13, v7);
  }
  else
  {

    v15(v13, v7);
    return 1;
  }
  return v16;
}

uint64_t sub_10026BF10@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DateComponents();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Calendar();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v33 = v9;
    uint64_t v34 = v14;
    uint64_t v35 = a2;
    uint64_t v36 = v8;
    uint64_t v37 = v13;
    uint64_t v38 = v5;
    uint64_t v39 = v4;
    Date.init()();
    static Calendar.current.getter();
    sub_100094134(&qword_1009114D0);
    if (a1 == 1)
    {
      uint64_t v17 = type metadata accessor for Calendar.Component();
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v19 = *(void *)(v18 + 72);
      unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_100776E60;
      unint64_t v22 = v21 + v20;
      uint64_t v23 = *(void (**)(unint64_t, void, uint64_t))(v18 + 104);
      v23(v22, enum case for Calendar.Component.year(_:), v17);
      v23(v22 + v19, enum case for Calendar.Component.month(_:), v17);
      v23(v22 + 2 * v19, enum case for Calendar.Component.day(_:), v17);
      sub_10032DD10(v21);
    }
    else
    {
      uint64_t v26 = type metadata accessor for Calendar.Component();
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v28 = *(void *)(v27 + 72);
      unint64_t v29 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_100776E80;
      int v31 = *(void (**)(unint64_t, void, uint64_t))(v27 + 104);
      v31(v30 + v29, enum case for Calendar.Component.year(_:), v26);
      v31(v30 + v29 + v28, enum case for Calendar.Component.month(_:), v26);
      sub_10032DD10(v30);
    }
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    Calendar.dateComponents(_:from:)();
    swift_bridgeObjectRelease();
    Calendar.date(from:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v39);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v16, v37);
  }
  else
  {
    id v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v24(a2, 1, 1);
  }
}

void sub_10026C410(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_1009071F0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_100911C60);
    swift_bridgeObjectRetain();
    sub_1000CD9C4(a1, 1);
    swift_bridgeObjectRetain();
    sub_1000CD9C4(a1, 1);
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v14 = Error.localizedDescription.getter();
      sub_1000C51B8(v14, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000CD9D0(a1, 1);
      sub_1000CD9D0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Failed to update lastAccessed in REMCDManualSortHint {objectID: %s, error: %s}", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000CD9D0(a1, 1);
    }
    else
    {
      sub_1000CD9D0(a1, 1);
      swift_bridgeObjectRelease_n();
      sub_1000CD9D0(a1, 1);
      sub_1000CD9D0(a1, 1);
    }
  }
  else if (a1)
  {
    if (qword_1009071F0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_100911C60);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Updated lastAccessed in REMCDManualSortHint {objectID: %s}", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_10026C814(int a1, char a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v40 - v16;
  sub_10026BF10(a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
    return ((uint64_t (*)(void, void))a3)(0, 0);
  }
  int v44 = a1;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  int64_t v43 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v43(v17, v10, v11);
  uint64_t v18 = v47;
  [v47 lastAccessedSinceReferenceDate];
  Date.init(timeIntervalSinceReferenceDate:)();
  sub_10026D764();
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v15, v11);
  if (v19)
  {
    v20(v17, v11);
    a3 = v45;
    return ((uint64_t (*)(void, void))a3)(0, 0);
  }
  uint64_t v42 = (uint64_t (*)(char *, uint64_t))v20;
  id v22 = [v18 storeControllerManagedObjectContext];
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = [v18 objectID];
    id v41 = v24;
    id v25 = [v18 remObjectID];
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    unint64_t v26 = (*(unsigned __int8 *)(v12 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v47 = v17;
    uint64_t v27 = v26 + v13;
    uint64_t v28 = (char *)swift_allocObject();
    *((void *)v28 + 2) = v23;
    *((void *)v28 + 3) = v24;
    unint64_t v29 = v45;
    *((void *)v28 + 4) = v25;
    *((void *)v28 + 5) = v29;
    *((void *)v28 + 6) = v46;
    v43(&v28[v26], v15, v11);
    v28[v27] = v44 & 1;
    aBlock[4] = sub_10026D8A4;
    aBlock[5] = v28;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    uint64_t aBlock[3] = &unk_1008BF910;
    uint64_t v30 = _Block_copy(aBlock);
    id v31 = v23;
    id v32 = v41;
    id v33 = v25;
    swift_retain();
    swift_release();
    [v31 performBlock:v30];
    _Block_release(v30);

    uint64_t v34 = v47;
  }
  else
  {
    uint64_t v35 = self;
    type metadata accessor for REMCDManualSortHint();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    uint64_t v37 = v17;
    NSString v38 = String._bridgeToObjectiveC()();
    id v39 = [v35 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v38];

    v45(v39, 1);
    uint64_t v34 = v37;
  }
  return v42(v34, v11);
}

void sub_10026CC90(void *a1, uint64_t a2, uint64_t a3, void (*a4)(id, uint64_t), uint64_t a5, uint64_t a6, char a7)
{
  v30[1] = a5;
  id v31 = a4;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v32 = 0;
  id v16 = [a1 existingObjectWithID:a2 error:&v32];
  id v17 = v32;
  if (v16)
  {
    uint64_t v18 = v16;
    type metadata accessor for REMCDManualSortHint();
    uint64_t v19 = swift_dynamicCastClass();
    if (!v19)
    {
      id v26 = v17;

      if (a3) {
        id v27 = [self noSuchObjectErrorWithObjectID:a3];
      }
      else {
        id v27 = [self unexpectedError];
      }
      id v29 = v27;
      swift_errorRetain();
      v31(v29, 1);
      swift_errorRelease();
      goto LABEL_14;
    }
    unint64_t v20 = (void *)v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a6, v12);
    id v21 = v17;
    Date.timeIntervalSinceReferenceDate.getter();
    [v20 setLastAccessedSinceReferenceDate:Int32.init(timeIntervalSinceReferenceDate:)(v22)];
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((a7 & 1) == 0)
    {
LABEL_6:
      v31((id)1, 0);

      return;
    }
    id v32 = 0;
    if ([a1 save:&v32])
    {
      id v23 = v32;
      goto LABEL_6;
    }
    id v28 = v32;
    uint64_t v25 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  else
  {
    id v24 = v32;
    uint64_t v25 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_errorRetain();
  v31((id)v25, 1);
  swift_errorRelease();
LABEL_14:
  swift_errorRelease();
}

id sub_10026D11C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDManualSortHint();
  return [super dealloc];
}

uint64_t type metadata accessor for REMCDManualSortHint()
{
  return self;
}

uint64_t sub_10026D1F4(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v4 - 8);
  uint64_t v48 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for REMHashtagLabelSpecifier();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = (void **)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a1, v6, v8);
  int v11 = (*(uint64_t (**)(void *, uint64_t))(v7 + 88))(v10, v6);
  if (v11 == enum case for REMHashtagLabelSpecifier.labels(_:))
  {
    (*(void (**)(void *, uint64_t))(v7 + 96))(v10, v6);
    uint64_t v12 = *v10;
    swift_bridgeObjectRelease();
    int64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      uint64_t v45 = v10;
      uint64_t v46 = a2;
      id v51 = _swiftEmptyArrayStorage;
      sub_1001DE058(0, v13, 0);
      uint64_t v14 = sub_1002C8B80(v12);
      uint64_t v16 = v15;
      char v18 = v17 & 1;
      uint64_t v47 = v12 + 56;
      while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(unsigned char *)(v12 + 32))
      {
        if (((*(void *)(v47 + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          goto LABEL_22;
        }
        if (*(_DWORD *)(v12 + 36) != v16) {
          goto LABEL_23;
        }
        uint64_t v19 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v14);
        unint64_t v20 = v19[1];
        uint64_t v49 = *v19;
        unint64_t v50 = v20;
        swift_bridgeObjectRetain();
        uint64_t v21 = (uint64_t)v48;
        static Locale.current.getter();
        uint64_t v22 = type metadata accessor for Locale();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 0, 1, v22);
        sub_1000E4FD8();
        uint64_t v23 = StringProtocol.foldedStringForWriting(locale:)();
        uint64_t v25 = v24;
        sub_1000966BC(v21, (uint64_t *)&unk_10090FDF0);
        swift_bridgeObjectRelease();
        id v26 = v51;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE058(0, v26[2] + 1, 1);
          id v26 = v51;
        }
        unint64_t v28 = v26[2];
        unint64_t v27 = v26[3];
        if (v28 >= v27 >> 1)
        {
          sub_1001DE058(v27 > 1, v28 + 1, 1);
          id v26 = v51;
        }
        v26[2] = v28 + 1;
        id v29 = &v26[2 * v28];
        unsigned char v29[4] = v23;
        v29[5] = v25;
        uint64_t v30 = sub_1003C9E34(v14, v16, v18 & 1, v12);
        uint64_t v14 = v30;
        uint64_t v16 = v31;
        char v18 = v32 & 1;
        if (!--v13)
        {
          sub_1000E4EA4(v30, v31, v32 & 1);
          swift_bridgeObjectRelease();
          uint64_t v10 = v45;
          a2 = v46;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      swift_release();
      __break(1u);
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
    id v26 = _swiftEmptyArrayStorage;
LABEL_19:
    uint64_t v49 = (uint64_t)v26;
    swift_bridgeObjectRetain();
    sub_1004AB9B4(&v49);
    swift_bridgeObjectRelease();
    uint64_t v34 = sub_100094134(&qword_100911CC0);
    uint64_t v35 = (char *)v10 + *(int *)(v34 + 64);
    uint64_t v36 = v49;
    __chkstk_darwin(v34);
    *(&v45 - 2) = a2;
    uint64_t v37 = sub_1003B3604((void (*)(uint64_t *__return_ptr, void *))sub_10026D94C, (uint64_t)(&v45 - 4), v36);
    swift_release();
    uint64_t v49 = (uint64_t)v37;
    sub_100094134((uint64_t *)&unk_10090AFB0);
    sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
    uint64_t v38 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    uint64_t v49 = 9406690;
    unint64_t v50 = 0xA300000000000000;
    v41._countAndFlagsBits = v38;
    v41._object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v42._countAndFlagsBits = 9406690;
    v42._object = (void *)0xA300000000000000;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    uint64_t v33 = v49;
    uint64_t v43 = type metadata accessor for REMHashtagLabelSpecifier.Operation();
    (*(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8))(v35, v43);
    return v33;
  }
  if (v11 == enum case for REMHashtagLabelSpecifier.allLabels(_:)) {
    return 0;
  }
  if (v11 == enum case for REMHashtagLabelSpecifier.noLabels(_:)) {
    return 0x6174687361486F6ELL;
  }
LABEL_24:
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

unint64_t sub_10026D764()
{
  unint64_t result = qword_100909F80;
  if (!qword_100909F80)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100909F80);
  }
  return result;
}

uint64_t sub_10026D7BC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;

  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10026D8A4()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (void (*)(id, uint64_t))v0[5];
  uint64_t v7 = v0[6];
  char v8 = *((unsigned char *)v0 + v2 + *(void *)(v1 + 64));

  sub_10026CC90(v3, v4, v5, v6, v7, (uint64_t)v0 + v2, v8);
}

uint64_t sub_10026D934(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10026D944()
{
  return swift_release();
}

uint64_t sub_10026D94C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)(v2 + 16);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = v4[3];
  uint64_t v8 = v4[4];
  sub_1000C0DE0(v4, v7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v6, v7, v8);
  *a2 = result;
  a2[1] = v10;
  return result;
}

id sub_10026D9CC(void *a1, void *a2, unint64_t a3)
{
  unint64_t v202 = a3;
  uint64_t v205 = a2;
  id v209 = a1;
  uint64_t v4 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v207 = (uint8_t *)v4;
  uint64_t v208 = v5;
  __chkstk_darwin(v4);
  uint64_t v206 = (char *)&v199 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_100920EB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v199 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMNotificationIdentifier();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v200 = (char *)&v199 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v201 = (char *)&v199 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v203 = (char *)&v199 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v199 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  unint64_t v204 = (char *)&v199 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v199 - v24;
  __chkstk_darwin(v23);
  unint64_t v27 = (char *)&v199 - v26;
  uint64_t v28 = type metadata accessor for RDUserNotificationType();
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v31 = (uint64_t *)((char *)&v199 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v210 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v29 + 16))(v31, v3, v28);
  int v32 = (*(uint64_t (**)(uint64_t *, uint64_t))(v29 + 88))(v31, v28);
  if (v32 == enum case for RDUserNotificationType.reminderAlarm(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v31, v28);
    (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 32))(v27, v31, v10);
    uint64_t v33 = v10;
    if (v209)
    {
      id v34 = v209;
      REMNotificationIdentifier.init(reminder:)();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v33);
      id v35 = v210;
      UNMutableNotificationContent.setNotificationIdentifier(_:)();
      sub_1000966BC((uint64_t)v9, &qword_100920EB0);
      id v36 = [v34 legacyNotificationIdentifier];
      if (v36)
      {
        uint64_t v37 = v36;
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v40 = v39;

        sub_10027025C(v38, v40);
        swift_bridgeObjectRelease();
      }
      [v35 setInterruptionLevel:2];
      id v41 = [v34 titleDocument];
      if (v41)
      {
        Swift::String v42 = v41;
        uint64_t v43 = v27;
        id v44 = [v41 string];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v43 = v27;
      }
      NSString v80 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v35 setTitle:v80];

      uint64_t v82 = v207;
      uint64_t v81 = v208;
      uint64_t v83 = v206;
      (*(void (**)(char *, void, uint8_t *))(v208 + 104))(v206, enum case for RDUserNotificationCategory.reminderAlarm(_:), v207);
      RDUserNotificationCategory.rawValue.getter();
      (*(void (**)(char *, uint8_t *))(v81 + 8))(v83, v82);
      NSString v84 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v35 setThreadIdentifier:v84];

      sub_100273DC8(v34);
      NSString v85 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v35 setCategoryIdentifier:v85];

      [v35 setShouldPreventNotificationDismissalAfterDefaultAction:1];
      id v86 = [self soundWithAlertType:11];
      [v35 setSound:v86];

      sub_100274734(v35, v34);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v43, v33);
      return v35;
    }
    if (qword_1009071F8 != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    sub_10008E2DC(v67, (uint64_t)qword_100911CC8);
    uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v68(v25, v27, v10);
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      id v209 = v27;
      char v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v208 = swift_slowAlloc();
      uint64_t v212 = v208;
      *(_DWORD *)char v71 = 136315138;
      unint64_t v207 = v71 + 4;
      v68(v204, v25, v10);
      uint64_t v72 = String.init<A>(describing:)();
      uint64_t v211 = sub_1000C51B8(v72, v73, &v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v74 = *(void (**)(char *, uint64_t))(v11 + 8);
      v74(v25, v10);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Trying to create a notificationContent without a reminder. Returning empty content. {notificationIdentifier: %s}", v71, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v74((char *)v209, v10);
    }
    else
    {

      uint64_t v96 = *(void (**)(char *, uint64_t))(v11 + 8);
      v96(v25, v10);
      v96(v27, v10);
    }
    return v210;
  }
  id v45 = v209;
  uint64_t v46 = (void *)v10;
  if (v32 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v31, v28);
    uint64_t v47 = v11;
    uint64_t v48 = *(void (**)(char *, uint64_t *, uint64_t))(v11 + 32);
    uint64_t v49 = v20;
    v48(v20, v31, v10);
    if (v45)
    {
      id v50 = v45;
      REMNotificationIdentifier.init(reminder:)();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v9, 0, 1, v10);
      id v35 = v210;
      UNMutableNotificationContent.setNotificationIdentifier(_:)();
      sub_1000966BC((uint64_t)v9, &qword_100920EB0);
      uint64_t v52 = v207;
      uint64_t v51 = v208;
      uint64_t v53 = v206;
      (*(void (**)(char *, void, uint8_t *))(v208 + 104))(v206, enum case for RDUserNotificationCategory.todayNotificationForSingleReminder(_:), v207);
      RDUserNotificationCategory.rawValue.getter();
      (*(void (**)(char *, uint8_t *))(v51 + 8))(v53, v52);
      NSString v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v35 setCategoryIdentifier:v54];

      [v35 setShouldPreventNotificationDismissalAfterDefaultAction:1];
      id v55 = [self soundWithAlertType:11];
      [v35 setSound:v55];

      sub_100274734(v35, v50);
      (*(void (**)(void *, uint64_t))(v47 + 8))(v49, v10);
      return v35;
    }
    if (qword_1009071F8 != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    sub_10008E2DC(v87, (uint64_t)qword_100911CC8);
    uint64_t v88 = *(void (**)(char *, void *, uint64_t))(v47 + 16);
    uint64_t v89 = v203;
    v88(v203, v49, v10);
    uint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = (uint8_t *)swift_slowAlloc();
      uint64_t v208 = swift_slowAlloc();
      uint64_t v212 = v208;
      id v209 = v49;
      *(_DWORD *)uint64_t v92 = 136315138;
      unint64_t v207 = v92 + 4;
      v88(v204, v89, v10);
      uint64_t v93 = String.init<A>(describing:)();
      uint64_t v211 = sub_1000C51B8(v93, v94, &v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v95 = *(void (**)(char *, uint64_t))(v47 + 8);
      v95(v89, v10);
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "Trying to create a todayNotificationForSingleReminder content without a reminder. Returning empty content. {notificationIdentifier: %s}", v92, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v95((char *)v209, v10);
    }
    else
    {

      id v102 = *(void (**)(char *, uint64_t))(v47 + 8);
      v102(v89, v10);
      v102((char *)v49, v10);
    }
    return v210;
  }
  if (v32 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v31, v28);
    id v56 = (void *)*v31;
    uint64_t v57 = v205;
    if (v205)
    {
      sub_1000963CC(0, (unint64_t *)&qword_10090C120);
      id v58 = v57;
      id v59 = [v58 objectID];
      char v60 = static NSObject.== infix(_:_:)();

      if (v60)
      {
        id v61 = v56;
        id v35 = v210;
        UNMutableNotificationContent.setListID(_:)();

        uint64_t v63 = v207;
        uint64_t v62 = v208;
        uint64_t v64 = v206;
        (*(void (**)(char *, void, uint8_t *))(v208 + 104))(v206, enum case for RDUserNotificationCategory.caldavSharedList(_:), v207);
        RDUserNotificationCategory.rawValue.getter();
        (*(void (**)(char *, uint8_t *))(v62 + 8))(v64, v63);
        NSString v65 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v35 setCategoryIdentifier:v65];

        id v66 = [self soundWithAlertType:11];
        [v35 setSound:v66];

LABEL_107:
        return v35;
      }
    }
    if (qword_1009071F8 != -1) {
      swift_once();
    }
    uint64_t v103 = type metadata accessor for Logger();
    sub_10008E2DC(v103, (uint64_t)qword_100911CC8);
    id v104 = v57;
    id v105 = v56;
    id v106 = v104;
    id v107 = v105;
    unint64_t v108 = Logger.logObject.getter();
    os_log_type_t v109 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v108, v109))
    {
      uint64_t v110 = swift_slowAlloc();
      uint64_t v111 = (void *)swift_slowAlloc();
      id v209 = (id)swift_slowAlloc();
      uint64_t v212 = (uint64_t)v209;
      *(_DWORD *)uint64_t v110 = 136315394;
      if (v57) {
        id v112 = [v106 objectID];
      }
      else {
        id v112 = 0;
      }
      uint64_t v211 = (uint64_t)v112;
      sub_100094134((uint64_t *)&unk_100914BC0);
      uint64_t v136 = Optional.descriptionOrNil.getter();
      unint64_t v138 = v137;

      uint64_t v211 = sub_1000C51B8(v136, v138, &v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v110 + 12) = 2112;
      uint64_t v211 = (uint64_t)v107;
      id v139 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v111 = v107;

      _os_log_impl((void *)&_mh_execute_header, v108, v109, "(caldavSharedList) Trying to create a notificationContent with a list whose objectID doesn't match with the listID in the enum. Returning empty content. {list.objectID: %s, enum.listID: %@}", (uint8_t *)v110, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return v210;
  }
  if (v32 == enum case for RDUserNotificationType.assignmentNotification(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v31, v28);
    unint64_t v75 = *v31;
    if (v202)
    {
      unsigned __int8 v76 = sub_100351F70(v202, *v31);
      id v35 = v210;
      if (v76)
      {
        if (v75 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v190 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          unint64_t v77 = v205;
          if (v190)
          {
LABEL_23:
            if (v77)
            {
              id v58 = v77;
              v213.value._rawValue = (void *)swift_bridgeObjectRetain();
              UNMutableNotificationContent.setReminderIDs(_:)(v213);
              swift_bridgeObjectRelease();
              id v78 = [v58 objectID];
              UNMutableNotificationContent.setListID(_:)();

              if (v75 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v79 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              swift_bridgeObjectRelease();
              BOOL v172 = v207;
              uint64_t v171 = v208;
              unint64_t v173 = (unsigned int *)&enum case for RDUserNotificationCategory.singleAssignmentNotification(_:);
              if (v79 != 1) {
                unint64_t v173 = (unsigned int *)&enum case for RDUserNotificationCategory.multipleAssignmentsNotification(_:);
              }
LABEL_106:
              uint64_t v188 = v206;
              (*(void (**)(char *, void, uint8_t *))(v208 + 104))(v206, *v173, v207);
              RDUserNotificationCategory.rawValue.getter();
              (*(void (**)(char *, uint8_t *))(v171 + 8))(v188, v172);
              NSString v189 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v35 setCategoryIdentifier:v189];

              id v66 = [self soundWithAlertType:11];
              [v35 setSound:v66];
              goto LABEL_107;
            }
            if (qword_1009071F8 != -1) {
              swift_once();
            }
            uint64_t v163 = type metadata accessor for Logger();
            sub_10008E2DC(v163, (uint64_t)qword_100911CC8);
            swift_bridgeObjectRetain();
            uint64_t v129 = Logger.logObject.getter();
            os_log_type_t v130 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v129, v130))
            {
              uint64_t v131 = (uint8_t *)swift_slowAlloc();
              uint64_t v212 = swift_slowAlloc();
              *(_DWORD *)uint64_t v131 = 136315138;
              sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
              swift_bridgeObjectRetain();
              uint64_t v164 = Array.description.getter();
              unint64_t v166 = v165;
              swift_bridgeObjectRelease();
              uint64_t v211 = sub_1000C51B8(v164, v166, &v212);
              id v35 = v210;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              uint64_t v135 = "Trying to create an assignment notification content without a list. Returning empty content. {reminderIDs: %s}";
              goto LABEL_118;
            }
LABEL_119:

            swift_bridgeObjectRelease_n();
            return v35;
          }
        }
        else
        {
          unint64_t v77 = v205;
          if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_23;
          }
        }
        if (qword_1009071F8 != -1) {
          swift_once();
        }
        uint64_t v191 = type metadata accessor for Logger();
        sub_10008E2DC(v191, (uint64_t)qword_100911CC8);
        swift_bridgeObjectRetain();
        uint64_t v129 = Logger.logObject.getter();
        os_log_type_t v130 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v129, v130))
        {
          uint64_t v131 = (uint8_t *)swift_slowAlloc();
          uint64_t v212 = swift_slowAlloc();
          *(_DWORD *)uint64_t v131 = 136315138;
          sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
          swift_bridgeObjectRetain();
          uint64_t v192 = Array.description.getter();
          unint64_t v194 = v193;
          swift_bridgeObjectRelease();
          uint64_t v211 = sub_1000C51B8(v192, v194, &v212);
          id v35 = v210;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v135 = "Trying to create an assignment notification content with 0 reminderIDs. Returning empty content. {reminderIDs: %s}";
          goto LABEL_118;
        }
        goto LABEL_119;
      }
      if (qword_1009071F8 != -1) {
        swift_once();
      }
      uint64_t v128 = type metadata accessor for Logger();
      sub_10008E2DC(v128, (uint64_t)qword_100911CC8);
      swift_bridgeObjectRetain();
      uint64_t v129 = Logger.logObject.getter();
      os_log_type_t v130 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v129, v130)) {
        goto LABEL_119;
      }
      uint64_t v131 = (uint8_t *)swift_slowAlloc();
      uint64_t v212 = swift_slowAlloc();
      *(_DWORD *)uint64_t v131 = 136315138;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v132 = Array.description.getter();
      unint64_t v134 = v133;
      swift_bridgeObjectRelease();
      uint64_t v211 = sub_1000C51B8(v132, v134, &v212);
      id v35 = v210;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v135 = "Trying to create an assignment notification content with inconsistent reminderIDs in parameters. Returning "
             "empty content. {reminderIDs: %s}";
LABEL_118:
      _os_log_impl((void *)&_mh_execute_header, v129, v130, v135, v131, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return v35;
    }
    if (qword_1009071F8 != -1) {
      swift_once();
    }
    uint64_t v120 = type metadata accessor for Logger();
    sub_10008E2DC(v120, (uint64_t)qword_100911CC8);
    swift_bridgeObjectRetain();
    uint64_t v121 = Logger.logObject.getter();
    os_log_type_t v122 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v121, v122))
    {
      uint64_t v123 = (uint8_t *)swift_slowAlloc();
      uint64_t v212 = swift_slowAlloc();
      *(_DWORD *)uint64_t v123 = 136315138;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v124 = Array.description.getter();
      unint64_t v126 = v125;
      swift_bridgeObjectRelease();
      uint64_t v211 = sub_1000C51B8(v124, v126, &v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v127 = "Trying to create an assignment notification content without reminderIDs. Returning empty content. {reminderIDs: %s}";
LABEL_69:
      _os_log_impl((void *)&_mh_execute_header, v121, v122, v127, v123, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return v210;
    }
    goto LABEL_70;
  }
  if (v32 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v31, v28);
    unint64_t v97 = *v31;
    if (!v202)
    {
      if (qword_1009071F8 != -1) {
        swift_once();
      }
      uint64_t v145 = type metadata accessor for Logger();
      sub_10008E2DC(v145, (uint64_t)qword_100911CC8);
      swift_bridgeObjectRetain();
      uint64_t v121 = Logger.logObject.getter();
      os_log_type_t v122 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v121, v122))
      {
        uint64_t v123 = (uint8_t *)swift_slowAlloc();
        uint64_t v212 = swift_slowAlloc();
        *(_DWORD *)uint64_t v123 = 136315138;
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        uint64_t v146 = Array.description.getter();
        uint64_t v211 = sub_1000C51B8(v146, v147, &v212);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v127 = "Trying to create a shared list update notification without reminderIDs. Returning empty content. {reminderIDs: %s}";
        goto LABEL_69;
      }
LABEL_70:

      swift_bridgeObjectRelease_n();
      return v210;
    }
    unsigned __int8 v98 = sub_100351F70(v202, *v31);
    id v35 = v210;
    if ((v98 & 1) == 0)
    {
      if (qword_1009071F8 != -1) {
        swift_once();
      }
      uint64_t v149 = type metadata accessor for Logger();
      sub_10008E2DC(v149, (uint64_t)qword_100911CC8);
      swift_bridgeObjectRetain();
      uint64_t v129 = Logger.logObject.getter();
      os_log_type_t v130 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v129, v130)) {
        goto LABEL_119;
      }
      uint64_t v131 = (uint8_t *)swift_slowAlloc();
      uint64_t v212 = swift_slowAlloc();
      *(_DWORD *)uint64_t v131 = 136315138;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      uint64_t v150 = Array.description.getter();
      uint64_t v211 = sub_1000C51B8(v150, v151, &v212);
      id v35 = v210;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v135 = "Trying to create a shared list update notification with inconsistent reminderIDs in parameters. Returning e"
             "mpty content. {reminderIDs: %s}";
      goto LABEL_118;
    }
    if (v97 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v195 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v99 = v205;
      if (v195)
      {
LABEL_38:
        if (v99)
        {
          id v58 = v99;
          v214.value._rawValue = (void *)swift_bridgeObjectRetain();
          UNMutableNotificationContent.setReminderIDs(_:)(v214);
          swift_bridgeObjectRelease();
          id v100 = [v58 objectID];
          UNMutableNotificationContent.setListID(_:)();

          if (v97 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v101 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v101 = *(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          BOOL v172 = v207;
          uint64_t v171 = v208;
          unint64_t v173 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListSingleReminderAddedNotification(_:);
          if (v101 != 1) {
            unint64_t v173 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListMultipleRemindersAddedNotification(_:);
          }
          goto LABEL_106;
        }
        if (qword_1009071F8 != -1) {
          swift_once();
        }
        uint64_t v185 = type metadata accessor for Logger();
        sub_10008E2DC(v185, (uint64_t)qword_100911CC8);
        swift_bridgeObjectRetain();
        uint64_t v129 = Logger.logObject.getter();
        os_log_type_t v130 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v129, v130))
        {
          uint64_t v131 = (uint8_t *)swift_slowAlloc();
          uint64_t v212 = swift_slowAlloc();
          *(_DWORD *)uint64_t v131 = 136315138;
          sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
          uint64_t v186 = Array.description.getter();
          uint64_t v211 = sub_1000C51B8(v186, v187, &v212);
          id v35 = v210;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v135 = "Trying to create a shared list update notification content without a list. Returning empty content. {reminderIDs: %s}";
          goto LABEL_118;
        }
        goto LABEL_119;
      }
    }
    else
    {
      uint64_t v99 = v205;
      if (*(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_38;
      }
    }
    if (qword_1009071F8 != -1) {
      swift_once();
    }
    uint64_t v196 = type metadata accessor for Logger();
    sub_10008E2DC(v196, (uint64_t)qword_100911CC8);
    swift_bridgeObjectRetain();
    uint64_t v129 = Logger.logObject.getter();
    os_log_type_t v130 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v129, v130))
    {
      uint64_t v131 = (uint8_t *)swift_slowAlloc();
      uint64_t v212 = swift_slowAlloc();
      *(_DWORD *)uint64_t v131 = 136315138;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      uint64_t v197 = Array.description.getter();
      uint64_t v211 = sub_1000C51B8(v197, v198, &v212);
      id v35 = v210;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v135 = "Trying to create a shared list update notification with 0 reminderIDs. Returning empty content. {reminderIDs: %s}";
      goto LABEL_118;
    }
    goto LABEL_119;
  }
  if (v32 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v31, v28);
    uint64_t v113 = v11;
    unint64_t v114 = v201;
    (*(void (**)(char *, uint64_t *, void *))(v11 + 32))(v201, v31, v46);
    if (v45)
    {
      id v115 = v45;
      REMNotificationIdentifier.init(reminder:)();
      uint64_t v116 = *(void (**)(char *, void, uint64_t, void *))(v11 + 56);
      id v209 = v46;
      v116(v9, 0, 1, v46);
      id v35 = v210;
      UNMutableNotificationContent.setNotificationIdentifier(_:)();
      sub_1000966BC((uint64_t)v9, &qword_100920EB0);
      [v35 setInterruptionLevel:2];
      uint64_t v205 = v115;
      id v117 = [v115 titleDocument];
      if (v117)
      {
        Swift::Int v118 = v117;
        id v119 = [v117 string];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      NSString v174 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v35 setTitle:v174];

      uint64_t v175 = v207;
      uint64_t v176 = v208;
      uint64_t v177 = *(void (**)(char *, void, uint8_t *))(v208 + 104);
      uint64_t v178 = v206;
      v177(v206, enum case for RDUserNotificationCategory.reminderAlarm(_:), v207);
      RDUserNotificationCategory.rawValue.getter();
      uint64_t v179 = *(void (**)(char *, uint8_t *))(v176 + 8);
      v179(v178, v175);
      NSString v180 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v35 setThreadIdentifier:v180];

      v177(v178, enum case for RDUserNotificationCategory.dueDateDeltaAlarm(_:), v175);
      RDUserNotificationCategory.rawValue.getter();
      v179(v178, v175);
      NSString v181 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v35 setCategoryIdentifier:v181];

      [v35 setShouldPreventNotificationDismissalAfterDefaultAction:1];
      id v182 = [self soundWithAlertType:11];
      [v35 setSound:v182];

      uint64_t v183 = v205;
      sub_100274734(v35, v205);

      (*(void (**)(char *, id))(v11 + 8))(v201, v209);
      return v35;
    }
    if (qword_1009071F8 != -1) {
      swift_once();
    }
    uint64_t v153 = type metadata accessor for Logger();
    sub_10008E2DC(v153, (uint64_t)qword_100911CC8);
    uint64_t v154 = *(void (**)(char *, char *, void *))(v11 + 16);
    unint64_t v155 = v200;
    unint64_t v156 = v46;
    v154(v200, v114, v46);
    unint64_t v157 = Logger.logObject.getter();
    os_log_type_t v158 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v157, v158))
    {
      uint64_t v159 = (uint8_t *)swift_slowAlloc();
      uint64_t v212 = swift_slowAlloc();
      *(_DWORD *)uint64_t v159 = 136315138;
      id v209 = v159 + 4;
      v154(v204, v155, v46);
      uint64_t v160 = String.init<A>(describing:)();
      uint64_t v211 = sub_1000C51B8(v160, v161, &v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v162 = *(void (**)(char *, void *))(v113 + 8);
      v162(v200, v156);
      _os_log_impl((void *)&_mh_execute_header, v157, v158, "Trying to create a notificationContent without a reminder. Returning empty content. {notificationIdentifier: %s}", v159, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v162(v201, v156);
    }
    else
    {

      char v184 = *(void (**)(char *, void *))(v113 + 8);
      v184(v155, v46);
      v184(v114, v46);
    }
    return v210;
  }
  if (v32 == enum case for RDUserNotificationType.todayNotification(_:))
  {
    uint64_t v141 = v207;
    uint64_t v140 = v208;
    uint64_t v142 = v206;
    (*(void (**)(char *, void, uint8_t *))(v208 + 104))(v206, enum case for RDUserNotificationCategory.todayNotification(_:), v207);
    RDUserNotificationCategory.rawValue.getter();
    (*(void (**)(char *, uint8_t *))(v140 + 8))(v142, v141);
    NSString v143 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v35 = v210;
    [v210 setCategoryIdentifier:v143];

    NSString v144 = [self soundWithAlertType:11];
    [v35 setSound:v144];
LABEL_92:

    return v35;
  }
  id v35 = v210;
  if (v32 == enum case for RDUserNotificationType.todayNotificationBadge(_:))
  {
    uint64_t v152 = (unsigned int *)&enum case for RDUserNotificationCategory.todayNotificationBadge(_:);
LABEL_91:
    uint64_t v169 = v207;
    uint64_t v168 = v208;
    uint64_t v170 = v206;
    (*(void (**)(char *, void, uint8_t *))(v208 + 104))(v206, *v152, v207);
    RDUserNotificationCategory.rawValue.getter();
    (*(void (**)(char *, uint8_t *))(v168 + 8))(v170, v169);
    NSString v144 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v35 setCategoryIdentifier:v144];
    goto LABEL_92;
  }
  if (v32 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
  {
    NSString v167 = (id)_REMGetLocalizedString();
    if (!v167)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v167 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v35 setBody:v167];

    uint64_t v152 = (unsigned int *)&enum case for RDUserNotificationCategory.beforeFirstUnlock(_:);
    goto LABEL_91;
  }
  id result = (id)_diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_10026FDFC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100911CC8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100911CC8);
  if (qword_1009077D8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10026FEC4(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  v24[0] = a3;
  uint64_t v6 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  RDUserNotificationCategory.rawValue.getter();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v24[1] = sub_1000963CC(0, &qword_100911CE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v12 = Array._bridgeToObjectiveC()().super.isa;
  id v13 = [self categoryWithIdentifier:v10 actions:isa intentIdentifiers:v12 options:0];

  NSString v14 = (id)_REMGetLocalizedString();
  if (!v14)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v13 setHiddenPreviewsBodyPlaceholder:v14, v24[0]];

  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for RDUserNotificationCategory.singleAssignmentNotification(_:), v6);
  sub_100273D70();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v29 == v27 && v30 == v28)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      a2 = (void *)v24[0];
    }
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10077B710;
  uint64_t v17 = v25;
  *(void *)(v16 + 32) = v25;
  *(void *)(v16 + 40) = a2;
  uint64_t v29 = v16;
  specialized Array._endMutation()();
  id v18 = a2;
  id v19 = v17;
  Class v20 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setActions:v20];

  NSString v21 = (id)_REMGetLocalizedString();
  if (!v21)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v13 setCategorySummaryFormat:v21];

  id v22 = v13;
  uint64_t v23 = v26;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
}

void sub_10027025C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1009071F8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_100911CC8);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v19 = sub_1000C51B8(a1, a2, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Setting BLTBulletinContextKeyWatchLegacyMapKey to %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_100094134(&qword_100911D00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:393216];
  *(void *)(inited + 40) = a1;
  *(void *)(inited + 48) = a2;
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1002EDFF4(inited);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v19 + 1) = v12;
  AnyHashable.init<A>(_:)();
  uint64_t v20 = sub_100094134(&qword_100911D08);
  *(void *)&long long v19 = v11;
  id v13 = [v3 userInfo];
  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = v14;
  if (v20)
  {
    sub_10009A1A0(&v19, v17);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C48E0(v17, (uint64_t)v21, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_100233FFC((uint64_t)v21);
  }
  else
  {
    sub_1000966BC((uint64_t)&v19, &qword_100908190);
    sub_10030C450((uint64_t)v21, v17);
    sub_100233FFC((uint64_t)v21);
    sub_1000966BC((uint64_t)v17, &qword_100908190);
  }
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 setUserInfo:isa];
}

void sub_1002705B8(void *a1, uint64_t a2, void *a3)
{
  id v140 = a3;
  id v141 = a1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v132 - v8;
  __chkstk_darwin(v10);
  uint64_t v139 = (uint64_t)&v132 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v132 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v132 - v16;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v132 - v19;
  uint64_t v21 = type metadata accessor for Date();
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v132 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v132 - v25;
  __chkstk_darwin(v27);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v132 - v29;
  __chkstk_darwin(v31);
  __chkstk_darwin(v32);
  uint64_t v38 = (char *)&v132 - v37;
  unint64_t v39 = *(void **)(a2 + 8);
  switch(*(unsigned char *)(a2 + 32))
  {
    case 1:
      uint64_t v52 = *(void *)(a2 + 16);
      uint64_t v53 = *(void *)(a2 + 24);
      NSString v54 = *(void **)(a2 + 8);
      id v140 = [v39 trigger];
      self;
      id v55 = (void *)swift_dynamicCastObjCClass();
      if (!v55)
      {

        uint64_t v88 = v54;
        uint64_t v89 = v52;
        uint64_t v90 = v53;
        unsigned __int8 v91 = 1;
        goto LABEL_30;
      }
      id v56 = v55;
      id v57 = [v55 structuredLocation];
      id v58 = [v57 displayName];

      if (!v58)
      {
        sub_1001D5BC4(v54, v52, v53, 1u);
        goto LABEL_39;
      }
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v61 = v60;

      id v62 = [v56 proximity];
      if (v62)
      {
        if (v62 == (id)1)
        {
          id v120 = (id)_REMGetLocalizedString();
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          sub_100094134((uint64_t *)&unk_10090A430);
          uint64_t v121 = swift_allocObject();
          *(_OWORD *)(v121 + 16) = xmmword_100776E40;
          *(void *)(v121 + 56) = &type metadata for String;
          *(void *)(v121 + 64) = sub_1000C5B38();
          *(void *)(v121 + 32) = v59;
          *(void *)(v121 + 40) = v61;
          String.init(format:_:)();
          swift_bridgeObjectRelease();
          id v63 = v141;
        }
        else
        {
          id v63 = v141;
          if (v62 == (id)2)
          {
            id v64 = (id)_REMGetLocalizedString();
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            sub_100094134((uint64_t *)&unk_10090A430);
            uint64_t v65 = swift_allocObject();
            *(_OWORD *)(v65 + 16) = xmmword_100776E40;
            *(void *)(v65 + 56) = &type metadata for String;
            *(void *)(v65 + 64) = sub_1000C5B38();
            *(void *)(v65 + 32) = v59;
            *(void *)(v65 + 40) = v61;
            String.init(format:_:)();
          }
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        id v63 = v141;
      }
      id v141 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v63 setBody:v141];

      id v105 = v54;
      uint64_t v106 = v52;
      uint64_t v107 = v53;
      unsigned __int8 v108 = 1;
      goto LABEL_51;
    case 2:
      uint64_t v66 = *(void *)(a2 + 16);
      uint64_t v67 = *(void *)(a2 + 24);
      uint64_t v68 = *(void **)(a2 + 8);
      id v69 = [v39 trigger];
      self;
      os_log_type_t v70 = (void *)swift_dynamicCastObjCClass();
      if (v70)
      {
        id v71 = [v70 event];
        if (v71 == (id)1 || v71 == (id)2)
        {
          id v103 = v141;
          id v104 = (id)_REMGetLocalizedString();
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        else
        {
          id v103 = v141;
        }
        id v141 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v103 setBody:v141];

        id v105 = v68;
        uint64_t v106 = v66;
        uint64_t v107 = v67;
        unsigned __int8 v108 = 2;
LABEL_51:
        sub_1001D5BC4(v105, v106, v107, v108);
        id v102 = v141;
LABEL_52:
      }
      else
      {

        uint64_t v88 = v68;
        uint64_t v89 = v66;
        uint64_t v90 = v67;
        unsigned __int8 v91 = 2;
LABEL_30:
        sub_1001D5BC4(v88, v89, v90, v91);
      }
      return;
    case 3:
      uint64_t v72 = *(void *)(a2 + 16);
      uint64_t v73 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      if (!v73) {
        return;
      }
      uint64_t v74 = v73;
      id v75 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = xmmword_100776E40;
      *(void *)(v76 + 56) = &type metadata for String;
      *(void *)(v76 + 64) = sub_1000C5B38();
      *(void *)(v76 + 32) = v72;
      *(void *)(v76 + 40) = v74;
      String.init(format:_:)();
      swift_bridgeObjectRelease();
      id v140 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v141 setBody:v140];
LABEL_39:
      id v102 = v140;
      goto LABEL_52;
    case 4:
      uint64_t v132 = v36;
      uint64_t v136 = v34;
      uint64_t v137 = v35;
      uint64_t v138 = v33;
      id v77 = *(id *)a2;
      id v78 = [v77 displayDate];
      if (!v78) {
        goto LABEL_57;
      }
      id v135 = v77;
      id v79 = [objc_allocWithZone((Class)NSDateFormatter) init];
      [v79 setDoesRelativeDateFormatting:1];
      [v79 setDateStyle:1];
      id v133 = v79;
      [v79 setTimeStyle:1];
      id v134 = v78;
      if (![v78 isAllDay])
      {
        id v77 = v135;
        if ([v135 isOverdue])
        {
          id v92 = v134;
          id v93 = [v134 date];
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v94 = v136;
          uint64_t v95 = v138;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(v17, 0, 1, v138);
          sub_1004D80B0(v77, (uint64_t)v140, (uint64_t)v17, (uint64_t)v6);
          sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909A40);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v6, 1, v95) != 1)
          {
            (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v23, v6, v95);
            Class isa = Date._bridgeToObjectiveC()().super.isa;
            id v125 = v133;
            id v126 = [v133 stringFromDate:isa];

            static String._unconditionallyBridgeFromObjectiveC(_:)();
            (*(void (**)(char *, uint64_t))(v94 + 8))(v23, v95);
            goto LABEL_57;
          }
          sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909A40);
        }
        id v96 = v134;
        id v97 = [v134 date];
        uint64_t v98 = v137;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        Class v99 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v98, v138);
        id v100 = v133;
        id v101 = [v133 stringFromDate:v99];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_57:
        id v127 = v141;
        goto LABEL_60;
      }
      id v80 = [objc_allocWithZone((Class)NSDateFormatter) init];
      [v80 setDoesRelativeDateFormatting:1];
      [v80 setDateStyle:1];
      [v80 setTimeStyle:0];
      id v77 = v135;
      if (![v135 isOverdue]) {
        goto LABEL_25;
      }
      sub_1004D7CEC(v77, (uint64_t)v140, (uint64_t)v14);
      uint64_t v81 = v136;
      uint64_t v82 = v138;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v14, 1, v138) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v30, v14, v82);
        Class v122 = Date._bridgeToObjectiveC()().super.isa;
        id v123 = [v80 stringFromDate:v122];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(char *, uint64_t))(v81 + 8))(v30, v82);
        goto LABEL_57;
      }
      sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_100909A40);
LABEL_25:
      sub_1004D83AC(v77, (uint64_t)v9);
      uint64_t v83 = v136;
      NSString v84 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
      uint64_t v85 = v138;
      if (v84((uint64_t)v9, 1, v138) == 1)
      {
        sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909A40);
        uint64_t v86 = v139;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v139, 1, 1, v85);
        id v87 = v133;
      }
      else
      {
        uint64_t v113 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
        v113(v26, v9, v85);
        uint64_t v86 = v139;
        sub_1004D94AC((uint64_t)v26, v139);
        id v140 = *(id *)(v83 + 8);
        ((void (*)(char *, uint64_t))v140)(v26, v85);
        int v114 = v84(v86, 1, v85);
        id v87 = v133;
        if (v114 != 1)
        {
          uint64_t v128 = v132;
          v113(v132, (char *)v86, v85);
          Class v129 = Date._bridgeToObjectiveC()().super.isa;
          id v130 = [v80 stringFromDate:v129];

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          ((void (*)(char *, uint64_t))v140)(v128, v85);
          goto LABEL_59;
        }
      }
      sub_1000966BC(v86, (uint64_t *)&unk_100909A40);
      id v115 = v134;
      id v116 = [v134 date];
      uint64_t v117 = v137;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      Class v118 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v117, v85);
      id v119 = [v87 stringFromDate:v118];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_59:
      id v127 = v141;
      id v77 = v135;
LABEL_60:
      NSString v131 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v127 setBody:v131];

      return;
    default:
      uint64_t v137 = v35;
      uint64_t v138 = v33;
      uint64_t v40 = v34;
      id v41 = *(id *)a2;
      id v42 = [v41 displayDate];
      if (!v42) {
        goto LABEL_44;
      }
      uint64_t v43 = v42;
      id v44 = [objc_allocWithZone((Class)NSDateFormatter) init];
      [v44 setDoesRelativeDateFormatting:1];
      [v44 setDateStyle:1];
      [v44 setTimeStyle:1];
      if (![v41 isOverdue]) {
        goto LABEL_6;
      }
      id v45 = [v43 date];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v46 = v40;
      uint64_t v47 = v138;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v17, 0, 1, v138);
      sub_1004D7CE0(v41, (uint64_t)v140, (uint64_t)v17, (uint64_t)v20);
      sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909A40);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v20, 1, v47) == 1)
      {
        sub_1000966BC((uint64_t)v20, (uint64_t *)&unk_100909A40);
LABEL_6:
        id v48 = [v43 date];
        uint64_t v49 = v137;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        Class v50 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v49, v138);
        id v51 = [v44 stringFromDate:v50];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v38, v20, v47);
        Class v109 = Date._bridgeToObjectiveC()().super.isa;
        id v110 = [v44 stringFromDate:v109];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v47);
      }
LABEL_44:
      id v111 = v141;
      NSString v112 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v111 setBody:v112];

      return;
  }
}

id sub_1002715D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v7);
  uint64_t v9 = v8;
  if (a4)
  {
    v10.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.Class isa = 0;
  }
  id v19 = 0;
  id v11 = [(id)swift_getObjCClassFromMetadata() attachmentWithIdentifier:v6 URL:v9 options:v10.super.isa error:&v19];

  id v12 = v19;
  if (v11)
  {
    uint64_t v13 = type metadata accessor for URL();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
    id v15 = v12;
    v14(a3, v13);
  }
  else
  {
    id v16 = v19;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v17 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a3, v17);
  }
  return v11;
}

uint64_t sub_10027178C(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = 0x726F4D7478656E2ELL;
  uint64_t v9 = (void *)0xEC000000676E696ELL;
  switch(a1)
  {
    case 0:
    case 3:
      break;
    case 1:
      uint64_t v9 = (void *)0xEE006E6F6F6E7265;
      uint64_t v8 = 0x746641736968742ELL;
      break;
    case 2:
      uint64_t v9 = (void *)0xE800000000000000;
      uint64_t v8 = 0x746867696E6F742ELL;
      break;
    default:
      type metadata accessor for REMReminderNextThirdsHour(0);
      uint64_t v19 = a1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1002719A4);
  }
  BOOL v10 = (a2 & 1) == 0;
  if (a2) {
    uint64_t v11 = 0x646E656B6565772ELL;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10) {
    id v12 = (void *)0xE000000000000000;
  }
  else {
    id v12 = (void *)0xE800000000000000;
  }
  uint64_t v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for RDUserNotificationCategory.reminderAlarm(_:), v4);
  uint64_t v13 = RDUserNotificationCategory.rawValue.getter();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  uint64_t v19 = v13;
  unint64_t v20 = v15;
  v16._countAndFlagsBits = v8;
  v16._object = v9;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = v11;
  v17._object = v12;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return v19;
}

void *sub_1002719B4()
{
  uint64_t v259 = type metadata accessor for RDUserNotificationAction();
  uint64_t v0 = *(void *)(v259 - 8);
  __chkstk_darwin(v259);
  uint64_t v258 = (char *)&v209 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v225 = (char *)&v209 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v227 = (char *)&v209 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v239 = (char *)&v209 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v209 - v10;
  unint64_t v270 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v12 = static RDUserNotificationCategory.allCases.getter();
  uint64_t v13 = v12;
  uint64_t v244 = *(void *)(v12 + 16);
  if (!v244)
  {
LABEL_88:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  unint64_t v14 = 0;
  uint64_t v219 = 0;
  uint64_t v15 = *(unsigned __int8 *)(v3 + 80);
  int v247 = enum case for RDUserNotificationCategory.reminderAlarm(_:);
  uint64_t v218 = (v15 + 32) & ~v15;
  uint64_t v246 = v12 + v218;
  uint64_t v248 = v3 + 16;
  uint64_t v245 = v3 + 88;
  int v238 = enum case for RDUserNotificationCategory.todayNotification(_:);
  unsigned int v230 = enum case for RDUserNotificationCategory.todayNotificationForSingleReminder(_:);
  int v226 = enum case for RDUserNotificationCategory.todayNotificationBadge(_:);
  int v224 = enum case for RDUserNotificationCategory.caldavSharedList(_:);
  int v222 = enum case for RDUserNotificationCategory.beforeFirstUnlock(_:);
  unsigned int v221 = enum case for RDUserNotificationCategory.singleAssignmentNotification(_:);
  unsigned int v220 = enum case for RDUserNotificationCategory.multipleAssignmentsNotification(_:);
  uint64_t v263 = (void **)(v0 + 104);
  Swift::Int v262 = (void (**)(char *, uint64_t))(v0 + 8);
  uint64_t v217 = v15 | 7;
  unsigned int v216 = enum case for RDUserNotificationCategory.sharedListSingleReminderAddedNotification(_:);
  long long v252 = xmmword_100776E30;
  long long v228 = xmmword_10077A530;
  long long v212 = xmmword_100776E80;
  unsigned int v215 = enum case for RDUserNotificationCategory.sharedListMultipleRemindersAddedNotification(_:);
  unsigned int v211 = enum case for RDUserNotificationCategory.sharedListSingleReminderCompletedNotification(_:);
  unsigned int v210 = enum case for RDUserNotificationCategory.sharedListMultipleRemindersCompletedNotification(_:);
  unsigned int v240 = enum case for RDUserNotificationAction.markAsCompleted(_:);
  unsigned int v214 = enum case for RDUserNotificationAction.viewAssignmentInList(_:);
  unsigned int v213 = enum case for RDUserNotificationAction.declineAssignment(_:);
  unsigned int v237 = enum case for RDUserNotificationAction.snoozeForOneHour(_:);
  unsigned int v236 = enum case for RDUserNotificationAction.snoozeForOneDay(_:);
  unsigned int v251 = enum case for RDUserNotificationAction.snoozeToNextThirds(_:);
  unsigned int v250 = enum case for RDUserNotificationAction.snoozeToNextWeekend(_:);
  uint64_t v234 = (void (**)(char *))(v3 + 104);
  uint64_t v242 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v229 = "sWithLocalElementIDPrefix";
  unint64_t v235 = 0x80000001007CFF80;
  uint64_t v233 = v2;
  uint64_t v241 = v12;
  uint64_t v232 = v3;
  long long v231 = v11;
  unsigned int v223 = enum case for RDUserNotificationCategory.dueDateDeltaAlarm(_:);
  while (v14 < *(void *)(v13 + 16))
  {
    uint64_t v16 = *(void *)(v3 + 72);
    Swift::String v17 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v17(v11, v246 + v16 * v14, v2);
    int v18 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v11, v2);
    if (v18 == v247)
    {
      unint64_t v243 = v14;
      uint64_t v19 = (void (*)(char *, void, uint64_t))*v263;
      unint64_t v20 = v258;
      uint64_t v21 = v259;
      ((void (*)(char *, void, uint64_t))*v263)(v258, v240, v259);
      uint64_t v22 = v19;
      uint64_t v261 = v19;
      RDUserNotificationAction.rawValue.getter();
      uint64_t v260 = *v262;
      v260(v20, v21);
      id v23 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v24 = String._bridgeToObjectiveC()();
      id v265 = self;
      id v25 = [v265 iconWithSystemImageName:v24];

      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v264 = self;
      id v256 = [v264 actionWithIdentifier:v26 title:v27 options:0 icon:v25];

      v22(v20, v237, v21);
      RDUserNotificationAction.rawValue.getter();
      uint64_t v28 = v260;
      v260(v20, v21);
      id v29 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v30 = String._bridgeToObjectiveC()();
      id v31 = [v265 iconWithSystemImageName:v30];

      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v34 = [v264 actionWithIdentifier:v32 title:v33 options:0 icon:v31];

      v261(v20, v236, v21);
      RDUserNotificationAction.rawValue.getter();
      v28(v20, v21);
      id v35 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v36 = String._bridgeToObjectiveC()();
      id v37 = [v265 iconWithSystemImageName:v36];

      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v39 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v255 = [v264 actionWithIdentifier:v38 title:v39 options:0 icon:v37];

      id v253 = self;
      unint64_t v40 = 0;
      id v254 = v34;
      while (v40 < 3)
      {
        unint64_t v41 = v40;
        int v42 = 0;
        unint64_t v43 = 0;
        uint64_t v257 = (uint64_t)*(&off_1008B10F8 + v41 + 4);
        unint64_t v249 = v41 + 1;
        do
        {
          if (v43 >= 2)
          {
            __break(1u);
            goto LABEL_88;
          }
          LODWORD(v268) = v42;
          int v44 = *((unsigned __int8 *)&off_1008B1130 + v43 + 32);
          id v267 = (void (*)(void, void))sub_10027178C(v257, *((unsigned char *)&off_1008B1130 + v43 + 32));
          REMReminderNextThirdsHour.stringForSnoozingUntil()();
          REMReminderNextThirdsHour.systemImageStringForSnoozingUntil()();
          id v45 = v258;
          uint64_t v46 = v259;
          v261(v258, v251, v259);
          RDUserNotificationAction.rawValue.getter();
          v260(v45, v46);
          NSString v47 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v48 = [v265 iconWithSystemImageName:v47];

          NSString v49 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v50 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v51 = [v264 actionWithIdentifier:v49 title:v50 options:0 icon:v48];

          id v52 = 0;
          if (v44 == 1)
          {
            uint64_t v53 = v258;
            uint64_t v54 = v259;
            v261(v258, v250, v259);
            RDUserNotificationAction.rawValue.getter();
            v260(v53, v54);
            id v55 = (id)_REMGetLocalizedString();
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            NSString v56 = String._bridgeToObjectiveC()();
            id v57 = [v265 iconWithSystemImageName:v56];

            NSString v58 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            NSString v59 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v52 = [v264 actionWithIdentifier:v58 title:v59 options:0 icon:v57];
          }
          NSString v60 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v266 = (id)sub_1000963CC(0, &qword_100911CE0);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          Class v62 = Array._bridgeToObjectiveC()().super.isa;
          id v63 = [v253 categoryWithIdentifier:v60 actions:isa intentIdentifiers:v62 options:3];

          id v267 = (void (*)(void, void))v63;
          [v63 addPrivateOptions:8519680];
          sub_100094134(&qword_100911CF0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = v252;
          id v65 = v256;
          uint64_t v66 = v254;
          *(void *)(inited + 32) = v256;
          *(void *)(inited + 40) = v66;
          id v67 = v255;
          *(void *)(inited + 48) = v51;
          *(void *)(inited + 56) = v67;
          *(void *)(inited + 64) = v52;
          *(void *)(inited + 72) = 0;
          uint64_t v269 = inited;
          specialized Array._endMutation()();
          uint64_t v68 = (void *)v269;
          uint64_t v269 = (uint64_t)_swiftEmptyArrayStorage;
          id v69 = (void *)v68[4];
          if (v69)
          {
            id v70 = v69;
            id v71 = v65;
            uint64_t v72 = v52;
            uint64_t v73 = v66;
            id v74 = v66;
            id v75 = v51;
            id v76 = v51;
            id v77 = v67;
            id v78 = v72;
            id v79 = v72;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
            id v78 = v52;
            id v80 = v52;
            id v81 = v65;
            uint64_t v73 = v66;
            id v82 = v66;
            id v75 = v51;
            id v83 = v51;
            id v84 = v67;
          }
          uint64_t v85 = v267;
          uint64_t v86 = (void *)v68[5];
          if (v86)
          {
            id v87 = v86;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          uint64_t v88 = (void *)v68[6];
          if (v88)
          {
            id v89 = v88;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          uint64_t v90 = (void *)v68[7];
          if (v90)
          {
            id v91 = v90;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          id v92 = (void *)v68[8];
          if (v92)
          {
            id v93 = v92;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          uint64_t v94 = (void *)v68[9];
          if (v94)
          {
            id v95 = v94;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          swift_bridgeObjectRelease();
          Class v96 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v85 setActions:v96];

          NSString v97 = (id)_REMGetLocalizedString();
          if (!v97)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v97 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          [v85 setCategorySummaryFormat:v97];

          NSString v98 = (id)_REMGetLocalizedString();
          if (!v98)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v98 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          [v85 setHiddenPreviewsBodyPlaceholder:v98];

          id v99 = v85;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          int v42 = 1;
          unint64_t v43 = &_mh_execute_header.magic + 1;
        }
        while ((v268 & 1) == 0);
        unint64_t v40 = v249;
        if (v249 == 3)
        {

          uint64_t v2 = v233;
          goto LABEL_4;
        }
      }
      __break(1u);
      break;
    }
    if (v18 == v238)
    {
LABEL_50:
      unint64_t v100 = v14;
      id v101 = v239;
      (*v234)(v239);
      RDUserNotificationCategory.rawValue.getter();
      (*v242)(v101, v2);
      NSString v102 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_1000963CC(0, &qword_100911CE0);
      Class v103 = Array._bridgeToObjectiveC()().super.isa;
      Class v104 = Array._bridgeToObjectiveC()().super.isa;
      id v105 = [self categoryWithIdentifier:v102 actions:v103 intentIdentifiers:v104 options:3];

      NSString v106 = (id)_REMGetLocalizedString();
      if (!v106)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v106 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v105 setHiddenPreviewsBodyPlaceholder:v106];

      id v107 = v105;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v13 = v241;
      unint64_t v14 = v100;
      goto LABEL_6;
    }
    if (v18 == v230)
    {
      unint64_t v243 = v14;
      unsigned __int8 v108 = v11;
      uint64_t v109 = v3;
      uint64_t v110 = v230;
      id v111 = v258;
      uint64_t v112 = v259;
      ((void (*)(char *, void, uint64_t))*v263)(v258, v240, v259);
      RDUserNotificationAction.rawValue.getter();
      (*v262)(v111, v112);
      id v113 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v114 = String._bridgeToObjectiveC()();
      id v115 = [self iconWithSystemImageName:v114];

      NSString v116 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v117 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v118 = [self actionWithIdentifier:v116 title:v117 options:0 icon:v115];

      id v119 = v239;
      ((void (*)(char *, uint64_t, uint64_t))*v234)(v239, v110, v2);
      RDUserNotificationCategory.rawValue.getter();
      (*v242)(v119, v2);
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v120 = swift_allocObject();
      *(_OWORD *)(v120 + 16) = v228;
      *(void *)(v120 + 32) = v118;
      uint64_t v269 = v120;
      specialized Array._endMutation()();
      id v121 = v118;
      NSString v122 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_1000963CC(0, &qword_100911CE0);
      Class v123 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Class v124 = Array._bridgeToObjectiveC()().super.isa;
      id v125 = [self categoryWithIdentifier:v122 actions:v123 intentIdentifiers:v124 options:3];

      NSString v126 = (id)_REMGetLocalizedString();
      if (!v126)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v126 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v125 setHiddenPreviewsBodyPlaceholder:v126];

      id v127 = v125;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v3 = v109;
      if (*(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v11 = v108;
    }
    else
    {
      if (v18 == v226 || v18 == v224) {
        goto LABEL_6;
      }
      if (v18 == v222) {
        goto LABEL_50;
      }
      unint64_t v243 = v14;
      if (v18 == v221 || v18 == v220)
      {
        unint64_t v268 = (char *)*v263;
        uint64_t v149 = v258;
        uint64_t v150 = v259;
        ((void (*)(char *, void, uint64_t))v268)(v258, v214, v259);
        RDUserNotificationAction.rawValue.getter();
        id v267 = (void (*)(void, void))*v262;
        v267(v149, v150);
        id v151 = (id)_REMGetLocalizedString();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        NSString v152 = String._bridgeToObjectiveC()();
        id v266 = self;
        id v153 = [v266 iconWithSystemImageName:v152];

        NSString v154 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v155 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v261 = (void (*)(char *, void, uint64_t))self;
        id v265 = [v261 actionWithIdentifier:v154 title:v155 options:4 icon:v153];

        uint64_t v156 = v213;
        uint64_t v157 = v150;
        ((void (*)(char *, void, uint64_t))v268)(v149, v213, v150);
        RDUserNotificationAction.rawValue.getter();
        v267(v149, v150);
        id v158 = (id)_REMGetLocalizedString();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        NSString v159 = String._bridgeToObjectiveC()();
        id v160 = [v266 iconWithSystemImageName:v159];

        NSString v161 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v162 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v163 = v261;
        id v264 = [v261 actionWithIdentifier:v161 title:v162 options:0 icon:v160];

        ((void (*)(char *, uint64_t, uint64_t))v268)(v149, v156, v157);
        RDUserNotificationAction.rawValue.getter();
        v267(v149, v157);
        id v164 = (id)_REMGetLocalizedString();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        NSString v165 = String._bridgeToObjectiveC()();
        id v166 = [v266 iconWithSystemImageName:v165];

        NSString v167 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v168 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v169 = [v163 actionWithIdentifier:v167 title:v168 options:0 icon:v166];

        sub_100094134(&qword_100911CE8);
        uint64_t v170 = v218;
        uint64_t v171 = swift_allocObject() + v170;
        BOOL v172 = *v234;
        ((void (*)(uint64_t, void, uint64_t))*v234)(v171, v221, v233);
        ((void (*)(uint64_t, void, uint64_t))v172)(v171 + v16, v220, v233);
        NSString v174 = v264;
        unint64_t v173 = v265;
        uint64_t v175 = v219;
        sub_10026FEC4(v171, v264, (uint64_t)v169, v265, &v270);
        uint64_t v2 = v233;
        sub_10026FEC4(v171 + v16, v174, (uint64_t)v169, v173, &v270);
        uint64_t v219 = v175;
        unint64_t v14 = v243;

        uint64_t v13 = v241;
        uint64_t v3 = v232;
        swift_setDeallocating();
        uint64_t v11 = v231;
        swift_arrayDestroy();
        swift_deallocClassInstance();
        goto LABEL_6;
      }
      if (v18 == v216 || v18 == v215)
      {
        sub_100094134(&qword_100911CE8);
        uint64_t v176 = v218;
        uint64_t v177 = swift_allocObject();
        *(_OWORD *)(v177 + 16) = v212;
        id v267 = (void (*)(void, void))v177;
        uint64_t v178 = (char *)(v177 + v176);
        uint64_t v179 = *v234;
        ((void (*)(uint64_t, void, uint64_t))*v234)(v177 + v176, v216, v2);
        unint64_t v268 = v178;
        ((void (*)(char *, void, uint64_t))v179)(&v178[v16], v215, v2);
        NSString v180 = self;
        char v181 = 0;
        uint64_t v182 = 0;
        uint64_t v183 = v227;
        do
        {
          char v184 = v181;
          v17(v183, (unint64_t)&v268[v182 * v16], v2);
          RDUserNotificationCategory.rawValue.getter();
          NSString v185 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          sub_1000963CC(0, &qword_100911CE0);
          Class v186 = Array._bridgeToObjectiveC()().super.isa;
          uint64_t v187 = v2;
          Class v188 = Array._bridgeToObjectiveC()().super.isa;
          id v189 = [v180 categoryWithIdentifier:v185 actions:v186 intentIdentifiers:v188 options:0];

          id v190 = (id)_REMGetLocalizedString();
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          NSString v191 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v189 setHiddenPreviewsBodyPlaceholder:v191];

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          (*v242)(v183, v187);
          char v181 = 1;
          uint64_t v182 = 1;
          uint64_t v2 = v187;
        }
        while ((v184 & 1) == 0);
      }
      else
      {
        if (v18 != v211 && v18 != v210)
        {
          if (v18 != v223) {
            goto LABEL_92;
          }
          uint64_t v128 = v11;
          uint64_t v129 = v3;
          uint64_t v130 = v223;
          NSString v131 = v258;
          uint64_t v132 = v259;
          ((void (*)(char *, void, uint64_t))*v263)(v258, v240, v259);
          RDUserNotificationAction.rawValue.getter();
          (*v262)(v131, v132);
          id v133 = (id)_REMGetLocalizedString();
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          NSString v134 = String._bridgeToObjectiveC()();
          id v135 = [self iconWithSystemImageName:v134];

          NSString v136 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v137 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v138 = [self actionWithIdentifier:v136 title:v137 options:0 icon:v135];

          uint64_t v139 = v239;
          ((void (*)(char *, uint64_t, uint64_t))*v234)(v239, v130, v2);
          RDUserNotificationCategory.rawValue.getter();
          (*v242)(v139, v2);
          NSString v140 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          sub_1000963CC(0, &qword_100911CE0);
          Class v141 = Array._bridgeToObjectiveC()().super.isa;
          Class v142 = Array._bridgeToObjectiveC()().super.isa;
          id v143 = [self categoryWithIdentifier:v140 actions:v141 intentIdentifiers:v142 options:3];

          sub_100094134((uint64_t *)&unk_10090AF20);
          uint64_t v144 = swift_allocObject();
          *(_OWORD *)(v144 + 16) = v228;
          *(void *)(v144 + 32) = v138;
          uint64_t v269 = v144;
          specialized Array._endMutation()();
          id v145 = v138;
          Class v146 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v143 setActions:v146];

          NSString v147 = (id)_REMGetLocalizedString();
          if (!v147)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v147 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          [v143 setHiddenPreviewsBodyPlaceholder:v147];

          id v148 = v143;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v3 = v129;
          uint64_t v11 = v128;
          if (*(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          goto LABEL_5;
        }
        sub_100094134(&qword_100911CE8);
        uint64_t v192 = v218;
        uint64_t v193 = swift_allocObject();
        *(_OWORD *)(v193 + 16) = v212;
        id v267 = (void (*)(void, void))v193;
        unint64_t v194 = (char *)(v193 + v192);
        uint64_t v195 = *v234;
        ((void (*)(uint64_t, void, uint64_t))*v234)(v193 + v192, v211, v2);
        unint64_t v268 = v194;
        ((void (*)(char *, void, uint64_t))v195)(&v194[v16], v210, v2);
        uint64_t v196 = self;
        char v197 = 0;
        uint64_t v198 = 0;
        uint64_t v199 = v225;
        do
        {
          char v200 = v197;
          v17(v199, (unint64_t)&v268[v198 * v16], v2);
          RDUserNotificationCategory.rawValue.getter();
          NSString v201 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          sub_1000963CC(0, &qword_100911CE0);
          Class v202 = Array._bridgeToObjectiveC()().super.isa;
          uint64_t v203 = v2;
          Class v204 = Array._bridgeToObjectiveC()().super.isa;
          id v205 = [v196 categoryWithIdentifier:v201 actions:v202 intentIdentifiers:v204 options:0];

          id v206 = (id)_REMGetLocalizedString();
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          NSString v207 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v205 setHiddenPreviewsBodyPlaceholder:v207];

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v270 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          (*v242)(v199, v203);
          char v197 = 1;
          uint64_t v198 = 1;
          uint64_t v2 = v203;
        }
        while ((v200 & 1) == 0);
      }
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
LABEL_4:
      uint64_t v3 = v232;
      uint64_t v11 = v231;
    }
LABEL_5:
    uint64_t v13 = v241;
    unint64_t v14 = v243;
LABEL_6:
    if (++v14 == v244)
    {
      swift_bridgeObjectRelease();
      return (void *)v270;
    }
  }
  __break(1u);
LABEL_92:
  id result = (void *)_diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

unint64_t sub_100273D70()
{
  unint64_t result = qword_100911CF8;
  if (!qword_100911CF8)
  {
    type metadata accessor for RDUserNotificationCategory();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100911CF8);
  }
  return result;
}

uint64_t sub_100273DC8(void *a1)
{
  id v24 = a1;
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Calendar();
  uint64_t v4 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DateComponents();
  uint64_t v7 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  sub_100094134(&qword_1009114D0);
  uint64_t v10 = type metadata accessor for Calendar.Component();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100776E40;
  (*(void (**)(unint64_t, void, uint64_t))(v11 + 104))(v13 + v12, enum case for Calendar.Component.hour(_:), v10);
  sub_10032DD10(v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Date.init()();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v23);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
  uint64_t v14 = DateComponents.hour.getter();
  LOBYTE(v6) = v15;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
  if (v6) {
    uint64_t v14 = 0;
  }
  id v16 = [self nextThirdsHourFromHour:v14];
  id v17 = [v24 dueDateComponents];
  if (v17)
  {
    int v18 = v17;
    char v19 = [v17 rem_isWeekendDateComponents];
  }
  else
  {
    char v19 = 0;
  }
  return sub_10027178C((uint64_t)v16, v19);
}

id sub_100274150(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v51 = a5;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v52 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v51 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  id v16 = (char *)&v51 - v15;
  __chkstk_darwin(v14);
  int v18 = (char *)&v51 - v17;
  id v19 = [self defaultManager];
  id v57 = 0;
  id v20 = [v19 rem_createProtectedTemporaryDirectoryIfNeededWithError:&v57];
  id v21 = v57;
  if (v20)
  {
    uint64_t v22 = v20;
    uint64_t v55 = v7;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    id v23 = v21;

    id v24 = [self processInfo];
    id v25 = [v24 globallyUniqueString];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    URL.appendingPathComponent(_:isDirectory:)();
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v26);
    uint64_t v28 = v27;
    id v57 = 0;
    unsigned int v29 = [v19 createDirectoryAtURL:v27 withIntermediateDirectories:1 attributes:0 error:&v57];

    id v30 = v57;
    if (v29)
    {
      id v57 = a1;
      uint64_t v58 = a2;
      swift_bridgeObjectRetain();
      v31._countAndFlagsBits = 1735290926;
      v31._object = (void *)0xE400000000000000;
      String.append(_:)(v31);
      uint64_t v32 = (uint64_t)v57;
      uint64_t v33 = v58;
      id v34 = v30;
      URL.appendingPathComponent(_:)();
      Data.write(to:options:)();
      uint64_t v39 = (uint64_t)v52;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v52, v13, v55);
      if (v51) {
        uint64_t v40 = sub_100420860(v51);
      }
      else {
        uint64_t v40 = 0;
      }
      sub_1000963CC(0, &qword_100911D10);
      id v48 = sub_1002715D0(v32, v33, v39, v40);

      NSString v49 = *(void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v50 = v55;
      v49(v13, v55);
      v49(v16, v50);
      v49(v18, v50);
      return v48;
    }
    id v36 = v57;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v37 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v38 = v55;
    v37(v16, v55);
    v37(v18, v38);
  }
  else
  {
    id v35 = v57;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  if (qword_1009071F8 != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  sub_10008E2DC(v41, (uint64_t)qword_100911CC8);
  swift_errorRetain();
  swift_errorRetain();
  int v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    int v44 = (uint8_t *)swift_slowAlloc();
    id v57 = (id)swift_slowAlloc();
    *(_DWORD *)int v44 = 136315138;
    swift_getErrorValue();
    uint64_t v45 = Error.localizedDescription.getter();
    uint64_t v56 = sub_1000C51B8(v45, v46, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Error creating UNNotificationAttachment from UIImage {error: %s}", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  return 0;
}

void sub_100274734(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMApplicationIconFormat();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [a2 userActivity];
  if (v12)
  {
    uint64_t v13 = v12;
    v31[0] = a1;
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for REMApplicationIconFormat.notificationShortLook(_:), v8);
    uint64_t v14 = (void *)REMUserActivity.appIconAndName(format:scale:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (v14)
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = (UIImage *)[objc_allocWithZone((Class)UIImage) initWithCGImage:v14 scale:0 orientation:3.0];
      id v16 = UIImagePNGRepresentation(v15);
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v20 = v19;

        sub_100097E38(v18, v20);
        id v21 = [a2 objectID];
        id v22 = [v21 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        id v23 = (void *)UUID.uuidString.getter();
        uint64_t v25 = v24;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        unint64_t v26 = sub_1002EE10C((uint64_t)&_swiftEmptyArrayStorage);
        id v27 = sub_100274150(v23, v25, v18, v20, v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v27)
        {
          sub_100094134((uint64_t *)&unk_10090AF20);
          uint64_t v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = xmmword_10077A530;
          *(void *)(v28 + 32) = v27;
          v31[1] = (id)v28;
          specialized Array._endMutation()();
          sub_1000963CC(0, &qword_100911D10);
          id v29 = v27;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v31[0] setAttachments:isa];
          sub_100097F34(v18, v20);
          sub_100097F34(v18, v20);

          uint64_t v13 = v29;
        }
        else
        {
          sub_100097F34(v18, v20);
          sub_100097F34(v18, v20);
        }
      }
      else
      {

        uint64_t v13 = v14;
      }
    }
  }
}

uint64_t sub_100274AE4(uint64_t a1)
{
  uint64_t result = sub_10027558C(&qword_100911D50, (void (*)(uint64_t))&type metadata accessor for REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100274B3C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100911D18);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100911D18);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100274C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10PredicatesOMa(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Parameters.reminderID.getter();
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10077A530;
  *(void *)(v8 + 32) = v7;
  id v65 = v8;
  specialized Array._endMutation()();
  *(void *)uint64_t v6 = v65;
  v6[8] = 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = qword_100907418;
  id v10 = v7;
  if (v9 != -1) {
    swift_once();
  }
  unint64_t v11 = sub_10039E88C((uint64_t)v6, (objc_class *)qword_1009421D8, a2, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (v2)
  {
    sub_1002759D0((uint64_t)v6, _s10PredicatesOMa);

    return;
  }
  unint64_t v12 = v11;
  if (!(v11 >> 62))
  {
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    if (qword_100907200 == -1)
    {
LABEL_27:
      uint64_t v47 = type metadata accessor for Logger();
      sub_10008E2DC(v47, (uint64_t)qword_100911D18);
      uint64_t v14 = (uint8_t *)v10;
      id v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        id v67 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 138412290;
        id v65 = v14;
        unint64_t v51 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)id v67 = v14;

        _os_log_impl((void *)&_mh_execute_header, v48, v49, "permanentlyHiddenReminders: Failed to get reminder of reminderID: %@.", v50, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v48 = v14;
      }

      id v52 = self;
      id v65 = 0;
      unint64_t v66 = 0xE000000000000000;
      _StringGuts.grow(_:)(71);
      v53._countAndFlagsBits = 0xD000000000000044;
      v53._object = (void *)0x80000001007CFFF0;
      String.append(_:)(v53);
      id v54 = [(uint8_t *)v14 description];
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v57 = v56;

      v58._countAndFlagsBits = v55;
      v58._object = v57;
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      v59._countAndFlagsBits = 46;
      v59._object = (void *)0xE100000000000000;
      String.append(_:)(v59);
      NSString v60 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v52 internalErrorWithDebugDescription:v60];

      swift_willThrow();
      goto LABEL_31;
    }
LABEL_35:
    swift_once();
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v46) {
    goto LABEL_26;
  }
LABEL_7:
  if ((v12 & 0xC000000000000001) != 0)
  {
    uint64_t v13 = (uint8_t *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_10;
  }
  if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v13 = (uint8_t *)*(id *)(v12 + 32);
LABEL_10:
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  id v15 = [(uint8_t *)v14 account];
  if (v15)
  {
    id v16 = v15;
    id v17 = [v15 recentlyDeletedInfoAsData];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      type metadata accessor for RDRecentlyDeletedInfo();
      sub_10027558C(&qword_100911D58, (void (*)(uint64_t))type metadata accessor for RDRecentlyDeletedInfo);
      static REMJSONRepresentable.fromJSONData(_:)();
      sub_100097F34(v19, v21);
      id v67 = v14;
      int v44 = v10;
      uint64_t v45 = swift_bridgeObjectRetain();
      sub_1002755D4(v45, v44);
      uint64_t v14 = v67;
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      if (qword_100907200 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_100911D18);
      id v29 = v10;
      int v44 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      int v31 = v30;
      if (os_log_type_enabled(v44, v30))
      {
        uint64_t v32 = swift_slowAlloc();
        int v63 = v31;
        uint64_t v33 = (uint8_t *)v32;
        id v64 = (void *)swift_slowAlloc();
        id v65 = v29;
        id v67 = v14;
        *(_DWORD *)uint64_t v33 = 138412290;
        v61[2] = v33 + 4;
        Class v62 = v33;
        v61[1] = &v66;
        id v34 = v29;
        uint64_t v14 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v64 = v29;

        _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v63, "permanentlyHiddenReminders: No recentlyDeletedInfo for account of reminderID: %@.", v62, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        int v44 = v29;
      }
    }

    REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Result.init(isPermanentlyHidden:)();
    goto LABEL_32;
  }
  if (qword_100907200 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10008E2DC(v22, (uint64_t)qword_100911D18);
  id v23 = v10;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    id v64 = (void *)swift_slowAlloc();
    id v65 = v23;
    id v67 = v26;
    *(_DWORD *)unint64_t v26 = 138412290;
    id v27 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v64 = v23;

    _os_log_impl((void *)&_mh_execute_header, v24, v25, "permanentlyHiddenReminders: Failed to get account of reminderID: %@.", v67, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v24 = v23;
  }

  id v35 = self;
  id v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(70);
  v36._object = (void *)0x80000001007CFFA0;
  v36._countAndFlagsBits = 0xD000000000000043;
  String.append(_:)(v36);
  id v37 = [v23 description];
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  v41._countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 46;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v35 internalErrorWithDebugDescription:v43];

  swift_willThrow();
LABEL_31:

LABEL_32:
  sub_1002759D0((uint64_t)v6, _s10PredicatesOMa);
}

uint64_t sub_10027558C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002755D4(uint64_t a1, void *a2)
{
  id v30 = a2;
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100914280);
  __chkstk_darwin(v10 - 8);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v27 = a1 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v31 = v7 + 48;
  uint64_t v32 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  id v17 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v33 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v22 >= v28) {
      goto LABEL_25;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_25;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_25;
        }
        unint64_t v23 = *(void *)(v27 + 8 * v19);
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v28) {
            goto LABEL_25;
          }
          unint64_t v23 = *(void *)(v27 + 8 * v19);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_22:
    sub_100128070(*(void *)(v33 + 48) + *(void *)(v7 + 72) * v21, (uint64_t)v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1) {
      goto LABEL_26;
    }
    sub_1001280D4((uint64_t)v12, (uint64_t)v9);
    id v25 = [v30 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v25) = static UUID.== infix(_:_:)();
    (*v17)(v5, v29);
    uint64_t result = sub_1002759D0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
    if (v25)
    {
      swift_release();
      return 1;
    }
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v28)
  {
LABEL_25:
    (*v32)(v12, 1, 1, v6);
LABEL_26:
    swift_release();
    return 0;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v28) {
      goto LABEL_25;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1002759D0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100275A30(uint64_t a1)
{
  uint64_t result = sub_100281434(&qword_100911D98, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesTrainer);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100275A88(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1001DE058(0, v1, 0);
  unint64_t result = sub_1000E162C(v2);
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 64;
  char v7 = *(unsigned char *)(v2 + 32);
  uint64_t v34 = v2;
  uint64_t v35 = v2 + 80;
  int64_t v31 = v1;
  int v32 = v4;
  uint64_t v33 = v2 + 64;
  while ((result & 0x8000000000000000) == 0 && (uint64_t)result < 1 << v7)
  {
    unint64_t v11 = result >> 6;
    if ((*(void *)(v6 + 8 * (result >> 6)) & (1 << result)) == 0) {
      goto LABEL_31;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_32;
    }
    uint64_t v36 = v5;
    uint64_t v37 = 1 << result;
    uint64_t v38 = result;
    uint64_t v12 = *(void *)(*(void *)(v2 + 56) + 8 * result);
    int64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001DE058(0, v13, 0);
      uint64_t v14 = (uint64_t *)(v12 + 40);
      do
      {
        uint64_t v16 = *(v14 - 1);
        uint64_t v15 = *v14;
        unint64_t v18 = _swiftEmptyArrayStorage[2];
        unint64_t v17 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain();
        if (v18 >= v17 >> 1) {
          sub_1001DE058(v17 > 1, v18 + 1, 1);
        }
        v14 += 4;
        _swiftEmptyArrayStorage[2] = v18 + 1;
        int64_t v19 = &_swiftEmptyArrayStorage[2 * v18];
        v19[4] = v16;
        v19[5] = v15;
        --v13;
      }
      while (v13);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_100094134((uint64_t *)&unk_10090AFB0);
    sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
    uint64_t v20 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    unint64_t v24 = _swiftEmptyArrayStorage[2];
    unint64_t v23 = _swiftEmptyArrayStorage[3];
    if (v24 >= v23 >> 1) {
      unint64_t result = sub_1001DE058(v23 > 1, v24 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v24 + 1;
    id v25 = &_swiftEmptyArrayStorage[2 * v24];
    v25[4] = v20;
    v25[5] = v22;
    uint64_t v2 = v34;
    char v7 = *(unsigned char *)(v34 + 32);
    unint64_t v8 = 1 << v7;
    if (v38 >= 1 << v7) {
      goto LABEL_33;
    }
    uint64_t v6 = v33;
    uint64_t v26 = *(void *)(v33 + 8 * v11);
    if ((v26 & v37) == 0) {
      goto LABEL_34;
    }
    int v4 = v32;
    if (*(_DWORD *)(v34 + 36) != v32) {
      goto LABEL_35;
    }
    unint64_t v27 = v26 & (-2 << (v38 & 0x3F));
    if (v27)
    {
      unint64_t v8 = __clz(__rbit64(v27)) | v38 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v31;
      uint64_t v10 = v36;
    }
    else
    {
      unint64_t v28 = v11 + 1;
      unint64_t v29 = (v8 + 63) >> 6;
      int64_t v9 = v31;
      if (v11 + 1 < v29)
      {
        unint64_t v30 = *(void *)(v33 + 8 * v28);
        if (v30)
        {
LABEL_27:
          unint64_t v8 = __clz(__rbit64(v30)) + (v28 << 6);
        }
        else
        {
          while (v29 - 2 != v11)
          {
            unint64_t v30 = *(void *)(v35 + 8 * v11++);
            if (v30)
            {
              unint64_t v28 = v11 + 1;
              goto LABEL_27;
            }
          }
        }
      }
      uint64_t v10 = v36;
    }
    uint64_t v5 = v10 + 1;
    unint64_t result = v8;
    if (v5 == v9) {
      return (unint64_t)_swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_100275DEC(void (*a1)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v3 = v2;
  sub_100094134(&qword_100911EE8);
  sub_1000967F4(&qword_100911F10, &qword_100911EE8);
  uint64_t v4 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v4 & ~(v4 >> 63), 0);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v20 = v1;
  swift_retain();
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if ((v4 & 0x8000000000000000) == 0)
  {
    if (!v4) {
      goto LABEL_8;
    }
    while (1)
    {
      uint64_t result = dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t v19 = v18;
      if (!v18) {
        goto LABEL_17;
      }
      a1(&v20, &v19);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      swift_release();
      uint64_t v8 = v20;
      uint64_t v7 = v21;
      uint64_t v22 = v5;
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1)
      {
        sub_1001DE058(v9 > 1, v10 + 1, 1);
        uint64_t v5 = v22;
      }
      void v5[2] = v10 + 1;
      unint64_t v11 = &v5[2 * v10];
      v11[4] = v8;
      v11[5] = v7;
      if (!--v4)
      {
LABEL_8:
        while (1)
        {
          dispatch thunk of _AnyIteratorBoxBase.next()();
          if (!v20) {
            goto LABEL_15;
          }
          uint64_t v19 = v20;
          a1(&v20, &v19);
          if (v3) {
            goto LABEL_14;
          }
          uint64_t v3 = 0;
          swift_release();
          uint64_t v12 = v20;
          uint64_t v13 = v21;
          uint64_t v22 = v5;
          unint64_t v15 = v5[2];
          unint64_t v14 = v5[3];
          if (v15 >= v14 >> 1)
          {
            sub_1001DE058(v14 > 1, v15 + 1, 1);
            uint64_t v5 = v22;
          }
          void v5[2] = v15 + 1;
          uint64_t v16 = &v5[2 * v15];
          v16[4] = v12;
          v16[5] = v13;
        }
      }
    }
LABEL_14:
    swift_release();
    swift_release();
LABEL_15:
    swift_release();
    return (uint64_t)v5;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

void *sub_100276050(uint64_t a1)
{
  sub_100094134(&qword_100911F28);
  sub_1000967F4(&qword_100911F48, &qword_100911F28);
  uint64_t v2 = dispatch thunk of Sequence.underestimatedCount.getter();
  sub_1001DE058(0, v2 & ~(v2 >> 63), 0);
  uint64_t v16 = a1;
  swift_retain();
  uint64_t result = (void *)dispatch thunk of Sequence.makeIterator()();
  if (v2 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v2)
  {
    do
    {
      uint64_t result = (void *)dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!a1) {
        goto LABEL_13;
      }
      uint64_t v4 = REMSuggestedList.listIdentifier.getter();
      uint64_t v6 = v5;
      swift_release();
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_1001DE058(v7 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      unint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      v9[5] = v6;
    }
    while (--v2);
  }
  while (1)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v16) {
      break;
    }
    uint64_t v10 = REMSuggestedList.listIdentifier.getter();
    uint64_t v12 = v11;
    swift_release();
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    unint64_t v13 = _swiftEmptyArrayStorage[3];
    if (v14 >= v13 >> 1) {
      sub_1001DE058(v13 > 1, v14 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v14 + 1;
    unint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
    v15[4] = v10;
    v15[5] = v12;
  }
  swift_release();
  return _swiftEmptyArrayStorage;
}

void *sub_100276240(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  int64_t v31 = a1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100910990);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v30 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100916EE0);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v35 = _swiftEmptyArrayStorage;
  sub_1000967F4(&qword_100911F50, (uint64_t *)&unk_100910990);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v12 = &v10[*(int *)(v8 + 44)];
  sub_1000967F4(&qword_100916EF0, (uint64_t *)&unk_100910990);
  int v32 = v12;
  uint64_t v13 = *(void *)v12;
  dispatch thunk of Collection.endIndex.getter();
  if (v13 == v33[0])
  {
LABEL_2:
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100916EE0);
  }
  else
  {
    unint64_t v28 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v29 = a2;
    unint64_t v27 = (void (**)(char *, uint64_t))(v5 + 8);
    while (1)
    {
      uint64_t v16 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v17 = (uint64_t)v10;
      uint64_t v19 = *v18;
      v16(v33, 0);
      uint64_t v20 = v30;
      uint64_t v21 = (char *)v17;
      (*v28)(v30, v17, v4);
      dispatch thunk of Collection.formIndex(after:)();
      (*v27)(v20, v4);
      uint64_t v34 = v19;
      char v22 = v31(&v34);
      if (v2) {
        break;
      }
      if (v22)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1001DE694(0, v11[2] + 1, 1);
        }
        uint64_t v11 = v35;
        unint64_t v24 = v35[2];
        unint64_t v23 = v35[3];
        unint64_t v14 = v32;
        if (v24 >= v23 >> 1)
        {
          sub_1001DE694(v23 > 1, v24 + 1, 1);
          unint64_t v14 = v32;
          uint64_t v11 = v35;
        }
        void v11[2] = v24 + 1;
        v11[v24 + 4] = v19;
      }
      else
      {
        unint64_t v14 = v32;
      }
      uint64_t v15 = *(void *)v14;
      uint64_t v10 = v21;
      dispatch thunk of Collection.endIndex.getter();
      if (v15 == v33[0]) {
        goto LABEL_2;
      }
    }
    sub_1000966BC(v17, (uint64_t *)&unk_100916EE0);
    swift_release();
  }
  return v11;
}

void sub_10027659C(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  int64_t v6 = 0;
  void v20[2] = _swiftEmptyArrayStorage;
  uint64_t v7 = *(void *)(a3 + 64);
  uint64_t v18 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v19 = (unint64_t)(v8 + 63) >> 6;
  if ((v9 & v7) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v6++, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v6 >= v19) {
    goto LABEL_29;
  }
  unint64_t v14 = *(void *)(v18 + 8 * v6);
  if (v14) {
    goto LABEL_19;
  }
  int64_t v15 = v6 + 1;
  if (v6 + 1 >= v19)
  {
LABEL_29:
    swift_release();
    return;
  }
  unint64_t v14 = *(void *)(v18 + 8 * v15);
  if (!v14)
  {
    int64_t v15 = v6 + 2;
    if (v6 + 2 >= v19) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v18 + 8 * v15);
    if (!v14)
    {
      int64_t v15 = v6 + 3;
      if (v6 + 3 >= v19) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v18 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v6 + 4;
        if (v6 + 4 < v19)
        {
          unint64_t v14 = *(void *)(v18 + 8 * v15);
          if (v14) {
            goto LABEL_18;
          }
          while (1)
          {
            int64_t v6 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              break;
            }
            if (v6 >= v19) {
              goto LABEL_29;
            }
            unint64_t v14 = *(void *)(v18 + 8 * v6);
            ++v15;
            if (v14) {
              goto LABEL_19;
            }
          }
LABEL_31:
          __break(1u);
          return;
        }
        goto LABEL_29;
      }
    }
  }
LABEL_18:
  int64_t v6 = v15;
LABEL_19:
  unint64_t v10 = (v14 - 1) & v14;
  for (unint64_t i = __clz(__rbit64(v14)) + (v6 << 6); ; unint64_t i = v11 | (v6 << 6))
  {
    v20[0] = *(id *)(*(void *)(a3 + 56) + 8 * i);
    id v16 = v20[0];
    char v17 = a1(v20);
    if (v3) {
      break;
    }
    if (v17)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (!v10) {
        goto LABEL_7;
      }
    }
    else
    {

      if (!v10) {
        goto LABEL_7;
      }
    }
LABEL_6:
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
  }
  swift_release();

  swift_release();
}

void sub_1002767D0(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  v24[7] = _swiftEmptyArrayStorage;
  if ((a3 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    sub_100287740();
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v24[1];
    uint64_t v22 = v24[2];
    uint64_t v6 = v24[3];
    int64_t v7 = v24[4];
    unint64_t v8 = v24[5];
  }
  else
  {
    int64_t v7 = 0;
    uint64_t v9 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v22 = a3 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a3 + 56);
    uint64_t v6 = v10;
  }
  int64_t v21 = (unint64_t)(v6 + 64) >> 6;
  while (v4 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_38;
    }
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v16 = v23;
    swift_unknownObjectRelease();
    int64_t v15 = v7;
    uint64_t v13 = v8;
    if (!v23) {
      goto LABEL_38;
    }
LABEL_28:
    v24[0] = v16;
    char v19 = a1(v24);
    if (v3)
    {

      sub_1000C1AF8();
      swift_release();
      return;
    }
    if (v19)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
    int64_t v7 = v15;
    unint64_t v8 = v13;
  }
  if (v8)
  {
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
    int64_t v15 = v7;
LABEL_27:
    id v16 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    if (!v16) {
      goto LABEL_38;
    }
    goto LABEL_28;
  }
  int64_t v15 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v15 >= v21) {
      goto LABEL_38;
    }
    unint64_t v17 = *(void *)(v22 + 8 * v15);
    if (!v17)
    {
      int64_t v18 = v7 + 2;
      if (v7 + 2 >= v21) {
        goto LABEL_38;
      }
      unint64_t v17 = *(void *)(v22 + 8 * v18);
      if (v17) {
        goto LABEL_25;
      }
      int64_t v18 = v7 + 3;
      if (v7 + 3 >= v21) {
        goto LABEL_38;
      }
      unint64_t v17 = *(void *)(v22 + 8 * v18);
      if (v17) {
        goto LABEL_25;
      }
      int64_t v18 = v7 + 4;
      if (v7 + 4 >= v21) {
        goto LABEL_38;
      }
      unint64_t v17 = *(void *)(v22 + 8 * v18);
      if (v17)
      {
LABEL_25:
        int64_t v15 = v18;
      }
      else
      {
        int64_t v15 = v7 + 5;
        if (v7 + 5 >= v21) {
          goto LABEL_38;
        }
        unint64_t v17 = *(void *)(v22 + 8 * v15);
        if (!v17)
        {
          int64_t v20 = v7 + 6;
          while (v21 != v20)
          {
            unint64_t v17 = *(void *)(v22 + 8 * v20++);
            if (v17)
            {
              int64_t v15 = v20 - 1;
              goto LABEL_26;
            }
          }
LABEL_38:
          sub_1000C1AF8();
          return;
        }
      }
    }
LABEL_26:
    uint64_t v13 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v15 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t sub_100276B14()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100911D60);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100911D60);
  if (qword_1009077E8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942400);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Int sub_100276BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    Hasher._combine(_:)(0);
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_100276CB0()
{
  return sub_100276BDC(*v0, v0[1], v0[2], v0[3]);
}

void sub_100276CBC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (!*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(0);
    if (v1) {
      goto LABEL_3;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v1) {
    goto LABEL_7;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  swift_bridgeObjectRelease();
}

Swift::Int sub_100276D94()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  if (!v1)
  {
    Hasher._combine(_:)(0);
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100276E5C(uint64_t *a1, uint64_t *a2)
{
  return sub_100281610(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_100276E78@<X0>(char *a1@<X0>, void *a2@<X1>, void (*a3)(char *, uint64_t, uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v333 = (void (*)(char *, uint64_t, uint64_t))a3;
  id v334 = a2;
  v351 = a1;
  uint64_t v305 = a5;
  uint64_t v306 = sub_100094134(&qword_100911E70);
  uint64_t v295 = *(void *)(v306 - 8);
  __chkstk_darwin(v306);
  uint64_t v287 = (char *)v281 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v288 = (uint64_t)v281 - v9;
  uint64_t v303 = sub_100094134(&qword_100911E78);
  __chkstk_darwin(v303);
  v302 = (void *)((char *)v281 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_100094134(&qword_100911E80);
  __chkstk_darwin(v11 - 8);
  v304 = (char *)v281 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134(&qword_100911E88);
  __chkstk_darwin(v13 - 8);
  v307 = (char *)v281 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134(&qword_100911E90);
  __chkstk_darwin(v15 - 8);
  v309 = (char *)v281 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100094134(&qword_100911E98);
  __chkstk_darwin(v17 - 8);
  v308 = (char *)v281 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v312 = sub_100094134(&qword_100911EA0);
  __chkstk_darwin(v312);
  uint64_t v296 = (uint64_t)v281 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v301 = (uint64_t)v281 - v21;
  __chkstk_darwin(v22);
  uint64_t v313 = (uint64_t)v281 - v23;
  uint64_t v24 = sub_100094134(&qword_100911EA8);
  __chkstk_darwin(v24 - 8);
  v294 = (char *)v281 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v311 = sub_100094134(&qword_100911EB0);
  __chkstk_darwin(v311);
  v297 = (void *)((char *)v281 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v27);
  uint64_t v29 = (void *)((char *)v281 - v28);
  __chkstk_darwin(v30);
  v300 = (char *)v281 - v31;
  __chkstk_darwin(v32);
  uint64_t v321 = (uint64_t)v281 - v33;
  uint64_t v310 = sub_100094134(&qword_100911EB8);
  __chkstk_darwin(v310);
  v298 = (char *)v281 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v299 = (uint64_t)v281 - v36;
  __chkstk_darwin(v37);
  uint64_t v320 = (uint64_t)v281 - v38;
  unint64_t v39 = type metadata accessor for REMTitleEmbeddingConfig();
  uint64_t v290 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  int v289 = (char *)v281 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v318 = sub_100094134((uint64_t *)&unk_100910990);
  uint64_t v317 = *(void *)(v318 - 8);
  __chkstk_darwin(v318);
  BOOL v286 = (char *)v281 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v316 = (char *)v281 - v43;
  uint64_t v322 = sub_100094134(&qword_100911EC0);
  __chkstk_darwin(v322);
  v331 = (char *)v281 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v319 = (void *)((char *)v281 - v46);
  __chkstk_darwin(v47);
  uint64_t v326 = (uint64_t)v281 - v48;
  uint64_t v49 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v49 - 8);
  uint64_t v291 = (uint64_t)v281 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  uint64_t v327 = (uint64_t)v281 - v52;
  uint64_t v315 = type metadata accessor for REMSuggestedAttributeInputDataFrame();
  uint64_t v314 = *(void *)(v315 - 8);
  __chkstk_darwin(v315);
  v328 = (char *)v281 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v325 = sub_100094134(&qword_100911EC8);
  uint64_t v324 = *(void *)(v325 - 8);
  __chkstk_darwin(v325);
  v323 = (char *)v281 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v329 = type metadata accessor for URL();
  uint64_t v330 = *(void *)(v329 - 8);
  __chkstk_darwin(v329);
  char v285 = (char *)v281 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  v284 = (char *)v281 - v57;
  __chkstk_darwin(v58);
  v337 = (char *)v281 - v59;
  uint64_t v332 = type metadata accessor for TrainingContext();
  __chkstk_darwin(v332);
  unint64_t v341 = (unint64_t)v281 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v61 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters();
  v340 = *(void **)(v61 - 8);
  __chkstk_darwin(v61);
  v339 = (char *)v281 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v342 = sub_100094134(&qword_100911ED0);
  uint64_t v63 = *(void *)(v342 - 8);
  __chkstk_darwin(v342);
  v335 = (char *)v281 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  v344 = (char *)v281 - v66;
  unint64_t v67 = sub_100094134((uint64_t *)&unk_100914910);
  *(void *)&long long v343 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  v336 = (char *)v281 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v69);
  v338 = (char *)v281 - v70;
  __chkstk_darwin(v71);
  uint64_t v73 = (uint64_t)v281 - v72;
  __chkstk_darwin(v74);
  uint64_t v76 = (uint64_t)v281 - v75;
  uint64_t v77 = type metadata accessor for Date();
  uint64_t v78 = *(void *)(v77 - 8);
  uint64_t v347 = v77;
  uint64_t v348 = v78;
  __chkstk_darwin(v77);
  v293 = (char *)v281 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v80);
  v346 = (char *)v281 - v81;
  Date.init()();
  v350 = (uint8_t *)a4;
  char v82 = REMSuggestedAttributesTrainer.Parameters.allowLocalOverrides.getter();
  v292 = v29;
  if (v82)
  {
    unint64_t v283 = v39;
    uint64_t v282 = v63;
    id v83 = (void *)(*(uint64_t (**)(void))&v351[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource
                                            + 16])();
    sub_100281434(&qword_100911F08, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesTrainer.Parameters);
    uint64_t v84 = v83;
    Partial<A>.init(dictionary:)();
    if (!v5)
    {
      uint64_t v85 = (uint64_t)v351;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(v343 + 16))(v73, v76, v67);
      uint64_t v86 = sub_10030B318(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
      unint64_t v88 = *(void *)(v86 + 16);
      unint64_t v87 = *(void *)(v86 + 24);
      unint64_t v89 = v86;
      unint64_t v39 = v88 + 1;
      uint64_t v345 = 0;
      if (v88 >= v87 >> 1) {
        goto LABEL_171;
      }
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  uint64_t v85 = (uint64_t)v351;
  uint64_t v76 = v63;
  v349 = _swiftEmptyArrayStorage;
  uint64_t v91 = v5;
  while (1)
  {
    if (REMSuggestedAttributesTrainer.Parameters.allowCloudOverrides.getter())
    {
      id v92 = (void *)(*(uint64_t (**)(void))(v85
                                         + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource))();
      sub_100281434(&qword_100911F08, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesTrainer.Parameters);
      uint64_t v84 = v92;
      id v93 = v338;
      Partial<A>.init(dictionary:)();
      if (!v91)
      {
        (*(void (**)(char *, char *, unint64_t))(v343 + 16))(v336, v93, v67);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_174;
        }
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
LABEL_9:

      return (*(uint64_t (**)(char *, uint64_t))(v348 + 8))(v346, v347);
    }
    uint64_t v73 = (uint64_t)v344;
    id v95 = v340;
LABEL_15:
    ((void (*)(char *, uint8_t *, unint64_t))v95[2])(v339, v350, v61);
    swift_bridgeObjectRetain();
    PartialOverride.init(full:partials:)();
    swift_getKeyPath();
    uint64_t v85 = v342;
    PartialOverride.subscript.getter();
    swift_release();
    if (LOBYTE(v353[0]) != 1)
    {
      swift_bridgeObjectRelease();
      if (qword_100907208 != -1) {
        swift_once();
      }
      uint64_t v116 = type metadata accessor for Logger();
      sub_10008E2DC(v116, (uint64_t)qword_100911D60);
      NSString v117 = Logger.logObject.getter();
      os_log_type_t v118 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v117, v118))
      {
        id v119 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v119 = 0;
        _os_log_impl((void *)&_mh_execute_header, v117, v118, "SuggestedAttributes Training is enabled on iOS: NO", v119, 2u);
        swift_slowDealloc();
      }

      sub_100286860();
      swift_allocError();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v348 + 8))(v346, v347);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 8))(v73, v85);
    }
    if (qword_100907208 != -1) {
LABEL_167:
    }
      swift_once();
    uint64_t v345 = v91;
    unint64_t v283 = v39;
    uint64_t v100 = type metadata accessor for Logger();
    v281[1] = sub_10008E2DC(v100, (uint64_t)qword_100911D60);
    id v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v101, v102))
    {
      Class v103 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v103 = 0;
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "SuggestedAttributes Training is enabled on iOS: NO", v103, 2u);
      swift_slowDealloc();
    }

    Class v104 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
    id v105 = v335;
    v104(v335, v73, v85);
    swift_getKeyPath();
    NSString v106 = v333;
    id v107 = (uint8_t *)v334;
    PartialOverride.subscript.getter();
    swift_release();
    type metadata accessor for MersenneTwister();
    swift_allocObject();
    uint64_t v108 = MersenneTwister.init(seed:)();
    uint64_t v109 = v332;
    unint64_t v110 = v341;
    *(void *)(v341 + *(int *)(v332 + 28)) = v108;
    (*(void (**)(unint64_t, char *, uint64_t))(v76 + 32))(v110, v105, v85);
    uint64_t v111 = *(int *)(v109 + 20);
    v351 = v106;
    *(void *)(v110 + v111) = v106;
    uint64_t v112 = v107;
    *(void *)(v110 + *(int *)(v109 + 24)) = v107;
    uint64_t v332 = v76 + 16;
    v333 = v104;
    v104(v105, v110, v85);
    swift_getKeyPath();
    PartialOverride.subscript.getter();
    swift_release();
    NSString v114 = *(char **)(v76 + 8);
    uint64_t v113 = v76 + 8;
    v336 = v114;
    ((void (*)(char *, uint64_t))v114)(v105, v85);
    LODWORD(v110) = LOBYTE(v353[0]);
    sub_1000963CC(0, (unint64_t *)&qword_10090F3A0);
    uint64_t v115 = v345;
    if (v110 == 1) {
      static REMPaths.writableURLForMLModel()();
    }
    else {
      static REMPaths.temporaryURLForMLModel()();
    }
    uint64_t v91 = v115;
    if (v115)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v348 + 8))(v346, v347);
      sub_100286910(v341, (uint64_t (*)(void))type metadata accessor for TrainingContext);
      uint64_t v120 = v344;
      return ((uint64_t (*)(char *, uint64_t))v336)(v120, v85);
    }
    swift_getKeyPath();
    PartialOverride.subscript.getter();
    swift_release();
    unint64_t v61 = (unint64_t)sub_10028658C(v353[0], v112);
    uint64_t v73 = v113;
    swift_bridgeObjectRetain_n();
    id v121 = Logger.logObject.getter();
    os_log_type_t v122 = static os_log_type_t.default.getter();
    BOOL v123 = os_log_type_enabled(v121, v122);
    v281[0] = v61 >> 62;
    if (v123)
    {
      Class v124 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)Class v124 = 134217984;
      if (v61 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v125 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v125 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v353[0] = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "Done fetching reminder data source array for training. %ld distinct reminders fetched", v124, 0xCu);
      swift_slowDealloc();

      uint64_t v85 = v342;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (v281[0])
    {
LABEL_179:
      swift_bridgeObjectRetain();
      uint64_t v126 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v126 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_getKeyPath();
    id v127 = v344;
    PartialOverride.subscript.getter();
    swift_release();
    if (v126 < v353[0])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1002870C4();
      swift_allocError();
      *uint64_t v128 = v126;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v348 + 8))(v346, v347);
      (*(void (**)(unsigned char *, uint64_t))(v330 + 8))(v337, v329);
      sub_100286910(v341, (uint64_t (*)(void))type metadata accessor for TrainingContext);
      uint64_t v120 = v127;
      return ((uint64_t (*)(void, void))v336)(v120, v85);
    }
    swift_getKeyPath();
    unint64_t v39 = (unint64_t)v323;
    PartialOverride.subscript.getter();
    swift_release();
    swift_getKeyPath();
    uint64_t v129 = v325;
    PartialOverride.subscript.getter();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v324 + 8))(v39, v129);
    if (LOBYTE(v353[1]) == 1)
    {
      uint64_t v130 = v349;
    }
    else
    {
      uint64_t v130 = v349;
      if (v126 < v353[0])
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1002870C4();
        swift_allocError();
        *NSString v131 = v126;
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v348 + 8))(v346, v347);
        (*(void (**)(unsigned char *, uint64_t))(v330 + 8))(v337, v329);
        sub_100286910(v341, (uint64_t (*)(void))type metadata accessor for TrainingContext);
        uint64_t v120 = v344;
        return ((uint64_t (*)(void, void))v336)(v120, v85);
      }
    }
    swift_bridgeObjectRetain();
    REMSuggestedAttributeInputDataFrame.init(reminderDataSourceArray:)();
    v353[0] = 0;
    id v132 = [v351 fetchDefaultListWithError:v353];
    id v133 = v132;
    if (v353[0])
    {
      id v134 = (id)v353[0];

      swift_willThrow();
      uint64_t v135 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v135 - 8) + 56))(v327, 1, 1, v135);
      uint64_t v91 = 0;
    }
    else if (v132)
    {
      id v136 = [v132 objectID];

      id v137 = [v136 uuid];
      uint64_t v138 = v327;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v139 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v139 - 8) + 56))(v138, 0, 1, v139);
    }
    else
    {
      uint64_t v140 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v140 - 8) + 56))(v327, 1, 1, v140);
    }
    if (v281[0])
    {
      swift_bridgeObjectRetain_n();
      uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v76 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v282 = v73;
    v349 = v130;
    if (!v76) {
      break;
    }
    v340 = (void *)(v61 & 0xC000000000000001);
    v351 = (char *)_swiftEmptyDictionarySingleton;
    uint64_t v141 = 4;
    v339 = (char *)v61;
    v338 = (char *)v76;
    do
    {
      if (v340)
      {
        uint64_t v143 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v143 = *(void *)(v61 + 8 * v141);
        swift_retain();
      }
      uint64_t v345 = v91;
      v350 = (uint8_t *)(v141 - 3);
      if (__OFADD__(v141 - 4, 1))
      {
        __break(1u);
LABEL_166:
        __break(1u);
        goto LABEL_167;
      }
      uint64_t v91 = dispatch thunk of REMSuggestedAttributeReminderDataSource.listUUIDString.getter();
      uint64_t v85 = v144;
      *(void *)&long long v343 = v143;
      unint64_t v61 = dispatch thunk of REMSuggestedAttributeReminderDataSource.listName.getter();
      uint64_t v73 = v145;
      Class v146 = v351;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v353[0] = (uint64_t)v146;
      unint64_t v39 = sub_1001806F8(v91, v85);
      uint64_t v149 = *((void *)v146 + 2);
      BOOL v150 = (v148 & 1) == 0;
      uint64_t v151 = v149 + v150;
      if (__OFADD__(v149, v150)) {
        goto LABEL_166;
      }
      char v152 = v148;
      if (*((void *)v146 + 3) >= v151)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100318A14();
        }
      }
      else
      {
        sub_10030E654(v151, isUniquelyReferenced_nonNull_native);
        unint64_t v153 = sub_1001806F8(v91, v85);
        if ((v152 & 1) != (v154 & 1))
        {
LABEL_184:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v39 = v153;
      }
      NSString v155 = (void *)v353[0];
      v351 = (char *)v353[0];
      if (v152)
      {
        Class v142 = (unint64_t *)(*(void *)(v353[0] + 56) + 16 * v39);
        swift_bridgeObjectRelease();
        *Class v142 = v61;
        v142[1] = v73;
      }
      else
      {
        *(void *)(v353[0] + 8 * (v39 >> 6) + 64) |= 1 << v39;
        uint64_t v156 = (uint64_t *)(v155[6] + 16 * v39);
        *uint64_t v156 = v91;
        v156[1] = v85;
        uint64_t v157 = (unint64_t *)(v155[7] + 16 * v39);
        unint64_t *v157 = v61;
        v157[1] = v73;
        uint64_t v158 = v155[2];
        BOOL v159 = __OFADD__(v158, 1);
        uint64_t v160 = v158 + 1;
        if (v159)
        {
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
          goto LABEL_179;
        }
        v155[2] = v160;
        swift_bridgeObjectRetain();
      }
      uint64_t v91 = v345;
      unint64_t v61 = (unint64_t)v339;
      uint64_t v76 = (uint64_t)v338;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v141;
    }
    while (v350 != (uint8_t *)v76);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v88 = (unint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v161 = 4;
    while (2)
    {
      unint64_t v67 = v161 - 4;
      v350 = (uint8_t *)v161;
      if (v340)
      {
        uint64_t v84 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v84 = *(void *)(v61 + 8 * v161);
        swift_retain();
      }
      uint64_t v345 = v91;
      unint64_t v87 = v67 + 1;
      *(void *)&long long v343 = v67 + 1;
      if (!__OFADD__(v67, 1))
      {
        dispatch thunk of REMSuggestedAttributeReminderDataSource.title.getter();
        String.index(_:offsetBy:limitedBy:)();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v76 = static String._fromSubstring(_:)();
        uint64_t v73 = v163;
        swift_bridgeObjectRelease();
        id v334 = (id)v84;
        uint64_t v91 = dispatch thunk of REMSuggestedAttributeReminderDataSource.listUUIDString.getter();
        unint64_t v61 = v164;
        uint64_t v85 = swift_isUniquelyReferenced_nonNull_native();
        v353[0] = v88;
        uint64_t v84 = v88;
        unint64_t v67 = sub_1001806F8(v76, v73);
        unint64_t v87 = *(void *)(v88 + 16);
        BOOL v166 = (v165 & 1) == 0;
        uint64_t v167 = v87 + v166;
        if (__OFADD__(v87, v166)) {
          goto LABEL_169;
        }
        unint64_t v39 = v165;
        if (*(void *)(v88 + 24) >= v167)
        {
          if (v85)
          {
            unint64_t v88 = v353[0];
            if ((v165 & 1) == 0) {
              goto LABEL_83;
            }
          }
          else
          {
            sub_100318A14();
            unint64_t v88 = v353[0];
            if ((v39 & 1) == 0) {
              goto LABEL_83;
            }
          }
        }
        else
        {
          sub_10030E654(v167, v85);
          unint64_t v168 = sub_1001806F8(v76, v73);
          if ((v39 & 1) != (v169 & 1)) {
            goto LABEL_184;
          }
          unint64_t v67 = v168;
          unint64_t v88 = v353[0];
          if ((v39 & 1) == 0)
          {
LABEL_83:
            *(void *)(v88 + 8 * (v67 >> 6) + 64) |= 1 << v67;
            uint64_t v170 = (uint64_t *)(*(void *)(v88 + 48) + 16 * v67);
            *uint64_t v170 = v76;
            v170[1] = v73;
            uint64_t v171 = (uint64_t *)(*(void *)(v88 + 56) + 16 * v67);
            uint64_t *v171 = v91;
            v171[1] = v61;
            uint64_t v172 = *(void *)(v88 + 16);
            BOOL v159 = __OFADD__(v172, 1);
            uint64_t v173 = v172 + 1;
            if (v159) {
              goto LABEL_176;
            }
            *(void *)(v88 + 16) = v173;
            swift_bridgeObjectRetain();
            goto LABEL_71;
          }
        }
        NSString v162 = (uint64_t *)(*(void *)(v88 + 56) + 16 * v67);
        swift_bridgeObjectRelease();
        *NSString v162 = v91;
        v162[1] = v61;
LABEL_71:
        uint64_t v91 = v345;
        unint64_t v67 = (unint64_t)v331;
        unint64_t v61 = (unint64_t)v339;
        uint64_t v76 = (uint64_t)v338;
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v161 = (uint64_t)(v350 + 1);
        if ((void)v343 == v76) {
          goto LABEL_88;
        }
        continue;
      }
      break;
    }
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    unint64_t v89 = sub_10030B318(v87 > 1, v39, 1, v89);
LABEL_4:
    v349 = (void *)v89;
    *(void *)(v89 + 16) = v39;
    uint64_t v90 = v343;
    (*(void (**)(unint64_t, uint64_t, unint64_t))(v343 + 32))(v89+ ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80))+ *(void *)(v90 + 72) * v88, v73, v67);

    (*(void (**)(uint64_t, unint64_t))(v90 + 8))(v76, v67);
    uint64_t v76 = v282;
    uint64_t v91 = v345;
    unint64_t v39 = v283;
  }
  unint64_t v88 = (unint64_t)_swiftEmptyDictionarySingleton;
  v351 = (char *)_swiftEmptyDictionarySingleton;
  unint64_t v67 = (unint64_t)v331;
LABEL_88:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10027A348(v341, (unsigned char *)v88, v337, v67);
  swift_bridgeObjectRelease();
  if (v91)
  {
    NSString v174 = v319;
    uint64_t *v319 = v91;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    NSString v174 = v319;
    sub_100096408(v67, (uint64_t)v319, &qword_100911EC0);
  }
  uint64_t v85 = v281[0];
  sub_100096408((uint64_t)v174, v326, &qword_100911EC0);
  swift_bridgeObjectRelease();
  if (v76 < 0)
  {
    uint64_t v175 = 100;
    if (!v85)
    {
LABEL_96:
      uint64_t v84 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_100:
      if (v84 < v175) {
        goto LABEL_182;
      }
      if ((v61 & 0xC000000000000001) != 0 && v175)
      {
        uint64_t v84 = type metadata accessor for REMSuggestedAttributeReminderDataSource();
        Swift::Int v176 = 0;
        do
        {
          unint64_t v67 = v176 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v176);
          Swift::Int v176 = v67;
        }
        while (v175 != v67);
      }
      v340 = 0;
      if (v85)
      {
        swift_bridgeObjectRetain();
        v338 = (char *)_CocoaArrayWrapper.subscript.getter();
        uint64_t v345 = v178;
        uint64_t v85 = v179;
        unint64_t v177 = v180;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v338 = (char *)(v61 & 0xFFFFFFFFFFFFFF8);
        uint64_t v345 = (v61 & 0xFFFFFFFFFFFFFF8) + 32;
        unint64_t v177 = (2 * v175) | 1;
      }
      uint64_t v181 = v177 >> 1;
      uint64_t v73 = (uint64_t)_swiftEmptyDictionarySingleton;
      if (v85 == v181)
      {
        unint64_t v61 = (unint64_t)_swiftEmptyDictionarySingleton;
LABEL_110:
        swift_unknownObjectRelease();
        uint64_t v182 = v316;
        uint64_t v183 = v328;
        uint64_t v184 = REMSuggestedAttributeInputDataFrame.index.getter();
        unint64_t v88 = (unint64_t)v281;
        __chkstk_darwin(v184);
        v281[-2] = v183;
        NSString v185 = (char *)v340;
        Class v186 = sub_1003B3EC8((void (*)(uint64_t *__return_ptr, uint64_t *))sub_100286A20, (uint64_t)&v281[-4]);
        v338 = v185;
        (*(void (**)(char *, uint64_t))(v317 + 8))(v182, v318);
        v353[0] = (uint64_t)_swiftEmptyDictionarySingleton;
        unint64_t v67 = v186[2];
        v339 = (char *)v61;
        id v334 = v186;
        if (v67)
        {
          uint64_t v85 = (uint64_t)(v186 + 7);
          long long v343 = xmmword_100776E40;
          do
          {
            unint64_t v61 = *(void *)(v85 - 24);
            unint64_t v39 = *(void *)(v85 - 16);
            uint64_t v76 = *(void *)(v85 - 8);
            uint64_t v91 = *(void *)v85;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            uint64_t v84 = sub_1001806F8(v76, v91);
            unint64_t v87 = *(void *)(v73 + 16);
            BOOL v189 = (v188 & 1) == 0;
            uint64_t v190 = v87 + v189;
            if (__OFADD__(v87, v189)) {
              goto LABEL_170;
            }
            unint64_t v88 = v188;
            if (*(void *)(v73 + 24) < v190)
            {
              sub_10030FF24(v190, 1);
              uint64_t v73 = v353[0];
              unint64_t v191 = sub_1001806F8(v76, v91);
              if ((v88 & 1) != (v192 & 1)) {
                goto LABEL_184;
              }
              uint64_t v84 = v191;
            }
            if (v88)
            {
              uint64_t v345 = v61;
              swift_bridgeObjectRelease();
              v350 = (uint8_t *)v73;
              uint64_t v193 = *(void **)(v73 + 56);
              unint64_t v88 = v193[v84];
              char v194 = swift_isUniquelyReferenced_nonNull_native();
              v340 = v193;
              v193[v84] = v88;
              if ((v194 & 1) == 0)
              {
                unint64_t v88 = (unint64_t)sub_100309784(0, *(void *)(v88 + 16) + 1, 1, (void *)v88);
                v340[v84] = v88;
              }
              unint64_t v196 = *(void *)(v88 + 16);
              unint64_t v195 = *(void *)(v88 + 24);
              char v197 = (char *)(v196 + 1);
              uint64_t v198 = v345;
              if (v196 >= v195 >> 1)
              {
                v331 = (char *)(v196 + 1);
                uint64_t v199 = sub_100309784((void *)(v195 > 1), v196 + 1, 1, (void *)v88);
                char v197 = v331;
                unint64_t v88 = (unint64_t)v199;
                v340[v84] = v199;
              }
              *(void *)(v88 + 16) = v197;
              uint64_t v187 = (void *)(v88 + 32 * v196);
              v187[4] = v198;
              v187[5] = v39;
              v187[6] = v76;
              v187[7] = v91;
              uint64_t v73 = (uint64_t)v350;
            }
            else
            {
              sub_100094134(&qword_100911EE0);
              uint64_t v200 = swift_allocObject();
              *(_OWORD *)(v200 + 16) = v343;
              *(void *)(v200 + 32) = v61;
              *(void *)(v200 + 40) = v39;
              *(void *)(v200 + 48) = v76;
              *(void *)(v200 + 56) = v91;
              *(void *)(v73 + 8 * ((unint64_t)v84 >> 6) + 64) |= 1 << v84;
              NSString v201 = (uint64_t *)(*(void *)(v73 + 48) + 16 * v84);
              *NSString v201 = v76;
              v201[1] = v91;
              *(void *)(*(void *)(v73 + 56) + 8 * v84) = v200;
              uint64_t v202 = *(void *)(v73 + 16);
              BOOL v159 = __OFADD__(v202, 1);
              uint64_t v203 = v202 + 1;
              if (v159) {
                goto LABEL_177;
              }
              *(void *)(v73 + 16) = v203;
            }
            v85 += 32;
          }
          while (--v67);
        }
        swift_bridgeObjectRelease();
        uint64_t v204 = (uint64_t)v338;
        sub_100275A88(v73);
        uint64_t v205 = v204;
        swift_release();
        swift_bridgeObjectRetain_n();
        id v206 = Logger.logObject.getter();
        os_log_type_t v207 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v206, v207))
        {
          v350 = (uint8_t *)v204;
          uint64_t v208 = (uint8_t *)swift_slowAlloc();
          v353[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v208 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v209 = Array.description.getter();
          unint64_t v211 = v210;
          swift_bridgeObjectRelease();
          uint64_t v352 = sub_1000C51B8(v209, v211, v353);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          uint64_t v205 = (uint64_t)v350;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v206, v207, "Training REMFilteredTitleEmbedding with %s", v208, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        long long v228 = v344;
        uint64_t v229 = v329;
        unint64_t v230 = v283;
        uint64_t v231 = type metadata accessor for REMFilteredTitleEmbedding();
        swift_allocObject();
        uint64_t v232 = REMFilteredTitleEmbedding.init(from:stopWordThresholdByPercent:)();
        if (v205)
        {
          sub_1000966BC(v326, &qword_100911EC0);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v348 + 8))(v346, v347);
          sub_1000966BC(v327, (uint64_t *)&unk_100909E50);
          (*(void (**)(char *, uint64_t))(v314 + 8))(v328, v315);
          (*(void (**)(unsigned char *, uint64_t))(v330 + 8))(v337, v229);
          sub_100286910(v341, (uint64_t (*)(void))type metadata accessor for TrainingContext);
          ((void (*)(char *, uint64_t))v336)(v228, v342);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        uint64_t v233 = v289;
        *(void *)&long long v343 = v232;
        REMFilteredTitleEmbedding.config()();
        uint64_t v234 = v337;
        char v235 = REMTitleEmbeddingConfig.saveConfig(to:)();
        (*(void (**)(char *, unint64_t))(v290 + 8))(v233, v230);
        unsigned int v236 = *(void (**)(char *, unsigned char *, uint64_t))(v330 + 16);
        if (v235)
        {
          unsigned int v237 = v284;
          v236(v284, v234, v229);
          int v238 = Logger.logObject.getter();
          os_log_type_t v239 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v238, v239))
          {
            unsigned int v240 = (uint8_t *)swift_slowAlloc();
            v353[0] = swift_slowAlloc();
            *(_DWORD *)unsigned int v240 = 136315138;
            v350 = v240 + 4;
            uint64_t v241 = URL.absoluteString.getter();
            uint64_t v352 = sub_1000C51B8(v241, v242, v353);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v340 = *(void **)(v330 + 8);
            ((void (*)(char *, uint64_t))v340)(v237, v329);
            unint64_t v243 = "embedding config file saved to %s";
            goto LABEL_150;
          }
LABEL_151:
          v340 = *(void **)(v330 + 8);
          ((void (*)(char *, uint64_t))v340)(v237, v229);
        }
        else
        {
          unsigned int v237 = v285;
          v236(v285, v234, v229);
          int v238 = Logger.logObject.getter();
          os_log_type_t v239 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v238, v239)) {
            goto LABEL_151;
          }
          unsigned int v240 = (uint8_t *)swift_slowAlloc();
          v353[0] = swift_slowAlloc();
          *(_DWORD *)unsigned int v240 = 136315138;
          v350 = v240 + 4;
          uint64_t v244 = URL.absoluteString.getter();
          uint64_t v352 = sub_1000C51B8(v244, v245, v353);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v340 = *(void **)(v330 + 8);
          ((void (*)(char *, uint64_t))v340)(v237, v329);
          unint64_t v243 = "failed saving embedding config file to %s";
LABEL_150:
          _os_log_impl((void *)&_mh_execute_header, v238, v239, v243, v240, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v246 = (uint64_t)v298;
        int v247 = (uint64_t *)v343;
        REMSuggestedAttributeInputDataFrame.title.getter();
        swift_retain();
        sub_100286A3C();
        swift_release();
        swift_release();
        v353[0] = REMFilteredTitleEmbedding.vector(for:)();
        sub_100094134(&qword_100911EE8);
        swift_allocObject();
        v350 = (uint8_t *)Series.init(_:defaultValue:)();
        v353[3] = v231;
        v353[4] = (uint64_t)&protocol witness table for REMFilteredTitleEmbedding;
        v353[0] = (uint64_t)v247;
        uint64_t v248 = v291;
        sub_1000BF710(v327, v291, (uint64_t *)&unk_100909E50);
        uint64_t v249 = type metadata accessor for UUID();
        uint64_t v250 = *(void *)(v249 - 8);
        int v251 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v250 + 48))(v248, 1, v249);
        swift_retain();
        if (v251 == 1)
        {
          sub_1000966BC(v248, (uint64_t *)&unk_100909E50);
        }
        else
        {
          UUID.uuidString.getter();
          (*(void (**)(uint64_t, uint64_t))(v250 + 8))(v248, v249);
        }
        uint64_t v252 = v306;
        sub_10027B780(v341, (uint64_t)v350, (uint64_t)v328, v246);
        swift_bridgeObjectRelease();
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v353);
        swift_storeEnumTagMultiPayload();
        uint64_t v253 = v299;
        sub_100096408(v246, v299, &qword_100911EB8);
        uint64_t v254 = (uint64_t)v300;
        sub_100096408(v253, v320, &qword_100911EB8);
        id v255 = v292;
        sub_10027D498((uint64_t)v337, v341, v247, v353, v292);
        uint64_t v256 = (uint64_t)v294;
        swift_storeEnumTagMultiPayload();
        sub_100096408((uint64_t)v255, v254, &qword_100911EB0);
        sub_100096408(v254, v321, &qword_100911EB0);
        Result.valueOrNil()();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v295 + 48))(v256, 1, v252) == 1)
        {
          sub_1000966BC(v256, &qword_100911EA8);
          swift_bridgeObjectRelease();
          uint64_t v257 = 0;
        }
        else
        {
          uint64_t v258 = v256 + *(int *)(v252 + 48);
          uint64_t v259 = type metadata accessor for REMSuggestedAttributesTrainer.Result.IntentionalWord();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v259 - 8) + 8))(v258, v259);
          swift_retain();
          sub_100286E58((uint64_t)v350);
          swift_bridgeObjectRelease();
          swift_release();
          Series.index.getter();
          strcpy((char *)v353, "missing intent");
          HIBYTE(v353[1]) = -18;
          sub_100094134(&qword_100911EF8);
          swift_allocObject();
          uint64_t v257 = (void *)Series.init(_:index:defaultValue:)();
          swift_release();
        }
        uint64_t v260 = v313;
        swift_retain();
        uint64_t v261 = (uint64_t)v351;
        swift_bridgeObjectRetain();
        uint64_t v262 = v296;
        sub_10027E410(v341, v328, v257, v261, v296);
        uint64_t v345 = 0;
        swift_release();
        swift_bridgeObjectRelease();
        swift_storeEnumTagMultiPayload();
        uint64_t v263 = v301;
        sub_100096408(v262, v301, &qword_100911EA0);
        sub_100096408(v263, v260, &qword_100911EA0);
        id v264 = v335;
        uint64_t v265 = v342;
        v333(v335, v341, v342);
        swift_getKeyPath();
        PartialOverride.subscript.getter();
        swift_release();
        ((void (*)(char *, uint64_t))v336)(v264, v265);
        if (LOBYTE(v353[0]) == 1)
        {
          if (qword_1009070B0 == -1) {
            goto LABEL_160;
          }
          goto LABEL_183;
        }
        goto LABEL_161;
      }
      unint64_t v61 = (unint64_t)_swiftEmptyDictionarySingleton;
      *(void *)&long long v343 = v181;
      while (1)
      {
        if (v85 >= v181)
        {
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          v349 = (void *)sub_10030B318(0, v349[2] + 1, 1, (unint64_t)v349);
LABEL_12:
          id v95 = v340;
          unint64_t v97 = v349[2];
          unint64_t v96 = v349[3];
          if (v97 >= v96 >> 1) {
            v349 = (void *)sub_10030B318(v96 > 1, v97 + 1, 1, (unint64_t)v349);
          }
          NSString v98 = v349;
          v349[2] = v97 + 1;
          uint64_t v99 = v343;
          (*(void (**)(unint64_t, char *, unint64_t))(v343 + 32))((unint64_t)v98+ ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80))+ *(void *)(v99 + 72) * v97, v336, v67);

          (*(void (**)(char *, unint64_t))(v99 + 8))(v338, v67);
          uint64_t v73 = (uint64_t)v344;
          goto LABEL_15;
        }
        uint64_t v76 = *(void *)(v345 + 8 * v85);
        swift_retain();
        uint64_t v91 = dispatch thunk of REMSuggestedAttributeReminderDataSource.title.getter();
        unint64_t v39 = v214;
        unint64_t v67 = dispatch thunk of REMSuggestedAttributeReminderDataSource.listUUIDString.getter();
        v350 = (uint8_t *)v215;
        uint64_t v84 = v61;
        unint64_t v61 = swift_isUniquelyReferenced_nonNull_native();
        v353[0] = v84;
        unint64_t v217 = sub_1001806F8(v91, v39);
        uint64_t v218 = *(void *)(v84 + 16);
        BOOL v219 = (v216 & 1) == 0;
        uint64_t v220 = v218 + v219;
        if (__OFADD__(v218, v219)) {
          goto LABEL_173;
        }
        uint64_t v73 = v216;
        if (*(void *)(v84 + 24) >= v220)
        {
          if (v61)
          {
            unint64_t v61 = v353[0];
            if (v216) {
              goto LABEL_128;
            }
          }
          else
          {
            uint64_t v84 = (uint64_t)v353;
            sub_100318A14();
            unint64_t v61 = v353[0];
            if (v73) {
              goto LABEL_128;
            }
          }
        }
        else
        {
          sub_10030E654(v220, v61);
          uint64_t v84 = v353[0];
          unint64_t v221 = sub_1001806F8(v91, v39);
          if ((v73 & 1) != (v222 & 1)) {
            goto LABEL_184;
          }
          unint64_t v217 = v221;
          unint64_t v61 = v353[0];
          if (v73)
          {
LABEL_128:
            long long v212 = (unint64_t *)(*(void *)(v61 + 56) + 16 * v217);
            swift_bridgeObjectRelease();
            uint64_t v213 = (uint64_t)v350;
            *long long v212 = v67;
            v212[1] = v213;
            goto LABEL_129;
          }
        }
        *(void *)(v61 + 8 * (v217 >> 6) + 64) |= 1 << v217;
        unsigned int v223 = (uint64_t *)(*(void *)(v61 + 48) + 16 * v217);
        uint64_t *v223 = v91;
        v223[1] = v39;
        int v224 = (unint64_t *)(*(void *)(v61 + 56) + 16 * v217);
        uint64_t v225 = (uint64_t)v350;
        *int v224 = v67;
        v224[1] = v225;
        uint64_t v226 = *(void *)(v61 + 16);
        BOOL v159 = __OFADD__(v226, 1);
        uint64_t v227 = v226 + 1;
        if (v159) {
          goto LABEL_178;
        }
        *(void *)(v61 + 16) = v227;
        swift_bridgeObjectRetain();
LABEL_129:
        uint64_t v73 = (uint64_t)_swiftEmptyDictionarySingleton;
        uint64_t v181 = v343;
        ++v85;
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v181 == v85) {
          goto LABEL_110;
        }
      }
    }
  }
  else
  {
    if (v76 >= 100) {
      uint64_t v175 = 100;
    }
    else {
      uint64_t v175 = v76;
    }
    if (!v85) {
      goto LABEL_96;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((v67 & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_100;
  }
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  swift_once();
LABEL_160:
  sub_100094134(&qword_10090F368);
  sub_1000967F4(&qword_100911EF0, &qword_10090F368);
  Subject<>.send()();
LABEL_161:
  Result.eraseToCodableError()();
  Result.eraseToCodableError()();
  Result.eraseToCodableError()();
  id v266 = v297;
  sub_1000BF710(v321, (uint64_t)v297, &qword_100911EB0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v267 = *v266;
    uint64_t v268 = (uint64_t)v302;
    void *v302 = v267;
  }
  else
  {
    uint64_t v269 = v288;
    sub_100096408((uint64_t)v266, v288, &qword_100911E70);
    uint64_t v270 = *(int *)(v306 + 48);
    uint64_t v271 = &v287[v270];
    uint64_t v272 = v269 + v270;
    uint64_t v273 = type metadata accessor for REMSuggestedAttributesTrainer.Result.IntentionalWord();
    uint64_t v274 = *(void *)(v273 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v274 + 16))(v271, v272, v273);
    uint64_t v275 = v302;
    (*(void (**)(void *, char *, uint64_t))(v274 + 32))(v302, v271, v273);
    uint64_t v268 = (uint64_t)v275;
    sub_1000966BC(v269, &qword_100911E70);
  }
  swift_storeEnumTagMultiPayload();
  Result.eraseToCodableError()();
  sub_1000966BC(v268, &qword_100911E78);
  char v276 = v293;
  Date.init()();
  uint64_t v277 = v346;
  Date.timeIntervalSince(_:)();
  unsigned __int8 v278 = *(void (**)(char *, uint64_t))(v348 + 8);
  id v279 = v276;
  uint64_t v280 = v347;
  v278(v279, v347);
  REMSuggestedAttributesTrainer.Result.init(embedding:anchoredBubble:corebehavior:intentionalWord:trainingDuration:)();
  swift_release();
  swift_release();
  sub_1000966BC(v313, &qword_100911EA0);
  sub_1000966BC(v321, &qword_100911EB0);
  sub_1000966BC(v320, &qword_100911EB8);
  sub_1000966BC(v326, &qword_100911EC0);
  v278(v277, v280);
  sub_1000966BC(v327, (uint64_t *)&unk_100909E50);
  (*(void (**)(char *, uint64_t))(v314 + 8))(v328, v315);
  ((void (*)(unsigned char *, uint64_t))v340)(v337, v329);
  sub_100286910(v341, (uint64_t (*)(void))type metadata accessor for TrainingContext);
  ((void (*)(char *, uint64_t))v336)(v344, v342);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10027A348@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v109 = a3;
  id v119 = a2;
  uint64_t v103 = a4;
  uint64_t v5 = sub_100094134(&qword_100911F60);
  __chkstk_darwin(v5 - 8);
  uint64_t v108 = &v93[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v124 = type metadata accessor for REMSuggestedAttributeOutput();
  uint64_t v104 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  os_log_type_t v118 = &v93[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  NSString v117 = &v93[-v9];
  uint64_t v10 = type metadata accessor for URL();
  unint64_t v110 = *(void (***)(unsigned char *, uint64_t))(v10 - 8);
  uint64_t v111 = (void (**)(unsigned char *, uint64_t))v10;
  __chkstk_darwin(v10);
  id v101 = &v93[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v100 = &v93[-v13];
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v112 = *(void *)(v14 - 8);
  uint64_t v113 = v14;
  __chkstk_darwin(v14);
  os_log_type_t v102 = &v93[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  uint64_t v120 = &v93[-v17];
  uint64_t v18 = sub_100094134(&qword_100911F68);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v107 = &v93[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  uint64_t v23 = &v93[-v22];
  uint64_t v24 = sub_100094134(&qword_100911ED0);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  NSString v106 = &v93[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __n128 v28 = __chkstk_darwin(v27);
  uint64_t v30 = &v93[-v29];
  uint64_t v31 = *(void (***)(unsigned char *, uint64_t, uint64_t))(v25 + 16);
  unint64_t v116 = a1;
  NSString v114 = v31;
  ((void (*)(unsigned char *, unint64_t, uint64_t, __n128))v31)(&v93[-v29], a1, v24, v28);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  os_log_type_t v122 = *(NSObject **)(v25 + 8);
  ((void (*)(unsigned char *, uint64_t))v122)(v30, v24);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  uint64_t v32 = *(void (**)(unsigned char *, uint64_t))(v19 + 8);
  uint64_t v115 = v18;
  uint64_t v123 = v19 + 8;
  v32(v23, v18);
  if (v126 != 1)
  {
    sub_100286860();
    swift_allocError();
    return swift_willThrow();
  }
  Date.init()();
  unint64_t v33 = v116;
  uint64_t v99 = v25 + 16;
  uint64_t v34 = (void (*)(void, void, void))v114;
  ((void (*)(unsigned char *, unint64_t, uint64_t))v114)(v30, v116, v24);
  swift_getKeyPath();
  id v105 = v32;
  PartialOverride.subscript.getter();
  swift_release();
  uint64_t v35 = (unsigned char *)v24;
  ((void (*)(unsigned char *, uint64_t))v122)(v30, v24);
  swift_getKeyPath();
  uint64_t v36 = v115;
  PartialOverride.subscript.getter();
  swift_release();
  v105(v23, v36);
  if (v126 == 1)
  {
    unint64_t v37 = v33;
    uint64_t v38 = (uint64_t)v34;
    if (qword_100907208 == -1) {
      goto LABEL_4;
    }
    goto LABEL_81;
  }
  uint64_t v38 = (uint64_t)v111;
  if (qword_100907208 != -1) {
    swift_once();
  }
  uint64_t v51 = type metadata accessor for Logger();
  sub_10008E2DC(v51, (uint64_t)qword_100911D60);
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  BOOL v54 = os_log_type_enabled(v52, v53);
  uint64_t v35 = v119;
  uint64_t v49 = v109;
  uint64_t v48 = v110;
  uint64_t v36 = (uint64_t)v108;
  if (v54)
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "REMSuggestedAttributesTrainer: tuning anchoredBubbleModel", v55, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for REMAnchoredBubbleModel();
  uint64_t v56 = v121;
  uint64_t v57 = static REMAnchoredBubbleModel.train(titleList:distanceScale:usePCA:)();
  if (v56) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v112 + 8))(v120, v113);
  }
  uint64_t v47 = v57;
  while (2)
  {
    char v58 = dispatch thunk of REMAnchoredBubbleModel.save(path:)();
    NSString v106 = 0;
    uint64_t v123 = v47;
    if (v58)
    {
      if (qword_100907208 != -1) {
LABEL_83:
      }
        swift_once();
      uint64_t v59 = type metadata accessor for Logger();
      sub_10008E2DC(v59, (uint64_t)qword_100911D60);
      uint64_t v60 = v100;
      (*((void (**)(unsigned char *, unsigned char *, uint64_t))v48 + 2))(v100, v49, v38);
      unint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v61, v62))
      {
        os_log_type_t v122 = v61;
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v126 = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 136315138;
        uint64_t v38 = (uint64_t)(v63 + 12);
        id v121 = v63 + 4;
        uint64_t v64 = URL.absoluteString.getter();
        uint64_t v125 = sub_1000C51B8(v64, v65, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*((void (**)(unsigned char *, void))v48 + 1))(v60, v111);
        uint64_t v66 = "REMSuggestedAttributesTrainer: anchoredBubbleModel saved to %s";
LABEL_24:
        unint64_t v61 = v122;
        _os_log_impl((void *)&_mh_execute_header, v122, v62, v66, v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        goto LABEL_26;
      }
    }
    else
    {
      if (qword_100907208 != -1) {
        swift_once();
      }
      uint64_t v67 = type metadata accessor for Logger();
      sub_10008E2DC(v67, (uint64_t)qword_100911D60);
      uint64_t v60 = v101;
      (*((void (**)(unsigned char *, unsigned char *, uint64_t))v48 + 2))(v101, v49, v38);
      unint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        os_log_type_t v122 = v61;
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v126 = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 136315138;
        uint64_t v38 = (uint64_t)(v63 + 12);
        id v121 = v63 + 4;
        uint64_t v68 = URL.absoluteString.getter();
        uint64_t v125 = sub_1000C51B8(v68, v69, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*((void (**)(unsigned char *, void))v48 + 1))(v60, v111);
        uint64_t v66 = "REMSuggestedAttributesTrainer: failed to save anchoredBubbleModel to %s";
        goto LABEL_24;
      }
    }
    (*((void (**)(unsigned char *, uint64_t))v48 + 1))(v60, v38);
LABEL_26:

    uint64_t v70 = v104;
    uint64_t v71 = *((void *)v35 + 8);
    id v121 = v35 + 64;
    uint64_t v72 = 1 << v35[32];
    LODWORD(v109) = enum case for REMSuggestedAttributeOutput.list(_:);
    if (v72 < 64) {
      uint64_t v73 = ~(-1 << v72);
    }
    else {
      uint64_t v73 = -1;
    }
    unint64_t v37 = v73 & v71;
    os_log_type_t v122 = ((unint64_t)(v72 + 63) >> 6);
    uint64_t v74 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
    id v95 = v118 + 8;
    NSString v114 = (void (**)(unsigned char *, uint64_t, uint64_t))(v104 + 32);
    uint64_t v108 = (unsigned char *)(v104 + 16);
    id v107 = (unsigned char *)(v104 + 88);
    LODWORD(v105) = enum case for REMSuggestedAttributeOutput.pasteboardURL(_:);
    LODWORD(v104) = enum case for REMSuggestedAttributeOutput.recurrenceFrequency(_:);
    LODWORD(v101) = enum case for REMSuggestedAttributeOutput.location(_:);
    LODWORD(v100) = enum case for REMSuggestedAttributeOutput.dueDate(_:);
    LODWORD(v99) = enum case for REMSuggestedAttributeOutput.assignee(_:);
    int v98 = enum case for REMSuggestedAttributeOutput.flagged(_:);
    int v97 = enum case for REMSuggestedAttributeOutput.priority(_:);
    int v96 = enum case for REMSuggestedAttributeOutput.tag(_:);
    unint64_t v110 = (void (**)(unsigned char *, uint64_t))(v70 + 96);
    uint64_t v111 = (void (**)(unsigned char *, uint64_t))(v70 + 8);
    int v94 = enum case for REMSuggestedAttributeOutput.contact(_:);
    swift_bridgeObjectRetain();
    uint64_t v115 = 0;
    unint64_t v116 = 0;
    uint64_t v75 = 0;
    if (v37)
    {
LABEL_30:
      unint64_t v76 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v77 = v76 | (v75 << 6);
      goto LABEL_31;
    }
    while (1)
    {
      BOOL v80 = __OFADD__(v75++, 1);
      if (v80)
      {
        __break(1u);
        goto LABEL_79;
      }
      if (v75 >= (uint64_t)v122) {
        goto LABEL_77;
      }
      unint64_t v81 = *(void *)&v121[8 * v75];
      if (v81) {
        goto LABEL_43;
      }
      uint64_t v82 = v75 + 1;
      if (v75 + 1 >= (uint64_t)v122) {
        goto LABEL_77;
      }
      unint64_t v81 = *(void *)&v121[8 * v82];
      if (!v81)
      {
        uint64_t v82 = v75 + 2;
        if (v75 + 2 >= (uint64_t)v122) {
          goto LABEL_77;
        }
        unint64_t v81 = *(void *)&v121[8 * v82];
        if (!v81)
        {
          uint64_t v82 = v75 + 3;
          if (v75 + 3 >= (uint64_t)v122)
          {
LABEL_77:
            unint64_t v88 = v120;
            swift_release();
            unint64_t v89 = v102;
            Date.init()();
            Date.timeIntervalSince(_:)();
            uint64_t v90 = *(void (**)(unsigned char *, uint64_t))(v112 + 8);
            uint64_t v91 = v89;
            uint64_t v92 = v113;
            v90(v91, v113);
            REMSuggestedAttributesTrainer.Result.AnchoredBubble.init(precision:recall:skippedRemindersCount:trainingSetCount:validationSetCount:trainingDuration:)();
            swift_release();
            return ((uint64_t (*)(unsigned char *, uint64_t))v90)(v88, v92);
          }
          unint64_t v81 = *(void *)&v121[8 * v82];
          if (!v81) {
            break;
          }
        }
      }
      uint64_t v75 = v82;
LABEL_43:
      unint64_t v37 = (v81 - 1) & v81;
      unint64_t v77 = __clz(__rbit64(v81)) + (v75 << 6);
LABEL_31:
      uint64_t v78 = (uint64_t *)(*((void *)v35 + 7) + 16 * v77);
      uint64_t v38 = *v78;
      uint64_t v48 = (unsigned char *)v78[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      dispatch thunk of REMAnchoredBubbleModel.predict(title:)();
      swift_bridgeObjectRelease();
      uint64_t v79 = v124;
      if ((*v74)(v36, 1, v124) == 1)
      {
        swift_bridgeObjectRelease();
        sub_1000966BC(v36, &qword_100911F60);
        if (v37) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v35 = v117;
        (*v114)(v117, v36, v79);
        BOOL v80 = __OFADD__(v116++, 1);
        if (v80) {
          goto LABEL_80;
        }
        uint64_t v49 = v118;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))v108)(v118, v35, v79);
        int v83 = (*(uint64_t (**)(unsigned char *, uint64_t))v107)(v49, v79);
        if (v83 == v109)
        {
          (*v110)(v49, v79);
          sub_100094134(&qword_100911F98);
          BOOL v85 = v38 == REMSuggestedList.listIdentifier.getter() && v48 == v84;
          uint64_t v35 = v119;
          if (v85)
          {
            swift_release();
            swift_bridgeObjectRelease_n();
            (*v111)(v117, v124);
          }
          else
          {
            uint64_t v49 = v84;
            uint64_t v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            (*v111)(v117, v124);
            if ((v38 & 1) == 0)
            {
LABEL_61:
              uint64_t v38 = (uint64_t)v118;
              goto LABEL_62;
            }
          }
          BOOL v80 = __OFADD__(v115++, 1);
          if (v80)
          {
            __break(1u);
            goto LABEL_83;
          }
          goto LABEL_61;
        }
        uint64_t v35 = v119;
        if (v83 != v105 && v83 != v104)
        {
          if (v83 == v101)
          {
            (*v111)(v117, v79);
            swift_bridgeObjectRelease();
            uint64_t v38 = (uint64_t)v118;
            (*v110)(v118, v79);
            unint64_t v87 = (uint64_t *)&unk_100911F90;
          }
          else
          {
            if (v83 != v100)
            {
              if (v83 == v99)
              {
                (*v111)(v117, v79);
                swift_bridgeObjectRelease();
                uint64_t v38 = (uint64_t)v118;
                (*v110)(v118, v79);

                goto LABEL_62;
              }
              if (v83 != v98 && v83 != v97)
              {
                if (v83 == v96)
                {
                  (*v111)(v117, v79);
                  swift_bridgeObjectRelease();
                  uint64_t v38 = (uint64_t)v118;
                  (*v110)(v118, v79);
                  sub_100094134(&qword_100911F78);
                  swift_bridgeObjectRelease();
                  goto LABEL_62;
                }
                if (v83 != v94)
                {
                  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
                  __break(1u);
                  return result;
                }
                (*v111)(v117, v79);
                swift_bridgeObjectRelease();
                uint64_t v38 = (uint64_t)v118;
                (*v110)(v118, v79);
                unint64_t v87 = (uint64_t *)&unk_100911F70;
                goto LABEL_68;
              }
              goto LABEL_58;
            }
            (*v111)(v117, v79);
            swift_bridgeObjectRelease();
            uint64_t v38 = (uint64_t)v118;
            (*v110)(v118, v79);
            unint64_t v87 = (uint64_t *)&unk_100911F88;
          }
LABEL_68:
          sub_100094134(v87);
          swift_release();
          goto LABEL_62;
        }
LABEL_58:
        (*v111)(v117, v79);
        swift_bridgeObjectRelease();
        uint64_t v38 = (uint64_t)v118;
        (*v110)(v118, v79);
LABEL_62:
        uint64_t v86 = type metadata accessor for REMSuggestedAttributeOutput.Source();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v86 - 8) + 8))(v38, v86);
        if (v37) {
          goto LABEL_30;
        }
      }
    }
    while (1)
    {
      uint64_t v75 = v82 + 1;
      if (__OFADD__(v82, 1)) {
        break;
      }
      if (v75 >= (uint64_t)v122) {
        goto LABEL_77;
      }
      unint64_t v81 = *(void *)&v121[8 * v75];
      ++v82;
      if (v81) {
        goto LABEL_43;
      }
    }
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    swift_once();
LABEL_4:
    uint64_t v39 = type metadata accessor for Logger();
    sub_10008E2DC(v39, (uint64_t)qword_100911D60);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "REMSuggestedAttributesTrainer: anchoredBubbleModel using .defaultWordDistanceScale", v42, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for REMAnchoredBubbleModel();
    uint64_t v43 = v106;
    ((void (*)(unsigned char *, unint64_t, unsigned char *))v38)(v106, v37, v35);
    swift_getKeyPath();
    uint64_t v44 = v107;
    PartialOverride.subscript.getter();
    swift_release();
    ((void (*)(unsigned char *, unsigned char *))v122)(v43, v35);
    swift_getKeyPath();
    PartialOverride.subscript.getter();
    swift_release();
    v105(v44, v36);
    uint64_t v35 = v119;
    uint64_t v45 = v121;
    uint64_t v46 = static REMAnchoredBubbleModel.train(titleList:distanceScale:usePCA:)();
    if (!v45)
    {
      uint64_t v47 = v46;
      uint64_t v48 = v110;
      uint64_t v38 = (uint64_t)v111;
      uint64_t v36 = (uint64_t)v108;
      uint64_t v49 = v109;
      continue;
    }
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v112 + 8))(v120, v113);
  }
}

uint64_t sub_10027B688@<X0>(uint64_t *a1@<X8>)
{
  REMSuggestedAttributeInputDataFrame.iloc(_:)();
  REMSuggestedAttributeInput.list.getter();
  swift_release();
  char v2 = REMSuggestedList.isValid.getter();
  uint64_t result = swift_release();
  if (v2)
  {
    REMSuggestedAttributeInputDataFrame.iloc(_:)();
    uint64_t v4 = REMSuggestedAttributeInput.title.getter();
    uint64_t v6 = v5;
    swift_release();
    REMSuggestedAttributeInputDataFrame.iloc(_:)();
    REMSuggestedAttributeInput.list.getter();
    swift_release();
    uint64_t v7 = REMSuggestedList.listIdentifier.getter();
    uint64_t v9 = v8;
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v9;
  return result;
}

uint64_t sub_10027B780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v170 = a3;
  uint64_t v159 = a2;
  uint64_t v145 = a4;
  uint64_t v160 = type metadata accessor for URL();
  uint64_t v147 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v161 = (char *)v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = type metadata accessor for REMSuggestedAttributesTrainer.Result.Embedding();
  uint64_t v153 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v157 = (char *)v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = type metadata accessor for REMSuggestedAttributesAccuracy();
  uint64_t v162 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  uint64_t v156 = (char *)v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v173 = (char *)v144 - v9;
  uint64_t v181 = type metadata accessor for MultiClassificationMetric();
  uint64_t v168 = *(void *)(v181 - 8);
  __chkstk_darwin(v181);
  NSString v155 = (char *)v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v171 = (char *)v144 - v12;
  __chkstk_darwin(v13);
  NSString v185 = (char *)v144 - v14;
  uint64_t v15 = sub_100094134((uint64_t *)&unk_100910990);
  __chkstk_darwin(v15 - 8);
  uint64_t v184 = (char *)v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v187 = (char *)v144 - v18;
  uint64_t v174 = type metadata accessor for Date();
  uint64_t v164 = *(void *)(v174 - 8);
  __chkstk_darwin(v174);
  char v154 = (char *)v144 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v144 - v21;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v144 - v24;
  uint64_t v26 = sub_100094134(&qword_100911F40);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (uint64_t (**)(char *, char *, uint64_t))((char *)v144 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = sub_100094134(&qword_100911ED0);
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v183 = (char *)v144 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v34 = __chkstk_darwin(v33);
  uint64_t v36 = (char *)v144 - v35;
  unint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  uint64_t v186 = a1;
  uint64_t v178 = v31 + 16;
  Swift::Int v176 = v37;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v37)((char *)v144 - v35, a1, v30, v34);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v31 + 8);
  char v169 = v36;
  uint64_t v177 = v30;
  uint64_t v179 = v31 + 8;
  uint64_t v175 = v38;
  v38(v36, v30);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  os_log_type_t v41 = *(void (**)(uint64_t (**)(char *, char *, uint64_t), void))(v27 + 8);
  uint64_t v40 = v27 + 8;
  uint64_t v39 = v41;
  v41(v29, v26);
  if (LOBYTE(v190) != 1)
  {
    sub_100286860();
    swift_allocError();
    return swift_willThrow();
  }
  uint64_t v167 = v39;
  Class v146 = v29;
  uint64_t v165 = v40;
  BOOL v166 = (void (**)(void, void))v26;
  uint64_t KeyPath = v170;
  uint64_t v152 = REMSuggestedAttributeInputDataFrame.list.getter();
  Date.init()();
  if (qword_100907208 != -1) {
    goto LABEL_77;
  }
  while (1)
  {
    uint64_t v43 = type metadata accessor for Logger();
    uint64_t v44 = sub_10008E2DC(v43, (uint64_t)qword_100911D60);
    uint64_t v45 = v164;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v164 + 16);
    BOOL v150 = v25;
    uint64_t v47 = v174;
    v46(v22, v25, v174);
    uint64_t v151 = v44;
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = v45;
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      double v190 = COERCE_DOUBLE(swift_slowAlloc());
      *(_DWORD *)uint64_t v51 = 136446210;
      uint64_t v182 = v51 + 4;
      uint64_t v52 = Date.description.getter();
      uint64_t v193 = sub_1000C51B8(v52, v53, (uint64_t *)&v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v149 = *(void (**)(char *, uint64_t))(v50 + 8);
      v149(v22, v47);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "trainEvaluatekNN started at %{public}s", v51, 0xCu);
      swift_arrayDestroy();
      uint64_t KeyPath = v170;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v149 = *(void (**)(char *, uint64_t))(v45 + 8);
      v149(v22, v47);
    }

    uint64_t v55 = v183;
    uint64_t v56 = v186;
    uint64_t v57 = v177;
    v176(v183, v186, v177);
    swift_getKeyPath();
    PartialOverride.subscript.getter();
    swift_release();
    v175(v55, v57);
    if (v190 > 0.0) {
      double v58 = v190;
    }
    else {
      double v58 = 0.0;
    }
    uint64_t v193 = *(void *)(v56 + *(int *)(type metadata accessor for TrainingContext() + 28));
    swift_retain();
    uint64_t v59 = REMSuggestedAttributeInputDataFrame.index.getter();
    __chkstk_darwin(v59);
    v144[-2] = KeyPath;
    uint64_t v60 = v188;
    double v190 = COERCE_DOUBLE(sub_100276240((uint64_t (*)(uint64_t *))sub_1002875E4, (uint64_t)&v144[-4]));
    sub_10028147C();
    uint64_t v61 = *(void *)&v190;
    uint64_t v62 = *(void *)(*(void *)&v190 + 16);
    if (v58 <= 1.0) {
      double v63 = 1.0 - v58;
    }
    else {
      double v63 = 0.0;
    }
    double v64 = v63 * (double)v62;
    if ((~*(void *)&v64 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      swift_unknownObjectRelease();
      BOOL v80 = sub_10020B564(v61, v61 + 32, KeyPath, (2 * v62) | 1);
      goto LABEL_35;
    }
    if (v64 <= -9.22337204e18) {
      goto LABEL_79;
    }
    if (v64 >= 9.22337204e18) {
      goto LABEL_80;
    }
    uint64_t v188 = v60;
    uint64_t v65 = (uint64_t)v64;
    uint64_t v66 = sub_10022BE54((uint64_t)v64, *(void *)&v190);
    uint64_t v68 = v67;
    uint64_t v70 = v69;
    unint64_t v72 = v71;
    if ((v71 & 1) == 0)
    {
      swift_retain();
      goto LABEL_18;
    }
    uint64_t KeyPath = type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v73 = (void *)swift_dynamicCastClass();
    if (!v73)
    {
      swift_unknownObjectRelease();
      uint64_t v73 = _swiftEmptyArrayStorage;
    }
    uint64_t v74 = v73[2];
    swift_release();
    if (__OFSUB__(v72 >> 1, v70))
    {
      __break(1u);
LABEL_85:
      swift_unknownObjectRelease();
LABEL_18:
      sub_10020B564(v66, v68, v70, v72);
      goto LABEL_25;
    }
    if (v74 != (v72 >> 1) - v70) {
      goto LABEL_85;
    }
    if (!swift_dynamicCastClass()) {
      swift_unknownObjectRelease();
    }
LABEL_25:
    swift_unknownObjectRelease();
    unint64_t v75 = v62 - v65;
    if (__OFSUB__(v62, v65)) {
      goto LABEL_81;
    }
    if ((v75 & 0x8000000000000000) != 0) {
      goto LABEL_82;
    }
    v144[3] = v65;
    uint64_t v62 = *(void *)(v61 + 16);
    BOOL v76 = v62 >= v75;
    uint64_t v77 = v62 - v75;
    if (v76) {
      uint64_t KeyPath = v77;
    }
    else {
      uint64_t KeyPath = 0;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v78 = (void *)swift_dynamicCastClass();
    if (!v78)
    {
      swift_unknownObjectRelease();
      uint64_t v78 = _swiftEmptyArrayStorage;
    }
    uint64_t v79 = v78[2];
    swift_release();
    if (v79 != v62 - KeyPath) {
      goto LABEL_83;
    }
    BOOL v80 = (void *)swift_dynamicCastClass();
    if (!v80)
    {
      swift_unknownObjectRelease();
      BOOL v80 = _swiftEmptyArrayStorage;
    }
LABEL_35:
    swift_unknownObjectRelease();
    uint64_t v81 = dispatch thunk of Series.iloc(index:)();
    uint64_t v82 = dispatch thunk of Series.iloc(index:)();
    swift_release();
    uint64_t v83 = dispatch thunk of Series.iloc(index:)();
    char v148 = v80;
    uint64_t v183 = (char *)dispatch thunk of Series.iloc(index:)();
    v144[4] = v81;
    dispatch thunk of Series.values.getter();
    uint64_t v84 = (char *)v188;
    sub_100276050(v82);
    v144[1] = type metadata accessor for REMkNNByTitleEmbedding();
    swift_allocObject();
    uint64_t v85 = REMkNNByTitleEmbedding.init(vectors:labels:)();
    uint64_t v192 = 1;
    uint64_t v188 = v83;
    uint64_t v182 = (uint8_t *)v85;
    uint64_t v86 = sub_100286C18(v83);
    uint64_t v187 = v84;
    uint64_t v87 = v86[2];
    v144[2] = v82;
    unint64_t v180 = v86;
    if (v87)
    {
      unint64_t v88 = v86;
      double v190 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for REMSuggestedList();
      unint64_t v89 = v88 + 5;
      uint64_t v90 = v186;
      do
      {
        swift_bridgeObjectRetain();
        REMSuggestedList.__allocating_init(stringLiteral:)();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v89 += 2;
        --v87;
      }
      while (v87);
      swift_bridgeObjectRelease();
      uint64_t v91 = v177;
    }
    else
    {
      uint64_t v91 = v177;
      uint64_t v90 = v186;
    }
    Series.index.getter();
    uint64_t v22 = (char *)type metadata accessor for REMSuggestedList();
    double v190 = COERCE_DOUBLE(static REMSuggestedList.defaultValue.getter());
    uint64_t v172 = sub_100094134(&qword_100911F28);
    swift_allocObject();
    uint64_t v191 = Series.init(_:index:defaultValue:)();
    swift_retain();
    swift_retain();
    MultiClassificationMetric.init<A>(groundTruth:prediction:)();
    uint64_t v92 = v169;
    id v93 = v176;
    v176(v169, v90, v91);
    swift_getKeyPath();
    int v94 = v146;
    PartialOverride.subscript.getter();
    swift_release();
    id v95 = v175;
    v175(v92, v91);
    swift_getKeyPath();
    int v96 = v166;
    PartialOverride.subscript.getter();
    swift_release();
    v167(v94, v96);
    if (*(uint64_t *)&v190 < 3) {
      goto LABEL_44;
    }
    v93(v92, v186, v91);
    swift_getKeyPath();
    PartialOverride.subscript.getter();
    swift_release();
    v95(v92, v91);
    uint64_t KeyPath = swift_getKeyPath();
    PartialOverride.subscript.getter();
    swift_release();
    uint64_t result = ((uint64_t (*)(uint64_t (**)(char *, char *, uint64_t), void))v167)(v94, v96);
    uint64_t v97 = *(void *)&v190 + 1;
    if (__OFADD__(*(void *)&v190, 1)) {
      break;
    }
    uint64_t v98 = v181;
    if (v97 < 3) {
      goto LABEL_87;
    }
    if (*(void *)&v190 == 2)
    {
LABEL_44:
      swift_bridgeObjectRelease();
      double v99 = *(double *)&v192;
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.default.getter();
      BOOL v102 = os_log_type_enabled(v100, v101);
      uint64_t v103 = v169;
      if (v102)
      {
        uint64_t v104 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v104 = 134349056;
        double v190 = v99;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "best k for kNN model is %{public}ld", v104, 0xCu);
        swift_slowDealloc();
      }

      id v105 = [self daemonUserDefaults];
      swift_beginAccess();
      id v106 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v192];
      [v105 setBestKForKNN:v106];

      id v107 = v185;
      uint64_t v108 = MultiClassificationMetric.correctIndices.getter();
      __chkstk_darwin(v108);
      uint64_t v109 = v170;
      v144[-2] = v170;
      unint64_t v110 = v187;
      sub_100225098((void (*)(void *__return_ptr, uint64_t *))sub_100287630, (uint64_t)&v144[-4], v108);
      swift_bridgeObjectRelease();
      uint64_t v111 = MultiClassificationMetric.incorrectIndices.getter();
      __chkstk_darwin(v111);
      v144[-2] = v109;
      v144[-1] = &v191;
      sub_100225098((void (*)(void *__return_ptr, uint64_t *))sub_100287650, (uint64_t)&v144[-4], v111);
      swift_bridgeObjectRelease();
      uint64_t v112 = v181;
      (*(void (**)(char *, char *, uint64_t))(v168 + 16))(v155, v107, v181);
      REMSuggestedAttributesAccuracy.init(correctSample:incorrectSample:metrics:)();
      uint64_t v113 = v154;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v115 = v114;
      uint64_t v187 = (char *)(v164 + 8);
      v149(v113, v174);
      unint64_t v116 = Logger.logObject.getter();
      os_log_type_t v117 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v116, v117))
      {
        os_log_type_t v118 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v118 = 134349056;
        uint64_t v103 = v169;
        uint64_t v189 = v115;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v116, v117, "kNN model training time: %{public}f", v118, 0xCu);
        swift_slowDealloc();
      }

      type metadata accessor for Analytics();
      sub_100094134((uint64_t *)&unk_10090A420);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E80;
      strcpy((char *)(inited + 32), "list_accuracy");
      *(_WORD *)(inited + 46) = -4864;
      MultiClassificationMetric.accuracy.getter();
      *(NSNumber *)(inited + 48) = Double._bridgeToObjectiveC()();
      *(void *)(inited + 56) = 0x616E5F6C65646F6DLL;
      *(void *)(inited + 64) = 0xEA0000000000656DLL;
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      *(void *)(inited + 72) = NSString.init(stringLiteral:)();
      sub_1002ED104(inited);
      static Analytics.postEvent(_:payload:duration:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v156, v173, v163);
      uint64_t v120 = v157;
      REMSuggestedAttributesTrainer.Result.Embedding.init(listAccuracy:skippedRemindersCount:trainingSetCount:validationSetCount:trainingDuration:)();
      uint64_t v121 = v177;
      v176(v103, v186, v177);
      swift_getKeyPath();
      PartialOverride.subscript.getter();
      swift_release();
      v175(v103, v121);
      int v122 = v189;
      sub_1000963CC(0, (unint64_t *)&qword_10090F3A0);
      uint64_t v123 = v160;
      uint64_t v124 = v161;
      if (v122 == 1) {
        static REMPaths.writableURLForMLModel()();
      }
      else {
        static REMPaths.temporaryURLForMLModel()();
      }
      uint64_t v125 = v158;
      if (v110)
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
LABEL_74:
        (*(void (**)(char *, uint64_t))(v153 + 8))(v120, v125);
        (*(void (**)(char *, uint64_t))(v162 + 8))(v173, v163);
        (*(void (**)(char *, uint64_t))(v168 + 8))(v185, v112);
        swift_release();
        v149(v150, v174);
        return swift_release();
      }
      uint64_t v126 = v148[2];
      swift_release();
      if (v126)
      {
        dispatch thunk of Series.values.getter();
        sub_100276050(v152);
        swift_allocObject();
        uint64_t v124 = v161;
        REMkNNByTitleEmbedding.init(vectors:labels:)();
        if ((REMkNNByTitleEmbedding.save(to:with:)() & 1) == 0)
        {
          uint64_t v140 = self;
          NSString v141 = String._bridgeToObjectiveC()();
          [v140 internalErrorWithDebugDescription:v141];

          swift_willThrow();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v147 + 8))(v161, v160);
          goto LABEL_74;
        }
        swift_release();
      }
      else if ((REMkNNByTitleEmbedding.save(to:with:)() & 1) == 0)
      {
        Class v142 = self;
        NSString v143 = String._bridgeToObjectiveC()();
        [v142 internalErrorWithDebugDescription:v143];

        swift_willThrow();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v147 + 8))(v124, v123);
        goto LABEL_74;
      }
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v147 + 8))(v124, v160);
      (*(void (**)(char *, uint64_t))(v162 + 8))(v173, v163);
      (*(void (**)(char *, uint64_t))(v168 + 8))(v185, v112);
      swift_release();
      v149(v150, v174);
      (*(void (**)(uint64_t, char *, uint64_t))(v153 + 32))(v145, v120, v125);
      return swift_release();
    }
    Class v146 = (uint64_t (**)(char *, char *, uint64_t))(v168 + 32);
    uint64_t v127 = *(void *)&v190 - 2;
    if ((unint64_t)(*(void *)&v190 - 2) >= 0xFFFFFFFFFFFFFFFDLL) {
      uint64_t v127 = -3;
    }
    uint64_t v128 = v127 + 3;
    uint64_t v129 = 3;
    uint64_t v25 = v171;
    uint64_t v130 = v185;
    uint64_t v167 = (void (*)(uint64_t (**)(char *, char *, uint64_t), void))(*(void *)&v190 + 1);
    BOOL v166 = (void (**)(void, void))(v168 + 8);
    uint64_t v165 = v128;
    while (v129 != v128)
    {
      if (v129)
      {
        __chkstk_darwin(result);
        v144[-2] = v182;
        v144[-1] = v131;
        id v132 = v187;
        uint64_t v133 = sub_100275DEC((void (*)(uint64_t *__return_ptr, uint64_t *))sub_100287670);
        uint64_t v187 = v132;
        uint64_t v134 = *(void *)(v133 + 16);
        if (v134)
        {
          double v190 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v135 = v133 + 40;
          do
          {
            swift_bridgeObjectRetain();
            REMSuggestedList.__allocating_init(stringLiteral:)();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v135 += 16;
            --v134;
          }
          while (v134);
          uint64_t v98 = v181;
          uint64_t v130 = v185;
          uint64_t v25 = v171;
        }
        Series.index.getter();
        double v190 = COERCE_DOUBLE(static REMSuggestedList.defaultValue.getter());
        swift_allocObject();
        uint64_t KeyPath = Series.init(_:index:defaultValue:)();
        swift_retain();
        swift_retain();
        MultiClassificationMetric.init<A>(groundTruth:prediction:)();
        MultiClassificationMetric.accuracy.getter();
        double v137 = v136;
        MultiClassificationMetric.accuracy.getter();
        uint64_t v138 = (void (*)(char *, uint64_t))*v166;
        if (v137 >= v139)
        {
          v138(v25, v98);
          swift_bridgeObjectRelease();
          uint64_t result = swift_release();
        }
        else
        {
          v138(v130, v98);
          swift_bridgeObjectRelease();
          uint64_t v192 = v129;
          swift_release();
          uint64_t v191 = KeyPath;
          uint64_t result = (*v146)(v130, v25, v98);
          unint64_t v180 = (void *)v133;
        }
        uint64_t v97 = (uint64_t)v167;
        uint64_t v128 = v165;
      }
      if (++v129 == v97) {
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_77:
    swift_once();
  }
  __break(1u);
LABEL_87:
  __break(1u);
  return result;
}

uint64_t sub_10027D498@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t *a3@<X4>, void *a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  uint64_t v7 = *a3;
  uint64_t v23 = a4;
  uint64_t v24 = v7;
  uint64_t v8 = sub_100094134(&qword_100911EC8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(sub_100094134(&qword_100911E70) + 48);
  uint64_t v22 = a5;
  uint64_t v13 = (uint64_t)a5 + v12;
  type metadata accessor for REMSuggestedAttributesTrainer();
  unint64_t v14 = dispatch thunk of Series.values.getter();
  swift_getKeyPath();
  sub_100094134(&qword_100911ED0);
  PartialOverride.subscript.getter();
  swift_release();
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v15 = (void (*)(char *, uint64_t))v27[5];
  char v16 = v28;
  uint64_t v17 = *(void *)(v25 + *(int *)(type metadata accessor for TrainingContext() + 28));
  v27[3] = v24;
  v27[4] = &protocol witness table for REMFilteredTitleEmbedding;
  v27[0] = a3;
  swift_retain();
  uint64_t v18 = v17;
  uint64_t v19 = v29;
  uint64_t v20 = sub_10027D6E4(v13, v14, v26, v15, v16, v18, (uint64_t)v27, 0, 0);
  swift_bridgeObjectRelease();
  uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v27);
  if (v19) {
    void *v23 = v19;
  }
  else {
    uint64_t *v22 = v20;
  }
  return result;
}

uint64_t sub_10027D6E4(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t), char a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(char *, uint64_t))
{
  uint64_t v126 = a8;
  uint64_t v121 = a3;
  uint64_t v122 = a7;
  os_log_type_t v117 = a4;
  unint64_t v128 = a2;
  uint64_t v116 = a1;
  uint64_t v11 = type metadata accessor for KMeansAutoTuner.KMeanTuningHistory();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v118 = v11;
  uint64_t v119 = v12;
  __chkstk_darwin(v11);
  unint64_t v110 = (char *)v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v109 = (char *)v105 - v15;
  __chkstk_darwin(v16);
  uint64_t v108 = (char *)v105 - v17;
  uint64_t v112 = type metadata accessor for RDIntentClusterModel.TuningSnapshot();
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v120 = (char *)v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for KMeans.TrainingMetrics();
  uint64_t v129 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v20 = (char *)v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v105 - v22;
  __chkstk_darwin(v24);
  uint64_t v130 = (char *)v105 - v25;
  uint64_t v115 = type metadata accessor for REMSuggestedAttributesTrainer.Result.IntentionalWord();
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v27 = (char *)v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)v105 - v29;
  uint64_t v31 = type metadata accessor for RDIntentClusterModel.ModelSnapshot();
  uint64_t v107 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)v105 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Date();
  uint64_t v124 = *(void *)(v34 - 8);
  uint64_t v125 = v34;
  __chkstk_darwin(v34);
  uint64_t v113 = (char *)v105 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v123 = (char *)v105 - v37;
  Date.init()();
  if (a5)
  {
    os_log_type_t v117 = a9;
    uint64_t v50 = v127;
    id v106 = v27;
    if (v128 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v51 = *(void *)((v128 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v52 = v120;
    uint64_t v53 = v50;
    if (v51 >= 10) {
      uint64_t v54 = 10;
    }
    else {
      uint64_t v54 = v51;
    }
    type metadata accessor for RDIntentClusterModel();
    uint64_t v132 = type metadata accessor for MersenneTwister();
    uint64_t v133 = sub_100281434(&qword_100911E40, (void (*)(uint64_t))&type metadata accessor for MersenneTwister);
    v131[0] = a6;
    swift_retain();
    uint64_t v55 = static RDIntentClusterModel.modelByTuning(_:writeTo:minK:maxK:maxIter:embedding:randomGenerator:filename:)();
    uint64_t v56 = v118;
    if (!v53)
    {
      uint64_t v107 = v54;
      uint64_t v121 = v55;
      uint64_t v122 = 0;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v131);
      v105[2] = RDIntentClusterModel.TuningSnapshot.bestK.getter();
      v105[1] = RDIntentClusterModel.TuningSnapshot.intentionalWords.getter();
      double v58 = v108;
      RDIntentClusterModel.TuningSnapshot.kmeansTuningHistory.getter();
      uint64_t v59 = KMeansAutoTuner.KMeanTuningHistory.modelMetricHistory.getter();
      uint64_t v60 = *(void (**)(char *, uint64_t))(v119 + 8);
      v119 += 8;
      os_log_type_t v117 = v60;
      v60(v58, v56);
      int64_t v61 = *(void *)(v59 + 16);
      if (v61)
      {
        v131[0] = _swiftEmptyArrayStorage;
        sub_1001DE530(0, v61, 0);
        uint64_t v127 = *(void *)(v129 + 16);
        unint64_t v62 = (*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80);
        uint64_t v108 = (char *)v59;
        unint64_t v63 = v59 + v62;
        uint64_t v126 = *(void *)(v129 + 72);
        unint64_t v128 = v129 + 16;
        double v64 = (void (**)(char *, uint64_t))(v129 + 8);
        uint64_t v65 = v134;
        do
        {
          uint64_t v66 = v130;
          ((void (*)(char *, unint64_t, uint64_t))v127)(v130, v63, v65);
          uint64_t v67 = KMeans.TrainingMetrics.clusterVariances.getter();
          (*v64)(v66, v65);
          uint64_t v68 = v131[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1001DE530(0, *(void *)(v68 + 16) + 1, 1);
            uint64_t v68 = v131[0];
          }
          unint64_t v70 = *(void *)(v68 + 16);
          unint64_t v69 = *(void *)(v68 + 24);
          if (v70 >= v69 >> 1)
          {
            sub_1001DE530(v69 > 1, v70 + 1, 1);
            uint64_t v68 = v131[0];
          }
          *(void *)(v68 + 16) = v70 + 1;
          *(void *)(v68 + 8 * v70 + 32) = v67;
          v63 += v126;
          --v61;
        }
        while (v61);
        swift_bridgeObjectRelease();
        uint64_t v52 = v120;
        uint64_t v56 = v118;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      unint64_t v71 = v109;
      RDIntentClusterModel.TuningSnapshot.kmeansTuningHistory.getter();
      uint64_t v72 = KMeansAutoTuner.KMeanTuningHistory.modelMetricHistory.getter();
      v117(v71, v56);
      int64_t v73 = *(void *)(v72 + 16);
      if (v73)
      {
        v131[0] = _swiftEmptyArrayStorage;
        sub_1001DE500(0, v73, 0);
        uint64_t v127 = *(void *)(v129 + 16);
        unint64_t v74 = (*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80);
        uint64_t v109 = (char *)v72;
        unint64_t v75 = v72 + v74;
        uint64_t v126 = *(void *)(v129 + 72);
        unint64_t v128 = v129 + 16;
        BOOL v76 = (void (**)(char *, uint64_t))(v129 + 8);
        do
        {
          uint64_t v77 = v130;
          uint64_t v78 = v134;
          ((void (*)(char *, unint64_t, uint64_t))v127)(v130, v75, v134);
          uint64_t v79 = KMeans.TrainingMetrics.clusterSizes.getter();
          (*v76)(v77, v78);
          uint64_t v80 = v131[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1001DE500(0, *(void *)(v80 + 16) + 1, 1);
            uint64_t v80 = v131[0];
          }
          unint64_t v82 = *(void *)(v80 + 16);
          unint64_t v81 = *(void *)(v80 + 24);
          if (v82 >= v81 >> 1)
          {
            sub_1001DE500(v81 > 1, v82 + 1, 1);
            uint64_t v80 = v131[0];
          }
          *(void *)(v80 + 16) = v82 + 1;
          *(void *)(v80 + 8 * v82 + 32) = v79;
          v75 += v126;
          --v73;
        }
        while (v73);
        swift_bridgeObjectRelease();
        uint64_t v52 = v120;
        uint64_t v56 = v118;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v83 = v110;
      RDIntentClusterModel.TuningSnapshot.kmeansTuningHistory.getter();
      uint64_t v84 = KMeansAutoTuner.KMeanTuningHistory.modelMetricHistory.getter();
      v117(v83, v56);
      int64_t v85 = *(void *)(v84 + 16);
      if (v85)
      {
        v131[0] = _swiftEmptyArrayStorage;
        sub_1001DE4E0(0, v85, 0);
        unint64_t v86 = *(void *)(v129 + 16);
        uint64_t v87 = *(unsigned __int8 *)(v129 + 80);
        uint64_t v126 = v84;
        uint64_t v88 = v84 + ((v87 + 32) & ~v87);
        uint64_t v127 = *(void *)(v129 + 72);
        unint64_t v128 = v86;
        v129 += 16;
        unint64_t v89 = (void (**)(char *, uint64_t))(v129 - 8);
        do
        {
          uint64_t v90 = v130;
          uint64_t v91 = v134;
          ((void (*)(char *, uint64_t, uint64_t))v128)(v130, v88, v134);
          KMeans.TrainingMetrics.mse.getter();
          uint64_t v93 = v92;
          (*v89)(v90, v91);
          uint64_t v94 = v131[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1001DE4E0(0, *(void *)(v94 + 16) + 1, 1);
            uint64_t v94 = v131[0];
          }
          unint64_t v96 = *(void *)(v94 + 16);
          unint64_t v95 = *(void *)(v94 + 24);
          if (v96 >= v95 >> 1)
          {
            sub_1001DE4E0(v95 > 1, v96 + 1, 1);
            uint64_t v94 = v131[0];
          }
          *(void *)(v94 + 16) = v96 + 1;
          *(void *)(v94 + 8 * v96 + 32) = v93;
          v88 += v127;
          --v85;
        }
        while (v85);
        swift_bridgeObjectRelease();
        uint64_t v52 = v120;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v97 = v113;
      Date.init()();
      uint64_t v98 = v123;
      Date.timeIntervalSince(_:)();
      double v99 = *(void (**)(char *, uint64_t))(v124 + 8);
      uint64_t v100 = v97;
      uint64_t v101 = v125;
      v99(v100, v125);
      BOOL v102 = v106;
      REMSuggestedAttributesTrainer.Result.IntentionalWordTuned.init(bestK:bestClusterLabels:minK:maxK:clusterVariances:clusterSizes:mse:trainingDuration:)();
      (*(void (**)(char *, uint64_t))(v111 + 8))(v52, v112);
      v99(v98, v101);
      uint64_t v103 = v114;
      uint64_t v104 = v115;
      (*(void (**)(char *, void, uint64_t))(v114 + 104))(v102, enum case for REMSuggestedAttributesTrainer.Result.IntentionalWord.fromTuning(_:), v115);
      (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v116, v102, v104);
      return v121;
    }
LABEL_10:
    (*(void (**)(char *, uint64_t))(v124 + 8))(v123, v125);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v131);
  }
  type metadata accessor for RDIntentClusterModel();
  uint64_t v132 = type metadata accessor for MersenneTwister();
  uint64_t v133 = sub_100281434(&qword_100911E40, (void (*)(uint64_t))&type metadata accessor for MersenneTwister);
  v131[0] = a6;
  swift_retain();
  uint64_t v38 = v127;
  uint64_t v39 = static RDIntentClusterModel.modelByTraining(_:writeTo:k:embedding:randomGenerator:filename:)();
  if (v38) {
    goto LABEL_10;
  }
  uint64_t v121 = v39;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v131);
  uint64_t v122 = 0;
  unint64_t v128 = RDIntentClusterModel.ModelSnapshot.intentionalWords.getter();
  uint64_t v40 = v130;
  RDIntentClusterModel.ModelSnapshot.kmeansMetrics.getter();
  uint64_t v127 = KMeans.TrainingMetrics.clusterVariances.getter();
  os_log_type_t v41 = *(void (**)(char *, uint64_t))(v129 + 8);
  uint64_t v42 = v40;
  uint64_t v43 = v134;
  v41(v42, v134);
  RDIntentClusterModel.ModelSnapshot.kmeansMetrics.getter();
  uint64_t v130 = (char *)KMeans.TrainingMetrics.clusterSizes.getter();
  v41(v23, v43);
  RDIntentClusterModel.ModelSnapshot.kmeansMetrics.getter();
  KMeans.TrainingMetrics.mse.getter();
  v41(v20, v43);
  uint64_t v44 = v113;
  Date.init()();
  uint64_t v45 = v123;
  Date.timeIntervalSince(_:)();
  uint64_t v46 = v125;
  uint64_t v47 = *(void (**)(char *, uint64_t))(v124 + 8);
  v47(v44, v125);
  REMSuggestedAttributesTrainer.Result.IntentionalWordPrescribed.init(clusterLabels:clusterVariances:clusterSizes:mse:trainingDuration:)();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v33, v31);
  v47(v45, v46);
  uint64_t v48 = v114;
  uint64_t v49 = v115;
  (*(void (**)(char *, void, uint64_t))(v114 + 104))(v30, enum case for REMSuggestedAttributesTrainer.Result.IntentionalWord.prescribed(_:), v115);
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v116, v30, v49);
  return v121;
}

void sub_10027E410(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v265 = a4;
  char v276 = a3;
  char v285 = a2;
  uint64_t v259 = a5;
  uint64_t v253 = type metadata accessor for REMSuggestedLocation.LocationValue();
  uint64_t v251 = *(void *)(v253 - 8);
  __chkstk_darwin(v253);
  uint64_t v252 = (char *)&v245 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for REMSuggestedAttributesAccuracy();
  uint64_t v260 = *(void *)(v7 - 8);
  uint64_t v261 = v7;
  __chkstk_darwin(v7);
  uint64_t v258 = (char *)&v245 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v257 = (char *)&v245 - v10;
  __chkstk_darwin(v11);
  uint64_t v256 = (char *)&v245 - v12;
  __chkstk_darwin(v13);
  uint64_t v267 = (char *)&v245 - v14;
  __chkstk_darwin(v15);
  uint64_t v269 = (char *)&v245 - v16;
  __chkstk_darwin(v17);
  uint64_t v271 = (char *)&v245 - v18;
  uint64_t v275 = type metadata accessor for MultiClassificationMetric();
  uint64_t v266 = *(void *)(v275 - 8);
  __chkstk_darwin(v275);
  uint64_t v254 = (char *)&v245 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v268 = (char *)&v245 - v21;
  __chkstk_darwin(v22);
  uint64_t v274 = (char *)&v245 - v23;
  __chkstk_darwin(v24);
  uint64_t v270 = (char *)&v245 - v25;
  uint64_t v26 = sub_100094134((uint64_t *)&unk_100910990);
  uint64_t v263 = *(void *)(v26 - 8);
  uint64_t v264 = v26;
  __chkstk_darwin(v26);
  uint64_t v262 = (char *)&v245 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100094134(&qword_100911F18);
  uint64_t v249 = *(void *)(v28 - 8);
  uint64_t v250 = v28;
  __chkstk_darwin(v28);
  uint64_t v248 = (char *)&v245 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v286 = type metadata accessor for URL();
  uint64_t v290 = *(void *)(v286 - 8);
  __chkstk_darwin(v286);
  v292 = (uint64_t *)((char *)&v245 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v31);
  int v289 = (char *)&v245 - v32;
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v287 = v33;
  uint64_t v288 = v34;
  __chkstk_darwin(v33);
  id v255 = (char *)&v245 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v291 = (char *)&v245 - v37;
  uint64_t v38 = (void *)sub_100094134(&qword_100911F20);
  v298 = (void *)*(v38 - 1);
  __chkstk_darwin(v38);
  unsigned __int8 v278 = (char *)&v245 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  uint64_t v273 = (char *)&v245 - v41;
  __chkstk_darwin(v42);
  *(void *)&long long v283 = (char *)&v245 - v43;
  __chkstk_darwin(v44);
  uint64_t v282 = (char *)&v245 - v45;
  __chkstk_darwin(v46);
  uint64_t v48 = (char *)&v245 - v47;
  uint64_t v49 = sub_100094134(&qword_100911ED0);
  uint64_t v50 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v277 = (char *)&v245 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  uint64_t v272 = (uint64_t *)((char *)&v245 - v53);
  __chkstk_darwin(v54);
  char v281 = (char *)&v245 - v55;
  __chkstk_darwin(v56);
  uint64_t v280 = (char *)&v245 - v57;
  __n128 v59 = __chkstk_darwin(v58);
  int64_t v61 = (char *)&v245 - v60;
  unint64_t v63 = (char *)(v50 + 16);
  unint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  uint64_t v295 = a1;
  uint64_t v296 = v62;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v62)((char *)&v245 - v60, a1, v49, v59);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  uint64_t v65 = *(void (**)(char *, uint64_t))(v50 + 8);
  double v64 = (char *)(v50 + 8);
  v297 = v65;
  v65(v61, v49);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  uint64_t v66 = (void (*)(char *, void *))v298[1];
  id v279 = v48;
  v294 = v38;
  ++v298;
  v66(v48, v38);
  if (LOBYTE(v299[0]) != 1)
  {
    sub_100286860();
    swift_allocError();
    swift_willThrow();
    return;
  }
  v284 = v66;
  Date.init()();
  v296(v61, v295, v49);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  v297(v61, v49);
  int v67 = LOBYTE(v299[0]);
  sub_1000963CC(0, (unint64_t *)&qword_10090F3A0);
  uint64_t v68 = v64;
  unint64_t v69 = v61;
  unint64_t v70 = v63;
  unint64_t v71 = v289;
  uint64_t v72 = v293;
  if (v67 == 1) {
    static REMPaths.writableURLForMLModel()();
  }
  else {
    static REMPaths.temporaryURLForMLModel()();
  }
  if (v72) {
    goto LABEL_9;
  }
  unint64_t v293 = 0;
  uint64_t v246 = v69;
  (*(void (**)(void *, char *, uint64_t))(v290 + 16))(v292, v71, v286);
  int64_t v73 = v280;
  uint64_t v74 = v295;
  v296(v280, v295, v49);
  swift_getKeyPath();
  unint64_t v75 = v282;
  PartialOverride.subscript.getter();
  swift_release();
  v297(v73, v49);
  swift_getKeyPath();
  BOOL v76 = v294;
  PartialOverride.subscript.getter();
  swift_release();
  v284(v75, v76);
  int v247 = (unint64_t *)v299[0];
  uint64_t v77 = v281;
  uint64_t v280 = v70;
  v296(v281, v74, v49);
  swift_getKeyPath();
  uint64_t v78 = (char *)v283;
  PartialOverride.subscript.getter();
  swift_release();
  char v281 = (char *)v49;
  uint64_t v282 = v68;
  v297(v77, v49);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  v284(v78, v76);
  uint64_t v79 = v302;
  type metadata accessor for RDCoreBehaviorModel(0);
  swift_allocObject();
  uint64_t v80 = v293;
  unint64_t v81 = sub_1004AD008((uint64_t)v292, (uint64_t)v247, 0, v79, 0);
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v290 + 8))(v289, v286);
LABEL_9:
    (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v287);
    return;
  }
  unint64_t v293 = 0;
  int v247 = v81;
  unint64_t v82 = v246;
  uint64_t v83 = v295;
  uint64_t v84 = v281;
  v296(v246, v295, (uint64_t)v281);
  swift_getKeyPath();
  int64_t v85 = v279;
  PartialOverride.subscript.getter();
  swift_release();
  v297(v82, (uint64_t)v84);
  swift_getKeyPath();
  unint64_t v86 = v294;
  PartialOverride.subscript.getter();
  swift_release();
  v284(v85, v86);
  if (v299[0]) {
    sub_1004A993C(v299[0]);
  }
  uint64_t v87 = v246;
  uint64_t v88 = v281;
  unint64_t v89 = (void (*)(char *, uint64_t, char *))v296;
  v296(v246, v83, (uint64_t)v281);
  swift_getKeyPath();
  uint64_t v90 = v279;
  PartialOverride.subscript.getter();
  swift_release();
  v297(v87, (uint64_t)v88);
  swift_getKeyPath();
  uint64_t v91 = v294;
  PartialOverride.subscript.getter();
  swift_release();
  uint64_t v92 = (void (*)(void, void))v284;
  v284(v90, v91);
  v292 = (void *)v299[0];
  v89(v87, v295, v88);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  uint64_t v93 = v87;
  uint64_t v94 = v297;
  v297(v93, (uint64_t)v88);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  v92(v90, v91);
  unint64_t v95 = v299[0];
  *(void *)&long long v283 = (char *)v292 + v299[0];
  uint64_t v96 = (uint64_t)v276;
  if (__CFADD__(v292, v299[0])) {
    goto LABEL_110;
  }
  uint64_t v97 = (char *)v272;
  v296((char *)v272, v295, (uint64_t)v88);
  swift_getKeyPath();
  uint64_t v98 = v273;
  PartialOverride.subscript.getter();
  swift_release();
  v94(v97, (uint64_t)v88);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  v284(v98, v91);
  uint64_t v99 = v293;
  sub_1004A9AF8(v285, v96, (void *)v283, 0, *(double *)v299);
  unint64_t v293 = v99;
  if (v99)
  {
LABEL_14:
    swift_release();
    (*(void (**)(char *, uint64_t))(v290 + 8))(v289, v286);
    (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v287);
    return;
  }
  if (v95 > 2)
  {
    uint64_t v104 = v294;
  }
  else
  {
    uint64_t v104 = v294;
    if (v102 == 1)
    {
      uint64_t v105 = v96;
      *(void *)&long long v103 = 134217984;
      long long v283 = v103;
      id v106 = v278;
      while (1)
      {
        uint64_t v107 = (char *)v292 + v95 + 1;
        if (__CFADD__(v292, v95 + 1)) {
          goto LABEL_109;
        }
        if (qword_100907208 != -1) {
          swift_once();
        }
        uint64_t v108 = type metadata accessor for Logger();
        sub_10008E2DC(v108, (uint64_t)qword_100911D60);
        uint64_t v109 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v109, v110))
        {
          uint64_t v111 = swift_slowAlloc();
          *(_DWORD *)uint64_t v111 = v283;
          *(void *)(v111 + 4) = v107;
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "CoreBehavior terminated early. Retrying with support = %lu", (uint8_t *)v111, 0xCu);
          swift_slowDealloc();
        }

        uint64_t v112 = v277;
        uint64_t v113 = v281;
        v296(v277, v295, (uint64_t)v281);
        swift_getKeyPath();
        PartialOverride.subscript.getter();
        swift_release();
        v297(v112, (uint64_t)v113);
        swift_getKeyPath();
        uint64_t v104 = v294;
        PartialOverride.subscript.getter();
        swift_release();
        v284(v106, v104);
        uint64_t v114 = v293;
        sub_1004A9AF8(v285, v105, v107, 0, *(double *)v299);
        unint64_t v293 = v114;
        if (v114) {
          goto LABEL_14;
        }
        if (v95 != 2)
        {
          ++v95;
          if (v115 == 1) {
            continue;
          }
        }
        break;
      }
    }
  }
  uint64_t v273 = v101;
  uint64_t v277 = v100;
  *(void *)&long long v283 = self;
  unsigned __int8 v278 = (char *)[(id)v283 daemonUserDefaults];
  sub_100094134(&qword_10091F070);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E60;
  *(void *)(inited + 32) = 0x74726F70707573;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(NSNumber *)(inited + 48) = UInt._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 0x656D7473756A6461;
  *(void *)(inited + 64) = 0xEA0000000000746ELL;
  *(NSNumber *)(inited + 72) = UInt._bridgeToObjectiveC()();
  *(void *)(inited + 80) = 0x6E656469666E6F63;
  *(void *)(inited + 88) = 0xEA00000000006563;
  os_log_type_t v117 = v246;
  uint64_t v118 = v104;
  uint64_t v119 = v281;
  v296(v246, v295, (uint64_t)v281);
  swift_getKeyPath();
  uint64_t v120 = v279;
  PartialOverride.subscript.getter();
  swift_release();
  v297(v117, (uint64_t)v119);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  v284(v120, v118);
  *(NSNumber *)(inited + 96) = Double._bridgeToObjectiveC()();
  sub_1002EEC68(inited);
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v122 = v278;
  [v278 setCoreBehaviorTrainingParameters:isa];

  uint64_t v123 = v295;
  v296(v117, v295, (uint64_t)v119);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  v297(v117, (uint64_t)v119);
  swift_getKeyPath();
  uint64_t v124 = v294;
  PartialOverride.subscript.getter();
  swift_release();
  v284(v120, v124);
  double v125 = (double)v299[0];
  double v126 = v125 / (double)REMSuggestedAttributeInputDataFrame.size.getter();
  v296(v117, v123, (uint64_t)v119);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  v297(v117, (uint64_t)v119);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  v284(v120, v124);
  unint64_t v127 = v299[0];
  id v128 = [(id)v283 daemonUserDefaults];
  sub_100094134(&qword_10090AF50);
  uint64_t v129 = swift_initStackObject();
  *(_OWORD *)(v129 + 16) = xmmword_100776E40;
  strcpy((char *)v299, "coreBehavior");
  BYTE5(v299[1]) = 0;
  HIWORD(v299[1]) = -5120;
  AnyHashable.init<A>(_:)();
  sub_100094134(&qword_10090F640);
  uint64_t v130 = swift_initStackObject();
  *(_OWORD *)(v130 + 16) = xmmword_100776E80;
  *(void *)(v130 + 32) = 0x65766974616C6572;
  *(void *)(v130 + 40) = 0xEF74726F70707553;
  *(double *)(v130 + 48) = v126;
  *(void *)(v130 + 56) = 0x6E656469666E6F63;
  *(void *)(v130 + 64) = 0xEA00000000006563;
  *(void *)(v130 + 72) = v127;
  unint64_t v131 = sub_1002ED110(v130);
  *(void *)(v129 + 96) = sub_100094134(&qword_10090F3B0);
  *(void *)(v129 + 72) = v131;
  sub_1002EE418(v129);
  Class v132 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v128 setSuggestedAttributesHarvestingOverrides:v132];

  sub_1000963CC(0, (unint64_t *)&unk_10091AA90);
  uint64_t v133 = (void (*)(char *, uint64_t, uint64_t))_swiftEmptyArrayStorage;
  if ([(id)swift_getObjCClassFromMetadata() respondsToSelector:"supportsTaskSpecificEvents"])
  {
    unsigned int v134 = [self supportsTaskSpecificEvents];
    uint64_t v135 = v293;
    uint64_t v137 = v263;
    uint64_t v136 = v264;
    uint64_t v138 = v262;
    if (v134)
    {
      double v139 = (char *)v247 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules;
      swift_beginAccess();
      uint64_t v140 = v248;
      uint64_t v141 = v249;
      Class v142 = v139;
      uint64_t v143 = v250;
      (*(void (**)(char *, char *, uint64_t))(v249 + 16))(v248, v142, v250);
      unint64_t v144 = OrderedDictionary.values.getter();
      (*(void (**)(char *, uint64_t))(v141 + 8))(v140, v143);
      uint64_t v145 = v265;
      swift_bridgeObjectRetain();
      uint64_t v272 = sub_1002816C4(v144, v145);
      unint64_t v293 = v135;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v146 = (uint64_t)v285;
      uint64_t v133 = (void (*)(char *, uint64_t, uint64_t))_swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v272 = _swiftEmptyArrayStorage;
      uint64_t v146 = (uint64_t)v285;
    }
    uint64_t v147 = v276;
  }
  else
  {
    uint64_t v272 = _swiftEmptyArrayStorage;
    uint64_t v146 = (uint64_t)v285;
    uint64_t v147 = v276;
    uint64_t v137 = v263;
    uint64_t v136 = v264;
    uint64_t v138 = v262;
  }
  uint64_t v148 = REMSuggestedAttributeInputDataFrame.index.getter();
  __chkstk_darwin(v148);
  *(&v245 - 4) = (uint64_t)v247;
  *(&v245 - 3) = v146;
  unint64_t v243 = v147;
  uint64_t v149 = v293;
  uint64_t v150 = sub_100225338((void (*)(uint64_t *__return_ptr, uint64_t *))sub_100287248);
  uint64_t v282 = (char *)v149;
  (*(void (**)(char *, uint64_t))(v137 + 8))(v138, v136);
  unint64_t v304 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v151 = *(void (**)(char *, void *))(v150 + 16);
  *(void *)&long long v283 = v150;
  v284 = v151;
  if (v151)
  {
    v292 = (void *)(v150 + 32);
    uint64_t v152 = swift_bridgeObjectRetain();
    unint64_t v153 = 0;
    char v154 = _swiftEmptyArrayStorage;
    uint64_t v133 = (void (*)(char *, uint64_t, uint64_t))_swiftEmptyArrayStorage;
    while (v153 < *(void *)(v152 + 16))
    {
      uint64_t v155 = v292[v153];
      uint64_t v156 = *(void *)(v155 + 16);
      if (v156)
      {
        v294 = (void *)v153;
        uint64_t v296 = v133;
        swift_bridgeObjectRetain();
        unint64_t v293 = v155;
        uint64_t v157 = (unsigned char *)(v155 + 80);
        do
        {
          if (!*v157)
          {
            uint64_t v159 = *((void *)v157 - 6);
            uint64_t v160 = (void *)*((void *)v157 - 4);
            uint64_t v161 = *((void *)v157 - 3);
            uint64_t v163 = *((void *)v157 - 2);
            uint64_t v162 = (void (*)(char *, uint64_t))*((void *)v157 - 1);
            uint64_t v295 = *((void *)v157 - 5);
            sub_10028742C(v159, v295, (uint64_t)v160, v161, v163, (uint64_t)v162, 0);
            swift_retain();
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v297 = v162;
            v298 = v160;
            if (isUniquelyReferenced_nonNull_native) {
              uint64_t v165 = v296;
            }
            else {
              uint64_t v165 = (void (*)(char *, uint64_t, uint64_t))sub_10030B32C(0, *((void *)v296 + 2) + 1, 1, v296);
            }
            unint64_t v167 = *((void *)v165 + 2);
            unint64_t v166 = *((void *)v165 + 3);
            if (v167 >= v166 >> 1) {
              uint64_t v165 = (void (*)(char *, uint64_t, uint64_t))sub_10030B32C((void *)(v166 > 1), v167 + 1, 1, v165);
            }
            *((void *)v165 + 2) = v167 + 1;
            uint64_t v296 = v165;
            *((void *)v165 + v167 + 4) = v294;
            swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v304 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v304 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v154 = sub_100308F88(0, v154[2] + 1, 1, v154);
            }
            uint64_t v168 = v295;
            unint64_t v170 = v154[2];
            unint64_t v169 = v154[3];
            uint64_t v171 = v154;
            if (v170 >= v169 >> 1) {
              uint64_t v171 = sub_100308F88((void *)(v169 > 1), v170 + 1, 1, v154);
            }
            v171[2] = v170 + 1;
            char v154 = v171;
            uint64_t v158 = &v171[2 * v170];
            v158[4] = v161;
            v158[5] = v163;
            swift_release();
            sub_1002874C8(v159, v168, (uint64_t)v298, v161, v163, (uint64_t)v297, 0);
          }
          v157 += 56;
          --v156;
        }
        while (v156);
        swift_bridgeObjectRelease();
        uint64_t v133 = v296;
        uint64_t v152 = v283;
        unint64_t v153 = (unint64_t)v294;
      }
      if ((void (*)(char *, void *))++v153 == v284)
      {
        swift_bridgeObjectRelease();
        uint64_t v172 = v154;
        goto LABEL_59;
      }
    }
    __break(1u);
    goto LABEL_107;
  }
  uint64_t v172 = _swiftEmptyArrayStorage;
LABEL_59:
  sub_100094134(&qword_100911F28);
  type metadata accessor for REMSuggestedList();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v302 = static REMSuggestedList.defaultValue.getter();
  uint64_t v173 = Series.__allocating_init(_:index:defaultValue:)();
  uint64_t v174 = (char *)sub_100094134(&qword_100911EF8);
  uint64_t v302 = 0;
  unint64_t v303 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v276 = v172;
  uint64_t v296 = v133;
  unsigned __int8 v278 = v174;
  uint64_t v175 = Series.__allocating_init(_:index:defaultValue:)();
  uint64_t v176 = (uint64_t)v285;
  REMSuggestedAttributeInputDataFrame.list.getter();
  swift_retain();
  uint64_t v177 = v270;
  MultiClassificationMetric.init<A>(groundTruth:prediction:)();
  uint64_t v178 = MultiClassificationMetric.correctIndices.getter();
  __chkstk_darwin(v178);
  uint64_t v244 = (void *)v175;
  uint64_t v179 = v282;
  sub_100225098((void (*)(void *__return_ptr, uint64_t *))sub_10028726C, (uint64_t)(&v245 - 4), v178);
  swift_bridgeObjectRelease();
  uint64_t v180 = MultiClassificationMetric.incorrectIndices.getter();
  __chkstk_darwin(v180);
  *(&v245 - 4) = v176;
  *(&v245 - 3) = v173;
  uint64_t v263 = v175;
  uint64_t v264 = v173;
  unint64_t v243 = (void *)v175;
  sub_100225098((void (*)(void *__return_ptr, uint64_t *))sub_10028728C, (uint64_t)(&v245 - 6), v180);
  char v281 = v179;
  swift_bridgeObjectRelease();
  id v279 = *(char **)(v266 + 16);
  uint64_t v280 = (char *)(v266 + 16);
  ((void (*)(char *, char *, uint64_t))v279)(v274, v177, v275);
  REMSuggestedAttributesAccuracy.init(correctSample:incorrectSample:metrics:)();
  unint64_t v301 = (unint64_t)_swiftEmptyArrayStorage;
  if (v284)
  {
    uint64_t v282 = (char *)(v283 + 32);
    uint64_t v181 = swift_bridgeObjectRetain();
    unint64_t v182 = 0;
    uint64_t v183 = _swiftEmptyArrayStorage;
    v298 = _swiftEmptyArrayStorage;
    while (v182 < *(void *)(v181 + 16))
    {
      uint64_t v184 = *(void *)&v282[8 * v182];
      uint64_t v185 = *(void *)(v184 + 16);
      if (v185)
      {
        unint64_t v293 = v182;
        swift_bridgeObjectRetain();
        v292 = (void *)v184;
        uint64_t v186 = (unsigned char *)(v184 + 80);
        do
        {
          if (*v186 == 2)
          {
            uint64_t v188 = *((void *)v186 - 6);
            uint64_t v189 = (void (*)(char *, uint64_t))*((void *)v186 - 4);
            uint64_t v190 = *((void *)v186 - 3);
            uint64_t v191 = *((void *)v186 - 2);
            uint64_t v192 = *((void *)v186 - 1);
            v294 = (void *)*((void *)v186 - 5);
            sub_10028742C(v188, (uint64_t)v294, (uint64_t)v189, v190, v191, v192, 2);
            swift_retain();
            swift_bridgeObjectRetain();
            char v193 = swift_isUniquelyReferenced_nonNull_native();
            v297 = v189;
            uint64_t v295 = v192;
            if (v193) {
              char v194 = v298;
            }
            else {
              char v194 = sub_10030B32C(0, v298[2] + 1, 1, v298);
            }
            unint64_t v196 = v194[2];
            unint64_t v195 = v194[3];
            if (v196 >= v195 >> 1) {
              char v194 = sub_10030B32C((void *)(v195 > 1), v196 + 1, 1, v194);
            }
            v194[2] = v196 + 1;
            v298 = v194;
            v194[v196 + 4] = v293;
            swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v301 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v301 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v183 = sub_100308F88(0, v183[2] + 1, 1, v183);
            }
            char v197 = v294;
            unint64_t v199 = v183[2];
            unint64_t v198 = v183[3];
            uint64_t v200 = v183;
            if (v199 >= v198 >> 1) {
              uint64_t v200 = sub_100308F88((void *)(v198 > 1), v199 + 1, 1, v183);
            }
            v200[2] = v199 + 1;
            uint64_t v183 = v200;
            uint64_t v187 = &v200[2 * v199];
            v187[4] = v190;
            v187[5] = v191;
            swift_release();
            sub_1002874C8(v188, (uint64_t)v197, (uint64_t)v297, v190, v191, v295, 2);
          }
          v186 += 56;
          --v185;
        }
        while (v185);
        swift_bridgeObjectRelease();
        uint64_t v181 = v283;
        unint64_t v182 = v293;
      }
      if ((void (*)(char *, void *))++v182 == v284)
      {
        swift_bridgeObjectRelease();
        NSString v201 = (char *)v183;
        uint64_t v202 = v298;
        goto LABEL_82;
      }
    }
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
    return;
  }
  NSString v201 = (char *)_swiftEmptyArrayStorage;
  uint64_t v202 = _swiftEmptyArrayStorage;
LABEL_82:
  sub_100094134(&qword_100911F30);
  type metadata accessor for REMSuggestedWeekDay();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static REMSuggestedWeekDay.nilValue.getter();
  swift_allocObject();
  uint64_t v302 = REMSuggestedWeekDay.init(_:)();
  uint64_t v203 = Series.__allocating_init(_:index:defaultValue:)();
  uint64_t v302 = 0;
  unint64_t v303 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v262 = v201;
  v298 = v202;
  uint64_t v204 = Series.__allocating_init(_:index:defaultValue:)();
  uint64_t v205 = (uint64_t)v285;
  REMSuggestedAttributeInputDataFrame.dueDayOfWeek.getter();
  swift_retain();
  id v206 = v268;
  MultiClassificationMetric.init<A>(groundTruth:prediction:)();
  uint64_t v207 = MultiClassificationMetric.correctIndices.getter();
  __chkstk_darwin(v207);
  uint64_t v244 = (void *)v204;
  uint64_t v208 = v281;
  sub_100225098((void (*)(void *__return_ptr, uint64_t *))sub_1002872E4, (uint64_t)(&v245 - 4), v207);
  swift_bridgeObjectRelease();
  uint64_t v209 = MultiClassificationMetric.incorrectIndices.getter();
  __chkstk_darwin(v209);
  *(&v245 - 4) = v205;
  *(&v245 - 3) = v203;
  uint64_t v249 = v204;
  uint64_t v250 = v203;
  unint64_t v243 = (void *)v204;
  sub_100225098((void (*)(void *__return_ptr, uint64_t *))sub_100287328, (uint64_t)(&v245 - 6), v209);
  uint64_t v248 = v208;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v279)(v274, v206, v275);
  REMSuggestedAttributesAccuracy.init(correctSample:incorrectSample:metrics:)();
  unint64_t v300 = (unint64_t)_swiftEmptyArrayStorage;
  if (v284)
  {
    unint64_t v210 = 0;
    uint64_t v211 = v283;
    char v281 = (char *)(v283 + 32);
    long long v212 = _swiftEmptyArrayStorage;
    v297 = (void (*)(char *, uint64_t))_swiftEmptyArrayStorage;
    while (v210 < *(void *)(v211 + 16))
    {
      uint64_t v213 = *(char **)&v281[8 * v210];
      uint64_t v214 = *((void *)v213 + 2);
      if (v214)
      {
        v292 = (void *)v210;
        swift_bridgeObjectRetain();
        uint64_t v282 = v213;
        uint64_t v215 = v213 + 80;
        do
        {
          if (*v215 == 1)
          {
            uint64_t v218 = *((void *)v215 - 6);
            uint64_t v217 = *((void *)v215 - 5);
            uint64_t v219 = *((void *)v215 - 3);
            uint64_t v221 = *((void *)v215 - 2);
            uint64_t v220 = *((void *)v215 - 1);
            v294 = (void *)*((void *)v215 - 4);
            uint64_t v295 = v217;
            unint64_t v293 = v220;
            sub_10028742C(v218, v217, (uint64_t)v294, v219, v221, v220, 1);
            swift_retain();
            swift_bridgeObjectRetain();
            if (swift_isUniquelyReferenced_nonNull_native()) {
              char v222 = v297;
            }
            else {
              char v222 = (void (*)(char *, uint64_t))sub_10030B32C(0, *((void *)v297 + 2) + 1, 1, v297);
            }
            unint64_t v224 = *((void *)v222 + 2);
            unint64_t v223 = *((void *)v222 + 3);
            if (v224 >= v223 >> 1) {
              char v222 = (void (*)(char *, uint64_t))sub_10030B32C((void *)(v223 > 1), v224 + 1, 1, v222);
            }
            *((void *)v222 + 2) = v224 + 1;
            v297 = v222;
            *((void *)v222 + v224 + 4) = v292;
            swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v300 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v300 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v212 = sub_100308F88(0, v212[2] + 1, 1, v212);
            }
            unint64_t v226 = v212[2];
            unint64_t v225 = v212[3];
            uint64_t v227 = v212;
            if (v226 >= v225 >> 1) {
              uint64_t v227 = sub_100308F88((void *)(v225 > 1), v226 + 1, 1, v212);
            }
            long long v212 = v227;
            v227[2] = v226 + 1;
            uint64_t v216 = &v227[2 * v226];
            v216[4] = v219;
            v216[5] = v221;
            swift_release();
            sub_1002874C8(v218, v295, (uint64_t)v294, v219, v221, v293, 1);
          }
          v215 += 56;
          --v214;
        }
        while (v214);
        swift_bridgeObjectRelease();
        uint64_t v211 = v283;
        unint64_t v210 = (unint64_t)v292;
      }
      if ((void (*)(char *, void *))++v210 == v284)
      {
        swift_bridgeObjectRelease();
        goto LABEL_105;
      }
    }
    goto LABEL_108;
  }
  swift_bridgeObjectRelease();
  long long v212 = _swiftEmptyArrayStorage;
LABEL_105:
  v292 = v212;
  sub_100094134(&qword_100911F38);
  type metadata accessor for REMSuggestedLocation();
  (*(void (**)(char *, void, uint64_t))(v251 + 104))(v252, enum case for REMSuggestedLocation.LocationValue.notAvailable(_:), v253);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v302 = REMSuggestedLocation.__allocating_init(_:)();
  uint64_t v228 = Series.__allocating_init(_:index:defaultValue:)();
  uint64_t v302 = 0;
  unint64_t v303 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v229 = (void *)Series.__allocating_init(_:index:defaultValue:)();
  uint64_t v230 = (uint64_t)v285;
  REMSuggestedAttributeInputDataFrame.location.getter();
  swift_retain();
  uint64_t v231 = v274;
  uint64_t v295 = v228;
  MultiClassificationMetric.init<A>(groundTruth:prediction:)();
  uint64_t v232 = MultiClassificationMetric.correctIndices.getter();
  __chkstk_darwin(v232);
  uint64_t v244 = v229;
  v297 = (void (*)(char *, uint64_t))v229;
  uint64_t v233 = (uint64_t)v248;
  v294 = sub_100225098((void (*)(void *__return_ptr, uint64_t *))sub_10028738C, (uint64_t)(&v245 - 4), v232);
  swift_bridgeObjectRelease();
  uint64_t v234 = MultiClassificationMetric.incorrectIndices.getter();
  __chkstk_darwin(v234);
  *(&v245 - 4) = v230;
  *(&v245 - 3) = v228;
  unint64_t v243 = v229;
  sub_100225098((void (*)(void *__return_ptr, uint64_t *))sub_1002873CC, (uint64_t)(&v245 - 6), v234);
  unint64_t v293 = v233;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v279)(v254, v231, v275);
  REMSuggestedAttributesAccuracy.init(correctSample:incorrectSample:metrics:)();
  type metadata accessor for Analytics();
  sub_100094134((uint64_t *)&unk_10090A420);
  uint64_t v235 = swift_initStackObject();
  *(_OWORD *)(v235 + 16) = xmmword_100778370;
  *(void *)(v235 + 32) = 0xD000000000000014;
  *(void *)(v235 + 40) = 0x80000001007D00C0;
  MultiClassificationMetric.accuracy.getter();
  *(NSNumber *)(v235 + 48) = Double._bridgeToObjectiveC()();
  strcpy((char *)(v235 + 56), "list_accuracy");
  *(_WORD *)(v235 + 70) = -4864;
  MultiClassificationMetric.accuracy.getter();
  *(NSNumber *)(v235 + 72) = Double._bridgeToObjectiveC()();
  *(void *)(v235 + 80) = 0xD000000000000011;
  *(void *)(v235 + 88) = 0x80000001007D00E0;
  MultiClassificationMetric.accuracy.getter();
  *(NSNumber *)(v235 + 96) = Double._bridgeToObjectiveC()();
  *(void *)(v235 + 104) = 0x616E5F6C65646F6DLL;
  *(void *)(v235 + 112) = 0xEA0000000000656DLL;
  sub_1000963CC(0, (unint64_t *)&unk_100910040);
  *(void *)(v235 + 120) = NSString.init(stringLiteral:)();
  sub_1002ED104(v235);
  static Analytics.postEvent(_:payload:duration:)();
  swift_bridgeObjectRelease();
  uint64_t v237 = v260;
  uint64_t v236 = v261;
  int v238 = *(void (**)(char *, char *, uint64_t))(v260 + 16);
  v238(v256, v271, v261);
  v238(v257, v269, v236);
  v238(v258, v267, v236);
  REMSuggestedAttributeInputDataFrame.size.getter();
  uint64_t v296 = (void (*)(char *, uint64_t, uint64_t))REMSuggestedAttributeInputDataFrame.size.getter();
  os_log_type_t v239 = v255;
  Date.init()();
  Date.timeIntervalSince(_:)();
  v298 = *(void **)(v288 + 8);
  v288 += 8;
  ((void (*)(char *, uint64_t))v298)(v239, v287);
  unint64_t v243 = v272;
  REMSuggestedAttributesTrainer.Result.CoreBehavior.init(listAccuracy:dueDayOfWeekAccuracy:alarmLocationAccuracy:minedRuleCount:filteredOutRulesCount:distinctListCount:trainingSetCount:validationSetCount:trainingDuration:topRules:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unsigned int v240 = *(void (**)(char *, uint64_t))(v237 + 8);
  v240(v267, v236);
  uint64_t v241 = *(void (**)(char *, uint64_t))(v266 + 8);
  uint64_t v242 = v275;
  v241(v274, v275);
  v240(v269, v236);
  v241(v268, v242);
  v240(v271, v236);
  v241(v270, v242);
  (*(void (**)(char *, uint64_t))(v290 + 8))(v289, v286);
  ((void (*)(char *, uint64_t))v298)(v291, v287);
}

uint64_t sub_100280B6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000BF710(a1, a2, (uint64_t *)&unk_100909E50);
}

uint64_t sub_100280BA0@<X0>(uint64_t a1@<X3>, void *a2@<X8>)
{
  unint64_t v4 = REMSuggestedAttributeInputDataFrame.iloc(_:)();
  if (a1)
  {
    dispatch thunk of Series.iloc(_:)();
    uint64_t v5 = v8;
    a1 = v9;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_1004AA4D0(v4, v5, a1, 0, 0);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t sub_100280C54@<X0>(void *a1@<X8>)
{
  REMSuggestedAttributeInputDataFrame.iloc(_:)();
  uint64_t v2 = REMSuggestedAttributeInput.description.getter();
  unint64_t v4 = v3;
  swift_release();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 2314;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  dispatch thunk of Series.iloc(_:)();
  String.append(_:)(v8);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0x5D7473694C3A565BLL;
  a1[1] = v9;
  return result;
}

uint64_t sub_100280D38@<X0>(Swift::Int a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, void *a4@<X8>)
{
  _StringGuts.grow(_:)(a1);
  swift_bridgeObjectRelease();
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  REMSuggestedAttributeInputDataFrame.iloc(_:)();
  uint64_t v7 = REMSuggestedAttributeInput.description.getter();
  uint64_t v9 = v8;
  swift_release();
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 2314;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  dispatch thunk of Series.iloc(_:)();
  String.append(_:)(v13);
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v14;
  a4[1] = v15;
  return result;
}

uint64_t sub_100280E30@<X0>(Swift::Int a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, void *a4@<X8>, uint64_t (*a5)(uint64_t))
{
  _StringGuts.grow(_:)(a1);
  swift_bridgeObjectRelease();
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  REMSuggestedAttributeInputDataFrame.iloc(_:)();
  uint64_t v8 = REMSuggestedAttributeInput.description.getter();
  Swift::String v10 = v9;
  swift_release();
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 540945696;
  v12._object = (void *)0xE400000000000000;
  String.append(_:)(v12);
  uint64_t v13 = dispatch thunk of Series.iloc(_:)();
  uint64_t v14 = a5(v13);
  uint64_t v16 = v15;
  swift_release();
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 2314;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  dispatch thunk of Series.iloc(_:)();
  String.append(_:)(v20);
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v21;
  a4[1] = v22;
  return result;
}

uint64_t sub_100280F88()
{
  REMSuggestedAttributeInputDataFrame.iloc(_:)();
  REMSuggestedAttributeInput.list.getter();
  swift_release();
  char v0 = REMSuggestedList.isValid.getter();
  swift_release();
  return v0 & 1;
}

uint64_t sub_100280FEC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v19 = a3;
  v18[1] = a1;
  uint64_t v4 = sub_100094134(&qword_100911F40);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134(&qword_100911ED0);
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  Swift::String v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a2, v8, v10);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_getKeyPath();
  PartialOverride.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t result = REMkNNByTitleEmbedding.predict(for:neighborCountToConsider:)();
  if (v14) {
    uint64_t v15 = result;
  }
  else {
    uint64_t v15 = 0;
  }
  unint64_t v16 = 0xE000000000000000;
  if (v14) {
    unint64_t v16 = v14;
  }
  Swift::String v17 = v19;
  uint64_t *v19 = v15;
  v17[1] = v16;
  return result;
}

uint64_t sub_10028120C@<X0>(void *a1@<X8>)
{
  REMSuggestedAttributeInputDataFrame.iloc(_:)();
  uint64_t v2 = REMSuggestedAttributeInput.description.getter();
  uint64_t v4 = v3;
  swift_release();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0x5D7473694C3A565BLL;
  a1[1] = v7;
  return result;
}

uint64_t sub_1002812A8@<X0>(void *a1@<X8>)
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  REMSuggestedAttributeInputDataFrame.iloc(_:)();
  uint64_t v2 = REMSuggestedAttributeInput.description.getter();
  uint64_t v4 = v3;
  swift_release();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 540945696;
  v6._object = (void *)0xE400000000000000;
  String.append(_:)(v6);
  swift_retain();
  dispatch thunk of Series.iloc(_:)();
  swift_release();
  uint64_t v7 = REMSuggestedList.description.getter();
  uint64_t v9 = v8;
  swift_release();
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0x5D7473694C3A585BLL;
  a1[1] = 0xE800000000000000;
  return result;
}

uint64_t sub_1002813D8()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REMSuggestedAttributesHashtag()
{
  return self;
}

uint64_t sub_100281434(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10028147C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 16);
  unint64_t v3 = v2 - 2;
  if (v2 >= 2)
  {
    type metadata accessor for MersenneTwister();
    sub_100281434(&qword_100911E40, (void (*)(uint64_t))&type metadata accessor for MersenneTwister);
    unint64_t v4 = 0;
    while (1)
    {
      uint64_t v6 = dispatch thunk of RandomNumberGenerator.next()();
      uint64_t v7 = ((unint64_t)v6 * (unsigned __int128)v2) >> 64;
      if (v2 > v6 * v2)
      {
        unint64_t v8 = -(uint64_t)v2 % v2;
        if (v8 > v6 * v2)
        {
          do
            uint64_t v9 = dispatch thunk of RandomNumberGenerator.next()();
          while (v8 > v9 * v2);
          uint64_t v7 = ((unint64_t)v9 * (unsigned __int128)v2) >> 64;
        }
      }
      unint64_t v10 = v4 + v7;
      if (__OFADD__(v4, v7)) {
        break;
      }
      if (v4 != v10)
      {
        unint64_t v11 = *(void *)(v1 + 16);
        if (v4 >= v11) {
          goto LABEL_19;
        }
        if (v10 >= v11) {
          goto LABEL_20;
        }
        uint64_t v12 = *(void *)(v1 + 32 + 8 * v4);
        uint64_t v13 = *(void *)(v1 + 32 + 8 * v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v1 = sub_1001F546C(v1);
        }
        unint64_t v14 = *(void *)(v1 + 16);
        if (v4 >= v14) {
          goto LABEL_21;
        }
        *(void *)(v1 + 32 + 8 * v4) = v13;
        if (v10 >= v14) {
          goto LABEL_22;
        }
        *(void *)(v1 + 32 + 8 * v10) = v12;
        uint64_t *v15 = v1;
      }
      --v2;
      if (v4++ == v3) {
        return;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

uint64_t sub_100281610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2)
  {
    if (a6) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!a6) {
    return 0;
  }
  if (a1 == a5 && a2 == a6 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v12 & 1) != 0))
  {
LABEL_8:
    if (a4)
    {
      if (a8 && (a3 == a7 && a4 == a8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void *sub_1002816C4(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v3) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_1001DE058(0, v3 & ~(v3 >> 63), 0);
    if (v3 < 0) {
      break;
    }
    uint64_t v5 = 0;
    while (v3 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      uint64_t v8 = sub_1004AC51C(v6, a2);
      uint64_t v10 = v9;

      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_1001DE058(v11 > 1, v12 + 1, 1);
      }
      ++v5;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      if (v3 == v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void *sub_100281828(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v3) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_1001DE058(0, v3 & ~(v3 >> 63), 0);
    if (v3 < 0) {
      break;
    }
    uint64_t v5 = 0;
    while (v3 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      sub_100363770(v6);
      if (v1)
      {
        swift_release();

        return _swiftEmptyArrayStorage;
      }
      uint64_t v9 = v8;
      id v10 = [v8 iCalendarDescription];

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1) {
        sub_1001DE058(v14 > 1, v15 + 1, 1);
      }
      ++v5;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      unint64_t v16 = &_swiftEmptyArrayStorage[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
      if (v3 == v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1002819CC(void *a1)
{
  uint64_t v3 = type metadata accessor for REMSuggestedLocation.LocationValue();
  uint64_t v158 = *(void *)(v3 - 8);
  uint64_t v159 = v3;
  __chkstk_darwin(v3);
  uint64_t v157 = (char *)v134 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_t v148 = (os_log_t)type metadata accessor for Calendar();
  Class isa = v148[-1].isa;
  __chkstk_darwin(v148);
  uint64_t v146 = (char *)v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v6 - 8);
  unint64_t v153 = (char *)v134 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = type metadata accessor for DateComponents();
  uint64_t v154 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  uint64_t v149 = (char *)v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v150 = (uint8_t *)v134 - v10;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  unint64_t v152 = (unint64_t)v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v161 = (uint64_t)v134 - v14;
  __chkstk_darwin(v15);
  Swift::String v17 = (char *)v134 - v16;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v164 = v18;
  uint64_t v165 = v19;
  __chkstk_darwin(v18);
  uint64_t v156 = (char *)v134 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v163 = (char *)v134 - v22;
  uint64_t v23 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v23 - 8);
  uint64_t v151 = (char *)v134 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)v134 - v26;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)v134 - v29;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v175 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v145 = (char *)v134 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v160 = (char *)v134 - v34;
  __chkstk_darwin(v35);
  uint64_t v162 = (char *)v134 - v36;
  __chkstk_darwin(v37);
  unint64_t v167 = (char *)v134 - v38;
  *(void *)&long long v170 = 0x696669746E656469;
  *((void *)&v170 + 1) = 0xEA00000000007265;
  uint64_t v39 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v166 = a1;
  id v40 = [a1 __swift_objectForKeyedSubscript:v39];
  swift_unknownObjectRelease();
  if (v40)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v170 = 0u;
    long long v171 = 0u;
  }
  sub_100096408((uint64_t)&v170, (uint64_t)&v172, &qword_100908190);
  uint64_t v41 = v175;
  if (!v174)
  {
    sub_1000966BC((uint64_t)&v172, &qword_100908190);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v30, 1, 1, v31);
    goto LABEL_9;
  }
  uint64_t v143 = v1;
  int v42 = swift_dynamicCast();
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  v43(v30, v42 ^ 1u, 1, v31);
  uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  if (v44(v30, 1, v31) == 1)
  {
LABEL_9:
    sub_1000966BC((uint64_t)v30, (uint64_t *)&unk_100909E50);
    uint64_t v49 = self;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v51 = String._bridgeToObjectiveC()();
    [v49 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v51];

    swift_willThrow();
    return ObjCClassFromMetadata;
  }
  Class v142 = v43;
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v46 = v30;
  uint64_t v144 = v31;
  uint64_t v141 = v41 + 32;
  uint64_t v47 = v45;
  v45(v167, v46, v31);
  strcpy((char *)&v170, "creationDate");
  BYTE13(v170) = 0;
  HIWORD(v170) = -5120;
  id v48 = [v166 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v48)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v170 = 0u;
    long long v171 = 0u;
  }
  uint64_t v52 = v164;
  uint64_t v53 = v165;
  sub_100096408((uint64_t)&v170, (uint64_t)&v172, &qword_100908190);
  uint64_t v54 = v175;
  if (!v174)
  {
    sub_1000966BC((uint64_t)&v172, &qword_100908190);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v17, 1, 1, v52);
    goto LABEL_16;
  }
  int v55 = swift_dynamicCast();
  uint64_t v138 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
  uint64_t v137 = v53 + 56;
  v138(v17, v55 ^ 1u, 1, v52);
  uint64_t v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  uint64_t v140 = v53 + 48;
  double v139 = v56;
  if (v56((uint64_t)v17, 1, v52) == 1)
  {
LABEL_16:
    sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909A40);
    uint64_t v58 = self;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v59 = String._bridgeToObjectiveC()();
    [v58 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v59];

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v167, v144);
    return ObjCClassFromMetadata;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v163, v17, v52);
  *(void *)&long long v170 = 0x6564692E7473696CLL;
  *((void *)&v170 + 1) = 0xEF7265696669746ELL;
  id v57 = [v166 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v57)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v170 = 0u;
    long long v171 = 0u;
  }
  sub_100096408((uint64_t)&v170, (uint64_t)&v172, &qword_100908190);
  uint64_t v60 = v175;
  if (!v174)
  {
    sub_1000966BC((uint64_t)&v172, &qword_100908190);
    uint64_t v61 = v144;
    v142(v27, 1, 1, v144);
    goto LABEL_23;
  }
  uint64_t v61 = v144;
  int v62 = swift_dynamicCast();
  v142(v27, v62 ^ 1u, 1, v61);
  if (v44(v27, 1, v61) == 1)
  {
LABEL_23:
    sub_1000966BC((uint64_t)v27, (uint64_t *)&unk_100909E50);
    double v64 = self;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v65 = String._bridgeToObjectiveC()();
    id v66 = [v64 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v65];

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v165 + 8))(v163, v52);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v167, v61);
    return ObjCClassFromMetadata;
  }
  v47(v162, v27, v61);
  *(void *)&long long v170 = 0x656C746974;
  *((void *)&v170 + 1) = 0xE500000000000000;
  id v63 = [v166 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v63)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v170 = 0u;
    long long v171 = 0u;
  }
  sub_100096408((uint64_t)&v170, (uint64_t)&v172, &qword_100908190);
  if (v174)
  {
    if (swift_dynamicCast())
    {
      uint64_t v135 = (uint64_t)v168;
      unint64_t v67 = v169;
      goto LABEL_30;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v172, &qword_100908190);
  }
  uint64_t v135 = 0;
  unint64_t v67 = 0xE000000000000000;
LABEL_30:
  v134[2] = v67;
  type metadata accessor for REMSuggestedList();
  uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  unint64_t v69 = v151;
  uint64_t v70 = v144;
  uint64_t v141 = v60 + 16;
  uint64_t v136 = v68;
  v68(v151, v162, v144);
  v142(v69, 0, 1, v70);
  uint64_t v151 = (char *)REMSuggestedList.__allocating_init(listUUID:)();
  *(void *)&long long v170 = 0x6D616E2E7473696CLL;
  *((void *)&v170 + 1) = 0xE900000000000065;
  unint64_t v71 = &selRef_willSave;
  id v72 = [v166 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v72)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v170 = 0u;
    long long v171 = 0u;
  }
  uint64_t v73 = v143;
  uint64_t v74 = v165;
  uint64_t v75 = v161;
  sub_100096408((uint64_t)&v170, (uint64_t)&v172, &qword_100908190);
  if (v174)
  {
    if (swift_dynamicCast())
    {
      Class v142 = v168;
      unint64_t v76 = v169;
      goto LABEL_38;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v172, &qword_100908190);
  }
  Class v142 = 0;
  unint64_t v76 = 0xE000000000000000;
LABEL_38:
  v134[1] = v76;
  uint64_t v172 = 0x64656767616C66;
  unint64_t v173 = 0xE700000000000000;
  id v77 = [v166 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v77)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v170 = 0u;
    long long v171 = 0u;
  }
  sub_100096408((uint64_t)&v170, (uint64_t)&v172, &qword_100908190);
  if (v174)
  {
    if (swift_dynamicCast())
    {
      uint64_t v143 = (uint64_t)v168;
      goto LABEL_46;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v172, &qword_100908190);
  }
  uint64_t v143 = 0;
LABEL_46:
  uint64_t v172 = 0x797469726F697270;
  unint64_t v173 = 0xE800000000000000;
  id v78 = [v166 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v78)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v170 = 0u;
    long long v171 = 0u;
  }
  sub_100096408((uint64_t)&v170, (uint64_t)&v172, &qword_100908190);
  if (v174)
  {
    if (swift_dynamicCast())
    {
      uint64_t v79 = (uint64_t)v168;
      goto LABEL_54;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v172, &qword_100908190);
  }
  uint64_t v79 = 0;
LABEL_54:
  *(void *)&long long v170 = 0x65746144657564;
  *((void *)&v170 + 1) = 0xE700000000000000;
  id v80 = [v166 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v80)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v170 = 0u;
    long long v171 = 0u;
  }
  sub_100096408((uint64_t)&v170, (uint64_t)&v172, &qword_100908190);
  if (v174)
  {
    uint64_t v81 = v164;
    uint64_t v82 = swift_dynamicCast() ^ 1;
    uint64_t v83 = v75;
    uint64_t v84 = v81;
    unint64_t v71 = &selRef_willSave;
  }
  else
  {
    sub_1000966BC((uint64_t)&v172, &qword_100908190);
    uint64_t v83 = v75;
    uint64_t v82 = 1;
    uint64_t v84 = v164;
  }
  v138((char *)v83, v82, 1, v84);
  uint64_t v172 = 0x7961446C6C61;
  unint64_t v173 = 0xE600000000000000;
  id v85 = [v166 v71[83] _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v85)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v170 = 0u;
    long long v171 = 0u;
  }
  sub_100096408((uint64_t)&v170, (uint64_t)&v172, &qword_100908190);
  if (v174)
  {
    if (swift_dynamicCast())
    {
      uint64_t v86 = v168;
      goto LABEL_68;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v172, &qword_100908190);
  }
  uint64_t v86 = 0;
LABEL_68:
  uint64_t v172 = 0x656E6F5A656D6974;
  unint64_t v173 = 0xE800000000000000;
  id v87 = [v166 v71[83] _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v87)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v170 = 0u;
    long long v171 = 0u;
  }
  uint64_t v88 = v152;
  unint64_t v152 = v79;
  sub_100096408((uint64_t)&v170, (uint64_t)&v172, &qword_100908190);
  if (v174)
  {
    if (swift_dynamicCast()) {
      unint64_t v89 = v169;
    }
    else {
      unint64_t v89 = 0;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v172, &qword_100908190);
    unint64_t v89 = 0;
  }
  sub_1000BF710(v75, v88, (uint64_t *)&unk_100909A40);
  uint64_t v90 = v164;
  if (v139(v88, 1, v164) == 1)
  {
    Class v91 = 0;
  }
  else
  {
    Class v91 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v88, v90);
  }
  if (v89)
  {
    NSString v92 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v92 = 0;
  }
  uint64_t v93 = v167;
  uint64_t v94 = v154;
  uint64_t v95 = (uint64_t)v153;
  id v96 = [self dueDateComponentsWithDueDate:v91 isAllDay:v86 timeZoneName:v92];

  if (!v96)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v95, 1, 1, v155);
    goto LABEL_88;
  }
  uint64_t v97 = v149;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v98 = *(void (**)(uint64_t, char *, uint64_t))(v94 + 32);
  uint64_t v99 = v155;
  v98(v95, v97, v155);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v94 + 56))(v95, 0, 1, v99);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v95, 1, v99) == 1)
  {
LABEL_88:
    sub_1000966BC(v95, (uint64_t *)&unk_100911810);
    type metadata accessor for REMSuggestedWeekDay();
    static REMSuggestedWeekDay.nilValue.getter();
    swift_allocObject();
    uint64_t v154 = REMSuggestedWeekDay.init(_:)();
    long long v103 = v163;
    goto LABEL_89;
  }
  v98((uint64_t)v150, (char *)v95, v99);
  uint64_t v100 = v146;
  static Calendar.current.getter();
  DateComponents.dayOfWeek(with:)();
  char v102 = v101;
  (*((void (**)(char *, os_log_t))isa + 1))(v100, v148);
  if (v102)
  {
    type metadata accessor for REMSuggestedWeekDay();
    static REMSuggestedWeekDay.nilValue.getter();
  }
  long long v103 = v163;
  type metadata accessor for REMSuggestedWeekDay();
  swift_allocObject();
  uint64_t v154 = REMSuggestedWeekDay.init(_:)();
  (*(void (**)(uint8_t *, uint64_t))(v94 + 8))(v150, v99);
LABEL_89:
  type metadata accessor for ClassificationLabel();
  static ClassificationLabel.nilLabel.getter();
  type metadata accessor for REMSuggestedContact();
  swift_allocObject();
  uint64_t v155 = REMSuggestedContact.init(stringLiteral:)();
  strcpy((char *)&v170, "contactHandles");
  HIBYTE(v170) = -18;
  id v104 = [v166 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v104)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v170 = 0u;
    long long v171 = 0u;
  }
  sub_100096408((uint64_t)&v170, (uint64_t)&v172, &qword_100908190);
  if (!v174)
  {
    sub_1000966BC((uint64_t)&v172, &qword_100908190);
    goto LABEL_101;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_101:
    double v125 = v160;
    uint64_t v111 = v93;
    goto LABEL_102;
  }
  uint64_t v106 = (uint64_t)v168;
  unint64_t v105 = v169;
  sub_100097E38((uint64_t)v168, v169);
  Class v107 = Data._bridgeToObjectiveC()().super.isa;
  id v108 = [self representationFromData:v107];
  sub_100097F34(v106, v105);

  if (v108)
  {
    swift_allocObject();
    id v109 = v108;
    uint64_t v110 = REMSuggestedContact.init(_:)();
    uint64_t v111 = v167;
    if (v73)
    {
      id v166 = v109;
      if (qword_100907208 != -1) {
        swift_once();
      }
      uint64_t v112 = type metadata accessor for Logger();
      sub_10008E2DC(v112, (uint64_t)qword_100911D60);
      uint64_t v113 = v145;
      uint64_t v93 = v111;
      uint64_t v114 = v111;
      uint64_t v115 = v144;
      v136(v145, v114, v144);
      uint64_t v116 = Logger.logObject.getter();
      os_log_type_t v117 = static os_log_type_t.error.getter();
      int v118 = v117;
      if (os_log_type_enabled(v116, v117))
      {
        uint64_t v119 = (uint8_t *)swift_slowAlloc();
        unint64_t v153 = (char *)swift_slowAlloc();
        uint64_t v172 = (uint64_t)v153;
        LODWORD(v149) = v118;
        uint64_t v150 = v119;
        *(_DWORD *)uint64_t v119 = 136315138;
        long long v103 = v163;
        sub_100281434((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
        os_log_t v148 = v116;
        uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v170 = sub_1000C51B8(v120, v121, &v172);
        id v122 = v167;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v123 = v115;
        uint64_t v111 = v122;
        (*(void (**)(char *, uint64_t))(v175 + 8))(v113, v123);
        os_log_t v124 = v148;
        _os_log_impl((void *)&_mh_execute_header, v148, (os_log_type_t)v149, "Invalid REMContactRepresentation when initializing REMSuggestedContact {reminderIdentifier: %s}", v150, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();

        sub_100097F34(v106, v105);
        double v125 = v160;
        goto LABEL_102;
      }
      sub_100097F34(v106, v105);

      (*(void (**)(char *, uint64_t))(v175 + 8))(v113, v115);
      swift_errorRelease();

      goto LABEL_101;
    }
    uint64_t v133 = v110;
    swift_release();
    sub_100097F34(v106, v105);

    uint64_t v155 = v133;
    double v125 = v160;
  }
  else
  {
    sub_100097F34(v106, v105);
    uint64_t v111 = v167;
    double v125 = v160;
  }
LABEL_102:
  double v126 = v111;
  uint64_t v127 = v144;
  v136(v125, v126, v144);
  uint64_t v128 = v164;
  uint64_t v129 = v165;
  (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v156, v103, v164);
  type metadata accessor for REMSuggestedLocation();
  (*(void (**)(char *, void, uint64_t))(v158 + 104))(v157, enum case for REMSuggestedLocation.LocationValue.notAvailable(_:), v159);
  REMSuggestedLocation.__allocating_init(_:)();
  if ((v152 & 0x8000000000000000) == 0)
  {
    uint64_t v130 = v103;
    type metadata accessor for REMSuggestedAttributeReminderDataSource();
    swift_allocObject();
    uint64_t ObjCClassFromMetadata = REMSuggestedAttributeReminderDataSource.init(title:reminderIdentifier:creationDate:list:listName:dueDayOfWeek:location:flagged:priority:tags:contact:recurrences:)();
    unint64_t v131 = *(void (**)(char *, uint64_t))(v175 + 8);
    v131(v162, v127);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v128);
    v131(v167, v127);
    sub_1000966BC(v161, (uint64_t *)&unk_100909A40);
    return ObjCClassFromMetadata;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100283560(uint64_t a1, uint8_t *a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v144 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t i = type metadata accessor for UUID();
  unint64_t v8 = *(void *)(i - 8);
  __chkstk_darwin(i);
  os_log_t v148 = (char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = _s10PredicatesOMa(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = (void *)sub_10038F1F0();
  sub_100286910((uint64_t)v12, _s10PredicatesOMa);
  id v14 = [objc_allocWithZone((Class)NSFetchRequest) init];
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  unint64_t v15 = (unint64_t)[(id)swift_getObjCClassFromMetadata() entity];
  [v14 setEntity:v15];

  [v14 setAffectedStores:0];
  [v14 setPredicate:v13];
  [v14 setResultType:2];

  [v14 setFetchBatchSize:a1];
  unint64_t v16 = (unsigned __int128)(a1 * (__int128)5) >> 64;
  uint64_t v133 = (uint64_t *)a1;
  if (v16 == (5 * a1) >> 63)
  {
    unint64_t v152 = a2;
    unint64_t v153 = v2;
    unint64_t v146 = i;
    [v14 setFetchLimit:];
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10077A530;
    *(void *)(inited + 32) = swift_getKeyPath();
    *(void *)&long long v154 = inited;
    specialized Array._endMutation()();
    uint64_t v18 = v154;
    *(void *)&long long v158 = _swiftEmptyArrayStorage;
    sub_1001DE058(0, 1, 0);
    uint64_t v19 = v158;
    id v136 = v14;
    *(void *)&long long v143 = v8;
    if ((v18 & 0xC000000000000001) != 0)
    {
      uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v20 = *(void *)(v18 + 32);
      swift_retain();
    }
    uint64_t v21 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v22)
    {
LABEL_143:
      *(void *)&long long v154 = 0;
      *((void *)&v154 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v130._object = (void *)0x80000001007CAF70;
      v130._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v130);
      uint64_t v156 = v20;
      sub_100094134((uint64_t *)&unk_10090B070);
      _print_unlocked<A, B>(_:_:)();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_144;
    }
    unint64_t v15 = v21;
    unint64_t v8 = v22;
    swift_release();
    a1 = *(void *)(v19 + 16);
    unint64_t v16 = *(void *)(v19 + 24);
    unint64_t i = a1 + 1;
    if (a1 < v16 >> 1) {
      goto LABEL_7;
    }
  }
  else
  {
LABEL_139:
    __break(1u);
  }
  sub_1001DE058(v16 > 1, i, 1);
  uint64_t v19 = v158;
LABEL_7:
  *(void *)(v19 + 16) = i;
  uint64_t v23 = v19 + 16 * a1;
  *(void *)(v23 + 32) = v15;
  *(void *)(v23 + 40) = v8;
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v25 = v136;
  [v136 setRelationshipKeyPathsForPrefetching:isa];

  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_10077B710;
  if (qword_1009073E8 != -1) {
    swift_once();
  }
  uint64_t v27 = (void *)qword_1009421A8;
  *(void *)(v26 + 32) = qword_1009421A8;
  uint64_t v28 = qword_1009073F8;
  id v29 = v27;
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)qword_1009421B8;
  *(void *)(v26 + 40) = qword_1009421B8;
  *(void *)&long long v154 = v26;
  specialized Array._endMutation()();
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  id v31 = v30;
  Class v32 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v25 setSortDescriptors:v32];

  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_100783980;
  *(void *)(v33 + 32) = swift_getKeyPath();
  *(void *)(v33 + 40) = swift_getKeyPath();
  *(void *)(v33 + 48) = swift_getKeyPath();
  *(void *)(v33 + 56) = swift_getKeyPath();
  *(void *)(v33 + 64) = swift_getKeyPath();
  *(void *)(v33 + 72) = swift_getKeyPath();
  *(void *)(v33 + 80) = swift_getKeyPath();
  *(void *)(v33 + 88) = swift_getKeyPath();
  *(void *)(v33 + 96) = swift_getKeyPath();
  *(void *)(v33 + 104) = swift_getKeyPath();
  *(void *)(v33 + 112) = swift_getKeyPath();
  *(void *)(v33 + 120) = swift_getKeyPath();
  *(void *)&long long v154 = v33;
  specialized Array._endMutation()();
  uint64_t v34 = v154;
  *(void *)&long long v158 = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 12, 0);
  uint64_t v35 = v158;
  for (unint64_t i = 4; i != 16; ++i)
  {
    if ((v34 & 0xC000000000000001) != 0)
    {
      uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v20 = *(void *)(v34 + 8 * i);
      swift_retain();
    }
    uint64_t v36 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v37) {
      goto LABEL_143;
    }
    uint64_t v38 = v36;
    uint64_t v39 = v37;
    *((void *)&v155 + 1) = &type metadata for String;
    swift_release();
    *(void *)&long long v154 = v38;
    *((void *)&v154 + 1) = v39;
    *(void *)&long long v158 = v35;
    unint64_t v41 = *(void *)(v35 + 16);
    unint64_t v40 = *(void *)(v35 + 24);
    if (v41 >= v40 >> 1)
    {
      sub_1001DE1C4(v40 > 1, v41 + 1, 1);
      uint64_t v35 = v158;
    }
    *(void *)(v35 + 16) = v41 + 1;
    sub_10009A1A0(&v154, (_OWORD *)(v35 + 32 * v41 + 32));
  }
  swift_bridgeObjectRelease();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v25 setPropertiesToFetch:v42];

  sub_1000963CC(0, &qword_10090E4F0);
  unint64_t v43 = v153;
  unint64_t v44 = NSManagedObjectContext.fetch<A>(_:)();
  if (v43)
  {

    return;
  }
  uint64_t v135 = 0;
  unint64_t v160 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v147 = v44;
  if (v44 >> 62)
  {
LABEL_142:
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v46 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v47 = (uint64_t)v144;
  unint64_t v8 = v146;
  if (!v46)
  {
    Class v142 = &_swiftEmptySetSingleton;
LABEL_135:
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v15 = 0;
  unint64_t v151 = v147 & 0xC000000000000001;
  uint64_t v141 = v147 & 0xFFFFFFFFFFFFFF8;
  unint64_t v140 = v147 + 32;
  uint64_t v150 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v143 + 56);
  uint64_t v145 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))(v143 + 48);
  uint64_t v138 = (void (**)(char *, uint64_t, unint64_t))(v143 + 32);
  uint64_t v137 = (void (**)(char *, unint64_t))(v143 + 8);
  Class v132 = (char *)&v158 + 8;
  Class v142 = &_swiftEmptySetSingleton;
  a1 = (uint64_t)&qword_100908190;
  *(void *)&long long v45 = 136446466;
  long long v143 = v45;
  double v139 = (char *)&type metadata for Any + 8;
  *(void *)&long long v45 = 136315138;
  long long v131 = v45;
  uint64_t v149 = v46;
  while (1)
  {
    if (v151)
    {
      id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      unint64_t v16 = *(void *)(v141 + 16);
      if (v15 >= v16) {
        goto LABEL_138;
      }
      id v49 = *(id *)(v140 + 8 * v15);
    }
    uint64_t v50 = v49;
    BOOL v51 = __OFADD__(v15++, 1);
    if (v51)
    {
      __break(1u);
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }
    *(void *)&long long v158 = 0x6564692E7473696CLL;
    *((void *)&v158 + 1) = 0xEF7265696669746ELL;
    unint64_t i = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v52 = [v50 __swift_objectForKeyedSubscript:i];
    swift_unknownObjectRelease();
    if (v52)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v158 = 0u;
      long long v159 = 0u;
    }
    sub_100096408((uint64_t)&v158, (uint64_t)&v154, &qword_100908190);
    if (!*((void *)&v155 + 1))
    {
      sub_1000966BC((uint64_t)&v154, &qword_100908190);
      (*v150)(v47, 1, 1, v8);
LABEL_41:
      unint64_t v153 = v15;
      uint64_t v55 = v47;
      sub_1000966BC(v47, (uint64_t *)&unk_100909E50);
      if (qword_100907208 != -1) {
        swift_once();
      }
      uint64_t v56 = type metadata accessor for Logger();
      sub_10008E2DC(v56, (uint64_t)qword_100911D60);
      id v57 = v50;
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = swift_slowAlloc();
        *(void *)&long long v158 = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = v143;
        *(void *)(v60 + 4) = sub_1000C51B8(0x6564692E7473696CLL, 0xEF7265696669746ELL, (uint64_t *)&v158);
        *(_WORD *)(v60 + 12) = 2082;
        *(void *)&long long v154 = 0x6564692E7473696CLL;
        *((void *)&v154 + 1) = 0xEF7265696669746ELL;
        id v61 = [v57 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
        swift_unknownObjectRelease();
        if (v61)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v154 = 0u;
          long long v155 = 0u;
        }
        a1 = (uint64_t)&qword_100908190;
        sub_100094134(&qword_100908190);
        uint64_t v62 = Optional.descriptionOrNil.getter();
        unint64_t i = v63;
        sub_1000966BC((uint64_t)&v154, &qword_100908190);
        *(void *)(v60 + 14) = sub_1000C51B8(v62, i, (uint64_t *)&v158);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Unexpected nil %{public}s in fetched reminder dictionary {value: %{public}s}", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v8 = v146;
        id v48 = (void *)v149;
      }
      else
      {

        id v48 = (void *)v149;
        a1 = (uint64_t)&qword_100908190;
      }
      uint64_t v47 = v55;
      unint64_t v15 = v153;
      goto LABEL_27;
    }
    int v53 = swift_dynamicCast();
    (*v150)(v47, v53 ^ 1u, 1, v8);
    if ((*v145)(v47, 1, v8) == 1) {
      goto LABEL_41;
    }
    (*v138)(v148, v47, v8);
    *(void *)&long long v158 = 0x656C746974;
    *((void *)&v158 + 1) = 0xE500000000000000;
    unint64_t i = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v54 = [v50 __swift_objectForKeyedSubscript:i];
    swift_unknownObjectRelease();
    if (v54)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v158 = 0u;
      long long v159 = 0u;
    }
    sub_100096408((uint64_t)&v158, (uint64_t)&v154, &qword_100908190);
    if (!*((void *)&v155 + 1))
    {
      sub_1000966BC((uint64_t)&v154, &qword_100908190);
LABEL_69:
      if (qword_100907208 != -1) {
        swift_once();
      }
      uint64_t v82 = type metadata accessor for Logger();
      sub_10008E2DC(v82, (uint64_t)qword_100911D60);
      id v83 = v50;
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = swift_slowAlloc();
        *(void *)&long long v158 = swift_slowAlloc();
        *(_DWORD *)uint64_t v86 = v143;
        *(void *)(v86 + 4) = sub_1000C51B8(0x656C746974, 0xE500000000000000, (uint64_t *)&v158);
        *(_WORD *)(v86 + 12) = 2080;
        *(void *)&long long v154 = 0x656C746974;
        *((void *)&v154 + 1) = 0xE500000000000000;
        id v87 = [v83 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
        swift_unknownObjectRelease();
        if (v87)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v154 = 0u;
          long long v155 = 0u;
        }
        a1 = (uint64_t)&qword_100908190;
        sub_100094134(&qword_100908190);
        uint64_t v105 = Optional.descriptionOrNil.getter();
        unint64_t i = v106;
        sub_1000966BC((uint64_t)&v154, &qword_100908190);
        *(void *)(v86 + 14) = sub_1000C51B8(v105, i, (uint64_t *)&v158);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "Unexpected nil %{public}s in fetched reminder dictionary {value: %s}", (uint8_t *)v86, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v8 = v146;
        (*v137)(v148, v146);
        id v48 = (void *)v149;
      }
      else
      {

        (*v137)(v148, v8);
        id v48 = (void *)v149;
        a1 = (uint64_t)&qword_100908190;
      }
      uint64_t v47 = (uint64_t)v144;
      goto LABEL_27;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_69;
    }
    unsigned int v134 = v50;
    NSString v65 = (uint8_t *)v156;
    unint64_t v64 = v157;
    uint64_t v66 = UUID.uuidString.getter();
    uint64_t v68 = v67;
    unint64_t v69 = v142;
    uint64_t v70 = v142[2];
    unint64_t v153 = v64;
    unint64_t v152 = v65;
    if (v70)
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v71 = Hasher._finalize()();
      uint64_t v72 = -1 << *((unsigned char *)v69 + 32);
      unint64_t v73 = v71 & ~v72;
      uint64_t v74 = v69 + 7;
      if ((*(void *)((char *)v69 + ((v73 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v73))
      {
        uint64_t v75 = ~v72;
        uint64_t v76 = v69[6];
        while (1)
        {
          id v77 = (void *)(v76 + 32 * v73);
          uint64_t v78 = v77[1];
          if (v78)
          {
            uint64_t v79 = (uint8_t *)v77[2];
            unint64_t i = v77[3];
            BOOL v80 = *v77 == v66 && v78 == v68;
            if (v80 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              if (i)
              {
                BOOL v81 = v79 == v152 && i == v153;
                if (v81 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  break;
                }
              }
            }
          }
          unint64_t v73 = (v73 + 1) & v75;
          if (((*(void *)((char *)v74 + ((v73 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v73) & 1) == 0) {
            goto LABEL_75;
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v8 = v146;
        (*v137)(v148, v146);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v47 = (uint64_t)v144;
        id v48 = (void *)v149;
        a1 = (uint64_t)&qword_100908190;
        goto LABEL_27;
      }
LABEL_75:
      unint64_t v69 = v142;
      swift_bridgeObjectRelease();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v88 = Hasher._finalize()();
    uint64_t v89 = -1 << *((unsigned char *)v69 + 32);
    unint64_t v90 = v88 & ~v89;
    Class v91 = v69 + 7;
    if ((*(void *)((char *)v69 + ((v90 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v90))
    {
      uint64_t v92 = ~v89;
      uint64_t v93 = v69[6];
      while (1)
      {
        uint64_t v94 = (void *)(v93 + 32 * v90);
        uint64_t v95 = v94[1];
        if (v95)
        {
          id v96 = (uint8_t *)v94[2];
          unint64_t i = v94[3];
          BOOL v97 = *v94 == v66 && v95 == v68;
          if (v97 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            if (i)
            {
              BOOL v98 = v96 == v152 && i == v153;
              if (v98 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                break;
              }
            }
          }
        }
        unint64_t v90 = (v90 + 1) & v92;
        if (((*(void *)((char *)v91 + ((v90 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v90) & 1) == 0) {
          goto LABEL_93;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v99 = v142;
      swift_bridgeObjectRelease();
      uint64_t v100 = v134;
      uint64_t v101 = v135;
      sub_1002819CC(v134);
      if (!v101) {
        goto LABEL_127;
      }
      goto LABEL_120;
    }
LABEL_93:
    char v102 = v142;
    swift_bridgeObjectRelease();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v158 = v102;
    unint64_t v104 = v102[2];
    unint64_t i = v102[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (i <= v104) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_100328A3C();
    }
LABEL_118:
    uint64_t v99 = (void *)v158;
    *(void *)(v158 + ((v90 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v90;
    os_log_type_t v117 = (uint64_t *)(v99[6] + 32 * v90);
    *os_log_type_t v117 = v66;
    v117[1] = v68;
    uint64_t v118 = v153;
    v117[2] = (uint64_t)v152;
    v117[3] = v118;
    uint64_t v119 = v99[2];
    BOOL v51 = __OFADD__(v119, 1);
    uint64_t v120 = v119 + 1;
    if (v51)
    {
      __break(1u);
      goto LABEL_142;
    }
    v99[2] = v120;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v100 = v134;
    uint64_t v121 = v135;
    sub_1002819CC(v134);
    if (!v121)
    {
      Class v142 = v99;
LABEL_127:
      uint64_t v135 = 0;
      uint64_t v47 = (uint64_t)v144;
      unint64_t v8 = v146;
      a1 = (uint64_t)&qword_100908190;
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v160 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v160 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      unint64_t i = v160;
      if (v160 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v129 = _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v129 = *(void *)((v160 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      (*v137)(v148, v8);
      if (v129 >= (uint64_t)v133)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
      goto LABEL_132;
    }
LABEL_120:
    uint64_t v47 = (uint64_t)v144;
    a1 = (uint64_t)&qword_100908190;
    Class v142 = v99;
    if (qword_100907208 != -1) {
      swift_once();
    }
    uint64_t v135 = 0;
    uint64_t v122 = type metadata accessor for Logger();
    sub_10008E2DC(v122, (uint64_t)qword_100911D60);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v123 = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v123, v124))
    {
      uint64_t v125 = swift_slowAlloc();
      unint64_t v153 = v15;
      double v126 = (uint8_t *)v125;
      *(void *)&long long v154 = swift_slowAlloc();
      *(_DWORD *)double v126 = v131;
      unint64_t i = (unint64_t)(v126 + 12);
      unint64_t v152 = v126 + 4;
      swift_getErrorValue();
      uint64_t v127 = Error.rem_errorDescription.getter();
      *(void *)&long long v158 = sub_1000C51B8(v127, v128, (uint64_t *)&v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v123, v124, "failed to convert fetched reminder dictionary {error: %s}", v126, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v47 = (uint64_t)v144;
      unint64_t v15 = v153;
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();

    unint64_t v8 = v146;
    (*v137)(v148, v146);
LABEL_132:
    id v48 = (void *)v149;
LABEL_27:
    if ((void *)v15 == v48) {
      goto LABEL_135;
    }
  }
  if (isUniquelyReferenced_nonNull_native) {
    sub_100323768();
  }
  else {
    sub_10032B33C();
  }
  unint64_t i = v158;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v107 = Hasher._finalize()();
  uint64_t v108 = -1 << *(unsigned char *)(i + 32);
  unint64_t v90 = v107 & ~v108;
  unint64_t v109 = i + 56;
  if (((*(void *)(i + 56 + ((v90 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v90) & 1) == 0) {
    goto LABEL_118;
  }
  uint64_t v110 = ~v108;
  uint64_t v111 = *(void *)(i + 48);
  while (1)
  {
    uint64_t v112 = (void *)(v111 + 32 * v90);
    uint64_t v113 = v112[1];
    if (v113)
    {
      unint64_t i = v112[2];
      unint64_t v114 = v112[3];
      BOOL v115 = *v112 == v66 && v113 == v68;
      if (v115 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v114)
        {
          BOOL v116 = (uint8_t *)i == v152 && v114 == v153;
          if (v116 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
        }
      }
    }
    unint64_t v90 = (v90 + 1) & v110;
    if (((*(void *)(v109 + ((v90 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v90) & 1) == 0) {
      goto LABEL_118;
    }
  }
LABEL_144:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_100284F88(void *a1)
{
  uint64_t v2 = type metadata accessor for REMSuggestedLocation.LocationValue();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  strcpy((char *)v23, "contactLabel");
  BYTE5(v23[1]) = 0;
  HIWORD(v23[1]) = -5120;
  id v6 = [a1 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  sub_100096408((uint64_t)&v21, (uint64_t)v23, &qword_100908190);
  if (v24)
  {
    int v7 = swift_dynamicCast();
    uint64_t v8 = v19;
    if (!v7) {
      uint64_t v8 = 0;
    }
    uint64_t v18 = v8;
    if (v7) {
      uint64_t v9 = v20;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)v23, &qword_100908190);
    uint64_t v18 = 0;
    uint64_t v9 = 0;
  }
  v23[0] = 0x656C746974;
  v23[1] = 0xE500000000000000;
  id v10 = [a1 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  sub_100096408((uint64_t)&v21, (uint64_t)v23, &qword_100908190);
  if (v24)
  {
    if (swift_dynamicCast()) {
      uint64_t v11 = v20;
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)v23, &qword_100908190);
    uint64_t v11 = 0;
  }
  *(void *)&long long v21 = 0x74696D69786F7270;
  *((void *)&v21 + 1) = 0xE900000000000079;
  id v12 = [a1 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  sub_100096408((uint64_t)&v21, (uint64_t)v23, &qword_100908190);
  if (v24)
  {
    if (swift_dynamicCast())
    {
      uint64_t v13 = (__int16)v19;
      if (!v9) {
        goto LABEL_25;
      }
LABEL_29:
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)v23, &qword_100908190);
  }
  uint64_t v13 = 0;
  if (v9) {
    goto LABEL_29;
  }
LABEL_25:
  if (!v11)
  {
    type metadata accessor for REMSuggestedLocation();
    id v14 = (unsigned int *)&enum case for REMSuggestedLocation.LocationValue.notAvailable(_:);
    goto LABEL_35;
  }
LABEL_30:
  if (String.containsNameOfHomeLocation.getter())
  {
    swift_bridgeObjectRelease();
    type metadata accessor for REMSuggestedLocation();
    *uint64_t v5 = v13;
    id v14 = (unsigned int *)&enum case for REMSuggestedLocation.LocationValue.home(_:);
  }
  else
  {
    char v15 = String.containsNameOfWorkLocation.getter();
    swift_bridgeObjectRelease();
    type metadata accessor for REMSuggestedLocation();
    if (v15)
    {
      *uint64_t v5 = v13;
      id v14 = (unsigned int *)&enum case for REMSuggestedLocation.LocationValue.work(_:);
    }
    else
    {
      id v14 = (unsigned int *)&enum case for REMSuggestedLocation.LocationValue.other(_:);
    }
  }
LABEL_35:
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *v14, v2);
  return REMSuggestedLocation.__allocating_init(_:)();
}

uint64_t sub_1002853B0(unint64_t a1, unint64_t a2)
{
  unint64_t v135 = a2;
  uint64_t v3 = type metadata accessor for REMSuggestedLocation.LocationValue();
  uint64_t v127 = *(char **)(v3 - 8);
  __chkstk_darwin(v3);
  id v136 = &v105[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  int v7 = &v105[-v6];
  __chkstk_darwin(v8);
  os_log_type_t v124 = &v105[-v9];
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  id v12 = &v105[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  char v15 = &v105[-v14];
  __chkstk_darwin(v16);
  uint64_t v18 = &v105[-v17];
  __chkstk_darwin(v19);
  Class v132 = &v105[-v20];
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v138 = *(void *)(v21 - 8);
  uint64_t v139 = v21;
  __chkstk_darwin(v21);
  uint64_t v133 = &v105[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  id v25 = &v105[-v24];
  Swift::String v130 = (void (**)(unsigned char *, uint64_t))(a1 >> 62);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v129 = v12;
  unint64_t v128 = v15;
  double v126 = v18;
  uint64_t v125 = v7;
  if (v26)
  {
    v143[0] = (Swift::Int)_swiftEmptyArrayStorage;
    uint64_t result = sub_1001DE148(0, v26 & ~(v26 >> 63), 0);
    if (v26 < 0)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    uint64_t v131 = v3;
    uint64_t v29 = 0;
    uint64_t v27 = (void *)v143[0];
    uint64_t v137 = (void (*)(unsigned char *, void, uint64_t))(a1 & 0xC000000000000001);
    do
    {
      if (v137) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      dispatch thunk of REMSuggestedAttributeReminderDataSource.reminderIdentifier.getter();
      swift_release();
      v143[0] = (Swift::Int)v27;
      unint64_t v31 = v27[2];
      unint64_t v30 = v27[3];
      if (v31 >= v30 >> 1)
      {
        sub_1001DE148(v30 > 1, v31 + 1, 1);
        uint64_t v27 = (void *)v143[0];
      }
      ++v29;
      void v27[2] = v31 + 1;
      (*(void (**)(unint64_t, unsigned char *, uint64_t))(v138 + 32))((unint64_t)v27+ ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))+ *(void *)(v138 + 72) * v31, v25, v139);
    }
    while (v26 != v29);
    uint64_t v3 = v131;
  }
  Class v32 = v134;
  uint64_t v33 = sub_1003B118C(v27);
  if (v32)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    return a1;
  }
  Swift::Int v34 = v33;
  uint64_t v35 = swift_bridgeObjectRetain();
  Swift::Int v36 = sub_100126860(v35);
  swift_bridgeObjectRelease();
  v143[0] = v34;
  swift_bridgeObjectRetain();
  sub_100094134(&qword_100911E48);
  sub_1000967F4(&qword_100911E50, &qword_100911E48);
  sub_100281434((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v37 = Sequence.compactMapToSet<A>(_:)();
  Swift::Int v123 = v34;
  swift_bridgeObjectRelease();
  if (*(void *)(v37 + 16) <= *(void *)(v36 + 16) >> 3)
  {
    v143[0] = v36;
    sub_10065A7A4(v37);
    swift_bridgeObjectRelease();
    uint64_t v38 = (void *)v143[0];
  }
  else
  {
    uint64_t v38 = sub_10023DAF8(v37, v36);
    swift_bridgeObjectRelease();
  }
  uint64_t v39 = sub_10020AAEC((uint64_t)v38);
  swift_bridgeObjectRelease();
  unint64_t v40 = v135;
  uint64_t v41 = sub_1003B18D4(v39, v135);
  swift_release();
  uint64_t v115 = sub_1002E1510(v27, v40);
  unint64_t v114 = sub_100444B38((uint64_t)v27, v40);
  uint64_t v109 = v41;
  uint64_t v110 = 0;
  swift_bridgeObjectRelease();
  if (v130)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v42 = result;
  }
  else
  {
    uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  unint64_t v43 = v125;
  uint64_t v44 = (uint64_t)v129;
  uint64_t v45 = (uint64_t)v128;
  if (!v42)
  {
LABEL_100:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a1;
  }
  unint64_t v46 = 0;
  unint64_t v113 = a1 & 0xC000000000000001;
  uint64_t v108 = a1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v107 = a1 + 32;
  uint64_t v118 = (void (**)(void))(v138 + 16);
  uint64_t v122 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v138 + 56);
  unsigned int v106 = enum case for REMSuggestedLocation.LocationValue.vehicle(_:);
  unsigned int v134 = (void (**)(unsigned char *, void, uint64_t))(v127 + 104);
  LODWORD(v131) = enum case for REMSuggestedLocation.LocationValue.notAvailable(_:);
  Swift::String v130 = (void (**)(unsigned char *, uint64_t))(v127 + 8);
  uint64_t v112 = (void (**)(unsigned char *, uint64_t))(v138 + 8);
  uint64_t v127 = (char *)&type metadata for Any + 8;
  uint64_t v111 = v42;
  unint64_t v119 = a1;
  while (1)
  {
    if (v113)
    {
      unint64_t v47 = v46;
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v138 = result;
      unint64_t v48 = v46 + 1;
      if (__OFADD__(v47, 1)) {
        goto LABEL_104;
      }
    }
    else
    {
      if (v46 >= *(void *)(v108 + 16)) {
        goto LABEL_105;
      }
      uint64_t v138 = *(void *)(v107 + 8 * v46);
      uint64_t result = swift_retain();
      BOOL v49 = __OFADD__(v46, 1);
      unint64_t v48 = v46 + 1;
      if (v49) {
        goto LABEL_104;
      }
    }
    unint64_t v116 = v48;
    dispatch thunk of REMSuggestedAttributeReminderDataSource.reminderIdentifier.getter();
    uint64_t v50 = (uint64_t)v132;
    uint64_t v51 = v139;
    os_log_type_t v117 = *v118;
    v117();
    uint64_t v121 = *v122;
    v121(v50, 0, 1, v51);
    if (*(void *)(v123 + 16))
    {
      sub_10030768C(v50);
      char v53 = v52;
      sub_1000966BC(v50, (uint64_t *)&unk_100909E50);
      if (v53)
      {
        type metadata accessor for REMSuggestedLocation();
        (*v134)(v124, v106, v3);
        REMSuggestedLocation.__allocating_init(_:)();
        dispatch thunk of REMSuggestedAttributeReminderDataSource.location.setter();
      }
    }
    else
    {
      sub_1000966BC(v50, (uint64_t *)&unk_100909E50);
    }
    uint64_t v137 = *v134;
    v137(v43, v131, v3);
    dispatch thunk of REMSuggestedAttributeReminderDataSource.location.getter();
    uint64_t v54 = REMSuggestedLocation.locationValueDescription.getter();
    uint64_t v56 = v55;
    swift_release();
    if (v54 == REMSuggestedLocation.LocationValue.description.getter() && v56 == v57) {
      char v58 = 1;
    }
    else {
      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v59 = *v130;
    (*v130)(v43, v3);
    if (v58) {
      break;
    }
LABEL_62:
    uint64_t v76 = v133;
    uint64_t v77 = v139;
    ((void (*)(uint64_t, unsigned char *, uint64_t))v117)(v45, v133, v139);
    v121(v45, 0, 1, v77);
    if (*(void *)(v115 + 16) && (unint64_t v78 = sub_10030768C(v45), (v79 & 1) != 0))
    {
      unint64_t v80 = *(void *)(*(void *)(v115 + 56) + 8 * v78);
      swift_bridgeObjectRetain();
      sub_1000966BC(v45, (uint64_t *)&unk_100909E50);
      unint64_t v144 = (unint64_t)_swiftEmptyArrayStorage;
      if (v80 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t result = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v81 = result;
      }
      else
      {
        uint64_t v81 = *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRetain();
      }
      if (v81)
      {
        if (v81 >= 1)
        {
          uint64_t v82 = 0;
          unint64_t v135 = v80 & 0xC000000000000001;
          uint64_t v137 = (void (*)(unsigned char *, void, uint64_t))v80;
          while (1)
          {
            if (v135) {
              id v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v83 = *(id *)(v80 + 8 * v82 + 32);
            }
            uint64_t v84 = v83;
            *(void *)&v142[0] = 1701667182;
            *((void *)&v142[0] + 1) = 0xE400000000000000;
            id v85 = [v83 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
            swift_unknownObjectRelease();
            if (v85)
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
            }
            else
            {
              memset(v142, 0, sizeof(v142));
            }
            sub_100096408((uint64_t)v142, (uint64_t)v143, &qword_100908190);
            if (v143[3])
            {
              if (swift_dynamicCast())
              {
                unint64_t v86 = a1;
                uint64_t v87 = v3;
                uint64_t v88 = v140;
                unint64_t v89 = v141;
                uint64_t v90 = HIBYTE(v141) & 0xF;
                if ((v141 & 0x2000000000000000) == 0) {
                  uint64_t v90 = v140 & 0xFFFFFFFFFFFFLL;
                }
                if (v90)
                {
                  type metadata accessor for REMSuggestedAttributesHashtag();
                  uint64_t v91 = swift_allocObject();
                  *(void *)(v91 + 16) = v88;
                  *(void *)(v91 + 24) = v89;

                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  if (*(void *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v144 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                }
                else
                {

                  swift_bridgeObjectRelease();
                }
                uint64_t v3 = v87;
                a1 = v86;
                goto LABEL_71;
              }
            }
            else
            {
              sub_1000966BC((uint64_t)v143, &qword_100908190);
            }

LABEL_71:
            ++v82;
            unint64_t v80 = (unint64_t)v137;
            if (v81 == v82)
            {
              swift_bridgeObjectRelease();
              uint64_t v92 = (void *)v144;
              goto LABEL_91;
            }
          }
        }
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
      swift_bridgeObjectRelease();
      uint64_t v92 = _swiftEmptyArrayStorage;
LABEL_91:
      swift_bridgeObjectRelease();
      v143[0] = (Swift::Int)v92;
      sub_100094134(&qword_100911E58);
      sub_1000967F4(&qword_100911E60, &qword_100911E58);
      sub_100281434(&qword_100911E68, (void (*)(uint64_t))type metadata accessor for REMSuggestedAttributesHashtag);
      Sequence<>.canonicalTagSet.getter();
      swift_bridgeObjectRelease();
      dispatch thunk of REMSuggestedAttributeReminderDataSource.tags.setter();
      unint64_t v43 = v125;
      uint64_t v44 = (uint64_t)v129;
      uint64_t v45 = (uint64_t)v128;
      uint64_t v76 = v133;
    }
    else
    {
      sub_1000966BC(v45, (uint64_t *)&unk_100909E50);
    }
    uint64_t v93 = v139;
    ((void (*)(uint64_t, unsigned char *, uint64_t))v117)(v44, v76, v139);
    v121(v44, 0, 1, v93);
    if (*(void *)(v114 + 16) && (unint64_t v94 = sub_10030768C(v44), (v95 & 1) != 0))
    {
      unint64_t v96 = *(void *)(*(void *)(v114 + 56) + 8 * v94);
      swift_bridgeObjectRetain();
      sub_1000966BC(v44, (uint64_t *)&unk_100909E50);
      uint64_t v97 = v110;
      BOOL v98 = sub_100281828(v96);
      if (v97)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        (*v112)(v133, v139);
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      uint64_t v99 = v98;
      uint64_t v110 = 0;
      uint64_t v100 = v43;
      swift_bridgeObjectRelease();
      *(void *)&v142[0] = Set.init(minimumCapacity:)();
      uint64_t v101 = v99[2];
      if (v101)
      {
        char v102 = v99 + 5;
        do
        {
          Swift::Int v103 = *(v102 - 1);
          Swift::Int v104 = *v102;
          swift_bridgeObjectRetain();
          sub_10031DC68(v143, v103, v104);
          swift_bridgeObjectRelease();
          v102 += 2;
          --v101;
        }
        while (v101);
      }
      swift_bridgeObjectRelease();
      dispatch thunk of REMSuggestedAttributeReminderDataSource.recurrences.setter();
      swift_release();
      uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))*v112)(v133, v139);
      unint64_t v43 = v100;
      uint64_t v44 = (uint64_t)v129;
      uint64_t v45 = (uint64_t)v128;
    }
    else
    {
      sub_1000966BC(v44, (uint64_t *)&unk_100909E50);
      (*v112)(v76, v139);
      uint64_t result = swift_release();
    }
    unint64_t v46 = v116;
    if (v116 == v111) {
      goto LABEL_100;
    }
  }
  uint64_t v60 = (uint64_t)v126;
  dispatch thunk of REMSuggestedAttributeReminderDataSource.reminderIdentifier.getter();
  v121(v60, 0, 1, v139);
  uint64_t v61 = v109;
  if (!*(void *)(v109 + 16) || (unint64_t v62 = sub_10030768C(v60), (v63 & 1) == 0))
  {
    sub_1000966BC(v60, (uint64_t *)&unk_100909E50);
    goto LABEL_62;
  }
  unint64_t v64 = *(void *)(*(void *)(v61 + 56) + 8 * v62);
  swift_bridgeObjectRetain();
  uint64_t result = sub_1000966BC(v60, (uint64_t *)&unk_100909E50);
  if (!(v64 >> 62))
  {
    uint64_t v65 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v65) {
      goto LABEL_46;
    }
LABEL_61:
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v65) {
    goto LABEL_61;
  }
LABEL_46:
  if (v65 >= 1)
  {
    uint64_t v66 = 0;
    unint64_t v120 = v64 & 0xC000000000000001;
    unint64_t v135 = v64;
    uint64_t v67 = v65;
    while (1)
    {
      if (v120) {
        id v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v68 = *(id *)(v64 + 8 * v66 + 32);
      }
      unint64_t v69 = v68;
      uint64_t v70 = v3;
      v137(v136, v131, v3);
      dispatch thunk of REMSuggestedAttributeReminderDataSource.location.getter();
      uint64_t v71 = REMSuggestedLocation.locationValueDescription.getter();
      uint64_t v73 = v72;
      swift_release();
      if (v71 == REMSuggestedLocation.LocationValue.description.getter() && v73 == v74)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v3 = v70;
        v59(v136, v70);
        a1 = v119;
      }
      else
      {
        char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = v70;
        v59(v136, v70);
        a1 = v119;
        if ((v75 & 1) == 0) {
          goto LABEL_50;
        }
      }
      sub_100284F88(v69);
      dispatch thunk of REMSuggestedAttributeReminderDataSource.location.setter();
LABEL_50:
      ++v66;

      unint64_t v64 = v135;
      if (v67 == v66)
      {
        swift_bridgeObjectRelease();
        unint64_t v43 = v125;
        uint64_t v44 = (uint64_t)v129;
        uint64_t v45 = (uint64_t)v128;
        goto LABEL_62;
      }
    }
  }
LABEL_107:
  __break(1u);
  return result;
}

uint8_t *sub_10028658C(uint64_t a1, uint8_t *a2)
{
  if (qword_100907208 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100911D60);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "fetching ReminderDataSource for training batch by batch {batchsize: %ld}", v8, 0xCu);
    swift_slowDealloc();
  }

  sub_100283560(a1, a2);
  if (!v2)
  {
    a2 = (uint8_t *)sub_1002853B0(v10, (unint64_t)a2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a2;
}

const char *sub_10028671C()
{
  return "objectID";
}

id sub_100286728@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 objectID];
  *a2 = result;
  return result;
}

const char *sub_1002867A4()
{
  return "allDay";
}

const char *sub_1002867D0()
{
  return "contactHandles";
}

uint64_t type metadata accessor for TrainingContext()
{
  uint64_t result = qword_100911FF8;
  if (!qword_100911FF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100286830@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.enabledOniOS.getter();
  *a1 = result & 1;
  return result;
}

unint64_t sub_100286860()
{
  unint64_t result = qword_100911ED8;
  if (!qword_100911ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100911ED8);
  }
  return result;
}

uint64_t sub_1002868B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.randomSeed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002868E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.shouldSaveModel.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100286910(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100286970@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.maxSampleCount.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10028699C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.minimumSampleCount.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002869C8()
{
  return REMSuggestedAttributesTrainer.Parameters.intentionalWord.getter();
}

uint64_t sub_1002869EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.IntentionalWord.k.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100286A20@<X0>(uint64_t *a1@<X8>)
{
  return sub_10027B688(a1);
}

void *sub_100286A3C()
{
  sub_100094134(&qword_100911EF8);
  sub_1000967F4(&qword_100911F58, &qword_100911EF8);
  uint64_t v0 = dispatch thunk of Sequence.underestimatedCount.getter();
  specialized ContiguousArray.reserveCapacity(_:)();
  swift_retain();
  uint64_t result = (void *)dispatch thunk of Sequence.makeIterator()();
  if (v0 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (v0)
  {
    do
    {
      uint64_t result = (void *)dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!v2) {
        goto LABEL_9;
      }
      REMFilteredTitleEmbedding.vector(for:)();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (--v0);
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v2)
  {
    while (1)
    {
      REMFilteredTitleEmbedding.vector(for:)();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
  }
  swift_release();
  return _swiftEmptyArrayStorage;
}

void *sub_100286C18(uint64_t a1)
{
  sub_100094134(&qword_100911EE8);
  sub_1000967F4(&qword_100911F10, &qword_100911EE8);
  uint64_t v2 = dispatch thunk of Sequence.underestimatedCount.getter();
  sub_1001DE058(0, v2 & ~(v2 >> 63), 0);
  swift_retain();
  uint64_t result = (void *)dispatch thunk of Sequence.makeIterator()();
  if (v2 < 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  if (v2)
  {
    do
    {
      uint64_t result = (void *)dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!a1) {
        goto LABEL_23;
      }
      uint64_t v4 = REMkNNByTitleEmbedding.predict(for:neighborCountToConsider:)();
      unint64_t v6 = v5;
      swift_release();
      if (v6) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = 0;
      }
      if (!v6) {
        unint64_t v6 = 0xE000000000000000;
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_1001DE058(v8 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      unint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v7;
      v10[5] = v6;
    }
    while (--v2);
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (a1)
  {
    while (1)
    {
      uint64_t v11 = REMkNNByTitleEmbedding.predict(for:neighborCountToConsider:)();
      unint64_t v13 = v12;
      swift_release();
      if (v13) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 0;
      }
      if (!v13) {
        unint64_t v13 = 0xE000000000000000;
      }
      unint64_t v16 = _swiftEmptyArrayStorage[2];
      unint64_t v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1) {
        sub_1001DE058(v15 > 1, v16 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v16 + 1;
      uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
      v17[4] = v14;
      v17[5] = v13;
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
  }
  swift_release();
  return _swiftEmptyArrayStorage;
}

void *sub_100286E58(uint64_t a1)
{
  sub_100094134(&qword_100911EE8);
  sub_1000967F4(&qword_100911F10, &qword_100911EE8);
  uint64_t v2 = dispatch thunk of Sequence.underestimatedCount.getter();
  sub_1001DE058(0, v2 & ~(v2 >> 63), 0);
  swift_retain();
  uint64_t result = (void *)dispatch thunk of Sequence.makeIterator()();
  if (v2 < 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  if (v2)
  {
    do
    {
      uint64_t result = (void *)dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!a1) {
        goto LABEL_23;
      }
      uint64_t v4 = RDIntentClusterModel.predict(for:)();
      unint64_t v6 = v5;
      swift_release();
      if (v6) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = 0x20676E697373696DLL;
      }
      if (!v6) {
        unint64_t v6 = 0xEE00746E65746E69;
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_1001DE058(v8 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      unint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v7;
      v10[5] = v6;
    }
    while (--v2);
  }
  while (1)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!a1) {
      break;
    }
    uint64_t v11 = RDIntentClusterModel.predict(for:)();
    unint64_t v13 = v12;
    swift_release();
    if (v13) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 0x20676E697373696DLL;
    }
    if (!v13) {
      unint64_t v13 = 0xEE00746E65746E69;
    }
    unint64_t v16 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1) {
      sub_1001DE058(v15 > 1, v16 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v16 + 1;
    uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
    v17[4] = v14;
    v17[5] = v13;
  }
  swift_release();
  return _swiftEmptyArrayStorage;
}

unint64_t sub_1002870C4()
{
  unint64_t result = qword_100911F00;
  if (!qword_100911F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100911F00);
  }
  return result;
}

uint64_t sub_100287118()
{
  return REMSuggestedAttributesTrainer.Parameters.coreBehavior.getter();
}

uint64_t sub_10028713C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10028716C@<X0>(void *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.validationRelativeSupport.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100287198@<X0>(void *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.confidence.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1002871C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.feedbackResetVersion.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002871F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.support.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10028721C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.adjustment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100287248@<X0>(void *a1@<X8>)
{
  return sub_100280BA0(*(void *)(v1 + 32), a1);
}

uint64_t sub_10028726C@<X0>(void *a1@<X8>)
{
  return sub_100280C54(a1);
}

uint64_t sub_10028728C@<X0>(void *a1@<X8>)
{
  return sub_100280E30(20, 0x5D7473694C3A585BLL, 0xE800000000000000, a1, (uint64_t (*)(uint64_t))&REMSuggestedList.description.getter);
}

uint64_t sub_1002872E4@<X0>(void *a1@<X8>)
{
  return sub_100280D38(20, 0x65576575443A565BLL, 0xEE005D7961446B65, a1);
}

uint64_t sub_100287328@<X0>(void *a1@<X8>)
{
  return sub_100280E30(26, 0x65576575443A585BLL, 0xEE005D7961446B65, a1, (uint64_t (*)(uint64_t))&REMSuggestedWeekDay.description.getter);
}

uint64_t sub_10028738C@<X0>(void *a1@<X8>)
{
  return sub_100280D38(18, 0x7461636F4C3A565BLL, 0xEC0000005D6E6F69, a1);
}

uint64_t sub_1002873CC@<X0>(void *a1@<X8>)
{
  return sub_100280E30(24, 0x7461636F4C3A585BLL, 0xEC0000005D6E6F69, a1, (uint64_t (*)(uint64_t))&dispatch thunk of ClassificationLabel.description.getter);
}

uint64_t sub_10028742C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
    case 1:
    case 2:
    case 6:
      swift_retain();
      goto LABEL_4;
    case 3:
    case 4:
      goto LABEL_4;
    case 5:
      swift_bridgeObjectRetain();
LABEL_4:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002874C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
    case 1:
    case 2:
    case 6:
      swift_release();
      goto LABEL_4;
    case 3:
    case 4:
      goto LABEL_4;
    case 5:
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100287564()
{
  return REMSuggestedAttributesTrainer.Parameters.embedding.getter();
}

uint64_t sub_100287588@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.Embedding.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1002875B8@<X0>(void *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.validationSetProportion.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1002875E4()
{
  return sub_100280F88() & 1;
}

uint64_t sub_100287604@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.Embedding.neighborsToConsider.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100287630@<X0>(void *a1@<X8>)
{
  return sub_10028120C(a1);
}

uint64_t sub_100287650@<X0>(void *a1@<X8>)
{
  return sub_1002812A8(a1);
}

uint64_t sub_100287670@<X0>(uint64_t *a1@<X8>)
{
  return sub_100280FEC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100287690()
{
  return REMSuggestedAttributesTrainer.Parameters.anchoredBubble.getter();
}

uint64_t sub_1002876B4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.AnchoredBubble.enabledOniOS.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1002876E4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.AnchoredBubble.overrideLocalWordDistanceScale.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100287714@<X0>(void *a1@<X8>)
{
  uint64_t result = REMSuggestedAttributesTrainer.Parameters.AnchoredBubble.defaultWordDistanceScale.getter();
  *a1 = v3;
  return result;
}

unint64_t sub_100287740()
{
  unint64_t result = qword_100914B80;
  if (!qword_100914B80)
  {
    sub_1000963CC(255, (unint64_t *)&qword_10090B040);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914B80);
  }
  return result;
}

ValueMetadata *_s19SampleTooSmallErrorVMa()
{
  return &_s19SampleTooSmallErrorVN;
}

ValueMetadata *type metadata accessor for ModelSkippedError()
{
  return &type metadata for ModelSkippedError;
}

uint64_t *sub_1002877C8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_100094134(&qword_100911ED0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unint64_t v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)v4 + v8) = (uint64_t)v10;
    uint64_t v11 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)v4 + v9) = (uint64_t)v11;
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    id v12 = v10;
    id v13 = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_1002878B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100911ED0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  return swift_release();
}

uint64_t sub_100287948(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100094134(&qword_100911ED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  unint64_t v10 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v10;
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  id v11 = v9;
  id v12 = v10;
  swift_retain();
  return a1;
}

uint64_t sub_1002879EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100094134(&qword_100911ED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = a3[6];
  id v12 = *(void **)(a2 + v11);
  id v13 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = v12;
  id v14 = v12;

  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100287AAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100094134(&qword_100911ED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100287B40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100094134(&qword_100911ED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[6];
  id v10 = *(void **)(a1 + v9);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);

  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t sub_100287BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100287C04);
}

uint64_t sub_100287C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_100911ED0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100287CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100287CDC);
}

uint64_t sub_100287CDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100094134(&qword_100911ED0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

void sub_100287D9C()
{
  sub_100287E44();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100287E44()
{
  if (!qword_100912008)
  {
    type metadata accessor for REMSuggestedAttributesTrainer.Parameters();
    unint64_t v0 = type metadata accessor for PartialOverride();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100912008);
    }
  }
}

uint64_t _s8KeyTupleVwxx()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s8KeyTupleVwcp(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s8KeyTupleVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s8KeyTupleVwta(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s8KeyTupleVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s8KeyTupleVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *_s8KeyTupleVMa()
{
  return &_s8KeyTupleVN;
}

unint64_t sub_100288094()
{
  unint64_t result = qword_100912040;
  if (!qword_100912040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100912040);
  }
  return result;
}

uint64_t sub_1002880EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_100288114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(void *, void *))(a1 + 32);
  v9[3] = swift_getObjectType();
  v9[0] = a2;
  v8[3] = swift_getObjectType();
  v8[0] = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v6 = v5(v9, v8);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v8);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v9);
  return v6;
}

uint64_t sub_1002881A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100912048);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100912048);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_10028826C(char a1)
{
  unint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 1701869940;
      break;
    case 2:
      unint64_t result = 1701667182;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    case 6:
      unint64_t result = 0xD000000000000017;
      break;
    case 7:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
    case 10:
      unint64_t result = 0x44496E6F73726570;
      break;
    case 11:
    case 13:
    case 16:
      unint64_t result = 0xD000000000000012;
      break;
    case 12:
      unint64_t result = 0xD000000000000019;
      break;
    case 14:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 15:
      unint64_t result = 0x6576697463616E69;
      break;
    case 17:
      unint64_t result = 0xD000000000000017;
      break;
    case 18:
      unint64_t result = 0x6F54636E79536164;
      break;
    case 19:
      unint64_t result = 0x654B687375506164;
      break;
    case 20:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 21:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 22:
      unint64_t result = 0xD000000000000019;
      break;
    case 23:
      unint64_t result = 0x67694D7361576164;
      break;
    case 24:
      unint64_t result = 0xD000000000000017;
      break;
    case 25:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100288560(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10028826C(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10028826C(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1002885EC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10028826C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100288650()
{
  sub_10028826C(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002886A4()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10028826C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100288704@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10028B15C();
  *a1 = result;
  return result;
}

unint64_t sub_100288734@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10028826C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100288760@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10028B15C();
  *a1 = result;
  return result;
}

unint64_t sub_100288788()
{
  return sub_10028826C(*v0);
}

void sub_100288790(void *a1@<X8>)
{
  *a1 = &off_1008B5918;
}

uint64_t sub_1002887A0(char *a1, char *a2)
{
  return sub_1002F2BDC(*a1, *a2);
}

Swift::Int sub_1002887AC()
{
  return sub_100595294();
}

uint64_t sub_1002887B4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100288828()
{
  return sub_1002F0A6C();
}

uint64_t sub_100288830@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B1C20;
  return sub_100157960(v2, a1, a2);
}

void sub_10028883C(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000016;
  }
  else {
    unint64_t v2 = 0xD000000000000011;
  }
  unint64_t v3 = 0x80000001007C65B0;
  if (*v1) {
    unint64_t v3 = 0x80000001007C65D0;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100288880@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B1C20;
  return sub_100157A14(a1, v2, a2);
}

unint64_t sub_10028888C()
{
  if (*v0) {
    return 0xD000000000000016;
  }
  else {
    return 0xD000000000000011;
  }
}

void sub_1002888CC(void *a1@<X8>)
{
  *a1 = &off_1008B6180;
}

Swift::Int sub_1002888DC()
{
  return Hasher._finalize()();
}

uint64_t sub_10028892C()
{
  return String.hash(into:)();
}

Swift::Int sub_100288940()
{
  return Hasher._finalize()();
}

uint64_t sub_10028898C@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B61A8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1002889E0(void *a1@<X8>)
{
  *a1 = 0x737473696CLL;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1002889F8@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B5000, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_100288A50()
{
  return 0x737473696CLL;
}

void sub_100288A64(void *a1@<X8>)
{
  *a1 = &off_1008B61E0;
}

uint64_t sub_100288A74(char *a1, char *a2)
{
  return sub_1002F2B30(*a1, *a2);
}

Swift::Int sub_100288A80()
{
  return sub_10059531C();
}

uint64_t sub_100288A88()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100288AFC()
{
  return sub_1002F0AF0();
}

uint64_t sub_100288B04@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B1C70;
  return sub_100157960(v2, a1, a2);
}

void sub_100288B10(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v2 = 0xD000000000000018;
  }
  unint64_t v3 = 0x80000001007C65F0;
  if (*v1) {
    unint64_t v3 = 0x80000001007C6610;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100288B54@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B1C70;
  return sub_100157A14(a1, v2, a2);
}

unint64_t sub_100288B60()
{
  if (*v0) {
    return 0xD00000000000001ALL;
  }
  else {
    return 0xD000000000000018;
  }
}

void sub_100288BA0(void *a1@<X8>)
{
  *a1 = &off_1008B6208;
}

void *sub_100288BB0()
{
  uint64_t result = sub_100288BD0();
  qword_1009420F0 = (uint64_t)result;
  return result;
}

void *sub_100288BD0()
{
  uint64_t v0 = 26;
  char v1 = &byte_1008B5938;
  do
  {
    int v3 = *v1++;
    unint64_t v4 = 0xE800000000000000;
    uint64_t v5 = 0x44497463656A626FLL;
    switch(v3)
    {
      case 1:
        unint64_t v4 = 0xE400000000000000;
        uint64_t v5 = 1701869940;
        break;
      case 2:
        unint64_t v4 = 0xE400000000000000;
        uint64_t v5 = 1701667182;
        break;
      case 3:
        uint64_t v5 = 0xD000000000000018;
        uint64_t v7 = "listIDsMergeableOrdering";
        goto LABEL_29;
      case 4:
        uint64_t v5 = 0xD00000000000001CLL;
        uint64_t v7 = "listIDsMergeableOrderingData";
        goto LABEL_29;
      case 5:
        uint64_t v5 = 0xD000000000000019;
        uint64_t v7 = "pinnedListsManualOrdering";
        goto LABEL_29;
      case 6:
        uint64_t v5 = 0xD000000000000017;
        uint64_t v7 = "templatesManualOrdering";
        goto LABEL_29;
      case 7:
        uint64_t v5 = 0xD00000000000001ALL;
        uint64_t v7 = "listsDADisplayOrderChanged";
        goto LABEL_29;
      case 8:
        uint64_t v5 = 0xD000000000000010;
        uint64_t v7 = "markedForRemoval";
        goto LABEL_29;
      case 9:
        goto LABEL_23;
      case 10:
        unint64_t v4 = 0xEC000000746C6153;
LABEL_23:
        uint64_t v5 = 0x44496E6F73726570;
        break;
      case 11:
        uint64_t v6 = "didChooseToMigrate";
        goto LABEL_25;
      case 12:
        uint64_t v5 = 0xD000000000000019;
        uint64_t v7 = "didChooseToMigrateLocally";
        goto LABEL_29;
      case 13:
        uint64_t v6 = "didFinishMigration";
        goto LABEL_25;
      case 14:
        uint64_t v5 = 0xD00000000000001DLL;
        uint64_t v7 = "persistenceCloudSchemaVersion";
        goto LABEL_29;
      case 15:
        uint64_t v5 = 0x6576697463616E69;
        break;
      case 16:
        uint64_t v6 = "externalIdentifier";
LABEL_25:
        unint64_t v4 = (unint64_t)(v6 - 32) | 0x8000000000000000;
        uint64_t v5 = 0xD000000000000012;
        break;
      case 17:
        uint64_t v5 = 0xD000000000000017;
        uint64_t v7 = "externalModificationTag";
        goto LABEL_29;
      case 18:
        unint64_t v4 = 0xEB000000006E656BLL;
        uint64_t v5 = 0x6F54636E79536164;
        break;
      case 19:
        unint64_t v4 = 0xE900000000000079;
        uint64_t v5 = 0x654B687375506164;
        break;
      case 20:
        uint64_t v5 = 0xD00000000000001CLL;
        uint64_t v7 = "daConstraintsDescriptionPath";
        goto LABEL_29;
      case 21:
        uint64_t v5 = 0xD00000000000001FLL;
        uint64_t v7 = "daAllowsCalendarAddDeleteModify";
        goto LABEL_29;
      case 22:
        uint64_t v5 = 0xD000000000000019;
        uint64_t v7 = "daSupportsSharedCalendars";
        goto LABEL_29;
      case 23:
        unint64_t v4 = 0xED00006465746172;
        uint64_t v5 = 0x67694D7361576164;
        break;
      case 24:
        uint64_t v5 = 0xD000000000000017;
        uint64_t v7 = "minimumSupportedVersion";
        goto LABEL_29;
      case 25:
        uint64_t v5 = 0xD000000000000011;
        uint64_t v7 = "debugSyncDisabled";
LABEL_29:
        unint64_t v4 = (unint64_t)(v7 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v10 = sub_1001806F8(v5, v4);
    uint64_t v11 = _swiftEmptyDictionarySingleton[2];
    BOOL v12 = (v9 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x100288F84);
    }
    char v14 = v9;
    if (_swiftEmptyDictionarySingleton[3] >= v13)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v9) {
          goto LABEL_2;
        }
      }
      else
      {
        sub_100318A14();
        if (v14) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      sub_10030E654(v13, isUniquelyReferenced_nonNull_native);
      unint64_t v15 = sub_1001806F8(v5, v4);
      if ((v14 & 1) != (v16 & 1)) {
        goto LABEL_46;
      }
      unint64_t v10 = v15;
      if (v14)
      {
LABEL_2:
        Swift::OpaquePointer v2 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v10);
        swift_bridgeObjectRelease();
        *Swift::OpaquePointer v2 = v5;
        v2[1] = v4;
        goto LABEL_3;
      }
    }
    _swiftEmptyDictionarySingleton[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v17 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v10);
    uint64_t *v17 = v5;
    v17[1] = v4;
    uint64_t v18 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v10);
    *uint64_t v18 = v5;
    v18[1] = v4;
    uint64_t v19 = _swiftEmptyDictionarySingleton[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_45;
    }
    _swiftEmptyDictionarySingleton[2] = v21;
    swift_bridgeObjectRetain();
LABEL_3:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    --v0;
  }
  while (v0);
  return _swiftEmptyDictionarySingleton;
}

void *sub_100288FEC(char a1)
{
  int v3 = v1;
  if (a1)
  {
    if ([v1 hasDeserializedListIDsMergeableOrdering])
    {
      id v4 = [v1 serializedListIDsMergeableOrdering];
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v8 = v7;
      }
      else
      {
        uint64_t v6 = 0;
        unint64_t v8 = 0xF000000000000000;
      }
      sub_100094134(&qword_10090A830);
      Optional.tryUnwrap(_:file:line:)();
      sub_100097F20((uint64_t)v6, v8);
      if (!v2)
      {
        uint64_t v6 = v20;
        if (qword_100907210 != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        sub_10008E2DC(v12, (uint64_t)qword_100912048);
        id v13 = v3;
        char v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v14, v15))
        {
          char v16 = (uint8_t *)swift_slowAlloc();
          uint64_t v22 = (void *)swift_slowAlloc();
          *(_DWORD *)char v16 = 138543362;
          id v21 = [v13 objectID];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v22 = v21;

          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Serialized to data from REMListStorage.listIDsMergeableOrdering during ingesting. {objectID: %{public}@}", v16, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
    }
    else
    {
      id v10 = [v1 listIDsMergeableOrderingData];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v17 = self;
        sub_1000963CC(0, &qword_100910180);
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        uint64_t v6 = String._bridgeToObjectiveC()();
        [v17 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v6];

        swift_willThrow();
      }
    }
  }
  else
  {
    id v9 = [v1 listIDsMergeableOrdering];
    return 0;
  }
  return v6;
}

uint64_t sub_100289350(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7, char a8)
{
  id v9 = v8;
  id v17 = [v8 createResolutionTokenMapIfNecessary];
  NSString v18 = String._bridgeToObjectiveC()();
  unsigned int v19 = [v17 mergeWithMap:a7 forKey:v18];

  if ((a8 & 1) == 0)
  {
    id v20 = [v9 remObjectID];
    if (!v20)
    {
      if (qword_100907210 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_10008E2DC(v24, (uint64_t)qword_100912048);
      id v25 = v9;
      swift_bridgeObjectRetain_n();
      id v26 = v25;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        log = v27;
        unint64_t v30 = (void *)swift_slowAlloc();
        v42[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 138412546;
        id v31 = [v26 objectID];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v30 = v31;

        *(_WORD *)(v29 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)&v41[0] = sub_1000C51B8(a4, a5, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, log, v28, "Can't merge list ordering for account because remObjectID is nil {account.objectID: %@, key: %s}", (uint8_t *)v29, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }

      return 0;
    }
    id v21 = v20;
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [v9 valueForKey:v22];

    if (v23)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v41, 0, sizeof(v41));
    }
    sub_100096408((uint64_t)v41, (uint64_t)v42, &qword_100908190);
    if (v42[3])
    {
      int v32 = swift_dynamicCast();
      if (v32) {
        a1 = v39;
      }
      else {
        a1 = 0;
      }
      if (v32) {
        unint64_t v33 = v40;
      }
      else {
        unint64_t v33 = 0xF000000000000000;
      }
      if (a3) {
        goto LABEL_20;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)v42, &qword_100908190);
      a1 = 0;
      unint64_t v33 = 0xF000000000000000;
      if (a3)
      {
LABEL_20:
        id v34 = a3;
        uint64_t v35 = sub_100289C4C(a1, v33, a6, a4, a5, v21);

        sub_100097F20(a1, v33);
        return v35;
      }
    }

    return a1;
  }

  if (!v19) {
    return 0;
  }
  sub_100097E24(a1, a2);
  return a1;
}

uint64_t sub_100289788(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  id v7 = a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = 0x8000000000000000;
  sub_1002C5B58(a2, v7, isUniquelyReferenced_nonNull_native);
  *(void *)(a4 + 16) = v10;

  swift_bridgeObjectRelease();
  return swift_endAccess();
}

void sub_100289828(uint64_t a1, void *a2)
{
  int v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1002898AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10009A1B0(a1, (uint64_t)v25);
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v24;
  sub_10009A1B0(a2, (uint64_t)v25);
  if ((swift_dynamicCast() & 1) == 0)
  {

    return 0;
  }
  uint64_t v6 = v24;
  if ([v24 daIsNotificationsCollection])
  {
    if ([v24 daIsNotificationsCollection]) {
      goto LABEL_20;
    }
    uint64_t v7 = 0;
  }
  else if ((uint64_t)[v24 daDisplayOrder] < 1)
  {
    if ([v24 daIsNotificationsCollection])
    {

      return 1;
    }
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (uint64_t)[v24 daDisplayOrder];
    if ([v24 daIsNotificationsCollection])
    {
      if (!v7) {
        goto LABEL_20;
      }

      if (v7 < 0) {
        return -1;
      }
      return 1;
    }
  }
  if ((uint64_t)[v24 daDisplayOrder] >= 1)
  {
    id v9 = [v24 daDisplayOrder];
    if ((id)v7 == v9)
    {
      if ((unint64_t)(v7 - 1) <= 0x7FFFFFFFFFFFFFFDLL)
      {

        return 0;
      }
      goto LABEL_20;
    }
    uint64_t v17 = (uint64_t)v9;

    if (v7 < v17) {
      return -1;
    }
    return 1;
  }
  if (v7 != 0x7FFFFFFFFFFFFFFFLL)
  {

    return -1;
  }
LABEL_20:
  id v10 = [v24 remObjectID];
  id v11 = [v24 remObjectID];
  if (v10)
  {
    swift_beginAccess();
    uint64_t v12 = *a3;
    if (*(void *)(*a3 + 16))
    {
      id v13 = v10;
      unint64_t v14 = sub_100306FE8((uint64_t)v13);
      if (v15)
      {
        unint64_t v16 = *(void *)(*(void *)(v12 + 56) + 8 * v14);
        swift_endAccess();

        goto LABEL_31;
      }
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
    }
  }
  unint64_t v16 = -1;
LABEL_31:
  if (!v11) {
    goto LABEL_39;
  }
  swift_beginAccess();
  uint64_t v18 = *a3;
  if (!*(void *)(*a3 + 16))
  {
    swift_endAccess();
LABEL_38:
    id v23 = v5;

    uint64_t v5 = v10;
    id v10 = v23;
LABEL_39:

    if (v16 == -1) {
      return 0;
    }
    else {
      return -1;
    }
  }
  id v19 = v11;
  unint64_t v20 = sub_100306FE8((uint64_t)v19);
  if ((v21 & 1) == 0)
  {
    swift_endAccess();

    id v11 = v24;
    id v10 = v24;
    uint64_t v6 = v19;
    uint64_t v5 = v19;
    goto LABEL_38;
  }
  unint64_t v22 = *(void *)(*(void *)(v18 + 56) + 8 * v20);
  swift_endAccess();

  if (v16 == v22) {
    return 0;
  }
  if (v16 < v22) {
    return -1;
  }
  else {
    return 1;
  }
}

uint64_t type metadata accessor for REMAccountStorageCDIngestor()
{
  return self;
}

_UNKNOWN **sub_100289C1C()
{
  return &off_1008BFAB0;
}

_UNKNOWN **sub_100289C28()
{
  return &off_1008BFA80;
}

_UNKNOWN **sub_100289C34()
{
  return &off_1008BFA50;
}

_UNKNOWN **sub_100289C40()
{
  return &off_1008BFA20;
}

uint64_t sub_100289C4C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  if (a2 >> 60 == 15)
  {
    id v8 = [v6 serializedData];
    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    objc_allocWithZone((Class)REMCRMergeableOrderedSet);
    sub_100097E24(a1, a2);
    id v16 = a3;
    id v28 = sub_10028B1B0((uint64_t)v16);

    id v36 = 0;
    id v29 = [v28 mergedOrderedSetWithOrderedSet:v7 error:&v36];
    if (v29)
    {
      unint64_t v30 = v29;
      id v31 = v36;
      id v32 = [v30 serializedData];
      uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100097F20(a1, a2);
    }
    else
    {
      id v34 = v36;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100907210 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E2DC(v17, (uint64_t)qword_100912048);
      id v18 = a6;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      id v19 = v18;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        id v23 = (void *)swift_slowAlloc();
        id v36 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 138412802;
        uint64_t v35 = a1;
        uint64_t v24 = a4;
        id v25 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v23 = v19;

        *(_WORD *)(v22 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v24, a5, (uint64_t *)&v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v22 + 22) = 2080;
        swift_getErrorValue();
        uint64_t v26 = Error.localizedDescription.getter();
        sub_1000C51B8(v26, v27, (uint64_t *)&v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to merge ordered set for {objectID: %@, key: %s, error: %s}", (uint8_t *)v22, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        sub_100097F20(v35, a2);
      }
      else
      {
        sub_100097F20(a1, a2);
        swift_errorRelease();
        swift_bridgeObjectRelease_n();

        swift_errorRelease();
        swift_errorRelease();
      }
      return 0;
    }
  }
  return v9;
}

Swift::Int sub_10028A0C4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001F5480(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10028A130(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10028A130(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          uint64_t v83 = *(void *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    id v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      id v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      unint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          unint64_t v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          sub_10028A7BC((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v86 = sub_1001F433C((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          uint64_t v90 = &v86[16 * v85 + 32];
          *(void *)uint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          id v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    unint64_t v94 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v92 = v2;
  uint64_t v93 = *v2 - 8;
  id v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(void *)(v10 + 8 * v9);
      uint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          uint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        uint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        id v25 = v22;
        do
        {
          uint64_t v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *id v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v11 = sub_1001F3D80(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = sub_1001F3D80((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      id v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    id v29 = v11 + 32;
    unint64_t v30 = &v11[16 * v28 + 32];
    *(void *)unint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          id v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        BOOL v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        unint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_10028A7BC((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        id v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      id v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10028A7BC(char *__src, char *a2, unint64_t a3, char *__dst)
{
  id v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  Swift::Int v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        while (1)
        {
          Swift::Int v18 = v17 + 8;
          Swift::Int v19 = v6 - 8;
          uint64_t v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            uint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = v20;
            }
            Swift::Int v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v23 = v4;
          uint64_t v15 = v6;
        }
        else
        {
          uint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }
LABEL_42:
    sub_1001F3F4C(&v24, &v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_10028AA2C(void *a1)
{
  id v42 = 0;
  id v3 = [a1 remObjectIDWithError:&v42];
  if (v3)
  {
    id v4 = v3;
    id v5 = v42;
    uint64_t v41 = (int)[a1 type];
    id v6 = [a1 name];
    if (v6)
    {
      uint64_t v7 = v6;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v9 = [a1 listIDsMergeableOrdering];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;
    }
    else
    {
      if (qword_100907210 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10008E2DC(v14, (uint64_t)qword_100912048);
      id v15 = v4;
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        Swift::Int v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = v16;
        Swift::Int v19 = (void *)swift_slowAlloc();
        *(_DWORD *)Swift::Int v18 = 138543362;
        id v42 = v15;
        id v20 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v19 = v4;

        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v11 = 0;
      unint64_t v13 = 0xC000000000000000;
    }
    id v21 = objc_allocWithZone((Class)REMAccountStorage);
    id v22 = v4;
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v1 = [v21 initWithObjectID:v22 type:v41 name:v23 nullableListIDsMergeableOrdering:0];

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v1 setListIDsMergeableOrderingData:isa];

    [v1 setListIDsMergeableOrdering:0];
    id v25 = [a1 externalIdentifier];
    [v1 setExternalIdentifier:v25];

    id v26 = [a1 externalModificationTag];
    [v1 setExternalModificationTag:v26];

    id v27 = [a1 daSyncToken];
    [v1 setDaSyncToken:v27];

    id v28 = [a1 daPushKey];
    [v1 setDaPushKey:v28];

    id v29 = [a1 daConstraintsDescriptionPath];
    [v1 setDaConstraintsDescriptionPath:v29];

    [v1 setDaAllowsCalendarAddDeleteModify:[a1 daAllowsCalendarAddDeleteModify]];
    [v1 setDaWasMigrated:[a1 daWasMigrated]];
    [v1 setDaSupportsSharedCalendars:[a1 daSupportsSharedCalendars]];
    [v1 setDebugSyncDisabled:[a1 debugSyncDisabled]];
    [v1 setInactive:[a1 inactive]];
    [v1 setDidChooseToMigrate:[a1 didChooseToMigrate]];
    [v1 setDidChooseToMigrateLocally:[a1 didChooseToMigrateLocally]];
    [v1 setDidFinishMigration:[a1 didFinishMigration]];
    [v1 setPersistenceCloudSchemaVersion:[a1 persistenceCloudSchemaVersion]];
    id v30 = [a1 personID];
    [v1 setPersonID:v30];

    Class v31 = (Class)[a1 personIDSalt];
    if (v31)
    {
      uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;

      Class v31 = Data._bridgeToObjectiveC()().super.isa;
      sub_100097F34(v32, v34);
    }
    [v1 setPersonIDSalt:v31];

    [v1 setResolutionTokenMap:0];
    Class v35 = (Class)[a1 resolutionTokenMapData];
    if (v35)
    {
      uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      Class v35 = Data._bridgeToObjectiveC()().super.isa;
      sub_100097F34(v36, v38);
    }
    [v1 setResolutionTokenMapData:v35];

    [v1 setMinimumSupportedVersion:[a1 minimumSupportedVersion]];
    [v1 setEffectiveMinimumSupportedVersion:[a1 effectiveMinimumSupportedVersion]];
    sub_100097F34(v11, v13);
  }
  else
  {
    id v8 = v42;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

uint64_t sub_10028B15C()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1A) {
    return 26;
  }
  else {
    return v0;
  }
}

id sub_10028B1B0(uint64_t a1)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = 0;
  id v4 = [v1 initWithReplicaIDSource:a1 serializedData:isa error:&v8];

  if (v4)
  {
    id v5 = v8;
  }
  else
  {
    id v6 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

void sub_10028B280(void *a1, void *a2)
{
  if ([a1 type] == (id)1)
  {
    id v4 = [a1 objectID];
    id v5 = [self localAccountID];
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    char v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) == 0)
    {
      id v7 = [a2 managedObjectContext];
      if (v7
        && (id v8 = v7, v9 = [v7 transactionAuthor],
                     v8,
                     v9))
      {
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v12 = v11;

        v13._object = (void *)0x80000001007CC380;
        v13._countAndFlagsBits = 0xD000000000000010;
        if (String.hasPrefix(_:)(v13)
          || (v14._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(),
              Swift::Bool v15 = String.hasPrefix(_:)(v14),
              swift_bridgeObjectRelease(),
              v15)
          || (v16._countAndFlagsBits = 0xD000000000000016,
              v16._object = (void *)0x80000001007D0180,
              String.hasPrefix(_:)(v16)))
        {
          goto LABEL_20;
        }
        v28[0] = v10;
        v28[1] = v12;
        sub_1000E4FD8();
        if (StringProtocol.contains<A>(_:)())
        {
LABEL_20:
          swift_bridgeObjectRelease();
          return;
        }
        if (qword_100907210 != -1) {
          swift_once();
        }
        uint64_t v23 = type metadata accessor for Logger();
        sub_10008E2DC(v23, (uint64_t)qword_100912048);
        swift_bridgeObjectRetain();
        Swift::Int v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v24, v25))
        {
          id v26 = (uint8_t *)swift_slowAlloc();
          v28[0] = swift_slowAlloc();
          *(_DWORD *)id v26 = 136315138;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v10, v12, v28);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Creating Extraneous Local Account {author: %s}", v26, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        if (qword_100907210 != -1) {
          swift_once();
        }
        uint64_t v17 = type metadata accessor for Logger();
        sub_10008E2DC(v17, (uint64_t)qword_100912048);
        id v27 = a1;
        Swift::Int v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v18, v19))
        {
          id v20 = (uint8_t *)swift_slowAlloc();
          id v21 = (void *)swift_slowAlloc();
          *(_DWORD *)id v20 = 138412290;
          v28[0] = (uint64_t)v27;
          id v22 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v21 = v27;

          _os_log_impl((void *)&_mh_execute_header, v18, v19, "NSManagedObjectContext missing author when updating account.type {storage: %@}", v20, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
    }
  }
}

void sub_10028B794(void *a1, uint64_t a2, SEL *a3, const char *a4, const char *a5)
{
  id v8 = [a1 *a3];
  if (v8)
  {
    id v9 = v8;
    if (qword_100907210 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_100912048);
    id v11 = v9;
    id v12 = a1;
    Swift::String v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    Swift::Bool v15 = &selRef_intersectsSet_;
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138543618;
      id v31 = [v12 remObjectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v17 = v31;

      *(_WORD *)(v16 + 12) = 2048;
      id v18 = [v11 topLevelElementIDs];
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v19 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
      }
      else
      {
      }
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v13, v14, a4, (uint8_t *)v16, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      Swift::Bool v15 = &selRef_intersectsSet_;
    }
    else
    {
    }
    id v25 = [v12 v15[446]];
    id v26 = [self defaultCenter];
    type metadata accessor for REMManualOrderingCDIngestor();
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v25;
    *(void *)(v27 + 24) = v26;
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_10077A530;
    *(void *)(v28 + 32) = v11;
    unint64_t v33 = v28;
    specialized Array._endMutation()();
    id v29 = v11;
    sub_10069BF54(v33, v27);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100907210 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E2DC(v20, (uint64_t)qword_100912048);
    id v30 = a1;
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      Swift::Int v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 138543362;
      id v32 = [v30 remObjectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v24 = v32;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, a5, v23, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_10028BC64(NSObject *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v122 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v122 - 8);
  *(void *)&double v10 = __chkstk_darwin(v122).n128_u64[0];
  uint64_t v121 = (char *)v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [a2 createResolutionTokenMapIfNecessary:v10];
  id v13 = [a1 resolutionTokenMap];
  id v128 = v12;
  if (!v13)
  {
    if (qword_100907210 != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    sub_10008E2DC(v87, (uint64_t)qword_100912048);
    swift_bridgeObjectRetain_n();
    uint64_t v88 = a1;
    uint64_t v89 = Logger.logObject.getter();
    int v90 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v89, (os_log_type_t)v90))
    {
      LODWORD(v127) = v90;
      uint64_t v91 = swift_slowAlloc();
      uint64_t v92 = (void *)swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      uint64_t v132 = v93;
      *(_DWORD *)uint64_t v91 = 138543618;
      unint64_t v94 = [v88 objectID];
      Swift::String v130 = v94;
      double v126 = &v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v129 = v92;
      *uint64_t v92 = v94;

      *(_WORD *)(v91 + 12) = 2082;
      int64_t v95 = *(void *)(a3 + 16);
      if (v95)
      {
        uint64_t v123 = v93;
        uint64_t v124 = v91;
        uint64_t v125 = v89;
        Swift::String v130 = _swiftEmptyArrayStorage;
        sub_1001DE058(0, v95, 0);
        Swift::Int v96 = v130;
        uint64_t v97 = (char *)(a3 + 32);
        unint64_t v98 = v130[2];
        uint64_t v99 = 2 * v98;
        do
        {
          char v100 = *v97++;
          unint64_t v101 = sub_10028826C(v100);
          uint64_t v103 = v102;
          Swift::String v130 = v96;
          unint64_t v104 = v96[3];
          if (v98 >= v104 >> 1)
          {
            sub_1001DE058(v104 > 1, v98 + 1, 1);
            Swift::Int v96 = v130;
          }
          uint64_t v96[2] = v98 + 1;
          uint64_t v105 = &v96[v99];
          unsigned char v105[4] = v101;
          v105[5] = v103;
          v99 += 2;
          ++v98;
          --v95;
        }
        while (v95);
        id v12 = v128;
        uint64_t v91 = v124;
        uint64_t v89 = v125;
      }
      uint64_t v106 = Array.description.getter();
      unint64_t v108 = v107;
      swift_bridgeObjectRelease();
      Swift::String v130 = (void *)sub_1000C51B8(v106, v108, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v127, "REMAccountStorageCDIngestor: merge(storage:into cdAccount:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v91, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v109 = self;
    sub_1000963CC(0, &qword_100910180);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v111 = String._bridgeToObjectiveC()();
    [v109 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v111];

    swift_willThrow();
    goto LABEL_122;
  }
  os_log_type_t v14 = v13;
  id v15 = sub_1004805E4(v13, a3);
  uint64_t v123 = *(void *)(a3 + 16);
  if (!v123)
  {

LABEL_122:
    return;
  }
  id v114 = v14;
  double v126 = (uint64_t *)a4;
  uint64_t v124 = v4;
  uint64_t v118 = (void (**)(char *, uint64_t))(v9 + 8);
  swift_bridgeObjectRetain();
  uint64_t v16 = 0;
  unint64_t v115 = 0x80000001007C65F0;
  *(void *)&long long v17 = 136315138;
  long long v119 = v17;
  unint64_t v120 = (unint64_t)"daIsNotificationsCollection";
  uint64_t v116 = a3;
  os_log_type_t v117 = "";
  v112[1] = (char *)&type metadata for Any + 8;
  unint64_t v113 = 0x80000001007C66C0;
  uint64_t v125 = a1;
  uint64_t v127 = a2;
  id v18 = v15;
  id v129 = v15;
  uint64_t v19 = v123;
  while (2)
  {
    uint64_t v22 = *(unsigned __int8 *)(a3 + v16++ + 32);
    switch(v22)
    {
      case 1:
        sub_10028B280(a1, a2);
        uint64_t v33 = (uint64_t)[a1 type];
        uint64_t v34 = 0x7FFFLL;
        if (v33 < 0x7FFF) {
          uint64_t v34 = v33;
        }
        if (v34 <= -32768) {
          uint64_t v35 = -32768;
        }
        else {
          uint64_t v35 = v34;
        }
        [a2 setType:v35];
        goto LABEL_6;
      case 2:
        v31.super.Class isa = (Class)[a1 name];
        if (!v31.super.isa)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          v31.super.Class isa = (Class)String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        [a2 setName:v31.super.isa];
        goto LABEL_87;
      case 3:
        uint64_t v36 = (uint64_t)v126;
        uint64_t v37 = v124;
        unint64_t v38 = sub_100288FEC(*((unsigned char *)v126 + 16));
        uint64_t v124 = v37;
        if (!v37)
        {
          uint64_t v41 = a1;
          uint64_t v42 = (uint64_t)v38;
          unint64_t v43 = v39;
          uint64_t v44 = v40;
          id v45 = [v41 listIDsMergeableOrderingReplicaIDSource];
          uint64_t v46 = v127;
          uint64_t v47 = sub_100289350(v42, v43, v44, 0xD000000000000018, v115, v45, (uint64_t)v129, *(unsigned char *)(v36 + 16));
          unint64_t v49 = v48;
          swift_bridgeObjectRelease();

          if (v49 >> 60 == 15)
          {
            sub_100097F20(v42, v43);
          }
          else
          {
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            [v46 setListIDsMergeableOrdering:isa];
            sub_100097F20(v42, v43);

            sub_100097F20(v47, v49);
          }
          id v12 = v128;
          id v18 = v129;
          a1 = v125;
          a2 = v46;
          a3 = v116;
          uint64_t v19 = v123;
LABEL_6:
          if (v19 == v16)
          {

            swift_bridgeObjectRelease();
            goto LABEL_122;
          }
          continue;
        }

        swift_bridgeObjectRelease();
        return;
      case 4:
      case 8:
        goto LABEL_6;
      case 5:
        goto LABEL_6;
      case 6:
        goto LABEL_6;
      case 7:
        if (qword_100907210 != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        sub_10008E2DC(v50, (uint64_t)qword_100912048);
        v31.super.Class isa = (Class)Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled((os_log_t)v31.super.isa, v51))
        {
          BOOL v52 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)BOOL v52 = 0;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v31.super.isa, v51, "Actually really doing nothing for a merge on .listsDADisplayOrderChanged", v52, 2u);
          id v12 = v128;
          swift_slowDealloc();
        }
        goto LABEL_87;
      case 9:
        v31.super.Class isa = (Class)[a1 personID];
        [a2 setPersonID:v31.super.isa];
        goto LABEL_87;
      case 10:
        if (qword_100907218 != -1) {
          swift_once();
        }
        if (!*(void *)(qword_1009420F0 + 16)) {
          goto LABEL_78;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(0x44496E6F73726570, 0xEC000000746C6153);
        if (v53)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_78:
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v65 = type metadata accessor for Logger();
          sub_10008E2DC(v65, (uint64_t)qword_100917690);
          uint64_t v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v66, v67))
          {
            uint64_t v68 = swift_slowAlloc();
            uint64_t v132 = swift_slowAlloc();
            *(_DWORD *)uint64_t v68 = v119;
            *(void *)(v68 + 4) = sub_1000C51B8(0x44496E6F73726570, 0xEC000000746C6153, &v132);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v66, v67, "Unknown ingestable key {key: %s}", (uint8_t *)v68, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            id v12 = v128;
            swift_slowDealloc();
          }
        }
        NSString v69 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v18 = v129;
        unsigned __int8 v70 = [v12 mergeWithMap:v129 forKey:v69];

        if (v70)
        {
          v31.super.Class isa = (Class)[a1 personIDSalt];
          if (v31.super.isa)
          {
            uint64_t v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v73 = v72;

            v31.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
            unint64_t v74 = v73;
            id v12 = v128;
            sub_100097F34(v71, v74);
          }
          [a2 setPersonIDSalt:v31.super.isa];
LABEL_87:
        }
        goto LABEL_6;
      case 11:
      case 13:
        if (qword_100907218 != -1) {
          swift_once();
        }
        uint64_t v23 = qword_1009420F0;
        unint64_t v24 = sub_10028826C(v22);
        unint64_t v26 = v25;
        if (!*(void *)(v23 + 16)) {
          goto LABEL_60;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(v24, v26);
        if (v27)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_60:
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v57 = type metadata accessor for Logger();
          sub_10008E2DC(v57, (uint64_t)qword_100917690);
          uint64_t v58 = Logger.logObject.getter();
          os_log_type_t v59 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v58, v59))
          {
            uint64_t v60 = swift_slowAlloc();
            uint64_t v132 = swift_slowAlloc();
            *(_DWORD *)uint64_t v60 = v119;
            *(void *)(v60 + 4) = sub_1000C51B8(v24, v26, &v132);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v58, v59, "Unknown ingestable key {key: %s}", (uint8_t *)v60, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            id v12 = v128;
            swift_slowDealloc();
          }
        }
        NSString v61 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v18 = v129;
        unsigned __int8 v62 = [v12 mergeWithMap:v129 forKey:v61];

        if ((v62 & 1) == 0)
        {
          a1 = v125;
          a2 = v127;
          goto LABEL_6;
        }
        if (v24 == 0xD000000000000012 && v26 == v113)
        {
          swift_bridgeObjectRelease();
LABEL_71:
          a1 = v125;
          id v20 = [v125 didChooseToMigrate];
          id v21 = "setDidChooseToMigrate:";
          goto LABEL_107;
        }
        char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v63) {
          goto LABEL_71;
        }
        a1 = v125;
        id v20 = [v125 didFinishMigration];
        id v21 = "setDidFinishMigration:";
LABEL_107:
        a2 = v127;
LABEL_5:
        [a2 v21:v20];
        goto LABEL_6;
      case 12:
        id v20 = [a1 didChooseToMigrateLocally];
        id v21 = "setDidChooseToMigrateLocally:";
        goto LABEL_5;
      case 14:
        [a2 setPersistenceCloudSchemaVersion:-[NSObject persistenceCloudSchemaVersion](a1, "persistenceCloudSchemaVersion")];
        goto LABEL_6;
      case 15:
        [a2 setInactive:-[a1 inactive]];
        goto LABEL_6;
      case 16:
        v31.super.Class isa = (Class)[a1 externalIdentifier];
        [a2 setExternalIdentifier:v31.super.isa];
        goto LABEL_87;
      case 17:
        v31.super.Class isa = (Class)[a1 externalModificationTag];
        [a2 setExternalModificationTag:v31.super.isa];
        goto LABEL_87;
      case 18:
        v31.super.Class isa = (Class)[a1 daSyncToken];
        [a2 setDaSyncToken:v31.super.isa];
        goto LABEL_87;
      case 19:
        v31.super.Class isa = (Class)[a1 daPushKey];
        [a2 setDaPushKey:v31.super.isa];
        goto LABEL_87;
      case 20:
        v31.super.Class isa = (Class)[a1 daConstraintsDescriptionPath];
        [a2 setDaConstraintsDescriptionPath:v31.super.isa];
        goto LABEL_87;
      case 21:
        [a2 setDaAllowsCalendarAddDeleteModify:-[NSObject daAllowsCalendarAddDeleteModify](a1, "daAllowsCalendarAddDeleteModify")];
        goto LABEL_6;
      case 22:
        [a2 setDaSupportsSharedCalendars:-[NSObject daSupportsSharedCalendars](a1, "daSupportsSharedCalendars")];
        goto LABEL_6;
      case 23:
        if (qword_100907218 != -1) {
          swift_once();
        }
        if (!*(void *)(qword_1009420F0 + 16)) {
          goto LABEL_89;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(0x67694D7361576164, 0xED00006465746172);
        if (v54)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_89:
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v75 = type metadata accessor for Logger();
          sub_10008E2DC(v75, (uint64_t)qword_100917690);
          unint64_t v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v78 = swift_slowAlloc();
            uint64_t v132 = swift_slowAlloc();
            *(_DWORD *)uint64_t v78 = v119;
            *(void *)(v78 + 4) = sub_1000C51B8(0x67694D7361576164, 0xED00006465746172, &v132);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v76, v77, "Unknown ingestable key {key: %s}", (uint8_t *)v78, 0xCu);
            swift_arrayDestroy();
            a2 = v127;
            swift_slowDealloc();
            swift_slowDealloc();
          }
        }
        NSString v79 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v18 = v129;
        unsigned __int8 v80 = [v12 mergeWithMap:v129 forKey:v79];

        if (v80) {
          [a2 setDaWasMigrated:-[NSObject daWasMigrated](a1, "daWasMigrated")];
        }
        goto LABEL_6;
      case 24:
        if (qword_100907218 != -1) {
          swift_once();
        }
        unint64_t v55 = v120 | 0x8000000000000000;
        if (!*(void *)(qword_1009420F0 + 16)) {
          goto LABEL_97;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(0xD000000000000017, v55);
        if (v56)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_97:
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v81 = type metadata accessor for Logger();
          sub_10008E2DC(v81, (uint64_t)qword_100917690);
          uint64_t v82 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v82, v83))
          {
            uint64_t v84 = swift_slowAlloc();
            uint64_t v132 = swift_slowAlloc();
            *(_DWORD *)uint64_t v84 = v119;
            *(void *)(v84 + 4) = sub_1000C51B8(0xD000000000000017, v120 | 0x8000000000000000, &v132);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v82, v83, "Unknown ingestable key {key: %s}", (uint8_t *)v84, 0xCu);
            swift_arrayDestroy();
            a2 = v127;
            swift_slowDealloc();
            id v12 = v128;
            swift_slowDealloc();
          }
        }
        NSString v85 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v18 = v129;
        unsigned __int8 v86 = [v12 mergeWithMap:v129 forKey:v85];

        if (v86) {
          [a2 setMinimumSupportedVersion:-[NSObject minimumSupportedVersion](a1, "minimumSupportedVersion")];
        }
        goto LABEL_6;
      case 25:
        [a2 setDebugSyncDisabled:-[NSObject debugSyncDisabled](a1, "debugSyncDisabled")];
        goto LABEL_6;
      default:
        id v28 = [a1 objectID];
        id v29 = [v28 uuid];

        id v30 = v121;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v31.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        id v32 = v30;
        id v18 = v129;
        (*v118)(v32, v122);
        [a2 setIdentifier:v31.super.isa];
        goto LABEL_87;
    }
  }
}

void sub_10028D180(id a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) == 0)
  {
    id v6 = [a1 listIDsToUndelete];
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    sub_1000E4F40((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
    uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v55 = v4;
    if ((v7 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      Set.Iterator.init(_cocoa:)();
      uint64_t v7 = v56;
      uint64_t v51 = v57;
      uint64_t v8 = v58;
      int64_t v9 = v59;
      unint64_t v10 = v60;
    }
    else
    {
      int64_t v9 = 0;
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v51 = v7 + 56;
      uint64_t v8 = ~v14;
      uint64_t v15 = -v14;
      if (v15 < 64) {
        uint64_t v16 = ~(-1 << v15);
      }
      else {
        uint64_t v16 = -1;
      }
      unint64_t v10 = v16 & *(void *)(v7 + 56);
    }
    int64_t v49 = (unint64_t)(v8 + 64) >> 6;
    if ((v7 & 0x8000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_11:
    uint64_t v17 = v55;
    if (!__CocoaSet.Iterator.next()()
      || (swift_unknownObjectRetain(),
          swift_dynamicCast(),
          id v18 = v66,
          swift_unknownObjectRelease(),
          int64_t v19 = v9,
          uint64_t v20 = v10,
          !v66))
    {
LABEL_70:
      sub_1000C1AF8();
      return;
    }
    while (1)
    {
      sub_100476140(0, v18, a4);
      if (v17) {
        break;
      }
      unint64_t v25 = v24;
      uint64_t v55 = 0;
      [v24 setParentAccount:a2];
      id v26 = [v25 createResolutionTokenMapIfNecessary];
      sub_10047E214(3);
      uint64_t v27 = v7;
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v26 updateForKey:v28];

      uint64_t v7 = v27;
      int64_t v9 = v19;
      unint64_t v10 = v20;
      if (v27 < 0) {
        goto LABEL_11;
      }
LABEL_14:
      uint64_t v17 = v55;
      if (v10)
      {
        uint64_t v20 = (v10 - 1) & v10;
        unint64_t v21 = __clz(__rbit64(v10)) | (v9 << 6);
        int64_t v19 = v9;
      }
      else
      {
        int64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_73;
        }
        if (v19 >= v49) {
          goto LABEL_70;
        }
        unint64_t v22 = *(void *)(v51 + 8 * v19);
        if (!v22)
        {
          int64_t v23 = v9 + 2;
          if (v9 + 2 >= v49) {
            goto LABEL_70;
          }
          unint64_t v22 = *(void *)(v51 + 8 * v23);
          if (v22) {
            goto LABEL_23;
          }
          int64_t v23 = v9 + 3;
          if (v9 + 3 >= v49) {
            goto LABEL_70;
          }
          unint64_t v22 = *(void *)(v51 + 8 * v23);
          if (v22)
          {
LABEL_23:
            int64_t v19 = v23;
          }
          else
          {
            int64_t v19 = v9 + 4;
            if (v9 + 4 >= v49) {
              goto LABEL_70;
            }
            unint64_t v22 = *(void *)(v51 + 8 * v19);
            if (!v22)
            {
              int64_t v29 = v9 + 5;
              while (v49 != v29)
              {
                unint64_t v22 = *(void *)(v51 + 8 * v29++);
                if (v22)
                {
                  int64_t v19 = v29 - 1;
                  goto LABEL_24;
                }
              }
              goto LABEL_70;
            }
          }
        }
LABEL_24:
        uint64_t v20 = (v22 - 1) & v22;
        unint64_t v21 = __clz(__rbit64(v22)) + (v19 << 6);
      }
      id v18 = *(id *)(*(void *)(v7 + 48) + 8 * v21);
      if (!v18) {
        goto LABEL_70;
      }
    }
LABEL_69:
    sub_1000C1AF8();

    return;
  }
  id v11 = [a1 smartListIDsToUndelete];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  sub_1000E4F40((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
  uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v12 & 0xC000000000000001) != 0) {
    uint64_t v13 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v13 = *(void *)(v12 + 16);
  }
  swift_bridgeObjectRelease();
  if (v13)
  {
    id v30 = [a1 smartListIDsToUndelete];
    uint64_t v31 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v31 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      Set.Iterator.init(_cocoa:)();
      uint64_t v31 = v61;
      uint64_t v52 = v62;
      uint64_t v32 = v63;
      int64_t v33 = v64;
      unint64_t v34 = v65;
    }
    else
    {
      int64_t v33 = 0;
      uint64_t v35 = -1 << *(unsigned char *)(v31 + 32);
      uint64_t v52 = v31 + 56;
      uint64_t v36 = ~v35;
      uint64_t v37 = -v35;
      if (v37 < 64) {
        uint64_t v38 = ~(-1 << v37);
      }
      else {
        uint64_t v38 = -1;
      }
      unint64_t v34 = v38 & *(void *)(v31 + 56);
      uint64_t v32 = v36;
    }
    int64_t v50 = (unint64_t)(v32 + 64) >> 6;
    if ((v31 & 0x8000000000000000) == 0) {
      goto LABEL_48;
    }
LABEL_45:
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_70;
    }
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v18 = v66;
    swift_unknownObjectRelease();
    int64_t v39 = v33;
    uint64_t v40 = v34;
    if (!v66) {
      goto LABEL_70;
    }
    while (1)
    {
      sub_100476168(1, v18, a4);
      if (v4) {
        goto LABEL_69;
      }
      id v45 = v44;
      [v44 setParentAccount:a2];
      id v46 = [v45 createResolutionTokenMapIfNecessary];
      sub_10047D91C(1);
      NSString v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v46 updateForKey:v47];

      int64_t v33 = v39;
      unint64_t v34 = v40;
      if (v31 < 0) {
        goto LABEL_45;
      }
LABEL_48:
      if (v34)
      {
        uint64_t v40 = (v34 - 1) & v34;
        unint64_t v41 = __clz(__rbit64(v34)) | (v33 << 6);
        int64_t v39 = v33;
      }
      else
      {
        int64_t v39 = v33 + 1;
        if (__OFADD__(v33, 1))
        {
LABEL_73:
          __break(1u);
          return;
        }
        if (v39 >= v50) {
          goto LABEL_70;
        }
        unint64_t v42 = *(void *)(v52 + 8 * v39);
        if (!v42)
        {
          int64_t v43 = v33 + 2;
          if (v33 + 2 >= v50) {
            goto LABEL_70;
          }
          unint64_t v42 = *(void *)(v52 + 8 * v43);
          if (v42) {
            goto LABEL_57;
          }
          int64_t v43 = v33 + 3;
          if (v33 + 3 >= v50) {
            goto LABEL_70;
          }
          unint64_t v42 = *(void *)(v52 + 8 * v43);
          if (v42)
          {
LABEL_57:
            int64_t v39 = v43;
          }
          else
          {
            int64_t v39 = v33 + 4;
            if (v33 + 4 >= v50) {
              goto LABEL_70;
            }
            unint64_t v42 = *(void *)(v52 + 8 * v39);
            if (!v42)
            {
              int64_t v48 = v33 + 5;
              while (v50 != v48)
              {
                unint64_t v42 = *(void *)(v52 + 8 * v48++);
                if (v42)
                {
                  int64_t v39 = v48 - 1;
                  goto LABEL_58;
                }
              }
              goto LABEL_70;
            }
          }
        }
LABEL_58:
        uint64_t v40 = (v42 - 1) & v42;
        unint64_t v41 = __clz(__rbit64(v42)) + (v39 << 6);
      }
      id v18 = *(id *)(*(void *)(v31 + 48) + 8 * v41);
      if (!v18) {
        goto LABEL_70;
      }
    }
  }
}

uint64_t sub_10028D88C(void *a1, unint64_t a2)
{
  uint64_t v51 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  int64_t v49 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  int64_t v50 = (char *)v44 - v10;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v12 = v11 + 16;
  id v13 = [self cdEntityName];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  id v45 = a1;
  id v17 = sub_100099574(v14, v16);
  swift_bridgeObjectRelease();
  uint64_t v58 = sub_10029137C;
  uint64_t v59 = v11;
  unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
  uint64_t v55 = 1107296256;
  uint64_t v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1002880E8;
  uint64_t v57 = &unk_1008BFB80;
  id v18 = _Block_copy(&aBlock);
  v44[1] = v11;
  swift_retain();
  swift_release();
  [v17 enumerateObjectsUsingBlock:v18];
  _Block_release(v18);

  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v12;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_100291394;
  *(void *)(v20 + 24) = v19;
  uint64_t v58 = sub_1002913AC;
  uint64_t v59 = v20;
  unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
  uint64_t v55 = 1107296256;
  uint64_t v56 = sub_100288114;
  uint64_t v57 = &unk_1008BFBF8;
  unint64_t v21 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v22 = [(id)a2 sortedArrayWithOptions:16 usingComparator:v21];
  _Block_release(v21);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v21)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t aBlock = v23;
    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    sub_100094134(&qword_100914560);
    sub_1000967F4(&qword_100912288, &qword_100914560);
    a2 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();
    unint64_t aBlock = (unint64_t)_swiftEmptyArrayStorage;
    if (!(a2 >> 62))
    {
      uint64_t v24 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v24 = result;
LABEL_4:
  uint64_t v26 = v51;
  v44[0] = v19;
  if (v24)
  {
    if (v24 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v27 = 0;
    uint64_t v52 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    unint64_t v53 = a2 & 0xC000000000000001;
    NSString v28 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    id v46 = (void (**)(char *, uint64_t))(v4 + 8);
    NSString v47 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v29 = (uint64_t)v50;
    unint64_t v48 = a2;
    do
    {
      if (v53) {
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v30 = *(id *)(a2 + 8 * v27 + 32);
      }
      uint64_t v31 = v30;
      id v32 = [v30 identifier:v44[0]];
      if (v32)
      {
        int64_t v33 = v32;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v34 = 0;
      }
      else
      {
        uint64_t v34 = 1;
      }
      (*v52)(v8, v34, 1, v26);
      sub_100096408((uint64_t)v8, v29, (uint64_t *)&unk_100909E50);
      if ((*v28)(v29, 1, v26))
      {
        sub_1000966BC(v29, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v35 = v49;
        (*v47)(v49, v29, v26);
        sub_1000966BC(v29, (uint64_t *)&unk_100909E50);
        UUID.uuidString.getter();
        (*v46)(v35, v26);
        String._bridgeToObjectiveC()();

        swift_bridgeObjectRelease();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v29 = (uint64_t)v50;
        uint64_t v26 = v51;
        a2 = v48;
      }
      ++v27;
    }
    while (v24 != v27);
    swift_bridgeObjectRelease();
    uint64_t v36 = (void *)aBlock;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  sub_10020075C((unint64_t)v36);
  swift_bridgeObjectRelease();
  id v37 = objc_allocWithZone((Class)NSOrderedSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v39 = [v37 initWithArray:isa];

  id v40 = v45;
  id v41 = [v45 orderedSet];
  unsigned int v42 = [v41 isEqual:v39];

  if (v42)
  {
    v40;
    swift_release();
    swift_release();
  }
  else
  {
    id v43 = [v40 replicaIDSource];
    [objc_allocWithZone((Class)REMCRMergeableOrderedSet) initWithReplicaIDSource:v43 orderedSet:v39];
    swift_release();
    swift_release();
  }
  return v42 ^ 1;
}

void sub_10028E004(void *a1)
{
  uint64_t v90 = type metadata accessor for UUID();
  os_log_type_t v83 = *(void (***)(char *, uint64_t))(v90 - 8);
  __chkstk_darwin(v90);
  NSString v85 = (char *)v82 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v91 = (char *)v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v89 = (uint64_t)v82 - v6;
  uint64_t v7 = type metadata accessor for NSFastEnumerationIterator();
  unint64_t v94 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = _swiftEmptyArrayStorage;
  unint64_t v101 = (unint64_t)_swiftEmptyArrayStorage;
  id v11 = a1;
  NSOrderedSet.makeIterator()();

  sub_1002913D4();
  dispatch thunk of IteratorProtocol.next()();
  if (v100)
  {
    *(void *)&long long v95 = (char *)&type metadata for Any + 8;
    do
    {
      sub_10009A1A0(&v99, v98);
      sub_10009A1B0((uint64_t)v98, (uint64_t)v97);
      sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
      if (swift_dynamicCast())
      {
        id v12 = v96;
        if (([v96 daIsNotificationsCollection] & 1) == 0)
        {
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v98);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_5;
        }
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v98);
LABEL_5:
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v100);
  }
  (*(void (**)(char *, uint64_t))(v94 + 8))(v9, v7);
  unint64_t v13 = v101;
  if (v101 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14)
    {
LABEL_13:
      uint64_t v93 = v14;
      *(void *)&long long v99 = _swiftEmptyArrayStorage;
      sub_1001DE908(0, v14 & ~(v14 >> 63), 0);
      uint64_t v15 = v93;
      if (v93 < 0)
      {
LABEL_77:
        __break(1u);
        swift_release();
        __break(1u);
        return;
      }
      uint64_t v16 = 0;
      uint64_t v10 = (void *)v99;
      do
      {
        if ((v13 & 0xC000000000000001) != 0) {
          id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v17 = *(id *)(v13 + 8 * v16 + 32);
        }
        id v18 = v17;
        id v19 = [v17 daDisplayOrder];

        *(void *)&long long v99 = v10;
        unint64_t v21 = v10[2];
        unint64_t v20 = v10[3];
        unint64_t v22 = v21 + 1;
        if (v21 >= v20 >> 1)
        {
          sub_1001DE908(v20 > 1, v21 + 1, 1);
          uint64_t v15 = v93;
          uint64_t v10 = (void *)v99;
        }
        ++v16;
        v10[2] = v22;
        v10[v21 + 4] = v19;
      }
      while (v15 != v16);
      goto LABEL_24;
    }
  }
  uint64_t v93 = v14;
  unint64_t v22 = _swiftEmptyArrayStorage[2];
  uint64_t v23 = _swiftEmptyArrayStorage;
  if (v22)
  {
LABEL_24:
    uint64_t v24 = 0;
    uint64_t v23 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v27 = v10[v24 + 4];
      if (v27 >= 1)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v99 = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1001DE908(0, v23[2] + 1, 1);
          uint64_t v23 = (void *)v99;
        }
        unint64_t v26 = v23[2];
        unint64_t v25 = v23[3];
        if (v26 >= v25 >> 1)
        {
          sub_1001DE908(v25 > 1, v26 + 1, 1);
          uint64_t v23 = (void *)v99;
        }
        v23[2] = v26 + 1;
        v23[v26 + 4] = v27;
      }
      ++v24;
    }
    while (v22 != v24);
  }
  swift_bridgeObjectRelease();
  *(void *)&long long v99 = v23;
  swift_retain();
  sub_10028A0C4((uint64_t *)&v99);
  swift_release();
  uint64_t v92 = v99;
  uint64_t v29 = v91;
  if (qword_100907210 != -1) {
    goto LABEL_75;
  }
  while (1)
  {
    uint64_t v30 = type metadata accessor for Logger();
    uint64_t v31 = sub_10008E2DC(v30, (uint64_t)qword_100912048);
    swift_bridgeObjectRetain();
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 134217984;
      uint64_t v35 = v93;
      *(void *)&long long v99 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Going to back propagate ordering changes to CD lists {listsCount: %ld}", v34, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
      uint64_t v35 = v93;
    }
    if (v35 < 0)
    {
      __break(1u);
      goto LABEL_77;
    }
    uint64_t v36 = v35;
    v82[1] = v31;
    if (!v35) {
      break;
    }
    id v37 = 0;
    unint64_t v38 = 0;
    uint64_t v39 = *(void *)(v92 + 16);
    unint64_t v94 = v13 & 0xC000000000000001;
    *(void *)&long long v95 = v39;
    uint64_t v88 = v92 + 32;
    uint64_t v87 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 7);
    unsigned __int8 v86 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 6);
    uint64_t v84 = (void (**)(char *, uint64_t, uint64_t))(v83 + 2);
    ++v83;
    id v40 = _swiftEmptyArrayStorage;
    while (1)
    {
      id v42 = v94 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v13 + 8 * v38 + 32);
      id v43 = v42;
      uint64_t v44 = (char *)[v42 daDisplayOrder];
      id v45 = v44;
      if (v38 >= (unint64_t)v95)
      {
        id v46 = 0;
      }
      else
      {
        if (v38 >= *(void *)(v92 + 16)) {
          goto LABEL_74;
        }
        id v46 = *(char **)(v88 + 8 * v38);
      }
      if (__OFADD__(v37, 1)) {
        break;
      }
      if ((uint64_t)(v37 + 1) <= (uint64_t)v46) {
        id v37 = v46;
      }
      else {
        ++v37;
      }
      if (v44 != v37)
      {
        [v43 setDaDisplayOrder:v37];
        id v47 = [v43 identifier];
        if (v47)
        {
          unint64_t v48 = v47;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v49 = 0;
        }
        else
        {
          uint64_t v49 = 1;
        }
        unint64_t v50 = v13;
        uint64_t v51 = v90;
        (*v87)(v29, v49, 1, v90);
        uint64_t v52 = (uint64_t)v29;
        uint64_t v53 = v89;
        sub_100096408(v52, v89, (uint64_t *)&unk_100909E50);
        if ((*v86)(v53, 1, v51))
        {
          sub_1000966BC(v53, (uint64_t *)&unk_100909E50);
          uint64_t v54 = 0;
          uint64_t v55 = 0;
        }
        else
        {
          uint64_t v56 = v85;
          (*v84)(v85, v53, v51);
          sub_1000966BC(v53, (uint64_t *)&unk_100909E50);
          uint64_t v57 = v51;
          uint64_t v54 = UUID.uuidString.getter();
          uint64_t v55 = v58;
          (*v83)(v56, v57);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v40 = sub_10030B5A4(0, v40[2] + 1, 1, v40);
        }
        unint64_t v60 = v40[2];
        unint64_t v59 = v40[3];
        if (v60 >= v59 >> 1) {
          id v40 = sub_10030B5A4((void *)(v59 > 1), v60 + 1, 1, v40);
        }
        v40[2] = v60 + 1;
        id v41 = &v40[4 * v60];
        v41[4] = v54;
        v41[5] = v55;
        v41[6] = v45;
        v41[7] = v37;
        uint64_t v29 = v91;
        unint64_t v13 = v50;
        uint64_t v36 = v93;
      }
      ++v38;

      if (v36 == v38) {
        goto LABEL_64;
      }
    }
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    swift_once();
  }
  id v40 = _swiftEmptyArrayStorage;
LABEL_64:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v61 = Logger.logObject.getter();
  int v62 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v61, (os_log_type_t)v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(void *)&long long v99 = v64;
    *(_DWORD *)uint64_t v63 = 136315138;
    int64_t v65 = v40[2];
    if (v65)
    {
      uint64_t v91 = (char *)v64;
      LODWORD(v92) = v62;
      uint64_t v93 = (uint64_t)v63;
      unint64_t v94 = (unint64_t)v61;
      *(void *)&v98[0] = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1001DE930(0, v65, 0);
      uint64_t v66 = *(void *)&v98[0];
      os_log_type_t v67 = v40 + 7;
      long long v95 = xmmword_100776E80;
      do
      {
        uint64_t v68 = *(v67 - 3);
        uint64_t v69 = *(v67 - 2);
        uint64_t v70 = *(v67 - 1);
        uint64_t v71 = *v67;
        sub_100094134((uint64_t *)&unk_10090A430);
        uint64_t v72 = swift_allocObject();
        *(_OWORD *)(v72 + 16) = v95;
        *(void *)(v72 + 56) = &type metadata for Int64;
        *(void *)(v72 + 64) = &protocol witness table for Int64;
        *(void *)(v72 + 72) = v71;
        *(void *)(v72 + 32) = v70;
        *(void *)(v72 + 96) = &type metadata for Int64;
        *(void *)(v72 + 104) = &protocol witness table for Int64;
        swift_bridgeObjectRetain_n();
        uint64_t v73 = String.init(format:_:)();
        uint64_t v75 = v74;
        swift_bridgeObjectRelease();
        *(void *)&v98[0] = v66;
        unint64_t v77 = *(void *)(v66 + 16);
        unint64_t v76 = *(void *)(v66 + 24);
        if (v77 >= v76 >> 1)
        {
          sub_1001DE930(v76 > 1, v77 + 1, 1);
          uint64_t v66 = *(void *)&v98[0];
        }
        v67 += 4;
        *(void *)(v66 + 16) = v77 + 1;
        uint64_t v78 = (void *)(v66 + 32 * v77);
        v78[4] = v68;
        v78[5] = v69;
        v78[6] = v73;
        v78[7] = v75;
        --v65;
      }
      while (v65);
      swift_bridgeObjectRelease();
      uint64_t v63 = (uint8_t *)v93;
      uint64_t v61 = v94;
      LOBYTE(v62) = v92;
    }
    sub_100094134(&qword_10090F6C0);
    uint64_t v79 = Array.description.getter();
    unint64_t v81 = v80;
    swift_bridgeObjectRelease();
    *(void *)&v98[0] = sub_1000C51B8(v79, v81, (uint64_t *)&v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v62, "Back propagated ordering changes to CD lists - {changes: %s}", v63, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_10028EBB8(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v6 = v4;
  id v11 = type metadata accessor for UUID();
  Class isa = (void (**)(void, void, void, void))v11[-1].isa;
  __chkstk_darwin(v11);
  unint64_t v243 = (char *)v223 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v13 - 8);
  uint64_t v230 = (char *)v223 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v231 = (uint64_t)v223 - v16;
  __chkstk_darwin(v17);
  uint64_t v241 = (char *)v223 - v18;
  __chkstk_darwin(v19);
  unsigned int v240 = (char *)v223 - v20;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v223 - v22;
  *(void *)&double v25 = __chkstk_darwin(v24).n128_u64[0];
  uint64_t v27 = (void (**)(char *, uint64_t, id))((char *)v223 - v26);
  unsigned int v28 = [a3 listsDADisplayOrderChanged:v25];
  uint64_t v29 = &selRef_includeReminderTitles;
  int v247 = v11;
  uint64_t v236 = a2;
  uint64_t v235 = a4;
  if (v28)
  {
    unint64_t v245 = (unint64_t)a1;
    if (qword_100907210 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    uint64_t v31 = sub_10008E2DC(v30, (uint64_t)qword_100912048);
    uint64_t v246 = a3;
    id v32 = a3;
    uint64_t v244 = (void *)v31;
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v232 = v4;
      uint64_t v35 = swift_slowAlloc();
      uint64_t v242 = v27;
      uint64_t v36 = (uint8_t *)v35;
      id v37 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 138412290;
      os_log_t v38 = (os_log_t)[v32 remObjectID];
      os_log_t aBlock = v38;
      id v11 = v247;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v37 = v38;
      uint64_t v6 = v232;
      uint64_t v29 = &selRef_includeReminderTitles;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Some lists have changes in .daDisplayOrder so DA display orders is taking precedence as the true sort hint - {account: %@}", v36, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v27 = v242;
      swift_slowDealloc();
    }
    else
    {
    }
    a1 = (void *)v245;
    id v39 = [v32 v29[114]];
    uint64_t v40 = v235;
    a3 = v246;
    if (!v39)
    {
      id v45 = v32;
      id v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = swift_slowAlloc();
        uint64_t v49 = (void *)swift_slowAlloc();
        os_log_t aBlock = (os_log_t)swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = 138543618;
        id v50 = [v45 objectID];
        *(void *)&v248[0] = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v49 = v50;

        *(_WORD *)(v48 + 12) = 2082;
        *(void *)&v248[0] = sub_1000C51B8(0x737473696CLL, 0xE500000000000000, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "REMAccountStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.listIDsMergeableOrdering is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v48, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v55 = self;
      sub_1000963CC(0, &qword_100910180);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v57 = String._bridgeToObjectiveC()();
      id v58 = [v55 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v57];
      goto LABEL_87;
    }
    int v238 = v32;
    id v41 = v236;
    id v42 = v39;
    char v43 = sub_10028D88C(v39, (unint64_t)a1);
    if (v6)
    {

      return;
    }
    uint64_t v237 = v44;
    id v234 = v42;
    if ((v43 & 1) == 0)
    {
      a2 = v41;
      uint64_t v29 = &selRef_includeReminderTitles;
LABEL_34:
      [v238 setListsDADisplayOrderChanged:0];

      goto LABEL_35;
    }
    uint64_t v51 = v238;
    id v52 = [v238 resolutionTokenMap];
    if (!v52)
    {
      unint64_t v59 = v51;
      unint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = swift_slowAlloc();
        uint64_t v63 = (void *)swift_slowAlloc();
        os_log_t aBlock = (os_log_t)swift_slowAlloc();
        *(_DWORD *)uint64_t v62 = 138543618;
        id v64 = [v59 objectID];
        *(void *)&v248[0] = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v63 = v64;

        *(_WORD *)(v62 + 12) = 2082;
        *(void *)&v248[0] = sub_1000C51B8(0x737473696CLL, 0xE500000000000000, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "REMAccountStorageCDIngestor: mutateOrdering() cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v62, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v68 = self;
      sub_1000963CC(0, &qword_100910180);
      uint64_t v69 = swift_getObjCClassFromMetadata();
      NSString v70 = String._bridgeToObjectiveC()();
      [v68 unexpectedNilPropertyWithClass:v69 property:v70];

      swift_willThrow();
      return;
    }
    uint64_t v53 = v52;
    uint64_t v232 = 0;
    sub_10047E1DC(3);
    NSString v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v229 = v53;
    [v53 updateForKey:v54];

    [v51 setListIDsMergeableOrdering:v237];
    if ([a1 firstObject])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v248, 0, sizeof(v248));
    }
    uint64_t v29 = &selRef_includeReminderTitles;
    a2 = v236;
    sub_100096408((uint64_t)v248, (uint64_t)&aBlock, &qword_100908190);
    uint64_t v6 = v232;
    if (v254)
    {
      sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
      if (swift_dynamicCast())
      {
        uint64_t v242 = v27;
        id v65 = v250;
        uint64_t v66 = [v250 account];
        if (v66)
        {
          os_log_type_t v67 = v66;
          sub_10028BC64(v238, v66, (uint64_t)&off_1008B6230, v40);
          if (v6)
          {

            return;
          }

          uint64_t v27 = v242;
          goto LABEL_33;
        }

        uint64_t v27 = v242;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
    }
    os_log_type_t v67 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v67, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v71, "Cannot get any REMCDAccount from the ordered set of lists in the account.", v72, 2u);
      uint64_t v6 = v232;
      swift_slowDealloc();
    }
LABEL_33:

    a1 = (void *)v245;
    a3 = v246;
    goto LABEL_34;
  }
LABEL_35:
  uint64_t v232 = v6;
  if (qword_100907210 != -1) {
    swift_once();
  }
  uint64_t v73 = type metadata accessor for Logger();
  uint64_t v74 = (void *)sub_10008E2DC(v73, (uint64_t)qword_100912048);
  id v75 = a1;
  os_log_t v76 = a3;
  id v77 = v75;
  id v234 = v74;
  uint64_t v78 = Logger.logObject.getter();
  LODWORD(v229) = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v78, (os_log_type_t)v229))
  {

    goto LABEL_61;
  }
  os_log_t v226 = v78;
  uint64_t v242 = v27;
  uint64_t v79 = swift_slowAlloc();
  unint64_t v80 = (void *)swift_slowAlloc();
  os_log_t v224 = (os_log_t)swift_slowAlloc();
  os_log_t aBlock = v224;
  *(_DWORD *)uint64_t v79 = 138412546;
  id v81 = [v76 remObjectID];
  *(void *)&v248[0] = v81;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v223[1] = v80;
  void *v80 = v81;
  os_log_t v228 = v76;

  unint64_t v225 = (uint8_t *)v79;
  *(_WORD *)(v79 + 12) = 2080;
  id v227 = v77;
  *(void *)&v248[0] = v77;
  uint64_t v82 = sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  sub_1000963CC(0, &qword_1009086C8);
  sub_1000E4F40(&qword_1009208E0, &qword_1009086C8);
  unint64_t v83 = Sequence.elements<A>(ofType:)();
  unint64_t v84 = v83;
  if (v83 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v86 = (uint64_t)v242;
    if (v85) {
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v85 = *(void *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v86 = (uint64_t)v242;
    if (v85)
    {
LABEL_40:
      if (v85 < 1)
      {
        __break(1u);
LABEL_125:
        swift_bridgeObjectRetain();
        uint64_t v124 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_65;
      }
      uint64_t v87 = 0;
      unint64_t v245 = v84 & 0xC000000000000001;
      uint64_t v88 = (void (**)(char *, uint64_t, uint64_t, id))(isa + 7);
      uint64_t v89 = (unsigned int (**)(uint64_t, uint64_t, id))(isa + 6);
      int v238 = (isa + 2);
      uint64_t v237 = (void (**)(char *, id))(isa + 1);
      uint64_t v244 = _swiftEmptyArrayStorage;
      uint64_t v246 = (void *)v84;
      os_log_type_t v239 = (void (**)(char *, id))v23;
      do
      {
        if (v245) {
          id v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v90 = *(id *)(v84 + 8 * v87 + 32);
        }
        uint64_t v91 = v90;
        id v92 = [v90 identifier];
        if (v92)
        {
          uint64_t v93 = v92;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v94 = 0;
        }
        else
        {
          uint64_t v94 = 1;
        }
        (*v88)(v23, v94, 1, v11);
        sub_100096408((uint64_t)v23, v86, (uint64_t *)&unk_100909E50);
        if ((*v89)(v86, 1, v11))
        {
          sub_1000966BC(v86, (uint64_t *)&unk_100909E50);
        }
        else
        {
          long long v95 = v243;
          ((void (*)(char *, uint64_t, NSObject *))v238->isa)(v243, v86, v11);
          sub_1000966BC(v86, (uint64_t *)&unk_100909E50);
          uint64_t v96 = UUID.uuidString.getter();
          uint64_t v98 = v97;
          (*v237)(v95, v11);

          long long v99 = v244;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v99 = sub_100308F88(0, v99[2] + 1, 1, v99);
          }
          unint64_t v101 = v99[2];
          unint64_t v100 = v99[3];
          if (v101 >= v100 >> 1) {
            long long v99 = sub_100308F88((void *)(v100 > 1), v101 + 1, 1, v99);
          }
          v99[2] = v101 + 1;
          uint64_t v244 = v99;
          uint64_t v102 = &v99[2 * v101];
          v102[4] = v96;
          v102[5] = v98;
          id v11 = v247;
          uint64_t v23 = (char *)v239;
          uint64_t v86 = (uint64_t)v242;
        }
        ++v87;
        unint64_t v84 = (unint64_t)v246;
      }
      while (v85 != v87);
      goto LABEL_60;
    }
  }
  uint64_t v244 = _swiftEmptyArrayStorage;
LABEL_60:
  swift_bridgeObjectRelease_n();
  uint64_t v103 = v225;
  uint64_t v104 = Array.description.getter();
  unint64_t v106 = v105;
  swift_bridgeObjectRelease();
  *(void *)&v248[0] = sub_1000C51B8(v104, v106, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  id v77 = v227;

  swift_bridgeObjectRelease();
  os_log_t v107 = v226;
  _os_log_impl((void *)&_mh_execute_header, v226, (os_log_type_t)v229, "sorting ordered set account.lists - before - {account: %@, lists: %s}", v103, 0x16u);
  sub_100094134((uint64_t *)&unk_10090A040);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  a2 = v236;
  uint64_t v29 = &selRef_includeReminderTitles;
  os_log_t v76 = v228;
LABEL_61:
  unint64_t v108 = (void (**)(char *, id))[v76 v29[114]];
  if (!v108)
  {
    unint64_t v144 = v76;
    uint64_t v145 = Logger.logObject.getter();
    os_log_type_t v146 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v145, v146))
    {
      uint64_t v147 = swift_slowAlloc();
      os_log_t v148 = (void *)swift_slowAlloc();
      os_log_t aBlock = (os_log_t)swift_slowAlloc();
      *(_DWORD *)uint64_t v147 = 138543618;
      id v149 = [v144 objectID];
      *(void *)&v248[0] = v149;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_t v148 = v149;

      *(_WORD *)(v147 + 12) = 2082;
      *(void *)&v248[0] = sub_1000C51B8(0x737473696CLL, 0xE500000000000000, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v145, v146, "REMAccountStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.listIDsMergeableOrdering is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v147, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v150 = self;
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    uint64_t v151 = swift_getObjCClassFromMetadata();
    NSString v57 = String._bridgeToObjectiveC()();
    id v58 = [v150 unexpectedNilPropertyWithClass:v151 property:v57];
LABEL_87:
    v58;

    swift_willThrow();
    return;
  }
  uint64_t v109 = v108;
  uint64_t v110 = swift_allocObject();
  *(void *)(v110 + 16) = _swiftEmptyDictionarySingleton;
  NSString v111 = (uint64_t *)(v110 + 16);
  id v255 = sub_10029135C;
  uint64_t v256 = v110;
  os_log_t aBlock = (os_log_t)_NSConcreteStackBlock;
  uint64_t v5 = 1107296256;
  uint64_t v252 = 1107296256;
  uint64_t v253 = sub_1002880E8;
  uint64_t v254 = &unk_1008BFB08;
  os_log_t v112 = v76;
  unint64_t v113 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v109 enumerateObjectsUsingBlock:v113];
  _Block_release(v113);
  swift_beginAccess();
  uint64_t v114 = *v111;
  swift_bridgeObjectRetain();
  sub_100098560((uint64_t)v77, v114, 0);
  swift_release();
  swift_bridgeObjectRelease();
  id v115 = v77;
  uint64_t v116 = v112;
  os_log_type_t v117 = v115;
  uint64_t v118 = Logger.logObject.getter();
  LODWORD(v229) = static os_log_type_t.debug.getter();
  BOOL v119 = os_log_type_enabled(v118, (os_log_type_t)v229);
  uint64_t v237 = v109;
  int v238 = v117;
  if (!v119)
  {

    goto LABEL_90;
  }
  os_log_t v228 = v118;
  unint64_t v120 = (_WORD *)swift_slowAlloc();
  uint64_t v121 = (uint8_t *)swift_slowAlloc();
  os_log_t v226 = (os_log_t)swift_slowAlloc();
  os_log_t aBlock = v226;
  *(_DWORD *)unint64_t v120 = 138412546;
  id v122 = [v116 remObjectID];
  id v250 = v122;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  unint64_t v225 = v121;
  *(void *)uint64_t v121 = v122;

  id v227 = v120;
  v120[6] = 2080;
  id v250 = v117;
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  sub_1000963CC(0, &qword_1009086C8);
  sub_1000E4F40(&qword_1009208E0, &qword_1009086C8);
  unint64_t v123 = Sequence.elements<A>(ofType:)();
  uint64_t v82 = v123;
  if (v123 >> 62) {
    goto LABEL_125;
  }
  uint64_t v124 = *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_65:
  uint64_t v126 = (uint64_t)v240;
  uint64_t v125 = (uint64_t)v241;
  if (v124)
  {
    if (v124 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v127 = 0;
    uint64_t v244 = (void *)(v82 & 0xC000000000000001);
    id v128 = (void (**)(uint64_t, uint64_t, uint64_t, id))(isa + 7);
    id v129 = (unsigned int (**)(uint64_t, uint64_t, id))(isa + 6);
    uint64_t v242 = (void (**)(char *, uint64_t, id))(isa + 2);
    os_log_type_t v239 = (void (**)(char *, id))(isa + 1);
    unint64_t v245 = v82;
    uint64_t v246 = _swiftEmptyArrayStorage;
    do
    {
      if (v244) {
        id v130 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v130 = *(id *)(v82 + 8 * v127 + 32);
      }
      uint64_t v131 = v130;
      id v132 = [v130 identifier];
      if (v132)
      {
        uint64_t v133 = v132;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v134 = 0;
      }
      else
      {
        uint64_t v134 = 1;
      }
      unint64_t v135 = v247;
      (*v128)(v125, v134, 1, v247);
      sub_100096408(v125, v126, (uint64_t *)&unk_100909E50);
      if ((*v129)(v126, 1, v135))
      {
        sub_1000966BC(v126, (uint64_t *)&unk_100909E50);
      }
      else
      {
        id v136 = v243;
        (*v242)(v243, v126, v135);
        sub_1000966BC(v126, (uint64_t *)&unk_100909E50);
        uint64_t v137 = UUID.uuidString.getter();
        uint64_t v139 = v138;
        (*v239)(v136, v135);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v246 = sub_100308F88(0, v246[2] + 1, 1, v246);
        }
        unint64_t v141 = v246[2];
        unint64_t v140 = v246[3];
        uint64_t v125 = (uint64_t)v241;
        if (v141 >= v140 >> 1) {
          uint64_t v246 = sub_100308F88((void *)(v140 > 1), v141 + 1, 1, v246);
        }
        Class v142 = v246;
        v246[2] = v141 + 1;
        long long v143 = &v142[2 * v141];
        Swift::Int v143[4] = v137;
        v143[5] = v139;
        uint64_t v126 = (uint64_t)v240;
      }
      ++v127;
      uint64_t v82 = v245;
    }
    while (v124 != v127);
  }
  else
  {
    uint64_t v246 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease_n();
  unint64_t v152 = (uint8_t *)v227;
  uint64_t v153 = Array.description.getter();
  unint64_t v155 = v154;
  swift_bridgeObjectRelease();
  id v250 = (id)sub_1000C51B8(v153, v155, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t v156 = v238;

  swift_bridgeObjectRelease();
  os_log_t v157 = v228;
  _os_log_impl((void *)&_mh_execute_header, v228, (os_log_type_t)v229, "sorting ordered set account.lists - after - {account: %@, lists: %s}", v152, 0x16u);
  sub_100094134((uint64_t *)&unk_10090A040);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  a2 = v236;
  id v11 = v247;
  uint64_t v109 = v237;
LABEL_90:
  NSString v158 = String._bridgeToObjectiveC()();
  long long v159 = [a2 mutableOrderedSetValueForKey:v158];

  uint64_t v160 = (uint64_t)[v159 count];
  uint64_t v246 = v159;
  if (v160 >= 1)
  {
    uint64_t v161 = swift_allocObject();
    *(void *)(v161 + 16) = _swiftEmptyDictionarySingleton;
    uint64_t v162 = (uint64_t *)(v161 + 16);
    id v255 = sub_10029135C;
    uint64_t v256 = v161;
    os_log_t aBlock = (os_log_t)_NSConcreteStackBlock;
    uint64_t v252 = v5;
    uint64_t v253 = sub_1002880E8;
    uint64_t v254 = &unk_1008BFB30;
    uint64_t v163 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v109 enumerateObjectsUsingBlock:v163];
    _Block_release(v163);
    swift_beginAccess();
    uint64_t v164 = *v162;
    swift_bridgeObjectRetain();
    sub_100098560((uint64_t)v159, v164, 0);
    swift_release();
    swift_bridgeObjectRelease();
    id v165 = a2;
    id v166 = v159;
    id v167 = v165;
    uint64_t v168 = v166;
    unint64_t v169 = Logger.logObject.getter();
    os_log_type_t v170 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v169, v170))
    {
      uint64_t v171 = swift_slowAlloc();
      id v250 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v171 = 136446466;
      id v172 = [v167 remObjectID];
      if (v172)
      {
        unint64_t v173 = v172;
        id v174 = [v172 description];

        uint64_t v175 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v177 = v176;
      }
      else
      {
        uint64_t v175 = 7104878;
        unint64_t v177 = 0xE300000000000000;
      }
      uint64_t v249 = sub_1000C51B8(v175, v177, (uint64_t *)&v250);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v171 + 12) = 2048;
      id v178 = [v168 count];

      uint64_t v249 = (uint64_t)v178;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v169, v170, "REMAccountStorage+CDIngestor.mutateOrdering(): Sorted account.smartLists {account: %{public}s, #smartLists: %ld}", (uint8_t *)v171, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a2 = v236;
      id v11 = v247;
      uint64_t v109 = v237;
    }
    else
    {

      a2 = v236;
    }
    long long v159 = v246;
  }
  id v179 = [a2 identifier];
  if (v179)
  {
    uint64_t v180 = v179;
    uint64_t v181 = (uint64_t)v230;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v182 = 0;
  }
  else
  {
    uint64_t v182 = 1;
    uint64_t v181 = (uint64_t)v230;
  }
  uint64_t v183 = isa;
  ((void (**)(uint64_t, uint64_t, uint64_t, NSObject *))isa)[7](v181, v182, 1, v11);
  uint64_t v184 = v231;
  sub_100096408(v181, v231, (uint64_t *)&unk_100909E50);
  if (((unsigned int (*)(uint64_t, uint64_t, NSObject *))v183[6])(v184, 1, v11))
  {
    sub_1000966BC(v184, (uint64_t *)&unk_100909E50);
LABEL_103:
    id v185 = a2;
    uint64_t v186 = Logger.logObject.getter();
    os_log_type_t v187 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v186, v187))
    {
      uint64_t v188 = (uint8_t *)swift_slowAlloc();
      id v250 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v188 = 136446210;
      id v189 = [v185 remObjectID];
      if (v189)
      {
        uint64_t v190 = v189;
        id v191 = [v189 description];

        uint64_t v192 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v194 = v193;
      }
      else
      {
        uint64_t v192 = 7104878;
        unint64_t v194 = 0xE300000000000000;
      }
      uint64_t v249 = sub_1000C51B8(v192, v194, (uint64_t *)&v250);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v186, v187, "REMAccountStorage+CDIngestor.mutateOrdering(): Could not proceed to upsertOrderedIdentifiersForAccountListView() because there is problem finding the persistent store for the account {account: %{public}s}", v188, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_118:
      uint64_t v109 = v237;
      long long v159 = v246;
      goto LABEL_119;
    }

    goto LABEL_119;
  }
  unint64_t v195 = v243;
  ((void (*)(char *, uint64_t, NSObject *))v183[2])(v243, v184, v11);
  sub_1000966BC(v184, (uint64_t *)&unk_100909E50);
  UUID.uuidString.getter();
  ((void (*)(char *, NSObject *))v183[1])(v195, v11);
  unint64_t v196 = *(void **)(v235 + 80);
  NSString v197 = String._bridgeToObjectiveC()();
  id v198 = [v196 storeForAccountIdentifier:v197];
  swift_bridgeObjectRelease();

  if (!v198) {
    goto LABEL_103;
  }
  unint64_t v199 = (void *)sub_10065C8AC();
  uint64_t v200 = v232;
  sub_10064DCC4(v238, v199, v109, v198);
  if (v200) {
    swift_errorRelease();
  }
  uint64_t v232 = 0;
  NSString v201 = v238;
  id v202 = a2;
  id v203 = v199;
  uint64_t v204 = v201;
  id v205 = v202;
  id v206 = v203;
  uint64_t v207 = Logger.logObject.getter();
  int v208 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v207, (os_log_type_t)v208))
  {
    LODWORD(v245) = v208;
    uint64_t v209 = swift_slowAlloc();
    uint64_t v244 = (void *)swift_slowAlloc();
    id v250 = v244;
    *(_DWORD *)uint64_t v209 = 136446722;
    id v210 = [v205 remObjectID];
    int v247 = v204;
    if (v210)
    {
      uint64_t v211 = v210;
      id v212 = [v210 description];

      uint64_t v213 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v215 = v214;
    }
    else
    {
      uint64_t v213 = 7104878;
      unint64_t v215 = 0xE300000000000000;
    }
    uint64_t v249 = sub_1000C51B8(v213, v215, (uint64_t *)&v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v209 + 12) = 2048;
    id v216 = [v206 count];

    uint64_t v249 = (uint64_t)v216;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v209 + 22) = 2048;
    uint64_t v217 = v247;
    id v218 = [v247 count];

    uint64_t v249 = (uint64_t)v218;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v207, (os_log_type_t)v245, "REMAccountStorage+CDIngestor.mutateOrdering(): Sorted intermixed ordered IDs for CSLs and Lists in REMCDAccountListData {account: %{public}s, #csls: %ld, #lists: %ld}", (uint8_t *)v209, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v236;
    goto LABEL_118;
  }

  uint64_t v109 = v237;
LABEL_119:
  if ((*(unsigned char *)(v235 + 17) & 1) == 0
    && (id v219 = [a2 accountTypeHost],
        unsigned __int8 v220 = [v219 isLocal],
        v219,
        (v220 & 1) != 0)
    || (id v221 = [a2 accountTypeHost],
        unsigned int v222 = [v221 isCalDav],
        v221,
        v222))
  {
    sub_10028E004(v238);
  }
}

uint64_t sub_100290DF4(void *a1, uint64_t a2)
{
  uint64_t v39 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v40 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  uint64_t v35 = a1;
  if (v6) {
    goto LABEL_7;
  }
LABEL_8:
  while (2)
  {
    int64_t v11 = v8 + 1;
    if (!__OFADD__(v8, 1))
    {
      if (v11 < v40)
      {
        unint64_t v12 = *(void *)(v39 + 8 * v11);
        ++v8;
        if (v12) {
          goto LABEL_25;
        }
        int64_t v8 = v11 + 1;
        if (v11 + 1 >= v40) {
          goto LABEL_43;
        }
        unint64_t v12 = *(void *)(v39 + 8 * v8);
        if (v12) {
          goto LABEL_25;
        }
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v40) {
          goto LABEL_43;
        }
        unint64_t v12 = *(void *)(v39 + 8 * v8);
        if (v12) {
          goto LABEL_25;
        }
        int64_t v8 = v11 + 3;
        if (v11 + 3 >= v40) {
          goto LABEL_43;
        }
        unint64_t v12 = *(void *)(v39 + 8 * v8);
        if (v12) {
          goto LABEL_25;
        }
        int64_t v8 = v11 + 4;
        if (v11 + 4 >= v40) {
          goto LABEL_43;
        }
        unint64_t v12 = *(void *)(v39 + 8 * v8);
        if (v12)
        {
LABEL_25:
          unint64_t v6 = (v12 - 1) & v12;
          for (unint64_t i = __clz(__rbit64(v12)) + (v8 << 6); ; unint64_t i = v9 | (v8 << 6))
          {
            uint64_t v14 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
            unint64_t v15 = v14[1];
            if (!*(void *)(a2 + 16)) {
              break;
            }
            uint64_t v16 = *v14;
            swift_bridgeObjectRetain_n();
            unint64_t v17 = sub_1001806F8(v16, v15);
            if (v18)
            {
              sub_10009A1B0(*(void *)(a2 + 56) + 32 * v17, (uint64_t)&v42);
            }
            else
            {
              long long v42 = 0u;
              long long v43 = 0u;
            }
            swift_bridgeObjectRelease();
            if (!*((void *)&v43 + 1)) {
              goto LABEL_6;
            }
            sub_10009A1A0(&v42, &v44);
            NSString v19 = String._bridgeToObjectiveC()();
            sub_1000C0DE0(&v44, v45);
            unsigned __int8 v20 = [a1 postAccountPropertyChangeNotificationWithKey:v19 changedValue:_bridgeAnythingToObjectiveC<A>(_:)()];

            swift_unknownObjectRelease();
            if (v20)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              if (qword_100907210 != -1) {
                swift_once();
              }
              uint64_t v21 = type metadata accessor for Logger();
              sub_10008E2DC(v21, (uint64_t)qword_100912048);
              sub_10009A1B0((uint64_t)&v44, (uint64_t)&v42);
              id v22 = a1;
              swift_bridgeObjectRetain();
              id v23 = v22;
              uint64_t v24 = Logger.logObject.getter();
              os_log_type_t v25 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v24, v25))
              {
                os_log_type_t v37 = v25;
                log = v24;
                uint64_t v26 = swift_slowAlloc();
                uint64_t v46 = swift_slowAlloc();
                *(_DWORD *)uint64_t v26 = 136315650;
                id v27 = [v23 remObjectID];
                if (v27)
                {
                  unsigned int v28 = v27;
                  id v29 = [v27 description];

                  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v31 = v30;

                  uint64_t v32 = v36;
                  a1 = v35;
                }
                else
                {
                  unint64_t v31 = 0xE300000000000000;
                  uint64_t v32 = 7104878;
                }
                *(void *)(v26 + 4) = sub_1000C51B8(v32, v31, &v46);

                swift_bridgeObjectRelease();
                *(_WORD *)(v26 + 12) = 2080;
                swift_bridgeObjectRetain();
                *(void *)(v26 + 14) = sub_1000C51B8(v16, v15, &v46);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v26 + 22) = 2080;
                sub_10009A1B0((uint64_t)&v42, (uint64_t)v41);
                uint64_t v33 = String.init<A>(describing:)();
                *(void *)(v26 + 24) = sub_1000C51B8(v33, v34, &v46);
                swift_bridgeObjectRelease();
                _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v42);
                _os_log_impl((void *)&_mh_execute_header, log, v37, "REMCDAccountStorage+CDIngestor: Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {remObjectID: %s, changedKey: %s, changedValue: %s}", (uint8_t *)v26, 0x20u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_bridgeObjectRelease_n();

                _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v42);
              }
            }
            uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v44);
            if (!v6) {
              goto LABEL_8;
            }
LABEL_7:
            unint64_t v9 = __clz(__rbit64(v6));
            v6 &= v6 - 1;
          }
          long long v42 = 0u;
          long long v43 = 0u;
          swift_bridgeObjectRetain();
LABEL_6:
          swift_bridgeObjectRelease();
          uint64_t result = sub_1000966BC((uint64_t)&v42, &qword_100908190);
          if (!v6) {
            continue;
          }
          goto LABEL_7;
        }
        int64_t v13 = v11 + 5;
        if (v13 < v40)
        {
          unint64_t v12 = *(void *)(v39 + 8 * v13);
          if (v12)
          {
            int64_t v8 = v13;
            goto LABEL_25;
          }
          while (1)
          {
            int64_t v8 = v13 + 1;
            if (__OFADD__(v13, 1)) {
              goto LABEL_45;
            }
            if (v8 >= v40) {
              break;
            }
            unint64_t v12 = *(void *)(v39 + 8 * v8);
            ++v13;
            if (v12) {
              goto LABEL_25;
            }
          }
        }
      }
LABEL_43:
      swift_release();
      return swift_bridgeObjectRelease();
    }
    break;
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_100291324()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10029135C(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1000994C0(a1, a2, a3, v3);
}

uint64_t sub_100291364(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100291374()
{
  return swift_release();
}

uint64_t sub_10029137C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100289788(a1, a2, a3, v3);
}

uint64_t sub_100291384()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100291394(uint64_t a1, uint64_t a2)
{
  return sub_1002898AC(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_10029139C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002913AC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_1002913D4()
{
  unint64_t result = qword_100910238;
  if (!qword_100910238)
  {
    type metadata accessor for NSFastEnumerationIterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910238);
  }
  return result;
}

id sub_10029142C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6)
{
  if (a2 >> 60 == 15)
  {
    if (qword_100907210 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_100912048);
    id v11 = a6;
    swift_bridgeObjectRetain_n();
    id v12 = v11;
    int64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412546;
      id v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v12;

      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a4, a5, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unexpected nil mergeable ordering data {objectID: %@, key: %s}", (uint8_t *)v15, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v22 = objc_allocWithZone((Class)NSOrderedSet);
    id v23 = a3;
    id v24 = [v22 init];
    id v25 = [objc_allocWithZone((Class)REMCRMergeableOrderedSet) initWithReplicaIDSource:v23 orderedSet:v24];
  }
  else
  {
    id v20 = objc_allocWithZone((Class)REMCRMergeableOrderedSet);
    sub_100097E24(a1, a2);
    id v21 = a3;
    id v25 = sub_10028B1B0((uint64_t)v21);

    sub_100097F20(a1, a2);
  }
  return v25;
}

ValueMetadata *type metadata accessor for REMAccountStorageCDIngestor.RelationshipOrderingValueKey()
{
  return &type metadata for REMAccountStorageCDIngestor.RelationshipOrderingValueKey;
}

unsigned char *storeEnumTagSinglePayload for REMAccountStorageCDIngestor.OrderableRelationshipKey(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100291AF4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for REMAccountStorageCDIngestor.OrderableRelationshipKey()
{
  return &type metadata for REMAccountStorageCDIngestor.OrderableRelationshipKey;
}

unsigned char *_s7remindd27REMAccountStorageCDIngestorC28RelationshipOrderingValueKeyOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100291BF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMAccountStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMAccountStorageCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMAccountStorageCDIngestor.ValueKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE7) {
    goto LABEL_17;
  }
  if (a2 + 25 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 25) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 25;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  int v8 = v6 - 26;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for REMAccountStorageCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE6)
  {
    unsigned int v6 = ((a2 - 231) >> 8) + 1;
    *unint64_t result = a2 + 25;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100291D8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 25;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMAccountStorageCDIngestor.ValueKey()
{
  return &type metadata for REMAccountStorageCDIngestor.ValueKey;
}

uint64_t sub_100291DC4()
{
  return sub_1000967F4(&qword_100912290, &qword_100912298);
}

unint64_t sub_100291E04()
{
  unint64_t result = qword_1009122A0;
  if (!qword_1009122A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009122A0);
  }
  return result;
}

uint64_t sub_100291E58()
{
  return sub_1000967F4(&qword_1009122A8, &qword_1009122B0);
}

unint64_t sub_100291E98()
{
  unint64_t result = qword_1009122B8;
  if (!qword_1009122B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009122B8);
  }
  return result;
}

uint64_t sub_100291EEC()
{
  return sub_1000967F4(&qword_1009122C0, &qword_1009122C8);
}

unint64_t sub_100291F2C()
{
  unint64_t result = qword_1009122D0;
  if (!qword_1009122D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009122D0);
  }
  return result;
}

uint64_t sub_100291F80()
{
  return sub_1000967F4(&qword_1009122D8, &qword_1009122E0);
}

unint64_t sub_100291FC0()
{
  unint64_t result = qword_1009122E8;
  if (!qword_1009122E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009122E8);
  }
  return result;
}

uint64_t sub_100292030()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009122F0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009122F0);
  if (qword_1009077D8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423D0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002920F8()
{
  return sub_10029391C("RDBeforeFirstUnlockNotificationEngine: Going to update lastPresentAlarmDate based on delivered notifications.", (uint64_t)&unk_1008BFFC0, (uint64_t)sub_100297984, (uint64_t)&unk_1008BFFD8);
}

uint64_t sub_100292128(unint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v58 = (char *)&v57 - v6;
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v57 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v60 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  os_log_type_t v61 = (char *)&v57 - v14;
  __chkstk_darwin(v15);
  id v17 = (char *)&v57 - v16;
  unint64_t v67 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v57 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v65 = a1;
  uint64_t v66 = v11;
  unint64_t v59 = v4;
  if (v18)
  {
    if (v18 < 1)
    {
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v19 = 0;
    unint64_t v20 = a1 & 0xC000000000000001;
    do
    {
      if (v20) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(a1 + 8 * v19 + 32);
      }
      id v22 = v21;
      id v23 = [v21 request:v57];
      id v24 = [v23 content];

      LOBYTE(v23) = UNNotificationContent.firesBeforeFirstUnlock.getter();
      if (v23)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
      ++v19;
      a1 = v65;
    }
    while (v18 != v19);
    swift_bridgeObjectRelease();
    unint64_t v25 = v67;
    uint64_t v11 = v66;
    unsigned int v4 = v59;
    if ((v67 & 0x8000000000000000) != 0) {
      goto LABEL_35;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v25 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_35;
    }
  }
  if ((v25 & 0x4000000000000000) == 0)
  {
    uint64_t v26 = *(void *)(v25 + 16);
    if (!v26) {
      goto LABEL_36;
    }
LABEL_18:
    unint64_t v67 = (unint64_t)_swiftEmptyArrayStorage;
    sub_1001DE448(0, v26 & ~(v26 >> 63), 0);
    if ((v26 & 0x8000000000000000) == 0)
    {
      uint64_t v63 = v26;
      unint64_t v64 = v25;
      uint64_t v27 = 0;
      unint64_t v62 = v25 & 0xC000000000000001;
      unsigned int v28 = (void (**)(char *, char *, uint64_t))(v11 + 32);
      id v29 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      unint64_t v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      while (1)
      {
        id v31 = v62 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v64 + 8 * v27 + 32);
        uint64_t v32 = v31;
        id v33 = [v31 request:v57];
        id v34 = [v33 content];

        id v35 = [v34 date];
        if (!v35) {
          break;
        }
        uint64_t v36 = v61;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        os_log_type_t v37 = *v28;
        (*v28)(v9, v36, v10);
        (*v29)(v9, 0, 1, v10);
        if ((*v30)(v9, 1, v10) == 1) {
          goto LABEL_27;
        }
        v37(v17, v9, v10);
LABEL_28:

        uint64_t v39 = (void *)v67;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE448(0, v39[2] + 1, 1);
          uint64_t v39 = (void *)v67;
        }
        unint64_t v41 = v39[2];
        unint64_t v40 = v39[3];
        if (v41 >= v40 >> 1)
        {
          sub_1001DE448(v40 > 1, v41 + 1, 1);
          uint64_t v39 = (void *)v67;
        }
        ++v27;
        v39[2] = v41 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v66 + 32))((unint64_t)v39+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(void *)(v66 + 72) * v41, v17, v10);
        unint64_t v67 = (unint64_t)v39;
        if (v63 == v27)
        {
          swift_release();
          a1 = v65;
          uint64_t v11 = v66;
          long long v42 = v58;
          unsigned int v4 = v59;
          goto LABEL_37;
        }
      }
      (*v29)(v9, 1, 1, v10);
LABEL_27:
      id v38 = [v32 date];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000EACF4((uint64_t)v9);
      goto LABEL_28;
    }
LABEL_56:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
LABEL_35:
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v26) {
    goto LABEL_18;
  }
LABEL_36:
  swift_release();
  uint64_t v39 = _swiftEmptyArrayStorage;
  long long v42 = v58;
LABEL_37:
  unint64_t v67 = (unint64_t)v39;
  swift_bridgeObjectRetain();
  sub_100295180((void **)&v67);
  swift_bridgeObjectRelease();
  long long v43 = (void *)v67;
  if (qword_100907220 != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  sub_10008E2DC(v44, (uint64_t)qword_1009122F0);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 134218240;
    if (v57)
    {
      swift_bridgeObjectRetain();
      uint64_t v48 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v48 = *(void **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    unint64_t v67 = (unint64_t)v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v47 + 12) = 2048;
    uint64_t v49 = (void *)v43[2];
    swift_release();
    unint64_t v67 = (unint64_t)v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "RDBeforeFirstUnlockNotificationEngine: Found %ld delivered notifications, %ld considered for lastPresentAlarmDate.", (uint8_t *)v47, 0x16u);
    swift_slowDealloc();

    uint64_t v11 = v66;
    long long v42 = v58;
    unsigned int v4 = v59;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  id v50 = v60;
  Date.init()();
  id v51 = [self daemonUserDefaults];
  __chkstk_darwin(v51);
  *(&v57 - 2) = (unint64_t)v50;
  sub_10058B7E4((uint64_t (*)(char *))sub_1002979C0, (uint64_t)v43, v4);
  id v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v52(v4, 1, v10) == 1)
  {
    uint64_t v53 = v43[2];
    if (v53)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v42, (unint64_t)v43+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * (v53 - 1), v10);
      uint64_t v54 = 0;
    }
    else
    {
      uint64_t v54 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v42, v54, 1, v10);
    swift_release();
    sub_1000EACF4((uint64_t)v4);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v4, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
  }
  if (v52(v42, 1, v10) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
  }
  [v51 setLastPresentAlarmDate:isa v57];

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v60, v10);
}

BOOL sub_100292A70()
{
  return (dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0;
}

void sub_100292B04()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v72 = *(void *)(v0 - 8);
  uint64_t v73 = v0;
  uint64_t v1 = __chkstk_darwin(v0);
  os_log_type_t v71 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  NSString v70 = (char *)&v58 - v3;
  uint64_t v4 = type metadata accessor for DispatchWallTime();
  uint64_t v68 = *(void *)(v4 - 8);
  uint64_t v69 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v67 = (char *)&v58 - v8;
  uint64_t v9 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t ObjectType = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v76 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v75 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v74 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  id v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002940F0((uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_1000EACF4((uint64_t)v19);
    if (qword_100907220 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_1009122F0);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "RDBeforeFirstUnlockNotificationEngine: Not going to presenting before first unlock notification as we don't have a due date.", v27, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v63 = v21;
    unsigned int v28 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    uint64_t v64 = v20;
    v28(v23, v19, v20);
    Date.timeIntervalSinceNow.getter();
    uint64_t v65 = v15;
    unint64_t v62 = v23;
    if (v29 <= 0.0)
    {
      if (qword_100907220 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      sub_10008E2DC(v48, (uint64_t)qword_1009122F0);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      BOOL v51 = os_log_type_enabled(v49, v50);
      uint64_t v52 = v63;
      if (v51)
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "RDBeforeFirstUnlockNotificationEngine: Presenting before first unlock notification now because we have already passed the due date.", v53, 2u);
        swift_slowDealloc();
      }

      uint64_t v73 = *(void *)(v77 + 16);
      uint64_t v54 = swift_allocObject();
      swift_weakInit();
      unint64_t v83 = sub_10029797C;
      uint64_t v84 = v54;
      os_log_t aBlock = _NSConcreteStackBlock;
      uint64_t v80 = 1107296256;
      id v81 = sub_100236C78;
      uint64_t v82 = &unk_1008BFF88;
      uint64_t v55 = _Block_copy(&aBlock);
      swift_retain();
      uint64_t v56 = v74;
      static DispatchQoS.unspecified.getter();
      uint64_t v78 = _swiftEmptyArrayStorage;
      sub_1002978B4((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100094134((uint64_t *)&unk_10090AFD0);
      sub_1000BFEAC((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
      unint64_t v57 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v55);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v57, v12);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v56, v14);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v62, v64);
      swift_release();
      swift_release();
    }
    else
    {
      if (qword_100907220 != -1) {
        swift_once();
      }
      uint64_t v60 = v14;
      uint64_t v61 = v12;
      uint64_t v30 = type metadata accessor for Logger();
      sub_10008E2DC(v30, (uint64_t)qword_1009122F0);
      id v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        id v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "RDBeforeFirstUnlockNotificationEngine: Scheduling to present before first unlock notification at a future time.", v33, 2u);
        swift_slowDealloc();
      }

      sub_1000963CC(0, &qword_1009123F0);
      os_log_t aBlock = (void **)_swiftEmptyArrayStorage;
      sub_1002978B4(&qword_1009123F8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
      sub_100094134(&qword_100912400);
      sub_1000BFEAC(&qword_100912408, &qword_100912400);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v59 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
      (*(void (**)(char *, uint64_t))(ObjectType + 8))(v11, v9);
      uint64_t ObjectType = swift_getObjectType();
      static DispatchWallTime.now()();
      id v34 = v67;
      + infix(_:_:)();
      uint64_t v35 = v69;
      uint64_t v68 = *(void *)(v68 + 8);
      ((void (*)(char *, uint64_t))v68)(v7, v69);
      uint64_t v37 = v72;
      uint64_t v36 = v73;
      id v38 = *(void (**)(char *, void, uint64_t))(v72 + 104);
      uint64_t v39 = v70;
      v38(v70, enum case for DispatchTimeInterval.never(_:), v73);
      unint64_t v40 = v71;
      *(void *)os_log_type_t v71 = 0;
      v38(v40, enum case for DispatchTimeInterval.nanoseconds(_:), v36);
      uint64_t v41 = v59;
      OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)();
      long long v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v40, v36);
      v42(v39, v36);
      ((void (*)(char *, uint64_t))v68)(v34, v35);
      uint64_t v43 = swift_allocObject();
      swift_weakInit();
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + 24) = v41;
      unint64_t v83 = sub_100297974;
      uint64_t v84 = v44;
      os_log_t aBlock = _NSConcreteStackBlock;
      uint64_t v80 = 1107296256;
      id v81 = sub_100236C78;
      uint64_t v82 = &unk_1008BFF60;
      uint64_t v45 = _Block_copy(&aBlock);
      swift_retain();
      swift_unknownObjectRetain();
      os_log_type_t v46 = v74;
      static DispatchQoS.unspecified.getter();
      uint64_t v47 = v75;
      sub_100293824();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)();
      _Block_release(v45);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v47, v61);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v46, v60);
      swift_release();
      swift_release();
      OS_dispatch_source.activate()();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v64);
    }
  }
}

uint64_t sub_10029369C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100294890();
    return swift_release();
  }
  return result;
}

void sub_1002936F4()
{
  if (qword_100907220 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_1009122F0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "RDBeforeFirstUnlockNotificationEngine: Presenting before first unlock notification as we're now due.", v3, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_100294890();
    swift_release();
  }
  swift_getObjectType();
  OS_dispatch_source.cancel()();
}

uint64_t sub_100293824()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_1002938EC()
{
  return sub_10029391C("RDBeforeFirstUnlockNotificationEngine: Trying to release before first unlock notification.", (uint64_t)&unk_1008BFEA8, (uint64_t)sub_1002978AC, (uint64_t)&unk_1008BFEC0);
}

uint64_t sub_10029391C(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v23 = a1;
  *(void *)&long long v24 = a2;
  uint64_t v7 = v4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907220 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_1009122F0);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = v14;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v23, v18, 2u);
    uint64_t v14 = v22;
    swift_slowDealloc();
  }

  uint64_t v19 = swift_allocObject();
  long long v24 = *(_OWORD *)(v7 + 24);
  *(_OWORD *)(v19 + 16) = v24;
  aBlock[4] = a3;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  uint64_t aBlock[3] = a4;
  uint64_t v20 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v26 = _swiftEmptyArrayStorage;
  sub_1002978B4((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000BFEAC((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  return swift_release();
}

void sub_100293CB0(void *a1)
{
  id v15 = a1;
  uint64_t v1 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = enum case for RDUserNotificationCategory.beforeFirstUnlock(_:);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
  v9((char *)&v14 - v6, enum case for RDUserNotificationCategory.beforeFirstUnlock(_:), v1);
  RDUserNotificationCategory.rawValue.getter();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  v10(v7, v1);
  v9(v5, v8, v1);
  RDUserNotificationCategory.rawValue.getter();
  v10(v5, v1);
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_100293EE4;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E13D0;
  uint64_t aBlock[3] = &unk_1008BFEE8;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  [v15 releaseNotificationWithIdentifier:v11 reference:v12 completion:v13];
  _Block_release(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100293EE4(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100907220 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_1009122F0);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 136315138;
      swift_getErrorValue();
      uint64_t v4 = Error.localizedDescription.getter();
      sub_1000C51B8(v4, v5, &v7);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Failed to dismiss before first unlock notification {error: %s}", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_1002940F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v78 = (char *)a1;
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v79 = v2;
  uint64_t v3 = __chkstk_darwin(v1);
  os_log_type_t v71 = (char *)v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v72 = (char *)v70 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v73 = (char *)v70 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v74 = (char *)v70 - v10;
  __chkstk_darwin(v9);
  id v75 = (char *)v70 - v11;
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v76 = (uint64_t)v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v77 = (uint64_t)v70 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)v70 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)v70 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)v70 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v81 = (uint64_t)v70 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)v70 - v29;
  __chkstk_darwin(v28);
  uint64_t v80 = (uint64_t)v70 - v31;
  os_log_type_t v32 = self;
  id v33 = [v32 daemonUserDefaults];
  id v34 = [v33 lastPresentAlarmDate];

  if (v34)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    uint64_t v36 = v30;
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    uint64_t v36 = v30;
    uint64_t v37 = 1;
  }
  uint64_t v82 = v35;
  v35(v36, v37, 1, v1);
  uint64_t v38 = v2;
  uint64_t v39 = v80;
  sub_1000CAAB4((uint64_t)v30, v80);
  id v40 = [v32 daemonUserDefaults];
  id v41 = [v40 nextScheduledAlarmDate];

  uint64_t v42 = v81;
  if (v41)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v43 = 1;
  }
  uint64_t v44 = v79 + 56;
  v82(v25, v43, 1, v1);
  sub_1000CAAB4((uint64_t)v25, v42);
  sub_1000CAA4C(v39, (uint64_t)v22);
  uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  if (v45(v22, 1, v1) == 1)
  {
    uint64_t v19 = v22;
    goto LABEL_11;
  }
  v70[1] = v44;
  uint64_t v46 = v38;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
  uint64_t v48 = v75;
  v47(v75, v22, v1);
  sub_1000CAA4C(v42, (uint64_t)v19);
  if (v45(v19, 1, v1) != 1)
  {
    uint64_t v54 = v74;
    v47(v74, v19, v1);
    uint64_t v55 = v73;
    Date.init()();
    sub_1002978B4((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
    char v56 = dispatch thunk of static Comparable.< infix(_:_:)();
    unint64_t v57 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
    uint64_t v58 = v72;
    v57(v72, v54, v1);
    uint64_t v59 = v71;
    v57(v71, v55, v1);
    if (v56)
    {
      uint64_t v60 = *(void (**)(char *, uint64_t))(v46 + 8);
      v60(v59, v1);
      v60(v58, v1);
      uint64_t v61 = v80;
    }
    else
    {
      char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v60 = *(void (**)(char *, uint64_t))(v46 + 8);
      v60(v59, v1);
      v60(v58, v1);
      uint64_t v61 = v80;
      if ((v62 & 1) == 0)
      {
        unint64_t v67 = v74;
        if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
          uint64_t v68 = v67;
        }
        else {
          uint64_t v68 = v48;
        }
        uint64_t v69 = (uint64_t)v78;
        v57(v78, v68, v1);
        v60(v73, v1);
        v60(v67, v1);
        v60(v48, v1);
        sub_1000EACF4(v81);
        sub_1000EACF4(v61);
        uint64_t v66 = v69;
        return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v82)(v66, 0, 1, v1);
      }
    }
    uint64_t v63 = v74;
    if (dispatch thunk of static Comparable.< infix(_:_:)()) {
      uint64_t v64 = v63;
    }
    else {
      uint64_t v64 = v48;
    }
    uint64_t v65 = (uint64_t)v78;
    v57(v78, v64, v1);
    v60(v73, v1);
    v60(v63, v1);
    v60(v48, v1);
    sub_1000EACF4(v81);
    sub_1000EACF4(v61);
    uint64_t v66 = v65;
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v82)(v66, 0, 1, v1);
  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v1);
  uint64_t v38 = v46;
  uint64_t v39 = v80;
  uint64_t v42 = v81;
LABEL_11:
  sub_1000EACF4((uint64_t)v19);
  uint64_t v49 = v77;
  sub_1000CAAB4(v39, v77);
  uint64_t v50 = v42;
  uint64_t v51 = v76;
  sub_1000CAAB4(v50, v76);
  if (v45((char *)v49, 1, v1) == 1)
  {
    sub_1000CAAB4(v51, (uint64_t)v78);
    return sub_1000EACF4(v49);
  }
  else
  {
    sub_1000EACF4(v51);
    uint64_t v53 = (uint64_t)v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v78, v49, v1);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v82)(v53, 0, 1, v1);
  }
}

void sub_100294890()
{
  uint64_t v32 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v1 = *(void *)(v32 - 8);
  uint64_t v2 = __chkstk_darwin(v32);
  id v34 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v31 = (char *)&v31 - v4;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RDUserNotificationType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char **)((char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v33 = v0;
  uint64_t v16 = (void *)v0[2];
  void *v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v16)
  {
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for RDUserNotificationType.beforeFirstUnlock(_:), v8);
    id v18 = sub_10026D9CC(0, 0, 0);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_1002940F0((uint64_t)v7);
    uint64_t v19 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v19 - 8);
    Class isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v19) != 1)
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v19);
    }
    [v18 setDate:isa];

    uint64_t v22 = v32;
    id v33 = (void *)v33[3];
    uint64_t v23 = enum case for RDUserNotificationCategory.beforeFirstUnlock(_:);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
    uint64_t v25 = v31;
    v24(v31, enum case for RDUserNotificationCategory.beforeFirstUnlock(_:), v32);
    RDUserNotificationCategory.rawValue.getter();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v1 + 8);
    v26(v25, v22);
    uint64_t v27 = v34;
    v24(v34, v23, v22);
    RDUserNotificationCategory.rawValue.getter();
    v26(v27, v22);
    NSString v28 = String._bridgeToObjectiveC()();
    NSString v29 = String._bridgeToObjectiveC()();
    aBlock[4] = sub_100294D80;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E13D0;
    uint64_t aBlock[3] = &unk_1008BFE70;
    uint64_t v30 = _Block_copy(aBlock);
    swift_release();
    [v33 retainNotificationWithIdentifier:v28 reference:v29 content:v18 skipBanner:0 completion:v30];
    _Block_release(v30);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_100294D80(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100907220 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_1009122F0);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 136315138;
      swift_getErrorValue();
      uint64_t v4 = Error.localizedDescription.getter();
      sub_1000C51B8(v4, v5, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "RDBeforeFirstUnlockNotificationEngine: Unable to post Before First Unlock notification {error: %s}", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100907220 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_1009122F0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDBeforeFirstUnlockNotificationEngine: Posted Before First Unlock notification", v9, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for Analytics();
    sub_100094134((uint64_t *)&unk_10090A420);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)(inited + 32) = 0x696669746E656449;
    *(void *)(inited + 40) = 0xEA00000000007265;
    sub_1000963CC(0, (unint64_t *)&unk_100910040);
    *(void *)(inited + 48) = NSString.init(stringLiteral:)();
    sub_1002ED104(inited);
    static Analytics.postEvent(_:payload:duration:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100295104()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDBeforeFirstUnlockNotificationEngine()
{
  return self;
}

uint64_t sub_100295168(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  return sub_1002967B0(a2, a3, a4, a5, a6);
}

void sub_100295180(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1001F5494(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100295228(v5);
  *a1 = v3;
}

void sub_100295228(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v134 = (char *)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v149 = (char *)&v129 - v8;
  __chkstk_darwin(v9);
  unint64_t v144 = (char *)&v129 - v10;
  __chkstk_darwin(v11);
  uint64_t v145 = (char *)&v129 - v12;
  Swift::Int v13 = a1[1];
  Swift::Int v14 = _minimumMergeRunLength(_:)(v13);
  if (v14 >= v13)
  {
    if (v13 < 0) {
      goto LABEL_138;
    }
    if (v13) {
      sub_100295D0C(0, v13, 1, a1);
    }
    return;
  }
  if (v13 >= 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v13 + 1;
  }
  if (v13 < -1) {
    goto LABEL_146;
  }
  uint64_t v147 = v4;
  Swift::Int v130 = v14;
  uint64_t v137 = (void *)v5;
  if (v13 < 2)
  {
    uint64_t v19 = (char *)_swiftEmptyArrayStorage;
    unint64_t v136 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    id v129 = _swiftEmptyArrayStorage;
    if (v13 != 1)
    {
      unint64_t v21 = _swiftEmptyArrayStorage[2];
LABEL_104:
      if (v21 >= 2)
      {
        uint64_t v123 = *a1;
        do
        {
          unint64_t v124 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_133;
          }
          if (!v123) {
            goto LABEL_145;
          }
          uint64_t v125 = *(void *)&v19[16 * v124 + 32];
          uint64_t v126 = *(void *)&v19[16 * v21 + 24];
          sub_100295FF8(v123 + v137[9] * v125, v123 + v137[9] * *(void *)&v19[16 * v21 + 16], v123 + v137[9] * v126, v136);
          if (v2) {
            break;
          }
          if (v126 < v125) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v19 = sub_1001F433C((uint64_t)v19);
          }
          if (v124 >= *((void *)v19 + 2)) {
            goto LABEL_135;
          }
          uint64_t v127 = &v19[16 * v124 + 32];
          *(void *)uint64_t v127 = v125;
          *((void *)v127 + 1) = v126;
          unint64_t v128 = *((void *)v19 + 2);
          if (v21 > v128) {
            goto LABEL_136;
          }
          memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v128 - v21));
          *((void *)v19 + 2) = v128 - 1;
          unint64_t v21 = v128 - 1;
        }
        while (v128 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v129[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v16 = v15 >> 1;
    uint64_t v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v17 + 16) = v16;
    unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    id v129 = (void *)v17;
    unint64_t v136 = v17 + v18;
  }
  uint64_t v20 = 0;
  Class v142 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v143 = v5 + 16;
  unint64_t v152 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v19 = (char *)_swiftEmptyArrayStorage;
  os_log_t v148 = a1;
  while (1)
  {
    uint64_t v22 = v20 + 1;
    unint64_t v135 = v20;
    if ((uint64_t)(v20 + 1) >= v13)
    {
      id v33 = (void (*)(void, void, void))v20;
      Swift::Int v35 = (Swift::Int)(v20 + 1);
      a1 = v148;
    }
    else
    {
      uint64_t v23 = v147;
      Swift::Int v24 = *v148;
      uint64_t v25 = v137[9];
      uint64_t v26 = *v148 + v25 * (void)v22;
      uint64_t v151 = v25;
      Swift::Int v140 = v24;
      uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))v137[2];
      v27(v145, v26, v147);
      Swift::Int v150 = v13;
      NSString v28 = v144;
      v27(v144, v24 + v25 * (void)v135, v23);
      NSString v29 = v145;
      LODWORD(v146) = static Date.> infix(_:_:)();
      uint64_t v30 = (void (*)(char *, uint64_t))v137[1];
      uint64_t v31 = v28;
      Swift::Int v13 = v150;
      v30(v31, v23);
      uint64_t v32 = v23;
      id v33 = (void (*)(void, void, void))v135;
      v30(v29, v32);
      uint64_t v34 = v151;
      Swift::Int v35 = (Swift::Int)v33 + 2;
      if ((uint64_t)v33 + 2 < v13)
      {
        uint64_t v131 = v19;
        uint64_t v132 = v2;
        uint64_t v141 = v151 * (void)v22;
        Swift::Int v36 = v140;
        Swift::Int v37 = v151 * v35;
        while (1)
        {
          Swift::Int v38 = v35;
          uint64_t v39 = v145;
          uint64_t v40 = v147;
          v27(v145, v36 + v37, v147);
          id v41 = v144;
          v27(v144, v36 + v141, v40);
          int v42 = static Date.> infix(_:_:)();
          v30(v41, v40);
          v30(v39, v40);
          if ((v146 ^ v42)) {
            break;
          }
          Swift::Int v35 = v38 + 1;
          uint64_t v34 = v151;
          v36 += v151;
          if (v150 == v38 + 1)
          {
            Swift::Int v13 = v150;
            Swift::Int v35 = v150;
            uint64_t v19 = v131;
            uint64_t v2 = v132;
            id v33 = (void (*)(void, void, void))v135;
            goto LABEL_23;
          }
        }
        uint64_t v19 = v131;
        uint64_t v2 = v132;
        Swift::Int v35 = v38;
        id v33 = (void (*)(void, void, void))v135;
        Swift::Int v13 = v150;
        uint64_t v34 = v151;
      }
LABEL_23:
      a1 = v148;
      if (v146)
      {
        if (v35 < (uint64_t)v33) {
          goto LABEL_139;
        }
        if ((uint64_t)v33 < v35)
        {
          uint64_t v131 = v19;
          uint64_t v132 = v2;
          uint64_t v43 = 0;
          uint64_t v44 = v34 * (v35 - 1);
          Swift::Int v45 = (Swift::Int)v33;
          Swift::Int v46 = v35 * v34;
          Swift::Int v47 = v45;
          uint64_t v48 = v45 * v34;
          Swift::Int v49 = v140;
          do
          {
            if (v47 != v35 + v43 - 1)
            {
              if (!v49) {
                goto LABEL_144;
              }
              Swift::Int v51 = v49 + v44;
              os_log_type_t v146 = (char *)*v152;
              ((void (*)(char *, Swift::Int, uint64_t))v146)(v134, v49 + v48, v147);
              if (v48 < v44 || v49 + v48 >= (unint64_t)(v49 + v46))
              {
                uint64_t v50 = v147;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v50 = v147;
                if (v48 != v44) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              ((void (*)(Swift::Int, char *, uint64_t))v146)(v51, v134, v50);
              a1 = v148;
              Swift::Int v49 = v140;
              uint64_t v34 = v151;
            }
            ++v47;
            --v43;
            v44 -= v34;
            v46 -= v34;
            v48 += v34;
          }
          while (v47 < v35 + v43);
          uint64_t v19 = v131;
          uint64_t v2 = v132;
          id v33 = (void (*)(void, void, void))v135;
          Swift::Int v13 = v150;
        }
      }
    }
    if (v35 < v13)
    {
      if (__OFSUB__(v35, v33)) {
        goto LABEL_137;
      }
      if (v35 - (uint64_t)v33 < v130) {
        break;
      }
    }
LABEL_55:
    if (v35 < (uint64_t)v33) {
      goto LABEL_132;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    os_log_type_t v146 = (char *)v35;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = sub_1001F3D80(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v72 = *((void *)v19 + 2);
    unint64_t v71 = *((void *)v19 + 3);
    unint64_t v21 = v72 + 1;
    if (v72 >= v71 >> 1) {
      uint64_t v19 = sub_1001F3D80((char *)(v71 > 1), v72 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v21;
    uint64_t v73 = v19 + 32;
    uint64_t v74 = &v19[16 * v72 + 32];
    id v75 = v146;
    *(void *)uint64_t v74 = v33;
    *((void *)v74 + 1) = v75;
    if (v72)
    {
      while (1)
      {
        unint64_t v76 = v21 - 1;
        if (v21 >= 4)
        {
          uint64_t v81 = &v73[16 * v21];
          uint64_t v82 = *((void *)v81 - 8);
          uint64_t v83 = *((void *)v81 - 7);
          BOOL v87 = __OFSUB__(v83, v82);
          uint64_t v84 = v83 - v82;
          if (v87) {
            goto LABEL_121;
          }
          uint64_t v86 = *((void *)v81 - 6);
          uint64_t v85 = *((void *)v81 - 5);
          BOOL v87 = __OFSUB__(v85, v86);
          uint64_t v79 = v85 - v86;
          char v80 = v87;
          if (v87) {
            goto LABEL_122;
          }
          unint64_t v88 = v21 - 2;
          uint64_t v89 = &v73[16 * v21 - 32];
          uint64_t v91 = *(void *)v89;
          uint64_t v90 = *((void *)v89 + 1);
          BOOL v87 = __OFSUB__(v90, v91);
          uint64_t v92 = v90 - v91;
          if (v87) {
            goto LABEL_124;
          }
          BOOL v87 = __OFADD__(v79, v92);
          uint64_t v93 = v79 + v92;
          if (v87) {
            goto LABEL_127;
          }
          if (v93 >= v84)
          {
            NSString v111 = &v73[16 * v76];
            uint64_t v113 = *(void *)v111;
            uint64_t v112 = *((void *)v111 + 1);
            BOOL v87 = __OFSUB__(v112, v113);
            uint64_t v114 = v112 - v113;
            if (v87) {
              goto LABEL_131;
            }
            BOOL v104 = v79 < v114;
            goto LABEL_92;
          }
        }
        else
        {
          if (v21 != 3)
          {
            uint64_t v105 = *((void *)v19 + 4);
            uint64_t v106 = *((void *)v19 + 5);
            BOOL v87 = __OFSUB__(v106, v105);
            uint64_t v98 = v106 - v105;
            char v99 = v87;
            goto LABEL_86;
          }
          uint64_t v78 = *((void *)v19 + 4);
          uint64_t v77 = *((void *)v19 + 5);
          BOOL v87 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          char v80 = v87;
        }
        if (v80) {
          goto LABEL_123;
        }
        unint64_t v88 = v21 - 2;
        uint64_t v94 = &v73[16 * v21 - 32];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v97 = __OFSUB__(v95, v96);
        uint64_t v98 = v95 - v96;
        char v99 = v97;
        if (v97) {
          goto LABEL_126;
        }
        unint64_t v100 = &v73[16 * v76];
        uint64_t v102 = *(void *)v100;
        uint64_t v101 = *((void *)v100 + 1);
        BOOL v87 = __OFSUB__(v101, v102);
        uint64_t v103 = v101 - v102;
        if (v87) {
          goto LABEL_129;
        }
        if (__OFADD__(v98, v103)) {
          goto LABEL_130;
        }
        if (v98 + v103 >= v79)
        {
          BOOL v104 = v79 < v103;
LABEL_92:
          if (v104) {
            unint64_t v76 = v88;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v99) {
          goto LABEL_125;
        }
        os_log_t v107 = &v73[16 * v76];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v87 = __OFSUB__(v108, v109);
        uint64_t v110 = v108 - v109;
        if (v87) {
          goto LABEL_128;
        }
        if (v110 < v98) {
          goto LABEL_14;
        }
LABEL_94:
        unint64_t v115 = v76 - 1;
        if (v76 - 1 >= v21)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        uint64_t v116 = *a1;
        if (!*a1) {
          goto LABEL_143;
        }
        os_log_type_t v117 = v19;
        uint64_t v118 = &v73[16 * v115];
        uint64_t v119 = *(void *)v118;
        unint64_t v120 = &v73[16 * v76];
        uint64_t v121 = *((void *)v120 + 1);
        sub_100295FF8(v116 + v137[9] * *(void *)v118, v116 + v137[9] * *(void *)v120, v116 + v137[9] * v121, v136);
        if (v2) {
          goto LABEL_115;
        }
        if (v121 < v119) {
          goto LABEL_118;
        }
        if (v76 > *((void *)v117 + 2)) {
          goto LABEL_119;
        }
        *(void *)uint64_t v118 = v119;
        *(void *)&v73[16 * v115 + 8] = v121;
        unint64_t v122 = *((void *)v117 + 2);
        if (v76 >= v122) {
          goto LABEL_120;
        }
        uint64_t v19 = v117;
        unint64_t v21 = v122 - 1;
        memmove(&v73[16 * v76], v120 + 16, 16 * (v122 - 1 - v76));
        *((void *)v117 + 2) = v122 - 1;
        a1 = v148;
        if (v122 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v21 = 1;
LABEL_14:
    Swift::Int v13 = a1[1];
    uint64_t v20 = v146;
    if ((uint64_t)v146 >= v13) {
      goto LABEL_104;
    }
  }
  if (__OFADD__(v33, v130)) {
    goto LABEL_140;
  }
  if ((uint64_t)v33 + v130 >= v13) {
    Swift::Int v52 = v13;
  }
  else {
    Swift::Int v52 = (Swift::Int)v33 + v130;
  }
  if (v52 >= (uint64_t)v33)
  {
    if (v35 != v52)
    {
      uint64_t v131 = v19;
      uint64_t v132 = v2;
      uint64_t v53 = v137[9];
      uint64_t v138 = (void (*)(char *, uint64_t, uint64_t))v137[2];
      uint64_t v139 = v53;
      uint64_t v54 = v53 * (v35 - 1);
      Swift::Int v55 = v35 * v53;
      uint64_t v56 = v147;
      Swift::Int v133 = v52;
      do
      {
        uint64_t v58 = 0;
        os_log_type_t v146 = (char *)v35;
        Swift::Int v140 = v55;
        uint64_t v141 = v54;
        while (1)
        {
          uint64_t v59 = *a1;
          Swift::Int v150 = v55 + v58;
          uint64_t v151 = (uint64_t)v33;
          Swift::Int v60 = v55 + v58 + v59;
          uint64_t v61 = v145;
          char v62 = v138;
          v138(v145, v60, v56);
          uint64_t v63 = v54 + v58 + v59;
          uint64_t v64 = a1;
          uint64_t v65 = v144;
          v62(v144, v63, v56);
          LOBYTE(v62) = static Date.> infix(_:_:)();
          uint64_t v66 = *v142;
          (*v142)(v65, v56);
          v66(v61, v56);
          if ((v62 & 1) == 0) {
            break;
          }
          uint64_t v67 = *v64;
          if (!*v64) {
            goto LABEL_142;
          }
          Swift::Int v55 = v140;
          uint64_t v54 = v141;
          uint64_t v68 = (char *)(v67 + v141 + v58);
          uint64_t v69 = *v152;
          uint64_t v56 = v147;
          (*v152)(v149, v67 + v140 + v58, v147);
          swift_arrayInitWithTakeFrontToBack();
          v69(v68, (uint64_t)v149, v56);
          v58 -= v139;
          id v33 = (void (*)(void, void, void))(v151 + 1);
          unint64_t v57 = v146;
          a1 = v148;
          if (v146 == (char *)(v151 + 1)) {
            goto LABEL_48;
          }
        }
        unint64_t v57 = v146;
        uint64_t v56 = v147;
        a1 = v64;
        Swift::Int v55 = v140;
        uint64_t v54 = v141;
LABEL_48:
        Swift::Int v35 = (Swift::Int)(v57 + 1);
        v54 += v139;
        v55 += v139;
        id v33 = (void (*)(void, void, void))v135;
      }
      while (v35 != v133);
      Swift::Int v35 = v133;
      uint64_t v19 = v131;
      uint64_t v2 = v132;
    }
    goto LABEL_55;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100295D0C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v33 = a1;
  uint64_t v7 = type metadata accessor for Date();
  __chkstk_darwin(v7);
  uint64_t v43 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v39 = (char *)&v31 - v10;
  __n128 v13 = __chkstk_darwin(v11);
  Swift::Int v38 = (char *)&v31 - v14;
  uint64_t v41 = a3;
  uint64_t v32 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(void, void, void, __n128))(v12 + 16);
    uint64_t v15 = v12 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v34 = (void (**)(char *, uint64_t))(v15 - 8);
    Swift::Int v35 = (void (*)(char *, uint64_t, uint64_t))v16;
    Swift::Int v36 = a4;
    uint64_t v37 = v15;
    int v42 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v46 = v17 * (v41 - 1);
    uint64_t v40 = v17;
    uint64_t v45 = v17 * v41;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v44 = v33;
    while (1)
    {
      uint64_t v19 = *a4;
      uint64_t v20 = v45 + v18 + *a4;
      unint64_t v21 = v38;
      uint64_t v22 = v35;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v35)(v38, v20, v7, v13);
      uint64_t v23 = v7;
      Swift::Int v24 = v39;
      v22(v39, v46 + v18 + v19, v23);
      LOBYTE(v19) = static Date.> infix(_:_:)();
      uint64_t v25 = *v34;
      uint64_t v26 = v24;
      uint64_t v7 = v23;
      (*v34)(v26, v23);
      uint64_t v27 = v21;
      a4 = v36;
      v25(v27, v23);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v46 += v40;
        v45 += v40;
        if (++v41 == v32) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v28 = *a4;
      if (!*a4) {
        break;
      }
      NSString v29 = (char *)(v28 + v46 + v18);
      uint64_t v30 = *v42;
      (*v42)(v43, v28 + v45 + v18, v23);
      swift_arrayInitWithTakeFrontToBack();
      v30(v29, (uint64_t)v43, v23);
      v18 -= v40;
      if (v41 == ++v44) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_100295FF8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v61 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  Swift::Int v60 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v59 = (char *)&v51 - v11;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_71;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_72;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v64 = a1;
  unint64_t v63 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v34 = a4 + v18;
      unint64_t v62 = a4 + v18;
      unint64_t v64 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        Swift::Int v36 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
        uint64_t v58 = v8 + 16;
        uint64_t v54 = (void (**)(char *, uint64_t))(v8 + 8);
        Swift::Int v55 = v36;
        uint64_t v37 = -v13;
        unint64_t v52 = a4;
        uint64_t v53 = -v13;
        uint64_t v56 = (void (*)(void, void, void))a1;
        uint64_t v38 = v61;
        do
        {
          unint64_t v57 = a3 + v37;
          unint64_t v39 = a3;
          uint64_t v40 = v59;
          uint64_t v41 = v55;
          v55(v59, v34 + v37, v38);
          unint64_t v42 = a2 + v37;
          uint64_t v43 = v60;
          v41(v60, v42, v38);
          LOBYTE(v41) = static Date.> infix(_:_:)();
          uint64_t v44 = *v54;
          (*v54)(v43, v38);
          v44(v40, v38);
          if (v41)
          {
            uint64_t v37 = v53;
            a3 = v57;
            if (v39 < a2 || v57 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v46 = v52;
              Swift::Int v47 = v56;
            }
            else
            {
              BOOL v45 = v39 == a2;
              unint64_t v46 = v52;
              Swift::Int v47 = v56;
              if (!v45) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v64 += v37;
          }
          else
          {
            unint64_t v48 = v62;
            v62 += v53;
            a3 = v57;
            BOOL v49 = v39 < v48 || v57 >= v48;
            uint64_t v37 = v53;
            if (v49)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v42 = a2;
              unint64_t v46 = v52;
              Swift::Int v47 = v56;
            }
            else
            {
              Swift::Int v47 = v56;
              if (v39 != v48) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v42 = a2;
              unint64_t v46 = v52;
            }
          }
          unint64_t v34 = v62;
          if (v62 <= v46) {
            break;
          }
          a2 = v42;
        }
        while (v42 > (unint64_t)v47);
      }
      goto LABEL_69;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v57 = a4 + v17;
    unint64_t v62 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v20 = *(void (**)(void, void, void))(v8 + 16);
      uint64_t v58 = v8 + 16;
      Swift::Int v55 = (void (*)(char *, unint64_t, uint64_t))(v8 + 8);
      uint64_t v56 = v20;
      do
      {
        uint64_t v21 = v13;
        unint64_t v22 = a3;
        uint64_t v23 = v59;
        unint64_t v24 = a4;
        uint64_t v25 = v61;
        uint64_t v26 = (void (*)(char *, unint64_t, uint64_t))v56;
        v56(v59, a2, v61);
        uint64_t v27 = v60;
        v26(v60, v24, v25);
        LOBYTE(v24) = static Date.> infix(_:_:)();
        uint64_t v28 = *(void (**)(char *, uint64_t))v55;
        (*(void (**)(char *, uint64_t))v55)(v27, v25);
        v28(v23, v25);
        unint64_t v29 = v64;
        if (v24)
        {
          uint64_t v13 = v21;
          unint64_t v30 = a2 + v21;
          if (v64 < a2 || v64 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v64 == a2) {
              unint64_t v29 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          uint64_t v13 = v21;
          unint64_t v32 = v63 + v21;
          if (v64 < v63 || v64 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v64 != v63) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v63 = v32;
          unint64_t v30 = a2;
        }
        unint64_t v64 = v29 + v13;
        a4 = v63;
        if (v63 >= v57) {
          break;
        }
        a2 = v30;
      }
      while (v30 < a3);
    }
LABEL_69:
    sub_1001F41C8(&v64, &v63, (uint64_t *)&v62);
    return 1;
  }
LABEL_73:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1002965AC(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907220 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_1009122F0);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDBeforeFirstUnlockNotificationEngine: Updating nextScheduledAlarmDate as we got a new future alarm date.", v8, 2u);
    swift_slowDealloc();
  }

  id v9 = [self daemonUserDefaults];
  sub_1000CAA4C(a1, (uint64_t)v4);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v4, 1, v10) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v10);
  }
  [v9 setNextScheduledAlarmDate:isa];
}

uint64_t sub_1002967B0(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v127 = a5;
  unint64_t v128 = a4;
  uint64_t v124 = a3;
  id v126 = a1;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  uint64_t v119 = &v109[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  os_log_type_t v117 = &v109[-v9];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v121 = *(void *)(v10 - 8);
  uint64_t v122 = v10;
  __chkstk_darwin(v10);
  unint64_t v115 = &v109[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v118 = &v109[-v13];
  __chkstk_darwin(v14);
  uint64_t v114 = &v109[-v15];
  __chkstk_darwin(v16);
  unint64_t v120 = &v109[-v17];
  uint64_t v125 = (void *)type metadata accessor for RDUserNotificationAction();
  uint64_t v123 = *(v125 - 1);
  __chkstk_darwin(v125);
  uint64_t v116 = &v109[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  uint64_t v21 = &v109[-v20];
  __chkstk_darwin(v22);
  unint64_t v24 = &v109[-v23];
  uint64_t v25 = type metadata accessor for RDUserNotificationType();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = &v109[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v29);
  uint64_t v31 = &v109[-v30];
  __n128 v33 = __chkstk_darwin(v32);
  Swift::Int v35 = (id *)&v109[-v34];
  Swift::Int v36 = *(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v26 + 16);
  v36(&v109[-v34], a2, v25, v33);
  int v37 = (*(uint64_t (**)(id *, uint64_t))(v26 + 88))(v35, v25);
  if (v37 != enum case for RDUserNotificationType.reminderAlarm(_:)
    && v37 != enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    if (v37 == enum case for RDUserNotificationType.caldavSharedList(_:))
    {
      (*(void (**)(id *, uint64_t))(v26 + 96))(v35, v25);

      goto LABEL_4;
    }
    if (v37 == enum case for RDUserNotificationType.assignmentNotification(_:)
      || v37 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
    {
      (*(void (**)(id *, uint64_t))(v26 + 96))(v35, v25);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if (v37 != enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
    {
      if (v37 == enum case for RDUserNotificationType.todayNotification(_:)
        || v37 == enum case for RDUserNotificationType.todayNotificationBadge(_:))
      {
        goto LABEL_4;
      }
      if (v37 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
      {
        uint64_t v55 = v124;
        uint64_t v54 = v125;
        if (qword_100907220 != -1) {
          swift_once();
        }
        uint64_t v56 = type metadata accessor for Logger();
        unint64_t v57 = (void *)sub_10008E2DC(v56, (uint64_t)qword_1009122F0);
        uint64_t v58 = v123;
        uint64_t v59 = *(void (**)(unsigned char *, uint64_t, void *))(v123 + 16);
        uint64_t v112 = v123 + 16;
        uint64_t v113 = v59;
        v59(v24, v55, v54);
        id v60 = v126;
        id v126 = v57;
        uint64_t v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.default.getter();
        int v63 = v62;
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v64 = swift_slowAlloc();
          uint64_t v111 = swift_slowAlloc();
          v130[0] = v111;
          *(_DWORD *)uint64_t v64 = 136315394;
          id v65 = [v60 actionIdentifier];
          uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          int v110 = v63;
          uint64_t v67 = v66;
          unint64_t v69 = v68;

          uint64_t v129 = sub_1000C51B8(v67, v69, v130);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v64 + 12) = 2080;
          uint64_t v70 = RDUserNotificationAction.rawValue.getter();
          uint64_t v129 = sub_1000C51B8(v70, v71, v130);
          uint64_t v55 = v124;
          uint64_t v54 = v125;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          unint64_t v72 = *(void (**)(unsigned char *, void *))(v58 + 8);
          v72(v24, v54);
          _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v110, "Processing notification response {actionIdentifier: %s, action: %s}", (uint8_t *)v64, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          unint64_t v72 = *(void (**)(unsigned char *, void *))(v58 + 8);
          v72(v24, v54);
        }

        uint64_t v73 = v121;
        v113(v21, v55, v54);
        int v74 = (*(uint64_t (**)(unsigned char *, void *))(v58 + 88))(v21, v54);
        uint64_t v75 = v122;
        uint64_t v77 = (uint64_t)v119;
        unint64_t v76 = v120;
        if (v74 == enum case for RDUserNotificationAction.defaultDismiss(_:))
        {
          Date.init()();
          uint64_t v78 = self;
          uint64_t v79 = &selRef_ckServerChangeTokens;
          id v80 = [v78 daemonUserDefaults];
          id v81 = [v80 lastPresentAlarmDate];

          if (v81)
          {
            uint64_t v82 = v118;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v83 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v73 + 32);
            uint64_t v84 = (uint64_t)v117;
            v83(v117, v82, v75);
            uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
            v85(v84, 0, 1, v75);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v84, 1, v75) != 1)
            {
              uint64_t v86 = v114;
              v83(v114, (unsigned char *)v84, v75);
              BOOL v87 = v86;
              sub_1002978B4((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
              if (dispatch thunk of static Comparable.< infix(_:_:)())
              {
                (*(void (**)(unsigned char *, uint64_t))(v73 + 8))(v86, v75);
                uint64_t v79 = &selRef_ckServerChangeTokens;
              }
              else
              {
                uint64_t v79 = &selRef_ckServerChangeTokens;
                id v108 = [v78 daemonUserDefaults];
                [v108 setLastPresentAlarmDate:0];

                (*(void (**)(unsigned char *, uint64_t))(v73 + 8))(v87, v75);
              }
LABEL_50:
              id v96 = [v78 v79[103]];
              id v97 = [v96 nextScheduledAlarmDate];

              if (v97)
              {
                uint64_t v98 = v79;
                char v99 = v118;
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                unint64_t v100 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v73 + 32);
                v100(v77, v99, v75);
                v85(v77, 0, 1, v75);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v77, 1, v75) != 1)
                {
                  uint64_t v101 = v115;
                  v100((uint64_t)v115, (unsigned char *)v77, v75);
                  uint64_t v102 = v101;
                  sub_1002978B4((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
                  char v103 = dispatch thunk of static Comparable.< infix(_:_:)();
                  unint64_t v48 = v128;
                  if ((v103 & 1) == 0)
                  {
                    id v104 = [v78 v98[103]];
                    [v104 setNextScheduledAlarmDate:0];
                  }
                  (*(void (**)(unsigned char *, uint64_t))(v73 + 8))(v102, v75);
                  goto LABEL_57;
                }
              }
              else
              {
                v85(v77, 1, 1, v75);
              }
              sub_1000EACF4(v77);
              unint64_t v48 = v128;
LABEL_57:
              sub_100292B04();
              (*(void (**)(unsigned char *, uint64_t))(v73 + 8))(v76, v75);
LABEL_58:
              uint64_t v105 = Logger.logObject.getter();
              os_log_type_t v106 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v105, v106))
              {
                os_log_t v107 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)os_log_t v107 = 0;
                _os_log_impl((void *)&_mh_execute_header, v105, v106, "Handled dismissal of before first unlock notification successfully.", v107, 2u);
                swift_slowDealloc();
              }

              goto LABEL_10;
            }
          }
          else
          {
            uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
            uint64_t v84 = (uint64_t)v117;
            v85((uint64_t)v117, 1, 1, v75);
          }
          sub_1000EACF4(v84);
          goto LABEL_50;
        }
        if (v74 == enum case for RDUserNotificationAction.debugDismiss(_:)
          || v74 == enum case for RDUserNotificationAction.markAsCompleted(_:)
          || v74 == enum case for RDUserNotificationAction.snoozeForOneHour(_:)
          || v74 == enum case for RDUserNotificationAction.snoozeForOneDay(_:)
          || v74 == enum case for RDUserNotificationAction.snoozeToNextThirds(_:)
          || v74 == enum case for RDUserNotificationAction.snoozeToNextWeekend(_:)
          || v74 == enum case for RDUserNotificationAction.addToReminders(_:)
          || v74 == enum case for RDUserNotificationAction.viewAssignmentInList(_:)
          || v74 == enum case for RDUserNotificationAction.declineAssignment(_:)
          || v74 == enum case for RDUserNotificationAction.viewRemindersInList(_:))
        {
          unint64_t v88 = v116;
          v113(v116, v55, v54);
          uint64_t v89 = v54;
          uint64_t v90 = Logger.logObject.getter();
          os_log_type_t v91 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v90, v91))
          {
            uint64_t v92 = v72;
            uint64_t v93 = (uint8_t *)swift_slowAlloc();
            v130[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v93 = 136315138;
            uint64_t v94 = RDUserNotificationAction.rawValue.getter();
            uint64_t v129 = sub_1000C51B8(v94, v95, v130);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v92(v88, v89);
            _os_log_impl((void *)&_mh_execute_header, v90, v91, "Unexpected action for notification type .beforeFirstUnlock {action: %s}", v93, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            v72(v88, v89);
          }

          unint64_t v48 = v128;
          goto LABEL_58;
        }
      }
      else
      {
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
      }
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return result;
    }
  }
  (*(void (**)(id *, uint64_t))(v26 + 8))(v35, v25);
LABEL_4:
  if (qword_100907220 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  sub_10008E2DC(v38, (uint64_t)qword_1009122F0);
  unint64_t v39 = v31;
  uint64_t v40 = (void (*)(unsigned char *, unsigned char *, uint64_t))v36;
  ((void (*)(unsigned char *, uint64_t, uint64_t))v36)(v31, a2, v25);
  id v41 = v126;
  unint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v125 = (void *)swift_slowAlloc();
    id v126 = (id)swift_slowAlloc();
    v130[0] = (uint64_t)v126;
    *(_DWORD *)uint64_t v44 = 136315394;
    v40(v28, v39, v25);
    uint64_t v45 = String.init<A>(describing:)();
    uint64_t v129 = sub_1000C51B8(v45, v46, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v26 + 8))(v39, v25);
    *(_WORD *)(v44 + 12) = 2112;
    uint64_t v129 = (uint64_t)v41;
    id v47 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v125 = v41;

    _os_log_impl((void *)&_mh_execute_header, v42, v43, "RDBeforeFirstUnlockNotificationEngine didn't expect to receive actions of this type. {type: %s, response: %@}", (uint8_t *)v44, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v26 + 8))(v39, v25);
  }
  unint64_t v48 = v128;
LABEL_10:
  if (qword_100907220 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_10008E2DC(v49, (uint64_t)qword_1009122F0);
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    unint64_t v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Completing action handler by calling completionHandler now.", v52, 2u);
    swift_slowDealloc();
  }

  return v48();
}

uint64_t sub_10029785C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10029786C()
{
  return swift_release();
}

uint64_t sub_100297874()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1002978AC()
{
  sub_100293CB0(*(void **)(v0 + 16));
}

uint64_t sub_1002978B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002978FC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100297934()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100297974()
{
}

uint64_t sub_10029797C()
{
  return sub_10029369C();
}

void sub_100297984()
{
}

BOOL sub_1002979C0()
{
  return sub_100292A70();
}

uint64_t sub_100297A0C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009124D0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009124D0);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100297AD4(void *a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (char *)[v2 purpose:v8];
  if ((unint64_t)(v11 - 1) >= 2)
  {
    if (v11)
    {
      if (qword_100907228 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_10008E2DC(v6, (uint64_t)qword_1009124D0);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v14, v6);
      sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
      sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
      sub_10052ECB8((uint64_t)"unknown purpose", 15, 2);
      __break(1u);
    }
    else
    {
      sub_100297D2C(a1, a2);
      if (!v3)
      {
        id v12 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
        sub_1000963CC(0, &qword_100910180);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v12 initWithStorages:isa];
      }
    }
  }
  else
  {
    __chkstk_darwin(v11);
    v15[-2] = v2;
    sub_1003B970C(a2, (uint64_t)sub_10029BFE8, (uint64_t)&v15[-4]);
  }
}

unint64_t sub_100297D2C(void *a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  id v7 = [a1 accountStoragesForAllGenericAccounts];
  sub_1000963CC(0, &qword_100910180);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (qword_100907228 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_1009124D0);
  swift_bridgeObjectRetain_n();
  id v10 = v2;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  unint64_t v13 = v8 >> 62;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134218242;
    uint64_t v45 = v6;
    uint64_t v43 = a2;
    if (v13)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    id v15 = [v10 name];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    sub_1000C51B8(v16, v18, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Fetching all generic account storages {cached#: %ld, name: %s}", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v45;
    uint64_t v4 = v3;
    a2 = v43;
    unint64_t v13 = v8 >> 62;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (v13)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v42) {
      return v8;
    }
  }
  else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return v8;
  }
  swift_bridgeObjectRelease();
  unint64_t v19 = sub_1003B926C(a2, (uint64_t)sub_1002986CC, 0);
  if (!v4)
  {
    unint64_t v8 = v19;
    unint64_t v20 = v19 >> 62;
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id v22 = v10;
    uint64_t v23 = v22;
    if (v21)
    {
      swift_bridgeObjectRetain_n();
      id v24 = v23;
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        unint64_t v46 = v6;
        uint64_t v27 = swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 134218242;
        os_log_type_t v44 = v26;
        if (v20)
        {
          swift_bridgeObjectRetain();
          _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2080;
        id v36 = [v24 name];
        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v39 = v38;

        sub_1000C51B8(v37, v39, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v44, "Putting all generic account storages fetched from DB to cache {fetched#: %ld, name: %s}", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v6 = v46;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      [v6 setAccountStoragesForAllGenericAccountsWithStorages:isa];
    }
    else
    {
      unint64_t v47 = v8;
      id v28 = v22;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136315138;
        id v32 = [v28 name];
        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v34;

        sub_1000C51B8(v33, v35, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Couldn't fetch all generic account storages from database {name: %s}", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return v47;
    }
  }
  return v8;
}

void sub_100298420(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)&double v7 = __chkstk_darwin(v5).n128_u64[0];
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [v3 purpose:v7];
  if ((unint64_t)v10 >= 3)
  {
    if (qword_100907228 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_10008E2DC(v5, (uint64_t)qword_1009124D0);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v17, v5);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_10052ECB8((uint64_t)"unknown purpose", 15, 2);
    __break(1u);
  }
  else
  {
    unint64_t v11 = (unint64_t)v10 + 3;
    sub_1000963CC(0, &qword_10090ABC0);
    os_log_type_t v12 = (void *)sub_1003AD42C(v11, 0, 7);
    id v13 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v14 = [(id)swift_getObjCClassFromMetadata() entity];
    [v13 setEntity:v14];

    [v13 setAffectedStores:0];
    [v13 setPredicate:v12];

    sub_1003B0634((uint64_t)v13, a1);
    sub_10029BF8C(v11, 0, 7);
    if (!v2)
    {
      id v15 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
      sub_1000963CC(0, &qword_100910180);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v15 initWithStorages:isa];
    }
  }
}

void sub_1002986CC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000963CC(0, &qword_10090ABC0);
  uint64_t v5 = (void *)sub_1003AD42C(3uLL, 0, 7);
  id v6 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v7 = [(id)swift_getObjCClassFromMetadata() entity];
  [v6 setEntity:v7];

  [v6 setAffectedStores:0];
  [v6 setPredicate:v5];

  uint64_t v8 = sub_1003B0634((uint64_t)v6, a1);
  if (!v2) {
    *a2 = v8;
  }
}

void sub_1002987DC(void *a1, uint64_t a2)
{
}

void sub_100298800(uint64_t a1)
{
}

NSString sub_100298824(void *a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  id v7 = a1;
  id v8 = [a1 inMemoryPrimaryActiveCKAccountREMObjectID];
  if (!v8)
  {
    if (qword_100907228 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E2DC(v31, (uint64_t)qword_1009124D0);
    id v32 = v5;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      *(_DWORD *)unint64_t v35 = 136315138;
      id v36 = [v32 name];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;

      sub_1000C51B8(v37, v39, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "No need to fetching account storage because no active primary CK account is enabled {name: %s}", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v44 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
    sub_1000963CC(0, &qword_100910180);
    v42.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    NSString v43 = [v44 initWithStorages:v42.super.isa];
    goto LABEL_19;
  }
  uint64_t v9 = v8;
  uint64_t type = a2;
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10077A530;
  *(void *)(v10 + 32) = v9;
  uint64_t v74 = v10;
  specialized Array._endMutation()();
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t v73 = v9;
  id v11 = v9;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v13 = [v7 accountStoragesForAccountObjectIDs:isa];

  sub_1000963CC(0, &qword_100910180);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (qword_100907228 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_1009124D0);
  id v16 = v11;
  swift_bridgeObjectRetain_n();
  id v17 = v5;
  id v18 = v16;
  id v19 = v17;
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  unint64_t v22 = v14 >> 62;
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v67 = v21;
    unint64_t v69 = v7;
    uint64_t v23 = swift_slowAlloc();
    id v24 = (void *)swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 138412802;
    id v25 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v24 = v73;

    *(_WORD *)(v23 + 12) = 2048;
    id v68 = v18;
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 22) = 2080;
    os_log_type_t v26 = v19;
    id v27 = [v19 name];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    sub_1000C51B8(v28, v30, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v67, "Fetching account storage by ObjectID {input: %@, hit?: %ld, name: %s}", (uint8_t *)v23, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v4 = v3;
    id v7 = v69;
    id v18 = v68;
    unint64_t v22 = v14 >> 62;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    os_log_type_t v26 = v19;
  }
  if (v22)
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v45)
    {
      swift_bridgeObjectRetain();
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v46 == 1) {
        goto LABEL_16;
      }
      goto LABEL_22;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    NSString v43 = v7;
    sub_1003B926C(type, (uint64_t)sub_100299280, 0);
    if (!v4)
    {
      id v49 = v18;
      id v50 = v26;
      id v51 = v49;
      id v52 = v50;
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v53, v54))
      {
        os_log_type_t typea = v54;
        uint64_t v55 = swift_slowAlloc();
        uint64_t v56 = (void *)swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        *(_DWORD *)uint64_t v55 = 138412546;
        uint64_t v70 = v7;
        id v57 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v56 = v73;

        *(_WORD *)(v55 + 12) = 2080;
        id v58 = [v52 name];
        uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v61 = v60;

        id v7 = v70;
        sub_1000C51B8(v59, v61, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v53, typea, "Putting account storage fetched from primaryActiveCloudKitAccountOptimized() to storage cache {accountID: %@, name: %s}", (uint8_t *)v55, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      Class v62 = Array._bridgeToObjectiveC()().super.isa;
      uint64_t v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16) = xmmword_10077A530;
      *(void *)(v63 + 32) = v51;
      uint64_t v74 = v63;
      specialized Array._endMutation()();
      id v64 = v51;
      Class v65 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v7 setAccountStorages:v62 forAccountObjectIDs:v65];

      id v66 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
      v42.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      NSString v43 = [v66 initWithStorages:v42.super.isa];

      goto LABEL_19;
    }
LABEL_24:

    return v43;
  }
  uint64_t v40 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v40) {
    goto LABEL_23;
  }
  if (v40 != 1)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    unint64_t v47 = self;
    NSString v43 = String._bridgeToObjectiveC()();
    [v47 internalErrorWithDebugDescription:v43];

    swift_willThrow();
    goto LABEL_24;
  }
LABEL_16:
  id v41 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
  v42.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v43 = [v41 initWithStorages:v42.super.isa];

LABEL_19:
  return v43;
}

void sub_100299280(uint64_t *a1@<X8>)
{
  if (qword_100907B10 != -1) {
    swift_once();
  }
  uint64_t v3 = swift_retain();
  id v4 = sub_10034A86C(v3);
  swift_release();
  if (v4)
  {
    id v5 = sub_10028AA2C(v4);
    if (v1)
    {
    }
    else
    {
      id v8 = v5;
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_10077A530;
      *(void *)(v9 + 32) = v8;
      uint64_t v10 = v9;
      specialized Array._endMutation()();

      *a1 = v10;
    }
  }
  else
  {
    id v6 = self;
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 internalErrorWithDebugDescription:v7];

    swift_willThrow();
  }
}

id sub_1002993D0(void *a1, uint64_t a2)
{
  if ([*v2 fetchREMObjectIDOnly]) {
    return sub_10029BB84(a1);
  }
  else {
    return sub_100298824(a1, a2);
  }
}

uint64_t sub_100299444()
{
  return sub_10029BCD4();
}

id sub_10029945C(NSString a1)
{
  uint64_t v3 = v1;
  id v5 = [v3 fetchOption];
  if (v5 == (id)2)
  {
    __chkstk_darwin(2);
    sub_100094134(&qword_10090E178);
    goto LABEL_9;
  }
  if (v5 == (id)1)
  {
    __chkstk_darwin(1);
    sub_100094134(&qword_10090E178);
LABEL_9:
    NSManagedObjectContext.rem_performAndWait<A>(_:)();
    if (!v2)
    {
      id v15 = objc_allocWithZone((Class)REMAccountsDataViewInvocationREMObjectIDOnlyResult);
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      a1 = [v15 initWithAccountIDs:isa];
    }
    return a1;
  }
  if (v5)
  {
    if (qword_100907228 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_1009124D0);
    id v18 = v3;
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v21 = 134349056;
      [v18 fetchOption];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "REMAccountsDataViewInvocation_fetchActiveCloudKitAccountObjectIDs: Unknown REMActiveCloudKitAccountFetchOption %{public}ld", v21, 0xCu);
      swift_slowDealloc();
    }
    else
    {
    }
    unint64_t v22 = self;
    a1 = String._bridgeToObjectiveC()();
    [v22 internalErrorWithDebugDescription:a1];

    swift_willThrow();
    return a1;
  }
  id v6 = [a1 storeController];
  NSString v7 = v6;
  if (v6)
  {
    id v8 = v6;
    id v9 = [v8 inMemoryPrimaryActiveCKAccountREMObjectID];
    if (v9)
    {
      uint64_t v10 = v9;
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_10077A530;
      *(void *)(v11 + 32) = v10;
      specialized Array._endMutation()();
      id v12 = objc_allocWithZone((Class)REMAccountsDataViewInvocationREMObjectIDOnlyResult);
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      id v13 = v10;
      Class v14 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      a1 = [v12 initWithAccountIDs:v14];

      return a1;
    }
  }
  id v24 = objc_allocWithZone((Class)REMAccountsDataViewInvocationREMObjectIDOnlyResult);
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  Class v25 = Array._bridgeToObjectiveC()().super.isa;
  id v26 = [v24 initWithAccountIDs:v25];

  return v26;
}

id sub_1002998B4(void *a1)
{
  return sub_10029945C(a1);
}

uint64_t *sub_1002998D8(void *a1, uint64_t a2)
{
  id v5 = v2;
  unint64_t v101 = (unint64_t)_swiftEmptyArrayStorage;
  Class isa = (Class)[v2 objectIDs];
  if (!isa)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  id v95 = a1;
  id v9 = [a1 accountStoragesForAccountObjectIDs:isa];

  uint64_t v10 = sub_1000963CC(0, &qword_100910180);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v12 = [v5 objectIDs];
  uint64_t v13 = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v15 = sub_100126B08(v14);
  swift_bridgeObjectRelease();
  uint64_t v100 = (uint64_t)v15;
  uint64_t v96 = v3;
  uint64_t v92 = v10;
  uint64_t v93 = a2;
  uint64_t v94 = v13;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v16) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v16) {
      goto LABEL_15;
    }
  }
  if (v16 < 1)
  {
    __break(1u);
LABEL_49:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v17 = 0;
  do
  {
    if ((v11 & 0xC000000000000001) != 0) {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v18 = *(id *)(v11 + 8 * v17 + 32);
    }
    id v19 = v18;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v17;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v20 = [v19 objectID];
    os_log_type_t v21 = (void *)sub_10065B394(v20);
  }
  while (v16 != v17);
LABEL_15:
  swift_bridgeObjectRelease();
  if (qword_100907228 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = sub_10008E2DC(v22, (uint64_t)qword_1009124D0);
  uint64_t v13 = v100;
  id v24 = v5;
  swift_bridgeObjectRetain_n();
  id v4 = v24;
  id v15 = Logger.logObject.getter();
  LOBYTE(v16) = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v15, (os_log_type_t)v16))
  {

    swift_bridgeObjectRelease_n();
    uint64_t v29 = v96;
    goto LABEL_26;
  }
  uint64_t v91 = v23;
  id v5 = (_WORD *)swift_slowAlloc();
  uint64_t v90 = swift_slowAlloc();
  v99[0] = v90;
  *(_DWORD *)id v5 = 134218754;
  id v25 = [v4 objectIDs:v90];
  unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v26 >> 62) {
    goto LABEL_49;
  }
  uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);

LABEL_20:
  swift_bridgeObjectRelease();
  v98[0] = v27;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  v5[6] = 2048;
  swift_beginAccess();
  if (v101 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v98[0] = v28;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v5[11] = 2048;
  if ((v13 & 0xC000000000000001) != 0) {
    __CocoaSet.count.getter();
  }
  swift_bridgeObjectRelease();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v5[16] = 2080;
  id v30 = [v4 name];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v33 = v32;

  v98[0] = sub_1000C51B8(v31, v33, v99);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v16, "Fetching account storage by ObjectID {input#: %ld, hit#: %ld, miss#: %ld, name: %s}", (uint8_t *)v5, 0x2Au);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v29 = v96;
LABEL_26:
  swift_beginAccess();
  uint64_t v34 = v100;
  if ((v100 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_28;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  if (!*(void *)(v100 + 16)) {
    goto LABEL_31;
  }
LABEL_28:
  unint64_t v36 = (unint64_t)sub_10020A3A0(v34);
  uint64_t v37 = swift_bridgeObjectRelease();
  unint64_t v38 = &v90;
  __chkstk_darwin(v37);
  v89[2] = v4;
  v89[3] = v36;
  unint64_t v39 = sub_1003B926C(v93, (uint64_t)sub_10029BF4C, (uint64_t)v89);
  if (!v29)
  {
    unint64_t v40 = v39;
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v77)
      {
        swift_bridgeObjectRetain();
        uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((v36 & 0x8000000000000000) != 0) {
          goto LABEL_53;
        }
LABEL_35:
        if ((v36 & 0x4000000000000000) == 0)
        {
          uint64_t v42 = *(void *)(v36 + 16);
LABEL_37:
          NSString v43 = v4;
          id v44 = v43;
          if (v41 == v42)
          {
            swift_retain_n();
            id v45 = v44;
            uint64_t v46 = Logger.logObject.getter();
            os_log_type_t v47 = static os_log_type_t.info.getter();
            int v48 = v47;
            if (os_log_type_enabled(v46, v47))
            {
              uint64_t v49 = swift_slowAlloc();
              LODWORD(v93) = v48;
              uint64_t v50 = v49;
              uint64_t v91 = swift_slowAlloc();
              v98[0] = v91;
              *(_DWORD *)uint64_t v50 = 136315394;
              swift_retain();
              uint64_t v51 = Array.description.getter();
              uint64_t v96 = 0;
              uint64_t v52 = v51;
              unint64_t v54 = v53;
              swift_release();
              uint64_t v97 = sub_1000C51B8(v52, v54, v98);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v50 + 12) = 2080;
              id v55 = [v45 name:v50 + 14];
              uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v58 = v57;

              uint64_t v97 = sub_1000C51B8(v56, v58, v98);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v93, "Putting account storages fetched from DB to cache {objIDs: %s, name: %s}", (uint8_t *)v50, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_release_n();
            }
            Class v72 = Array._bridgeToObjectiveC()().super.isa;
            Class v73 = Array._bridgeToObjectiveC()().super.isa;
            swift_release();
            [v95 setAccountStorages:v72 forAccountObjectIDs:v73];
          }
          else
          {
            uint64_t v59 = v43;
            swift_retain();
            unint64_t v60 = Logger.logObject.getter();
            os_log_type_t v61 = static os_log_type_t.info.getter();
            int v62 = v61;
            if (os_log_type_enabled(v60, v61))
            {
              uint64_t v63 = swift_slowAlloc();
              LODWORD(v96) = v62;
              uint64_t v64 = v63;
              id v95 = (id)swift_slowAlloc();
              v98[0] = (uint64_t)v95;
              *(_DWORD *)uint64_t v64 = 136315394;
              swift_retain();
              uint64_t v65 = Array.description.getter();
              unint64_t v67 = v66;
              swift_release();
              uint64_t v97 = sub_1000C51B8(v65, v67, v98);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v64 + 12) = 2080;
              uint64_t v94 = v64 + 14;
              id v68 = [v59 name];
              uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v71 = v70;

              uint64_t v97 = sub_1000C51B8(v69, v71, v98);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v96, "Couldn't fetch all requested accounts {objIDs: %s, name: %s}", (uint8_t *)v64, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_release_n();
            }
          }
          swift_beginAccess();
          sub_10020330C(v40);
          swift_endAccess();
          goto LABEL_46;
        }
LABEL_53:
        swift_bridgeObjectRetain();
        uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v41 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v41)
      {
        if ((v36 & 0x8000000000000000) != 0) {
          goto LABEL_53;
        }
        goto LABEL_35;
      }
    }
    uint64_t v96 = 0;
    swift_bridgeObjectRelease();
    uint64_t v78 = v4;
    swift_retain();
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = swift_slowAlloc();
      id v95 = (id)swift_slowAlloc();
      v98[0] = (uint64_t)v95;
      *(_DWORD *)uint64_t v81 = 136315394;
      swift_retain();
      uint64_t v82 = Array.description.getter();
      unint64_t v84 = v83;
      swift_release();
      uint64_t v97 = sub_1000C51B8(v82, v84, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v81 + 12) = 2080;
      id v85 = [v78 name];
      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v88 = v87;

      uint64_t v97 = sub_1000C51B8(v86, v88, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "None of the requested accounts could be fetched {objIDs: %s, name: %s}", (uint8_t *)v81, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
LABEL_46:
    swift_beginAccess();
    id v74 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
    swift_bridgeObjectRetain();
    Class v75 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v38 = (uint64_t *)[v74 initWithStorages:v75];

    swift_bridgeObjectRelease();
    return v38;
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v38;
}

void sub_10029A68C(void *a1@<X0>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  id v6 = a1;
  sub_10029B9FC(a2, v6);

  sub_1000963CC(0, &qword_10090ABC0);
  NSString v7 = (void *)sub_1003AD42C(a2, 0, 1);
  id v8 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v9 = [(id)swift_getObjCClassFromMetadata() entity];
  [v8 setEntity:v9];

  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v8 setAffectedStores:isa];

  [v8 setPredicate:v7];
  uint64_t v11 = sub_1003B0634((uint64_t)v8, (uint64_t)v6);
  swift_bridgeObjectRelease();

  if (!v3) {
    *a3 = v11;
  }
}

id sub_10029A7FC(void *a1)
{
  uint64_t v3 = v1;
  if (qword_100907228 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_1009124D0);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Prefer using the store controller invoke() instead of this MoC invoke() for REMAccountsDataViewInvocation_fetchByExternalIdentifier", v8, 2u);
    swift_slowDealloc();
  }

  id v9 = [v3 objectIDs];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  id v10 = (id)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v11 = a1;
  sub_10029B9FC((unint64_t)v10, v11);

  sub_1000963CC(0, &qword_10090ABC0);
  id v12 = (void *)sub_1003AD42C((unint64_t)v10, 0, 1);
  Class v13 = (Class)[objc_allocWithZone((Class)NSFetchRequest) init];
  id v14 = [(id)swift_getObjCClassFromMetadata() entity];
  [(objc_class *)v13 setEntity:v14];

  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [(objc_class *)v13 setAffectedStores:isa];

  [(objc_class *)v13 setPredicate:v12];
  sub_1003B0634((uint64_t)v13, (uint64_t)v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v2)
  {

    id v16 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
    sub_1000963CC(0, &qword_100910180);
    Class v13 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v10 = [v16 initWithStorages:v13];
  }

  return v10;
}

uint64_t *sub_10029AAD0(void *a1, uint64_t a2)
{
  return sub_1002998D8(a1, a2);
}

id sub_10029AAF4(void *a1)
{
  return sub_10029A7FC(a1);
}

uint64_t *sub_10029AB18(void *a1, uint64_t a2)
{
  id v6 = v2;
  unint64_t v101 = (unint64_t)_swiftEmptyArrayStorage;
  id v9 = &selRef_willSave;
  Class isa = (Class)[v2 externalIdentifiers];
  if (!isa)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  id v96 = a1;
  id v11 = [a1 accountStoragesForAccountExternalIdentifiers:isa];

  uint64_t v93 = sub_1000963CC(0, &qword_100910180);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = [v6 externalIdentifiers];
  id v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = sub_10012674C((uint64_t)v14);
  swift_bridgeObjectRelease();
  uint64_t v100 = v15;
  id v94 = v6;
  uint64_t v95 = v3;
  uint64_t v92 = a2;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v16) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v16) {
      goto LABEL_17;
    }
  }
  if (v16 < 1)
  {
    __break(1u);
    goto LABEL_39;
  }
  for (uint64_t i = 0; i != v16; ++i)
  {
    if ((v12 & 0xC000000000000001) != 0) {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v18 = *(id *)(v12 + 8 * i + 32);
    }
    id v19 = v18;
    id v20 = [v18 externalIdentifier];
    if (v20)
    {
      os_log_type_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      id v25 = v19;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_10065ACF8(v22, v24);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
LABEL_17:
  swift_bridgeObjectRelease();
  if (qword_100907228 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = (void *)sub_10008E2DC(v26, (uint64_t)qword_1009124D0);
  id v28 = v94;
  swift_bridgeObjectRetain_n();
  id v4 = v28;
  id v14 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v5))
  {
    id v94 = v27;
    id v9 = (char **)swift_slowAlloc();
    uint64_t v91 = swift_slowAlloc();
    v99[0] = v91;
    *(_DWORD *)id v9 = 134218754;
    id v29 = [v4 externalIdentifiers];
    uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v31 = *(void *)(v30 + 16);
    swift_bridgeObjectRelease();
    v98[0] = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *((_WORD *)v9 + 6) = 2048;
    swift_beginAccess();
    if (!(v101 >> 62))
    {
LABEL_21:
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v9 + 11) = 2048;
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *((_WORD *)v9 + 16) = 2080;
      id v32 = [v4 name];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;

      v98[0] = sub_1000C51B8(v33, v35, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v5, "Fetching account storage by ExtID {input#: %ld, hit#: %ld, miss#: %ld, name: %s}", (uint8_t *)v9, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v36 = v95;
      goto LABEL_23;
    }
LABEL_39:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }

  swift_bridgeObjectRelease_n();
  uint64_t v36 = v95;
LABEL_23:
  swift_beginAccess();
  if (!*(void *)(v100 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  uint64_t v37 = sub_100209D8C(v100);
  uint64_t v38 = swift_bridgeObjectRelease();
  unint64_t v39 = &v90;
  __chkstk_darwin(v38);
  v89[2] = v4;
  v89[3] = v37;
  unint64_t v40 = sub_1003B926C(v92, (uint64_t)sub_10029BF18, (uint64_t)v89);
  if (!v36)
  {
    unint64_t v41 = v40;
    if (v40 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v73)
      {
        swift_bridgeObjectRetain();
        uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v42 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v42)
      {
LABEL_29:
        uint64_t v43 = v37[2];
        id v44 = v4;
        id v45 = v44;
        if (v42 == v43)
        {
          swift_retain_n();
          id v46 = v45;
          os_log_type_t v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.info.getter();
          int v49 = v48;
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v50 = swift_slowAlloc();
            uint64_t v95 = 0;
            uint64_t v51 = v50;
            id v94 = (id)swift_slowAlloc();
            v98[0] = (uint64_t)v94;
            *(_DWORD *)uint64_t v51 = 136315394;
            LODWORD(v92) = v49;
            swift_retain();
            uint64_t v52 = Array.description.getter();
            unint64_t v54 = v53;
            swift_release();
            uint64_t v97 = sub_1000C51B8(v52, v54, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v51 + 12) = 2080;
            uint64_t v91 = v51 + 14;
            id v55 = [v46 name];
            uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v58 = v57;

            uint64_t v97 = sub_1000C51B8(v56, v58, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v92, "Putting account storages fetched from DB to cache {extIds: %s, name: %s}", (uint8_t *)v51, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
          }
          Class v71 = Array._bridgeToObjectiveC()().super.isa;
          Class v72 = Array._bridgeToObjectiveC()().super.isa;
          swift_release();
          [v96 setAccountStorages:v71 forAccountExternalIdentifiers:v72];
        }
        else
        {
          id v59 = v44;
          swift_retain();
          unint64_t v60 = Logger.logObject.getter();
          os_log_type_t v61 = static os_log_type_t.info.getter();
          int v62 = v61;
          if (os_log_type_enabled(v60, v61))
          {
            uint64_t v63 = swift_slowAlloc();
            id v96 = (id)swift_slowAlloc();
            v98[0] = (uint64_t)v96;
            *(_DWORD *)uint64_t v63 = 136315394;
            LODWORD(v95) = v62;
            swift_retain();
            uint64_t v64 = Array.description.getter();
            unint64_t v66 = v65;
            swift_release();
            uint64_t v97 = sub_1000C51B8(v64, v66, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v63 + 12) = 2080;
            id v94 = (id)(v63 + 14);
            id v67 = [v59 name];
            uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v70 = v69;

            uint64_t v97 = sub_1000C51B8(v68, v70, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v95, "Couldn't fetch all requested accounts {extIds: %s, name: %s}", (uint8_t *)v63, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
          }
        }
        swift_beginAccess();
        sub_10020330C(v41);
        swift_endAccess();
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRelease();
    id v74 = v4;
    swift_retain();
    Class v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.info.getter();
    int v77 = v76;
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v78 = swift_slowAlloc();
      id v96 = (id)swift_slowAlloc();
      v98[0] = (uint64_t)v96;
      *(_DWORD *)uint64_t v78 = 136315394;
      LODWORD(v95) = v77;
      swift_retain();
      uint64_t v79 = Array.description.getter();
      unint64_t v81 = v80;
      swift_release();
      uint64_t v97 = sub_1000C51B8(v79, v81, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v78 + 12) = 2080;
      id v82 = [v74 name];
      uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v85 = v84;

      uint64_t v97 = sub_1000C51B8(v83, v85, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v95, "None of the requested accounts could be fetched {extIds: %s, name: %s}", (uint8_t *)v78, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
LABEL_45:
    swift_beginAccess();
    id v86 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
    swift_bridgeObjectRetain();
    Class v87 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v39 = (uint64_t *)[v86 initWithStorages:v87];

    swift_bridgeObjectRelease();
    return v39;
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t sub_10029B810(uint64_t a1)
{
  uint64_t v3 = v1;
  if (qword_100907228 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_1009124D0);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Prefer using the store controller invoke() instead of this MoC invoke() for REMAccountsDataViewInvocation_fetchByExternalIdentifier", v8, 2u);
    swift_slowDealloc();
  }

  id v9 = [v3 externalIdentifiers];
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10029BE0C(v10, a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
    id v12 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
    sub_1000963CC(0, &qword_100910180);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v14 = [v12 initWithStorages:isa];

    return (uint64_t)v14;
  }
  return result;
}

uint64_t *sub_10029B9B4(void *a1, uint64_t a2)
{
  return sub_10029AB18(a1, a2);
}

uint64_t sub_10029B9D8(uint64_t a1)
{
  return sub_10029B810(a1);
}

void *sub_10029B9FC(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      os_log_type_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = [a2 persistentStoreOfAccountWithAccountID:v6];

      if (v9)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v5;
      if (v8 == v4) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

id sub_10029BB84(void *a1)
{
  id v1 = [a1 inMemoryPrimaryActiveCKAccountREMObjectID];
  if (v1)
  {
    uint64_t v2 = v1;
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_10077A530;
    *(void *)(v3 + 32) = v2;
    specialized Array._endMutation()();
    id v4 = objc_allocWithZone((Class)REMAccountsDataViewInvocationREMObjectIDOnlyResult);
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    id v5 = v2;
    v6.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v7 = [v4 initWithAccountIDs:v6.super.isa];
  }
  else
  {
    id v8 = objc_allocWithZone((Class)REMAccountsDataViewInvocationREMObjectIDOnlyResult);
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    v6.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v7 = [v8 initWithAccountIDs:v6.super.isa];
  }

  return v7;
}

uint64_t sub_10029BCD4()
{
  if (qword_100907228 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_1009124D0);
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unexpectedly calling the invoke() with the MoC instead of with the storeController for REMAccountsDataViewInvocation_fetchPrimaryActiveCloudKitAccount", v3, 2u);
    swift_slowDealloc();
  }

  id v4 = self;
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 internalErrorWithDebugDescription:v5];

  return swift_willThrow();
}

uint64_t sub_10029BE0C(unint64_t a1, uint64_t a2)
{
  sub_1000963CC(0, &qword_10090ABC0);
  id v4 = (void *)sub_1003AD42C(a1, 0, 2);
  id v5 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v6 = [(id)swift_getObjCClassFromMetadata() entity];
  [v5 setEntity:v6];

  [v5 setAffectedStores:0];
  [v5 setPredicate:v4];

  uint64_t v7 = sub_1003B0634((uint64_t)v5, a2);
  return v7;
}

uint64_t sub_10029BF18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10029BE0C(*(void *)(v2 + 24), a1);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

void sub_10029BF4C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10029A68C(a1, *(void *)(v2 + 24), a2);
}

void sub_10029BF68(void *a1@<X8>)
{
  sub_1003AF4B0(*(unsigned char *)(v1 + 16), *(unsigned char *)(v1 + 17), *(void *)(v1 + 24), a1);
}

uint64_t sub_10029BF8C(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 6:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void sub_10029BFE8(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_100298420(a1);
  if (!v2) {
    *a2 = v4;
  }
}

void sub_10029C018(void *a1@<X8>)
{
}

uint64_t sub_10029C030(uint64_t a1)
{
  uint64_t result = sub_10029F8B0(&qword_100912520, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TaggedInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10029C088()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009124E8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009124E8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10029C150(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  Swift::Int v130 = a3;
  uint64_t v134 = a4;
  unint64_t v128 = a2;
  uint64_t v108 = a5;
  uint64_t v131 = type metadata accessor for REMRemindersListDataView.TaggedModel();
  uint64_t v109 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  os_log_t v107 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  int v110 = (char *)&v100 - v8;
  uint64_t v9 = sub_100094134(&qword_100909C60);
  __chkstk_darwin(v9 - 8);
  uint64_t v106 = (uint64_t)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v113 = (uint64_t)&v100 - v12;
  uint64_t v114 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v112 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v105 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v115 = (char *)&v100 - v15;
  uint64_t v16 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v118 = *(void *)(v16 - 8);
  uint64_t v119 = v16;
  __chkstk_darwin(v16);
  uint64_t v121 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v18 - 8);
  uint64_t v103 = (uint64_t)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v124 = v20;
  uint64_t v125 = v21;
  __chkstk_darwin(v20);
  uint64_t v116 = (uint64_t *)((char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v23);
  uint64_t v123 = (char *)&v100 - v24;
  uint64_t v122 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v120 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  id v104 = (char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v126 = (uint64_t)&v100 - v27;
  uint64_t v133 = _s10PredicatesOMa(0);
  __chkstk_darwin(v133);
  os_log_type_t v117 = (uint64_t *)((char *)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v29);
  uint64_t v127 = (uint64_t *)((char *)&v100 - v30);
  uint64_t v31 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v31 - 8);
  uint64_t v111 = (uint64_t)&v100 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  unint64_t v35 = (char *)&v100 - v34;
  uint64_t v36 = type metadata accessor for REMRemindersListDataView.HashtagLabelPredicate();
  uint64_t v132 = *(uint64_t (***)(void, void))(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v100 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100094134(&qword_100912528);
  __chkstk_darwin(v39 - 8);
  unint64_t v41 = (char *)&v100 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters();
  uint64_t v43 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  id v45 = (char *)&v100 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation();
  id v46 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v47 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v41, 1, 1, v47);
  REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters.init(sortingStyle:)();
  unint64_t v48 = v135;
  uint64_t v49 = sub_100571DFC();
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);

    return;
  }
  unint64_t v135 = v49;
  unint64_t v101 = v35;
  uint64_t v102 = (void *)a1;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);

  uint64_t v50 = v134;
  REMRemindersListDataView.TaggedInvocation.Parameters.hashtagLabelPredicate.getter();
  uint64_t v51 = v132;
  int v52 = ((uint64_t (**)(char *, uint64_t))v132)[11](v38, v36);
  if (v52 == enum case for REMRemindersListDataView.HashtagLabelPredicate.and(_:)
    || v52 == enum case for REMRemindersListDataView.HashtagLabelPredicate.or(_:))
  {
    ((uint64_t (**)(char *, uint64_t))v51)[12](v38, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v53 = v102;
    goto LABEL_9;
  }
  unint64_t v53 = v102;
  if (v52 == enum case for REMRemindersListDataView.HashtagLabelPredicate.allLabels(_:))
  {
LABEL_9:
    unint64_t v56 = v135;
    if (v135 >> 62)
    {
      sub_1000963CC(0, (unint64_t *)&unk_10090AF58);
      swift_bridgeObjectRetain();
      unint64_t v57 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_1000963CC(0, (unint64_t *)&unk_10090AF58);
      unint64_t v57 = v56;
    }
    uint64_t v59 = v131;
    uint64_t v58 = sub_10029DD50((uint64_t)v53, (uint64_t)v50, v57);
    swift_bridgeObjectRelease();
    id v55 = v130;
    goto LABEL_12;
  }
  if (v52 != enum case for REMRemindersListDataView.HashtagLabelPredicate.noLabels(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v54 = sub_10029E4EC((uint64_t)v102);
  id v55 = v130;
  uint64_t v58 = (uint64_t)v54;
  uint64_t v59 = v131;
LABEL_12:
  id v60 = sub_10029E9C4(v53, v55);
  uint64_t v131 = (uint64_t)sub_10029ED4C(v58, v53, v50);
  uint64_t v132 = (uint64_t (**)(void, void))v60;
  if (REMRemindersListDataView.TaggedInvocation.Parameters.countCompleted.getter())
  {
    uint64_t v61 = (uint64_t)v127;
    uint64_t *v127 = v58;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    int v62 = (void *)sub_10038F1F0();
    sub_10012607C(v61, _s10PredicatesOMa);
    uint64_t v63 = (uint64_t)v101;
    sub_10051EB6C((uint64_t)v53, (uint64_t)v62);
    uint64_t v65 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v63, 0, 1, v65);
  }
  else
  {
    uint64_t v64 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v101, 1, 1, v64);
  }
  uint64_t v66 = sub_10029F614((uint64_t)v53, (uint64_t)v128);
  LODWORD(v127) = v67;
  id v68 = [v129 fetchResultTokenToDiffAgainst];
  sub_10051F2BC(v68, (uint64_t)v53, v126);

  unint64_t v69 = v123;
  REMRemindersListDataView.TaggedInvocation.Parameters.remindersPrefetch.getter();
  uint64_t v71 = v124;
  uint64_t v70 = v125;
  Class v72 = v116;
  (*(void (**)(uint64_t *, char *, uint64_t))(v125 + 16))(v116, v69, v124);
  int v73 = (*(uint64_t (**)(uint64_t *, uint64_t))(v70 + 88))(v72, v71);
  uint64_t v100 = v66;
  if (v73 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v70 + 96))(v72, v71);
    uint64_t v74 = *v72;
    uint64_t v75 = v131;
    swift_bridgeObjectRetain();
    os_log_type_t v76 = sub_1005280D0(v74, v75, (uint64_t)v53, v130, 0);
LABEL_19:
    unint64_t v128 = v76;
    Swift::Int v130 = _swiftEmptyArrayStorage;
LABEL_20:
    uint64_t v82 = (uint64_t)v121;
    swift_bridgeObjectRelease();
    uint64_t v83 = v117;
LABEL_21:
    (*(void (**)(char *, uint64_t))(v125 + 8))(v69, v71);
    *uint64_t v83 = v58;
    swift_storeEnumTagMultiPayload();
    uint64_t v84 = sub_10038F1F0();
    uint64_t v85 = (uint64_t)v83;
    id v86 = (void *)v84;
    sub_10012607C(v85, _s10PredicatesOMa);
    REMRemindersListDataView.TaggedInvocation.Parameters.showCompleted.getter();
    Class v87 = v102;
    uint64_t v88 = (uint64_t)v101;
    sub_10052B078((uint64_t)v102, (uint64_t)v86, (uint64_t)v101, v82, v75);
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v82, v119);

    sub_1000BF710(v88, v111, &qword_100909C70);
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    uint64_t v89 = v113;
    sub_10029D290(v87, v113);
    uint64_t v96 = v112;
    (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v105, v115, v114);
    sub_1000BF710(v89, v106, &qword_100909C60);
    uint64_t v134 = v132;
    uint64_t v97 = v110;
    REMRemindersListDataView.TaggedModel.init(flatModel:allHashtagLabels:smartListHashtagLabels:smartListHashtagLabelsUpToDate:taggedSmartList:manualOrderingID:)();
    uint64_t v98 = v109;
    (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v107, v97, v59);
    uint64_t v99 = v120;
    (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v104, v126, v122);
    sub_10029F8B0(&qword_100912530, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TaggedModel);
    sub_10029F8B0(&qword_100912538, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TaggedModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();

    (*(void (**)(char *, uint64_t))(v98 + 8))(v110, v59);
    sub_1000966BC(v113, &qword_100909C60);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v115, v114);
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v126, v122);
    sub_1000966BC((uint64_t)v101, &qword_100909C70);
    return;
  }
  uint64_t v77 = v126;
  uint64_t v78 = v130;
  if (v73 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    uint64_t v79 = v124;
    (*(void (**)(uint64_t *, uint64_t))(v125 + 96))(v72, v124);
    uint64_t v80 = *v72;
    uint64_t v75 = v131;
    swift_bridgeObjectRetain();
    unint64_t v81 = v78;
    uint64_t v71 = v79;
    unint64_t v69 = v123;
    os_log_type_t v76 = sub_100528BCC(v80, v77, (uint64_t)v53, v81, 0);
    goto LABEL_19;
  }
  if (v73 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    uint64_t v90 = v124;
    (*(void (**)(uint64_t *, uint64_t))(v125 + 96))(v72, v124);
    uint64_t v91 = v78;
    uint64_t v92 = *v72;
    uint64_t v93 = (uint64_t)v72 + *(int *)(sub_100094134(&qword_100909C78) + 48);
    uint64_t v94 = v103;
    sub_1001326D0(v93, v103);
    uint64_t v75 = v131;
    swift_bridgeObjectRetain();
    uint64_t v95 = v92;
    uint64_t v71 = v90;
    unint64_t v69 = v123;
    unint64_t v128 = sub_1005280D0(v95, v75, (uint64_t)v53, v91, 0);
    Swift::Int v130 = sub_10052929C(v94, v75, (uint64_t)v53, v91, 0);
    sub_1000966BC(v94, &qword_100909C68);
    goto LABEL_20;
  }
  uint64_t v82 = (uint64_t)v121;
  uint64_t v83 = v117;
  if (v73 == enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
  {
    Swift::Int v130 = _swiftEmptyArrayStorage;
    unint64_t v128 = _swiftEmptyArrayStorage;
    uint64_t v71 = v124;
    uint64_t v75 = v131;
    goto LABEL_21;
  }
LABEL_28:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

void sub_10029D290(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v31 = a1;
  uint64_t v4 = type metadata accessor for REMRemindersListDataView.HashtagLabelPredicate();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_100912540);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMHashtagLabelSpecifier();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (REMRemindersListDataView.TaggedInvocation.Parameters.shouldFetchManualOrderingID.getter())
  {
    uint64_t v26 = v2;
    if (qword_100907B10 != -1) {
      swift_once();
    }
    uint64_t v14 = swift_retain();
    id v15 = sub_10034A86C(v14);
    swift_release();
    id v31 = v15;
    if (v15)
    {
      REMRemindersListDataView.TaggedInvocation.Parameters.hashtagLabelPredicate.getter();
      sub_10029D754((uint64_t)v6, (uint64_t)v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
      {
        sub_1000966BC((uint64_t)v9, &qword_100912540);
        uint64_t v16 = self;
        uint64_t v29 = 0;
        unint64_t v30 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v17._object = (void *)0x80000001007D0510;
        v17._countAndFlagsBits = 0xD000000000000051;
        String.append(_:)(v17);
        REMRemindersListDataView.TaggedInvocation.Parameters.hashtagLabelPredicate.getter();
        uint64_t v18 = v28;
        _print_unlocked<A, B>(_:_:)();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v18);
        v19._countAndFlagsBits = 125;
        v19._object = (void *)0xE100000000000000;
        String.append(_:)(v19);
        NSString v20 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v16 invalidParameterErrorWithDescription:v20];

        swift_willThrow();
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
        sub_1000963CC(0, &qword_100912548);
        id v22 = v31;
        uint64_t v23 = v26;
        sub_10029DAC4((uint64_t)v13, v31);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);

        if (!v23)
        {
          uint64_t v24 = type metadata accessor for REMManualOrdering.ManualOrderingID();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a2, 0, 1, v24);
        }
      }
    }
    else
    {
      [self noPrimaryActiveCloudKitAccountError];
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v21 = type metadata accessor for REMManualOrdering.ManualOrderingID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a2, 1, 1, v21);
  }
}

void sub_10029D708(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
  uint64_t v3 = REMObjectID.codable.getter();

  *a1 = v3;
}

uint64_t sub_10029D754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for REMRemindersListDataView.HashtagLabelPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (_OWORD *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for REMHashtagLabelSpecifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (_OWORD *)((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, a1, v4, v10);
  int v13 = (*(uint64_t (**)(_OWORD *, uint64_t))(v5 + 88))(v7, v4);
  if (v13 == enum case for REMRemindersListDataView.HashtagLabelPredicate.and(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    (*(void (**)(_OWORD *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v14 = (char *)v12 + *(int *)(sub_100094134(&qword_100911CC0) + 64);
    _OWORD *v12 = *v7;
    id v15 = (unsigned int *)&enum case for REMHashtagLabelSpecifier.Operation.and(_:);
LABEL_5:
    uint64_t v16 = *v15;
    uint64_t v17 = type metadata accessor for REMHashtagLabelSpecifier.Operation();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v14, v16, v17);
    uint64_t v18 = (unsigned int *)&enum case for REMHashtagLabelSpecifier.labels(_:);
LABEL_6:
    (*(void (**)(_OWORD *, void, uint64_t))(v9 + 104))(v12, *v18, v8);
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v9 + 32))(a2, v12, v8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
  }
  if (v13 == enum case for REMRemindersListDataView.HashtagLabelPredicate.or(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    (*(void (**)(_OWORD *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v14 = (char *)v12 + *(int *)(sub_100094134(&qword_100911CC0) + 64);
    _OWORD *v12 = *v7;
    id v15 = (unsigned int *)&enum case for REMHashtagLabelSpecifier.Operation.or(_:);
    goto LABEL_5;
  }
  if (v13 == enum case for REMRemindersListDataView.HashtagLabelPredicate.allLabels(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    uint64_t v18 = (unsigned int *)&enum case for REMHashtagLabelSpecifier.allLabels(_:);
    goto LABEL_6;
  }
  if (v13 == enum case for REMRemindersListDataView.HashtagLabelPredicate.noLabels(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    uint64_t v18 = (unsigned int *)&enum case for REMHashtagLabelSpecifier.noLabels(_:);
    goto LABEL_6;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

void sub_10029DAC4(uint64_t a1, id a2)
{
  id v4 = [a2 storeControllerManagedObjectContext];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [a2 remObjectID];
    if (v6)
    {
      uint64_t v7 = v6;
      sub_10058F158((uint64_t)&v19);
      if (v20)
      {
        sub_1000967D4(&v19, (uint64_t)v21);
        uint64_t v8 = sub_10026D1F4(a1, v21);
        id v10 = sub_100529EE0((void *)3, v8, v9, v7, v5);
        if (!v10) {
          id v10 = [self newObjectID];
        }
        uint64_t v11 = v10;
        REMObjectID.codable.getter();
        REMManualOrdering.ManualOrderingID.init(objectID:listType:listID:)();

        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
      }
      else
      {
        sub_1000966BC((uint64_t)&v19, &qword_1009186E0);
        uint64_t v17 = self;
        NSString v18 = String._bridgeToObjectiveC()();
        [v17 invalidParameterErrorWithDescription:v18];

        swift_willThrow();
      }
    }
    else
    {
      uint64_t v14 = self;
      sub_1000963CC(0, &qword_10090ABC0);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v16 = String._bridgeToObjectiveC()();
      [v14 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v16];

      swift_willThrow();
    }
  }
  else
  {
    uint64_t v12 = self;
    NSString v13 = String._bridgeToObjectiveC()();
    [v12 internalErrorWithDebugDescription:v13];

    swift_willThrow();
  }
}

uint64_t sub_10029DD50(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v62 = a3;
  uint64_t v4 = type metadata accessor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters();
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v64 = v4;
  __chkstk_darwin(v4);
  uint64_t v70 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.HashtagLabelPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMHashtagLabelDataView.Operation();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v65 = (char *)&v59 - v15;
  __chkstk_darwin(v16);
  NSString v18 = (char *)&v59 - v17;
  REMRemindersListDataView.TaggedInvocation.Parameters.hashtagLabelPredicate.getter();
  int v19 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  uint64_t v66 = v13;
  uint64_t v67 = a1;
  unint64_t v69 = v18;
  if (v19 != enum case for REMRemindersListDataView.HashtagLabelPredicate.and(_:))
  {
    uint64_t v60 = v10;
    uint64_t v61 = v11;
    if (v19 == enum case for REMRemindersListDataView.HashtagLabelPredicate.or(_:))
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
      uint64_t v10 = v60;
      uint64_t v21 = v61;
      NSString v18 = v69;
      (*(void (**)(char *, void, uint64_t))(v61 + 104))(v69, enum case for REMHashtagLabelDataView.Operation.some(_:), v60);
      uint64_t v20 = (uint64_t)v70;
      goto LABEL_33;
    }
    if (v19 == enum case for REMRemindersListDataView.HashtagLabelPredicate.allLabels(_:))
    {
      uint64_t v21 = v61;
      uint64_t v20 = (uint64_t)v70;
      if (v62 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v22 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v23 = _swiftEmptyArrayStorage;
      if (!v22)
      {
LABEL_31:
        sub_10012674C((uint64_t)v23);
        swift_bridgeObjectRelease();
        NSString v18 = v69;
        uint64_t v10 = v60;
        (*(void (**)(char *, void, uint64_t))(v21 + 104))(v69, enum case for REMHashtagLabelDataView.Operation.some(_:), v60);
        goto LABEL_33;
      }
      uint64_t v71 = _swiftEmptyArrayStorage;
      sub_1001DE058(0, v22 & ~(v22 >> 63), 0);
      if ((v22 & 0x8000000000000000) == 0)
      {
        uint64_t v24 = 0;
        uint64_t v23 = v71;
        unint64_t v25 = v62;
        unint64_t v26 = v62 & 0xC000000000000001;
        do
        {
          if (v26) {
            id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v27 = *(id *)(v25 + 8 * v24 + 32);
          }
          uint64_t v28 = v27;
          id v29 = [v27 name];
          uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v32 = v31;

          uint64_t v71 = v23;
          unint64_t v34 = v23[2];
          unint64_t v33 = v23[3];
          if (v34 >= v33 >> 1)
          {
            sub_1001DE058(v33 > 1, v34 + 1, 1);
            unint64_t v25 = v62;
            uint64_t v23 = v71;
          }
          ++v24;
          v23[2] = v34 + 1;
          unint64_t v35 = &v23[2 * v34];
          v35[4] = v30;
          v35[5] = v32;
        }
        while (v22 != v24);
        uint64_t v20 = (uint64_t)v70;
        uint64_t v21 = v61;
        goto LABEL_31;
      }
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v20 = (uint64_t)v70;
    uint64_t v21 = v61;
    if (v19 != enum case for REMRemindersListDataView.HashtagLabelPredicate.noLabels(_:))
    {
LABEL_41:
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return result;
    }
    if (v62 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v36 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v37 = _swiftEmptyArrayStorage;
    if (v36)
    {
      uint64_t v71 = _swiftEmptyArrayStorage;
      sub_1001DE058(0, v36 & ~(v36 >> 63), 0);
      if (v36 < 0)
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v38 = 0;
      uint64_t v37 = v71;
      unint64_t v39 = v62;
      unint64_t v40 = v62 & 0xC000000000000001;
      do
      {
        if (v40) {
          id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v41 = *(id *)(v39 + 8 * v38 + 32);
        }
        uint64_t v42 = v41;
        id v43 = [v41 name];
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v46 = v45;

        uint64_t v71 = v37;
        unint64_t v48 = v37[2];
        unint64_t v47 = v37[3];
        if (v48 >= v47 >> 1)
        {
          sub_1001DE058(v47 > 1, v48 + 1, 1);
          unint64_t v39 = v62;
          uint64_t v37 = v71;
        }
        ++v38;
        v37[2] = v48 + 1;
        uint64_t v49 = &v37[2 * v48];
        v49[4] = v44;
        v49[5] = v46;
      }
      while (v36 != v38);
      uint64_t v20 = (uint64_t)v70;
      uint64_t v21 = v61;
    }
    sub_10012674C((uint64_t)v37);
    swift_bridgeObjectRelease();
    NSString v18 = v69;
    uint64_t v10 = v60;
    (*(void (**)(char *, void, uint64_t))(v21 + 104))(v69, enum case for REMHashtagLabelDataView.Operation.some(_:), v60);
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v18, enum case for REMHashtagLabelDataView.Operation.all(_:), v10);
  uint64_t v20 = (uint64_t)v70;
  uint64_t v21 = v11;
LABEL_33:
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v65, v18, v10);
  REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.init(include:exclude:operation:)();
  type metadata accessor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation();
  uint64_t v65 = (char *)[objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v50 = REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.include.getter();
  uint64_t v51 = REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.exclude.getter();
  uint64_t v52 = (uint64_t)v66;
  REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.operation.getter();
  uint64_t v53 = v68;
  unint64_t v54 = sub_100572558(v50, v51, v52, v67);
  if (v53)
  {
    id v55 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v55(v52, v10);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v20, v64);
    v55((uint64_t)v69, v10);
  }
  else
  {
    uint64_t v56 = (uint64_t)v54;
    unint64_t v57 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v57(v52, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_10033305C(v56);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v63 + 8))(v70, v64);
    v57((uint64_t)v69, v10);
  }
  return v20;
}

void (**sub_10029E4EC(uint64_t a1))(char *, uint64_t)
{
  uint64_t v34 = a1;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v1 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v31 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v33 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  NSString v13 = (char *)&v31 - v12;
  uint64_t v14 = _s10PredicatesOMa(0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (void *)sub_10038F1F0();
  sub_10012607C((uint64_t)v16, _s10PredicatesOMa);
  REMRemindersListDataView.TaggedInvocation.Parameters.sortingStyle.getter();
  uint64_t v18 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v19 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v10, v18, v19);
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = (uint64_t)v7;
  uint64_t v21 = Subtasks;
  sub_100520FD4(v20, (uint64_t)v10, (uint64_t)v13);
  uint64_t v22 = (uint64_t)v13;
  uint64_t v23 = v31;
  REMRemindersListDataView.TaggedInvocation.Parameters.showCompleted.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v23, enum case for REMRemindersListDataView.FetchSubtasks.count(_:), v21);
  uint64_t v24 = v35;
  unint64_t v25 = sub_100522260(v34, (uint64_t)v17, v22, 0, 0, (uint64_t)v4, v23, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  unint64_t v26 = (void (**)(char *, uint64_t))(v1 + 8);
  id v27 = (void (**)(char *, uint64_t))(v33 + 8);
  if (v24)
  {

    (*v26)(v23, v21);
    (*v27)(v4, v36);
  }
  else
  {
    uint64_t v28 = v25;
    swift_bridgeObjectRelease();
    (*v26)(v23, v21);
    (*v27)(v4, v36);
    uint64_t v37 = v28;
    sub_100094134(&qword_100912558);
    type metadata accessor for REMObjectID_Codable();
    sub_10029F854();
    sub_10029F8B0((unint64_t *)&unk_1009110C0, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
    uint64_t v29 = Sequence.compactMapToSet<A>(_:)();
    swift_bridgeObjectRelease();
    id v27 = (void (**)(char *, uint64_t))sub_10033305C(v29);
    swift_bridgeObjectRelease();
  }
  sub_10012607C(v22, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  return v27;
}

id sub_10029E9C4(void *a1, void *a2)
{
  uint64_t v5 = REMSmartListTypeTagged;
  if (qword_100907B18 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100942620;
  swift_retain();
  uint64_t v7 = sub_10064C1FC(v5, 0, a1, v6);
  if (v2)
  {
    swift_release();
    if (qword_100907230 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_1009124E8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v24 = v5;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      sub_1000C51B8(v13, v14, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Creating tagged smart list with empty storage because tagged smart list not found due to error {error: %s}", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v5 = v24;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v15 = sub_100349CDC();
    if (v15)
    {
      uint64_t v16 = (void *)v15;
      id v17 = sub_1001B89A0(v5, v15);
      id v18 = objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable());
      id v19 = a2;
      id v22 = [v18 initWithStore:v19 storage:v17];

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      return 0;
    }
  }
  else
  {
    uint64_t v8 = v7;
    swift_release();
    id v20 = sub_1001B7C30(v8);
    [objc_allocWithZone((Class)REMSmartList) initWithStore:a2 storage:v20];
    id v21 = objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable());
    id v22 = (id)REMSmartList_Codable.init(_:)();
  }
  return v22;
}

void *sub_10029ED4C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v81 = a2;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v74 = *(void *)(Subtasks - 8);
  uint64_t v75 = Subtasks;
  __chkstk_darwin(Subtasks);
  uint64_t v71 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v72 = *(void *)(v7 - 8);
  uint64_t v73 = v7;
  __chkstk_darwin(v7);
  unint64_t v69 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.HashtagLabelPredicate();
  __chkstk_darwin(v9 - 8);
  *(void *)&long long v65 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_100912540);
  __chkstk_darwin(v11 - 8);
  *(void *)&long long v67 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for REMHashtagLabelSpecifier();
  uint64_t v68 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v64 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v17);
  id v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  id v22 = (char *)&v63 - v21;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v63 - v24;
  uint64_t v26 = _s10PredicatesOMa(0);
  __chkstk_darwin(v26);
  uint64_t v28 = (void **)((char *)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100094134(&qword_100912550);
  void *v28 = a1;
  swift_bridgeObjectRetain();
  REMRemindersListDataView.TaggedInvocation.Parameters.showCompleted.getter();
  uint64_t v29 = a3;
  swift_storeEnumTagMultiPayload();
  REMRemindersListDataView.TaggedInvocation.Parameters.sortingStyle.getter();
  uint64_t v30 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v31 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104))(v22, v30, v31);
  swift_storeEnumTagMultiPayload();
  sub_100520FD4((uint64_t)v16, (uint64_t)v22, (uint64_t)v25);
  sub_1001F82BC((uint64_t)v25, (uint64_t)v19);
  LODWORD(v3sub_10050ECB8((uint64_t)sub_100292128, 0) = swift_getEnumCaseMultiPayload();
  sub_10012607C((uint64_t)v19, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  if (v30 == 5)
  {
    if (qword_100907B10 != -1) {
      swift_once();
    }
    uint64_t v32 = swift_retain();
    id v33 = sub_10034A86C(v32);
    swift_release();
    uint64_t v34 = v68;
    uint64_t v35 = v67;
    if (v33)
    {
      id v36 = [v33 remObjectID];
      if (v36)
      {
        uint64_t v37 = v36;
        sub_10058F158((uint64_t)&v76);
        if (v77)
        {
          uint64_t v63 = v37;
          sub_1000967D4(&v76, (uint64_t)v78);
          uint64_t v38 = v34;
          uint64_t v39 = v65;
          REMRemindersListDataView.TaggedInvocation.Parameters.hashtagLabelPredicate.getter();
          uint64_t v40 = v39;
          uint64_t v41 = v38;
          sub_10029D754(v40, v35);
          uint64_t v42 = v66;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v35, 1, v66) != 1)
          {
            unint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 32);
            uint64_t v58 = (uint64_t)v64;
            v57(v64, v35, v42);
            uint64_t v59 = sub_10026D1F4(v58, v78);
            uint64_t v60 = v63;
            sub_100526968(v81, 3, v59, v61, v63, (uint64_t)v79);
            long long v67 = v79[0];
            long long v65 = v79[1];
            uint64_t v62 = v41;
            uint64_t v45 = v80;

            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v66);
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
            sub_10012607C((uint64_t)v25, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
            long long v47 = v65;
            long long v46 = v67;
            goto LABEL_14;
          }

          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
          sub_10012607C((uint64_t)v25, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
          id v43 = &qword_100912540;
          uint64_t v44 = (long long *)v35;
        }
        else
        {
          sub_10012607C((uint64_t)v25, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);

          id v43 = &qword_1009186E0;
          uint64_t v44 = &v76;
        }
        sub_1000966BC((uint64_t)v44, v43);
      }
      else
      {
        sub_10012607C((uint64_t)v25, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      }
    }
    else
    {
      sub_10012607C((uint64_t)v25, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    }
    uint64_t v45 = 0;
    long long v46 = 0uLL;
    long long v47 = 0uLL;
LABEL_14:
    *(_OWORD *)uint64_t v25 = v46;
    *((_OWORD *)v25 + 1) = v47;
    *((void *)v25 + 4) = v45;
    *((void *)v25 + 5) = 0;
    swift_storeEnumTagMultiPayload();
  }
  unint64_t v48 = (void *)sub_10038F1F0();
  uint64_t v49 = (uint64_t)v69;
  uint64_t v50 = v29;
  REMRemindersListDataView.TaggedInvocation.Parameters.showCompleted.getter();
  uint64_t v52 = v74;
  uint64_t v51 = v75;
  uint64_t v53 = v71;
  (*(void (**)(char *, void, uint64_t))(v74 + 104))(v71, enum case for REMRemindersListDataView.FetchSubtasks.count(_:), v75);
  uint64_t v54 = v70;
  id v55 = sub_100522260((uint64_t)v81, (uint64_t)v48, (uint64_t)v25, 0, 0, v49, v53, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (!v54)
  {
    uint64_t v50 = v55;
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v51);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v49, v73);
  sub_10012607C((uint64_t)v25, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  sub_10012607C((uint64_t)v28, _s10PredicatesOMa);
  return v50;
}

uint64_t sub_10029F614(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a2;
  uint64_t Style = type metadata accessor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle();
  uint64_t v3 = *(void *)(Style - 8);
  __chkstk_darwin(Style);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result();
  uint64_t v13 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation();
  id v9 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  REMRemindersListDataView.TaggedInvocation.Parameters.smartListHashtagLabelsFetchStyle.getter();
  id v10 = [self daemonUserDefaults];
  uint64_t v11 = v15;
  sub_1005701D0((uint64_t)v10, (uint64_t)&off_1008CA6F0, v14, (uint64_t)v5, (uint64_t)v8);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, Style);
  if (v11)
  {
  }
  else
  {
    uint64_t Style = REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.labels.getter();
    REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.isUpToDate.getter();

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v6);
  }
  return Style;
}

unint64_t sub_10029F854()
{
  unint64_t result = qword_100912560;
  if (!qword_100912560)
  {
    sub_100096058(&qword_100912558);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100912560);
  }
  return result;
}

uint64_t sub_10029F8B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10029F8F8()
{
  uint64_t result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v1)
  {
    _StringGuts.grow(_:)(46);
    v2._object = (void *)0x80000001007CAF70;
    v2._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v2);
    sub_100094134((uint64_t *)&unk_100914680);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10029F9CC(uint64_t a1)
{
  return sub_100156B24(a1, qword_100912568, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_10029F9F8(uint64_t a1)
{
  return sub_100156B24(a1, qword_100912580, &qword_100907840, (uint64_t)qword_100942508);
}

unint64_t sub_10029FA24(char a1)
{
  unint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64656E6769737361;
      break;
    case 2:
      unint64_t result = 0x737574617473;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10029FB00(unsigned __int8 *a1, char *a2)
{
  return sub_1002F329C(*a1, *a2);
}

Swift::Int sub_10029FB0C()
{
  return sub_1005953A4();
}

uint64_t sub_10029FB14()
{
  return sub_1002F4CC8();
}

Swift::Int sub_10029FB1C()
{
  return sub_1002F0758();
}

unint64_t sub_10029FB24@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002A0058(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10029FB54@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10029FA24(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10029FB80(void *a1@<X8>)
{
  *a1 = &off_1008B6258;
}

unint64_t sub_10029FB90@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002A0058(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10029FBB8()
{
  return sub_10029FA24(*v0);
}

uint64_t sub_10029FBC0(unsigned __int8 *a1, char *a2)
{
  return sub_1002F34AC(*a1, *a2);
}

Swift::Int sub_10029FBCC()
{
  return Hasher._finalize()();
}

uint64_t sub_10029FCB4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10029FD84()
{
  return Hasher._finalize()();
}

unint64_t sub_10029FE68@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002A00A4(*a1);
  *a2 = result;
  return result;
}

void sub_10029FE98(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE900000000000044;
  uint64_t v3 = 0x49746E756F636361;
  switch(*v1)
  {
    case 1:
      uint64_t v3 = 0x7265646E696D6572;
      unint64_t v2 = 0xEA00000000004449;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x65656E6769737361;
      *(void *)(a1 + 8) = 0xEA00000000004449;
      break;
    case 3:
      strcpy((char *)a1, "originatorID");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void sub_10029FF48(void *a1@<X8>)
{
  *a1 = &off_1008B6280;
}

unint64_t sub_10029FF58@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002A00A4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10029FF80()
{
  uint64_t result = 0x49746E756F636361;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7265646E696D6572;
      break;
    case 2:
      uint64_t result = 0x65656E6769737361;
      break;
    case 3:
      uint64_t result = 0x74616E696769726FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for REMAssignmentCDIngestor()
{
  return self;
}

_UNKNOWN **sub_1002A0040()
{
  return &off_1008C00F0;
}

_UNKNOWN **sub_1002A004C()
{
  return &off_1008C00C0;
}

unint64_t sub_1002A0058(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4868, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unint64_t sub_1002A00A4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4EE0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

id sub_1002A00F0(id a1, SEL *a2, const char *a3, const char *a4)
{
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v87 - v13;
  uint64_t v98 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v93 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v94 = (char *)&v87 - v18;
  *(void *)&double v20 = __chkstk_darwin(v19).n128_u64[0];
  uint64_t v97 = (char *)&v87 - v21;
  id v22 = [a1 *a2:v20];
  if (!v22) {
    return 0;
  }
  uint64_t v23 = v22;
  uint64_t v95 = v15;
  uint64_t v96 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v24 = [a1 managedObjectContext];
  if (!v24)
  {
    swift_bridgeObjectRelease();
    if (qword_100907238 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_100912568);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Cannot get managedObjectContext from the given REMCDAssignment", v31, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v25 = v24;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v26 = v95;
  uint64_t v27 = v98;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v14, 1, v98) == 1)
  {

    sub_1001260DC((uint64_t)v14);
    return 0;
  }
  uint64_t v89 = a4;
  uint64_t v90 = a3;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  id v92 = v25;
  id v33 = v97;
  v32(v97, v14, v27);
  uint64_t v34 = v26;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v91 = *(NSObject **)(v34 + 16);
  ((void (*)(char *, char *, uint64_t))v91)(v11, v33, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v11, 0, 1, v27);
  uint64_t v36 = sub_10032F848(KeyPath, (uint64_t)v11);
  swift_release();
  sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
  id v37 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v38 = [(id)swift_getObjCClassFromMetadata() entity];
  [v37 setEntity:v38];

  [v37 setAffectedStores:0];
  uint64_t v39 = (void *)v36;
  [v37 setPredicate:v36];
  id v40 = v92;
  uint64_t v41 = v96;
  uint64_t v42 = NSManagedObjectContext.fetch<A>(_:)();
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v97, v27);

    return a1;
  }
  uint64_t v43 = v42;
  os_log_t v44 = v91;
  id v87 = v37;
  id v88 = v39;
  uint64_t v99[3] = sub_100094134(&qword_10090FF00);
  v99[0] = v43;
  sub_100094134(&qword_100921E20);
  throwingCast<A>(_:as:failureMessage:)();
  uint64_t v96 = 0;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v99);
  unint64_t v46 = v100;
  if (v100 >> 62)
  {
    swift_bridgeObjectRetain();
    long long v47 = (void (*)(char *, char *, uint64_t))_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v47 = *(void (**)(char *, char *, uint64_t))((v100 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v48 = v97;
  uint64_t v49 = v94;
  if (!v47)
  {
    swift_bridgeObjectRelease();
    if (qword_100907238 != -1) {
      swift_once();
    }
    uint64_t v71 = type metadata accessor for Logger();
    sub_10008E2DC(v71, (uint64_t)qword_100912568);
    uint64_t v72 = v93;
    uint64_t v73 = v98;
    ((void (*)(char *, char *, uint64_t))v44)(v93, v48, v98);
    id v74 = a1;
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = swift_slowAlloc();
      uint64_t v94 = (char *)swift_slowAlloc();
      v99[0] = (uint64_t)v94;
      *(_DWORD *)uint64_t v77 = 136446466;
      uint64_t v91 = v75;
      uint64_t v78 = UUID.uuidString.getter();
      unint64_t v100 = sub_1000C51B8(v78, v79, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v95 = *(void *)(v95 + 8);
      ((void (*)(char *, uint64_t))v95)(v72, v73);
      *(_WORD *)(v77 + 12) = 2080;
      id v80 = [v74 loggingDescription];
      uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v83 = v82;

      unint64_t v100 = sub_1000C51B8(v81, v83, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v84 = v91;
      _os_log_impl((void *)&_mh_execute_header, v91, v76, v89, (uint8_t *)v77, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v95)(v97, v98);
    }
    else
    {

      id v86 = *(void (**)(char *, uint64_t))(v95 + 8);
      v86(v72, v73);
      v86(v48, v73);
    }
    return 0;
  }
  if ((v46 & 0xC000000000000001) != 0)
  {
    id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    id v37 = v50;
    long long v47 = (void (*)(char *, char *, uint64_t))v44;
    swift_bridgeObjectRelease();
    if (qword_100907238 == -1) {
      goto LABEL_23;
    }
    goto LABEL_34;
  }
  if (*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v50 = *(id *)(v46 + 32);
    goto LABEL_22;
  }
  __break(1u);
LABEL_34:
  swift_once();
LABEL_23:
  uint64_t v51 = type metadata accessor for Logger();
  sub_10008E2DC(v51, (uint64_t)qword_100912568);
  uint64_t v52 = v98;
  v47(v49, v48, v98);
  id v53 = v37;
  id v54 = a1;
  a1 = v53;
  id v55 = v54;
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  int v58 = v57;
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v59 = v52;
    uint64_t v60 = swift_slowAlloc();
    uint64_t v61 = (void *)swift_slowAlloc();
    uint64_t v94 = (char *)swift_slowAlloc();
    v99[0] = (uint64_t)v94;
    *(_DWORD *)uint64_t v60 = 136446722;
    uint64_t v91 = v56;
    LODWORD(v89) = v58;
    uint64_t v62 = UUID.uuidString.getter();
    unint64_t v100 = sub_1000C51B8(v62, v63, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v64 = *(char **)(v95 + 8);
    v95 += 8;
    uint64_t v93 = v64;
    ((void (*)(char *, uint64_t))v64)(v49, v59);
    *(_WORD *)(v60 + 12) = 2112;
    unint64_t v100 = (unint64_t)a1;
    id v65 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v61 = a1;

    *(_WORD *)(v60 + 22) = 2080;
    id v66 = [v55 loggingDescription];
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v69 = v68;

    unint64_t v100 = sub_1000C51B8(v67, v69, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    os_log_t v70 = v91;
    _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v89, v90, (uint8_t *)v60, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v93)(v97, v98);
  }
  else
  {

    uint64_t v85 = *(void (**)(char *, uint64_t))(v95 + 8);
    v85(v49, v52);
    v85(v48, v52);
  }
  return a1;
}

NSObject *sub_1002A0C4C(NSObject *a1, int a2, int a3)
{
  LODWORD(v338) = a3;
  uint64_t v5 = type metadata accessor for Date();
  Class isa = v5[-1].isa;
  os_log_t v334 = v5;
  __chkstk_darwin(v5);
  v331 = (char *)&v319 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  uint64_t v332 = (char *)&v319 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v330 = ((char *)&v319 - v10);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v335 = (uint64_t)&v319 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v319 - v15;
  uint64_t v17 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v319 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  id v22 = (char *)&v319 - v21;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v319 - v24;
  *(void *)&double v27 = __chkstk_darwin(v26).n128_u64[0];
  uint64_t v29 = (char *)&v319 - v28;
  uint64_t v342 = 0;
  v340 = a1;
  id v30 = -[NSObject remObjectIDWithError:](a1, "remObjectIDWithError:", &v342, v27);
  uint64_t v31 = v342;
  id v339 = v30;
  if (!v30)
  {
    uint64_t v41 = v342;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v31;
  }
  uint64_t v32 = v342;
  uint64_t v329 = v16;
  id v33 = v340;
  LODWORD(v337) = a2;
  if ((a2 & 1) != 0 && [v340 markedForDeletion])
  {
    id v34 = [v33 owningReminderIdentifier];
    if (v34)
    {
      uint64_t v35 = v34;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v36 = 0;
    }
    else
    {
      uint64_t v36 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v25, v36, 1, v11);
    sub_1000F44F4((uint64_t)v25, (uint64_t)v29);
  }
  else
  {
    id v37 = [v33 reminder];
    if (v37
      && (id v38 = v37, v39 = [v37 remObjectID], v38, v39))
    {
      id v40 = [v39 uuid];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v29, 0, 1, v11);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v29, 1, 1, v11);
    }
  }
  id v42 = [v340 account];
  if (!v42
    || (uint64_t v43 = v42,
        os_log_t v44 = [v42 remObjectID],
        v43,
        !v44))
  {
LABEL_17:
    long long v47 = v340;
    id v48 = [v340 account];

    if (v48)
    {
      uint64_t v31 = 0xE900000000000029;
      id v49 = v339;
      if ((v337 & 1) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      id v49 = v339;
      if (qword_100907240 != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      sub_10008E2DC(v50, (uint64_t)qword_100912580);
      uint64_t v51 = v49;
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        id v54 = (uint8_t *)swift_slowAlloc();
        id v55 = (void *)swift_slowAlloc();
        *(_DWORD *)id v54 = 138412290;
        uint64_t v342 = v51;
        uint64_t v56 = v51;
        id v49 = v339;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v55 = v49;

        _os_log_impl((void *)&_mh_execute_header, v52, v53, "REMAssignmentCDIngestor: cdAssignment.account is nil {cdAssignment.remObjectID: %@}", v54, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v52 = v51;
      }

      uint64_t v31 = 0xE700000000000000;
      long long v47 = v340;
      if ((v337 & 1) == 0) {
        goto LABEL_38;
      }
    }
    if ([v47 markedForDeletion])
    {
      swift_bridgeObjectRelease();
      if (qword_100907240 != -1) {
        swift_once();
      }
      uint64_t v73 = type metadata accessor for Logger();
      sub_10008E2DC(v73, (uint64_t)qword_100912580);
      id v74 = v49;
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = (uint8_t *)swift_slowAlloc();
        uint64_t v78 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v77 = 138412290;
        uint64_t v342 = v74;
        unint64_t v79 = v74;
        id v49 = v339;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v78 = v49;

        id v80 = "REMAssignmentCDIngestor: cdAssignment.owningReminderIdentifier of this markedForDeletion assignment is nil"
              " {cdAssignment.remObjectID: %@}";
LABEL_43:
        _os_log_impl((void *)&_mh_execute_header, v75, v76, v80, v77, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_45:

        uint64_t v31 = 0xE800000000000000;
        goto LABEL_46;
      }
LABEL_44:

      uint64_t v75 = v74;
      goto LABEL_45;
    }
LABEL_38:
    id v81 = [v47 reminder];

    if (v81)
    {
LABEL_46:
      uint64_t v85 = self;
      sub_1000963CC(0, &qword_100910230);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v87 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v85 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v87];

      swift_willThrow();
      uint64_t v88 = (uint64_t)v29;
LABEL_47:
      sub_1001260DC(v88);
      return v31;
    }
    swift_bridgeObjectRelease();
    if (qword_100907240 != -1) {
      swift_once();
    }
    uint64_t v82 = type metadata accessor for Logger();
    sub_10008E2DC(v82, (uint64_t)qword_100912580);
    id v74 = v49;
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      unint64_t v83 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 138412290;
      uint64_t v342 = v74;
      os_log_t v84 = v74;
      id v49 = v339;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v83 = v49;

      id v80 = "REMAssignmentCDIngestor: cdAssignment.reminder is nil {cdAssignment.remObjectID: %@}";
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  v328 = v29;
  sub_1001248EC((uint64_t)v29, (uint64_t)v22);
  uint64_t v45 = v11;
  unint64_t v46 = *(unsigned int (**)(void, void, void))(v12 + 48);
  if (v46(v22, 1, v45) == 1)
  {

    sub_1001260DC((uint64_t)v22);
    uint64_t v29 = v328;
    goto LABEL_17;
  }
  uint64_t v326 = v44;
  uint64_t v327 = v45;
  uint64_t v337 = v12;
  os_log_type_t v57 = *(void (**)(void, void, void))(v12 + 32);
  v57(v329, v22, v45);
  int v58 = self;
  Class v59 = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v325 = [v58 objectIDWithUUID:v59];

  uint64_t v60 = v340;
  uint64_t v61 = [v340 status];
  if (v338)
  {
    id v62 = [v60 ckAssigneeIdentifier];
    if (!v62)
    {
      if (qword_100907240 != -1) {
        swift_once();
      }
      uint64_t v109 = type metadata accessor for Logger();
      sub_10008E2DC(v109, (uint64_t)qword_100912580);
      uint64_t v31 = v339;
      int v110 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v110, v111))
      {
        uint64_t v112 = (uint8_t *)swift_slowAlloc();
        uint64_t v113 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v112 = 138412290;
        uint64_t v342 = v31;
        uint64_t v114 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v113 = v339;

        _os_log_impl((void *)&_mh_execute_header, v110, v111, "REMAssignmentCDIngestor: cdAssignment.ckAssigneeIdentifier is nil {cdAssignment.remObjectID: %@}", v112, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        int v110 = v31;
      }
      uint64_t v176 = v327;
      uint64_t v175 = (uint64_t)v328;
      uint64_t v177 = v337;

      id v178 = self;
      sub_1000963CC(0, &qword_100910230);
      uint64_t v179 = swift_getObjCClassFromMetadata();
      NSString v180 = String._bridgeToObjectiveC()();
      [v178 unexpectedNilPropertyWithClass:v179 property:v180];

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v177 + 8))(v329, v176);
      uint64_t v88 = v175;
      goto LABEL_47;
    }
    unint64_t v63 = v62;
    v323 = v61;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v64 = v327;
    if (v46(v19, 1, v327) == 1)
    {
      sub_1001260DC((uint64_t)v19);
      if (qword_100907240 != -1) {
        swift_once();
      }
      uint64_t v65 = type metadata accessor for Logger();
      sub_10008E2DC(v65, (uint64_t)qword_100912580);
      id v66 = v339;
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v67, v68))
      {
        unint64_t v69 = (uint8_t *)swift_slowAlloc();
        os_log_t v70 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v69 = 138412290;
        uint64_t v342 = v66;
        uint64_t v71 = v66;
        uint64_t v72 = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_t v70 = v339;

        id v66 = v71;
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "REMAssignmentCDIngestor: Can't create UUID from ckAssigneeIdentifier {cdAssignment.remObjectID: %@}", v69, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v67 = v66;
      }
      uint64_t v186 = v327;
      uint64_t v185 = (uint64_t)v328;
      uint64_t v187 = v337;
      uint64_t v31 = v325;

      [self unexpectedError];
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v187 + 8))(v329, v186);
      uint64_t v88 = v185;
      goto LABEL_47;
    }
    uint64_t v117 = v335;
    v57(v335, v19, v64);
    uint64_t v118 = self;
    Class v119 = UUID._bridgeToObjectiveC()().super.isa;
    id v324 = [v118 objectIDWithUUID:v119];

    (*(void (**)(uint64_t, uint64_t))(v337 + 8))(v117, v64);
    uint64_t v93 = v64;
    uint64_t v99 = v329;
    goto LABEL_67;
  }
  id v90 = [v60 assignee];
  uint64_t v91 = (objc_class *)v339;
  if (v90)
  {
    id v92 = v90;
    uint64_t v93 = v327;
  }
  else
  {
    unint64_t v115 = v336;
    id v116 = sub_1002A00F0(v60, (SEL *)&selRef_ckAssigneeIdentifier, "FETCH COREDATA assigneeIDFromCKAssigneeIdentifier() fetched sharee {uuid: %{public}s, result: %@, assignment: %s}", "FETCH COREDATA assigneeIDFromCKAssigneeIdentifier() sharee not found {uuid: %{public}s, assignment: %s}");
    uint64_t v31 = v325;
    if (v115)
    {

      (*(void (**)(char *, uint64_t))(v337 + 8))(v329, v327);
LABEL_141:
      uint64_t v88 = (uint64_t)v328;
      goto LABEL_47;
    }
    id v92 = v116;
    v336 = 0;
    uint64_t v144 = v337;
    uint64_t v145 = v326;
    uint64_t v93 = v327;
    if (!v116) {
      goto LABEL_77;
    }
  }
  id v94 = [v92 remObjectID];
  if (!v94)
  {

    uint64_t v144 = v337;
    uint64_t v145 = v326;
LABEL_77:
    if (qword_100907240 != -1) {
      swift_once();
    }
    uint64_t v146 = type metadata accessor for Logger();
    sub_10008E2DC(v146, (uint64_t)qword_100912580);
    uint64_t v147 = v91;
    os_log_t v148 = v325;
    id v149 = v147;
    Swift::Int v150 = v148;
    uint64_t v151 = Logger.logObject.getter();
    os_log_type_t v152 = static os_log_type_t.info.getter();
    int v153 = v152;
    if (os_log_type_enabled(v151, v152))
    {
      uint64_t v154 = swift_slowAlloc();
      unint64_t v155 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v154 = 138543618;
      uint64_t v342 = v149;
      uint64_t v156 = v149;
      LODWORD(v34sub_10050ECB8((uint64_t)sub_100292128, 0) = v153;
      os_log_t v157 = v156;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v155 = v339;

      *(_WORD *)(v154 + 12) = 2114;
      uint64_t v342 = v150;
      NSString v158 = v150;
      uint64_t v144 = v337;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v155[1] = v150;

      uint64_t v93 = v327;
      _os_log_impl((void *)&_mh_execute_header, v151, (os_log_type_t)v340, "REMAssignmentCDIngestor: nullifiedRelationship assignee {assignmentID: %{public}@, reminderID: %{public}@}", (uint8_t *)v154, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v145 = v326;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v151 = v149;
    }

    uint64_t v181 = self;
    NSString v182 = String._bridgeToObjectiveC()();
    uint64_t v31 = [v181 nullifiedRelationshipErrorWithRelationshipName:v182];

    swift_willThrow();
    uint64_t v183 = *(void (**)(void, void))(v144 + 8);
    uint64_t v184 = v329;
    goto LABEL_97;
  }
  uint64_t v95 = v94;
  unsigned __int8 v96 = [self isShareeActivelyParticipatingWithSharee:v92];
  uint64_t v97 = v337;
  id v324 = v95;
  if ((v96 & 1) == 0)
  {
    if (qword_100907240 != -1) {
      swift_once();
    }
    uint64_t v159 = type metadata accessor for Logger();
    sub_10008E2DC(v159, (uint64_t)qword_100912580);
    uint64_t v160 = v91;
    id v161 = v92;
    uint64_t v162 = v325;
    uint64_t v163 = v160;
    uint64_t v164 = v161;
    id v165 = v162;
    id v166 = Logger.logObject.getter();
    os_log_type_t v167 = static os_log_type_t.info.getter();
    BOOL v168 = os_log_type_enabled(v166, v167);
    v338 = v163;
    if (v168)
    {
      uint64_t v169 = swift_slowAlloc();
      v340 = v165;
      uint64_t v170 = v169;
      uint64_t v171 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v170 = 138543874;
      v336 = v164;
      uint64_t v342 = v163;
      id v172 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v171 = v91;

      *(_WORD *)(v170 + 12) = 2114;
      uint64_t v342 = v340;
      unint64_t v173 = v340;
      uint64_t v93 = v327;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v171[1] = v340;

      uint64_t v164 = v336;
      *(_WORD *)(v170 + 22) = 512;
      unsigned __int16 v174 = (unsigned __int16)[v164 status];

      LOWORD(v342) = v174;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v166, v167, "REMAssignmentCDIngestor: assignee status is disallowed {assignmentID: %{public}@, reminderID: %{public}@}, assignee.status: %hd", (uint8_t *)v170, 0x1Au);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      uint64_t v97 = v337;
      swift_slowDealloc();
      id v165 = v340;
      swift_slowDealloc();
    }
    else
    {

      id v166 = v164;
    }
    uint64_t v190 = v329;

    id v191 = self;
    NSString v192 = String._bridgeToObjectiveC()();
    uint64_t v31 = [v191 nullifiedRelationshipErrorWithRelationshipName:v192];

    swift_willThrow();
    uint64_t v183 = *(void (**)(void, void))(v97 + 8);
    uint64_t v184 = v190;
LABEL_97:
    uint64_t v193 = v93;
LABEL_140:
    v183(v184, v193);
    goto LABEL_141;
  }
  v323 = v61;
  id v98 = [v92 list];
  uint64_t v99 = v329;
  if (!v98) {
    goto LABEL_123;
  }
  unint64_t v100 = v98;
  id v101 = [v340 reminder];
  if (!v101
    || (uint64_t v102 = v101, v103 = [v101 list], v102, !v103))
  {
LABEL_121:
    uint64_t v106 = v100;
    goto LABEL_122;
  }
  id v104 = [v100 remObjectID];
  id v105 = [v103 remObjectID];
  uint64_t v106 = v105;
  if (v104)
  {
    if (v105)
    {
      uint64_t v335 = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      id v107 = v104;
      char v108 = static NSObject.== infix(_:_:)();

      uint64_t v91 = (objc_class *)v339;
      if (v108)
      {

        goto LABEL_68;
      }
LABEL_123:
      if (qword_100907240 != -1) {
        swift_once();
      }
      uint64_t v227 = type metadata accessor for Logger();
      sub_10008E2DC(v227, (uint64_t)qword_100912580);
      os_log_t v228 = v91;
      id v229 = v92;
      uint64_t v230 = v340;
      uint64_t v231 = v228;
      uint64_t v31 = v229;
      uint64_t v232 = v230;
      uint64_t v233 = Logger.logObject.getter();
      int v234 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v233, (os_log_type_t)v234))
      {

LABEL_139:
        uint64_t v256 = self;
        NSString v257 = String._bridgeToObjectiveC()();
        [v256 nullifiedRelationshipErrorWithRelationshipName:v257];

        swift_willThrow();
        uint64_t v183 = *(void (**)(void, void))(v97 + 8);
        uint64_t v184 = v329;
        uint64_t v193 = v93;
        goto LABEL_140;
      }
      os_log_t v334 = v233;
      LODWORD(v336) = v234;
      uint64_t v235 = swift_slowAlloc();
      uint64_t v236 = (void *)swift_slowAlloc();
      v338 = swift_slowAlloc();
      uint64_t v341 = (uint64_t)v231;
      uint64_t v342 = v338;
      *(_DWORD *)uint64_t v235 = 138543874;
      v340 = v231;
      uint64_t v237 = v231;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v335 = (uint64_t)v236;
      *uint64_t v236 = v91;

      *(_WORD *)(v235 + 12) = 2082;
      id v238 = [v31 list];
      if (v238)
      {
        os_log_type_t v239 = v238;
        id v240 = [v238 remObjectID];
        if (v240)
        {
          uint64_t v241 = v240;
          id v242 = [v240 description];

          uint64_t v243 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v245 = v244;

LABEL_132:
          uint64_t v341 = sub_1000C51B8(v243, v245, (uint64_t *)&v342);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v235 + 22) = 2082;
          id v246 = [v232 reminder];
          uint64_t v93 = v327;
          if (v246)
          {
            int v247 = v246;
            id v248 = [v246 list];

            if (v248)
            {
              id v249 = [v248 remObjectID];
              if (v249)
              {
                id v250 = v249;
                id v251 = [v249 description];

                uint64_t v252 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v254 = v253;

LABEL_138:
                uint64_t v341 = sub_1000C51B8(v252, v254, (uint64_t *)&v342);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                os_log_t v255 = v334;
                _os_log_impl((void *)&_mh_execute_header, v334, (os_log_type_t)v336, "REMAssignmentCDIngestor: assignee not belongs to the same list to the reminder's {assignmentID: %{public}@, candidateAssignee.list: %{public}s, assignment.reminder.list: %{public}s}", (uint8_t *)v235, 0x20u);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                uint64_t v97 = v337;
                uint64_t v231 = v340;
                goto LABEL_139;
              }
            }
          }
          unint64_t v254 = 0xE300000000000000;
          uint64_t v252 = 7104878;
          goto LABEL_138;
        }
      }
      unint64_t v245 = 0xE300000000000000;
      uint64_t v243 = 7104878;
      goto LABEL_132;
    }

    goto LABEL_121;
  }

  if (v106)
  {
LABEL_122:

    uint64_t v91 = (objc_class *)v339;
    goto LABEL_123;
  }

LABEL_67:
  uint64_t v91 = (objc_class *)v339;
LABEL_68:
  uint64_t v335 = (int)v323;
  uint64_t v120 = v340;
  id v121 = [v340 originator];
  uint64_t v31 = v326;
  if (v121)
  {
    uint64_t v122 = v121;
    uint64_t v123 = v120;
  }
  else
  {
    uint64_t v188 = v336;
    id v189 = sub_1002A00F0(v120, (SEL *)&selRef_ckOriginatorIdentifier, "FETCH COREDATA originatorIDFromCKOriginatorIdentifier() fetched sharee {uuid: %{public}s, result: %@, assignment: %s}", "FETCH COREDATA originatorIDFromCKOriginatorIdentifier() sharee not found {uuid: %{public}s, assignment: %s}");
    v336 = v188;
    if (v188)
    {

      (*(void (**)(char *, uint64_t))(v337 + 8))(v99, v93);
      sub_1001260DC((uint64_t)v328);
      return v31;
    }
    uint64_t v122 = v189;
    if (!v189) {
      goto LABEL_155;
    }
    uint64_t v123 = v340;
  }
  uint64_t v124 = [v122 remObjectID];
  if (!v124)
  {

    goto LABEL_155;
  }
  uint64_t v125 = v124;
  if (v338)
  {

    goto LABEL_73;
  }
  v338 = v124;
  LODWORD(v323) = [self isShareeActivelyParticipatingWithSharee:v122];
  if ((v323 & 1) == 0)
  {
    if (qword_100907240 != -1) {
      swift_once();
    }
    uint64_t v194 = type metadata accessor for Logger();
    sub_10008E2DC(v194, (uint64_t)qword_100912580);
    unint64_t v195 = v91;
    unint64_t v196 = v325;
    id v197 = v122;
    id v198 = v195;
    unint64_t v199 = v196;
    uint64_t v200 = v197;
    NSString v201 = Logger.logObject.getter();
    os_log_type_t v202 = static os_log_type_t.info.getter();
    int v203 = v202;
    if (os_log_type_enabled(v201, v202))
    {
      uint64_t v204 = swift_slowAlloc();
      id v205 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v204 = 138543874;
      uint64_t v321 = v200;
      LODWORD(v322) = v203;
      uint64_t v342 = v198;
      uint64_t v320 = v201;
      id v206 = v198;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v205 = v339;

      *(_WORD *)(v204 + 12) = 2114;
      uint64_t v342 = v199;
      uint64_t v207 = v199;
      int v208 = v320;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v205[1] = v199;

      *(_WORD *)(v204 + 22) = 512;
      uint64_t v209 = v321;
      unsigned __int16 v210 = (unsigned __int16)[v321 status];

      uint64_t v211 = v209;
      LOWORD(v342) = v210;
      uint64_t v123 = v340;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v208, (os_log_type_t)v322, "REMAssignmentCDIngestor: originator status is disallowed {assignmentID: %{public}@, reminderID: %{public}@, originator.status: %hd}", (uint8_t *)v204, 0x1Au);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v91 = (objc_class *)v339;
      swift_slowDealloc();
    }
    else
    {

      int v208 = v200;
    }
  }
  id v217 = [v122 list];
  if (!v217)
  {
LABEL_148:
    if (qword_100907240 != -1) {
      swift_once();
    }
    uint64_t v258 = type metadata accessor for Logger();
    sub_10008E2DC(v258, (uint64_t)qword_100912580);
    uint64_t v259 = v91;
    uint64_t v260 = v123;
    uint64_t v261 = v91;
    id v262 = v122;
    uint64_t v263 = v259;
    uint64_t v264 = v260;
    id v265 = v262;
    uint64_t v266 = Logger.logObject.getter();
    int v267 = static os_log_type_t.error.getter();
    uint64_t v330 = v266;
    if (os_log_type_enabled(v266, (os_log_type_t)v267))
    {
      LODWORD(v321) = v267;
      v323 = v264;
      uint64_t v268 = swift_slowAlloc();
      uint64_t v269 = swift_slowAlloc();
      uint64_t v322 = swift_slowAlloc();
      uint64_t v341 = (uint64_t)v263;
      uint64_t v342 = v322;
      *(_DWORD *)uint64_t v268 = 138543874;
      uint64_t v270 = v263;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v320 = v269;
      v269->Class isa = v261;

      *(_WORD *)(v268 + 12) = 2080;
      id v271 = [v265 list];
      if (v271)
      {
        uint64_t v272 = v271;
        id v273 = [v271 remObjectID];
        if (v273)
        {
          uint64_t v274 = v273;
          id v275 = [v273 description];

          uint64_t v276 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v278 = v277;

          goto LABEL_175;
        }
      }
      unint64_t v278 = 0xE300000000000000;
      uint64_t v276 = 7104878;
LABEL_175:
      uint64_t v341 = sub_1000C51B8(v276, v278, (uint64_t *)&v342);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v268 + 22) = 2080;
      id v308 = [v323 reminder];
      id v129 = v325;
      if (v308)
      {
        v309 = v308;
        id v310 = [v308 list];

        uint64_t v311 = 7104878;
        if (v310)
        {
          id v312 = [v310 remObjectID];
          if (v312)
          {
            uint64_t v313 = v312;
            id v314 = [v312 description];

            uint64_t v311 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v316 = v315;

LABEL_182:
            uint64_t v341 = sub_1000C51B8(v311, v316, (uint64_t *)&v342);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v317 = v323;

            swift_bridgeObjectRelease();
            uint64_t v318 = v330;
            _os_log_impl((void *)&_mh_execute_header, v330, (os_log_type_t)v321, "REMAssignmentCDIngestor: originator not belongs to the same list to the reminder's {cdAssignment.remObjectID: %{public}@, candidateOriginator.list: %s, assignment.reminder.list: %s}", (uint8_t *)v268, 0x20u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v91 = (objc_class *)v339;
            goto LABEL_156;
          }
        }
        unint64_t v316 = 0xE300000000000000;
        goto LABEL_182;
      }
      unint64_t v316 = 0xE300000000000000;
      uint64_t v311 = 7104878;
      goto LABEL_182;
    }

    uint64_t v91 = v261;
LABEL_155:
    id v129 = v325;
LABEL_156:
    if (qword_100907240 != -1) {
      swift_once();
    }
    uint64_t v279 = type metadata accessor for Logger();
    sub_10008E2DC(v279, (uint64_t)qword_100912580);
    uint64_t v280 = v91;
    char v281 = v129;
    uint64_t v282 = v280;
    long long v283 = v281;
    v284 = Logger.logObject.getter();
    os_log_type_t v285 = static os_log_type_t.info.getter();
    int v286 = v285;
    BOOL v287 = os_log_type_enabled(v284, v285);
    v338 = v283;
    uint64_t v330 = v282;
    if (v287)
    {
      uint64_t v288 = swift_slowAlloc();
      int v289 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v288 = 138543618;
      uint64_t v342 = v282;
      LODWORD(v323) = v286;
      uint64_t v290 = v282;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v289 = v339;

      *(_WORD *)(v288 + 12) = 2114;
      uint64_t v342 = v283;
      uint64_t v291 = v283;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v289[1] = v283;

      id v129 = v325;
      _os_log_impl((void *)&_mh_execute_header, v284, (os_log_type_t)v323, "storage(from cdAssignment:): originator of this assignment was nullified {objectID: %{public}@, reminderID: %{public}@}", (uint8_t *)v288, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      uint64_t v91 = (objc_class *)v339;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v284 = v282;
    }
    uint64_t v128 = v337;
    id v292 = v324;
    unint64_t v293 = v340;
    Class v294 = isa;

    id v295 = [v293 assignedDate];
    if (v295)
    {
      uint64_t v296 = v295;
      v297 = v331;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v298 = v332;
      uint64_t v299 = v297;
      os_log_t v300 = v334;
      (*((void (**)(char *, char *, os_log_t))v294 + 4))(v332, v299, v334);
      (*((void (**)(char *, void, uint64_t, os_log_t))v294 + 7))(v298, 0, 1, v300);
      if ((*((unsigned int (**)(char *, uint64_t, os_log_t))v294 + 6))(v298, 1, v300) == 1)
      {
        Class v126 = 0;
      }
      else
      {
        v301.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
        Class v302 = v294;
        Class v126 = v301.super.isa;
        (*((void (**)(char *, os_log_t))v302 + 1))(v298, v300);
      }
    }
    else
    {
      (*((void (**)(char *, uint64_t, uint64_t, os_log_t))v294 + 7))(v332, 1, 1, v334);
      Class v126 = 0;
    }
    uint64_t v31 = [self nullifiedOriginatorAssignmentWithObjectID:v330 accountID:v326 reminderID:v338 assigneeID:v292 status:v335 assignedDate:v126];
    Class v216 = 0;
    goto LABEL_167;
  }
  id v218 = v217;
  id v219 = [v123 reminder];
  if (!v219) {
    goto LABEL_146;
  }
  unsigned __int8 v220 = v219;
  id v221 = [v219 list];

  if (!v221) {
    goto LABEL_146;
  }
  id v222 = [v218 remObjectID];
  id v223 = [v221 remObjectID];
  os_log_t v224 = v223;
  if (!v222)
  {

    if (!v224) {
      goto LABEL_143;
    }
    goto LABEL_147;
  }
  if (!v223)
  {

LABEL_146:
    os_log_t v224 = v218;
LABEL_147:

    goto LABEL_148;
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  id v225 = v222;
  char v226 = static NSObject.== infix(_:_:)();

  uint64_t v91 = (objc_class *)v339;
  if ((v226 & 1) == 0) {
    goto LABEL_148;
  }
LABEL_143:

  uint64_t v125 = v338;
  if ((v323 & 1) == 0)
  {

    goto LABEL_155;
  }
LABEL_73:
  Class v126 = v125;
  id v127 = [v123 assignedDate];
  uint64_t v128 = v337;
  id v129 = v325;
  if (!v127)
  {
    (*((void (**)(NSObject *, uint64_t, uint64_t, os_log_t))isa + 7))(v330, 1, 1, v334);
    id v134 = objc_allocWithZone((Class)REMAssignment);
    goto LABEL_107;
  }
  Swift::Int v130 = v127;
  uint64_t v131 = v330;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Class v133 = isa;
  os_log_t v132 = v334;
  (*((void (**)(NSObject *, void, uint64_t, os_log_t))isa + 7))(v131, 0, 1, v334);
  id v134 = objc_allocWithZone((Class)REMAssignment);
  if ((*((unsigned int (**)(NSObject *, uint64_t, os_log_t))v133 + 6))(v131, 1, v132) == 1)
  {
LABEL_107:
    id v212 = v91;
    uint64_t v213 = v129;
    uint64_t v138 = v326;
    unint64_t v214 = v326;
    id v140 = v324;
    id v215 = v324;
    v142.super.Class isa = 0;
    goto LABEL_108;
  }
  unint64_t v135 = v91;
  unint64_t v136 = v129;
  uint64_t v137 = v131;
  uint64_t v138 = v326;
  uint64_t v139 = v326;
  id v140 = v324;
  id v141 = v324;
  v142.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v143 = v137;
  id v129 = v325;
  (*((void (**)(NSObject *, os_log_t))v133 + 1))(v143, v334);
LABEL_108:
  uint64_t v31 = [v134 initWithObjectID:v91 accountID:v138 reminderID:v129 assigneeID:v140 originatorID:v126 status:v335 assignedDate:v142.super.isa];

  Class v216 = v126;
  uint64_t v93 = v327;
LABEL_167:

  id v303 = [v340 assignee];
  id v304 = v303;
  if (v303) {

  }
  [v31 set_debug_cdAssigneeLinked:v304 != 0];
  id v305 = [v340 originator];
  id v306 = v305;
  v307 = v326;
  if (v305) {

  }
  [v31 set_debug_cdOriginatorLinked:v306 != 0];
  (*(void (**)(char *, uint64_t))(v128 + 8))(v329, v93);
  sub_1001260DC((uint64_t)v328);
  return v31;
}

void sub_1002A349C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v43 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v13 - 8);
  unint64_t v46 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a3 + 16);
  if (v15)
  {
    uint64_t v45 = v10;
    uint64_t v16 = (void (**)(char *, uint64_t))(v7 + 8);
    os_log_t v44 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v41 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    id v42 = (void (**)(char *, char *, uint64_t))(v11 + 32);
    v38[1] = v3;
    id v39 = (void (**)(char *, uint64_t))(v11 + 8);
    swift_bridgeObjectRetain();
    uint64_t v17 = 0;
    id v40 = v9;
    while (2)
    {
      uint64_t v21 = *(unsigned __int8 *)(a3 + v17++ + 32);
      switch(v21)
      {
        case 1:
          id isa = [a1 assignedDate];
          if (isa)
          {
            uint64_t v24 = v43;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v25 = v46;
            uint64_t v26 = v24;
            uint64_t v27 = v45;
            (*v42)(v46, v26, v45);
            (*v44)(v25, 0, 1, v27);
            if ((*v41)(v25, 1, v27) == 1)
            {
              id isa = 0;
            }
            else
            {
              uint64_t v31 = v15;
              uint64_t v32 = a3;
              id v33 = v16;
              id v34 = a1;
              uint64_t v35 = a2;
              uint64_t v36 = v25;
              id isa = Date._bridgeToObjectiveC()().super.isa;
              id v37 = v36;
              a2 = v35;
              a1 = v34;
              uint64_t v16 = v33;
              a3 = v32;
              uint64_t v15 = v31;
              uint64_t v9 = v40;
              (*v39)(v37, v27);
            }
          }
          else
          {
            (*v44)(v46, 1, 1, v45);
          }
          [a2 setAssignedDate:isa];
          goto LABEL_4;
        case 2:
          uint64_t v28 = (uint64_t)[a1 status];
          if (v28 < -32768)
          {
            __break(1u);
LABEL_22:
            __break(1u);
            JUMPOUT(0x1002A39E8);
          }
          if (v28 >= 0x8000) {
            goto LABEL_22;
          }
          [a2 setStatus:(__int16)v28];
LABEL_5:
          if (v15 != v17) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
        case 3:
          id v18 = [a1 assigneeID];
          id v19 = [v18 uuid];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          UUID.uuidString.getter();
          (*v16)(v9, v47);
          id isa = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [a2 setCkAssigneeIdentifier:isa];
          goto LABEL_4;
        case 4:
          if ([a1 isOriginatorNullified]) {
            goto LABEL_5;
          }
          id v29 = [a1 originatorID];
          id v30 = [v29 uuid];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          UUID.uuidString.getter();
          (*v16)(v9, v47);
          id isa = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [a2 setCkOriginatorIdentifier:isa];
LABEL_4:

          goto LABEL_5;
        case 5:
          goto LABEL_5;
        default:
          id v22 = [a1 objectID];
          id v23 = [v22 uuid];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          id isa = UUID._bridgeToObjectiveC()().super.isa;
          (*v16)(v9, v47);
          [a2 setIdentifier:isa];
          goto LABEL_4;
      }
      break;
    }
  }
}

void *sub_1002A3A00(id a1, char a2)
{
  switch(a2)
  {
    case 1:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_10077A530;
      uint64_t v5 = *(void **)(v2 + 24);
      goto LABEL_7;
    case 2:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_10077A530;
      id v7 = [a1 assigneeID];
      goto LABEL_9;
    case 3:
      if ([a1 isOriginatorNullified]) {
        return _swiftEmptyArrayStorage;
      }
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_10077A530;
      id v7 = [a1 originatorID];
LABEL_9:
      *(void *)(v6 + 32) = v7;
      specialized Array._endMutation()();
      return (void *)v6;
    default:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_10077A530;
      uint64_t v5 = *(void **)(v2 + 16);
LABEL_7:
      *(void *)(v4 + 32) = v5;
      uint64_t v11 = v4;
      specialized Array._endMutation()();
      uint64_t v8 = v11;
      id v9 = v5;
      return (void *)v8;
  }
}

void sub_1002A3B8C(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)&double v12 = __chkstk_darwin(v10).n128_u64[0];
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a3)
  {
    case 1:
      uint64_t v17 = *(void **)(v4 + 24);
      sub_1004769CC(1, v17, a4);
      if (!v5)
      {
        id v19 = v18;
        [a2 setReminder:v18];
        id v20 = [v17 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        [a2 setOwningReminderIdentifier:isa];

        goto LABEL_13;
      }
      break;
    case 2:
      if (objc_msgSend(a1, "_debug_cdAssigneeLinked", v12))
      {
        id v21 = [a1 assigneeID];
        sub_1004772E4(2, v21, a4);
        Class isa = v22;

        if (!v5)
        {
          [a2 setAssignee:isa];
          goto LABEL_13;
        }
      }
      break;
    case 3:
      if ((objc_msgSend(a1, "isOriginatorNullified", v12) & 1) == 0)
      {
        if (objc_msgSend(a1, "_debug_cdOriginatorLinked"))
        {
          id v23 = [a1 originatorID];
          sub_1004772E4(3, v23, a4);
          Class isa = v24;

          if (!v5)
          {
            [a2 setOriginator:isa];
            goto LABEL_13;
          }
        }
      }
      break;
    default:
      sub_1004769A4(0, *(void **)(v4 + 16), a4);
      if (!v5)
      {
        Class isa = v15;
        [a2 setAccount:v15];
LABEL_13:
      }
      break;
  }
}

unsigned char *storeEnumTagSinglePayload for REMAssignmentCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A3F10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMAssignmentCDIngestor.RelationshipKey()
{
  return &type metadata for REMAssignmentCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMAssignmentCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A4014);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMAssignmentCDIngestor.ValueKey()
{
  return &type metadata for REMAssignmentCDIngestor.ValueKey;
}

uint64_t sub_1002A404C()
{
  return sub_1000B2138(&qword_1009127A0, &qword_1009127A8);
}

unint64_t sub_1002A4078()
{
  unint64_t result = qword_1009127B0;
  if (!qword_1009127B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009127B0);
  }
  return result;
}

uint64_t sub_1002A40CC()
{
  return sub_1000B2138(&qword_1009127B8, &qword_1009127C0);
}

unint64_t sub_1002A40F8()
{
  unint64_t result = qword_1009127C8;
  if (!qword_1009127C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009127C8);
  }
  return result;
}

id sub_1002A414C(uint64_t *a1, void *a2, void *a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v61 = *(void *)(v8 - 8);
  id v62 = (id)v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  uint64_t v65 = a3;
  id v66 = a4;
  uint64_t v64 = a2;
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      unint64_t v69 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = v13 + 1;
        [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(v11 + 8 * v13 + 32)];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v13 = v14;
      }
      while (v12 != v14);
      Class v59 = v69;
      swift_bridgeObjectRelease();
      uint64_t v15 = a1[1];
      if (!v15)
      {
LABEL_14:
        int v58 = 0;
        uint64_t v20 = a1[2];
        if (v20) {
          goto LABEL_15;
        }
LABEL_20:
        id v22 = 0;
        goto LABEL_21;
      }
    }
    else
    {
      Class v59 = _swiftEmptyArrayStorage;
      uint64_t v15 = a1[1];
      if (!v15) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    Class v59 = 0;
    uint64_t v15 = a1[1];
    if (!v15) {
      goto LABEL_14;
    }
  }
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    unint64_t v69 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v17 = self;
    id v18 = (void *)(v15 + 40);
    do
    {
      id v19 = [v17 dayOfWeek:*(v18 - 1) weekNumber:*v18];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v18 += 2;
      --v16;
    }
    while (v16);
    int v58 = v69;
    swift_bridgeObjectRelease();
    uint64_t v20 = a1[2];
    if (!v20) {
      goto LABEL_20;
    }
  }
  else
  {
    int v58 = _swiftEmptyArrayStorage;
    uint64_t v20 = a1[2];
    if (!v20) {
      goto LABEL_20;
    }
  }
LABEL_15:
  uint64_t v21 = *(void *)(v20 + 16);
  id v22 = _swiftEmptyArrayStorage;
  if (v21)
  {
    unint64_t v69 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v23 = 0;
    do
    {
      uint64_t v24 = v23 + 1;
      [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(v20 + 8 * v23 + 32)];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v23 = v24;
    }
    while (v21 != v24);
    id v22 = v69;
    swift_bridgeObjectRelease();
  }
LABEL_21:
  sub_1002A490C((uint64_t)(a1 + 3), (uint64_t)v68);
  sub_1002A490C((uint64_t)v68, (uint64_t)&v69);
  if (v70)
  {
    id v63 = 0;
  }
  else
  {
    Date.init(timeIntervalSinceReferenceDate:)();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v63 = [self recurrenceEndWithEndDate:isa];

    (*(void (**)(char *, id))(v61 + 8))(v10, v62);
  }
  uint64_t v26 = (void *)a1[5];
  uint64_t v61 = a1[6];
  id v62 = v26;
  uint64_t v27 = a1[8];
  uint64_t v60 = a1[7];
  if (!v27)
  {
    id v29 = 0;
    uint64_t v32 = a1[9];
    if (v32) {
      goto LABEL_30;
    }
LABEL_46:
    id v34 = 0;
    uint64_t v37 = a1[10];
    if (v37) {
      goto LABEL_35;
    }
LABEL_47:
    sub_1002A4974((uint64_t)a1);
    uint64_t v41 = 0;
    goto LABEL_49;
  }
  uint64_t v28 = *(void *)(v27 + 16);
  id v29 = _swiftEmptyArrayStorage;
  if (v28)
  {
    uint64_t v67 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v30 = 0;
    do
    {
      uint64_t v31 = v30 + 1;
      [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(v27 + 8 * v30 + 32)];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v30 = v31;
    }
    while (v28 != v31);
    id v29 = v67;
    swift_bridgeObjectRelease();
  }
  uint64_t v32 = a1[9];
  if (!v32) {
    goto LABEL_46;
  }
LABEL_30:
  uint64_t v33 = *(void *)(v32 + 16);
  id v34 = _swiftEmptyArrayStorage;
  if (v33)
  {
    os_log_type_t v57 = v29;
    uint64_t v67 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v35 = 0;
    do
    {
      uint64_t v36 = v35 + 1;
      [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(v32 + 8 * v35 + 32)];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v35 = v36;
    }
    while (v33 != v36);
    id v34 = v67;
    swift_bridgeObjectRelease();
    id v29 = v57;
  }
  uint64_t v37 = a1[10];
  if (!v37) {
    goto LABEL_47;
  }
LABEL_35:
  uint64_t v38 = *(void *)(v37 + 16);
  if (!v38)
  {
    sub_1002A4974((uint64_t)a1);
    uint64_t v41 = _swiftEmptyArrayStorage;
LABEL_49:
    id v42 = v59;
    if (!v58) {
      goto LABEL_39;
    }
    goto LABEL_50;
  }
  uint64_t v56 = v22;
  os_log_type_t v57 = v29;
  uint64_t v67 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v39 = 0;
  do
  {
    uint64_t v40 = v39 + 1;
    [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(v37 + 8 * v39 + 32)];
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    uint64_t v39 = v40;
  }
  while (v38 != v40);
  uint64_t v41 = v67;
  sub_1002A4974((uint64_t)a1);
  swift_bridgeObjectRelease();
  id v42 = v59;
  id v22 = v56;
  id v29 = v57;
  if (!v58)
  {
LABEL_39:
    Class v43 = 0;
    if (!v42) {
      goto LABEL_40;
    }
    goto LABEL_51;
  }
LABEL_50:
  sub_1000963CC(0, &qword_1009127D8);
  Class v43 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_40:
    Class v44 = 0;
    if (!v29) {
      goto LABEL_41;
    }
    goto LABEL_52;
  }
LABEL_51:
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  Class v44 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_41:
    Class v45 = 0;
    if (!v41) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
LABEL_52:
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (!v41)
  {
LABEL_42:
    Class v46 = 0;
    if (!v22) {
      goto LABEL_43;
    }
LABEL_54:
    sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
    Class v47 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (!v34) {
      goto LABEL_44;
    }
LABEL_55:
    sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
    Class v48 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
LABEL_53:
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  Class v46 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (v22) {
    goto LABEL_54;
  }
LABEL_43:
  Class v47 = 0;
  if (v34) {
    goto LABEL_55;
  }
LABEL_44:
  Class v48 = 0;
LABEL_56:
  id v49 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v50 = v63;
  uint64_t v52 = v64;
  uint64_t v51 = v65;
  os_log_type_t v53 = v66;
  id v62 = [v49 initRecurrenceRuleWithObjectID:v64 accountID:v65 reminderID:v66 frequency:v61 interval:v60 firstDayOfTheWeek:v62 daysOfTheWeek:v43 daysOfTheMonth:v44 monthsOfTheYear:v45 weeksOfTheYear:v46 daysOfTheYear:v47 setPositions:v48 end:v63];

  return v62;
}

uint64_t sub_1002A490C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_1009127D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A4974(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002A49E4(uint64_t a1)
{
  v18[0] = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  id v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1002B0D18((unint64_t *)&qword_10090AAC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1000BFEAC((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v12 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = (void *)v18[0];
  *(void *)(v13 + 16) = v18[1];
  *(void *)(v13 + 24) = v14;
  aBlock[4] = sub_1002B0D98;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  uint64_t aBlock[3] = &unk_1008C0528;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v14;
  static DispatchQoS.unspecified.getter();
  id v22 = _swiftEmptyArrayStorage;
  sub_1002B0D18((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000BFEAC((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
  return swift_release();
}

uint64_t sub_1002A4E50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v4 = type metadata accessor for UnmigrateRequest(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (_DWORD *)((char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v38 = v7;
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_1002A7B10();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 codeServiceWithName:v10 databaseScope:2];

  type metadata accessor for TantorMigrationAPIAsyncOperationClient();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v11;
  if (qword_100907248 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_1009127E0);
  swift_retain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  id v42 = v6;
  if (v15)
  {
    v35[1] = v4;
    id v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)id v16 = 136446210;
    v35[0] = v16 + 4;
    id v17 = [*(id *)(v3 + 24) uuid:v16 + 4];
    id v18 = v36;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = UUID.uuidString.getter();
    unint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v38);
    uint64_t v43 = sub_1000C51B8(v19, v21, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Setting up unmigration service call {accountID: %{public}s}", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v6 = v42;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  *uint64_t v6 = 0;
  UnknownStorage.init()();
  swift_retain_n();
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136446210;
    id v25 = [*(id *)(v3 + 24) uuid];
    uint64_t v26 = v36;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = UUID.uuidString.getter();
    unint64_t v29 = v28;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v38);
    uint64_t v43 = sub_1000C51B8(v27, v29, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Making request to inverness for unmigration {accountID: %{public}s}", v24, 0xCu);
    swift_arrayDestroy();
    uint64_t v6 = v42;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v40;
  *(void *)(v30 + 24) = v41;
  swift_retain();
  id v31 = TantorMigrationAPIAsyncOperationClient.unmigrate(_:completion:)((uint64_t)v6);
  swift_release();
  uint64_t v32 = sub_1002A7C84();
  sub_1002B0624(v31, (uint64_t)v32, v33, (uint64_t)&unk_1008C0460);

  swift_release();
  swift_release();
  return sub_1002B0C68((uint64_t)v6, type metadata accessor for UnmigrateRequest);
}

void sub_1002A53DC(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for REMMigrationResultState();
  uint64_t v40 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(os_unfair_lock_s **)(v5 + 48);
  os_unfair_lock_lock(v13);
  *(unsigned char *)(v5 + 91) = a1;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  BOOL v15 = (void *)(v5 + 40);
  swift_beginAccess();
  id v16 = *(void **)(v5 + 40);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v16 = sub_10030A30C(0, v16[2] + 1, 1, v16);
    void *v15 = v16;
  }
  unint64_t v19 = v16[2];
  unint64_t v18 = v16[3];
  if (v19 >= v18 >> 1)
  {
    id v16 = sub_10030A30C((void *)(v18 > 1), v19 + 1, 1, v16);
    void *v15 = v16;
  }
  v16[2] = v19 + 1;
  unint64_t v20 = &v16[2 * v19];
  v20[4] = sub_1002B0BAC;
  v20[5] = v14;
  swift_endAccess();
  if ((*(unsigned char *)(v5 + 89) & 1) == 0) {
    sub_1002A83B0((uint64_t)sub_1002B0898, v5);
  }
  switch(*(unsigned char *)(v5 + 32))
  {
    case 1:
      break;
    case 2:
      id v25 = *(void **)(v5 + 56);
      int v26 = *(unsigned __int8 *)(v5 + 64);
      if (v26 == 255)
      {
        uint64_t v34 = v40;
        (*(void (**)(char *, void, uint64_t))(v40 + 104))(v12, enum case for REMMigrationResultState.complete(_:), v10);
        REMMigrationResultState.rawValue.getter();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v10);
        id v35 = objc_allocWithZone((Class)REMMigrationResult);
        NSString v36 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v37 = String._bridgeToObjectiveC()();
        id v24 = [v35 initWithState:v36 IsObserver:0 timeElapsed:0 listsMigrated:0 remindersMigrated:v37 log:0.0];

        uint64_t v38 = *(void **)(v5 + 56);
        *(void *)(v5 + 56) = v24;
        LOBYTE(v37) = *(unsigned char *)(v5 + 64);
        *(unsigned char *)(v5 + 64) = 0;
        id v39 = v24;
        sub_1002B0B5C(v38, v37);
        char v23 = 0;
      }
      else
      {
        char v23 = v26 & 1;
        id v24 = *(id *)(v5 + 56);
      }
      uint64_t v32 = v25;
      unsigned __int8 v33 = v26;
      goto LABEL_21;
    default:
      if (*(unsigned char *)(v5 + 32) != 3 || (a2 & 1) != 0)
      {
        *(unsigned char *)(v5 + 32) = 1;
        if (*(unsigned char *)(v5 + 88) == 1)
        {
          *(void *)(v5 + 72) = 0;
          *(void *)(v5 + 8sub_10050ECB8((uint64_t)sub_100292128, 0) = 0;
          *(unsigned char *)(v5 + 88) = 0;
          sub_1002A83B0((uint64_t)sub_1002B09B8, v5);
          sub_1002A959C();
        }
        sub_1002A68BC(a2 & 1);
      }
      else
      {
        unint64_t v21 = *(void **)(v5 + 56);
        int v22 = *(unsigned __int8 *)(v5 + 64);
        if (v22 == 255)
        {
          uint64_t v27 = self;
          NSString v28 = String._bridgeToObjectiveC()();
          id v24 = [v27 internalErrorWithDebugDescription:v28];

          unint64_t v29 = *(void **)(v5 + 56);
          *(void *)(v5 + 56) = v24;
          unsigned __int8 v30 = *(unsigned char *)(v5 + 64);
          char v23 = 1;
          *(unsigned char *)(v5 + 64) = 1;
          id v31 = v24;
          sub_1002B0B5C(v29, v30);
        }
        else
        {
          char v23 = v22 & 1;
          id v24 = *(id *)(v5 + 56);
        }
        uint64_t v32 = v21;
        unsigned __int8 v33 = v22;
LABEL_21:
        sub_1002B0BE0(v32, v33);
        sub_1002AA078(v24, v23);
        sub_10011C62C(v24, v23);
      }
      break;
  }
  os_unfair_lock_unlock(v13);
}

uint64_t sub_1002A5814()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009127E0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009127E0);
  if (qword_1009077C8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423A0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Int sub_1002A58DC()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1002A5924()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1002A5950()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1002A5994@<X0>(unsigned __int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1002B0884(*a1);
  *a2 = result;
  return result;
}

void sub_1002A59C0(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_1002A59CC()
{
  uint64_t result = (void *)sub_1002EE224((uint64_t)_swiftEmptyArrayStorage);
  off_1009127F8 = result;
  return result;
}

_DWORD *sub_1002A59F4()
{
  uint64_t result = (_DWORD *)swift_slowAlloc();
  *uint64_t result = 0;
  qword_100912800 = (uint64_t)result;
  return result;
}

void sub_1002A5A20(void *a1)
{
  uint64_t v2 = v1;
  if (qword_100907248 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_1009127E0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Resume all uncompleted migration processes", v7, 2u);
    swift_slowDealloc();
  }

  if (qword_100907258 != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)qword_100912800);
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [a1 newBackgroundContextWithAuthor:v8];

  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v11 = (void *)sub_10032F85C(KeyPath, 1);
  swift_release();
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = (void *)sub_10032F868(v12, 0);
  swift_release();
  sub_100094134(&qword_100912960);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  *(void *)(inited + 32) = v11;
  *(void *)(inited + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = v13;
  v24[0] = inited;
  specialized Array._endMutation()();
  id v15 = v13;
  id v16 = v11;
  id v17 = (void *)sub_1002F52FC(v24[0]);
  unint64_t v18 = (void *)swift_allocObject();
  void v18[2] = v9;
  v18[3] = v17;
  v18[4] = v2;
  v18[5] = a1;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_1002B0EB0;
  *(void *)(v19 + 24) = v18;
  v24[4] = sub_100097240;
  v24[5] = v19;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 1107296256;
  void v24[2] = sub_1003B3260;
  v24[3] = &unk_1008C05A0;
  unint64_t v20 = _Block_copy(v24);
  id v21 = v17;
  id v22 = a1;
  swift_retain();
  id v23 = v9;
  swift_release();
  [v23 performBlockAndWait:v20];
  _Block_release(v20);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v9)
  {
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)qword_100912800);
    swift_release();
  }
}

void sub_1002A5D7C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v57 = a4;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  id v66 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v62 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v48 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)v48 - v14;
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  v68[0] = inited;
  specialized Array._endMutation()();
  id v17 = (void *)sub_1003BD238(v68[0], 0, 0, a2);
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&unk_100916E80);
  unint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();

  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_3;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v20) {
    goto LABEL_25;
  }
LABEL_3:
  if (v20 >= 1)
  {
    uint64_t v21 = 0;
    unint64_t v22 = v18 & 0xC000000000000001;
    uint64_t v64 = (void (**)(uint64_t, char *, uint64_t))(v8 + 32);
    uint64_t v65 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    id v63 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v61 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v52 = (void (**)(char *, char *, uint64_t))(v8 + 16);
    uint64_t v50 = v68;
    *(void *)&long long v19 = 136446210;
    long long v49 = v19;
    v48[1] = (char *)&type metadata for Any + 8;
    uint64_t v55 = v13;
    int v58 = v15;
    unint64_t v54 = v18;
    uint64_t v53 = v20;
    unint64_t v56 = v18 & 0xC000000000000001;
    while (1)
    {
      if (v22) {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v23 = *(id *)(v18 + 8 * v21 + 32);
      }
      id v24 = v23;
      id v25 = [v23 accountIdentifier];
      if (v25)
      {
        int v26 = v25;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v27 = *v64;
        uint64_t v28 = (uint64_t)v66;
        (*v64)((uint64_t)v66, v13, v7);
        (*v65)(v28, 0, 1, v7);
        if ((*v63)(v28, 1, v7) != 1)
        {
          v27((uint64_t)v15, v66, v7);
          if (qword_100907250 != -1) {
            swift_once();
          }
          swift_beginAccess();
          if (*((void *)off_1009127F8 + 2) && (sub_100306EC4((uint64_t)v15), (v29 & 1) != 0))
          {
            swift_endAccess();
            (*v61)(v15, v7);

            unint64_t v22 = v56;
          }
          else
          {
            swift_endAccess();
            sub_1000963CC(0, &qword_10090ABC0);
            id v30 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            id v31 = objc_allocWithZone((Class)REMObjectID);
            Class isa = UUID._bridgeToObjectiveC()().super.isa;
            NSString v33 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v34 = [v31 initWithUUID:isa entityName:v33];

            type metadata accessor for RDMigrationClient();
            swift_allocObject();
            uint64_t v35 = sub_1002A8018(v34, v57);
            sub_1002A6838(v24);
            NSString v36 = *v52;
            (*v52)(v13, v15, v7);
            swift_beginAccess();
            swift_retain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v67 = off_1009127F8;
            off_1009127F8 = (_UNKNOWN *)0x8000000000000000;
            uint64_t v60 = v35;
            sub_1002C52DC(v35, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
            off_1009127F8 = v67;
            swift_bridgeObjectRelease();
            Class v59 = *v61;
            v59(v13, v7);
            swift_endAccess();
            if (qword_100907248 != -1) {
              swift_once();
            }
            uint64_t v38 = type metadata accessor for Logger();
            sub_10008E2DC(v38, (uint64_t)qword_1009127E0);
            id v15 = v58;
            v36(v62, v58, v7);
            id v39 = Logger.logObject.getter();
            os_log_type_t v40 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v39, v40))
            {
              uint64_t v41 = (uint8_t *)swift_slowAlloc();
              v68[0] = swift_slowAlloc();
              id v42 = v62;
              *(_DWORD *)uint64_t v41 = v49;
              uint64_t v51 = v41 + 4;
              uint64_t v43 = UUID.uuidString.getter();
              uint64_t v67 = (void *)sub_1000C51B8(v43, v44, v68);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              Class v45 = v59;
              v59(v42, v7);
              os_log_type_t v46 = v40;
              Class v47 = v45;
              _os_log_impl((void *)&_mh_execute_header, v39, v46, "Wake up migration client {accountID: %{public}s}", v41, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              id v15 = v58;
              swift_slowDealloc();
            }
            else
            {
              Class v47 = v59;
              v59(v62, v7);
            }

            unint64_t v18 = v54;
            sub_1002A68BC(0);
            swift_release();

            v47(v15, v7);
            uint64_t v13 = v55;
            uint64_t v20 = v53;
            unint64_t v22 = v56;
          }
          goto LABEL_7;
        }
      }
      else
      {
        (*v65)((uint64_t)v66, 1, 1, v7);
      }

      sub_1000966BC((uint64_t)v66, (uint64_t *)&unk_100909E50);
LABEL_7:
      if (v20 == ++v21) {
        goto LABEL_25;
      }
    }
  }
  __break(1u);
}

uint64_t sub_1002A663C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 accountIdentifier];
  if (v3)
  {
    uint64_t v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1002A6704(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v6, (uint64_t *)&unk_100909E50);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setAccountIdentifier:isa];
}

id sub_1002A6838(void *a1)
{
  unsigned int v3 = [a1 state];
  if (v3 <= 3) {
    *(unsigned char *)(v1 + 32) = v3;
  }
  *(void *)(v1 + 72) = (int)[a1 retryCount];
  *(void *)(v1 + 8sub_10050ECB8((uint64_t)sub_100292128, 0) = (int)[a1 failureCount];
  id result = [a1 isTerminated];
  *(unsigned char *)(v1 + 88) = (_BYTE)result;
  *(unsigned char *)(v1 + 89) = 1;
  return result;
}

void sub_1002A68BC(int a1)
{
  uint64_t v2 = v1;
  int v105 = a1;
  uint64_t v3 = type metadata accessor for MigrateRequest(0);
  __chkstk_darwin(v3);
  uint64_t v103 = (uint64_t)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MigrateRequest.User(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(v2 + 24);
  id v13 = [v12 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v104 = UUID.uuidString.getter();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (![self isInternetReachable])
  {
    if (qword_100907248 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_1009127E0);
    swift_bridgeObjectRetain();
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      long long v19 = (uint8_t *)swift_slowAlloc();
      v108[0] = swift_slowAlloc();
      *(_DWORD *)long long v19 = 136446210;
      swift_bridgeObjectRetain();
      v107[0] = sub_1000C51B8(v104, v15, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Internet is not available. Will resume migration when we have reachability {accountID: %{public}s}", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    *(unsigned char *)(v2 + 92) = 1;
    *(unsigned char *)(v2 + 93) = (*(unsigned char *)(v2 + 93) | v105) & 1;
    return;
  }
  v108[0] = 0xD000000000000010;
  v108[1] = 0x80000001007D0790;
  v108[3] = 0;
  v109[0] = 0;
  v108[2] = 0;
  *(void *)((char *)v109 + 6) = 0;
  unint64_t v20 = sub_1003B7694((uint64_t)v108, (uint64_t)sub_1002AE198, 0);
  uint64_t v101 = v3;
  swift_bridgeObjectRetain();
  id v21 = v12;
  char v22 = sub_1001BD790((uint64_t)v21, v20);
  swift_bridgeObjectRelease();
  id v102 = v21;

  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    id v34 = self;
    v107[0] = 0;
    v107[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(148);
    v35._countAndFlagsBits = 0xD000000000000073;
    v35._object = (void *)0x80000001007D07B0;
    String.append(_:)(v35);
    id v36 = v12;
    id v37 = [v36 description];
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    os_log_type_t v40 = v39;

    v41._countAndFlagsBits = v38;
    v41._object = v40;
    String.append(_:)(v41);

    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = 0xD00000000000001CLL;
    v42._object = (void *)0x80000001007D0830;
    String.append(_:)(v42);
    uint64_t v106 = v20;
    sub_100094134(&qword_100912928);
    v43._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 125;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v46 = [v34 internalErrorWithDebugDescription:v45];

    id v47 = v46;
    sub_1002AA078(v46, 1);

    return;
  }
  swift_bridgeObjectRelease();
  id v23 = sub_1002A7B10();
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v23 codeServiceWithName:v24 databaseScope:2];

  type metadata accessor for TantorMigrationAPIAsyncOperationClient();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v25;
  if (qword_100907248 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = sub_10008E2DC(v27, (uint64_t)qword_1009127E0);
  swift_bridgeObjectRetain_n();
  char v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v99 = inited;
  unint64_t v100 = v7;
  if (v31)
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v97 = v28;
    v107[0] = v33;
    *(_DWORD *)uint64_t v32 = 136446210;
    id v98 = v32 + 4;
    swift_bridgeObjectRetain();
    uint64_t v106 = sub_1000C51B8(v104, v15, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Setting up migration service call {accountID: %{public}s}", v32, 0xCu);
    swift_arrayDestroy();
    uint64_t v28 = v97;
    swift_slowDealloc();
    uint64_t v7 = v100;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(void *)uint64_t v7 = 0;
  *((_DWORD *)v7 + 2) = 0;
  UnknownStorage.init()();
  id v98 = [self sharedInstance];
  NSString v48 = [v98 unsafeUntilSystemReady_iCloudAccountCalDavServiceWithAccountID:v102];
  if (!v48)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v51 = v50;
  id v52 = objc_allocWithZone((Class)NSRegularExpression);
  id v53 = sub_1002AE71C(0xD000000000000013, 0x80000001007D0870, 0);
  if (!v53)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_30;
  }
  unint64_t v54 = v53;
  swift_bridgeObjectRetain();
  uint64_t v55 = String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  id v56 = [v54 firstMatchInString:v48 options:0 range:v55];

  if (!v56)
  {

    goto LABEL_29;
  }
  id v102 = v54;
  if ((uint64_t)[v56 numberOfRanges] < 2
    || ([v56 rangeAtIndex:1], Range<>.init(_:in:)(), (v57 & 1) != 0))
  {

LABEL_29:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  id v96 = v56;
  uint64_t v97 = v28;
  unint64_t v58 = String.subscript.getter();
  if (!((v58 ^ v59) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  uint64_t v62 = v58;
  uint64_t v63 = v59;
  uint64_t v64 = v60;
  uint64_t v65 = v61;
  uint64_t v66 = sub_1002AF13C(v58, v59, v60, v61, 10);
  if ((v66 & 0x10000000000) != 0)
  {
    uint64_t v68 = sub_1002AE8DC(v62, v63, v64, v65, 10);
    swift_bridgeObjectRelease();
    if ((v68 & 0x100000000) != 0) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v67 = v66;
    swift_bridgeObjectRelease();
    uint64_t v68 = v67;
    if ((v67 & 0x100000000) != 0)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_30:
      unint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.error.getter();
      BOOL v71 = os_log_type_enabled(v69, v70);
      uint64_t v72 = (uint64_t)v100;
      if (v71)
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v73 = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Failed to determine user CalDAV partition", v73, 2u);
        swift_slowDealloc();
      }

      id v74 = self;
      NSString v75 = String._bridgeToObjectiveC()();
      id v76 = [v74 internalErrorWithDebugDescription:v75];

      sub_1002AA078(v76, 1);
      swift_release();
      sub_1002B0C68(v72, type metadata accessor for MigrateRequest.User);
      return;
    }
  }
  uint64_t v95 = v68;
  uint64_t v94 = 0;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v79 = swift_slowAlloc();
    uint64_t v93 = swift_slowAlloc();
    v107[0] = v93;
    *(_DWORD *)uint64_t v79 = 67109634;
    LODWORD(v106) = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v79 + 8) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v106 = sub_1000C51B8(v49, v51, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v79 + 18) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v106 = sub_1000C51B8(v104, v15, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "Migration call will use {partition: %u, serviceURLPrefix: %{public}s, accountID: %{public}s}", (uint8_t *)v79, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v80 = swift_bridgeObjectRelease_n();
  }
  uint64_t v81 = (uint64_t)v100;
  *((_DWORD *)v100 + 2) = v95;
  __chkstk_darwin(v80);
  *((unsigned char *)&v92 - 16) = v105 & 1;
  *(&v92 - 1) = v81;
  sub_1002B0D18(&qword_100908870, (void (*)(uint64_t))type metadata accessor for MigrateRequest);
  static Message.with(_:)();
  swift_bridgeObjectRetain();
  uint64_t v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v82, v83))
  {
    os_log_t v84 = (uint8_t *)swift_slowAlloc();
    v107[0] = swift_slowAlloc();
    *(_DWORD *)os_log_t v84 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v106 = sub_1000C51B8(v104, v15, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Making request to inverness for migration {accountID: %{public}s}", v84, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v85 = *(void *)(v2 + 72);
  BOOL v86 = __OFADD__(v85, 1);
  uint64_t v87 = v85 + 1;
  if (v86)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 72) = v87;
    sub_1002A83B0((uint64_t)sub_1002B09B8, v2);
    swift_retain();
    uint64_t v88 = v103;
    id v89 = TantorMigrationAPIAsyncOperationClient.migrate(_:completion:)(v103);
    swift_release();
    id v90 = sub_1002A7C84();
    sub_1002B0624(v89, (uint64_t)v90, v91, (uint64_t)&unk_1008C0348);

    swift_release();
    swift_release();

    sub_1002B0C68(v88, type metadata accessor for MigrateRequest);
    sub_1002B0C68(v81, type metadata accessor for MigrateRequest.User);
  }
}

void sub_1002A7848(void *a1)
{
  id v2 = [self fetchRequest];
  id v3 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v2];
  id v13 = 0;
  uint64_t v4 = [a1 executeRequest:v3 error:&v13];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = v13;
  }
  else
  {
    id v7 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100907248 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_1009127E0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      id v13 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v11 = String.init<A>(describing:)();
      sub_1000C51B8(v11, v12, (uint64_t *)&v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v9, "Failed to delete migration state entities from the database {error: %{public}s}", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

id sub_1002A7B10()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void **)(v1 + 96);
  if (v6)
  {
    id v7 = *(id *)(v1 + 96);
  }
  else
  {
    uint64_t v8 = self;
    id v9 = [*(id *)(v1 + 24) uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [v8 newCloudContainerForAccountID:v10];

    unint64_t v12 = *(void **)(v1 + 96);
    *(void *)(v1 + 96) = v11;
    id v7 = v11;

    id v6 = 0;
  }
  id v13 = v6;
  return v7;
}

void (*sub_1002A7C84())(void *a1)
{
  uint64_t v1 = *(void *)(v0 + 104);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void *))(v0 + 104);
  }
  else
  {
    uint64_t v3 = swift_allocObject();
    swift_weakInit();
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v2 = sub_1002B0A00;
    *(void *)(v0 + 104) = sub_1002B0A00;
    *(void *)(v0 + 112) = v3;
    swift_retain();
    sub_100096314(v4);
  }
  sub_1000E4F30(v1);
  return v2;
}

void sub_1002A7D34(void *a1)
{
  if (a1)
  {
    id v1 = [a1 requestUUID];
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v4 = v3;

    if (qword_100907248 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_1009127E0);
    swift_retain_n();
    swift_bridgeObjectRetain();
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      id v9 = (void *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446466;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v2, v4, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2114;
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        id v11 = *(id *)(Strong + 24);
        swift_release();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v11 = 0;
      }
      *id v9 = v11;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Completed MigrationClient request {requestUUID: %{public}s, accountID: %{public}@}", (uint8_t *)v8, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_1002A8018(void *a1, void *a2)
{
  uint64_t v5 = (_DWORD *)swift_slowAlloc();
  *(void *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 64) = -1;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 96) = 0;
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = a1;
  *(unsigned char *)(v2 + 32) = 0;
  *(void *)(v2 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 48) = v5;
  *uint64_t v5 = 0;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 8sub_10050ECB8((uint64_t)sub_100292128, 0) = 0;
  *(void *)(v2 + 86) = 0;
  id v6 = self;
  id v7 = a2;
  id v8 = a1;
  id v9 = [v6 defaultCenter];
  NSString v10 = kReachabilityChangedNotification;
  id v11 = self;
  swift_retain();
  id v12 = [v11 sharedReachabilityForInternetConnection];
  [v9 addObserver:v2 selector:"reachabilityChangedWithNotification:" name:v10 object:v12];

  swift_release();
  return v2;
}

uint64_t sub_1002A81A0()
{
  swift_slowDealloc();

  swift_bridgeObjectRelease();
  sub_1002B0B5C(*(void **)(v0 + 56), *(unsigned char *)(v0 + 64));

  sub_100096314(*(void *)(v0 + 104));
  return v0;
}

uint64_t sub_1002A81FC()
{
  sub_1002A81A0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDMigrationClient()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for RDMigrationClient.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *id result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A8320);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDMigrationClient.State()
{
  return &type metadata for RDMigrationClient.State;
}

unint64_t sub_1002A835C()
{
  unint64_t result = qword_100912920;
  if (!qword_100912920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100912920);
  }
  return result;
}

uint64_t sub_1002A83B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = *(void **)(v2 + 16);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 newBackgroundContextWithAuthor:v9];

  uint64_t KeyPath = swift_getKeyPath();
  id v12 = [*(id *)(v2 + 24) uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 0, 1, v13);
  unint64_t v14 = (void *)sub_10032F814(KeyPath, (uint64_t)v7);
  swift_release();
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v10;
  v15[3] = v14;
  v15[4] = a1;
  v15[5] = a2;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1002B08E8;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_10008F6F4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  uint64_t aBlock[3] = &unk_1008C0320;
  id v17 = _Block_copy(aBlock);
  id v18 = v14;
  swift_retain();
  id v19 = v10;
  swift_release();
  [v19 performBlockAndWait:v17];

  _Block_release(v17);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v19) {
    __break(1u);
  }
  return result;
}

void sub_1002A8640(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  sub_1000963CC(0, (unint64_t *)&unk_100916E80);
  id v6 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v7 = [(id)swift_getObjCClassFromMetadata() entity];
  [v6 setEntity:v7];

  [v6 setAffectedStores:0];
  [v6 setPredicate:a2];
  unint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    id v10 = 0;
    goto LABEL_7;
  }
  if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v9 = *(id *)(v8 + 32);
  }
  id v12 = v9;
  swift_bridgeObjectRelease();
  id v10 = v12;
LABEL_7:
  id v13 = v10;
  a3(a1);
}

void sub_1002A8808(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v2 = a2;
    sub_1002A6838(v2);
  }
}

void sub_1002A8858(void *a1, void *a2, uint64_t a3)
{
  uint64_t v99 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v99);
  id v7 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v98 = (uint64_t)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = (char *)&v89 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v89 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v102 = v19;
  uint64_t v103 = v17;
  unint64_t v100 = a1;
  if (a2)
  {
    unint64_t v20 = a2;
  }
  else
  {
    uint64_t v95 = v15;
    id v96 = 0;
    id v21 = [objc_allocWithZone((Class)REMCDMigrationState) initWithContext:a1];
    char v22 = *(void **)(a3 + 24);
    id v101 = *(id *)(a3 + 16);
    uint64_t v97 = a3;
    id v23 = a1;
    id v24 = v21;
    id v94 = v22;
    id v25 = [v22 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.uuidString.getter();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v17 + 8);
    int v26 = (void *)(v17 + 8);
    uint64_t v27 = v28;
    v28(v19, v16);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v30 = [v101 storeForAccountIdentifier:v29];

    if (v30)
    {
      [v23 assignObject:v24 toPersistentStore:v30];

      unint64_t v20 = v24;
      a2 = v96;
      a3 = v97;
      uint64_t v15 = v95;
    }
    else
    {
      uint64_t v93 = v27;
      id v101 = v26;

      unint64_t v20 = v24;
      if (qword_100907248 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_10008E2DC(v31, (uint64_t)qword_1009127E0);
      a3 = v97;
      swift_retain_n();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      int v34 = v33;
      BOOL v35 = os_log_type_enabled(v32, v33);
      id v36 = v102;
      uint64_t v15 = v95;
      if (v35)
      {
        os_log_t v92 = v32;
        uint64_t v37 = swift_slowAlloc();
        int v90 = v34;
        uint64_t v38 = (uint8_t *)v37;
        uint64_t v91 = (void *)swift_slowAlloc();
        id v105 = v91;
        id v89 = v38;
        *(_DWORD *)uint64_t v38 = 136446210;
        id v39 = [v94 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v40 = UUID.uuidString.getter();
        Swift::String v41 = v36;
        Swift::String v42 = v20;
        unint64_t v44 = v43;
        v93(v41, v16);
        uint64_t v104 = sub_1000C51B8(v40, v44, (uint64_t *)&v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        unint64_t v20 = v42;
        swift_bridgeObjectRelease();
        os_log_t v45 = v92;
        _os_log_impl((void *)&_mh_execute_header, v92, (os_log_type_t)v90, "Can't find CoreData store for saving CloudKit account migration state {accountID: %{public}s}", v89, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      a2 = v96;
    }
  }
  id v46 = a2;
  id v47 = [v20 accountIdentifier];
  id v101 = v20;
  if (v47)
  {
    NSString v48 = v47;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v49 = v103;
    unint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56);
    v50(v15, 0, 1, v16);
  }
  else
  {
    uint64_t v49 = v103;
    unint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56);
    v50(v15, 1, 1, v16);
  }
  unint64_t v51 = *(void **)(a3 + 24);
  id v52 = [v51 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v50(v13, 0, 1, v16);
  uint64_t v53 = (uint64_t)&v7[*(int *)(v99 + 48)];
  sub_1000BF710((uint64_t)v15, (uint64_t)v7, (uint64_t *)&unk_100909E50);
  sub_1000BF710((uint64_t)v13, v53, (uint64_t *)&unk_100909E50);
  unint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v54((uint64_t)v7, 1, v16) == 1)
  {
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
    int v55 = v54(v53, 1, v16);
    id v56 = v101;
    if (v55 == 1)
    {
      sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909E50);
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  uint64_t v57 = v98;
  sub_1000BF710((uint64_t)v7, v98, (uint64_t *)&unk_100909E50);
  if (v54(v53, 1, v16) == 1)
  {
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v57, v16);
    id v56 = v101;
LABEL_19:
    sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_10090B4C0);
LABEL_20:
    id v58 = [v51 uuid];
    unint64_t v59 = v102;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v103 + 8))(v59, v16);
    [v56 setAccountIdentifier:isa];

    goto LABEL_21;
  }
  uint64_t v65 = v103;
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v103 + 32);
  uint64_t v97 = a3;
  uint64_t v67 = v57;
  uint64_t v68 = v102;
  v66(v102, v53, v16);
  sub_1002B0D18((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  os_log_type_t v70 = *(void (**)(char *, uint64_t))(v65 + 8);
  v70(v68, v16);
  sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
  sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
  uint64_t v71 = v67;
  a3 = v97;
  v70((char *)v71, v16);
  sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909E50);
  id v56 = v101;
  if ((v69 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_21:
  if ([v56 state] != *(unsigned __int8 *)(a3 + 32)) {
    [v56 setState:];
  }
  uint64_t v61 = *(void *)(a3 + 72);
  uint64_t v62 = v100;
  if (v61 < -32768)
  {
    LOWORD(v61) = 0x8000;
  }
  else
  {
    if (v61 < 0x8000) {
      goto LABEL_25;
    }
    LOWORD(v61) = 0x7FFF;
  }
  uint64_t v79 = v100;
  if (qword_100907248 != -1) {
    swift_once();
  }
  uint64_t v80 = type metadata accessor for Logger();
  sub_10008E2DC(v80, (uint64_t)qword_1009127E0);
  swift_retain();
  uint64_t v81 = Logger.logObject.getter();
  os_log_type_t v82 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v81, v82))
  {
    os_log_type_t v83 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v83 = 134217984;
    id v105 = *(id *)(a3 + 72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "RDMigrationClient.saveState() clamping invocationCount: %ld", v83, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v62 = v79;
LABEL_25:
  if ((unsigned __int16)[v56 retryCount] != (unsigned __int16)v61) {
    [v56 setRetryCount:(__int16)v61];
  }
  uint64_t v63 = *(void *)(a3 + 80);
  if (v63 < -32768)
  {
    LOWORD(v63) = 0x8000;
  }
  else
  {
    if (v63 < 0x8000) {
      goto LABEL_29;
    }
    LOWORD(v63) = 0x7FFF;
  }
  os_log_t v84 = v62;
  if (qword_100907248 != -1) {
    swift_once();
  }
  uint64_t v85 = type metadata accessor for Logger();
  sub_10008E2DC(v85, (uint64_t)qword_1009127E0);
  swift_retain();
  BOOL v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v86, v87))
  {
    uint64_t v88 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v88 = 134217984;
    id v105 = *(id *)(a3 + 80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "RDMigrationClient.saveState() clamping failureCount: %ld", v88, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v62 = v84;
LABEL_29:
  if ((unsigned __int16)[v56 failureCount] != (unsigned __int16)v63) {
    [v56 setFailureCount:(__int16)v63];
  }
  if ([v56 isTerminated] != *(unsigned __int8 *)(a3 + 88)) {
    [v56 setIsTerminated:];
  }
  if (![v62 hasChanges]) {
    goto LABEL_36;
  }
  id v105 = 0;
  if ([v62 save:&v105])
  {
    id v64 = v105;
LABEL_36:

    return;
  }
  id v72 = v105;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_100907248 != -1) {
    swift_once();
  }
  uint64_t v73 = type metadata accessor for Logger();
  sub_10008E2DC(v73, (uint64_t)qword_1009127E0);
  swift_errorRetain();
  swift_errorRetain();
  id v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v74, v75))
  {
    id v76 = (uint8_t *)swift_slowAlloc();
    id v105 = (id)swift_slowAlloc();
    *(_DWORD *)id v76 = 136446210;
    swift_getErrorValue();
    uint64_t v77 = Error.localizedDescription.getter();
    uint64_t v104 = sub_1000C51B8(v77, v78, (uint64_t *)&v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed saving migration state {error: %{public}s}", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

void sub_1002A959C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  __chkstk_darwin(v2);
  unsigned int v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 88) == 1)
  {
    type metadata accessor for Analytics();
    static Analytics.postEvent(_:payload:duration:)();
    uint64_t v5 = 0xD000000000000039;
    uint64_t v6 = "re-create CalDAV account object and hide CloudKit account";
  }
  else
  {
    uint64_t v5 = 0xD00000000000003BLL;
    uint64_t v6 = "re-enable CloudKit account object and delete CalDAV account";
  }
  unint64_t v7 = (unint64_t)(v6 - 32) | 0x8000000000000000;
  if (qword_100907248 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = sub_10008E2DC(v8, (uint64_t)qword_1009127E0);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v34 = v5;
  unint64_t v35 = v7;
  if (v12)
  {
    uint64_t v13 = swift_slowAlloc();
    v33[1] = v9;
    uint64_t v14 = v13;
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_1000C51B8(v5, v7, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2082;
    id v15 = [*(id *)(v1 + 24) uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v16 = UUID.uuidString.getter();
    unint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v37);
    uint64_t v38 = sub_1000C51B8(v16, v18, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDAccountUtils will %{public}s {accountID: %{public}s}", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  if ([*(id *)(v1 + 16) accountUtils])
  {
    id v19 = *(void **)(v1 + 24);
    id v20 = [v19 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = UUID.uuidString.getter();
    unint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v37);
    char v24 = *(unsigned char *)(v1 + 88) ^ 1;
    if (qword_1009070D8 != -1) {
      swift_once();
    }
    id v25 = (void *)qword_100942078;
    int v26 = (void *)swift_allocObject();
    unint64_t v27 = v35;
    v26[2] = v34;
    v26[3] = v27;
    v26[4] = v19;
    id v28 = v19;
    sub_1005F3A88(v21, v23, v24 & 1, 0, 1, v25, (uint64_t)sub_1002B0A48, (uint64_t)v26);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    unint64_t v29 = v35;
    swift_bridgeObjectRetain();
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_1000C51B8(v34, v29, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "No RDAccountUtils is found. Unable to %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_1002A9B34(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (qword_100907248 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_1009127E0);
    id v13 = a4;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    id v32 = v13;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v34 = v31;
      *(_DWORD *)uint64_t v16 = 136446722;
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_1000C51B8(a2, a3, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2082;
      uint64_t v33 = a1;
      swift_errorRetain();
      sub_100094134(&qword_10090C320);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v33 = sub_1000C51B8(v17, v18, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v16 + 22) = 2082;
      id v19 = [v32 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v20 = UUID.uuidString.getter();
      unint64_t v22 = v21;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v33 = sub_1000C51B8(v20, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to %{public}s {error: %{public}s, accountID: %{public}s}", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_10:
      swift_slowDealloc();

      return;
    }
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100907248 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10008E2DC(v23, (uint64_t)qword_1009127E0);
    id v32 = a4;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)id v25 = 136446210;
      id v26 = [v32 uuid:v25 + 4];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v27 = UUID.uuidString.getter();
      unint64_t v29 = v28;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v33 = sub_1000C51B8(v27, v29, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v24, "Reloaded accounts succesfully {accountID: %{public}s}", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_10;
    }
  }

  id v30 = v32;
}

uint64_t sub_1002AA078(void *a1, char a2)
{
  uint64_t v3 = v2;
  int v6 = a2 & 1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v11 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = a1;
  unsigned __int8 v12 = *(unsigned char *)(v3 + 64);
  *(unsigned char *)(v3 + 64) = v6;
  sub_1002B0B5C(v11, v12);
  if (a2)
  {
    swift_errorRetain();
    swift_errorRetain();
    if (qword_100907248 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_1009127E0);
    sub_100149368(a1, 1);
    swift_retain();
    sub_100149368(a1, 1);
    swift_retain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      v52[0] = v49;
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v48 = v16 + 4;
      id v17 = [*(id *)(v3 + 24) uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v18 = UUID.uuidString.getter();
      uint64_t v19 = v7;
      unint64_t v21 = v20;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v19);
      uint64_t v50 = sub_1000C51B8(v18, v21, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v22 = Error.rem_errorDescription.getter();
      uint64_t v50 = sub_1000C51B8(v22, v23, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011C62C(a1, 1);
      sub_10011C62C(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Completing migration {accountID: %{public}s, error: %{public}s}", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10011C62C(a1, 1);
    }
    else
    {
      sub_10011C62C(a1, 1);
      swift_release_n();
      sub_10011C62C(a1, 1);
      sub_10011C62C(a1, 1);
    }
    char v37 = 3;
  }
  else
  {
    uint64_t v24 = qword_100907248;
    id v25 = a1;
    if (v24 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_1009127E0);
    sub_100149368(a1, 0);
    swift_retain();
    sub_100149368(a1, 0);
    swift_retain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    int v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = swift_slowAlloc();
      LODWORD(v48) = v29;
      uint64_t v31 = v30;
      id v47 = (void *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      v52[0] = v49;
      *(_DWORD *)uint64_t v31 = 136446466;
      uint64_t v45 = v31 + 4;
      id v32 = [*(id *)(v3 + 24) uuid:v31 + 4];
      os_log_t v46 = v27;
      id v33 = v32;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v34 = UUID.uuidString.getter();
      unint64_t v36 = v35;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      uint64_t v50 = sub_1000C51B8(v34, v36, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      char v37 = 2;
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2114;
      uint64_t v50 = (uint64_t)v25;
      id v38 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v47 = a1;
      sub_10011C62C(a1, 0);
      sub_10011C62C(a1, 0);
      os_log_t v39 = v46;
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v48, "Completing migration {accountID: %{public}s, result: %{public}@}", (uint8_t *)v31, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10011C62C(a1, 0);
    }
    else
    {
      sub_10011C62C(a1, 0);
      char v37 = 2;
      swift_release_n();
      sub_10011C62C(a1, 0);
      sub_10011C62C(a1, 0);
    }
  }
  *(unsigned char *)(v3 + 32) = v37;
  sub_1002A83B0((uint64_t)sub_1002B09B8, v3);
  swift_beginAccess();
  uint64_t v40 = *(void *)(v3 + 40);
  *(void *)(v3 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = _swiftEmptyArrayStorage;
  uint64_t v41 = *(void *)(v40 + 16);
  if (v41)
  {
    uint64_t v42 = v40 + 40;
    do
    {
      unint64_t v43 = *(void (**)(uint64_t *))(v42 - 8);
      uint64_t v50 = (uint64_t)a1;
      BOOL v51 = v6 != 0;
      swift_retain();
      v43(&v50);
      swift_release();
      v42 += 16;
      --v41;
    }
    while (v41);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002AA72C(uint64_t a1, void (*a2)(uint64_t, uint64_t, double))
{
  uint64_t v4 = type metadata accessor for UnmigrateResponse.Error(0);
  __chkstk_darwin(v4 - 8);
  int v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for UnmigrateResponse.Details(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (double *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_100094134(&qword_1009086F8);
  __chkstk_darwin(v10 - 8);
  unsigned __int8 v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UnmigrateResponse(0);
  __chkstk_darwin(v13 - 8);
  os_log_type_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100094134(&qword_100912948);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000BF710(a1, (uint64_t)v18, &qword_100912948);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    swift_errorRetain();
    a2(0, v19, 0.0);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_1002B0C00((uint64_t)v18, (uint64_t)v15, type metadata accessor for UnmigrateResponse);
    sub_1000BF710((uint64_t)v15, (uint64_t)v12, &qword_1009086F8);
    uint64_t v21 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v12, 1, v21) == 1)
    {
      uint64_t v22 = self;
      NSString v23 = String._bridgeToObjectiveC()();
      id v24 = [v22 internalErrorWithDebugDescription:v23];

      a2(0, (uint64_t)v24, 0.0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_1002B0C00((uint64_t)v12, (uint64_t)v6, type metadata accessor for UnmigrateResponse.Error);
        id v25 = self;
        unint64_t v33 = 0;
        unint64_t v34 = 0xE000000000000000;
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease();
        unint64_t v33 = 0xD000000000000024;
        unint64_t v34 = 0x80000001007D0AE0;
        uint64_t v26 = *v6;
        uint64_t v27 = (void *)v6[1];
        swift_bridgeObjectRetain();
        v28._countAndFlagsBits = v26;
        v28._object = v27;
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        NSString v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v30 = [v25 internalErrorWithDebugDescription:v29];

        a2(0, (uint64_t)v30, 0.0);
        uint64_t v31 = type metadata accessor for UnmigrateResponse.Error;
        uint64_t v32 = (uint64_t)v6;
      }
      else
      {
        sub_1002B0C00((uint64_t)v12, (uint64_t)v9, type metadata accessor for UnmigrateResponse.Details);
        a2(1, 0, *v9);
        uint64_t v31 = type metadata accessor for UnmigrateResponse.Details;
        uint64_t v32 = (uint64_t)v9;
      }
      sub_1002B0C68(v32, v31);
    }
    return sub_1002B0C68((uint64_t)v15, type metadata accessor for UnmigrateResponse);
  }
}

void sub_1002AABB4(void *a1, char a2)
{
  char v5 = a2 & 1;
  int v6 = *(os_unfair_lock_s **)(v2 + 48);
  os_unfair_lock_lock(v6);
  uint64_t v7 = Int._bridgeToObjectiveC()().super.super.isa;
  uint64_t v8 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_1002AA078(a1, v5);
  os_unfair_lock_unlock(v6);
  sub_100094134((uint64_t *)&unk_10090A420);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  strcpy((char *)(inited + 32), "failureCount");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 48) = v8;
  *(void *)(inited + 56) = 0x697461636F766E69;
  *(void *)(inited + 64) = 0xEF746E756F436E6FLL;
  *(void *)(inited + 72) = v7;
  sub_1002ED104(inited);
  if (a2)
  {
    swift_errorRetain();
    goto LABEL_5;
  }
  id v10 = a1;
  [v10 remindersMigrated];
  Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C5B84((uint64_t)isa, 0xD000000000000011, 0x80000001007D0910, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  [v10 listsMigrated];
  Class v13 = UInt._bridgeToObjectiveC()().super.super.isa;
  char v14 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C5B84((uint64_t)v13, 0x67694D737473696CLL, 0xED00006465746172, v14);
  swift_bridgeObjectRelease();
  [v10 isObserver];
  Class v15 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C5B84((uint64_t)v15, 0x76726573624F7369, 0xEA00000000007265, v16);
  swift_bridgeObjectRelease();
  id v17 = [v10 state];
  if (v17)
  {
    uint64_t v18 = (uint64_t)v17;
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C5B84(v18, 0x6574617473, 0xE500000000000000, v19);
    swift_bridgeObjectRelease();
    [v10 timeElapsed];
    sub_10011C62C(a1, 0);
LABEL_5:
    type metadata accessor for Analytics();
    static Analytics.postEvent(_:payload:duration:error:performAutoBugCaptureOnError:)();
    swift_errorRelease();
    swift_bridgeObjectRelease();

    return;
  }
  __break(1u);
}

BOOL sub_1002AAEC8()
{
  sub_1000963CC(0, (unint64_t *)&qword_100908178);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v2 = [ObjCClassFromMetadata daemonUserDefaults];
  id v3 = [v2 cloudKitMigrationMaxNumInvocations];

  if (v3)
  {
    uint64_t v4 = (uint64_t)[v3 integerValue];
  }
  else
  {
    uint64_t v4 = 50;
  }
  id v5 = [ObjCClassFromMetadata daemonUserDefaults];
  id v6 = [v5 cloudKitMigrationMaxNumFailures];

  if (v6)
  {
    uint64_t v7 = (uint64_t)[v6 integerValue];
  }
  else
  {
    uint64_t v7 = 10;
  }
  return *(void *)(v0 + 72) >= v4 || *(void *)(v0 + 80) >= v7;
}

void sub_1002AAFE0(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  __chkstk_darwin(v8);
  id v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  Class v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v25 - v17;
  if (a2)
  {
    id v24 = *(os_unfair_lock_s **)(v2 + 48);
    os_unfair_lock_lock(v24);
    sub_1002A68BC(0);
    os_unfair_lock_unlock(v24);
  }
  else
  {
    uint64_t v19 = v16;
    unint64_t v20 = *(void **)(v2 + 24);
    if (qword_1009070C0 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_100942060;
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v12 + 8);
    v26(v15, v19);
    uint64_t v21 = (void *)swift_allocObject();
    v21[2] = v2;
    v21[3] = v20;
    v21[4] = a1;
    aBlock[4] = sub_1002B0A94;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    uint64_t aBlock[3] = &unk_1008C03E8;
    uint64_t v22 = _Block_copy(aBlock);
    swift_retain();
    id v23 = v20;
    static DispatchQoS.unspecified.getter();
    id v30 = _swiftEmptyArrayStorage;
    sub_1002B0D18((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000BFEAC((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
    v26(v18, v19);
    swift_release();
  }
}

void sub_1002AB410(uint64_t a1, void *a2, double a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + 90) == 1)
  {
    if (qword_100907248 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_1009127E0);
    id v32 = a2;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      uint64_t v31 = v13 + 4;
      id v14 = [v32 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v15 = UUID.uuidString.getter();
      unint64_t v17 = v16;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v33 = sub_1000C51B8(v15, v17, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cancel delayed retry becaue migration client was dismissed {accountID: %{public}s}", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v28 = v32;
    }
  }
  else
  {
    if (qword_100907248 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_1009127E0);
    id v19 = a2;
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v31 = (uint8_t *)v6;
      uint64_t v23 = v22;
      id v32 = (id)swift_slowAlloc();
      uint64_t v34 = (uint64_t)v32;
      *(_DWORD *)uint64_t v23 = 134349314;
      uint64_t v33 = *(void *)&a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2082;
      v30[1] = v23 + 14;
      id v24 = [v19 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v25 = UUID.uuidString.getter();
      unint64_t v27 = v26;
      (*(void (**)(char *, uint8_t *))(v7 + 8))(v9, v31);
      uint64_t v33 = sub_1000C51B8(v25, v27, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Retry migration after delay {delay: %{public}f, accountID: %{public}s}", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v29 = *(os_unfair_lock_s **)(a1 + 48);
    os_unfair_lock_lock(v29);
    sub_1002A68BC(0);
    os_unfair_lock_unlock(v29);
  }
}

void sub_1002AB8D0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  LODWORD(v106) = a4;
  int v100 = a3;
  uint64_t v107 = a2;
  uint64_t v6 = sub_100094134(&qword_1009086F0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v99[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t Step = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v10 = *(void *)(Step - 8);
  uint64_t v11 = __chkstk_darwin(Step);
  id v105 = &v99[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v103 = &v99[-v14];
  uint64_t v15 = __chkstk_darwin(v13);
  id v101 = &v99[-v16];
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v104 = &v99[-v18];
  uint64_t v19 = __chkstk_darwin(v17);
  id v102 = &v99[-v20];
  __chkstk_darwin(v19);
  uint64_t v22 = &v99[-v21];
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v26 = &v99[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v109 = v4;
  id v27 = [*(id *)(v4 + 24) uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v108 = UUID.uuidString.getter();
  uint64_t v29 = v28;
  (*(void (**)(unsigned char *, uint64_t))(v24 + 8))(v26, v23);
  sub_1000BF710(a1, (uint64_t)v8, &qword_1009086F0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Step) != 1)
  {
    sub_1002B0C00((uint64_t)v8, (uint64_t)v22, type metadata accessor for MigrateResponse.NextStep);
    uint64_t v35 = (uint64_t)v22;
    if (v22[1] == 1)
    {
      uint64_t v37 = v108;
      if (qword_100907248 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_10008E2DC(v38, (uint64_t)qword_1009127E0);
      uint64_t v39 = (uint64_t)v22;
      uint64_t v40 = v102;
      sub_1002B0AA0(v39, (uint64_t)v102, type metadata accessor for MigrateResponse.NextStep);
      uint64_t v41 = v104;
      sub_1002B0AA0(v35, (uint64_t)v104, type metadata accessor for MigrateResponse.NextStep);
      swift_bridgeObjectRetain_n();
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v107 = swift_slowAlloc();
        uint64_t v110 = v107;
        *(_DWORD *)uint64_t v44 = 136446722;
        swift_bridgeObjectRetain();
        uint64_t v112 = sub_1000C51B8(v37, (unint64_t)v29, &v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v44 + 12) = 1026;
        uint64_t v45 = v29;
        int v46 = *((_DWORD *)v40 + 2);
        sub_1002B0C68((uint64_t)v40, type metadata accessor for MigrateResponse.NextStep);
        LODWORD(v112) = v46;
        uint64_t v29 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v44 + 18) = 1026;
        int v47 = *((_DWORD *)v41 + 3);
        sub_1002B0C68((uint64_t)v41, type metadata accessor for MigrateResponse.NextStep);
        LODWORD(v112) = v47;
        uint64_t v37 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Server terminated migration after too many retries {accountID: %{public}s, invocationCount: %{public}d, failureCount: %{public}d}", (uint8_t *)v44, 0x18u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1002B0C68((uint64_t)v41, type metadata accessor for MigrateResponse.NextStep);
        sub_1002B0C68((uint64_t)v40, type metadata accessor for MigrateResponse.NextStep);

        swift_bridgeObjectRelease_n();
      }
      uint64_t v78 = v109;
      uint64_t v79 = self;
      uint64_t v110 = 0;
      unint64_t v111 = 0xE000000000000000;
      _StringGuts.grow(_:)(94);
      v80._countAndFlagsBits = 0xD000000000000022;
      v80._object = (void *)0x80000001007D09B0;
      String.append(_:)(v80);
      LODWORD(v112) = *(_DWORD *)(v35 + 8);
      v81._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v81);
      swift_bridgeObjectRelease();
      v82._object = (void *)0x80000001007D0960;
      v82._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v82);
      LODWORD(v112) = *(_DWORD *)(v35 + 12);
      v83._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v83);
      swift_bridgeObjectRelease();
      v84._countAndFlagsBits = 0xD000000000000024;
      v84._object = (void *)0x80000001007D0980;
      String.append(_:)(v84);
      v85._countAndFlagsBits = v37;
      v85._object = v29;
      String.append(_:)(v85);
      swift_bridgeObjectRelease();
      v86._countAndFlagsBits = 46;
      v86._object = (void *)0xE100000000000000;
      String.append(_:)(v86);
      NSString v87 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v88 = [v79 internalErrorWithDebugDescription:v87];

      *(unsigned char *)(v78 + 88) = 1;
      sub_1002A83B0((uint64_t)sub_1002B09B8, v78);
      sub_1002AABB4(v88, 1);
      sub_1002A959C();

      goto LABEL_29;
    }
    if (qword_100907248 == -1)
    {
LABEL_19:
      uint64_t v57 = type metadata accessor for Logger();
      sub_10008E2DC(v57, (uint64_t)qword_1009127E0);
      id v58 = v101;
      sub_1002B0AA0(v35, (uint64_t)v101, type metadata accessor for MigrateResponse.NextStep);
      unint64_t v59 = v103;
      sub_1002B0AA0(v35, (uint64_t)v103, type metadata accessor for MigrateResponse.NextStep);
      unint64_t v60 = v105;
      sub_1002B0AA0(v35, (uint64_t)v105, type metadata accessor for MigrateResponse.NextStep);
      swift_bridgeObjectRetain();
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      int v63 = v62;
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v64 = swift_slowAlloc();
        LODWORD(v104) = v63;
        uint64_t v65 = v64;
        uint64_t v106 = swift_slowAlloc();
        uint64_t v110 = v106;
        *(_DWORD *)uint64_t v65 = 67240962;
        int v66 = *((_DWORD *)v58 + 1);
        sub_1002B0C68((uint64_t)v58, type metadata accessor for MigrateResponse.NextStep);
        LODWORD(v112) = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v65 + 8) = 1026;
        uint64_t v107 = v35;
        unint64_t v67 = (unint64_t)v29;
        int v68 = *((_DWORD *)v59 + 2);
        sub_1002B0C68((uint64_t)v59, type metadata accessor for MigrateResponse.NextStep);
        LODWORD(v112) = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v65 + 14) = 1026;
        int v69 = *((_DWORD *)v60 + 3);
        sub_1002B0C68((uint64_t)v60, type metadata accessor for MigrateResponse.NextStep);
        LODWORD(v112) = v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v65 + 2sub_10050ECB8((uint64_t)sub_100292128, 0) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v112 = sub_1000C51B8(v108, v67, &v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v35 = v107;
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v104, "Server instructed to retry migration {delay: %{public}d, invocationCount: %{public}d, failureCount: %{public}d, accountID: %{public}s}", (uint8_t *)v65, 0x1Eu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1002B0C68((uint64_t)v60, type metadata accessor for MigrateResponse.NextStep);
        sub_1002B0C68((uint64_t)v59, type metadata accessor for MigrateResponse.NextStep);
        sub_1002B0C68((uint64_t)v58, type metadata accessor for MigrateResponse.NextStep);

        swift_bridgeObjectRelease_n();
      }
      sub_1002AAFE0(COERCE__INT64((double)*(int *)(v35 + 4)), 0);
LABEL_29:
      sub_1002B0C68(v35, type metadata accessor for MigrateResponse.NextStep);
      return;
    }
LABEL_35:
    swift_once();
    goto LABEL_19;
  }
  sub_1000966BC((uint64_t)v8, &qword_1009086F0);
  if (qword_100907248 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_10008E2DC(v30, (uint64_t)qword_1009127E0);
  swift_bridgeObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = v108;
  uint64_t v35 = v109;
  if (v33)
  {
    unint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v110 = swift_slowAlloc();
    *(_DWORD *)unint64_t v36 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v112 = sub_1000C51B8(v34, (unint64_t)v29, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "No next-step info from Server. Client will fallback to handle retry by itself {accountID: %{public}s}", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v48 = v107;
  if ((v106 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v49 = *(void *)(v35 + 80);
  BOOL v50 = __OFADD__(v49, 1);
  uint64_t v51 = v49 + 1;
  if (v50)
  {
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(v35 + 8sub_10050ECB8((uint64_t)sub_100292128, 0) = v51;
  sub_1002A83B0((uint64_t)sub_1002B09B8, v35);
LABEL_15:
  BOOL v52 = sub_1002AAEC8();
  swift_retain();
  if (v52)
  {
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = swift_slowAlloc();
      uint64_t v110 = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 134349570;
      uint64_t v112 = *(void *)(v35 + 72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 12) = 2050;
      uint64_t v56 = *(void *)(v35 + 80);
      swift_release();
      uint64_t v112 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v55 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v112 = sub_1000C51B8(v34, (unint64_t)v29, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Client terminated migration after too many retries {invocationCount: %{public}ld, failureCount: %{public}ld, accountID: %{public}s}", (uint8_t *)v55, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    id v89 = self;
    uint64_t v110 = 0;
    unint64_t v111 = 0xE000000000000000;
    _StringGuts.grow(_:)(94);
    v90._countAndFlagsBits = 0xD000000000000022;
    v90._object = (void *)0x80000001007D0930;
    String.append(_:)(v90);
    uint64_t v112 = *(void *)(v35 + 72);
    v91._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v91);
    swift_bridgeObjectRelease();
    v92._object = (void *)0x80000001007D0960;
    v92._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v92);
    uint64_t v112 = *(void *)(v35 + 80);
    v93._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v93);
    swift_bridgeObjectRelease();
    v94._countAndFlagsBits = 0xD000000000000024;
    v94._object = (void *)0x80000001007D0980;
    String.append(_:)(v94);
    v95._countAndFlagsBits = v34;
    v95._object = v29;
    String.append(_:)(v95);
    swift_bridgeObjectRelease();
    v96._countAndFlagsBits = 46;
    v96._object = (void *)0xE100000000000000;
    String.append(_:)(v96);
    NSString v97 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v98 = [v89 internalErrorWithDebugDescription:v97];

    *(unsigned char *)(v35 + 88) = 1;
    sub_1002A83B0((uint64_t)sub_1002B09B8, v35);
    sub_1002AABB4(v98, 1);
    sub_1002A959C();
  }
  else
  {
    int v70 = v100 & 1;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = swift_slowAlloc();
      uint64_t v110 = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 134349826;
      double v74 = *(double *)&v48;
      if (v70) {
        double v74 = 0.0;
      }
      uint64_t v112 = *(void *)&v74;
      LODWORD(v106) = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v73 + 12) = 2050;
      uint64_t v112 = *(void *)(v35 + 72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v73 + 22) = 2050;
      uint64_t v75 = v34;
      uint64_t v76 = *(void *)(v35 + 80);
      swift_release();
      uint64_t v112 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v73 + 32) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v77 = v75;
      uint64_t v48 = v107;
      uint64_t v112 = sub_1000C51B8(v77, (unint64_t)v29, &v110);
      LOBYTE(v7sub_10050ECB8((uint64_t)sub_100292128, 0) = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Client will retry migration {delay: %{public}f, invocationCount: %{public}ld, failureCount: %{public}ld, accountID: %{public}s}", (uint8_t *)v73, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    sub_1002AAFE0(v48, v70);
  }
}

void sub_1002AC948(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v160 = a2;
  uint64_t v157 = a1;
  uint64_t v4 = type metadata accessor for MigrateResponse.Error(0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v144 = (uint64_t *)((char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v145 = (uint64_t)&v138 - v7;
  uint64_t v141 = type metadata accessor for REMMigrationResultState();
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v139 = (char *)&v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MigrateResponse.Details(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v146 = (uint64_t)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Step = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v161 = *(void *)(Step - 8);
  uint64_t v162 = Step;
  __chkstk_darwin(Step);
  os_log_t v148 = (unsigned __int8 *)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134(&qword_1009086F0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v159 = (char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v142 = (uint64_t)&v138 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v143 = (_WORD *)((char *)&v138 - v19);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v147 = (char *)&v138 - v21;
  __chkstk_darwin(v20);
  uint64_t v153 = (uint64_t)&v138 - v22;
  uint64_t v23 = sub_100094134(&qword_1009086E8);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)&v138 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  uint64_t v151 = *(void *)(v26 - 8);
  uint64_t v152 = v26;
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v149 = (uint64_t)&v138 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v154 = (uint64_t)&v138 - v29;
  uint64_t v30 = type metadata accessor for JSONEncodingOptions();
  uint64_t v155 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  os_log_type_t v32 = (char *)&v138 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100094134(&qword_100912930);
  __chkstk_darwin(v33 - 8);
  uint64_t v35 = (char *)&v138 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = type metadata accessor for MigrateResponse(0);
  uint64_t v36 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v156 = (uint64_t *)((char *)&v138 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v138 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v42 = [*(id *)(v3 + 24) uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v163 = UUID.uuidString.getter();
  unint64_t v44 = v43;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  if (*(unsigned char *)(v3 + 90) != 1)
  {
    unint64_t v150 = v44;
    sub_1000963CC(0, (unint64_t *)&qword_100908178);
    uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    id v50 = [ObjCClassFromMetadata daemonUserDefaults];
    id v51 = [v50 cloudKitMigrationDelayAfterError];

    if (v51)
    {
      [v51 doubleValue];
      uint64_t v53 = v52;

      if (v160)
      {
LABEL_8:
        if (qword_100907248 != -1) {
          swift_once();
        }
        uint64_t v54 = type metadata accessor for Logger();
        sub_10008E2DC(v54, (uint64_t)qword_1009127E0);
        unint64_t v55 = v150;
        swift_bridgeObjectRetain();
        swift_errorRetain();
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = swift_slowAlloc();
          unint64_t v59 = (void *)swift_slowAlloc();
          id v160 = (id)swift_slowAlloc();
          v165[0] = (uint64_t)v160;
          *(_DWORD *)uint64_t v58 = 138543618;
          uint64_t v60 = _convertErrorToNSError(_:)();
          uint64_t v164 = v60;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v59 = v60;
          swift_errorRelease();
          *(_WORD *)(v58 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v164 = sub_1000C51B8(v163, v55, v165);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Migrate request failed {error: %{public}@, accountID: %{public}s}", (uint8_t *)v58, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();

          swift_bridgeObjectRelease_n();
        }
        uint64_t v64 = (uint64_t)v159;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v161 + 56))(v159, 1, 1, v162);
LABEL_26:
        sub_1002AB8D0(v64, v53, 0, 1);
        sub_1000966BC(v64, &qword_1009086F0);
        return;
      }
    }
    else
    {
      uint64_t v53 = 1.0;
      if (v160) {
        goto LABEL_8;
      }
    }
    sub_1000BF710(v157, (uint64_t)v35, &qword_100912930);
    uint64_t v61 = v158;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v35, 1, v158) == 1)
    {
      os_log_type_t v62 = &qword_100912930;
      uint64_t v63 = (uint64_t)v35;
      goto LABEL_16;
    }
    id v160 = ObjCClassFromMetadata;
    uint64_t v65 = (uint64_t)v156;
    sub_1002B0C00((uint64_t)v35, (uint64_t)v156, type metadata accessor for MigrateResponse);
    JSONEncodingOptions.init()();
    sub_1002B0D18(&qword_1009088A0, (void (*)(uint64_t))type metadata accessor for MigrateResponse);
    uint64_t v72 = Message.jsonString(options:)();
    unint64_t v74 = v73;
    (*(void (**)(char *, uint64_t))(v155 + 8))(v32, v30);
    sub_1000BF710(v65 + *(int *)(v61 + 20), (uint64_t)v25, &qword_1009086E8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v25, 1, v152) == 1)
    {
      sub_1002B0C68(v65, type metadata accessor for MigrateResponse);
      swift_bridgeObjectRelease();
      os_log_type_t v62 = &qword_1009086E8;
      uint64_t v63 = (uint64_t)v25;
LABEL_16:
      sub_1000966BC(v63, v62);
      uint64_t v66 = v161;
      unint64_t v67 = v150;
      if (qword_100907248 != -1) {
        swift_once();
      }
      uint64_t v68 = type metadata accessor for Logger();
      sub_10008E2DC(v68, (uint64_t)qword_1009127E0);
      swift_bridgeObjectRetain();
      int v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = (uint8_t *)swift_slowAlloc();
        v165[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v71 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v164 = sub_1000C51B8(v163, v67, v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Invalid response from migrate request {accountID: %{public}s}", v71, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v64 = (uint64_t)v159;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v159, 1, 1, v162);
      goto LABEL_26;
    }
    uint64_t v75 = v72;
    sub_1002B0C00((uint64_t)v25, v154, type metadata accessor for MigrateResponse.OneOf_Result);
    if (qword_100907248 != -1) {
      swift_once();
    }
    uint64_t v76 = type metadata accessor for Logger();
    uint64_t v77 = sub_10008E2DC(v76, (uint64_t)qword_1009127E0);
    unint64_t v78 = v150;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v159 = (char *)v77;
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = swift_slowAlloc();
      v165[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v81 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v164 = sub_1000C51B8(v75, v74, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v81 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v164 = sub_1000C51B8(v163, v78, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Migration service response received {json: %{public}s, accountID: %{public}s}", (uint8_t *)v81, 0x16u);
      swift_arrayDestroy();
      uint64_t v65 = (uint64_t)v156;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v83 = v161;
    uint64_t v82 = v162;
    uint64_t v84 = (uint64_t)v147;
    Swift::String v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v161 + 56);
    v85(v153, 1, 1, v162);
    uint64_t v86 = v65 + *(int *)(v158 + 32);
    sub_1000BF710(v86, v84, &qword_1009086F0);
    NSString v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
    if (v87(v84, 1, v82) == 1)
    {
      id v88 = v148;
      *(_WORD *)os_log_t v148 = 0;
      *((void *)v88 + 1) = 0;
      *((_DWORD *)v88 + 1) = 0;
      UnknownStorage.init()();
      sub_1000966BC(v84, &qword_1009086F0);
    }
    else
    {
      id v88 = v148;
      sub_1002B0C00(v84, (uint64_t)v148, type metadata accessor for MigrateResponse.NextStep);
    }
    uint64_t v89 = (uint64_t)v88;
    int v90 = *v88;
    sub_1002B0C68(v89, type metadata accessor for MigrateResponse.NextStep);
    if (v90 == 1)
    {
      uint64_t v91 = v86;
      uint64_t v92 = v142;
      sub_1000BF710(v91, v142, &qword_1009086F0);
      if (v87(v92, 1, v82) == 1)
      {
        Swift::String v93 = v143;
        *uint64_t v143 = 0;
        *((void *)v93 + 1) = 0;
        *((_DWORD *)v93 + 1) = 0;
        UnknownStorage.init()();
        sub_1000966BC(v92, &qword_1009086F0);
      }
      else
      {
        Swift::String v93 = v143;
        sub_1002B0C00(v92, (uint64_t)v143, type metadata accessor for MigrateResponse.NextStep);
      }
      uint64_t v94 = v153;
      sub_1000966BC(v153, &qword_1009086F0);
      v85((uint64_t)v93, 0, 1, v82);
      sub_100096408((uint64_t)v93, v94, &qword_1009086F0);
    }
    uint64_t v95 = v149;
    sub_1002B0AA0(v154, v149, type metadata accessor for MigrateResponse.OneOf_Result);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    NSString v97 = v156;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v98 = v145;
      sub_1002B0C00(v95, v145, type metadata accessor for MigrateResponse.Error);
      uint64_t v99 = v144;
      sub_1002B0AA0(v98, (uint64_t)v144, type metadata accessor for MigrateResponse.Error);
      unint64_t v100 = v150;
      swift_bridgeObjectRetain();
      id v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v101, v102))
      {
        uint64_t v103 = swift_slowAlloc();
        uint64_t v162 = swift_slowAlloc();
        v165[0] = v162;
        *(_DWORD *)uint64_t v103 = 136446466;
        uint64_t v104 = *v99;
        unint64_t v105 = v99[1];
        swift_bridgeObjectRetain();
        uint64_t v164 = sub_1000C51B8(v104, v105, v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1002B0C68((uint64_t)v99, type metadata accessor for MigrateResponse.Error);
        *(_WORD *)(v103 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v164 = sub_1000C51B8(v163, v100, v165);
        NSString v97 = v156;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "Migration server error {error: %{public}s, accountID: %{public}s}", (uint8_t *)v103, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1002B0C68((uint64_t)v99, type metadata accessor for MigrateResponse.Error);

        swift_bridgeObjectRelease_n();
      }
      uint64_t v111 = v153;
      sub_1002AB8D0(v153, v53, 0, 1);
      uint64_t v112 = type metadata accessor for MigrateResponse.Error;
      uint64_t v113 = v98;
      goto LABEL_63;
    }
    uint64_t v106 = v146;
    sub_1002B0C00(v95, v146, type metadata accessor for MigrateResponse.Details);
    if (*(unsigned char *)(v106 + 8) == 1)
    {
      id v107 = [v160 daemonUserDefaults];
      id v108 = [v107 cloudKitMigrationObserverPollingInterval];

      if (v108)
      {
        [v108 doubleValue];
        double v110 = v109;
      }
      else
      {
        double v110 = 5.0;
      }
      unint64_t v132 = v150;
      swift_bridgeObjectRetain();
      Class v133 = Logger.logObject.getter();
      os_log_type_t v134 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v133, v134))
      {
        uint64_t v135 = swift_slowAlloc();
        v165[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v135 = 134349314;
        uint64_t v164 = *(void *)&v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v135 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v164 = sub_1000C51B8(v163, v132, v165);
        NSString v97 = v156;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v133, v134, "We are an observer and will poll again in a %{public}f seconds {accountID: %{public}s}", (uint8_t *)v135, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v136 = *(void *)&v110;
      uint64_t v111 = v153;
      uint64_t v137 = v153;
      goto LABEL_62;
    }
    swift_bridgeObjectRelease();
    uint64_t v115 = *v97;
    uint64_t v114 = v97[1];
    uint64_t v116 = v140;
    uint64_t v117 = v139;
    uint64_t v118 = v141;
    (*(void (**)(char *, void, uint64_t))(v140 + 104))(v139, enum case for REMMigrationResultState.complete(_:), v141);
    swift_bridgeObjectRetain();
    uint64_t v119 = REMMigrationResultState.rawValue.getter();
    uint64_t v121 = v120;
    (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v118);
    if (v115 == v119 && v114 == v121)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v106 = v146;
    }
    else
    {
      char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v106 = v146;
      if ((v122 & 1) == 0)
      {
        uint64_t v111 = v153;
        uint64_t v137 = v153;
        uint64_t v136 = 0x3FF0000000000000;
LABEL_62:
        sub_1002AB8D0(v137, v136, 0, 0);
        uint64_t v112 = type metadata accessor for MigrateResponse.Details;
        uint64_t v113 = v106;
LABEL_63:
        sub_1002B0C68(v113, v112);
        sub_1000966BC(v111, &qword_1009086F0);
        sub_1002B0C68(v154, type metadata accessor for MigrateResponse.OneOf_Result);
        sub_1002B0C68((uint64_t)v97, type metadata accessor for MigrateResponse);
        return;
      }
    }
    uint64_t v123 = *(unsigned int *)(v106 + 12);
    if ((v123 & 0x80000000) != 0 || (uint64_t v124 = *(unsigned int *)(v106 + 16), (v124 & 0x80000000) != 0))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      uint64_t v125 = *(unsigned __int8 *)(v106 + 8);
      double v126 = *(double *)v106;
      id v127 = objc_allocWithZone((Class)REMMigrationResult);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      NSString v128 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v129 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v130 = [v127 initWithState:v128 IsObserver:v125 timeElapsed:v123 listsMigrated:v124 remindersMigrated:v129 log:v126];

      id v131 = v130;
      sub_1002AABB4(v130, 0);

      sub_1002B0C68(v146, type metadata accessor for MigrateResponse.Details);
      sub_1000966BC(v153, &qword_1009086F0);
      sub_1002B0C68(v154, type metadata accessor for MigrateResponse.OneOf_Result);
      sub_1002B0C68((uint64_t)v97, type metadata accessor for MigrateResponse);
    }
    return;
  }
  if (qword_100907248 != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  sub_10008E2DC(v45, (uint64_t)qword_1009127E0);
  swift_bridgeObjectRetain();
  int v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    v165[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v164 = sub_1000C51B8(v163, v44, v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Migration client is told to dismiss. Ignore server response. {accountID: %{public}s}", v48, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1002AE198@<X0>(void *a1@<X8>)
{
  sub_100094134(&qword_10090E178);
  uint64_t result = NSManagedObjectContext.rem_performAndWait<A>(_:)();
  if (!v1) {
    *a1 = v4;
  }
  return result;
}

void sub_1002AE218(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MigrateRequest.User(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_100908178);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v10 = [ObjCClassFromMetadata daemonUserDefaults];
  id v11 = [v10 cloudKitMigrationSimulatedError];

  if (v11)
  {
    uint64_t v12 = (uint64_t)[v11 integerValue];

    if (v12 >= 1)
    {
      if ((unint64_t)v12 >> 31)
      {
        __break(1u);
        return;
      }
      *(_DWORD *)(a1 + *(int *)(type metadata accessor for MigrateRequest(0) + 28)) = v12;
    }
  }
  id v13 = [ObjCClassFromMetadata daemonUserDefaults];
  unsigned int v14 = [v13 cloudKitMigrationDisableCleanUp];

  if (a2) {
    int v15 = 8;
  }
  else {
    int v15 = 0;
  }
  if (v14) {
    int v16 = v15 | 0x10;
  }
  else {
    int v16 = v15;
  }
  *(_DWORD *)(a1 + *(int *)(type metadata accessor for MigrateRequest(0) + 20)) = v16;
  sub_1002B0AA0(a3, (uint64_t)v8, type metadata accessor for MigrateRequest.User);
  sub_1000966BC(a1, &qword_1009086E0);
  sub_1002B0C00((uint64_t)v8, a1, type metadata accessor for MigrateRequest.User);
  uint64_t v17 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a1, 0, 1, v17);
}

uint64_t sub_1002AE43C(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100912930);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MigrateResponse(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134(&qword_100912938);
  __chkstk_darwin(v9);
  id v11 = (void **)((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000BF710(a1, (uint64_t)v11, &qword_100912938);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = *v11;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    swift_errorRetain();
    sub_1002AC948((uint64_t)v4, v12);
    swift_errorRelease();
    swift_errorRelease();
    return sub_1000966BC((uint64_t)v4, &qword_100912930);
  }
  else
  {
    sub_1002B0C00((uint64_t)v11, (uint64_t)v8, type metadata accessor for MigrateResponse);
    sub_1002B0AA0((uint64_t)v8, (uint64_t)v4, type metadata accessor for MigrateResponse);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    sub_1002AC948((uint64_t)v4, 0);
    sub_1000966BC((uint64_t)v4, &qword_100912930);
    return sub_1002B0C68((uint64_t)v8, type metadata accessor for MigrateResponse);
  }
}

void sub_1002AE6B0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

id sub_1002AE71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithPattern:v5 options:a3 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

void *sub_1002AE7F8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100094134((uint64_t *)&unk_100909B10);
  id v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1002AE860(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_1002AE8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1002B0B08();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_1002AEC50();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v13 = sub_1002AE9D0(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 | ((((unint64_t)v13 >> 32) & 1) << 32);
}

unsigned __int8 *sub_1002AE9D0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002AEC50()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_1002AECD0(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1002AECD0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_1002AEE28(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          char v11 = sub_1002AE7F8(v9, 0),
          unint64_t v12 = sub_1002AEF28((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_1002AEE28(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_1002AE860(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1002AE860(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_1002AEF28(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1002AE860(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_1002AE860(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1002AF13C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    unsigned __int8 v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_1002B01FC((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    unsigned __int8 v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

void sub_1002AF210()
{
  uint64_t v0 = sub_100094134(&qword_100912950);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  unint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v29 - v4;
  if (qword_100907248 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_1009127E0);
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Notify all migration clients to dismiss", v9, 2u);
      swift_slowDealloc();
    }

    if (qword_100907258 != -1) {
      swift_once();
    }
    os_unfair_lock_lock((os_unfair_lock_t)qword_100912800);
    if (qword_100907250 != -1) {
      swift_once();
    }
    swift_beginAccess();
    unint64_t v10 = off_1009127F8;
    uint64_t v11 = *((void *)off_1009127F8 + 8);
    unint64_t v31 = (char *)off_1009127F8 + 64;
    uint64_t v12 = 1 << *((unsigned char *)off_1009127F8 + 32);
    uint64_t v13 = -1;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    unint64_t v14 = v13 & v11;
    int64_t v15 = (unint64_t)(v12 + 63) >> 6;
    int64_t v30 = v15 - 1;
    swift_bridgeObjectRetain();
    int64_t v16 = 0;
    if (v14)
    {
      while (1)
      {
        unint64_t v18 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v19 = v18 | (v16 << 6);
LABEL_14:
        uint64_t v20 = v10[6];
        uint64_t v21 = type metadata accessor for UUID();
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v3, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v19, v21);
        uint64_t v22 = v10[7];
        uint64_t v23 = sub_100094134(&qword_100912958);
        *(void *)&v3[*(int *)(v23 + 48)] = *(void *)(v22 + 8 * v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v3, 0, 1, v23);
        swift_retain();
LABEL_33:
        sub_100096408((uint64_t)v3, (uint64_t)v5, &qword_100912950);
        uint64_t v28 = sub_100094134(&qword_100912958);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v5, 1, v28) == 1) {
          break;
        }
        *(unsigned char *)(*(void *)&v5[*(int *)(v28 + 48)] + 9sub_10050ECB8((uint64_t)sub_100292128, 0) = 1;
        swift_release();
        uint64_t v17 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v5, v17);
        if (!v14) {
          goto LABEL_15;
        }
      }
      swift_release();
      off_1009127F8 = (_UNKNOWN *)sub_1002EE224((uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock((os_unfair_lock_t)qword_100912800);
      return;
    }
LABEL_15:
    int64_t v24 = v16 + 1;
    if (!__OFADD__(v16, 1)) {
      break;
    }
    __break(1u);
  }
  if (v24 >= v15) {
    goto LABEL_32;
  }
  unint64_t v25 = *(void *)&v31[8 * v24];
  if (v25)
  {
LABEL_18:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v19 = __clz(__rbit64(v25)) + (v24 << 6);
    int64_t v16 = v24;
    goto LABEL_14;
  }
  int64_t v26 = v16 + 2;
  ++v16;
  if (v24 + 1 >= v15) {
    goto LABEL_32;
  }
  unint64_t v25 = *(void *)&v31[8 * v26];
  if (v25)
  {
LABEL_21:
    int64_t v24 = v26;
    goto LABEL_18;
  }
  int64_t v16 = v24 + 1;
  if (v24 + 2 >= v15) {
    goto LABEL_32;
  }
  unint64_t v25 = *(void *)&v31[8 * v24 + 16];
  if (v25)
  {
    v24 += 2;
    goto LABEL_18;
  }
  int64_t v26 = v24 + 3;
  int64_t v16 = v24 + 2;
  if (v24 + 3 >= v15)
  {
LABEL_32:
    uint64_t v27 = sub_100094134(&qword_100912958);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v3, 1, 1, v27);
    unint64_t v14 = 0;
    goto LABEL_33;
  }
  unint64_t v25 = *(void *)&v31[8 * v26];
  if (v25) {
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v24 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v24 >= v15)
    {
      int64_t v16 = v30;
      goto LABEL_32;
    }
    unint64_t v25 = *(void *)&v31[8 * v24];
    ++v26;
    if (v25) {
      goto LABEL_18;
    }
  }
  __break(1u);
}

uint64_t sub_1002AF6FC(void *a1)
{
  if (qword_100907248 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_1009127E0);
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Purge all migration clients' states", v5, 2u);
    swift_slowDealloc();
  }

  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [a1 newBackgroundContextWithAuthor:v6];

  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1002B0D00;
  *(void *)(v9 + 24) = v8;
  v13[4] = sub_100097240;
  v13[5] = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  void v13[2] = sub_1003B3260;
  v13[3] = &unk_1008C04D8;
  unint64_t v10 = _Block_copy(v13);
  id v11 = v7;
  swift_retain();
  swift_release();
  [v11 performBlockAndWait:v10];

  _Block_release(v10);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v11) {
    __break(1u);
  }
  return result;
}

void sub_1002AF948(void *a1, void *a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  NSString v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v55 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v52 - v12;
  __chkstk_darwin(v11);
  int64_t v15 = (char *)&v52 - v14;
  id v16 = [self sharedInstance];
  uint64_t v17 = (char *)[v16 accountStore];

  id v60 = a1;
  id v18 = a1;
  id v19 = [v18 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.uuidString.getter();
  uint64_t v56 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v57 = v8 + 8;
  v56(v15, v7);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v17 accountWithIdentifier:v20];

  if (!v21)
  {
    __break(1u);
    goto LABEL_28;
  }
  id v22 = [v21 displayAccount];

  if (!v22)
  {
LABEL_28:
    __break(1u);
    return;
  }
  id v23 = [v22 identifier];

  int64_t v24 = &qword_100907000;
  if (!v23)
  {
LABEL_6:
    if (v24[73] != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_1009127E0);
    int64_t v26 = v18;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v53 = a2;
      int64_t v30 = (uint8_t *)v29;
      uint64_t v52 = (void *)swift_slowAlloc();
      *(_DWORD *)int64_t v30 = 138543362;
      unint64_t v59 = v26;
      unint64_t v31 = v26;
      uint64_t v54 = v15;
      unsigned __int8 v32 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v52 = v26;

      int64_t v15 = v54;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Migration: account ID not found in the ACAccount store, will try to migrate anyway but expect failure {accountID: %{public}@}", v30, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v53;
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v33 = (void (*)(uint64_t, uint64_t))v56;
    goto LABEL_13;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {

    sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
    int64_t v24 = &qword_100907000;
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  sub_1000963CC(0, &qword_10090ABC0);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v36 = [ObjCClassFromMetadata objectIDWithUUID:isa];

  uint64_t v33 = (void (*)(uint64_t, uint64_t))v56;
  v56(v13, v7);

  id v60 = v36;
LABEL_13:
  uint64_t v37 = (uint64_t)v55;
  if (qword_100907258 != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)qword_100912800);
  if (qword_100907250 != -1) {
    swift_once();
  }
  id v38 = [v60 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  if (*((void *)off_1009127F8 + 2) && (sub_100306EC4(v37), (v39 & 1) != 0))
  {
    swift_endAccess();
    swift_retain();
    v33(v37, v7);
  }
  else
  {
    swift_endAccess();
    v33(v37, v7);
    if (qword_100907248 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_10008E2DC(v40, (uint64_t)qword_1009127E0);
    uint64_t v41 = v60;
    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      unint64_t v55 = v17;
      uint64_t v44 = swift_slowAlloc();
      uint64_t v54 = v15;
      uint64_t v45 = (uint8_t *)v44;
      int v46 = (void *)swift_slowAlloc();
      uint64_t v53 = (void *)v7;
      *(_DWORD *)uint64_t v45 = 138543362;
      unint64_t v59 = v41;
      os_log_type_t v47 = v41;
      uint64_t v33 = (void (*)(uint64_t, uint64_t))v56;
      uint64_t v7 = (uint64_t)v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v46 = v41;

      uint64_t v17 = v55;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Creating new migration client {accountID: %{public}@}", v45, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      int64_t v15 = v54;
      swift_slowDealloc();
    }
    else
    {

      id v42 = v41;
    }

    swift_beginAccess();
    id v48 = v60;
    type metadata accessor for RDMigrationClient();
    swift_allocObject();
    uint64_t v49 = sub_1002A8018(v48, a2);
    swift_retain_n();
    sub_1002A83B0((uint64_t)sub_1002B0898, v49);
    swift_release();
    id v50 = [v60 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v58 = off_1009127F8;
    off_1009127F8 = (_UNKNOWN *)0x8000000000000000;
    sub_1002C52DC(v49, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
    off_1009127F8 = v58;
    swift_bridgeObjectRelease();
    v33((uint64_t)v15, v7);
    swift_endAccess();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)qword_100912800);
}

uint64_t sub_1002B01FC(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = sub_1002AE860(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_1002AE860(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_1002AE860(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  id v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    id v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v34 = a6 + 55;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v34 = 65;
        }
        if (a6 <= 10) {
          unsigned __int8 v35 = a6 + 48;
        }
        else {
          unsigned __int8 v35 = 58;
        }
        if (v19)
        {
          unsigned int v24 = 0;
          id v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                unsigned int v29 = 0;
                unsigned __int8 v30 = 1;
                if (v38 < 0x61 || v38 >= v33) {
                  return v29 | ((unint64_t)v30 << 32);
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            unint64_t v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_96;
            }
            unsigned __int8 v41 = v38 + v39;
            unsigned int v24 = v40 + v41;
            if (__CFADD__(v40, v41)) {
              goto LABEL_96;
            }
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          unsigned __int8 v30 = 0;
          unsigned int v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v43 = a6 + 55;
      }
      else
      {
        unsigned __int8 v42 = 97;
        unsigned __int8 v43 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v44 = a6 + 48;
      }
      else {
        unsigned __int8 v44 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v45 < 0x61 || v45 >= v42) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          unint64_t v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v48 = v45 + v46;
          unsigned int v24 = v47 + v48;
          if (__CFADD__(v47, v48)) {
            goto LABEL_96;
          }
          ++v19;
          if (!--result) {
            goto LABEL_94;
          }
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    unsigned int v29 = 0;
    unsigned __int8 v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v22 = a6 + 55;
      }
      else
      {
        unsigned __int8 v21 = 97;
        unsigned __int8 v22 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v23 = a6 + 48;
      }
      else {
        unsigned __int8 v23 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        uint64_t v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          unint64_t v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v32 = v27 + v28;
          unsigned int v24 = v31 - v32;
          if (v31 < v32) {
            goto LABEL_96;
          }
          ++v25;
          if (!--v26) {
            goto LABEL_94;
          }
        }
      }
LABEL_95:
      unsigned int v29 = 0;
      unsigned __int8 v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

void sub_1002B0624(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  [a1 setQueuePriority:-4];
  [a1 setQualityOfService:17];
  if (a2)
  {
    aBlock[4] = a2;
    aBlock[5] = a3;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1002AE6B0;
    uint64_t aBlock[3] = a4;
    uint64_t v8 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v8 = 0;
  }
  [a1 setRequestCompletedBlock:v8];
  _Block_release(v8);
  uint64_t v9 = dispatch thunk of CKCodeOperation.codeService.getter();
  if (v9)
  {
    unint64_t v10 = v9;
    CKCodeService.add<A, B>(_:)();
  }
  else
  {
    swift_getObjectType();
    if (qword_100907248 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_1009127E0);
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v14 = _typeName(_:qualified:)();
      void aBlock[6] = sub_1000C51B8(v14, v15, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v12, "TantorMigrationAPIAsyncOperationClient.perform %s: codeService is nil", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1002B0884(uint64_t result)
{
  if ((result & 0xFFFC) != 0) {
    return 4;
  }
  else {
    return (unsigned __int16)result;
  }
}

void sub_1002B0898(uint64_t a1, void *a2)
{
}

uint64_t sub_1002B08A8()
{
  return _swift_deallocObject(v0, 48, 7);
}

void sub_1002B08E8()
{
  sub_1002A8640(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t sub_1002B08F4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002B0904(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = v2;
  return swift_retain();
}

uint64_t sub_1002B0914()
{
  return swift_release();
}

void sub_1002B091C()
{
  if ([self isInternetReachable])
  {
    uint64_t v1 = *(os_unfair_lock_s **)(v0 + 48);
    os_unfair_lock_lock(v1);
    if (*(unsigned char *)(v0 + 92) == 1)
    {
      int v2 = *(unsigned __int8 *)(v0 + 93);
      *(_WORD *)(v0 + 92) = 0;
      sub_1002A68BC(v2);
    }
    os_unfair_lock_unlock(v1);
  }
}

void sub_1002B0998(uint64_t a1)
{
  sub_1002AE218(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_1002B09B8(void *a1, void *a2)
{
  sub_1002A8858(a1, a2, v2);
}

uint64_t sub_1002B09C0(uint64_t a1)
{
  return sub_1002AE43C(a1);
}

uint64_t sub_1002B09C8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002B0A00(void *a1)
{
}

uint64_t sub_1002B0A08()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1002B0A48(uint64_t a1)
{
  sub_1002A9B34(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1002B0A54()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1002B0A94()
{
  sub_1002AB410(*(void *)(v0 + 16), *(void **)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_1002B0AA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1002B0B08()
{
  unint64_t result = qword_100912940;
  if (!qword_100912940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100912940);
  }
  return result;
}

void sub_1002B0B5C(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_10011C62C(a1, a2 & 1);
  }
}

uint64_t sub_1002B0B74()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002B0BAC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

id sub_1002B0BE0(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100149368(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1002B0BF8(uint64_t a1)
{
  return sub_1002AA72C(a1, *(void (**)(uint64_t, uint64_t, double))(v1 + 16));
}

uint64_t sub_1002B0C00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002B0C68(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002B0CC8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002B0D00()
{
  sub_1002A7848(*(void **)(v0 + 16));
}

uint64_t sub_1002B0D08()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002B0D18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002B0D60()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1002B0D98()
{
  sub_1002A5A20(*(void **)(v0 + 24));
}

const char *sub_1002B0DC0()
{
  return "state";
}

id sub_1002B0DCC@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 state];
  *a2 = (_WORD)result;
  return result;
}

id sub_1002B0E00(__int16 *a1, id *a2)
{
  return [*a2 setState:*a1];
}

const char *sub_1002B0E14()
{
  return "isTerminated";
}

id sub_1002B0E20@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isTerminated];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1002B0E54(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsTerminated:*a1];
}

uint64_t sub_1002B0E68()
{
  return _swift_deallocObject(v0, 48, 7);
}

void sub_1002B0EB0()
{
  sub_1002A5D7C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1002B0EBC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002B0F00(uint64_t result)
{
  return (__int16)result;
}

uint64_t sub_1002B0F08(uint64_t a1)
{
  uint64_t result = sub_100726178();
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = (void *)sub_1002C8C24(result, v3, 0, a1);
  id v6 = v5;
  return (uint64_t)v5;
}

uint64_t sub_1002B0F78(uint64_t a1)
{
  return sub_1002B1118(a1, sub_1003CA790, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1003CA1B8);
}

uint64_t sub_1002B0FA4(uint64_t a1)
{
  return sub_1002B1118(a1, sub_1003CA790, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1003CA1E0);
}

uint64_t sub_1002B0FD0(uint64_t a1)
{
  uint64_t result = sub_1000E1630(a1);
  uint64_t v5 = result;
  uint64_t v6 = v3;
  int v7 = v4 & 1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaDictionary.endIndex.getter();
    if (v7)
    {
      uint64_t v9 = result;
      uint64_t v10 = v8;
      char v11 = static __CocoaDictionary.Index.== infix(_:_:)();
      sub_1000E4EA4(v9, v10, 1);
      if (v11)
      {
LABEL_4:
        sub_1000E4EA4(v5, v6, v7);
        return 0;
      }
LABEL_8:
      sub_1000E1780(&v14, v5, v6, v7, a1);
      uint64_t v12 = v13;
      sub_1000E4EA4(v5, v6, v7);
      return v12;
    }
  }
  else if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 36) == v3)
    {
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002B10EC(uint64_t a1)
{
  return sub_1002B1118(a1, sub_1003CA790, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1003CA4AC);
}

uint64_t sub_1002B1118(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t, uint64_t, BOOL, uint64_t))
{
  unint64_t v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = __CocoaSet.startIndex.getter();
    uint64_t v8 = v7;
    __CocoaSet.endIndex.getter();
    char v9 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_1000E4EA4(v6, v8, v5 != 0);
      return 0;
    }
LABEL_7:
    uint64_t v10 = a3(v6, v8, v5 != 0, a1);
    sub_1000E4EA4(v6, v8, v5 != 0);
    return v10;
  }
  uint64_t result = a2(a1);
  if ((v13 & 1) == 0)
  {
    uint64_t v8 = v12;
    if (*(_DWORD *)(a1 + 36) == v12)
    {
      uint64_t v6 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002B123C(uint64_t a1)
{
  uint64_t result = sub_1000E1634(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  sub_1002C8C74(result, v3, 0, a1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002B12A4(uint64_t a1)
{
  uint64_t result = sub_1002C8B84(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = sub_1003CA9AC(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1002B1324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1002C8B84(a1);
  if (v6) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    return sub_1003CA4D4(result, v5, a1, a2);
  }
  return result;
}

void *sub_1002B13AC(uint64_t a1)
{
  uint64_t result = (void *)sub_1000E162C(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (void *)(1 << *(unsigned char *)(a1 + 32))) {
    return 0;
  }
  else {
    return sub_1000E19DC(&v5, (uint64_t)result, v3, 0, a1);
  }
}

void sub_1002B1438(uint64_t a1, void (*a2)(uint64_t *, id *), uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a1;
  uint64_t v7 = a4 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a4 + 64);
  int64_t v20 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = 8 * i;
    int64_t v18 = *(void **)(*(void *)(a4 + 56) + v17);
    v21[0] = *(id *)(*(void *)(a4 + 48) + v17);
    v21[1] = v18;
    id v19 = v21[0];
    swift_bridgeObjectRetain();
    a2(&v22, v21);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();

    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v20) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_17:
    unint64_t v10 = (v15 - 1) & v15;
  }
  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v20) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v20) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v20) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 4;
  if (v11 + 4 >= v20)
  {
LABEL_26:
    swift_release();
    return;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_16:
    int64_t v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v20) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
}

void *sub_1002B1630(void *a1, void (*a2)(void **, id *), uint64_t a3, unint64_t a4)
{
  return sub_1002B184C(a1, a2, a3, a4);
}

uint64_t sub_1002B1648(uint64_t a1, void (*a2)(uint64_t *, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a1;
  uint64_t v7 = a4 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a4 + 64);
  int64_t v21 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    int64_t v18 = (void *)(*(void *)(a4 + 48) + 16 * i);
    uint64_t v19 = v18[1];
    uint64_t v20 = *(void *)(*(void *)(a4 + 56) + 8 * i);
    v22[0] = *v18;
    v22[1] = v19;
    v22[2] = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(&v23, v22);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v21) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v10 = (v16 - 1) & v16;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v21) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v21) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v21) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v21)
  {
LABEL_26:
    swift_release();
    return v23;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v21) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002B184C(void *a1, void (*a2)(void **, id *), uint64_t a3, unint64_t a4)
{
  uint64_t v14 = a1;
  uint64_t v7 = a1;
  if (a4 >> 62) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v10 = (a4 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(a4 + 8 * i);
      uint64_t v7 = v10;
      uint64_t v11 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v13 = v10;
      a2(&v14, &v13);
      if (v4)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v7;
      }

      if (v11 == v8)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v7;
}

id sub_1002B1988()
{
  return sub_1002BF7A4((SEL *)&selRef_membershipsOfRemindersInSectionsAsData, (unint64_t *)&qword_100910240);
}

void sub_1002B19C0(void *a1, char a2)
{
  uint64_t v4 = v2;
  if (a1)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100910240);
    id v7 = a1;
    uint64_t v8 = REMChecksumRepresentable.rem_checksum.getter();
    if (v3)
    {
LABEL_3:

      return;
    }
    uint64_t v13 = v8;
    uint64_t v14 = v9;
    swift_bridgeObjectRetain();
    id v15 = [v4 membershipsOfRemindersInSectionsChecksum];
    if (!v15)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      uint64_t v22 = REMJSONRepresentable.toJSONData()();
      unint64_t v24 = v23;
      id v25 = [v4 membershipsOfRemindersInSectionsChecksum];
      if (!v25) {
        goto LABEL_23;
      }
      uint64_t v26 = v25;
      id v36 = v7;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v28;

      if (v27 == v13 && v34 == v14)
      {
        swift_bridgeObjectRelease_n();
        id v7 = v36;
LABEL_26:
        sub_100097E38(v22, v24);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F34(v22, v24);
        [v4 setMembershipsOfRemindersInSectionsAsData:isa];

        sub_100097F34(v22, v24);
        goto LABEL_3;
      }
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      id v7 = v36;
      if ((v29 & 1) == 0)
      {
LABEL_23:
        NSString v30 = String._bridgeToObjectiveC()();
        [v4 setMembershipsOfRemindersInSectionsChecksum:v30];

        if (a2)
        {
          id v31 = [v4 createResolutionTokenMapIfNecessary];
          NSString v32 = String._bridgeToObjectiveC()();
          [v31 updateForKey:v32];
          swift_bridgeObjectRelease();

          goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    unint64_t v16 = v15;
    unsigned __int8 v35 = v7;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    if (v13 != v17 || v14 != v19)
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v7 = v35;
      if (v21)
      {

        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_18;
    }

    swift_bridgeObjectRelease_n();
  }
  else
  {
    id v10 = [v2 membershipsOfRemindersInSectionsChecksum];
    if (v10)
    {

      [v2 setMembershipsOfRemindersInSectionsChecksum:0];
      if (a2)
      {
        id v11 = [v2 createResolutionTokenMapIfNecessary];
        NSString v12 = String._bridgeToObjectiveC()();
        [v11 updateForKey:v12];
      }
    }
    [v4 setMembershipsOfRemindersInSectionsAsData:0];
  }
}

void sub_1002B1D68(void *a1, char a2)
{
}

uint64_t sub_1002B1D80()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100912968);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100912968);
  if (qword_1009077F0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942418);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1002B1E48()
{
  id result = [self intelligentGrocery];
  qword_100912980 = (uint64_t)result;
  return result;
}

uint64_t sub_1002B1E84(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100912BD0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_1002CDD7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_100094134(&qword_100910030);
  sub_1002CDDD0(&qword_100912BE0, &qword_100912BE8);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1002B200C()
{
  return 0xD000000000000011;
}

uint64_t sub_1002B2028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002C8E98(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1002B2054(uint64_t a1)
{
  unint64_t v2 = sub_1002CDD7C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002B2090(uint64_t a1)
{
  unint64_t v2 = sub_1002CDD7C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1002B20CC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002C8F20(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002B20F8(void *a1)
{
  return sub_1002B1E84(a1, *v1);
}

uint64_t sub_1002B2114(uint64_t a1)
{
  v2[44] = a1;
  v2[45] = v1;
  v2[46] = *v1;
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v2[47] = v3;
  v2[48] = *(void *)(v3 - 8);
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[51] = v4;
  v2[52] = *(void *)(v4 - 8);
  v2[53] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OSSignpostID();
  v2[54] = v5;
  v2[55] = *(void *)(v5 - 8);
  v2[56] = swift_task_alloc();
  return _swift_task_switch(sub_1002B22C4, 0, 0);
}

uint64_t sub_1002B22C4()
{
  uint64_t v32 = v0;
  static os_signpost_type_t.begin.getter();
  if (qword_100907268 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 432);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_100907260 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v0 + 456) = sub_10008E2DC(v4, (uint64_t)qword_100912968);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v7 = *(void *)(v0 + 368);
    os_log_type_t type = v6;
    uint64_t v9 = swift_slowAlloc();
    id v10 = (void *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446722;
    *(void *)(v0 + 288) = v7;
    swift_getMetatypeMetadata();
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 328) = sub_1000C51B8(v11, v12, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2114;
    uint64_t v13 = *(void **)(v8 + 24);
    *(void *)(v0 + 336) = v13;
    id v14 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v10 = v13;
    swift_release_n();
    *(_WORD *)(v9 + 22) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_bridgeObjectRetain();
    uint64_t v15 = Array.description.getter();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 344) = sub_1000C51B8(v15, v17, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "%{public}s: Start execution {listObjectID: %{public}@, reminderIDs: %{public}s}", (uint8_t *)v9, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v18 = *(void *)(v0 + 400);
  uint64_t v19 = *(void *)(v0 + 384);
  char v21 = *(void **)(v0 + 352);
  uint64_t v20 = *(void *)(v0 + 360);
  Date.init()();
  uint64_t v22 = *(void **)(v20 + 24);
  *(void *)(v0 + 464) = v22;
  uint64_t v23 = swift_allocObject();
  *(void *)(v0 + 472) = v23;
  *(void *)(v23 + 16) = v22;
  *(void *)(v23 + 24) = v21;
  *(_DWORD *)(v0 + 6sub_10050ECB8((uint64_t)sub_100292128, 0) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  unint64_t v24 = *(void (**)(uint64_t))(v19 + 104);
  *(void *)(v0 + 48sub_10050ECB8((uint64_t)sub_100292128, 0) = v24;
  *(void *)(v0 + 488) = (v19 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v24(v18);
  id v25 = v22;
  id v26 = v21;
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_1002B273C;
  uint64_t v28 = *(void *)(v0 + 400);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 64, v28, sub_1002C1344, v23, &_s31ThreadSafePartialRepresentationVN_0);
}

uint64_t sub_1002B273C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 400);
  uint64_t v4 = *(void *)(*(void *)v1 + 384);
  uint64_t v5 = *(void *)(*(void *)v1 + 376);
  v2[63] = v0;
  swift_task_dealloc();
  os_log_type_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v2[64] = v6;
  v2[65] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v3, v5);
  swift_release();
  if (v0) {
    uint64_t v7 = sub_1002B2DC4;
  }
  else {
    uint64_t v7 = sub_1002B28E0;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002B28E0()
{
  uint64_t v32 = v0;
  long long v1 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v0 + 41) = *(_OWORD *)(v0 + 89);
  if (*(unsigned char *)(v0 + 32))
  {
    id v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
    uint64_t v15 = *(unsigned int *)(v0 + 60);
    uint64_t v16 = *(void *)(v0 + 392);
    uint64_t v17 = *(void *)(v0 + 376);
    uint64_t v18 = *(void **)(v0 + 352);
    uint64_t v19 = *(void *)(*(void *)(v0 + 360) + 32);
    uint64_t v20 = swift_allocObject();
    *(void *)(v0 + 528) = v20;
    *(void *)(v20 + 16) = v19;
    *(void *)(v20 + 24) = v18;
    v14(v16, v15, v17);
    id v21 = v18;
    swift_bridgeObjectRetain();
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 536) = v22;
    uint64_t v23 = sub_100094134(&qword_100912A90);
    void *v22 = v0;
    v22[1] = sub_1002B2E8C;
    uint64_t v24 = *(void *)(v0 + 392);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 320, v24, sub_1002C1B34, v20, v23);
  }
  else
  {
    swift_retain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = *(void **)(v0 + 464);
      uint64_t v5 = *(void *)(v0 + 368);
      uint64_t v6 = swift_slowAlloc();
      log = v2;
      uint64_t v7 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446722;
      *(void *)(v0 + 248) = v5;
      swift_getMetatypeMetadata();
      uint64_t v8 = String.init<A>(describing:)();
      *(void *)(v0 + 296) = sub_1000C51B8(v8, v9, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2114;
      *(void *)(v0 + 304) = v4;
      id v10 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v7 = v4;
      swift_release_n();
      *(_WORD *)(v6 + 22) = 2082;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v11 = Array.description.getter();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 312) = sub_1000C51B8(v11, v13, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, log, v3, "%{public}s: Skipped auto-categorizing reminders because list should no longer categorize grocery items {listObjectID: %{public}@, reminderIDs: %{public}s}", (uint8_t *)v6, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100096408(v0 + 24, v0 + 232, (uint64_t *)&unk_100914BC0);
      sub_1002C1360((id *)(v0 + 232));
      sub_100096408(v0 + 40, v0 + 176, (uint64_t *)&unk_10090A4C0);
      sub_1001E828C(v0 + 176);
    }
    else
    {

      sub_100096408(v0 + 24, v0 + 224, (uint64_t *)&unk_100914BC0);
      sub_1002C1360((id *)(v0 + 224));
      sub_100096408(v0 + 40, v0 + 208, (uint64_t *)&unk_10090A4C0);
      sub_1001E828C(v0 + 208);
      swift_release_n();
    }
    uint64_t v26 = *(void *)(v0 + 416);
    uint64_t v25 = *(void *)(v0 + 424);
    uint64_t v27 = *(void *)(v0 + 408);
    sub_1002B38D4(*(void *)(v0 + 360), v25, *(void *)(v0 + 368));
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
    return v28();
  }
}

uint64_t sub_1002B2DC4()
{
  uint64_t v2 = v0[52];
  uint64_t v1 = v0[53];
  uint64_t v3 = v0[51];
  sub_1002B38D4(v0[45], v1, v0[46]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1002B2E8C()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v1 + 512);
  uint64_t v3 = *(void *)(*(void *)v1 + 392);
  uint64_t v4 = *(void *)(*(void *)v1 + 376);
  *(void *)(*(void *)v1 + 544) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_1002B31C4;
  }
  else {
    uint64_t v5 = sub_1002B3028;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002B3028()
{
  uint64_t v1 = *(void *)(v0 + 320);
  *(void *)(v0 + 552) = v1;
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 56sub_10050ECB8((uint64_t)sub_100292128, 0) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002B32D4;
    uint64_t v3 = *(void *)(v0 + 352);
    return sub_1002B3DB4(v1, v0 + 16, v3);
  }
  else
  {
    swift_bridgeObjectRelease();

    sub_100096408(v0 + 24, v0 + 240, (uint64_t *)&unk_100914BC0);
    sub_1002C1360((id *)(v0 + 240));
    sub_100096408(v0 + 40, v0 + 192, (uint64_t *)&unk_10090A4C0);
    sub_1001E828C(v0 + 192);
    uint64_t v6 = *(void *)(v0 + 416);
    uint64_t v5 = *(void *)(v0 + 424);
    uint64_t v7 = *(void *)(v0 + 408);
    sub_1002B38D4(*(void *)(v0 + 360), v5, *(void *)(v0 + 368));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_1002B31C4()
{
  sub_100096408(v0 + 24, v0 + 272, (uint64_t *)&unk_100914BC0);
  sub_1002C1360((id *)(v0 + 272));
  sub_100096408(v0 + 40, v0 + 160, (uint64_t *)&unk_10090A4C0);
  sub_1001E828C(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 408);
  sub_1002B38D4(*(void *)(v0 + 360), v1, *(void *)(v0 + 368));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1002B32D4()
{
  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1002B36AC;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1002B33F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002B33F0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[72] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1002B3490;
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[44];
  return sub_1000C5C58(v2, v3);
}

uint64_t sub_1002B3490()
{
  *(void *)(*(void *)v1 + 584) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002B37C4;
  }
  else {
    uint64_t v2 = sub_1002B35A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002B35A4()
{
  sub_100096408(v0 + 24, v0 + 256, (uint64_t *)&unk_100914BC0);
  sub_1002C1360((id *)(v0 + 256));
  sub_100096408(v0 + 40, v0 + 128, (uint64_t *)&unk_10090A4C0);
  sub_1001E828C(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 408);
  sub_1002B38D4(*(void *)(v0 + 360), v1, *(void *)(v0 + 368));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1002B36AC()
{
  swift_bridgeObjectRelease();

  sub_100096408(v0 + 24, v0 + 264, (uint64_t *)&unk_100914BC0);
  sub_1002C1360((id *)(v0 + 264));
  sub_100096408(v0 + 40, v0 + 144, (uint64_t *)&unk_10090A4C0);
  sub_1001E828C(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 408);
  sub_1002B38D4(*(void *)(v0 + 360), v1, *(void *)(v0 + 368));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1002B37C4()
{
  sub_100096408(v0 + 24, v0 + 280, (uint64_t *)&unk_100914BC0);
  sub_1002C1360((id *)(v0 + 280));
  sub_100096408(v0 + 40, v0 + 112, (uint64_t *)&unk_10090A4C0);
  sub_1001E828C(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 408);
  sub_1002B38D4(*(void *)(v0 + 360), v1, *(void *)(v0 + 368));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1002B38D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907260 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_100912968);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v37 = v7;
    uint64_t v19 = v18;
    char v39 = (void *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v40 = v36;
    uint64_t v41 = a3;
    *(_DWORD *)uint64_t v19 = 136446978;
    int v35 = v17;
    swift_getMetatypeMetadata();
    uint64_t v38 = v6;
    uint64_t v20 = String.init<A>(describing:)();
    os_log_t v34 = v15;
    uint64_t v41 = sub_1000C51B8(v20, v21, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2114;
    uint64_t v22 = *(void **)(a1 + 24);
    uint64_t v41 = (uint64_t)v22;
    id v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v39 = v22;
    swift_release_n();
    *(_WORD *)(v19 + 22) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    uint64_t v33 = v10;
    uint64_t v24 = v9;
    swift_bridgeObjectRetain();
    uint64_t v25 = Array.description.getter();
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    uint64_t v28 = v25;
    uint64_t v9 = v24;
    uint64_t v41 = sub_1000C51B8(v28, v27, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v6 = v38;
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 32) = 2050;
    Date.rem_elapsedInMilliseconds.getter();
    uint64_t v41 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v33);
    os_log_t v30 = v34;
    _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v35, "%{public}s: Finished execution {listObjectID: %{public}@, reminderIDs: %{public}s, elapsedSeconds: %{public}f}", (uint8_t *)v19, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v37;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  static os_signpost_type_t.end.getter();
  if (qword_100907268 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1002B3DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[42] = a3;
  v4[43] = v3;
  v4[40] = a1;
  v4[41] = a2;
  v4[44] = *v3;
  uint64_t v5 = type metadata accessor for Date();
  v4[45] = v5;
  v4[46] = *(void *)(v5 - 8);
  v4[47] = swift_task_alloc();
  sub_100094134((uint64_t *)&unk_10090FDF0);
  v4[48] = swift_task_alloc();
  sub_100094134(&qword_100912AA0);
  v4[49] = swift_task_alloc();
  v4[50] = sub_100094134((uint64_t *)&unk_100909E50);
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  v4[53] = swift_task_alloc();
  v4[54] = swift_task_alloc();
  v4[55] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[56] = v6;
  v4[57] = *(void *)(v6 - 8);
  v4[58] = swift_task_alloc();
  v4[59] = swift_task_alloc();
  v4[60] = swift_task_alloc();
  v4[61] = swift_task_alloc();
  v4[62] = swift_task_alloc();
  v4[63] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for REMTrialNamespace();
  v4[64] = v7;
  v4[65] = *(void *)(v7 - 8);
  v4[66] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Locale();
  v4[67] = v8;
  v4[68] = *(void *)(v8 - 8);
  v4[69] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[70] = v9;
  v4[71] = *(void *)(v9 - 8);
  v4[72] = swift_task_alloc();
  v4[73] = swift_task_alloc();
  return _swift_task_switch(sub_1002B4128, 0, 0);
}

uint64_t sub_1002B4128()
{
  uint64_t v24 = *(void *)(v0 + 584);
  uint64_t v22 = *(void *)(v0 + 352);
  uint64_t v23 = *(void *)(v0 + 568);
  uint64_t v1 = *(long long **)(v0 + 328);
  uint64_t v2 = *(void **)(v0 + 336);
  uint64_t v21 = *(void *)(v0 + 320);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 592) = v3;
  *(void *)(v3 + 16) = 0;
  uint64_t v4 = v3;
  uint64_t v20 = swift_allocObject();
  *(void *)(v0 + 60sub_10050ECB8((uint64_t)sub_100292128, 0) = v20;
  *(void *)(v20 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v19 = swift_allocObject();
  *(void *)(v0 + 608) = v19;
  *(void *)(v19 + 16) = 0;
  uint64_t v18 = swift_allocObject();
  *(void *)(v0 + 616) = v18;
  *(void *)(v18 + 16) = _swiftEmptyArrayStorage;
  uint64_t v25 = swift_allocObject();
  *(void *)(v0 + 624) = v25;
  *(void *)(v25 + 16) = _swiftEmptyArrayStorage;
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 632) = v5;
  *(void *)(v5 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v6 = *((void *)v1 + 3);
  *(void *)(v0 + 64sub_10050ECB8((uint64_t)sub_100292128, 0) = v6;
  uint64_t v7 = *((void *)v1 + 4);
  *(void *)(v0 + 648) = v7;
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  int v17 = *(void **)v1;
  *(void *)(v0 + 656) = *(void *)v1;
  sub_100096408((uint64_t)v1 + 8, v0 + 240, (uint64_t *)&unk_100914BC0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 664) = v9;
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v2;
  long long v11 = *v1;
  long long v10 = v1[1];
  *(_OWORD *)(v9 + 57) = *(long long *)((char *)v1 + 25);
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v10;
  *(void *)(v9 + 8sub_10050ECB8((uint64_t)sub_100292128, 0) = v4;
  *(void *)(v9 + 88) = v20;
  *(void *)(v9 + 96) = v19;
  *(void *)(v9 + 104) = v21;
  *(void *)(v9 + 112) = v25;
  *(void *)(v9 + 12sub_10050ECB8((uint64_t)sub_100292128, 0) = v5;
  *(void *)(v9 + 128) = v6;
  *(void *)(v9 + 136) = v7;
  *(void *)(v9 + 144) = v18;
  *(void *)(v9 + 152) = v22;
  *(_DWORD *)(v0 + 796) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v12 = *(void (**)(uint64_t))(v23 + 104);
  *(void *)(v0 + 672) = v12;
  *(void *)(v0 + 68sub_10050ECB8((uint64_t)sub_100292128, 0) = (v23 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v12(v24);
  swift_bridgeObjectRetain_n();
  id v13 = v2;
  id v14 = v17;
  sub_1002C1CD8((id *)(v0 + 240));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 688) = v15;
  void *v15 = v0;
  v15[1] = sub_1002B4440;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1002B4440()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 696) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[71] + 8))(v2[73], v2[70]);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = sub_1002B7BD0;
  }
  else
  {
    uint64_t v4 = v2[73];
    uint64_t v5 = v2[71];
    uint64_t v6 = v2[70];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v2[88] = v7;
    v2[89] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v4, v6);
    swift_release();
    uint64_t v3 = sub_1002B45D4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002B45D4()
{
  if (*(void *)(v0 + 648))
  {
    uint64_t v1 = *(void *)(v0 + 696);
    swift_bridgeObjectRetain_n();
    Locale.init(identifier:)();
    type metadata accessor for REMTrialClient();
    swift_allocObject();
    REMTrialClient.init()();
    if (v1)
    {
      swift_errorRelease();
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v3 = *(void *)(v0 + 528);
      uint64_t v4 = *(void *)(v0 + 520);
      uint64_t v5 = *(void *)(v0 + 512);
      (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for REMTrialNamespace.grocery(_:), v5);
      dispatch thunk of REMTrialClient.deploymentId(for:)();
      uint64_t v2 = v6;
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    }
    *(void *)(v0 + 72sub_10050ECB8((uint64_t)sub_100292128, 0) = v2;
    uint64_t v7 = sub_1002C90D0(*(unsigned char *)(*(void *)(v0 + 328) + 40) & 1, *(void *)(v0 + 344));
    *(void *)(v0 + 728) = v7;
    uint64_t v8 = (uint64_t)v7;
    uint64_t v9 = *(void *)(v0 + 648);
    uint64_t v10 = *(void *)(v0 + 616);
    uint64_t v11 = *(void *)(v0 + 344);
    swift_beginAccess();
    *(void *)(v0 + 232) = *(void *)(v10 + 16);
    swift_bridgeObjectRetain();
    sub_100094134(&qword_100912A90);
    sub_1000967F4(&qword_100912AA8, &qword_100912A90);
    uint64_t v12 = Sequence.mapToSet<A>(_:)();
    *(void *)(v0 + 736) = v12;
    swift_bridgeObjectRelease();
    uint64_t v13 = v11 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_classifierConfiguration;
    id v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 744) = v14;
    *id v14 = v0;
    v14[1] = sub_1002B6148;
    uint64_t v15 = *(void *)(v0 + 640);
    return sub_1002BA470(v12, v15, v9, v8, v13);
  }
  else
  {
    int v35 = *(void (**)(uint64_t, void, uint64_t))(v0 + 672);
    unsigned int v34 = *(_DWORD *)(v0 + 796);
    uint64_t v36 = *(void **)(v0 + 656);
    uint64_t v30 = *(void *)(v0 + 640);
    uint64_t v31 = *(void *)(v0 + 632);
    uint64_t v17 = *(void *)(v0 + 624);
    uint64_t v18 = *(void *)(v0 + 608);
    uint64_t v19 = *(void *)(v0 + 592);
    uint64_t v32 = *(void *)(v0 + 576);
    uint64_t v33 = *(void *)(v0 + 560);
    uint64_t v20 = *(void *)(v0 + 352);
    uint64_t v21 = *(long long **)(v0 + 328);
    uint64_t v22 = *(void **)(v0 + 336);
    uint64_t v23 = swift_allocObject();
    swift_weakInit();
    uint64_t v24 = swift_allocObject();
    *(void *)(v0 + 768) = v24;
    *(void *)(v24 + 16) = v23;
    *(void *)(v24 + 24) = v22;
    long long v26 = *v21;
    long long v25 = v21[1];
    *(_OWORD *)(v24 + 57) = *(long long *)((char *)v21 + 25);
    *(_OWORD *)(v24 + 32) = v26;
    *(_OWORD *)(v24 + 48) = v25;
    *(void *)(v24 + 8sub_10050ECB8((uint64_t)sub_100292128, 0) = v30;
    *(void *)(v24 + 88) = 0;
    *(void *)(v24 + 96) = _swiftEmptyDictionarySingleton;
    *(void *)(v24 + 104) = v17;
    *(void *)(v24 + 112) = v19;
    *(void *)(v24 + 12sub_10050ECB8((uint64_t)sub_100292128, 0) = v31;
    *(void *)(v24 + 128) = v18;
    *(void *)(v24 + 136) = v20;
    v35(v32, v34, v33);
    swift_bridgeObjectRetain();
    id v27 = v22;
    id v28 = v36;
    sub_1002C1CD8((id *)(v0 + 240));
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 776) = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_1002B7890;
    return NSManagedObjectContext.perform<A>(schedule:_:)();
  }
}

uint64_t sub_1002B6148(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 752) = a1;
  *(void *)(v3 + 76sub_10050ECB8((uint64_t)sub_100292128, 0) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_1002B7D70;
  }
  else {
    uint64_t v4 = sub_1002B62B8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002B62B8()
{
  uint64_t v229 = v0;
  unint64_t v1 = *(void *)(v0 + 752);
  if (!v1) {
    unint64_t v1 = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v2 = *(void *)(v0 + 616);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 16);
  if (*(void *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v0 + 544);
    uint64_t v5 = *(void *)(v0 + 456);
    uint64_t v220 = *(void *)(v3 + 16);
    uint64_t v6 = *(void *)(v0 + 368);
    uint64_t v202 = *(void *)(v0 + 344);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v193 = (void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    uint64_t v200 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
    unint64_t v196 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    int v208 = (void (**)(uint64_t, uint64_t))(v5 + 8);
    id v198 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
    unint64_t v199 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v190 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v7 = v220;
    uint64_t v197 = v5;
    unsigned __int16 v210 = (void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    uint64_t v8 = (uint64_t *)(v3 + 48);
    int v203 = _swiftEmptyDictionarySingleton;
    *(void *)&long long v9 = 136447234;
    long long v189 = v9;
    uint64_t v204 = v1;
    while (1)
    {
      uint64_t v12 = *(void *)(v0 + 592);
      uint64_t v13 = *(v8 - 1);
      uint64_t v14 = *v8;
      id v15 = (id)*(v8 - 2);
      swift_bridgeObjectRetain();
      id v16 = [v15 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = *(void **)(v12 + 16);
      uint64_t v227 = v15;
      if (!v17)
      {
        swift_bridgeObjectRetain();
        id v25 = 0;
        goto LABEL_18;
      }
      uint64_t v216 = v13;
      swift_bridgeObjectRetain();
      id v18 = [v17 membershipByMemberIdentifier];
      sub_1000963CC(0, (unint64_t *)&qword_10090C160);
      sub_1002CDE64((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (!*(void *)(v19 + 16))
      {
        swift_bridgeObjectRelease();
        id v25 = 0;
        uint64_t v13 = v216;
        goto LABEL_18;
      }
      unint64_t v20 = sub_100306EC4(*(void *)(v0 + 504));
      uint64_t v13 = v216;
      if ((v21 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_17:
        id v25 = 0;
        goto LABEL_18;
      }
      uint64_t v22 = *(void *)(v0 + 600);
      NSString v201 = *(void **)(*(void *)(v19 + 56) + 8 * v20);
      id v23 = v201;
      swift_bridgeObjectRelease();
      if (!v23) {
        goto LABEL_17;
      }
      uint64_t v206 = v14;
      uint64_t v24 = *(void *)(v22 + 16);
      swift_bridgeObjectRetain();
      id v25 = v23;
      id v26 = [v25 groupIdentifier];
      id v212 = v8;
      if (!v26)
      {
        uint64_t v33 = *v200;
        (*v200)(*(void *)(v0 + 440), 1, 1, *(void *)(v0 + 448));
        goto LABEL_35;
      }
      id v27 = v26;
      uint64_t v28 = v7;
      uint64_t v29 = *(void *)(v0 + 488);
      uint64_t v31 = *(void *)(v0 + 440);
      uint64_t v30 = *(void *)(v0 + 448);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v32 = *v193;
      (*v193)(v31, v29, v30);
      uint64_t v33 = *v200;
      (*v200)(v31, 0, 1, v30);
      if ((*v196)(v31, 1, v30) == 1)
      {
        uint64_t v7 = v28;
LABEL_35:
        uint64_t v86 = *(void *)(v0 + 440);

        sub_1000966BC(v86, (uint64_t *)&unk_100909E50);
        swift_bridgeObjectRelease();
LABEL_36:
        id v87 = [v25 groupIdentifier:v189];
        uint64_t v223 = v7;
        id v225 = v25;
        if (v87)
        {
          id v88 = v87;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v89 = 0;
        }
        else
        {
          uint64_t v89 = 1;
        }
        uint64_t v90 = *(void *)(v0 + 608);
        uint64_t v91 = *(void *)(v0 + 600);
        uint64_t v92 = *(void *)(v0 + 552);
        uint64_t v93 = *(void *)(v0 + 536);
        uint64_t v95 = *(void *)(v0 + 424);
        uint64_t v94 = *(void *)(v0 + 432);
        uint64_t v96 = *(void *)(v0 + 384);
        v33(v95, v89, 1, *(void *)(v0 + 448));
        sub_100096408(v95, v94, (uint64_t *)&unk_100909E50);
        NSString v97 = *(void **)(v90 + 16);
        uint64_t v98 = *(void *)(v91 + 16);
        uint64_t v99 = *v199;
        (*v199)(v96, v92, v93);
        unint64_t v100 = *v198;
        (*v198)(v96, 0, 1, v93);
        id v101 = v97;
        unint64_t v1 = v204;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        LOBYTE(v97) = sub_1002C94F8(v97, v204, v201, v98, v96, v216, v206);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        sub_1000966BC(v96, (uint64_t *)&unk_10090FDF0);
        char v194 = (char)v97;
        if (v97)
        {
          uint64_t v102 = *(void *)(v0 + 552);
          uint64_t v103 = *(void *)(v0 + 536);
          uint64_t v104 = *(void *)(v0 + 448);
          uint64_t v105 = *(void *)(v0 + 432);
          uint64_t v106 = *(void *)(v0 + 416);
          uint64_t v107 = *(void *)(v0 + 384);
          *(void *)(v0 + 184) = v216;
          *(void *)(v0 + 192) = v206;
          v99(v107, v102, v103);
          v100(v107, 0, 1, v103);
          sub_1000E4FD8();
          uint64_t v108 = StringProtocol.lowercased(with:)();
          uint64_t v110 = v109;
          sub_1000966BC(v107, (uint64_t *)&unk_10090FDF0);
          sub_1001248EC(v105, v106);
          static Date.now.getter();
          if ((*v196)(v106, 1, v104) == 1)
          {
            Class isa = 0;
          }
          else
          {
            uint64_t v119 = *(void *)(v0 + 448);
            uint64_t v120 = *(void *)(v0 + 416);
            Class isa = UUID._bridgeToObjectiveC()().super.isa;
            (*v208)(v120, v119);
          }
          uint64_t v121 = *(void *)(v0 + 376);
          uint64_t v122 = *(void *)(v0 + 360);
          id v123 = objc_allocWithZone((Class)REMTimestampedUUID);
          Class v124 = Date._bridgeToObjectiveC()().super.isa;
          id v125 = [v123 initWithIdentifier:isa modifiedOn:v124];

          (*v190)(v121, v122);
          swift_beginAccess();
          if (v125)
          {
            uint64_t v126 = *(void *)(v0 + 632);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v228[0] = *(void *)(v126 + 16);
            *(void *)(v126 + 16) = 0x8000000000000000;
            sub_1002C7E78((uint64_t)v125, v108, v110, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_10031AD14, (void (*)(void))sub_100312CE4);
            *(void *)(v126 + 16) = v228[0];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v1 = v204;
            unint64_t v128 = v206;
          }
          else
          {
            swift_bridgeObjectRetain();
            unint64_t v129 = sub_1001806F8(v108, v110);
            char v131 = v130;
            swift_bridgeObjectRelease();
            unint64_t v1 = v204;
            unint64_t v128 = v206;
            if (v131)
            {
              uint64_t v132 = *(void *)(v0 + 632);
              char v133 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v134 = *(void *)(v132 + 16);
              v228[0] = v134;
              *(void *)(v132 + 16) = 0x8000000000000000;
              if ((v133 & 1) == 0)
              {
                sub_10031AD14();
                uint64_t v134 = v228[0];
              }
              uint64_t v135 = *(void *)(v0 + 632);
              swift_bridgeObjectRelease();
              uint64_t v136 = *(void **)(*(void *)(v134 + 56) + 8 * v129);
              sub_1002C1DD0(v129, v134);
              *(void *)(v135 + 16) = v134;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          unint64_t v141 = *(void *)(v0 + 648);
          uint64_t v142 = *(void *)(v0 + 640);
          uint64_t v143 = *(void *)(v0 + 600);
          uint64_t v144 = *(void *)(v0 + 432);
          swift_endAccess();
          unint64_t v145 = *(void *)(v143 + 16);
          swift_bridgeObjectRetain();
          sub_1002CA2E8(v216, v128, v201, v145, v144, v142, v141);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        if (qword_100907260 != -1) {
          swift_once();
        }
        uint64_t v146 = *(void *)(v0 + 504);
        uint64_t v147 = *(void *)(v0 + 464);
        uint64_t v148 = *(void *)(v0 + 448);
        uint64_t v149 = *(void *)(v0 + 432);
        uint64_t v150 = *(void *)(v0 + 408);
        uint64_t v151 = type metadata accessor for Logger();
        sub_10008E2DC(v151, (uint64_t)qword_100912968);
        (*v210)(v147, v146, v148);
        sub_1001248EC(v149, v150);
        swift_retain_n();
        uint64_t v152 = Logger.logObject.getter();
        os_log_type_t v153 = static os_log_type_t.default.getter();
        BOOL v154 = os_log_type_enabled(v152, v153);
        uint64_t v155 = *(void *)(v0 + 504);
        uint64_t v156 = *(void *)(v0 + 464);
        uint64_t v157 = *(void *)(v0 + 448);
        uint64_t v218 = *(void *)(v0 + 432);
        uint64_t v158 = *(void *)(v0 + 408);
        if (v154)
        {
          uint64_t v159 = *(void *)(v0 + 352);
          uint64_t v192 = *(void *)(v0 + 408);
          uint64_t v160 = swift_slowAlloc();
          id v191 = (void *)swift_slowAlloc();
          v228[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v160 = v189;
          *(void *)(v0 + 296) = v159;
          swift_getMetatypeMetadata();
          uint64_t v161 = String.init<A>(describing:)();
          *(void *)(v0 + 20sub_10050ECB8((uint64_t)sub_100292128, 0) = sub_1000C51B8(v161, v162, v228);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v160 + 12) = 2114;
          uint64_t v163 = *(void **)(v202 + 24);
          *(void *)(v0 + 208) = v163;
          id v164 = v163;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v191 = v163;
          swift_release_n();
          *(_WORD *)(v160 + 22) = 2082;
          sub_1002CDE64((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v165 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 216) = sub_1000C51B8(v165, v166, v228);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          os_log_type_t v167 = *v208;
          (*v208)(v156, v157);
          *(_WORD *)(v160 + 32) = 2082;
          uint64_t v168 = Optional.descriptionOrNil.getter();
          *(void *)(v0 + 224) = sub_1000C51B8(v168, v169, v228);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000966BC(v192, (uint64_t *)&unk_100909E50);
          *(_WORD *)(v160 + 42) = 1026;
          *(_DWORD *)(v0 + 792) = v194 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v152, v153, "%{public}s: Skipped auto-categorizing reminder {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionIdentifier: %{public}s, hasUpdatedGroceryLocalCorrections: %{BOOL,public}d}", (uint8_t *)v160, 0x30u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_bridgeObjectRelease();
          sub_1000966BC(v218, (uint64_t *)&unk_100909E50);
          v167(v155, v157);
          uint64_t v11 = v223;
          unint64_t v1 = v204;
          uint64_t v8 = v212;
        }
        else
        {

          swift_bridgeObjectRelease();
          sub_1000966BC(v158, (uint64_t *)&unk_100909E50);
          uint64_t v170 = *v208;
          (*v208)(v156, v157);
          swift_release_n();

          sub_1000966BC(v218, (uint64_t *)&unk_100909E50);
          v170(v155, v157);
          uint64_t v8 = v212;
          uint64_t v11 = v223;
        }
        goto LABEL_6;
      }
      v32(*(void *)(v0 + 496), *(void *)(v0 + 440), *(void *)(v0 + 448));
      if (!*(void *)(v24 + 16)) {
        break;
      }
      unint64_t v112 = sub_100306EC4(*(void *)(v0 + 496));
      uint64_t v113 = *(void *)(v0 + 392);
      if ((v114 & 1) == 0) {
        goto LABEL_53;
      }
      unint64_t v115 = v112;
      uint64_t v195 = *(void *)(v24 + 56);
      uint64_t v116 = _s31ThreadSafePartialRepresentationVMa(0);
      id v117 = v25;
      uint64_t v118 = *(void *)(v116 - 8);
      sub_1002CAB18(v195 + *(void *)(v118 + 72) * v115, v113);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v118 + 56))(v113, 0, 1, v116);
      id v25 = v117;
LABEL_54:
      uint64_t v137 = *(void *)(v0 + 496);
      uint64_t v138 = *(void *)(v0 + 448);
      uint64_t v139 = *(void *)(v0 + 392);

      (*v208)(v137, v138);
      _s31ThreadSafePartialRepresentationVMa(0);
      int v140 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 48))(v139, 1, v116);
      sub_1000966BC(v139, &qword_100912AA0);
      swift_bridgeObjectRelease();
      uint64_t v7 = v28;
      uint64_t v8 = v212;
      uint64_t v13 = v216;
      if (v140 != 1) {
        goto LABEL_36;
      }
      unint64_t v1 = v204;
      uint64_t v14 = v206;
LABEL_18:
      os_log_t v224 = v25;
      if (!*(void *)(v1 + 16) || (unint64_t v34 = sub_1001806F8(v13, v14), (v35 & 1) == 0))
      {
        uint64_t v61 = v7;
        swift_bridgeObjectRelease();
        if (qword_100907260 != -1) {
          swift_once();
        }
        uint64_t v62 = *(void *)(v0 + 504);
        uint64_t v63 = *(void *)(v0 + 472);
        uint64_t v64 = *(void *)(v0 + 448);
        uint64_t v65 = type metadata accessor for Logger();
        sub_10008E2DC(v65, (uint64_t)qword_100912968);
        (*v210)(v63, v62, v64);
        swift_retain_n();
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.default.getter();
        BOOL v68 = os_log_type_enabled(v66, v67);
        uint64_t v217 = *(void *)(v0 + 504);
        uint64_t v69 = *(void *)(v0 + 472);
        uint64_t v70 = *(void *)(v0 + 448);
        if (v68)
        {
          unint64_t v214 = v8;
          uint64_t v71 = *(void *)(v0 + 352);
          uint64_t v72 = swift_slowAlloc();
          uint64_t v222 = v61;
          unint64_t v73 = (void *)swift_slowAlloc();
          v228[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v72 = 136446722;
          *(void *)(v0 + 248) = v71;
          swift_getMetatypeMetadata();
          uint64_t v74 = String.init<A>(describing:)();
          *(void *)(v72 + 4) = sub_1000C51B8(v74, v75, v228);
          swift_bridgeObjectRelease();
          *(_WORD *)(v72 + 12) = 2114;
          uint64_t v76 = *(void **)(v202 + 24);
          *(void *)(v72 + 14) = v76;
          *unint64_t v73 = v76;
          id v77 = v76;
          swift_release_n();
          *(_WORD *)(v72 + 22) = 2082;
          sub_1002CDE64((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v72 + 24) = sub_1000C51B8(v78, v79, v228);
          swift_bridgeObjectRelease();
          os_log_type_t v80 = *v208;
          (*v208)(v69, v70);
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "%{public}s: Did not auto-categorize reminder due to grocery classifier having 0 predication for reminder title {listObjectID: %{public}@, reminderIdentifier: %{public}s}", (uint8_t *)v72, 0x20u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          uint64_t v11 = v222;
          swift_slowDealloc();
          swift_arrayDestroy();
          unint64_t v1 = v204;
          swift_slowDealloc();
          swift_slowDealloc();

          swift_bridgeObjectRelease();
          v80(v217, v70);
          uint64_t v8 = v214;
        }
        else
        {

          swift_bridgeObjectRelease();
          uint64_t v10 = *v208;
          (*v208)(v69, v70);
          swift_release_n();

          v10(v217, v70);
          uint64_t v11 = v61;
          unint64_t v1 = v204;
        }
        goto LABEL_6;
      }
      uint64_t v221 = v7;
      uint64_t v213 = v8;
      uint64_t v36 = *(void *)(v0 + 504);
      uint64_t v37 = *(void *)(v0 + 480);
      uint64_t v38 = *(void *)(v0 + 448);
      char v39 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v34);
      uint64_t v41 = *v39;
      uint64_t v40 = v39[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      unsigned __int8 v42 = *v210;
      (*v210)(v37, v36, v38);
      unsigned __int8 v43 = v203;
      int v44 = swift_isUniquelyReferenced_nonNull_native();
      v228[0] = (uint64_t)v203;
      unint64_t v46 = sub_100306EC4(v37);
      uint64_t v47 = v203[2];
      BOOL v48 = (v45 & 1) == 0;
      uint64_t v49 = v47 + v48;
      if (__OFADD__(v47, v48))
      {
        __break(1u);
LABEL_73:
        __break(1u);
        return NSManagedObjectContext.perform<A>(schedule:_:)();
      }
      char v50 = v45;
      if (v203[3] >= v49)
      {
        if (v44)
        {
          if ((v45 & 1) == 0) {
            goto LABEL_24;
          }
        }
        else
        {
          sub_10031AD20();
          unsigned __int8 v43 = (void *)v228[0];
          int v203 = (void *)v228[0];
          if ((v50 & 1) == 0) {
            goto LABEL_24;
          }
        }
      }
      else
      {
        uint64_t v51 = *(void *)(v0 + 480);
        sub_100312CF0(v49, v44);
        uint64_t v52 = v228[0];
        unint64_t v53 = sub_100306EC4(v51);
        if ((v50 & 1) != (v54 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v46 = v53;
        unsigned __int8 v43 = (void *)v52;
        int v203 = (void *)v52;
        if ((v50 & 1) == 0)
        {
LABEL_24:
          uint64_t v55 = *(void *)(v0 + 480);
          uint64_t v56 = *(void *)(v0 + 448);
          v43[(v46 >> 6) + 8] |= 1 << v46;
          v42(v43[6] + *(void *)(v197 + 72) * v46, v55, v56);
          uint64_t v57 = (void *)(v43[7] + 16 * v46);
          *uint64_t v57 = v41;
          v57[1] = v40;
          uint64_t v58 = v43[2];
          BOOL v59 = __OFADD__(v58, 1);
          uint64_t v60 = v58 + 1;
          if (v59) {
            goto LABEL_73;
          }
          v43[2] = v60;
          goto LABEL_33;
        }
      }
      uint64_t v81 = (void *)(v43[7] + 16 * v46);
      swift_bridgeObjectRelease();
      *uint64_t v81 = v41;
      v81[1] = v40;
LABEL_33:
      uint64_t v82 = *(void *)(v0 + 504);
      uint64_t v83 = *(void *)(v0 + 480);
      uint64_t v84 = *(void *)(v0 + 448);
      swift_bridgeObjectRelease();
      Swift::String v85 = *v208;
      (*v208)(v83, v84);

      swift_bridgeObjectRelease();
      v85(v82, v84);
      uint64_t v8 = v213;
      uint64_t v11 = v221;
LABEL_6:
      v8 += 3;
      uint64_t v7 = v11 - 1;
      if (!v7) {
        goto LABEL_66;
      }
    }
    uint64_t v113 = *(void *)(v0 + 392);
LABEL_53:
    uint64_t v116 = _s31ThreadSafePartialRepresentationVMa(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v113, 1, 1, v116);
    goto LABEL_54;
  }
  swift_bridgeObjectRetain();
  int v203 = _swiftEmptyDictionarySingleton;
LABEL_66:
  uint64_t v171 = *(void *)(v0 + 552);
  uint64_t v172 = *(void *)(v0 + 544);
  uint64_t v173 = *(void *)(v0 + 536);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v171, v173);
  id v219 = *(void (**)(uint64_t, void, uint64_t))(v0 + 672);
  unsigned int v215 = *(_DWORD *)(v0 + 796);
  char v226 = *(void **)(v0 + 656);
  uint64_t v174 = *(void *)(v0 + 648);
  uint64_t v205 = *(void *)(v0 + 640);
  uint64_t v207 = *(void *)(v0 + 632);
  uint64_t v175 = *(void *)(v0 + 624);
  uint64_t v176 = *(void *)(v0 + 608);
  uint64_t v177 = *(void *)(v0 + 592);
  uint64_t v209 = *(void *)(v0 + 576);
  uint64_t v211 = *(void *)(v0 + 560);
  uint64_t v178 = *(void *)(v0 + 352);
  NSString v180 = *(long long **)(v0 + 328);
  uint64_t v179 = *(void **)(v0 + 336);
  uint64_t v181 = swift_allocObject();
  swift_weakInit();
  uint64_t v182 = swift_allocObject();
  *(void *)(v0 + 768) = v182;
  *(void *)(v182 + 16) = v181;
  *(void *)(v182 + 24) = v179;
  long long v184 = *v180;
  long long v183 = v180[1];
  *(_OWORD *)(v182 + 57) = *(long long *)((char *)v180 + 25);
  *(_OWORD *)(v182 + 32) = v184;
  *(_OWORD *)(v182 + 48) = v183;
  *(void *)(v182 + 8sub_10050ECB8((uint64_t)sub_100292128, 0) = v205;
  *(void *)(v182 + 88) = v174;
  *(void *)(v182 + 96) = v203;
  *(void *)(v182 + 104) = v175;
  *(void *)(v182 + 112) = v177;
  *(void *)(v182 + 12sub_10050ECB8((uint64_t)sub_100292128, 0) = v207;
  *(void *)(v182 + 128) = v176;
  *(void *)(v182 + 136) = v178;
  v219(v209, v215, v211);
  swift_bridgeObjectRetain();
  id v185 = v179;
  id v186 = v226;
  sub_1002C1CD8((id *)(v0 + 240));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v187 = (void *)swift_task_alloc();
  *(void *)(v0 + 776) = v187;
  *uint64_t v187 = v0;
  v187[1] = sub_1002B7890;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1002B7890()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 784) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 704))(*(void *)(v2 + 576), *(void *)(v2 + 560));
  swift_release();
  if (v0) {
    uint64_t v3 = sub_1002B96FC;
  }
  else {
    uint64_t v3 = sub_1002B7A1C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002B7A1C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002B7BD0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002B7D70()
{
  uint64_t v246 = v0;
  if (qword_100907260 != -1) {
LABEL_76:
  }
    swift_once();
  uint64_t v223 = type metadata accessor for Logger();
  sub_10008E2DC(v223, (uint64_t)qword_100912968);
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v219 = *(void *)(v0 + 648);
    uint64_t v224 = *(void *)(v0 + 640);
    os_log_type_t v238 = v2;
    uint64_t v4 = *(void *)(v0 + 344);
    uint64_t v3 = *(void *)(v0 + 352);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v221 = (void *)swift_slowAlloc();
    v245[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136447234;
    *(void *)(v0 + 312) = v3;
    swift_getMetatypeMetadata();
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 256) = sub_1000C51B8(v6, v7, v245);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2114;
    uint64_t v8 = *(void **)(v4 + 24);
    *(void *)(v0 + 264) = v8;
    id v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v221 = v8;
    swift_release_n();
    *(_WORD *)(v5 + 22) = 2082;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_bridgeObjectRetain();
    uint64_t v10 = Array.description.getter();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 272) = sub_1000C51B8(v10, v12, v245);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 32) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 28sub_10050ECB8((uint64_t)sub_100292128, 0) = sub_1000C51B8(v224, v219, v245);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 42) = 2082;
    swift_getErrorValue();
    uint64_t v13 = Error.rem_errorDescription.getter();
    *(void *)(v0 + 304) = sub_1000C51B8(v13, v14, v245);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v238, "%{public}s: Failed to predict categories of reminder titles {listObjectID: %{public}@, reminderIDs: %{public}s, groceryLocaleID: %{public}s, error: %{public}s}", (uint8_t *)v5, 0x34u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  unint64_t v231 = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease();
  uint64_t v15 = *(void *)(v0 + 616);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v18 = *(void *)(v0 + 544);
    uint64_t v19 = *(void *)(v0 + 456);
    uint64_t v20 = *(void *)(v0 + 368);
    uint64_t v220 = *(void *)(v0 + 344);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    unsigned __int16 v210 = (void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32);
    uint64_t v217 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    uint64_t v211 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
    uint64_t v227 = (void (**)(uint64_t, uint64_t))(v19 + 8);
    uint64_t v213 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56);
    unint64_t v214 = (void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    uint64_t v204 = (void (**)(uint64_t, uint64_t))(v20 + 8);
    uint64_t v21 = v17;
    uint64_t v212 = v19;
    uint64_t v229 = (void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    uint64_t v22 = (uint64_t *)(v16 + 48);
    uint64_t v222 = _swiftEmptyDictionarySingleton;
    *(void *)&long long v23 = 136447234;
    long long v203 = v23;
    unint64_t v24 = v231;
    while (1)
    {
      uint64_t v26 = *(void *)(v0 + 592);
      uint64_t v27 = *(v22 - 1);
      uint64_t v28 = *v22;
      id v29 = (id)*(v22 - 2);
      swift_bridgeObjectRetain();
      id v30 = [v29 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v31 = *(void **)(v26 + 16);
      if (v31)
      {
        swift_bridgeObjectRetain();
        id v32 = [v31 membershipByMemberIdentifier];
        sub_1000963CC(0, (unint64_t *)&qword_10090C160);
        sub_1002CDE64((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(void *)(v33 + 16) && (unint64_t v34 = sub_100306EC4(*(void *)(v0 + 504)), (v35 & 1) != 0))
        {
          uint64_t v36 = *(void *)(v0 + 600);
          uint64_t v233 = *(void **)(*(void *)(v33 + 56) + 8 * v34);
          id v37 = v233;
          swift_bridgeObjectRelease();
          if (v37)
          {
            os_log_type_t v239 = v29;
            uint64_t v38 = *(void *)(v36 + 16);
            swift_bridgeObjectRetain();
            id v39 = v37;
            id v40 = [v39 groupIdentifier];
            uint64_t v218 = v27;
            unint64_t v225 = v28;
            unint64_t v244 = v39;
            if (!v40)
            {
              unsigned int v215 = *v217;
              (*v217)(*(void *)(v0 + 440), 1, 1, *(void *)(v0 + 448));
LABEL_30:
              uint64_t v70 = *(void *)(v0 + 440);

              sub_1000966BC(v70, (uint64_t *)&unk_100909E50);
              swift_bridgeObjectRelease();
LABEL_31:
              id v71 = [v39 groupIdentifier:v203];
              uint64_t v241 = v21;
              uint64_t v236 = v22;
              if (v71)
              {
                uint64_t v72 = v71;
                uint64_t v73 = v28;
                static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v74 = 0;
              }
              else
              {
                uint64_t v73 = v28;
                uint64_t v74 = 1;
              }
              uint64_t v75 = *(void *)(v0 + 608);
              uint64_t v76 = *(void *)(v0 + 600);
              uint64_t v77 = *(void *)(v0 + 552);
              uint64_t v78 = *(void *)(v0 + 536);
              uint64_t v80 = *(void *)(v0 + 424);
              uint64_t v79 = *(void *)(v0 + 432);
              uint64_t v81 = *(void *)(v0 + 384);
              v215(v80, v74, 1, *(void *)(v0 + 448));
              sub_100096408(v80, v79, (uint64_t *)&unk_100909E50);
              uint64_t v82 = *(void **)(v75 + 16);
              uint64_t v83 = *(void *)(v76 + 16);
              uint64_t v84 = *v214;
              (*v214)(v81, v77, v78);
              Swift::String v85 = *v213;
              (*v213)(v81, 0, 1, v78);
              id v86 = v82;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v87 = v73;
              char v88 = sub_1002C94F8(v82, v231, v233, v83, v81, v218, v73);

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000966BC(v81, (uint64_t *)&unk_10090FDF0);
              char v216 = v88;
              if (v88)
              {
                uint64_t v89 = *(void *)(v0 + 552);
                uint64_t v90 = *(void *)(v0 + 536);
                uint64_t v91 = *(void *)(v0 + 448);
                uint64_t v92 = *(void *)(v0 + 432);
                uint64_t v93 = *(void *)(v0 + 416);
                uint64_t v94 = *(void *)(v0 + 384);
                *(void *)(v0 + 184) = v218;
                *(void *)(v0 + 192) = v87;
                v84(v94, v89, v90);
                v85(v94, 0, 1, v90);
                sub_1000E4FD8();
                uint64_t v208 = StringProtocol.lowercased(with:)();
                uint64_t v96 = v95;
                sub_1000966BC(v94, (uint64_t *)&unk_10090FDF0);
                sub_1001248EC(v92, v93);
                static Date.now.getter();
                if ((*v211)(v93, 1, v91) == 1)
                {
                  Class isa = 0;
                }
                else
                {
                  uint64_t v105 = *(void *)(v0 + 448);
                  uint64_t v106 = *(void *)(v0 + 416);
                  Class isa = UUID._bridgeToObjectiveC()().super.isa;
                  (*v227)(v106, v105);
                }
                uint64_t v107 = *(void *)(v0 + 376);
                uint64_t v108 = *(void *)(v0 + 360);
                id v109 = objc_allocWithZone((Class)REMTimestampedUUID);
                Class v110 = Date._bridgeToObjectiveC()().super.isa;
                id v111 = [v109 initWithIdentifier:isa modifiedOn:v110];

                (*v204)(v107, v108);
                swift_beginAccess();
                if (v111)
                {
                  uint64_t v112 = *(void *)(v0 + 632);
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  v245[0] = *(void *)(v112 + 16);
                  *(void *)(v112 + 16) = 0x8000000000000000;
                  sub_1002C7E78((uint64_t)v111, v208, v96, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_10031AD14, (void (*)(void))sub_100312CE4);
                  *(void *)(v112 + 16) = v245[0];
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v114 = v218;
                }
                else
                {
                  swift_bridgeObjectRetain();
                  unint64_t v115 = sub_1001806F8(v208, v96);
                  char v117 = v116;
                  swift_bridgeObjectRelease();
                  uint64_t v114 = v218;
                  if (v117)
                  {
                    uint64_t v118 = *(void *)(v0 + 632);
                    char v119 = swift_isUniquelyReferenced_nonNull_native();
                    uint64_t v120 = *(void *)(v118 + 16);
                    v245[0] = v120;
                    *(void *)(v118 + 16) = 0x8000000000000000;
                    if ((v119 & 1) == 0)
                    {
                      sub_10031AD14();
                      uint64_t v120 = v245[0];
                    }
                    uint64_t v121 = *(void *)(v0 + 632);
                    swift_bridgeObjectRelease();
                    uint64_t v122 = *(void **)(*(void *)(v120 + 56) + 8 * v115);
                    sub_1002C1DD0(v115, v120);
                    *(void *)(v121 + 16) = v120;

                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRelease();
                }
                unint64_t v145 = *(void *)(v0 + 648);
                uint64_t v146 = *(void *)(v0 + 640);
                uint64_t v147 = *(void *)(v0 + 600);
                uint64_t v148 = *(void *)(v0 + 432);
                swift_endAccess();
                unint64_t v149 = *(void *)(v147 + 16);
                swift_bridgeObjectRetain();
                sub_1002CA2E8(v114, v225, v233, v149, v148, v146, v145);
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              if (qword_100907260 != -1) {
                swift_once();
              }
              uint64_t v150 = *(void *)(v0 + 504);
              uint64_t v151 = *(void *)(v0 + 464);
              uint64_t v152 = *(void *)(v0 + 448);
              uint64_t v153 = *(void *)(v0 + 432);
              uint64_t v154 = *(void *)(v0 + 408);
              sub_10008E2DC(v223, (uint64_t)qword_100912968);
              (*v229)(v151, v150, v152);
              sub_1001248EC(v153, v154);
              swift_retain_n();
              uint64_t v155 = Logger.logObject.getter();
              os_log_type_t v156 = static os_log_type_t.default.getter();
              BOOL v157 = os_log_type_enabled(v155, v156);
              uint64_t v158 = *(void *)(v0 + 504);
              uint64_t v159 = *(void *)(v0 + 464);
              uint64_t v160 = *(void *)(v0 + 448);
              uint64_t v161 = *(void *)(v0 + 432);
              uint64_t v162 = *(void *)(v0 + 408);
              if (v157)
              {
                log = v155;
                uint64_t v163 = *(void *)(v0 + 352);
                os_log_type_t type = v156;
                uint64_t v164 = swift_slowAlloc();
                uint64_t v205 = (void *)swift_slowAlloc();
                v245[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v164 = v203;
                *(void *)(v0 + 296) = v163;
                swift_getMetatypeMetadata();
                uint64_t v165 = String.init<A>(describing:)();
                *(void *)(v0 + 20sub_10050ECB8((uint64_t)sub_100292128, 0) = sub_1000C51B8(v165, v166, v245);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v164 + 12) = 2114;
                uint64_t v209 = v161;
                os_log_type_t v167 = *(void **)(v220 + 24);
                *(void *)(v0 + 208) = v167;
                id v168 = v167;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *uint64_t v205 = v167;
                swift_release_n();
                *(_WORD *)(v164 + 22) = 2082;
                sub_1002CDE64((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
                uint64_t v169 = dispatch thunk of CustomStringConvertible.description.getter();
                *(void *)(v0 + 216) = sub_1000C51B8(v169, v170, v245);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                uint64_t v171 = *v227;
                (*v227)(v159, v160);
                *(_WORD *)(v164 + 32) = 2082;
                uint64_t v172 = Optional.descriptionOrNil.getter();
                *(void *)(v0 + 224) = sub_1000C51B8(v172, v173, v245);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_1000966BC(v162, (uint64_t *)&unk_100909E50);
                *(_WORD *)(v164 + 42) = 1026;
                *(_DWORD *)(v0 + 792) = v216 & 1;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: Skipped auto-categorizing reminder {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionIdentifier: %{public}s, hasUpdatedGroceryLocalCorrections: %{BOOL,public}d}", (uint8_t *)v164, 0x30u);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                swift_bridgeObjectRelease();
                sub_1000966BC(v209, (uint64_t *)&unk_100909E50);
                v171(v158, v160);
                unint64_t v24 = v231;
                uint64_t v21 = v241;
                uint64_t v22 = v236;
                goto LABEL_9;
              }
              swift_bridgeObjectRelease();

              sub_1000966BC(v162, (uint64_t *)&unk_100909E50);
              uint64_t v174 = *v227;
              (*v227)(v159, v160);

              swift_release_n();
              sub_1000966BC(v161, (uint64_t *)&unk_100909E50);
              v174(v158, v160);
              uint64_t v21 = v241;
              goto LABEL_66;
            }
            uint64_t v41 = v40;
            unsigned __int8 v42 = v22;
            uint64_t v43 = *(void *)(v0 + 488);
            uint64_t v45 = *(void *)(v0 + 440);
            uint64_t v44 = *(void *)(v0 + 448);
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            unint64_t v46 = *v210;
            (*v210)(v45, v43, v44);
            unsigned int v215 = *v217;
            (*v217)(v45, 0, 1, v44);
            if ((*v211)(v45, 1, v44) == 1)
            {
              uint64_t v22 = v42;
              goto LABEL_30;
            }
            v46(*(void *)(v0 + 496), *(void *)(v0 + 440), *(void *)(v0 + 448));
            if (*(void *)(v38 + 16))
            {
              unint64_t v98 = sub_100306EC4(*(void *)(v0 + 496));
              uint64_t v99 = *(void *)(v0 + 392);
              if (v100)
              {
                unint64_t v101 = v98;
                uint64_t v102 = *(void *)(v38 + 56);
                uint64_t v103 = _s31ThreadSafePartialRepresentationVMa(0);
                uint64_t v104 = *(void *)(v103 - 8);
                sub_1002CAB18(v102 + *(void *)(v104 + 72) * v101, v99);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v99, 0, 1, v103);
                goto LABEL_49;
              }
            }
            else
            {
              uint64_t v99 = *(void *)(v0 + 392);
            }
            uint64_t v103 = _s31ThreadSafePartialRepresentationVMa(0);
            uint64_t v104 = *(void *)(v103 - 8);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v104 + 56))(v99, 1, 1, v103);
LABEL_49:
            uint64_t v123 = *(void *)(v0 + 496);
            uint64_t v124 = *(void *)(v0 + 448);
            uint64_t v125 = *(void *)(v0 + 392);

            (*v227)(v123, v124);
            _s31ThreadSafePartialRepresentationVMa(0);
            int v126 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v125, 1, v103);
            sub_1000966BC(v125, &qword_100912AA0);
            swift_bridgeObjectRelease();
            uint64_t v22 = v42;
            uint64_t v28 = v225;
            uint64_t v27 = v218;
            if (v126 != 1) {
              goto LABEL_31;
            }
            unint64_t v24 = v231;
            id v29 = v239;
            if (!*(void *)(v231 + 16)) {
              goto LABEL_51;
            }
            goto LABEL_20;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      unint64_t v244 = 0;
      if (!*(void *)(v24 + 16)) {
        goto LABEL_51;
      }
LABEL_20:
      unint64_t v47 = sub_1001806F8(v27, v28);
      if (v48)
      {
        uint64_t v236 = v22;
        uint64_t v49 = *(void *)(v0 + 504);
        uint64_t v50 = *(void *)(v0 + 480);
        unint64_t v51 = v24;
        uint64_t v52 = *(void *)(v0 + 448);
        unint64_t v53 = (uint64_t *)(*(void *)(v51 + 56) + 16 * v47);
        uint64_t v55 = *v53;
        uint64_t v54 = v53[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v56 = *v229;
        (*v229)(v50, v49, v52);
        uint64_t v57 = v222;
        int v58 = swift_isUniquelyReferenced_nonNull_native();
        v245[0] = (uint64_t)v222;
        unint64_t v60 = sub_100306EC4(v50);
        uint64_t v61 = v222[2];
        BOOL v62 = (v59 & 1) == 0;
        uint64_t v63 = v61 + v62;
        if (__OFADD__(v61, v62))
        {
          __break(1u);
LABEL_75:
          __break(1u);
          goto LABEL_76;
        }
        char v64 = v59;
        if (v222[3] >= v63)
        {
          if (v58)
          {
            if ((v59 & 1) == 0) {
              goto LABEL_63;
            }
          }
          else
          {
            sub_10031AD20();
            uint64_t v57 = (void *)v245[0];
            uint64_t v222 = (void *)v245[0];
            if ((v64 & 1) == 0) {
              goto LABEL_63;
            }
          }
        }
        else
        {
          uint64_t v65 = *(void *)(v0 + 480);
          sub_100312CF0(v63, v58);
          uint64_t v66 = v245[0];
          unint64_t v67 = sub_100306EC4(v65);
          if ((v64 & 1) != (v68 & 1))
          {
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          }
          unint64_t v60 = v67;
          uint64_t v57 = (void *)v66;
          uint64_t v222 = (void *)v66;
          if ((v64 & 1) == 0)
          {
LABEL_63:
            uint64_t v175 = *(void *)(v0 + 480);
            uint64_t v176 = *(void *)(v0 + 448);
            v57[(v60 >> 6) + 8] |= 1 << v60;
            v56(v57[6] + *(void *)(v212 + 72) * v60, v175, v176);
            uint64_t v177 = (void *)(v57[7] + 16 * v60);
            void *v177 = v55;
            v177[1] = v54;
            uint64_t v178 = v57[2];
            BOOL v179 = __OFADD__(v178, 1);
            uint64_t v180 = v178 + 1;
            if (v179) {
              goto LABEL_75;
            }
            v57[2] = v180;
LABEL_65:
            uint64_t v181 = *(void *)(v0 + 504);
            uint64_t v182 = *(void *)(v0 + 480);
            uint64_t v183 = *(void *)(v0 + 448);
            swift_bridgeObjectRelease();
            long long v184 = *v227;
            (*v227)(v182, v183);

            swift_bridgeObjectRelease();
            v184(v181, v183);
LABEL_66:
            uint64_t v22 = v236;
            goto LABEL_8;
          }
        }
        uint64_t v69 = (void *)(v57[7] + 16 * v60);
        swift_bridgeObjectRelease();
        void *v69 = v55;
        v69[1] = v54;
        goto LABEL_65;
      }
LABEL_51:
      uint64_t v242 = v21;
      swift_bridgeObjectRelease();
      if (qword_100907260 != -1) {
        swift_once();
      }
      uint64_t v127 = *(void *)(v0 + 504);
      uint64_t v128 = *(void *)(v0 + 472);
      uint64_t v129 = *(void *)(v0 + 448);
      sub_10008E2DC(v223, (uint64_t)qword_100912968);
      (*v229)(v128, v127, v129);
      swift_retain_n();
      char v130 = Logger.logObject.getter();
      os_log_type_t v131 = static os_log_type_t.default.getter();
      BOOL v132 = os_log_type_enabled(v130, v131);
      uint64_t v234 = *(void *)(v0 + 504);
      uint64_t v133 = *(void *)(v0 + 472);
      uint64_t v134 = *(void *)(v0 + 448);
      if (v132)
      {
        uint64_t v135 = *(void *)(v0 + 352);
        uint64_t v136 = swift_slowAlloc();
        id v240 = v29;
        uint64_t v137 = (void *)swift_slowAlloc();
        v245[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v136 = 136446722;
        *(void *)(v0 + 248) = v135;
        swift_getMetatypeMetadata();
        uint64_t v138 = String.init<A>(describing:)();
        *(void *)(v136 + 4) = sub_1000C51B8(v138, v139, v245);
        swift_bridgeObjectRelease();
        *(_WORD *)(v136 + 12) = 2114;
        int v140 = *(void **)(v220 + 24);
        *(void *)(v136 + 14) = v140;
        *uint64_t v137 = v140;
        id v141 = v140;
        swift_release_n();
        *(_WORD *)(v136 + 22) = 2082;
        sub_1002CDE64((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v142 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v136 + 24) = sub_1000C51B8(v142, v143, v245);
        swift_bridgeObjectRelease();
        uint64_t v144 = *v227;
        (*v227)(v133, v134);
        _os_log_impl((void *)&_mh_execute_header, v130, v131, "%{public}s: Did not auto-categorize reminder due to grocery classifier having 0 predication for reminder title {listObjectID: %{public}@, reminderIdentifier: %{public}s}", (uint8_t *)v136, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        unint64_t v24 = v231;
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_bridgeObjectRelease();
        v144(v234, v134);
        uint64_t v21 = v242;
        goto LABEL_9;
      }
      swift_bridgeObjectRelease();

      id v25 = *v227;
      (*v227)(v133, v134);

      swift_release_n();
      v25(v234, v134);
      uint64_t v21 = v242;
LABEL_8:
      unint64_t v24 = v231;
LABEL_9:
      v22 += 3;
      if (!--v21) {
        goto LABEL_68;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v222 = _swiftEmptyDictionarySingleton;
LABEL_68:
  uint64_t v185 = *(void *)(v0 + 552);
  uint64_t v186 = *(void *)(v0 + 544);
  uint64_t v187 = *(void *)(v0 + 536);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v185, v187);
  uint64_t v237 = *(void (**)(uint64_t, void, uint64_t))(v0 + 672);
  unsigned int v235 = *(_DWORD *)(v0 + 796);
  uint64_t v243 = *(void **)(v0 + 656);
  uint64_t v188 = *(void *)(v0 + 648);
  uint64_t v226 = *(void *)(v0 + 640);
  uint64_t v228 = *(void *)(v0 + 632);
  uint64_t v189 = *(void *)(v0 + 624);
  uint64_t v190 = *(void *)(v0 + 608);
  uint64_t v191 = *(void *)(v0 + 592);
  uint64_t v230 = *(void *)(v0 + 576);
  uint64_t v232 = *(void *)(v0 + 560);
  uint64_t v192 = *(void *)(v0 + 352);
  char v194 = *(long long **)(v0 + 328);
  uint64_t v193 = *(void **)(v0 + 336);
  uint64_t v195 = swift_allocObject();
  swift_weakInit();
  uint64_t v196 = swift_allocObject();
  *(void *)(v0 + 768) = v196;
  *(void *)(v196 + 16) = v195;
  *(void *)(v196 + 24) = v193;
  long long v198 = *v194;
  long long v197 = v194[1];
  *(_OWORD *)(v196 + 57) = *(long long *)((char *)v194 + 25);
  *(_OWORD *)(v196 + 32) = v198;
  *(_OWORD *)(v196 + 48) = v197;
  *(void *)(v196 + 8sub_10050ECB8((uint64_t)sub_100292128, 0) = v226;
  *(void *)(v196 + 88) = v188;
  *(void *)(v196 + 96) = v222;
  *(void *)(v196 + 104) = v189;
  *(void *)(v196 + 112) = v191;
  *(void *)(v196 + 12sub_10050ECB8((uint64_t)sub_100292128, 0) = v228;
  *(void *)(v196 + 128) = v190;
  *(void *)(v196 + 136) = v192;
  v237(v230, v235, v232);
  swift_bridgeObjectRetain();
  id v199 = v193;
  id v200 = v243;
  sub_1002C1CD8((id *)(v0 + 240));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  NSString v201 = (void *)swift_task_alloc();
  *(void *)(v0 + 776) = v201;
  *NSString v201 = v0;
  v201[1] = sub_1002B7890;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1002B96FC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1002B989C(uint64_t *a1, id *a2)
{
  id v3 = *a2;
  id v4 = [*a2 canonicalName];
  if (v4)
  {
  }
  else
  {
    id v5 = [v3 displayName];
    if (v5)
    {
      uint64_t v6 = v5;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E4FD8();
      uint64_t v7 = StringProtocol.lowercased(with:)();
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      if (!*(void *)(*a1 + 16)
        || (swift_bridgeObjectRetain(), sub_1001806F8(v7, v9), char v11 = v10, swift_bridgeObjectRelease(), (v11 & 1) == 0))
      {
        id v12 = v3;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *a1;
        *a1 = 0x8000000000000000;
        sub_1002C7E78((uint64_t)v12, v7, v9, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_10031AFF8, (void (*)(void))sub_100313130);
        *a1 = v14;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
  }
}

void sub_1002B9A24(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v25 = a2;
  uint64_t v4 = _s10PredicatesOMa_1();
  __chkstk_darwin(v4);
  uint64_t v6 = (unint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v7 = swift_allocObject();
  long long v26 = xmmword_10077A530;
  *(_OWORD *)(v7 + 16) = xmmword_10077A530;
  *(void *)(v7 + 32) = a1;
  unint64_t v29 = v7;
  specialized Array._endMutation()();
  *uint64_t v6 = v29;
  swift_storeEnumTagMultiPayload();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100784D30;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = swift_getKeyPath();
  *(void *)(inited + 48) = swift_getKeyPath();
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = swift_getKeyPath();
  *(void *)(inited + 72) = swift_getKeyPath();
  unint64_t v29 = inited;
  specialized Array._endMutation()();
  unint64_t v9 = v29;
  uint64_t v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = v26;
  *(void *)(v10 + 32) = swift_getKeyPath();
  unint64_t v29 = v10;
  specialized Array._endMutation()();
  unint64_t v11 = v29;
  id v12 = a1;
  uint64_t v13 = (void *)sub_100535B3C();
  uint64_t v14 = (void *)sub_1003BD0F4(v9, v11, 0, (uint64_t)v13);

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v14 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    sub_1002CD08C((uint64_t)v6, (uint64_t (*)(void))_s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  *(void *)&long long v26 = v12;
  unint64_t v29 = v16;
  sub_100094134(&qword_100910160);
  sub_1000967F4((unint64_t *)&qword_10090A988, &qword_100910160);
  unint64_t v17 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();

  sub_1002CD08C((uint64_t)v6, (uint64_t (*)(void))_s10PredicatesOMa_1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v18 = v26;
    if (v23) {
      goto LABEL_7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    [self noSuchObjectErrorWithObjectID:v18];
    swift_willThrow();
    return;
  }
  uint64_t v18 = v26;
  if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_12;
  }
LABEL_7:
  if ((v17 & 0xC000000000000001) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_10;
  }
  if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v19 = *(id *)(v17 + 32);
LABEL_10:
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    sub_1002CBB08(v20, (uint64_t)&v27);
    long long v21 = v28[0];
    uint64_t v22 = v25;
    *id v25 = v27;
    v22[1] = v21;
    *(_OWORD *)((char *)v22 + 25) = *(_OWORD *)((char *)v28 + 9);
    return;
  }
  __break(1u);
}

void sub_1002B9E84(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1002B9E90(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002B9E9C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1002B9EA8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002B9EB4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1002B9EC0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002B9ECC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1002B9ED8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1002B9EE4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = _s10PredicatesOMa(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char **)((char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v10 = (char *)a1;
  *((unsigned char *)v10 + 8) = 0;
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = qword_100907418;
  swift_bridgeObjectRetain();
  if (v11 != -1) {
LABEL_40:
  }
    swift_once();
  unint64_t v12 = sub_10039E88C((uint64_t)v10, (objc_class *)qword_1009421D8, (uint64_t)a2, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  uint64_t v13 = v4;
  uint64_t result = sub_1002CD08C((uint64_t)v10, _s10PredicatesOMa);
  if (!v4)
  {
    a2 = (void *)sub_1002EEF40((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v62 = v12;
    if (v12 >> 62)
    {
LABEL_43:
      swift_bridgeObjectRetain_n();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v55 = v13;
    unint64_t v56 = a1;
    uint64_t v57 = (void *)a3;
    if (v15)
    {
      uint64_t v16 = v15;
      a1 = v62;
      a3 = v62 & 0xC000000000000001;
      uint64_t v17 = 4;
      uint64_t v10 = &selRef_intersectsSet_;
      unint64_t v61 = v62 & 0xC000000000000001;
      uint64_t v58 = v15;
      while (1)
      {
        uint64_t v4 = v17 - 4;
        if (a3) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(a1 + 8 * v17);
        }
        id v19 = v18;
        uint64_t v20 = v17 - 3;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_40;
        }
        id v21 = [v18 v10[317]];

        if (!v21) {
          break;
        }

LABEL_8:
        ++v17;
        if (v20 == v16) {
          goto LABEL_36;
        }
      }
      id v63 = 0;
      id v22 = [v19 remObjectIDWithError:&v63];
      id v23 = v63;
      if (!v22)
      {
        id v54 = v63;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_bridgeObjectRelease_n();

        return swift_bridgeObjectRelease();
      }
      id v24 = v22;
      id v25 = v23;
      id v26 = [v19 remObjectID];
      if (!v26) {
        goto LABEL_23;
      }
      long long v27 = v26;
      id v28 = [v19 title];
      if (!v28)
      {

        a3 = v61;
LABEL_23:
        swift_bridgeObjectRetain();
        unint64_t v37 = sub_100306FE8((uint64_t)v24);
        uint64_t v38 = v24;
        char v40 = v39;
        swift_bridgeObjectRelease();
        if (v40)
        {
          id v60 = v38;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          id v63 = a2;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10031B004();
            a2 = v63;
          }

          unsigned __int8 v42 = *(void **)(a2[7] + 24 * v37);
          sub_1002C2AEC(v37, (uint64_t)a2);

          swift_bridgeObjectRelease();
          id v43 = v60;

          swift_bridgeObjectRelease();
          a3 = v61;
        }
        else
        {
        }
        uint64_t v10 = &selRef_intersectsSet_;
        a1 = v62;
        goto LABEL_8;
      }
      unint64_t v29 = v28;
      uint64_t v13 = (uint64_t)v24;
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v60 = v30;

      a1 = swift_isUniquelyReferenced_nonNull_native();
      id v63 = a2;
      a3 = sub_100306FE8((uint64_t)v24);
      uint64_t v32 = a2[2];
      BOOL v33 = (v31 & 1) == 0;
      uint64_t v34 = v32 + v33;
      if (__OFADD__(v32, v33))
      {
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      uint64_t v13 = v31;
      if (a2[3] < v34)
      {
        sub_10031313C(v34, a1);
        unint64_t v35 = sub_100306FE8((uint64_t)v24);
        if ((v13 & 1) != (v36 & 1))
        {
          sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        a3 = v35;
        a2 = v63;
        if ((v13 & 1) == 0) {
          goto LABEL_33;
        }
LABEL_31:
        uint64_t v44 = a2[7] + 24 * a3;
        uint64_t v45 = *(void **)v44;
        swift_bridgeObjectRelease();

        uint64_t v46 = v59;
        *(void *)uint64_t v44 = v27;
        *(void *)(v44 + 8) = v46;
        *(void *)(v44 + 16) = v60;
LABEL_35:

        swift_bridgeObjectRelease();
        a3 = v61;
        a1 = v62;
        uint64_t v16 = v58;
        uint64_t v10 = &selRef_intersectsSet_;
        goto LABEL_8;
      }
      if (a1)
      {
        a2 = v63;
        if (v31) {
          goto LABEL_31;
        }
      }
      else
      {
        sub_10031B004();
        a2 = v63;
        if (v13) {
          goto LABEL_31;
        }
      }
LABEL_33:
      a2[(a3 >> 6) + 8] |= 1 << a3;
      *(void *)(a2[6] + 8 * a3) = v24;
      unint64_t v47 = (void *)(a2[7] + 24 * a3);
      uint64_t v48 = v59;
      *unint64_t v47 = v27;
      v47[1] = v48;
      v47[2] = v60;
      uint64_t v49 = a2[2];
      BOOL v50 = __OFADD__(v49, 1);
      uint64_t v51 = v49 + 1;
      if (v50) {
        goto LABEL_42;
      }
      a2[2] = v51;
      id v52 = v24;
      goto LABEL_35;
    }
LABEL_36:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    unint64_t v53 = sub_1002C8CC4(v56, (uint64_t)a2);
    uint64_t result = swift_bridgeObjectRelease_n();
    *uint64_t v57 = v53;
  }
  return result;
}

uint64_t sub_1002BA470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[18] = a5;
  v6[19] = v5;
  v6[16] = a3;
  v6[17] = a4;
  v6[14] = a1;
  v6[15] = a2;
  sub_100094134(&qword_100909BE0);
  v6[20] = swift_task_alloc();
  return _swift_task_switch(sub_1002BA50C, 0, 0);
}

uint64_t sub_1002BA50C()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = v3;
  *(void *)(inited + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = v2;
  uint64_t v29 = inited;
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_100201B10(v7);
  uint64_t v8 = sub_10016F4B0(v29);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 128);
  swift_bridgeObjectRelease();
  if (sub_1001BCB84(v10, v9, v8))
  {
    uint64_t v11 = *(void *)(v0 + 160);
    uint64_t v12 = *(void *)(v0 + 144);
    uint64_t v13 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 128);
    uint64_t v15 = *(void *)(v0 + 112);
    static TaskPriority.high.getter();
    uint64_t v16 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 0, 1, v16);
    sub_100096838(v12, v0 + 64);
    uint64_t v17 = (void *)swift_allocObject();
    _OWORD v17[2] = 0;
    v17[3] = 0;
    v17[4] = v8;
    v17[5] = v5;
    v17[6] = v4;
    v17[7] = v13;
    v17[8] = v14;
    v17[9] = v15;
    sub_1000967D4((long long *)(v0 + 64), (uint64_t)(v17 + 10));
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_1002BBD9C(v11, (uint64_t)&unk_100912AC0, (uint64_t)v17);
    *(void *)(v0 + 168) = v18;
    id v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v19;
    uint64_t v20 = sub_100094134(&qword_100912AC8);
    uint64_t v21 = sub_100094134((uint64_t *)&unk_10090ABB0);
    void *v19 = v0;
    v19[1] = sub_1002BA8D4;
    return Task.value.getter(v0 + 104, v18, v20, v21, &protocol self-conformance witness table for Error);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_100907260 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100912968);
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDGroceryOperationCategorizeRemindersInList: primary locale is not a grocery locale in this device", v25, 2u);
      swift_slowDealloc();
    }

    unint64_t v26 = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
    swift_task_dealloc();
    long long v27 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v27(v26);
  }
}

uint64_t sub_1002BA8D4()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_1002BAA74;
  }
  else {
    uint64_t v2 = sub_1002BAA08;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002BAA08()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1002BAA74()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002BAAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = v10;
  v8[16] = v11;
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[9] = a1;
  v8[10] = a4;
  return _swift_task_switch(sub_1002BAB0C, 0, 0);
}

uint64_t sub_1002BAB0C()
{
  *(void *)(v0 + 24) = *(void *)(v0 + 80);
  *(void *)(v0 + 32) = _swiftEmptyDictionarySingleton;
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 88);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v2;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_10090AFB0);
  uint64_t v4 = sub_100094134(&qword_100912AE0);
  uint64_t v5 = sub_1000967F4((unint64_t *)&unk_100915BA0, (uint64_t *)&unk_10090AFB0);
  *uint64_t v2 = v0;
  v2[1] = sub_1002BAC64;
  return Sequence.asyncReduce<A>(_:_:)(v0 + 16, v0 + 32, &unk_100912AD8, v1, v3, v4, v5);
}

uint64_t sub_1002BAC64()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002BB2FC;
  }
  else {
    uint64_t v2 = sub_1002BADA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002BADA4()
{
  id v28 = v0;
  uint64_t v1 = v0[2];
  v0[20] = v1;
  if (*(void *)(v1 + 16))
  {
    uint64_t v3 = v0[13];
    uint64_t v2 = v0[14];
    swift_bridgeObjectRetain();
    unint64_t v4 = sub_1001806F8(v3, v2);
    if (v5)
    {
      uint64_t v6 = v0[15];
      uint64_t v7 = v0[16];
      uint64_t v8 = v0[10];
      uint64_t v9 = (char *)*(id *)(*(void *)(v1 + 56) + 8 * v4);
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)&v9[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale];
      uint64_t v10 = *(void *)&v9[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8];
      v0[21] = v10;
      swift_bridgeObjectRetain();

      v0[7] = v6;
      v0[8] = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v12 = (void *)swift_task_alloc();
      v0[22] = v12;
      v12[2] = v8;
      void v12[3] = v7;
      v12[4] = v1;
      v12[5] = v11;
      v12[6] = v10;
      uint64_t v13 = (void *)swift_task_alloc();
      v0[23] = v13;
      uint64_t v14 = sub_100094134(&qword_100911CB0);
      uint64_t v15 = sub_100094134(&qword_10090B068);
      uint64_t v16 = sub_1000967F4((unint64_t *)&qword_100911CB8, &qword_100911CB0);
      *uint64_t v13 = v0;
      v13[1] = sub_1002BB158;
      return Sequence.asyncReduce<A>(_:_:)(v0 + 6, v0 + 8, &unk_100912AF0, v12, v14, v15, v16);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_100907260 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100912968);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  unint64_t v21 = v0[14];
  if (v20)
  {
    uint64_t v22 = v0[13];
    id v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)id v23 = 136315138;
    swift_bridgeObjectRetain();
    v0[5] = sub_1000C51B8(v22, v21, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDGroceryOperationCategorizeRemindersInList: cannot find primary grocery classifier for %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  os_log_type_t v24 = (unint64_t *)v0[9];
  unint64_t *v24 = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  id v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_1002BB158()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002BB314;
  }
  else {
    uint64_t v2 = sub_1002BB2D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002BB2D8()
{
  **(void **)(v0 + 72) = *(void *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002BB2FC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002BB314()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002BB32C(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4)
{
  uint64_t v5 = *a2;
  v4[2] = a1;
  v4[3] = v5;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  v4[4] = *a3;
  v4[5] = v7;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)swift_task_alloc();
  v4[6] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1002BB430;
  return v10(v6, v7);
}

uint64_t sub_1002BB430(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1002BB644;
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    uint64_t v5 = sub_1002BB568;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002BB568()
{
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v5 = (void *)v0[2];
  uint64_t v4 = v0[3];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C7E78(v1, v3, v2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_10031B1D4, (void (*)(void))sub_100313444);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *uint64_t v5 = v4;
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002BB644()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002BB65C(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a5;
  v8[6] = a6;
  v8[3] = a1;
  void v8[4] = a4;
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  v8[9] = *a2;
  v8[10] = v9;
  v8[11] = v10;
  return _swift_task_switch(sub_1002BB694, 0, 0);
}

uint64_t sub_1002BB694()
{
  sub_1000C0814(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48));
  *(void *)(v0 + 96) = v1;
  uint64_t v2 = v1[2];
  *(void *)(v0 + 104) = v2;
  if (v2)
  {
    *(void *)(v0 + 144) = 1;
    *(_DWORD *)(v0 + 192) = 0;
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 128) = 0u;
    uint64_t v3 = (void *)v1[5];
    *(void *)(v0 + 152) = v3;
    *(void *)(v0 + 16) = v1[4];
    v3;
    uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v6 = v5;
    *(void *)(v0 + 16sub_10050ECB8((uint64_t)sub_100292128, 0) = v5;
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v7;
    void *v7 = v0;
    v7[1] = sub_1002BB890;
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);
    return REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(v9, v8, 0x100000000, 1, 0, v4, v6, 0xD000000000000019);
  }
  else
  {
    swift_bridgeObjectRelease();
    **(void **)(v0 + 24) = *(void *)(v0 + 72);
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    swift_bridgeObjectRetain();
    return v11();
  }
}

uint64_t sub_1002BB890(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1002BBD28;
  }
  else
  {
    uint64_t v4 = sub_1002BB9E0;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_1002BB9E0()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(char **)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 104);
  if (!*(void *)(v1 + 16))
  {
    swift_bridgeObjectRelease();

    if (v2 == v4)
    {
      swift_bridgeObjectRelease();
LABEL_7:
      **(void **)(v0 + 24) = *(void *)(v0 + 72);
      swift_bridgeObjectRetain();
      goto LABEL_16;
    }
    uint64_t v17 = *(void *)(v0 + 144);
    uint64_t v12 = v17 + 1;
    if (!__OFADD__(v17, 1))
    {
      uint64_t v5 = *(void *)(v0 + 112);
      uint64_t v6 = *(void *)(v0 + 120);
      float v8 = *(float *)(v0 + 192);
      uint64_t v10 = *(void *)(v0 + 128);
      unint64_t v9 = *(void *)(v0 + 136);
      uint64_t v18 = *(void *)(v0 + 96) + 16 * v17;
      goto LABEL_21;
    }
LABEL_24:
    __break(1u);
    return;
  }
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  unint64_t v7 = *(void *)(v1 + 48);
  float v8 = *(float *)(v1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)&v3[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale];
  unint64_t v9 = *(void *)&v3[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8];
  swift_bridgeObjectRetain();

  if (v2 == v4)
  {
    swift_bridgeObjectRelease();
    if (!v7) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v13 = *(void *)(v0 + 184);
    sub_1000C04C4(v5, v6, v7, v10, v9, *(void *)(v0 + 56), *(void *)(v0 + 64), v8);
    if (v13)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void (**)(void))(v0 + 8);
LABEL_17:
      v16();
      return;
    }
    uint64_t v19 = v14;
    uint64_t v20 = v15;
    uint64_t v22 = *(void *)(v0 + 80);
    uint64_t v21 = *(void *)(v0 + 88);
    uint64_t v23 = *(void *)(v0 + 72);
    os_log_type_t v24 = *(void **)(v0 + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void *v24 = 0x8000000000000000;
    sub_1002C3F10(v19, v20, v22, v21, isUniquelyReferenced_nonNull_native);
    void *v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    uint64_t v16 = *(void (**)(void))(v0 + 8);
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v12 = v11 + 1;
  if (__OFADD__(v11, 1)) {
    goto LABEL_24;
  }
  if (v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v18 = *(void *)(v0 + 96) + 16 * v11;
LABEL_21:
  *(void *)(v0 + 136) = v9;
  *(void *)(v0 + 144) = v12;
  *(void *)(v0 + 12sub_10050ECB8((uint64_t)sub_100292128, 0) = v6;
  *(void *)(v0 + 128) = v10;
  *(float *)(v0 + 192) = v8;
  *(void *)(v0 + 112) = v5;
  unint64_t v26 = *(void **)(v18 + 40);
  *(void *)(v0 + 152) = v26;
  *(void *)(v0 + 16) = *(void *)(v18 + 32);
  v26;
  uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v29 = v28;
  *(void *)(v0 + 16sub_10050ECB8((uint64_t)sub_100292128, 0) = v28;
  uint64_t v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_1002BB890;
  uint64_t v32 = *(void *)(v0 + 80);
  uint64_t v31 = *(void *)(v0 + 88);
  REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(v32, v31, 0x100000000, 1, 0, v27, v29, 0xD000000000000019);
}

uint64_t sub_1002BBD28()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002BBD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002BBF30(a1, a2, a3);
}

uint64_t sub_1002BBD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000966BC(a1, &qword_100909BE0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_100094134(&qword_100912AC8);
  return swift_task_create();
}

uint64_t sub_1002BBF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002BBF30(a1, a2, a3);
}

uint64_t sub_1002BBF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1000966BC(a1, &qword_100909BE0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1002BC0B4(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v87 = _s31ThreadSafePartialRepresentationVMa(0);
  uint64_t v85 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v92 = (uint64_t)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v86 = (char *)&v81 - v7;
  __chkstk_darwin(v8);
  uint64_t v91 = (uint64_t)&v81 - v9;
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  unint64_t v98 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v81 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v84 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v96 = (uint64_t)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v94 = (char *)&v81 - v18;
  __chkstk_darwin(v19);
  uint64_t v93 = (char *)&v81 - v20;
  __chkstk_darwin(v21);
  unint64_t v101 = (char *)&v81 - v22;
  __chkstk_darwin(v23);
  uint64_t v99 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v81 - v24);
  unint64_t v25 = *(void *)(v1 + 24);
  if (qword_100907908 != -1) {
LABEL_41:
  }
    swift_once();
  unint64_t v26 = (objc_class *)qword_100942578;
  uint64_t v27 = (objc_class *)sub_1005868C0();
  unint64_t v25 = sub_10058707C(v25, 1, a1, v26, v27, 0);
  uint64_t v28 = v3;
  swift_bridgeObjectRelease();
  if (v3) {
    return (uint64_t)v3;
  }
  unint64_t v104 = v25;
  if (v25 >> 62)
  {
LABEL_43:
    swift_bridgeObjectRetain_n();
    unint64_t v25 = v104;
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v3 = v99;
    if (v29) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
  uint64_t v29 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v3 = v99;
  if (!v29)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    uint64_t v3 = (void (**)(char *, uint64_t, uint64_t, uint64_t))_swiftEmptyDictionarySingleton;
LABEL_45:
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
LABEL_5:
  uint64_t v81 = v28;
  unint64_t v103 = v25 & 0xC000000000000001;
  uint64_t v30 = (void (**)(char *, char *, uint64_t))(v84 + 32);
  uint64_t v28 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56);
  char v100 = (unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
  uint64_t v90 = (void (**)(char *, char *, uint64_t))(v84 + 16);
  NSString v97 = (void (**)(void (**)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v84 + 8);
  uint64_t v89 = (void (**)(char *, uint64_t, uint64_t, uint64_t))_swiftEmptyDictionarySingleton;
  a1 = 4;
  uint64_t v105 = (void (**)(char *, char *, uint64_t))(v84 + 32);
  uint64_t v102 = v29;
  uint64_t v95 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56);
  while (1)
  {
    uint64_t v32 = a1 - 4;
    if (v103)
    {
      id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v34 = a1 - 3;
      if (__OFADD__(v32, 1)) {
        goto LABEL_40;
      }
    }
    else
    {
      id v33 = *(id *)(v25 + 8 * a1);
      uint64_t v34 = a1 - 3;
      if (__OFADD__(v32, 1))
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
    }
    uint64_t v106 = v34;
    id v107 = v33;
    id v35 = [v33 identifier:v81];
    if (v35) {
      break;
    }
    (*v28)(v14, 1, 1, v15);
LABEL_7:
    sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_100909E50);
LABEL_8:
    unint64_t v25 = v104;
LABEL_9:
    uint64_t v31 = v102;
    uint64_t v30 = v105;

    ++a1;
    if (v106 == v31)
    {
      swift_bridgeObjectRelease();
      uint64_t v3 = v89;
      goto LABEL_45;
    }
  }
  char v36 = v35;
  unint64_t v37 = v101;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v38 = *v30;
  (*v30)(v14, v37, v15);
  char v39 = *v28;
  (*v28)(v14, 0, 1, v15);
  char v40 = *v100;
  if ((*v100)(v14, 1, v15) == 1) {
    goto LABEL_7;
  }
  v38((char *)v3, v14, v15);
  id v41 = [v107 identifier];
  if (!v41)
  {
    uint64_t v46 = (uint64_t)v98;
    uint64_t v28 = v95;
    v39(v98, 1, 1, v15);
    goto LABEL_22;
  }
  unsigned __int8 v42 = v41;
  uint64_t v43 = v15;
  uint64_t v44 = v14;
  uint64_t v45 = v101;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v46 = (uint64_t)v98;
  unint64_t v47 = v45;
  uint64_t v14 = v44;
  uint64_t v15 = v43;
  uint64_t v3 = v99;
  v38(v98, v47, v15);
  uint64_t v28 = v95;
  v39((char *)v46, 0, 1, v15);
  if (v40((char *)v46, 1, v15) == 1)
  {
LABEL_22:
    sub_1000966BC(v46, (uint64_t *)&unk_100909E50);
    (*v97)(v3, v15);
    goto LABEL_8;
  }
  uint64_t v48 = v93;
  v38(v93, (char *)v46, v15);
  char v88 = *v90;
  v88(v94, v48, v15);
  id v49 = [v107 canonicalName];
  if (v49)
  {
    BOOL v50 = v49;
    uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v82 = v51;
  }
  else
  {
    uint64_t v83 = 0;
    uint64_t v82 = 0;
  }
  id v52 = [v107 displayName];
  if (v52)
  {
    unint64_t v53 = v52;
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v56 = v55;
  }
  else
  {
    uint64_t v54 = 0;
    uint64_t v56 = 0;
  }
  uint64_t v57 = *v97;
  (*v97)((void (**)(char *, uint64_t, uint64_t, uint64_t))v93, v15);
  uint64_t v58 = (uint64_t)v86;
  v38(v86, v94, v15);
  uint64_t v59 = v87;
  id v60 = (uint64_t *)(v58 + *(int *)(v87 + 20));
  uint64_t v61 = v82;
  *id v60 = v83;
  v60[1] = v61;
  unint64_t v62 = (uint64_t *)(v58 + *(int *)(v59 + 24));
  uint64_t *v62 = v54;
  v62[1] = v56;
  uint64_t v63 = v91;
  sub_1002CD2E0(v58, v91, _s31ThreadSafePartialRepresentationVMa);
  uint64_t v64 = v96;
  v88((char *)v96, (char *)v99, v15);
  sub_1002CAB18(v63, v92);
  uint64_t v65 = v89;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v108 = v65;
  unint64_t v68 = sub_100306EC4(v64);
  uint64_t v69 = v65[2];
  BOOL v70 = (v67 & 1) == 0;
  uint64_t v71 = (uint64_t)v69 + v70;
  if (__OFADD__(v69, v70))
  {
    __break(1u);
    goto LABEL_43;
  }
  char v72 = v67;
  if ((uint64_t)v65[3] >= v71)
  {
    unint64_t v25 = v104;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10031B1E0();
      goto LABEL_31;
    }
  }
  else
  {
    sub_100313450(v71, isUniquelyReferenced_nonNull_native);
    unint64_t v73 = sub_100306EC4(v96);
    if ((v72 & 1) != (v74 & 1)) {
      goto LABEL_48;
    }
    unint64_t v68 = v73;
LABEL_31:
    unint64_t v25 = v104;
  }
  uint64_t v75 = v108;
  if (v72)
  {
    uint64_t v89 = v108;
    sub_1002CD278(v92, (uint64_t)v108[7] + *(void *)(v85 + 72) * v68, _s31ThreadSafePartialRepresentationVMa);
LABEL_37:
    swift_bridgeObjectRelease();
    v57((void (**)(char *, uint64_t, uint64_t, uint64_t))v96, v15);
    sub_1002CD08C(v91, _s31ThreadSafePartialRepresentationVMa);
    uint64_t v79 = v99;
    v57(v99, v15);
    uint64_t v3 = v79;
    goto LABEL_9;
  }
  v108[(v68 >> 6) + 8] = (void (*)(char *, uint64_t, uint64_t, uint64_t))((unint64_t)v108[(v68 >> 6) + 8] | (1 << v68));
  v88((char *)v75[6] + *(void *)(v84 + 72) * v68, (char *)v96, v15);
  sub_1002CD2E0(v92, (uint64_t)v75[7] + *(void *)(v85 + 72) * v68, _s31ThreadSafePartialRepresentationVMa);
  uint64_t v76 = v75[2];
  BOOL v77 = __OFADD__(v76, 1);
  uint64_t v78 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)v76 + 1);
  if (!v77)
  {
    v75[2] = v78;
    uint64_t v89 = v108;
    goto LABEL_37;
  }
  __break(1u);
LABEL_48:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002BCA44(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void, void, void), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, NSObject *a13)
{
  uint64_t v14 = v13;
  v351 = a8;
  uint64_t v363 = a7;
  uint64_t v361 = a6;
  uint64_t v370 = a5;
  uint64_t v378 = type metadata accessor for REMAnalyticsEvent();
  uint64_t v352 = *(char **)(v378 - 8);
  __chkstk_darwin(v378);
  v379 = (void *)((char *)v307 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = _s31ThreadSafePartialRepresentationVMa(0);
  uint64_t v354 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v349 = (uint64_t)v307 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100094134(&qword_100912AA0);
  __chkstk_darwin(v21 - 8);
  uint64_t v360 = (uint64_t)v307 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v368 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v368);
  uint64_t v367 = (uint64_t)v307 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v375 = type metadata accessor for Date();
  v350 = *(char **)(v375 - 8);
  __chkstk_darwin(v375);
  v371 = (char *)v307 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v377 = (char *)v307 - v26;
  uint64_t v372 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v372);
  v353 = (char *)v307 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v376 = (char *)v307 - v29;
  __chkstk_darwin(v30);
  v373 = (char *)v307 - v31;
  __chkstk_darwin(v32);
  uint64_t v359 = (uint64_t)v307 - v33;
  __chkstk_darwin(v34);
  uint64_t v356 = (uint64_t)v307 - v35;
  __chkstk_darwin(v36);
  v369 = (char *)v307 - v37;
  __chkstk_darwin(v38);
  v358 = (char *)v307 - v39;
  __chkstk_darwin(v40);
  v381 = (char *)v307 - v41;
  __chkstk_darwin(v42);
  v355 = (char *)v307 - v43;
  __chkstk_darwin(v44);
  v366 = (char *)v307 - v45;
  __chkstk_darwin(v46);
  v374 = (char *)v307 - v47;
  __chkstk_darwin(v48);
  v380 = (char *)v307 - v49;
  uint64_t v384 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v384 - 8);
  __chkstk_darwin(v384);
  v362 = (char *)v307 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v357 = (char *)v307 - v53;
  __chkstk_darwin(v54);
  v365 = (char *)v307 - v55;
  __chkstk_darwin(v56);
  v364 = (char *)v307 - v57;
  __chkstk_darwin(v58);
  id v60 = (char *)v307 - v59;
  __chkstk_darwin(v61);
  v382 = (char *)v307 - v62;
  __chkstk_darwin(v63);
  v383 = (char *)v307 - v64;
  uint64_t v65 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v65 - 8);
  uint64_t v385 = (uint64_t)v307 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v68 = result;
  uint64_t v69 = *a3;
  id v389 = 0;
  id v70 = [a2 existingObjectWithID:v69 error:&v389];
  id v71 = v389;
  if (!v70)
  {
    id v79 = v389;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return swift_release();
  }
  char v72 = v70;
  uint64_t v347 = v60;
  self;
  unint64_t v73 = (void *)swift_dynamicCastObjCClass();
  id v74 = v71;
  if (!v73)
  {

    return swift_release();
  }
  id v345 = v72;
  uint64_t v341 = v19;
  id v75 = [v73 groceryLocaleID];
  uint64_t v348 = v68;
  if (v75)
  {
    uint64_t v76 = v75;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v77 = v385;
    Locale.init(identifier:)();
    uint64_t v78 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v77, 0, 1, v78);
  }
  else
  {
    uint64_t v80 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v385, 1, 1, v80);
  }
  uint64_t v81 = (uint64_t)v383;
  id v82 = [v73 membershipsOfRemindersInSectionsAsData];
  if (v82)
  {
    uint64_t v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v85 = v84;

    sub_1000963CC(0, (unint64_t *)&qword_100910240);
    static REMJSONRepresentable.fromJSONData(_:)();
    if (v13)
    {
      sub_100097F34(v83, v85);
LABEL_14:
      sub_1000966BC(v385, (uint64_t *)&unk_10090FDF0);

      return swift_release();
    }
    sub_100097F34(v83, v85);
    id v82 = v389;
  }
  id v86 = (void **)(a4 + 16);
  swift_beginAccess();
  uint64_t v87 = *v86;
  *id v86 = v82;

  uint64_t v88 = sub_1002BC0B4((uint64_t)a2);
  if (v13) {
    goto LABEL_14;
  }
  uint64_t v89 = v88;
  uint64_t v90 = (uint64_t *)(v370 + 16);
  swift_beginAccess();
  v336 = v90;
  *uint64_t v90 = v89;
  swift_bridgeObjectRelease();
  id v91 = [v73 groceryLocalCorrectionsAsData];
  if (v91)
  {
    uint64_t v92 = v91;
    uint64_t v93 = v86;
    uint64_t v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v96 = v95;

    sub_1000963CC(0, &qword_100914A20);
    static REMJSONRepresentable.fromJSONData(_:)();
    sub_100097F34(v94, v96);
    NSString v97 = (void *)v388[14];
    id v86 = v93;
  }
  else
  {
    NSString v97 = 0;
  }
  unint64_t v98 = (void **)(v361 + 16);
  swift_beginAccess();
  uint64_t v99 = *v98;
  *unint64_t v98 = v97;

  swift_beginAccess();
  char v100 = *v98;
  if (!*v98)
  {
    sub_1000966BC(v385, (uint64_t *)&unk_10090FDF0);

    swift_release();
    swift_beginAccess();
    *(void *)(a12 + 16) = v363;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  v340 = (void **)(a12 + 16);
  uint64_t v101 = v363;
  uint64_t v102 = *(void *)(v363 + 16);
  if (!v102)
  {
    swift_release();
LABEL_126:

    return sub_1000966BC(v385, (uint64_t *)&unk_10090FDF0);
  }
  os_log_t v321 = a13;
  uint64_t v331 = a11;
  uint64_t v330 = a10;
  uint64_t v320 = (void *)((char *)v351 + 16);
  uint64_t v313 = (uint64_t *)(a9 + 16);
  swift_bridgeObjectRetain();
  id v344 = v100;
  swift_beginAccess();
  uint64_t v332 = v86;
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v337 = (void (**)(char *, char *, uint64_t))(v50 + 32);
  v346 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56);
  id v339 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  unint64_t v103 = (void (**)(char *, uint64_t))(v50 + 8);
  os_log_t v334 = (void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  id v310 = &v387;
  v323 = (void (**)(char *, uint64_t))(v350 + 8);
  uint64_t v322 = v388;
  v309 = (char *)&v387 + 4;
  id v312 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v354 + 56);
  uint64_t v311 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v354 + 48);
  uint64_t v329 = v379 + 5;
  v328 = v379 + 11;
  unsigned int v327 = enum case for REMAnalyticsEvent.groceryPrediction(_:);
  uint64_t v326 = v352 + 104;
  uint64_t v325 = v352 + 8;
  unint64_t v104 = (uint64_t *)(v101 + 48);
  *(void *)&long long v105 = 136446978;
  long long v319 = v105;
  *(void *)&long long v105 = 136447234;
  long long v308 = v105;
  unint64_t v324 = 0x80000001007D0C40;
  v307[1] = (char *)&type metadata for Any + 8;
  v333 = (void (**)(char *, uint64_t))(v50 + 8);
  while (1)
  {
    uint64_t v361 = v102;
    uint64_t v370 = v14;
    os_log_t v114 = (os_log_t)*(v104 - 1);
    uint64_t v115 = *v104;
    char v116 = (char *)(id)*(v104 - 2);
    swift_bridgeObjectRetain();
    uint64_t v352 = v116;
    id v117 = [v116 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v351 = (void (*)(void, void, void))v114;
    os_log_t v387 = v114;
    v388[0] = v115;
    sub_1000E4FD8();
    uint64_t v118 = StringProtocol.lowercased(with:)();
    uint64_t v120 = v119;
    id v121 = [v344 memberships];
    sub_1000963CC(0, &qword_100912AF8);
    uint64_t v122 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (!*(void *)(v122 + 16) || (unint64_t v123 = sub_1001806F8(v118, v120), (v124 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v141 = v340;
      swift_beginAccess();
      uint64_t v142 = *v141;
      unint64_t v143 = v352;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint8_t *v141 = v142;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v142 = sub_10030B6B4(0, v142[2] + 1, 1, v142);
        uint8_t *v141 = v142;
      }
      unint64_t v146 = v142[2];
      unint64_t v145 = v142[3];
      if (v146 >= v145 >> 1)
      {
        uint64_t v142 = sub_10030B6B4((void *)(v145 > 1), v146 + 1, 1, v142);
        uint8_t *v141 = v142;
      }
      _OWORD v142[2] = v146 + 1;
      uint64_t v147 = &v142[3 * v146];
      uint64_t v148 = v351;
      v147[4] = v143;
      v147[5] = v148;
      v147[6] = v115;
      swift_endAccess();
      swift_bridgeObjectRelease();

      uint64_t v113 = *v103;
      uint64_t v14 = v370;
      goto LABEL_28;
    }
    uint64_t v338 = v115;
    uint64_t v125 = (char *)*(id *)(*(void *)(v122 + 56) + 8 * v123);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v350 = v125;
    id v126 = [v125 identifier];
    uint64_t v127 = v384;
    if (!v126)
    {
      uint64_t v131 = (uint64_t)v380;
      uint64_t v342 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*v346;
      v342(v380, 1, 1, v384);
LABEL_44:
      sub_1000966BC(v131, (uint64_t *)&unk_100909E50);
      goto LABEL_45;
    }
    uint64_t v128 = v126;
    uint64_t v129 = v382;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    char v130 = *v337;
    uint64_t v131 = (uint64_t)v380;
    (*v337)(v380, v129, v127);
    uint64_t v342 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*v346;
    v342((char *)v131, 0, 1, v127);
    BOOL v132 = *v339;
    if ((*v339)(v131, 1, v127) == 1) {
      goto LABEL_44;
    }
    sub_1000966BC(v131, (uint64_t *)&unk_100909E50);
    uint64_t v133 = *v336;
    swift_bridgeObjectRetain();
    id v134 = [v350 identifier];
    if (!v134) {
      break;
    }
    uint64_t v135 = v134;
    uint64_t v136 = v382;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v137 = (uint64_t)v374;
    v130(v374, v136, v127);
    v342((char *)v137, 0, 1, v127);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v132)(v137, 1, v127);
    if (result == 1) {
      goto LABEL_128;
    }
    uint64_t v81 = (uint64_t)v383;
    if (!*(void *)(v133 + 16))
    {
      swift_bridgeObjectRelease();
      long long v343 = *v103;
      v343(v374, v127);
LABEL_72:
      if (qword_100907260 != -1) {
        swift_once();
      }
      uint64_t v202 = type metadata accessor for Logger();
      sub_10008E2DC(v202, (uint64_t)qword_100912968);
      long long v203 = v362;
      (*v334)(v362, v81, v127);
      uint64_t v204 = v350;
      uint64_t v205 = v127;
      uint64_t v206 = v348;
      swift_retain_n();
      uint64_t v207 = v204;
      uint64_t v208 = Logger.logObject.getter();
      int v209 = static os_log_type_t.default.getter();
      BOOL v210 = os_log_type_enabled(v208, (os_log_type_t)v209);
      v350 = v207;
      if (v210)
      {
        LODWORD(v317) = v209;
        uint64_t v335 = v208;
        uint64_t v211 = swift_slowAlloc();
        uint64_t v212 = (void *)swift_slowAlloc();
        os_log_t v318 = (os_log_t)swift_slowAlloc();
        os_log_t v387 = v318;
        *(_DWORD *)uint64_t v211 = v319;
        uint64_t v213 = sub_1000D82B8();
        uint64_t v386 = sub_1000C51B8(v213, v214, (uint64_t *)&v387);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v211 + 12) = 2114;
        unsigned int v215 = *(void **)(v206 + 24);
        uint64_t v386 = (uint64_t)v215;
        id v216 = v215;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        unint64_t v316 = v212;
        *uint64_t v212 = v215;
        swift_release_n();
        *(_WORD *)(v211 + 22) = 2082;
        sub_1002CDE64((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v217 = v362;
        uint64_t v218 = v384;
        uint64_t v219 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v386 = sub_1000C51B8(v219, v220, (uint64_t *)&v387);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v343(v217, v218);
        *(_WORD *)(v211 + 32) = 2082;
        id v221 = [v350 identifier];
        if (v221)
        {
          uint64_t v222 = v221;
          uint64_t v223 = v353;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v224 = 0;
        }
        else
        {
          uint64_t v224 = 1;
          uint64_t v223 = v353;
        }
        unint64_t v225 = v340;
        v342(v223, v224, 1, v218);
        uint64_t v293 = Optional.descriptionOrNil.getter();
        uint64_t v294 = (uint64_t)v223;
        unint64_t v296 = v295;
        sub_1000966BC(v294, (uint64_t *)&unk_100909E50);
        uint64_t v386 = sub_1000C51B8(v293, v296, (uint64_t *)&v387);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v297 = v350;

        swift_bridgeObjectRelease();
        v298 = v335;
        _os_log_impl((void *)&_mh_execute_header, v335, (os_log_type_t)v317, "%{public}s: The section in local correction does not exist on the device {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionIdentifier: %{public}s", (uint8_t *)v211, 0x2Au);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v81 = (uint64_t)v383;
      }
      else
      {
        swift_release_n();
        v343(v203, v205);

        unint64_t v225 = v340;
      }
      uint64_t v299 = v352;
      swift_beginAccess();
      os_log_t v300 = *v225;
      NSDate v301 = v299;
      swift_bridgeObjectRetain();
      char v302 = swift_isUniquelyReferenced_nonNull_native();
      *unint64_t v225 = v300;
      if ((v302 & 1) == 0)
      {
        os_log_t v300 = sub_10030B6B4(0, v300[2] + 1, 1, v300);
        *unint64_t v225 = v300;
      }
      unint64_t v304 = v300[2];
      unint64_t v303 = v300[3];
      if (v304 >= v303 >> 1)
      {
        os_log_t v300 = sub_10030B6B4((void *)(v303 > 1), v304 + 1, 1, v300);
        *unint64_t v225 = v300;
      }
      v300[2] = v304 + 1;
      id v305 = &v300[3 * v304];
      id v306 = v351;
      v305[4] = v301;
      v305[5] = v306;
      v305[6] = v338;
      swift_endAccess();
      swift_bridgeObjectRelease();

      uint64_t v14 = v370;
      goto LABEL_27;
    }
    uint64_t v138 = (uint64_t)v374;
    sub_100306EC4((uint64_t)v374);
    char v140 = v139;
    swift_bridgeObjectRelease();
    long long v343 = *v103;
    v343((char *)v138, v127);
    if ((v140 & 1) == 0) {
      goto LABEL_72;
    }
LABEL_45:
    if (*v332)
    {
      id v149 = [*v332 membershipByMemberIdentifier];
      sub_1000963CC(0, (unint64_t *)&qword_10090C160);
      sub_1002CDE64((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v150 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v150 + 16) && (unint64_t v151 = sub_100306EC4(v81), (v152 & 1) != 0))
      {
        uint64_t v153 = *(NSObject **)(*(void *)(v150 + 56) + 8 * v151);
        uint64_t v154 = v153;
      }
      else
      {
        uint64_t v153 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v153 = 0;
    }
    uint64_t v155 = *v336;
    swift_bridgeObjectRetain();
    char v156 = sub_1002CBBF8(v153, v155);
    swift_bridgeObjectRelease();
    uint64_t v335 = v153;
    if (v156)
    {
      v351 = (void (*)(void, void, void))*v334;
      v351(v347, v81, v127);
      id v157 = [v350 identifier];
      if (v157)
      {
        uint64_t v158 = v157;
        uint64_t v159 = v366;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v160 = 0;
      }
      else
      {
        uint64_t v160 = 1;
        uint64_t v159 = v366;
      }
      v342(v159, v160, 1, v127);
      static Date.now.getter();
      v168.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      if ((*v339)((uint64_t)v159, 1, v127) == 1)
      {
        Class isa = 0;
      }
      else
      {
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*v103)(v159, v127);
      }
      unint64_t v170 = v103;
      id v171 = objc_allocWithZone((Class)REMMembership);
      uint64_t v172 = v377;
      Class v173 = Date._bridgeToObjectiveC()().super.isa;
      id v174 = [v171 initWithMemberIdentifier:v168.super.isa groupIdentifier:isa isObsolete:0 modifiedOn:v173];

      (*v323)(v172, v375);
      long long v343 = *v170;
      v343(v347, v127);
      uint64_t v175 = v320;
      swift_beginAccess();
      id v176 = v174;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v103 = v170;
      if (*(void *)((*v175 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v175 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      uint64_t v177 = v364;
      if (qword_100907260 != -1) {
        swift_once();
      }
      uint64_t v178 = type metadata accessor for Logger();
      sub_10008E2DC(v178, (uint64_t)qword_100912968);
      v351(v177, v81, v127);
      BOOL v179 = v350;
      uint64_t v180 = v127;
      uint64_t v181 = v348;
      swift_retain_n();
      uint64_t v182 = v179;
      uint64_t v183 = Logger.logObject.getter();
      int v184 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v183, (os_log_type_t)v184))
      {
        int v315 = v184;
        os_log_t v318 = v183;
        v351 = (void (*)(void, void, void))v176;
        uint64_t v185 = swift_slowAlloc();
        uint64_t v186 = (void *)swift_slowAlloc();
        uint64_t v317 = swift_slowAlloc();
        uint64_t v386 = v317;
        *(_DWORD *)uint64_t v185 = v319;
        os_log_t v387 = v321;
        swift_getMetatypeMetadata();
        uint64_t v187 = String.init<A>(describing:)();
        id v314 = v182;
        os_log_t v387 = (os_log_t)sub_1000C51B8(v187, v188, &v386);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v185 + 12) = 2114;
        uint64_t v189 = *(NSObject **)(v181 + 24);
        os_log_t v387 = v189;
        uint64_t v190 = v189;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        unint64_t v316 = v186;
        *uint64_t v186 = v189;
        swift_release_n();
        *(_WORD *)(v185 + 22) = 2082;
        sub_1002CDE64((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v191 = v384;
        uint64_t v192 = dispatch thunk of CustomStringConvertible.description.getter();
        os_log_t v387 = (os_log_t)sub_1000C51B8(v192, v193, &v386);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v343(v177, v191);
        *(_WORD *)(v185 + 32) = 2082;
        char v194 = v314;
        id v195 = [v314 identifier];
        uint64_t v196 = v191;
        if (v195)
        {
          long long v197 = v195;
          uint64_t v198 = (uint64_t)v355;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v199 = 0;
        }
        else
        {
          uint64_t v199 = 1;
          uint64_t v198 = (uint64_t)v355;
        }
        id v273 = v351;
        v342((char *)v198, v199, 1, v196);
        uint64_t v274 = Optional.descriptionOrNil.getter();
        unint64_t v276 = v275;
        sub_1000966BC(v198, (uint64_t *)&unk_100909E50);
        os_log_t v387 = (os_log_t)sub_1000C51B8(v274, v276, &v386);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_t v277 = v318;
        _os_log_impl((void *)&_mh_execute_header, v318, (os_log_type_t)v315, "%{public}s: Auto-categorized reminder based on local corrections {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionIdentifier: %{public}s}", (uint8_t *)v185, 0x2Au);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v14 = v370;
        uint64_t v200 = v341;
        uint64_t v201 = (uint64_t)v376;
        uint64_t v81 = (uint64_t)v383;
        unint64_t v103 = v333;
      }
      else
      {
        swift_release_n();

        v343(v177, v180);
        uint64_t v14 = v370;
        uint64_t v200 = v341;
        uint64_t v201 = (uint64_t)v376;
        uint64_t v81 = (uint64_t)v383;
      }
      goto LABEL_106;
    }
    if (v153)
    {
      id v161 = [v153 groupIdentifier];
      uint64_t v162 = (uint64_t)v369;
      uint64_t v163 = (uint64_t)v381;
      if (v161)
      {
        uint64_t v164 = v161;
        uint64_t v165 = v358;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v166 = (uint64_t)v165;
        uint64_t v167 = 0;
      }
      else
      {
        uint64_t v167 = 1;
        uint64_t v166 = (uint64_t)v358;
      }
      v342((char *)v166, v167, 1, v127);
      sub_100096408(v166, v163, (uint64_t *)&unk_100909E50);
    }
    else
    {
      uint64_t v163 = (uint64_t)v381;
      v342(v381, 1, 1, v127);
      uint64_t v162 = (uint64_t)v369;
    }
    id v226 = [v350 identifier];
    if (v226)
    {
      uint64_t v227 = v226;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v228 = 0;
    }
    else
    {
      uint64_t v228 = 1;
    }
    v342((char *)v162, v228, 1, v127);
    uint64_t v229 = v367;
    uint64_t v230 = v367 + *(int *)(v368 + 48);
    sub_1001248EC(v163, v367);
    sub_1001248EC(v162, v230);
    unint64_t v231 = *v339;
    if ((*v339)(v229, 1, v127) == 1)
    {
      sub_1000966BC(v162, (uint64_t *)&unk_100909E50);
      if (v231(v230, 1, v127) != 1) {
        goto LABEL_88;
      }
      sub_1000966BC(v229, (uint64_t *)&unk_100909E50);
      LODWORD(v351) = 0;
      uint64_t v232 = (uint64_t)v373;
      uint64_t v233 = v365;
      uint64_t v81 = (uint64_t)v383;
    }
    else
    {
      uint64_t v234 = v127;
      uint64_t v235 = v356;
      sub_1001248EC(v229, v356);
      if (v231(v230, 1, v234) == 1)
      {
        sub_1000966BC(v162, (uint64_t *)&unk_100909E50);
        (*v333)((char *)v235, v234);
        uint64_t v127 = v234;
LABEL_88:
        sub_1000966BC(v229, (uint64_t *)&unk_10090B4C0);
        uint64_t v81 = (uint64_t)v383;
        uint64_t v236 = (void (**)(uint64_t, uint64_t))v333;
LABEL_89:
        os_log_t v387 = (os_log_t)v351;
        v388[0] = v338;
        uint64_t v237 = StringProtocol.lowercased(with:)();
        uint64_t v239 = v238;
        uint64_t v240 = v359;
        sub_1001248EC((uint64_t)v381, v359);
        static Date.now.getter();
        if (v231(v240, 1, v127) == 1)
        {
          Class v241 = 0;
        }
        else
        {
          Class v241 = UUID._bridgeToObjectiveC()().super.isa;
          (*v236)(v240, v127);
        }
        id v242 = objc_allocWithZone((Class)REMTimestampedUUID);
        uint64_t v243 = v371;
        Class v244 = Date._bridgeToObjectiveC()().super.isa;
        id v245 = [v242 initWithIdentifier:v241 modifiedOn:v244];

        (*v323)(v243, v375);
        uint64_t v246 = v313;
        swift_beginAccess();
        uint64_t v233 = v365;
        if (v245)
        {
          char v247 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v386 = *v246;
          *uint64_t v246 = 0x8000000000000000;
          sub_1002C7E78((uint64_t)v245, v237, v239, v247, (void (*)(void))sub_10031AD14, (void (*)(void))sub_100312CE4);
          *uint64_t v246 = v386;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          id v249 = (void *)sub_10030C920(v237, v239);
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        LODWORD(v351) = 1;
        uint64_t v232 = (uint64_t)v373;
        uint64_t v127 = v384;
        goto LABEL_98;
      }
      (*v337)(v382, (char *)v230, v234);
      sub_1002CDE64((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      LODWORD(v343) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v236 = (void (**)(uint64_t, uint64_t))v333;
      id v248 = *v333;
      (*v333)(v382, v234);
      sub_1000966BC(v162, (uint64_t *)&unk_100909E50);
      v248((char *)v235, v234);
      sub_1000966BC(v229, (uint64_t *)&unk_100909E50);
      uint64_t v127 = v234;
      uint64_t v81 = (uint64_t)v383;
      if ((v343 & 1) == 0) {
        goto LABEL_89;
      }
      LODWORD(v351) = 0;
      uint64_t v232 = (uint64_t)v373;
      uint64_t v233 = v365;
    }
LABEL_98:
    if (qword_100907260 != -1) {
      swift_once();
    }
    uint64_t v250 = type metadata accessor for Logger();
    sub_10008E2DC(v250, (uint64_t)qword_100912968);
    (*v334)(v233, v81, v127);
    uint64_t v251 = (uint64_t)v381;
    sub_1001248EC((uint64_t)v381, v232);
    uint64_t v252 = v348;
    swift_retain_n();
    unint64_t v253 = Logger.logObject.getter();
    os_log_type_t v254 = static os_log_type_t.default.getter();
    int v255 = v254;
    if (os_log_type_enabled(v253, v254))
    {
      uint64_t v256 = swift_slowAlloc();
      uint64_t v257 = swift_slowAlloc();
      os_log_t v318 = v253;
      uint64_t v258 = (void *)v257;
      unint64_t v316 = (void *)v257;
      uint64_t v342 = (void (*)(char *, uint64_t, uint64_t, uint64_t))swift_slowAlloc();
      uint64_t v386 = (uint64_t)v342;
      *(_DWORD *)uint64_t v256 = v308;
      LODWORD(v317) = v255;
      os_log_t v387 = v321;
      swift_getMetatypeMetadata();
      uint64_t v259 = String.init<A>(describing:)();
      os_log_t v387 = (os_log_t)sub_1000C51B8(v259, v260, &v386);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v256 + 12) = 2114;
      uint64_t v261 = *(NSObject **)(v252 + 24);
      os_log_t v387 = v261;
      id v262 = v261;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v258 = v261;
      uint64_t v81 = (uint64_t)v383;
      swift_release_n();
      *(_WORD *)(v256 + 22) = 2082;
      sub_1002CDE64((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v263 = v384;
      uint64_t v264 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v387 = (os_log_t)sub_1000C51B8(v264, v265, &v386);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v266 = v333;
      long long v343 = *v333;
      v343(v233, v263);
      *(_WORD *)(v256 + 32) = 2082;
      uint64_t v267 = (uint64_t)v373;
      uint64_t v268 = Optional.descriptionOrNil.getter();
      os_log_t v387 = (os_log_t)sub_1000C51B8(v268, v269, &v386);
      unint64_t v103 = v266;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000966BC(v267, (uint64_t *)&unk_100909E50);
      *(_WORD *)(v256 + 42) = 1026;
      LODWORD(v387) = v351;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v270 = v318;
      _os_log_impl((void *)&_mh_execute_header, v318, (os_log_type_t)v317, "%{public}s: Skipped auto-categorizing reminder {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionIdentifier: %{public}s, shouldUpdateGroceryLocalCorrections: %{BOOL,public}d}", (uint8_t *)v256, 0x30u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v271 = (uint64_t)v381;
    }
    else
    {

      sub_1000966BC(v232, (uint64_t *)&unk_100909E50);
      uint64_t v272 = v233;
      unint64_t v103 = v333;
      long long v343 = *v333;
      v343(v272, v127);
      swift_release_n();
      uint64_t v271 = v251;
    }
    sub_1000966BC(v271, (uint64_t *)&unk_100909E50);
    uint64_t v14 = v370;
    uint64_t v200 = v341;
    uint64_t v201 = (uint64_t)v376;
LABEL_106:
    id v278 = [v350 identifier];
    if (!v278)
    {
      (*v346)(v201, 1, 1, v384);
LABEL_24:
      sub_1000966BC(v201, (uint64_t *)&unk_100909E50);
      goto LABEL_25;
    }
    uint64_t v279 = v278;
    uint64_t v280 = v382;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    char v281 = *v337;
    uint64_t v282 = v280;
    uint64_t v283 = v384;
    (*v337)((char *)v201, v282, v384);
    (*v346)(v201, 0, 1, v283);
    if ((*v339)(v201, 1, v283) == 1) {
      goto LABEL_24;
    }
    uint64_t v284 = (uint64_t)v357;
    v281(v357, (char *)v201, v384);
    os_log_type_t v285 = v336;
    swift_beginAccess();
    uint64_t v286 = *v285;
    if (*(void *)(*v285 + 16))
    {
      unint64_t v287 = sub_100306EC4(v284);
      uint64_t v288 = v360;
      if (v289)
      {
        sub_1002CAB18(*(void *)(v286 + 56) + *(void *)(v354 + 72) * v287, v360);
        uint64_t v290 = 0;
      }
      else
      {
        uint64_t v290 = 1;
      }
    }
    else
    {
      uint64_t v290 = 1;
      uint64_t v288 = v360;
    }
    (*v312)(v288, v290, 1, v200);
    if (!(*v311)(v288, 1, v200))
    {
      uint64_t v291 = v349;
      sub_1002CAB18(v288, v349);
      sub_1000966BC(v288, &qword_100912AA0);
      swift_endAccess();
      v343((char *)v284, v384);
      id v292 = (uint64_t *)(v291 + *(int *)(v200 + 24));
      uint64_t v106 = *v292;
      uint64_t v107 = v292[1];
      swift_bridgeObjectRetain();
      sub_1002CD08C(v291, _s31ThreadSafePartialRepresentationVMa);
      goto LABEL_26;
    }
    sub_1000966BC(v288, &qword_100912AA0);
    swift_endAccess();
    v343((char *)v284, v384);
LABEL_25:
    uint64_t v106 = 0;
    uint64_t v107 = 0;
LABEL_26:
    type metadata accessor for REMAnalyticsManager();
    static REMAnalyticsManager.shared.getter();
    uint64_t v108 = v379;
    void *v379 = 0x726F436C61636F6CLL;
    v108[1] = 0xEF6E6F6974636572;
    *((unsigned char *)v108 + 16) = 0;
    uint64_t v109 = v331;
    v108[3] = v330;
    uint64_t v108[4] = v109;
    Class v110 = v329;
    *uint64_t v329 = 0;
    v110[1] = 0;
    v108[7] = 0xD000000000000019;
    v108[8] = v324;
    v108[9] = v106;
    v108[10] = v107;
    id v111 = v328;
    void *v328 = 0;
    v111[1] = 0;
    uint64_t v112 = v378;
    (*(void (**)(void *, void, uint64_t))v326)(v108, v327, v378);
    swift_bridgeObjectRetain();
    REMAnalyticsManager.post(event:)();
    swift_bridgeObjectRelease();

    swift_release();
    (*(void (**)(void *, uint64_t))v325)(v108, v112);
LABEL_27:
    uint64_t v113 = v343;
LABEL_28:
    v104 += 3;
    v113((char *)v81, v384);
    uint64_t v102 = v361 - 1;
    if (v361 == 1)
    {
      swift_bridgeObjectRelease();
      swift_release();

      goto LABEL_126;
    }
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v342)(v374, 1, 1, v127);
LABEL_128:
  __break(1u);
  return result;
}

id sub_1002BF76C()
{
  return sub_1002BF7A4((SEL *)&selRef_groceryLocalCorrectionsAsData, &qword_100914A20);
}

id sub_1002BF7A4(SEL *a1, unint64_t *a2)
{
  id result = [v2 *a1];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    sub_1000963CC(0, a2);
    static REMJSONRepresentable.fromJSONData(_:)();
    id result = (id)sub_100097F34(v7, v9);
    if (!v3) {
      return (id)v10;
    }
  }
  return result;
}

uint64_t sub_1002BF864@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *a2 = v3;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002BF884(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v12 = v11;
  uint64_t v162 = a6;
  uint64_t v149 = type metadata accessor for Date();
  int64_t v164 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v153 = (char *)v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v19 - 8);
  uint64_t v148 = (char *)v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v160 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v147 = (char *)v126 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v165 = (char *)v126 - v24;
  uint64_t v159 = sub_100094134(&qword_100912B00);
  __chkstk_darwin(v159);
  uint64_t v158 = (char *)v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v167 = (uint64_t)v126 - v27;
  __chkstk_darwin(v28);
  id v157 = (char *)v126 - v29;
  uint64_t v30 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v30 - 8);
  uint64_t v150 = (uint64_t)v126 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v140 = a8;
  uint64_t v151 = result;
  uint64_t v33 = *a3;
  id v169 = 0;
  id v143 = a2;
  id v34 = [a2 existingObjectWithID:v33 error:&v169];
  id v35 = v169;
  if (!v34)
  {
    id v41 = v169;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return swift_release();
  }
  uint64_t v36 = v34;
  self;
  id v142 = v36;
  uint64_t v37 = (void *)swift_dynamicCastObjCClass();
  if (!v37)
  {
    id v42 = v35;
LABEL_8:

    return swift_release();
  }
  uint64_t v136 = v37;
  if (a5)
  {
    id v38 = v35;
    swift_bridgeObjectRetain();
    uint64_t v39 = v150;
    Locale.init(identifier:)();
    uint64_t v40 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
  }
  else
  {
    uint64_t v43 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v150, 1, 1, v43);
    id v44 = v35;
  }
  uint64_t v45 = (uint64_t *)(a7 + 16);
  uint64_t v46 = *(void *)(v162 + 16);
  uint64_t v144 = (uint64_t *)(a7 + 16);
  if (!v46)
  {
LABEL_52:
    swift_beginAccess();
    a5 = v150;
    if ((unint64_t)*v45 >> 62) {
      goto LABEL_76;
    }
    uint64_t v106 = *(void *)((*v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v106) {
      goto LABEL_54;
    }
LABEL_59:
    swift_beginAccess();
    if (*(void *)(*(void *)(a9 + 16) + 16))
    {
      swift_beginAccess();
      os_log_t v114 = *(void **)(a10 + 16);
      id v115 = objc_allocWithZone((Class)REMTextMemberships);
      sub_1000963CC(0, &qword_100912AF8);
      if (v114)
      {
        Class v116 = v114;
        swift_bridgeObjectRetain();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v118 = [v115 initWithMemberships:isa];

        id v119 = [(objc_class *)v116 mergingWith:v118];
      }
      else
      {
        swift_bridgeObjectRetain();
        Class v116 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v119 = [v115 initWithMemberships:v116];
      }

      id v120 = v119;
      sub_1002C0CE8(v119, 1);
      if (v12)
      {
        swift_release();

        return sub_1000966BC(a5, (uint64_t *)&unk_10090FDF0);
      }
    }
    else if (!v106)
    {
      goto LABEL_70;
    }
    [v136 updateChangeCount];
LABEL_70:
    id v121 = v143;
    if ([v143 hasChanges])
    {
      uint64_t v122 = v144;
      swift_beginAccess();
      uint64_t v123 = *v122;
      id v124 = v121;
      swift_bridgeObjectRetain();
      sub_1002CBFB4(v124, v123, v151, v124);

      sub_1000966BC(a5, (uint64_t *)&unk_10090FDF0);
      swift_bridgeObjectRelease();
      return swift_release();
    }
    sub_1000966BC(a5, (uint64_t *)&unk_10090FDF0);
    goto LABEL_8;
  }
  id v169 = (id)v162;
  sub_100094134(&qword_100912B08);
  sub_1000967F4(&qword_100912B10, &qword_100912B08);
  id v169 = (id)Sequence<>.unique()();
  swift_bridgeObjectRetain();
  sub_1004AB9B4((uint64_t *)&v169);
  if (v11)
  {
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = 0;
  uint64_t v47 = sub_1002CB17C((uint64_t)v169, v136, v150, (uint64_t)v143);
  id v141 = 0;
  uint64_t v129 = a11;
  swift_release();
  uint64_t v48 = v162;
  uint64_t v49 = *(void *)(v162 + 64);
  uint64_t v145 = v162 + 64;
  uint64_t v50 = 1 << *(unsigned char *)(v162 + 32);
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  unint64_t v52 = v51 & v49;
  int64_t v146 = (unint64_t)(v50 + 63) >> 6;
  uint64_t v166 = v160 + 16;
  uint64_t v152 = v160 + 32;
  char v139 = (void (**)(char *, void, uint64_t, uint64_t))(v160 + 56);
  uint64_t v138 = (unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48);
  uint64_t v154 = (void (**)(char *, uint64_t))(v160 + 8);
  uint64_t v137 = (void (**)(char *, uint64_t))(v164 + 8);
  uint64_t v128 = &v170;
  swift_bridgeObjectRetain();
  int64_t v53 = 0;
  *(void *)&long long v54 = 136446978;
  long long v127 = v54;
  v126[1] = (char *)&type metadata for Any + 8;
  uint64_t v156 = v47;
  while (1)
  {
    if (v52)
    {
      uint64_t v163 = (v52 - 1) & v52;
      int64_t v164 = v53;
      unint64_t v55 = __clz(__rbit64(v52)) | (v53 << 6);
      goto LABEL_37;
    }
    int64_t v56 = v53 + 1;
    if (__OFADD__(v53, 1))
    {
      __break(1u);
      goto LABEL_75;
    }
    uint64_t v12 = v141;
    if (v56 >= v146) {
      goto LABEL_51;
    }
    unint64_t v57 = *(void *)(v145 + 8 * v56);
    int64_t v58 = v53 + 1;
    if (!v57)
    {
      int64_t v58 = v53 + 2;
      if (v53 + 2 >= v146) {
        goto LABEL_51;
      }
      unint64_t v57 = *(void *)(v145 + 8 * v58);
      if (!v57)
      {
        int64_t v58 = v53 + 3;
        if (v53 + 3 >= v146) {
          goto LABEL_51;
        }
        unint64_t v57 = *(void *)(v145 + 8 * v58);
        if (!v57) {
          break;
        }
      }
    }
LABEL_36:
    uint64_t v163 = (v57 - 1) & v57;
    int64_t v164 = v58;
    unint64_t v55 = __clz(__rbit64(v57)) + (v58 << 6);
LABEL_37:
    uint64_t v60 = v160;
    uint64_t v12 = *(char **)(v160 + 16);
    uint64_t v61 = v157;
    ((void (*)(char *, unint64_t, uint64_t))v12)(v157, *(void *)(v48 + 48) + *(void *)(v160 + 72) * v55, v21);
    uint64_t v62 = (uint64_t *)(*(void *)(v48 + 56) + 16 * v55);
    uint64_t v63 = *(int *)(v159 + 48);
    uint64_t v64 = (uint64_t *)&v61[v63];
    uint64_t v66 = *v62;
    uint64_t v65 = v62[1];
    *uint64_t v64 = *v62;
    v64[1] = v65;
    uint64_t v67 = v167;
    uint64_t v68 = (uint64_t *)(v167 + v63);
    uint64_t v69 = *(void (**)(void, void, void))(v60 + 32);
    v69(v167, v61, v21);
    uint64_t v161 = v66;
    *uint64_t v68 = v66;
    v68[1] = v65;
    a5 = (uint64_t)v158;
    uint64_t v155 = (uint64_t)v12;
    ((void (*)(char *, uint64_t, uint64_t))v12)(v158, v67, v21);
    id v70 = v165;
    v69(v165, a5, v21);
    uint64_t v71 = v156;
    uint64_t v72 = *(void *)(v156 + 16);
    swift_bridgeObjectRetain();
    if (!v72) {
      goto LABEL_19;
    }
    swift_bridgeObjectRetain();
    unint64_t v73 = sub_1001806F8(v161, v65);
    if ((v74 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      (*v154)(v70, v21);
      sub_1000966BC(v167, &qword_100912B00);
      uint64_t v48 = v162;
      goto LABEL_20;
    }
    id v75 = *(id *)(*(void *)(v71 + 56) + 8 * v73);
    swift_bridgeObjectRelease();
    id v169 = 0;
    uint64_t v76 = (char *)[v75 remObjectIDWithError:&v169];
    if (!v76)
    {
      id v125 = v169;
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_release();

      (*v154)(v70, v21);
      sub_1000966BC(v167, &qword_100912B00);
      swift_release();
      return sub_1000966BC(v150, (uint64_t *)&unk_10090FDF0);
    }
    uint64_t v12 = v76;
    id v77 = v169;
    id v78 = [v12 uuid];
    id v79 = v148;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*v139)(v79, 0, 1, v21);
    static Date.now.getter();
    v80.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
    if ((*v138)(v79, 1, v21) == 1)
    {
      Class v81 = 0;
    }
    else
    {
      Class v81 = UUID._bridgeToObjectiveC()().super.isa;
      (*v154)(v79, v21);
    }
    id v82 = objc_allocWithZone((Class)REMMembership);
    uint64_t v83 = v153;
    Class v84 = Date._bridgeToObjectiveC()().super.isa;
    id v85 = [v82 initWithMemberIdentifier:v80.super.isa groupIdentifier:v81 isObsolete:0 modifiedOn:v84];

    (*v137)(v83, v149);
    id v86 = v144;
    swift_beginAccess();
    id v87 = v85;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v86 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v86 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    if (qword_100907260 != -1) {
      swift_once();
    }
    uint64_t v88 = type metadata accessor for Logger();
    sub_10008E2DC(v88, (uint64_t)qword_100912968);
    uint64_t v89 = v147;
    a5 = (uint64_t)v165;
    ((void (*)(char *, char *, uint64_t))v155)(v147, v165, v21);
    uint64_t v90 = v151;
    swift_retain_n();
    id v91 = v12;
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.default.getter();
    LODWORD(v161) = v93;
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = swift_slowAlloc();
      id v135 = v75;
      uint64_t v95 = v94;
      uint64_t v155 = swift_slowAlloc();
      uint64_t v134 = swift_slowAlloc();
      uint64_t v168 = v134;
      *(_DWORD *)uint64_t v95 = v127;
      os_log_t v132 = v92;
      id v169 = v129;
      swift_getMetatypeMetadata();
      uint64_t v96 = String.init<A>(describing:)();
      id v169 = (id)sub_1000C51B8(v96, v97, &v168);
      uint64_t v131 = v12;
      uint64_t v12 = v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v95 + 12) = 2114;
      id v133 = v87;
      unint64_t v98 = *(void **)(v90 + 24);
      id v169 = v98;
      id v99 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v155 = v98;
      swift_release_n();
      *(_WORD *)(v95 + 22) = 2082;
      sub_1002CDE64((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter();
      id v169 = (id)sub_1000C51B8(v100, v101, &v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      char v130 = *v154;
      v130(v89, v21);
      *(_WORD *)(v95 + 32) = 2114;
      a5 = v95 + 34;
      id v169 = v91;
      uint64_t v102 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)(v155 + 8) = v131;

      os_log_t v103 = v132;
      _os_log_impl((void *)&_mh_execute_header, v132, (os_log_type_t)v161, "%{public}s: Auto-categorized reminder based on prediction from grocery classifier {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionObjectID: %{public}@}", (uint8_t *)v95, 0x2Au);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v130(v165, v21);
    }
    else
    {

      unint64_t v104 = v89;
      long long v105 = *v154;
      (*v154)(v104, v21);

      swift_release_n();
      v105((char *)a5, v21);
    }
    sub_1000966BC(v167, &qword_100912B00);
    uint64_t v48 = v162;
LABEL_20:
    int64_t v53 = v164;
    unint64_t v52 = v163;
  }
  uint64_t v59 = v53 + 4;
  if (v53 + 4 >= v146)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v45 = v144;
    goto LABEL_52;
  }
  unint64_t v57 = *(void *)(v145 + 8 * v59);
  if (v57)
  {
    int64_t v58 = v53 + 4;
    goto LABEL_36;
  }
  while (1)
  {
    int64_t v58 = v59 + 1;
    if (__OFADD__(v59, 1)) {
      break;
    }
    if (v58 >= v146) {
      goto LABEL_51;
    }
    unint64_t v57 = *(void *)(v145 + 8 * v58);
    ++v59;
    if (v57) {
      goto LABEL_36;
    }
  }
LABEL_75:
  __break(1u);
LABEL_76:
  swift_bridgeObjectRetain();
  uint64_t v106 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v106) {
    goto LABEL_59;
  }
LABEL_54:
  uint64_t v107 = (id *)(v140 + 16);
  swift_beginAccess();
  id v108 = objc_allocWithZone((Class)REMMemberships);
  sub_1000963CC(0, (unint64_t *)&qword_10090C160);
  swift_bridgeObjectRetain();
  Class v109 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v110 = [v108 initWithMemberships:v109];

  swift_beginAccess();
  if (*v107)
  {
    id v111 = *v107;
    id v112 = [v110 mergingWith:v111 mergePolicy:0];

    id v110 = v112;
  }
  id v113 = v110;
  sub_1002B19C0(v110, 1);
  if (!v12)
  {

    goto LABEL_59;
  }
  swift_release();

  return sub_1000966BC(a5, (uint64_t *)&unk_10090FDF0);
}

void sub_1002C0CE8(void *a1, char a2)
{
  uint64_t v4 = v2;
  if (a1)
  {
    sub_1000963CC(0, &qword_100914A20);
    id v7 = a1;
    uint64_t v8 = REMChecksumRepresentable.rem_checksum.getter();
    if (v3)
    {
LABEL_3:

      return;
    }
    uint64_t v13 = v8;
    uint64_t v14 = v9;
    swift_bridgeObjectRetain();
    id v15 = [v4 groceryLocalCorrectionsChecksum];
    if (!v15)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      uint64_t v22 = REMJSONRepresentable.toJSONData()();
      unint64_t v24 = v23;
      id v25 = [v4 groceryLocalCorrectionsChecksum];
      if (!v25) {
        goto LABEL_23;
      }
      uint64_t v26 = v25;
      id v36 = v7;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v28;

      if (v27 == v13 && v34 == v14)
      {
        swift_bridgeObjectRelease_n();
        id v7 = v36;
LABEL_26:
        sub_100097E38(v22, v24);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F34(v22, v24);
        [v4 setGroceryLocalCorrectionsAsData:isa];

        sub_100097F34(v22, v24);
        goto LABEL_3;
      }
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      id v7 = v36;
      if ((v29 & 1) == 0)
      {
LABEL_23:
        NSString v30 = String._bridgeToObjectiveC()();
        [v4 setGroceryLocalCorrectionsChecksum:v30];

        if (a2)
        {
          id v31 = [v4 createResolutionTokenMapIfNecessary];
          NSString v32 = String._bridgeToObjectiveC()();
          [v31 updateForKey:v32];
          swift_bridgeObjectRelease();

          goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    uint64_t v16 = v15;
    id v35 = v7;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    if (v13 != v17 || v14 != v19)
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v7 = v35;
      if (v21)
      {

        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_18;
    }

    swift_bridgeObjectRelease_n();
  }
  else
  {
    id v10 = [v2 groceryLocalCorrectionsChecksum];
    if (v10)
    {

      [v2 setGroceryLocalCorrectionsChecksum:0];
      if (a2)
      {
        id v11 = [v2 createResolutionTokenMapIfNecessary];
        NSString v12 = String._bridgeToObjectiveC()();
        [v11 updateForKey:v12];
      }
    }
    [v4 setGroceryLocalCorrectionsAsData:0];
  }
}

uint64_t sub_1002C1090()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_queuedAt;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_classifierConfiguration);

  return swift_deallocClassInstance();
}

uint64_t sub_1002C1168()
{
  return type metadata accessor for RDGroceryOperationCategorizeRemindersInList(0);
}

uint64_t type metadata accessor for RDGroceryOperationCategorizeRemindersInList(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_1009129C0);
}

uint64_t sub_1002C1190()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002C126C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000C6EF4;
  return sub_1002B2114(a1);
}

uint64_t sub_1002C1304()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1002C1344(_OWORD *a1@<X8>)
{
  sub_1002B9A24(*(void **)(v1 + 16), a1);
}

id *sub_1002C1360(id *a1)
{
  return a1;
}

unint64_t sub_1002C138C()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v34[0] = 0xD00000000000002BLL;
  v34[1] = 0x80000001007D0CD0;
  id v2 = *v0;
  id v3 = [v2 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);

  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8069182;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v34, "remObjectID: ");
  HIWORD(v34[1]) = -4864;
  sub_100096408((uint64_t)(v1 + 1), (uint64_t)v35, (uint64_t *)&unk_100914BC0);
  sub_100096408((uint64_t)v35, (uint64_t)&v32, (uint64_t *)&unk_100914BC0);
  sub_100094134((uint64_t *)&unk_100914BC0);
  v9._countAndFlagsBits = Optional.descriptionOrNil.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  uint64_t v11 = v34[0];
  NSString v12 = (void *)v34[1];
  v34[0] = 0xD00000000000002BLL;
  v34[1] = 0x80000001007D0CD0;
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v34[0];
  uint64_t v14 = v34[1];
  v34[0] = 0;
  v34[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v34[0] = 0xD00000000000001ELL;
  v34[1] = 0x80000001007D0D00;
  if ((_BYTE)v1[2]) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if ((_BYTE)v1[2]) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 8236;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  uint64_t v20 = v34[0];
  char v21 = (void *)v34[1];
  v34[0] = v15;
  v34[1] = v14;
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v24 = v34[0];
  unint64_t v23 = v34[1];
  v34[0] = 0;
  v34[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  unint64_t v32 = 0xD000000000000011;
  unint64_t v33 = 0x80000001007D0D20;
  sub_100096408((uint64_t)(v1 + 3), (uint64_t)v34, (uint64_t *)&unk_10090A4C0);
  sub_100096408((uint64_t)v34, (uint64_t)v31, (uint64_t *)&unk_10090A4C0);
  sub_100094134((uint64_t *)&unk_10090A4C0);
  v25._countAndFlagsBits = Optional.descriptionOrNil.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  uint64_t v26 = v32;
  uint64_t v27 = (void *)v33;
  unint64_t v32 = v24;
  unint64_t v33 = v23;
  swift_bridgeObjectRetain();
  v28._countAndFlagsBits = v26;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = 125;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  return v32;
}

unint64_t sub_1002C16C4()
{
  return sub_1002C138C();
}

unint64_t sub_1002C1700()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)&v7, "remObjectID: ");
  HIWORD(v7._object) = -4864;
  v0._countAndFlagsBits = UUID.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 8236;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  _s31ThreadSafePartialRepresentationVMa(0);
  sub_100094134((uint64_t *)&unk_10090A4C0);
  v2._countAndFlagsBits = Optional.descriptionOrNil.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0x6163696E6F6E6163;
  v3._object = (void *)0xEF203A656D614E6CLL;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  strcpy((char *)&v7, "displayName: ");
  HIWORD(v7._object) = -4864;
  v4._countAndFlagsBits = Optional.descriptionOrNil.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 125;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0xD000000000000032;
}

unint64_t sub_1002C1948(void *a1, uint64_t a2, void *a3)
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)&v17, "remObjectID: ");
  HIWORD(v17._object) = -4864;
  id v6 = [a1 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = a2;
  v12._object = a3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  Swift::String v13 = strcpy((char *)&v17, "title: ");
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = (uint64_t)v13;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 125;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return 0xD00000000000002FLL;
}

unint64_t sub_1002C1AE8()
{
  return sub_1002C1948(*(void **)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t sub_1002C1AF4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002C1B34@<X0>(unint64_t a1@<X8>)
{
  return sub_1002B9EE4(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_1002C1B50()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002C1B88()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002C1BC0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002C1BF8()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 160, 7);
}

uint64_t sub_1002C1C90()
{
  return sub_1002BCA44(*(void *)(v0 + 16), *(void **)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void (**)(void, void, void))(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(NSObject **)(v0 + 152));
}

id *sub_1002C1CD8(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t sub_1002C1D04()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 144, 7);
}

uint64_t sub_1002C1D8C()
{
  return sub_1002BF884(*(void *)(v0 + 16), *(void **)(v0 + 24), (uint64_t *)(v0 + 32), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void **)(v0 + 136));
}

unint64_t sub_1002C1DD0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::String v12 = (_OWORD *)(v11 + 16 * v3);
          Swift::String v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          Swift::String v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            void *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    Swift::String v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    Swift::String v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002C1FAC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::String v12 = (_OWORD *)(v11 + 16 * v3);
          Swift::String v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          Swift::String v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            _OWORD *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    Swift::String v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    Swift::String v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1002C218C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v39 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v39;
    if ((*(void *)(v39 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v37 = (v11 + 1) & v10;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      id v36 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v38 = v13;
      uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v9;
        v36(v7, *(void *)(a2 + 48) + v15 * v9, v4);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v7, v4);
        unint64_t v19 = v18 & v10;
        if (a1 >= (uint64_t)v37)
        {
          if (v19 >= v37 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t v23 = v22 + v15 * a1;
            unint64_t v24 = v22 + v17 + v15;
            if (v15 * a1 < v17 || v23 >= v24)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v26 = *(void *)(a2 + 56);
            uint64_t v27 = (_OWORD *)(v26 + 32 * a1);
            Swift::String v28 = (_OWORD *)(v26 + 32 * v9);
            uint64_t v12 = v39;
            if (a1 != v9 || (a1 = v9, v27 >= v28 + 2))
            {
              long long v29 = v28[1];
              *uint64_t v27 = *v28;
              v27[1] = v29;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v37 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v39;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    NSString v30 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    NSString v30 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *NSString v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1002C2444(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1002CD348(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        uint64_t result = sub_100233FFC((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              long long v17 = *v16;
              long long v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            BOOL v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              long long v9 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002C2610(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v33 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      NSString v30 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v32 = v13;
      uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v30(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        sub_1002CDE64((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v19 < v31 || a1 < (uint64_t)v19) {
            goto LABEL_6;
          }
        }
        else if (v19 < v31 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        int64_t v22 = v15 * a1;
        if (v15 * a1 < v17 || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v17 + v15))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v22 != v17)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v23 = *(void *)(a2 + 56);
        unint64_t result = v23 + v22;
        if (v22 < v17 || result >= v23 + v17 + v15)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v22 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v12 = v33;
      }
      while (((*(void *)(v33 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  uint64_t *v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002C2914(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          int64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1002C2AEC(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v11 = *(void *)(a2 + 40);
        id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(v11);

        Swift::Int v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v3 >= v14)
          {
LABEL_16:
            uint64_t v17 = *(void *)(a2 + 48);
            uint64_t v18 = (void *)(v17 + 8 * v3);
            uint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || v18 >= v19 + 1) {
              *uint64_t v18 = *v19;
            }
            uint64_t v20 = *(void *)(a2 + 56);
            unint64_t v21 = v20 + 24 * v3;
            BOOL v22 = (long long *)(v20 + 24 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v21 >= (unint64_t)v22 + 24))
            {
              long long v10 = *v22;
              *(void *)(v21 + 16) = *((void *)v22 + 2);
              *(_OWORD *)unint64_t v21 = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v14 >= v9 || v3 >= v14)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << a1) - 1;
  }
  uint64_t *v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1002C2CB4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        id v12 = (_OWORD *)(v11 + 16 * v3);
        Swift::Int v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          _OWORD *v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 72);
        int64_t v16 = v15 * v3;
        unint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002C2EC4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          unint64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  uint64_t *v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1002C30B0(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v33 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v30 = (v11 + 1) & v10;
      unint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v32 = v5 + 16;
      uint64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v9;
        v31(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        sub_1002CDE64((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v13)(v7, v4);
        unint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v18 >= v30 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v21 = *(void *)(a2 + 56);
            uint64_t v22 = (void *)(v21 + 8 * a1);
            BOOL v23 = (void *)(v21 + 8 * v9);
            uint64_t v12 = v33;
            if (a1 != v9 || (a1 = v9, v22 >= v23 + 1))
            {
              void *v22 = *v23;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v30 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v33;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  uint64_t *v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_1002C33A8(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      unint64_t v36 = (v12 + 1) & v11;
      unint64_t v37 = v13;
      uint64_t v14 = *(void *)(v5 + 72);
      uint64_t v38 = v5 + 16;
      uint64_t v35 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = v11;
      do
      {
        uint64_t v16 = v8;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v10;
        uint64_t v19 = v15;
        v37(v7, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1002CDE64((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v35)(v7, v4);
        uint64_t v15 = v19;
        unint64_t v21 = v20 & v19;
        if (a1 >= (uint64_t)v36)
        {
          if (v21 >= v36 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v8 = v16;
            if (v17 * a1 < v18
              || (uint64_t v14 = v17, *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v14 = v17;
              uint64_t v15 = v19;
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            uint64_t v24 = *(void *)(a2 + 56);
            unint64_t v25 = v24 + 40 * a1;
            uint64_t v26 = (long long *)(v24 + 40 * v10);
            if (a1 != v10 || (a1 = v10, v25 >= (unint64_t)v26 + 40))
            {
              long long v27 = *v26;
              long long v28 = v26[1];
              *(void *)(v25 + 32) = *((void *)v26 + 4);
              *(_OWORD *)unint64_t v25 = v27;
              *(_OWORD *)(v25 + 16) = v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v36 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v8 = v16;
        uint64_t v14 = v17;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v15;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_1002C36C4(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v40 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v41 = v13;
      uint64_t v38 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v39 = v14;
      uint64_t v37 = v11;
      do
      {
        uint64_t v16 = v8;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v10;
        v39(v7, *(void *)(a2 + 48) + v15 * v10, v4);
        sub_1002CDE64((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v38)(v7, v4);
        unint64_t v20 = v19 & v11;
        if (a1 >= (uint64_t)v40)
        {
          if (v20 >= v40 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for RDSavedReminder() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t v26 = v23 + v24 * a1;
            int64_t v27 = v24 * v10;
            unint64_t v28 = v23 + v24 * v10 + v24;
            BOOL v29 = v25 < v27 || v26 >= v28;
            uint64_t v8 = v16;
            if (v29)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              uint64_t v11 = v37;
            }
            else
            {
              a1 = v10;
              uint64_t v11 = v37;
              if (v25 != v27)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v40 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v8 = v16;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_1002C3A0C(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            int64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              void *v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (void *)(v19 + 8 * v3);
            unint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *unint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_1002C3BC0(int a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1001806F8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1003181E8();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(_DWORD *)(v18[7] + 4 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10030D5E4(result, a4 & 1);
  uint64_t result = sub_1001806F8(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  int64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v20 = a2;
  v20[1] = a3;
  *(_DWORD *)(v18[7] + 4 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v23;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1002C3D24(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1001806F8(a1, a2);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100318398();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(double *)(v18[7] + 8 * v12) = a4;
      return result;
    }
    goto LABEL_11;
  }
  sub_10030D8F0(result, a3 & 1);
  uint64_t result = sub_1001806F8(a1, a2);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  int64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v20 = a1;
  v20[1] = a2;
  *(double *)(v18[7] + 8 * v12) = a4;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v23;

  return swift_bridgeObjectRetain();
}

void sub_1002C3E8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1002C3EB8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002C6664(a1, a2, a3, (void (*)(void))sub_10031856C, (void (*)(void))sub_10030DC28);
}

void sub_1002C3EE4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1002C3F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1001806F8(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100318A14();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_10030E654(v17, a5 & 1);
  unint64_t v23 = sub_1001806F8(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  BOOL v26 = (void *)(v20[7] + 16 * v14);
  *BOOL v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1002C4098(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C7CC0(a1, a2, a3, a4, (void (*)(void))sub_100318D74, (void (*)(void))sub_10030ECA8);
}

void sub_1002C40C4(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100307040((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100318D80();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10030ECB4(v12, a3 & 1);
  unint64_t v17 = sub_100307040((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    type metadata accessor for REMObjectID_Codable();
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

void sub_1002C4228(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

id sub_1002C4254(uint64_t a1, void *a2, char a3)
{
  return sub_1002C4FD8(a1, a2, a3, (void (*)(void))sub_100318DD0, (void (*)(void))sub_10030ED10);
}

void sub_1002C4280(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100306FE8((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100319158();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10030F64C(v12, a3 & 1);
  unint64_t v17 = sub_100306FE8((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

uint64_t sub_1002C43F4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002C5308(a1, a2, a3, (void (*)(void))sub_100319164, (void (*)(void))sub_10030FF18);
}

_OWORD *sub_1002C4420(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1003073B4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100319170();
      goto LABEL_7;
    }
    sub_10030FF30(v17, a3 & 1);
    unint64_t v23 = sub_1003073B4(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1002C8290(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  BOOL v21 = (_OWORD *)(v20[7] + 32 * v14);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);

  return sub_10009A1A0(a1, v21);
}

id sub_1002C45F8(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10030745C((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100319438();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100310338(v12, a3 & 1);
  unint64_t v18 = sub_10030745C((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_17:
    sub_1000963CC(0, &qword_10090E198);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v20 = 8 * v9;
  *(void *)(v15[6] + v2sub_10050ECB8((uint64_t)sub_100292128, 0) = a2;
  *(void *)(v15[7] + v2sub_10050ECB8((uint64_t)sub_100292128, 0) = a1;
  uint64_t v21 = v15[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v23;

  return a2;
}

void sub_1002C476C(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_1003074AC((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100319444();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100310344(v12, a3 & 1);
  unint64_t v17 = sub_1003074AC((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&unk_10090FFF0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

_OWORD *sub_1002C48E0(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_100307418(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100319450();
      goto LABEL_7;
    }
    sub_100310350(v13, a3 & 1);
    unint64_t v19 = sub_100307418(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_1002CD348(a2, (uint64_t)v21);
      return sub_1002C8350(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    id result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  unint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);

  return sub_10009A1A0(a1, v17);
}

uint64_t sub_1002C4A2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C7CC0(a1, a2, a3, a4, (void (*)(void))sub_100319638, (void (*)(void))sub_100310668);
}

uint64_t sub_1002C4A58(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_100306EC4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100318774();
    goto LABEL_7;
  }
  sub_10030E224(result, a3 & 1);
  uint64_t result = sub_100306EC4(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1002C8190(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1002C4BF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C7CC0(a1, a2, a3, a4, (void (*)(void))sub_100319664, (void (*)(void))sub_100310680);
}

void sub_1002C4C20(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1002C4C4C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_100306EC4(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_10031967C();
      goto LABEL_7;
    }
    sub_100310698(v16, a3 & 1);
    unint64_t v23 = sub_100306EC4(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      unint64_t v13 = v23;
      uint64_t v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v10, a2, v8);
      return sub_1002C83D0(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  char v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v26 + 40);
  unint64_t v21 = v19[7] + *(void *)(v26 + 72) * v13;

  return v20(v21, a1, v8);
}

void sub_1002C4E38(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100306FE8((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100319978();
LABEL_7:
    BOOL v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100310B3C(v12, a3 & 1);
  unint64_t v17 = sub_100306FE8((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  BOOL v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

id sub_1002C4FAC(uint64_t a1, void *a2, char a3)
{
  return sub_1002C4FD8(a1, a2, a3, (void (*)(void))sub_1003199A8, (void (*)(void))sub_100310B6C);
}

id sub_1002C4FD8(uint64_t a1, void *a2, char a3, void (*a4)(void), void (*a5)(void))
{
  char v8 = v5;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_100306FE8((uint64_t)a2);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 >= v16 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    a4();
LABEL_7:
    uint64_t v19 = (void *)*v8;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a5();
  unint64_t v22 = sub_100306FE8((uint64_t)a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = (void *)*v8;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  v19[(v13 >> 6) + 8] |= 1 << v13;
  uint64_t v24 = 8 * v13;
  *(void *)(v19[6] + v24) = a2;
  *(void *)(v19[7] + v24) = a1;
  uint64_t v25 = v19[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19[2] = v27;

  return a2;
}

void sub_1002C5168(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100306FE8((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100319C3C();
LABEL_7:
    BOOL v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100310F44(v12, a3 & 1);
  unint64_t v17 = sub_100306FE8((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  BOOL v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

uint64_t sub_1002C52DC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002C5308(a1, a2, a3, (void (*)(void))sub_100319C48, (void (*)(void))sub_100310F50);
}

uint64_t sub_1002C5308(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void))
{
  uint64_t v27 = a5;
  uint64_t v28 = a1;
  uint64_t v7 = (void **)v5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)*v5;
  unint64_t v16 = sub_100306EC4(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_release();
      *(void *)(v23 + 8 * v16) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v27();
  unint64_t v25 = sub_100306EC4(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_1002C8190(v16, (uint64_t)v13, v28, v22);
}

_OWORD *sub_1002C54C8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1001806F8(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10031A274();
      goto LABEL_7;
    }
    sub_100311988(v15, a4 & 1);
    unint64_t v21 = sub_1001806F8(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      BOOL v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v19);
    return sub_10009A1A0(a1, v19);
  }
LABEL_13:
  sub_1002C84AC(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

id sub_1002C561C(uint64_t a1, void *a2, char a3)
{
  return sub_1002C5674(a1, a2, a3, (void (*)(void))sub_100318554, (void (*)(void))sub_10030DC10);
}

id sub_1002C5648(uint64_t a1, void *a2, char a3)
{
  return sub_1002C5674(a1, a2, a3, (void (*)(void))sub_10031A48C, (void (*)(void))sub_100311CC4);
}

id sub_1002C5674(uint64_t a1, void *a2, char a3, void (*a4)(void), void (*a5)(void))
{
  char v8 = v5;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_100306FE8((uint64_t)a2);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 >= v16 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    a4();
LABEL_7:
    uint64_t v19 = (void *)*v8;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      id result = (id)swift_release();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a5();
  unint64_t v22 = sub_100306FE8((uint64_t)a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = (void *)*v8;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  v19[(v13 >> 6) + 8] |= 1 << v13;
  uint64_t v24 = 8 * v13;
  *(void *)(v19[6] + v24) = a2;
  *(void *)(v19[7] + v24) = a1;
  uint64_t v25 = v19[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19[2] = v27;

  return a2;
}

void sub_1002C5804(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10030763C((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10031A8FC();
LABEL_7:
    BOOL v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100312384(v12, a3 & 1);
  unint64_t v17 = sub_10030763C((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&unk_10090D5F0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  BOOL v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

id sub_1002C5978(uint64_t a1, void *a2, char a3)
{
  return sub_1002C4FD8(a1, a2, a3, (void (*)(void))sub_10031AAB0, (void (*)(void))sub_100312664);
}

uint64_t sub_1002C59A4(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v25 = a1[3];
  uint64_t v26 = a1[4];
  uint64_t v27 = a1[5];
  uint64_t v12 = (void *)*v4;
  unint64_t v14 = sub_1001806F8(a2, a3);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v5;
    if (v18)
    {
LABEL_8:
      BOOL v21 = (void *)(v20[7] + 48 * v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *BOOL v21 = v10;
      v21[1] = v9;
      id v21[2] = v11;
      v21[3] = v25;
      v21[4] = v26;
      void v21[5] = v27;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10031AB10();
    goto LABEL_7;
  }
  sub_1003126D0(v17, a4 & 1);
  unint64_t v23 = sub_1001806F8(a2, a3);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v5;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  *(void *)&long long v28 = v10;
  *((void *)&v28 + 1) = v9;
  uint64_t v29 = v11;
  uint64_t v30 = v25;
  uint64_t v31 = v26;
  uint64_t v32 = v27;
  sub_1002C8518(v14, a2, a3, &v28, v20);

  return swift_bridgeObjectRetain();
}

id sub_1002C5B58(uint64_t a1, void *a2, char a3)
{
  return sub_1002C74F8(a1, a2, a3, (uint64_t (*)(void))sub_10031ACFC, (void (*)(void))sub_100312CCC);
}

void sub_1002C5B84(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1002C5BB0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C687C(a1, a2, a3, a4, (void (*)(void))sub_10031B214, (void (*)(void))sub_100313484, (uint64_t (*)(void))&type metadata accessor for Date, (uint64_t (*)(void))&type metadata accessor for Date);
}

void sub_1002C5BF4(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100306F98((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10031B234();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1003134A4(v12, a3 & 1);
  unint64_t v17 = sub_100306F98((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_100914150);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

uint64_t sub_1002C5D68(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1001806F8(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10031B240();
      goto LABEL_7;
    }
    sub_1003134B0(v15, a4 & 1);
    unint64_t v21 = sub_1001806F8(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v19);
    return sub_1000967D4(a1, v19);
  }
LABEL_13:
  sub_1002C8574(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

id sub_1002C5EC0(uint64_t a1, void *a2, char a3)
{
  return sub_1002C4FD8(a1, a2, a3, (void (*)(void))sub_10031B42C, (void (*)(void))sub_1003137D8);
}

uint64_t sub_1002C5EEC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_100306EC4(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      char v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v24 = v28;
      uint64_t *v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_10031B438();
    goto LABEL_7;
  }
  sub_1003137E4(v18, a4 & 1);
  unint64_t v25 = sub_100306EC4(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  unint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_1002C85E4(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_1002C60A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C6494(a1, a2, a3, a4, (void (*)(void))sub_10031B734, (void (*)(void))sub_100313C48, (uint64_t (*)(void))&_swift_release);
}

uint64_t sub_1002C60E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C7CC0(a1, a2, a3, a4, (void (*)(void))sub_10031B8EC, (void (*)(void))sub_100313F60);
}

uint64_t sub_1002C6110(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100307890(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10031B8F8();
    goto LABEL_7;
  }
  sub_100313F6C(v17, a3 & 1);
  unint64_t v23 = sub_100307890(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1002C881C(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType);
}

uint64_t sub_1002C62CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C7CC0(a1, a2, a3, a4, (void (*)(void))sub_10031BAA8, (void (*)(void))sub_100314638);
}

uint64_t sub_1002C62F8(char a1, double a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100307964(a3);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a1 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a1 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10031BAB4();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(double *)(v16[7] + 8 * v1sub_10050ECB8((uint64_t)sub_100292128, 0) = a2;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v18 = 8 * v10;
    *(double *)(v16[6] + v18) = a3;
    *(double *)(v16[7] + v18) = a2;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_100314644(result, a1 & 1);
  uint64_t result = sub_100307964(a3);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002C6428(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C7CC0(a1, a2, a3, a4, (void (*)(void))sub_10031BC44, (void (*)(void))sub_1003148F4);
}

uint64_t sub_1002C6454(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C6494(a1, a2, a3, a4, (void (*)(void))sub_10031BC50, (void (*)(void))sub_100314900, (uint64_t (*)(void))&_swift_errorRelease);
}

uint64_t sub_1002C6494(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(void))
{
  unint64_t v10 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = sub_1001806F8(a2, a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    unint64_t v23 = (void *)*v10;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = v23[7];
      uint64_t result = a7(*(void *)(v24 + 8 * v17));
      *(void *)(v24 + 8 * v17) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a6();
  unint64_t v26 = sub_1001806F8(a2, a3);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  unint64_t v23 = (void *)*v10;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  v23[(v17 >> 6) + 8] |= 1 << v17;
  uint64_t v28 = (uint64_t *)(v23[6] + 16 * v17);
  uint64_t *v28 = a2;
  v28[1] = a3;
  *(void *)(v23[7] + 8 * v17) = a1;
  uint64_t v29 = v23[2];
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (v30)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v23[2] = v31;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1002C6638(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002C6664(a1, a2, a3, (void (*)(void))sub_10031BE28, (void (*)(void))sub_100314C24);
}

uint64_t sub_1002C6664(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void))
{
  char v27 = a5;
  uint64_t v28 = a1;
  uint64_t v7 = (void **)v5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v5;
  unint64_t v16 = sub_100306EC4(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v23 + 8 * v16) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v27();
  unint64_t v25 = sub_100306EC4(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_1002C881C(v16, (uint64_t)v13, v28, v22, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1002C6838(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C687C(a1, a2, a3, a4, (void (*)(void))sub_10031BE48, (void (*)(void))sub_100314C30, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.PinnedList, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
}

uint64_t sub_1002C687C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  uint64_t v11 = (void **)v8;
  unint64_t v16 = (void *)*v8;
  unint64_t v18 = sub_1001806F8(a2, a3);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v22 = v17;
  uint64_t v23 = v16[3];
  if (v23 < v21 || (a4 & 1) == 0)
  {
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    unint64_t v32 = sub_1001806F8(a2, a3);
    if ((v22 & 1) == (v33 & 1))
    {
      unint64_t v18 = v32;
      uint64_t v24 = *v11;
      if (v22) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v24 = *v11;
  if (v22)
  {
LABEL_8:
    uint64_t v25 = v24[7];
    uint64_t v26 = a7(0);
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 40);
    uint64_t v29 = v26;
    uint64_t v30 = v25 + *(void *)(v27 + 72) * v18;
    return v28(v30, a1, v29);
  }
LABEL_13:
  sub_1002C86A4(v18, a2, a3, a1, v24, a8);

  return swift_bridgeObjectRetain();
}

void sub_1002C6A34(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100306FE8((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10031C12C();
LABEL_7:
    char v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10031503C(v12, a3 & 1);
  unint64_t v17 = sub_100306FE8((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  char v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

void sub_1002C6BA8(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100306FE8((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10031C138();
LABEL_7:
    char v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100315048(v12, a3 & 1);
  unint64_t v17 = sub_100306FE8((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  char v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

void sub_1002C6D1C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100306EC4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10031C144();
    goto LABEL_7;
  }
  sub_100315054(v17, a3 & 1);
  unint64_t v22 = sub_100306EC4(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_1002C8190(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1002C6EC4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002C6664(a1, a2, a3, (void (*)(void))sub_10031BE08, (void (*)(void))sub_100314C18);
}

uint64_t sub_1002C6EF0(long long *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100306EC4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10031C150();
      goto LABEL_7;
    }
    sub_10031506C(v17, a3 & 1);
    unint64_t v23 = sub_100306EC4(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1002C8758(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7] + 40 * v14;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v21);

  return sub_1000967D4(a1, v21);
}

uint64_t sub_1002C70CC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100306EC4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10031C3FC();
    goto LABEL_7;
  }
  sub_1003154BC(v17, a3 & 1);
  unint64_t v23 = sub_100306EC4(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1002C8190(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1002C7274(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002C6664(a1, a2, a3, (void (*)(void))sub_10031C694, (void (*)(void))sub_1003158E0);
}

uint64_t sub_1002C72A0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002C6664(a1, a2, a3, (void (*)(void))sub_10031C6B4, (void (*)(void))sub_1003158EC);
}

uint64_t sub_1002C72CC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100306EC4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for RDSavedReminder();
      return sub_1002CD278(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10031C96C();
    goto LABEL_7;
  }
  sub_100315D20(v17, a3 & 1);
  unint64_t v24 = sub_100306EC4(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1002C88D8(v14, (uint64_t)v11, a1, v20);
}

id sub_1002C74A0(uint64_t a1, void *a2, char a3)
{
  return sub_1002C4FD8(a1, a2, a3, (void (*)(void))sub_10031CD0C, (void (*)(void))sub_100316234);
}

id sub_1002C74CC(uint64_t a1, void *a2, char a3)
{
  return sub_1002C74F8(a1, a2, a3, (uint64_t (*)(void))sub_10031CEBC, (void (*)(void))sub_100316514);
}

id sub_1002C74F8(uint64_t a1, void *a2, char a3, uint64_t (*a4)(void), void (*a5)(void))
{
  uint64_t v8 = v5;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_100306FE8((uint64_t)a2);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  id result = (id)(v14 + v15);
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 >= (uint64_t)result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v18 >= (uint64_t)result && (a3 & 1) == 0)
  {
    id result = (id)a4();
LABEL_7:
    uint64_t v19 = (void *)*v8;
    if (v17)
    {
LABEL_8:
      *(void *)(v19[7] + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a5();
  id result = (id)sub_100306FE8((uint64_t)a2);
  if ((v17 & 1) != (v20 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = (unint64_t)result;
  uint64_t v19 = (void *)*v8;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  v19[(v13 >> 6) + 8] |= 1 << v13;
  uint64_t v21 = 8 * v13;
  *(void *)(v19[6] + v21) = a2;
  *(void *)(v19[7] + v21) = a1;
  uint64_t v22 = v19[2];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19[2] = v24;

  return a2;
}

uint64_t sub_1002C767C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1003079AC(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10031D07C();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v1sub_10050ECB8((uint64_t)sub_100292128, 0) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100316804(v13, a3 & 1);
  unint64_t v19 = sub_1003079AC(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_17:
    type metadata accessor for RDManualSortIDPersistenceHost();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  BOOL v16 = (void *)*v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  v16[(v10 >> 6) + 8] |= 1 << v10;
  uint64_t v21 = 8 * v10;
  *(void *)(v16[6] + v21) = a2;
  *(void *)(v16[7] + v21) = a1;
  uint64_t v22 = v16[2];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v16[2] = v24;

  return swift_retain();
}

void sub_1002C77E0(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100306FE8((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100318548();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10030DBF8(v12, a3 & 1);
  unint64_t v17 = sub_100306FE8((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

void sub_1002C7954(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100306FE8((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10031D228();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100316B3C(v12, a3 & 1);
  unint64_t v17 = sub_100306FE8((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

uint64_t sub_1002C7AC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C7CC0(a1, a2, a3, a4, (void (*)(void))sub_10031D234, (void (*)(void))sub_100316B48);
}

void sub_1002C7AF4(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_1003075EC((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10031D240();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100316B54(v12, a3 & 1);
  unint64_t v17 = sub_1003075EC((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, &qword_100914310);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

void sub_1002C7C68(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1002C7C94(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002C7CC0(a1, a2, a3, a4, (void (*)(void))sub_10031D258, (void (*)(void))sub_100316B6C);
}

uint64_t sub_1002C7CC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  unint64_t v9 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_1001806F8(a2, a3);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    uint64_t v22 = (void *)*v9;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v23 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a6();
  unint64_t v25 = sub_1001806F8(a2, a3);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = (void *)*v9;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  uint64_t v27 = (uint64_t *)(v22[6] + 16 * v16);
  *uint64_t v27 = a2;
  v27[1] = a3;
  *(void *)(v22[7] + 8 * v16) = a1;
  uint64_t v28 = v22[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v22[2] = v30;

  return swift_bridgeObjectRetain();
}

void sub_1002C7E4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_1002C7E78(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  unint64_t v9 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_1001806F8(a2, a3);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    uint64_t v22 = (void *)*v9;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];

      *(void *)(v23 + 8 * v16) = a1;
      return;
    }
    goto LABEL_11;
  }
  a6();
  unint64_t v24 = sub_1001806F8(a2, a3);
  if ((v20 & 1) != (v25 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v24;
  uint64_t v22 = (void *)*v9;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  char v26 = (uint64_t *)(v22[6] + 16 * v16);
  *char v26 = a2;
  v26[1] = a3;
  *(void *)(v22[7] + 8 * v16) = a1;
  uint64_t v27 = v22[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v22[2] = v29;

  swift_bridgeObjectRetain();
}

void sub_1002C8004(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100306F98((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10031DA40();
LABEL_7:
    char v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100317908(v12, a3 & 1);
  unint64_t v17 = sub_100306F98((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000963CC(0, (unint64_t *)&qword_100914150);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  char v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

uint64_t sub_1002C8178(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1002C881C(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1002C8190(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_1002C8248(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

_OWORD *sub_1002C8290(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_10009A1A0(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *sub_1002C8350(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_10009A1A0(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_1002C83D0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  uint64_t v12 = *(void *)(v10 + 72) * a1;
  v11(v8 + v12, a2, v9);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a4[7] + v12, a3, v9);
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

_OWORD *sub_1002C84AC(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  *long long v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10009A1A0(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_1002C8518(unint64_t result, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  long long v5 = *a4;
  long long v6 = a4[1];
  uint64_t v7 = *((void *)a4 + 4);
  uint64_t v8 = *((void *)a4 + 5);
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v9 = (void *)(a5[6] + 16 * result);
  *BOOL v9 = a2;
  v9[1] = a3;
  uint64_t v10 = a5[7] + 48 * result;
  *(_OWORD *)uint64_t v10 = v5;
  *(_OWORD *)(v10 + 16) = v6;
  *(void *)(v10 + 32) = v7;
  *(void *)(v10 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = v8;
  uint64_t v11 = a5[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a5[2] = v13;
  }
  return result;
}

uint64_t sub_1002C8574(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  *long long v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1000967D4(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_1002C85E4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_1002C86A4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v9 = (void *)(a5[6] + 16 * a1);
  *BOOL v9 = a2;
  v9[1] = a3;
  uint64_t v10 = a5[7];
  uint64_t v11 = a6(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a4, v11);
  uint64_t v13 = a5[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a5[2] = v15;
  }
  return result;
}

uint64_t sub_1002C8758(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_1000967D4(a3, a4[7] + 40 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1002C881C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a4[6];
  uint64_t v10 = a5(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a2, v10);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2] = v14;
  }
  return result;
}

uint64_t sub_1002C88D8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for RDSavedReminder();
  uint64_t result = sub_1002CD2E0(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

unint64_t sub_1002C89C8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  long long v5 = (void *)(a5[6] + 16 * result);
  *long long v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_1002C8A10(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(a2 + 32);
  size_t v5 = ((unint64_t)((1 << v4) + 63) >> 3) & 0x1FFFFFFFFFFFFFF8;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    char v6 = sub_1002CAE68((uint64_t)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v3, a2);
  }
  else
  {
    BOOL v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    char v6 = sub_1002CAE68((uint64_t)v7, v3, a2);
    swift_slowDealloc();
  }
  return v6 & 1;
}

uint64_t sub_1002C8B84(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1002C8C24(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 8 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1002C8C74(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 56) + 8 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

void *sub_1002C8CC4(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      unint64_t v5 = v3 & 0xC000000000000001;
      unsigned int v6 = _swiftEmptyArrayStorage;
      uint64_t v7 = 4;
      unint64_t v24 = v3;
      unint64_t v22 = v3 & 0xC000000000000001;
      uint64_t v23 = v4;
      while (1)
      {
        uint64_t v8 = v7 - 4;
        if (v5)
        {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v8, 1)) {
            goto LABEL_19;
          }
        }
        else
        {
          id v9 = *(id *)(v3 + 8 * v7);
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v8, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        if (*(void *)(a2 + 16))
        {
          id v11 = v9;
          unint64_t v12 = sub_100306FE8((uint64_t)v11);
          if (v13)
          {
            uint64_t v14 = *(void *)(a2 + 56) + 24 * v12;
            uint64_t v15 = *(void *)(v14 + 8);
            uint64_t v16 = *(void *)(v14 + 16);
            id v17 = *(id *)v14;
            swift_bridgeObjectRetain();

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unsigned int v6 = sub_10030B6B4(0, v6[2] + 1, 1, v6);
            }
            unint64_t v19 = v6[2];
            unint64_t v18 = v6[3];
            if (v19 >= v18 >> 1) {
              unsigned int v6 = sub_10030B6B4((void *)(v18 > 1), v19 + 1, 1, v6);
            }
            uint64_t v6[2] = v19 + 1;
            uint64_t v20 = &v6[3 * v19];
            v20[4] = v17;
            v20[5] = v15;
            v20[6] = v16;
            unint64_t v3 = v24;
            unint64_t v5 = v22;
            uint64_t v4 = v23;
          }
          else
          {
          }
        }
        else
        {
        }
        ++v7;
        if (v10 == v4) {
          goto LABEL_22;
        }
      }
    }
  }
  unsigned int v6 = _swiftEmptyArrayStorage;
LABEL_22:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1002C8E98(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001007D0D40)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void *sub_1002C8F20(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_100912BF0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000C0DE0(a1, a1[3]);
  sub_1002CDD7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100094134(&qword_100910030);
    sub_1002CDDD0(&qword_100912BF8, &qword_100912C00);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  return v7;
}

void *sub_1002C90D0(char a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v38 = (char *)&v38 - v8;
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v39 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMFeatureFlags();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v13 + 104))(v16, enum case for REMFeatureFlags.groceryMultilingual(_:), v12, v14);
  char v17 = REMFeatureFlags.isEnabled.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0) {
    return _swiftEmptyArrayStorage;
  }
  if (a1)
  {
    static Locale.current.getter();
    uint64_t v18 = Locale.identifier.getter();
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v9);
    BOOL v21 = sub_100308F88(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v23 = v21[2];
    unint64_t v22 = v21[3];
    if (v23 >= v22 >> 1) {
      BOOL v21 = sub_100308F88((void *)(v22 > 1), v23 + 1, 1, v21);
    }
    id v21[2] = v23 + 1;
    unint64_t v24 = &v21[2 * v23];
    v24[4] = v18;
    v24[5] = v20;
  }
  else
  {
    BOOL v21 = _swiftEmptyArrayStorage;
  }
  type metadata accessor for REMGroceryDataView();
  char v25 = (void *)static REMGroceryDataView.fetchSecondaryGroceryLocale(store:modelBaseLocaleConversion:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v26 = v25;
    id v27 = [v25 locale];

    if (v27)
    {
      static Locale._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v28 = 0;
    }
    else
    {
      uint64_t v28 = 1;
    }
    uint64_t v29 = (uint64_t)v38;
    uint64_t v30 = v39;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v6, v28, 1, v9);
    sub_100096408((uint64_t)v6, v29, (uint64_t *)&unk_10090FDF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v29, 1, v9) == 1)
    {
      sub_1000966BC(v29, (uint64_t *)&unk_10090FDF0);
    }
    else
    {
      uint64_t v31 = Locale.identifier.getter();
      uint64_t v33 = v32;
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v21 = sub_100308F88(0, v21[2] + 1, 1, v21);
      }
      unint64_t v35 = v21[2];
      unint64_t v34 = v21[3];
      if (v35 >= v34 >> 1) {
        BOOL v21 = sub_100308F88((void *)(v34 > 1), v35 + 1, 1, v21);
      }
      id v21[2] = v35 + 1;
      uint64_t v36 = &v21[2 * v35];
      v36[4] = v31;
      v36[5] = v33;
    }
  }
  return v21;
}

uint64_t sub_1002C94F8(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v122 = a2;
  id v123 = a1;
  uint64_t v110 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v110);
  id v111 = (char *)v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = _s31ThreadSafePartialRepresentationVMa(0);
  uint64_t v117 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v13 = (char *)v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v119 = (uint64_t)v103 - v15;
  uint64_t v16 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v109 = (uint64_t)v103 - v20;
  __chkstk_darwin(v21);
  uint64_t v113 = (uint64_t)v103 - v22;
  __chkstk_darwin(v23);
  uint64_t v114 = (uint64_t)v103 - v24;
  __chkstk_darwin(v25);
  id v27 = (char *)v103 - v26;
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t v124 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)v103 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  id v120 = (char *)v103 - v32;
  uint64_t v115 = a6;
  uint64_t v116 = a7;
  uint64_t v125 = a6;
  uint64_t v126 = a7;
  sub_1000E4FD8();
  uint64_t v33 = StringProtocol.lowercased(with:)();
  if (!a3) {
    goto LABEL_5;
  }
  uint64_t v118 = v33;
  uint64_t v121 = v34;
  id v35 = a3;
  id v36 = [v35 groupIdentifier];
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = a4;
    id v108 = v35;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v39 = v124;
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
    uint64_t v107 = v30;
    uint64_t v41 = v30;
    uint64_t v42 = v124 + 32;
    v40(v27, v41, v28);
    uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56);
    v43(v27, 0, 1, v28);
    uint64_t v106 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    if (v106(v27, 1, v28) == 1)
    {
      id v44 = v43;
      uint64_t v30 = v107;
      id v35 = v108;
      goto LABEL_7;
    }
    uint64_t v55 = (uint64_t)v120;
    v40(v120, v27, v28);
    if (!*(void *)(v38 + 16)
      || (v105 = (void (*)(char *, uint64_t, uint64_t))v40, unint64_t v56 = sub_100306EC4(v55), (v57 & 1) == 0))
    {
      (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v55, v28);
      swift_bridgeObjectRelease();

      goto LABEL_35;
    }
    sub_1002CAB18(*(void *)(v38 + 56) + *(void *)(v117 + 72) * v56, (uint64_t)v13);
    uint64_t v58 = v119;
    sub_1002CD2E0((uint64_t)v13, v119, _s31ThreadSafePartialRepresentationVMa);
    if (!v123) {
      goto LABEL_44;
    }
    uint64_t v59 = &selRef_includeReminderTitles;
    id v60 = [v123 memberships];
    uint64_t v117 = sub_1000963CC(0, &qword_100912AF8);
    uint64_t v61 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v62 = v121;
    if (*(void *)(v61 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v63 = sub_1001806F8(v118, v62);
      if (v64)
      {
        v103[1] = v42;
        id v65 = *(id *)(*(void *)(v61 + 56) + 8 * v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v104 = v65;
        id v66 = [v65 identifier];
        if (v66)
        {
          uint64_t v67 = v66;
          uint64_t v68 = v114;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v69 = 0;
          uint64_t v70 = (uint64_t)v111;
        }
        else
        {
          uint64_t v69 = 1;
          uint64_t v70 = (uint64_t)v111;
          uint64_t v68 = v114;
        }
        uint64_t v95 = v107;
        v43((char *)v68, v69, 1, v28);
        uint64_t v96 = v113;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16))(v113, v119, v28);
        v43((char *)v96, 0, 1, v28);
        uint64_t v97 = v70 + *(int *)(v110 + 48);
        sub_1001248EC(v68, v70);
        sub_1001248EC(v96, v97);
        unint64_t v98 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v106;
        if (v106((char *)v70, 1, v28) == 1)
        {

          sub_1000966BC(v96, (uint64_t *)&unk_100909E50);
          sub_1000966BC(v68, (uint64_t *)&unk_100909E50);
          if (v98(v97, 1, v28) == 1)
          {
            sub_1000966BC(v70, (uint64_t *)&unk_100909E50);
            id v77 = v108;
LABEL_68:
            swift_bridgeObjectRelease();

            sub_1002CD08C(v119, _s31ThreadSafePartialRepresentationVMa);
            (*(void (**)(char *, uint64_t))(v124 + 8))(v120, v28);
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v99 = v109;
          sub_1001248EC(v70, v109);
          if (v98(v97, 1, v28) != 1)
          {
            v105(v95, v97, v28);
            sub_1002CDE64((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v101 = dispatch thunk of static Equatable.== infix(_:_:)();

            uint64_t v102 = *(void (**)(char *, uint64_t))(v124 + 8);
            v102(v95, v28);
            sub_1000966BC(v113, (uint64_t *)&unk_100909E50);
            sub_1000966BC(v114, (uint64_t *)&unk_100909E50);
            v102((char *)v99, v28);
            uint64_t v62 = v121;
            sub_1000966BC(v70, (uint64_t *)&unk_100909E50);
            id v77 = v108;
            id v78 = v123;
            uint64_t v59 = &selRef_includeReminderTitles;
            if (v101) {
              goto LABEL_68;
            }
            goto LABEL_39;
          }

          sub_1000966BC(v113, (uint64_t *)&unk_100909E50);
          sub_1000966BC(v114, (uint64_t *)&unk_100909E50);
          (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v99, v28);
        }
        sub_1000966BC(v70, (uint64_t *)&unk_10090B4C0);
        id v77 = v108;
        id v78 = v123;
        uint64_t v59 = &selRef_includeReminderTitles;
        uint64_t v62 = v121;
LABEL_39:
        id v79 = [v78 v59[199]];
        uint64_t v80 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v58 = v119;
        if (*(void *)(v80 + 16))
        {
          swift_bridgeObjectRetain();
          sub_1001806F8(v118, v62);
          if (v81)
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            sub_1002CD08C(v58, _s31ThreadSafePartialRepresentationVMa);
            (*(void (**)(char *, uint64_t))(v124 + 8))(v120, v28);
LABEL_56:
            char v74 = 1;
            return v74 & 1;
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
LABEL_44:
        id v82 = v108;
        uint64_t v83 = v122;
        if (v122 && *(void *)(v122 + 16))
        {
          uint64_t v84 = v116;
          swift_bridgeObjectRetain();
          unint64_t v85 = sub_1001806F8(v115, v84);
          if (v86)
          {
            id v87 = (uint64_t *)(*(void *)(v83 + 56) + 16 * v85);
            uint64_t v89 = *v87;
            uint64_t v88 = v87[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
LABEL_51:
            swift_bridgeObjectRelease();
            os_log_type_t v93 = (void *)(v58 + *(int *)(v112 + 20));
            uint64_t v94 = v93[1];
            if (!v94)
            {

              sub_1002CD08C(v58, _s31ThreadSafePartialRepresentationVMa);
              (*(void (**)(char *, uint64_t))(v124 + 8))(v120, v28);
              goto LABEL_26;
            }
            if (*v93 != v89 || v94 != v88)
            {
              char v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();

              sub_1002CD08C(v58, _s31ThreadSafePartialRepresentationVMa);
              (*(void (**)(char *, uint64_t))(v124 + 8))(v120, v28);
              swift_bridgeObjectRelease();
              char v74 = 0;
              if (v100) {
                return v74 & 1;
              }
              goto LABEL_56;
            }
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();

            sub_1002CD08C(v58, _s31ThreadSafePartialRepresentationVMa);
            (*(void (**)(char *, uint64_t))(v124 + 8))(v120, v28);
LABEL_5:
            swift_bridgeObjectRelease();
            goto LABEL_35;
          }
          swift_bridgeObjectRelease();
          if (*(void *)(v83 + 16))
          {
            unint64_t v90 = sub_1001806F8(v118, v121);
            if (v91)
            {
              uint64_t v92 = (uint64_t *)(*(void *)(v83 + 56) + 16 * v90);
              uint64_t v89 = *v92;
              uint64_t v88 = v92[1];
              swift_bridgeObjectRetain();
              goto LABEL_51;
            }
          }
        }

        swift_bridgeObjectRelease();
        sub_1002CD08C(v58, _s31ThreadSafePartialRepresentationVMa);
        (*(void (**)(char *, uint64_t))(v124 + 8))(v120, v28);
        goto LABEL_56;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    id v77 = v108;
    id v78 = v123;
    goto LABEL_39;
  }
  id v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56);
  v44(v27, 1, 1, v28);
LABEL_7:
  sub_1000966BC((uint64_t)v27, (uint64_t *)&unk_100909E50);
  uint64_t v45 = v121;
  id v46 = v123;
  if (!v123) {
    goto LABEL_29;
  }
  id v47 = [v123 memberships];
  sub_1000963CC(0, &qword_100912AF8);
  uint64_t v48 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v48 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v49 = sub_1001806F8(v118, v45);
    if (v50)
    {
      id v51 = *(id *)(*(void *)(v48 + 56) + 8 * v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v52 = [v51 identifier];
      if (v52)
      {
        int64_t v53 = v52;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v54 = v124;
        (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v18, v30, v28);
        v44(v18, 0, 1, v28);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v18, 1, v28) != 1)
        {
          sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
          goto LABEL_23;
        }
      }
      else
      {

        v44(v18, 1, 1, v28);
      }
      swift_bridgeObjectRelease();

      sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
      goto LABEL_35;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_23:
  id v71 = [v46 memberships];
  uint64_t v72 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v72 + 16))
  {
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    if (v122 && *(void *)(v122 + 16))
    {
      sub_1001806F8(v118, v45);
      char v74 = v75;
      swift_bridgeObjectRelease();

      return v74 & 1;
    }
    swift_bridgeObjectRelease();

LABEL_35:
    char v74 = 0;
    return v74 & 1;
  }
  swift_bridgeObjectRetain();
  sub_1001806F8(v118, v45);
  if ((v73 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }

  swift_bridgeObjectRelease_n();
LABEL_26:
  swift_bridgeObjectRelease();
  char v74 = 1;
  return v74 & 1;
}

uint64_t sub_1002CA2E8(uint64_t a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v73 = a7;
  uint64_t v78 = a6;
  unint64_t v79 = a4;
  uint64_t v71 = a5;
  uint64_t v76 = a1;
  unint64_t v77 = a2;
  uint64_t v80 = sub_100094134(&qword_100917630);
  uint64_t v75 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  char v74 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134(&qword_100912AA0);
  __chkstk_darwin(v9 - 8);
  uint64_t v69 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v68 = (uint64_t)&v67 - v12;
  uint64_t v70 = _s31ThreadSafePartialRepresentationVMa(0);
  uint64_t v13 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v67 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v67 - v23;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v67 - v31;
  if (!a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v26 + 56))(v24, 1, 1, v25, v30);
    unint64_t v35 = v79;
    uint64_t v36 = v13;
LABEL_7:
    sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
    unint64_t v37 = 0xEB00000000737365;
    uint64_t v38 = v70;
    uint64_t v39 = (uint64_t)v28;
LABEL_8:
    uint64_t v40 = 0x6C6E6F6974636573;
    unint64_t v79 = 0xEB00000000737365;
    goto LABEL_9;
  }
  uint64_t v67 = v15;
  id v33 = [a3 groupIdentifier:v30.n128_f64[0]];
  if (v33)
  {
    uint64_t v34 = v33;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v21, 0, 1, v25);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v21, 1, 1, v25);
  }
  unint64_t v35 = v79;
  uint64_t v36 = v13;
  sub_100096408((uint64_t)v21, (uint64_t)v24, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1) {
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v32, v24, v25);
  uint64_t v39 = (uint64_t)v28;
  if (*(void *)(v35 + 16))
  {
    unint64_t v47 = sub_100306EC4((uint64_t)v32);
    uint64_t v38 = v70;
    uint64_t v48 = v68;
    if (v49)
    {
      sub_1002CAB18(*(void *)(v35 + 56) + *(void *)(v36 + 72) * v47, v68);
      uint64_t v50 = 0;
    }
    else
    {
      uint64_t v50 = 1;
    }
  }
  else
  {
    uint64_t v50 = 1;
    uint64_t v38 = v70;
    uint64_t v48 = v68;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v48, v50, 1, v38);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v32, v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v48, 1, v38) == 1)
  {
    sub_1000966BC(v48, &qword_100912AA0);
    unint64_t v37 = 0xEB00000000737365;
    goto LABEL_8;
  }
  uint64_t v61 = v48;
  uint64_t v62 = v28;
  uint64_t v63 = (uint64_t)v67;
  sub_1002CD2E0(v61, (uint64_t)v67, _s31ThreadSafePartialRepresentationVMa);
  char v64 = (uint64_t *)(v63 + *(int *)(v38 + 20));
  uint64_t v40 = *v64;
  unint64_t v65 = v64[1];
  swift_bridgeObjectRetain();
  uint64_t v66 = v63;
  uint64_t v39 = (uint64_t)v62;
  sub_1002CD08C(v66, _s31ThreadSafePartialRepresentationVMa);
  unint64_t v37 = 0xEB00000000737365;
  unint64_t v79 = v65;
  if (!v65) {
    goto LABEL_8;
  }
LABEL_9:
  sub_1001248EC(v71, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v18, 1, v25) == 1)
  {
    sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
    unint64_t v41 = v73;
LABEL_22:
    uint64_t v51 = 0x6C6E6F6974636573;
    goto LABEL_23;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v39, v18, v25);
  if (*(void *)(v35 + 16))
  {
    unint64_t v42 = sub_100306EC4(v39);
    unint64_t v41 = v73;
    if (v43)
    {
      uint64_t v44 = *(void *)(v35 + 56) + *(void *)(v36 + 72) * v42;
      uint64_t v45 = v69;
      sub_1002CAB18(v44, v69);
      uint64_t v46 = 0;
      goto LABEL_20;
    }
    uint64_t v46 = 1;
  }
  else
  {
    uint64_t v46 = 1;
    unint64_t v41 = v73;
  }
  uint64_t v45 = v69;
LABEL_20:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v45, v46, 1, v38);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v39, v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v45, 1, v38) == 1)
  {
    sub_1000966BC(v45, &qword_100912AA0);
    goto LABEL_22;
  }
  char v57 = (uint64_t *)(v45 + *(int *)(v38 + 20));
  uint64_t v58 = v45;
  uint64_t v60 = *v57;
  unint64_t v59 = v57[1];
  swift_bridgeObjectRetain();
  sub_1002CD08C(v58, _s31ThreadSafePartialRepresentationVMa);
  uint64_t v51 = 0x6C6E6F6974636573;
  if (v59)
  {
    uint64_t v51 = v60;
    unint64_t v37 = v59;
  }
LABEL_23:
  uint64_t v52 = v72;
  if (qword_1009071E0 != -1) {
    swift_once();
  }
  int64_t v53 = *(void **)(v52 + 24);
  uint64_t v54 = (uint64_t)v74;
  uint64_t v55 = v75;
  (*(void (**)(char *, void, uint64_t))(v75 + 104))(v74, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), v80);
  unint64_t v73 = v51;
  sub_100261C74(v76, v77, v40, v79, v51, v37, v78, v41, v53, v54, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v80);
  type metadata accessor for Analytics();
  static Analytics.postBiomeEventForCorrectedGroceryItem(item:originalCategory:destinationCategory:locale:)();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s31ThreadSafePartialRepresentationVMa(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100912B90);
}

uint64_t sub_1002CAB18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s31ThreadSafePartialRepresentationVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002CAB7C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_1002CABDC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 32);
  long long v8 = *(_OWORD *)(v1 + 64);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = sub_1000C75D4;
  *(void *)(v6 + 128) = v1 + 80;
  *(_OWORD *)(v6 + 112) = v8;
  *(void *)(v6 + 96) = v4;
  *(void *)(v6 + 104) = v5;
  *(_OWORD *)(v6 + 8sub_10050ECB8((uint64_t)sub_100292128, 0) = v7;
  *(void *)(v6 + 72) = a1;
  return _swift_task_switch(sub_1002BAB0C, 0, 0);
}

uint64_t sub_1002CACB8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  long long v8 = *(int **)(v3 + 16);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1000C75D4;
  return sub_1002BB32C(a1, a2, a3, v8);
}

uint64_t sub_1002CAD7C(uint64_t a1, uint64_t *a2, void *a3)
{
  long long v14 = *(_OWORD *)(v3 + 32);
  uint64_t v8 = *(void *)(v3 + 48);
  uint64_t v9 = swift_task_alloc();
  long long v10 = *(_OWORD *)(v3 + 16);
  *(void *)(v4 + 16) = v9;
  *(void *)uint64_t v9 = v4;
  *(void *)(v9 + 8) = sub_1000C6EF4;
  *(_OWORD *)(v9 + 32) = v10;
  *(_OWORD *)(v9 + 48) = v14;
  *(void *)(v9 + 24) = a1;
  uint64_t v11 = *a2;
  *(void *)(v9 + 64) = v8;
  *(void *)(v9 + 72) = v11;
  uint64_t v12 = a3[1];
  *(void *)(v9 + 8sub_10050ECB8((uint64_t)sub_100292128, 0) = *a3;
  *(void *)(v9 + 88) = v12;
  return _swift_task_switch(sub_1002BB694, 0, 0);
}

uint64_t sub_1002CAE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a2 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a2 + 64);
  int64_t v34 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v37 = a3 + 56;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  int64_t v8 = 0;
  while (2)
  {
    uint64_t v31 = v7;
    do
    {
      while (1)
      {
        if (v5)
        {
          unint64_t v9 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
          unint64_t v10 = v9 | (v8 << 6);
        }
        else
        {
          int64_t v11 = v8 + 1;
          if (__OFADD__(v8, 1))
          {
            __break(1u);
            goto LABEL_48;
          }
          if (v11 >= v34) {
            goto LABEL_46;
          }
          unint64_t v12 = *(void *)(v33 + 8 * v11);
          ++v8;
          if (!v12)
          {
            int64_t v8 = v11 + 1;
            if (v11 + 1 >= v34) {
              goto LABEL_46;
            }
            unint64_t v12 = *(void *)(v33 + 8 * v8);
            if (!v12)
            {
              int64_t v8 = v11 + 2;
              if (v11 + 2 >= v34) {
                goto LABEL_46;
              }
              unint64_t v12 = *(void *)(v33 + 8 * v8);
              if (!v12)
              {
                int64_t v8 = v11 + 3;
                if (v11 + 3 >= v34) {
                  goto LABEL_46;
                }
                unint64_t v12 = *(void *)(v33 + 8 * v8);
                if (!v12)
                {
                  int64_t v13 = v11 + 4;
                  if (v13 >= v34)
                  {
LABEL_46:
                    swift_release();
                    return 0;
                  }
                  unint64_t v12 = *(void *)(v33 + 8 * v13);
                  if (!v12)
                  {
                    while (1)
                    {
                      int64_t v8 = v13 + 1;
                      if (__OFADD__(v13, 1)) {
                        break;
                      }
                      if (v8 >= v34) {
                        goto LABEL_46;
                      }
                      unint64_t v12 = *(void *)(v33 + 8 * v8);
                      ++v13;
                      if (v12) {
                        goto LABEL_24;
                      }
                    }
LABEL_48:
                    __break(1u);
LABEL_49:
                    __break(1u);
                    return result;
                  }
                  int64_t v8 = v13;
                }
              }
            }
          }
LABEL_24:
          unint64_t v5 = (v12 - 1) & v12;
          unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
        }
        long long v14 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v10);
        uint64_t v16 = *v14;
        uint64_t v15 = v14[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v17 = Hasher._finalize()();
        uint64_t v18 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v19 = v17 & ~v18;
        unint64_t v20 = v19 >> 6;
        uint64_t v21 = 1 << v19;
        if (((1 << v19) & *(void *)(v37 + 8 * (v19 >> 6))) != 0) {
          break;
        }
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
      }
      uint64_t v22 = *(void *)(a3 + 48);
      uint64_t v23 = (void *)(v22 + 16 * v19);
      BOOL v24 = *v23 == v16 && v23[1] == v15;
      if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v26 = ~v18;
        for (unint64_t i = v19 + 1; ; unint64_t i = v28 + 1)
        {
          unint64_t v28 = i & v26;
          if (((*(void *)(v37 + (((i & v26) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v26)) & 1) == 0) {
            break;
          }
          uint64_t v29 = (void *)(v22 + 16 * v28);
          BOOL v30 = *v29 == v16 && v29[1] == v15;
          if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v20 = v28 >> 6;
            uint64_t v21 = 1 << v28;
            goto LABEL_32;
          }
        }
        goto LABEL_6;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_32:
      uint64_t v25 = *(void *)(a1 + 8 * v20);
      *(void *)(a1 + 8 * v2sub_10050ECB8((uint64_t)sub_100292128, 0) = v21 | v25;
    }
    while ((v21 & v25) != 0);
    uint64_t v7 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_49;
    }
    if (v7 != *(void *)(a3 + 16)) {
      continue;
    }
    break;
  }
  swift_release();
  return 1;
}

uint64_t sub_1002CB17C(uint64_t a1, void *a2, uint64_t a3, uint64_t isUniquelyReferenced_nonNull_native)
{
  uint64_t v6 = v4;
  uint64_t v115 = a3;
  uint64_t v111 = a1;
  uint64_t v113 = type metadata accessor for Date();
  unint64_t v9 = *(id **)(v113 - 8);
  *(void *)&double v10 = __chkstk_darwin(v113).n128_u64[0];
  uint64_t v112 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119[0] = 0;
  uint64_t v114 = a2;
  unint64_t v12 = (id *)[a2 remObjectIDWithError:v119, v10];
  if (!v12)
  {
    id v18 = v119[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v5;
  }
  int64_t v13 = v12;
  uint64_t v14 = qword_100907908;
  id v15 = v119[0];
  unint64_t v16 = v13;
  if (v14 != -1) {
    goto LABEL_32;
  }
LABEL_3:
  unint64_t v17 = sub_10058707C((unint64_t)v13, 1, isUniquelyReferenced_nonNull_native, (Class)qword_100942578, 0, 0);

  if (v6)
  {

    return v5;
  }
  uint64_t v107 = v9;
  uint64_t v110 = isUniquelyReferenced_nonNull_native;
  unint64_t v5 = sub_1002EEF34((uint64_t)_swiftEmptyArrayStorage);
  id v108 = (id)v16;
  uint64_t v109 = 0;
  if (!(v17 >> 62))
  {
    char isUniquelyReferenced_nonNull_native = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!isUniquelyReferenced_nonNull_native) {
      goto LABEL_34;
    }
    goto LABEL_9;
  }
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (isUniquelyReferenced_nonNull_native)
  {
LABEL_9:
    unint64_t v117 = v17;
    unint64_t v118 = v17 & 0xC000000000000001;
    uint64_t v6 = 4;
    uint64_t v116 = (void (**)(uint64_t, uint64_t))isUniquelyReferenced_nonNull_native;
    while (1)
    {
      unint64_t v16 = v6 - 4;
      if (v118) {
        unint64_t v20 = (id *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        unint64_t v20 = (id *)*(id *)(v17 + 8 * v6);
      }
      int64_t v13 = v20;
      uint64_t v21 = v6 - 3;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        swift_once();
        goto LABEL_3;
      }
      id v22 = [v20 canonicalName];
      if (v22) {
        break;
      }

LABEL_11:
      ++v6;
      if (v21 == isUniquelyReferenced_nonNull_native) {
        goto LABEL_34;
      }
    }
    uint64_t v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    unint64_t v9 = v13;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v119[0] = (id)v5;
    int64_t v13 = (id *)v5;
    unint64_t v16 = sub_1001806F8(v24, v26);
    unint64_t v28 = v5;
    uint64_t v29 = *(void *)(v5 + 16);
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30)) {
      goto LABEL_30;
    }
    unint64_t v5 = v27;
    if (*(void *)(v28 + 24) < v31)
    {
      sub_100313130(v31, isUniquelyReferenced_nonNull_native);
      int64_t v13 = (id *)v119[0];
      unint64_t v32 = sub_1001806F8(v24, v26);
      if ((v5 & 1) != (v33 & 1)) {
        goto LABEL_84;
      }
      unint64_t v16 = v32;
      char isUniquelyReferenced_nonNull_native = (uint64_t)v119[0];
      if ((v5 & 1) == 0) {
        goto LABEL_26;
      }
LABEL_24:
      uint64_t v34 = *(void *)(isUniquelyReferenced_nonNull_native + 56);
      uint64_t v35 = 8 * v16;

      *(void *)(v34 + v35) = v9;
      unint64_t v5 = isUniquelyReferenced_nonNull_native;
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = (uint64_t)v116;
      unint64_t v17 = v117;
      goto LABEL_11;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      char isUniquelyReferenced_nonNull_native = (uint64_t)v119[0];
      if (v27) {
        goto LABEL_24;
      }
    }
    else
    {
      int64_t v13 = v119;
      sub_10031AFF8();
      char isUniquelyReferenced_nonNull_native = (uint64_t)v119[0];
      if (v5) {
        goto LABEL_24;
      }
    }
LABEL_26:
    *(void *)(isUniquelyReferenced_nonNull_native + 8 * (v16 >> 6) + 64) |= 1 << v16;
    uint64_t v36 = (uint64_t *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v16);
    *uint64_t v36 = v24;
    v36[1] = v26;
    *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v16) = v9;
    uint64_t v37 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_31;
    }
    unint64_t v5 = isUniquelyReferenced_nonNull_native;
    *(void *)(isUniquelyReferenced_nonNull_native + 16) = v39;
    swift_bridgeObjectRetain();
    goto LABEL_28;
  }
LABEL_34:
  swift_bridgeObjectRelease();
  uint64_t v40 = swift_bridgeObjectRetain();
  uint64_t v41 = sub_10012674C(v40);
  swift_bridgeObjectRelease();
  uint64_t v42 = *(void *)(v41 + 16);
  if (v42 != 1)
  {
    if (!v42)
    {
LABEL_77:
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return v5;
    }
    uint64_t v49 = swift_bridgeObjectRetain();
    char v50 = sub_1002C8A10(v49, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v50)
    {
LABEL_78:
      swift_bridgeObjectRelease();

      return v5;
    }
    goto LABEL_44;
  }
  uint64_t v43 = sub_1002B12A4(v41);
  if (v44)
  {
    uint64_t v45 = v44;
    if (*(void *)(v5 + 16))
    {
      uint64_t v46 = v43;
      swift_bridgeObjectRetain();
      sub_1001806F8(v46, v45);
      char v48 = v47;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v48) {
        goto LABEL_78;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
LABEL_44:
    unint64_t v51 = sub_1002EEF34((uint64_t)_swiftEmptyArrayStorage);
    __chkstk_darwin(v51);
    *(&v106 - 2) = v115;
    uint64_t v52 = v109;
    uint64_t v54 = sub_1002B184C(v53, (void (*)(void **, id *))sub_1002CD070, (uint64_t)(&v106 - 4), v17);
    uint64_t v109 = v52;
    swift_bridgeObjectRelease();
    uint64_t v55 = *(void *)(v111 + 16);
    if (!v55) {
      goto LABEL_78;
    }
    uint64_t v116 = (void (**)(uint64_t, uint64_t))(v107 + 1);
    unint64_t v117 = kREMSupportedVersionUnset;
    unint64_t v56 = (void **)(swift_bridgeObjectRetain() + 40);
    unint64_t v118 = (unint64_t)v54;
    while (1)
    {
      uint64_t v60 = *(v56 - 1);
      unint64_t v59 = *v56;
      uint64_t v61 = *(void *)(v5 + 16);
      swift_bridgeObjectRetain();
      if (v61)
      {
        sub_1001806F8((uint64_t)v60, (uint64_t)v59);
        if (v62) {
          goto LABEL_76;
        }
      }
      v119[0] = v60;
      v119[1] = v59;
      sub_1000E4FD8();
      uint64_t v63 = StringProtocol.lowercased(with:)();
      if (v54[2])
      {
        unint64_t v65 = sub_1001806F8(v63, v64);
        if (v66)
        {
          id v67 = *(id *)(v54[7] + 8 * v65);
          swift_bridgeObjectRelease();
          NSString v68 = String._bridgeToObjectiveC()();
          [v67 setCanonicalName:v68];

          [v67 updateChangeCount];
          uint64_t v69 = (uint64_t)v60;
          id v70 = v67;
          uint64_t v71 = (void *)v5;
          char v72 = swift_isUniquelyReferenced_nonNull_native();
          v119[0] = v71;
          uint64_t v73 = v69;
          unint64_t v75 = sub_1001806F8(v69, (uint64_t)v59);
          uint64_t v76 = v71[2];
          BOOL v77 = (v74 & 1) == 0;
          uint64_t v78 = v76 + v77;
          if (__OFADD__(v76, v77)) {
            goto LABEL_81;
          }
          char v79 = v74;
          if (v71[3] >= v78)
          {
            if (v72)
            {
              unint64_t v5 = (unint64_t)v119[0];
              if ((v74 & 1) == 0) {
                goto LABEL_73;
              }
            }
            else
            {
              sub_10031AFF8();
              unint64_t v5 = (unint64_t)v119[0];
              if ((v79 & 1) == 0) {
                goto LABEL_73;
              }
            }
          }
          else
          {
            sub_100313130(v78, v72);
            unint64_t v80 = sub_1001806F8(v73, (uint64_t)v59);
            if ((v79 & 1) != (v81 & 1)) {
              goto LABEL_84;
            }
            unint64_t v75 = v80;
            unint64_t v5 = (unint64_t)v119[0];
            if ((v79 & 1) == 0)
            {
LABEL_73:
              *(void *)(v5 + 8 * (v75 >> 6) + 64) |= 1 << v75;
              os_log_t v103 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v75);
              uint64_t *v103 = v73;
              v103[1] = (uint64_t)v59;
              *(void *)(*(void *)(v5 + 56) + 8 * v75) = v70;
              uint64_t v104 = *(void *)(v5 + 16);
              BOOL v38 = __OFADD__(v104, 1);
              uint64_t v105 = v104 + 1;
              if (v38) {
                goto LABEL_82;
              }
              *(void *)(v5 + 16) = v105;
              swift_bridgeObjectRetain();
              goto LABEL_75;
            }
          }
          uint64_t v101 = *(void *)(v5 + 56);
          uint64_t v102 = 8 * v75;

          *(void *)(v101 + v102) = v70;
LABEL_75:
          uint64_t v54 = (void *)v118;

          swift_bridgeObjectRelease();
LABEL_76:
          swift_bridgeObjectRelease();
          goto LABEL_48;
        }
      }
      swift_bridgeObjectRelease();
      sub_1000963CC(0, (unint64_t *)&qword_100912B30);
      id v82 = [(id)swift_getObjCClassFromMetadata() newObjectID];
      uint64_t v83 = (uint64_t)v60;
      uint64_t v84 = (uint64_t)v112;
      static Date.now.getter();
      id v85 = sub_10040A1BC(v110, v82, v114, v84, v83, (uint64_t)v59, v117);

      (*v116)(v84, v113);
      [v85 updateChangeCount];
      id v86 = v85;
      id v87 = (void *)v5;
      char v88 = swift_isUniquelyReferenced_nonNull_native();
      v119[0] = v87;
      uint64_t v89 = v83;
      unint64_t v91 = sub_1001806F8(v83, (uint64_t)v59);
      uint64_t v92 = v87[2];
      BOOL v93 = (v90 & 1) == 0;
      uint64_t v94 = v92 + v93;
      if (__OFADD__(v92, v93))
      {
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
      }
      char v95 = v90;
      if (v87[3] >= v94)
      {
        if (v88)
        {
          unint64_t v5 = (unint64_t)v119[0];
          if ((v90 & 1) == 0) {
            goto LABEL_65;
          }
        }
        else
        {
          sub_10031AFF8();
          unint64_t v5 = (unint64_t)v119[0];
          if ((v95 & 1) == 0) {
            goto LABEL_65;
          }
        }
      }
      else
      {
        sub_100313130(v94, v88);
        unint64_t v96 = sub_1001806F8(v89, (uint64_t)v59);
        if ((v95 & 1) != (v97 & 1)) {
          goto LABEL_84;
        }
        unint64_t v91 = v96;
        unint64_t v5 = (unint64_t)v119[0];
        if ((v95 & 1) == 0)
        {
LABEL_65:
          *(void *)(v5 + 8 * (v91 >> 6) + 64) |= 1 << v91;
          unint64_t v98 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v91);
          *unint64_t v98 = v89;
          v98[1] = (uint64_t)v59;
          *(void *)(*(void *)(v5 + 56) + 8 * v91) = v86;
          uint64_t v99 = *(void *)(v5 + 16);
          BOOL v38 = __OFADD__(v99, 1);
          uint64_t v100 = v99 + 1;
          if (v38) {
            goto LABEL_80;
          }
          *(void *)(v5 + 16) = v100;
          swift_bridgeObjectRetain();
          goto LABEL_47;
        }
      }
      uint64_t v57 = *(void *)(v5 + 56);
      uint64_t v58 = 8 * v91;

      *(void *)(v57 + v58) = v86;
LABEL_47:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v54 = (void *)v118;
LABEL_48:
      v56 += 2;
      if (!--v55) {
        goto LABEL_77;
      }
    }
  }
  __break(1u);
LABEL_84:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1002CBB08(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 objectID];
  id v5 = [a1 remObjectID];
  unsigned __int8 v6 = [a1 shouldCategorizeGroceryItems];
  id v7 = [a1 groceryLocaleID];
  if (v7)
  {
    int64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  unsigned int v12 = [a1 sharingStatus];

  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v11;
  *(unsigned char *)(a2 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = v12 == 2;
}

uint64_t sub_1002CBBF8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100912AA0);
  __chkstk_darwin(v4 - 8);
  unsigned __int8 v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v29 - v15;
  if (!a1) {
    return 1;
  }
  id v17 = a1;
  id v18 = [v17 groupIdentifier];
  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_9;
  }
  unint64_t v19 = v18;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v9, v13, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_9:

    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
    return 0;
  }
  v20(v16, v9, v10);
  if (*(void *)(a2 + 16) && (unint64_t v21 = sub_100306EC4((uint64_t)v16), (v22 & 1) != 0))
  {
    unint64_t v23 = v21;
    uint64_t v24 = *(void *)(a2 + 56);
    uint64_t v25 = _s31ThreadSafePartialRepresentationVMa(0);
    uint64_t v26 = *(void *)(v25 - 8);
    sub_1002CAB18(v24 + *(void *)(v26 + 72) * v23, (uint64_t)v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v6, 0, 1, v25);
  }
  else
  {
    uint64_t v25 = _s31ThreadSafePartialRepresentationVMa(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v6, 1, 1, v25);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  _s31ThreadSafePartialRepresentationVMa(0);
  BOOL v27 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v6, 1, v25) == 1;
  sub_1000966BC((uint64_t)v6, &qword_100912AA0);
  return v27;
}

void sub_1002CBFB4(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  id v154 = a4;
  uint64_t v145 = a3;
  uint64_t v161 = a2;
  uint64_t v148 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v148);
  uint64_t v8 = (char *)v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for REMRemindersListDataView.GroceryAutoCategorizationMessage();
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v160 = (char *)v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  char v139 = (void *)((char *)v133 - v11);
  __chkstk_darwin(v12);
  id v141 = (char *)v133 - v13;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14 - 8);
  id v17 = (char *)v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)v133 - v19;
  __chkstk_darwin(v21);
  unint64_t v23 = (char *)v133 - v22;
  __chkstk_darwin(v24);
  uint64_t v152 = (uint64_t)v133 - v25;
  __chkstk_darwin(v26);
  uint64_t v151 = (uint64_t)v133 - v27;
  __chkstk_darwin(v28);
  uint64_t v140 = (char *)v133 - v29;
  __chkstk_darwin(v30);
  uint64_t v142 = (uint64_t)v133 - v31;
  uint64_t v162 = type metadata accessor for UUID();
  uint64_t v155 = *(void *)(v162 - 8);
  __chkstk_darwin(v162);
  uint64_t v159 = (char *)v133 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)v133 - v34;
  __chkstk_darwin(v36);
  int64_t v146 = (char *)v133 - v37;
  *(void *)&double v39 = __chkstk_darwin(v38).n128_u64[0];
  uint64_t v149 = (char *)v133 - v40;
  id v156 = a1;
  id v41 = [a1 name:v39];
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v153 = v43;
  }
  else
  {
    uint64_t v147 = 0;
    uint64_t v153 = 0;
  }
  uint64_t v150 = v8;
  unint64_t v44 = v161;
  if ((unint64_t)v161 >> 62)
  {
    if (v161 < 0) {
      uint64_t v8 = (char *)v161;
    }
    else {
      uint64_t v8 = (char *)(v161 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    int64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v45 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v44 = v161;
      if (!v69)
      {
        swift_bridgeObjectRelease();
        goto LABEL_61;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v45 = *(void *)((v161 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v45 == 1)
    {
      swift_bridgeObjectRetain();
LABEL_7:
      uint64_t v46 = v155;
      if ((v44 & 0xC000000000000001) != 0)
      {
        id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_10:
        char v48 = v47;
        swift_bridgeObjectRelease();
        id v49 = [v48 groupIdentifier];
        if (v49)
        {
          char v50 = v49;
          unint64_t v51 = v146;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
          uint64_t v53 = v162;
          v52(v17, v51, v162);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v17, 0, 1, v53);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v17, 1, v53) != 1)
          {
            uint64_t v138 = v5;
            v52(v35, v17, v53);
            id v54 = [v48 memberIdentifier];
            uint64_t v55 = v159;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v56 = sub_100094134(&qword_100912B28);
            uint64_t v57 = v160;
            uint64_t v58 = &v160[*(int *)(v56 + 48)];
            unint64_t v59 = &v160[*(int *)(v56 + 64)];
            uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
            v60(v160, v55, v53);
            v60(v58, v35, v53);
            uint64_t v61 = v145 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_queuedAt;
            uint64_t v62 = type metadata accessor for Date();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(v59, v61, v62);
            uint64_t v63 = v143;
            uint64_t v64 = v144;
            (*(void (**)(char *, void, uint64_t))(v143 + 104))(v57, enum case for REMRemindersListDataView.GroceryAutoCategorizationMessage.oneReminderToOneSection(_:), v144);
            REMRemindersListDataView.GroceryAutoCategorizationMessage.encodedString.getter();
            if (v65)
            {
              NSString v66 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
            }
            else
            {
              NSString v66 = 0;
            }
            [v156 setName:v66];

            (*(void (**)(char *, uint64_t))(v63 + 8))(v160, v64);
            id v67 = *(void (**)(char *, uint64_t))(v155 + 8);
            uint64_t v68 = v162;
            v67(v159, v162);
            v67(v35, v68);
            goto LABEL_61;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v17, 1, 1, v162);
        }

        sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909E50);
        goto LABEL_61;
      }
      if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v47 = *(id *)(v44 + 32);
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_80;
    }
  }
  if (v45 < 2) {
    goto LABEL_61;
  }
  uint64_t v137 = (void (*)(uint64_t, char *, uint64_t))(v44 >> 62);
  uint64_t v138 = v5;
  uint64_t v163 = (char *)_swiftEmptyArrayStorage;
  sub_1001DE118(0, v45, 0);
  uint64_t v70 = v161;
  uint64_t v71 = 0;
  uint64_t v35 = v163;
  id v157 = (unsigned int (*)(char *, uint64_t, uint64_t))(v161 & 0xC000000000000001);
  int64_t v158 = v45;
  uint64_t v160 = (char *)(v155 + 56);
  do
  {
    if (v157) {
      id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v72 = *(id *)(v70 + 8 * v71 + 32);
    }
    uint64_t v73 = v72;
    id v74 = [v72 groupIdentifier];
    if (v74)
    {
      unint64_t v75 = v74;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v76 = *(char **)v160;
      BOOL v77 = v20;
      uint64_t v78 = 0;
    }
    else
    {
      uint64_t v76 = *(char **)v160;
      BOOL v77 = v20;
      uint64_t v78 = 1;
    }
    uint64_t v159 = v76;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v76)(v77, v78, 1, v162);
    sub_100096408((uint64_t)v20, (uint64_t)v23, (uint64_t *)&unk_100909E50);

    uint64_t v163 = v35;
    unint64_t v80 = *((void *)v35 + 2);
    unint64_t v79 = *((void *)v35 + 3);
    if (v80 >= v79 >> 1)
    {
      sub_1001DE118(v79 > 1, v80 + 1, 1);
      uint64_t v35 = v163;
    }
    ++v71;
    *((void *)v35 + 2) = v80 + 1;
    id v17 = (char *)((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v46 = *(void *)(v15 + 72);
    sub_100096408((uint64_t)v23, (uint64_t)&v17[(void)v35 + v46 * v80], (uint64_t *)&unk_100909E50);
    uint64_t v70 = v161;
  }
  while (v158 != v71);
  if (v137)
  {
    swift_bridgeObjectRetain();
    uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v81 = *(void *)((v161 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v82 = v162;
  uint64_t v15 = v155;
  uint64_t v8 = v150;
  uint64_t v5 = v151;
  if (!v81)
  {
    swift_bridgeObjectRelease();
    uint64_t v88 = v142;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v159)(v142, 1, 1, v82);
LABEL_47:
    swift_bridgeObjectRelease();
    sub_1000966BC(v88, (uint64_t *)&unk_100909E50);
    goto LABEL_48;
  }
  if (!v157)
  {
    if (!*(void *)((v161 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v83 = *(id *)(v161 + 32);
    goto LABEL_42;
  }
LABEL_80:
  id v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_42:
  uint64_t v84 = v83;
  swift_bridgeObjectRelease();
  id v85 = [v84 groupIdentifier];

  if (v85)
  {
    uint64_t v86 = (uint64_t)v140;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v87 = 0;
  }
  else
  {
    uint64_t v87 = 1;
    uint64_t v86 = (uint64_t)v140;
  }
  uint64_t v89 = v162;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v159)(v86, v87, 1, v162);
  uint64_t v88 = v142;
  sub_100096408(v86, v142, (uint64_t *)&unk_100909E50);
  uint64_t v90 = v15;
  unint64_t v91 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v140 = (char *)(v15 + 48);
  id v157 = v91;
  if (v91((char *)v88, 1, v89) == 1) {
    goto LABEL_47;
  }
  uint64_t v100 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  uint64_t v135 = v15 + 32;
  uint64_t v134 = v100;
  v100(v149, v88, v89);
  uint64_t v101 = *((void *)v35 + 2);
  if (!v101)
  {
    swift_bridgeObjectRelease();
    uint64_t v121 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
    uint64_t v122 = v90;
LABEL_71:
    uint64_t v123 = sub_100094134(&qword_100912B20);
    uint64_t v124 = v139;
    uint64_t v125 = (char *)v139 + *(int *)(v123 + 48);
    uint64_t v126 = (char *)v139 + *(int *)(v123 + 64);
    int64_t *v139 = v158;
    v121(v125, v149, v89);
    uint64_t v127 = v145 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_queuedAt;
    uint64_t v128 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v128 - 8) + 16))(v126, v127, v128);
    uint64_t v129 = v143;
    uint64_t v130 = v144;
    (*(void (**)(int64_t *, void, uint64_t))(v143 + 104))(v124, enum case for REMRemindersListDataView.GroceryAutoCategorizationMessage.manyRemindersToOneSection(_:), v144);
    REMRemindersListDataView.GroceryAutoCategorizationMessage.encodedString.getter();
    if (v131)
    {
      NSString v132 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v132 = 0;
    }
    [v156 setName:v132];

    (*(void (**)(int64_t *, uint64_t))(v129 + 8))(v124, v130);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v149, v162);
    goto LABEL_61;
  }
  uint64_t v104 = *(void (**)(uint64_t, char *, uint64_t))(v90 + 16);
  uint64_t v102 = v90 + 16;
  os_log_t v103 = v104;
  uint64_t v105 = v102 - 8;
  uint64_t v142 = v102;
  v133[0] = v102 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  swift_bridgeObjectRetain();
  uint64_t v106 = (uint64_t)&v17[(void)v35];
  uint64_t v136 = (void (**)(uint64_t, uint64_t))v105;
  v133[1] = v105 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v107 = v157;
  uint64_t v137 = v104;
  while (1)
  {
    uint64_t v161 = v101;
    v103(v5, v149, v89);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v159)(v5, 0, 1, v89);
    uint64_t v108 = (uint64_t)&v8[*(int *)(v148 + 48)];
    sub_1001248EC(v106, (uint64_t)v8);
    sub_1001248EC(v5, v108);
    if (v107(v8, 1, v89) != 1) {
      break;
    }
    uint64_t v109 = v106;
    uint64_t v110 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v107;
    uint64_t v111 = (uint64_t)v8;
    sub_1000966BC(v5, (uint64_t *)&unk_100909E50);
    if (v110(v108, 1, v162) != 1) {
      goto LABEL_76;
    }
    sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909E50);
    uint64_t v107 = (unsigned int (*)(char *, uint64_t, uint64_t))v110;
    uint64_t v106 = v109;
LABEL_52:
    v106 += v46;
    uint64_t v89 = v162;
    uint64_t v101 = v161 - 1;
    uint64_t v8 = v150;
    os_log_t v103 = v137;
    if (v161 == 1)
    {
      uint64_t v121 = (void (*)(char *, char *, uint64_t))v137;
      swift_bridgeObjectRelease_n();
      uint64_t v122 = v155;
      goto LABEL_71;
    }
  }
  uint64_t v111 = (uint64_t)v8;
  uint64_t v112 = v5;
  uint64_t v113 = v152;
  sub_1001248EC(v111, v152);
  if (v157((char *)v108, 1, v89) != 1)
  {
    uint64_t v114 = v146;
    v134(v146, v108, v89);
    sub_1002CDE64((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v115 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v116 = *v136;
    (*v136)((uint64_t)v114, v89);
    sub_1000966BC(v151, (uint64_t *)&unk_100909E50);
    v116(v152, v89);
    uint64_t v5 = v151;
    sub_1000966BC(v111, (uint64_t *)&unk_100909E50);
    uint64_t v107 = v157;
    if ((v115 & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_77;
    }
    goto LABEL_52;
  }
  sub_1000966BC(v112, (uint64_t *)&unk_100909E50);
  (*v136)(v113, v89);
LABEL_76:
  sub_1000966BC(v111, (uint64_t *)&unk_10090B4C0);
  swift_bridgeObjectRelease_n();
  uint64_t v116 = *v136;
LABEL_77:
  v116((uint64_t)v149, v162);
LABEL_48:
  uint64_t v92 = v144;
  uint64_t v93 = v143;
  uint64_t v94 = (int64_t *)v141;
  char v95 = (char *)v94 + *(int *)(sub_100094134(&qword_100912B18) + 48);
  *uint64_t v94 = v158;
  uint64_t v96 = v145 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_queuedAt;
  uint64_t v97 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v97 - 8) + 16))(v95, v96, v97);
  (*(void (**)(int64_t *, void, uint64_t))(v93 + 104))(v94, enum case for REMRemindersListDataView.GroceryAutoCategorizationMessage.manyRemindersToManySections(_:), v92);
  REMRemindersListDataView.GroceryAutoCategorizationMessage.encodedString.getter();
  if (v98)
  {
    NSString v99 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v99 = 0;
  }
  [v156 setName:v99];

  (*(void (**)(int64_t *, uint64_t))(v93 + 8))(v94, v92);
LABEL_61:
  uint64_t v163 = 0;
  if ([v154 save:&v163])
  {
    if (v153)
    {
      unint64_t v117 = v163;
      goto LABEL_65;
    }
    id v120 = v163;
LABEL_67:
    NSString v119 = 0;
  }
  else
  {
    unint64_t v118 = v163;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (!v153) {
      goto LABEL_67;
    }
LABEL_65:
    NSString v119 = String._bridgeToObjectiveC()();
  }
  [v156 setName:v119];
  swift_bridgeObjectRelease();
}

void sub_1002CD070(uint64_t *a1, id *a2)
{
}

uint64_t sub_1002CD08C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

const char *sub_1002CD0F4()
{
  return "groceryLocaleID";
}

void sub_1002CD100(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1002CD120(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1002CD140()
{
  return "membershipsOfRemindersInSectionsAsData";
}

void sub_1002CD14C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1002CD16C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1002CD18C()
{
  return "membershipsOfRemindersInSectionsChecksum";
}

void sub_1002CD198(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1002CD1B8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1002CD1D8()
{
  return "groceryLocalCorrectionsAsData";
}

void sub_1002CD1E4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1002CD204(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1002CD224()
{
  return "resolutionTokenMap_v3_JSONData";
}

void sub_1002CD230(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1002CD250(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1002CD278(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002CD2E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002CD348(uint64_t a1, uint64_t a2)
{
  return a2;
}

ValueMetadata *type metadata accessor for RDGroceryOperationCategorizeRemindersInList.Configuration()
{
  return &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration;
}

uint64_t *sub_1002CD3B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1002CD4A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002CD52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1002CD5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002CD694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002CD73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002CD750);
}

uint64_t sub_1002CD750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v1sub_10050ECB8((uint64_t)sub_100292128, 0) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1002CD820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002CD834);
}

uint64_t sub_1002CD834(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t sub_1002CD8F4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s31ThreadSafePartialRepresentationVwxx(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *_s31ThreadSafePartialRepresentationVwCP_0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwta(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedDueDateDeltaAlert(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedDueDateDeltaAlert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s31ThreadSafePartialRepresentationVMa_0()
{
  return &_s31ThreadSafePartialRepresentationVN;
}

uint64_t _s31ThreadSafePartialRepresentationVwxx_0(id *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t _s31ThreadSafePartialRepresentationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = *(unsigned char *)(a2 + 40);
  id v6 = v3;
  id v7 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s31ThreadSafePartialRepresentationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s31ThreadSafePartialRepresentationVMa_1()
{
  return &_s31ThreadSafePartialRepresentationVN_0;
}

unint64_t sub_1002CDD7C()
{
  unint64_t result = qword_100912BD8;
  if (!qword_100912BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100912BD8);
  }
  return result;
}

uint64_t sub_1002CDDD0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_100910030);
    sub_1002CDE64(a2, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002CDE64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002CDF48);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys()
{
  return &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys;
}

unint64_t sub_1002CDF84()
{
  unint64_t result = qword_100912C08;
  if (!qword_100912C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100912C08);
  }
  return result;
}

unint64_t sub_1002CDFDC()
{
  unint64_t result = qword_100912C10;
  if (!qword_100912C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100912C10);
  }
  return result;
}

unint64_t sub_1002CE034()
{
  unint64_t result = qword_100912C18;
  if (!qword_100912C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100912C18);
  }
  return result;
}

void sub_1002CE098(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v6, (uint64_t *)&unk_100909A40);
  id v7 = *a2;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setActivityDate:isa];
}

uint64_t sub_1002CE1CC()
{
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  id v7 = *(id *)(v0 + *(int *)(updated + 24));
  swift_bridgeObjectRetain();
  sub_100094134((uint64_t *)&unk_10090A4C0);
  Optional.tryUnwrap(_:file:line:)();
  swift_bridgeObjectRelease();
  id v6 = [*(id *)(v0 + *(int *)(updated + 28)) list];
  sub_100094134((uint64_t *)&unk_100914200);
  Optional.tryUnwrap(_:file:line:)();

  id v2 = [v7 sharees:v6];
  if (v2)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
    sub_1000E4F40((unint64_t *)&unk_100913900, (unint64_t *)&qword_100909AF8);
    static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_100094134(&qword_100912E60);
  Optional.tryUnwrap(_:file:line:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1002D85FC(v8, v8, v9);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v5;
}

void sub_1002CE468()
{
  id v1 = [*(id *)(v0+ *(int *)(type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0)+ 28)) account];
  sub_100094134((uint64_t *)&unk_10090AF30);
  Optional.tryUnwrap(_:file:line:)();
}

uint64_t sub_1002CE538()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100912C20);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100912C20);
  if (qword_1009077D8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423D0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002CE600()
{
  id v1 = [v0 syncActivityNotificationEngine_accountSignInTime];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for Date();
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1002CE674(uint64_t a1)
{
  if (a1)
  {
    type metadata accessor for Date();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  [v1 setSyncActivityNotificationEngine_accountSignInTime:isa];
}

id sub_1002CE700()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 muteNotificationOptionsForSharedList:v1];

  return v2;
}

uint64_t sub_1002CE744()
{
  _StringGuts.grow(_:)(106);
  v1._object = (void *)0x80000001007D0EA0;
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  if (*v0) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (*v0) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0xD000000000000017;
  v5._object = (void *)0x80000001007D0EC0;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0xD00000000000001BLL;
  v7._object = (void *)0x80000001007D0EE0;
  String.append(_:)(v7);
  if (v0[16]) {
    uint64_t v8 = 1702195828;
  }
  else {
    uint64_t v8 = 0x65736C6166;
  }
  if (v0[16]) {
    unint64_t v9 = 0xE400000000000000;
  }
  else {
    unint64_t v9 = 0xE500000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0xD000000000000020;
  v11._object = (void *)0x80000001007D0F00;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Int sub_1002CE8F8()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned char *)v0 & 1);
  Hasher._combine(_:)(*(void *)(v0 + 8));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 16) & 1);
  Hasher._combine(_:)(*(void *)(v0 + 24));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 32) & 1);
  return Hasher._finalize()();
}

void sub_1002CE980()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 16);
  Swift::UInt v3 = *(void *)(v0 + 24);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 32);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_1002CE9EC()
{
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_1002CEA84(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2 = 0;
  if (((*a1 ^ *a2) & 1) == 0
    && *((void *)a1 + 1) == *((void *)a2 + 1)
    && ((a1[16] ^ a2[16]) & 1) == 0
    && *((void *)a1 + 3) == *((void *)a2 + 3))
  {
    char v2 = a2[32] ^ a1[32] ^ 1;
  }
  return v2 & 1;
}

id sub_1002CEAE0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::UInt v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [*(id *)(v0+ *(int *)(type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0)+ 28)) remObjectID];
  if (v5)
  {
    Swift::String v6 = v5;
    id v7 = [v5 uuid];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = UUID.uuidString.getter();
    unint64_t v10 = v9;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    id v20 = sub_1002CED08();
    uint64_t v21 = v11;
    swift_bridgeObjectRetain();
    v12._countAndFlagsBits = 46;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v20 = sub_1002CED08();
    uint64_t v21 = v14;
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = 46;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    id v17 = v20;
    uint64_t v16 = v21;
    UUID.init()();
    uint64_t v8 = UUID.uuidString.getter();
    unint64_t v10 = v18;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    id v20 = v17;
    uint64_t v21 = v16;
  }
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v8;
  v13._object = v10;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

id sub_1002CED08()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  id v7 = [*(id *)(v0 + *(int *)(updated + 28)) list];
  v31._countAndFlagsBits = (uint64_t)v7;
  sub_100094134((uint64_t *)&unk_100914200);
  Optional.tryUnwrap(_:file:line:)();

  id v9 = v32;
  id v10 = [v32 remObjectID];

  if (v10)
  {
    id v11 = [v10 uuid];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v12 = (void *)UUID.uuidString.getter();
    uint64_t v14 = v13;
    Swift::String v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v5, v2);
    id v32 = v12;
    uint64_t v33 = v14;
    uint64_t v16 = (void *)sub_1002CE1CC();
    if (v16)
    {
      id v17 = v16;
      id v18 = [v16 remObjectID];

      if (v18)
      {
        id v19 = [v18 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = UUID.uuidString.getter();
        uint64_t v22 = v21;
        v15(v5, v2);
        v31._countAndFlagsBits = 46;
        v31._object = (void *)0xE100000000000000;
        v23._countAndFlagsBits = v20;
        v23._object = v22;
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v24 = *(void *)(v1 + *(int *)(updated + 20));
    unint64_t v25 = 0xE700000000000000;
    unint64_t v26 = 0x6E776F6E6B6E75;
    switch(v24)
    {
      case 0:
        break;
      case 1:
        unint64_t v25 = 0xE300000000000000;
        unint64_t v26 = 6579297;
        break;
      case 2:
        uint64_t v27 = "titleMayHaveDirtyHashtag";
        goto LABEL_12;
      case 3:
        uint64_t v27 = "notesMayHaveDirtyHashtag";
LABEL_12:
        unint64_t v25 = (unint64_t)(v27 - 32) | 0x8000000000000000;
        unint64_t v26 = 0xD000000000000018;
        break;
      case 4:
        unint64_t v26 = 0xD00000000000001BLL;
        unint64_t v25 = 0x80000001007CF560;
        break;
      case 5:
        unint64_t v25 = 0xE800000000000000;
        unint64_t v26 = 0x6574656C706D6F63;
        break;
      default:
        unint64_t v25 = 0xEF746C7561666564;
        unint64_t v26 = 0x206E776F6E6B6E75;
        break;
    }
    v31._countAndFlagsBits = 46;
    v31._object = (void *)0xE100000000000000;
    unint64_t v28 = v25;
    String.append(_:)(*(Swift::String *)&v26);
    swift_bridgeObjectRelease();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    return v32;
  }
  else
  {
    UUID.init()();
    uint64_t v8 = UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return (id)v8;
}

uint64_t REMSharedEntitySyncActivityType.description.getter()
{
  return 0x206E776F6E6B6E75;
}

void sub_1002CF1F8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v5 = *(void **)(v0 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_scheduler);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((v12[15] & 1) == 0)
  {
    sub_1002CF4A0(v0);
    return;
  }
  if (qword_100907270 != -1) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_100912C20);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v10 = 0;
    swift_slowDealloc();
  }
}

uint64_t sub_1002CF42C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void sub_1002CF4A0(uint64_t a1)
{
  if (qword_100907270 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_100912C20);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ðŸ“” RDSyncActivityEngine Starting...", v5, 2u);
    swift_slowDealloc();
  }

  swift_retain_n();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  uint64_t v8 = &unk_100912000;
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v9 = 136315138;
    uint64_t v10 = sub_1002CE744();
    sub_1000C51B8(v10, v11, &v19);
    uint64_t v8 = (void *)&unk_100912000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ðŸ“” RDSyncActivityEngine: Startup Parameter Summary: {%s}", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  sub_1002CF88C();
  Swift::String v12 = (unsigned char *)(a1 + v8[400]);
  if (*v12 & 1) != 0 || (v12[16])
  {
    sub_1002D053C();
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v19) = 1;
    swift_retain();
    static Published.subscript.setter();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "ðŸ“” RDSyncActivityEngine Started", v18, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      Swift::String v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ðŸ“” RDSyncActivityEngine is in manual testing mode. All subscribed hooks are disabled.", v15, 2u);
      swift_slowDealloc();
    }

    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v19) = 1;
    swift_retain();
    static Published.subscript.setter();
  }
}

uint64_t sub_1002CF88C()
{
  uint64_t v102 = *v0;
  uint64_t v1 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v100 = (char *)v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_100094134((uint64_t *)&unk_10090DD20);
  uint64_t v104 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  os_log_type_t v4 = (char *)v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v90 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_100094134((uint64_t *)&unk_1009081D0);
  uint64_t v103 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v10 = (char *)v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_100094134(&qword_100912F68);
  uint64_t v105 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  char v95 = (char *)v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_100094134(&qword_100912F70);
  uint64_t v106 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v73 = (char *)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = RDSyncActivityNotificationEngineAuthor;
  uint64_t v13 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  uint64_t v94 = sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t v16 = swift_allocObject();
  long long v93 = xmmword_100776E40;
  *(_OWORD *)(v16 + 16) = xmmword_100776E40;
  *(void *)(v16 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v16 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = v17;
  id v92 = self;
  id v18 = [v92 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v79 = v8;
  uint64_t v21 = (void *)sub_100405004(v19, v20, v13, v15, v16);
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v89 = v6 + 8;
  unint64_t v91 = v22;
  v22(v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v107 = v21;
  uint64_t v87 = sub_100094134((uint64_t *)&unk_1009081E0);
  uint64_t v86 = sub_100094134((uint64_t *)&unk_10090AB80);
  uint64_t v85 = sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
  uint64_t v84 = sub_1005321B8;
  unint64_t v80 = v4;
  Publisher.map<A>(_:)();
  uint64_t v82 = sub_1000967F4((unint64_t *)&unk_10090AB90, (uint64_t *)&unk_10090DD20);
  id v83 = sub_1000F3ED8;
  id v67 = v10;
  uint64_t v23 = v98;
  Publisher.filter(_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v104 + 8);
  v104 += 8;
  uint64_t v81 = v24;
  v24(v4, v23);
  swift_release();
  uint64_t v25 = v97;
  uint64_t v26 = *(void *)(v97
                  + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_accountSignInOrOutSubscriptionTransactionRegistrar);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v26;
  *(void *)(v27 + 24) = 1;
  uint64_t v78 = sub_1000967F4((unint64_t *)&unk_100908200, (uint64_t *)&unk_1009081D0);
  swift_retain();
  uint64_t v28 = v96;
  uint64_t v29 = v95;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v103 + 8);
  v103 += 8;
  BOOL v77 = v30;
  v30(v10, v28);
  id v107 = *(id *)(v25 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_scheduler);
  id v31 = v107;
  uint64_t v75 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v32 = *(void *)(v75 - 8);
  id v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  uint64_t v76 = v32 + 56;
  uint64_t v33 = (uint64_t)v100;
  v74(v100, 1, 1, v75);
  uint64_t v71 = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  uint64_t v70 = sub_1000967F4(&qword_100912F78, &qword_100912F68);
  uint64_t v72 = sub_1000E4F40((unint64_t *)&qword_10090D990, (unint64_t *)&qword_10090F370);
  id v68 = v31;
  uint64_t v34 = v73;
  uint64_t v35 = v99;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v33, (uint64_t *)&unk_1009081C0);

  uint64_t v36 = *(void (**)(char *, uint64_t))(v105 + 8);
  v105 += 8;
  uint64_t v69 = v36;
  v36(v29, v35);
  uint64_t v37 = (void *)swift_allocObject();
  v37[2] = sub_1002D36F0;
  v37[3] = 0;
  v37[4] = v26;
  v66[1] = sub_1000967F4(&qword_100912F80, &qword_100912F70);
  uint64_t v38 = v26;
  swift_retain();
  uint64_t v39 = v101;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  swift_release();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v106 + 8);
  v106 += 8;
  id v41 = v34;
  v40(v34, v39);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v42 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v43;
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v93;
  *(void *)(v45 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v45 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = v46;
  id v47 = [v92 defaultCenter];
  char v48 = v79;
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v51 = (void *)sub_100405004(v49, v50, v42, v44, v45);
  swift_bridgeObjectRelease();
  v91(v48, v90);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v107 = v51;
  uint64_t v52 = v80;
  Publisher.map<A>(_:)();
  uint64_t v53 = v67;
  uint64_t v54 = v98;
  Publisher.filter(_:)();
  v81(v52, v54);
  swift_release();
  uint64_t v55 = swift_allocObject();
  uint64_t v56 = v38;
  *(void *)(v55 + 16) = v38;
  *(void *)(v55 + 24) = 1;
  swift_retain();
  uint64_t v57 = v96;
  uint64_t v58 = v95;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  v77(v53, v57);
  unint64_t v59 = v68;
  id v107 = v68;
  uint64_t v60 = (uint64_t)v100;
  v74(v100, 1, 1, v75);
  id v61 = v59;
  uint64_t v62 = v99;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v60, (uint64_t *)&unk_1009081C0);

  v69(v58, v62);
  uint64_t v63 = (void *)swift_allocObject();
  v63[2] = sub_1002D3710;
  void v63[3] = 0;
  v63[4] = v56;
  swift_retain();
  uint64_t v64 = v101;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  swift_release();
  v40(v41, v64);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1002D053C()
{
  uint64_t v1 = v0;
  uint64_t v140 = *v0;
  uint64_t v137 = sub_100094134(&qword_100912E68);
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  NSString v132 = (char *)&v96 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_100094134((uint64_t *)&unk_10090AFA0);
  uint64_t v133 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v130 = (char **)((char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v124 = sub_100094134(&qword_100912E70);
  uint64_t v125 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v122 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = sub_100094134(&qword_100912E78);
  uint64_t v126 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v121 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_100094134(&qword_100912E80);
  uint64_t v129 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v128 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_100094134(&qword_100912E88);
  uint64_t v138 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v135 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_100094134(&qword_100912E90);
  id v120 = *(void (***)(char *, uint64_t))(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v114 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100094134(&qword_100912E98);
  uint64_t v110 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  id v107 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_100094134(&qword_100912EA0);
  uint64_t v116 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v108 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_100094134(&qword_100912EA8);
  uint64_t v118 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v111 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_100094134(&qword_100912EB0);
  uint64_t v147 = *(void *)(v149 - 8);
  uint64_t v12 = __chkstk_darwin(v149);
  char v115 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int64_t v146 = (char *)&v96 - v14;
  uint64_t v15 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100094134(&qword_10090F0D0);
  __chkstk_darwin(v18 - 8);
  uint64_t v98 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v97 = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v96 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100094134(&qword_100912EB8);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_100094134(&qword_100912EC0);
  uint64_t v101 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v28 = (char *)&v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_100094134(&qword_100912EC8);
  uint64_t v105 = *(void (***)(char *, void))(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v30 = (char *)&v96 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_100094134(&qword_100912ED0);
  uint64_t v104 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v99 = (char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = v1;
  long long v32 = *(_OWORD *)((char *)v1
                  + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration
                  + 16);
  long long v152 = *(_OWORD *)((char *)v1
                   + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration);
  long long v153 = v32;
  char v154 = *((unsigned char *)v1
         + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration
         + 32);
  id v151 = &_swiftEmptySetSingleton;
  uint64_t v106 = sub_100094134((uint64_t *)&unk_10090DD40);
  Just.init(_:)();
  uint64_t v150 = &v152;
  Just.drop(while:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  uint64_t v33 = v98;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v98, 1, 1, v20);
  id v151 = *(id *)((char *)v1 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_scheduler);
  id v34 = v151;
  uint64_t v35 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
  uint64_t v145 = v35;
  uint64_t v143 = v37;
  uint64_t v142 = v36 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v37)(v17, 1, 1);
  uint64_t v38 = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1000967F4(&qword_100912ED8, &qword_100912EC0);
  uint64_t v39 = sub_1000E4F40((unint64_t *)&qword_10090D990, (unint64_t *)&qword_10090F370);
  id v112 = v34;
  uint64_t v40 = v96;
  uint64_t v41 = (uint64_t)v33;
  uint64_t v42 = v100;
  uint64_t v144 = v38;
  uint64_t v141 = v39;
  Publisher.delay<A>(for:tolerance:scheduler:options:)();
  uint64_t v123 = v17;
  sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_1009081C0);

  sub_1000966BC(v41, &qword_10090F0D0);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v40, v97);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v28, v42);
  sub_1000967F4(&qword_100912EE0, &qword_100912EC8);
  uint64_t v43 = v102;
  uint64_t v44 = v99;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  v105[1](v30, v43);
  uint64_t v105 = (void (**)(char *, void))&protocol conformance descriptor for Publishers.HandleEvents<A>;
  sub_1000967F4(&qword_100912EE8, &qword_100912ED0);
  uint64_t v45 = v103;
  uint64_t v46 = (void *)Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v104 + 8))(v44, v45);
  id v47 = v148;
  char v48 = *(void **)((char *)v148 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_storeController);
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v50;
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_100776E80;
  *(void *)(v52 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v52 + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = v53;
  *(void *)(v52 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v52 + 56) = v54;
  uint64_t v55 = (void *)sub_100407394(v48, v49, v51, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v151 = v55;
  uint64_t v56 = swift_allocObject();
  long long v57 = v153;
  *(_OWORD *)(v56 + 16) = v152;
  *(_OWORD *)(v56 + 32) = v57;
  *(unsigned char *)(v56 + 48) = v154;
  uint64_t v104 = sub_100094134((uint64_t *)&unk_10090F110);
  sub_1000967F4((unint64_t *)&unk_10090F120, (uint64_t *)&unk_10090F110);
  uint64_t v58 = v107;
  Publisher.drop(while:)();
  swift_release();
  swift_release();
  swift_allocObject();
  unint64_t v59 = v47;
  swift_weakInit();
  sub_1000967F4(&qword_100912EF0, &qword_100912E98);
  uint64_t v60 = v108;
  uint64_t v61 = v109;
  Publisher.drop(while:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v58, v61);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  id v151 = (id)type metadata accessor for REMCKSharedEntitySyncActivity();
  sub_100094134(&qword_10090F108);
  *(void *)(inited + 32) = String.init<A>(describing:)();
  *(void *)(inited + 4sub_10050ECB8((uint64_t)sub_100292128, 0) = v63;
  Swift::Int v64 = sub_10032D9A0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  *(void *)(swift_allocObject() + 16) = v64;
  uint64_t v65 = v59;
  sub_1000967F4(&qword_100912EF8, &qword_100912EA0);
  swift_bridgeObjectRetain();
  NSString v66 = v114;
  uint64_t v67 = v113;
  id v68 = v60;
  Publisher.map<A>(_:)();
  swift_release();
  sub_1000967F4(&qword_100912F00, &qword_100912E90);
  uint64_t v69 = v111;
  uint64_t v70 = v119;
  Publisher.filter(_:)();
  v120[1](v66, v70);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v68, v67);
  sub_1000967F4(&qword_100912F08, &qword_100912EA8);
  uint64_t v71 = v117;
  uint64_t v72 = v146;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  (*(void (**)(char *, uint64_t))(v118 + 8))(v69, v71);
  id v151 = v46;
  (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v115, v72, v149);
  uint64_t v73 = v121;
  sub_1000967F4(&qword_100912F10, &qword_100912EB0);
  id v120 = (void (**)(char *, uint64_t))v46;
  swift_retain();
  id v74 = v122;
  Publishers.Merge.init(_:_:)();
  uint64_t v75 = *(void *)((char *)v65
                  + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_journalUpdatesSubscriptionTransactionRegistrar);
  uint64_t v76 = swift_allocObject();
  *(void *)(v76 + 16) = v75;
  *(void *)(v76 + 24) = 1;
  sub_1000967F4(&qword_100912F18, &qword_100912E70);
  uint64_t v119 = v75;
  swift_retain();
  uint64_t v77 = v124;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v125 + 8))(v74, v77);
  sub_100094134(&qword_100912F20);
  if (qword_100907278 != -1) {
    swift_once();
  }
  uint64_t v78 = v130;
  unint64_t v79 = (void *)qword_100912C38;
  *uint64_t v130 = qword_100912C38;
  id v80 = v79;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  uint64_t v81 = v133;
  uint64_t v82 = v134;
  (*(void (**)(void *, void, uint64_t))(v133 + 104))(v78, enum case for Publishers.TimeGroupingStrategy.byTime<A>(_:), v134);
  uint64_t v83 = (uint64_t)v123;
  v143(v123, 1, 1, v145);
  sub_1000967F4(&qword_100912F28, &qword_100912E78);
  uint64_t v84 = v132;
  uint64_t v85 = v127;
  Publisher.collect<A>(_:options:)();
  sub_1000967F4(&qword_100912F30, &qword_100912E68);
  uint64_t v86 = v73;
  uint64_t v87 = v128;
  uint64_t v88 = v137;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v136 + 8))(v84, v88);
  sub_1000966BC(v83, (uint64_t *)&unk_1009081C0);
  (*(void (**)(void *, uint64_t))(v81 + 8))(v78, v82);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v86, v85);
  uint64_t v89 = v112;
  id v151 = v112;
  v143((char *)v83, 1, 1, v145);
  sub_1000967F4(&qword_100912F38, &qword_100912E80);
  id v90 = v89;
  unint64_t v91 = v135;
  uint64_t v92 = v131;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v83, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v129 + 8))(v87, v92);
  long long v93 = (void *)swift_allocObject();
  void v93[2] = v119;
  v93[3] = sub_1002D3E04;
  v93[4] = 0;
  sub_1000967F4(&qword_100912F40, &qword_100912E88);
  swift_retain();
  uint64_t v94 = v139;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v138 + 8))(v91, v94);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v147 + 8))(v146, v149);
}

void sub_1002D1C98(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v28 - v11;
  sub_1002D20B4();
  id v29 = a1;
  id v13 = [a1 stringRepresentation];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  Date.init()();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
  uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(ObjectType, v16);
  if (!v18) {
    unint64_t v18 = sub_1002EF078((uint64_t)_swiftEmptyArrayStorage);
  }
  unint64_t v31 = v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1)
  {
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);
    sub_10030C940(v28, v15, (uint64_t)v10);
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    unint64_t v19 = v31;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v30 = v19;
    unint64_t v31 = 0x8000000000000000;
    sub_1002C5BB0((uint64_t)v6, v28, v15, isUniquelyReferenced_nonNull_native);
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 16))(v31, ObjectType, v16);
  if (qword_100907270 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_10008E2DC(v21, (uint64_t)qword_100912C20);
  uint64_t v22 = v29;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 138543362;
    unint64_t v31 = (unint64_t)v22;
    uint64_t v27 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v26 = v22;

    _os_log_impl((void *)&_mh_execute_header, v23, v24, "ðŸ“” RDSyncActivityEngine - logged sign in event for {accountID: %{public}@}", v25, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v23 = v22;
  }
}

void sub_1002D20B4()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_storeController) newBackgroundContextWithAuthor:RDSyncActivityNotificationEngineAuthor];
  NSManagedObjectContext.rem_performAndWait<A>(_:)();
}

void sub_1002D2370(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 stringRepresentation];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  uint64_t v11 = *(void *)(v2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(ObjectType, v11);
  if (!v13) {
    unint64_t v13 = sub_1002EF078((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v22 = v13;
  sub_10030C940(v8, v10, (uint64_t)v6);
  sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909A40);
  (*(void (**)(NSObject *, uint64_t, uint64_t))(v11 + 16))(v22, ObjectType, v11);
  swift_bridgeObjectRelease();
  if (qword_100907270 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_100912C20);
  uint64_t v15 = a1;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    unint64_t v19 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v18 = 138543362;
    uint64_t v22 = v15;
    uint64_t v20 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v19 = v15;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "ðŸ“” RDSyncActivityEngine - logged sign out event for {accountID: %{public}@}", v18, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v16 = v15;
  }

  sub_1002D20B4();
}

uint64_t sub_1002D262C()
{
  return sub_1002D2668();
}

uint64_t sub_1002D2640()
{
  return sub_1002D2668();
}

uint64_t sub_1002D2654()
{
  return sub_1002D2668();
}

uint64_t sub_1002D2668()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1002D26D4()
{
  uint64_t v3 = v0;
  sub_100094134(&qword_100908260);
  NSManagedObjectContext.rem_performAndWait<A>(_:)();
  if (!v1)
  {
    uint64_t v2 = v9;
    if (qword_100907270 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_100912C20);
    swift_bridgeObjectRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v7 = 134349056;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "ðŸ“” RDSyncActivityEngine: Fetch Success - Consumed entries: %{public}ld", v7, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    if (*(unsigned char *)(v3
                  + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration
                  + 32) == 1)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      swift_retain();
      static Published.subscript.setter();
    }
  }
  return v2;
}

void *sub_1002D28CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100094134(&qword_100912F48);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (void **)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (void **)((char *)&v38 - v11);
  if (qword_100907270 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v40 = sub_10008E2DC(v13, (uint64_t)qword_100912C20);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v41 = a2;
  if (v16)
  {
    os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "ðŸ“” RDSyncActivityEngine: Deleting journal entries", v17, 2u);
    uint64_t v3 = v2;
    a2 = v41;
    swift_slowDealloc();
  }

  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    uint64_t v39 = v3;
    uint64_t v43 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v20 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v42 = *(void *)(v7 + 72);
    uint64_t v21 = v10;
    do
    {
      sub_1000BF710(v20, (uint64_t)v12, &qword_100912F48);
      uint64_t v22 = *(int *)(v6 + 48);
      uint64_t v23 = v6;
      uint64_t v24 = (uint64_t)v21 + v22;
      uint64_t v25 = *v12;
      *uint64_t v21 = *v12;
      sub_100265D1C((uint64_t)v12 + v22, (uint64_t)v21 + v22);
      id v26 = v25;
      sub_1002DA314(v24, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
      sub_1000966BC((uint64_t)v12, &qword_100912F48);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v6 = v23;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t v18 = specialized ContiguousArray._endMutation()();
      v20 += v42;
      --v19;
    }
    while (v19);
    unint64_t v27 = (unint64_t)v43;
    uint64_t v3 = v39;
    a2 = v41;
  }
  else
  {
    unint64_t v27 = (unint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v44 = (unint64_t)_swiftEmptyArrayStorage;
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v18 = swift_bridgeObjectRelease();
    if (v34)
    {
LABEL_12:
      __chkstk_darwin(v18);
      *(&v38 - 4) = v27;
      *(&v38 - 3) = a2;
      *(&v38 - 2) = (uint64_t)&v44;
      NSManagedObjectContext.rem_performAndWait<A>(_:)();
      swift_bridgeObjectRelease();
      if (v3) {
        return (void *)swift_bridgeObjectRelease();
      }
      id v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        unint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v31 = 134217984;
        swift_beginAccess();
        if (v44 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v32 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v43 = (void *)v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "ðŸ“” RDSyncActivityEngine: Deleted journal entries: %ld", v31, 0xCu);
        swift_slowDealloc();
      }

      if (*(unsigned char *)(v38
                    + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration
                    + 32) == 1)
      {
        swift_beginAccess();
        uint64_t v33 = (void *)v44;
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v43 = v33;
        swift_bridgeObjectRetain();
        swift_retain();
        static Published.subscript.setter();
      }
      swift_beginAccess();
      return (void *)v44;
    }
  }
  else if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "ðŸ“” RDSyncActivityEngine: Up-to-date! No journal entries to delete", v37, 2u);
    swift_slowDealloc();
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_1002D2E74()
{
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v0 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v2 = (char *)v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.utility(_:), v5);
  v10[1] = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = _swiftEmptyArrayStorage;
  sub_1002DA110((unint64_t *)&qword_10090AAC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1000967F4((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v11);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100912C38 = result;
  return result;
}

uint64_t sub_1002D31A4@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1002D3224()
{
  return static Published.subscript.setter();
}

void sub_1002D3298(uint64_t a1, uint64_t a2, char a3)
{
  sub_100094134(&qword_10090E178);
  NSManagedObjectContext.rem_performAndWait<A>(_:)();
  if (!v3)
  {
    sub_1000967F4(&qword_100912F88, &qword_10090E178);
    uint64_t v6 = Sequence.mapToSet<A>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults + 8);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7);
    if (!v9) {
      unint64_t v9 = sub_1002EF078((uint64_t)_swiftEmptyArrayStorage);
    }
    uint64_t v10 = sub_1001261C0(v9);
    if (*(void *)(v6 + 16) <= *(void *)(v10 + 16) >> 3)
    {
      uint64_t v21 = (unint64_t *)v10;
      sub_10065A5FC(v6);
      swift_bridgeObjectRelease();
      uint64_t v11 = v21;
    }
    else
    {
      uint64_t v11 = sub_10023CBC4(v6, v10);
      swift_bridgeObjectRelease();
    }
    swift_retain();
    sub_1002D898C((uint64_t)v11, a2);
    swift_release();
    if (v11[2])
    {
      if (qword_100907270 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_10008E2DC(v12, (uint64_t)qword_100912C20);
      swift_bridgeObjectRetain();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v21 = (unint64_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 136446466;
        if (a3) {
          uint64_t v16 = 0x4574754F6E676973;
        }
        else {
          uint64_t v16 = 0x76456E496E676973;
        }
        if (a3) {
          unint64_t v17 = 0xEC000000746E6576;
        }
        else {
          unint64_t v17 = 0xEB00000000746E65;
        }
        sub_1000C51B8(v16, v17, (uint64_t *)&v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v18 = Set.description.getter();
        unint64_t v20 = v19;
        swift_bridgeObjectRelease();
        sub_1000C51B8(v18, v20, (uint64_t *)&v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void sub_1002D3688(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 stringRepresentation];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

void sub_1002D36F0(uint64_t a1, uint64_t *a2)
{
}

void sub_1002D3710(uint64_t a1, uint64_t *a2)
{
}

void sub_1002D3730(uint64_t a1, uint64_t *a2, const char *a3, void (*a4)(void))
{
  uint64_t v7 = *a2;
  uint64_t v24 = v7 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v7 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return;
    }
    if (v12 >= v11) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v12);
    if (!v21) {
      break;
    }
LABEL_21:
    unint64_t v10 = (v21 - 1) & v21;
    unint64_t v14 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 24 * v14);
    uint64_t v16 = (void *)v15[1];
    unint64_t v17 = (void *)v15[2];
    v25[0] = *v15;
    v25[1] = v16;
    v25[2] = v17;
    id v18 = v16;
    id v19 = v17;
    sub_1002D3928((uint64_t)v25, a1, a3, a4);
  }
  int64_t v22 = v12 + 1;
  if (v12 + 1 >= v11) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21) {
    goto LABEL_20;
  }
  int64_t v22 = v12 + 2;
  if (v12 + 2 >= v11) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21) {
    goto LABEL_20;
  }
  int64_t v22 = v12 + 3;
  if (v12 + 3 >= v11) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21) {
    goto LABEL_20;
  }
  int64_t v22 = v12 + 4;
  if (v12 + 4 >= v11) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
LABEL_20:
    int64_t v12 = v22;
    goto LABEL_21;
  }
  int64_t v22 = v12 + 5;
  if (v12 + 5 < v11)
  {
    unint64_t v21 = *(void *)(v24 + 8 * v22);
    if (!v21)
    {
      while (1)
      {
        int64_t v12 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_30;
        }
        if (v12 >= v11) {
          goto LABEL_26;
        }
        unint64_t v21 = *(void *)(v24 + 8 * v12);
        ++v22;
        if (v21) {
          goto LABEL_21;
        }
      }
    }
    goto LABEL_20;
  }
LABEL_26:
  swift_release();
}

void sub_1002D3928(uint64_t a1, uint64_t a2, const char *a3, void (*a4)(void))
{
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void **)(a1 + 8);
  unint64_t v10 = *(void **)(a1 + 16);
  if (qword_100907270 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100912C20);
  id v13 = v11;
  id v14 = v10;
  id v15 = v13;
  id v16 = v14;
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    os_log_t v31 = v17;
    uint64_t v21 = v20;
    int64_t v22 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v40 = v32;
    *(_DWORD *)uint64_t v21 = 138543618;
    HIDWORD(v3sub_10050ECB8((uint64_t)sub_100292128, 0) = v19;
    uint64_t v39 = (uint64_t)v16;
    uint64_t v34 = v4;
    id v23 = v16;
    uint64_t v33 = a4;
    id v24 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v22 = v16;

    *(_WORD *)(v21 + 12) = 2082;
    Date.init()();
    uint64_t v25 = Date.description.getter();
    unint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
    uint64_t v39 = sub_1000C51B8(v25, v27, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a4 = v33;
    swift_bridgeObjectRelease();
    os_log_t v28 = v31;
    _os_log_impl((void *)&_mh_execute_header, v31, BYTE4(v30), v37, (uint8_t *)v21, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v29 = v16;
  a4();
}

void sub_1002D3C48(uint64_t a1)
{
}

uint64_t sub_1002D3C54()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    char v0 = v2 ^ 1;
  }
  else
  {
    char v0 = 1;
  }
  return v0 & 1;
}

void sub_1002D3D08(uint64_t a1)
{
}

void sub_1002D3D14(uint64_t a1, const char *a2)
{
  if (qword_100907270 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_100912C20);
  oslog = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, a2, v5, 2u);
    swift_slowDealloc();
  }
}

void sub_1002D3E04(uint64_t a1)
{
  sub_1002D3E5C(a1);
}

void sub_1002D3E5C(uint64_t a1)
{
  if (qword_100907270 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_100912C20);
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ðŸ“” RDSyncActivityEngine - Starting journal consumption", v6, 2u);
    swift_slowDealloc();
  }

  id v7 = [*(id *)(a1 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_storeController) newBackgroundContextWithAuthor:RDSyncActivityNotificationEngineAuthor];
  __chkstk_darwin(v7);
  NSManagedObjectContext.rem_performAndWait<A>(_:)();
  if (v1)
  {

    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)unint64_t v10 = 136446210;
      swift_getErrorValue();
      uint64_t v11 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v11, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "ðŸ“” RDSyncActivityEngine - Unable to consume journal updates {error: %{public}s}", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {

    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ðŸ“” RDSyncActivityEngine - Finished journal consumption", v15, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1002D41B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002D26D4();
  if (!v2)
  {
    uint64_t v5 = v4;
    if (*(void *)(v4 + 16))
    {
      uint64_t v6 = sub_1002D432C(v4);
      sub_1002D4670((uint64_t)v6, (uint64_t)sub_1002D4588, 0);
      swift_bridgeObjectRelease();
      sub_1002D28CC(v5, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100907270 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10008E2DC(v7, (uint64_t)qword_100912C20);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        unint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "ðŸ“” RDSyncActivityEngine: Skipping journal entry processing, no changes to process", v10, 2u);
        swift_slowDealloc();
      }
    }
  }
}

void *sub_1002D432C(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_100907270 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100912C20);
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    os_log_type_t v14 = *(void **)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "ðŸ“” RDSyncActivityEngine: Processing entries - %ld", v7, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v8 = &_swiftEmptyDictionarySingleton;
  os_log_type_t v14 = &_swiftEmptyDictionarySingleton;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(sub_100094134(&qword_100912F48) - 8);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v12 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1002D5B20((uint64_t *)&v14, v11);
      v11 += v12;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    uint64_t v8 = v14;
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration + 32))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    os_log_type_t v14 = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    static Published.subscript.setter();
  }
  return v8;
}