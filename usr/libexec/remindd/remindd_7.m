uint64_t sub_1004A44C8()
{
  uint64_t v0;
  uint64_t vars8;

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivity()
{
  return self;
}

uint64_t sub_1004A452C()
{
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  swift_release();
  return v1;
}

uint64_t sub_1004A45C0()
{
  return sub_100596208();
}

uint64_t sub_1004A45E8()
{
  return sub_1004A42F0();
}

uint64_t type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivityFactory()
{
  return self;
}

_UNKNOWN **sub_1004A4630()
{
  return &off_1008C7808;
}

void *sub_1004A463C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v9 = *(void **)(*(void *)v4 + 16);
  type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivity();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  v11 = (void *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = a3;
  type metadata accessor for RDDynamicXPCActivity();
  swift_allocObject();
  id v12 = v9;
  id v13 = a1;
  swift_retain();
  result = sub_100597404(2, (uint64_t)sub_1000960FC, (uint64_t)v11);
  *(void *)(v10 + 24) = result;
  *a4 = v10;
  return result;
}

_UNKNOWN **sub_1004A4714()
{
  return &off_1008C7828;
}

void sub_1004A4720(uint64_t a1)
{
  sub_1004A1ED8(a1);

  sub_1004A24FC();
}

uint64_t sub_1004A4748()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004A4758(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004A4768()
{
  return swift_release();
}

uint64_t sub_1004A4770()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004A47B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004A47F8()
{
  return sub_1004A3E24(v0);
}

uint64_t sub_1004A4800()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004A4838()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004A4870()
{
  return sub_1004A34E0();
}

uint64_t sub_1004A4890()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004A48E0(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v60 = a1;
  v5 = v4;
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (void *)v5[6];
  void *v15 = v16;
  (*(void (**)(void *, void, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  v18 = (char *)v5 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  swift_beginAccess();
  v19 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v19(v10, v18, v7);
  char v20 = Date.isInThePast.getter();
  v57 = *(void (**)(char *, uint64_t))(v8 + 8);
  v57(v10, v7);
  if (v20)
  {
    sub_1004A51B0();
    uint64_t v21 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
    uint64_t v22 = *(void *)((char *)v5 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
    goto LABEL_5;
  }
  uint64_t v21 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
  uint64_t v22 = *(void *)((char *)v5 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
  if (v22)
  {
LABEL_5:
    BOOL v23 = v22 != 0;
    uint64_t v24 = v22 - 1;
    if (v23)
    {
      *(void *)((char *)v5 + v21) = v24;
      if (qword_100907680 == -1)
      {
LABEL_8:
        uint64_t v25 = type metadata accessor for Logger();
        sub_10008E2DC(v25, (uint64_t)qword_10091A770);
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 136446466;
          uint64_t v29 = v5[4];
          unint64_t v30 = v5[5];
          swift_bridgeObjectRetain();
          uint64_t v62 = sub_1000C51B8(v29, v30, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v28 + 12) = 2082;
          if (a4) {
            uint64_t v31 = v58;
          }
          else {
            uint64_t v31 = 7104878;
          }
          if (a4) {
            unint64_t v32 = a4;
          }
          else {
            unint64_t v32 = 0xE300000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v62 = sub_1000C51B8(v31, v32, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}", (uint8_t *)v28, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          uint64_t v33 = swift_release_n();
        }
        return ((uint64_t (*)(uint64_t))v60)(v33);
      }
LABEL_32:
      swift_once();
      goto LABEL_8;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (qword_100907680 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_10008E2DC(v35, (uint64_t)qword_10091A770);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  swift_retain();
  v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  LODWORD(v59) = v37;
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    v61 = v19;
    uint64_t v39 = v38;
    uint64_t v56 = swift_slowAlloc();
    uint64_t v63 = v56;
    *(_DWORD *)uint64_t v39 = 136447234;
    uint64_t v54 = v39 + 4;
    os_log_t v55 = v36;
    uint64_t v41 = v5[4];
    unint64_t v40 = v5[5];
    swift_bridgeObjectRetain();
    uint64_t v62 = sub_1000C51B8(v41, v40, &v63);
    v60 = &v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 12) = 2082;
    if (a4) {
      uint64_t v42 = v58;
    }
    else {
      uint64_t v42 = 7104878;
    }
    if (a4) {
      unint64_t v43 = a4;
    }
    else {
      unint64_t v43 = 0xE300000000000000;
    }
    uint64_t v58 = v39 + 14;
    swift_bridgeObjectRetain();
    uint64_t v62 = sub_1000C51B8(v42, v43, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 22) = 1040;
    LODWORD(v62) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v39 + 28) = 2048;
    v61(v10, v18, v7);
    Date.timeIntervalSinceNow.getter();
    uint64_t v45 = v44;
    v57(v10, v7);
    uint64_t v62 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    *(_WORD *)(v39 + 38) = 2082;
    uint64_t v58 = v39 + 40;
    v61(v10, v18, v7);
    uint64_t v54 = Date.description.getter();
    unint64_t v47 = v46;
    v48 = v57;
    v57(v10, v7);
    uint64_t v62 = sub_1000C51B8(v54, v47, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v49 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v59, "Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}", (uint8_t *)v39, 0x30u);
    swift_arrayDestroy();
    swift_slowDealloc();
    v19 = v61;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    v48 = v57;
  }
  v50 = self;
  v19(v10, v18, v7);
  Date.timeIntervalSinceNow.getter();
  double v52 = v51;
  v48(v10, v7);
  [v50 throttledErrorWithRemainingTimeInterval:v52];
  return swift_willThrow();
}

uint64_t sub_1004A50E8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091A770);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091A770);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1004A51B0()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v0 + 48);
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    *(void *)(v0 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount) = 1;
    Date.init(timeIntervalSinceNow:)();
    uint64_t v13 = v0 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 40))(v13, v4, v1);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004A539C()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1004A544C()
{
  return type metadata accessor for RDThrottler();
}

uint64_t type metadata accessor for RDThrottler()
{
  uint64_t result = qword_10091A7C0;
  if (!qword_10091A7C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004A54A0()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_1004A5558(uint64_t a1, unint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  v64 = a6;
  uint64_t v62 = a7;
  uint64_t v63 = a5;
  id v66 = a4;
  uint64_t v61 = a1;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v15 = __chkstk_darwin(v13);
  id v17 = (uint64_t *)((char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (void *)a3[6];
  *id v17 = v18;
  (*(void (**)(void *, void, uint64_t, __n128))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13, v15);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v17, v13);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  char v20 = (char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  swift_beginAccess();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v21(v12, v20, v9);
  char v22 = Date.isInThePast.getter();
  v60 = *(void (**)(char *, uint64_t))(v10 + 8);
  v60(v12, v9);
  if (v22)
  {
    sub_1004A51B0();
    uint64_t v23 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
    uint64_t v24 = *(void *)((char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
    goto LABEL_5;
  }
  uint64_t v23 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
  uint64_t v24 = *(void *)((char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
  if (v24)
  {
LABEL_5:
    BOOL v25 = v24 != 0;
    uint64_t v26 = v24 - 1;
    if (v25)
    {
      *(void *)((char *)a3 + v23) = v26;
      if (qword_100907680 == -1)
      {
LABEL_8:
        uint64_t v27 = type metadata accessor for Logger();
        sub_10008E2DC(v27, (uint64_t)qword_10091A770);
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = swift_slowAlloc();
          uint64_t v68 = swift_slowAlloc();
          *(_DWORD *)uint64_t v30 = 136446466;
          uint64_t v31 = a3[4];
          unint64_t v32 = a3[5];
          swift_bridgeObjectRetain();
          uint64_t v67 = sub_1000C51B8(v31, v32, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v30 + 12) = 2082;
          if (a2) {
            uint64_t v33 = v61;
          }
          else {
            uint64_t v33 = 7104878;
          }
          if (a2) {
            unint64_t v34 = a2;
          }
          else {
            unint64_t v34 = 0xE300000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v67 = sub_1000C51B8(v33, v34, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        id v35 = v66;
        os_log_type_t v37 = v63;
        uint64_t v36 = (uint64_t)v64;
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1004A48E0(v37, v36, v38, v39);

        swift_bridgeObjectRelease();
        return;
      }
LABEL_32:
      swift_once();
      goto LABEL_8;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (qword_100907680 != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  sub_10008E2DC(v40, (uint64_t)qword_10091A770);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  swift_retain();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  LODWORD(v63) = v42;
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = swift_slowAlloc();
    v65 = v21;
    uint64_t v44 = v43;
    uint64_t v62 = swift_slowAlloc();
    uint64_t v68 = v62;
    *(_DWORD *)uint64_t v44 = 136447234;
    uint64_t v58 = v44 + 4;
    os_log_t v59 = v41;
    uint64_t v46 = a3[4];
    unint64_t v45 = a3[5];
    swift_bridgeObjectRetain();
    uint64_t v67 = sub_1000C51B8(v46, v45, &v68);
    v64 = &v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12) = 2082;
    if (a2) {
      uint64_t v47 = v61;
    }
    else {
      uint64_t v47 = 7104878;
    }
    if (a2) {
      unint64_t v48 = a2;
    }
    else {
      unint64_t v48 = 0xE300000000000000;
    }
    uint64_t v61 = v44 + 14;
    swift_bridgeObjectRetain();
    uint64_t v67 = sub_1000C51B8(v47, v48, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 22) = 1040;
    LODWORD(v67) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 28) = 2048;
    v65(v12, v20, v9);
    Date.timeIntervalSinceNow.getter();
    uint64_t v50 = v49;
    v60(v12, v9);
    uint64_t v67 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    *(_WORD *)(v44 + 38) = 2082;
    uint64_t v61 = v44 + 40;
    v65(v12, v20, v9);
    uint64_t v58 = Date.description.getter();
    unint64_t v52 = v51;
    uint64_t v53 = v60;
    v60(v12, v9);
    uint64_t v67 = sub_1000C51B8(v58, v52, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v54 = v59;
    _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v63, "Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}", (uint8_t *)v44, 0x30u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v21 = v65;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t v53 = v60;
  }
  os_log_t v55 = self;
  v21(v12, v20, v9);
  Date.timeIntervalSinceNow.getter();
  double v57 = v56;
  v53(v12, v9);
  [v55 throttledErrorWithRemainingTimeInterval:v57];
  swift_willThrow();
}

void sub_1004A5DA4(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5, void *a6, void (*a7)(id), void *a8, void *a9)
{
  v77 = a7;
  v81 = a2;
  id v82 = a6;
  LODWORD(v76) = a4;
  uint64_t v75 = a1;
  id v83 = a9;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  __n128 v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v18 = __chkstk_darwin(v16);
  char v20 = (void (***)(id))((char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v84 = a3;
  uint64_t v21 = *(void **)(a3 + 48);
  *char v20 = v21;
  (*(void (**)(void *, void, uint64_t, __n128))(v17 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v16, v18);
  id v22 = a5;
  id v80 = v82;
  id v82 = a8;
  swift_retain();
  id v83 = v83;
  id v23 = v21;
  LOBYTE(a8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v20, v16);
  if ((a8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  v79 = v22;
  uint64_t v16 = v84;
  uint64_t v24 = v84 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  swift_beginAccess();
  BOOL v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v25(v15, v24, v12);
  char v26 = Date.isInThePast.getter();
  os_log_type_t v29 = *(void (**)(char *, void *))(v13 + 8);
  uint64_t v28 = v13 + 8;
  uint64_t v27 = v29;
  v29(v15, (void *)v12);
  if (v26)
  {
    sub_1004A51B0();
    uint64_t v30 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
    uint64_t v31 = *(void *)(v16 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
    uint64_t v21 = v81;
    goto LABEL_5;
  }
  uint64_t v73 = v28;
  v74 = v25;
  v72 = v15;
  uint64_t v30 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
  uint64_t v31 = *(void *)(v16 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
  uint64_t v21 = v81;
  if (v31)
  {
LABEL_5:
    BOOL v32 = v31 != 0;
    uint64_t v33 = v31 - 1;
    if (v32)
    {
      *(void *)(v16 + v30) = v33;
      if (qword_100907680 == -1)
      {
LABEL_8:
        uint64_t v34 = type metadata accessor for Logger();
        sub_10008E2DC(v34, (uint64_t)qword_10091A770);
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        id v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = swift_slowAlloc();
          v86 = (void (*)(id))swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = 136446466;
          uint64_t v38 = *(void *)(v16 + 32);
          unint64_t v39 = *(void *)(v16 + 40);
          swift_bridgeObjectRetain();
          uint64_t v85 = sub_1000C51B8(v38, v39, (uint64_t *)&v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v37 + 12) = 2082;
          if (v21) {
            uint64_t v40 = v75;
          }
          else {
            uint64_t v40 = 7104878;
          }
          if (v21) {
            unint64_t v41 = (unint64_t)v21;
          }
          else {
            unint64_t v41 = 0xE300000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v85 = sub_1000C51B8(v40, v41, (uint64_t *)&v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}", (uint8_t *)v37, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        id v42 = v83;
        uint64_t v43 = v79;
        id v44 = v80;
        sub_10013F2FC(v76 & 1, v79, (uint64_t)v80, v77, (uint64_t)v82, (uint64_t)v83);

        swift_release();
        return;
      }
LABEL_32:
      swift_once();
      goto LABEL_8;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v78 = v27;
  if (qword_100907680 != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  sub_10008E2DC(v45, (uint64_t)qword_10091A770);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  swift_retain();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  int v48 = v47;
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v49 = v16;
    uint64_t v50 = swift_slowAlloc();
    v77 = (void (*)(id))swift_slowAlloc();
    v86 = v77;
    *(_DWORD *)uint64_t v50 = 136447234;
    os_log_t v76 = v46;
    int v71 = v48;
    uint64_t v52 = *(void *)(v49 + 32);
    unint64_t v51 = *(void *)(v49 + 40);
    swift_bridgeObjectRetain();
    uint64_t v85 = sub_1000C51B8(v52, v51, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 12) = 2082;
    if (v21) {
      uint64_t v53 = v75;
    }
    else {
      uint64_t v53 = 7104878;
    }
    if (v21) {
      unint64_t v54 = (unint64_t)v21;
    }
    else {
      unint64_t v54 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v85 = sub_1000C51B8(v53, v54, (uint64_t *)&v86);
    v70 = &v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 22) = 1040;
    LODWORD(v85) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v50 + 28) = 2048;
    os_log_t v55 = v72;
    double v56 = (void (*)(char *, uint64_t, void *))v74;
    v74(v72, v24, v12);
    Date.timeIntervalSinceNow.getter();
    uint64_t v58 = v57;
    uint64_t v59 = v12;
    v81 = (void *)v12;
    v60 = v78;
    v78(v55, (void *)v59);
    uint64_t v85 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    *(_WORD *)(v50 + 38) = 2082;
    uint64_t v75 = v50 + 40;
    v56(v55, v24, v81);
    uint64_t v61 = Date.description.getter();
    unint64_t v63 = v62;
    v60(v55, v81);
    uint64_t v85 = sub_1000C51B8(v61, v63, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v64 = (void (*)(char *, uint64_t))v60;
    uint64_t v12 = (uint64_t)v81;
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v65 = v76;
    _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v71, "Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}", (uint8_t *)v50, 0x30u);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v66 = v74;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    os_log_t v55 = v72;
    id v66 = v74;
    v64 = (void (*)(char *, uint64_t))v78;
  }
  uint64_t v67 = self;
  v66(v55, v24, v12);
  Date.timeIntervalSinceNow.getter();
  double v69 = v68;
  v64(v55, v12);
  [v67 throttledErrorWithRemainingTimeInterval:v69];
  swift_willThrow();

  swift_release();
}

void sub_1004A6674(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, void *a5, void (*a6)(id), void *a7, void *a8)
{
  uint64_t v75 = a6;
  id v80 = a5;
  v81 = a8;
  unint64_t v79 = a2;
  uint64_t v74 = a1;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v17 = __chkstk_darwin(v15);
  uint64_t v19 = (os_log_t *)((char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v82 = a3;
  char v20 = *(void **)(a3 + 48);
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t, __n128))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
  id v78 = a4;
  id v21 = v80;
  id v80 = a7;
  swift_retain();
  v81 = v81;
  id v22 = v20;
  LOBYTE(a7) = _dispatchPreconditionTest(_:)();
  uint64_t v24 = *(void (**)(void *, uint64_t))(v16 + 8);
  unint64_t v23 = v16 + 8;
  v24(v19, v15);
  if ((a7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  id v77 = v21;
  uint64_t v25 = v82 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  swift_beginAccess();
  uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v73(v14, v25, v11);
  char v26 = Date.isInThePast.getter();
  os_log_type_t v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v28 = (void (*)(id))(v12 + 8);
  uint64_t v27 = v29;
  v29(v14, v11);
  if (v26)
  {
    uint64_t v11 = v82;
    sub_1004A51B0();
    uint64_t v30 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
    uint64_t v31 = *(void *)(v11 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
    goto LABEL_5;
  }
  uint64_t v32 = v11;
  uint64_t v30 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
  uint64_t v11 = v82;
  uint64_t v31 = *(void *)(v82 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
  if (v31)
  {
LABEL_5:
    unint64_t v23 = v79;
    BOOL v33 = v31 != 0;
    uint64_t v34 = v31 - 1;
    if (v33)
    {
      *(void *)(v11 + v30) = v34;
      if (qword_100907680 == -1)
      {
LABEL_8:
        uint64_t v35 = type metadata accessor for Logger();
        sub_10008E2DC(v35, (uint64_t)qword_10091A770);
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        os_log_type_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = swift_slowAlloc();
          uint64_t v84 = swift_slowAlloc();
          *(_DWORD *)uint64_t v38 = 136446466;
          uint64_t v39 = *(void *)(v11 + 32);
          unint64_t v40 = *(void *)(v11 + 40);
          swift_bridgeObjectRetain();
          uint64_t v83 = sub_1000C51B8(v39, v40, &v84);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 12) = 2082;
          if (v23) {
            uint64_t v41 = v74;
          }
          else {
            uint64_t v41 = 7104878;
          }
          if (v23) {
            unint64_t v42 = v23;
          }
          else {
            unint64_t v42 = 0xE300000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v83 = sub_1000C51B8(v41, v42, &v84);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}", (uint8_t *)v38, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        uint64_t v43 = v81;
        id v44 = v77;
        uint64_t v45 = v78;
        sub_100140568(v78, (uint64_t)v77, v75, (uint64_t)v80, v81);

        swift_release();
        return;
      }
LABEL_31:
      swift_once();
      goto LABEL_8;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v75 = v28;
  os_log_t v76 = v14;
  unint64_t v46 = v79;
  if (qword_100907680 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  sub_10008E2DC(v47, (uint64_t)qword_10091A770);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  swift_retain();
  int v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.error.getter();
  int v50 = v49;
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v51 = swift_slowAlloc();
    int v69 = v50;
    uint64_t v52 = v51;
    uint64_t v70 = swift_slowAlloc();
    uint64_t v84 = v70;
    *(_DWORD *)uint64_t v52 = 136447234;
    uint64_t v71 = v32;
    os_log_t v68 = v48;
    uint64_t v54 = *(void *)(v11 + 32);
    unint64_t v53 = *(void *)(v11 + 40);
    swift_bridgeObjectRetain();
    uint64_t v83 = sub_1000C51B8(v54, v53, &v84);
    v72 = &v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v52 + 12) = 2082;
    if (v46) {
      uint64_t v55 = v74;
    }
    else {
      uint64_t v55 = 7104878;
    }
    if (!v46) {
      unint64_t v46 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v83 = sub_1000C51B8(v55, v46, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v32 = v71;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v52 + 22) = 1040;
    LODWORD(v83) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v52 + 28) = 2048;
    unint64_t v79 = v52 + 30;
    double v56 = v76;
    uint64_t v57 = v73;
    v73(v76, v25, v32);
    Date.timeIntervalSinceNow.getter();
    uint64_t v59 = v58;
    v27(v56, v32);
    uint64_t v83 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    *(_WORD *)(v52 + 38) = 2082;
    unint64_t v79 = v52 + 40;
    v57(v56, v25, v32);
    uint64_t v60 = Date.description.getter();
    unint64_t v62 = v61;
    v27(v56, v32);
    uint64_t v83 = sub_1000C51B8(v60, v62, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v63 = v68;
    _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v69, "Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}", (uint8_t *)v52, 0x30u);
    swift_arrayDestroy();
    v64 = v73;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    double v56 = v76;
    v64 = v73;
  }
  os_log_t v65 = self;
  v64(v56, v25, v32);
  Date.timeIntervalSinceNow.getter();
  double v67 = v66;
  v27(v56, v32);
  [v65 throttledErrorWithRemainingTimeInterval:v67];
  swift_willThrow();

  swift_release();
}

uint64_t sub_1004A6F24(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t *a7)
{
  uint64_t v60 = a7;
  uint64_t v58 = a5;
  uint64_t v59 = a6;
  uint64_t v62 = a4;
  uint64_t v57 = a1;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v15 = __chkstk_darwin(v13);
  __n128 v17 = (uint64_t *)((char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = (void *)a3[6];
  *__n128 v17 = v18;
  (*(void (**)(void *, void, uint64_t, __n128))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13, v15);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v17, v13);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  char v20 = (char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  swift_beginAccess();
  id v21 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v21(v12, v20, v9);
  char v22 = Date.isInThePast.getter();
  double v56 = *(void (**)(char *, uint64_t))(v10 + 8);
  v56(v12, v9);
  if (v22)
  {
    sub_1004A51B0();
    uint64_t v23 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
    uint64_t v24 = *(void *)((char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
    goto LABEL_5;
  }
  uint64_t v23 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
  uint64_t v24 = *(void *)((char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
  if (v24)
  {
LABEL_5:
    BOOL v25 = v24 != 0;
    uint64_t v26 = v24 - 1;
    if (v25)
    {
      *(void *)((char *)a3 + v23) = v26;
      if (qword_100907680 == -1)
      {
LABEL_8:
        uint64_t v27 = type metadata accessor for Logger();
        sub_10008E2DC(v27, (uint64_t)qword_10091A770);
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = swift_slowAlloc();
          uint64_t v64 = swift_slowAlloc();
          *(_DWORD *)uint64_t v30 = 136446466;
          uint64_t v32 = a3[4];
          unint64_t v31 = a3[5];
          swift_bridgeObjectRetain();
          uint64_t v63 = sub_1000C51B8(v32, v31, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v30 + 12) = 2082;
          if (a2) {
            uint64_t v33 = v57;
          }
          else {
            uint64_t v33 = 7104878;
          }
          if (a2) {
            unint64_t v34 = a2;
          }
          else {
            unint64_t v34 = 0xE300000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v63 = sub_1000C51B8(v33, v34, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        sub_100141410(v62, v58, v59);
        return swift_bridgeObjectRelease();
      }
LABEL_33:
      swift_once();
      goto LABEL_8;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (qword_100907680 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  sub_10008E2DC(v36, (uint64_t)qword_10091A770);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  swift_retain();
  os_log_type_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  LODWORD(v59) = v38;
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = swift_slowAlloc();
    unint64_t v61 = v21;
    uint64_t v40 = v39;
    uint64_t v58 = swift_slowAlloc();
    uint64_t v64 = v58;
    *(_DWORD *)uint64_t v40 = 136447234;
    uint64_t v54 = v40 + 4;
    os_log_t v55 = v37;
    uint64_t v42 = a3[4];
    unint64_t v41 = a3[5];
    swift_bridgeObjectRetain();
    uint64_t v63 = sub_1000C51B8(v42, v41, &v64);
    uint64_t v60 = &v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2082;
    if (a2) {
      uint64_t v43 = v57;
    }
    else {
      uint64_t v43 = 7104878;
    }
    if (a2) {
      unint64_t v44 = a2;
    }
    else {
      unint64_t v44 = 0xE300000000000000;
    }
    uint64_t v57 = v40 + 14;
    swift_bridgeObjectRetain();
    uint64_t v63 = sub_1000C51B8(v43, v44, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 22) = 1040;
    LODWORD(v63) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v40 + 28) = 2048;
    v61(v12, v20, v9);
    Date.timeIntervalSinceNow.getter();
    uint64_t v46 = v45;
    v56(v12, v9);
    uint64_t v63 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    *(_WORD *)(v40 + 38) = 2082;
    uint64_t v57 = v40 + 40;
    v61(v12, v20, v9);
    uint64_t v54 = Date.description.getter();
    unint64_t v48 = v47;
    os_log_type_t v49 = v56;
    v56(v12, v9);
    uint64_t v63 = sub_1000C51B8(v54, v48, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v50 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v59, "Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}", (uint8_t *)v40, 0x30u);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v21 = v61;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    os_log_type_t v49 = v56;
  }
  uint64_t v51 = self;
  v21(v12, v20, v9);
  Date.timeIntervalSinceNow.getter();
  double v53 = v52;
  v49(v12, v9);
  [v51 throttledErrorWithRemainingTimeInterval:v53];
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004A7744()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091A870);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091A870);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Double __swiftcall REMCDAlarmDateTrigger.generateNonce()()
{
  sub_1004A7E9C("REMCDAlarmDateTrigger.generateNonce(): trigger.alarm not set before trying to call generateNonce() {triggerID: %{public}s}");
  return result;
}

double sub_1004A7818()
{
  id v1 = [v0 reminder];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [v1 account];
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = [v3 accountTypeHost];
      unsigned int v6 = [v5 isCloudKit];

      if (v6)
      {
        uint64_t v7 = sub_1004A8120();
        if ((v8 & 1) == 0)
        {
          uint64_t v9 = v7;

          return *(double *)&v9;
        }
      }
      else
      {
        if (qword_100907688 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_10008E2DC(v33, (uint64_t)qword_10091A870);
        id v34 = v0;
        uint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v35, v36))
        {
          os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
          uint64_t v45 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v37 = 136446210;
          id v38 = [v34 remObjectID];
          if (v38)
          {
            uint64_t v39 = v38;
            id v40 = [v38 description];

            uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v43 = v42;
          }
          else
          {
            uint64_t v41 = 7104878;
            unint64_t v43 = 0xE300000000000000;
          }
          sub_1000C51B8(v41, v43, &v45);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "REMCDAlarm.generateNonce(): alarm does not belong to CK account, skip generateNonce() {alarmID: %{public}s}", v37, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      double v10 = kREMNonceUnset;

      return v10;
    }
    if (qword_100907688 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_10091A870);
    id v23 = v0;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136446210;
      id v27 = [v23 remObjectID];
      if (v27)
      {
        uint64_t v28 = v27;
        id v29 = [v27 description];

        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v32 = v31;
      }
      else
      {
        uint64_t v30 = 7104878;
        unint64_t v32 = 0xE300000000000000;
      }
      sub_1000C51B8(v30, v32, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "REMCDAlarm.generateNonce(): alarm.reminder.account unexpectedly nil trying to call generateNonce() {alarmID: %{public}s}", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    double v10 = kREMNonceUnset;
  }
  else
  {
    if (qword_100907688 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_10091A870);
    id v12 = v0;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      __n128 v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)__n128 v15 = 136446210;
      id v16 = [v12 remObjectID];
      if (v16)
      {
        __n128 v17 = v16;
        id v18 = [v16 description];

        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v21 = v20;
      }
      else
      {
        uint64_t v19 = 7104878;
        unint64_t v21 = 0xE300000000000000;
      }
      sub_1000C51B8(v19, v21, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "REMCDAlarm.generateNonce(): alarm.reminder not set before trying to call generateNonce() {alarmID: %{public}s}", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return kREMNonceUnset;
  }
  return v10;
}

Swift::Double __swiftcall REMCDAlarmTimeIntervalTrigger.generateNonce()()
{
  sub_1004A7E9C("REMCDAlarmTimeIntervalTrigger.generateNonce(): trigger.alarm not set before trying to call generateNonce() {triggerID: %{public}s}");
  return result;
}

void sub_1004A7E9C(const char *a1)
{
  id v3 = [v1 alarm];
  if (v3)
  {
    uint64_t v4 = v3;
    sub_1004A7818();
  }
  else
  {
    if (qword_100907688 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_10091A870);
    id v6 = v1;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      id v10 = [v6 remObjectID];
      if (v10)
      {
        uint64_t v11 = v10;
        id v12 = [v10 description];

        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;
      }
      else
      {
        unint64_t v15 = 0xE300000000000000;
        uint64_t v13 = 7104878;
      }
      sub_1000C51B8(v13, v15, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, a1, v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_1004A8120()
{
  id v1 = v0;
  if (qword_1009071C8 != -1) {
    swift_once();
  }
  if (!*(void *)(qword_1009420D0 + 16) || (sub_1001806F8(0xD000000000000011, 0x80000001007C6910), (v2 & 1) == 0))
  {
    if (qword_100907688 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_10091A870);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "REMAlarmCDIngestor: Fatal programming fault, was expecting to map dueDateComponents storage value key to CD value key", v13, 2u);
      swift_slowDealloc();
    }
LABEL_12:

    return 0;
  }
  swift_bridgeObjectRetain();
  id v3 = [v0 resolutionTokenMap];
  if (v3)
  {
    uint64_t v4 = v3;
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v6 = [v4 getTokenForKey:v5];

    if (v6)
    {
      [v6 generateNonce];
      uint64_t v8 = v7;

      return v8;
    }
    if (qword_100907688 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_10091A870);
    id v26 = v1;
    id v27 = v4;
    id v28 = v26;
    uint64_t v11 = v27;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136446466;
      id v32 = [v28 remObjectID];
      if (v32)
      {
        uint64_t v33 = v32;
        id v34 = [v32 description];

        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;
      }
      else
      {
        uint64_t v35 = 7104878;
        unint64_t v37 = 0xE300000000000000;
      }
      uint64_t v42 = sub_1000C51B8(v35, v37, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2082;
      id v38 = [v11 getTokenKeys];
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v39 = Array.description.getter();
      unint64_t v41 = v40;
      swift_bridgeObjectRelease();
      sub_1000C51B8(v39, v41, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "REMAlarmCDIngestor: Failed to find the resolution token of 'dueDateComponents' from reminder {reminderID: %{public}s, mapKeys: %{public}s}", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }

    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  if (qword_100907688 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10091A870);
  id v15 = v0;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v16, v17))
  {

    return 0;
  }
  id v18 = (uint8_t *)swift_slowAlloc();
  uint64_t v43 = swift_slowAlloc();
  *(_DWORD *)id v18 = 136446210;
  id v19 = [v15 remObjectID];
  if (v19)
  {
    unint64_t v20 = v19;
    id v21 = [v19 description];

    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;
  }
  else
  {
    uint64_t v22 = 7104878;
    unint64_t v24 = 0xE300000000000000;
  }
  sub_1000C51B8(v22, v24, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v16, v17, "REMAlarmCDIngestor: Failed to get resolution token map from reminder {reminderID: %{public}s}", v18, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return 0;
}

id static REMCDAccountListData.fetchRequest()()
{
  id v0 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithEntityName:v1];

  return v2;
}

void *sub_1004A87D4()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_1004A87E0@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for REMCDAccountListData();
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1004A8824(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, char a5)
{
  sub_100094134(a3);
  sub_1000967F4(a4, a3);
  uint64_t v7 = dispatch thunk of Collection.count.getter();
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  uint64_t v9 = v7;
  unint64_t v23 = _swiftEmptyArrayStorage;
  sub_1001DE8E8(0, v7 & ~(v7 >> 63), 0);
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v9 & 0x8000000000000000) == 0)
  {
    do
    {
      uint64_t v11 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      uint64_t v15 = v12[4];
      uint64_t v20 = v12[3];
      uint64_t v21 = v12[2];
      swift_retain();
      swift_bridgeObjectRetain();
      v11(v22, 0);
      unint64_t v23 = v8;
      unint64_t v17 = v8[2];
      unint64_t v16 = v8[3];
      if (v17 >= v16 >> 1)
      {
        sub_1001DE8E8(v16 > 1, v17 + 1, 1);
        uint64_t v8 = v23;
      }
      v8[2] = v17 + 1;
      id v18 = &v8[7 * v17];
      v18[4] = v14;
      v18[5] = v13;
      v18[6] = v21;
      v18[7] = v20;
      v18[8] = v15;
      v18[9] = 0;
      *((unsigned char *)v18 + 80) = a5;
      dispatch thunk of Collection.formIndex(after:)();
      --v9;
    }
    while (v9);
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004A89F4(uint64_t a1)
{
  sub_100094134(&qword_10091AAD0);
  sub_1000967F4(&qword_10091AB28, &qword_10091AAD0);
  uint64_t v2 = dispatch thunk of Collection.count.getter();
  id v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v4 = v2;
  id v18 = _swiftEmptyArrayStorage;
  sub_1001DE8E8(0, v2 & ~(v2 >> 63), 0);
  id v3 = _swiftEmptyArrayStorage;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v4 & 0x8000000000000000) == 0)
  {
    do
    {
      id v6 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v8 = *v7;
      uint64_t v15 = v7[2];
      uint64_t v16 = v7[1];
      uint64_t v9 = v7[4];
      uint64_t v14 = v7[3];
      swift_bridgeObjectRetain();
      v6(v17, 0);
      id v18 = v3;
      uint64_t v10 = a1;
      unint64_t v12 = v3[2];
      unint64_t v11 = v3[3];
      if (v12 >= v11 >> 1)
      {
        sub_1001DE8E8(v11 > 1, v12 + 1, 1);
        id v3 = v18;
      }
      v3[2] = v12 + 1;
      uint64_t v13 = &v3[7 * v12];
      v13[4] = v8;
      v13[5] = v16;
      v13[6] = v15;
      v13[7] = v14;
      v13[8] = v9;
      v13[9] = 0;
      *((unsigned char *)v13 + 80) = 4;
      dispatch thunk of Collection.formIndex(after:)();
      --v4;
      a1 = v10;
    }
    while (v4);
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004A8BC4()
{
  sub_100094134(&qword_10091AAC8);
  sub_1000967F4(&qword_10091AB20, &qword_10091AAC8);
  uint64_t v0 = dispatch thunk of Collection.count.getter();
  NSString v1 = _swiftEmptyArrayStorage;
  if (!v0) {
    return (uint64_t)v1;
  }
  uint64_t v2 = v0;
  uint64_t v15 = _swiftEmptyArrayStorage;
  sub_1001DE8E8(0, v0 & ~(v0 >> 63), 0);
  NSString v1 = _swiftEmptyArrayStorage;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v2 & 0x8000000000000000) == 0)
  {
    do
    {
      uint64_t v4 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v6 = v5[1];
      uint64_t v13 = v5[2];
      uint64_t v7 = v5[5];
      uint64_t v11 = *v5;
      uint64_t v12 = v5[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v4(v14, 0);
      uint64_t v15 = v1;
      unint64_t v9 = v1[2];
      unint64_t v8 = v1[3];
      if (v9 >= v8 >> 1)
      {
        sub_1001DE8E8(v8 > 1, v9 + 1, 1);
        NSString v1 = v15;
      }
      v1[2] = v9 + 1;
      uint64_t v10 = &v1[7 * v9];
      v10[4] = v11;
      v10[5] = v6;
      v10[6] = v13;
      v10[7] = v13;
      v10[8] = v12;
      v10[9] = v7;
      *((unsigned char *)v10 + 80) = 5;
      dispatch thunk of Collection.formIndex(after:)();
      --v2;
    }
    while (v2);
    return (uint64_t)v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004A8D94()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v24 - v6;
  URL.appendingPathComponent(_:)();
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackVersion);
  unint64_t v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules);
  swift_beginAccess();
  uint64_t v10 = *v9;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  JSONEncoder.init()();
  v28[0] = v8;
  v28[1] = v10;
  sub_1004B392C();
  uint64_t v11 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_release();
  Data.write(to:options:)();
  if (qword_100907690 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10091A890);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    unint64_t v26 = v13;
    id v18 = (uint8_t *)v17;
    uint64_t v25 = swift_slowAlloc();
    v28[0] = v25;
    *(_DWORD *)id v18 = 136315138;
    unint64_t v24 = v18 + 4;
    uint64_t v19 = URL.absoluteString.getter();
    uint64_t v27 = sub_1000C51B8(v19, v20, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v2 + 8);
    v21(v4, v1);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDCoreBehaviorModel: New feedback info saved to {%s}", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_100097F34(v11, v26);

    v21(v7, v1);
  }
  else
  {
    sub_100097F34(v11, v13);

    unint64_t v23 = *(void (**)(char *, uint64_t))(v2 + 8);
    v23(v4, v1);
    v23(v7, v1);
  }
  return 1;
}

uint64_t sub_1004A93D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    id v4 = (id)sub_100094134(&qword_1009148E0);
    sub_1000967F4(&qword_10091A8B0, &qword_1009148E0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v47;
    uint64_t v43 = v48;
    uint64_t v7 = v49;
    uint64_t v6 = v50;
    unint64_t v8 = v51;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v43 = a1 + 56;
    uint64_t v7 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  uint64_t v12 = 0;
  int64_t v42 = (unint64_t)(v7 + 64) >> 6;
  unint64_t v13 = &_s19ReminderKitInternal29REMSuggestedAttributesTrainerC10ParametersV23validationSetProportionSdvg_ptr_0;
LABEL_8:
  uint64_t v41 = v12;
  uint64_t v14 = v6;
  unint64_t v15 = v8;
  while (v5 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_55;
    }
    swift_unknownObjectRetain();
    sub_100094134(&qword_1009148E0);
    swift_dynamicCast();
    id v19 = v46;
    swift_unknownObjectRelease();
    uint64_t v18 = v14;
    uint64_t v16 = v15;
    if (!v46) {
      goto LABEL_55;
    }
LABEL_35:
    uint64_t v45 = v18;
    id v23 = [v19 type];
    id v24 = [v23 identifier];

    if (v24)
    {
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v27 = v26;
    }
    else
    {
      uint64_t v25 = 0;
      id v27 = 0;
    }
    unint64_t v15 = v16;
    id v28 = self;
    NSString v29 = String._bridgeToObjectiveC()();
    sub_1000963CC(0, a4);
    id v4 = [v28 taskSpecificItemWithIdentifier:v29 valueClass:swift_getObjCClassFromMetadata()];

    if (!v4) {
      goto LABEL_57;
    }
    os_log_type_t v30 = v13;
    uint64_t v31 = v5;
    id v32 = v30;
    self;
    uint64_t v33 = (void *)swift_dynamicCastObjCClass();
    if (!v33) {
      goto LABEL_58;
    }
    id v34 = [v33 identifier];

    if (!v34)
    {
      uint64_t v5 = v31;
      if (!v27) {
        goto LABEL_49;
      }
LABEL_10:

      id v4 = v27;
      goto LABEL_11;
    }
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v4 = v36;

    uint64_t v5 = v31;
    if (v27)
    {
      if (!v4) {
        goto LABEL_10;
      }
      unint64_t v13 = v32;
      if (v25 == v35 && v27 == v4)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_51:
        unint64_t v8 = v15;
        uint64_t v6 = v45;
LABEL_52:
        uint64_t v12 = v41 + 1;
        if (!__OFADD__(v41, 1)) {
          goto LABEL_8;
        }
        __break(1u);
LABEL_55:
        sub_1000C1AF8();
        return v41;
      }
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = v45;
      uint64_t v14 = v45;
      unint64_t v8 = v15;
      if (v37) {
        goto LABEL_52;
      }
    }
    else
    {
      if (!v4)
      {
LABEL_49:

        unint64_t v13 = v32;
        goto LABEL_51;
      }

LABEL_11:
      unint64_t v13 = v32;
      swift_bridgeObjectRelease();
      uint64_t v14 = v45;
    }
  }
  if (v15)
  {
    uint64_t v16 = (v15 - 1) & v15;
    unint64_t v17 = __clz(__rbit64(v15)) | (v14 << 6);
    uint64_t v18 = v14;
LABEL_34:
    id v19 = *(id *)(*(void *)(v5 + 48) + 8 * v17);
    if (!v19) {
      goto LABEL_55;
    }
    goto LABEL_35;
  }
  int64_t v20 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v20 >= v42) {
      goto LABEL_55;
    }
    unint64_t v21 = *(void *)(v43 + 8 * v20);
    uint64_t v18 = v14 + 1;
    if (!v21)
    {
      uint64_t v18 = v14 + 2;
      if (v14 + 2 >= v42) {
        goto LABEL_55;
      }
      unint64_t v21 = *(void *)(v43 + 8 * v18);
      if (!v21)
      {
        uint64_t v18 = v14 + 3;
        if (v14 + 3 >= v42) {
          goto LABEL_55;
        }
        unint64_t v21 = *(void *)(v43 + 8 * v18);
        if (!v21)
        {
          uint64_t v18 = v14 + 4;
          if (v14 + 4 >= v42) {
            goto LABEL_55;
          }
          unint64_t v21 = *(void *)(v43 + 8 * v18);
          if (!v21)
          {
            uint64_t v18 = v14 + 5;
            if (v14 + 5 >= v42) {
              goto LABEL_55;
            }
            unint64_t v21 = *(void *)(v43 + 8 * v18);
            if (!v21)
            {
              uint64_t v22 = v14 + 6;
              while (v42 != v22)
              {
                unint64_t v21 = *(void *)(v43 + 8 * v22++);
                if (v21)
                {
                  uint64_t v18 = v22 - 1;
                  goto LABEL_33;
                }
              }
              goto LABEL_55;
            }
          }
        }
      }
    }
LABEL_33:
    uint64_t v16 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v18 << 6);
    goto LABEL_34;
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  _StringGuts.grow(_:)(36);
  v39._object = (void *)0x80000001007D6520;
  v39._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v39);
  _print_unlocked<A, B>(_:_:)();

  v40._countAndFlagsBits = 125;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004A993C(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackVersion;
  if (*(void *)(v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackVersion) >= a1)
  {
    if (qword_100907690 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_10091A890);
    swift_retain();
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v10 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDCoreBehaviorModel: Current feedback version {%lu}, skipping reset to version {%lu}", (uint8_t *)v10, 0x16u);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    char v6 = 0;
  }
  else
  {
    uint64_t v5 = (void *)(v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules);
    swift_beginAccess();
    void *v5 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    *(void *)(v2 + v4) = a1;
    char v6 = sub_1004A8D94();
  }
  return v6 & 1;
}

double sub_1004A9AF8(void *a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  uint64_t v70 = a4;
  id v66 = a3;
  uint64_t v68 = a2;
  id v67 = a1;
  uint64_t v8 = *v5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v75 = *(void *)(v9 - 8);
  uint64_t v76 = v9;
  __chkstk_darwin(v9);
  uint64_t v73 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for DispatchQoS();
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v71 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  int v69 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v80 = (char *)&v59 - v16;
  uint64_t v17 = type metadata accessor for REMSuggestedAttributeInputDataFrame();
  uint64_t v65 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v77 = *(void *)(v20 - 8);
  uint64_t v78 = v20;
  __chkstk_darwin(v20);
  unint64_t v79 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&unk_10091AA90);
  if ([(id)swift_getObjCClassFromMetadata() respondsToSelector:"supportsTaskSpecificEvents"]&& objc_msgSend(self, "supportsTaskSpecificEvents"))
  {
    uint64_t v62 = v6;
    uint64_t v61 = v8;
    URL.appendingPathComponent(_:)();
    sub_1004B3D58();
    sub_1004B3E28();
    uint64_t v64 = v13;
    id v60 = objc_allocWithZone((Class)BMMiningTask);
    URL._bridgeToObjectiveC()(&v84);
    id v23 = v22;
    sub_100094134(&qword_10090B790);
    sub_1000967F4(&qword_10091AAA0, &qword_10090B790);
    v24.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v63 = v12;
    Class isa = v24.super.isa;
    swift_bridgeObjectRelease();
    Class v26 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v27 = [v60 initWithStorageURL:v23 types:isa targetTypes:v26 samplingInterval:v66 absoluteSupport:2.0 confidence:a5];
    id v66 = v27;

    uint64_t v28 = v65;
    NSString v29 = *(void (**)(char *, id, uint64_t))(v65 + 16);
    v29(v19, v67, v17);
    os_log_type_t v30 = (objc_class *)type metadata accessor for RDCoreBehaviorModelTrainingDelegate(0);
    uint64_t v31 = (char *)objc_allocWithZone(v30);
    *(void *)&v31[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer] = 0;
    v29(&v31[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_trainingDataFrame], v19, v17);
    *(void *)&v31[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_intentWords] = v68;
    id v32 = &v31[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_metrics];
    *(void *)id v32 = 0;
    *((void *)v32 + 1) = 0;
    *((void *)v32 + 2) = 0;
    *((void *)v32 + 3) = -2;
    v83.receiver = v31;
    v83.super_class = v30;
    swift_retain();
    id v33 = [super init];
    id v67 = v33;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v17);
    [v27 setDelegate:v33];
    id v34 = v80;
    Date.init()();
    sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    uint64_t v68 = static OS_dispatch_queue.main.getter();
    uint64_t v35 = v64;
    unint64_t v36 = v69;
    uint64_t v37 = v63;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v69, v34, v63);
    unint64_t v38 = (*(unsigned __int8 *)(v35 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    unint64_t v39 = (v14 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v81;
    (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v42 + v38, v36, v37);
    uint64_t v43 = v66;
    *(void *)(v42 + v39) = v66;
    unint64_t v44 = v67;
    *(void *)(v42 + v40) = v67;
    *(void *)(v42 + v41) = v70;
    *(void *)(v42 + ((v41 + 15) & 0xFFFFFFFFFFFFFFF8)) = v61;
    aBlock[4] = sub_1004B6F5C;
    aBlock[5] = v42;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008C7A38;
    uint64_t v45 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    id v46 = v43;
    uint64_t v47 = v44;
    swift_release();
    uint64_t v48 = v71;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_1004B6D38((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    uint64_t v49 = v73;
    uint64_t v50 = v76;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    unint64_t v51 = (void *)v68;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v49, v50);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v48, v74);
    if (qword_100907690 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_10008E2DC(v52, (uint64_t)qword_10091A890);
    double v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      os_log_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "RDCoreBehaviorModel: CoreBehavior mining task will begin mining", v55, 2u);
      swift_slowDealloc();
    }

    [v46 mine];
    (*(void (**)(char *, uint64_t))(v64 + 8))(v80, v63);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v79, v78);
    a5 = *(double *)&v47[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_metrics + 16];
  }
  else
  {
    double v56 = self;
    NSString v57 = String._bridgeToObjectiveC()();
    [v56 internalErrorWithDebugDescription:v57];

    swift_willThrow();
  }
  return a5;
}

void *sub_1004AA4D0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = v5;
  uint64_t v119 = a4;
  uint64_t v11 = sub_100094134(&qword_100911F18);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&unk_10091AA90);
  if (![(id)swift_getObjCClassFromMetadata() respondsToSelector:"supportsTaskSpecificEvents"])return _swiftEmptyArrayStorage; {
  unint64_t v118 = a1;
  }
  uint64_t v15 = _swiftEmptyArrayStorage;
  if ([self supportsTaskSpecificEvents])
  {
    v113 = v14;
    uint64_t v114 = v12;
    uint64_t v115 = v11;
    HIDWORD(v110) = a5;
    sub_100094134(&qword_1009148F0);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_100776E40;
    REMSuggestedAttributeInput.list.getter();
    uint64_t v17 = REMSuggestedList.listIdentifier.getter();
    uint64_t v19 = v18;
    swift_release();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    *(unsigned char *)(v16 + 48) = 2;
    uint64_t v124 = v16;
    REMSuggestedAttributeInput.dueDayOfWeek.getter();
    uint64_t v20 = REMSuggestedWeekDay.value.getter();
    swift_release();
    if ((unint64_t)(v20 - 8) >= 0xFFFFFFFFFFFFFFF9)
    {
      unint64_t v22 = *(void *)(v16 + 16);
      unint64_t v21 = *(void *)(v16 + 24);
      if (v22 >= v21 >> 1) {
        uint64_t v16 = (uint64_t)sub_10030B480((void *)(v21 > 1), v22 + 1, 1, (void *)v16);
      }
      *(void *)(v16 + 16) = v22 + 1;
      uint64_t v23 = v16 + 24 * v22;
      *(void *)(v23 + 32) = v20;
      *(void *)(v23 + 40) = 0;
      *(unsigned char *)(v23 + 48) = 3;
      uint64_t v124 = v16;
    }
    uint64_t v24 = REMSuggestedAttributeInput.location.getter();
    if (REMSuggestedLocation.isSpecificLocation.getter())
    {
      unint64_t v25 = *(void *)(v16 + 16);
      unint64_t v26 = *(void *)(v16 + 24);
      swift_retain();
      if (v25 >= v26 >> 1) {
        uint64_t v16 = (uint64_t)sub_10030B480((void *)(v26 > 1), v25 + 1, 1, (void *)v16);
      }
      *(void *)(v16 + 16) = v25 + 1;
      uint64_t v27 = v16 + 24 * v25;
      *(void *)(v27 + 32) = v24;
      *(void *)(v27 + 40) = 0;
      *(unsigned char *)(v27 + 48) = 4;
      uint64_t v124 = v16;
    }
    if (a3)
    {
      unint64_t v28 = *(void *)(v16 + 16);
      unint64_t v29 = *(void *)(v16 + 24);
      swift_bridgeObjectRetain();
      if (v28 >= v29 >> 1) {
        uint64_t v16 = (uint64_t)sub_10030B480((void *)(v29 > 1), v28 + 1, 1, (void *)v16);
      }
      *(void *)(v16 + 16) = v28 + 1;
      uint64_t v30 = v16 + 24 * v28;
      *(void *)(v30 + 32) = a2;
      *(void *)(v30 + 40) = a3;
      *(unsigned char *)(v30 + 48) = 5;
      uint64_t v124 = v16;
    }
    if (REMSuggestedAttributeInput.flagged.getter())
    {
      unint64_t v32 = *(void *)(v16 + 16);
      unint64_t v31 = *(void *)(v16 + 24);
      if (v32 >= v31 >> 1) {
        uint64_t v16 = (uint64_t)sub_10030B480((void *)(v31 > 1), v32 + 1, 1, (void *)v16);
      }
      *(void *)(v16 + 16) = v32 + 1;
      uint64_t v33 = v16 + 24 * v32;
      *(_OWORD *)(v33 + 32) = xmmword_10078EAD0;
      *(unsigned char *)(v33 + 48) = 7;
      uint64_t v124 = v16;
    }
    uint64_t v34 = REMSuggestedAttributeInput.priority.getter();
    uint64_t v112 = v24;
    uint64_t v116 = v6;
    if (v34)
    {
      uint64_t v35 = REMSuggestedAttributeInput.priority.getter();
      unint64_t v37 = *(void *)(v16 + 16);
      unint64_t v36 = *(void *)(v16 + 24);
      if (v37 >= v36 >> 1) {
        uint64_t v16 = (uint64_t)sub_10030B480((void *)(v36 > 1), v37 + 1, 1, (void *)v16);
      }
      *(void *)(v16 + 16) = v37 + 1;
      uint64_t v38 = v16 + 24 * v37;
      *(void *)(v38 + 32) = v35;
      *(void *)(v38 + 40) = 0;
      *(unsigned char *)(v38 + 48) = 8;
      uint64_t v124 = v16;
    }
    uint64_t v39 = REMSuggestedAttributeInput.tags.getter();
    uint64_t v40 = v39;
    int64_t v41 = 0;
    uint64_t v42 = 1 << *(unsigned char *)(v39 + 32);
    uint64_t v43 = -1;
    if (v42 < 64) {
      uint64_t v43 = ~(-1 << v42);
    }
    uint64_t v44 = *(void *)(v39 + 56);
    uint64_t v120 = v39 + 56;
    unint64_t v45 = v43 & v44;
    int64_t v46 = (unint64_t)(v42 + 63) >> 6;
    if ((v43 & v44) == 0) {
      goto LABEL_27;
    }
    while (1)
    {
      unint64_t v47 = __clz(__rbit64(v45));
      v45 &= v45 - 1;
      for (unint64_t i = v47 | (v41 << 6); ; unint64_t i = __clz(__rbit64(v50)) + (v41 << 6))
      {
        uint64_t v52 = (uint64_t *)(*(void *)(v40 + 48) + 16 * i);
        uint64_t v54 = *v52;
        uint64_t v53 = v52[1];
        unint64_t v56 = *(void *)(v16 + 16);
        unint64_t v55 = *(void *)(v16 + 24);
        swift_bridgeObjectRetain();
        if (v56 >= v55 >> 1) {
          uint64_t v16 = (uint64_t)sub_10030B480((void *)(v55 > 1), v56 + 1, 1, (void *)v16);
        }
        *(void *)(v16 + 16) = v56 + 1;
        uint64_t v57 = v16 + 24 * v56;
        *(void *)(v57 + 32) = v54;
        *(void *)(v57 + 40) = v53;
        *(unsigned char *)(v57 + 48) = 1;
        uint64_t v124 = v16;
        if (v45) {
          break;
        }
LABEL_27:
        int64_t v49 = v41 + 1;
        if (__OFADD__(v41, 1)) {
          goto LABEL_71;
        }
        if (v49 >= v46) {
          goto LABEL_46;
        }
        unint64_t v50 = *(void *)(v120 + 8 * v49);
        ++v41;
        if (!v50)
        {
          int64_t v41 = v49 + 1;
          if (v49 + 1 >= v46) {
            goto LABEL_46;
          }
          unint64_t v50 = *(void *)(v120 + 8 * v41);
          if (!v50)
          {
            int64_t v41 = v49 + 2;
            if (v49 + 2 >= v46) {
              goto LABEL_46;
            }
            unint64_t v50 = *(void *)(v120 + 8 * v41);
            if (!v50)
            {
              int64_t v51 = v49 + 3;
              if (v51 >= v46) {
                goto LABEL_46;
              }
              unint64_t v50 = *(void *)(v120 + 8 * v51);
              if (!v50)
              {
                while (1)
                {
                  int64_t v41 = v51 + 1;
                  if (__OFADD__(v51, 1)) {
                    goto LABEL_72;
                  }
                  if (v41 >= v46) {
                    break;
                  }
                  unint64_t v50 = *(void *)(v120 + 8 * v41);
                  ++v51;
                  if (v50) {
                    goto LABEL_40;
                  }
                }
LABEL_46:
                swift_release();
                int64_t v46 = REMSuggestedAttributeInput.contact.getter();
                if (REMSuggestedContact.isValid.getter())
                {
                  unint64_t v58 = *(void *)(v16 + 16);
                  unint64_t v59 = *(void *)(v16 + 24);
                  swift_retain();
                  if (v58 >= v59 >> 1) {
                    uint64_t v16 = (uint64_t)sub_10030B480((void *)(v59 > 1), v58 + 1, 1, (void *)v16);
                  }
                  *(void *)(v16 + 16) = v58 + 1;
                  uint64_t v60 = v16 + 24 * v58;
                  *(void *)(v60 + 32) = v46;
                  *(void *)(v60 + 40) = 0;
                  *(unsigned char *)(v60 + 48) = 0;
                  uint64_t v124 = v16;
                }
                if (qword_100907690 != -1) {
                  goto LABEL_73;
                }
                while (1)
                {
                  uint64_t v61 = type metadata accessor for Logger();
                  uint64_t v62 = sub_10008E2DC(v61, (uint64_t)qword_10091A890);
                  uint64_t v63 = Logger.logObject.getter();
                  os_log_type_t v64 = static os_log_type_t.default.getter();
                  BOOL v65 = os_log_type_enabled(v63, v64);
                  uint64_t v117 = v62;
                  if (v65)
                  {
                    id v66 = (uint8_t *)swift_slowAlloc();
                    v123[0] = swift_slowAlloc();
                    *(_DWORD *)id v66 = 136315138;
                    swift_beginAccess();
                    swift_bridgeObjectRetain();
                    uint64_t v67 = Array.description.getter();
                    unint64_t v69 = v68;
                    swift_bridgeObjectRelease();
                    v122[0] = sub_1000C51B8(v67, v69, v123);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, v63, v64, "RDCoreBehaviorModel: corebehavior context: %s", v66, 0xCu);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }

                  uint64_t v70 = v113;
                  uint64_t v71 = v116 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules;
                  swift_beginAccess();
                  uint64_t v73 = v114;
                  uint64_t v72 = v115;
                  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v70, v71, v115);
                  unint64_t v74 = OrderedDictionary.values.getter();
                  (*(void (**)(char *, uint64_t))(v73 + 8))(v70, v72);
                  swift_retain();
                  unint64_t v75 = sub_1004B3EEC(v74, &v124);
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRetain_n();
                  uint64_t v76 = Logger.logObject.getter();
                  os_log_type_t v77 = static os_log_type_t.default.getter();
                  unint64_t v78 = v75 >> 62;
                  if (os_log_type_enabled(v76, v77))
                  {
                    unint64_t v79 = (uint8_t *)swift_slowAlloc();
                    *(_DWORD *)unint64_t v79 = 134349056;
                    if (v78)
                    {
                      swift_bridgeObjectRetain();
                      uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      uint64_t v80 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    }
                    swift_bridgeObjectRelease();
                    v122[0] = v80;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, v76, v77, "RDCoreBehaviorModel: number of matching rules: %{public}ld", v79, 0xCu);
                    swift_slowDealloc();
                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                  }
                  swift_bridgeObjectRetain_n();
                  uint64_t v81 = Logger.logObject.getter();
                  os_log_type_t v82 = static os_log_type_t.default.getter();
                  BOOL v83 = os_log_type_enabled(v81, v82);
                  uint64_t v120 = v75;
                  int64_t v111 = v46;
                  if (v83)
                  {
                    NSURL v84 = (uint8_t *)swift_slowAlloc();
                    v122[0] = swift_slowAlloc();
                    *(_DWORD *)NSURL v84 = 136315138;
                    unint64_t v78 = v75 >> 62;
                    sub_1000963CC(0, &qword_1009100C0);
                    uint64_t v85 = Array.description.getter();
                    uint64_t v121 = sub_1000C51B8(v85, v86, v122);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    unint64_t v75 = v120;
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, v81, v82, "RDCoreBehaviorModel: matching rules:\n %s", v84, 0xCu);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                  }
                  v122[0] = (uint64_t)_swiftEmptyArrayStorage;
                  if (v78)
                  {
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
                    if (!v87)
                    {
LABEL_75:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v98 = _swiftEmptyArrayStorage;
LABEL_76:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRetain_n();
                      v99 = Logger.logObject.getter();
                      os_log_type_t v100 = static os_log_type_t.default.getter();
                      if (os_log_type_enabled(v99, v100))
                      {
                        v101 = (uint8_t *)swift_slowAlloc();
                        v122[0] = swift_slowAlloc();
                        *(_DWORD *)v101 = 136315138;
                        uint64_t v102 = Array.description.getter();
                        uint64_t v121 = sub_1000C51B8(v102, v103, v122);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_bridgeObjectRelease_n();
                        swift_bridgeObjectRelease();
                        _os_log_impl((void *)&_mh_execute_header, v99, v100, "RDCoreBehaviorModel: all corebehavior predictions: %s", v101, 0xCu);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_slowDealloc();
                      }
                      else
                      {

                        swift_bridgeObjectRelease_n();
                      }
                      uint64_t v15 = sub_1004AE99C(2, (uint64_t)v98);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRetain_n();
                      v104 = Logger.logObject.getter();
                      os_log_type_t v105 = static os_log_type_t.default.getter();
                      if (os_log_type_enabled(v104, v105))
                      {
                        v106 = (uint8_t *)swift_slowAlloc();
                        v122[0] = swift_slowAlloc();
                        *(_DWORD *)v106 = 136315138;
                        uint64_t v107 = Array.description.getter();
                        uint64_t v121 = sub_1000C51B8(v107, v108, v122);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_bridgeObjectRelease_n();
                        swift_bridgeObjectRelease();
                        _os_log_impl((void *)&_mh_execute_header, v104, v105, "RDCoreBehaviorModel: top corebehavior predictions: %s", v106, 0xCu);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_slowDealloc();
                        swift_release();
                        swift_release();
                      }
                      else
                      {

                        swift_bridgeObjectRelease_n();
                        swift_release();
                        swift_release();
                      }
                      swift_bridgeObjectRelease();
                      return v15;
                    }
                  }
                  else
                  {
                    uint64_t v87 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if (!v87) {
                      goto LABEL_75;
                    }
                  }
                  unint64_t v118 = v75 & 0xC000000000000001;
                  uint64_t v88 = 4;
                  char v89 = BYTE4(v110) & 1;
                  uint64_t v90 = v119;
                  while (1)
                  {
                    id v91 = v118
                        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                        : *(id *)(v75 + 8 * v88);
                    v92 = v91;
                    int64_t v46 = v88 - 3;
                    if (__OFADD__(v88 - 4, 1)) {
                      break;
                    }
                    id v93 = [v91 consequent];
                    sub_100094134(&qword_1009148E0);
                    sub_1000967F4(&qword_10091A8B0, &qword_1009148E0);
                    uint64_t v94 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

                    swift_bridgeObjectRetain();
                    id v95 = v92;
                    sub_1004B41BC(v94, v89, v95, v90);
                    uint64_t v97 = v96;
                    unint64_t v75 = v120;
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                    sub_1002031B0(v97);
                    ++v88;
                    if (v46 == v87)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v98 = (void *)v122[0];
                      goto LABEL_76;
                    }
                  }
                  __break(1u);
LABEL_71:
                  __break(1u);
LABEL_72:
                  __break(1u);
LABEL_73:
                  swift_once();
                }
              }
              int64_t v41 = v51;
            }
          }
        }
LABEL_40:
        unint64_t v45 = (v50 - 1) & v50;
      }
    }
  }
  return v15;
}

void sub_1004AB320(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v13 = v12;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  double v14 = a3 * 0.05;
  uint64_t v15 = (uint64_t *)(v4 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules);
  swift_beginAccess();
  uint64_t v16 = *v15;
  if (*(void *)(*v15 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_1001806F8(a1, a2);
    if (v18)
    {
      uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v20 = sub_1004B46E8(v19, v13);
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v54[0] = (unint64_t)v20;
      sub_1002C62F8(isUniquelyReferenced_nonNull_native, v14, v13);
      unint64_t v22 = v54[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      char v23 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v51 = *v15;
      uint64_t *v15 = 0x8000000000000000;
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  sub_100094134((uint64_t *)&unk_10091AAB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(double *)(inited + 32) = v13;
  *(double *)(inited + 40) = v14;
  unint64_t v22 = sub_10032DC38(inited);
  swift_setDeallocating();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *v15;
  uint64_t *v15 = 0x8000000000000000;
LABEL_6:
  sub_1002C62CC(v22, a1, a2, v23);
  uint64_t *v15 = v51;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v25 = *v15;
  if (!*(void *)(*v15 + 16))
  {
LABEL_35:
    swift_endAccess();
    return;
  }
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_1001806F8(a1, a2);
  if ((v27 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 8 * v26);
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v51 = a1;
  unint64_t v52 = a2;
  swift_bridgeObjectRetain();
  uint64_t v29 = sub_100094134(&qword_100911F18);
  OrderedDictionary.subscript.getter();
  swift_bridgeObjectRelease();
  id v30 = v53;
  if (!v53)
  {
    swift_endAccess();
    swift_bridgeObjectRelease();
    return;
  }
  swift_endAccess();
  [v30 confidence];
  double v32 = v31;
  int64_t v33 = 0;
  uint64_t v34 = v28 + 64;
  uint64_t v35 = 1 << *(unsigned char *)(v28 + 32);
  uint64_t v36 = -1;
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  unint64_t v37 = v36 & *(void *)(v28 + 64);
  int64_t v38 = (unint64_t)(v35 + 63) >> 6;
  for (double i = 0.0; ; double i = i + *(double *)(*(void *)(v28 + 56) + 8 * v41))
  {
    if (v37)
    {
      unint64_t v40 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v41 = v40 | (v33 << 6);
      continue;
    }
    if (__OFADD__(v33++, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v33 >= v38) {
      goto LABEL_36;
    }
    unint64_t v43 = *(void *)(v34 + 8 * v33);
    if (!v43) {
      break;
    }
LABEL_29:
    unint64_t v45 = __clz(__rbit64(v43));
    unint64_t v37 = (v43 - 1) & v43;
    unint64_t v41 = v45 + (v33 << 6);
  }
  int64_t v44 = v33 + 1;
  if (v33 + 1 >= v38) {
    goto LABEL_36;
  }
  unint64_t v43 = *(void *)(v34 + 8 * v44);
  if (v43) {
    goto LABEL_28;
  }
  int64_t v44 = v33 + 2;
  if (v33 + 2 >= v38) {
    goto LABEL_36;
  }
  unint64_t v43 = *(void *)(v34 + 8 * v44);
  if (v43) {
    goto LABEL_28;
  }
  int64_t v44 = v33 + 3;
  if (v33 + 3 >= v38) {
    goto LABEL_36;
  }
  unint64_t v43 = *(void *)(v34 + 8 * v44);
  if (v43) {
    goto LABEL_28;
  }
  int64_t v44 = v33 + 4;
  if (v33 + 4 >= v38) {
    goto LABEL_36;
  }
  unint64_t v43 = *(void *)(v34 + 8 * v44);
  if (v43)
  {
LABEL_28:
    int64_t v33 = v44;
    goto LABEL_29;
  }
  int64_t v44 = v33 + 5;
  if (v33 + 5 < v38)
  {
    unint64_t v43 = *(void *)(v34 + 8 * v44);
    if (!v43)
    {
      while (1)
      {
        int64_t v33 = v44 + 1;
        if (__OFADD__(v44, 1)) {
          break;
        }
        if (v33 >= v38) {
          goto LABEL_36;
        }
        unint64_t v43 = *(void *)(v34 + 8 * v33);
        ++v44;
        if (v43) {
          goto LABEL_29;
        }
      }
LABEL_45:
      __break(1u);
LABEL_46:
      swift_once();
      goto LABEL_38;
    }
    goto LABEL_28;
  }
LABEL_36:
  swift_release();
  if (v32 + i >= *(double *)(v4 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_confidenceThreshold))
  {

    return;
  }
  if (qword_100907690 != -1) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v46 = type metadata accessor for Logger();
  sub_10008E2DC(v46, (uint64_t)qword_10091A890);
  swift_bridgeObjectRetain_n();
  unint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v50 = v29;
    int64_t v49 = (uint8_t *)swift_slowAlloc();
    v54[0] = swift_slowAlloc();
    *(_DWORD *)int64_t v49 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_1000C51B8(a1, a2, (uint64_t *)v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "RDCoreBehaviorModel: Removing rule: %s", v49, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v51 = a1;
  unint64_t v52 = a2;
  swift_beginAccess();
  OrderedDictionary.removeValue(forKey:)();
  swift_endAccess();
}

Swift::Int sub_1004AB9B4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001F53E0(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1004B1850(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1004ABA20(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1001F8BC8(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1004B1F3C(v6);
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_1004ABA9C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091A890);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091A890);
  if (qword_1009077E8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942400);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1004ABB64(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_10091AB48);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_1004B75FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    v11[1] = a3;
    char v12 = 1;
    sub_100094134(&qword_10091AB58);
    sub_1004B7650();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1004ABCF0()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_1004ABD30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004B4854(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004ABD58(uint64_t a1)
{
  unint64_t v2 = sub_1004B75FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004ABD94(uint64_t a1)
{
  unint64_t v2 = sub_1004B75FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004ABDD0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1004B4944(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1004ABDFC(void *a1)
{
  return sub_1004ABB64(a1, *v1, v1[1]);
}

uint64_t sub_1004ABE18@<X0>(void **a1@<X0>, char a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  if ((sub_1004AC3DC(*a1, 4) & 1) != 0
    && (id v68 = [v9 value], (swift_dynamicCast() & 1) != 0))
  {
    if (a2) {
      uint64_t v10 = sub_1004AC51C(a3, a4);
    }
    else {
      uint64_t v10 = BMRule.shortDescription.getter();
    }
    uint64_t v23 = v10;
    uint64_t v24 = v11;
    type metadata accessor for REMSuggestedList();
    uint64_t v25 = REMSuggestedList.__allocating_init(stringLiteral:)();
    [a3 support];
    uint64_t v27 = v26;
    uint64_t result = (uint64_t)[a3 confidence];
    *(void *)a5 = v25;
    *(void *)(a5 + 8) = v27;
    *(void *)(a5 + 16) = v29;
    *(void *)(a5 + 24) = v23;
    *(void *)(a5 + 32) = v24;
    *(void *)(a5 + 40) = 0;
    *(unsigned char *)(a5 + 48) = 0;
  }
  else
  {
    if ((sub_1004AC3DC(v9, 6) & 1) != 0
      && (id v66 = [v9 value], (swift_dynamicCast() & 1) != 0))
    {
      if (a2) {
        uint64_t v12 = sub_1004AC51C(a3, a4);
      }
      else {
        uint64_t v12 = BMRule.shortDescription.getter();
      }
      uint64_t v38 = v12;
      uint64_t v39 = v13;
      type metadata accessor for REMSuggestedWeekDay();
      swift_allocObject();
      uint64_t v40 = REMSuggestedWeekDay.init(_:)();
      [a3 support];
      uint64_t v42 = v41;
      uint64_t result = (uint64_t)[a3 confidence];
      *(void *)a5 = v40;
      *(void *)(a5 + 8) = v42;
      *(void *)(a5 + 16) = v43;
      *(void *)(a5 + 24) = v38;
      *(void *)(a5 + 32) = v39;
      *(void *)(a5 + 40) = 0;
      char v37 = 2;
    }
    else if ((sub_1004AC3DC(v9, 5) & 1) != 0 {
           && (id v68 = [v9 value], (swift_dynamicCast() & 1) != 0))
    }
    {
      if (a2) {
        uint64_t v14 = sub_1004AC51C(a3, a4);
      }
      else {
        uint64_t v14 = BMRule.shortDescription.getter();
      }
      uint64_t v44 = v14;
      uint64_t v45 = v15;
      type metadata accessor for REMSuggestedLocation();
      swift_allocObject();
      uint64_t v46 = REMSuggestedLocation.init(stringLiteral:)();
      [a3 support];
      uint64_t v48 = v47;
      uint64_t result = (uint64_t)[a3 confidence];
      *(void *)a5 = v46;
      *(void *)(a5 + 8) = v48;
      *(void *)(a5 + 16) = v49;
      *(void *)(a5 + 24) = v44;
      *(void *)(a5 + 32) = v45;
      *(void *)(a5 + 40) = 0;
      char v37 = 1;
    }
    else if (sub_1004AC3DC(v9, 8))
    {
      if (a2) {
        uint64_t v16 = sub_1004AC51C(a3, a4);
      }
      else {
        uint64_t v16 = BMRule.shortDescription.getter();
      }
      uint64_t v32 = v16;
      uint64_t v33 = v17;
      [a3 support:v66];
      uint64_t v35 = v34;
      uint64_t result = (uint64_t)[a3 confidence];
      *(void *)a5 = 1;
      *(void *)(a5 + 8) = v35;
      *(void *)(a5 + 16) = v36;
      *(void *)(a5 + 24) = v32;
      *(void *)(a5 + 32) = v33;
      *(void *)(a5 + 40) = 0;
      char v37 = 3;
    }
    else if ((sub_1004AC3DC(v9, 9) & 1) != 0 {
           && (id v66 = [v9 value], (swift_dynamicCast() & 1) != 0))
    }
    {
      if (a2) {
        uint64_t v18 = sub_1004AC51C(a3, a4);
      }
      else {
        uint64_t v18 = BMRule.shortDescription.getter();
      }
      uint64_t v50 = v18;
      uint64_t v51 = v19;
      [a3 support:v66];
      uint64_t v53 = v52;
      uint64_t result = (uint64_t)[a3 confidence];
      *(void *)a5 = v68;
      *(void *)(a5 + 8) = v53;
      *(void *)(a5 + 16) = v54;
      *(void *)(a5 + 24) = v50;
      *(void *)(a5 + 32) = v51;
      *(void *)(a5 + 40) = 0;
      char v37 = 4;
    }
    else if ((sub_1004AC3DC(v9, 10) & 1) != 0 {
           && ([v9 value], (swift_dynamicCast() & 1) != 0))
    }
    {
      id v20 = v66;
      if (a2) {
        uint64_t v21 = sub_1004AC51C(a3, a4);
      }
      else {
        uint64_t v21 = BMRule.shortDescription.getter();
      }
      uint64_t v55 = v21;
      uint64_t v56 = v22;
      [a3 support:v66];
      uint64_t v58 = v57;
      uint64_t result = (uint64_t)[a3 confidence];
      *(void *)a5 = v20;
      *(void *)(a5 + 8) = v67;
      *(void *)(a5 + 16) = v58;
      *(void *)(a5 + 24) = v59;
      *(void *)(a5 + 32) = v55;
      *(void *)(a5 + 40) = v56;
      char v37 = 5;
    }
    else
    {
      uint64_t result = sub_1004AC3DC(v9, 11);
      if ((result & 1) != 0
        && ([v9 value],
            uint64_t result = swift_dynamicCast(),
            (result & 1) != 0))
      {
        if (a2) {
          uint64_t v30 = sub_1004AC51C(a3, a4);
        }
        else {
          uint64_t v30 = BMRule.shortDescription.getter();
        }
        uint64_t v60 = v30;
        uint64_t v61 = v31;
        type metadata accessor for REMSuggestedContact();
        swift_allocObject();
        uint64_t v62 = REMSuggestedContact.init(stringLiteral:)();
        [a3 support];
        uint64_t v64 = v63;
        uint64_t result = (uint64_t)[a3 confidence];
        *(void *)a5 = v62;
        *(void *)(a5 + 8) = v64;
        *(void *)(a5 + 16) = v65;
        *(void *)(a5 + 24) = v60;
        *(void *)(a5 + 32) = v61;
        *(void *)(a5 + 40) = 0;
        char v37 = 6;
      }
      else
      {
        *(_OWORD *)(a5 + 16) = 0u;
        *(_OWORD *)(a5 + 32) = 0u;
        *(_OWORD *)a5 = 0u;
        char v37 = -1;
      }
    }
    *(unsigned char *)(a5 + 48) = v37;
  }
  return result;
}

uint64_t sub_1004AC3DC(void *a1, char a2)
{
  id v3 = [a1 type];
  id v4 = [v3 identifier];

  if (v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v8 = (void *)sub_1004AFFEC(a2);
  id v9 = [v8 identifier];

  if (v9)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    if (v7)
    {
      if (v12)
      {
        if (v5 == v10 && v7 == v12)
        {
          swift_bridgeObjectRelease();
          char v13 = 1;
        }
        else
        {
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
        goto LABEL_16;
      }
      goto LABEL_11;
    }
    if (v12)
    {
      char v13 = 0;
      goto LABEL_16;
    }
  }
  else if (v7)
  {
LABEL_11:
    char v13 = 0;
LABEL_16:
    swift_bridgeObjectRelease();
    return v13 & 1;
  }
  char v13 = 1;
  return v13 & 1;
}

uint64_t sub_1004AC51C(void *a1, uint64_t a2)
{
  id v4 = [a1 antecedent];
  sub_100094134(&qword_1009148E0);
  sub_1000967F4(&qword_10091A8B0, &qword_1009148E0);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100094134(&qword_10091A8B8);
  sub_1000967F4(&qword_10091A8C0, &qword_10091A8B8);
  unint64_t v5 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1004B3980(v5, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v6 = [a1 consequent];
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v7 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1004B3980(v7, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100776E40;
  [a1 support];
  *(void *)(v8 + 56) = &type metadata for Double;
  *(void *)(v8 + 64) = &protocol witness table for Double;
  *(void *)(v8 + 32) = v9;
  uint64_t v32 = String.init(format:_:)();
  uint64_t v11 = v10;
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100776E40;
  [a1 confidence];
  *(void *)(v12 + 56) = &type metadata for Double;
  *(void *)(v12 + 64) = &protocol witness table for Double;
  *(void *)(v12 + 32) = v13;
  uint64_t v14 = String.init(format:_:)();
  uint64_t v16 = v15;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
  uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x5B203E3D205DLL;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x203A737B205DLL;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = v32;
  v27._object = v11;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 979574828;
  v28._object = (void *)0xE400000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = v14;
  v29._object = v16;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 125;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  return 91;
}

uint64_t BMRule.shortDescription.getter()
{
  uint64_t v1 = v0;
  id v2 = [v0 antecedent];
  sub_100094134(&qword_1009148E0);
  sub_1000967F4(&qword_10091A8B0, &qword_1009148E0);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100094134(&qword_10091A8B8);
  sub_1000967F4(&qword_10091A8C0, &qword_10091A8B8);
  unint64_t v3 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();
  if (v3 >> 62) {
    goto LABEL_35;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    unint64_t v49 = v3;
    uint64_t v51 = _swiftEmptyArrayStorage;
    unint64_t v3 = (unint64_t)&v51;
    sub_1001DE058(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
    {
      __break(1u);
LABEL_40:
      __break(1u);
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    uint64_t v48 = v1;
    uint64_t v5 = 0;
    id v6 = v51;
    unint64_t v7 = v49;
    uint64_t v1 = (void *)((char *)&type metadata for Swift.AnyObject + 8);
    while (v4 != v5)
    {
      if ((v49 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v7 + 8 * v5 + 32);
      }
      uint64_t v9 = v8;
      id v10 = [v8 type];
      id v11 = [v10 identifier];

      if (v11)
      {
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;
      }
      else
      {
        uint64_t v14 = (void *)0xE300000000000000;
        uint64_t v12 = 7104878;
      }
      v15._countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = 58;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      unint64_t v3 = (unint64_t)[v9 value];
      _print_unlocked<A, B>(_:_:)();

      swift_unknownObjectRelease();
      uint64_t v51 = v6;
      unint64_t v18 = v6[2];
      unint64_t v17 = v6[3];
      if (v18 >= v17 >> 1)
      {
        unint64_t v3 = (unint64_t)&v51;
        sub_1001DE058(v17 > 1, v18 + 1, 1);
        id v6 = v51;
      }
      ++v5;
      uint64_t v6[2] = v18 + 1;
      uint64_t v19 = &v6[2 * v18];
      v19[4] = 0;
      v19[5] = 0xE000000000000000;
      unint64_t v7 = v49;
      if (v4 == v5)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v48;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  id v6 = _swiftEmptyArrayStorage;
LABEL_18:
  id v20 = [v1 consequent];
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v21 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();
  if (!(v21 >> 62))
  {
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v22) {
      goto LABEL_37;
    }
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22)
  {
LABEL_20:
    uint64_t v51 = _swiftEmptyArrayStorage;
    unint64_t v3 = (unint64_t)&v51;
    sub_1001DE058(0, v22 & ~(v22 >> 63), 0);
    if (v22 < 0) {
      goto LABEL_40;
    }
    uint64_t v23 = 0;
    uint64_t v1 = v51;
    unint64_t v50 = v21 & 0xC000000000000001;
    unint64_t v24 = v21;
    while (v22 != v23)
    {
      if (v50) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v25 = *(id *)(v21 + 8 * v23 + 32);
      }
      Swift::String v26 = v25;
      id v27 = [v25 type];
      id v28 = [v27 identifier];

      if (v28)
      {
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v31 = v30;
      }
      else
      {
        uint64_t v31 = (void *)0xE300000000000000;
        uint64_t v29 = 7104878;
      }
      v32._countAndFlagsBits = v29;
      v32._object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._countAndFlagsBits = 58;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      unint64_t v3 = (unint64_t)[v26 value];
      _print_unlocked<A, B>(_:_:)();

      swift_unknownObjectRelease();
      uint64_t v51 = v1;
      unint64_t v35 = v1[2];
      unint64_t v34 = v1[3];
      if (v35 >= v34 >> 1)
      {
        unint64_t v3 = (unint64_t)&v51;
        sub_1001DE058(v34 > 1, v35 + 1, 1);
        uint64_t v1 = v51;
      }
      ++v23;
      v1[2] = v35 + 1;
      uint64_t v36 = &v1[2 * v35];
      v36[4] = 0;
      v36[5] = 0xE000000000000000;
      unint64_t v21 = v24;
      if (v22 == v23)
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
    }
    goto LABEL_34;
  }
LABEL_37:
  swift_bridgeObjectRelease();
  uint64_t v1 = _swiftEmptyArrayStorage;
LABEL_38:
  uint64_t v51 = v6;
  swift_bridgeObjectRetain();
  sub_1004AB9B4((uint64_t *)&v51);
  swift_bridgeObjectRelease();
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
  uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v39 = v38;
  swift_release();
  v40._countAndFlagsBits = v37;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 0x5B203E3D205DLL;
  v41._object = (void *)0xE600000000000000;
  String.append(_:)(v41);
  uint64_t v51 = v1;
  swift_bridgeObjectRetain();
  sub_1004AB9B4((uint64_t *)&v51);
  swift_bridgeObjectRelease();
  uint64_t v42 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v44 = v43;
  swift_release();
  v45._countAndFlagsBits = v42;
  v45._object = v44;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = 93;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  return 91;
}

unint64_t *sub_1004AD008(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v127 = a1;
  unint64_t v129 = *v5;
  uint64_t v123 = sub_100094134(&qword_100911F18);
  uint64_t v10 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v125 = *(void *)(v11 - 8);
  uint64_t v126 = v11;
  __chkstk_darwin(v11);
  v122 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v124 = (char *)&v113 - v14;
  *(unint64_t *)((char *)v5 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_behaviorRetriever) = 0;
  Class isa = (Class)&off_10091A000;
  *(unint64_t *)((char *)v5 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer) = 0;
  *(unint64_t *)((char *)v5 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackVersion) = 1;
  v128 = v5;
  *(unint64_t *)((char *)v5 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules) = (unint64_t)_swiftEmptyDictionarySingleton;
  sub_1000963CC(0, (unint64_t *)&unk_10091AA90);
  if ([(id)swift_getObjCClassFromMetadata() respondsToSelector:"supportsTaskSpecificEvents"]&& objc_msgSend(self, "supportsTaskSpecificEvents"))
  {
    if (a5) {
      double v16 = 0.5;
    }
    else {
      double v16 = *(double *)&a4;
    }
    if (a3) {
      double v17 = 0.003;
    }
    else {
      double v17 = *(double *)&a2;
    }
    uint64_t v19 = v127;
    unint64_t v18 = v128;
    *(double *)((char *)v128 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_confidenceThreshold) = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 16))((uint64_t)v18 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_baseUrl, v19, v126);
    URL.appendingPathComponent(_:)();
    uint64_t v115 = sub_1000963CC(0, &qword_1009100C0);
    OrderedDictionary.init()();
    id v20 = *(void (**)(void))(v10 + 32);
    uint64_t v119 = (uint64_t)v18 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules;
    v20();
    uint64_t v21 = sub_1004B3D58();
    id v22 = objc_allocWithZone((Class)BMBehaviorRetriever);
    URL._bridgeToObjectiveC()(v23);
    id v25 = v24;
    sub_100094134(&qword_10090B790);
    sub_1000967F4(&qword_10091AAA0, &qword_10090B790);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v26 = [v22 initWithURL:v25 taskSpecificItemTypes:isa];

    id v117 = v26;
    if (v26)
    {
      URL.appendingPathComponent(_:)();
      uint64_t v27 = v121;
      uint64_t v28 = Data.init(contentsOf:options:)();
      if (v27)
      {
        swift_errorRelease();
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v21 = v28;
        unint64_t v48 = v29;
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        sub_1004B6CE4();
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        uint64_t v30 = 0;
        swift_release();
        unint64_t v49 = v133;
        uint64_t v50 = swift_bridgeObjectRetain();
        uint64_t v51 = sub_1004B3C94(v50, v49, 1uLL);
        sub_100097F34(v21, v48);
        swift_bridgeObjectRelease_n();
        uint64_t v52 = (uint64_t *)((char *)v128 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules);
        swift_beginAccess();
        *uint64_t v52 = v51;
        swift_bridgeObjectRelease();
      }
      id v53 = [v117 retrieveRulesWithSupport:0 confidence:v17 filters:v16];
      unint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v134 = (uint64_t)_swiftEmptyArrayStorage;
      if (v54 >> 62)
      {
LABEL_99:
        swift_bridgeObjectRetain();
        uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v55 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v118 = v55;
      if (v55)
      {
        uint64_t v114 = v30;
        unint64_t v56 = 0;
        uint64_t v21 = (uint64_t)v128 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules;
        unint64_t v129 = v54 & 0xC000000000000001;
        uint64_t v121 = v54 & 0xFFFFFFFFFFFFFF8;
        unint64_t v120 = v54 + 32;
        uint64_t v30 = v118;
        unint64_t v116 = v54;
        while (1)
        {
          if (v129)
          {
            id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v56 >= *(void *)(v121 + 16)) {
              goto LABEL_96;
            }
            id v57 = *(id *)(v120 + 8 * v56);
          }
          uint64_t v58 = v57;
          BOOL v59 = __OFADD__(v56++, 1);
          if (v59)
          {
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
            goto LABEL_97;
          }
          uint64_t v60 = BMRule.shortDescription.getter();
          Class isa = v61;
          swift_beginAccess();
          uint64_t v62 = *(void *)v21;
          if (!*(void *)(*(void *)v21 + 16) || (unint64_t v63 = sub_1001806F8(v60, (uint64_t)isa), (v64 & 1) == 0))
          {
            swift_bridgeObjectRelease();
            swift_endAccess();
            Class isa = v58;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            goto LABEL_30;
          }
          uint64_t v65 = *(void *)(*(void *)(v62 + 56) + 8 * v63);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          [v58 confidence];
          double v67 = v66;
          int64_t v68 = 0;
          uint64_t v69 = v65 + 64;
          uint64_t v70 = 1 << *(unsigned char *)(v65 + 32);
          if (v70 < 64) {
            uint64_t v71 = ~(-1 << v70);
          }
          else {
            uint64_t v71 = -1;
          }
          unint64_t v72 = v71 & *(void *)(v65 + 64);
          int64_t v73 = (unint64_t)(v70 + 63) >> 6;
          for (double i = 0.0; ; double i = i + *(double *)(*(void *)(v65 + 56) + 8 * v76))
          {
            if (v72)
            {
              unint64_t v75 = __clz(__rbit64(v72));
              v72 &= v72 - 1;
              unint64_t v76 = v75 | (v68 << 6);
              continue;
            }
            BOOL v59 = __OFADD__(v68++, 1);
            if (v59)
            {
              __break(1u);
              goto LABEL_95;
            }
            if (v68 >= v73) {
              break;
            }
            unint64_t v77 = *(void *)(v69 + 8 * v68);
            if (!v77)
            {
              int64_t v78 = v68 + 1;
              if (v68 + 1 >= v73) {
                break;
              }
              unint64_t v77 = *(void *)(v69 + 8 * v78);
              if (!v77)
              {
                int64_t v78 = v68 + 2;
                if (v68 + 2 >= v73) {
                  break;
                }
                unint64_t v77 = *(void *)(v69 + 8 * v78);
                if (!v77)
                {
                  int64_t v78 = v68 + 3;
                  if (v68 + 3 >= v73) {
                    break;
                  }
                  unint64_t v77 = *(void *)(v69 + 8 * v78);
                  if (!v77)
                  {
                    int64_t v78 = v68 + 4;
                    if (v68 + 4 >= v73) {
                      break;
                    }
                    unint64_t v77 = *(void *)(v69 + 8 * v78);
                    if (!v77)
                    {
                      int64_t v78 = v68 + 5;
                      if (v68 + 5 >= v73) {
                        break;
                      }
                      unint64_t v77 = *(void *)(v69 + 8 * v78);
                      if (!v77)
                      {
                        while (1)
                        {
                          int64_t v68 = v78 + 1;
                          if (__OFADD__(v78, 1)) {
                            break;
                          }
                          if (v68 >= v73) {
                            goto LABEL_65;
                          }
                          unint64_t v77 = *(void *)(v69 + 8 * v68);
                          ++v78;
                          if (v77) {
                            goto LABEL_60;
                          }
                        }
                        __break(1u);
                        goto LABEL_99;
                      }
                    }
                  }
                }
              }
              int64_t v68 = v78;
            }
LABEL_60:
            unint64_t v79 = __clz(__rbit64(v77));
            unint64_t v72 = (v77 - 1) & v77;
            unint64_t v76 = v79 + (v68 << 6);
          }
LABEL_65:
          swift_release();
          double v80 = v67 + i;
          if (v16 >= v80) {
            goto LABEL_31;
          }
          id v81 = [v58 antecedent];
          sub_100094134(&qword_1009148E0);
          sub_1000967F4(&qword_10091A8B0, &qword_1009148E0);
          static Set._unconditionallyBridgeFromObjectiveC(_:)();

          id v82 = [v58 consequent];
          static Set._unconditionallyBridgeFromObjectiveC(_:)();

          [v58 support];
          double v84 = v83;
          id v85 = objc_allocWithZone((Class)BMRule);
          Class v86 = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          Class v87 = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          Class isa = (Class)[v85 initWithAntecedent:v86 consequent:v87 support:v84 confidence:v80];

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          unint64_t v54 = v116;
          uint64_t v30 = v118;
LABEL_30:
          specialized Array._endMutation()();
LABEL_31:

          if (v56 == v30)
          {
            swift_bridgeObjectRelease();
            uint64_t v88 = v134;
            uint64_t v30 = v114;
            if ((v134 & 0x8000000000000000) == 0) {
              goto LABEL_72;
            }
            goto LABEL_109;
          }
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v88 = (uint64_t)_swiftEmptyArrayStorage;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0)
      {
LABEL_72:
        if ((v88 & 0x4000000000000000) == 0)
        {
          unint64_t v89 = v88 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          goto LABEL_74;
        }
      }
LABEL_109:
      while (1)
      {
        unint64_t v112 = swift_bridgeObjectRetain();
        unint64_t v89 = (unint64_t)sub_10020B1DC(v112);
        swift_bridgeObjectRelease();
LABEL_74:
        unint64_t v133 = v89;
        sub_1004ABA20((uint64_t *)&v133);
        if (v30) {
          goto LABEL_112;
        }
        swift_bridgeObjectRelease();
        uint64_t v21 = v133;
        uint64_t v30 = (v133 & 0x8000000000000000) != 0 || (v133 >> 62) & 1;
        if (v30 != 1) {
          break;
        }
        swift_bridgeObjectRetain();
        uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        swift_bridgeObjectRetain();
        uint64_t v109 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (v109 < 0) {
          goto LABEL_111;
        }
        if (v88 >= 200) {
          uint64_t v110 = 200;
        }
        else {
          uint64_t v110 = v88;
        }
        if (v88 >= 0) {
          uint64_t v88 = v110;
        }
        else {
          uint64_t v88 = 200;
        }
        swift_bridgeObjectRetain();
        uint64_t v111 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (v111 >= v88) {
          goto LABEL_113;
        }
        __break(1u);
      }
      if (*(uint64_t *)(v133 + 16) >= 200) {
        uint64_t v88 = 200;
      }
      else {
        uint64_t v88 = *(void *)(v133 + 16);
      }
      if ((v133 & 0xC000000000000001) == 0) {
        goto LABEL_86;
      }
LABEL_83:
      if (v88)
      {
        Swift::Int v90 = 0;
        do
        {
          Swift::Int v91 = v90 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v90);
          Swift::Int v90 = v91;
        }
        while (v88 != v91);
      }
LABEL_86:
      while (1)
      {
        if (v30)
        {
          swift_bridgeObjectRetain();
          uint64_t v92 = _CocoaArrayWrapper.subscript.getter();
          uint64_t v94 = v93;
          uint64_t v96 = v95;
          unint64_t v98 = v97;
          swift_release_n();
          uint64_t v88 = v98 >> 1;
          uint64_t v21 = v92;
        }
        else
        {
          uint64_t v96 = 0;
          uint64_t v94 = v21 + 32;
        }
        uint64_t v99 = v88 - v96;
        if (v88 == v96) {
          break;
        }
        if (v88 > v96)
        {
          os_log_type_t v100 = (void **)(v94 + 8 * v96);
          do
          {
            v101 = *v100++;
            id v102 = v101;
            uint64_t v103 = BMRule.shortDescription.getter();
            uint64_t v131 = v104;
            id v132 = v102;
            uint64_t v130 = v103;
            swift_beginAccess();
            id v105 = v102;
            OrderedDictionary.subscript.setter();
            swift_endAccess();

            --v99;
          }
          while (v99);
          break;
        }
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        swift_release();
        __break(1u);
LABEL_113:
        if ((v21 & 0xC000000000000001) != 0) {
          goto LABEL_83;
        }
      }
      uint64_t v106 = v126;
      uint64_t v107 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
      v107(v127, v126);
      swift_unknownObjectRelease();
      v107((uint64_t)v122, v106);
      v107((uint64_t)v124, v106);
      uint64_t v36 = v128;
      unint64_t v108 = *(void **)((char *)v128 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_behaviorRetriever);
      *(unint64_t *)((char *)v128 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_behaviorRetriever) = (unint64_t)v117;

      *((unsigned char *)v36 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_trained) = 1;
    }
    else
    {
      if (qword_100907690 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      sub_10008E2DC(v41, (uint64_t)qword_10091A890);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      BOOL v44 = os_log_type_enabled(v42, v43);
      uint64_t v36 = v128;
      if (v44)
      {
        Swift::String v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "RDCoreBehaviorModel: No existing CoreBehavior", v45, 2u);
        swift_slowDealloc();
      }

      uint64_t v46 = v126;
      uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
      v47(v127, v126);
      v47((uint64_t)v124, v46);
      *((unsigned char *)v36 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_trained) = 0;
    }
  }
  else
  {
    if (qword_100907690 != -1) {
LABEL_97:
    }
      swift_once();
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E2DC(v31, (uint64_t)qword_10091A890);
    Swift::String v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.fault.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = v127;
    uint64_t v36 = v128;
    if (v34)
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDCoreBehaviorModel: CoreBehavior is not up to date", v37, 2u);
      swift_slowDealloc();
    }

    uint64_t v38 = self;
    NSString v39 = String._bridgeToObjectiveC()();
    [v38 internalErrorWithDebugDescription:v39];

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v35, v126);

    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  return v36;
}

uint64_t sub_1004ADF28()
{
  uint64_t v1 = v0;
  if (qword_100907690 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091A890);
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RDCoreBehaviorModel: deinit", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer;
  unint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer);
  *(void *)(v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer) = 0;

  uint64_t v8 = v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_baseUrl;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

  swift_bridgeObjectRelease();
  uint64_t v10 = v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules;
  uint64_t v11 = sub_100094134(&qword_100911F18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  return v1;
}

uint64_t sub_1004AE0D0()
{
  sub_1004ADF28();

  return swift_deallocClassInstance();
}

void sub_1004AE128(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v38 = a3;
  NSString v39 = a4;
  uint64_t v43 = a1;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v37 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v42 = self;
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v17 + v12, v10, v37);
  uint64_t v19 = v38;
  unint64_t v18 = v39;
  *(void *)(v17 + v13) = v38;
  *(void *)(v17 + v14) = v11;
  *(void *)(v17 + v15) = v18;
  uint64_t v20 = v41;
  *(void *)(v17 + v16) = v40;
  *(void *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8)) = v20;
  aBlock[4] = sub_1004B714C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AE934;
  aBlock[3] = &unk_1008C7AB0;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  id v22 = v19;
  uint64_t v23 = v18;
  swift_release();
  id v24 = [v42 scheduledTimerWithTimeInterval:1 repeats:v21 block:60.0];
  _Block_release(v21);
  uint64_t v25 = OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer;
  uint64_t v26 = v43;
  uint64_t v27 = *(void **)(v43 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer);
  *(void *)(v43 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer) = v24;
  uint64_t v28 = v26;

  unint64_t v29 = *(void **)(v28 + v25);
  uint64_t v30 = *(void **)&v23[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer];
  *(void *)&v23[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer] = v29;
  id v31 = v29;

  if (qword_100907690 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_10008E2DC(v32, (uint64_t)qword_10091A890);
  os_log_type_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "RDCoreBehaviorModel: CoreBehavior mining task timer set", v35, 2u);
    swift_slowDealloc();
  }
}

void sub_1004AE47C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v15 = v14;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_100907690 != -1) {
    swift_once();
  }
  uint64_t v16 = a4 + 16;
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_10091A890);
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v38 = a3;
    v40[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v22 = Double.description.getter();
    uint64_t v37 = v16;
    uint64_t v39 = sub_1000C51B8(v22, v23, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDCoreBehaviorModel: CoreBehavior mining task has run %s seconds", v20, 0xCu);
    swift_arrayDestroy();
    a3 = v38;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (v15 >= 600.0)
  {
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "RDCoreBehaviorModel: CoreBehavior mining task terminating early due to time out", v32, 2u);
      swift_slowDealloc();
    }

    [a3 terminateEarly];
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      id v34 = *(id *)(Strong + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer);
      swift_release();
      [v34 invalidate];
    }
    swift_beginAccess();
    uint64_t v29 = swift_weakLoadStrong();
    if (!v29) {
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v35 = *(void **)(v29 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer);
    *(void *)(v29 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer) = 0;
    swift_release();

LABEL_20:
    uint64_t v36 = *(void **)(a5 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer);
    *(void *)(a5 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer) = 0;

    return;
  }
  if (a6 && *(unsigned char *)(a6 + 17) == 1)
  {
    swift_retain();
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "RDCoreBehaviorModel: CoreBehavior mining task terminating early due to shouldDefer is true", v26, 2u);
      swift_slowDealloc();
    }

    [a3 terminateEarly];
    swift_beginAccess();
    uint64_t v27 = swift_weakLoadStrong();
    if (v27)
    {
      id v28 = *(id *)(v27 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer);
      swift_release();
      [v28 invalidate];
    }
    swift_beginAccess();
    uint64_t v29 = swift_weakLoadStrong();
    swift_release();
    if (!v29) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
}

void sub_1004AE934(uint64_t a1, void *a2)
{
  unint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void *sub_1004AE99C(uint64_t a1, uint64_t a2)
{
  uint64_t v135 = a1;
  uint64_t v121 = sub_100094134(&qword_10091AAC0);
  uint64_t v115 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v122 = (uint64_t)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_100094134(&qword_10091AAC8);
  uint64_t v114 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v5 = (char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_100094134(&qword_10091AAD0);
  uint64_t v113 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v7 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_100094134(&qword_10091AAD8);
  uint64_t v112 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v9 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_100094134(&qword_10091AAE0);
  uint64_t v111 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v11 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_100094134(&qword_10091AAE8);
  uint64_t v110 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  unint64_t v13 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for REMSuggestedLocation();
  sub_100094134(&qword_10091AAF0);
  sub_1004B6D38(&qword_10091AAF8, (void (*)(uint64_t))&type metadata accessor for REMSuggestedLocation);
  OrderedDictionary.init()();
  type metadata accessor for REMSuggestedWeekDay();
  sub_1004B6D38(&qword_10091AB00, (void (*)(uint64_t))&type metadata accessor for REMSuggestedWeekDay);
  OrderedDictionary.init()();
  type metadata accessor for REMSuggestedList();
  sub_1004B6D38(&qword_10091AB08, (void (*)(uint64_t))&type metadata accessor for REMSuggestedList);
  OrderedDictionary.init()();
  OrderedDictionary.init()();
  uint64_t v119 = v5;
  OrderedDictionary.init()();
  type metadata accessor for REMSuggestedContact();
  sub_1004B6D38(&qword_10091AB10, (void (*)(uint64_t))&type metadata accessor for REMSuggestedContact);
  OrderedDictionary.init()();
  uint64_t v14 = *(void *)(a2 + 16);
  v137 = v9;
  id v132 = v7;
  uint64_t v131 = v11;
  uint64_t v130 = v13;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v128 = 0;
    uint64_t v127 = 0;
    uint64_t v126 = 0;
    uint64_t v125 = 0;
    uint64_t v124 = 0;
    uint64_t v123 = 0;
    uint64_t v109 = a2;
    double v15 = (unsigned __int8 *)(a2 + 80);
    int v129 = 255;
    uint64_t v16 = (uint64_t)v7;
    while (2)
    {
      uint64_t v138 = v14;
      uint64_t v20 = *((void *)v15 - 6);
      uint64_t v21 = *((uint64_t *)v15 - 5);
      uint64_t v23 = *((uint64_t *)v15 - 4);
      uint64_t v22 = *((void *)v15 - 3);
      uint64_t v25 = *((void *)v15 - 2);
      uint64_t v24 = *((void *)v15 - 1);
      int v26 = *v15;
      v15 += 56;
      switch(v26)
      {
        case 1:
          uint64_t v143 = v20;
          uint64_t v32 = v22;
          uint64_t v136 = v24;
          sub_10028742C(v20, v21, v23, v22, v25, v24, 1);
          sub_1000967F4(&qword_10091AB40, &qword_10091AAE8);
          swift_retain();
          dispatch thunk of Collection.startIndex.getter();
          dispatch thunk of Collection.endIndex.getter();
          uint64_t v33 = dispatch thunk of Collection.distance(from:to:)();
          uint64_t v141 = v20;
          if (v33 < v135)
          {
            OrderedDictionary.subscript.getter();
            uint64_t v34 = v152;
            swift_bridgeObjectRelease();
            if (!v34)
            {
              uint64_t v139 = v20;
              v149 = (void *)v21;
              uint64_t v150 = v23;
              uint64_t v151 = v32;
              uint64_t v152 = v25;
              swift_retain();
              swift_bridgeObjectRetain();
              OrderedDictionary.subscript.setter();
              uint64_t v77 = v20;
              uint64_t v78 = v21;
              uint64_t v79 = v23;
              uint64_t v80 = v32;
              uint64_t v81 = v25;
              uint64_t v82 = v136;
              char v83 = 1;
              goto LABEL_60;
            }
          }
          OrderedDictionary.subscript.getter();
          uint64_t v9 = v137;
          if (v152)
          {
            double v36 = *(double *)&v149;
            double v35 = *(double *)&v150;
            swift_bridgeObjectRelease();
            if (v36 < *(double *)&v21 || v36 == *(double *)&v21 && v35 < *(double *)&v23)
            {
              uint64_t v139 = v20;
              v149 = (void *)v21;
              uint64_t v150 = v23;
              uint64_t v151 = v32;
              uint64_t v152 = v25;
              swift_retain();
              swift_bridgeObjectRetain();
              OrderedDictionary.subscript.setter();
            }
          }
          uint64_t v37 = v20;
          uint64_t v38 = v21;
          uint64_t v39 = v23;
          uint64_t v40 = v32;
          uint64_t v41 = v25;
          uint64_t v42 = v136;
          char v43 = 1;
          goto LABEL_54;
        case 2:
          uint64_t v143 = v20;
          uint64_t v44 = v22;
          uint64_t v136 = v24;
          sub_10028742C(v20, v21, v23, v22, v25, v24, 2);
          sub_1000967F4(&qword_10091AB38, &qword_10091AAE0);
          swift_retain();
          dispatch thunk of Collection.startIndex.getter();
          dispatch thunk of Collection.endIndex.getter();
          uint64_t v45 = dispatch thunk of Collection.distance(from:to:)();
          uint64_t v141 = v20;
          if (v45 >= v135 || (OrderedDictionary.subscript.getter(), uint64_t v46 = v152, swift_bridgeObjectRelease(), v46))
          {
            OrderedDictionary.subscript.getter();
            uint64_t v9 = v137;
            if (v152)
            {
              double v48 = *(double *)&v149;
              double v47 = *(double *)&v150;
              swift_bridgeObjectRelease();
              if (v48 < *(double *)&v21 || v48 == *(double *)&v21 && v47 < *(double *)&v23)
              {
                uint64_t v139 = v20;
                v149 = (void *)v21;
                uint64_t v150 = v23;
                uint64_t v151 = v44;
                uint64_t v152 = v25;
                swift_retain();
                swift_bridgeObjectRetain();
                OrderedDictionary.subscript.setter();
              }
            }
            uint64_t v37 = v20;
            uint64_t v38 = v21;
            uint64_t v39 = v23;
            uint64_t v40 = v44;
            uint64_t v41 = v25;
            uint64_t v42 = v136;
            char v43 = 2;
            goto LABEL_54;
          }
          uint64_t v139 = v20;
          v149 = (void *)v21;
          uint64_t v150 = v23;
          uint64_t v151 = v44;
          uint64_t v152 = v25;
          swift_retain();
          swift_bridgeObjectRetain();
          OrderedDictionary.subscript.setter();
          uint64_t v77 = v20;
          uint64_t v78 = v21;
          uint64_t v79 = v23;
          uint64_t v80 = v44;
          uint64_t v81 = v25;
          uint64_t v82 = v136;
          char v83 = 2;
LABEL_60:
          sub_1002874C8(v77, v78, v79, v80, v81, v82, v83);
          swift_release();
          goto LABEL_64;
        case 3:
          uint64_t v17 = v9;
          uint64_t v18 = v16;
          uint64_t v19 = v22;
          swift_bridgeObjectRetain();
          sub_1004B6D80(v128, v127, v126, v125, v124, v123, v129);
          int v129 = 3;
          uint64_t v128 = v20;
          uint64_t v127 = v21;
          uint64_t v126 = v23;
          uint64_t v125 = v19;
          uint64_t v16 = v18;
          uint64_t v9 = v17;
          uint64_t v124 = v25;
          uint64_t v123 = v24;
          goto LABEL_4;
        case 4:
          uint64_t v134 = v22;
          uint64_t v136 = v24;
          uint64_t v143 = v20;
          sub_1000967F4(&qword_10091AB28, &qword_10091AAD0);
          swift_bridgeObjectRetain();
          dispatch thunk of Collection.startIndex.getter();
          dispatch thunk of Collection.endIndex.getter();
          uint64_t v49 = dispatch thunk of Collection.distance(from:to:)();
          uint64_t v141 = v20;
          if (v49 < v135)
          {
            OrderedDictionary.subscript.getter();
            uint64_t v50 = v152;
            swift_bridgeObjectRelease();
            if (!v50)
            {
              uint64_t v139 = v20;
              v149 = (void *)v21;
              uint64_t v150 = v23;
              uint64_t v151 = v134;
              uint64_t v152 = v25;
              OrderedDictionary.subscript.setter();
              goto LABEL_70;
            }
          }
          OrderedDictionary.subscript.getter();
          uint64_t v9 = v137;
          if (v152
            && ((v52 = *(double *)&v149, double v51 = *(double *)&v150, swift_bridgeObjectRelease(), v52 < *(double *)&v21)
             || v52 == *(double *)&v21 && v51 < *(double *)&v23))
          {
            uint64_t v139 = v20;
            v149 = (void *)v21;
            uint64_t v150 = v23;
            uint64_t v151 = v134;
            uint64_t v152 = v25;
            OrderedDictionary.subscript.setter();
          }
          else
          {
            sub_1002874C8(v20, v21, v23, v134, v25, v136, 4);
          }
          goto LABEL_4;
        case 5:
          uint64_t v143 = v20;
          uint64_t v144 = v21;
          uint64_t v134 = v22;
          sub_10028742C(v20, v21, v23, v22, v25, v24, 5);
          sub_1000967F4(&qword_10091AB20, &qword_10091AAC8);
          swift_bridgeObjectRetain();
          dispatch thunk of Collection.startIndex.getter();
          dispatch thunk of Collection.endIndex.getter();
          uint64_t v53 = dispatch thunk of Collection.distance(from:to:)();
          uint64_t v141 = v20;
          uint64_t v142 = v21;
          if (v53 >= v135 || (OrderedDictionary.subscript.getter(), uint64_t v54 = v152, swift_bridgeObjectRelease(), v54))
          {
            OrderedDictionary.subscript.getter();
            if (v152)
            {
              double v56 = *(double *)&v149;
              double v55 = *(double *)&v150;
              swift_bridgeObjectRelease();
              uint64_t v16 = (uint64_t)v132;
              uint64_t v57 = v134;
              if (v56 < *(double *)&v23 || v56 == *(double *)&v23 && v55 < *(double *)&v134)
              {
                uint64_t v139 = v20;
                uint64_t v140 = v21;
                v149 = (void *)v23;
                uint64_t v150 = v134;
                uint64_t v151 = v25;
                uint64_t v152 = v24;
                uint64_t v58 = (uint64_t)v132;
                uint64_t v59 = v134;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                OrderedDictionary.subscript.setter();
                uint64_t v60 = v20;
                uint64_t v61 = v21;
                uint64_t v62 = v23;
                uint64_t v57 = v59;
                uint64_t v16 = v58;
              }
              else
              {
                uint64_t v60 = v20;
                uint64_t v61 = v21;
                uint64_t v62 = v23;
              }
              sub_1002874C8(v60, v61, v62, v57, v25, v24, 5);
              swift_bridgeObjectRelease();
              goto LABEL_70;
            }
            uint64_t v73 = v20;
            uint64_t v74 = v21;
            uint64_t v75 = v23;
            uint64_t v76 = v134;
          }
          else
          {
            uint64_t v139 = v20;
            uint64_t v140 = v21;
            uint64_t v84 = v134;
            v149 = (void *)v23;
            uint64_t v150 = v134;
            uint64_t v151 = v25;
            uint64_t v152 = v24;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            OrderedDictionary.subscript.setter();
            uint64_t v73 = v20;
            uint64_t v74 = v21;
            uint64_t v75 = v23;
            uint64_t v76 = v84;
          }
          sub_1002874C8(v73, v74, v75, v76, v25, v24, 5);
          swift_bridgeObjectRelease();
LABEL_64:
          uint64_t v9 = v137;
          goto LABEL_65;
        case 6:
          uint64_t v143 = v20;
          uint64_t v134 = v22;
          uint64_t v136 = v24;
          sub_10028742C(v20, v21, v23, v22, v25, v24, 6);
          sub_1000967F4(&qword_10091AB18, &qword_10091AAC0);
          swift_retain();
          dispatch thunk of Collection.startIndex.getter();
          dispatch thunk of Collection.endIndex.getter();
          uint64_t v63 = dispatch thunk of Collection.distance(from:to:)();
          uint64_t v141 = v20;
          if (v63 >= v135 || (OrderedDictionary.subscript.getter(), uint64_t v64 = v152, swift_bridgeObjectRelease(), v64))
          {
            OrderedDictionary.subscript.getter();
            uint64_t v9 = v137;
            if (v152)
            {
              double v66 = *(double *)&v149;
              double v65 = *(double *)&v150;
              swift_bridgeObjectRelease();
              uint64_t v16 = (uint64_t)v132;
              if (v66 < *(double *)&v21 || v66 == *(double *)&v21 && v65 < *(double *)&v23)
              {
                uint64_t v139 = v20;
                v149 = (void *)v21;
                uint64_t v150 = v23;
                uint64_t v67 = (uint64_t)v132;
                uint64_t v68 = v134;
                uint64_t v151 = v134;
                uint64_t v152 = v25;
                swift_retain();
                swift_bridgeObjectRetain();
                OrderedDictionary.subscript.setter();
                uint64_t v69 = v20;
                uint64_t v70 = v21;
                uint64_t v71 = v23;
                uint64_t v72 = v68;
                uint64_t v16 = v67;
                uint64_t v9 = v137;
              }
              else
              {
                uint64_t v69 = v20;
                uint64_t v70 = v21;
                uint64_t v71 = v23;
                uint64_t v72 = v134;
              }
              sub_1002874C8(v69, v70, v71, v72, v25, v136, 6);
              swift_release();
            }
            else
            {
              uint64_t v37 = v20;
              uint64_t v38 = v21;
              uint64_t v39 = v23;
              uint64_t v40 = v134;
              uint64_t v41 = v25;
              uint64_t v42 = v136;
              char v43 = 6;
LABEL_54:
              sub_1002874C8(v37, v38, v39, v40, v41, v42, v43);
              swift_release();
LABEL_65:
              uint64_t v16 = (uint64_t)v132;
            }
          }
          else
          {
            uint64_t v139 = v20;
            v149 = (void *)v21;
            uint64_t v150 = v23;
            uint64_t v85 = v134;
            uint64_t v151 = v134;
            uint64_t v152 = v25;
            swift_retain();
            swift_bridgeObjectRetain();
            OrderedDictionary.subscript.setter();
            sub_1002874C8(v20, v21, v23, v85, v25, v136, 6);
            swift_release();
            uint64_t v16 = (uint64_t)v132;
LABEL_70:
            uint64_t v9 = v137;
          }
          goto LABEL_4;
        default:
          uint64_t v143 = v20;
          uint64_t v27 = v22;
          uint64_t v136 = v24;
          sub_10028742C(v20, v21, v23, v22, v25, v24, 0);
          sub_1000967F4(&qword_10091AB30, &qword_10091AAD8);
          swift_retain();
          dispatch thunk of Collection.startIndex.getter();
          dispatch thunk of Collection.endIndex.getter();
          uint64_t v9 = v137;
          uint64_t v28 = dispatch thunk of Collection.distance(from:to:)();
          uint64_t v141 = v20;
          if (v28 >= v135 || (OrderedDictionary.subscript.getter(), uint64_t v29 = v152, swift_bridgeObjectRelease(), v29))
          {
            OrderedDictionary.subscript.getter();
            if (!v152
              || (v31 = *(double *)&v149, double v30 = *(double *)&v150, swift_bridgeObjectRelease(), v31 >= *(double *)&v21)
              && (v31 != *(double *)&v21 || v30 >= *(double *)&v23))
            {
              sub_1002874C8(v20, v21, v23, v27, v25, v136, 0);
              swift_release();
              uint64_t v9 = v137;
              goto LABEL_57;
            }
            uint64_t v139 = v20;
            v149 = (void *)v21;
            uint64_t v150 = v23;
            uint64_t v151 = v27;
            uint64_t v152 = v25;
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v9 = v137;
          }
          else
          {
            uint64_t v139 = v20;
            v149 = (void *)v21;
            uint64_t v150 = v23;
            uint64_t v151 = v27;
            uint64_t v152 = v25;
            swift_retain();
            swift_bridgeObjectRetain();
          }
          OrderedDictionary.subscript.setter();
          sub_1002874C8(v20, v21, v23, v27, v25, v136, 0);
          swift_release();
LABEL_57:
          uint64_t v16 = (uint64_t)v132;
LABEL_4:
          uint64_t v14 = v138 - 1;
          if (v138 != 1) {
            continue;
          }
          swift_bridgeObjectRelease();
          int v86 = v129;
          break;
      }
      break;
    }
  }
  else
  {
    uint64_t v128 = 0;
    uint64_t v127 = 0;
    uint64_t v126 = 0;
    uint64_t v125 = 0;
    uint64_t v124 = 0;
    uint64_t v123 = 0;
    int v86 = 255;
    uint64_t v16 = (uint64_t)v7;
  }
  v149 = _swiftEmptyArrayStorage;
  uint64_t v87 = sub_1004A8824((uint64_t)v130, (uint64_t)v148, &qword_10091AAE8, &qword_10091AB40, 1);
  sub_1002031B0(v87);
  uint64_t v88 = sub_1004A8824((uint64_t)v131, (uint64_t)v147, &qword_10091AAE0, &qword_10091AB38, 2);
  sub_1002031B0(v88);
  uint64_t v89 = sub_1004A8824((uint64_t)v9, (uint64_t)v146, &qword_10091AAD8, &qword_10091AB30, 0);
  sub_1002031B0(v89);
  uint64_t v90 = sub_1004A89F4(v16);
  sub_1002031B0(v90);
  Swift::Int v91 = v119;
  uint64_t v92 = v128;
  uint64_t v93 = v127;
  uint64_t v94 = v126;
  uint64_t v95 = v125;
  uint64_t v96 = v124;
  uint64_t v97 = v123;
  int v129 = v86;
  if ((_BYTE)v86 != 0xFF)
  {
    char v98 = v86;
    uint64_t v99 = v149;
    sub_10028742C(v128, v127, v126, v125, v124, v123, v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v99 = sub_10030B338(0, v99[2] + 1, 1, v99);
    }
    unint64_t v101 = v99[2];
    unint64_t v100 = v99[3];
    uint64_t v102 = v128;
    uint64_t v93 = v127;
    uint64_t v94 = v126;
    if (v101 >= v100 >> 1)
    {
      unint64_t v108 = sub_10030B338((void *)(v100 > 1), v101 + 1, 1, v99);
      uint64_t v94 = v126;
      uint64_t v93 = v127;
      uint64_t v102 = v128;
      uint64_t v99 = v108;
    }
    v99[2] = v101 + 1;
    uint64_t v103 = &v99[7 * v101];
    v103[4] = v102;
    v103[5] = v93;
    uint64_t v95 = v125;
    v103[6] = v94;
    v103[7] = v95;
    uint64_t v96 = v124;
    uint64_t v97 = v123;
    v103[8] = v124;
    v103[9] = v97;
    *((unsigned char *)v103 + 80) = v129;
    v149 = v99;
    uint64_t v92 = v102;
  }
  uint64_t v104 = sub_1004A8BC4();
  sub_1002031B0(v104);
  uint64_t v105 = v122;
  uint64_t v106 = sub_1004A8824(v122, (uint64_t)v145, &qword_10091AAC0, &qword_10091AB18, 6);
  sub_1002031B0(v106);
  sub_1004B6D80(v92, v93, v94, v95, v96, v97, v129);
  (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v105, v121);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v91, v120);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v132, v118);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v137, v133);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v131, v117);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v130, v116);
  return v149;
}

uint64_t sub_1004AFFEC(char a1)
{
  uint64_t v1 = &selRef_hourOfDay;
  switch(a1)
  {
    case 1:
      uint64_t v1 = &selRef_dayOfWeek;
      goto LABEL_11;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_10;
    case 4:
      goto LABEL_5;
    case 5:
      goto LABEL_16;
    case 6:
      goto LABEL_18;
    case 7:
      uint64_t v12 = self;
      NSString v13 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      id v14 = [v12 taskSpecificItemWithIdentifier:v13 valueClass:swift_getObjCClassFromMetadata()];

      if (v14) {
        goto LABEL_12;
      }
      __break(1u);
LABEL_16:
      double v15 = self;
      NSString v16 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      id v17 = [v15 taskSpecificItemWithIdentifier:v16 valueClass:swift_getObjCClassFromMetadata()];

      if (v17) {
        goto LABEL_12;
      }
      __break(1u);
LABEL_18:
      uint64_t v18 = self;
      NSString v19 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      id v20 = [v18 taskSpecificItemWithIdentifier:v19 valueClass:swift_getObjCClassFromMetadata()];

      if (v20) {
        goto LABEL_12;
      }
      __break(1u);
LABEL_20:
      uint64_t v21 = self;
      NSString v22 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      id v23 = [v21 taskSpecificItemWithIdentifier:v22 valueClass:swift_getObjCClassFromMetadata()];

      if (v23) {
        goto LABEL_12;
      }
      __break(1u);
LABEL_22:
      uint64_t v24 = self;
      NSString v25 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      id v26 = [v24 taskSpecificItemWithIdentifier:v25 valueClass:swift_getObjCClassFromMetadata()];

      if (v26) {
        goto LABEL_12;
      }
      __break(1u);
      goto LABEL_24;
    case 8:
      goto LABEL_20;
    case 9:
      uint64_t v8 = self;
      NSString v9 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      id v10 = [v8 taskSpecificItemWithIdentifier:v9 valueClass:swift_getObjCClassFromMetadata()];

      if (v10) {
        goto LABEL_12;
      }
      __break(1u);
LABEL_10:
      uint64_t v1 = &selRef_hourOfDaySlot;
      goto LABEL_11;
    case 10:
      goto LABEL_22;
    case 11:
      uint64_t v2 = self;
      NSString v3 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      id v4 = [v2 taskSpecificItemWithIdentifier:v3 valueClass:swift_getObjCClassFromMetadata()];

      if (v4) {
        goto LABEL_12;
      }
      __break(1u);
LABEL_5:
      uint64_t v5 = self;
      NSString v6 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      id v7 = [v5 taskSpecificItemWithIdentifier:v6 valueClass:swift_getObjCClassFromMetadata()];

      if (v7) {
        goto LABEL_12;
      }
      __break(1u);
LABEL_7:
      uint64_t v1 = &selRef_isWeekend;
LABEL_11:
      [self *v1];
LABEL_12:
      self;
      uint64_t result = swift_dynamicCastObjCClass();
      if (!result)
      {
LABEL_24:
        _StringGuts.grow(_:)(36);
        v27._countAndFlagsBits = 0xD000000000000021;
        v27._object = (void *)0x80000001007D6520;
        String.append(_:)(v27);
        _print_unlocked<A, B>(_:_:)();
        swift_unknownObjectRelease();
        v28._countAndFlagsBits = 125;
        v28._object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1004B0534);
      }
      return result;
    default:
      goto LABEL_11;
  }
}

uint64_t sub_1004B0564@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  switch(*(unsigned char *)(a1 + 16))
  {
    case 1:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v11 = (void *)swift_allocObject();
      *((_OWORD *)v11 + 1) = xmmword_10077A530;
      double v31 = self;
      swift_bridgeObjectRetain();
      NSString v32 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      id v15 = [v31 taskSpecificItemWithIdentifier:v32 valueClass:swift_getObjCClassFromMetadata()];

      if (!v15) {
        goto LABEL_33;
      }
      NSString v16 = String._bridgeToObjectiveC()();
      sub_1004B6DEC(v2, v3, 1);
      id v17 = [self itemWithType:v15 stringValue:v16];
      goto LABEL_19;
    case 2:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v11 = (void *)swift_allocObject();
      *((_OWORD *)v11 + 1) = xmmword_10077A530;
      NSString v13 = self;
      swift_bridgeObjectRetain();
      NSString v14 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      id v15 = [v13 taskSpecificItemWithIdentifier:v14 valueClass:swift_getObjCClassFromMetadata()];

      if (!v15)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      NSString v16 = String._bridgeToObjectiveC()();
      sub_1004B6DEC(v2, v3, 2);
      id v17 = [self itemWithType:v15 stringValue:v16];
LABEL_19:
      id v35 = v17;

      v11[4] = v35;
LABEL_25:
      uint64_t result = specialized Array._endMutation()();
LABEL_26:
      *a2 = v11;
      return result;
    case 3:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v11 = (void *)swift_allocObject();
      *((_OWORD *)v11 + 1) = xmmword_10077A530;
      uint64_t v18 = self;
      NSString v19 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      id v20 = [v18 taskSpecificItemWithIdentifier:v19 valueClass:swift_getObjCClassFromMetadata()];

      if (!v20) {
        goto LABEL_31;
      }
      v21.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      id v22 = [self itemWithType:v20 numberValue:v21.super.super.isa];
      goto LABEL_24;
    case 4:
      swift_retain();
      if (REMSuggestedLocation.isSpecificLocation.getter())
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_10077A530;
        uint64_t v24 = self;
        NSString v25 = String._bridgeToObjectiveC()();
        sub_1000963CC(0, (unint64_t *)&unk_100910040);
        id v26 = [v24 taskSpecificItemWithIdentifier:v25 valueClass:swift_getObjCClassFromMetadata()];

        if (v26)
        {
          swift_retain();
          dispatch thunk of ClassificationLabel.description.getter();
          sub_1004B6DEC(v2, v3, 4);
          NSString v27 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v28 = [self itemWithType:v26 stringValue:v27];

          *(void *)(v23 + 32) = v28;
          specialized Array._endMutation()();
          uint64_t v11 = (void *)v23;
          uint64_t result = sub_1004B6DEC(v2, v3, 4);
          goto LABEL_26;
        }
LABEL_37:
        __break(1u);
        JUMPOUT(0x1004B0FE4);
      }
      uint64_t v39 = v2;
      uint64_t v40 = v3;
      char v41 = 4;
      goto LABEL_29;
    case 5:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v11 = (void *)swift_allocObject();
      *((_OWORD *)v11 + 1) = xmmword_10077A530;
      uint64_t v33 = self;
      swift_bridgeObjectRetain();
      NSString v34 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      id v15 = [v33 taskSpecificItemWithIdentifier:v34 valueClass:swift_getObjCClassFromMetadata()];

      if (!v15) {
        goto LABEL_34;
      }
      NSString v16 = String._bridgeToObjectiveC()();
      sub_1004B6DEC(v2, v3, 5);
      id v17 = [self itemWithType:v15 stringValue:v16];
      goto LABEL_19;
    case 6:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v11 = (void *)swift_allocObject();
      *((_OWORD *)v11 + 1) = xmmword_10077A530;
      id v20 = [self isWeekend];
      v21.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      id v22 = [self itemWithType:v20 numberValue:v21.super.super.isa];
      goto LABEL_24;
    case 7:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v11 = (void *)swift_allocObject();
      *((_OWORD *)v11 + 1) = xmmword_10077A530;
      uint64_t v29 = self;
      NSString v30 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      id v20 = [v29 taskSpecificItemWithIdentifier:v30 valueClass:swift_getObjCClassFromMetadata()];

      if (!v20) {
        goto LABEL_32;
      }
      v21.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      id v22 = [self itemWithType:v20 numberValue:v21.super.super.isa];
      goto LABEL_24;
    case 8:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v11 = (void *)swift_allocObject();
      *((_OWORD *)v11 + 1) = xmmword_10077A530;
      double v36 = self;
      NSString v37 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      id v20 = [v36 taskSpecificItemWithIdentifier:v37 valueClass:swift_getObjCClassFromMetadata()];

      if (!v20) {
        goto LABEL_35;
      }
      v21.super.super.Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
      id v22 = [self itemWithType:v20 numberValue:v21.super.super.isa];
LABEL_24:
      id v38 = v22;

      v11[4] = v38;
      goto LABEL_25;
    case 9:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v11 = (void *)swift_allocObject();
      *((_OWORD *)v11 + 1) = xmmword_10077A530;
      id v20 = [self dayOfWeek];
      v21.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      id v22 = [self itemWithType:v20 numberValue:v21.super.super.isa];
      goto LABEL_24;
    case 0xA:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v11 = (void *)swift_allocObject();
      *((_OWORD *)v11 + 1) = xmmword_10077A530;
      id v20 = [self hourOfDay];
      v21.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      id v22 = [self itemWithType:v20 numberValue:v21.super.super.isa];
      goto LABEL_24;
    default:
      swift_retain();
      if ((REMSuggestedContact.isValid.getter() & 1) == 0)
      {
        uint64_t v39 = v2;
        uint64_t v40 = v3;
        char v41 = 0;
LABEL_29:
        uint64_t result = sub_1004B6DEC(v39, v40, v41);
        uint64_t v11 = _swiftEmptyArrayStorage;
        goto LABEL_26;
      }
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_10077A530;
      NSString v6 = self;
      NSString v7 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      id v8 = [v6 taskSpecificItemWithIdentifier:v7 valueClass:swift_getObjCClassFromMetadata()];

      if (v8)
      {
        swift_retain();
        dispatch thunk of ClassificationLabel.description.getter();
        sub_1004B6DEC(v2, v3, 0);
        NSString v9 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v10 = [self itemWithType:v8 stringValue:v9];

        *(void *)(v5 + 32) = v10;
        specialized Array._endMutation()();
        uint64_t v11 = (void *)v5;
        uint64_t result = sub_1004B6DEC(v2, v3, 0);
        goto LABEL_26;
      }
      goto LABEL_36;
  }
}

uint64_t sub_1004B1010@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_1004B3278(v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_1004B1130(id a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer;
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer);
  if (v5)
  {
    uint64_t v6 = qword_100907690;
    id v7 = v5;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_10091A890);
    NSString v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDCoreBehaviorModel: invalidating timer since mining task did finish", v11, 2u);
      swift_slowDealloc();
    }

    [v7 invalidate];
    uint64_t v12 = *(void **)(v2 + v4);
    *(void *)(v2 + v4) = 0;
  }
  id v13 = [a1 completionStatus];
  *(void *)(v2 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_metrics + 24) = v13;
  id v14 = [a1 coreAnalyticsDict];
  sub_1000963CC(0, (unint64_t *)&qword_10090C120);
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  type metadata accessor for Analytics();
  sub_100094134((uint64_t *)&unk_10090A420);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  *(void *)(inited + 32) = 0x6E69616D6F44;
  *(void *)(inited + 40) = 0xE600000000000000;
  sub_1000963CC(0, (unint64_t *)&unk_100910040);
  *(void *)(inited + 48) = NSString.init(stringLiteral:)();
  *(void *)(inited + 56) = 0xD000000000000011;
  *(void *)(inited + 64) = 0x80000001007D64D0;
  [a1 completionStatus];
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  sub_1002ED104(inited);
  static Analytics.postEvent(_:payload:duration:)();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004B1850(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_1004B27C0(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      uint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_1004B29C8((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_1001F433C((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          unint64_t v100 = &v97[16 * v96 + 32];
          *(void *)unint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    id v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    id v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    NSNumber v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1001F3D80(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_1001F3D80((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    char v43 = &v11[16 * v41 + 32];
    *(void *)char v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        int v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        unint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_1004B29C8((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)int v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        NSString v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        id v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)id v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1004B1F3C(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_146;
    }
    if (v4) {
      sub_1004B2890(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_154;
  }
  Swift::Int v7 = v5;
  uint64_t v131 = a1;
  if (v4 < 2)
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    uint64_t v139 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      if (v13 < 2)
      {
LABEL_123:
        swift_bridgeObjectRelease();
        *(void *)((v139 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()();
        swift_bridgeObjectRelease();
        return;
      }
LABEL_111:
      uint64_t v123 = *v131;
      while (1)
      {
        unint64_t v124 = v13 - 2;
        if (v13 < 2) {
          goto LABEL_141;
        }
        if (!v123) {
          goto LABEL_153;
        }
        uint64_t v125 = v10;
        uint64_t v126 = *(void *)&v10[16 * v124 + 32];
        uint64_t v127 = *(void *)&v10[16 * v13 + 24];
        sub_1004B2C64((void **)(v123 + 8 * v126), (void **)(v123 + 8 * *(void *)&v10[16 * v13 + 16]), v123 + 8 * v127, __dst);
        if (v2) {
          goto LABEL_123;
        }
        if (v127 < v126) {
          goto LABEL_142;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v125 = sub_1001F433C((uint64_t)v125);
        }
        if (v124 >= *((void *)v125 + 2)) {
          goto LABEL_143;
        }
        uint64_t v128 = &v125[16 * v124 + 32];
        *(void *)uint64_t v128 = v126;
        *((void *)v128 + 1) = v127;
        unint64_t v129 = *((void *)v125 + 2);
        if (v13 > v129) {
          goto LABEL_144;
        }
        memmove(&v125[16 * v13 + 16], &v125[16 * v13 + 32], 16 * (v129 - v13));
        uint64_t v10 = v125;
        *((void *)v125 + 2) = v129 - 1;
        unint64_t v13 = v129 - 1;
        if (v129 <= 2) {
          goto LABEL_123;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = v6 >> 1;
    sub_1000963CC(0, &qword_1009100C0);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v139 = v9;
  }
  Swift::Int v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v132 = *a1 - 8;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v135 = v4;
  while (1)
  {
    Swift::Int v14 = v11;
    Swift::Int v15 = v11 + 1;
    Swift::Int v137 = v11;
    if (v11 + 1 >= v4) {
      goto LABEL_39;
    }
    uint64_t v16 = v10;
    id v17 = *(void **)(v12 + 8 * v11);
    id v18 = *(id *)(v12 + 8 * v15);
    id v19 = v17;
    [v18 support];
    double v21 = v20;
    [v19 support];
    if (v21 == v22)
    {
      [v18 confidence];
      double v24 = v23;
      [v19 confidence];
    }
    else
    {
      [v18 support];
      double v24 = v26;
      [v19 support];
    }
    double v27 = v25;

    BOOL v28 = v27 < v24;
    Swift::Int v15 = v14 + 2;
    if (v14 + 2 >= v135) {
      goto LABEL_29;
    }
    Swift::Int v29 = v14;
    while (1)
    {
      Swift::Int v36 = v15;
      uint64_t v37 = v12 + 8 * v29;
      id v38 = *(void **)(v37 + 8);
      id v39 = *(id *)(v37 + 16);
      id v40 = v38;
      [v39 support];
      double v42 = v41;
      [v40 support];
      if (v42 == v43)
      {
        [v39 confidence];
        double v45 = v44;
        [v40 confidence];
        double v47 = v46;

        if (((v28 ^ (v47 >= v45)) & 1) == 0)
        {
          Swift::Int v15 = v36;
          goto LABEL_28;
        }
        goto LABEL_22;
      }
      [v39 support];
      double v31 = v30;
      [v40 support];
      double v33 = v32;

      if (v28 == v33 >= v31) {
        break;
      }
LABEL_22:
      Swift::Int v15 = v36 + 1;
      Swift::Int v34 = v29 + 1;
      Swift::Int v35 = v29 + 3;
      ++v29;
      if (v35 >= v135)
      {
        Swift::Int v15 = v34 + 2;
        goto LABEL_28;
      }
    }
    Swift::Int v15 = v29 + 2;
LABEL_28:
    Swift::Int v14 = v137;
LABEL_29:
    uint64_t v10 = v16;
    if (v28)
    {
      Swift::Int v4 = v135;
      if (v15 < v14) {
        goto LABEL_147;
      }
      if (v14 < v15)
      {
        char v48 = (uint64_t *)(v132 + 8 * v15);
        Swift::Int v49 = v15;
        Swift::Int v50 = v14;
        uint64_t v51 = (uint64_t *)(v12 + 8 * v14);
        do
        {
          if (v50 != --v49)
          {
            if (!v12) {
              goto LABEL_152;
            }
            uint64_t v52 = *v51;
            *uint64_t v51 = *v48;
            *char v48 = v52;
          }
          ++v50;
          --v48;
          ++v51;
        }
        while (v50 < v49);
      }
    }
    else
    {
      Swift::Int v4 = v135;
    }
LABEL_39:
    if (v15 < v4)
    {
      if (__OFSUB__(v15, v14)) {
        goto LABEL_145;
      }
      if (v15 - v14 < v7) {
        break;
      }
    }
LABEL_60:
    if (v15 < v14) {
      goto LABEL_140;
    }
    uint64_t v71 = v10;
    Swift::Int v134 = v15;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v10 = v71;
    }
    else {
      uint64_t v10 = sub_1001F3D80(0, *((void *)v71 + 2) + 1, 1, v71);
    }
    unint64_t v73 = *((void *)v10 + 2);
    unint64_t v72 = *((void *)v10 + 3);
    unint64_t v13 = v73 + 1;
    if (v73 >= v72 >> 1) {
      uint64_t v10 = sub_1001F3D80((char *)(v72 > 1), v73 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13;
    uint64_t v138 = v10 + 32;
    uint64_t v74 = &v10[16 * v73 + 32];
    *(void *)uint64_t v74 = v14;
    *((void *)v74 + 1) = v134;
    if (v73)
    {
      uint64_t v75 = v10 + 32;
      while (1)
      {
        unint64_t v76 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v81 = &v75[16 * v13];
          uint64_t v82 = *((void *)v81 - 8);
          uint64_t v83 = *((void *)v81 - 7);
          BOOL v87 = __OFSUB__(v83, v82);
          uint64_t v84 = v83 - v82;
          if (v87) {
            goto LABEL_129;
          }
          uint64_t v86 = *((void *)v81 - 6);
          uint64_t v85 = *((void *)v81 - 5);
          BOOL v87 = __OFSUB__(v85, v86);
          uint64_t v79 = v85 - v86;
          char v80 = v87;
          if (v87) {
            goto LABEL_130;
          }
          unint64_t v88 = v13 - 2;
          unint64_t v89 = &v75[16 * v13 - 32];
          uint64_t v91 = *(void *)v89;
          uint64_t v90 = *((void *)v89 + 1);
          BOOL v87 = __OFSUB__(v90, v91);
          uint64_t v92 = v90 - v91;
          if (v87) {
            goto LABEL_132;
          }
          BOOL v87 = __OFADD__(v79, v92);
          uint64_t v93 = v79 + v92;
          if (v87) {
            goto LABEL_135;
          }
          if (v93 >= v84)
          {
            uint64_t v111 = &v75[16 * v76];
            uint64_t v113 = *(void *)v111;
            uint64_t v112 = *((void *)v111 + 1);
            BOOL v87 = __OFSUB__(v112, v113);
            uint64_t v114 = v112 - v113;
            if (v87) {
              goto LABEL_139;
            }
            BOOL v104 = v79 < v114;
            goto LABEL_98;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v105 = *((void *)v10 + 4);
            uint64_t v106 = *((void *)v10 + 5);
            BOOL v87 = __OFSUB__(v106, v105);
            uint64_t v98 = v106 - v105;
            char v99 = v87;
            goto LABEL_92;
          }
          uint64_t v78 = *((void *)v10 + 4);
          uint64_t v77 = *((void *)v10 + 5);
          BOOL v87 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          char v80 = v87;
        }
        if (v80) {
          goto LABEL_131;
        }
        unint64_t v88 = v13 - 2;
        uint64_t v94 = &v75[16 * v13 - 32];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v97 = __OFSUB__(v95, v96);
        uint64_t v98 = v95 - v96;
        char v99 = v97;
        if (v97) {
          goto LABEL_134;
        }
        unint64_t v100 = &v75[16 * v76];
        uint64_t v102 = *(void *)v100;
        uint64_t v101 = *((void *)v100 + 1);
        BOOL v87 = __OFSUB__(v101, v102);
        uint64_t v103 = v101 - v102;
        if (v87) {
          goto LABEL_137;
        }
        if (__OFADD__(v98, v103)) {
          goto LABEL_138;
        }
        if (v98 + v103 >= v79)
        {
          BOOL v104 = v79 < v103;
LABEL_98:
          if (v104) {
            unint64_t v76 = v88;
          }
          goto LABEL_100;
        }
LABEL_92:
        if (v99) {
          goto LABEL_133;
        }
        Swift::Int v107 = &v75[16 * v76];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v87 = __OFSUB__(v108, v109);
        uint64_t v110 = v108 - v109;
        if (v87) {
          goto LABEL_136;
        }
        if (v110 < v98) {
          goto LABEL_14;
        }
LABEL_100:
        unint64_t v115 = v76 - 1;
        if (v76 - 1 >= v13)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (!v12) {
          goto LABEL_151;
        }
        uint64_t v116 = v10;
        uint64_t v117 = &v75[16 * v115];
        uint64_t v118 = v75;
        uint64_t v119 = *(void *)v117;
        uint64_t v120 = &v118[16 * v76];
        uint64_t v121 = *((void *)v120 + 1);
        sub_1004B2C64((void **)(v12 + 8 * *(void *)v117), (void **)(v12 + 8 * *(void *)v120), v12 + 8 * v121, __dst);
        if (v1) {
          goto LABEL_123;
        }
        if (v121 < v119) {
          goto LABEL_126;
        }
        if (v76 > *((void *)v116 + 2)) {
          goto LABEL_127;
        }
        *(void *)uint64_t v117 = v119;
        uint64_t v75 = v138;
        *(void *)&v138[16 * v115 + 8] = v121;
        unint64_t v122 = *((void *)v116 + 2);
        if (v76 >= v122) {
          goto LABEL_128;
        }
        unint64_t v13 = v122 - 1;
        memmove(v120, v120 + 16, 16 * (v122 - 1 - v76));
        uint64_t v10 = v116;
        *((void *)v116 + 2) = v122 - 1;
        if (v122 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    Swift::Int v11 = v134;
    Swift::Int v4 = v135;
    if (v134 >= v135)
    {
      uint64_t v2 = v1;
      if (v13 < 2) {
        goto LABEL_123;
      }
      goto LABEL_111;
    }
  }
  if (__OFADD__(v14, v7)) {
    goto LABEL_148;
  }
  if (v14 + v7 >= v4) {
    Swift::Int v53 = v4;
  }
  else {
    Swift::Int v53 = v14 + v7;
  }
  if (v53 >= v14)
  {
    if (v15 != v53)
    {
      uint64_t v130 = v10;
      uint64_t v54 = v132 + 8 * v15;
      Swift::Int v133 = v53;
      do
      {
        BOOL v55 = *(void **)(v12 + 8 * v15);
        Swift::Int v56 = v14;
        uint64_t v57 = v54;
        while (1)
        {
          Swift::Int v58 = v15;
          uint64_t v59 = *(void **)v57;
          id v60 = v55;
          id v61 = v59;
          [v60 support];
          double v63 = v62;
          [v61 support];
          if (v63 == v64)
          {
            [v60 confidence];
            double v66 = v65;
            [v61 confidence];
          }
          else
          {
            [v60 support];
            double v66 = v68;
            [v61 support];
          }
          double v69 = v67;

          if (v69 >= v66) {
            break;
          }
          if (!v12) {
            goto LABEL_150;
          }
          Swift::Int v15 = v58;
          uint64_t v70 = *(void **)v57;
          BOOL v55 = *(void **)(v57 + 8);
          *(void *)uint64_t v57 = v55;
          *(void *)(v57 + 8) = v70;
          v57 -= 8;
          if (v58 == ++v56) {
            goto LABEL_50;
          }
        }
        Swift::Int v15 = v58;
LABEL_50:
        ++v15;
        v54 += 8;
        Swift::Int v14 = v137;
      }
      while (v15 != v133);
      Swift::Int v15 = v133;
      uint64_t v10 = v130;
    }
    goto LABEL_60;
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1004B27C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

void sub_1004B2890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v7 = *(void **)(v5 + 8 * v4);
    uint64_t v8 = a1;
    uint64_t v9 = v6;
    while (1)
    {
      uint64_t v10 = *(void **)v9;
      id v11 = v7;
      id v12 = v10;
      [v11 support];
      double v14 = v13;
      [v12 support];
      if (v14 == v15)
      {
        [v11 confidence];
        double v17 = v16;
        [v12 confidence];
      }
      else
      {
        [v11 support];
        double v17 = v19;
        [v12 support];
      }
      double v20 = v18;

      if (v20 >= v17)
      {
LABEL_4:
        ++v4;
        v6 += 8;
        if (v4 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      double v21 = *(void **)v9;
      uint64_t v7 = *(void **)(v9 + 8);
      *(void *)uint64_t v9 = v7;
      *(void *)(v9 + 8) = v21;
      v9 -= 8;
      if (v4 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1004B29C8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  double v27 = __src;
  double v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      double v17 = &v4[16 * v13];
      double v25 = v17;
      double v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        double v18 = (char *)(a3 - 16);
        double v19 = v6;
        while (1)
        {
          double v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            double v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)double v18 = *((_OWORD *)v17 - 1);
            }
            double v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)double v18 = *(_OWORD *)v19;
            }
            double v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    double v14 = &v4[16 * v10];
    double v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          double v26 = v4;
          double v16 = v6;
        }
        else
        {
          double v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      double v27 = v7;
    }
LABEL_50:
    sub_1001F3F68((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004B2C64(void **__src, void **a2, unint64_t a3, void **__dst)
{
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 3;
  double v47 = __src;
  double v46 = __dst;
  double v44 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 >= -7)
    {
      if (__dst != a2 || &a2[v12] <= __dst)
      {
        memmove(__dst, a2, 8 * v12);
        __dst = v44;
      }
      double v27 = &__dst[v12];
      double v45 = (char *)v27;
      double v47 = v5;
      if (v6 < v5 && v10 >= 8)
      {
        BOOL v28 = (id *)(a3 - 8);
        Swift::Int v29 = v5;
        while (1)
        {
          double v30 = (char *)(v28 + 1);
          double v31 = *--v29;
          id v32 = *(v27 - 1);
          id v33 = v31;
          [v32 support];
          double v35 = v34;
          [v33 support];
          if (v35 == v36)
          {
            [v32 confidence];
            double v38 = v37;
            [v33 confidence];
          }
          else
          {
            [v32 support];
            double v38 = v40;
            [v33 support];
          }
          double v41 = v39;

          if (v41 >= v38)
          {
            double v45 = (char *)(v27 - 1);
            double v42 = v44;
            if (v30 < (char *)v27 || v28 >= v27 || v30 != (char *)v27) {
              *BOOL v28 = *(v27 - 1);
            }
            Swift::Int v29 = v5;
            --v27;
            if (v5 <= v6) {
              goto LABEL_49;
            }
          }
          else
          {
            double v42 = v44;
            if (v30 != (char *)v5 || v28 >= v5) {
              *BOOL v28 = *v29;
            }
            double v47 = v29;
            if (v29 <= v6) {
              goto LABEL_49;
            }
          }
          --v28;
          uint64_t v5 = v29;
          if (v27 <= v42) {
            goto LABEL_49;
          }
        }
      }
      goto LABEL_49;
    }
  }
  else if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst)
    {
      memmove(__dst, __src, 8 * v9);
      __dst = v44;
    }
    uint64_t v13 = &__dst[v9];
    double v45 = (char *)v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      do
      {
        double v14 = __dst;
        BOOL v15 = *__dst;
        id v16 = *v5;
        id v17 = v15;
        [v16 support];
        double v19 = v18;
        [v17 support];
        if (v19 == v20)
        {
          [v16 confidence];
          double v22 = v21;
          [v17 confidence];
        }
        else
        {
          [v16 support];
          double v22 = v24;
          [v17 support];
        }
        double v25 = v23;

        if (v25 >= v22)
        {
          if (v6 != v14) {
            *uint64_t v6 = *v14;
          }
          __dst = v14 + 1;
          double v46 = v14 + 1;
          double v26 = v5;
        }
        else
        {
          double v26 = v5 + 1;
          if (v6 < v5 || v6 >= v26 || v6 != v5) {
            *uint64_t v6 = *v5;
          }
          __dst = v14;
        }
        ++v6;
        if (__dst >= v13) {
          break;
        }
        uint64_t v5 = v26;
      }
      while ((unint64_t)v26 < a3);
      double v47 = v6;
    }
LABEL_49:
    sub_1001F3F4C(&v47, &v46, &v45);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1004B3000(uint64_t a1, void *a2, double *a3)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = &_swiftEmptySetSingleton;
    double v24 = &_swiftEmptySetSingleton;
    id v7 = a2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      double v22 = v7;
      uint64_t v6 = (void *)sub_1000963CC(0, &qword_1009100C0);
      do
      {
        swift_dynamicCast();
        char v8 = sub_1004B4B0C(&v23, a3);
        if (v3)
        {
          swift_release();

          swift_release();
          return (Swift::Int)v6;
        }
        id v9 = v23;
        if (v8)
        {
          uint64_t v10 = v24;
          unint64_t v11 = v24[2];
          if (v24[3] <= v11)
          {
            sub_1003252E4(v11 + 1);
            uint64_t v10 = v24;
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(v10[5]);
          uint64_t v13 = v10 + 7;
          uint64_t v14 = -1 << *((unsigned char *)v10 + 32);
          unint64_t v15 = result & ~v14;
          unint64_t v16 = v15 >> 6;
          if (((-1 << v15) & ~v10[(v15 >> 6) + 7]) != 0)
          {
            unint64_t v17 = __clz(__rbit64((-1 << v15) & ~v10[(v15 >> 6) + 7])) | v15 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v18 = 0;
            unint64_t v19 = (unint64_t)(63 - v14) >> 6;
            do
            {
              if (++v16 == v19 && (v18 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v20 = v16 == v19;
              if (v16 == v19) {
                unint64_t v16 = 0;
              }
              v18 |= v20;
              uint64_t v21 = v13[v16];
            }
            while (v21 == -1);
            unint64_t v17 = __clz(__rbit64(~v21)) + (v16 << 6);
          }
          *(void *)((char *)v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
          *(void *)(v10[6] + 8 * v17) = v9;
          ++v10[2];
        }
        else
        {
        }
      }
      while (__CocoaSet.Iterator.next()());
      uint64_t v6 = v24;
      id v7 = v22;
    }

    swift_release();
  }
  else
  {
    uint64_t v6 = (void *)sub_1004B546C(a1, a2, a3);
  }
  return (Swift::Int)v6;
}

uint64_t sub_1004B3278(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1004B33D0((uint64_t)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    id v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_1004B33D0((uint64_t)v7, v4, v2);
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_1004B33D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v18 = (unint64_t *)result;
  uint64_t v3 = 0;
  int64_t v4 = 0;
  uint64_t v7 = *(void *)(a3 + 64);
  uint64_t v5 = a3 + 64;
  uint64_t v6 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v5 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v6;
  uint64_t v20 = v5;
  int64_t v21 = (unint64_t)(v8 + 63) >> 6;
LABEL_4:
  uint64_t v19 = v3;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v4 << 6);
LABEL_19:
    sub_1000E4FD8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (StringProtocol.contains<A>(_:)())
    {
      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
    }
    else
    {
      char v16 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
      {
        *(unint64_t *)((char *)v18 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        uint64_t v3 = v19 + 1;
        if (!__OFADD__(v19, 1)) {
          goto LABEL_4;
        }
        __break(1u);
        return sub_100546BF0(v18, a2, v19, a3);
      }
    }
  }
  if (__OFADD__(v4++, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v4 >= v21) {
    return sub_100546BF0(v18, a2, v19, a3);
  }
  unint64_t v14 = *(void *)(v20 + 8 * v4);
  if (v14)
  {
LABEL_18:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_19;
  }
  int64_t v15 = v4 + 1;
  if (v4 + 1 >= v21) {
    return sub_100546BF0(v18, a2, v19, a3);
  }
  unint64_t v14 = *(void *)(v20 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v4 + 2;
  if (v4 + 2 >= v21) {
    return sub_100546BF0(v18, a2, v19, a3);
  }
  unint64_t v14 = *(void *)(v20 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v4 + 3;
  if (v4 + 3 >= v21) {
    return sub_100546BF0(v18, a2, v19, a3);
  }
  unint64_t v14 = *(void *)(v20 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v21) {
      return sub_100546BF0(v18, a2, v19, a3);
    }
    unint64_t v14 = *(void *)(v20 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1004B3668()
{
  return type metadata accessor for RDCoreBehaviorModel(0);
}

uint64_t type metadata accessor for RDCoreBehaviorModel(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_10091A900);
}

void sub_1004B3690()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_1004B378C();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1004B378C()
{
  if (!qword_10091A910[0])
  {
    sub_1000963CC(255, &qword_1009100C0);
    unint64_t v0 = type metadata accessor for OrderedDictionary();
    if (!v1) {
      atomic_store(v0, qword_10091A910);
    }
  }
}

uint64_t sub_1004B3804()
{
  return type metadata accessor for RDCoreBehaviorModelTrainingDelegate(0);
}

uint64_t type metadata accessor for RDCoreBehaviorModelTrainingDelegate(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_10091AA58);
}

uint64_t sub_1004B382C()
{
  uint64_t result = type metadata accessor for REMSuggestedAttributeInputDataFrame();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RDCoreBehaviorModel.Result(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RDCoreBehaviorModel.Result(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RDCoreBehaviorModel.Result()
{
  return &type metadata for RDCoreBehaviorModel.Result;
}

unint64_t sub_1004B392C()
{
  unint64_t result = qword_10091AA68;
  if (!qword_10091AA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091AA68);
  }
  return result;
}

void *sub_1004B3980(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t result = (void *)sub_1001DE058(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = 0;
    unint64_t v25 = v3 & 0xC000000000000001;
    unint64_t v26 = v3;
    while (1)
    {
      if (v4 == v6)
      {
        __break(1u);
        goto LABEL_26;
      }
      if (v25) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v3 + 8 * v6 + 32);
      }
      uint64_t v8 = v7;
      id v9 = [v7 type];
      id v10 = [v9 identifier];

      if (v10)
      {
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;
      }
      else
      {
        uint64_t v13 = (void *)0xE300000000000000;
        uint64_t v11 = 7104878;
      }
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 58;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      if (!a2) {
        goto LABEL_20;
      }
      if ((sub_1004AC3DC(v8, 4) & 1) == 0) {
        goto LABEL_20;
      }
      [v8 value];
      if (!swift_dynamicCast()) {
        goto LABEL_20;
      }
      if (!*(void *)(a2 + 16)) {
        break;
      }
      unint64_t v16 = sub_1001806F8(v27, v28);
      if ((v17 & 1) == 0) {
        break;
      }
      char v18 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v16);
      uint64_t v19 = *v18;
      uint64_t v20 = (void *)v18[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_21:
      v21._countAndFlagsBits = v19;
      v21._object = v20;
      String.append(_:)(v21);

      swift_bridgeObjectRelease();
      unint64_t v23 = _swiftEmptyArrayStorage[2];
      unint64_t v22 = _swiftEmptyArrayStorage[3];
      if (v23 >= v22 >> 1) {
        sub_1001DE058(v22 > 1, v23 + 1, 1);
      }
      ++v6;
      _swiftEmptyArrayStorage[2] = v23 + 1;
      double v24 = &_swiftEmptyArrayStorage[2 * v23];
      v24[4] = 0;
      v24[5] = 0xE000000000000000;
      unint64_t v3 = v26;
      if (v4 == v6) {
        return _swiftEmptyArrayStorage;
      }
    }
    swift_bridgeObjectRelease();
LABEL_20:
    uint64_t v27 = 0;
    uint64_t v28 = 0xE000000000000000;
    [v8 value];
    _print_unlocked<A, B>(_:_:)();
    swift_unknownObjectRelease();
    uint64_t v19 = 0;
    uint64_t v20 = (void *)0xE000000000000000;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004B3C94(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3 < a2)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = a3;
    uint64_t v5 = result;
    unint64_t result = swift_bridgeObjectRetain();
    if (a2 == v3) {
      return v5;
    }
    if (a2 >= v3) {
      goto LABEL_13;
    }
    if ((a2 & 0x8000000000000000) == 0)
    {
      if (a2)
      {
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
      v6[1] = v5;
      swift_retain();
      sub_1004B1010(v6);
      swift_bridgeObjectRelease();
      unint64_t result = swift_release();
      if (v3 == 1) {
        return v6[0];
      }
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  if (v3 > 1) {
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1004B3D58()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100786190;
  *(void *)(inited + 32) = sub_1004AFFEC(4);
  *(void *)(inited + 40) = sub_1004AFFEC(5);
  *(void *)(inited + 48) = sub_1004AFFEC(6);
  *(void *)(inited + 56) = sub_1004AFFEC(7);
  *(void *)(inited + 64) = sub_1004AFFEC(8);
  *(void *)(inited + 72) = sub_1004AFFEC(9);
  *(void *)(inited + 80) = sub_1004AFFEC(10);
  *(void *)(inited + 88) = sub_1004AFFEC(11);
  specialized Array._endMutation()();
  uint64_t v1 = sub_1001276B8(inited);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1004B3E28()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10078EAE0;
  *(void *)(inited + 32) = sub_1004AFFEC(4);
  *(void *)(inited + 40) = sub_1004AFFEC(6);
  *(void *)(inited + 48) = sub_1004AFFEC(5);
  *(void *)(inited + 56) = sub_1004AFFEC(8);
  *(void *)(inited + 64) = sub_1004AFFEC(9);
  *(void *)(inited + 72) = sub_1004AFFEC(10);
  *(void *)(inited + 80) = sub_1004AFFEC(11);
  specialized Array._endMutation()();
  uint64_t v1 = sub_1001276B8(inited);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1004B3EEC(unint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  unint64_t v4 = a1;
  id v32 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
LABEL_24:
  }
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  else {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_beginAccess();
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (!v5) {
    return (uint64_t)v6;
  }
  unint64_t v7 = 0;
  uint64_t v25 = v4 & 0xFFFFFFFFFFFFFF8;
  unint64_t v26 = v4 & 0xC000000000000001;
  uint64_t v23 = v5;
  double v24 = (void **)(v4 + 32);
  while (1)
  {
    if (v26)
    {
      uint64_t v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v7 >= *(void *)(v25 + 16))
      {
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v8 = v24[v7];
    }
    id v9 = v8;
    if (__OFADD__(v7++, 1)) {
      goto LABEL_23;
    }
    uint64_t v11 = *a2;
    swift_bridgeObjectRetain();
    id v12 = [v9 antecedent];
    sub_100094134(&qword_1009148E0);
    sub_1000967F4(&qword_10091A8B0, &qword_1009148E0);
    uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    double v31 = _swiftEmptyArrayStorage;
    uint64_t v14 = *(void *)(v11 + 16);
    if (v14) {
      break;
    }
    uint64_t v19 = _swiftEmptyArrayStorage;
LABEL_17:
    uint64_t v20 = sub_100127C78((unint64_t)v19);
    swift_bridgeObjectRelease();
    sub_100489438(v20, v13);
    unint64_t v4 = (unint64_t)v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4)
    {
      unint64_t v4 = (unint64_t)&v32;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
    if (v7 == v5) {
      return (uint64_t)v32;
    }
  }
  swift_bridgeObjectRetain();
  Swift::String v15 = (char *)(v11 + 48);
  while (1)
  {
    uint64_t v16 = *((void *)v15 - 2);
    uint64_t v17 = *((void *)v15 - 1);
    char v18 = *v15;
    v29[0] = v16;
    v29[1] = v17;
    char v30 = v18;
    sub_1004B6D94(v16, v17, v18);
    sub_1004B0564((uint64_t)v29, &v28);
    if (v3) {
      break;
    }
    uint64_t v3 = 0;
    v15 += 24;
    sub_1004B6DEC(v16, v17, v18);
    sub_100203E48(v28);
    if (!--v14)
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = v31;
      uint64_t v5 = v23;
      goto LABEL_17;
    }
  }
  sub_1004B6DEC(v16, v17, v18);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void sub_1004B41BC(uint64_t a1, char a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_100094134(&qword_1009148E0);
    sub_1000967F4(&qword_10091A8B0, &qword_1009148E0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v7 = v37;
    uint64_t v28 = v38;
    uint64_t v8 = v39;
    int64_t v9 = v40;
    unint64_t v10 = v41;
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v28 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
  }
  int64_t v27 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v14 = _swiftEmptyArrayStorage;
  char v29 = a2 & 1;
  while (v7 < 0)
  {
    uint64_t v19 = (void *)__CocoaSet.Iterator.next()();
    if (!v19) {
      goto LABEL_41;
    }
    double v42 = v19;
    swift_unknownObjectRetain();
    sub_100094134(&qword_1009148E0);
    swift_dynamicCast();
    id v20 = *(id *)&v35[0];
    swift_unknownObjectRelease();
    int64_t v18 = v9;
    uint64_t v16 = v10;
    if (!v20) {
      goto LABEL_41;
    }
LABEL_28:
    double v42 = v20;
    sub_1004ABE18(&v42, v29, a3, a4, (uint64_t)v35);
    if (v5)
    {

      sub_1000C1AF8();
      swift_bridgeObjectRelease();
      return;
    }

    unsigned __int8 v23 = v36;
    if (v36 != 255)
    {
      long long v33 = v35[1];
      long long v34 = v35[0];
      long long v32 = v35[2];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v14 = sub_10030B338(0, v14[2] + 1, 1, v14);
      }
      unint64_t v25 = v14[2];
      unint64_t v24 = v14[3];
      if (v25 >= v24 >> 1) {
        uint64_t v14 = sub_10030B338((void *)(v24 > 1), v25 + 1, 1, v14);
      }
      v14[2] = v25 + 1;
      Swift::String v15 = &v14[7 * v25];
      *((_OWORD *)v15 + 2) = v34;
      *((_OWORD *)v15 + 3) = v33;
      *((_OWORD *)v15 + 4) = v32;
      *((unsigned char *)v15 + 80) = v23;
    }
    int64_t v9 = v18;
    unint64_t v10 = v16;
  }
  if (v10)
  {
    uint64_t v16 = (v10 - 1) & v10;
    unint64_t v17 = __clz(__rbit64(v10)) | (v9 << 6);
    int64_t v18 = v9;
LABEL_27:
    id v20 = *(id *)(*(void *)(v7 + 48) + 8 * v17);
    if (!v20) {
      goto LABEL_41;
    }
    goto LABEL_28;
  }
  int64_t v18 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v18 >= v27) {
      goto LABEL_41;
    }
    unint64_t v21 = *(void *)(v28 + 8 * v18);
    if (!v21)
    {
      int64_t v22 = v9 + 2;
      if (v9 + 2 >= v27) {
        goto LABEL_41;
      }
      unint64_t v21 = *(void *)(v28 + 8 * v22);
      if (v21) {
        goto LABEL_25;
      }
      int64_t v22 = v9 + 3;
      if (v9 + 3 >= v27) {
        goto LABEL_41;
      }
      unint64_t v21 = *(void *)(v28 + 8 * v22);
      if (v21) {
        goto LABEL_25;
      }
      int64_t v22 = v9 + 4;
      if (v9 + 4 >= v27) {
        goto LABEL_41;
      }
      unint64_t v21 = *(void *)(v28 + 8 * v22);
      if (v21)
      {
LABEL_25:
        int64_t v18 = v22;
      }
      else
      {
        int64_t v18 = v9 + 5;
        if (v9 + 5 >= v27) {
          goto LABEL_41;
        }
        unint64_t v21 = *(void *)(v28 + 8 * v18);
        if (!v21)
        {
          int64_t v26 = v9 + 6;
          while (v27 != v26)
          {
            unint64_t v21 = *(void *)(v28 + 8 * v26++);
            if (v21)
            {
              int64_t v18 = v26 - 1;
              goto LABEL_26;
            }
          }
LABEL_41:
          sub_1000C1AF8();
          return;
        }
      }
    }
LABEL_26:
    uint64_t v16 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v18 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

unint64_t *sub_1004B4588(unint64_t *result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  double v12 = a4 + -2592000.0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v11) {
      return (unint64_t *)sub_1005466D0(result, a2, v5, a3);
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v11) {
        return (unint64_t *)sub_1005466D0(result, a2, v5, a3);
      }
      unint64_t v16 = *(void *)(v7 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v11) {
          return (unint64_t *)sub_1005466D0(result, a2, v5, a3);
        }
        unint64_t v16 = *(void *)(v7 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    if (v12 < *(double *)(*(void *)(a3 + 48) + 8 * v14))
    {
      *(unint64_t *)((char *)result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1005466D0(result, a2, v5, a3);
      }
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v11) {
    return (unint64_t *)sub_1005466D0(result, a2, v5, a3);
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v11) {
      return (unint64_t *)sub_1005466D0(result, a2, v5, a3);
    }
    unint64_t v16 = *(void *)(v7 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t *sub_1004B46E8(uint64_t isStackAllocationSafe, double a2)
{
  uint64_t v4 = (unint64_t *)isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = sub_1004B4588((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, (uint64_t)v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    uint64_t v4 = sub_1004B4588((unint64_t *)v9, v6, (uint64_t)v4, a2);
    swift_slowDealloc();
  }
  return v4;
}

uint64_t sub_1004B4854(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001007D6300)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1004B4944(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_10091AB78);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000C0DE0(a1, v7);
  sub_1004B75FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100094134(&qword_10091AB58);
    v9[15] = 1;
    sub_1004B76E4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  return v7;
}

uint64_t sub_1004B4B0C(id *a1, double *a2)
{
  id v3 = *a1;
  id v4 = [*a1 consequent];
  sub_100094134(&qword_1009148E0);
  sub_1000967F4(&qword_10091A8B0, &qword_1009148E0);
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v5 & 0xC000000000000001) != 0) {
    uint64_t v6 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v6 = *(void *)(v5 + 16);
  }
  swift_bridgeObjectRelease();
  if (v6 > 1) {
    return 0;
  }
  unint64_t v41 = a2;
  id v8 = [v3 antecedent];
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v51 = sub_1004A93D8(v9, 0xD000000000000016, 0x80000001007D6480, (unint64_t *)&unk_100910040);
  swift_bridgeObjectRelease();
  id v10 = [v3 consequent];
  uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v50 = sub_1004A93D8(v11, 0xD000000000000016, 0x80000001007D6480, (unint64_t *)&unk_100910040);
  swift_bridgeObjectRelease();
  id v12 = [v3 antecedent];
  uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v47 = sub_1004A93D8(v13, 0xD000000000000014, 0x80000001007D63E0, (unint64_t *)&qword_100909FB0);
  swift_bridgeObjectRelease();
  id v14 = [v3 consequent];
  uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v46 = sub_1004A93D8(v15, 0xD000000000000014, 0x80000001007D63E0, (unint64_t *)&qword_100909FB0);
  swift_bridgeObjectRelease();
  id v16 = [v3 antecedent];
  uint64_t v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v49 = sub_1004A93D8(v17, 0xD00000000000001ALL, 0x80000001007D6460, (unint64_t *)&unk_100910040);
  swift_bridgeObjectRelease();
  id v18 = [v3 consequent];
  uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v48 = sub_1004A93D8(v19, 0xD00000000000001ALL, 0x80000001007D6460, (unint64_t *)&unk_100910040);
  swift_bridgeObjectRelease();
  id v20 = [v3 antecedent];
  uint64_t v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v45 = sub_1004A93D8(v21, 0x7265646E696D6552, 0xEF64656767616C46, (unint64_t *)&qword_100909FB0);
  swift_bridgeObjectRelease();
  id v22 = [v3 consequent];
  uint64_t v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v44 = sub_1004A93D8(v23, 0x7265646E696D6552, 0xEF64656767616C46, (unint64_t *)&qword_100909FB0);
  swift_bridgeObjectRelease();
  id v24 = [v3 antecedent];
  uint64_t v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v43 = sub_1004A93D8(v25, 0xD000000000000010, 0x80000001007D6420, (unint64_t *)&qword_100909FB0);
  swift_bridgeObjectRelease();
  id v26 = [v3 consequent];
  uint64_t v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v42 = sub_1004A93D8(v27, 0xD000000000000010, 0x80000001007D6420, (unint64_t *)&qword_100909FB0);
  swift_bridgeObjectRelease();
  id v28 = [v3 antecedent];
  uint64_t v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v30 = sub_1004A93D8(v29, 0xD000000000000014, 0x80000001007D6400, (unint64_t *)&unk_100910040);
  swift_bridgeObjectRelease();
  id v31 = [v3 consequent];
  uint64_t v32 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v33 = sub_1004A93D8(v32, 0xD000000000000014, 0x80000001007D6400, (unint64_t *)&unk_100910040);
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if (v51 <= 1 && v50 <= 1)
  {
    uint64_t result = 0;
    BOOL v34 = v51 <= 0 || v50 <= 0;
    if (v34 && v49 <= 1 && v48 <= 1)
    {
      uint64_t result = 0;
      BOOL v35 = v49 <= 0 || v48 <= 0;
      if (v35 && v47 <= 1 && v46 <= 1)
      {
        uint64_t result = 0;
        BOOL v36 = v47 <= 0 || v46 <= 0;
        if (v36 && v45 <= 1 && v44 <= 1)
        {
          uint64_t result = 0;
          BOOL v37 = v45 <= 0 || v44 <= 0;
          if (v37 && v43 <= 1 && v42 <= 1)
          {
            uint64_t result = 0;
            BOOL v38 = v43 <= 0 || v42 <= 0;
            if (v38 && v30 <= 1 && v33 <= 1)
            {
              if (v33 >= 1 && v30 > 0) {
                return 0;
              }
              double v39 = *v41;
              [v3 support];
              if (v40 >= v39) {
                double v40 = v39;
              }
              *unint64_t v41 = v40;
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1004B5284(unint64_t *a1, uint64_t a2, uint64_t a3, double *a4)
{
  int64_t v7 = 0;
  uint64_t v8 = a3 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a3 + 56);
  uint64_t v21 = 0;
  int64_t v22 = (unint64_t)(v9 + 63) >> 6;
  while (v11)
  {
    unint64_t v12 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v13 = v12 | (v7 << 6);
LABEL_17:
    id v23 = *(id *)(*(void *)(a3 + 48) + 8 * v13);
    id v17 = v23;
    char v18 = sub_1004B4B0C(&v23, a4);

    if (v4) {
      return;
    }
    if (v18)
    {
      *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      BOOL v14 = __OFADD__(v21++, 1);
      if (v14) {
        goto LABEL_30;
      }
    }
  }
  BOOL v14 = __OFADD__(v7++, 1);
  if (v14)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v22) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v7);
  if (v15)
  {
LABEL_16:
    unint64_t v11 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v7 << 6);
    goto LABEL_17;
  }
  int64_t v16 = v7 + 1;
  if (v7 + 1 >= v22) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15) {
    goto LABEL_15;
  }
  int64_t v16 = v7 + 2;
  if (v7 + 2 >= v22) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15) {
    goto LABEL_15;
  }
  int64_t v16 = v7 + 3;
  if (v7 + 3 >= v22)
  {
LABEL_26:
    swift_retain();
    sub_10024090C(a1, a2, v21, a3);
    return;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15)
  {
LABEL_15:
    int64_t v7 = v16;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v7 >= v22) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v8 + 8 * v7);
    ++v16;
    if (v15) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_1004B546C(uint64_t a1, void *a2, double *a3)
{
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  uint64_t v10 = (void *)isStackAllocationSafe;
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    unint64_t v11 = (char *)&v19 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v11, 8 * v8);
    id v12 = v10;
    sub_1004B5284((unint64_t *)v11, v8, a1, a3);
    uint64_t v14 = v13;
    swift_release();

    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    unint64_t v15 = (void *)swift_slowAlloc();
    bzero(v15, 8 * v8);
    id v16 = v10;
    sub_1004B5284((unint64_t *)v15, v8, a1, a3);
    uint64_t v14 = v17;
    swift_release();

    swift_slowDealloc();
  }
  return v14;
}

Swift::Int sub_1004B5624(uint64_t a1)
{
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v4 = v1;
  uint64_t v5 = swift_bridgeObjectRetain();
  Swift::Int v6 = sub_1004B3000(v5, v4, (double *)&v19);
  Swift::Int v7 = v6;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = __CocoaSet.count.getter();
    unint64_t v9 = v7 & 0xC000000000000001;
    if ((v7 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v6 & 0xC000000000000001;
    if ((v6 & 0xC000000000000001) != 0)
    {
LABEL_3:
      uint64_t v10 = __CocoaSet.count.getter();
      uint64_t v11 = v8 - v10;
      if (!__OFSUB__(v8, v10)) {
        goto LABEL_4;
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
  }
  uint64_t v17 = *(void *)(v7 + 16);
  uint64_t v11 = v8 - v17;
  if (__OFSUB__(v8, v17)) {
    goto LABEL_13;
  }
LABEL_4:
  id v12 = (char *)v4 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_metrics;
  uint64_t v13 = *(uint64_t *)((char *)&v4[1].isa + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_metrics);
  BOOL v14 = __OFADD__(v13, v11);
  uint64_t v15 = v13 + v11;
  if (v14)
  {
    __break(1u);
    goto LABEL_19;
  }
  *((void *)v12 + 1) = v15;
  *((void *)v12 + 2) = v19;
  if (qword_100907690 != -1) {
LABEL_19:
  }
    swift_once();
  uint64_t v16 = type metadata accessor for Logger();
  sub_10008E2DC(v16, (uint64_t)qword_10091A890);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v4 = Logger.logObject.getter();
  LOBYTE(v8) = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v4, (os_log_type_t)v8))
  {

    swift_release();
    swift_bridgeObjectRelease();
    return v7;
  }
  uint64_t v2 = swift_slowAlloc();
  *(_DWORD *)uint64_t v2 = 134218240;
  if ((a1 & 0xC000000000000001) != 0) {
    __CocoaSet.count.getter();
  }
LABEL_14:
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v2 + 12) = 2048;
  if (v9) {
    __CocoaSet.count.getter();
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, v4, (os_log_type_t)v8, "RDCoreBehaviorModel: Filtered rules {rules.count: %ld, filtered.count: %ld}", (uint8_t *)v2, 0x16u);
  swift_slowDealloc();

  return v7;
}

void sub_1004B5870()
{
  uint64_t v145 = type metadata accessor for Date();
  v153 = *(char **)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v152 = (char *)v133 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v133 - v3;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100910990);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100916EE0);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  id v12 = (char *)v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v133 - v14;
  unint64_t v155 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v138 = v0;
  uint64_t v142 = v0 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_trainingDataFrame;
  REMSuggestedAttributeInputDataFrame.index.getter();
  uint64_t v140 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v141 = v6 + 16;
  v140(v12, v8, v5);
  uint64_t v16 = sub_1000967F4(&qword_100916EF0, (uint64_t *)&unk_100910990);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v143 = v8;
  uint64_t v144 = v6 + 8;
  uint64_t v139 = v17;
  v17(v8, v5);
  uint64_t v18 = (uint64_t)v15;
  *(void *)&v12[*(int *)(v10 + 44)] = v154;
  sub_1004B6BB4((uint64_t)v12, (uint64_t)v15);
  uint64_t v19 = &v15[*(int *)(v10 + 44)];
  uint64_t v137 = OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_intentWords;
  uint64_t v20 = *(void *)v19;
  dispatch thunk of Collection.endIndex.getter();
  if (v20 == v154)
  {
LABEL_64:
    sub_1004B6C1C(v18);
    return;
  }
  uint64_t v21 = v145;
  uint64_t v136 = (void (**)(char *, char *, uint64_t))(v153 + 16);
  Swift::Int v134 = (void (**)(char *, uint64_t))(v153 + 8);
  v133[4] = 0x80000001007D6480;
  v133[3] = 0x80000001007D6460;
  v133[1] = 0x80000001007D6400;
  v133[5] = 0x80000001007D6420;
  v133[2] = 0x80000001007D63E0;
  v133[6] = 0x80000001007D6440;
  int64_t v22 = v152;
  v153 = v4;
  uint64_t v151 = v5;
  Swift::Int v135 = v15;
  uint64_t v148 = v16;
  uint64_t v150 = v19;
LABEL_5:
  uint64_t v27 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
  int64_t v29 = *v28;
  v27(&v154, 0);
  uint64_t v30 = v143;
  v140(v143, (char *)v18, v5);
  dispatch thunk of Collection.formIndex(after:)();
  v139(v30, v5);
  uint64_t v31 = REMSuggestedAttributeInputDataFrame.iloc(_:)();
  REMSuggestedAttributeInput.creationDate.getter();
  (*v136)(v22, v4, v21);
  uint64_t v147 = v31;
  REMSuggestedAttributeInput.list.getter();
  char v32 = REMSuggestedList.isValid.getter();
  swift_release();
  if (v32)
  {
    uint64_t v33 = self;
    NSString v34 = String._bridgeToObjectiveC()();
    sub_1000963CC(0, (unint64_t *)&unk_100910040);
    id v35 = [v33 taskSpecificItemWithIdentifier:v34 valueClass:swift_getObjCClassFromMetadata()];

    if (!v35) {
      goto LABEL_70;
    }
    REMSuggestedAttributeInput.list.getter();
    REMSuggestedList.listIdentifier.getter();
    swift_release();
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v37 = [self itemWithType:v35 stringValue:v36];

    id v38 = objc_allocWithZone((Class)BMEvent);
    id v39 = v37;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    Class v41 = Date._bridgeToObjectiveC()().super.isa;
    id v42 = [v38 initWithStartDate:isa endDate:v41 item:v39];

    id v43 = v42;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  int64_t v149 = v29;
  uint64_t v146 = REMSuggestedAttributeInput.location.getter();
  if (REMSuggestedLocation.isSpecificLocation.getter())
  {
    uint64_t v44 = self;
    NSString v45 = String._bridgeToObjectiveC()();
    sub_1000963CC(0, (unint64_t *)&unk_100910040);
    id v46 = [v44 taskSpecificItemWithIdentifier:v45 valueClass:swift_getObjCClassFromMetadata()];

    if (!v46) {
      goto LABEL_71;
    }
    swift_retain();
    dispatch thunk of ClassificationLabel.description.getter();
    swift_release();
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v48 = [self itemWithType:v46 stringValue:v47];

    id v49 = objc_allocWithZone((Class)BMEvent);
    id v50 = v48;
    Class v51 = Date._bridgeToObjectiveC()().super.isa;
    Class v52 = Date._bridgeToObjectiveC()().super.isa;
    id v53 = [v49 initWithStartDate:v51 endDate:v52 item:v50];

    id v54 = v53;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (!*(void *)(v138 + v137)) {
    goto LABEL_20;
  }
  BOOL v55 = self;
  swift_retain();
  NSString v56 = String._bridgeToObjectiveC()();
  sub_1000963CC(0, (unint64_t *)&unk_100910040);
  id v57 = [v55 taskSpecificItemWithIdentifier:v56 valueClass:swift_getObjCClassFromMetadata()];

  if (v57)
  {
    dispatch thunk of Series.iloc(_:)();
    NSString v58 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v59 = [self itemWithType:v57 stringValue:v58];

    id v60 = objc_allocWithZone((Class)BMEvent);
    id v61 = v59;
    Class v62 = Date._bridgeToObjectiveC()().super.isa;
    Class v63 = Date._bridgeToObjectiveC()().super.isa;
    id v64 = [v60 initWithStartDate:v62 endDate:v63 item:v61];

    id v65 = v64;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();

LABEL_20:
    REMSuggestedAttributeInput.dueDayOfWeek.getter();
    uint64_t v66 = REMSuggestedWeekDay.value.getter();
    swift_release();
    if ((unint64_t)(v66 - 8) >= 0xFFFFFFFFFFFFFFF9)
    {
      double v67 = self;
      NSString v68 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      id v69 = [v67 taskSpecificItemWithIdentifier:v68 valueClass:swift_getObjCClassFromMetadata()];

      if (!v69) {
        goto LABEL_72;
      }
      Class v70 = Int._bridgeToObjectiveC()().super.super.isa;
      id v71 = [self itemWithType:v69 numberValue:v70];

      id v72 = objc_allocWithZone((Class)BMEvent);
      id v73 = v71;
      Class v74 = Date._bridgeToObjectiveC()().super.isa;
      Class v75 = Date._bridgeToObjectiveC()().super.isa;
      id v76 = [v72 initWithStartDate:v74 endDate:v75 item:v73];

      id v77 = v76;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    if (REMSuggestedAttributeInput.flagged.getter())
    {
      uint64_t v78 = self;
      NSString v79 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      id v80 = [v78 taskSpecificItemWithIdentifier:v79 valueClass:swift_getObjCClassFromMetadata()];

      if (!v80) {
        goto LABEL_73;
      }
      Class v81 = NSNumber.init(integerLiteral:)(1).super.super.isa;
      id v82 = [self itemWithType:v80 numberValue:v81];

      id v83 = objc_allocWithZone((Class)BMEvent);
      id v84 = v82;
      Class v85 = Date._bridgeToObjectiveC()().super.isa;
      Class v86 = Date._bridgeToObjectiveC()().super.isa;
      id v87 = [v83 initWithStartDate:v85 endDate:v86 item:v84];

      id v88 = v87;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    if (REMSuggestedAttributeInput.priority.getter())
    {
      unint64_t v89 = self;
      NSString v90 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      id v91 = [v89 taskSpecificItemWithIdentifier:v90 valueClass:swift_getObjCClassFromMetadata()];

      if (!v91) {
        goto LABEL_69;
      }
      id v92 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:REMSuggestedAttributeInput.priority.getter()];
      id v93 = [self itemWithType:v91 numberValue:v92];

      id v94 = objc_allocWithZone((Class)BMEvent);
      id v95 = v93;
      Class v96 = Date._bridgeToObjectiveC()().super.isa;
      Class v97 = Date._bridgeToObjectiveC()().super.isa;
      id v98 = [v94 initWithStartDate:v96 endDate:v97 item:v95];

      id v99 = v98;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    uint64_t v100 = REMSuggestedAttributeInput.tags.getter();
    int64_t v101 = 0;
    uint64_t v102 = v100 + 56;
    uint64_t v103 = 1 << *(unsigned char *)(v100 + 32);
    if (v103 < 64) {
      uint64_t v104 = ~(-1 << v103);
    }
    else {
      uint64_t v104 = -1;
    }
    uint64_t v105 = v104 & *(void *)(v100 + 56);
    int64_t v149 = (unint64_t)(v103 + 63) >> 6;
    uint64_t v106 = v150;
    uint64_t v5 = v151;
    if (v105)
    {
LABEL_39:
      v105 &= v105 - 1;
      goto LABEL_54;
    }
    while (1)
    {
      int64_t v107 = v101 + 1;
      if (__OFADD__(v101, 1))
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        break;
      }
      if (v107 >= v149) {
        goto LABEL_59;
      }
      uint64_t v108 = *(void *)(v102 + 8 * v107);
      ++v101;
      if (!v108)
      {
        int64_t v101 = v107 + 1;
        if (v107 + 1 >= v149) {
          goto LABEL_59;
        }
        uint64_t v108 = *(void *)(v102 + 8 * v101);
        if (!v108)
        {
          int64_t v101 = v107 + 2;
          if (v107 + 2 >= v149) {
            goto LABEL_59;
          }
          uint64_t v108 = *(void *)(v102 + 8 * v101);
          if (!v108)
          {
            int64_t v109 = v107 + 3;
            if (v109 >= v149)
            {
LABEL_59:
              swift_release();
              REMSuggestedAttributeInput.contact.getter();
              if (REMSuggestedContact.isValid.getter())
              {
                uint64_t v121 = self;
                NSString v122 = String._bridgeToObjectiveC()();
                sub_1000963CC(0, (unint64_t *)&unk_100910040);
                id v123 = [v121 taskSpecificItemWithIdentifier:v122 valueClass:swift_getObjCClassFromMetadata()];

                uint64_t v124 = v145;
                if (!v123) {
                  goto LABEL_74;
                }
                swift_retain();
                dispatch thunk of ClassificationLabel.description.getter();
                swift_release();
                NSString v125 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                id v126 = [self itemWithType:v123 stringValue:v125];

                id v127 = objc_allocWithZone((Class)BMEvent);
                id v128 = v126;
                Class v129 = Date._bridgeToObjectiveC()().super.isa;
                Class v130 = Date._bridgeToObjectiveC()().super.isa;
                id v131 = [v127 initWithStartDate:v129 endDate:v130 item:v128];

                id v132 = v131;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                swift_release();

                uint64_t v106 = v150;
                uint64_t v5 = v151;
                uint64_t v21 = v124;
              }
              else
              {
                swift_release();
                uint64_t v21 = v145;
              }
              swift_release();
              swift_release();
              id v23 = *v134;
              int64_t v22 = v152;
              (*v134)(v152, v21);
              uint64_t v4 = v153;
              v23(v153, v21);
              uint64_t v24 = *(void *)v106;
              uint64_t v25 = (uint64_t)v135;
              dispatch thunk of Collection.endIndex.getter();
              BOOL v26 = v24 == v154;
              uint64_t v18 = v25;
              if (v26) {
                goto LABEL_64;
              }
              goto LABEL_5;
            }
            uint64_t v108 = *(void *)(v102 + 8 * v109);
            if (!v108)
            {
              while (1)
              {
                int64_t v101 = v109 + 1;
                if (__OFADD__(v109, 1)) {
                  goto LABEL_66;
                }
                if (v101 >= v149) {
                  goto LABEL_59;
                }
                uint64_t v108 = *(void *)(v102 + 8 * v101);
                ++v109;
                if (v108) {
                  goto LABEL_53;
                }
              }
            }
            int64_t v101 = v109;
          }
        }
      }
LABEL_53:
      uint64_t v105 = (v108 - 1) & v108;
LABEL_54:
      uint64_t v110 = self;
      swift_bridgeObjectRetain();
      NSString v111 = String._bridgeToObjectiveC()();
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      id v112 = [v110 taskSpecificItemWithIdentifier:v111 valueClass:swift_getObjCClassFromMetadata()];

      if (!v112) {
        goto LABEL_67;
      }
      NSString v113 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v114 = [self itemWithType:v112 stringValue:v113];

      id v115 = objc_allocWithZone((Class)BMEvent);
      id v116 = v114;
      Class v117 = Date._bridgeToObjectiveC()().super.isa;
      Class v118 = Date._bridgeToObjectiveC()().super.isa;
      id v119 = [v115 initWithStartDate:v117 endDate:v118 item:v116];

      id v120 = v119;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v106 = v150;
      uint64_t v5 = v151;
      if (v105) {
        goto LABEL_39;
      }
    }
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
}

uint64_t sub_1004B6BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100916EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004B6C1C(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100916EE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1004B6C7C()
{
  unint64_t result = qword_10091AA80;
  if (!qword_10091AA80)
  {
    sub_1000963CC(255, &qword_1009100C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091AA80);
  }
  return result;
}

unint64_t sub_1004B6CE4()
{
  unint64_t result = qword_10091AAA8;
  if (!qword_10091AAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091AAA8);
  }
  return result;
}

uint64_t sub_1004B6D38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004B6D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 != -1) {
    return sub_1002874C8(a1, a2, a3, a4, a5, a6, a7);
  }
  return a1;
}

uint64_t sub_1004B6D94(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 4:
      uint64_t result = swift_retain();
      break;
    case 1:
    case 2:
    case 5:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004B6DEC(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 4:
      uint64_t result = swift_release();
      break;
    case 1:
    case 2:
    case 5:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004B6E44()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();

  return _swift_deallocObject(v0, ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_1004B6F5C()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v0 + 16);
  unint64_t v7 = *(void **)(v0 + v3);
  uint64_t v8 = *(void **)(v0 + v4);
  uint64_t v9 = *(void *)(v0 + v5);
  uint64_t v10 = *(void *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1004AE128(v6, v0 + v2, v7, v8, v9, v10);
}

uint64_t sub_1004B7010(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004B7020()
{
  return swift_release();
}

uint64_t sub_1004B7028()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004B7060()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_1004B714C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void **)(v1 + v5);
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + v7);
  uint64_t v11 = *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1004AE47C(a1, v1 + v4, v8, v9, v10, v11);
}

uint64_t destroy for RDCoreBehaviorModel.Prediction(uint64_t a1)
{
  return sub_1002874C8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
}

uint64_t initializeWithCopy for RDCoreBehaviorModel.Prediction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_10028742C(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for RDCoreBehaviorModel.Prediction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_10028742C(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  char v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  sub_1002874C8(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for RDCoreBehaviorModel.Prediction(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  char v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  sub_1002874C8(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDCoreBehaviorModel.Prediction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDCoreBehaviorModel.Prediction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1004B7430(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t sub_1004B7438(uint64_t result, char a2)
{
  *(unsigned char *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDCoreBehaviorModel.Prediction()
{
  return &type metadata for RDCoreBehaviorModel.Prediction;
}

uint64_t destroy for RDCoreBehaviorModel.Context(uint64_t a1)
{
  return sub_1004B6DEC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s7remindd19RDCoreBehaviorModelC7ContextOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1004B6D94(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RDCoreBehaviorModel.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1004B6D94(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1004B6DEC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RDCoreBehaviorModel.Context(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1004B6DEC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDCoreBehaviorModel.Context(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xA) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDCoreBehaviorModel.Context(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 246;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDCoreBehaviorModel.Context()
{
  return &type metadata for RDCoreBehaviorModel.Context;
}

ValueMetadata *type metadata accessor for RDCoreBehaviorModel.Feedback()
{
  return &type metadata for RDCoreBehaviorModel.Feedback;
}

unint64_t sub_1004B75FC()
{
  unint64_t result = qword_10091AB50;
  if (!qword_10091AB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091AB50);
  }
  return result;
}

unint64_t sub_1004B7650()
{
  unint64_t result = qword_10091AB60;
  if (!qword_10091AB60)
  {
    sub_100096058(&qword_10091AB58);
    sub_1004B7778(&qword_10091AB68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091AB60);
  }
  return result;
}

unint64_t sub_1004B76E4()
{
  unint64_t result = qword_10091AB80;
  if (!qword_10091AB80)
  {
    sub_100096058(&qword_10091AB58);
    sub_1004B7778(&qword_10091AB88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091AB80);
  }
  return result;
}

uint64_t sub_1004B7778(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_10091AB70);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RDCoreBehaviorModel.Feedback.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004B78A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDCoreBehaviorModel.Feedback.CodingKeys()
{
  return &type metadata for RDCoreBehaviorModel.Feedback.CodingKeys;
}

unint64_t sub_1004B78E4()
{
  unint64_t result = qword_10091AB90;
  if (!qword_10091AB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091AB90);
  }
  return result;
}

unint64_t sub_1004B793C()
{
  unint64_t result = qword_10091AB98;
  if (!qword_10091AB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091AB98);
  }
  return result;
}

unint64_t sub_1004B7994()
{
  unint64_t result = qword_10091ABA0;
  if (!qword_10091ABA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091ABA0);
  }
  return result;
}

uint64_t sub_1004B79F0(uint64_t a1, uint64_t a2)
{
  int v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1004B7A44()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091AC10);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091AC10);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1004B7B0C()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_connectedToken;
  if (notify_is_valid_token(*(_DWORD *)&v0[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_connectedToken]))
  {
    notify_cancel(*(_DWORD *)&v0[v2]);
    *(_DWORD *)&v0[v2] = -1;
  }
  uint64_t v3 = OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_disconnectedToken;
  if (notify_is_valid_token(*(_DWORD *)&v0[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_disconnectedToken]))
  {
    notify_cancel(*(_DWORD *)&v0[v3]);
    *(_DWORD *)&v0[v3] = -1;
  }
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return [super dealloc];
}

void sub_1004B7CBC(void *a1)
{
  id v1 = a1;
  sub_1004B93C0(0x657463656E6E6F63, (void *)0xE900000000000064, (uint64_t)v1, (void (*)(uint64_t))sub_1004B7D28);
}

uint64_t sub_1004B7D28(char *a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  objc_super v5 = (uint64_t *)((char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100907698 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10091AC10);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Did receive vehicle connected notification", v9, 2u);
    swift_slowDealloc();
  }

  long long v10 = *(void **)&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue];
  void *v5 = v10;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v11 = v10;
  char v12 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v12)
  {
    sub_1000C0DE0(&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource], *(void *)&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource + 24]);
    uint64_t v14 = swift_retain();
    uint64_t v15 = sub_1003CBF90(v14);
    swift_release();
    int64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      NSString v36 = a1;
      id v38 = _swiftEmptyArrayStorage;
      sub_1001DE7B4(0, v16, 0);
      uint64_t v17 = v38;
      uint64_t v35 = v15;
      uint64_t v18 = (uint64_t *)(v15 + 48);
      do
      {
        uint64_t v19 = (void *)*(v18 - 2);
        uint64_t v20 = (void *)*(v18 - 1);
        uint64_t v37 = *v18;
        id v21 = v19;
        int64_t v22 = sub_100680208(v20);
        uint64_t v24 = v23;
        uint64_t v26 = v25;
        char v28 = v27;
        id v38 = v17;
        unint64_t v30 = v17[2];
        unint64_t v29 = v17[3];
        if (v30 >= v29 >> 1)
        {
          sub_1001DE7B4(v29 > 1, v30 + 1, 1);
          uint64_t v17 = v38;
        }
        v18 += 3;
        BOOL v31 = v37 != 1;
        v17[2] = v30 + 1;
        char v32 = &v17[5 * v30];
        v32[4] = v21;
        v32[5] = v22;
        v32[6] = v24;
        v32[7] = v26;
        *((unsigned char *)v32 + 64) = v28;
        *((unsigned char *)v32 + 65) = v31;
        *((unsigned char *)v32 + 66) = 0;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      a1 = v36;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = _swiftEmptyArrayStorage;
    }
    uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
    NSString v34 = a1;
    sub_1002286C0(v34, (uint64_t)v17, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004B8064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int out_token = -1;
  long long v10 = *(NSObject **)(v5 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue);
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v12 = (void *)swift_allocObject();
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = v11;
  v12[5] = a3;
  v12[6] = a4;
  v21[4] = sub_1004B98B0;
  v21[5] = v12;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_1004B79F0;
  v21[3] = &unk_1008C7D80;
  uint64_t v13 = _Block_copy(v21);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  uint64_t v14 = String.utf8CString.getter();
  uint32_t v15 = notify_register_dispatch((const char *)(v14 + 32), &out_token, v10, v13);
  swift_release();
  _Block_release(v13);
  if (v15)
  {
    if (qword_100907698 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_10091AC10);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 67109120;
      LODWORD(v21[0]) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to register notify handler. {status: %u}", v19, 8u);
      swift_slowDealloc();
    }
  }
  return out_token;
}

void sub_1004B82D4(void *a1)
{
  id v1 = a1;
  sub_1004B93C0(0x656E6E6F63736964, (void *)0xEC00000064657463, (uint64_t)v1, (void (*)(uint64_t))sub_1004B8344);
}

uint64_t sub_1004B8344(char *a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100907698 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10091AC10);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Did receive vehicle disconnected notification", v9, 2u);
    swift_slowDealloc();
  }

  long long v10 = *(void **)&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue];
  void *v5 = v10;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v11 = v10;
  char v12 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v12)
  {
    sub_1000C0DE0(&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource], *(void *)&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource + 24]);
    uint64_t v14 = swift_retain();
    uint64_t v15 = sub_1003CBF90(v14);
    swift_release();
    int64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      NSString v36 = a1;
      id v38 = _swiftEmptyArrayStorage;
      sub_1001DE7B4(0, v16, 0);
      uint64_t v17 = v38;
      uint64_t v35 = v15;
      os_log_type_t v18 = (uint64_t *)(v15 + 48);
      do
      {
        uint64_t v19 = (void *)*(v18 - 2);
        uint64_t v20 = (void *)*(v18 - 1);
        uint64_t v37 = *v18;
        id v21 = v19;
        int64_t v22 = sub_100680208(v20);
        uint64_t v24 = v23;
        uint64_t v26 = v25;
        char v28 = v27;
        id v38 = v17;
        unint64_t v30 = v17[2];
        unint64_t v29 = v17[3];
        if (v30 >= v29 >> 1)
        {
          sub_1001DE7B4(v29 > 1, v30 + 1, 1);
          uint64_t v17 = v38;
        }
        v18 += 3;
        BOOL v31 = v37 != 2;
        v17[2] = v30 + 1;
        char v32 = &v17[5 * v30];
        v32[4] = v21;
        v32[5] = v22;
        v32[6] = v24;
        v32[7] = v26;
        *((unsigned char *)v32 + 64) = v28;
        *((unsigned char *)v32 + 65) = v31;
        *((unsigned char *)v32 + 66) = 0;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      a1 = v36;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = _swiftEmptyArrayStorage;
    }
    uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
    NSString v34 = a1;
    sub_1002286C0(v34, (uint64_t)v17, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004B8680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v20 = a2;
  uint64_t v8 = type metadata accessor for REM_os_activity.Options();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for REM_os_activity();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1004B98D8((unint64_t *)&qword_1009108D0, 255, (void (*)(uint64_t))&type metadata accessor for REM_os_activity.Options);
  sub_100094134((uint64_t *)&unk_10091DD50);
  sub_10022491C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  REM_os_activity.init(_:dso:options:)();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v20;
  v13[3] = a3;
  uint64_t v14 = v21;
  uint64_t v15 = v22;
  v13[4] = a4;
  v13[5] = v14;
  v13[6] = v15;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1004B996C;
  *(void *)(v16 + 24) = v13;
  aBlock[4] = sub_10008F6F4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C7DF8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  REM_os_activity.apply(execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release();
  swift_release();
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v10) {
    __break(1u);
  }
  return result;
}

void sub_1004B8984(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (qword_100907698 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_10091AC10);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v15 = a4;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    v16[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, a2, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Did receive vehicle notification {name: %{public}s}", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v15;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    char v12 = Strong;
    a4();
  }
  else
  {
    char v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received vehicle change notification with nil producer", v14, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1004B8BF0(uint64_t a1, int a2)
{
  int v35 = a2;
  uint64_t v34 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  uint64_t v7 = (void *)((char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)&v2[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue];
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t, __n128))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  id v9 = v8;
  char v10 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if (v10)
  {
    uint64_t v33 = v2;
    sub_1000C0DE0(&v2[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource], *(void *)&v2[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource + 24]);
    uint64_t v12 = swift_retain();
    uint64_t v13 = sub_1003CBF90(v12);
    swift_release();
    int64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      uint64_t v37 = _swiftEmptyArrayStorage;
      sub_1001DE7B4(0, v14, 0);
      uint64_t v15 = v37;
      v32[1] = v13;
      uint64_t v16 = (void *)(v13 + 48);
      do
      {
        BOOL v36 = (v35 & 1) != 0 || *v16 != v34;
        uint64_t v17 = (void *)*(v16 - 1);
        id v18 = (id)*(v16 - 2);
        uint64_t v19 = sub_100680208(v17);
        uint64_t v21 = v20;
        uint64_t v23 = v22;
        char v25 = v24;
        uint64_t v37 = v15;
        unint64_t v27 = v15[2];
        unint64_t v26 = v15[3];
        if (v27 >= v26 >> 1)
        {
          sub_1001DE7B4(v26 > 1, v27 + 1, 1);
          uint64_t v15 = v37;
        }
        v15[2] = v27 + 1;
        char v28 = &v15[5 * v27];
        v28[4] = v18;
        v28[5] = v19;
        v28[6] = v21;
        v28[7] = v23;
        *((unsigned char *)v28 + 64) = v25;
        *(_WORD *)((char *)v28 + 65) = v36;
        v16 += 3;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = _swiftEmptyArrayStorage;
    }
    unint64_t v29 = v33;
    uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
    id v31 = v29;
    sub_1002286C0(v31, (uint64_t)v15, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for RDVehicleAlarmProducer()
{
  return self;
}

void sub_1004B8EE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_started))
  {
    if (qword_100907698 == -1)
    {
LABEL_4:
      uint64_t v9 = type metadata accessor for Logger();
      sub_10008E2DC(v9, (uint64_t)qword_10091AC10);
      char v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDVehicleAlarmProducer.start() must be called exactly once", v12, 2u);
        swift_slowDealloc();
      }

      return;
    }
LABEL_13:
    swift_once();
    goto LABEL_4;
  }
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_started) = 1;
  if (qword_100907698 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_10091AC10);
  int64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting RDVehicleAlarmProducer", v16, 2u);
    swift_slowDealloc();
  }

  *(_DWORD *)(v1 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_connectedToken) = sub_1004B8064(0xD000000000000025, 0x80000001007D6670, (uint64_t)sub_1004B7CBC, 0);
  *(_DWORD *)(v1 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_disconnectedToken) = sub_1004B8064(0xD000000000000028, 0x80000001007D66A0, (uint64_t)sub_1004B82D4, 0);
}

unint64_t sub_1004B9208()
{
  return 0xD000000000000016;
}

void sub_1004B9224()
{
}

uint64_t sub_1004B9248()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __n128 v3 = __chkstk_darwin(v1);
  uint64_t v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(*v0 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue);
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6) {
    return sub_1004B8BF0(0, 1);
  }
  __break(1u);
  return result;
}

uint64_t sub_1004B9368(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1004B98D8((unint64_t *)&unk_10091AC80, a2, (void (*)(uint64_t))type metadata accessor for RDVehicleAlarmProducer);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1004B93C0(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (qword_100907698 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10091AC10);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v11 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, (unint64_t)a2, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "os_transaction INIT {name: com.apple.remindd.RDVehicleAarmProducer.locationd.vehicle.notify.%{public}s}", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v22[0] = 0;
  v22[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(67);
  v12._object = (void *)0x80000001007D66D0;
  v12._countAndFlagsBits = 0xD000000000000041;
  String.append(_:)(v12);
  v13._countAndFlagsBits = a1;
  v13._object = a2;
  String.append(_:)(v13);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v14 = os_transaction_create();
  swift_release();
  if (v14)
  {
    a4(a3);
    swift_bridgeObjectRetain_n();
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a1, (unint64_t)a2, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "os_transaction RELEASE {name: com.apple.remindd.RDVehicleAarmProducer.locationd.vehicle.notify.%{public}s}", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v19 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, (os_log_type_t)v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a1, (unint64_t)a2, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v20, "RDVehicleAarmProducer: Couldn't create os_transaction_t for %{public}s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return ((uint64_t (*)(uint64_t))a4)(a3);
  }
}

uint64_t sub_1004B9874()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004B98B0(uint64_t a1)
{
  return sub_1004B8680(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1004B98C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004B98D0()
{
  return swift_release();
}

uint64_t sub_1004B98D8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004B9924()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1004B996C()
{
  sub_1004B8984(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void))(v0 + 40));
}

uint64_t sub_1004B997C()
{
  return _swift_deallocObject(v0, 32, 7);
}

ValueMetadata *_s34PersistentHistoryTruncationHandlerOMa_0()
{
  return &_s34PersistentHistoryTruncationHandlerON_0;
}

uint64_t sub_1004B99A4()
{
  id v1 = [v0 remObjectID];
  if (!v1) {
    return 7104878;
  }
  uint64_t v2 = v1;
  id v3 = [v1 description];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

uint64_t sub_1004B9A30()
{
  return sub_1004B99A4();
}

uint64_t sub_1004B9A54()
{
  id v1 = [*v0 remObjectID];
  if (!v1) {
    return 7104878;
  }
  uint64_t v2 = v1;
  id v3 = [v1 description];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

void sub_1004B9AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  sub_1004C6B44();
}

void sub_1004B9B28(char *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, unsigned char *a7, uint64_t a8)
{
  sub_1004C826C(a1, a4, a5, a6, a7, a8);
}

void sub_1004B9B84(void *a1, char a2, char a3, void *a4, NSObject *a5, void *a6, void *a7, char *a8)
{
  sub_1004C98C4(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1004B9BCC(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  sub_1004CFB34(a1, a4, a5, a6);
}

unint64_t sub_1004B9C28(char a1)
{
  return 0x4000200010000uLL >> (16 * a1);
}

void *sub_1004B9C44(void *a1, void *a2)
{
  id v4 = sub_1000C4D38(a1);
  if (v4)
  {
    uint64_t v5 = v4;
    self;
    uint64_t v6 = (void *)swift_dynamicCastObjCClass();
    if (!v6) {
  }
    }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned __int8 v7 = [a2 markedForDeletion];
  if (v6 && (v7 & 1) == 0)
  {
    id v8 = v6;
    id v9 = [v8 parentAccount];

    if (!v9)
    {
      id v10 = [v2 account];
      [v8 setParentAccount:v10];

      id v8 = v10;
    }
  }
  return v6;
}

uint64_t sub_1004B9D24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  sub_1004C1A54(a1, a4, a6, &v7);
  return v7;
}

id sub_1004B9D50()
{
  id v1 = [v0 remObjectID];
  if (!v1)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_10091AC90);
    id v6 = v0;
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      id v9 = (void *)swift_slowAlloc();
      *(_DWORD *)id v8 = 138412290;
      id v10 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v9 = v6;

      _os_log_impl((void *)&_mh_execute_header, v2, v7, "remObjectID is not defined for cdObject {cdObject: %@}", v8, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }
LABEL_17:

    return 0;
  }
  uint64_t v2 = v1;
  self;
  id v3 = (void *)swift_dynamicCastObjCClass();
  if (v3)
  {
    id v4 = [v3 remObjectID];
    if (!v4)
    {
LABEL_12:
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E2DC(v17, (uint64_t)qword_10091AC90);
      id v6 = v0;
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v21 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 138412290;
        id v22 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v21 = v6;

        _os_log_impl((void *)&_mh_execute_header, v18, v19, "accountID is not defined for cdObject {cdObject: %@}", v20, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return 0;
      }

      goto LABEL_17;
    }
  }
  else
  {
    id v11 = [v0 account];
    if (!v11) {
      goto LABEL_12;
    }
    Swift::String v12 = v11;
    id v4 = [v11 remObjectID];

    if (!v4) {
      goto LABEL_12;
    }
  }
  id v13 = objc_allocWithZone((Class)REMReplicaIDSource);
  id v14 = v4;
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [v13 initWithAccountID:v14 objectID:v2 property:v15];

  return v16;
}

unint64_t sub_1004BA150()
{
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  unsigned int v1 = [v0 markedForDeletion];
  BOOL v2 = v1 == 0;
  if (v1) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x707075736E75202CLL;
  v6._object = (void *)0xEE003D646574726FLL;
  String.append(_:)(v6);
  unsigned int v7 = [v0 isUnsupported];
  BOOL v8 = v7 == 0;
  if (v7) {
    uint64_t v9 = 1702195828;
  }
  else {
    uint64_t v9 = 0x65736C6166;
  }
  if (v8) {
    unint64_t v10 = 0xE500000000000000;
  }
  else {
    unint64_t v10 = 0xE400000000000000;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  return 0xD00000000000001FLL;
}

uint64_t sub_1004BA270()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091AC90);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091AC90);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1004BA338(void *a1, char a2)
{
  uint64_t v3 = (uint64_t)v2;
  if ((a2 & 1) == 0)
  {
    id v18 = [v2 getResolutionTokenMapFromRecord:a1];
    id v19 = v18;
    if (!v18)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_10091AC90);
      id v21 = a1;
      id v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136446466;
        uint64_t v25 = CKRecord.recordType.getter();
        sub_1000C51B8(v25, v26, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2082;
        id v27 = [v21 recordID];
        id v28 = [v27 ckShortDescription];

        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        sub_1000C51B8(v29, v31, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v19 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
    }
    id v49 = v18;
    uint64_t v32 = 0;
LABEL_17:
    uint64_t v3 = v32;
    while (v3 < 3)
    {
      int v35 = *((unsigned __int8 *)&off_1008B3248 + v3 + 32);
      if (*((unsigned char *)&off_1008B3248 + v3 + 32))
      {
        if (v35 == 1) {
          uint64_t v36 = 0x4E79616C70736944;
        }
        else {
          uint64_t v36 = 0x6574616C706D6554;
        }
        if (v35 == 1) {
          unint64_t v37 = 0xEB00000000656D61;
        }
        else {
          unint64_t v37 = 0xE800000000000000;
        }
        if (v35 == 1) {
          uint64_t v38 = 0x4E79616C70736964;
        }
        else {
          uint64_t v38 = 0x6574616C706D6574;
        }
      }
      else
      {
        uint64_t v38 = 0x6E6F697461657263;
        unint64_t v37 = 0xEC00000065746144;
        uint64_t v36 = 0x6E6F697461657243;
      }
      uint64_t v39 = CKRecord.subscript.getter();
      swift_unknownObjectRelease();
      if (v39
        || (id v40 = [a1 encryptedValues],
            NSString v41 = String._bridgeToObjectiveC()(),
            id v42 = [v40 objectForKeyedSubscript:v41],
            swift_unknownObjectRelease(),
            swift_unknownObjectRelease(),
            v41,
            v42))
      {
        NSString v33 = String._bridgeToObjectiveC()();
        id v34 = [v19 getTokenForKey:v33];

        if (!v34)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v43 = type metadata accessor for Logger();
          sub_10008E2DC(v43, (uint64_t)qword_10091AC90);
          swift_bridgeObjectRetain_n();
          uint64_t v44 = Logger.logObject.getter();
          os_log_type_t v45 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v44, v45))
          {
            uint64_t v46 = swift_slowAlloc();
            uint64_t v50 = swift_slowAlloc();
            *(_DWORD *)uint64_t v46 = 136446722;
            swift_bridgeObjectRetain();
            *(void *)(v46 + 4) = sub_1000C51B8(v38, v37, &v50);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v46 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v46 + 14) = sub_1000C51B8(v36, v37, &v50);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v46 + 22) = 2082;
            *(void *)(v46 + 24) = sub_1000C51B8(7104878, 0xE300000000000000, &v50);
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v46, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          uint64_t v32 = v3 + 1;
          NSString v47 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v19 initTokenWithDefaultValueIfNecessaryForKey:v47];

          if (v3 == 2)
          {
LABEL_41:

            return v19;
          }
          goto LABEL_17;
        }
      }
      ++v3;
      swift_bridgeObjectRelease_n();
      if (v3 == 3) {
        goto LABEL_41;
      }
    }
    __break(1u);
    goto LABEL_44;
  }
  sub_1004C2130(a1);
  id v5 = [v2 resolutionTokenMap];
  if (!v5)
  {
    if (qword_1009076A0 == -1)
    {
LABEL_4:
      uint64_t v6 = type metadata accessor for Logger();
      sub_10008E2DC(v6, (uint64_t)qword_10091AC90);
      id v7 = a1;
      BOOL v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136446466;
        uint64_t v11 = CKRecord.recordType.getter();
        sub_1000C51B8(v11, v12, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v10 + 12) = 2082;
        id v13 = [v7 recordID];
        id v14 = [v13 ckShortDescription];

        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v17 = v16;

        sub_1000C51B8(v15, v17, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return [(id)v3 createResolutionTokenMapIfNecessary];
    }
LABEL_44:
    swift_once();
    goto LABEL_4;
  }
  return v5;
}

id sub_1004BABB8(char *a1, char a2)
{
  NSString v3 = v2;
  unint64_t v4 = a1;
  if ((a2 & 1) == 0)
  {
    NSString v3 = [v2 getResolutionTokenMapFromRecord:a1];
    id v47 = v3;
    if (!v3)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E2DC(v17, (uint64_t)qword_10091AC90);
      id v18 = v4;
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        v49[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136446466;
        uint64_t v22 = CKRecord.recordType.getter();
        sub_1000C51B8(v22, v23, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 12) = 2082;
        id v24 = [v18 recordID];
        id v25 = [v24 ckShortDescription];

        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v28 = v27;

        sub_1000C51B8(v26, v28, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v47 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
    }
    id v48 = v4;
    uint64_t v29 = 0;
    id v46 = v3;
LABEL_17:
    unint64_t v4 = v29;
    while ((unint64_t)v4 < 0xE)
    {
      unint64_t v30 = v4 + 1;
      uint64_t v31 = 0x626D456567646162;
      unint64_t v32 = 0xEB000000006D656CLL;
      uint64_t v33 = 0x626D456567646142;
      unint64_t v34 = 0xEB000000006D656CLL;
      switch(*((unsigned char *)&off_1008B3310 + (void)v4 + 32))
      {
        case 1:
          uint64_t v31 = 0x726F6C6F63;
          unint64_t v32 = 0xE500000000000000;
          uint64_t v33 = 0x726F6C6F43;
          unint64_t v34 = 0xE500000000000000;
          break;
        case 2:
          uint64_t v31 = 0x61447265746C6966;
          uint64_t v33 = 0x61447265746C6946;
          unint64_t v32 = 0xEA00000000006174;
          unint64_t v34 = 0xEA00000000006174;
          break;
        case 3:
          goto LABEL_37;
        case 4:
          uint64_t v33 = 0xD000000000000028;
          unint64_t v34 = 0x80000001007C6BD0;
          int v35 = "TemplateIdentifier";
          goto LABEL_28;
        case 5:
          uint64_t v33 = 0xD000000000000022;
          unint64_t v34 = 0x80000001007C6C00;
          int v35 = "IsLinkedToAccount";
          goto LABEL_28;
        case 6:
          uint64_t v31 = 1701667182;
          unint64_t v32 = 0xE400000000000000;
          uint64_t v33 = 1701667150;
          unint64_t v34 = 0xE400000000000000;
          break;
        case 7:
          uint64_t v33 = 0xD000000000000011;
          unint64_t v32 = 0x80000001007CC9D0;
          unint64_t v34 = 0xED0000746E756F63;
          uint64_t v31 = 0x6341746E65726170;
          break;
        case 8:
          uint64_t v31 = 0x694C746E65726170;
          uint64_t v33 = 0x694C746E65726150;
          unint64_t v32 = 0xEA00000000007473;
          unint64_t v34 = 0xEA00000000007473;
          break;
        case 9:
          uint64_t v33 = 0xD000000000000018;
          unint64_t v34 = 0x80000001007C6C30;
          int v35 = "ShowingLargeAttachments";
LABEL_28:
          unint64_t v32 = (unint64_t)v35 | 0x8000000000000000;
          uint64_t v31 = v33;
          break;
        case 0xA:
          unint64_t v34 = 0x80000001007C6470;
          unint64_t v32 = 0x80000001007CC990;
          uint64_t v33 = 0xD000000000000017;
          uint64_t v31 = 0xD000000000000017;
          break;
        case 0xB:
          uint64_t v31 = 0x73694C7472616D73;
          uint64_t v33 = 0x73694C7472616D53;
          unint64_t v32 = 0xED00006570795474;
          unint64_t v34 = 0xED00006570795474;
          break;
        case 0xC:
          uint64_t v31 = 0x53676E6974726F73;
          uint64_t v33 = 0x53676E6974726F53;
          unint64_t v32 = 0xEC000000656C7974;
          unint64_t v34 = 0xEC000000656C7974;
          break;
        case 0xD:
          uint64_t v31 = 0x614464656E6E6970;
          unint64_t v32 = 0xEA00000000006574;
          uint64_t v33 = 0x614464656E6E6950;
          unint64_t v34 = 0xEA00000000006574;
          break;
        default:
          break;
      }
      uint64_t v36 = CKRecord.subscript.getter();
      swift_unknownObjectRelease();
      if (v36
        || (id v37 = [v48 encryptedValues],
            NSString v3 = String._bridgeToObjectiveC()(),
            id v38 = [v37 objectForKeyedSubscript:v3],
            swift_unknownObjectRelease(),
            swift_unknownObjectRelease(),
            v3,
            v38))
      {
        NSString v39 = String._bridgeToObjectiveC()();
        NSString v3 = [v47 getTokenForKey:v39];

        if (!v3)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v40 = type metadata accessor for Logger();
          sub_10008E2DC(v40, (uint64_t)qword_10091AC90);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          NSString v41 = Logger.logObject.getter();
          os_log_type_t v42 = static os_log_type_t.default.getter();
          NSString v3 = (NSString)v42;
          if (os_log_type_enabled(v41, v42))
          {
            uint64_t v43 = swift_slowAlloc();
            v49[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v43 = 136446722;
            swift_bridgeObjectRetain();
            *(void *)(v43 + 4) = sub_1000C51B8(v31, v34, v49);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v43 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v43 + 14) = sub_1000C51B8(v33, v32, v49);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v43 + 22) = 2082;
            *(void *)(v43 + 24) = sub_1000C51B8(7104878, 0xE300000000000000, v49);
            _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v3, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v43, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          uint64_t v29 = v4 + 1;
          NSString v44 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v47 initTokenWithDefaultValueIfNecessaryForKey:v44];

          if (v4 == (char *)13)
          {
LABEL_38:

            return v47;
          }
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_37:
      ++v4;
      if (v30 == (char *)14) {
        goto LABEL_38;
      }
    }
    __break(1u);
LABEL_48:
    swift_once();
    goto LABEL_4;
  }
  sub_1004C2598(a1);
  id v47 = [v2 resolutionTokenMap];
  if (v47) {
    return v47;
  }
  if (qword_1009076A0 != -1) {
    goto LABEL_48;
  }
LABEL_4:
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_10091AC90);
  uint64_t v6 = v4;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v10 = CKRecord.recordType.getter();
    sub_1000C51B8(v10, v11, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    id v12 = [v6 recordID];
    id v13 = [v12 ckShortDescription];

    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    sub_1000C51B8(v14, v16, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return [v3 createResolutionTokenMapIfNecessary];
}

id sub_1004BB730(char *a1, char a2)
{
  NSString v3 = v2;
  unint64_t v4 = a1;
  if ((a2 & 1) == 0)
  {
    NSString v3 = [v2 getResolutionTokenMapFromRecord:a1];
    id v48 = v3;
    if (!v3)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E2DC(v17, (uint64_t)qword_10091AC90);
      id v18 = v4;
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        v50[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136446466;
        uint64_t v22 = CKRecord.recordType.getter();
        sub_1000C51B8(v22, v23, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 12) = 2082;
        id v24 = [v18 recordID];
        id v25 = [v24 ckShortDescription];

        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v28 = v27;

        sub_1000C51B8(v26, v28, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v48 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
    }
    id v49 = v4;
    uint64_t v29 = 0;
    id v47 = v3;
LABEL_17:
    unint64_t v4 = v29;
    while ((unint64_t)v4 < 0x11)
    {
      unint64_t v30 = v4 + 1;
      uint64_t v31 = 0x626D456567646162;
      unint64_t v32 = 0xEB000000006D656CLL;
      uint64_t v33 = 0x626D456567646142;
      unint64_t v34 = 0xEB000000006D656CLL;
      switch(*((unsigned char *)&off_1008B34E8 + (void)v4 + 32))
      {
        case 1:
          uint64_t v31 = 0x726F6C6F63;
          unint64_t v32 = 0xE500000000000000;
          uint64_t v33 = 0x726F6C6F43;
          unint64_t v34 = 0xE500000000000000;
          break;
        case 2:
          uint64_t v31 = 0x6E6F697461657263;
          uint64_t v33 = 0x6E6F697461657243;
          unint64_t v32 = 0xEC00000065746144;
          unint64_t v34 = 0xEC00000065746144;
          break;
        case 3:
          uint64_t v33 = 0xD000000000000010;
          unint64_t v34 = 0x80000001007C68D0;
          int v35 = "LinkUpdateRequestDate";
          goto LABEL_32;
        case 4:
          goto LABEL_41;
        case 5:
          uint64_t v33 = 0xD000000000000028;
          unint64_t v34 = 0x80000001007C6BD0;
          int v35 = "TemplateIdentifier";
          goto LABEL_32;
        case 6:
          uint64_t v33 = 0xD000000000000025;
          unint64_t v34 = 0x80000001007C6C50;
          int v35 = "PublicLinkConfigurationData";
          goto LABEL_32;
        case 7:
          uint64_t v31 = 1701667182;
          unint64_t v32 = 0xE400000000000000;
          uint64_t v33 = 1701667150;
          unint64_t v34 = 0xE400000000000000;
          break;
        case 8:
          uint64_t v33 = 0xD000000000000011;
          unint64_t v32 = 0x80000001007CC9D0;
          unint64_t v34 = 0xED0000746E756F63;
          uint64_t v31 = 0x6341746E65726170;
          break;
        case 9:
          uint64_t v33 = 0xD00000000000001BLL;
          unint64_t v34 = 0x80000001007C6C80;
          int v35 = "PublicLinkCreationDate";
          goto LABEL_32;
        case 0xA:
          uint64_t v33 = 0xD000000000000016;
          unint64_t v34 = 0x80000001007C6CA0;
          int v35 = "PublicLinkLastModifiedDate";
          goto LABEL_32;
        case 0xB:
          unint64_t v34 = 0x80000001007C61A0;
          uint64_t v36 = " a non-nil String";
          goto LABEL_34;
        case 0xC:
          uint64_t v33 = 0xD00000000000001ALL;
          unint64_t v34 = 0x80000001007C6CC0;
          int v35 = "csInsensitiveHashtagLabels";
          goto LABEL_32;
        case 0xD:
          uint64_t v33 = 0xD000000000000011;
          unint64_t v34 = 0x80000001007C6170;
          int v35 = "\" {ckRecord.recordType: ";
LABEL_32:
          unint64_t v32 = (unint64_t)v35 | 0x8000000000000000;
          uint64_t v31 = v33;
          break;
        case 0xE:
          unint64_t v34 = 0x80000001007C6C30;
          uint64_t v36 = "ShowingLargeAttachments";
LABEL_34:
          unint64_t v32 = (unint64_t)v36 | 0x8000000000000000;
          uint64_t v33 = 0xD000000000000018;
          uint64_t v31 = 0xD000000000000018;
          break;
        case 0xF:
          uint64_t v31 = 0x53676E6974726F73;
          uint64_t v33 = 0x53676E6974726F53;
          unint64_t v32 = 0xEC000000656C7974;
          unint64_t v34 = 0xEC000000656C7974;
          break;
        case 0x10:
          uint64_t v31 = 0x694C656372756F73;
          uint64_t v33 = 0x694C656372756F53;
          unint64_t v32 = 0xEF4C525544497473;
          unint64_t v34 = 0xEF4C525544497473;
          break;
        default:
          break;
      }
      uint64_t v37 = CKRecord.subscript.getter();
      swift_unknownObjectRelease();
      if (v37
        || (id v38 = [v49 encryptedValues],
            NSString v3 = String._bridgeToObjectiveC()(),
            id v39 = [v38 objectForKeyedSubscript:v3],
            swift_unknownObjectRelease(),
            swift_unknownObjectRelease(),
            v3,
            v39))
      {
        NSString v40 = String._bridgeToObjectiveC()();
        NSString v3 = [v48 getTokenForKey:v40];

        if (!v3)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v41 = type metadata accessor for Logger();
          sub_10008E2DC(v41, (uint64_t)qword_10091AC90);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          os_log_type_t v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.default.getter();
          NSString v3 = (NSString)v43;
          if (os_log_type_enabled(v42, v43))
          {
            uint64_t v44 = swift_slowAlloc();
            v50[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v44 = 136446722;
            swift_bridgeObjectRetain();
            *(void *)(v44 + 4) = sub_1000C51B8(v31, v34, v50);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v44 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v44 + 14) = sub_1000C51B8(v33, v32, v50);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v44 + 22) = 2082;
            *(void *)(v44 + 24) = sub_1000C51B8(7104878, 0xE300000000000000, v50);
            _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v3, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v44, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          uint64_t v29 = v4 + 1;
          NSString v45 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v48 initTokenWithDefaultValueIfNecessaryForKey:v45];

          if (v4 == (char *)16)
          {
LABEL_42:

            return v48;
          }
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_41:
      ++v4;
      if (v30 == (char *)17) {
        goto LABEL_42;
      }
    }
    __break(1u);
LABEL_52:
    swift_once();
    goto LABEL_4;
  }
  sub_1004C2B84(a1);
  id v48 = [v2 resolutionTokenMap];
  if (v48) {
    return v48;
  }
  if (qword_1009076A0 != -1) {
    goto LABEL_52;
  }
LABEL_4:
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_10091AC90);
  uint64_t v6 = v4;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    v50[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v10 = CKRecord.recordType.getter();
    sub_1000C51B8(v10, v11, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    id v12 = [v6 recordID];
    id v13 = [v12 ckShortDescription];

    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    sub_1000C51B8(v14, v16, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return [v3 createResolutionTokenMapIfNecessary];
}

id sub_1004BC358(void *a1, char a2)
{
  NSString v3 = v2;
  unint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  uint64_t v10 = (char *)v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_1004C31F4(a1);
    id v108 = [v2 resolutionTokenMap];
    if (v108) {
      return v108;
    }
    if (qword_1009076A0 == -1) {
      goto LABEL_4;
    }
  }
  else
  {
    Class v85 = v10;
    id v22 = [v2 getResolutionTokenMapFromRecord:a1, v8];
    int64_t v107 = a1;
    id v108 = v22;
    if (!v22)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      sub_10008E2DC(v6, (uint64_t)qword_10091AC90);
      id v23 = a1;
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      int v26 = v25;
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v113 = swift_slowAlloc();
        uint64_t v115 = v113;
        *(_DWORD *)uint64_t v27 = 136446466;
        uint64_t v28 = CKRecord.recordType.getter();
        uint64_t v114 = sub_1000C51B8(v28, v29, &v115);
        LODWORD(v112) = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2082;
        uint64_t v111 = v27 + 14;
        id v30 = [v23 recordID];
        id v31 = [v30 ckShortDescription];

        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v34 = v33;

        uint64_t v114 = sub_1000C51B8(v32, v34, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v112, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        a1 = v107;
        swift_slowDealloc();
      }
      else
      {
      }
      id v108 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
    }
    uint64_t v35 = 21;
    unint64_t v83 = v6;
    id v82 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    Class v81 = (void (**)(char *, uint64_t))(v7 + 8);
    id v80 = &v115;
    id v36 = v22;
    NSString v3 = (void *)0xD00000000000001CLL;
    id v84 = v36;
    int v93 = 0;
    unint64_t v37 = 0;
    uint64_t v79 = 20;
    unint64_t v109 = (unint64_t)"SectionIDsOrderingAsData";
    uint64_t v113 = (uint64_t)"sectionIDsToUndelete";
    unint64_t v103 = (unint64_t)"ableOrderingAsset";
    unint64_t v104 = (unint64_t)"groceryLocalCorrectionsChecksum";
    unint64_t v101 = (unint64_t)"minimumSupportedVersion";
    unint64_t v102 = (unint64_t)"groceryLocalCorrectionsAsData";
    id v95 = "l";
    Class v96 = "difiedDate";
    unint64_t v99 = (unint64_t)"indersInSectionsChecksum";
    unint64_t v100 = (unint64_t)"indersInSectionsAsData";
    id v94 = "ableOrderingAsset";
    unint64_t v97 = (unint64_t)"lastUserAccessDate";
    unint64_t v98 = (unint64_t)"TemplateIdentifier";
    *(void *)&long long v38 = 136446722;
    long long v78 = v38;
    v77[1] = (char *)&type metadata for Any + 8;
    id v92 = "GroceryLocalCorrectionsAsData";
    id v91 = "hould never happen";
    NSString v90 = "TemplateIdentifier";
    unint64_t v89 = "IsLinkedToAccount";
    id v88 = "LastUserAccessDate";
    id v87 = "ShowingLargeAttachments";
    Class v86 = "ReminderIDsAsset";
    uint64_t v106 = 21;
    while (1)
    {
      unint64_t v39 = v37;
LABEL_22:
      if (v39 >= 0x15) {
        break;
      }
      uint64_t v42 = *((unsigned __int8 *)&off_1008B3710 + v39 + 32);
      unint64_t v43 = v39 + 1;
      unint64_t v6 = 0xD000000000000011;
      unint64_t v44 = 0xED0000746E756F63;
      unint64_t v45 = v109 | 0x8000000000000000;
      unint64_t v46 = 0x6341746E65726170;
      switch(*((unsigned char *)&off_1008B3710 + v39 + 32))
      {
        case 1:
          unint64_t v46 = 0x726F6C6F63;
          unint64_t v6 = 0x726F6C6F43;
          unint64_t v45 = 0xE500000000000000;
          unint64_t v44 = 0xE500000000000000;
          break;
        case 2:
        case 5:
        case 7:
        case 0xF:
        case 0x10:
        case 0x11:
          goto LABEL_21;
        case 3:
          unint64_t v6 = 0xD00000000000001FLL;
          unint64_t v44 = v102 | 0x8000000000000000;
          id v47 = &v122;
          goto LABEL_36;
        case 4:
          unint64_t v46 = 0x4C797265636F7267;
          unint64_t v6 = 0x4C797265636F7247;
          unint64_t v45 = 0xEF4449656C61636FLL;
          unint64_t v44 = 0xEF4449656C61636FLL;
          break;
        case 6:
          unint64_t v6 = 0xD000000000000012;
          unint64_t v44 = v101 | 0x8000000000000000;
          id v47 = &v121;
          goto LABEL_36;
        case 8:
          unint64_t v6 = 0xD000000000000028;
          unint64_t v44 = v100 | 0x8000000000000000;
          id v47 = &v120;
          goto LABEL_36;
        case 9:
          unint64_t v6 = 0xD000000000000022;
          unint64_t v44 = v99 | 0x8000000000000000;
          id v47 = &v119;
          goto LABEL_36;
        case 0xA:
          unint64_t v6 = 1701667150;
          unint64_t v45 = 0xE400000000000000;
          unint64_t v46 = 1701667182;
          unint64_t v44 = 0xE400000000000000;
          break;
        case 0xB:
          break;
        case 0xC:
          unint64_t v6 = 0x694C746E65726150;
          unint64_t v45 = 0xEA00000000007473;
          unint64_t v46 = 0x694C746E65726170;
          unint64_t v44 = 0xEA00000000007473;
          break;
        case 0xD:
          unint64_t v46 = 0x614464656E6E6970;
          unint64_t v6 = 0x614464656E6E6950;
          unint64_t v45 = 0xEA00000000006574;
          unint64_t v44 = 0xEA00000000006574;
          break;
        case 0xE:
          unint64_t v44 = v113 | 0x8000000000000000;
          id v48 = &v118;
          goto LABEL_38;
        case 0x12:
          unint64_t v6 = 0xD000000000000018;
          unint64_t v44 = v98 | 0x8000000000000000;
          id v47 = &v117;
LABEL_36:
          unint64_t v45 = *(v47 - 32) | 0x8000000000000000;
          unint64_t v46 = v6;
          break;
        case 0x13:
          unint64_t v44 = v97 | 0x8000000000000000;
          id v48 = &v116;
LABEL_38:
          unint64_t v45 = *(v48 - 32) | 0x8000000000000000;
          unint64_t v6 = 0xD00000000000001CLL;
          unint64_t v46 = 0xD00000000000001CLL;
          break;
        case 0x14:
          unint64_t v46 = 0x53676E6974726F73;
          unint64_t v6 = 0x53676E6974726F53;
          unint64_t v45 = 0xEC000000656C7974;
          unint64_t v44 = 0xEC000000656C7974;
          break;
        default:
          unint64_t v46 = 0x626D456567646162;
          unint64_t v6 = 0x626D456567646142;
          unint64_t v45 = 0xEB000000006D656CLL;
          unint64_t v44 = 0xEB000000006D656CLL;
          break;
      }
      unint64_t v110 = v46;
      uint64_t v49 = CKRecord.subscript.getter();
      swift_unknownObjectRelease();
      if (v49)
      {
        int v50 = 1;
      }
      else
      {
        id v51 = [a1 encryptedValues];
        NSString v52 = String._bridgeToObjectiveC()();
        uint64_t v53 = v42;
        id v54 = [v51 objectForKeyedSubscript:v52];
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        BOOL v55 = v54 == 0;
        uint64_t v42 = v53;
        int v50 = !v55;
      }
      LODWORD(v111) = v50;
      unint64_t v112 = v44;
      uint64_t v105 = v42;
      switch((int)v42)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 15:
        case 16:
        case 17:
        case 18:
        case 20:
          goto LABEL_47;
        case 14:
          goto LABEL_49;
        case 19:
          if ((v97 | 0x8000000000000000) == (v113 | 0x8000000000000000))
          {
LABEL_49:
            swift_bridgeObjectRelease();
          }
          else
          {
LABEL_47:
            char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v56 & 1) == 0)
            {
              NSString v3 = (void *)0xD00000000000001CLL;
              switch((int)v42)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                  char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v57) {
                    break;
                  }
                  a1 = v107;
                  if ((v111 & 1) == 0) {
                    goto LABEL_20;
                  }
                  goto LABEL_19;
                case 15:
                  goto LABEL_49;
                default:
                  goto LABEL_80;
              }
            }
          }
          a1 = v107;
          if ((v111 & 1) != 0 || (uint64_t v58 = CKRecord.subscript.getter(), swift_unknownObjectRelease(), v58))
          {
            swift_bridgeObjectRelease();
            NSString v3 = (void *)0xD00000000000001CLL;
          }
          else
          {
            id v59 = [a1 encryptedValues];
            NSString v60 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v61 = [v59 objectForKeyedSubscript:v60];
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();

            NSString v3 = (void *)0xD00000000000001CLL;
            if (!v61)
            {
LABEL_20:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v35 = v106;
LABEL_21:
              ++v39;
              if (v35 == v43) {
                goto LABEL_76;
              }
              goto LABEL_22;
            }
          }
LABEL_19:
          NSString v40 = String._bridgeToObjectiveC()();
          id v41 = [v108 getTokenForKey:v40];

          if (v41) {
            goto LABEL_20;
          }
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v62 = v83;
          uint64_t v63 = sub_10008E2DC(v83, (uint64_t)qword_10091AC90);
          id v64 = v85;
          (*v82)(v85, v63, v62);
          unint64_t v65 = v112;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v66, v67))
          {
            uint64_t v68 = swift_slowAlloc();
            uint64_t v111 = swift_slowAlloc();
            uint64_t v115 = v111;
            *(_DWORD *)uint64_t v68 = v78;
            swift_bridgeObjectRetain();
            uint64_t v114 = sub_1000C51B8(v110, v65, &v115);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v68 + 12) = 2082;
            swift_bridgeObjectRetain();
            uint64_t v114 = sub_1000C51B8(v6, v45, &v115);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v68 + 22) = 2082;
            if (sub_1002F6DF8(v105) == 0xD00000000000001CLL && v69 == (v113 | 0x8000000000000000))
            {
              swift_bridgeObjectRelease();
              uint64_t v70 = 0x7265646E696D6552;
              unint64_t v71 = 0xEB00000000734449;
            }
            else
            {
              char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              uint64_t v70 = 0x7265646E696D6552;
              unint64_t v71 = 0xEB00000000734449;
              if ((v72 & 1) == 0)
              {
                if (sub_1002F6DF8(v105) == 0xD000000000000021 && v73 == (v104 | 0x8000000000000000))
                {
                  swift_bridgeObjectRelease();
                  uint64_t v70 = 0xD000000000000010;
                  unint64_t v71 = v103 | 0x8000000000000000;
                }
                else
                {
                  char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v74) {
                    uint64_t v70 = 0xD000000000000010;
                  }
                  else {
                    uint64_t v70 = 7104878;
                  }
                  if (v74) {
                    unint64_t v71 = v103 | 0x8000000000000000;
                  }
                  else {
                    unint64_t v71 = 0xE300000000000000;
                  }
                }
              }
            }
            uint64_t v114 = sub_1000C51B8(v70, v71, &v115);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v66, v67, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v68, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*v81)(v85, v83);
            a1 = v107;
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            (*v81)(v64, v62);
          }
          unint64_t v37 = v39 + 1;
          NSString v75 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v108 initTokenWithDefaultValueIfNecessaryForKey:v75];

          int v93 = 1;
          uint64_t v35 = v106;
          if (v79 == v39)
          {
LABEL_76:

            return v108;
          }
          break;
        default:
LABEL_80:
          JUMPOUT(0);
      }
    }
    __break(1u);
  }
  swift_once();
LABEL_4:
  sub_10008E2DC(v6, (uint64_t)qword_10091AC90);
  id v11 = a1;
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v113 = swift_slowAlloc();
    uint64_t v115 = v113;
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v15 = CKRecord.recordType.getter();
    uint64_t v114 = sub_1000C51B8(v15, v16, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    id v17 = [v11 recordID];
    id v18 = [v17 ckShortDescription];

    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    uint64_t v114 = sub_1000C51B8(v19, v21, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return [v3 createResolutionTokenMapIfNecessary];
}

id sub_1004BD85C(char *a1, char a2)
{
  NSString v3 = v2;
  unint64_t v4 = a1;
  if (a2)
  {
    sub_1004C3848(a1);
    id v54 = [v2 resolutionTokenMap];
    if (!v54)
    {
      if (qword_1009076A0 != -1) {
        goto LABEL_67;
      }
      goto LABEL_4;
    }
    return v54;
  }
  NSString v3 = [v2 getResolutionTokenMapFromRecord:a1];
  id v54 = v3;
  if (!v3)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10091AC90);
    id v18 = v4;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446466;
      uint64_t v22 = CKRecord.recordType.getter();
      sub_1000C51B8(v22, v23, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2082;
      id v24 = [v18 recordID];
      id v25 = [v24 ckShortDescription];

      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v28 = v27;

      sub_1000C51B8(v26, v28, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v54 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  }
  BOOL v55 = v4;
  unint64_t v29 = 0;
  id v53 = v3;
LABEL_17:
  unint64_t v4 = v29;
  while ((unint64_t)v4 < 0x1B)
  {
    int v30 = *((unsigned __int8 *)&off_1008B39E8 + (void)v4 + 32);
    id v31 = v4 + 1;
    if (((1 << v30) & 0x5DBEBE6) != 0)
    {
      unint64_t v32 = 0xE600000000000000;
      unint64_t v33 = 0x7961446C6C41;
      uint64_t v34 = sub_100334B78(*((unsigned char *)&off_1008B39E8 + (void)v4 + 32));
      unint64_t v36 = v35;
      switch(v30)
      {
        case 2:
          unint64_t v33 = 0xD000000000000025;
          unint64_t v37 = "AlternativeDisplayDateDateForCalendar";
          goto LABEL_45;
        case 3:
          uint64_t v39 = 0x686361747441;
          goto LABEL_28;
        case 4:
          uint64_t v39 = 0x6E6769737341;
LABEL_28:
          unint64_t v33 = v39 & 0xFFFFFFFFFFFFLL | 0x656D000000000000;
          unint64_t v32 = 0xED0000734449746ELL;
          break;
        case 5:
          unint64_t v33 = 0x6574656C706D6F43;
          unint64_t v32 = 0xE900000000000064;
          break;
        case 6:
          unint64_t v32 = 0xEE00657461446E6FLL;
          uint64_t v40 = 0x656C706D6F43;
          goto LABEL_53;
        case 7:
          unint64_t v32 = 0xEE0073656C646E61;
          unint64_t v33 = 0x48746361746E6F43;
          break;
        case 8:
          unint64_t v32 = 0xEC00000065746144;
          unint64_t v33 = 0x6E6F697461657243;
          break;
        case 9:
          unint64_t v32 = 0xE700000000000000;
          unint64_t v33 = 0x65746144657544;
          break;
        case 10:
          goto LABEL_25;
        case 11:
          unint64_t v32 = 0xE700000000000000;
          unint64_t v33 = 0x64656767616C46;
          break;
        case 12:
          unint64_t v32 = 0xEA00000000007344;
          unint64_t v33 = 0x4967617468736148;
          break;
        case 13:
          unint64_t v33 = 0x6C7255736349;
          break;
        case 14:
          unint64_t v32 = 0xEF61746144534349;
          unint64_t v33 = 0x646574726F706D49;
          break;
        case 15:
          unint64_t v33 = 0xD000000000000010;
          unint64_t v37 = "LastModifiedDate";
          goto LABEL_45;
        case 16:
          unint64_t v32 = 0xE400000000000000;
          unint64_t v33 = 1953720652;
          break;
        case 17:
          uint64_t v41 = 0x447365746F4ELL;
          goto LABEL_49;
        case 18:
          uint64_t v42 = "NotesDocumentAsset";
          goto LABEL_51;
        case 19:
          unint64_t v32 = 0xEE007265646E696DLL;
          unint64_t v33 = 0x6552746E65726150;
          break;
        case 20:
          unint64_t v32 = 0xE800000000000000;
          unint64_t v33 = 0x797469726F697250;
          break;
        case 21:
          unint64_t v33 = 0xD000000000000011;
          unint64_t v37 = "RecurrenceRuleIDs";
LABEL_45:
          unint64_t v32 = (unint64_t)(v37 - 32) | 0x8000000000000000;
          break;
        case 22:
          unint64_t v32 = 0xE900000000000065;
          unint64_t v33 = 0x7461447472617453;
          break;
        case 23:
          unint64_t v32 = 0xE800000000000000;
          unint64_t v33 = 0x656E6F5A656D6954;
          break;
        case 24:
          uint64_t v41 = 0x44656C746954;
LABEL_49:
          unint64_t v33 = v41 & 0xFFFFFFFFFFFFLL | 0x636F000000000000;
          unint64_t v32 = 0xED0000746E656D75;
          break;
        case 25:
          uint64_t v42 = "TitleDocumentAsset";
LABEL_51:
          unint64_t v32 = (unint64_t)(v42 - 32) | 0x8000000000000000;
          unint64_t v33 = 0xD000000000000012;
          break;
        case 26:
          unint64_t v32 = 0xEC00000079746976;
          uint64_t v40 = 0x634172657355;
LABEL_53:
          unint64_t v33 = v40 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
          break;
        default:
          break;
      }
    }
    else
    {
      if (((1 << v30) & 0x2241019) != 0) {
        goto LABEL_19;
      }
      uint64_t v34 = sub_100334B78(10);
      unint64_t v36 = v38;
LABEL_25:
      unint64_t v33 = 0xD000000000000016;
      unint64_t v32 = 0x80000001007D1C00;
    }
    uint64_t v43 = CKRecord.subscript.getter();
    swift_unknownObjectRelease();
    if (v43
      || (id v44 = [v55 encryptedValues],
          NSString v3 = String._bridgeToObjectiveC()(),
          id v45 = [v44 objectForKeyedSubscript:v3],
          swift_unknownObjectRelease(),
          swift_unknownObjectRelease(),
          v3,
          v45))
    {
      NSString v46 = String._bridgeToObjectiveC()();
      NSString v3 = [v54 getTokenForKey:v46];

      if (!v3)
      {
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v47 = type metadata accessor for Logger();
        sub_10008E2DC(v47, (uint64_t)qword_10091AC90);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        id v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.default.getter();
        NSString v3 = (NSString)v49;
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = swift_slowAlloc();
          uint64_t v56 = swift_slowAlloc();
          *(_DWORD *)uint64_t v50 = 136446722;
          swift_bridgeObjectRetain();
          *(void *)(v50 + 4) = sub_1000C51B8(v34, v36, &v56);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v50 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v50 + 14) = sub_1000C51B8(v33, v32, &v56);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v50 + 22) = 2082;
          *(void *)(v50 + 24) = sub_1000C51B8(7104878, 0xE300000000000000, &v56);
          _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v3, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v50, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        unint64_t v29 = v4 + 1;
        NSString v51 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v54 initTokenWithDefaultValueIfNecessaryForKey:v51];

        if (v4 == (char *)26)
        {
LABEL_64:

          return v54;
        }
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    ++v4;
    if (v31 == (char *)27) {
      goto LABEL_64;
    }
  }
  __break(1u);
LABEL_67:
  swift_once();
LABEL_4:
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_10091AC90);
  unint64_t v6 = v4;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v10 = CKRecord.recordType.getter();
    sub_1000C51B8(v10, v11, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    id v12 = [v6 recordID];
    id v13 = [v12 ckShortDescription];

    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    sub_1000C51B8(v14, v16, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return [v3 createResolutionTokenMapIfNecessary];
}

id sub_1004BE430(void *a1, char a2)
{
  NSString v3 = v2;
  if ((a2 & 1) == 0)
  {
    id v18 = [v2 getResolutionTokenMapFromRecord:a1];
    id v19 = v18;
    if (!v18)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_10091AC90);
      id v21 = a1;
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136446466;
        uint64_t v25 = CKRecord.recordType.getter();
        sub_1000C51B8(v25, v26, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2082;
        id v27 = [v21 recordID];
        id v28 = [v27 ckShortDescription];

        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        sub_1000C51B8(v29, v31, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v19 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
    }
    id v48 = v18;
    NSString v3 = 0;
LABEL_17:
    uint64_t v32 = (uint64_t)v3;
    while (v32 < 3)
    {
      int v34 = *((unsigned __int8 *)&off_1008B3D80 + v32 + 32);
      if (*((unsigned char *)&off_1008B3D80 + v32 + 32))
      {
        if (v34 == 1) {
          uint64_t v35 = 0xD00000000000001DLL;
        }
        else {
          uint64_t v35 = 0x6574616C706D6554;
        }
        if (v34 == 1) {
          unint64_t v36 = 0x80000001007D20E0;
        }
        else {
          unint64_t v36 = 0xE800000000000000;
        }
        if (v34 == 1) {
          uint64_t v37 = 0xD00000000000001DLL;
        }
        else {
          uint64_t v37 = 0x6574616C706D6574;
        }
        if (v34 == 1) {
          unint64_t v38 = 0x80000001007C6E10;
        }
        else {
          unint64_t v38 = 0xE800000000000000;
        }
      }
      else
      {
        uint64_t v37 = 0x617461646174656DLL;
        unint64_t v36 = 0xE800000000000000;
        uint64_t v35 = 0x617461646174654DLL;
        unint64_t v38 = 0xE800000000000000;
      }
      uint64_t v39 = CKRecord.subscript.getter();
      swift_unknownObjectRelease();
      if (v39
        || (id v40 = [a1 encryptedValues],
            NSString v3 = String._bridgeToObjectiveC()(),
            id v41 = [v40 objectForKeyedSubscript:v3],
            swift_unknownObjectRelease(),
            swift_unknownObjectRelease(),
            v3,
            v41))
      {
        NSString v33 = String._bridgeToObjectiveC()();
        NSString v3 = [v19 getTokenForKey:v33];

        if (!v3)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v42 = type metadata accessor for Logger();
          sub_10008E2DC(v42, (uint64_t)qword_10091AC90);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v43 = Logger.logObject.getter();
          os_log_type_t v44 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v43, v44))
          {
            uint64_t v45 = swift_slowAlloc();
            uint64_t v49 = swift_slowAlloc();
            *(_DWORD *)uint64_t v45 = 136446722;
            swift_bridgeObjectRetain();
            *(void *)(v45 + 4) = sub_1000C51B8(v37, v38, &v49);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v45 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v45 + 14) = sub_1000C51B8(v35, v36, &v49);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v45 + 22) = 2082;
            *(void *)(v45 + 24) = sub_1000C51B8(7104878, 0xE300000000000000, &v49);
            _os_log_impl((void *)&_mh_execute_header, v43, v44, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v45, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          NSString v3 = (NSString)(v32 + 1);
          NSString v46 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v19 initTokenWithDefaultValueIfNecessaryForKey:v46];

          if (v32 == 2)
          {
LABEL_44:

            return v19;
          }
          goto LABEL_17;
        }
      }
      ++v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v32 == 3) {
        goto LABEL_44;
      }
    }
    __break(1u);
    goto LABEL_47;
  }
  sub_1004C3C5C(a1);
  id v5 = [v2 resolutionTokenMap];
  if (!v5)
  {
    if (qword_1009076A0 == -1)
    {
LABEL_4:
      uint64_t v6 = type metadata accessor for Logger();
      sub_10008E2DC(v6, (uint64_t)qword_10091AC90);
      id v7 = a1;
      os_log_type_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136446466;
        uint64_t v11 = CKRecord.recordType.getter();
        sub_1000C51B8(v11, v12, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v10 + 12) = 2082;
        id v13 = [v7 recordID];
        id v14 = [v13 ckShortDescription];

        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v17 = v16;

        sub_1000C51B8(v15, v17, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return [v3 createResolutionTokenMapIfNecessary];
    }
LABEL_47:
    swift_once();
    goto LABEL_4;
  }
  return v5;
}

id sub_1004BECDC(void *a1, char a2)
{
  uint64_t v3 = (uint64_t)v2;
  if ((a2 & 1) == 0)
  {
    id v18 = [v2 getResolutionTokenMapFromRecord:a1];
    id v19 = v18;
    if (!v18)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_10091AC90);
      id v21 = a1;
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136446466;
        uint64_t v25 = CKRecord.recordType.getter();
        sub_1000C51B8(v25, v26, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2082;
        id v27 = [v21 recordID];
        id v28 = [v27 ckShortDescription];

        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        sub_1000C51B8(v29, v31, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v19 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
    }
    id v49 = v18;
    uint64_t v32 = 0;
LABEL_17:
    uint64_t v3 = v32;
    while (v3 < 3)
    {
      int v35 = *((unsigned __int8 *)&off_1008B3E70 + v3 + 32);
      if (*((unsigned char *)&off_1008B3E70 + v3 + 32))
      {
        if (v35 == 1) {
          uint64_t v36 = 0x4E79616C70736944;
        }
        else {
          uint64_t v36 = 0x73694C7472616D53;
        }
        if (v35 == 1) {
          unint64_t v37 = 0xEB00000000656D61;
        }
        else {
          unint64_t v37 = 0xE900000000000074;
        }
        if (v35 == 1) {
          uint64_t v38 = 0x4E79616C70736964;
        }
        else {
          uint64_t v38 = 0x73694C7472616D73;
        }
      }
      else
      {
        uint64_t v38 = 0x6E6F697461657263;
        unint64_t v37 = 0xEC00000065746144;
        uint64_t v36 = 0x6E6F697461657243;
      }
      uint64_t v39 = CKRecord.subscript.getter();
      swift_unknownObjectRelease();
      if (v39
        || (id v40 = [a1 encryptedValues],
            NSString v41 = String._bridgeToObjectiveC()(),
            id v42 = [v40 objectForKeyedSubscript:v41],
            swift_unknownObjectRelease(),
            swift_unknownObjectRelease(),
            v41,
            v42))
      {
        NSString v33 = String._bridgeToObjectiveC()();
        id v34 = [v19 getTokenForKey:v33];

        if (!v34)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v43 = type metadata accessor for Logger();
          sub_10008E2DC(v43, (uint64_t)qword_10091AC90);
          swift_bridgeObjectRetain_n();
          os_log_type_t v44 = Logger.logObject.getter();
          os_log_type_t v45 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v44, v45))
          {
            uint64_t v46 = swift_slowAlloc();
            uint64_t v50 = swift_slowAlloc();
            *(_DWORD *)uint64_t v46 = 136446722;
            swift_bridgeObjectRetain();
            *(void *)(v46 + 4) = sub_1000C51B8(v38, v37, &v50);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v46 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v46 + 14) = sub_1000C51B8(v36, v37, &v50);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v46 + 22) = 2082;
            *(void *)(v46 + 24) = sub_1000C51B8(7104878, 0xE300000000000000, &v50);
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v46, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          uint64_t v32 = v3 + 1;
          NSString v47 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v19 initTokenWithDefaultValueIfNecessaryForKey:v47];

          if (v3 == 2)
          {
LABEL_41:

            return v19;
          }
          goto LABEL_17;
        }
      }
      ++v3;
      swift_bridgeObjectRelease_n();
      if (v3 == 3) {
        goto LABEL_41;
      }
    }
    __break(1u);
    goto LABEL_44;
  }
  sub_1004C40C0(a1);
  id v5 = [v2 resolutionTokenMap];
  if (!v5)
  {
    if (qword_1009076A0 == -1)
    {
LABEL_4:
      uint64_t v6 = type metadata accessor for Logger();
      sub_10008E2DC(v6, (uint64_t)qword_10091AC90);
      id v7 = a1;
      os_log_type_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136446466;
        uint64_t v11 = CKRecord.recordType.getter();
        sub_1000C51B8(v11, v12, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v10 + 12) = 2082;
        id v13 = [v7 recordID];
        id v14 = [v13 ckShortDescription];

        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v17 = v16;

        sub_1000C51B8(v15, v17, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return [(id)v3 createResolutionTokenMapIfNecessary];
    }
LABEL_44:
    swift_once();
    goto LABEL_4;
  }
  return v5;
}

id sub_1004BF560(void *a1, char a2)
{
  if (a2)
  {
    sub_1004C452C(a1);
    id v4 = [v2 resolutionTokenMap];
    if (v4)
    {
      return v4;
    }
    else
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_10008E2DC(v19, (uint64_t)qword_10091AC90);
      id v20 = a1;
      id v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446466;
        uint64_t v24 = CKRecord.recordType.getter();
        sub_1000C51B8(v24, v25, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2082;
        id v26 = [v20 recordID];
        id v27 = [v26 ckShortDescription];

        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v30 = v29;

        sub_1000C51B8(v28, v30, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return [v2 createResolutionTokenMapIfNecessary];
    }
  }
  else
  {
    id v6 = [v2 getResolutionTokenMapFromRecord:a1];
    id v5 = v6;
    if (!v6)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10008E2DC(v7, (uint64_t)qword_10091AC90);
      id v8 = a1;
      os_log_type_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136446466;
        uint64_t v12 = CKRecord.recordType.getter();
        sub_1000C51B8(v12, v13, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v11 + 12) = 2082;
        id v14 = [v8 recordID];
        id v15 = [v14 ckShortDescription];

        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v18 = v17;

        sub_1000C51B8(v16, v18, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v5 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
    }
    unint64_t v31 = self;
    id v32 = v6;
    id v33 = [v31 ckRecordKeyForMinimumSupportedVersion];
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;

    uint64_t v37 = CKRecord.subscript.getter();
    swift_unknownObjectRelease();
    if (!v37)
    {
      id v38 = [a1 encryptedValues];
      NSString v39 = String._bridgeToObjectiveC()();
      id v40 = [v38 objectForKeyedSubscript:v39];
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      if (!v40) {
        goto LABEL_18;
      }
    }
    NSString v41 = String._bridgeToObjectiveC()();
    id v42 = [v5 getTokenForKey:v41];

    if (!v42)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      sub_10008E2DC(v43, (uint64_t)qword_10091AC90);
      swift_bridgeObjectRetain();
      os_log_type_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136446722;
        *(void *)(v46 + 4) = sub_1000C51B8(0xD000000000000017, 0x80000001007C63B0, &v49);
        *(_WORD *)(v46 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v46 + 14) = sub_1000C51B8(v34, v36, &v49);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v46 + 22) = 2082;
        *(void *)(v46 + 24) = sub_1000C51B8(7104878, 0xE300000000000000, &v49);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v46, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      NSString v47 = String._bridgeToObjectiveC()();
      [v5 initTokenWithDefaultValueIfNecessaryForKey:v47];
    }
    else
    {
LABEL_18:
      swift_bridgeObjectRelease();
    }
  }
  return v5;
}

id sub_1004BFD28(void *a1, char a2)
{
  uint64_t v3 = v2;
  if ((a2 & 1) == 0)
  {
    id v18 = [v2 getResolutionTokenMapFromRecord:a1];
    id v19 = v18;
    if (!v18)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_10091AC90);
      id v21 = a1;
      os_log_type_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136446466;
        uint64_t v25 = CKRecord.recordType.getter();
        sub_1000C51B8(v25, v26, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2082;
        id v27 = [v21 recordID];
        id v28 = [v27 ckShortDescription];

        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        sub_1000C51B8(v29, v31, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v19 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
    }
    id v49 = v18;
    id v32 = 0;
LABEL_17:
    uint64_t v3 = v32;
    while ((unint64_t)v3 < 4)
    {
      unint64_t v35 = v3 + 1;
      uint64_t v36 = 0x6E6F697461657263;
      unint64_t v37 = 0xEC00000065746144;
      uint64_t v38 = 0x6E6F697461657243;
      switch(*((unsigned char *)&off_1008B3FC0 + (void)v3 + 32))
      {
        case 1:
          uint64_t v36 = 0x4E79616C70736964;
          unint64_t v37 = 0xEB00000000656D61;
          uint64_t v38 = 0x4E79616C70736944;
          break;
        case 2:
          uint64_t v36 = 0x6163696E6F6E6163;
          unint64_t v37 = 0xED0000656D614E6CLL;
          uint64_t v38 = 0x6163696E6F6E6143;
          break;
        case 3:
          uint64_t v36 = 1953720684;
          unint64_t v37 = 0xE400000000000000;
          uint64_t v38 = 1953720652;
          break;
        default:
          break;
      }
      uint64_t v39 = CKRecord.subscript.getter();
      swift_unknownObjectRelease();
      if (v39
        || (id v40 = [a1 encryptedValues],
            NSString v41 = String._bridgeToObjectiveC()(),
            id v42 = [v40 objectForKeyedSubscript:v41],
            swift_unknownObjectRelease(),
            swift_unknownObjectRelease(),
            v41,
            v42))
      {
        NSString v33 = String._bridgeToObjectiveC()();
        id v34 = [v19 getTokenForKey:v33];

        if (!v34)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v43 = type metadata accessor for Logger();
          sub_10008E2DC(v43, (uint64_t)qword_10091AC90);
          swift_bridgeObjectRetain_n();
          os_log_type_t v44 = Logger.logObject.getter();
          os_log_type_t v45 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v44, v45))
          {
            uint64_t v46 = swift_slowAlloc();
            uint64_t v50 = swift_slowAlloc();
            *(_DWORD *)uint64_t v46 = 136446722;
            swift_bridgeObjectRetain();
            *(void *)(v46 + 4) = sub_1000C51B8(v36, v37, &v50);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v46 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v46 + 14) = sub_1000C51B8(v38, v37, &v50);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v46 + 22) = 2082;
            *(void *)(v46 + 24) = sub_1000C51B8(7104878, 0xE300000000000000, &v50);
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v46, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          id v32 = v3 + 1;
          NSString v47 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v19 initTokenWithDefaultValueIfNecessaryForKey:v47];

          if (v3 == (char *)3)
          {
LABEL_34:

            return v19;
          }
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease_n();
      ++v3;
      if (v35 == (char *)4) {
        goto LABEL_34;
      }
    }
    __break(1u);
    goto LABEL_37;
  }
  sub_1004C48C4(a1);
  id v5 = [v2 resolutionTokenMap];
  if (!v5)
  {
    if (qword_1009076A0 == -1)
    {
LABEL_4:
      uint64_t v6 = type metadata accessor for Logger();
      sub_10008E2DC(v6, (uint64_t)qword_10091AC90);
      id v7 = a1;
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136446466;
        uint64_t v11 = CKRecord.recordType.getter();
        sub_1000C51B8(v11, v12, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v10 + 12) = 2082;
        id v13 = [v7 recordID];
        id v14 = [v13 ckShortDescription];

        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v17 = v16;

        sub_1000C51B8(v15, v17, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return [v3 createResolutionTokenMapIfNecessary];
    }
LABEL_37:
    swift_once();
    goto LABEL_4;
  }
  return v5;
}

id sub_1004C060C(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v89 = type metadata accessor for REMFeatureFlags();
  uint64_t v6 = *(void *)(v89 - 8);
  *(void *)&double v7 = __chkstk_darwin(v89).n128_u64[0];
  id v88 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_1004C4D68(a1);
    id v90 = [v3 resolutionTokenMap];
    if (!v90)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_10008E2DC(v9, (uint64_t)qword_10091AC90);
      id v10 = a1;
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        uint64_t v93 = swift_slowAlloc();
        v95[0] = v93;
        *(_DWORD *)uint64_t v13 = 136446466;
        uint64_t v14 = CKRecord.recordType.getter();
        uint64_t v94 = sub_1000C51B8(v14, v15, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v13 + 12) = 2082;
        id v16 = [v10 recordID];
        id v17 = [v16 ckShortDescription];

        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v20 = v19;

        uint64_t v94 = sub_1000C51B8(v18, v20, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v13, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return [v3 createResolutionTokenMapIfNecessary];
    }
  }
  else
  {
    id v21 = [v3 getResolutionTokenMapFromRecord:a1, v7];
    id v90 = v21;
    if (!v21)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10008E2DC(v22, (uint64_t)qword_10091AC90);
      id v23 = a1;
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        NSString v75 = a1;
        uint64_t v27 = v26;
        uint64_t v93 = swift_slowAlloc();
        v95[0] = v93;
        *(_DWORD *)uint64_t v27 = 136446466;
        uint64_t v28 = CKRecord.recordType.getter();
        uint64_t v94 = sub_1000C51B8(v28, v29, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2082;
        unint64_t v92 = v27 + 14;
        id v30 = [v23 recordID];
        id v31 = [v30 ckShortDescription];

        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v34 = v33;

        uint64_t v94 = sub_1000C51B8(v32, v34, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        a1 = v75;
        swift_slowDealloc();
      }
      else
      {
      }
      id v90 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
    }
    unint64_t v35 = &unk_1008B4000;
    uint64_t v36 = 10;
    unsigned int v85 = enum case for REMFeatureFlags.groceryMultilingual(_:);
    Class v86 = (void (**)(char *, uint64_t))(v6 + 8);
    id v87 = (void (**)(char *, void, uint64_t))(v6 + 104);
    unsigned int v84 = enum case for REMFeatureFlags.recentlyDeletedList(_:);
    id v74 = v21;
    LODWORD(v75) = 0;
    unint64_t v37 = 0;
    uint64_t v73 = 9;
    unint64_t v92 = (unint64_t)"DidFinishMigration";
    uint64_t v93 = (uint64_t)"";
    *(void *)&long long v38 = 136446722;
    long long v72 = v38;
    unint64_t v71 = (char *)&type metadata for Any + 8;
    unint64_t v82 = (unint64_t)"RecentlyDeletedInfoChecksum";
    unint64_t v83 = (unint64_t)"didChooseToMigrateLocally";
    id v80 = "ListIDsMergeableOrderingAsset";
    unint64_t v81 = (unint64_t)"smartListIDsToUndelete";
    long long v78 = "remindd.RDVehicleAlarmProducer";
    unint64_t v79 = (unint64_t)"LocalesInfoAsData";
    id v76 = "LocalesInfoChecksum";
    unint64_t v77 = (unint64_t)"recentlyDeletedInfoAsData";
    uint64_t v91 = 10;
    while (v37 < v35[22])
    {
      uint64_t v41 = v37++;
      unint64_t v42 = v93 | 0x8000000000000000;
      unint64_t v43 = v92 | 0x8000000000000000;
      uint64_t v44 = 0xD000000000000012;
      uint64_t v45 = 0xD000000000000012;
      switch(*((unsigned char *)&off_1008B40A0 + v41 + 32))
      {
        case 1:
          unint64_t v42 = v83 | 0x8000000000000000;
          unint64_t v43 = v82 | 0x8000000000000000;
          goto LABEL_31;
        case 2:
          uint64_t v44 = 0xD000000000000018;
          unint64_t v42 = v81 | 0x8000000000000000;
          unint64_t v46 = (unint64_t)v80;
          break;
        case 3:
        case 5:
        case 7:
        case 8:
          goto LABEL_20;
        case 4:
          uint64_t v45 = 0x44496E6F73726570;
          uint64_t v44 = 0x44496E6F73726550;
          unint64_t v43 = 0xEC000000746C6153;
          unint64_t v42 = 0xEC000000746C6153;
          goto LABEL_31;
        case 6:
          NSString v47 = v88;
          uint64_t v48 = v89;
          (*v87)(v88, v85, v89);
          char v49 = REMFeatureFlags.isEnabled.getter();
          uint64_t v50 = v47;
          unint64_t v35 = (void *)&unk_1008B4000;
          uint64_t v51 = v48;
          uint64_t v36 = v91;
          (*v86)(v50, v51);
          if ((v49 & 1) == 0) {
            goto LABEL_20;
          }
          uint64_t v44 = 0xD000000000000023;
          unint64_t v42 = v79 | 0x8000000000000000;
          unint64_t v46 = (unint64_t)v78;
          break;
        case 9:
          NSString v52 = v88;
          uint64_t v53 = v89;
          (*v87)(v88, v84, v89);
          char v54 = REMFeatureFlags.isEnabled.getter();
          BOOL v55 = v52;
          unint64_t v35 = &unk_1008B4000;
          uint64_t v56 = v53;
          uint64_t v36 = v91;
          (*v86)(v55, v56);
          if ((v54 & 1) == 0) {
            goto LABEL_20;
          }
          uint64_t v44 = 0xD00000000000001BLL;
          unint64_t v42 = v77 | 0x8000000000000000;
          unint64_t v46 = (unint64_t)v76;
          break;
        default:
          goto LABEL_31;
      }
      unint64_t v43 = v46 | 0x8000000000000000;
      uint64_t v45 = v44;
LABEL_31:
      uint64_t v57 = CKRecord.subscript.getter();
      swift_unknownObjectRelease();
      if (!v57)
      {
        id v58 = [a1 encryptedValues];
        id v59 = a1;
        NSString v60 = String._bridgeToObjectiveC()();
        id v61 = [v58 objectForKeyedSubscript:v60];
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        a1 = v59;
        unint64_t v35 = (void *)&unk_1008B4000;
        if (!v61) {
          goto LABEL_19;
        }
      }
      NSString v39 = String._bridgeToObjectiveC()();
      id v40 = [v90 getTokenForKey:v39];

      if (!v40)
      {
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v62 = type metadata accessor for Logger();
        sub_10008E2DC(v62, (uint64_t)qword_10091AC90);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.default.getter();
        int v65 = v64;
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v66 = swift_slowAlloc();
          HIDWORD(v70) = v65;
          NSString v75 = a1;
          uint64_t v67 = v66;
          v95[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v67 = v72;
          swift_bridgeObjectRetain();
          *(void *)(v67 + 4) = sub_1000C51B8(v45, v42, v95);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v67 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v67 + 14) = sub_1000C51B8(v44, v43, v95);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v67 + 22) = 2082;
          *(void *)(v67 + 24) = sub_1000C51B8(7104878, 0xE300000000000000, v95);
          _os_log_impl((void *)&_mh_execute_header, v63, BYTE4(v70), "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v67, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          a1 = v75;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v36 = v91;
        unint64_t v37 = v41 + 1;
        NSString v68 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v90 initTokenWithDefaultValueIfNecessaryForKey:v68];

        LODWORD(v75) = 1;
        if (v73 == v41) {
          goto LABEL_40;
        }
      }
      else
      {
LABEL_19:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v36 = v91;
LABEL_20:
        if (v36 == v37) {
          goto LABEL_40;
        }
      }
    }
    __break(1u);
LABEL_40:
  }
  return v90;
}

uint64_t sub_1004C1190(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *a8)
{
  return sub_1004C1278(a1, a2, a3, a4, a5, a6, a7, a8, (Class *)REMCRMergeableStringDocument_ptr, (uint64_t (*)(void))sub_10028B1B0, (SEL *)&selRef_mergedWithDocument_error_);
}

uint64_t sub_1004C1204(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *a8)
{
  return sub_1004C1278(a1, a2, a3, a4, a5, a6, a7, a8, (Class *)REMCRMergeableOrderedSet_ptr, (uint64_t (*)(void))sub_10028B1B0, (SEL *)&selRef_mergedOrderedSetWithOrderedSet_error_);
}

uint64_t sub_1004C1278(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *a8, Class *a9, uint64_t (*a10)(void), SEL *a11)
{
  uint64_t v12 = a2;
  if (a5 >> 60 == 15)
  {
    *a1 = 0;
    sub_100097E24(a2, a3);
  }
  else if (a3 >> 60 == 15)
  {
    *a1 = 0;
    sub_100097E38(a4, a5);
    return a4;
  }
  else
  {
    sub_100097E24(a2, a3);
    sub_100097E24(a4, a5);
    uint64_t v58 = a6;
    id v19 = sub_1004B9D50();
    if (v19)
    {
      unint64_t v20 = v19;
      id v59 = a1;
      id v21 = objc_allocWithZone(*a9);
      sub_100097E24(v12, a3);
      uint64_t v22 = v20;
      os_log_t log = (os_log_t)a10();
      sub_100097F20(v12, a3);

      id v29 = objc_allocWithZone(*a9);
      sub_100097E24(a4, a5);
      BOOL v55 = v22;
      id v30 = v22;
      uint64_t v41 = (void *)a10();
      sub_100097F20(a4, a5);
      char v54 = v30;

      id v61 = 0;
      id v42 = [log *a11:v41:&v61];
      id v43 = v61;
      if (v42)
      {
        uint64_t v44 = v42;
        *id v59 = v42;
        id v45 = v43;
        id v46 = v44;
        id v47 = [v46 serializedData];
        uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100097F20(a4, a5);
        sub_100097F20(v12, a3);

        return v48;
      }
      else
      {
        id v50 = v61;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_10008E2DC(v31, (uint64_t)qword_10091AC90);
        swift_bridgeObjectRetain();
        id v32 = a8;
        swift_errorRetain();
        swift_bridgeObjectRetain();
        id v33 = v32;
        swift_errorRetain();
        unint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v35))
        {
          os_log_type_t type = v35;
          uint64_t v36 = swift_slowAlloc();
          uint64_t v51 = (void *)swift_slowAlloc();
          id v61 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v36 = 136446722;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v58, a7, (uint64_t *)&v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v36 + 12) = 2112;
          id v37 = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v51 = v33;

          *(_WORD *)(v36 + 22) = 2082;
          swift_getErrorValue();
          uint64_t v38 = Error.localizedDescription.getter();
          sub_1000C51B8(v38, v39, (uint64_t *)&v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v34, type, "Unable to merge CR property from CKRecord into coredata object {key: %{public}s, cdObject: %@, error: %{public}s}", (uint8_t *)v36, 0x20u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_100097F20(a4, a5);
          swift_errorRelease();
          id v40 = v55;
        }
        else
        {

          sub_100097F20(a4, a5);
          swift_errorRelease();

          swift_bridgeObjectRelease_n();
          swift_errorRelease();
          swift_errorRelease();
          id v40 = v34;
        }

        *id v59 = 0;
      }
    }
    else
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E2DC(v23, (uint64_t)qword_10091AC90);
      swift_bridgeObjectRetain_n();
      id v24 = a8;
      os_log_type_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      loga = v25;
      if (os_log_type_enabled(v25, v26))
      {
        NSString v60 = a1;
        uint64_t v27 = swift_slowAlloc();
        uint64_t v53 = (void *)swift_slowAlloc();
        id v61 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136446466;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v58, a7, (uint64_t *)&v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v27 + 12) = 2112;
        id v28 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v53 = v24;

        _os_log_impl((void *)&_mh_execute_header, loga, v26, "Unable to merge CR property from CKRecord into coredata object because replicaIDSource isn't available {key: %{public}s, cdObject: %@}", (uint8_t *)v27, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100097F20(a4, a5);
        void *v60 = 0;
      }
      else
      {
        sub_100097F20(a4, a5);

        swift_bridgeObjectRelease_n();
        *a1 = 0;
      }
    }
  }
  return v12;
}

uint64_t sub_1004C1A54@<X0>(void *a1@<X0>, uint64_t a2@<X3>, char a3@<W5>, _OWORD *a4@<X8>)
{
  v32[3] = a2;
  id v33 = a4;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v32 - v10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  void v32[2] = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v16 = __chkstk_darwin(v15).n128_u64[0];
  uint64_t v18 = (char *)v32 - v17;
  if (a3)
  {
    id v19 = [a1 encryptedValues:v16];
    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = [v19 objectForKeyedSubscript:v20];
    swift_unknownObjectRelease();

    uint64_t v35 = (uint64_t)v21;
  }
  else
  {
    uint64_t v35 = CKRecord.subscript.getter();
  }
  sub_100094134((uint64_t *)&unk_10091AD28);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *id v33 = v34;
    return result;
  }
  if (!CKRecord.subscript.getter()) {
    goto LABEL_11;
  }
  self;
  uint64_t v23 = (void *)swift_dynamicCastObjCClass();
  if (!v23)
  {
    swift_unknownObjectRelease();
LABEL_11:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
LABEL_14:
    uint64_t result = sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E40);
LABEL_15:
    *id v33 = xmmword_10078EDC0;
    return result;
  }
  id v24 = [v23 fileURL];
  swift_unknownObjectRelease();
  if (v24)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v25 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, v25, 1, v12);
  sub_100096408((uint64_t)v8, (uint64_t)v11, (uint64_t *)&unk_100909E40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
  id v26 = [self defaultManager];
  URL.path.getter();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v28 = [v26 fileExistsAtPath:v27];

  if (!v28)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    goto LABEL_15;
  }
  uint64_t v29 = Data.init(contentsOf:options:)();
  id v30 = v33;
  *(void *)id v33 = v29;
  *((void *)v30 + 1) = v31;
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
}

void sub_1004C2130(void *a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0 && v29 == 1)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091AC90);
    id v4 = a1;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    uint64_t v7 = &off_100776000;
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      id v9 = [v4 recordID];
      id v10 = [v9 ckShortDescription];

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      sub_1000C51B8(v11, v13, &v29);
      uint64_t v7 = &off_100776000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v14 = [v1 createResolutionTokenMapIfNecessary];
    uint64_t v15 = 0;
    double v16 = &off_1008B3220;
    int v28 = *((void *)v7 + 394);
    uint64_t v17 = &selRef_resolveConflicts_error_;
    do
    {
      int v23 = *((unsigned __int8 *)v16 + v15 + 32);
      if (*((unsigned char *)v16 + v15 + 32))
      {
        if (v23 == 1) {
          uint64_t v24 = 0x4E79616C70736964;
        }
        else {
          uint64_t v24 = 0x6574616C706D6574;
        }
        if (v23 == 1) {
          unint64_t v25 = 0xEB00000000656D61;
        }
        else {
          unint64_t v25 = 0xE800000000000000;
        }
      }
      else
      {
        unint64_t v25 = 0xEC00000065746144;
        uint64_t v24 = 0x6E6F697461657263;
      }
      swift_bridgeObjectRetain_n();
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        id v18 = v14;
        id v19 = v17;
        NSString v20 = v16;
        uint64_t v21 = swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = v28;
        swift_bridgeObjectRetain();
        *(void *)(v21 + 4) = sub_1000C51B8(v24, v25, &v29);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        double v16 = v20;
        uint64_t v17 = v19;
        id v14 = v18;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      ++v15;
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v14 v17[79]:v22];
    }
    while (v15 != 3);
  }
}

void sub_1004C2598(void *a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v28 & 1) == 0 && v27 == 1)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091AC90);
    id v4 = a1;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      id v8 = [v4 recordID];
      id v9 = [v8 ckShortDescription];

      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v13 = [v1 createResolutionTokenMapIfNecessary];
    uint64_t v14 = 14;
    uint64_t v15 = &byte_1008B3330;
    double v16 = &selRef_resolveConflicts_error_;
    while (2)
    {
      int v17 = *v15++;
      unint64_t v18 = 0xEB000000006D656CLL;
      uint64_t v19 = 0x626D456567646162;
      switch(v17)
      {
        case 1:
          unint64_t v18 = 0xE500000000000000;
          uint64_t v19 = 0x726F6C6F63;
          goto LABEL_22;
        case 2:
          uint64_t v19 = 0x61447265746C6966;
          unint64_t v18 = 0xEA00000000006174;
          goto LABEL_22;
        case 3:
          goto LABEL_26;
        case 4:
          uint64_t v19 = 0xD000000000000028;
          unint64_t v18 = 0x80000001007C6BD0;
          goto LABEL_22;
        case 5:
          uint64_t v19 = 0xD000000000000022;
          unint64_t v18 = 0x80000001007C6C00;
          goto LABEL_22;
        case 6:
          unint64_t v18 = 0xE400000000000000;
          uint64_t v19 = 1701667182;
          goto LABEL_22;
        case 7:
          unint64_t v18 = 0xED0000746E756F63;
          uint64_t v19 = 0x6341746E65726170;
          goto LABEL_22;
        case 8:
          unint64_t v18 = 0xEA00000000007473;
          uint64_t v19 = 0x694C746E65726170;
          goto LABEL_22;
        case 9:
          uint64_t v19 = 0xD000000000000018;
          unint64_t v18 = 0x80000001007C6C30;
          goto LABEL_22;
        case 10:
          unint64_t v18 = 0x80000001007C6470;
          uint64_t v19 = 0xD000000000000017;
          goto LABEL_22;
        case 11:
          unint64_t v18 = 0xED00006570795474;
          uint64_t v19 = 0x73694C7472616D73;
          goto LABEL_22;
        case 12:
          unint64_t v18 = 0xEC000000656C7974;
          uint64_t v19 = 0x53676E6974726F73;
          goto LABEL_22;
        case 13:
          unint64_t v18 = 0xEA00000000006574;
          uint64_t v19 = 0x614464656E6E6970;
          goto LABEL_22;
        default:
LABEL_22:
          swift_bridgeObjectRetain_n();
          NSString v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v20, v21))
          {
            NSString v22 = v15;
            id v23 = v13;
            uint64_t v24 = v16;
            uint64_t v25 = swift_slowAlloc();
            uint64_t v27 = swift_slowAlloc();
            *(_DWORD *)uint64_t v25 = 136446210;
            swift_bridgeObjectRetain();
            *(void *)(v25 + 4) = sub_1000C51B8(v19, v18, &v27);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v25, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            double v16 = v24;
            id v13 = v23;
            uint64_t v15 = v22;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          NSString v26 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v13 v16[79]:v26];

LABEL_26:
          if (--v14) {
            continue;
          }

          break;
      }
      break;
    }
  }
}

void sub_1004C2B84(void *a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0 && v28 == 1)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091AC90);
    id v4 = a1;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      id v8 = [v4 recordID];
      id v9 = [v8 ckShortDescription];

      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v13 = [v1 createResolutionTokenMapIfNecessary];
    uint64_t v14 = 17;
    uint64_t v15 = &byte_1008B3508;
    double v16 = &selRef_resolveConflicts_error_;
    do
    {
      int v17 = *v15++;
      unint64_t v18 = 0xEB000000006D656CLL;
      uint64_t v19 = 0x626D456567646162;
      switch(v17)
      {
        case 1:
          unint64_t v18 = 0xE500000000000000;
          uint64_t v19 = 0x726F6C6F63;
          break;
        case 2:
          unint64_t v18 = 0xEC00000065746144;
          uint64_t v19 = 0x6E6F697461657263;
          break;
        case 3:
          uint64_t v19 = 0xD000000000000010;
          unint64_t v18 = 0x80000001007C68D0;
          break;
        case 4:
          goto LABEL_30;
        case 5:
          uint64_t v19 = 0xD000000000000028;
          unint64_t v18 = 0x80000001007C6BD0;
          break;
        case 6:
          uint64_t v19 = 0xD000000000000025;
          unint64_t v18 = 0x80000001007C6C50;
          break;
        case 7:
          unint64_t v18 = 0xE400000000000000;
          uint64_t v19 = 1701667182;
          break;
        case 8:
          unint64_t v18 = 0xED0000746E756F63;
          uint64_t v19 = 0x6341746E65726170;
          break;
        case 9:
          uint64_t v19 = 0xD00000000000001BLL;
          unint64_t v18 = 0x80000001007C6C80;
          break;
        case 10:
          uint64_t v19 = 0xD000000000000016;
          unint64_t v18 = 0x80000001007C6CA0;
          break;
        case 11:
          NSString v20 = "D";
          goto LABEL_23;
        case 12:
          uint64_t v19 = 0xD00000000000001ALL;
          unint64_t v18 = 0x80000001007C6CC0;
          break;
        case 13:
          uint64_t v19 = 0xD000000000000011;
          unint64_t v18 = 0x80000001007C6170;
          break;
        case 14:
          NSString v20 = "TemplateIdentifier";
LABEL_23:
          unint64_t v18 = (unint64_t)v20 | 0x8000000000000000;
          uint64_t v19 = 0xD000000000000018;
          break;
        case 15:
          unint64_t v18 = 0xEC000000656C7974;
          uint64_t v19 = 0x53676E6974726F73;
          break;
        case 16:
          unint64_t v18 = 0xEF4C525544497473;
          uint64_t v19 = 0x694C656372756F73;
          break;
        default:
          break;
      }
      swift_bridgeObjectRetain_n();
      os_log_type_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        id v23 = v15;
        id v24 = v13;
        uint64_t v25 = v16;
        uint64_t v26 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v26 + 4) = sub_1000C51B8(v19, v18, &v28);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        double v16 = v25;
        id v13 = v24;
        uint64_t v15 = v23;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      NSString v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v13 v16[79]:v27];

LABEL_30:
      --v14;
    }
    while (v14);
  }
}

void sub_1004C31F4(void *a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0 && v28 == 1)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091AC90);
    id v4 = a1;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      id v8 = [v4 recordID];
      id v9 = [v8 ckShortDescription];

      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v13 = [v1 createResolutionTokenMapIfNecessary];
    uint64_t v14 = 21;
    uint64_t v15 = &byte_1008B3730;
    double v16 = &selRef_resolveConflicts_error_;
    do
    {
      int v22 = *v15++;
      unint64_t v23 = 0xEB000000006D656CLL;
      uint64_t v24 = 0x626D456567646162;
      switch(v22)
      {
        case 1:
          unint64_t v23 = 0xE500000000000000;
          uint64_t v24 = 0x726F6C6F63;
          break;
        case 2:
        case 5:
        case 7:
        case 15:
        case 16:
        case 17:
          goto LABEL_11;
        case 3:
          uint64_t v24 = 0xD00000000000001FLL;
          unint64_t v23 = 0x80000001007C6D10;
          break;
        case 4:
          unint64_t v23 = 0xEF4449656C61636FLL;
          uint64_t v24 = 0x4C797265636F7267;
          break;
        case 6:
          uint64_t v24 = 0xD000000000000012;
          unint64_t v23 = 0x80000001007C63D0;
          break;
        case 8:
          uint64_t v24 = 0xD000000000000028;
          unint64_t v23 = 0x80000001007C6BD0;
          break;
        case 9:
          uint64_t v24 = 0xD000000000000022;
          unint64_t v23 = 0x80000001007C6C00;
          break;
        case 10:
          unint64_t v23 = 0xE400000000000000;
          uint64_t v24 = 1701667182;
          break;
        case 11:
          unint64_t v23 = 0xED0000746E756F63;
          uint64_t v24 = 0x6341746E65726170;
          break;
        case 12:
          unint64_t v23 = 0xEA00000000007473;
          uint64_t v24 = 0x694C746E65726170;
          break;
        case 13:
          uint64_t v24 = 0x614464656E6E6970;
          unint64_t v23 = 0xEA00000000006574;
          break;
        case 14:
          uint64_t v25 = "sectionIDsToUndelete";
          goto LABEL_26;
        case 18:
          uint64_t v24 = 0xD000000000000018;
          unint64_t v23 = 0x80000001007C6C30;
          break;
        case 19:
          uint64_t v25 = "lastUserAccessDate";
LABEL_26:
          unint64_t v23 = (unint64_t)v25 | 0x8000000000000000;
          uint64_t v24 = 0xD00000000000001CLL;
          break;
        case 20:
          unint64_t v23 = 0xEC000000656C7974;
          uint64_t v24 = 0x53676E6974726F73;
          break;
        default:
          break;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        int v17 = v15;
        id v18 = v13;
        uint64_t v19 = v16;
        uint64_t v20 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v20 + 4) = sub_1000C51B8(v24, v23, &v28);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        double v16 = v19;
        id v13 = v18;
        uint64_t v15 = v17;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v13 v16[79]:v21];

LABEL_11:
      --v14;
    }
    while (v14);
  }
}

void sub_1004C3848(void *a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0 && v25 == 1)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091AC90);
    id v4 = a1;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      id v8 = [v4 recordID];
      id v9 = [v8 ckShortDescription];

      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v13 = [v1 createResolutionTokenMapIfNecessary];
    uint64_t v14 = 27;
    uint64_t v15 = &byte_1008B3A08;
    do
    {
      char v19 = *v15++;
      char v18 = v19;
      if (((1 << v19) & 0x5DBEFE6) != 0)
      {
        uint64_t v20 = sub_100334B78(v18);
        unint64_t v22 = v21;
        swift_bridgeObjectRetain_n();
        unint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v16 = swift_slowAlloc();
          uint64_t v25 = swift_slowAlloc();
          *(_DWORD *)uint64_t v16 = 136446210;
          swift_bridgeObjectRetain();
          *(void *)(v16 + 4) = sub_1000C51B8(v20, v22, &v25);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v16, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        NSString v17 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v13 initTokenWithDefaultValueIfNecessaryForKey:v17];
      }
      --v14;
    }
    while (v14);
  }
}

void sub_1004C3C5C(void *a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0 && v29 == 1)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091AC90);
    id v4 = a1;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    uint64_t v7 = &off_100776000;
    if (os_log_type_enabled(v5, v6))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)id v8 = 136446210;
      id v9 = [v4 recordID];
      id v10 = [v9 ckShortDescription];

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      sub_1000C51B8(v11, v13, &v29);
      uint64_t v7 = &off_100776000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v14 = [v1 createResolutionTokenMapIfNecessary];
    uint64_t v15 = 0;
    uint64_t v16 = &off_1008B3D58;
    int v28 = *((void *)v7 + 394);
    NSString v17 = &selRef_resolveConflicts_error_;
    do
    {
      int v23 = *((unsigned __int8 *)v16 + v15 + 32);
      if (*((unsigned char *)v16 + v15 + 32))
      {
        if (v23 == 1) {
          uint64_t v24 = 0xD00000000000001DLL;
        }
        else {
          uint64_t v24 = 0x6574616C706D6574;
        }
        if (v23 == 1) {
          unint64_t v25 = 0x80000001007C6E10;
        }
        else {
          unint64_t v25 = 0xE800000000000000;
        }
      }
      else
      {
        unint64_t v25 = 0xE800000000000000;
        uint64_t v24 = 0x617461646174656DLL;
      }
      swift_bridgeObjectRetain_n();
      char v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        id v18 = v14;
        char v19 = v17;
        uint64_t v20 = v16;
        uint64_t v21 = swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = v28;
        swift_bridgeObjectRetain();
        *(void *)(v21 + 4) = sub_1000C51B8(v24, v25, &v29);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v16 = v20;
        NSString v17 = v19;
        id v14 = v18;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      ++v15;
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v14 v17[79]:v22];
    }
    while (v15 != 3);
  }
}

void sub_1004C40C0(void *a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0 && v29 == 1)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091AC90);
    id v4 = a1;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    uint64_t v7 = &off_100776000;
    if (os_log_type_enabled(v5, v6))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)id v8 = 136446210;
      id v9 = [v4 recordID];
      id v10 = [v9 ckShortDescription];

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      sub_1000C51B8(v11, v13, &v29);
      uint64_t v7 = &off_100776000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v14 = [v1 createResolutionTokenMapIfNecessary];
    uint64_t v15 = 0;
    uint64_t v16 = &off_1008B3E48;
    int v28 = *((void *)v7 + 394);
    NSString v17 = &selRef_resolveConflicts_error_;
    do
    {
      int v23 = *((unsigned __int8 *)v16 + v15 + 32);
      if (*((unsigned char *)v16 + v15 + 32))
      {
        if (v23 == 1) {
          uint64_t v24 = 0x4E79616C70736964;
        }
        else {
          uint64_t v24 = 0x73694C7472616D73;
        }
        if (v23 == 1) {
          unint64_t v25 = 0xEB00000000656D61;
        }
        else {
          unint64_t v25 = 0xE900000000000074;
        }
      }
      else
      {
        unint64_t v25 = 0xEC00000065746144;
        uint64_t v24 = 0x6E6F697461657263;
      }
      swift_bridgeObjectRetain_n();
      char v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        id v18 = v14;
        char v19 = v17;
        uint64_t v20 = v16;
        uint64_t v21 = swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = v28;
        swift_bridgeObjectRetain();
        *(void *)(v21 + 4) = sub_1000C51B8(v24, v25, &v29);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v16 = v20;
        NSString v17 = v19;
        id v14 = v18;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      ++v15;
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v14 v17[79]:v22];
    }
    while (v15 != 3);
  }
}

void sub_1004C452C(void *a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0 && v18 == 1)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091AC90);
    id v4 = a1;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      id v8 = [v4 recordID];
      id v9 = [v8 ckShortDescription];

      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_1000C51B8(v10, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v13 = [v1 createResolutionTokenMapIfNecessary];
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446210;
      *(void *)(v16 + 4) = sub_1000C51B8(0xD000000000000017, 0x80000001007C63B0, &v18);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    NSString v17 = String._bridgeToObjectiveC()();
    [v13 initTokenWithDefaultValueIfNecessaryForKey:v17];
  }
}

void sub_1004C48C4(void *a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0 && v29 == 1)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091AC90);
    id v4 = a1;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    uint64_t v7 = &off_100776000;
    if (os_log_type_enabled(v5, v6))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)id v8 = 136446210;
      id v9 = [v4 recordID];
      id v10 = [v9 ckShortDescription];

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      sub_1000C51B8(v11, v13, &v29);
      uint64_t v7 = &off_100776000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v14 = [v1 createResolutionTokenMapIfNecessary];
    uint64_t v15 = 0;
    uint64_t v16 = &off_1008B3F98;
    int v28 = *((void *)v7 + 394);
    NSString v17 = &selRef_resolveConflicts_error_;
    do
    {
      uint64_t v23 = *((unsigned __int8 *)v16 + v15++ + 32);
      unint64_t v24 = 0xEC00000065746144;
      uint64_t v25 = 0x6E6F697461657263;
      switch(v23)
      {
        case 1:
          unint64_t v24 = 0xEB00000000656D61;
          uint64_t v25 = 0x4E79616C70736964;
          break;
        case 2:
          unint64_t v24 = 0xED0000656D614E6CLL;
          uint64_t v25 = 0x6163696E6F6E6163;
          break;
        case 3:
          unint64_t v24 = 0xE400000000000000;
          uint64_t v25 = 1953720684;
          break;
        default:
          break;
      }
      swift_bridgeObjectRetain_n();
      char v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        id v18 = v14;
        char v19 = v17;
        uint64_t v20 = v16;
        uint64_t v21 = swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = v28;
        swift_bridgeObjectRetain();
        *(void *)(v21 + 4) = sub_1000C51B8(v25, v24, &v29);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v16 = v20;
        NSString v17 = v19;
        id v14 = v18;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v14 v17[79]:v22];
    }
    while (v15 != 4);
  }
}

void sub_1004C4D68(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v50 = type metadata accessor for REMFeatureFlags();
  uint64_t v4 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  char v49 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0 && v54 == 1)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    uint64_t v7 = sub_10008E2DC(v6, (uint64_t)qword_10091AC90);
    id v8 = a1;
    uint64_t v52 = v7;
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (_DWORD *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v54 = v51;
      _DWORD *v11 = 136446210;
      uint64_t v48 = (char *)(v11 + 1);
      unint64_t v12 = (uint8_t *)v11;
      id v13 = [v8 recordID];
      id v14 = v2;
      id v15 = [v13 ckShortDescription];

      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      uint64_t v2 = v14;
      uint64_t v53 = sub_1000C51B8(v16, v18, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v19 = [v2 createResolutionTokenMapIfNecessary];
    uint64_t v20 = 10;
    id v46 = (void (**)(char *, void, uint64_t))(v4 + 104);
    uint64_t v21 = &byte_1008B40C0;
    id v45 = (void (**)(char *, uint64_t))(v4 + 8);
    unsigned int v43 = enum case for REMFeatureFlags.recentlyDeletedList(_:);
    unsigned int v44 = enum case for REMFeatureFlags.groceryMultilingual(_:);
    uint64_t v48 = (char *)&type metadata for Any + 8;
    *(void *)&long long v22 = 136446210;
    long long v47 = v22;
    uint64_t v41 = "smartListIDsToUndelete";
    id v42 = "didChooseToMigrateLocally";
    unint64_t v39 = "recentlyDeletedInfoAsData";
    id v40 = "LocalesInfoAsData";
    do
    {
      int v26 = *v21++;
      unint64_t v27 = 0x80000001007C66C0;
      uint64_t v28 = 0xD000000000000012;
      switch(v26)
      {
        case 1:
          unint64_t v29 = (unint64_t)v42;
          break;
        case 2:
          uint64_t v28 = 0xD000000000000018;
          unint64_t v29 = (unint64_t)v41;
          break;
        case 3:
        case 5:
        case 7:
        case 8:
          goto LABEL_11;
        case 4:
          unint64_t v27 = 0xEC000000746C6153;
          uint64_t v28 = 0x44496E6F73726570;
          goto LABEL_21;
        case 6:
          uint64_t v31 = v49;
          uint64_t v30 = v50;
          (*v46)(v49, v44, v50);
          char v32 = REMFeatureFlags.isEnabled.getter();
          (*v45)(v31, v30);
          if ((v32 & 1) == 0) {
            goto LABEL_11;
          }
          uint64_t v28 = 0xD000000000000023;
          unint64_t v29 = (unint64_t)v40;
          break;
        case 9:
          long long v34 = v49;
          uint64_t v33 = v50;
          (*v46)(v49, v43, v50);
          char v35 = REMFeatureFlags.isEnabled.getter();
          (*v45)(v34, v33);
          if ((v35 & 1) == 0) {
            goto LABEL_11;
          }
          uint64_t v28 = 0xD00000000000001BLL;
          unint64_t v29 = (unint64_t)v39;
          break;
        default:
          goto LABEL_21;
      }
      unint64_t v27 = v29 | 0x8000000000000000;
LABEL_21:
      swift_bridgeObjectRetain_n();
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        uint64_t v51 = (uint64_t)v21;
        uint64_t v54 = v24;
        *(_DWORD *)uint64_t v23 = v47;
        swift_bridgeObjectRetain();
        *(void *)(v23 + 4) = sub_1000C51B8(v28, v27, &v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v23, 0xCu);
        swift_arrayDestroy();
        uint64_t v21 = (char *)v51;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v19 initTokenWithDefaultValueIfNecessaryForKey:v25];

LABEL_11:
      --v20;
    }
    while (v20);
  }
}

void static REMCDObject.mergeSystemProperties(into:from:)(void *a1, void *a2)
{
  if ([a1 respondsToSelector:"shouldUseResolutionTokenMapForMergingData"])
  {
    [a1 mergeDataRevertedLocallyMarkedForDeletion];
    [a1 mergeDataRefusedToMergeMarkedForDeletion];
    id v4 = a1;
    id v5 = a2;
    sub_1004CDEE8(v5, v4, v4, v5);
  }
  else
  {
    sub_1004CD528(a1, a2);
  }
}

void sub_1004C5570(void *a1, int a2, int a3, void *a4, void *a5, void *a6, unsigned char *a7)
{
  unint64_t v104 = a5;
  uint64_t v105 = a7;
  int64_t v107 = a6;
  int v108 = a3;
  int v103 = a2;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  unint64_t v109 = a1;
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v114 & 1) != 0 || v113 != 1)
  {
    id v111 = sub_1004BA338(v109, 0);
    unint64_t v102 = a4;
    if (v18)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      if ((v114 & 1) == 0 && v113 == 1 && [a4 markedForDeletion])
      {
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v19 = type metadata accessor for Logger();
        sub_10008E2DC(v19, (uint64_t)qword_10091AC90);
        uint64_t v20 = v109;
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc();
          uint64_t v113 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136446466;
          uint64_t v24 = CKRecord.recordType.getter();
          unint64_t v112 = (ValueMetadata *)sub_1000C51B8(v24, v25, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v23 + 12) = 2082;
          id v26 = [v20 recordID];
          id v27 = [v26 ckShortDescription];

          uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v30 = v29;

          unint64_t v112 = (ValueMetadata *)sub_1000C51B8(v28, v30, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          a4 = v102;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v23, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      else
      {
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_10008E2DC(v31, (uint64_t)qword_10091AC90);
        char v32 = v109;
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          uint64_t v113 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 136446466;
          uint64_t v36 = CKRecord.recordType.getter();
          unint64_t v112 = (ValueMetadata *)sub_1000C51B8(v36, v37, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v35 + 12) = 2082;
          id v38 = [v32 recordID];
          id v39 = [v38 ckShortDescription];

          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;

          unint64_t v112 = (ValueMetadata *)sub_1000C51B8(v40, v42, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          a4 = v102;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v35, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        [a4 updateChangeCount];
      }
    }
    if ([a4 shouldPerformCloudSchemaCatchUpSync])
    {
      id v43 = [a4 storeControllerManagedObjectContext];
      if (v43)
      {
        unsigned int v44 = v43;
        id v45 = [a4 accountCKIdentifier];
        if (v45)
        {
          id v46 = v45;
          uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v49 = v48;

          id v50 = [v44 cloudSchemaCatchUpSyncContextsByAccountIdentifier];
          sub_1000963CC(0, (unint64_t *)&unk_10091AD18);
          uint64_t v51 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(void *)(v51 + 16))
          {
            unint64_t v52 = sub_1001806F8(v47, v49);
            if (v53)
            {
              id v54 = *(id *)(*(void *)(v51 + 56) + 8 * v52);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v55 = [self incompatiblePropertyKeysForCloudObject:a4 persistenceCloudSchemaVersion:[v54 persistenceCloudSchemaVersion]];
              uint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v106 = (void *)sub_10012674C(v56);
              swift_bridgeObjectRelease();
LABEL_29:
              id v110 = [a4 createResolutionTokenMapIfNecessary];
              id v57 = [v111 getTokenKeys];
              uint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v100 = v58;
              uint64_t v60 = *(void *)(v58 + 16);
              if (!v60)
              {
LABEL_72:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                goto LABEL_73;
              }
              id v61 = (void **)(v100 + 40);
              *(void *)&long long v59 = 136446466;
              long long v97 = v59;
              v96[1] = (char *)&type metadata for Any + 8;
              *(void *)&long long v59 = 136446722;
              long long v101 = v59;
              while (1)
              {
                uint64_t v62 = (uint64_t)*(v61 - 1);
                uint64_t v63 = *v61;
                swift_bridgeObjectRetain_n();
                v64._countAndFlagsBits = v62;
                v64._object = v63;
                unint64_t v65 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B3270, v64);
                swift_bridgeObjectRelease();
                if (v65 > 2) {
                  break;
                }
                LOBYTE(v112) = v65;
                if ([a4 shouldPerformCloudSchemaCatchUpSync])
                {
                  if ((_BYTE)v65)
                  {
                    uint64_t v66 = v65 == 1 ? 0x4E79616C70736964 : 0x6574616C706D6574;
                    uint64_t v67 = v65 == 1 ? 0xEB00000000656D61 : 0xE800000000000000;
                  }
                  else
                  {
                    uint64_t v66 = 0x6E6F697461657263;
                    uint64_t v67 = 0xEC00000065746144;
                  }
                  char v79 = sub_1001CBC20(v66, v67, (uint64_t)v106);
                  swift_bridgeObjectRelease();
                  if (v79)
                  {
                    if (qword_1009076A0 != -1) {
                      swift_once();
                    }
                    uint64_t v80 = type metadata accessor for Logger();
                    sub_10008E2DC(v80, (uint64_t)qword_10091AC90);
                    swift_bridgeObjectRetain_n();
                    id v81 = a4;
                    unint64_t v82 = Logger.logObject.getter();
                    int v83 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v82, (os_log_type_t)v83))
                    {
                      int v99 = v83;
                      uint64_t v84 = swift_slowAlloc();
                      uint64_t v98 = swift_slowAlloc();
                      uint64_t v113 = v98;
                      *(_DWORD *)uint64_t v84 = v97;
                      swift_bridgeObjectRetain();
                      *(void *)(v84 + 4) = sub_1000C51B8(v62, (unint64_t)v63, &v113);
                      swift_bridgeObjectRelease_n();
                      *(_WORD *)(v84 + 12) = 2082;
                      id v85 = [v81 remObjectID];
                      if (v85)
                      {
                        Class v86 = v85;
                        id v87 = [v85 description];

                        uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        unint64_t v90 = v89;
                      }
                      else
                      {
                        unint64_t v90 = 0xE300000000000000;
                        uint64_t v88 = 7104878;
                      }
                      *(void *)(v84 + 14) = sub_1000C51B8(v88, v90, &v113);

                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v99, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v84, 0x16u);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();

                      a4 = v102;
                    }
                    else
                    {

                      swift_bridgeObjectRelease_n();
                    }
                    sub_100122E78(&v112, v104, v107, v105);
                    NSString v95 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease();
                    [v110 forceMergeFromMap:v111 forKey:v95];

                    goto LABEL_32;
                  }
                }
                NSString v91 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                id v92 = [v110 compareAndMergeWithMap:v111 forKey:v91];

                if ((v108 & 1) == 0) {
                  goto LABEL_60;
                }
                if (v65 > 1u) {
                  goto LABEL_63;
                }
                char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v93 & 1) == 0)
                {
LABEL_60:
                  if (v103)
                  {
                    if (v65 > 1u)
                    {
                      swift_bridgeObjectRelease();
LABEL_68:
                      sub_100122E78(&v112, v104, v107, v105);
                      goto LABEL_32;
                    }
                    char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v94) {
                      goto LABEL_68;
                    }
                  }
                  if (v92 == (id)-1) {
                    goto LABEL_68;
                  }
                }
LABEL_32:
                v61 += 2;
                if (!--v60) {
                  goto LABEL_72;
                }
              }
              swift_bridgeObjectRetain();
              v68._countAndFlagsBits = v62;
              v68._object = v63;
              Swift::Int v69 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B32D8, v68);
              swift_bridgeObjectRelease();
              if (v69)
              {
                if (qword_1009076A0 != -1) {
                  swift_once();
                }
                uint64_t v70 = type metadata accessor for Logger();
                sub_10008E2DC(v70, (uint64_t)qword_10091AC90);
                unint64_t v71 = v109;
                swift_bridgeObjectRetain();
                long long v72 = Logger.logObject.getter();
                os_log_type_t v73 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v72, v73))
                {
                  uint64_t v74 = swift_slowAlloc();
                  uint64_t v113 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v74 = v101;
                  swift_bridgeObjectRetain();
                  *(void *)(v74 + 4) = sub_1000C51B8(v62, (unint64_t)v63, &v113);
                  swift_bridgeObjectRelease_n();
                  *(_WORD *)(v74 + 12) = 2082;
                  uint64_t v75 = CKRecord.recordType.getter();
                  *(void *)(v74 + 14) = sub_1000C51B8(v75, v76, &v113);

                  swift_bridgeObjectRelease();
                  *(_WORD *)(v74 + 22) = 2082;
                  unint64_t v112 = &_s14descr1008AB5D9O6FieldsON;
                  sub_100094134((uint64_t *)&unk_10091AD80);
                  uint64_t v77 = String.init<A>(reflecting:)();
                  *(void *)(v74 + 24) = sub_1000C51B8(v77, v78, &v113);
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v72, v73, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v74, 0x20u);
                  swift_arrayDestroy();
                  a4 = v102;
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  swift_bridgeObjectRelease_n();
                }
                goto LABEL_32;
              }
LABEL_63:
              swift_bridgeObjectRelease();
              goto LABEL_32;
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
        }
      }
    }
    uint64_t v106 = &_swiftEmptySetSingleton;
    goto LABEL_29;
  }
  uint64_t v12 = type metadata accessor for Date();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v13 = *(void *)(v12 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  }
  id v15 = v104;
  [v104 setCreationDate:isa];

  LOBYTE(v113) = 1;
  uint64_t v16 = v107;
  unint64_t v17 = v105;
  sub_100122E78(&v113, v15, v107, v105);
  LOBYTE(v113) = 2;
  sub_100122E78(&v113, v15, v16, v17);
  id v110 = sub_1004BA338(v109, 1);
LABEL_73:
}

uint64_t sub_1004C6530()
{
  uint64_t v0 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v18[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  id v5 = &v18[-v4];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  __chkstk_darwin(v8);
  uint64_t v10 = &v18[-v9];
  if (!CKRecord.subscript.getter()) {
    goto LABEL_6;
  }
  self;
  uint64_t v11 = (void *)swift_dynamicCastObjCClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
LABEL_6:
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
LABEL_9:
    sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909E40);
    return 0;
  }
  id v12 = [v11 fileURL];
  swift_unknownObjectRelease();
  if (v12)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(v2, 0, 1, v6);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v2, 1, 1, v6);
  }
  sub_100096408((uint64_t)v2, (uint64_t)v5, (uint64_t *)&unk_100909E40);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1) {
    goto LABEL_9;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v10, v5, v6);
  id v15 = [self defaultManager];
  URL.path.getter();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v17 = [v15 fileExistsAtPath:v16];

  if (v17)
  {
    uint64_t v13 = Data.init(contentsOf:options:)();
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
    return v13;
  }
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
  return 0;
}

#error "1004C7D34: switch analysis failed: failed to propagate the switch expression (funcsize=1161)"

void sub_1004C826C(char *a1, void *a2, void *a3, void *a4, unsigned char *a5, uint64_t a6)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  int v99 = a1;
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v104 & 1) == 0 && v103 == 1)
  {
    uint64_t v11 = 17;
    id v12 = &byte_1008B3508;
    do
    {
      char v13 = *v12++;
      LOBYTE(v103) = v13;
      sub_100205CE8(&v103, a3, a4, a5, a6);
      --v11;
    }
    while (v11);

    return;
  }
  id v101 = sub_1004BB730(a1, 0);
  char v93 = a2;
  uint64_t v96 = a6;
  char v94 = a4;
  NSString v95 = a5;
  if (v14)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    CKRecordKeyValueSetting.subscript.getter();
    swift_bridgeObjectRelease();
    if ((v104 & 1) == 0 && v103 == 1 && [a2 markedForDeletion])
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_10008E2DC(v15, (uint64_t)qword_10091AC90);
      NSString v16 = a1;
      unsigned int v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v103 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136446466;
        uint64_t v20 = CKRecord.recordType.getter();
        sub_1000C51B8(v20, v21, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2082;
        id v22 = [v16 recordID];
        id v23 = [v22 ckShortDescription];

        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v26 = v25;

        uint64_t v27 = v24;
        a2 = v93;
        unint64_t v102 = (ValueMetadata *)sub_1000C51B8(v27, v26, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_10091AC90);
      unint64_t v29 = a1;
      unint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v103 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136446466;
        uint64_t v33 = CKRecord.recordType.getter();
        sub_1000C51B8(v33, v34, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 12) = 2082;
        id v35 = [v29 recordID];
        id v36 = [v35 ckShortDescription];

        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v39 = v38;

        uint64_t v40 = v37;
        a2 = v93;
        unint64_t v102 = (ValueMetadata *)sub_1000C51B8(v40, v39, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [a2 updateChangeCount];
    }
  }
  if (![a2 shouldPerformCloudSchemaCatchUpSync]) {
    goto LABEL_28;
  }
  id v41 = [a2 storeControllerManagedObjectContext];
  if (!v41) {
    goto LABEL_28;
  }
  unint64_t v42 = v41;
  id v43 = [a2 accountCKIdentifier];
  if (!v43)
  {

    goto LABEL_28;
  }
  unsigned int v44 = v43;
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v47 = v46;

  id v48 = [v42 cloudSchemaCatchUpSyncContextsByAccountIdentifier];
  sub_1000963CC(0, (unint64_t *)&unk_10091AD18);
  uint64_t v49 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v49 + 16) || (unint64_t v50 = sub_1001806F8(v45, v47), (v51 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_28:
    uint64_t v98 = &_swiftEmptySetSingleton;
    goto LABEL_29;
  }
  id v52 = *(id *)(*(void *)(v49 + 56) + 8 * v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v53 = [self incompatiblePropertyKeysForCloudObject:a2 persistenceCloudSchemaVersion:[v52 persistenceCloudSchemaVersion]];
  uint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v98 = (void *)sub_10012674C(v54);
  swift_bridgeObjectRelease();
LABEL_29:
  id v100 = [a2 createResolutionTokenMapIfNecessary];
  id v55 = [v101 getTokenKeys];
  uint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v57 = *(void *)(v56 + 16);
  if (v57)
  {
    uint64_t v58 = (void **)(v56 + 40);
    do
    {
      uint64_t v59 = (uint64_t)*(v58 - 1);
      uint64_t v60 = *v58;
      swift_bridgeObjectRetain_n();
      char v61 = sub_100210E48();
      if (v61 == 17)
      {
        swift_bridgeObjectRetain();
        v62._countAndFlagsBits = v59;
        v62._object = v60;
        Swift::Int v63 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B36D8, v62);
        swift_bridgeObjectRelease();
        if (v63)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v64 = type metadata accessor for Logger();
          sub_10008E2DC(v64, (uint64_t)qword_10091AC90);
          unint64_t v65 = v99;
          swift_bridgeObjectRetain();
          uint64_t v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v66, v67))
          {
            uint64_t v68 = swift_slowAlloc();
            uint64_t v103 = swift_slowAlloc();
            *(_DWORD *)uint64_t v68 = 136446722;
            swift_bridgeObjectRetain();
            *(void *)(v68 + 4) = sub_1000C51B8(v59, (unint64_t)v60, &v103);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v68 + 12) = 2082;
            uint64_t v69 = CKRecord.recordType.getter();
            *(void *)(v68 + 14) = sub_1000C51B8(v69, v70, &v103);

            swift_bridgeObjectRelease();
            *(_WORD *)(v68 + 22) = 2082;
            unint64_t v102 = &_s6FieldsON_0;
            sub_100094134(&qword_10091AD70);
            uint64_t v71 = String.init<A>(reflecting:)();
            *(void *)(v68 + 24) = sub_1000C51B8(v71, v72, &v103);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v66, v67, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v68, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            a2 = v93;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        LOBYTE(v102) = v61;
        if (([a2 shouldPerformCloudSchemaCatchUpSync] & 1) == 0) {
          goto LABEL_65;
        }
        unint64_t v74 = 0xEB000000006D656CLL;
        uint64_t v75 = 0x626D456567646162;
        switch(v73)
        {
          case 1:
            unint64_t v74 = 0xE500000000000000;
            uint64_t v75 = 0x726F6C6F63;
            break;
          case 2:
            unint64_t v74 = 0xEC00000065746144;
            uint64_t v75 = 0x6E6F697461657263;
            break;
          case 3:
            uint64_t v75 = 0xD000000000000010;
            unint64_t v74 = 0x80000001007C68D0;
            break;
          case 4:
            uint64_t v75 = 0xD000000000000026;
            unint64_t v74 = 0x80000001007C6BA0;
            break;
          case 5:
            uint64_t v75 = 0xD000000000000028;
            unint64_t v74 = 0x80000001007C6BD0;
            break;
          case 6:
            uint64_t v75 = 0xD000000000000025;
            unint64_t v74 = 0x80000001007C6C50;
            break;
          case 7:
            unint64_t v74 = 0xE400000000000000;
            uint64_t v75 = 1701667182;
            break;
          case 8:
            unint64_t v74 = 0xED0000746E756F63;
            uint64_t v75 = 0x6341746E65726170;
            break;
          case 9:
            uint64_t v75 = 0xD00000000000001BLL;
            unint64_t v74 = 0x80000001007C6C80;
            break;
          case 10:
            uint64_t v75 = 0xD000000000000016;
            unint64_t v74 = 0x80000001007C6CA0;
            break;
          case 11:
            unint64_t v76 = "D";
            goto LABEL_56;
          case 12:
            uint64_t v75 = 0xD00000000000001ALL;
            unint64_t v74 = 0x80000001007C6CC0;
            break;
          case 13:
            uint64_t v75 = 0xD000000000000011;
            unint64_t v74 = 0x80000001007C6170;
            break;
          case 14:
            unint64_t v76 = "TemplateIdentifier";
LABEL_56:
            unint64_t v74 = (unint64_t)v76 | 0x8000000000000000;
            uint64_t v75 = 0xD000000000000018;
            break;
          case 15:
            unint64_t v74 = 0xEC000000656C7974;
            uint64_t v75 = 0x53676E6974726F73;
            break;
          case 16:
            unint64_t v74 = 0xEF4C525544497473;
            uint64_t v75 = 0x694C656372756F73;
            break;
          default:
            break;
        }
        char v77 = sub_1001CBC20(v75, v74, (uint64_t)v98);
        swift_bridgeObjectRelease();
        if (v77)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v78 = type metadata accessor for Logger();
          sub_10008E2DC(v78, (uint64_t)qword_10091AC90);
          swift_bridgeObjectRetain_n();
          id v79 = a2;
          uint64_t v80 = Logger.logObject.getter();
          os_log_type_t v81 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v80, v81))
          {
            uint64_t v82 = swift_slowAlloc();
            uint64_t v103 = swift_slowAlloc();
            *(_DWORD *)uint64_t v82 = 136446466;
            swift_bridgeObjectRetain();
            *(void *)(v82 + 4) = sub_1000C51B8(v59, (unint64_t)v60, &v103);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v82 + 12) = 2082;
            id v83 = [v79 remObjectID];
            if (v83)
            {
              uint64_t v84 = v83;
              os_log_type_t v92 = v81;
              id v85 = [v83 description];

              uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v88 = v87;

              os_log_type_t v81 = v92;
            }
            else
            {
              unint64_t v88 = 0xE300000000000000;
              uint64_t v86 = 7104878;
            }
            *(void *)(v82 + 14) = sub_1000C51B8(v86, v88, &v103);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v80, v81, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v82, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            a2 = v93;
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          sub_100205CE8(&v102, a3, v94, v95, v96);
          NSString v91 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v100 forceMergeFromMap:v101 forKey:v91];
        }
        else
        {
LABEL_65:
          NSString v89 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v90 = [v100 compareAndMergeWithMap:v101 forKey:v89];

          if (v90 == (id)-1) {
            sub_100205CE8(&v102, a3, v94, v95, v96);
          }
        }
      }
      v58 += 2;
      --v57;
    }
    while (v57);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1004C91F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  v32[3] = a4;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v13 = (char *)v32 - v12;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  void v32[2] = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v18 = __chkstk_darwin(v17).n128_u64[0];
  uint64_t v20 = (char *)v32 - v19;
  if (a6)
  {
    id v21 = [a1 encryptedValues:v18];
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [v21 objectForKeyedSubscript:v22];
    swift_unknownObjectRelease();

    uint64_t v33 = (uint64_t)v23;
  }
  else
  {
    uint64_t v33 = CKRecord.subscript.getter();
  }
  sub_100094134((uint64_t *)&unk_10091AD28);
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (CKRecord.subscript.getter())
    {
      self;
      unint64_t v25 = (void *)swift_dynamicCastObjCClass();
      if (v25)
      {
        id v26 = [v25 fileURL];
        swift_unknownObjectRelease();
        if (v26)
        {
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v27 = 0;
        }
        else
        {
          uint64_t v27 = 1;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v10, v27, 1, v14);
        sub_100096408((uint64_t)v10, (uint64_t)v13, (uint64_t *)&unk_100909E40);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
          id v29 = [self defaultManager];
          URL.path.getter();
          NSString v30 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          unsigned int v31 = [v29 fileExistsAtPath:v30];

          if (v31)
          {
            uint64_t v24 = String.init(contentsOf:)();
            (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
            return v24;
          }
          (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
          return 0;
        }
LABEL_14:
        sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E40);
        return 0;
      }
      swift_unknownObjectRelease();
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    goto LABEL_14;
  }
  return v32[5];
}

void sub_1004C98C4(void *a1, char a2, char a3, void *a4, NSObject *a5, void *a6, void *a7, char *a8)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  id v111 = a1;
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v116 & 1) != 0 || v115 != 1)
  {
    id v113 = sub_1004BC358(a1, 0);
    char v104 = a4;
    uint64_t v105 = a5;
    int64_t v107 = a7;
    int v108 = a8;
    uint64_t v106 = a6;
    if (v17)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      if ((v116 & 1) == 0 && v115 == 1 && [a4 markedForDeletion])
      {
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        sub_10008E2DC(v18, (uint64_t)qword_10091AC90);
        id v19 = a1;
        uint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = swift_slowAlloc();
          uint64_t v115 = swift_slowAlloc();
          *(_DWORD *)uint64_t v22 = 136446466;
          uint64_t v23 = CKRecord.recordType.getter();
          sub_1000C51B8(v23, v24, &v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v22 + 12) = 2082;
          id v25 = [v19 recordID];
          id v26 = [v25 ckShortDescription];

          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v29 = v28;

          uint64_t v30 = v27;
          a4 = v104;
          char v114 = (ValueMetadata *)sub_1000C51B8(v30, v29, &v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v22, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      else
      {
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_10008E2DC(v31, (uint64_t)qword_10091AC90);
        id v32 = a1;
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          uint64_t v115 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 136446466;
          uint64_t v36 = CKRecord.recordType.getter();
          sub_1000C51B8(v36, v37, &v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v35 + 12) = 2082;
          id v38 = [v32 recordID];
          id v39 = [v38 ckShortDescription];

          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;

          uint64_t v43 = v40;
          a4 = v104;
          char v114 = (ValueMetadata *)sub_1000C51B8(v43, v42, &v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v35, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        [a4 updateChangeCount];
      }
    }
    if ([a4 shouldPerformCloudSchemaCatchUpSync])
    {
      id v44 = [a4 storeControllerManagedObjectContext];
      if (v44)
      {
        uint64_t v45 = v44;
        id v46 = [a4 accountCKIdentifier];
        if (v46)
        {
          uint64_t v47 = v46;
          uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v50 = v49;

          id v51 = [v45 cloudSchemaCatchUpSyncContextsByAccountIdentifier];
          sub_1000963CC(0, (unint64_t *)&unk_10091AD18);
          uint64_t v52 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(void *)(v52 + 16) && (unint64_t v53 = sub_1001806F8(v48, v50), (v54 & 1) != 0))
          {
            id v55 = *(id *)(*(void *)(v52 + 56) + 8 * v53);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a4 = v104;
            id v56 = [self incompatiblePropertyKeysForCloudObject:v104 persistenceCloudSchemaVersion:[v55 persistenceCloudSchemaVersion]];
            uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            unint64_t v109 = (void *)sub_10012674C(v57);
            swift_bridgeObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v109 = &_swiftEmptySetSingleton;
            a4 = v104;
          }
          goto LABEL_29;
        }
      }
    }
    unint64_t v109 = &_swiftEmptySetSingleton;
LABEL_29:
    id v112 = [a4 createResolutionTokenMapIfNecessary];
    id v58 = [v113 getTokenKeys];
    uint64_t v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v60 = *(void *)(v59 + 16);
    if (!v60)
    {
LABEL_68:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    char v61 = (void **)(v59 + 40);
    while (1)
    {
      uint64_t v62 = (uint64_t)*(v61 - 1);
      Swift::Int v63 = *v61;
      swift_bridgeObjectRetain_n();
      char v64 = sub_100330FB0();
      if (v64 == 21)
      {
        swift_bridgeObjectRetain();
        v65._countAndFlagsBits = v62;
        v65._object = v63;
        Swift::Int v66 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B39B0, v65);
        swift_bridgeObjectRelease();
        if (v66)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v67 = type metadata accessor for Logger();
          sub_10008E2DC(v67, (uint64_t)qword_10091AC90);
          id v68 = v111;
          swift_bridgeObjectRetain();
          uint64_t v69 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v69, v70))
          {
            uint64_t v71 = swift_slowAlloc();
            uint64_t v115 = swift_slowAlloc();
            *(_DWORD *)uint64_t v71 = 136446722;
            swift_bridgeObjectRetain();
            *(void *)(v71 + 4) = sub_1000C51B8(v62, (unint64_t)v63, &v115);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v71 + 12) = 2082;
            uint64_t v72 = CKRecord.recordType.getter();
            *(void *)(v71 + 14) = sub_1000C51B8(v72, v73, &v115);

            swift_bridgeObjectRelease();
            *(_WORD *)(v71 + 22) = 2082;
            char v114 = &_s6FieldsON_1;
            sub_100094134(&qword_10091AD68);
            uint64_t v74 = String.init<A>(reflecting:)();
            *(void *)(v71 + 24) = sub_1000C51B8(v74, v75, &v115);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v69, v70, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v71, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            a4 = v104;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          goto LABEL_32;
        }
LABEL_52:
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
      char v76 = v64;
      LOBYTE(v114) = v64;
      if ([a4 shouldPerformCloudSchemaCatchUpSync])
      {
        unint64_t v77 = sub_1002F6DF8(v76);
        char v79 = sub_1001CBC20(v77, v78, (uint64_t)v109);
        swift_bridgeObjectRelease();
        if (v79)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v80 = type metadata accessor for Logger();
          sub_10008E2DC(v80, (uint64_t)qword_10091AC90);
          swift_bridgeObjectRetain_n();
          id v81 = a4;
          uint64_t v82 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v82, v83))
          {
            uint64_t v84 = swift_slowAlloc();
            uint64_t v115 = swift_slowAlloc();
            *(_DWORD *)uint64_t v84 = 136446466;
            swift_bridgeObjectRetain();
            *(void *)(v84 + 4) = sub_1000C51B8(v62, (unint64_t)v63, &v115);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v84 + 12) = 2082;
            id v85 = [v81 remObjectID];
            if (v85)
            {
              uint64_t v86 = v85;
              os_log_type_t v102 = v83;
              id v87 = [v85 description];

              uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v90 = v89;

              os_log_type_t v83 = v102;
            }
            else
            {
              unint64_t v90 = 0xE300000000000000;
              uint64_t v88 = 7104878;
            }
            *(void *)(v84 + 14) = sub_1000C51B8(v88, v90, &v115);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v82, v83, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v84, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            a4 = v104;
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          sub_1002F94B8((unsigned __int8 *)&v114, v105, v106, v107, v108);
          NSString v96 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v112 forceMergeFromMap:v113 forKey:v96];

          goto LABEL_32;
        }
      }
      NSString v91 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v92 = [v112 compareAndMergeWithMap:v113 forKey:v91];

      if ((a3 & 1) == 0) {
        goto LABEL_58;
      }
      if (sub_1002F6DF8(v76) == 0x6341746E65726170 && v93 == 0xED0000746E756F63) {
        goto LABEL_52;
      }
      char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v94 & 1) == 0) {
        break;
      }
LABEL_32:
      v61 += 2;
      if (!--v60) {
        goto LABEL_68;
      }
    }
    if (sub_1002F6DF8(v76) == 0x694C746E65726170 && v95 == 0xEA00000000007473) {
      goto LABEL_52;
    }
    char v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v97) {
      goto LABEL_32;
    }
LABEL_58:
    if (a2)
    {
      if (sub_1002F6DF8(v76) == 0x6341746E65726170 && v98 == 0xED0000746E756F63) {
        goto LABEL_61;
      }
      char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v99) {
        goto LABEL_67;
      }
      if (sub_1002F6DF8(v76) == 0x694C746E65726170 && v100 == 0xEA00000000007473)
      {
LABEL_61:
        swift_bridgeObjectRelease();
LABEL_67:
        sub_1002F94B8((unsigned __int8 *)&v114, v105, v106, v107, v108);
        goto LABEL_32;
      }
      char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v101) {
        goto LABEL_67;
      }
    }
    if (v92 == (id)-1) {
      goto LABEL_67;
    }
    goto LABEL_32;
  }
  uint64_t v14 = 21;
  uint64_t v15 = &byte_1008B3730;
  do
  {
    char v16 = *v15++;
    LOBYTE(v115) = v16;
    sub_1002F94B8((unsigned __int8 *)&v115, a5, a6, a7, a8);
    --v14;
  }
  while (v14);
}

void sub_1004CA7F0(char *a1, char a2, char a3, void *a4, void *a5, void *a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t), unsigned char *a8)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  int v108 = a1;
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v114 & 1) != 0 || v113 != 1)
  {
    id v111 = sub_1004BD85C(a1, 0);
    uint64_t v103 = a7;
    char v104 = a8;
    char v16 = a5;
    os_log_type_t v102 = a6;
    if (v17)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      if ((v114 & 1) == 0 && v113 == 1 && [a4 markedForDeletion])
      {
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        sub_10008E2DC(v18, (uint64_t)qword_10091AC90);
        id v19 = a1;
        uint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = swift_slowAlloc();
          uint64_t v113 = swift_slowAlloc();
          *(_DWORD *)uint64_t v22 = 136446466;
          uint64_t v23 = CKRecord.recordType.getter();
          sub_1000C51B8(v23, v24, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v22 + 12) = 2082;
          id v25 = [v19 recordID];
          id v26 = [v25 ckShortDescription];

          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v29 = v28;

          char v16 = a5;
          id v112 = (ValueMetadata *)sub_1000C51B8(v27, v29, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v22, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      else
      {
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        sub_10008E2DC(v30, (uint64_t)qword_10091AC90);
        uint64_t v31 = a1;
        id v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = swift_slowAlloc();
          uint64_t v113 = swift_slowAlloc();
          *(_DWORD *)uint64_t v34 = 136446466;
          uint64_t v35 = CKRecord.recordType.getter();
          sub_1000C51B8(v35, v36, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v34 + 12) = 2082;
          id v37 = [v31 recordID];
          id v38 = [v37 ckShortDescription];

          uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v41 = v40;

          char v16 = a5;
          id v112 = (ValueMetadata *)sub_1000C51B8(v39, v41, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v34, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        [a4 updateChangeCount];
      }
    }
    if ([a4 shouldPerformCloudSchemaCatchUpSync])
    {
      id v42 = [a4 storeControllerManagedObjectContext];
      if (v42)
      {
        uint64_t v43 = v42;
        id v44 = [a4 accountCKIdentifier];
        if (v44)
        {
          uint64_t v45 = v44;
          uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v48 = v47;

          id v49 = [v43 cloudSchemaCatchUpSyncContextsByAccountIdentifier];
          sub_1000963CC(0, (unint64_t *)&unk_10091AD18);
          uint64_t v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(void *)(v50 + 16) && (unint64_t v51 = sub_1001806F8(v46, v48), (v52 & 1) != 0))
          {
            id v53 = *(id *)(*(void *)(v50 + 56) + 8 * v51);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v54 = [self incompatiblePropertyKeysForCloudObject:a4 persistenceCloudSchemaVersion:[v53 persistenceCloudSchemaVersion]];
            uint64_t v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v105 = (void *)sub_10012674C(v55);
            swift_bridgeObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v105 = &_swiftEmptySetSingleton;
          }
          char v16 = a5;
          goto LABEL_30;
        }
      }
    }
    uint64_t v105 = &_swiftEmptySetSingleton;
LABEL_30:
    id v110 = [a4 createResolutionTokenMapIfNecessary];
    id v56 = [v111 getTokenKeys];
    uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v58 = *(void *)(v57 + 16);
    if (!v58)
    {
LABEL_73:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    uint64_t v59 = (void **)(v57 + 40);
    uint64_t v106 = a4;
    while (1)
    {
      uint64_t v61 = (uint64_t)*(v59 - 1);
      uint64_t v60 = *v59;
      swift_bridgeObjectRetain_n();
      char v62 = sub_1003496E8();
      if (v62 == 27) {
        break;
      }
      char v74 = v62;
      LOBYTE(v112) = v62;
      if ([a4 shouldPerformCloudSchemaCatchUpSync])
      {
        uint64_t v75 = sub_100334B78(v74);
        char v77 = sub_1001CBC20(v75, v76, (uint64_t)v105);
        swift_bridgeObjectRelease();
        if (v77)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v78 = type metadata accessor for Logger();
          sub_10008E2DC(v78, (uint64_t)qword_10091AC90);
          swift_bridgeObjectRetain_n();
          id v79 = a4;
          uint64_t v80 = Logger.logObject.getter();
          os_log_type_t v81 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v80, v81))
          {
            os_log_type_t v101 = v81;
            uint64_t v82 = swift_slowAlloc();
            uint64_t v113 = swift_slowAlloc();
            *(_DWORD *)uint64_t v82 = 136446466;
            swift_bridgeObjectRetain();
            *(void *)(v82 + 4) = sub_1000C51B8(v61, (unint64_t)v60, &v113);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v82 + 12) = 2082;
            id v83 = [v79 remObjectID];
            if (v83)
            {
              uint64_t v84 = v83;
              id v85 = [v83 description];

              uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v88 = v87;

              char v16 = a5;
            }
            else
            {
              unint64_t v88 = 0xE300000000000000;
              uint64_t v86 = 7104878;
            }
            *(void *)(v82 + 14) = sub_1000C51B8(v86, v88, &v113);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v80, v101, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v82, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            a4 = v106;
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          sub_10033749C((char *)&v112, v16, v102, v103, v104);
          NSString v94 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v110 forceMergeFromMap:v111 forKey:v94];

          goto LABEL_34;
        }
      }
      NSString v89 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v90 = [v110 compareAndMergeWithMap:v111 forKey:v89];

      if ((a3 & 1) == 0)
      {
LABEL_60:
        if (a2)
        {
          if (sub_100334B78(v74) == 1953720684 && v96 == 0xE400000000000000)
          {
LABEL_63:
            swift_bridgeObjectRelease();
            goto LABEL_72;
          }
          char v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v97) {
            goto LABEL_72;
          }
          if (sub_100334B78(v74) == 0x6552746E65726170 && v98 == 0xEE007265646E696DLL) {
            goto LABEL_63;
          }
          char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v99)
          {
LABEL_72:
            sub_10033749C((char *)&v112, v16, v102, v103, v104);
            goto LABEL_34;
          }
        }
        if (((sub_1001BCFF4(v74, (uint64_t)&off_1008B3D08) & 1) == 0 || !v90)
          && ((sub_1001BCFF4(v74, (uint64_t)&off_1008B3D30) & 1) != 0 || v90 != (id)-1))
        {
          goto LABEL_34;
        }
        goto LABEL_72;
      }
      if (sub_100334B78(v74) == 1953720684 && v91 == 0xE400000000000000) {
        goto LABEL_54;
      }
      char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v92 & 1) == 0)
      {
        if (sub_100334B78(v74) == 0x6552746E65726170 && v93 == 0xEE007265646E696DLL) {
          goto LABEL_54;
        }
        char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v95 & 1) == 0) {
          goto LABEL_60;
        }
      }
LABEL_34:
      v59 += 2;
      if (!--v58) {
        goto LABEL_73;
      }
    }
    swift_bridgeObjectRetain();
    v63._countAndFlagsBits = v61;
    v63._object = v60;
    Swift::Int v64 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B3CD0, v63);
    swift_bridgeObjectRelease();
    if (v64)
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v65 = type metadata accessor for Logger();
      sub_10008E2DC(v65, (uint64_t)qword_10091AC90);
      Swift::Int v66 = v108;
      swift_bridgeObjectRetain();
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = swift_slowAlloc();
        uint64_t v113 = swift_slowAlloc();
        *(_DWORD *)uint64_t v69 = 136446722;
        swift_bridgeObjectRetain();
        *(void *)(v69 + 4) = sub_1000C51B8(v61, (unint64_t)v60, &v113);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v69 + 12) = 2082;
        uint64_t v70 = CKRecord.recordType.getter();
        *(void *)(v69 + 14) = sub_1000C51B8(v70, v71, &v113);

        swift_bridgeObjectRelease();
        *(_WORD *)(v69 + 22) = 2082;
        id v112 = &_s6FieldsON_2;
        sub_100094134(&qword_10091AD60);
        uint64_t v72 = String.init<A>(reflecting:)();
        *(void *)(v69 + 24) = sub_1000C51B8(v72, v73, &v113);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v69, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      a4 = v106;
      char v16 = a5;
      goto LABEL_34;
    }
LABEL_54:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  uint64_t v13 = 27;
  uint64_t v14 = &byte_1008B3A08;
  do
  {
    char v15 = *v14++;
    LOBYTE(v113) = v15;
    sub_10033749C((char *)&v113, a5, a6, a7, a8);
    --v13;
  }
  while (v13);
}

void sub_1004CB724(void *a1, void *a2, void *a3, void *a4)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v94 & 1) == 0 && v93 == 1)
  {
    LOBYTE(v93) = 0;
    sub_100354468(&v93, a3, a4);
    LOBYTE(v93) = 1;
    sub_100354468(&v93, a3, a4);
    if (CKRecord.subscript.getter())
    {
      self;
      uint64_t v6 = (void *)swift_dynamicCastObjCClass();
      if (!v6) {
        swift_unknownObjectRelease();
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    id v46 = sub_1000C4990(v6);

    if (v46)
    {
      type metadata accessor for REMCDTemplate();
      uint64_t v47 = (void *)swift_dynamicCastClass();
      if (!v47) {
    }
      }
    else
    {
      uint64_t v47 = 0;
    }
    [a3 setTemplate:v47];

    return;
  }
  id v91 = sub_1004BE430(a1, 0);
  id v85 = a2;
  uint64_t v86 = a1;
  if (v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    CKRecordKeyValueSetting.subscript.getter();
    swift_bridgeObjectRelease();
    if ((v94 & 1) == 0 && v93 == 1 && [a2 markedForDeletion])
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_10008E2DC(v8, (uint64_t)qword_10091AC90);
      id v9 = a1;
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = swift_slowAlloc();
        uint64_t v93 = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136446466;
        uint64_t v13 = CKRecord.recordType.getter();
        sub_1000C51B8(v13, v14, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v12 + 12) = 2082;
        id v15 = [v9 recordID];
        id v16 = [v15 ckShortDescription];

        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v19 = v18;

        char v92 = (ValueMetadata *)sub_1000C51B8(v17, v19, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v12, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        a2 = v85;
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_10091AC90);
      id v21 = a1;
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v93 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136446466;
        uint64_t v25 = CKRecord.recordType.getter();
        sub_1000C51B8(v25, v26, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2082;
        id v27 = [v21 recordID];
        id v28 = [v27 ckShortDescription];

        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        char v92 = (ValueMetadata *)sub_1000C51B8(v29, v31, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        a2 = v85;
        swift_slowDealloc();
      }
      else
      {
      }
      [a2 updateChangeCount];
    }
    a1 = v86;
  }
  if (![a2 shouldPerformCloudSchemaCatchUpSync]) {
    goto LABEL_36;
  }
  id v32 = [a2 storeControllerManagedObjectContext];
  if (!v32) {
    goto LABEL_36;
  }
  os_log_type_t v33 = v32;
  id v34 = [a2 accountCKIdentifier];
  if (!v34)
  {

LABEL_36:
    unint64_t v88 = &_swiftEmptySetSingleton;
    goto LABEL_37;
  }
  uint64_t v35 = v34;
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;

  id v39 = [v33 cloudSchemaCatchUpSyncContextsByAccountIdentifier];
  sub_1000963CC(0, (unint64_t *)&unk_10091AD18);
  uint64_t v40 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v40 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v88 = &_swiftEmptySetSingleton;
    a2 = v85;
    goto LABEL_37;
  }
  unint64_t v41 = sub_1001806F8(v36, v38);
  a2 = v85;
  if ((v42 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  id v43 = *(id *)(*(void *)(v40 + 56) + 8 * v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v44 = [self incompatiblePropertyKeysForCloudObject:v85 persistenceCloudSchemaVersion:[v43 persistenceCloudSchemaVersion]];
  uint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v88 = (void *)sub_10012674C(v45);
  swift_bridgeObjectRelease();
LABEL_37:
  id v90 = [a2 createResolutionTokenMapIfNecessary];
  id v48 = [v91 getTokenKeys];
  uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v50 = *(void *)(v49 + 16);
  if (v50)
  {
    unint64_t v51 = (void **)(v49 + 40);
    do
    {
      uint64_t v52 = (uint64_t)*(v51 - 1);
      id v53 = *v51;
      swift_bridgeObjectRetain_n();
      v54._countAndFlagsBits = v52;
      v54._object = v53;
      unint64_t v55 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B3DA8, v54);
      swift_bridgeObjectRelease();
      if (v55 > 2)
      {
        swift_bridgeObjectRetain();
        v58._countAndFlagsBits = v52;
        v58._object = v53;
        Swift::Int v59 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B3E10, v58);
        swift_bridgeObjectRelease();
        if (v59)
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v60 = type metadata accessor for Logger();
          sub_10008E2DC(v60, (uint64_t)qword_10091AC90);
          id v61 = a1;
          swift_bridgeObjectRetain();
          char v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v62, v63))
          {
            uint64_t v64 = swift_slowAlloc();
            uint64_t v93 = swift_slowAlloc();
            *(_DWORD *)uint64_t v64 = 136446722;
            swift_bridgeObjectRetain();
            *(void *)(v64 + 4) = sub_1000C51B8(v52, (unint64_t)v53, &v93);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v64 + 12) = 2082;
            uint64_t v65 = CKRecord.recordType.getter();
            *(void *)(v64 + 14) = sub_1000C51B8(v65, v66, &v93);

            swift_bridgeObjectRelease();
            *(_WORD *)(v64 + 22) = 2082;
            char v92 = &_s6FieldsON_3;
            sub_100094134((uint64_t *)&unk_10091AD50);
            uint64_t v67 = String.init<A>(reflecting:)();
            *(void *)(v64 + 24) = sub_1000C51B8(v67, v68, &v93);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v62, v63, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v64, 0x20u);
            swift_arrayDestroy();
            a1 = v86;
            swift_slowDealloc();
            a2 = v85;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        LOBYTE(v92) = v55;
        if ([a2 shouldPerformCloudSchemaCatchUpSync]
          && (!(_BYTE)v55
            ? (v57 = 0xE800000000000000, uint64_t v56 = 0x617461646174656DLL)
            : (v55 != 1 ? (uint64_t v56 = 0x6574616C706D6574) : (uint64_t v56 = 0xD00000000000001DLL),
               v55 != 1 ? (uint64_t v57 = 0xE800000000000000) : (uint64_t v57 = 0x80000001007C6E10)),
              char v69 = sub_1001CBC20(v56, v57, (uint64_t)v88),
              swift_bridgeObjectRelease(),
              (v69 & 1) != 0))
        {
          if (qword_1009076A0 != -1) {
            swift_once();
          }
          uint64_t v70 = type metadata accessor for Logger();
          sub_10008E2DC(v70, (uint64_t)qword_10091AC90);
          swift_bridgeObjectRetain_n();
          id v71 = a2;
          uint64_t v72 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v72, v73))
          {
            os_log_type_t v84 = v73;
            uint64_t v74 = swift_slowAlloc();
            uint64_t v93 = swift_slowAlloc();
            *(_DWORD *)uint64_t v74 = 136446466;
            swift_bridgeObjectRetain();
            *(void *)(v74 + 4) = sub_1000C51B8(v52, (unint64_t)v53, &v93);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v74 + 12) = 2082;
            id v75 = [v71 remObjectID];
            if (v75)
            {
              uint64_t v76 = v75;
              id v77 = [v75 description];

              uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v80 = v79;
            }
            else
            {
              unint64_t v80 = 0xE300000000000000;
              uint64_t v78 = 7104878;
            }
            *(void *)(v74 + 14) = sub_1000C51B8(v78, v80, &v93);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v72, v84, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v74, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            a2 = v85;
            a1 = v86;
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          sub_100354468(&v92, a3, a4);
          NSString v83 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v90 forceMergeFromMap:v91 forKey:v83];
        }
        else
        {
          NSString v81 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v82 = [v90 compareAndMergeWithMap:v91 forKey:v81];

          if (v82 == (id)-1) {
            sub_100354468(&v92, a3, a4);
          }
        }
      }
      v51 += 2;
      --v50;
    }
    while (v50);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_1004CC554(void *a1, int a2, int a3, void *a4, void *a5, void *a6, unsigned char *a7)
{
  char v104 = a5;
  uint64_t v105 = a7;
  int64_t v107 = a6;
  int v108 = a3;
  int v103 = a2;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v9 - 8);
  os_log_type_t v11 = (char *)v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  unint64_t v109 = a1;
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v114 & 1) != 0 || v113 != 1)
  {
    id v111 = sub_1004BECDC(v109, 0);
    os_log_type_t v102 = a4;
    if (v18)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      if ((v114 & 1) == 0 && v113 == 1 && [a4 markedForDeletion])
      {
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v19 = type metadata accessor for Logger();
        sub_10008E2DC(v19, (uint64_t)qword_10091AC90);
        uint64_t v20 = v109;
        id v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc();
          uint64_t v113 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136446466;
          uint64_t v24 = CKRecord.recordType.getter();
          id v112 = (ValueMetadata *)sub_1000C51B8(v24, v25, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v23 + 12) = 2082;
          id v26 = [v20 recordID];
          id v27 = [v26 ckShortDescription];

          uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v30 = v29;

          id v112 = (ValueMetadata *)sub_1000C51B8(v28, v30, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          a4 = v102;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v23, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      else
      {
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_10008E2DC(v31, (uint64_t)qword_10091AC90);
        id v32 = v109;
        os_log_type_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          uint64_t v113 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 136446466;
          uint64_t v36 = CKRecord.recordType.getter();
          id v112 = (ValueMetadata *)sub_1000C51B8(v36, v37, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v35 + 12) = 2082;
          id v38 = [v32 recordID];
          id v39 = [v38 ckShortDescription];

          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;

          id v112 = (ValueMetadata *)sub_1000C51B8(v40, v42, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          a4 = v102;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v35, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        [a4 updateChangeCount];
      }
    }
    if ([a4 shouldPerformCloudSchemaCatchUpSync])
    {
      id v43 = [a4 storeControllerManagedObjectContext];
      if (v43)
      {
        id v44 = v43;
        id v45 = [a4 accountCKIdentifier];
        if (v45)
        {
          id v46 = v45;
          uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v49 = v48;

          id v50 = [v44 cloudSchemaCatchUpSyncContextsByAccountIdentifier];
          sub_1000963CC(0, (unint64_t *)&unk_10091AD18);
          uint64_t v51 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(void *)(v51 + 16))
          {
            unint64_t v52 = sub_1001806F8(v47, v49);
            if (v53)
            {
              id v54 = *(id *)(*(void *)(v51 + 56) + 8 * v52);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v55 = [self incompatiblePropertyKeysForCloudObject:a4 persistenceCloudSchemaVersion:[v54 persistenceCloudSchemaVersion]];
              uint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v106 = (void *)sub_10012674C(v56);
              swift_bridgeObjectRelease();
LABEL_29:
              id v110 = [a4 createResolutionTokenMapIfNecessary];
              id v57 = [v111 getTokenKeys];
              uint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v100 = v58;
              uint64_t v60 = *(void *)(v58 + 16);
              if (!v60)
              {
LABEL_72:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                goto LABEL_73;
              }
              id v61 = (void **)(v100 + 40);
              *(void *)&long long v59 = 136446466;
              long long v97 = v59;
              v96[1] = (char *)&type metadata for Any + 8;
              *(void *)&long long v59 = 136446722;
              long long v101 = v59;
              while (1)
              {
                uint64_t v62 = (uint64_t)*(v61 - 1);
                os_log_type_t v63 = *v61;
                swift_bridgeObjectRetain_n();
                v64._countAndFlagsBits = v62;
                v64._object = v63;
                unint64_t v65 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B3E98, v64);
                swift_bridgeObjectRelease();
                if (v65 > 2) {
                  break;
                }
                LOBYTE(v112) = v65;
                if ([a4 shouldPerformCloudSchemaCatchUpSync])
                {
                  if ((_BYTE)v65)
                  {
                    uint64_t v66 = v65 == 1 ? 0x4E79616C70736964 : 0x73694C7472616D73;
                    uint64_t v67 = v65 == 1 ? 0xEB00000000656D61 : 0xE900000000000074;
                  }
                  else
                  {
                    uint64_t v66 = 0x6E6F697461657263;
                    uint64_t v67 = 0xEC00000065746144;
                  }
                  char v79 = sub_1001CBC20(v66, v67, (uint64_t)v106);
                  swift_bridgeObjectRelease();
                  if (v79)
                  {
                    if (qword_1009076A0 != -1) {
                      swift_once();
                    }
                    uint64_t v80 = type metadata accessor for Logger();
                    sub_10008E2DC(v80, (uint64_t)qword_10091AC90);
                    swift_bridgeObjectRetain_n();
                    id v81 = a4;
                    id v82 = Logger.logObject.getter();
                    int v83 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v82, (os_log_type_t)v83))
                    {
                      int v99 = v83;
                      uint64_t v84 = swift_slowAlloc();
                      uint64_t v98 = swift_slowAlloc();
                      uint64_t v113 = v98;
                      *(_DWORD *)uint64_t v84 = v97;
                      swift_bridgeObjectRetain();
                      *(void *)(v84 + 4) = sub_1000C51B8(v62, (unint64_t)v63, &v113);
                      swift_bridgeObjectRelease_n();
                      *(_WORD *)(v84 + 12) = 2082;
                      id v85 = [v81 remObjectID];
                      if (v85)
                      {
                        uint64_t v86 = v85;
                        id v87 = [v85 description];

                        uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        unint64_t v90 = v89;
                      }
                      else
                      {
                        unint64_t v90 = 0xE300000000000000;
                        uint64_t v88 = 7104878;
                      }
                      *(void *)(v84 + 14) = sub_1000C51B8(v88, v90, &v113);

                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v99, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v84, 0x16u);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();

                      a4 = v102;
                    }
                    else
                    {

                      swift_bridgeObjectRelease_n();
                    }
                    sub_10043E5E4(&v112, v104, v107, v105);
                    NSString v95 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease();
                    [v110 forceMergeFromMap:v111 forKey:v95];

                    goto LABEL_32;
                  }
                }
                NSString v91 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                id v92 = [v110 compareAndMergeWithMap:v111 forKey:v91];

                if ((v108 & 1) == 0) {
                  goto LABEL_60;
                }
                if (v65 > 1u) {
                  goto LABEL_63;
                }
                char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v93 & 1) == 0)
                {
LABEL_60:
                  if (v103)
                  {
                    if (v65 > 1u)
                    {
                      swift_bridgeObjectRelease();
LABEL_68:
                      sub_10043E5E4(&v112, v104, v107, v105);
                      goto LABEL_32;
                    }
                    char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v94) {
                      goto LABEL_68;
                    }
                  }
                  if (v92 == (id)-1) {
                    goto LABEL_68;
                  }
                }
LABEL_32:
                v61 += 2;
                if (!--v60) {
                  goto LABEL_72;
                }
              }
              swift_bridgeObjectRetain();
              v68._countAndFlagsBits = v62;
              v68._object = v63;
              Swift::Int v69 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B3F00, v68);
              swift_bridgeObjectRelease();
              if (v69)
              {
                if (qword_1009076A0 != -1) {
                  swift_once();
                }
                uint64_t v70 = type metadata accessor for Logger();
                sub_10008E2DC(v70, (uint64_t)qword_10091AC90);
                id v71 = v109;
                swift_bridgeObjectRetain();
                uint64_t v72 = Logger.logObject.getter();
                os_log_type_t v73 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v72, v73))
                {
                  uint64_t v74 = swift_slowAlloc();
                  uint64_t v113 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v74 = v101;
                  swift_bridgeObjectRetain();
                  *(void *)(v74 + 4) = sub_1000C51B8(v62, (unint64_t)v63, &v113);
                  swift_bridgeObjectRelease_n();
                  *(_WORD *)(v74 + 12) = 2082;
                  uint64_t v75 = CKRecord.recordType.getter();
                  *(void *)(v74 + 14) = sub_1000C51B8(v75, v76, &v113);

                  swift_bridgeObjectRelease();
                  *(_WORD *)(v74 + 22) = 2082;
                  id v112 = &_s6FieldsON_4;
                  sub_100094134(&qword_10091AD48);
                  uint64_t v77 = String.init<A>(reflecting:)();
                  *(void *)(v74 + 24) = sub_1000C51B8(v77, v78, &v113);
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v72, v73, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v74, 0x20u);
                  swift_arrayDestroy();
                  a4 = v102;
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  swift_bridgeObjectRelease_n();
                }
                goto LABEL_32;
              }
LABEL_63:
              swift_bridgeObjectRelease();
              goto LABEL_32;
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
        }
      }
    }
    uint64_t v106 = &_swiftEmptySetSingleton;
    goto LABEL_29;
  }
  uint64_t v12 = type metadata accessor for Date();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v13 = *(void *)(v12 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  }
  id v15 = v104;
  [v104 setCreationDate:isa];

  LOBYTE(v113) = 1;
  id v16 = v107;
  uint64_t v17 = v105;
  sub_10043E5E4(&v113, v15, v107, v105);
  LOBYTE(v113) = 2;
  sub_10043E5E4(&v113, v15, v16, v17);
  id v110 = sub_1004BECDC(v109, 1);
LABEL_73:
}

void sub_1004CD528(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = &v51[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = &v51[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v13 = &v51[-v12];
  id v14 = [(id)swift_getObjCClassFromObject() cdEntityName];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  id v18 = [a1 identifier];
  if (v18)
  {
    uint64_t v19 = v18;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  }
  sub_100096408((uint64_t)v10, (uint64_t)v13, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
  {
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
    unint64_t v20 = 0xE300000000000000;
    uint64_t v21 = 7104878;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v7, v13, v4);
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
    uint64_t v21 = UUID.uuidString.getter();
    unint64_t v20 = v22;
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  id v23 = [self ckRecordKeyForMinimumSupportedVersion];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  uint64_t v27 = CKRecord.subscript.getter();
  swift_unknownObjectRelease();
  if (v27)
  {
    uint64_t v55 = v15;
    if (CKRecord.subscript.getter())
    {
      self;
      uint64_t v28 = swift_dynamicCastObjCClass();
      if (v28)
      {
        unint64_t v29 = (void *)v28;
        swift_bridgeObjectRelease();
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        sub_10008E2DC(v30, (uint64_t)qword_10091AC90);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = swift_slowAlloc();
          uint64_t v54 = v21;
          uint64_t v34 = v33;
          uint64_t v53 = swift_slowAlloc();
          uint64_t v57 = v53;
          *(_DWORD *)uint64_t v34 = 136446466;
          swift_bridgeObjectRetain();
          uint64_t v56 = sub_1000C51B8(v55, v17, &v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v34 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v56 = sub_1000C51B8(v54, v20, &v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "REMCDObjectSystemFieldsMerging: Merged updated minimumSupportedVersion as NSNumber from CK record {entity: %{public}s, identifier: %{public}s}", (uint8_t *)v34, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        [a1 setMinimumSupportedVersion:[v29 integerValue]];
        swift_unknownObjectRelease();
        return;
      }
      swift_unknownObjectRelease();
    }
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10008E2DC(v42, (uint64_t)qword_10091AC90);
    swift_bridgeObjectRetain_n();
    id v43 = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v44 = v43;
    id v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.fault.getter();
    int v47 = v46;
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      uint64_t v57 = v53;
      *(_DWORD *)uint64_t v48 = 136446978;
      uint64_t v54 = v21;
      swift_bridgeObjectRetain();
      uint64_t v56 = sub_1000C51B8(v24, v26, &v57);
      int v52 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v48 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v56 = sub_1000C51B8(v55, v17, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v48 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v56 = sub_1000C51B8(v54, v20, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v48 + 32) = 2080;
      uint64_t v56 = CKRecord.subscript.getter();
      sub_100094134((uint64_t *)&unk_10091AD28);
      uint64_t v49 = String.init<A>(describing:)();
      uint64_t v56 = sub_1000C51B8(v49, v50, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v52, "REMCDObjectSystemFieldsMerging: Unknown kind of value in ckRecord[%{public}s] {entity: %{public}s, identifier: %{public}s, value: %s}", (uint8_t *)v48, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    id v35 = [a1 minimumSupportedVersion];
    uint64_t v36 = kREMSupportedVersionUnset;
    if (v35 == (id)kREMSupportedVersionUnset)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_10008E2DC(v37, (uint64_t)qword_10091AC90);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = swift_slowAlloc();
        uint64_t v54 = v21;
        uint64_t v41 = v40;
        uint64_t v57 = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 136446466;
        swift_bridgeObjectRetain();
        uint64_t v56 = sub_1000C51B8(v15, v17, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v41 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v56 = sub_1000C51B8(v54, v20, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "REMCDObjectSystemFieldsMerging: Found a case we are merging down a Unset version number from CK while local object version isn't unset {entity: %{public}s, identifier: %{public}s}", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      [a1 setMinimumSupportedVersion:v36];
    }
  }
}

void sub_1004CDEE8(void *a1, void *a2, void *a3, void *a4)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v86 & 1) == 0 && v85 == 1)
  {
    sub_1004CD528(a3, a4);

    return;
  }
  id v8 = sub_1004BF560(a1, 0);
  id v82 = v8;
  if (v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    CKRecordKeyValueSetting.subscript.getter();
    swift_bridgeObjectRelease();
    if ((v86 & 1) == 0 && v85 == 1 && [a2 markedForDeletion])
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_10008E2DC(v10, (uint64_t)qword_10091AC90);
      id v11 = a1;
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        char v79 = a4;
        uint64_t v14 = swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136446466;
        unint64_t v76 = a3;
        uint64_t v15 = CKRecord.recordType.getter();
        sub_1000C51B8(v15, v16, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v14 + 12) = 2082;
        id v17 = [v11 recordID];
        id v18 = a2;
        id v19 = [v17 ckShortDescription];

        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v22 = v21;

        a2 = v18;
        id v8 = v82;
        uint64_t v23 = v20;
        a3 = v76;
        sub_1000C51B8(v23, v22, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v14, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        a4 = v79;
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_10008E2DC(v24, (uint64_t)qword_10091AC90);
      id v25 = a1;
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v80 = a4;
        uint64_t v28 = swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136446466;
        uint64_t v77 = a3;
        uint64_t v29 = CKRecord.recordType.getter();
        sub_1000C51B8(v29, v30, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 12) = 2082;
        id v31 = [v25 recordID];
        os_log_type_t v32 = a2;
        id v33 = [v31 ckShortDescription];

        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v36 = v35;

        a2 = v32;
        id v8 = v82;
        uint64_t v37 = v34;
        a3 = v77;
        sub_1000C51B8(v37, v36, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        a4 = v80;
        swift_slowDealloc();
      }
      else
      {
      }
      [a2 updateChangeCount];
    }
  }
  if (![a2 shouldPerformCloudSchemaCatchUpSync]) {
    goto LABEL_27;
  }
  id v38 = [a2 storeControllerManagedObjectContext];
  if (!v38) {
    goto LABEL_27;
  }
  os_log_type_t v39 = v38;
  id v40 = [a2 accountCKIdentifier];
  if (!v40)
  {

LABEL_27:
    int v83 = &_swiftEmptySetSingleton;
    goto LABEL_28;
  }
  uint64_t v41 = v40;
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v43;

  id v45 = [v39 cloudSchemaCatchUpSyncContextsByAccountIdentifier];
  sub_1000963CC(0, (unint64_t *)&unk_10091AD18);
  uint64_t v46 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v46 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v83 = &_swiftEmptySetSingleton;
    id v8 = v82;
    goto LABEL_28;
  }
  unint64_t v47 = sub_1001806F8(v42, v44);
  id v8 = v82;
  if ((v48 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  id v49 = *(id *)(*(void *)(v46 + 56) + 8 * v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v50 = [self incompatiblePropertyKeysForCloudObject:a2 persistenceCloudSchemaVersion:[v49 persistenceCloudSchemaVersion]];
  uint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  int v83 = (void *)sub_10012674C(v51);
  swift_bridgeObjectRelease();
LABEL_28:
  id v84 = [a2 createResolutionTokenMapIfNecessary];
  id v52 = [v8 getTokenKeys];
  uint64_t v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v54 = *(void *)(v53 + 16);
  if (v54)
  {
    uint64_t v55 = (void **)(v53 + 40);
    unint64_t v78 = a3;
    id v81 = a4;
    do
    {
      uint64_t v57 = (uint64_t)*(v55 - 1);
      uint64_t v56 = *v55;
      swift_bridgeObjectRetain_n();
      v58._countAndFlagsBits = v57;
      v58._object = v56;
      Swift::Int v59 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B3F60, v58);
      swift_bridgeObjectRelease();
      if (v59)
      {
        swift_bridgeObjectRelease();
      }
      else if (([a2 shouldPerformCloudSchemaCatchUpSync] & 1) != 0 {
             && (sub_1001CBC20(0xD000000000000017, 0x80000001007C63B0, (uint64_t)v83) & 1) != 0)
      }
      {
        if (qword_1009076A0 != -1) {
          swift_once();
        }
        uint64_t v60 = type metadata accessor for Logger();
        sub_10008E2DC(v60, (uint64_t)qword_10091AC90);
        swift_bridgeObjectRetain_n();
        id v61 = a2;
        uint64_t v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v62, v63))
        {
          os_log_type_t v75 = v63;
          uint64_t v64 = swift_slowAlloc();
          uint64_t v85 = swift_slowAlloc();
          *(_DWORD *)uint64_t v64 = 136446466;
          swift_bridgeObjectRetain();
          *(void *)(v64 + 4) = sub_1000C51B8(v57, (unint64_t)v56, &v85);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v64 + 12) = 2082;
          id v65 = [v61 remObjectID];
          if (v65)
          {
            uint64_t v66 = v65;
            uint64_t v74 = a2;
            id v67 = [v65 description];

            uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v70 = v69;

            a2 = v74;
          }
          else
          {
            unint64_t v70 = 0xE300000000000000;
            uint64_t v68 = 7104878;
          }
          *(void *)(v64 + 14) = sub_1000C51B8(v68, v70, &v85);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v62, v75, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v64, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a3 = v78;
          a4 = v81;
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        sub_1004CD528(a3, a4);
        NSString v73 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v8 = v82;
        [v84 forceMergeFromMap:v82 forKey:v73];
      }
      else
      {
        NSString v71 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v72 = [v84 compareAndMergeWithMap:v8 forKey:v71];

        if (v72 == (id)-1) {
          sub_1004CD528(a3, a4);
        }
      }
      v55 += 2;
      --v54;
    }
    while (v54);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

#error "1004CF7EC: switch analysis failed: failed to propagate the switch expression (funcsize=981)"

void sub_1004CFB34(void *a1, void *a2, void *a3, void *a4)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  id v92 = a1;
  CKRecordKeyValueSetting.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v97 & 1) == 0 && v96 == 1)
  {
    uint64_t v8 = 10;
    char v9 = &byte_1008B40C0;
    do
    {
      char v10 = *v9++;
      LOBYTE(v96) = v10;
      sub_100652634(&v96, a3, a4);
      --v8;
    }
    while (v8);

    return;
  }
  id v94 = sub_1004C060C(a1, 0);
  uint64_t v88 = a2;
  unint64_t v90 = a3;
  NSString v91 = a4;
  if (v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    CKRecordKeyValueSetting.subscript.getter();
    swift_bridgeObjectRelease();
    if ((v97 & 1) == 0 && v96 == 1 && [a2 markedForDeletion])
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_10008E2DC(v12, (uint64_t)qword_10091AC90);
      id v13 = a1;
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136446466;
        uint64_t v17 = CKRecord.recordType.getter();
        sub_1000C51B8(v17, v18, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v16 + 12) = 2082;
        id v19 = [v13 recordID];
        id v20 = [v19 ckShortDescription];

        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;

        NSString v95 = (ValueMetadata *)sub_1000C51B8(v21, v23, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        a2 = v88;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_10008E2DC(v24, (uint64_t)qword_10091AC90);
      id v25 = a1;
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136446466;
        uint64_t v29 = CKRecord.recordType.getter();
        sub_1000C51B8(v29, v30, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 12) = 2082;
        id v31 = [v25 recordID];
        id v32 = [v31 ckShortDescription];

        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v34;

        NSString v95 = (ValueMetadata *)sub_1000C51B8(v33, v35, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        a2 = v88;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [a2 updateChangeCount];
    }
  }
  if (![a2 shouldPerformCloudSchemaCatchUpSync]) {
    goto LABEL_29;
  }
  id v36 = [a2 storeControllerManagedObjectContext];
  if (!v36) {
    goto LABEL_29;
  }
  uint64_t v37 = v36;
  id v38 = [a2 accountCKIdentifier];
  if (!v38)
  {

LABEL_29:
    unint64_t v89 = &_swiftEmptySetSingleton;
    goto LABEL_30;
  }
  os_log_type_t v39 = v38;
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;

  id v43 = [v37 cloudSchemaCatchUpSyncContextsByAccountIdentifier];
  sub_1000963CC(0, (unint64_t *)&unk_10091AD18);
  uint64_t v44 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v44 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v89 = &_swiftEmptySetSingleton;
    goto LABEL_30;
  }
  unint64_t v45 = sub_1001806F8(v40, v42);
  if ((v46 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  id v47 = *(id *)(*(void *)(v44 + 56) + 8 * v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v48 = [self incompatiblePropertyKeysForCloudObject:a2 persistenceCloudSchemaVersion:[v47 persistenceCloudSchemaVersion]];
  uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v89 = (void *)sub_10012674C(v49);
  swift_bridgeObjectRelease();
LABEL_30:
  id v93 = [a2 createResolutionTokenMapIfNecessary];
  id v50 = [v94 getTokenKeys];
  uint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v52 = *(void *)(v51 + 16);
  if (v52)
  {
    uint64_t v53 = (void **)(v51 + 40);
    do
    {
      uint64_t v55 = (uint64_t)*(v53 - 1);
      uint64_t v54 = *v53;
      swift_bridgeObjectRetain_n();
      v56._countAndFlagsBits = v55;
      v56._object = v54;
      Swift::Int v57 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B40D0, v56);
      swift_bridgeObjectRelease();
      LOBYTE(v95) = v57;
      if ([a2 shouldPerformCloudSchemaCatchUpSync])
      {
        unint64_t v58 = 0x80000001007C66C0;
        uint64_t v59 = 0xD000000000000012;
        switch(v57)
        {
          case 0:
            goto LABEL_53;
          case 1:
            uint64_t v60 = "didChooseToMigrateLocally";
            goto LABEL_52;
          case 2:
            uint64_t v59 = 0xD000000000000018;
            uint64_t v60 = "smartListIDsToUndelete";
            goto LABEL_52;
          case 3:
            uint64_t v59 = 0xD00000000000001DLL;
            uint64_t v60 = "derIdentifier";
            goto LABEL_52;
          case 4:
            unint64_t v58 = 0xEC000000746C6153;
            uint64_t v59 = 0x44496E6F73726570;
            goto LABEL_53;
          case 5:
            uint64_t v59 = 0xD000000000000021;
            uint64_t v60 = "listIDsMergeableOrderingAsset";
            goto LABEL_52;
          case 6:
            uint64_t v59 = 0xD000000000000023;
            uint64_t v60 = "LocalesInfoAsData";
            goto LABEL_52;
          case 7:
            uint64_t v59 = 0xD000000000000019;
            uint64_t v60 = "LocalesInfoChecksum";
            goto LABEL_52;
          case 8:
            uint64_t v59 = 0xD000000000000019;
            uint64_t v60 = "sharedListIDsToOwnerNames";
            goto LABEL_52;
          case 9:
            uint64_t v59 = 0xD00000000000001BLL;
            uint64_t v60 = "recentlyDeletedInfoAsData";
LABEL_52:
            unint64_t v58 = (unint64_t)v60 | 0x8000000000000000;
LABEL_53:
            char v72 = sub_1001CBC20(v59, v58, (uint64_t)v89);
            swift_bridgeObjectRelease();
            if ((v72 & 1) == 0) {
              goto LABEL_59;
            }
            if (qword_1009076A0 != -1) {
              swift_once();
            }
            uint64_t v73 = type metadata accessor for Logger();
            sub_10008E2DC(v73, (uint64_t)qword_10091AC90);
            swift_bridgeObjectRetain_n();
            id v74 = a2;
            os_log_type_t v75 = Logger.logObject.getter();
            os_log_type_t v76 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v75, v76))
            {
              os_log_type_t v87 = v76;
              uint64_t v77 = swift_slowAlloc();
              uint64_t v96 = swift_slowAlloc();
              *(_DWORD *)uint64_t v77 = 136446466;
              swift_bridgeObjectRetain();
              *(void *)(v77 + 4) = sub_1000C51B8(v55, (unint64_t)v54, &v96);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v77 + 12) = 2082;
              id v78 = [v74 remObjectID];
              if (v78)
              {
                char v79 = v78;
                id v80 = [v78 description];

                uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v83 = v82;
              }
              else
              {
                unint64_t v83 = 0xE300000000000000;
                uint64_t v81 = 7104878;
              }
              *(void *)(v77 + 14) = sub_1000C51B8(v81, v83, &v96);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v75, v87, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v77, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              a2 = v88;
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            sub_100652634(&v95, v90, v91);
            NSString v86 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v93 forceMergeFromMap:v94 forKey:v86];

            break;
          default:
            swift_bridgeObjectRetain();
            v61._countAndFlagsBits = v55;
            v61._object = v54;
            Swift::Int v62 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B41E0, v61);
            swift_bridgeObjectRelease();
            if (v62)
            {
              if (qword_1009076A0 != -1) {
                swift_once();
              }
              uint64_t v63 = type metadata accessor for Logger();
              sub_10008E2DC(v63, (uint64_t)qword_10091AC90);
              id v64 = v92;
              swift_bridgeObjectRetain();
              id v65 = Logger.logObject.getter();
              os_log_type_t v66 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v65, v66))
              {
                uint64_t v67 = swift_slowAlloc();
                uint64_t v96 = swift_slowAlloc();
                *(_DWORD *)uint64_t v67 = 136446722;
                swift_bridgeObjectRetain();
                *(void *)(v67 + 4) = sub_1000C51B8(v55, (unint64_t)v54, &v96);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v67 + 12) = 2082;
                uint64_t v68 = CKRecord.recordType.getter();
                *(void *)(v67 + 14) = sub_1000C51B8(v68, v69, &v96);

                swift_bridgeObjectRelease();
                *(_WORD *)(v67 + 22) = 2082;
                NSString v95 = &_s6FieldsON_6;
                sub_100094134(&qword_10091AD10);
                uint64_t v70 = String.init<A>(reflecting:)();
                *(void *)(v67 + 24) = sub_1000C51B8(v70, v71, &v96);
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v65, v66, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v67, 0x20u);
                swift_arrayDestroy();
                a2 = v88;
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            break;
        }
      }
      else
      {
LABEL_59:
        NSString v84 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v85 = [v93 compareAndMergeWithMap:v94 forKey:v84];

        if ((sub_1001BCCB0(v57, (uint64_t)&off_1008B4218) & 1) != 0 && v85
          || (sub_1001BCCB0(v57, (uint64_t)&off_1008B4240) & 1) == 0 && v85 == (id)-1)
        {
          sub_100652634(&v95, v90, v91);
        }
      }
      v53 += 2;
      --v52;
    }
    while (v52);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1004D0A38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unint64_t a10)
{
  os_log_type_t v39 = a4;
  uint64_t v16 = type metadata accessor for String.Encoding();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v38[1] = a7;
    v38[2] = a5;
    v38[3] = a6;
    id v20 = self;
    swift_bridgeObjectRetain();
    id v21 = [v20 sharedConfiguration];
    unint64_t v22 = (unint64_t)[v21 maxInlineAssetSizeBytes];

    if (!a10)
    {
      __break(1u);
      goto LABEL_24;
    }
    if (a3 >= 1 && v22 / a10 < a3)
    {
      static String.Encoding.utf8.getter();
      uint64_t v23 = String.data(using:allowLossyConversion:)();
      unint64_t v25 = v24;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      if (v25 >> 60 != 15)
      {
        unint64_t v35 = self;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v37 = [v35 assetForData:isa];

        swift_bridgeObjectRetain();
        CKRecord.subscript.setter();
        sub_100097F20(v23, v25);
LABEL_22:
        swift_bridgeObjectRetain();
        CKRecord.subscript.setter();
        return swift_bridgeObjectRelease();
      }
      if (qword_1009076A0 == -1)
      {
LABEL_7:
        uint64_t v26 = type metadata accessor for Logger();
        sub_10008E2DC(v26, (uint64_t)qword_10091AC90);
        swift_bridgeObjectRetain_n();
        os_log_type_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          uint64_t v40 = swift_slowAlloc();
          *(void *)&long long v41 = a1;
          *(_DWORD *)uint64_t v29 = 136315138;
          *((void *)&v41 + 1) = a2;
          swift_bridgeObjectRetain();
          uint64_t v30 = String.init<A>(describing:)();
          *(void *)&long long v41 = sub_1000C51B8(v30, v31, &v40);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Can't create data from object and not able to save it as asset {object: %s}", v29, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        swift_bridgeObjectRetain();
        CKRecord.subscript.setter();
        goto LABEL_22;
      }
LABEL_24:
      swift_once();
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  id v32 = v39;
  CKRecord.subscript.setter();
  if (a9)
  {
    id v33 = [v32 encryptedValues];
    if (a2)
    {
      *((void *)&v42 + 1) = &type metadata for String;
      id v43 = &protocol witness table for String;
      *(void *)&long long v41 = a1;
      *((void *)&v41 + 1) = a2;
    }
    else
    {
      id v43 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
    }
    swift_getObjectType();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  else
  {
    if (a2)
    {
      *((void *)&v42 + 1) = &type metadata for String;
      id v43 = &protocol witness table for String;
      *(void *)&long long v41 = a1;
      *((void *)&v41 + 1) = a2;
    }
    else
    {
      id v43 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
    }
    sub_1000963CC(0, (unint64_t *)&qword_100909E80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return CKRecordKeyValueSetting.subscript.setter();
  }
}

void sub_1004D0F28(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unint64_t a10)
{
  if (a2 >> 60 == 15) {
    goto LABEL_9;
  }
  uint64_t v14 = self;
  sub_100097E38(a1, a2);
  id v15 = [v14 sharedConfiguration];
  unint64_t v16 = (unint64_t)[v15 maxInlineAssetSizeBytes];

  if (!a10)
  {
    __break(1u);
    return;
  }
  if (a3 < 1 || v16 / a10 >= a3)
  {
    sub_100097F20(a1, a2);
LABEL_9:
    swift_bridgeObjectRetain();
    CKRecord.subscript.setter();
    if (a9)
    {
      id v20 = [a4 encryptedValues];
      swift_getObjectType();
      sub_100097E24(a1, a2);
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
      swift_unknownObjectRelease();
    }
    else
    {
      sub_100097E24(a1, a2);
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
    }
    return;
  }
  uint64_t v17 = self;
  sub_100097E38(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v19 = [v17 assetForData:isa];

  swift_bridgeObjectRetain();
  CKRecord.subscript.setter();
  sub_100097F20(a1, a2);
  swift_bridgeObjectRetain();
  CKRecord.subscript.setter();

  sub_100097F20(a1, a2);
}

void *sub_1004D1208(void *a1)
{
  if (!a1) {
    return _swiftEmptyArrayStorage;
  }
  id v19 = a1;
  sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
  sub_1000963CC(0, (unint64_t *)&unk_10090B010);
  sub_10012C598();
  id v18 = a1;
  unint64_t v2 = Sequence.elements<A>(ofType:)();
  unint64_t v3 = v2;
  if (!(v2 >> 62))
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_4;
    }
LABEL_19:
    char v7 = _swiftEmptyArrayStorage;
LABEL_20:

    swift_bridgeObjectRelease_n();
    return v7;
  }
  swift_bridgeObjectRetain();
  uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = (uint64_t)result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_4:
  if (v4 >= 1)
  {
    uint64_t v6 = 0;
    char v7 = _swiftEmptyArrayStorage;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v3 + 8 * v6 + 32);
      }
      char v9 = v8;
      id v10 = [v8 ckIdentifier:v18 v19];
      if (v10)
      {
        char v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v7 = sub_100308F88(0, v7[2] + 1, 1, v7);
        }
        unint64_t v16 = v7[2];
        unint64_t v15 = v7[3];
        if (v16 >= v15 >> 1) {
          char v7 = sub_100308F88((void *)(v15 > 1), v16 + 1, 1, v7);
        }
        v7[2] = v16 + 1;
        uint64_t v17 = &v7[2 * v16];
        v17[4] = v12;
        v17[5] = v14;
      }
      else
      {
      }
      ++v6;
    }
    while (v4 != v6);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004D1418()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091AD90);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091AD90);
  if (qword_1009077F8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942430);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1004D14E0()
{
  return PassthroughSubject.init()();
}

void sub_1004D151C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v12 = *a2;
  sub_1004D1C88(a3, a4, a5);
  swift_retain();
  swift_bridgeObjectRetain();
  id v13 = a8;
  sub_1004D1ACC(v12, a6, a7, v13);
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v14 = *(void (**)(uint64_t))(a1 + 16);
  if (v14)
  {
    swift_retain();
    v14(v12);
    sub_100096314((uint64_t)v14);
  }
}

uint64_t sub_1004D1608@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [a1 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_1004D171C()
{
  sub_100096314(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDDisabledAccountsEventHandler()
{
  return self;
}

void sub_1004D1780(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(void *)(swift_allocObject() + 16) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  id v11 = a2;
  swift_bridgeObjectRetain();
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();
  swift_release();
  swift_release();
  unint64_t v12 = v25;
  if (v25)
  {
    uint64_t v13 = v24;
    NSString v14 = String._bridgeToObjectiveC()();
    [a5 giveAccountWithIDAnotherChance:v14];

    if (qword_1009076A8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091AD90);
    id v16 = a1;
    swift_bridgeObjectRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446466;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v13, v12, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 12) = 2082;
      id v20 = [v16 internalDescription];
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;

      sub_1000C51B8(v21, v23, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDDisabledAccountsEventHandler did reset babysitter for {babysittableWaiterID: %{public}s, accountTypeHost: %{public}s}", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_1004D1ACC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v22 = a1 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v11) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v22 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v11) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v22 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v11) {
          goto LABEL_23;
        }
        unint64_t v20 = *(void *)(v22 + 8 * v12);
        if (!v20)
        {
          int64_t v12 = v19 + 3;
          if (v19 + 3 >= v11) {
            goto LABEL_23;
          }
          unint64_t v20 = *(void *)(v22 + 8 * v12);
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v14 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a1 + 48) + 24 * v14;
    id v16 = *(void **)(v15 + 16);
    id v17 = *(id *)(v15 + 8);
    id v18 = v16;
    sub_1004D1780(v17, v18, a2, a3, a4);
  }
  int64_t v21 = v19 + 4;
  if (v21 >= v11)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v20 = *(void *)(v22 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v11) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v22 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

void sub_1004D1C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void, unint64_t, uint64_t, uint64_t))(a2 + 16))(0, 0xF000000000000000, ObjectType, a2);
  (*(void (**)(void, unint64_t, uint64_t, uint64_t))(a3 + 16))(0, 0xF000000000000000, ObjectType, a3);
  if (qword_1009076A8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10091AD90);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, "RDDisabledAccountsEventHandler did reset accountsListCategorizedCountsCache and hashtagLabelsInCustomSmartListFilterCache", v8, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1004D1DD4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D1E0C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1004D1608(*(void **)(v1 + 16), a1);
}

uint64_t sub_1004D1E28()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D1E60@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1004D1E80()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091AE58);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091AE58);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1004D21B0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDXPCIndexingPerformer();
  return [super dealloc];
}

uint64_t type metadata accessor for RDXPCIndexingPerformer()
{
  return self;
}

uint64_t sub_1004D2218(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v52 = *(void *)(v2 - 8);
  uint64_t v53 = v2;
  __chkstk_darwin(v2);
  uint64_t v54 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UTType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v49 - v9;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = objc_allocWithZone((Class)CSSearchableIndex);
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v49 = [v11 initWithName:v12 protectionClass:v13 bundleIdentifier:v14];

  static UTType.image.getter();
  UTType.identifier.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v10, v4);
  id v16 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v18 = [v16 initWithItemContentType:v17];

  NSString v19 = String._bridgeToObjectiveC()();
  [v18 setTitle:v19];

  Date.init()();
  unint64_t v20 = self;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v22 = [v20 localizedStringFromDate:isa dateStyle:1 timeStyle:1];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v25 = v24;

  aBlock = 0;
  unint64_t v56 = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD000000000000016;
  unint64_t v56 = 0x80000001007D68A0;
  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 setContentDescription:v27];

  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_100776E80;
  static UTType.utf8PlainText.getter();
  uint64_t v29 = UTType.identifier.getter();
  uint64_t v31 = v30;
  v15(v10, v4);
  *(void *)(v28 + 32) = v29;
  *(void *)(v28 + 40) = v31;
  static UTType.utf16PlainText.getter();
  uint64_t v32 = UTType.identifier.getter();
  uint64_t v34 = v33;
  v15(v7, v4);
  *(void *)(v28 + 48) = v32;
  *(void *)(v28 + 56) = v34;
  Class v35 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v18 setProviderDataTypeIdentifiers:v35];

  id v36 = objc_allocWithZone((Class)CSSearchableItem);
  id v37 = v18;
  NSString v38 = String._bridgeToObjectiveC()();
  NSString v39 = String._bridgeToObjectiveC()();
  id v40 = [v36 initWithUniqueIdentifier:v38 domainIdentifier:v39 attributeSet:v37];

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_10077A530;
  *(void *)(v41 + 32) = v40;
  aBlock = (void **)v41;
  specialized Array._endMutation()();
  sub_1004D2D8C();
  id v42 = v40;
  Class v43 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v44 = swift_allocObject();
  uint64_t v45 = v51;
  *(void *)(v44 + 16) = v50;
  *(void *)(v44 + 24) = v45;
  uint64_t v59 = sub_10011E21C;
  uint64_t v60 = v44;
  aBlock = _NSConcreteStackBlock;
  unint64_t v56 = 1107296256;
  Swift::Int v57 = sub_1000E13D0;
  unint64_t v58 = &unk_1008C7F60;
  char v46 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v47 = v49;
  [v49 indexSearchableItems:v43 completionHandler:v46];
  _Block_release(v46);

  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v54, v53);
}

uint64_t sub_1004D2840(uint64_t a1, uint64_t a2)
{
  if (qword_1009076B0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10091AE58);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Daemon receives reindexAllSearchableItems", v7, 2u);
    swift_slowDealloc();
  }

  [*(id *)(a1 + OBJC_IVAR____TtC7remindd22RDXPCIndexingPerformer_storeController) reindexAllSearchableItems];
  uint64_t v8 = *(uint64_t (**)(uint64_t))(a2 + 16);

  return v8(a2);
}

uint64_t sub_1004D295C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009076B0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_10091AE58);
  swift_bridgeObjectRetain_n();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v15 = a2;
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v9 = Array.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    sub_1000C51B8(v9, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a2 = v15;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Daemon receives reindexSearchableItems {identifiers: %s}", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  NSString v12 = *(void **)(a2 + OBJC_IVAR____TtC7remindd22RDXPCIndexingPerformer_storeController);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v12 reindexSearchableItemsWithIdentifiers:isa];

  return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

void sub_1004D2B84(void *a1, uint64_t a2)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = static NSFileProtectionType.rem_spotlightIndexFileProtection.getter();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v7)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v9 = 0;
  }
  id v10 = objc_allocWithZone((Class)CSSearchableIndex);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v10 initWithName:v8 protectionClass:v9 bundleIdentifier:v11];

  if (a1)
  {
    v13[4] = a1;
    v13[5] = a2;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_1000E13D0;
    v13[3] = &unk_1008C7EE8;
    a1 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }
  [v12 deleteAllSearchableItemsWithCompletionHandler:a1];
  _Block_release(a1);
}

uint64_t sub_1004D2D3C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D2D74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004D2D84()
{
  return swift_release();
}

unint64_t sub_1004D2D8C()
{
  unint64_t result = qword_10091AEA0;
  if (!qword_10091AEA0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10091AEA0);
  }
  return result;
}

uint64_t sub_1004D2DCC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

id REMCDDueDateDeltaAlert.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)swift_getObjectType();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

uint64_t static REMCDDueDateDeltaAlert.cdEntityName.getter()
{
  return String.init<A>(describing:)();
}

id REMCDDueDateDeltaAlert.remChangedObjectID()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)&double v5 = __chkstk_darwin(v3).n128_u64[0];
  objc_super v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [v1 identifier:v5];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v14[1] = ObjectType;
  sub_100094134((uint64_t *)&unk_100920C20);
  String.init<A>(describing:)();
  id v9 = objc_allocWithZone((Class)REMObjectID);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v9 initWithUUID:isa entityName:v11];

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v12;
}

uint64_t type metadata accessor for REMCDDueDateDeltaAlert()
{
  return self;
}

uint64_t sub_1004D3164()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091AED0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091AED0);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1004D322C()
{
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x646E696D6572202CLL;
  v1._object = (void *)0xED0000203A737265;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 125;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0x203A737473696C7BLL;
}

uint64_t sub_1004D3338(void *a1)
{
  *(unsigned char *)(v1 + 64) = 1;
  *(_OWORD *)(v1 + 16) = xmmword_10078EF20;
  *(void *)(v1 + 72) = _swiftEmptyArrayStorage;
  *(_WORD *)(v1 + 80) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 32) = 0x80000001007D6AD0;
  *(void *)(v1 + 40) = a1;
  [a1 setMode:4];
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  return v1;
}

void sub_1004D33A0(id a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char **)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v8);
  NSString v13 = (char *)&v27 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v27 - v14;
  if (![a1 inactive])
  {
LABEL_10:
    if (qword_1009076B8 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_10008E2DC(v6, (uint64_t)qword_10091AED0);
    id v22 = *(void (**)(char **, uint64_t, uint64_t))(v7 + 16);
    v7 += 16;
    v22(v10, v21, v6);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_100094134(&qword_100908170);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)(inited + 32) = 48;
    *(void *)(inited + 40) = 0xE100000000000000;
    a1 = [a1 objectID];
    *(void *)(inited + 72) = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    *(void *)(inited + 48) = a1;
    sub_1001805C0(inited);
    uint64_t v6 = (uint64_t)v10;
    sub_10052ECB8((uint64_t)"RDAccountDataMover: The copy-from account is an inactivated account {%{public}@}.", 81, 2);
    __break(1u);
    goto LABEL_13;
  }
  id v10 = &selRef_stringFromDate_;
  if ([a1 type] == (id)3)
  {
    if ([a2 type] != (id)1 && objc_msgSend(a2, "type") != (id)5 && objc_msgSend(a2, "type"))
    {
      sub_1004D383C(v3, a1, a2);
      return;
    }
    if (qword_1009076B8 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_10008E2DC(v6, (uint64_t)qword_10091AED0);
    id v18 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v7 += 16;
    v18(v15, v17, v6);
    a1 = (id)sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_100094134(&qword_100908170);
    uint64_t v19 = swift_initStackObject();
    *(_OWORD *)(v19 + 16) = xmmword_100776E40;
    *(void *)(v19 + 32) = 48;
    *(void *)(v19 + 40) = 0xE100000000000000;
    id v20 = [a2 objectID];
    *(void *)(v19 + 72) = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    *(void *)(v19 + 48) = v20;
    sub_1001805C0(v19);
    uint64_t v6 = (uint64_t)v15;
    sub_10052ECB8((uint64_t)"RDAccountDataMover: The copy-to account is not a cloud account type {%{public}@}.", 81, 2);
    __break(1u);
    goto LABEL_10;
  }
LABEL_13:
  if (qword_1009076B8 != -1) {
    swift_once();
  }
  uint64_t v24 = sub_10008E2DC(v6, (uint64_t)qword_10091AED0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v24, v6);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  sub_100094134(&qword_100908170);
  uint64_t v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = xmmword_100776E40;
  *(void *)(v25 + 32) = 48;
  *(void *)(v25 + 40) = 0xE100000000000000;
  id v26 = [a1 objectID];
  *(void *)(v25 + 72) = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  *(void *)(v25 + 48) = v26;
  sub_1001805C0(v25);
  sub_10052ECB8((uint64_t)"RDAccountDataMover: The copy-from account is not a CalDAV account {%{public}@}.", 79, 2);
  __break(1u);
}

void sub_1004D383C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)sub_1004D73C0();
  if (!v3)
  {
    id v7 = v6;
    sub_1004D4094(a2, (uint64_t)a3, v7);
    id v8 = [v7 updateAccount:a3];
    [v8 setDaWasMigrated:1];
    sub_1004D705C();
    if (qword_1009076B8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10091AED0);
    id v10 = a2;
    id v11 = a3;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t type = v13;
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138543618;
      id v18 = v12;
      id v16 = [v10 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v15 = v16;

      *(_WORD *)(v14 + 12) = 2114;
      id v19 = [v11 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v15[1] = v19;

      _os_log_impl((void *)&_mh_execute_header, v18, type, "RDAccountDataMover: Copied data from inactivated account, saved all changes and set .daWasMigrated=YES to cloud account {inactivatedAccount: %{public}@, cloudAccount: %{public}@}", (uint8_t *)v14, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_1004D3AE0(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t inited = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(inited - 8);
  uint64_t v8 = __chkstk_darwin(inited);
  id v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v20[-v11];
  if ([a1 type] == (id)1)
  {
    if ([a2 type] != (id)1 && objc_msgSend(a2, "type") != (id)5 && objc_msgSend(a2, "type"))
    {
      sub_1004D3E48(v3, a1, a2);
      return;
    }
    if (qword_1009076B8 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_10008E2DC(inited, (uint64_t)qword_10091AED0);
    uint64_t v15 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16);
    v7 += 16;
    v15(v12, v14, inited);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_100094134(&qword_100908170);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)(inited + 32) = 48;
    *(void *)(inited + 40) = 0xE100000000000000;
    id v16 = [a2 objectID];
    *(void *)(inited + 72) = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    *(void *)(inited + 48) = v16;
    sub_1001805C0(inited);
    a1 = v12;
    sub_10052ECB8((uint64_t)"RDAccountDataMover: The copy-to account is not a cloud account type {%{public}@}.", 81, 2);
    __break(1u);
  }
  if (qword_1009076B8 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10008E2DC(inited, (uint64_t)qword_10091AED0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v10, v17, inited);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  sub_100094134(&qword_100908170);
  uint64_t v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_100776E40;
  *(void *)(v18 + 32) = 48;
  *(void *)(v18 + 40) = 0xE100000000000000;
  id v19 = [a1 objectID];
  *(void *)(v18 + 72) = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  *(void *)(v18 + 48) = v19;
  sub_1001805C0(v18);
  sub_10052ECB8((uint64_t)"RDAccountDataMover: The copy-from account is not a local account {%{public}@}.", 78, 2);
  __break(1u);
}

void sub_1004D3E48(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)sub_1004D73C0();
  if (!v3)
  {
    id v7 = v6;
    sub_1004D4094(a2, (uint64_t)a3, v7);
    id v8 = [v7 updateAccount:a3];
    [v8 setDaWasMigrated:1];
    sub_1004D705C();
    if (qword_1009076B8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10091AED0);
    id v10 = a3;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v13 = 138543362;
      id v15 = [v10 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v15;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDAccountDataMover: Saved all changes and set .daWasMigrated=YES to cloud account {cloudAccount: %{public}@}", v13, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_1004D4094(void *a1, uint64_t a2, void *a3)
{
  id v136 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  unint64_t v143 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  *(void *)&long long v132 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = v3;
  v3[6] = 0;
  v3[7] = 0;
  Swift::Int v134 = v3 + 6;
  id v8 = (void *)v3[5];
  id v9 = [self localAccountDefaultListID];
  uint64_t v147 = 0;
  id v10 = [v8 fetchListWithObjectID:v9 error:&v147];

  uint64_t v11 = &selRef_intersectsSet_;
  if (v10)
  {
    os_log_type_t v12 = v147;
    id v13 = [v10 account];
    id v14 = [v13 objectID];

    id v15 = [(id)a2 objectID];
    id v16 = v15;
    if (v14)
    {
      if (v15)
      {
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        id v17 = v14;
        char v18 = static NSObject.== infix(_:_:)();

        if (v18) {
          goto LABEL_12;
        }
      }
      else
      {
      }
      goto LABEL_11;
    }
    if (v15)
    {

LABEL_11:
      id v10 = 0;
    }
  }
  else
  {
    id v19 = v147;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v141 = 0;
  }
LABEL_12:
  uint64_t v147 = 0;
  id v20 = [a1 fetchListsWithError:&v147];
  uint64_t v21 = v147;
  if (!v20)
  {
    id v80 = v147;
    uint64_t v81 = _convertNSErrorToError(_:)();

    uint64_t v141 = v81;
    swift_willThrow();

    return;
  }
  id v22 = v20;
  uint64_t v139 = sub_1000963CC(0, &qword_10090E198);
  unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v21;

  if (v23 >> 62) {
    goto LABEL_112;
  }
  uint64_t v26 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  id v133 = v10;
  if (v26)
  {
    unint64_t v144 = v26;
    if (v26 < 1) {
      goto LABEL_116;
    }
    uint64_t v130 = v6;
    id v137 = (id)a2;
    uint64_t v27 = 0;
    unint64_t v145 = v23 & 0xC000000000000001;
    Class v129 = (void (**)(uint64_t, uint64_t))(v143 + 8);
    id v128 = &v148;
    uint64_t v6 = (uint64_t)&_swiftEmptyDictionarySingleton;
    *(void *)&long long v25 = 138543362;
    long long v140 = v25;
    *(void *)&long long v25 = 138543618;
    long long v127 = v25;
    unint64_t v143 = v23;
    unint64_t v28 = v144;
    while (1)
    {
      if (v145) {
        id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v32 = *(id *)(v23 + 8 * v27 + 32);
      }
      uint64_t v33 = v32;
      if (qword_1009076B8 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_10008E2DC(v34, (uint64_t)qword_10091AED0);
      uint64_t v31 = v33;
      Class v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc();
        uint64_t v38 = v6;
        NSString v39 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = v140;
        id v40 = [v31 v11[261]];
        *(void *)(v37 + 4) = v40;
        *NSString v39 = v40;

        _os_log_impl((void *)&_mh_execute_header, v35, v36, "RDAccountDataMover: Processing source list to consider... {objectID: %{public}@}", (uint8_t *)v37, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        uint64_t v6 = v38;
        unint64_t v28 = v144;
        swift_slowDealloc();
        unint64_t v23 = v143;
        swift_slowDealloc();
      }
      else
      {

        Class v35 = v31;
      }

      if ([v31 daIsEventOnlyContainer]) {
        goto LABEL_20;
      }
      if ([v31 daIsNotificationsCollection]) {
        goto LABEL_20;
      }
      id v41 = [v137 capabilities];
      unsigned __int8 v42 = [v41 supportsGroups];

      if (v42 & 1) == 0 && ([v31 isGroup]) {
        goto LABEL_20;
      }
      if ([v31 sharingStatus] == (id)3) {
        goto LABEL_20;
      }
      if (*((unsigned char *)v142 + 64) != 1 || ![v31 isSharedToMe]) {
        break;
      }
      uint64_t v29 = v31;
      Class v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        Swift::Int v135 = v43;
        uint64_t v46 = v45;
        id v47 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = v140;
        id v48 = [v29 v11[261]];
        *(void *)(v46 + 4) = v48;
        *id v47 = v48;

        _os_log_impl((void *)&_mh_execute_header, v135, v44, "RDAccountDataMover: we chose to exclude this source list since someone else owns it {objectID: %{public}@}", (uint8_t *)v46, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v30 = v135;
        swift_slowDealloc();
      }
      else
      {

        uint64_t v30 = v29;
      }
LABEL_19:

      uint64_t v31 = v30;
LABEL_20:
      ++v27;

      if (v28 == v27) {
        goto LABEL_64;
      }
    }
    Swift::Int v135 = [v136 updateAccount:v137];
    if (v133)
    {
      uint64_t v138 = v6;
      NSString v49 = v133;
      id v50 = [v31 name];
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v53 = v52;

      id v54 = [v49 name];
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v57 = v56;

      if (v51 == v55 && v53 == v57)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v11 = &selRef_intersectsSet_;
        uint64_t v6 = v138;
LABEL_43:
        id v59 = [v136 updateList:v49];
        unint64_t v28 = v144;
LABEL_49:
        id v60 = v59;

        [v60 copyListDataFrom:v31];
        if (*((unsigned char *)v142 + 80) == 1)
        {
          id v61 = [v31 v11[261]];
          id v62 = [v61 uuid];

          uint64_t v63 = v132;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          UUID.uuidString.getter();
          uint64_t v64 = v63;
          unint64_t v28 = v144;
          (*v129)(v64, v130);
          NSString v65 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v60 setExternalIdentifier:v65];
        }
        if (*((unsigned char *)v142 + 81) == 1) {
          [v60 setSharingStatus:-[NSObject sharingStatus](v31, "sharingStatus")];
        }
        id v66 = [v60 v11[261]];
        if ((v6 & 0xC000000000000001) != 0)
        {
          if (v6 < 0) {
            uint64_t v67 = v6;
          }
          else {
            uint64_t v67 = v6 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v68 = v31;
          uint64_t v69 = __CocoaDictionary.count.getter();
          if (__OFADD__(v69, 1))
          {
            __break(1u);
LABEL_116:
            __break(1u);
          }
          uint64_t v6 = sub_1001A8830(v67, v69 + 1);
        }
        else
        {
          uint64_t v70 = v31;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v147 = v6;
        sub_1002C6A34((uint64_t)v31, v66, isUniquelyReferenced_nonNull_native);
        uint64_t v138 = (uint64_t)v147;

        swift_bridgeObjectRelease();
        char v72 = v31;
        id v73 = v60;
        id v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v76 = swift_slowAlloc();
          uint64_t v77 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v76 = v127;
          id v78 = [v72 v11[261]];
          uint64_t v147 = v78;
          *(void *)&long long v131 = v74;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v77 = v78;

          *(_WORD *)(v76 + 12) = 2114;
          char v79 = [v73 objectID];
          uint64_t v147 = v79;
          uint64_t v29 = v131;
          unint64_t v28 = v144;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v77[1] = v79;
          uint64_t v11 = &selRef_intersectsSet_;

          _os_log_impl((void *)&_mh_execute_header, v29, v75, "RDAccountDataMover: Done copying source list {sourceList: %{public}@, targetList: %{public}@}", (uint8_t *)v76, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v6 = v138;
          unint64_t v23 = v143;
          uint64_t v30 = v135;
        }
        else
        {

          uint64_t v29 = v72;
          uint64_t v30 = v72;
          uint64_t v6 = v138;
          unint64_t v23 = v143;
        }
        goto LABEL_19;
      }
      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = &selRef_intersectsSet_;
      uint64_t v6 = v138;
      if (v58) {
        goto LABEL_43;
      }

      unint64_t v28 = v144;
    }
    NSString v49 = [v31 name];
    if (!v49)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v59 = [v136 addListWithName:v49 toAccountChangeItem:v135];
    goto LABEL_49;
  }
  uint64_t v6 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_64:
  swift_bridgeObjectRelease();
  if (qword_1009076B8 != -1) {
    swift_once();
  }
  uint64_t v82 = type metadata accessor for Logger();
  unint64_t v83 = (void *)sub_10008E2DC(v82, (uint64_t)qword_10091AED0);
  NSString v84 = v136;
  id v136 = v83;
  id v85 = Logger.logObject.getter();
  os_log_type_t v86 = static os_log_type_t.info.getter();
  BOOL v87 = os_log_type_enabled(v85, v86);
  uint64_t v88 = &selRef_ckServerChangeTokens;
  Swift::Int v135 = v84;
  if (v87)
  {
    unint64_t v89 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v89 = 134217984;
    unint64_t v23 = (unint64_t)(v89 + 4);
    id v90 = [v84 trackedListChangeItems];
    uint64_t v91 = v6;
    id v92 = [v90 count];

    uint64_t v147 = v92;
    uint64_t v6 = v91;
    NSString v84 = v135;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v85, v86, "RDAccountDataMover: Source lists processed {count: %ld}", v89, 0xCu);
    uint64_t v88 = &selRef_ckServerChangeTokens;
    swift_slowDealloc();
  }
  else
  {

    id v85 = v84;
  }

  id v93 = [v84 trackedListChangeItems];
  id v94 = [v93 v88[80]];

  if (__OFADD__(*v134, v94))
  {
    __break(1u);
LABEL_114:
    swift_bridgeObjectRetain();
    uint64_t v97 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_73;
  }
  *v134 += v94;
  unint64_t v95 = swift_bridgeObjectRetain();
  unint64_t v23 = (unint64_t)sub_10020B8F4(v95);
  swift_bridgeObjectRelease();
  if ((v23 & 0x8000000000000000) != 0 || (v23 & 0x4000000000000000) != 0) {
    goto LABEL_114;
  }
  uint64_t v97 = *(void *)(v23 + 16);
LABEL_73:
  if (!v97)
  {
LABEL_109:
    swift_release();
    swift_bridgeObjectRelease();

    return;
  }
  unint64_t v144 = v6 & 0xC000000000000001;
  unint64_t v145 = v23 & 0xC000000000000001;
  uint64_t v98 = v6 & 0xFFFFFFFFFFFFFF8;
  if (v6 < 0) {
    uint64_t v98 = v6;
  }
  unint64_t v143 = v98;
  a2 = 4;
  *(void *)&long long v96 = 138543362;
  long long v132 = v96;
  *(void *)&long long v96 = 138543618;
  long long v131 = v96;
  id v137 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v138 = v6;
  Swift::Int v134 = (void *)v23;
  *(void *)&long long v140 = v97;
  while (1)
  {
    if (v145) {
      uint64_t v100 = (char **)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v100 = (char **)*(id *)(v23 + 8 * a2);
    }
    uint64_t v11 = v100;
    id v10 = (id)(a2 - 3);
    if (__OFADD__(a2 - 4, 1))
    {
      __break(1u);
LABEL_112:
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    if (!v144) {
      break;
    }
    long long v101 = v100;
    uint64_t v102 = __CocoaDictionary.lookup(_:)();
    if (v102)
    {
      uint64_t v146 = v102;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      int v103 = v147;
      swift_unknownObjectRelease();

      if (!v103) {
        goto LABEL_93;
      }
      goto LABEL_87;
    }
LABEL_77:
    int v99 = v11;
LABEL_78:

    uint64_t v11 = v99;
LABEL_79:

    ++a2;
    if (v10 == (id)v97) {
      goto LABEL_109;
    }
  }
  if (!*(void *)(v6 + 16)) {
    goto LABEL_79;
  }
  unint64_t v111 = sub_100306FE8((uint64_t)v100);
  if ((v112 & 1) == 0) {
    goto LABEL_77;
  }
  int v103 = *(id *)(*(void *)(v6 + 56) + 8 * v111);

  if (!v103)
  {
LABEL_93:
    uint64_t v97 = v140;
    goto LABEL_79;
  }
LABEL_87:
  id v104 = -[NSObject _trackedListChangeItemForObjectID:](v84, "_trackedListChangeItemForObjectID:", v11, (void)v127, *((void *)&v127 + 1));
  if (!v104)
  {
    uint64_t v113 = v11;
    uint64_t v11 = (char **)Logger.logObject.getter();
    os_log_type_t v114 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v11, v114))
    {
      uint64_t v115 = swift_slowAlloc();
      char v116 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v115 = v132;
      *(void *)(v115 + 4) = v113;
      *char v116 = v113;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v11, v114, "RDAccountDataMover: Can't find target list change item with {objectID: %{public}@}", (uint8_t *)v115, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      NSString v84 = v135;
      swift_slowDealloc();
      uint64_t v105 = v103;
    }
    else
    {

      uint64_t v105 = v113;
      uint64_t v11 = (char **)v103;
    }
    uint64_t v97 = v140;
    goto LABEL_108;
  }
  uint64_t v105 = v104;
  uint64_t v106 = Logger.logObject.getter();
  os_log_type_t v107 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v106, v107))
  {
    uint64_t v108 = swift_slowAlloc();
    unint64_t v109 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v108 = v132;
    id v110 = [v105 objectID];
    *(void *)(v108 + 4) = v110;
    *unint64_t v109 = v110;

    _os_log_impl((void *)&_mh_execute_header, v106, v107, "RDAccountDataMover: Processing target list to copy reminders into {objectID: %{public}@}", (uint8_t *)v108, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    uint64_t v6 = v138;
    swift_slowDealloc();
    NSString v84 = v135;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v106 = v105;
  }

  uint64_t v117 = v141;
  char v118 = sub_1004D5E08(v103, v105, v84);
  uint64_t v141 = v117;
  if (!v117)
  {
    if (v118)
    {
      uint64_t v113 = (char **)v103;
      uint64_t v97 = v140;
    }
    else
    {
      unint64_t v119 = v142[9];
      swift_bridgeObjectRetain();
      id v120 = [v103 objectID];
      char v121 = sub_1001BD790((uint64_t)v120, v119);
      swift_bridgeObjectRelease();

      if (v121)
      {
        uint64_t v11 = v11;
        uint64_t v113 = v103;
        uint64_t v122 = Logger.logObject.getter();
        os_log_type_t v123 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v122, v123))
        {
          uint64_t v124 = swift_slowAlloc();
          NSString v125 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v124 = v131;
          id v126 = [v113 objectID];
          *(void *)(v124 + 4) = v126;
          *NSString v125 = v126;

          *(_WORD *)(v124 + 12) = 2114;
          *(void *)(v124 + 14) = v11;
          v125[1] = v11;
          _os_log_impl((void *)&_mh_execute_header, v122, v123, "RDAccountDataMover: Source list is denylisted to copy to the target and it does not contain any non-denylisted child reminder {sourceList: %{public}@, targetList: %{public}@}", (uint8_t *)v124, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          uint64_t v6 = v138;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v122 = v113;
        }
        NSString v84 = v135;
        uint64_t v97 = v140;

        [v105 removeFromParent];
      }
      else
      {
        uint64_t v113 = (char **)v103;
        NSString v84 = v135;
        uint64_t v97 = v140;
      }
    }
LABEL_108:
    int v99 = v11;

    uint64_t v11 = (char **)v105;
    unint64_t v23 = (unint64_t)v134;
    goto LABEL_78;
  }
  swift_bridgeObjectRelease();

  swift_release();
}

void sub_1004D5300(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Bool v4 = REMAccount.isConsideredEmpty()();
  if (!v5)
  {
    if (v4)
    {
      if (qword_1009076B8 == -1) {
        goto LABEL_4;
      }
    }
    else
    {
      if (qword_1009076B8 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_10091AED0);
      id v14 = (id)a1;
      id v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v15, v16))
      {
        id v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v78 = v2;
        char v18 = (id *)swift_slowAlloc();
        *(_DWORD *)id v17 = 138543362;
        v86[0] = [v14 objectID];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id *v18 = v86[0];

        _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDAccountDataMover: removeData: given account is not empty, now remove its lists and reminders {objectID: %{public}@}", v17, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        uint64_t v2 = v78;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      *(void *)(v2 + 48) = 0;
      *(void *)(v2 + 56) = 0;
      v86[0] = 0;
      id v19 = [v14 fetchListsWithError:v86];
      id v20 = v86[0];
      if (!v19)
      {
        id v25 = v86[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        return;
      }
      uint64_t v21 = v19;
      sub_1000963CC(0, &qword_10090E198);
      uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v23 = v20;

      a1 = v2;
      uint64_t v24 = (void *)sub_1004D73C0();
      uint64_t v26 = v24;
      uint64_t v88 = 0;
      char v89 = 1;
      uint64_t v85 = v22;
      unint64_t v72 = (unint64_t)v22 >> 62;
      id v73 = (void *)(v2 + 48);
      uint64_t v79 = v2;
      id v74 = v14;
      if ((unint64_t)v22 >> 62)
      {
        if (v22 < 0) {
          a1 = v22;
        }
        else {
          a1 = v22 & 0xFFFFFFFFFFFFFF8;
        }
        id v71 = v24;
        swift_bridgeObjectRetain();
        uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
        id v80 = v26;
        if (!v27) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v27 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v28 = v24;
        swift_bridgeObjectRetain();
        id v80 = v26;
        if (!v27) {
          goto LABEL_48;
        }
      }
      uint64_t v83 = sub_1000963CC(0, (unint64_t *)&qword_10090C120);
      uint64_t v81 = 0;
      id v82 = self;
      uint64_t v29 = 0;
      unint64_t v84 = v22 & 0xC000000000000001;
      char v75 = 1;
      while (1)
      {
        uint64_t v30 = v29;
        while (1)
        {
          if (v84) {
            id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v31 = *(id *)(v85 + 8 * v30 + 32);
          }
          id v32 = v31;
          uint64_t v29 = v30 + 1;
          if (__OFADD__(v30, 1))
          {
            __break(1u);
            goto LABEL_62;
          }
          id v33 = [v31 objectID];
          id v34 = [v82 localAccountDefaultListID];
          a1 = v83;
          char v35 = static NSObject.== infix(_:_:)();

          if (v35) {
            break;
          }
          id v36 = [v26 updateList:v32];
          [v36 removeFromParent];

          ++v30;
          if (v29 == v27) {
            goto LABEL_48;
          }
        }
        v86[0] = 0;
        id v37 = [v32 fetchRemindersWithError:v86];
        id v38 = v86[0];
        if (!v37)
        {
          id v70 = v86[0];
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease_n();

          return;
        }
        NSString v39 = v37;
        sub_1000963CC(0, &qword_1009168E0);
        unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        id v41 = v38;

        if (v40 >> 62) {
          break;
        }
        a1 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (a1) {
          goto LABEL_29;
        }
LABEL_46:
        swift_bridgeObjectRelease();
LABEL_47:
        swift_bridgeObjectRelease();

        if (v29 == v27)
        {
LABEL_48:
          swift_bridgeObjectRelease();
          uint64_t v51 = v79;
          sub_1004D705C();
          id v52 = v74;
          swift_bridgeObjectRetain();
          uint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v53, v54))
          {
            uint64_t v55 = swift_slowAlloc();
            uint64_t v56 = (void *)swift_slowAlloc();
            uint64_t v87 = swift_slowAlloc();
            *(_DWORD *)uint64_t v55 = 138543874;
            id v57 = [v52 objectID];
            v86[0] = v57;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v56 = v57;

            *(_WORD *)(v55 + 12) = 2048;
            if (v72)
            {
              swift_bridgeObjectRetain();
              char v58 = (void *)_CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              char v58 = *(void **)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            id v59 = v73;
            swift_bridgeObjectRelease();
            v86[0] = v58;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v55 + 22) = 2080;
            swift_beginAccess();
            if (v89)
            {
              unint64_t v60 = 0x80000001007D6BE0;
              unint64_t v61 = 0xD000000000000013;
            }
            else
            {
              sub_100094134(&qword_10090F568);
              unint64_t v61 = String.init<A>(describing:)();
              unint64_t v60 = v62;
            }
            sub_1000C51B8(v61, v60, &v87);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "RDAccountDataMover: removeData: done removing data from account {objectID: %{public}@, lists.count: %ld, remindersFromDefaultList: %s}", (uint8_t *)v55, 0x20u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v51 = v79;
          }
          else
          {

            swift_bridgeObjectRelease_n();
            id v59 = v73;
          }
          id v63 = [v80 trackedListChangeItems:v72];
          uint64_t v64 = (char *)[v63 count];

          if (__OFADD__(*v59, v64))
          {
            __break(1u);
          }
          else
          {
            *(void *)(v51 + 48) = &v64[*v59];
            id v65 = [v80 trackedReminderChangeItems];
            id v66 = (char *)[v65 count];

            uint64_t v67 = *(void *)(v51 + 56);
            BOOL v68 = __OFADD__(v67, v66);
            uint64_t v69 = &v66[v67];
            if (!v68)
            {
              *(void *)(v51 + 56) = v69;
              return;
            }
          }
          __break(1u);
LABEL_71:
          __break(1u);
        }
      }
      swift_bridgeObjectRetain();
      a1 = _CocoaArrayWrapper.endIndex.getter();
      if (!a1) {
        goto LABEL_46;
      }
LABEL_29:
      if (a1 < 1) {
        goto LABEL_71;
      }
      unint64_t v77 = v40 & 0xC000000000000001;
      if ((v40 & 0xC000000000000001) != 0) {
        id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v42 = *(id *)(v40 + 32);
      }
      Class v43 = v42;
      id v44 = [v26 updateReminder:v42, v72];
      [v44 removeFromList];

      uint64_t v45 = v81;
      if (v75) {
        uint64_t v45 = 0;
      }
      uint64_t v81 = v45 + 1;
      if (!__OFADD__(v45, 1))
      {
        uint64_t v76 = a1 - 1;
        if (a1 != 1)
        {
          uint64_t v46 = 0;
          a1 = v40;
          do
          {
            if (v77) {
              id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v47 = *(id *)(v40 + 8 * v46 + 40);
            }
            id v48 = v47;
            uint64_t v26 = v80;
            id v49 = [v80 updateReminder:v47];
            [v49 removeFromList];

            uint64_t v50 = v81 + v46 + 1;
            if (__OFADD__(v81 + v46, 1)) {
              goto LABEL_62;
            }
            unint64_t v40 = a1;
            ++v46;
          }
          while (v76 != v46);
          uint64_t v81 = v50;
        }
        swift_bridgeObjectRelease();
        char v75 = 0;
        uint64_t v88 = v81;
        char v89 = 0;
        goto LABEL_47;
      }
LABEL_62:
      __break(1u);
    }
    swift_once();
LABEL_4:
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_10091AED0);
    id v7 = (id)a1;
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)id v10 = 138543362;
      id v12 = [v7 objectID];
      v86[0] = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v11 = v12;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDAccountDataMover: removeData: given account is already empty (no reminder or list count < 2) so we stopped {objectID: %{public}@}", v10, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_1004D5E08(void *a1, void *a2, void *a3)
{
  uint64_t v5 = v3;
  id v27 = 0;
  id v6 = [a1 fetchRemindersWithError:&v27];
  id v7 = v27;
  if (v6)
  {
    id v8 = v6;
    sub_1000963CC(0, &qword_1009168E0);
    os_log_type_t v9 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v10 = v7;

    id v27 = v9;
    sub_100094134((uint64_t *)&unk_10090A480);
    sub_1004D7C78();
    uint64_t v11 = BidirectionalCollection<>.slices(by:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      char v4 = 0;
      for (double i = (unint64_t *)(v11 + 56); ; i += 4)
      {
        uint64_t v26 = v5;
        id v15 = (char *)*(i - 1);
        unint64_t v14 = *i;
        uint64_t v17 = *(i - 3);
        uint64_t v16 = *(i - 2);
        swift_unknownObjectRetain();
        id v19 = [a2 objectID];
        char v20 = sub_1004D6018(v17, v16, v15, v14, v19, a3);
        uint64_t v5 = v26;
        if (v26) {
          break;
        }
        char v21 = v20;

        v4 |= v21;
        swift_unknownObjectRelease();
        if (!--v12)
        {
          swift_bridgeObjectRelease();
          return v4 & 1;
        }
      }

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      char v4 = 0;
    }
  }
  else
  {
    id v22 = v27;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4 & 1;
}

uint64_t sub_1004D6018(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, id a5, void *a6)
{
  id v8 = v7;
  uint64_t v9 = v6;
  uint64_t v80 = a2;
  uint64_t v71 = a1;
  uint64_t v68 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v67 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v72 = a6;
  id v16 = [a6 _trackedListChangeItemForObjectID:a5];
  if (v16)
  {
    uint64_t v17 = (uint64_t)v16;
    uint64_t v18 = a4 >> 1;
    uint64_t v76 = v9;
    id v70 = v16;
    if ((char *)(a4 >> 1) == a3)
    {
      int v69 = 0;
LABEL_25:
      [(id)v17 setRemindersICSDisplayOrderChanged:0];
      if (qword_1009076B8 == -1) {
        goto LABEL_26;
      }
    }
    else
    {
      id v73 = v7;
      id v66 = (void (**)(char *, uint64_t))(v14 + 8);
      swift_unknownObjectRetain();
      int v69 = 0;
      id v65 = (void *)(v18 - 1);
      *(void *)&long long v26 = 138543362;
      long long v74 = v26;
      id v8 = a3;
      uint64_t v27 = (uint64_t)a3;
      char v75 = a3;
LABEL_8:
      uint64_t v17 = (uint64_t)v8;
      while ((uint64_t)v8 >= v27 && v17 < v18)
      {
        uint64_t v29 = (char *)(v17 + 1);
        id v30 = *(id *)(v80 + 8 * v17);
        if ((sub_1004D6C18(v30) & 1) == 0)
        {
          id v37 = [v30 titleAsString];
          if (v37)
          {
            id v38 = v37;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          NSString v39 = v73;
          NSString v40 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v41 = [v72 addReminderWithTitle:v40 toListChangeItem:v70];

          sub_1004D6864((uint64_t)v77);
          uint64_t v42 = v78;
          uint64_t v43 = v79;
          sub_1000C0DE0(v77, v78);
          (*(void (**)(id, id, uint64_t, uint64_t))(v43 + 8))(v30, v41, v42, v43);
          if (v39)
          {

            swift_unknownObjectRelease();
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v77);
            return v62 & 1;
          }
          id v73 = 0;
          uint64_t v9 = v76;
          if (*(unsigned char *)(v76 + 80) == 1)
          {
            id v44 = [v30 objectID];
            id v45 = [v44 uuid];

            uint64_t v46 = v67;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            UUID.uuidString.getter();
            (*v66)(v46, v68);
            NSString v47 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v41 setExternalIdentifier:v47];
          }
          id v48 = v67;
          UUID.init()();
          UUID.uuidString.getter();
          (*v66)(v48, v68);
          NSString v49 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v41 setDaCalendarItemUniqueIdentifier:v49];

          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v77);
          int v69 = 1;
          id v8 = (char *)(v17 + 1);
          uint64_t v27 = (uint64_t)v75;
          if (v65 == (void *)v17)
          {
LABEL_24:
            swift_unknownObjectRelease();
            id v8 = v73;
            uint64_t v17 = (uint64_t)v70;
            goto LABEL_25;
          }
          goto LABEL_8;
        }
        if (qword_1009076B8 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_10008E2DC(v31, (uint64_t)qword_10091AED0);
        id v32 = v30;
        id v28 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v33))
        {
          uint64_t v34 = swift_slowAlloc();
          char v35 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v34 = v74;
          id v36 = [v32 objectID];
          *(void *)(v34 + 4) = v36;
          *char v35 = v36;

          _os_log_impl((void *)&_mh_execute_header, v28, v33, "RDAccountDataMover: _copySliceOfReminders: Source reminder is denylisted to copy to the target list {sourceReminder: %{public}@}", (uint8_t *)v34, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          uint64_t v9 = v76;
          swift_slowDealloc();
          uint64_t v27 = (uint64_t)v75;
          swift_slowDealloc();
        }
        else
        {

          id v28 = v32;
        }

        ++v17;
        if ((char *)v18 == v29) {
          goto LABEL_24;
        }
      }
      __break(1u);
    }
    swift_once();
LABEL_26:
    uint64_t v50 = type metadata accessor for Logger();
    sub_10008E2DC(v50, (uint64_t)qword_10091AED0);
    uint64_t v51 = v72;
    id v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.info.getter();
    os_log_type_t v54 = &selRef_resolveConflicts_error_;
    if (os_log_type_enabled(v52, v53))
    {
      id v73 = v8;
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 134217984;
      id v56 = [v51 trackedReminderChangeItems];
      id v57 = [v56 count];

      os_log_type_t v54 = &selRef_resolveConflicts_error_;
      v77[0] = v57;
      id v8 = v73;
      uint64_t v17 = (uint64_t)v70;
      uint64_t v9 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v52, v53, "RDAccountDataMover: Processed copying source reminders {count: %ld}", v55, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      id v52 = v51;
    }

    a5 = [v51 v54[92]];
    char v58 = (char *)[a5 count];

    uint64_t v59 = *(void *)(v9 + 56);
    BOOL v60 = __OFADD__(v59, v58);
    unint64_t v61 = &v58[v59];
    if (!v60)
    {
      *(void *)(v9 + 56) = v61;
      char v62 = v69;
      return v62 & 1;
    }
    __break(1u);
    goto LABEL_38;
  }
  if (qword_1009076B8 != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_10091AED0);
  id v20 = a5;
  char v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    id v73 = v8;
    id v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    *(_DWORD *)id v23 = 138543362;
    v77[0] = v20;
    id v25 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v20;

    _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDAccountDataMover: _copySliceOfReminders: Cannot copy reminders because list change item is not tracked and is nil {targetListID: %{public}@}", v23, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  char v62 = 0;
  return v62 & 1;
}

void sub_1004D6864(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [v1 account];
  id v9 = [v8 accountTypeHost];

  sub_100094134(&qword_10091B2B0);
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();
  sub_1004D7C10((uint64_t)v24, (uint64_t)&v22);
  if (v23)
  {
    sub_1000966BC((uint64_t)v24, &qword_10091B2B8);

    sub_1000967D4(&v22, a1);
  }
  else
  {
    uint64_t v10 = v5;
    sub_1000966BC((uint64_t)&v22, &qword_10091B2B8);
    uint64_t v11 = self;
    NSString v12 = String._bridgeToObjectiveC()();
    id v13 = [v11 internalErrorWithDebugDescription:v12];

    swift_willThrow();
    sub_1000966BC((uint64_t)v24, &qword_10091B2B8);
    if (qword_1009076B8 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_10008E2DC(v4, (uint64_t)qword_10091AED0);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v7, v14, v4);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_100094134(&qword_100908170);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    *(void *)(inited + 32) = 48;
    *(void *)(inited + 40) = 0xE100000000000000;
    id v16 = [v9 internalDescription];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    *(void *)(inited + 48) = v17;
    *(void *)(inited + 56) = v19;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 80) = 49;
    *(void *)(inited + 88) = 0xE100000000000000;
    id v20 = [v2 remObjectID];
    *(void *)(inited + 120) = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    *(void *)(inited + 96) = v20;
    sub_1001805C0(inited);
    sub_10052ECB8((uint64_t)"REMReminder.dataCopierFactory: Could not create data copier for account data move because account type is not supported for now {accountTypeHost: %{public}@, reminderID: %{public}@}.", 182, 2);
    __break(1u);
  }
}

id sub_1004D6C18(void *a1)
{
  uint64_t v3 = type metadata accessor for DateComponents();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  id v11 = [a1 objectID];
  char v12 = sub_1001BD790((uint64_t)v11, v10);
  swift_bridgeObjectRelease();

  if ((v12 & 1) == 0) {
    return 0;
  }
  unint64_t v13 = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  id v14 = [a1 list];
  id v15 = [v14 objectID];

  LOBYTE(v14) = sub_1001BD790((uint64_t)v15, v13);
  swift_bridgeObjectRelease();

  if ((v14 & 1) == 0) {
    return 0;
  }
  id v16 = [a1 dueDateComponents];
  if (v16)
  {
    uint64_t v17 = v16;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) != 1)
    {
      sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100911810);
      return 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
  }
  sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100911810);
  id result = [a1 alarms];
  if (!result) {
    return result;
  }
  uint64_t v19 = result;
  sub_1000963CC(0, &qword_10090C4B8);
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v21) {
    return 0;
  }
  id result = [a1 recurrenceRules];
  if (result)
  {
    long long v22 = result;
    sub_1000963CC(0, (unint64_t *)&qword_100911840);
    unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v23 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v24) {
      return 0;
    }
    id v25 = [a1 attachments];
    sub_1000963CC(0, (unint64_t *)&unk_100909EB0);
    unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    return (id)(v27 == 0);
  }
  return result;
}

void sub_1004D705C()
{
  uint64_t v1 = *(void **)(v0 + 88);
  if (v1)
  {
    id v10 = 0;
    id v2 = v1;
    if ([v2 saveSynchronouslyWithError:&v10])
    {
      id v3 = v10;

      uint64_t v4 = *(void **)(v0 + 88);
      *(void *)(v0 + 88) = 0;
    }
    else
    {
      id v9 = v10;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    if (qword_1009076B8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_10091AED0);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDAccountDataMover: Attempted to save with a current save request.", v8, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1004D71DC()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDAccountDataMover()
{
  return self;
}

uint64_t type metadata accessor for RDReminderDataICSCopier()
{
  return self;
}

void sub_1004D7274(void *a1, void *a2)
{
}

uint64_t type metadata accessor for RDReminderDataCloudKitCopier()
{
  return self;
}

uint64_t type metadata accessor for RDReminderDataExchangeCopier()
{
  return self;
}

ValueMetadata *type metadata accessor for RDAccountDataMover.Statistics()
{
  return &type metadata for RDAccountDataMover.Statistics;
}

uint64_t sub_1004D72E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1004D7368(type metadata accessor for RDReminderDataICSCopier, a1);
}

uint64_t sub_1004D7310@<X0>(uint64_t *a1@<X8>)
{
  return sub_1004D7368(type metadata accessor for RDReminderDataExchangeCopier, a1);
}

uint64_t sub_1004D733C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1004D7368(type metadata accessor for RDReminderDataCloudKitCopier, a1);
}

uint64_t sub_1004D7368@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1();
  uint64_t result = swift_allocObject();
  a2[3] = v3;
  a2[4] = (uint64_t)&off_1008C8008;
  *a2 = result;
  return result;
}

uint64_t sub_1004D73C0()
{
  uint64_t result = *(void *)(v0 + 88);
  if (!result)
  {
    id v2 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:*(void *)(v0 + 40)];
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 setAuthor:v3];

    uint64_t v4 = *(void **)(v0 + 88);
    *(void *)(v0 + 88) = v2;

    uint64_t result = *(void *)(v0 + 88);
    if (!result)
    {
      uint64_t v5 = self;
      NSString v6 = String._bridgeToObjectiveC()();
      [v5 internalErrorWithDebugDescription:v6];

      return swift_willThrow();
    }
  }
  return result;
}

id sub_1004D74AC(void *a1)
{
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v6 = self;
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10077A530;
  *(void *)(v7 + 32) = a1;
  *(void *)&long long v25 = v7;
  specialized Array._endMutation()();
  sub_1000963CC(0, &qword_1009168E0);
  id v23 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v6 exportICSCalendarFromReminders:isa];

  id result = [v9 components];
  if (result)
  {
    id v11 = result;
    NSArray.makeIterator()();

    NSFastEnumerationIterator.next()();
    if (v26)
    {
      while (1)
      {
        sub_10009A1A0(&v25, &v24);
        sub_1000963CC(0, &qword_100919A60);
        if (swift_dynamicCast()) {
          break;
        }
        NSFastEnumerationIterator.next()();
        if (!v26) {
          goto LABEL_5;
        }
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
LABEL_5:
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      char v12 = self;
      *(void *)&long long v25 = 0;
      *((void *)&v25 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v13._object = (void *)0x80000001007D6A80;
      v13._countAndFlagsBits = 0xD000000000000042;
      String.append(_:)(v13);
      id v14 = [v23 objectID];
      id v15 = [v14 description];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      v19._countAndFlagsBits = v16;
      v19._object = v18;
      String.append(_:)(v19);

      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 125;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v12 internalErrorWithDebugDescription:v21];

      swift_willThrow();
    }
    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1004D7804(void *a1, void *a2)
{
  uint64_t v5 = sub_1004D74AC(a1);
  if (!v2)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    if (qword_1009076B8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = sub_10008E2DC(v9, (uint64_t)qword_10091AED0);
    id v11 = a1;
    id v12 = v8;
    id v13 = v11;
    id v14 = v12;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    id v30 = v7;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v29 = v10;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138543618;
      id v19 = [v13 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v18 = v19;

      *(_WORD *)(v17 + 12) = 2112;
      Swift::String v20 = v14;
      uint64_t v7 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v18[1] = v14;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDAccountDataMover: RDReminderDataICSCopier: source reminder exported as ICS {objectID: %{public}@, icsTodo: %@}", (uint8_t *)v17, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    NSString v21 = [a2 saveRequest:v29];
    [v21 updateReminderChangeItem:a2 fromICSTodo:v14 icsCalendar:v7 isNew:1 withOptions:0];
    uint64_t v22 = a2;
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138543618;
      id v27 = [v22 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v26 = v27;

      *(_WORD *)(v25 + 12) = 2112;
      id v31 = [v22 storage];
      uint64_t v28 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v26[1] = v31;

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDAccountDataMover: RDReminderDataICSCopier: imported ICS into as reminder {objectID: %{public}@, storage: %@}", (uint8_t *)v25, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v22 = v14;
    }
    else
    {

      id v23 = v22;
      uint64_t v28 = v22;
      NSString v21 = v14;
    }
  }
}

uint64_t sub_1004D7C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10091B2B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1004D7C78()
{
  unint64_t result = qword_10091B2C0;
  if (!qword_10091B2C0)
  {
    sub_100096058((uint64_t *)&unk_10090A480);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B2C0);
  }
  return result;
}

uint64_t sub_1004D7CD4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_1004D8AD8(a1, a2, a3, (SEL *)&selRef_nextRecurrentDueDateAfter_dueDate_timeZone_allDay_recurrenceRules_, a4);
}

uint64_t sub_1004D7CE0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1004D80BC(a1, a2, a3, (SEL *)&selRef_previousRecurrentDueDateBefore_dueDate_timeZone_allDay_recurrenceRules_, a4);
}

uint64_t sub_1004D7CEC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v32 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  id v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  os_log_type_t v16 = (char *)&v32 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  id v19 = (char *)&v32 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v32 - v21;
  __chkstk_darwin(v20);
  os_log_type_t v24 = (char *)&v32 - v23;
  os_log_type_t v33 = a1;
  sub_1004D83AC(a1, (uint64_t)v22);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v25(v22, 1, v4) == 1)
  {
    sub_1000966BC((uint64_t)v22, (uint64_t *)&unk_100909A40);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v24, 1, 1, v4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v22, v4);
    sub_1004D94AC((uint64_t)v9, (uint64_t)v24);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
  sub_1004D80BC(v33, v34, (uint64_t)v24, (SEL *)&selRef_nextRecurrentDueDateAfter_dueDate_timeZone_allDay_recurrenceRules_, (uint64_t)v19);
  sub_1004D8870((uint64_t)v19, (uint64_t)v24, v16);
  sub_1000CAA4C((uint64_t)v16, (uint64_t)v13);
  if (v25(v13, 1, v4) == 1)
  {
    sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909A40);
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909A40);
    sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909A40);
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909A40);
LABEL_9:
    uint64_t v30 = 1;
    uint64_t v29 = v35;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v29, v30, 1, v4);
  }
  uint64_t v26 = *(void (**)(void))(v5 + 32);
  id v27 = v32;
  v26();
  char v28 = static Date.> infix(_:_:)();
  sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909A40);
  sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909A40);
  sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909A40);
  if ((v28 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v4);
    goto LABEL_9;
  }
  uint64_t v29 = v35;
  ((void (*)(uint64_t, char *, uint64_t))v26)(v35, v27, v4);
  uint64_t v30 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v29, v30, 1, v4);
}

uint64_t sub_1004D80B0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1004D80BC(a1, a2, a3, (SEL *)&selRef_nextRecurrentDueDateAfter_dueDate_timeZone_allDay_recurrenceRules_, a4);
}

uint64_t sub_1004D80BC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, SEL *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DateComponents();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  os_log_type_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v27 - v17;
  id v19 = [a1 dueDateComponents];
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_6;
  }
  uint64_t v20 = v19;
  uint64_t v27 = a3;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v21(v11, v16, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_6:
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100911810);
    goto LABEL_7;
  }
  v21(v18, v11, v12);
  id v22 = [a1 recurrenceRules];
  if (v22)
  {
    uint64_t v23 = v22;
    sub_1004D9ABC();
    uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1004D8AD8(v24, v28, v27, a4, a5);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
LABEL_7:
  uint64_t v26 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a5, 1, 1, v26);
}

uint64_t sub_1004D83AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DateComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v19 - v12;
  id v14 = [a1 dueDateComponents];
  if (v14)
  {
    uint64_t v15 = v14;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v16(v6, v11, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v16(v13, v6, v7);
      sub_1004D8614(a2);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100911810);
  uint64_t v18 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a2, 1, 1, v18);
}

uint64_t sub_1004D8614@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TimeZone();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9.super.Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  DateComponents.timeZone.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    static TimeZone.current.getter();
    sub_1000966BC((uint64_t)v4, &qword_100910408);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  }
  uint64_t v10 = self;
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  id v12 = [v10 rem_dateWithDateComponents:v9.super.isa timeZone:isa];

  if (v12)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
  }
  else
  {
    uint64_t v15 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
}

uint64_t sub_1004D8870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  NSDateComponents v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v24 - v17;
  sub_1000CAA4C(a1, (uint64_t)v11);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v19(v11, 1, v12) != 1)
  {
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v21(v18, v11, v12);
    v21(a3, v18, v12);
LABEL_6:
    uint64_t v20 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, v20, 1, v12);
  }
  sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909A40);
  sub_1000CAA4C(a2, (uint64_t)v9);
  if (v19(v9, 1, v12) != 1)
  {
    id v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v22(v16, v9, v12);
    v22(a3, v16, v12);
    goto LABEL_6;
  }
  sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909A40);
  uint64_t v20 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, v20, 1, v12);
}

uint64_t sub_1004D8AD8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, SEL *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v42 = a4;
  uint64_t v40 = a2;
  uint64_t v45 = a5;
  uint64_t v6 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TimeZone();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v44 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v43 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v38 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v38 - v22;
  sub_1004D8614((uint64_t)&v38 - v22);
  sub_1004D8870(a3, (uint64_t)v23, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v21, 1, v12) == 1)
  {
    sub_1000966BC((uint64_t)v23, (uint64_t *)&unk_100909A40);
    sub_1000966BC((uint64_t)v21, (uint64_t *)&unk_100909A40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v45, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v21, v12);
    DateComponents.timeZone.getter();
    int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
    uint64_t v38 = v10;
    uint64_t v39 = v9;
    if (v25 == 1)
    {
      static TimeZone.current.getter();
      sub_1000966BC((uint64_t)v8, &qword_100910408);
    }
    else
    {
      (*(void (**)(void))(v10 + 32))();
    }
    Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
    id v27 = [(objc_class *)isa rem_isAllDayDateComponents];

    uint64_t v28 = self;
    Class v29 = Date._bridgeToObjectiveC()().super.isa;
    Class v30 = Date._bridgeToObjectiveC()().super.isa;
    Class v31 = TimeZone._bridgeToObjectiveC()().super.isa;
    sub_1004D9ABC();
    Class v32 = Array._bridgeToObjectiveC()().super.isa;
    id v33 = [v28 *v42:v29, v30, v31, v27, v32];

    if (v33)
    {
      uint64_t v34 = (uint64_t)v43;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v35 = 0;
      uint64_t v36 = v45;
      uint64_t v37 = v39;
    }
    else
    {
      uint64_t v35 = 1;
      uint64_t v36 = v45;
      uint64_t v37 = v39;
      uint64_t v34 = (uint64_t)v43;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v44, v37);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    sub_1000966BC((uint64_t)v23, (uint64_t *)&unk_100909A40);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v34, v35, 1, v12);
    return sub_100096408(v34, v36, (uint64_t *)&unk_100909A40);
  }
}

uint64_t sub_1004D8F70@<X0>(void *a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, char *a3@<X8>)
{
  NSString v47 = a2;
  uint64_t v45 = a3;
  uint64_t v4 = type metadata accessor for Calendar();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  __chkstk_darwin(v4);
  uint64_t v41 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v44 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  id v48 = (char *)&v41 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v41 - v12;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v41 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v46 = (uint64_t)&v41 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  int v25 = (char *)&v41 - v24;
  __chkstk_darwin(v23);
  id v27 = (char *)&v41 - v26;
  uint64_t v28 = a1;
  sub_1004D83AC(a1, (uint64_t)v25);
  Class v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v29(v25, 1, v6) == 1)
  {
    sub_1000966BC((uint64_t)v25, (uint64_t *)&unk_100909A40);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v27, 1, 1, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v25, v6);
    sub_1004D94AC((uint64_t)v13, (uint64_t)v27);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  Class v30 = v28;
  uint64_t v31 = v46;
  sub_1004D80BC(v30, (uint64_t)v47, (uint64_t)v27, (SEL *)&selRef_previousRecurrentDueDateBefore_dueDate_timeZone_allDay_recurrenceRules_, v46);
  sub_1004D8870(v31, (uint64_t)v27, v20);
  sub_1000CAA4C((uint64_t)v20, (uint64_t)v17);
  if (v29(v17, 1, v6) != 1)
  {
    uint64_t v34 = v48;
    NSString v47 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v47(v48, v17, v6);
    sub_100265DDC();
    char v35 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v36 = v44;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v44, v34, v6);
    if (v35)
    {
      uint64_t v37 = v41;
      static Calendar.current.getter();
      char v38 = Calendar.isDateInToday(_:)();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v37, v43);
      uint64_t v39 = *(void (**)(char *, uint64_t))(v7 + 8);
      v39(v36, v6);
      sub_1000966BC((uint64_t)v20, (uint64_t *)&unk_100909A40);
      sub_1000966BC(v31, (uint64_t *)&unk_100909A40);
      sub_1000966BC((uint64_t)v27, (uint64_t *)&unk_100909A40);
      id v33 = v45;
      if ((v38 & 1) == 0)
      {
        v39(v48, v6);
        uint64_t v32 = 1;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v33, v32, 1, v6);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v36, v6);
      sub_1000966BC((uint64_t)v20, (uint64_t *)&unk_100909A40);
      sub_1000966BC(v31, (uint64_t *)&unk_100909A40);
      sub_1000966BC((uint64_t)v27, (uint64_t *)&unk_100909A40);
      id v33 = v45;
    }
    v47(v33, v48, v6);
    uint64_t v32 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v33, v32, 1, v6);
  }
  sub_1000966BC((uint64_t)v20, (uint64_t *)&unk_100909A40);
  sub_1000966BC(v31, (uint64_t *)&unk_100909A40);
  sub_1000966BC((uint64_t)v27, (uint64_t *)&unk_100909A40);
  sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909A40);
  uint64_t v32 = 1;
  id v33 = v45;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v33, v32, 1, v6);
}

uint64_t sub_1004D94AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v55 = a2;
  uint64_t v2 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v51 = v2;
  __chkstk_darwin(v2);
  id v48 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v43 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  NSString v47 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v5 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Calendar();
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v45 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100911810);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v19 = type metadata accessor for DateComponents();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = [self daemonUserDefaults];
  id v24 = [v23 todayNotificationFireTime];

  if (v24)
  {
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v25 = v20;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    id v27 = v16;
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v25 = v20;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    id v27 = v16;
    uint64_t v28 = 1;
  }
  uint64_t v29 = v19;
  v26(v27, v28, 1, v19);
  sub_100096408((uint64_t)v16, (uint64_t)v18, (uint64_t *)&unk_100911810);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v18, 1, v19) == 1)
  {
    sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100911810);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v55, 1, 1, v54);
  }
  else
  {
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    uint64_t v41 = v22;
    v31(v22, v18, v19);
    static Calendar.current.getter();
    Calendar.startOfDay(for:)();
    uint64_t v32 = v42;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v42, enum case for Calendar.MatchingPolicy.nextTime(_:), v52);
    uint64_t v33 = v43;
    uint64_t v34 = v47;
    uint64_t v35 = v49;
    (*(void (**)(char *, void, uint64_t))(v43 + 104))(v47, enum case for Calendar.RepeatedTimePolicy.first(_:), v49);
    uint64_t v46 = v29;
    uint64_t v37 = v50;
    uint64_t v36 = v51;
    char v38 = *(void (**)(char *, void, uint64_t))(v50 + 104);
    uint64_t v40 = v25;
    uint64_t v39 = v48;
    v38(v48, enum case for Calendar.SearchDirection.forward(_:), v51);
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v32, v52);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v54);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v45);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v41, v46);
  }
}

unint64_t sub_1004D9ABC()
{
  unint64_t result = qword_100911840;
  if (!qword_100911840)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100911840);
  }
  return result;
}

uint64_t sub_1004D9AFC(uint64_t a1, unint64_t a2, void (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t), void (*a5)(void), void (*a6)(void))
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    unint64_t v49 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v7 = ~v10;
    unint64_t v49 = a2 + 64;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a2 + 64);
    unint64_t v9 = a2;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  int64_t v48 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    uint64_t v14 = v13;
    if ((v9 & 0x8000000000000000) != 0)
    {
      if (!__CocoaDictionary.Iterator.next()()) {
        goto LABEL_52;
      }
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v17 = v50;
      swift_unknownObjectRelease();
      a3(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v18 = v50;
      swift_unknownObjectRelease();
      if (!v50) {
        goto LABEL_52;
      }
      goto LABEL_31;
    }
    if (!v8) {
      break;
    }
    unint64_t v15 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v16 = v15 | (v13 << 6);
LABEL_30:
    uint64_t v22 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v9 + 56) + v22);
    id v17 = *(id *)(*(void *)(v9 + 48) + v22);
    swift_retain();
    if (!v17) {
      goto LABEL_52;
    }
LABEL_31:
    if (v18[3])
    {
      uint64_t v23 = a1;
      if ((a1 & 0xC000000000000001) != 0)
      {
        if (a1 < 0) {
          uint64_t v24 = a1;
        }
        else {
          uint64_t v24 = a1 & 0xFFFFFFFFFFFFFF8;
        }
        swift_retain_n();
        id v25 = v17;
        uint64_t v26 = __CocoaDictionary.count.getter();
        if (__OFADD__(v26, 1)) {
          goto LABEL_55;
        }
        uint64_t v23 = a4(v24, v26 + 1);
      }
      else
      {
        swift_retain_n();
        id v27 = v17;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v50 = (void *)v23;
      unint64_t v30 = sub_100306FE8((uint64_t)v17);
      uint64_t v31 = *(void *)(v23 + 16);
      BOOL v32 = (v29 & 1) == 0;
      if (__OFADD__(v31, v32)) {
        goto LABEL_54;
      }
      char v33 = v29;
      if (*(void *)(v23 + 24) >= v31 + v32)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v36 = (void *)v23;
          if (v29) {
            goto LABEL_47;
          }
        }
        else
        {
          a6();
          uint64_t v36 = (void *)v23;
          if (v33) {
            goto LABEL_47;
          }
        }
      }
      else
      {
        a5();
        unint64_t v34 = sub_100306FE8((uint64_t)v17);
        if ((v33 & 1) != (v35 & 1)) {
          goto LABEL_57;
        }
        unint64_t v30 = v34;
        uint64_t v36 = (void *)v23;
        if (v33)
        {
LABEL_47:
          a1 = (uint64_t)v36;
          uint64_t v37 = v36[7];
          swift_release();
          *(void *)(v37 + 8 * v30) = v18;
          goto LABEL_51;
        }
      }
      v36[(v30 >> 6) + 8] |= 1 << v30;
      uint64_t v38 = 8 * v30;
      *(void *)(v36[6] + v38) = v17;
      *(void *)(v36[7] + v38) = v18;
      uint64_t v39 = v36[2];
      BOOL v40 = __OFADD__(v39, 1);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_56;
      }
      a1 = (uint64_t)v36;
      v36[2] = v41;
      id v42 = v17;
LABEL_51:
      swift_release();

      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  int64_t v19 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v19 >= v48) {
      goto LABEL_52;
    }
    unint64_t v20 = *(void *)(v49 + 8 * v19);
    ++v13;
    if (!v20)
    {
      uint64_t v13 = v14 + 2;
      if (v14 + 2 >= v48) {
        goto LABEL_52;
      }
      unint64_t v20 = *(void *)(v49 + 8 * v13);
      if (!v20)
      {
        uint64_t v13 = v14 + 3;
        if (v14 + 3 >= v48) {
          goto LABEL_52;
        }
        unint64_t v20 = *(void *)(v49 + 8 * v13);
        if (!v20)
        {
          uint64_t v13 = v14 + 4;
          if (v14 + 4 >= v48) {
            goto LABEL_52;
          }
          unint64_t v20 = *(void *)(v49 + 8 * v13);
          if (!v20)
          {
            uint64_t v13 = v14 + 5;
            if (v14 + 5 >= v48) {
              goto LABEL_52;
            }
            unint64_t v20 = *(void *)(v49 + 8 * v13);
            if (!v20)
            {
              uint64_t v21 = v14 + 6;
              while (v48 != v21)
              {
                unint64_t v20 = *(void *)(v49 + 8 * v21++);
                if (v20)
                {
                  uint64_t v13 = v21 - 1;
                  goto LABEL_29;
                }
              }
LABEL_52:
              sub_1000C1AF8();
              return a1;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v13 << 6);
    goto LABEL_30;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1004D9FB4(uint64_t a1, unint64_t a2, void (*a3)(void))
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    unint64_t v46 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v4 = ~v7;
    unint64_t v46 = a2 + 64;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a2 + 64);
    unint64_t v6 = a2;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  int64_t v45 = (unint64_t)(v4 + 64) >> 6;
  unint64_t v47 = v6;
  if ((v6 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_31:
  if (!__CocoaDictionary.Iterator.next()()) {
    goto LABEL_52;
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
  a3(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v19 = v50;
  swift_unknownObjectRelease();
  id v20 = (id)v50;
  uint64_t v14 = v10;
  uint64_t v12 = v5;
  if (!v50) {
    goto LABEL_52;
  }
  while (1)
  {
    unint64_t v49 = v12;
    swift_retain();
    v21._countAndFlagsBits = UUID.uuidString.getter();
    uint64_t v50 = 0x7C6C61636F6CLL;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(v19 + 24);
    if (v22)
    {
      uint64_t v48 = v14;
      uint64_t v23 = *(void *)(v19 + 16);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v50 = a1;
      unint64_t v26 = sub_1001806F8(0x7C6C61636F6CLL, 0xE600000000000000);
      uint64_t v27 = a1;
      uint64_t v28 = *(void *)(a1 + 16);
      BOOL v29 = (v25 & 1) == 0;
      uint64_t v30 = v28 + v29;
      if (__OFADD__(v28, v29))
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      char v31 = v25;
      if (*(void *)(v27 + 24) < v30)
      {
        sub_10030E654(v30, isUniquelyReferenced_nonNull_native);
        unint64_t v32 = sub_1001806F8(0x7C6C61636F6CLL, 0xE600000000000000);
        if ((v31 & 1) != (v33 & 1)) {
          goto LABEL_56;
        }
        unint64_t v26 = v32;
        unint64_t v34 = (void *)v50;
        if ((v31 & 1) == 0) {
          goto LABEL_45;
        }
LABEL_9:
        uint64_t v11 = (void *)(v34[7] + 16 * v26);
        swift_bridgeObjectRelease();
        void *v11 = v23;
        v11[1] = v22;
        a1 = (uint64_t)v34;
LABEL_10:

        swift_release_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v10 = v48;
        unint64_t v5 = v49;
        unint64_t v6 = v47;
        if ((v47 & 0x8000000000000000) != 0) {
          goto LABEL_31;
        }
        goto LABEL_11;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v34 = (void *)v50;
        if (v25) {
          goto LABEL_9;
        }
      }
      else
      {
        sub_100318A14();
        unint64_t v34 = (void *)v50;
        if (v31) {
          goto LABEL_9;
        }
      }
LABEL_45:
      v34[(v26 >> 6) + 8] |= 1 << v26;
      uint64_t v38 = (void *)(v34[6] + 16 * v26);
      *uint64_t v38 = 0x7C6C61636F6CLL;
      v38[1] = 0xE600000000000000;
      uint64_t v39 = (void *)(v34[7] + 16 * v26);
      *uint64_t v39 = v23;
      v39[1] = v22;
      uint64_t v40 = v34[2];
      BOOL v41 = __OFADD__(v40, 1);
      uint64_t v42 = v40 + 1;
      if (v41) {
        goto LABEL_54;
      }
      a1 = (uint64_t)v34;
      v34[2] = v42;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    swift_bridgeObjectRetain();
    unint64_t v35 = sub_1001806F8(0x7C6C61636F6CLL, 0xE600000000000000);
    char v37 = v36;
    swift_bridgeObjectRelease();
    if (v37)
    {
      uint64_t v50 = a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100318A14();
      }
      swift_bridgeObjectRelease();
      sub_1002C1FAC(v35, a1);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_release();
    uint64_t v10 = v14;
    unint64_t v5 = v49;
    if ((v6 & 0x8000000000000000) != 0) {
      goto LABEL_31;
    }
LABEL_11:
    if (!v5) {
      break;
    }
    uint64_t v12 = (v5 - 1) & v5;
    unint64_t v13 = __clz(__rbit64(v5)) | (v10 << 6);
    uint64_t v14 = v10;
LABEL_29:
    uint64_t v18 = 8 * v13;
    uint64_t v19 = *(void *)(*(void *)(v6 + 56) + v18);
    id v20 = *(id *)(*(void *)(v6 + 48) + v18);
    swift_retain();
    if (!v20) {
      goto LABEL_52;
    }
  }
  int64_t v15 = v10 + 1;
  if (__OFADD__(v10, 1)) {
    goto LABEL_55;
  }
  if (v15 >= v45) {
    goto LABEL_52;
  }
  unint64_t v16 = *(void *)(v46 + 8 * v15);
  uint64_t v14 = v10 + 1;
  if (v16) {
    goto LABEL_28;
  }
  uint64_t v14 = v10 + 2;
  if (v10 + 2 >= v45) {
    goto LABEL_52;
  }
  unint64_t v16 = *(void *)(v46 + 8 * v14);
  if (v16) {
    goto LABEL_28;
  }
  uint64_t v14 = v10 + 3;
  if (v10 + 3 >= v45) {
    goto LABEL_52;
  }
  unint64_t v16 = *(void *)(v46 + 8 * v14);
  if (v16) {
    goto LABEL_28;
  }
  uint64_t v14 = v10 + 4;
  if (v10 + 4 >= v45) {
    goto LABEL_52;
  }
  unint64_t v16 = *(void *)(v46 + 8 * v14);
  if (v16) {
    goto LABEL_28;
  }
  uint64_t v14 = v10 + 5;
  if (v10 + 5 >= v45) {
    goto LABEL_52;
  }
  unint64_t v16 = *(void *)(v46 + 8 * v14);
  if (v16)
  {
LABEL_28:
    uint64_t v12 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v14 << 6);
    goto LABEL_29;
  }
  uint64_t v17 = v10 + 6;
  while (v45 != v17)
  {
    unint64_t v16 = *(void *)(v46 + 8 * v17++);
    if (v16)
    {
      uint64_t v14 = v17 - 1;
      goto LABEL_28;
    }
  }
LABEL_52:
  sub_1000C1AF8();
  return a1;
}

uint64_t sub_1004DA55C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  __chkstk_darwin(v7);
  char v37 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v44 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v40 = a1 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v41 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  unint64_t v35 = (void (**)(char *, uint64_t))(v8 + 8);
  char v36 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v43 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  while (v13)
  {
    unint64_t v17 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v18 = v17 | (v16 << 6);
LABEL_20:
    uint64_t v22 = (uint64_t *)(*(void *)(v43 + 48) + 16 * v18);
    uint64_t v24 = *v22;
    unint64_t v23 = v22[1];
    swift_bridgeObjectRetain();
    unint64_t v25 = String.count.getter();
    sub_10044B440(v25, v24, v23);
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if ((*v14)(v6, 1, v7) == 1)
    {
      sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v26 = *v36;
      int64_t v42 = v16;
      uint64_t v27 = v14;
      uint64_t v28 = v7;
      BOOL v29 = v37;
      v26(v37, v6, v28);
      sub_1000963CC(0, v38);
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v32 = [ObjCClassFromMetadata objectIDWithUUID:isa];

      char v33 = v29;
      uint64_t v7 = v28;
      uint64_t v14 = v27;
      int64_t v16 = v42;
      (*v35)(v33, v7);
      uint64_t result = swift_bridgeObjectRelease();
      if (v32)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized Array._endMutation()();
      }
    }
  }
  if (__OFADD__(v16++, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v16 >= v41) {
    goto LABEL_29;
  }
  unint64_t v20 = *(void *)(v40 + 8 * v16);
  if (v20)
  {
LABEL_19:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
    goto LABEL_20;
  }
  int64_t v21 = v16 + 1;
  if (v16 + 1 >= v41) {
    goto LABEL_29;
  }
  unint64_t v20 = *(void *)(v40 + 8 * v21);
  if (v20) {
    goto LABEL_18;
  }
  int64_t v21 = v16 + 2;
  if (v16 + 2 >= v41) {
    goto LABEL_29;
  }
  unint64_t v20 = *(void *)(v40 + 8 * v21);
  if (v20) {
    goto LABEL_18;
  }
  int64_t v21 = v16 + 3;
  if (v16 + 3 >= v41) {
    goto LABEL_29;
  }
  unint64_t v20 = *(void *)(v40 + 8 * v21);
  if (v20) {
    goto LABEL_18;
  }
  int64_t v21 = v16 + 4;
  if (v16 + 4 >= v41)
  {
LABEL_29:
    swift_release();
    return v44;
  }
  unint64_t v20 = *(void *)(v40 + 8 * v21);
  if (v20)
  {
LABEL_18:
    int64_t v16 = v21;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v41) {
      goto LABEL_29;
    }
    unint64_t v20 = *(void *)(v40 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_19;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1004DA974()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091B2C8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091B2C8);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t *sub_1004DAA3C(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  unint64_t v6 = v5;
  unint64_t v47 = a5;
  unint64_t v46 = a3;
  uint64_t v10 = *v6;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v59 = *(void *)(v11 - 8);
  uint64_t v60 = v11;
  __chkstk_darwin(v11);
  id v57 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v55 = *(void *)(v13 - 8);
  uint64_t v56 = v13;
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v15 - 8);
  unint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v18 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100094134((uint64_t *)&unk_10091A450);
  uint64_t v50 = *(void *)(v21 - 8);
  uint64_t v51 = v21;
  __chkstk_darwin(v21);
  unint64_t v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
  *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_manualSortHintChangesSubscription) = 0;
  uint64_t v24 = (uint64_t *)((char *)v6 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity);
  aBlock[0] = v10;
  sub_100094134(&qword_10091B3F0);
  *uint64_t v24 = String.init<A>(reflecting:)();
  v24[1] = v25;
  v24[3] = 0;
  v24[4] = 0;
  *(uint64_t *)((char *)v24 + 38) = 0;
  v24[2] = 0;
  uint64_t v6[2] = (uint64_t)a1;
  v6[3] = a2;
  unint64_t v26 = v46;
  v6[4] = (uint64_t)v46;
  uint64_t v27 = (char *)v6 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_debounceInterval;
  uint64_t v28 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v49 = *(void *)(v28 - 8);
  BOOL v29 = *(void (**)(char *, uint64_t))(v49 + 16);
  uint64_t v61 = a4;
  uint64_t v53 = v28;
  v29(v27, a4);
  uint64_t v30 = v47;
  *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_notificationCenter) = (uint64_t)v47;
  uint64_t v31 = qword_100907630;
  id v52 = a1;
  uint64_t v58 = a2;
  swift_retain();
  id v32 = v26;
  id v33 = v30;
  if (v31 != -1) {
    swift_once();
  }
  NSNotificationCenter.publisher(for:object:)();
  uint64_t v34 = v32;
  aBlock[0] = v32;
  uint64_t v35 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v17, 1, 1, v35);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1004DD7BC((unint64_t *)&qword_10091A460, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
  char v36 = v33;
  sub_100096654();
  uint64_t v37 = v48;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_1009081C0);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v37);
  swift_allocObject();
  swift_weakInit();
  sub_1000967F4((unint64_t *)&qword_10090ABA0, (uint64_t *)&unk_10091A450);
  uint64_t v38 = v51;
  uint64_t v39 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v23, v38);
  *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_manualSortHintChangesSubscription) = v39;
  swift_release();
  uint64_t v40 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_1004DD79C;
  aBlock[5] = v40;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C8040;
  int64_t v41 = _Block_copy(aBlock);
  swift_retain();
  int64_t v42 = v54;
  static DispatchQoS.unspecified.getter();
  char v62 = _swiftEmptyArrayStorage;
  sub_1004DD7BC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  uint64_t v43 = v57;
  uint64_t v44 = v60;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v41);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v61, v53);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v44);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v42, v56);
  swift_release();
  swift_release();
  return v6;
}

uint64_t sub_1004DB1C0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1004DB218();
    return swift_release();
  }
  return result;
}

void sub_1004DB218()
{
  uint64_t v1 = v0;
  uint64_t v64 = *(void (***)(void, void))v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_10091D280);
  uint64_t v65 = *(void *)(v5 - 8);
  uint64_t v66 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10090DD10);
  uint64_t v9 = *(void (***)(void, void))(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_10091D290);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100094134(&qword_10091B3F8);
  uint64_t v17 = __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)&v1[OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription])
  {
    uint64_t v61 = v17;
    uint64_t v62 = v18;
    uint64_t v63 = OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription;
    sub_100094134((uint64_t *)&unk_10090A490);
    uint64_t inited = swift_initStackObject();
    uint64_t v60 = v20;
    uint64_t v22 = (void *)inited;
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    sub_1000963CC(0, &qword_10090ABC0);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    id v57 = v15;
    id v24 = [ObjCClassFromMetadata cdEntityName];
    uint64_t v59 = v13;
    id v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v56 = v8;
    uint64_t v27 = v26;
    uint64_t v58 = v12;
    uint64_t v29 = v28;

    v22[4] = v27;
    v22[5] = v29;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    id v30 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    v22[6] = v31;
    v22[7] = v33;
    uint64_t v34 = (void *)*((void *)v1 + 2);
    id v67 = v64;
    sub_100094134(&qword_10091B3F0);
    uint64_t v35 = String.init<A>(reflecting:)();
    uint64_t v37 = (void *)sub_100407394(v34, v35, v36, 0);
    swift_bridgeObjectRelease();
    uint64_t v38 = sub_10012674C((uint64_t)v22);
    swift_bridgeObjectRelease();
    id v67 = v37;
    *(void *)(swift_allocObject() + 16) = v38;
    swift_bridgeObjectRetain();
    sub_100094134((uint64_t *)&unk_10090F110);
    sub_100094134((uint64_t *)&unk_10090DD40);
    uint64_t v64 = v9;
    sub_1000967F4((unint64_t *)&unk_10090F120, (uint64_t *)&unk_10090F110);
    Publisher.map<A>(_:)();
    swift_release();
    sub_1000967F4((unint64_t *)&unk_10090DD50, (uint64_t *)&unk_10091D280);
    uint64_t v39 = v66;
    Publisher.filter(_:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v7, v39);
    swift_release();
    swift_bridgeObjectRelease();
    id v67 = (id)*((void *)v1 + 4);
    id v40 = v67;
    uint64_t v41 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v42 = *(void *)(v41 - 8);
    uint64_t v65 = *(void *)(v42 + 56);
    uint64_t v66 = v42 + 56;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v65)(v4, 1, 1, v41);
    sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    sub_1000967F4(&qword_10090F130, (uint64_t *)&unk_10090DD10);
    sub_100096654();
    id v43 = v40;
    uint64_t v45 = v56;
    uint64_t v44 = v57;
    Publisher.receive<A>(on:options:)();
    sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_1009081C0);

    ((void (**)(char *, uint64_t))v64)[1](v11, v45);
    id v67 = v43;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v65)(v4, 1, 1, v41);
    sub_1000967F4(&qword_10091F850, (uint64_t *)&unk_10091D290);
    id v46 = v43;
    unint64_t v47 = v60;
    uint64_t v48 = v58;
    Publisher.debounce<A>(for:scheduler:options:)();
    sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_1009081C0);

    (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v48);
    swift_allocObject();
    swift_weakInit();
    sub_1000967F4(&qword_10091B400, &qword_10091B3F8);
    uint64_t v49 = v61;
    uint64_t v50 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v47, v49);
    *(void *)&v1[v63] = v50;
    swift_release();
    if (qword_1009076C0 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E2DC(v51, (uint64_t)qword_10091B2C8);
    id v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "RDManualSortHintUpdater starts.", v54, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1004DBA54()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1004DB218();
    return swift_release();
  }
  return result;
}

uint64_t sub_1004DBAAC()
{
  uint64_t v1 = v0;
  *(void *)(v0 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_manualSortHintChangesSubscription) = 0;
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription))
  {
    *(void *)(v0 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
    swift_release();
    if (qword_1009076C0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_10091B2C8);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "RDManualSortHintUpdater stops.", v5, 2u);
      swift_slowDealloc();
    }
  }
  swift_release();

  uint64_t v6 = v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_debounceInterval;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  swift_release();
  swift_release();
  sub_10012227C(*(void *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity), *(void *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 8), *(void *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 16), *(void *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 24), *(void *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 32), *(unsigned int *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 40) | ((unint64_t)*(unsigned __int16 *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 44) << 32));

  return swift_deallocClassInstance();
}

uint64_t sub_1004DBCA0()
{
  return type metadata accessor for RDManualSortHintUpdater();
}

uint64_t type metadata accessor for RDManualSortHintUpdater()
{
  uint64_t result = qword_10091B330;
  if (!qword_10091B330) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004DBCF4()
{
  uint64_t result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004DBDBC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1004DBE14();
    return swift_release();
  }
  return result;
}

uint64_t sub_1004DBE14()
{
  sub_10010B4E8(v0 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity, (uint64_t)v2);
  return sub_1003B5ADC((uint64_t)v2, (uint64_t)sub_1004DE0C4, v0);
}

void sub_1004DC0B4(uint64_t a1, uint64_t a2)
{
  sub_100094134(&qword_100909E00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = sub_10039F148(KeyPath);
  swift_release();
  *(void *)(inited + 32) = v6;
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = sub_10039F148(v7);
  swift_release();
  *(void *)(inited + 40) = v8;
  specialized Array._endMutation()();
  uint64_t v9 = (void *)sub_100397E58(inited);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100776E40;
  *(void *)(v10 + 32) = sub_1002F51CC(0);
  v79[0] = (id)v10;
  specialized Array._endMutation()();
  id v11 = v9;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*((void *)v79[0] + 2) >= *((void *)v79[0] + 3) >> 1) {
LABEL_68:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v12 = (void *)sub_1002F52FC(v79[0]);
  uint64_t v13 = [objc_allocWithZone((Class)NSFetchRequest) init];
  type metadata accessor for REMCDManualSortHint();
  id v14 = [(id)swift_getObjCClassFromMetadata() entity];
  [v13 setEntity:v14];

  [v13 setPredicate:v12];
  [v13 setResultType:1];

  sub_1000963CC(0, (unint64_t *)&qword_100914150);
  unint64_t v15 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
    if (qword_1009076C0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_10091B2C8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      v79[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_getErrorValue();
      uint64_t v20 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v20, v21, (uint64_t *)v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDManualSortHintUpdater failed to fetch REMCDManualSortHint with local IDs {error: %s}", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    if (*(void *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription))
    {
      *(void *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
      swift_release();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "RDManualSortHintUpdater stops.", v31, 2u);
        swift_slowDealloc();
      }
    }
    swift_errorRelease();

    return;
  }
  unint64_t v22 = v15;
  unint64_t v23 = v15 >> 62;
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_9;
    }
LABEL_70:
    swift_bridgeObjectRelease();
    if (qword_1009076C0 != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    sub_10008E2DC(v65, (uint64_t)qword_10091B2C8);
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "RDManualSortHintUpdater did not fetch any REMCDManualSortHint with local IDs.", v68, 2u);
      swift_slowDealloc();
    }

    if (!*(void *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription))
    {

      return;
    }
    *(void *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
    swift_release();
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
LABEL_76:
      int v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "RDManualSortHintUpdater stops.", v69, 2u);
      swift_slowDealloc();
    }
    goto LABEL_77;
  }
  uint64_t v24 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v24) {
    goto LABEL_70;
  }
LABEL_9:
  id v70 = v13;
  if (qword_1009076C0 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_10008E2DC(v25, (uint64_t)qword_10091B2C8);
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  id v77 = (id)a1;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    v79[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315138;
    if (v23)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_1000C51B8(v32, v33, (uint64_t *)v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDManualSortHintUpdater fetched %s REMCDManualSortHint with local IDs.", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v34 = v22 & 0xC000000000000001;
  unint64_t v78 = v22;
  swift_bridgeObjectRetain();
  id v11 = 0;
  uint64_t v35 = 0;
  char v74 = 1;
  uint64_t v36 = v24;
  while (2)
  {
    while (2)
    {
      id v72 = v11;
      uint64_t v73 = v35;
      a1 = v35;
      while (1)
      {
        if (v34) {
          id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v37 = *(id *)(v78 + 8 * (void)v11 + 32);
        }
        uint64_t v38 = v37;
        uint64_t v39 = (char *)v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        sub_1004DE350((uint64_t)v37, v77);
        char v41 = v40;

        if (v41 != 2) {
          break;
        }
        if (__OFADD__(a1, 1)) {
          goto LABEL_67;
        }
        id v11 = (char *)v11 + 1;
        ++a1;
        if (v39 == (char *)v36)
        {
          swift_bridgeObjectRelease();
          uint64_t v44 = v36 + v73 - (void)v72;
          swift_bridgeObjectRelease();
          uint64_t v13 = v70;
          id v43 = v77;
          char v42 = v74;
          if (v44 <= 0) {
            goto LABEL_41;
          }
LABEL_44:
          v79[0] = 0;
          if (objc_msgSend(v43, "save:", v79, v70))
          {
            id v48 = v79[0];
            uint64_t v49 = Logger.logObject.getter();
            os_log_type_t v50 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v49, v50))
            {
              uint64_t v51 = (uint8_t *)swift_slowAlloc();
              uint64_t v80 = swift_slowAlloc();
              *(_DWORD *)uint64_t v51 = 136315138;
              swift_beginAccess();
              uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
              sub_1000C51B8(v52, v53, &v80);
              uint64_t v13 = v71;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v49, v50, "RDManualSortHintUpdater replaced local IDs in %s REMCDManualSortHint.", v51, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              if (v42) {
                goto LABEL_60;
              }
LABEL_63:
              uint64_t v63 = v13;
              goto LABEL_78;
            }

            if ((v42 & 1) == 0) {
              goto LABEL_63;
            }
          }
          else
          {
            char v75 = v42;
            id v54 = v79[0];
            _convertNSErrorToError(_:)();

            swift_willThrow();
            swift_errorRetain();
            swift_errorRetain();
            uint64_t v55 = Logger.logObject.getter();
            os_log_type_t v56 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v55, v56))
            {
              id v57 = (uint8_t *)swift_slowAlloc();
              v79[0] = (id)swift_slowAlloc();
              *(_DWORD *)id v57 = 136315138;
              swift_getErrorValue();
              uint64_t v58 = Error.rem_errorDescription.getter();
              uint64_t v80 = sub_1000C51B8(v58, v59, (uint64_t *)v79);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v55, v56, "RDManualSortHintUpdater failed to save changes {error: %s}", v57, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_errorRelease();
              swift_errorRelease();
            }

            if (*(void *)(a2
                           + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription))
            {
              *(void *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
              swift_release();
              uint64_t v60 = Logger.logObject.getter();
              os_log_type_t v61 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v60, v61))
              {
                uint64_t v62 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v62 = 0;
                _os_log_impl((void *)&_mh_execute_header, v60, v61, "RDManualSortHintUpdater stops.", v62, 2u);
                swift_slowDealloc();
              }
            }
            swift_errorRelease();
            if ((v75 & 1) == 0) {
              goto LABEL_63;
            }
          }
          goto LABEL_60;
        }
      }
      if (v41)
      {
        uint64_t v35 = a1 + 1;
        if (__OFADD__(a1, 1)) {
          __break(1u);
        }
        char v74 = 0;
        id v11 = (char *)v11 + 1;
        if (v39 == (char *)v36)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v42 = 0;
          uint64_t v13 = v70;
          id v43 = v77;
          if (v35 <= 0) {
            goto LABEL_41;
          }
          goto LABEL_44;
        }
        continue;
      }
      break;
    }
    char v74 = 0;
    id v11 = (char *)v11 + 1;
    uint64_t v35 = a1;
    if (v39 != (char *)v36) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v42 = 0;
  uint64_t v13 = v70;
  id v43 = v77;
  if (a1 >= 1) {
    goto LABEL_44;
  }
LABEL_41:
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v46))
  {
    unint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "RDManualSortHintUpdater did not replace local IDs in any REMCDManualSortHint.", v47, 2u);
    swift_slowDealloc();

    if (v42) {
      goto LABEL_60;
    }
    goto LABEL_63;
  }

  if ((v42 & 1) == 0) {
    goto LABEL_63;
  }
LABEL_60:
  if (!*(void *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription)) {
    goto LABEL_63;
  }
  *(void *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
  swift_release();
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64)) {
    goto LABEL_76;
  }
LABEL_77:

LABEL_78:
}

uint64_t sub_1004DCFD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int *a5)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v12 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  uint64_t v43 = v8;
  if (v12)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_1001806F8(v8, v9);
    if (v14)
    {
      unint64_t v15 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v13);
      uint64_t v16 = v15[1];
      uint64_t v44 = *v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (!*(void *)(a3 + 16)) {
        goto LABEL_12;
      }
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  uint64_t v44 = v8;
  uint64_t v16 = v9;
  if (!*(void *)(a3 + 16)) {
    goto LABEL_12;
  }
LABEL_8:
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_1001806F8(v10, v11);
  if (v18)
  {
    uint64_t v19 = a5;
    uint64_t v20 = (Swift::Int *)(*(void *)(a3 + 56) + 16 * v17);
    Swift::Int v21 = *v20;
    Swift::Int v46 = v20[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (!*(void *)(a3 + 16)) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
LABEL_12:
  uint64_t v19 = a5;
  swift_bridgeObjectRetain();
  Swift::Int v21 = v10;
  Swift::Int v46 = v11;
  if (!*(void *)(a3 + 16))
  {
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v30 = v44;
    Swift::Int v27 = v21;
    uint64_t v31 = v19;
    uint64_t v32 = v16;
    goto LABEL_21;
  }
LABEL_13:
  unint64_t v22 = sub_1001806F8(v10, v11);
  if ((v23 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v24 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Swift::Int v27 = v21;
  if (v26 == v21 && v25 == v46)
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = v44;
    uint64_t v31 = v19;
    uint64_t v32 = v16;
    Swift::Int v33 = v46;
    goto LABEL_31;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = v44;
  uint64_t v31 = v19;
  uint64_t v32 = v16;
  if (v29)
  {
    Swift::Int v33 = v46;
    goto LABEL_31;
  }
LABEL_21:
  if (*(void *)(a2 + 16))
  {
    unint64_t v34 = sub_1001806F8(v43, v9);
    if (v35)
    {
      uint64_t v36 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v34);
      uint64_t v38 = *v36;
      uint64_t v37 = v36[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      BOOL v39 = v38 == v30 && v37 == v32;
      Swift::Int v33 = v46;
      if (!v39)
      {
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
LABEL_31:
      swift_bridgeObjectRelease();
LABEL_32:
      swift_bridgeObjectRetain();
      sub_10031DC68(&v45, v27, v33);
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease();
  Swift::Int v33 = v46;
LABEL_33:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v45 = *v31;
  *uint64_t v31 = 0x8000000000000000;
  sub_1002C3F10(v27, v33, v30, v32, isUniquelyReferenced_nonNull_native);
  *uint64_t v31 = v45;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004DD2F8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, Swift::Int *a5)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_1001806F8(v8, v7);
    if (v12)
    {
      unint64_t v13 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v11);
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (!*(void *)(a2 + 16)) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = v8;
  uint64_t v14 = v7;
  if (!*(void *)(a2 + 16))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char v23 = a3;
    goto LABEL_16;
  }
LABEL_8:
  unint64_t v16 = sub_1001806F8(v8, v7);
  if ((v17 & 1) == 0) {
    goto LABEL_15;
  }
  char v18 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v20 == v15 && v19 == v14)
  {
    swift_bridgeObjectRelease();
    char v23 = a3;
  }
  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v23 = a3;
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v27 = *v23;
  if (*(void *)(*v23 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v28 = sub_1001806F8(v15, v14);
    if (v29)
    {
      uint64_t v30 = (Swift::Int *)(*(void *)(v27 + 56) + 16 * v28);
      Swift::Int v31 = *v30;
      Swift::Int v32 = v30[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_10031DC68(&v34, v31, v32);
    }
    swift_bridgeObjectRelease();
  }
LABEL_16:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_1004DDA28(v9, a2, v23, v15, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v34 = *a5;
  *a5 = 0x8000000000000000;
  sub_1002C4A2C((uint64_t)v24, v15, v14, isUniquelyReferenced_nonNull_native);
  *a5 = v34;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004DD570(uint64_t a1, uint64_t a2, uint64_t *a3, Swift::Int *a4)
{
  uint64_t v8 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  double v9 = *(double *)(a1 + 16);
  uint64_t v10 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (!v10)
  {
LABEL_6:
    swift_bridgeObjectRetain();
    Swift::Int v15 = v8;
    Swift::Int v14 = v7;
    if (!*(void *)(a2 + 16)) {
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1001806F8(v8, v7);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  unint64_t v13 = (Swift::Int *)(*(void *)(a2 + 56) + 16 * v11);
  Swift::Int v15 = *v13;
  Swift::Int v14 = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!*(void *)(a2 + 16)) {
    goto LABEL_17;
  }
LABEL_7:
  unint64_t v16 = sub_1001806F8(v8, v7);
  if ((v17 & 1) == 0) {
    goto LABEL_17;
  }
  char v18 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v20 == v15 && v19 == v14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v22)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    sub_10031DC68(&v27, v15, v14);
LABEL_17:
    swift_bridgeObjectRelease();
  }
  uint64_t v23 = *a3;
  swift_bridgeObjectRetain();
  char v24 = sub_1001CBC20(v15, v14, v23);
  swift_bridgeObjectRelease();
  if (v24) {
    double v9 = v9 + 1.0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v27 = *a4;
  *a4 = 0x8000000000000000;
  sub_1002C3D24(v15, v14, isUniquelyReferenced_nonNull_native, v9);
  *a4 = v27;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004DD75C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004DD794()
{
  return sub_1004DB1C0();
}

uint64_t sub_1004DD79C()
{
  return sub_1004DBA54();
}

uint64_t sub_1004DD7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004DD7B4()
{
  return swift_release();
}

uint64_t sub_1004DD7BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004DD804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int *a5)
{
  Swift::Int v31 = a5;
  uint64_t v28 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a1 + 64);
  int64_t v29 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    uint64_t v20 = 16 * i;
    Swift::Int v21 = (uint64_t *)(*(void *)(a1 + 48) + v20);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    char v24 = (uint64_t *)(*(void *)(a1 + 56) + v20);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    v30[0] = v22;
    v30[1] = v23;
    v30[2] = v25;
    v30[3] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1004DCFD8(v30, a2, a3, a4, v31);
    if (v5)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v29) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v28 + 8 * v14);
    if (!v18)
    {
      int64_t v19 = v14 + 1;
      if (v14 + 1 >= v29) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v28 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 2;
      if (v14 + 2 >= v29) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v28 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 3;
      if (v14 + 3 >= v29) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v28 + 8 * v19);
      if (v18)
      {
LABEL_14:
        int64_t v14 = v19;
        goto LABEL_15;
      }
      int64_t v27 = v14 + 4;
      if (v14 + 4 >= v29) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v28 + 8 * v27);
      v14 += 4;
      if (!v18) {
        break;
      }
    }
LABEL_15:
    unint64_t v12 = (v18 - 1) & v18;
  }
  while (1)
  {
    int64_t v14 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v14 >= v29) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v28 + 8 * v14);
    ++v27;
    if (v18) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1004DDA28(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    BOOL v39 = _swiftEmptyArrayStorage;
    sub_1001DE058(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    double v9 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v10 = *(v9 - 1);
      uint64_t v11 = *v9;
      uint64_t v12 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      if (v12)
      {
        swift_bridgeObjectRetain();
        unint64_t v13 = sub_1001806F8(v10, v11);
        if (v14)
        {
          unint64_t v15 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v13);
          uint64_t v17 = *v15;
          uint64_t v16 = v15[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (!*(void *)(a2 + 16)) {
            goto LABEL_22;
          }
          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      uint64_t v17 = v10;
      uint64_t v16 = v11;
      if (!*(void *)(a2 + 16)) {
        goto LABEL_22;
      }
LABEL_9:
      swift_bridgeObjectRetain();
      unint64_t v18 = sub_1001806F8(v10, v11);
      if (v19)
      {
        uint64_t v20 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v18);
        uint64_t v22 = *v20;
        uint64_t v21 = v20[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v22 == v17 && v21 == v16)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0)
          {
LABEL_22:
            swift_bridgeObjectRelease();
            goto LABEL_23;
          }
        }
        uint64_t v25 = *a3;
        if (*(void *)(*a3 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v26 = sub_1001806F8(a4, a5);
          if (v27)
          {
            uint64_t v28 = (Swift::Int *)(*(void *)(v25 + 56) + 16 * v26);
            Swift::Int v29 = v28[1];
            Swift::Int v34 = *v28;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            sub_10031DC68(&v38, v34, v29);
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_22;
      }
      swift_bridgeObjectRelease_n();
LABEL_23:
      BOOL v39 = v6;
      unint64_t v31 = v6[2];
      unint64_t v30 = v6[3];
      if (v31 >= v30 >> 1)
      {
        sub_1001DE058(v30 > 1, v31 + 1, 1);
        uint64_t v6 = v39;
      }
      v9 += 2;
      uint64_t v6[2] = v31 + 1;
      Swift::Int v32 = &v6[2 * v31];
      void v32[4] = v17;
      v32[5] = v16;
      --v5;
    }
    while (v5);
  }
  return v6;
}

uint64_t sub_1004DDC84(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, Swift::Int *a5)
{
  char v27 = a5;
  uint64_t v24 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    v26[0] = *v20;
    v26[1] = v21;
    v26[2] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1004DD2F8(v26, a2, a3, a4, v27);
    if (v5)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v25) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v24 + 8 * v14);
    if (!v18)
    {
      int64_t v19 = v14 + 1;
      if (v14 + 1 >= v25) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v24 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 2;
      if (v14 + 2 >= v25) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v24 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 3;
      if (v14 + 3 >= v25) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v24 + 8 * v19);
      if (v18)
      {
LABEL_14:
        int64_t v14 = v19;
        goto LABEL_15;
      }
      int64_t v23 = v14 + 4;
      if (v14 + 4 >= v25) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v24 + 8 * v23);
      v14 += 4;
      if (!v18) {
        break;
      }
    }
LABEL_15:
    unint64_t v12 = (v18 - 1) & v18;
  }
  while (1)
  {
    int64_t v14 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v14 >= v25) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v24 + 8 * v14);
    ++v23;
    if (v18) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1004DDEA0(uint64_t a1, uint64_t a2, uint64_t *a3, Swift::Int *a4)
{
  uint64_t v9 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    v24[0] = *v20;
    v24[1] = v21;
    v24[2] = v22;
    swift_bridgeObjectRetain();
    sub_1004DD570((uint64_t)v24, a2, a3, a4);
    if (v4)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v25) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v9 + 8 * v14);
    if (!v18)
    {
      int64_t v19 = v14 + 1;
      if (v14 + 1 >= v25) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 2;
      if (v14 + 2 >= v25) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 3;
      if (v14 + 3 >= v25) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v19);
      if (v18)
      {
LABEL_14:
        int64_t v14 = v19;
        goto LABEL_15;
      }
      int64_t v23 = v14 + 4;
      if (v14 + 4 >= v25) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v23);
      v14 += 4;
      if (!v18) {
        break;
      }
    }
LABEL_15:
    unint64_t v12 = (v18 - 1) & v18;
  }
  while (1)
  {
    int64_t v14 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v14 >= v25) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v9 + 8 * v14);
    ++v23;
    if (v18) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1004DE084()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004DE0BC()
{
  return sub_1004DBDBC();
}

void sub_1004DE0C4(uint64_t a1)
{
  sub_1004DC0B4(a1, v1);
}

void *sub_1004DE0E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    char v35 = _swiftEmptyArrayStorage;
    sub_1001DE058(0, v3, 0);
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v7 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *v7;
      uint64_t v10 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      if (v10)
      {
        swift_bridgeObjectRetain();
        unint64_t v11 = sub_1001806F8(v8, v9);
        if (v12)
        {
          unint64_t v13 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v11);
          uint64_t v15 = *v13;
          uint64_t v14 = v13[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (!*(void *)(a2 + 16)) {
            goto LABEL_22;
          }
          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      uint64_t v15 = v8;
      uint64_t v14 = v9;
      if (!*(void *)(a2 + 16)) {
        goto LABEL_22;
      }
LABEL_9:
      swift_bridgeObjectRetain();
      unint64_t v16 = sub_1001806F8(v8, v9);
      if (v17)
      {
        unint64_t v18 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v16);
        uint64_t v20 = *v18;
        uint64_t v19 = v18[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v20 == v15 && v19 == v14)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
          {
LABEL_22:
            swift_bridgeObjectRelease();
            goto LABEL_23;
          }
        }
        uint64_t v23 = *a3;
        if (*(void *)(*a3 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v24 = sub_1001806F8(v15, v14);
          if (v25)
          {
            unint64_t v26 = (Swift::Int *)(*(void *)(v23 + 56) + 16 * v24);
            Swift::Int v27 = *v26;
            Swift::Int v28 = v26[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            sub_10031DC68(&v34, v27, v28);
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_22;
      }
      swift_bridgeObjectRelease_n();
LABEL_23:
      char v35 = v4;
      unint64_t v30 = v4[2];
      unint64_t v29 = v4[3];
      if (v30 >= v29 >> 1)
      {
        sub_1001DE058(v29 > 1, v30 + 1, 1);
        uint64_t v4 = v35;
      }
      v7 += 2;
      v4[2] = v30 + 1;
      unint64_t v31 = &v4[2 * v30];
      v31[4] = v15;
      v31[5] = v14;
      --v3;
    }
    while (v3);
  }
  return v4;
}

void sub_1004DE350(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMManualOrdering.ElementType();
  uint64_t v133 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v139 = 0;
  id v12 = [a2 existingObjectWithID:a1 error:&v139];
  id v13 = v139;
  if (!v12)
  {
    id v27 = v139;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  id v14 = v12;
  long long v132 = v8;
  type metadata accessor for REMCDManualSortHint();
  uint64_t v15 = (char *)swift_dynamicCastClass();
  id v16 = v13;
  if (!v15) {
    goto LABEL_22;
  }
  id v17 = [v15 account];
  if (!v17)
  {
    if (qword_1009076C0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_10091B2C8);
    id v14 = v14;
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      id v139 = (id)swift_slowAlloc();
      *(_DWORD *)unint64_t v31 = 136446210;
      id v32 = [v15 remObjectID];
      if (v32)
      {
        Swift::Int v33 = v32;
        id v34 = [v32 description];

        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;
      }
      else
      {
        unint64_t v37 = 0xE300000000000000;
        uint64_t v35 = 7104878;
      }
      Swift::Int v134 = (void *)sub_1000C51B8(v35, v37, (uint64_t *)&v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Cannot replaceLocalIDsInREMCDManualSortHint() against a manual sort hint without an associated account {remObjectID: %{public}s}", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

LABEL_22:
    return;
  }
  id v128 = v17;
  uint64_t v126 = v6;
  uint64_t v125 = v5;
  id v131 = v14;
  id v18 = [v15 concatenatedContainerIDsWithLocalContainerIDPrefix];
  uint64_t v19 = v15;
  if (v18)
  {
    uint64_t v20 = v18;
    uint64_t v21 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    id v139 = v21;
    uint64_t v140 = v23;
    uint64_t v24 = *(void *)&v19[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
                        + 8];
    Swift::Int v134 = *(void **)&v19[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix];
    uint64_t v135 = v24;
    sub_1000E4FD8();
    uint64_t v25 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    unint64_t v26 = (void *)sub_10012674C(v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v26 = &_swiftEmptySetSingleton;
  }
  unint64_t v38 = sub_1004DA55C((uint64_t)v26, &qword_10090ABC0, (uint64_t)off_1008AA3D8);
  swift_bridgeObjectRelease();
  uint64_t v39 = sub_100126B08(v38);
  swift_bridgeObjectRelease();
  id v40 = [v19 concatenatedElementIDsWithLocalElementIDPrefix];
  long long v127 = v19;
  if (v40)
  {
    char v41 = v40;
    char v42 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;

    id v139 = v42;
    uint64_t v140 = v44;
    uint64_t v45 = *(void *)&v19[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix + 8];
    Swift::Int v134 = *(void **)&v19[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix];
    uint64_t v135 = v45;
    sub_1000E4FD8();
    uint64_t v46 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    unint64_t v47 = (void *)sub_10012674C(v46);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v47 = &_swiftEmptySetSingleton;
  }
  uint64_t v130 = v39;
  unint64_t v48 = sub_1004DA55C((uint64_t)v47, (unint64_t *)&qword_10090B040, (uint64_t)off_1008AA488);
  swift_bridgeObjectRelease();
  uint64_t v129 = sub_100126B08(v48);
  swift_bridgeObjectRelease();
  id v49 = v128;
  os_log_type_t v50 = sub_1005E82D8();
  uint64_t v51 = type metadata accessor for RDManualSortIDCache();
  uint64_t v52 = v51;
  if (qword_100907870 != -1) {
    uint64_t v51 = swift_once();
  }
  uint64_t v53 = qword_10091C658;
  __chkstk_darwin(v51);
  *(&v120 - 4) = v52;
  *(&v120 - 3) = (uint64_t)v50;
  *(&v120 - 2) = v53;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v54 = (uint64_t)v139;
  type metadata accessor for RDManualSortIDAdapter();
  swift_allocObject();
  uint64_t v55 = sub_1001A1374(v54, (uint64_t)v50, 0);

  uint64_t v56 = sub_1001A2E6C(v130);
  if (v2)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  unint64_t v57 = v56;
  id v128 = v49;
  swift_bridgeObjectRelease();
  unint64_t v58 = sub_1002ED224((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v59 = sub_1004D9AFC(v58, v57, (void (*)(void))type metadata accessor for RDAccountManualSortID, sub_1001A7EB8, (void (*)(void))sub_100311CC4, (void (*)(void))sub_10031A48C);
  swift_bridgeObjectRelease();
  uint64_t v60 = v133;
  (*(void (**)(char *, void, uint64_t))(v133 + 104))(v11, enum case for REMManualOrdering.ElementType.reminders(_:), v9);
  unint64_t v61 = sub_1001A33EC(v129);
  id v62 = v131;
  unint64_t v63 = v61;
  uint64_t v130 = v55;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v9);
  swift_bridgeObjectRelease();
  unint64_t v64 = sub_1002ED8DC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v65 = sub_1004D9AFC(v64, v63, (void (*)(void))type metadata accessor for RDElementManualSortID, sub_1001A6E60, (void (*)(void))sub_10030DC10, (void (*)(void))sub_100318554);
  swift_bridgeObjectRelease();
  if ((v59 & 0xC000000000000001) != 0) {
    uint64_t v66 = __CocoaDictionary.count.getter();
  }
  else {
    uint64_t v66 = *(void *)(v59 + 16);
  }
  id v67 = v128;
  if (!v66 && !((v65 & 0xC000000000000001) != 0 ? __CocoaDictionary.count.getter() : *(void *)(v65 + 16)))
  {

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v69 = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v70 = sub_1004D9FB4(v69, v59, (void (*)(void))type metadata accessor for RDAccountManualSortID);
  swift_bridgeObjectRelease();
  unint64_t v71 = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v72 = sub_1004D9FB4(v71, v65, (void (*)(void))type metadata accessor for RDElementManualSortID);
  swift_bridgeObjectRelease();
  sub_1001B3874((uint64_t)v141);
  sub_100375628((uint64_t)v141, (uint64_t)v142);
  uint64_t v73 = (void *)v142[0];
  if (!v142[0])
  {

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v74 = v142[1];
  uint64_t v75 = v142[2];
  uint64_t v76 = v142[3];
  uint64_t v133 = v142[4];
  id v139 = &_swiftEmptySetSingleton;
  Swift::Int v134 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v77 = swift_bridgeObjectRetain();
  sub_1004DD804(v77, v72, v70, (uint64_t)&v139, (Swift::Int *)&v134);
  uint64_t v129 = v75;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v78 = swift_bridgeObjectRetain();
  uint64_t v79 = sub_1004DE0E8(v78, v72, (uint64_t *)&v134);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::Int v137 = (Swift::Int)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain();
  uint64_t v80 = swift_bridgeObjectRetain();
  sub_1004DDC84(v80, v72, (uint64_t *)&v134, (uint64_t)&v139, &v137);
  uint64_t v124 = v74;
  swift_bridgeObjectRelease();
  uint64_t v81 = v79;
  swift_bridgeObjectRelease_n();
  Swift::Int v136 = (Swift::Int)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain();
  uint64_t v82 = swift_bridgeObjectRetain();
  sub_1004DDEA0(v82, v70, (uint64_t *)&v139, &v136);
  uint64_t v123 = v76;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v83 = v137;
  uint64_t v84 = (uint64_t)v134;
  uint64_t v85 = v136;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v86 = sub_1001261C0(v85);
  sub_1000F535C(v81, v84, v86);
  swift_bridgeObjectRelease();
  v138[1] = v81;
  v138[2] = v83;
  v138[3] = v84;
  v138[4] = v85;
  uint64_t v122 = v85;
  v138[5] = v86;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v121 = v81;
  char v87 = sub_10034F5D4(v81, v73);
  uint64_t v88 = v129;
  uint64_t v89 = v123;
  uint64_t v120 = v84;
  if ((v87 & 1) != 0
    && (sub_1004858F0(v83, v124) & 1) != 0
    && (sub_100485B60(v84, v88) & 1) != 0
    && (sub_100485D80(v122, v89) & 1) != 0)
  {
    uint64_t v90 = v133;
    char v91 = sub_100596C74(v86, v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v138[0] = v90;
    sub_1000F5C48((uint64_t)v138);
    uint64_t v92 = v126;
    if (v91)
    {

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v138[0] = v133;
    sub_1000F5C48((uint64_t)v138);
    uint64_t v92 = v126;
  }
  uint64_t v133 = v83;
  uint64_t v93 = sub_1000F49E8();
  unint64_t v95 = v94;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100097F34(v93, v95);
  uint64_t v97 = v127;
  [v127 setHintData:isa];

  [v97 setSerializationVersion:1];
  uint64_t v98 = v132;
  UUID.init()();
  Class v99 = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v92 + 8))(v98, v125);
  [v97 setETag:v99];

  uint64_t v100 = swift_bridgeObjectRetain();
  uint64_t v101 = sub_100489E1C(v100);
  sub_10026B960(v101);
  uint64_t v102 = sub_1004E63C0(1, v121, v133, v120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10026B974(v102);
  [v97 updateChangeCount];
  id v103 = [v97 concatenatedContainerIDsWithLocalContainerIDPrefix];
  if (v103)
  {
    id v104 = v103;
    uint64_t v105 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v107 = v106;

    id v139 = v105;
    uint64_t v140 = v107;
    uint64_t v108 = *(void *)&v97[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
                         + 8];
    Swift::Int v134 = *(void **)&v97[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix];
    uint64_t v135 = v108;
    sub_1000E4FD8();
    uint64_t v109 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    id v110 = (void *)sub_10012674C(v109);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v110 = &_swiftEmptySetSingleton;
  }
  uint64_t v111 = v110[2];
  swift_bridgeObjectRelease();
  if (v111)
  {

    swift_release();
  }
  else
  {
    char v112 = v127;
    id v113 = [v127 concatenatedElementIDsWithLocalElementIDPrefix];
    if (v113)
    {
      os_log_type_t v114 = v113;
      uint64_t v115 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v117 = v116;

      id v139 = v115;
      uint64_t v140 = v117;
      uint64_t v118 = *(void *)&v112[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix
                            + 8];
      Swift::Int v134 = *(void **)&v112[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix];
      uint64_t v135 = v118;
      sub_1000E4FD8();
      uint64_t v119 = StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      sub_10012674C(v119);

      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_release();
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1004DF540(uint64_t *a1, uint64_t a2)
{
  uint64_t v92 = a1;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v77 = (char *)v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v83 = (char *)v74 - v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v74 - v8;
  uint64_t v10 = sub_100094134(&qword_100919930);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  id v13 = (char *)v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v82 = (char *)v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v96 = (unint64_t)v74 - v18;
  __chkstk_darwin(v19);
  uint64_t v93 = (char *)v74 - v20;
  __n128 v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)v74 - v23;
  uint64_t v25 = *(int *)(v11 + 56);
  uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
  v84(v13, a2, v14, v22);
  uint64_t v26 = *(void *)(a2 + v25);
  id v27 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v85 = v24;
  unint64_t v94 = v27;
  uint64_t v95 = v15 + 32;
  v27(v24, v13, v14);
  uint64_t v28 = *(void *)(v26 + 16);
  uint64_t v75 = v15;
  v74[1] = v26;
  if (v28)
  {
    unint64_t v29 = (char *)(v26 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)));
    uint64_t v87 = *(void *)(v15 + 72);
    os_log_type_t v30 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    uint64_t v81 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    uint64_t v76 = (void (**)(unint64_t, char *, uint64_t))(v15 + 40);
    uint64_t v78 = (void (**)(unint64_t, uint64_t))(v15 + 8);
    swift_bridgeObjectRetain_n();
    uint64_t v79 = v9;
    uint64_t v80 = v14;
    unint64_t v31 = (void (*)(uint64_t, char *, uint64_t))v84;
    uint64_t v86 = v15 + 16;
    ((void (*)(char *, char *, uint64_t))v84)(v9, v29, v14);
    while (1)
    {
      unint64_t v37 = *v30;
      (*v30)(v9, 0, 1, v14);
      char v91 = *v81;
      if (v91(v9, 1, v14) == 1) {
        break;
      }
      uint64_t v89 = v29;
      uint64_t v90 = v28;
      unint64_t v38 = v31;
      uint64_t v39 = v30;
      id v40 = v93;
      v94(v93, v9, v14);
      uint64_t v41 = v96;
      v38(v96, v40, v14);
      uint64_t v42 = (uint64_t)v83;
      v38((uint64_t)v83, v85, v14);
      uint64_t v43 = v39;
      uint64_t v88 = v37;
      v37((char *)v42, 0, 1, v14);
      if (v91((char *)v42, 1, v14) == 1)
      {
        sub_1000966BC(v42, (uint64_t *)&unk_100909E50);
        swift_bridgeObjectRetain();
        unint64_t v44 = sub_100306EC4(v41);
        char v46 = v45;
        swift_bridgeObjectRelease();
        if (v46)
        {
          unint64_t v47 = v92;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          id v49 = (void *)*v47;
          uint64_t v97 = (void *)*v47;
          *unint64_t v47 = 0x8000000000000000;
          unint64_t v31 = (void (*)(uint64_t, char *, uint64_t))v84;
          os_log_type_t v30 = v43;
          uint64_t v14 = v80;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10031967C();
            id v49 = v97;
          }
          unint64_t v50 = v44 * v87;
          id v34 = *v78;
          (*v78)(v49[6] + v44 * v87, v14);
          uint64_t v51 = (uint64_t)v97;
          unint64_t v52 = v97[7] + v50;
          uint64_t v53 = v77;
          v94(v77, (char *)v52, v14);
          sub_1002C2610(v44, v51);
          uint64_t *v92 = v51;
          uint64_t v32 = (uint64_t)v53;
          swift_bridgeObjectRelease();
          Swift::Int v33 = v88;
          v88(v53, 0, 1, v14);
        }
        else
        {
          uint64_t v32 = (uint64_t)v77;
          uint64_t v14 = v80;
          os_log_type_t v30 = v39;
          Swift::Int v33 = v88;
          v88(v77, 1, 1, v80);
          id v34 = *v78;
          unint64_t v31 = (void (*)(uint64_t, char *, uint64_t))v84;
        }
        unint64_t v36 = v89;
        uint64_t v35 = v90;
        v34(v96, v14);
        sub_1000966BC(v32, (uint64_t *)&unk_100909E50);
      }
      else
      {
        v94(v82, (char *)v42, v14);
        uint64_t v54 = v92;
        int v55 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v97 = (void *)*v54;
        uint64_t v56 = v97;
        *uint64_t v54 = 0x8000000000000000;
        unint64_t v58 = sub_100306EC4(v41);
        uint64_t v59 = v56[2];
        BOOL v60 = (v57 & 1) == 0;
        uint64_t v61 = v59 + v60;
        if (__OFADD__(v59, v60))
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        char v62 = v57;
        if (v56[3] >= v61)
        {
          unint64_t v31 = (void (*)(uint64_t, char *, uint64_t))v84;
          os_log_type_t v30 = v43;
          uint64_t v14 = v80;
          if ((v55 & 1) == 0) {
            sub_10031967C();
          }
        }
        else
        {
          sub_100310698(v61, v55);
          unint64_t v63 = sub_100306EC4(v96);
          unint64_t v31 = (void (*)(uint64_t, char *, uint64_t))v84;
          uint64_t v14 = v80;
          if ((v62 & 1) != (v64 & 1)) {
            goto LABEL_29;
          }
          unint64_t v58 = v63;
          os_log_type_t v30 = v43;
        }
        unint64_t v36 = v89;
        uint64_t v35 = v90;
        unint64_t v65 = v97;
        if (v62)
        {
          (*v76)(v97[7] + v58 * v87, v82, v14);
          uint64_t v66 = v96;
        }
        else
        {
          v97[(v58 >> 6) + 8] |= 1 << v58;
          unint64_t v67 = v58 * v87;
          uint64_t v68 = v96;
          ((void (*)(unint64_t))v31)(v65[6] + v67);
          v94((char *)(v65[7] + v67), v82, v14);
          uint64_t v69 = v65[2];
          BOOL v70 = __OFADD__(v69, 1);
          uint64_t v71 = v69 + 1;
          if (v70) {
            goto LABEL_28;
          }
          v65[2] = v71;
          uint64_t v66 = v68;
        }
        uint64_t *v92 = (uint64_t)v97;
        swift_bridgeObjectRelease();
        id v34 = *v78;
        (*v78)(v66, v14);
        Swift::Int v33 = v88;
      }
      v34((unint64_t)v93, v14);
      unint64_t v29 = &v36[v87];
      uint64_t v28 = v35 - 1;
      uint64_t v9 = v79;
      if (!v28)
      {
        v33(v79, 1, 1, v14);
        break;
      }
      v31((uint64_t)v79, v29, v14);
    }
  }
  else
  {
    uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    swift_bridgeObjectRetain_n();
    v72(v9, 1, 1, v14);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v85, v14);
  return swift_bridgeObjectRelease();
}

unint64_t sub_1004DFCF4(char a1)
{
  unint64_t result = 0xD000000000000020;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000033;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1004DFDC8(char a1)
{
  unint64_t result = 0xD000000000000020;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000033;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004DFE9C(char *a1, char *a2)
{
  return sub_1002F43F8(*a1, *a2);
}

Swift::Int sub_1004DFEA8()
{
  return sub_1002F03D4();
}

uint64_t sub_1004DFEB4()
{
  return sub_1002F4F90();
}

Swift::Int sub_1004DFEBC()
{
  return sub_1002F03D4();
}

unint64_t sub_1004DFEC4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004E08E0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1004DFEF4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1004DFCF4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1004DFF20()
{
  return sub_1004DFDC8(*v0);
}

unint64_t sub_1004DFF28@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004E08E0(a1);
  *a2 = result;
  return result;
}

void sub_1004DFF50(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1004DFF5C(uint64_t a1)
{
  unint64_t v2 = sub_1004E1158();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004DFF98(uint64_t a1)
{
  unint64_t v2 = sub_1004E1158();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004DFFD4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100094134(&qword_10091B498);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_1004E1158();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  HIBYTE(v10) = 0;
  sub_100094134(&qword_10090DC48);
  sub_1004E154C(&qword_10091B4A0, &qword_10091B4A8);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = v3[1];
    HIBYTE(v10) = 1;
    sub_100094134(&qword_10091B428);
    sub_1004E15E0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = v3[2];
    HIBYTE(v10) = 2;
    sub_100094134(&qword_10091B438);
    sub_1004E16C0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_100096408((uint64_t)(v3 + 3), (uint64_t)v15, &qword_100915560);
    sub_100096408((uint64_t)v15, (uint64_t)&v11, &qword_100915560);
    HIBYTE(v10) = 3;
    sub_100094134(&qword_10091B448);
    sub_1004E179C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100096408((uint64_t)(v3 + 4), (uint64_t)v14, &qword_100915548);
    sub_100096408((uint64_t)v14, (uint64_t)&v11, &qword_100915548);
    HIBYTE(v10) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100096408((uint64_t)(v3 + 5), (uint64_t)v13, &qword_100915550);
    sub_100096408((uint64_t)v13, (uint64_t)&v11, &qword_100915550);
    HIBYTE(v10) = 5;
    sub_100094134(&qword_10091B470);
    sub_1004E195C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100096408((uint64_t)(v3 + 6), (uint64_t)v12, &qword_100915558);
    sub_100096408((uint64_t)v12, (uint64_t)&v11, &qword_100915558);
    HIBYTE(v10) = 6;
    sub_100094134(&qword_10091B488);
    sub_1004E1A5C(&qword_10091B4F0, &qword_10091B4A8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004E03D8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_1004E0730((uint64_t *)v7, (uint64_t *)v8) & 1;
}

double sub_1004E0424@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1004E092C(a1, (unint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1004E0468(void *a1)
{
  return sub_1004DFFD4(a1);
}

uint64_t destroy for RDSavedReminders()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for RDSavedReminders(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RDSavedReminders(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for RDSavedReminders(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RDSavedReminders()
{
  return &type metadata for RDSavedReminders;
}

uint64_t sub_1004E0730(uint64_t *a1, uint64_t *a2)
{
  if ((sub_100350A6C(*a1, *a2) & 1) == 0
    || (sub_100483DD8(a1[1], a2[1]) & 1) == 0
    || (sub_100484404(a1[2], a2[2]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v4 = a2[3];
  if (a1[3])
  {
    if (!v4) {
      return 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v5 = swift_bridgeObjectRetain();
    char v6 = sub_10048496C(v5, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      return 0;
    }
  }
  else if (v4)
  {
    return 0;
  }
  uint64_t v7 = a2[4];
  if (a1[4])
  {
    if (!v7) {
      return 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = swift_bridgeObjectRetain();
    char v9 = sub_100350A6C(v8, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v10 = a2[5];
  if (a1[5])
  {
    if (!v10) {
      return 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    char v12 = sub_100484E30(v11, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      return 0;
    }
  }
  else if (v10)
  {
    return 0;
  }
  uint64_t v13 = a2[6];
  if (!a1[6])
  {
    if (!v13) {
      goto LABEL_22;
    }
    return 0;
  }
  if (!v13) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = swift_bridgeObjectRetain();
  char v15 = sub_100485338(v14, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0) {
    return 0;
  }
LABEL_22:
  uint64_t v16 = a1[7];
  uint64_t v17 = a2[7];

  return sub_100485338(v16, v17);
}

unint64_t sub_1004E08E0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B7028, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

uint64_t sub_1004E092C@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v63 = a2;
  uint64_t v4 = sub_100094134(&qword_100919930);
  __chkstk_darwin(v4);
  char v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v9 = (char *)&v50 - v8;
  uint64_t v10 = sub_100094134(&qword_10091B408);
  uint64_t v62 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  char v64 = a1;
  sub_1000C0DE0(a1, v13);
  sub_1004E1158();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v64);
  }
  BOOL v60 = v9;
  uint64_t v61 = v6;
  uint64_t v14 = v63;
  sub_100094134(&qword_10090DC48);
  char v65 = 0;
  sub_1004E154C(&qword_10091B418, &qword_10091B420);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = v10;
  unint64_t v16 = v66;
  sub_100094134(&qword_10091B428);
  char v65 = 1;
  sub_1004E11AC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v59 = v16;
  unint64_t v17 = v66;
  sub_100094134(&qword_10091B438);
  char v65 = 2;
  sub_1004E128C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v58 = v17;
  unint64_t v18 = v66;
  sub_100094134(&qword_10091B448);
  char v65 = 3;
  sub_1004E1368();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  unint64_t v57 = v18;
  unint64_t v20 = v66;
  char v65 = 4;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  unint64_t v54 = v20;
  unint64_t v21 = v66;
  sub_100094134(&qword_10091B470);
  char v65 = 5;
  sub_1004E144C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v22 = v66;
  sub_100094134(&qword_10091B488);
  char v65 = 6;
  sub_1004E1A5C(&qword_10091B490, &qword_10091B420);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  unint64_t v52 = v21;
  uint64_t v53 = v15;
  unint64_t v50 = v66;
  unint64_t v23 = v58;
  swift_bridgeObjectRetain();
  unint64_t v66 = sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = *(void *)(v23 + 64);
  unint64_t v55 = v23 + 64;
  uint64_t v25 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & v24;
  int64_t v56 = (unint64_t)(v25 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v28 = 0;
  uint64_t v51 = v22;
  if (!v27) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v29 = __clz(__rbit64(v27));
  v27 &= v27 - 1;
  int64_t v30 = v28;
  for (unint64_t i = v29 | (v28 << 6); ; unint64_t i = __clz(__rbit64(v34)) + (v33 << 6))
  {
    unint64_t v36 = v58;
    uint64_t v37 = *(void *)(v58 + 48);
    uint64_t v38 = type metadata accessor for UUID();
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v40 = v37 + *(void *)(v39 + 72) * i;
    uint64_t v41 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v60, v40, v38);
    *(void *)(v41 + *(int *)(v4 + 48)) = *(void *)(*(void *)(v36 + 56) + 8 * i);
    uint64_t v42 = v41;
    uint64_t v22 = (uint64_t)v61;
    sub_100096408(v42, (uint64_t)v61, &qword_100919930);
    swift_bridgeObjectRetain();
    sub_1004DF540((uint64_t *)&v66, v22);
    sub_1000966BC(v22, &qword_100919930);
    int64_t v28 = v30;
    if (v27) {
      goto LABEL_7;
    }
LABEL_8:
    BOOL v32 = __OFADD__(v28, 1);
    int64_t v33 = v28 + 1;
    if (v32)
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v33 >= v56) {
      goto LABEL_27;
    }
    unint64_t v34 = *(void *)(v55 + 8 * v33);
    if (!v34) {
      break;
    }
LABEL_20:
    unint64_t v27 = (v34 - 1) & v34;
    int64_t v30 = v33;
  }
  int64_t v35 = v33 + 1;
  if (v33 + 1 >= v56) {
    goto LABEL_27;
  }
  unint64_t v34 = *(void *)(v55 + 8 * v35);
  if (v34) {
    goto LABEL_19;
  }
  int64_t v35 = v33 + 2;
  if (v33 + 2 >= v56) {
    goto LABEL_27;
  }
  unint64_t v34 = *(void *)(v55 + 8 * v35);
  if (v34) {
    goto LABEL_19;
  }
  int64_t v35 = v33 + 3;
  if (v33 + 3 >= v56) {
    goto LABEL_27;
  }
  unint64_t v34 = *(void *)(v55 + 8 * v35);
  if (v34) {
    goto LABEL_19;
  }
  int64_t v35 = v33 + 4;
  if (v33 + 4 >= v56)
  {
LABEL_27:
    unint64_t v43 = v59;
    uint64_t v44 = v62;
    uint64_t v45 = (uint64_t)v64;
    unint64_t v46 = v58;
    unint64_t v47 = v54;
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v48 = v66;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v53);
    uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v45);
    *uint64_t v14 = v43;
    v14[1] = v46;
    void v14[2] = v57;
    v14[3] = v47;
    uint64_t v49 = v51;
    v14[4] = v52;
    v14[5] = v49;
    v14[6] = v50;
    v14[7] = v48;
    return result;
  }
  unint64_t v34 = *(void *)(v55 + 8 * v35);
  if (v34)
  {
LABEL_19:
    int64_t v33 = v35;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v33 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v33 >= v56) {
      goto LABEL_27;
    }
    unint64_t v34 = *(void *)(v55 + 8 * v33);
    ++v35;
    if (v34) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  swift_bridgeObjectRelease();
  sub_1000966BC(v22, &qword_100919930);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1004E1158()
{
  unint64_t result = qword_10091B410;
  if (!qword_10091B410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B410);
  }
  return result;
}

unint64_t sub_1004E11AC()
{
  unint64_t result = qword_10091B430;
  if (!qword_10091B430)
  {
    sub_100096058(&qword_10091B428);
    sub_1004E1914(&qword_10091B420, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1004E154C(&qword_10091B418, &qword_10091B420);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B430);
  }
  return result;
}

unint64_t sub_1004E128C()
{
  unint64_t result = qword_10091B440;
  if (!qword_10091B440)
  {
    sub_100096058(&qword_10091B438);
    sub_1004E1914(&qword_10091B420, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1004E1914(&qword_100911108, (void (*)(uint64_t))type metadata accessor for RDSavedReminder);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B440);
  }
  return result;
}

unint64_t sub_1004E1368()
{
  unint64_t result = qword_10091B450;
  if (!qword_10091B450)
  {
    sub_100096058(&qword_10091B448);
    sub_1004E1914(&qword_10091B420, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1004E1880(&qword_10091B458, &qword_10091B468);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B450);
  }
  return result;
}

unint64_t sub_1004E144C()
{
  unint64_t result = qword_10091B478;
  if (!qword_10091B478)
  {
    sub_100096058(&qword_10091B470);
    sub_1004E1914(&qword_10091B420, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1004E14F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B478);
  }
  return result;
}

unint64_t sub_1004E14F8()
{
  unint64_t result = qword_10091B480;
  if (!qword_10091B480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B480);
  }
  return result;
}

uint64_t sub_1004E154C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_10090DC48);
    sub_1004E1914(a2, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1004E15E0()
{
  unint64_t result = qword_10091B4B0;
  if (!qword_10091B4B0)
  {
    sub_100096058(&qword_10091B428);
    sub_1004E1914(&qword_10091B4A8, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1004E154C(&qword_10091B4A0, &qword_10091B4A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B4B0);
  }
  return result;
}

unint64_t sub_1004E16C0()
{
  unint64_t result = qword_10091B4B8;
  if (!qword_10091B4B8)
  {
    sub_100096058(&qword_10091B438);
    sub_1004E1914(&qword_10091B4A8, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1004E1914(&qword_10091B4C0, (void (*)(uint64_t))type metadata accessor for RDSavedReminder);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B4B8);
  }
  return result;
}

unint64_t sub_1004E179C()
{
  unint64_t result = qword_10091B4C8;
  if (!qword_10091B4C8)
  {
    sub_100096058(&qword_10091B448);
    sub_1004E1914(&qword_10091B4A8, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1004E1880(&qword_10091B4D0, &qword_10091B4D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B4C8);
  }
  return result;
}

uint64_t sub_1004E1880(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_10091B460);
    sub_1004E1914(a2, (void (*)(uint64_t))type metadata accessor for RDSavedURLAttachment);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004E1914(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1004E195C()
{
  unint64_t result = qword_10091B4E0;
  if (!qword_10091B4E0)
  {
    sub_100096058(&qword_10091B470);
    sub_1004E1914(&qword_10091B4A8, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1004E1A08();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B4E0);
  }
  return result;
}

unint64_t sub_1004E1A08()
{
  unint64_t result = qword_10091B4E8;
  if (!qword_10091B4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B4E8);
  }
  return result;
}

uint64_t sub_1004E1A5C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_10091B488);
    sub_1004E1914(a2, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RDSavedReminders.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    void *result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004E1BBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedReminders.CodingKeys()
{
  return &type metadata for RDSavedReminders.CodingKeys;
}

unint64_t sub_1004E1BF8()
{
  unint64_t result = qword_10091B4F8;
  if (!qword_10091B4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B4F8);
  }
  return result;
}

unint64_t sub_1004E1C50()
{
  unint64_t result = qword_10091B500;
  if (!qword_10091B500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B500);
  }
  return result;
}

unint64_t sub_1004E1CA8()
{
  unint64_t result = qword_10091B508;
  if (!qword_10091B508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B508);
  }
  return result;
}

uint64_t sub_1004E1CFC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091B510);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091B510);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1004E1DC4()
{
  uint64_t v0 = _s10PredicatesOMa_1();
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v3 = sub_100535B3C();
  uint64_t result = sub_1003DC140((uint64_t)v2, (uint64_t (*)(void))_s10PredicatesOMa_1);
  qword_1009422D0 = v3;
  return result;
}

void sub_1004E1E68()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)&double v4 = __chkstk_darwin(v2).n128_u64[0];
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)objc_msgSend(v1, "type", v4) > 1)
  {
    if (qword_1009076C8 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_10008E2DC(v2, (uint64_t)qword_10091B510);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_10052ECB8((uint64_t)"unknown type", 12, 2);
    __break(1u);
  }
  else
  {
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    swift_getKeyPath();
    [v1 ascending];
    NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  }
}

void *sub_1004E2018(uint64_t a1)
{
  uint64_t v101 = a1;
  uint64_t v100 = type metadata accessor for Logger();
  uint64_t v102 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  Class v99 = (char *)&v83 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v103 = (char *)&v83 - v4;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v83 - v6;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = (void *)static os_signpost_type_t.begin.getter();
  uint64_t v13 = self;
  id v14 = [v13 database];
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  unint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v16 = v9 + 8;
  uint64_t v15 = v17;
  v17(v11, v8);
  sub_1004E3DCC();
  if (v1) {
    return v12;
  }
  uint64_t v19 = v18;
  uint64_t v97 = v7;
  uint64_t v98 = (uint64_t)v13;
  uint64_t v94 = v8;
  uint64_t v95 = v11;
  uint64_t v20 = v102;
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  unint64_t v21 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v84 = v15;
  uint64_t v85 = v16;
  id v93 = v19;
  if (qword_1009076C8 != -1) {
    goto LABEL_52;
  }
  while (1)
  {
    uint64_t v22 = sub_10008E2DC(v100, (uint64_t)qword_10091B510);
    unint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    uint64_t v24 = v97;
    uint64_t v90 = v22;
    uint64_t v91 = v20 + 16;
    uint64_t v89 = v23;
    uint64_t v25 = ((uint64_t (*)(void *))v23)(v97);
    unint64_t v26 = v21;
    id v104 = (void *)v21;
    __chkstk_darwin(v25);
    *(&v83 - 2) = v24;
    uint64_t v27 = sub_100094134(&qword_100910160);
    uint64_t v28 = sub_1000963CC(0, (unint64_t *)&unk_100914440);
    uint64_t v29 = sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
    uint64_t v87 = v27;
    uint64_t v88 = v28;
    uint64_t v86 = v29;
    unint64_t v96 = Sequence.map<A>(skippingError:_:)();
    uint64_t v30 = (uint64_t)v103;
    uint64_t v92 = *(void (**)(char *, uint64_t))(v20 + 8);
    uint64_t v102 = v20 + 8;
    v92((char *)v97, v100);
    unint64_t v31 = (void *)(v21 >> 62);
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v20) {
      break;
    }
    uint64_t v97 = (void *)(v21 >> 62);
    uint64_t v106 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v20 < 0)
    {
      __break(1u);
      goto LABEL_55;
    }
    uint64_t v32 = 0;
    while (v20 != v32)
    {
      if ((v26 & 0xC000000000000001) != 0) {
        id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v33 = *(id *)(v21 + 8 * v32 + 32);
      }
      unint64_t v34 = v33;
      id v35 = [v33 account:v83];
      if (!v35)
      {
        unint64_t v50 = self;
        id v104 = 0;
        unint64_t v105 = 0xE000000000000000;
        _StringGuts.grow(_:)(32);
        swift_bridgeObjectRelease();
        id v104 = (void *)0xD00000000000001DLL;
        unint64_t v105 = 0x80000001007D6EB0;
        id v51 = [v34 description];
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v54 = v53;

        v55._countAndFlagsBits = v52;
        v55._object = v54;
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
        v56._countAndFlagsBits = 125;
        v56._object = (void *)0xE100000000000000;
        String.append(_:)(v56);
        NSString v57 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v50 internalErrorWithDebugDescription:v57];

        swift_willThrow();
LABEL_35:
        char v12 = v106;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        return v12;
      }
      id v104 = 0;
      id v36 = v35;
      id v37 = [v36 remObjectIDWithError:&v104];
      if (!v37)
      {
        unint64_t v58 = v104;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        goto LABEL_35;
      }
      uint64_t v38 = v37;
      uint64_t v39 = v104;
      sub_100694DC0(v38);
      ++v32;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v30 = (uint64_t)v103;
      unint64_t v21 = v26;
      if (v20 == v32)
      {
        uint64_t v40 = v106;
        unint64_t v31 = v97;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    swift_once();
  }
  uint64_t v40 = _swiftEmptyArrayStorage;
LABEL_17:
  id v104 = _swiftEmptyArrayStorage;
  uint64_t v20 = v98;
  uint64_t v83 = v40;
  if (!v31)
  {
    uint64_t v41 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v41) {
      goto LABEL_32;
    }
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
  if (v41)
  {
LABEL_19:
    uint64_t v97 = (void *)(v21 & 0xC000000000000001);
    uint64_t v42 = 4;
    while (1)
    {
      id v43 = v97 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v21 + 8 * v42);
      unint64_t v21 = (unint64_t)v43;
      uint64_t v44 = v42 - 3;
      if (__OFADD__(v42 - 4, 1)) {
        goto LABEL_51;
      }
      id v45 = [v43 parentList:v83];
      if (v45)
      {
        uint64_t v106 = 0;
        id v46 = v45;
        id v47 = [v46 remObjectIDWithError:&v106];
        if (!v47)
        {
          uint64_t v62 = v106;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease();

          char v12 = v104;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          return v12;
        }
        unint64_t v48 = v47;
        uint64_t v49 = v106;
        sub_100694D98(v48);

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v104[2] >= v104[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v20 = v98;
      }
      else
      {
      }
      ++v42;
      unint64_t v21 = v26;
      if (v44 == v41)
      {
        swift_bridgeObjectRelease();
        uint64_t v30 = (uint64_t)v103;
        uint64_t v97 = v104;
        goto LABEL_37;
      }
    }
  }
LABEL_32:
  swift_bridgeObjectRelease();
  uint64_t v97 = _swiftEmptyArrayStorage;
LABEL_37:
  swift_bridgeObjectRelease();
  unint64_t v59 = sub_10069758C((uint64_t)v83, 0, 1, 0, 0);
  swift_bridgeObjectRelease();
  uint64_t v60 = v89(v30, v90, v100);
  id v104 = v59;
  __chkstk_darwin(v60);
  *(&v83 - 2) = (void *)v30;
  sub_100094134(&qword_100910070);
  uint64_t v61 = sub_1000963CC(0, &qword_100910180);
  sub_1000BFEAC((unint64_t *)&qword_1009133E0, &qword_100910070);
  uint64_t v63 = Sequence.map<A>(skippingError:_:)();
  uint64_t v64 = v100;
  v92(v103, v100);
  swift_bridgeObjectRelease();
  unint64_t v66 = sub_10069705C((uint64_t)v97, 0, 1, 0, 0);
  uint64_t v101 = v63;
  id v103 = (char *)v61;
  swift_bridgeObjectRelease();
  uint64_t v67 = (uint64_t)v99;
  uint64_t v68 = v89((uint64_t)v99, v90, v64);
  id v104 = v66;
  __chkstk_darwin(v68);
  *(&v83 - 2) = (void *)v67;
  uint64_t v97 = (void *)Sequence.map<A>(skippingError:_:)();
  v92((char *)v67, v64);
  swift_bridgeObjectRelease();
  uint64_t v69 = (id *)v96;
  if (!(v96 >> 62))
  {
    uint64_t v70 = *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_42;
  }
LABEL_55:
  swift_bridgeObjectRetain();
  uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v69 = (id *)v96;
LABEL_42:
  uint64_t v71 = v95;
  if (v70)
  {
    id v104 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v70 < 0) {
      __break(1u);
    }
    uint64_t v72 = 0;
    uint64_t v69 = (id *)v96;
    unint64_t v73 = v96 & 0xC000000000000001;
    do
    {
      if (v73) {
        id v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v74 = v69[v72 + 4];
      }
      uint64_t v75 = v74;
      ++v72;
      id v76 = [v74 objectID:v83];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v20 = v98;
      uint64_t v69 = (id *)v96;
    }
    while (v70 != v72);
  }
  id v104 = v69;
  sub_100201C64((unint64_t)v97);
  id v77 = objc_allocWithZone((Class)REMFetchResult);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v79 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1000963CC(0, &qword_1009100F8);
  Class v80 = Array._bridgeToObjectiveC()().super.isa;
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  Class v81 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  char v12 = [v77 initWithAccountStorages:isa listStorages:v79 reminderStorages:v80 requestedObjectIDs:v81 metadata:0];

  static os_signpost_type_t.end.getter();
  id v82 = [(id)v20 database];
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  v84(v71, v94);
  return v12;
}

id sub_1004E2E14(void (*a1)(char *, uint64_t))
{
  uint64_t v32 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v31 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  uint64_t v9 = self;
  id v10 = [v9 database];
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v11 = v6 + 8;
  char v12 = v13;
  v13(v8, v5);
  uint64_t v14 = v33;
  sub_1004E3DCC();
  if (!v14)
  {
    uint64_t v16 = v15;
    uint64_t v29 = v11;
    uint64_t v30 = v4;
    uint64_t v33 = v2;
    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    uint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
    id v28 = v16;
    uint64_t v32 = v12;
    if (qword_1009076C8 != -1) {
      swift_once();
    }
    uint64_t v19 = v33;
    uint64_t v20 = sub_10008E2DC(v33, (uint64_t)qword_10091B510);
    unint64_t v21 = v30;
    uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v20, v19);
    v27[0] = v27;
    v27[1] = v18;
    uint64_t v34 = v18;
    __chkstk_darwin(v22);
    v27[-2] = v21;
    sub_100094134(&qword_100910160);
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
    Sequence.map<A>(skippingError:_:)();
    uint64_t v23 = v5;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v33);
    swift_bridgeObjectRelease();
    id v24 = objc_allocWithZone((Class)REMFetchResult);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v1 = [v24 initWithListStorages:isa];

    static os_signpost_type_t.end.getter();
    id v26 = [v9 database];
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)();

    v32(v8, v23);
  }
  return v1;
}

void *sub_1004E3264()
{
  id v1 = (void *)type metadata accessor for OSSignpostID();
  uint64_t v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  uint64_t v5 = self;
  id v6 = [v5 database];
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  uint64_t v7 = *(void (**)(char *, void *))(v2 + 8);
  v7(v4, v1);
  sub_1004E3DCC();
  if (!v0)
  {
    uint64_t v9 = v8;
    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    uint64_t v11 = NSManagedObjectContext.count<A>(for:)();
    static os_signpost_type_t.end.getter();
    id v12 = [v5 database];
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)();

    v7(v4, v1);
    id v1 = [objc_allocWithZone((Class)REMFetchResult) initWithCount:v11];
  }
  return v1;
}

id sub_1004E348C(void *a1)
{
  uint64_t v75 = a1;
  uint64_t v2 = _s10PredicatesOMa(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  uint64_t v9 = self;
  id v10 = [v9 database];
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  id v11 = (id)(v6 + 8);
  id v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  uint64_t v13 = v76;
  sub_1004E3DCC();
  if (!v13)
  {
    uint64_t v15 = v14;
    uint64_t v73 = v2;
    uint64_t v69 = v9;
    uint64_t v70 = v4;
    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    unint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
    uint64_t v76 = 0;
    uint64_t v18 = v16;
    uint64_t v78 = (uint64_t)_swiftEmptyDictionarySingleton;
    if (v16 >> 62) {
      goto LABEL_35;
    }
    for (uint64_t i = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = v61)
    {
      uint64_t v20 = v69;
      unint64_t v21 = &selRef_ckServerChangeTokens;
      uint64_t v65 = v5;
      uint64_t v63 = v12;
      id v66 = v15;
      id v64 = v11;
      if (!i) {
        break;
      }
      unint64_t v72 = v18 & 0xC000000000000001;
      uint64_t v5 = 4;
      long long v68 = xmmword_100776E60;
      uint64_t v15 = v70;
      uint64_t v71 = v18;
      uint64_t v67 = v8;
      while (1)
      {
        uint64_t v23 = i;
        id v11 = (id)(v5 - 4);
        id v24 = v72 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v18 + 8 * v5);
        uint64_t v18 = (uint64_t)v24;
        uint64_t v25 = v5 - 3;
        if (__OFADD__(v11, 1)) {
          break;
        }
        id v26 = [v24 remObjectID];
        if (v26)
        {
          uint64_t v27 = v26;
          uint64_t KeyPath = swift_getKeyPath();
          id v29 = (id)v18;
          uint64_t v30 = (void *)sub_10032E028(KeyPath, (void *)v18);
          swift_release();
          id v74 = v29;

          sub_100094134(&qword_10090C688);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = v68;
          if (qword_100906F20 != -1) {
            swift_once();
          }
          uint64_t v32 = (void *)qword_100941FD8;
          *(void *)(inited + 32) = qword_100941FD8;
          uint64_t v33 = qword_100906F28;
          id v34 = v32;
          if (v33 != -1) {
            swift_once();
          }
          id v35 = (void *)qword_100941FE0;
          *(void *)(inited + 40) = qword_100941FE0;
          *(void *)(inited + 48) = v30;
          uint64_t v77 = inited;
          specialized Array._endMutation()();
          uint64_t v36 = v77;
          id v37 = v30;
          id v38 = v35;
          uint64_t v39 = (void *)sub_1002F52FC(v36);
          sub_1000963CC(0, (unint64_t *)&qword_10090B040);
          id v11 = [objc_allocWithZone((Class)NSFetchRequest) init];
          id v40 = [(id)swift_getObjCClassFromMetadata() entity];
          [v11 setEntity:v40];

          [v11 setAffectedStores:0];
          [v11 setPredicate:v39];

          id v1 = v75;
          uint64_t v41 = v76;
          uint64_t v42 = NSManagedObjectContext.count<A>(for:)();
          uint64_t v76 = v41;
          if (v41)
          {
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            return v1;
          }
          uint64_t v43 = v42;
          id v44 = objc_allocWithZone((Class)NSNumber);
          id v12 = v27;
          id v45 = (char *)[v44 initWithInteger:v43];
          if (v45)
          {
            uint64_t v8 = v45;
            uint64_t v18 = v78;
            uint64_t v15 = v70;
            if ((v78 & 0xC000000000000001) != 0)
            {
              if (v78 >= 0) {
                uint64_t v18 = v78 & 0xFFFFFFFFFFFFFF8;
              }
              uint64_t v46 = __CocoaDictionary.count.getter();
              if (__OFADD__(v46, 1)) {
                goto LABEL_34;
              }
              uint64_t v18 = sub_1001A8A84(v18, v46 + 1);
            }
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v77 = v18;
            sub_1002C6BA8((uint64_t)v8, v12, isUniquelyReferenced_nonNull_native);
            uint64_t v78 = v77;

            swift_bridgeObjectRelease();
            uint64_t v8 = v67;
            uint64_t v20 = v69;
          }
          else
          {
            unint64_t v48 = (void *)sub_10030CCF8(v12);

            uint64_t v8 = v67;
            uint64_t v20 = v69;
            uint64_t v15 = v70;
          }
        }
        else
        {
        }
        ++v5;
        uint64_t i = v23;
        BOOL v22 = v25 == v23;
        unint64_t v21 = &selRef_ckServerChangeTokens;
        uint64_t v18 = v71;
        if (v22) {
          goto LABEL_29;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = v70;
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v49 = enum case for REMRemindersListDataView.ShowCompleted.off(_:);
    uint64_t v50 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 104))(v15, v49, v50);
    swift_storeEnumTagMultiPayload();
    id v51 = (void *)sub_10038F1F0();
    sub_1003DC140((uint64_t)v15, _s10PredicatesOMa);
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    id v52 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v53 = [(id)swift_getObjCClassFromMetadata() entity];
    [v52 setEntity:v53];

    [v52 setAffectedStores:0];
    [v52 setPredicate:v51];

    uint64_t v54 = v76;
    uint64_t v55 = NSManagedObjectContext.count<A>(for:)();
    if (v54)
    {
      id v1 = (id)v78;

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v56 = v55;
      static os_signpost_type_t.end.getter();
      id v57 = [v20 v21[108]];
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();

      v63(v8, v65);
      id v58 = objc_allocWithZone((Class)REMListFetchMetadata);
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      sub_1001207D4();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v60 = [v58 initWithIncompleteReminderCounts:isa scheduledCount:v56];

      id v1 = [objc_allocWithZone((Class)REMFetchResult) initWithMetadata:v60];
    }
  }
  return v1;
}

void *sub_1004E3D18(uint64_t a1)
{
  return sub_1004E2018(a1);
}

id sub_1004E3D3C(void (*a1)(char *, uint64_t))
{
  return sub_1004E2E14(a1);
}

void sub_1004E3D60()
{
}

void *sub_1004E3D84()
{
  return sub_1004E3264();
}

id sub_1004E3DA8(void *a1)
{
  return sub_1004E348C(a1);
}

void sub_1004E3DCC()
{
  uint64_t v2 = (void *)type metadata accessor for Logger();
  uint64_t v3 = (_UNKNOWN **)*(v2 - 1);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v7 = __chkstk_darwin(v6).n128_u64[0];
  uint64_t v9 = (char *)&v33 - v8;
  id v10 = [v0 predicateDescriptor:v7];
  [v0 options];
  if ([v10 type])
  {
LABEL_31:
    if (qword_1009076C8 != -1) {
      swift_once();
    }
    uint64_t v32 = sub_10008E2DC((uint64_t)v2, (uint64_t)qword_10091B510);
    ((void (*)(char *, uint64_t, id))v3[2])(v9, v32, v2);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_10052ECB8((uint64_t)"unknown type", 12, 2);
    __break(1u);
    return;
  }
  id v35 = v5;
  uint64_t v39 = v1;
  if (qword_1009076D0 != -1) {
    goto LABEL_16;
  }
  while (1)
  {
    id v11 = (id)qword_1009422D0;

    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    id v12 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v13 = [(id)swift_getObjCClassFromMetadata() entity];
    [v12 setEntity:v13];

    [v12 setAffectedStores:0];
    id v38 = v11;
    [v12 setPredicate:v11];
    id v14 = [v0 sortDescriptors];
    sub_1000963CC(0, &qword_10091B528);
    unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v15 >> 62) {
      break;
    }
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v16) {
      goto LABEL_18;
    }
LABEL_5:
    unint64_t v41 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v0 = &v41;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v16 < 0)
    {
      __break(1u);
LABEL_28:
      if (qword_1009076C8 != -1) {
        swift_once();
      }
      id v30 = v37;
      uint64_t v31 = sub_10008E2DC((uint64_t)v37, (uint64_t)qword_10091B510);
      ((void (*)(char *, uint64_t, id))v34[2])(v35, v31, v30);
      uint64_t v9 = (char *)_swiftEmptyArrayStorage;
      sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
      sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
      sub_10052ECB8((uint64_t)"unknown type", 12, 2);
      __break(1u);
      goto LABEL_31;
    }
    id v36 = v12;
    id v37 = v2;
    id v34 = v3;
    uint64_t v17 = 0;
    uint64_t v2 = (void *)(v15 & 0xC000000000000001);
    uint64_t v3 = NSSortDescriptor_ptr;
    while (v16 != v17)
    {
      if (v2) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(v15 + 8 * v17 + 32);
      }
      uint64_t v19 = v18;
      if ((unint64_t)[v18 type] > 1) {
        goto LABEL_28;
      }
      ++v17;
      sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
      swift_getKeyPath();
      [v19 ascending];
      NSSortDescriptor.init<A, B>(keyPath:ascending:)();

      uint64_t v0 = &v41;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      id v10 = *(id *)(v41 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v16 == v17)
      {
        uint64_t v20 = (void *)v41;
        swift_bridgeObjectRelease();
        id v12 = v36;
        uint64_t v2 = v37;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_16:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_5;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  uint64_t v20 = _swiftEmptyArrayStorage;
LABEL_19:
  unint64_t v41 = (unint64_t)v20;
  id v21 = [self sortDescriptorSortingByOrderingInAccountAscending:1];
  sub_1004E1E68();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v12 setSortDescriptors:isa];

  if (qword_1009076C8 != -1) {
    swift_once();
  }
  sub_10008E2DC((uint64_t)v2, (uint64_t)qword_10091B510);
  id v23 = v12;
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    id v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    id v37 = v21;
    id v28 = (void *)v27;
    *(_DWORD *)id v26 = 138412290;
    id v40 = v23;
    id v29 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v28 = v23;

    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Created list fetchRequest {fetchRequest: %@}", v26, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1004E4528()
{
  sub_1004E3DCC();
  if (!v0)
  {
    uint64_t v2 = v1;
    v4[3] = sub_100094134(&qword_10091B530);
    v4[0] = v2;
    id v3 = v2;
    throwingCast<A>(_:as:failureMessage:)();

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v4);
  }
}

NSObject *sub_1004E45C4@<X0>(void **a1@<X0>, NSObject **a2@<X8>)
{
  return sub_1000F6584(a1, a2);
}

void *sub_1004E45E0(uint64_t a1)
{
  uint64_t v1 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    int64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v5) {
      goto LABEL_23;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      int64_t v7 = v9 + 1;
      if (v9 + 1 >= v5) {
        goto LABEL_23;
      }
      uint64_t v10 = *(void *)(v1 + 8 * v7);
      if (!v10)
      {
        int64_t v7 = v9 + 2;
        if (v9 + 2 >= v5) {
          goto LABEL_23;
        }
        uint64_t v10 = *(void *)(v1 + 8 * v7);
        if (!v10)
        {
          int64_t v7 = v9 + 3;
          if (v9 + 3 >= v5) {
            goto LABEL_23;
          }
          uint64_t v10 = *(void *)(v1 + 8 * v7);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v4 = (v10 - 1) & v10;
LABEL_5:
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_100201B10(v8);
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_23:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = *(void *)(v1 + 8 * v11);
  if (v10)
  {
    int64_t v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_23;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v7);
    ++v11;
    if (v10) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_1004E4750(id *a1, uint64_t a2, void *a3, uint64_t a4, void **a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v55 = a5;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = *a1;
  uint64_t v53 = a2;
  uint64_t v18 = sub_1002EFDB4(v17, a2);

  id v54 = a3;
  if (v18)
  {
    id v52 = a7;
    id v19 = *(id *)(v18 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID);
  }
  else
  {
    id result = [a3 uncommitedElementsAccountID];
    if (!result) {
      return result;
    }
    id v52 = a7;
    id v19 = result;
    id v21 = v17;
    id v22 = [v17 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v17 = v21;
    type metadata accessor for RDElementManualSortID();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 24) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v18 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID, v16, v13);

    *(void *)(v18 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID) = v19;
  }
  id v23 = v19;
  uint64_t v24 = sub_1002EFF14(v23, a4);

  if (v24)
  {
    if (*(void *)(v18 + 24))
    {
      uint64_t v25 = *(void *)(v18 + 16);
      uint64_t v26 = *(void *)(v18 + 24);
    }
    else
    {
      v27._countAndFlagsBits = UUID.uuidString.getter();
      uint64_t v56 = 0x7C6C61636F6CLL;
      unint64_t v57 = 0xE600000000000000;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      uint64_t v25 = v56;
      uint64_t v26 = v57;
    }
    id v28 = v55;
    id v29 = *v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *id v28 = v29;
    uint64_t v31 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      id v29 = sub_100308F88(0, v29[2] + 1, 1, v29);
      *uint64_t v55 = v29;
    }
    unint64_t v33 = v29[2];
    unint64_t v32 = v29[3];
    if (v33 >= v32 >> 1)
    {
      id v29 = sub_100308F88((void *)(v32 > 1), v33 + 1, 1, v29);
      *uint64_t v55 = v29;
    }
    void v29[2] = v33 + 1;
    id v34 = &v29[2 * v33];
    v34[4] = v25;
    v34[5] = v26;
    if (*(void *)(v24 + 24))
    {
      uint64_t v35 = *(void *)(v24 + 16);
      uint64_t v36 = *(void *)(v24 + 24);
    }
    else
    {
      v37._countAndFlagsBits = UUID.uuidString.getter();
      uint64_t v56 = 0x7C6C61636F6CLL;
      unint64_t v57 = 0xE600000000000000;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      uint64_t v35 = v56;
      uint64_t v36 = v57;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v56 = *a6;
    *a6 = 0x8000000000000000;
    sub_1002C3F10(v35, v36, v25, v26, v38);
    *a6 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v39 = v54;
    id v40 = [v54 secondaryLevelElementIDsByTopLevelElementID];
    sub_1001C1A64();
    sub_100094134(&qword_10090E178);
    sub_1001207D4();
    uint64_t v41 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v41 + 16))
    {
      id v42 = v31;
      unint64_t v43 = sub_100306FE8((uint64_t)v42);
      if (v44)
      {
        unint64_t v45 = *(void *)(*(void *)(v41 + 56) + 8 * v43);
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        uint64_t v46 = v39;
        uint64_t v47 = v53;
        swift_bridgeObjectRetain();
        id v48 = v46;
        uint64_t v49 = sub_1004E5670(_swiftEmptyArrayStorage, v45, v47, v48);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v50 = v52;
        char v51 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v56 = *v50;
        uint64_t *v50 = 0x8000000000000000;
        sub_1002C4A2C((uint64_t)v49, v25, v26, v51);
        uint64_t *v50 = v56;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return (id)swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return (id)swift_release();
}

uint64_t sub_1004E4C58(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  if (a2 >> 62) {
    goto LABEL_32;
  }
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v19 = v6;
    uint64_t v7 = 0;
    unint64_t v22 = v4 + 32;
    unint64_t v23 = v4 & 0xC000000000000001;
    uint64_t v20 = a3;
    unint64_t v21 = v4;
    while (1)
    {
      if (v23)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v9 = __OFADD__(v7++, 1);
        if (v9) {
          break;
        }
        goto LABEL_11;
      }
      id v8 = *(id *)(v22 + 8 * v7);
      BOOL v9 = __OFADD__(v7++, 1);
      if (v9) {
        break;
      }
LABEL_11:
      uint64_t v5 = (uint64_t)v8;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v10 = [a3 secondaryLevelElementIDsByTopLevelElementID];
      sub_1001C1A64();
      sub_100094134(&qword_10090E178);
      sub_1001207D4();
      uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v11 + 16))
      {
        id v12 = (id)v5;
        unint64_t v13 = sub_100306FE8((uint64_t)v12);
        if ((v14 & 1) == 0)
        {

          goto LABEL_5;
        }
        unint64_t v15 = *(void *)(*(void *)(v11 + 56) + 8 * v13);
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        if (v15 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
          if (!v5) {
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v5 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v5) {
            goto LABEL_28;
          }
        }
        if (v5 < 1) {
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v5; ++i)
        {
          if ((v15 & 0xC000000000000001) != 0) {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v17 = *(id *)(v15 + 8 * i + 32);
          }
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
LABEL_28:
        swift_bridgeObjectRelease_n();

        a3 = v20;
        unint64_t v4 = v21;
        uint64_t v6 = v19;
        if (v7 == v19)
        {
LABEL_29:
          swift_bridgeObjectRelease();
          return a1;
        }
      }
      else
      {

LABEL_5:
        swift_bridgeObjectRelease();
        if (v7 == v6) {
          goto LABEL_29;
        }
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1004E4F60(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v66 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v68 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v65 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v71 = (char *)v61 - v11;
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = __CocoaDictionary.makeIterator()();
    unint64_t v63 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v15 = v12 | 0x8000000000000000;
  }
  else
  {
    uint64_t v16 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v13 = ~v16;
    uint64_t v17 = *(void *)(a2 + 64);
    unint64_t v63 = a2 + 64;
    uint64_t v18 = -v16;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    else {
      uint64_t v19 = -1;
    }
    unint64_t v14 = v19 & v17;
    unint64_t v15 = a2;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  v61[1] = v13;
  v61[5] = v15 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v62 = (unint64_t)(v13 + 64) >> 6;
  unint64_t v72 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56);
  uint64_t v69 = (void (**)(char *, uint64_t))(v66 + 32);
  uint64_t v70 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  v61[3] = v66 + 40;
  v61[4] = (char *)&type metadata for Swift.AnyObject + 8;
  unint64_t v67 = v15;
  id v64 = a3;
  if ((v15 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_31:
  if (!__CocoaDictionary.Iterator.next()()) {
    goto LABEL_53;
  }
  uint64_t v32 = v31;
  swift_unknownObjectRelease();
  uint64_t v77 = v32;
  type metadata accessor for RDAccountManualSortID();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v30 = v75;
  swift_unknownObjectRelease();
  uint64_t v25 = v20;
  uint64_t v23 = v14;
  uint64_t v26 = (uint64_t)v71;
  if (!v30) {
    goto LABEL_53;
  }
  while (1)
  {
    unint64_t v73 = v23;
    uint64_t v74 = v25;
    if (*(void *)(v30 + 24))
    {
      uint64_t v33 = *(void *)(v30 + 16);
      uint64_t v34 = *(void *)(v30 + 24);
    }
    else
    {
      v35._countAndFlagsBits = UUID.uuidString.getter();
      uint64_t v75 = 0x7C6C61636F6CLL;
      unint64_t v76 = 0xE600000000000000;
      String.append(_:)(v35);
      uint64_t v26 = (uint64_t)v71;
      swift_bridgeObjectRelease();
      uint64_t v33 = v75;
      uint64_t v34 = v76;
    }
    swift_bridgeObjectRetain();
    id v36 = [a3 modifiedDate];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    Swift::String v37 = *v72;
    (*v72)(v26, 0, 1, v6);
    if ((*v70)(v26, 1, v6) == 1)
    {
      sub_1000966BC(v26, (uint64_t *)&unk_100909A40);
      swift_bridgeObjectRetain();
      unint64_t v38 = sub_1001806F8(v33, v34);
      char v40 = v39;
      swift_bridgeObjectRelease();
      if (v40)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v75 = a1;
        uint64_t v22 = (uint64_t)v65;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10031B214();
          a1 = v75;
        }
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v66 + 32))(v22, *(void *)(a1 + 56) + *(void *)(v66 + 72) * v38, v6);
        sub_1002C2CB4(v38, a1);
        swift_bridgeObjectRelease();
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v21 = 1;
        uint64_t v22 = (uint64_t)v65;
      }
      v37(v22, v21, 1, v6);
      swift_bridgeObjectRelease();
      sub_1000966BC(v22, (uint64_t *)&unk_100909A40);
      swift_release();
      unint64_t v14 = v73;
      uint64_t v20 = v74;
      unint64_t v15 = v67;
      if ((v67 & 0x8000000000000000) != 0) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v42 = v6;
      unint64_t v43 = *v69;
      uint64_t v44 = v42;
      (*v69)(v68, v26);
      uint64_t v45 = a1;
      int v46 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v75 = a1;
      unint64_t v48 = sub_1001806F8(v33, v34);
      uint64_t v49 = *(void *)(v45 + 16);
      BOOL v50 = (v47 & 1) == 0;
      uint64_t v51 = v49 + v50;
      if (__OFADD__(v49, v50))
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      char v52 = v47;
      if (*(void *)(v45 + 24) >= v51)
      {
        if ((v46 & 1) == 0) {
          sub_10031B214();
        }
      }
      else
      {
        sub_100313484(v51, v46);
        unint64_t v53 = sub_1001806F8(v33, v34);
        if ((v52 & 1) != (v54 & 1)) {
          goto LABEL_57;
        }
        unint64_t v48 = v53;
      }
      unint64_t v15 = v67;
      uint64_t v55 = (void *)v75;
      if (v52)
      {
        uint64_t v6 = v44;
        (*(void (**)(unint64_t, char *, uint64_t))(v66 + 40))(*(void *)(v75 + 56) + *(void *)(v66 + 72) * v48, v68, v44);
      }
      else
      {
        *(void *)(v75 + 8 * (v48 >> 6) + 64) |= 1 << v48;
        uint64_t v56 = (uint64_t *)(v55[6] + 16 * v48);
        *uint64_t v56 = v33;
        v56[1] = v34;
        ((void (*)(unint64_t, char *, uint64_t))v43)(v55[7] + *(void *)(v66 + 72) * v48, v68, v44);
        uint64_t v57 = v55[2];
        BOOL v58 = __OFADD__(v57, 1);
        uint64_t v59 = v57 + 1;
        if (v58) {
          goto LABEL_55;
        }
        v55[2] = v59;
        swift_bridgeObjectRetain();
        uint64_t v6 = v44;
      }
      a1 = v75;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = v73;
      uint64_t v20 = v74;
      a3 = v64;
      if ((v15 & 0x8000000000000000) != 0) {
        goto LABEL_31;
      }
    }
LABEL_11:
    if (!v14) {
      break;
    }
    uint64_t v23 = (v14 - 1) & v14;
    unint64_t v24 = __clz(__rbit64(v14)) | (v20 << 6);
    uint64_t v25 = v20;
    uint64_t v26 = (uint64_t)v71;
LABEL_29:
    uint64_t v30 = *(void *)(*(void *)(v15 + 56) + 8 * v24);
    swift_retain();
    if (!v30) {
      goto LABEL_53;
    }
  }
  int64_t v27 = v20 + 1;
  uint64_t v26 = (uint64_t)v71;
  if (__OFADD__(v20, 1)) {
    goto LABEL_56;
  }
  if (v27 >= v62) {
    goto LABEL_53;
  }
  unint64_t v28 = *(void *)(v63 + 8 * v27);
  uint64_t v25 = v20 + 1;
  if (v28) {
    goto LABEL_28;
  }
  uint64_t v25 = v20 + 2;
  if (v20 + 2 >= v62) {
    goto LABEL_53;
  }
  unint64_t v28 = *(void *)(v63 + 8 * v25);
  if (v28) {
    goto LABEL_28;
  }
  uint64_t v25 = v20 + 3;
  if (v20 + 3 >= v62) {
    goto LABEL_53;
  }
  unint64_t v28 = *(void *)(v63 + 8 * v25);
  if (v28) {
    goto LABEL_28;
  }
  uint64_t v25 = v20 + 4;
  if (v20 + 4 >= v62) {
    goto LABEL_53;
  }
  unint64_t v28 = *(void *)(v63 + 8 * v25);
  if (v28) {
    goto LABEL_28;
  }
  uint64_t v25 = v20 + 5;
  if (v20 + 5 >= v62) {
    goto LABEL_53;
  }
  unint64_t v28 = *(void *)(v63 + 8 * v25);
  if (v28)
  {
LABEL_28:
    uint64_t v23 = (v28 - 1) & v28;
    unint64_t v24 = __clz(__rbit64(v28)) + (v25 << 6);
    goto LABEL_29;
  }
  uint64_t v29 = v20 + 6;
  while (v62 != v29)
  {
    unint64_t v28 = *(void *)(v63 + 8 * v29++);
    if (v28)
    {
      uint64_t v25 = v29 - 1;
      goto LABEL_28;
    }
  }
LABEL_53:
  sub_1000C1AF8();
  return a1;
}

void *sub_1004E5670(void *a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  id v38 = a4;
  uint64_t v40 = a3;
  unint64_t v43 = a1;
  uint64_t v36 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  Swift::String v35 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
    {
LABEL_3:
      uint64_t v32 = v5;
      unint64_t v41 = v40 & 0xC000000000000001;
      unint64_t v42 = a2 & 0xC000000000000001;
      uint64_t v10 = v40 & 0xFFFFFFFFFFFFFF8;
      if (v40 < 0) {
        uint64_t v10 = v40;
      }
      uint64_t v37 = v10;
      uint64_t v34 = (void (**)(uint64_t, char *, uint64_t))(v7 + 32);
      uint64_t v11 = 4;
      uint64_t v33 = (char *)&type metadata for Swift.AnyObject + 8;
      unint64_t v39 = a2;
      do
      {
        uint64_t v7 = v11 - 4;
        if (v42) {
          id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v12 = *(id *)(a2 + 8 * v11);
        }
        uint64_t v13 = v12;
        uint64_t v14 = v11 - 3;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
          goto LABEL_32;
        }
        if (v41)
        {
          id v15 = v12;
          uint64_t v16 = __CocoaDictionary.lookup(_:)();
          if (!v16) {
            goto LABEL_21;
          }
          uint64_t v46 = v16;
          type metadata accessor for RDElementManualSortID();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v17 = v44;
          swift_unknownObjectRelease();

          if (v17) {
            goto LABEL_15;
          }
        }
        else
        {
          if (!*(void *)(v40 + 16)) {
            goto LABEL_22;
          }
          unint64_t v20 = sub_100306FE8((uint64_t)v12);
          if ((v21 & 1) == 0)
          {
LABEL_21:

            goto LABEL_22;
          }
          uint64_t v17 = *(void *)(*(void *)(v40 + 56) + 8 * v20);
          swift_retain();

          if (v17)
          {
LABEL_15:
            unint64_t v18 = *(void *)(v17 + 24);
            if (!v18) {
              goto LABEL_24;
            }
            goto LABEL_16;
          }
        }
LABEL_22:
        id v22 = [v38 uncommitedElementsAccountID:v32, v33];
        if (v22)
        {
          id v23 = v22;
          id v24 = [v13 uuid];
          uint64_t v25 = v35;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          type metadata accessor for RDElementManualSortID();
          uint64_t v17 = swift_allocObject();
          *(void *)(v17 + 16) = 0;
          *(void *)(v17 + 24) = 0;
          (*v34)(v17 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID, v25, v36);

          *(void *)(v17 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID) = v23;
          unint64_t v18 = *(void *)(v17 + 24);
          if (!v18)
          {
LABEL_24:
            v26._countAndFlagsBits = UUID.uuidString.getter();
            uint64_t v44 = 0x7C6C61636F6CLL;
            unint64_t v45 = 0xE600000000000000;
            String.append(_:)(v26);
            swift_bridgeObjectRelease();
            uint64_t v5 = v44;
            unint64_t v19 = v45;
            goto LABEL_25;
          }
LABEL_16:
          uint64_t v5 = *(void *)(v17 + 16);
          unint64_t v19 = v18;
LABEL_25:
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v43 = sub_100308F88(0, v43[2] + 1, 1, v43);
          }
          unint64_t v28 = v43[2];
          unint64_t v27 = v43[3];
          if (v28 >= v27 >> 1) {
            unint64_t v43 = sub_100308F88((void *)(v27 > 1), v28 + 1, 1, v43);
          }
          uint64_t v29 = v43;
          v43[2] = v28 + 1;
          uint64_t v30 = &v29[2 * v28];
          uint64_t v30[4] = v5;
          v30[5] = v19;

          swift_release();
          a2 = v39;
          goto LABEL_7;
        }

LABEL_7:
        ++v11;
      }
      while (v14 != v9);
    }
  }
  swift_bridgeObjectRelease();
  return v43;
}

void sub_1004E5A68(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  unint64_t v113 = a2;
  uint64_t v98 = a5;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v107 = *(void *)(v9 - 8);
  uint64_t v108 = v9;
  __chkstk_darwin(v9);
  unint64_t v105 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_100094134(&qword_10091B538);
  __chkstk_darwin(v106);
  id v110 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  os_log_type_t v114 = (uint64_t *)((char *)&v90 - v13);
  __chkstk_darwin(v14);
  uint64_t v109 = (char *)&v90 - v15;
  uint64_t v112 = type metadata accessor for REMManualOrdering.ElementType();
  uint64_t v16 = *(void *)(v112 - 8);
  *(void *)&double v17 = __chkstk_darwin(v112).n128_u64[0];
  unint64_t v19 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = [a1 topLevelElementIDs:v17];
  unint64_t v111 = sub_1001C1A64();
  unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v22 = a1;
  unint64_t v23 = sub_1004E4C58((uint64_t)_swiftEmptyArrayStorage, v21, v22);
  uint64_t v24 = a3;
  swift_bridgeObjectRelease();

  uint64_t v25 = sub_100126B08(v23);
  swift_bridgeObjectRelease();
  REMManualOrdering.elementType.getter();
  unint64_t v26 = sub_1001A33EC(v25);
  if (v5)
  {

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v112);
    return;
  }
  uint64_t v27 = v26;
  uint64_t v96 = v24;
  uint64_t v97 = a4;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v112);
  swift_bridgeObjectRelease();
  uint64_t v118 = _swiftEmptyArrayStorage;
  uint64_t v116 = _swiftEmptyDictionarySingleton;
  uint64_t v117 = _swiftEmptyDictionarySingleton;
  id v28 = [v22 topLevelElementIDs];
  unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v29 >> 62))
  {
    uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v31 = v109;
    if (v30) {
      goto LABEL_5;
    }
LABEL_12:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    unint64_t v35 = sub_1002EF078((uint64_t)_swiftEmptyArrayStorage);
    id v36 = v22;
    uint64_t v37 = sub_1004E4F60(v35, v113, v36);
    uint64_t v93 = 0;
    swift_bridgeObjectRelease();
    id v91 = v36;

    id v38 = v117;
    unint64_t v39 = v116;
    uint64_t v95 = v118;
    swift_bridgeObjectRetain();
    uint64_t v92 = v38;
    swift_bridgeObjectRetain();
    uint64_t v94 = v39;
    swift_bridgeObjectRetain();
    uint64_t v40 = (void *)sub_1002ED110((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v41 = *(void *)(v37 + 64);
    uint64_t v99 = v37 + 64;
    uint64_t v42 = 1 << *(unsigned char *)(v37 + 32);
    uint64_t v43 = -1;
    if (v42 < 64) {
      uint64_t v43 = ~(-1 << v42);
    }
    unint64_t v44 = v43 & v41;
    uint64_t v45 = v107;
    uint64_t v102 = v107 + 32;
    uint64_t v103 = v107 + 16;
    int64_t v100 = (unint64_t)(v42 + 63) >> 6;
    uint64_t v101 = (void (**)(char *, uint64_t))(v107 + 8);
    uint64_t v104 = v37;
    swift_bridgeObjectRetain();
    uint64_t v46 = 0;
    uint64_t v47 = v108;
    unint64_t v48 = v110;
    while (1)
    {
      uint64_t v49 = v106;
      unint64_t v113 = (unint64_t)v40;
      if (v44)
      {
        unint64_t v111 = (v44 - 1) & v44;
        uint64_t v112 = v46;
        unint64_t v50 = __clz(__rbit64(v44)) | (v46 << 6);
      }
      else
      {
        int64_t v51 = v46 + 1;
        if (__OFADD__(v46, 1)) {
          goto LABEL_51;
        }
        char v52 = v97;
        unint64_t v53 = v98;
        if (v51 >= v100)
        {
LABEL_46:
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v84 = swift_bridgeObjectRetain();
          uint64_t v85 = sub_1001261C0(v84);
          uint64_t v86 = v95;
          uint64_t v87 = (uint64_t)v94;
          uint64_t v88 = v93;
          sub_1000F535C(v95, (uint64_t)v94, v85);
          if (v88)
          {

            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v89 = v92;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_release();
            *unint64_t v53 = v86;
            v53[1] = v89;
            v53[2] = v87;
            v53[3] = v40;
            v53[4] = v85;
          }
          return;
        }
        unint64_t v54 = *(void *)(v99 + 8 * v51);
        int64_t v55 = v46 + 1;
        if (!v54)
        {
          int64_t v55 = v46 + 2;
          if (v46 + 2 >= v100) {
            goto LABEL_46;
          }
          unint64_t v54 = *(void *)(v99 + 8 * v55);
          if (!v54)
          {
            int64_t v55 = v46 + 3;
            if (v46 + 3 >= v100) {
              goto LABEL_46;
            }
            unint64_t v54 = *(void *)(v99 + 8 * v55);
            if (!v54)
            {
              int64_t v55 = v46 + 4;
              if (v46 + 4 >= v100) {
                goto LABEL_46;
              }
              unint64_t v54 = *(void *)(v99 + 8 * v55);
              if (!v54)
              {
                uint64_t v56 = v46 + 5;
                if (v46 + 5 >= v100) {
                  goto LABEL_46;
                }
                unint64_t v54 = *(void *)(v99 + 8 * v56);
                if (!v54)
                {
                  while (1)
                  {
                    int64_t v55 = v56 + 1;
                    if (__OFADD__(v56, 1)) {
                      goto LABEL_52;
                    }
                    if (v55 >= v100) {
                      goto LABEL_46;
                    }
                    unint64_t v54 = *(void *)(v99 + 8 * v55);
                    ++v56;
                    if (v54) {
                      goto LABEL_34;
                    }
                  }
                }
                int64_t v55 = v46 + 5;
              }
            }
          }
        }
LABEL_34:
        unint64_t v111 = (v54 - 1) & v54;
        uint64_t v112 = v55;
        unint64_t v50 = __clz(__rbit64(v54)) + (v55 << 6);
        unint64_t v48 = v110;
      }
      uint64_t v57 = (uint64_t *)(*(void *)(v104 + 48) + 16 * v50);
      uint64_t v59 = *v57;
      uint64_t v58 = v57[1];
      id v60 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v60(&v31[*(int *)(v106 + 48)], *(void *)(v104 + 56) + *(void *)(v45 + 72) * v50, v47);
      *(void *)uint64_t v31 = v59;
      *((void *)v31 + 1) = v58;
      uint64_t v61 = (uint64_t)v31;
      int64_t v62 = v114;
      sub_1004E6720(v61, (uint64_t)v114);
      uint64_t v63 = *(int *)(v49 + 48);
      id v64 = &v48[v63];
      uint64_t v65 = *v62;
      uint64_t v66 = v62[1];
      v60(v64, (unint64_t)v62 + v63, v47);
      unint64_t v67 = v105;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v105, v64, v47);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      Date.timeIntervalSinceReferenceDate.getter();
      uint64_t v69 = v68;
      uint64_t v70 = (void *)v113;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v115 = v70;
      unint64_t v73 = sub_1001806F8(v65, v66);
      uint64_t v74 = v70[2];
      BOOL v75 = (v72 & 1) == 0;
      uint64_t v76 = v74 + v75;
      if (__OFADD__(v74, v75))
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      char v77 = v72;
      if (v70[3] >= v76)
      {
        uint64_t v31 = v109;
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v40 = v115;
          if (v72) {
            goto LABEL_15;
          }
        }
        else
        {
          sub_100318398();
          uint64_t v40 = v115;
          if (v77) {
            goto LABEL_15;
          }
        }
      }
      else
      {
        sub_10030D8F0(v76, isUniquelyReferenced_nonNull_native);
        unint64_t v78 = sub_1001806F8(v65, v66);
        uint64_t v31 = v109;
        if ((v77 & 1) != (v79 & 1)) {
          goto LABEL_54;
        }
        unint64_t v73 = v78;
        uint64_t v40 = v115;
        if (v77)
        {
LABEL_15:
          *(void *)(v40[7] + 8 * v73) = v69;
          goto LABEL_16;
        }
      }
      v40[(v73 >> 6) + 8] |= 1 << v73;
      Class v80 = (uint64_t *)(v40[6] + 16 * v73);
      *Class v80 = v65;
      v80[1] = v66;
      *(void *)(v40[7] + 8 * v73) = v69;
      uint64_t v81 = v40[2];
      BOOL v82 = __OFADD__(v81, 1);
      uint64_t v83 = v81 + 1;
      if (v82) {
        goto LABEL_50;
      }
      v40[2] = v83;
      swift_bridgeObjectRetain();
LABEL_16:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v47 = v108;
      (*v101)(v67, v108);
      sub_1000966BC((uint64_t)v114, &qword_10091B538);
      uint64_t v45 = v107;
      unint64_t v48 = v110;
      unint64_t v44 = v111;
      uint64_t v46 = v112;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v31 = v109;
  if (!v30) {
    goto LABEL_12;
  }
LABEL_5:
  if (v30 >= 1)
  {
    uint64_t v32 = 0;
    do
    {
      if ((v29 & 0xC000000000000001) != 0) {
        id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v33 = *(id *)(v29 + 8 * v32 + 32);
      }
      uint64_t v34 = v33;
      ++v32;
      uint64_t v115 = v33;
      sub_1004E4750((id *)&v115, v27, v22, v113, &v118, (uint64_t *)&v116, (uint64_t *)&v117);
    }
    while (v30 != v32);
    goto LABEL_12;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_1004E63C0(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v27 = sub_1004E45E0(v26);
    swift_bridgeObjectRelease();
    id v38 = a2;
    swift_bridgeObjectRetain();
    sub_100201B10((uint64_t)v27);
    goto LABEL_25;
  }
  uint64_t v6 = _swiftEmptyArrayStorage;
  id v38 = _swiftEmptyArrayStorage;
  uint64_t v7 = a2[2];
  if (v7)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v9 = a2 + 5;
    while (1)
    {
      if (*(void *)(a4 + 16))
      {
        uint64_t v11 = *(v9 - 1);
        uint64_t v10 = *v9;
        swift_bridgeObjectRetain_n();
        unint64_t v12 = sub_1001806F8(v11, v10);
        if (v13)
        {
          uint64_t v14 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v12);
          uint64_t v16 = *v14;
          uint64_t v15 = v14[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (v16 == 0x6C61636F6CLL && v15 == 0xE500000000000000)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_5;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v18) {
            goto LABEL_20;
          }
          unint64_t v19 = v38;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v19 = sub_100308F88(0, v38[2] + 1, 1, v38);
          }
          unint64_t v21 = v19[2];
          unint64_t v20 = v19[3];
          if (v21 >= v20 >> 1) {
            unint64_t v19 = sub_100308F88((void *)(v20 > 1), v21 + 1, 1, v19);
          }
          v19[2] = v21 + 1;
          id v22 = &v19[2 * v21];
          v22[4] = v11;
          v22[5] = v10;
          id v38 = v19;
          if (!*(void *)(a3 + 16)) {
            goto LABEL_20;
          }
          swift_bridgeObjectRetain();
          unint64_t v23 = sub_1001806F8(v11, v10);
          if (v24)
          {
            uint64_t v25 = *(void *)(*(void *)(a3 + 56) + 8 * v23);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            sub_100201B10(v25);
LABEL_20:
            swift_bridgeObjectRelease();
            goto LABEL_5;
          }
        }
        swift_bridgeObjectRelease_n();
      }
LABEL_5:
      v9 += 2;
      if (!--v7)
      {
        swift_bridgeObjectRelease_n();
LABEL_25:
        uint64_t v6 = v38;
        break;
      }
    }
  }
  uint64_t v28 = v6[2];
  if (v28)
  {
    unint64_t v29 = v6 + 5;
    do
    {
      uint64_t v31 = *(v29 - 1);
      uint64_t v30 = *v29;
      swift_bridgeObjectRetain();
      v32._countAndFlagsBits = 0x7C6C61636F6CLL;
      v32._object = (void *)0xE600000000000000;
      if (String.hasPrefix(_:)(v32))
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1001DE058(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v34 = _swiftEmptyArrayStorage[2];
        unint64_t v33 = _swiftEmptyArrayStorage[3];
        if (v34 >= v33 >> 1) {
          sub_1001DE058(v33 > 1, v34 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v34 + 1;
        unint64_t v35 = &_swiftEmptyArrayStorage[2 * v34];
        v35[4] = v31;
        v35[5] = v30;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v29 += 2;
      --v28;
    }
    while (v28);
  }
  swift_bridgeObjectRelease();
  uint64_t v36 = sub_10012674C((uint64_t)_swiftEmptyArrayStorage);
  swift_release();
  return v36;
}

uint64_t sub_1004E6720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10091B538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004E6788()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091B540);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091B540);
  if (qword_1009077D8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1004E6850()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 16);
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    swift_once();
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10091B540);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v32 = (uint64_t)v5;
      uint64_t v33 = v13;
      *(_DWORD *)unint64_t v12 = 136446210;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v14 = String.init<A>(describing:)();
      uint64_t v32 = sub_1000C51B8(v14, v15, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error updating significantTimeChageNotification {error: %{public}s}", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_24;
  }
  v34[0] = 0xD00000000000002ELL;
  v34[1] = 0x80000001007D6F30;
  v34[3] = 0;
  v35[0] = 0;
  v34[2] = 0;
  *(void *)((char *)v35 + 6) = 0;
  char v8 = sub_1003BAE20((uint64_t)v34, (uint64_t)sub_1004E6E98, 0);
  int v16 = *(unsigned __int8 *)(v1 + 72);
  if (v8)
  {
    if ((v16 & 1) == 0)
    {
      *(unsigned char *)(v1 + 72) = 1;
      if (qword_1009076D8 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E2DC(v17, (uint64_t)qword_10091B540);
      char v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "ENABLE significantTimeChageNotification XPC event", v20, 2u);
        swift_slowDealloc();
      }

      xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_string(v21, "Notification", "SignificantTimeChangeNotification");
      xpc_set_event();
      swift_unknownObjectRelease();
      return;
    }
    if (qword_1009076D8 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_10091B540);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v10, v23))
    {
LABEL_24:

      return;
    }
    char v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v24 = 0;
    uint64_t v25 = "ENABLE significantTimeChageNotification XPC event. Skipping because values match";
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v10, v23, v25, v24, 2u);
    swift_slowDealloc();
    goto LABEL_24;
  }
  if (v16 != 2 && (v16 & 1) == 0)
  {
    if (qword_1009076D8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_10091B540);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v10, v23)) {
      goto LABEL_24;
    }
    char v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v24 = 0;
    uint64_t v25 = "DISABLE significantTimeChageNotification XPC event. Skipping because values match";
    goto LABEL_23;
  }
  *(unsigned char *)(v1 + 72) = 0;
  if (qword_1009076D8 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_10008E2DC(v27, (uint64_t)qword_10091B540);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "DISABLE significantTimeChageNotification XPC event", v30, 2u);
    swift_slowDealloc();
  }

  xpc_set_event();
}

void sub_1004E6E98(BOOL *a1@<X8>)
{
  uint64_t v3 = _s10PredicatesOMa(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (void *)sub_10038F1F0();
  sub_1000C6DAC((uint64_t)v5);
  id v7 = [objc_allocWithZone((Class)NSFetchRequest) init];
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v8 = [(id)swift_getObjCClassFromMetadata() entity];
  [v7 setEntity:v8];

  [v7 setPredicate:v6];
  [v7 setResultType:1];

  [v7 setFetchLimit:1];
  sub_1000963CC(0, (unint64_t *)&qword_100914150);
  unint64_t v9 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {
  }
  else
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
    }
    *a1 = v10 != 0;
  }
}

uint64_t sub_1004E7088()
{
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 32);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDDynamicSignificantTimeNotificationEngine()
{
  return self;
}

ValueMetadata *type metadata accessor for RDDynamicSignificantTimeNotificationEngine.XPCEventSetter()
{
  return &type metadata for RDDynamicSignificantTimeNotificationEngine.XPCEventSetter;
}

uint64_t sub_1004E7104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1004E711C(a1, a2, a3);
}

uint64_t sub_1004E711C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(a3 + 24))();
  if (v4) {
    return (uint64_t)v3;
  }
  uint64_t v6 = (void *)v5;
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100776E40;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 32) = 0x696669746E656469;
  *(void *)(v7 + 40) = 0xEA00000000007265;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setPropertiesToFetch:isa];

  sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
  uint64_t v9 = NSManagedObjectContext.fetch<A>(_:)();
  v18[3] = sub_100094134(&qword_10090FF00);
  v18[0] = v9;
  sub_100094134(&qword_10091B610);
  throwingCast<A>(_:as:failureMessage:)();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
  unint64_t v11 = v19;
  v18[0] = _swiftEmptyArrayStorage;
  if (!(v19 >> 62))
  {
    uint64_t v12 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_6;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v16 = objc_allocWithZone((Class)REMFetchResult);
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    Class v17 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v3 = [v16 initWithRequestedObjectIDs:v17];

    return (uint64_t)v3;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v12 = result;
  if (!result) {
    goto LABEL_18;
  }
LABEL_6:
  if (v12 >= 1)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if ((v11 & 0xC000000000000001) != 0)
      {
        uint64_t v14 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v14 = *(void **)(v11 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      [v14 remObjectID:v18[0]];
      swift_unknownObjectRelease();
      if (v15)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v18[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

NSString sub_1004E744C(void *a1)
{
  NSString v4 = *v1;
  id v51 = 0;
  id v5 = [a1 remObjectIDWithError:&v51];
  if (!v5)
  {
    id v24 = v51;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v4;
  }
  uint64_t v6 = v5;
  id v7 = v51;
  id v8 = [a1 account];
  if (!v8
    || (v9 = v8, id v10 = [v8 remObjectID], v9, !v10))
  {
    if (qword_1009076E8 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_10091B630);
    id v10 = v6;
    Class v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      unint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      id v51 = v4;
      uint64_t v52 = v48;
      *(_DWORD *)uint64_t v19 = 136315394;
      swift_getMetatypeMetadata();
      uint64_t v21 = String.init<A>(describing:)();
      id v51 = (id)sub_1000C51B8(v21, v22, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2112;
      id v51 = v10;
      id v23 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v20 = v6;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s: cdSmartListSection.account is nil {cdSmartListSection.remObjectID: %@}", (uint8_t *)v19, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v25 = self;
    type metadata accessor for REMCDSmartListSection();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v4 = String._bridgeToObjectiveC()();
    [v25 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v4];

    swift_willThrow();
    goto LABEL_14;
  }
  id v11 = [a1 displayName];
  if (!v11)
  {
    if (qword_1009076E8 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_10091B630);
    id v29 = v6;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v47 = (void *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      id v51 = v4;
      uint64_t v52 = v49;
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_getMetatypeMetadata();
      unint64_t v50 = v6;
      uint64_t v33 = String.init<A>(describing:)();
      id v51 = (id)sub_1000C51B8(v33, v34, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2112;
      id v51 = v29;
      unint64_t v35 = v30;
      id v36 = v29;
      id v37 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v47 = v50;

      id v29 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, v31, "%s: cdSmartListSection.displayName is nil {cdSmartListSection.remObjectID: %@}", (uint8_t *)v32, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v45 = self;
    type metadata accessor for REMCDSmartListSection();
    uint64_t v46 = swift_getObjCClassFromMetadata();
    NSString v4 = String._bridgeToObjectiveC()();
    [v45 unexpectedNilPropertyWithClass:v46 property:v4];

    swift_willThrow();
LABEL_14:

    return v4;
  }
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v4 = v14;

  id v15 = sub_1004E850C(a1, v6, v10, v13);
  if (v2)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    id v38 = v15;
    swift_bridgeObjectRelease();
    id v39 = v38;
    [v39 setMinimumSupportedVersion:[a1 minimumSupportedVersion]];

    id v40 = v39;
    [v40 setEffectiveMinimumSupportedVersion:[a1 effectiveMinimumSupportedVersion]];

    [v40 setResolutionTokenMap:0];
    NSString v4 = v40;
    Class isa = (Class)[a1 resolutionTokenMapData];
    if (isa)
    {
      uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100097F34(v42, v44);
    }
    [v4 setResolutionTokenMapData:isa];
  }
  return v4;
}

uint64_t sub_1004E7BB0(uint64_t a1)
{
  return sub_100156B24(a1, qword_10091B618, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_1004E7BDC(uint64_t a1)
{
  return sub_100156B24(a1, qword_10091B630, &qword_100907840, (uint64_t)qword_100942508);
}

uint64_t sub_1004E7C08()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

unint64_t sub_1004E7CE0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004E8AC0(*a1);
  *a2 = result;
  return result;
}

void sub_1004E7D10(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  unint64_t v3 = 0x44497463656A626FLL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0x80000001007C63B0;
      unint64_t v3 = 0xD000000000000017;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "creationDate");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 3:
      *(void *)a1 = 0x4E79616C70736964;
      *(void *)(a1 + 8) = 0xEB00000000656D61;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void sub_1004E7DC0(void *a1@<X8>)
{
  *a1 = &off_1008B70F0;
}

unint64_t sub_1004E7DD0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004E8AC0(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1004E7DF8()
{
  unint64_t result = 0x44497463656A626FLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0x6E6F697461657263;
      break;
    case 3:
      unint64_t result = 0x4E79616C70736964;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004E7E9C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2CD8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1004E7EFC(void *a1@<X8>)
{
  *a1 = &off_1008B7118;
}

uint64_t sub_1004E7F0C@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2CD8, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void *sub_1004E7F70()
{
  uint64_t result = sub_1004E7F90();
  qword_1009422D8 = (uint64_t)result;
  return result;
}

void *sub_1004E7F90()
{
  unint64_t v5 = 0;
  uint64_t v6 = _swiftEmptyDictionarySingleton;
  char v7 = &off_1008B5000;
  uint64_t v8 = (uint64_t)&off_1008B58C8;
  uint64_t v9 = (uint64_t)"daIsNotificationsCollection";
  do
  {
    if (v5 >= 4)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    unint64_t v4 = v5 + 1;
    uint64_t v0 = 0xE800000000000000;
    uint64_t v1 = 0x44497463656A626FLL;
    switch(*((unsigned char *)&off_1008B58C8 + v5 + 32))
    {
      case 1:
        uint64_t v0 = 0x80000001007C63B0;
        uint64_t v1 = 0xD000000000000017;
        break;
      case 2:
        uint64_t v0 = 0xEC00000065746144;
        uint64_t v1 = 0x6E6F697461657263;
        break;
      case 3:
        uint64_t v0 = 0xEB00000000656D61;
        uint64_t v1 = 0x4E79616C70736964;
        break;
      default:
        break;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v46 = _swiftEmptyDictionarySingleton;
    unint64_t v3 = sub_1001806F8(v1, v0);
    uint64_t v12 = _swiftEmptyDictionarySingleton[2];
    BOOL v13 = (v11 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13)) {
      goto LABEL_29;
    }
    LOBYTE(v2) = v11;
    if (_swiftEmptyDictionarySingleton[3] >= v14)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v11) {
          goto LABEL_2;
        }
      }
      else
      {
        sub_100318A14();
        if (v2) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      sub_10030E654(v14, isUniquelyReferenced_nonNull_native);
      unint64_t v15 = sub_1001806F8(v1, v0);
      if ((v2 & 1) != (v16 & 1)) {
        goto LABEL_50;
      }
      unint64_t v3 = v15;
      if (v2)
      {
LABEL_2:
        uint64_t v2 = _swiftEmptyDictionarySingleton[7] + 16 * v3;
        swift_bridgeObjectRelease();
        *(void *)uint64_t v2 = v1;
        *(void *)(v2 + 8) = v0;
        goto LABEL_3;
      }
    }
    _swiftEmptyDictionarySingleton[(v3 >> 6) + 8] |= 1 << v3;
    Class v17 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v3);
    *Class v17 = v1;
    v17[1] = v0;
    os_log_type_t v18 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v3);
    uint64_t *v18 = v1;
    v18[1] = v0;
    uint64_t v19 = _swiftEmptyDictionarySingleton[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_30;
    }
    _swiftEmptyDictionarySingleton[2] = v21;
    swift_bridgeObjectRetain();
LABEL_3:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v5 = v4;
  }
  while (v4 != 4);
  uint64_t v8 = (uint64_t)&off_1008B5000;
  char v7 = (_UNKNOWN **)0xE900000000000044;
  uint64_t v1 = 0x49746E756F636361;
  uint64_t v0 = 0xE900000000000044;
  uint64_t v9 = 0x746E756F636361;
  unint64_t v4 = 0xE700000000000000;
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v46 = _swiftEmptyDictionarySingleton;
  unint64_t v3 = sub_1001806F8(0x49746E756F636361, 0xE900000000000044);
  uint64_t v24 = _swiftEmptyDictionarySingleton[2];
  BOOL v25 = (v23 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_44;
  }
  LOBYTE(v2) = v23;
  if (_swiftEmptyDictionarySingleton[3] >= v26)
  {
    if (v22)
    {
      if ((v23 & 1) == 0) {
        goto LABEL_32;
      }
      goto LABEL_27;
    }
LABEL_31:
    sub_100318A14();
    uint64_t v6 = v46;
    if ((v2 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_27;
  }
  sub_10030E654(v26, v22);
  unint64_t v27 = sub_1001806F8(0x49746E756F636361, 0xE900000000000044);
  if ((v2 & 1) != (v28 & 1)) {
    goto LABEL_50;
  }
  unint64_t v3 = v27;
  if (v2)
  {
LABEL_27:
    uint64_t v1 = v6[7] + 16 * v3;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v9;
    *(void *)(v1 + 8) = v4;
    goto LABEL_34;
  }
LABEL_32:
  v6[(v3 >> 6) + 8] |= 1 << v3;
  id v29 = (uint64_t *)(v6[6] + 16 * v3);
  *id v29 = v1;
  v29[1] = v0;
  uint64_t v30 = (uint64_t *)(v6[7] + 16 * v3);
  *uint64_t v30 = v9;
  v30[1] = v4;
  uint64_t v31 = v6[2];
  BOOL v20 = __OFADD__(v31, 1);
  uint64_t v32 = v31 + 1;
  if (v20) {
    goto LABEL_49;
  }
  uint64_t v6[2] = v32;
  swift_bridgeObjectRetain();
LABEL_34:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v8 + 2304) < 2uLL)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v1 = 0x4449746E65726170;
  uint64_t v0 = 0xE800000000000000;
  uint64_t v8 = 0x73694C7472616D73;
  v7 += 6;
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v46 = v6;
  unint64_t v3 = sub_1001806F8(0x4449746E65726170, 0xE800000000000000);
  uint64_t v35 = v6[2];
  BOOL v36 = (v34 & 1) == 0;
  uint64_t v37 = v35 + v36;
  if (__OFADD__(v35, v36))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  LOBYTE(v2) = v34;
  if (v6[3] >= v37)
  {
    if (v33)
    {
      if ((v34 & 1) == 0) {
        goto LABEL_46;
      }
      goto LABEL_42;
    }
LABEL_45:
    sub_100318A14();
    uint64_t v6 = v46;
    if ((v2 & 1) == 0) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }
  sub_10030E654(v37, v33);
  unint64_t v38 = sub_1001806F8(0x4449746E65726170, 0xE800000000000000);
  if ((v2 & 1) != (v39 & 1)) {
    goto LABEL_50;
  }
  unint64_t v3 = v38;
  if ((v2 & 1) == 0)
  {
LABEL_46:
    v6[(v3 >> 6) + 8] |= 1 << v3;
    uint64_t v41 = (uint64_t *)(v6[6] + 16 * v3);
    *uint64_t v41 = v1;
    v41[1] = v0;
    uint64_t v42 = (uint64_t *)(v6[7] + 16 * v3);
    *uint64_t v42 = v8;
    v42[1] = (uint64_t)v7;
    uint64_t v43 = v6[2];
    BOOL v20 = __OFADD__(v43, 1);
    uint64_t v44 = v43 + 1;
    if (!v20)
    {
      uint64_t v6[2] = v44;
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x1004E84FCLL);
  }
LABEL_42:
  id v40 = (uint64_t *)(v6[7] + 16 * v3);
  swift_bridgeObjectRelease();
  *id v40 = v8;
  v40[1] = (uint64_t)v7;
LABEL_48:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

id sub_1004E850C(void *a1, id a2, void *a3, uint64_t a4)
{
  uint64_t v44 = a4;
  uint64_t v43 = *v4;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v45 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v12 = __chkstk_darwin(v11 - 8).n128_u64[0];
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [a1 smartList:v12];
  if (v15
    && (v16 = v15, id v17 = [v15 remObjectID], v16, v17))
  {
    uint64_t v43 = v8;
    id v18 = objc_allocWithZone((Class)REMSmartListSectionStorage);
    id v19 = a2;
    id v20 = a3;
    swift_bridgeObjectRetain();
    id v21 = v17;
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = [v18 initWithObjectID:v19 accountID:v20 parentID:v21 displayName:v22];

    a2 = v23;
    id v24 = [a1 creationDate];
    if (v24)
    {
      BOOL v25 = v24;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v26 = v45;
      uint64_t v27 = v43;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v14, v10, v43);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v14, 0, 1, v27);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v14, 1, v27) == 1)
      {
        Class isa = 0;
      }
      else
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v14, 1, 1, v43);
      Class isa = 0;
    }
    [a2 setCreationDate:isa];
  }
  else
  {
    if (qword_1009076E8 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_10091B630);
    id v30 = a2;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      char v34 = (void *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v46 = v45;
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v47 = v43;
      swift_getMetatypeMetadata();
      uint64_t v35 = String.init<A>(describing:)();
      uint64_t v47 = sub_1000C51B8(v35, v36, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2112;
      a2 = (id)(v33 + 14);
      uint64_t v47 = (uint64_t)v30;
      id v37 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v34 = v30;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s: cdSmartListSection.smartList is nil {cdSmartListSection.remObjectID: %@}", (uint8_t *)v33, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    unint64_t v38 = self;
    type metadata accessor for REMCDSmartListSection();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v40 = String._bridgeToObjectiveC()();
    [v38 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v40];

    swift_willThrow();
  }
  return a2;
}

uint64_t type metadata accessor for REMSmartListSectionStorageCDIngestor()
{
  return self;
}

_UNKNOWN **sub_1004E8AA8()
{
  return &off_1008C8258;
}

_UNKNOWN **sub_1004E8AB4()
{
  return &off_1008C8228;
}

unint64_t sub_1004E8AC0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2D28, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

void sub_1004E8B0C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v8 = (void *)*v3;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v74 = (char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v12 - 8);
  uint64_t v76 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v72 - 8);
  *(void *)&double v15 = __chkstk_darwin(v72).n128_u64[0];
  id v17 = (char *)v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v79 = [a2 createResolutionTokenMapIfNecessary:v15];
  id v18 = [a1 resolutionTokenMap];
  if (v18)
  {
    BOOL v75 = v9;
    id v19 = v18;
    id v20 = sub_100480EB8(v18, a3);
    uint64_t v21 = *(void *)(a3 + 16);
    if (v21)
    {
      v68[0] = v19;
      v68[1] = v4;
      unint64_t v73 = (uint64_t *)(v10 + 56);
      uint64_t v70 = (unsigned int (**)(char *, uint64_t, NSObject *))(v10 + 48);
      uint64_t v71 = (void (**)(char *, char *, NSObject *))(v10 + 32);
      uint64_t v69 = (void (**)(char *, NSObject *))(v10 + 8);
      char v77 = (void (**)(char *, uint64_t))(v14 + 8);
      id v78 = v20;
      swift_bridgeObjectRetain();
      uint64_t v22 = 0;
      uint64_t v23 = v72;
      do
      {
        uint64_t v27 = *(unsigned __int8 *)(a3 + v22++ + 32);
        switch(v27)
        {
          case 1:
            sub_10047F060(1);
            NSString v28 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v29 = [v79 mergeWithMap:v78 forKey:v28];

            if (v29) {
              [a2 setMinimumSupportedVersion:[a1 minimumSupportedVersion]];
            }
            break;
          case 2:
            sub_10047F060(2);
            NSString v30 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v31 = [v79 mergeWithMap:v78 forKey:v30];

            if (v31)
            {
              v26.super.Class isa = (Class)[a1 creationDate];
              if (v26.super.isa)
              {
                os_log_type_t v32 = v74;
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v33 = v76;
                char v34 = v32;
                uint64_t v35 = v75;
                (*v71)(v76, v34, v75);
                ((void (*)(char *, void, uint64_t, NSObject *))*v73)(v33, 0, 1, v35);
                if ((*v70)(v33, 1, v35) == 1)
                {
                  v26.super.Class isa = 0;
                }
                else
                {
                  uint64_t v38 = a3;
                  char v39 = a2;
                  NSString v40 = a1;
                  uint64_t v41 = v33;
                  v26.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
                  uint64_t v42 = v41;
                  a1 = v40;
                  a2 = v39;
                  a3 = v38;
                  uint64_t v23 = v72;
                  (*v69)(v42, v35);
                }
              }
              else
              {
                ((void (*)(char *, uint64_t, uint64_t, NSObject *))*v73)(v76, 1, 1, v75);
              }
              [a2 setCreationDate:v26.super.isa];
              goto LABEL_5;
            }
            break;
          case 3:
            sub_10047F060(3);
            NSString v36 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v37 = [v79 mergeWithMap:v78 forKey:v36];

            if (v37)
            {
              v26.super.Class isa = (Class)[a1 displayName];
              if (!v26.super.isa)
              {
                static String._unconditionallyBridgeFromObjectiveC(_:)();
                v26.super.Class isa = (Class)String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
              }
              [a2 setDisplayName:v26.super.isa];
              goto LABEL_5;
            }
            break;
          default:
            id v24 = [a1 objectID];
            id v25 = [v24 uuid];

            static UUID._unconditionallyBridgeFromObjectiveC(_:)();
            v26.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
            (*v77)(v17, v23);
            [a2 setIdentifier:v26.super.isa];
LABEL_5:

            break;
        }
      }
      while (v21 != v22);

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v61 = v20;
    }
  }
  else
  {
    if (qword_1009076E0 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_10008E2DC(v43, (uint64_t)qword_10091B618);
    swift_bridgeObjectRetain_n();
    id v44 = a1;
    uint64_t v45 = Logger.logObject.getter();
    int v46 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v45, (os_log_type_t)v46))
    {
      LODWORD(v77) = v46;
      uint64_t v47 = swift_slowAlloc();
      uint64_t v48 = (char *)swift_slowAlloc();
      id v78 = (id)swift_slowAlloc();
      id v80 = v78;
      *(_DWORD *)uint64_t v47 = 136315650;
      uint64_t v81 = v8;
      swift_getMetatypeMetadata();
      uint64_t v49 = String.init<A>(describing:)();
      uint64_t v81 = (void *)sub_1000C51B8(v49, v50, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 12) = 2114;
      id v51 = [v44 objectID];
      uint64_t v81 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v76 = v48;
      *(void *)uint64_t v48 = v51;

      *(_WORD *)(v47 + 22) = 2082;
      int64_t v52 = *(void *)(a3 + 16);
      if (v52)
      {
        unint64_t v73 = &v82;
        uint64_t v74 = (char *)v47;
        BOOL v75 = v45;
        uint64_t v81 = _swiftEmptyArrayStorage;
        sub_1001DE058(0, v52, 0);
        unint64_t v53 = v81;
        unint64_t v54 = (unsigned __int8 *)(a3 + 32);
        do
        {
          int v55 = *v54++;
          unint64_t v56 = 0xE800000000000000;
          unint64_t v57 = 0x44497463656A626FLL;
          switch(v55)
          {
            case 1:
              unint64_t v57 = 0xD000000000000017;
              unint64_t v56 = 0x80000001007C63B0;
              break;
            case 2:
              unint64_t v56 = 0xEC00000065746144;
              unint64_t v57 = 0x6E6F697461657263;
              break;
            case 3:
              unint64_t v56 = 0xEB00000000656D61;
              unint64_t v57 = 0x4E79616C70736964;
              break;
            default:
              break;
          }
          uint64_t v81 = v53;
          unint64_t v59 = v53[2];
          unint64_t v58 = v53[3];
          if (v59 >= v58 >> 1)
          {
            sub_1001DE058(v58 > 1, v59 + 1, 1);
            unint64_t v53 = v81;
          }
          v53[2] = v59 + 1;
          id v60 = &v53[2 * v59];
          v60[4] = v57;
          v60[5] = v56;
          --v52;
        }
        while (v52);
        uint64_t v47 = (uint64_t)v74;
        uint64_t v45 = v75;
      }
      uint64_t v62 = Array.description.getter();
      unint64_t v64 = v63;
      swift_bridgeObjectRelease();
      uint64_t v81 = (void *)sub_1000C51B8(v62, v64, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v77, "%s: merge(storage:into cdSection:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v47, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v65 = self;
    sub_1004E9E94();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v67 = String._bridgeToObjectiveC()();
    [v65 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v67];

    swift_willThrow();
  }
}

void sub_1004E94C8(id a1, id a2, char a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v11 = *v4;
    id v12 = [a2 createResolutionTokenMapIfNecessary];
    id v13 = [a1 resolutionTokenMap];
    if (v13)
    {
      uint64_t v14 = v13;
      sub_100094134((uint64_t *)&unk_100913CE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      *(unsigned char *)(inited + 32) = 1;
      id v16 = sub_10048176C(v14, inited);
      swift_setDeallocating();
      id v17 = [a1 smartListID];
      sub_10047DD38(1);
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned int v19 = [v12 mergeWithMap:v16 forKey:v18];

      if (v19)
      {
        if (v17)
        {
          id v20 = v17;
          sub_10047B254(1, v20, a4);
          if (v5)
          {

            return;
          }
          id v51 = v21;
        }
        else
        {
          id v51 = 0;
        }
        if (qword_1009076E0 != -1) {
          swift_once();
        }
        uint64_t v52 = type metadata accessor for Logger();
        sub_10008E2DC(v52, (uint64_t)qword_10091B618);
        os_log_t log = v51;
        unint64_t v53 = v51;
        id v54 = a2;
        int v55 = v53;
        id v56 = v54;
        unint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v57, v58))
        {
          os_log_type_t v69 = v58;
          uint64_t v70 = v57;
          uint64_t v68 = v55;
          id v76 = v12;
          uint64_t v59 = swift_slowAlloc();
          uint64_t v78 = swift_slowAlloc();
          *(_DWORD *)uint64_t v59 = 136446466;
          id v60 = v56;
          id v61 = [v56 remObjectID];
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v62 = Optional.descriptionOrNil.getter();
          unint64_t v64 = v63;

          id v77 = (id)sub_1000C51B8(v62, v64, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(void *)os_log_type_t type = v60;
          swift_bridgeObjectRelease();
          *(_WORD *)(v59 + 12) = 2082;
          if (log)
          {
            int v55 = v68;
            id v77 = [v68 remObjectID];
            uint64_t v65 = Optional.descriptionOrNil.getter();
            unint64_t v67 = v66;
          }
          else
          {
            unint64_t v67 = 0xEE003E7473696C74;
            uint64_t v65 = 0x72616D73206F6E3CLL;
            int v55 = v68;
          }
          id v77 = (id)sub_1000C51B8(v65, v67, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v70, v69, "Updating cdSmartListSection.smartList {cdSmartListSection: %{public}s, smartList: %{public}s}", (uint8_t *)v59, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          id v12 = v76;
          id v56 = *(id *)type;
        }
        else
        {
        }
        [v56 setSmartList:v55];
      }
    }
    else
    {
      if (qword_1009076E0 != -1) {
        swift_once();
      }
      BOOL v75 = v12;
      uint64_t v39 = type metadata accessor for Logger();
      sub_10008E2DC(v39, (uint64_t)qword_10091B618);
      id v40 = a1;
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc();
        id v44 = (void *)swift_slowAlloc();
        id v77 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 136315650;
        uint64_t v78 = v11;
        swift_getMetatypeMetadata();
        uint64_t v45 = String.init<A>(describing:)();
        uint64_t v78 = sub_1000C51B8(v45, v46, (uint64_t *)&v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 2114;
        id v47 = [v40 objectID];
        uint64_t v78 = (uint64_t)v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v44 = v47;

        *(_WORD *)(v43 + 22) = 2082;
        uint64_t v78 = sub_1000C51B8(0x4449746E65726170, 0xE800000000000000, (uint64_t *)&v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s: establishRelationship(onStorage:into cdSmartListSection:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v43, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v48 = self;
      sub_1004E9E94();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v50 = String._bridgeToObjectiveC()();
      [v48 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v50];

      swift_willThrow();
    }
  }
  else
  {
    id v9 = [a1 accountID];
    sub_10047B224(0, v9, a4);
    if (v5)
    {
    }
    else
    {
      uint64_t v22 = v10;
      if (qword_1009076E0 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E2DC(v23, (uint64_t)qword_10091B618);
      id v24 = a2;
      id v25 = v22;
      id v26 = v24;
      id v27 = v25;
      NSString v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446466;
        id v31 = [v26 remObjectID];
        sub_100094134((uint64_t *)&unk_100914BC0);
        loga = v28;
        uint64_t v32 = Optional.descriptionOrNil.getter();
        os_log_type_t typea = v29;
        unint64_t v34 = v33;

        sub_1000C51B8(v32, v34, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2082;
        id v35 = [v27 remObjectID];
        uint64_t v36 = Optional.descriptionOrNil.getter();
        unint64_t v38 = v37;

        id v77 = (id)sub_1000C51B8(v36, v38, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, loga, typea, "Updating cdSmartListSection.account {cdSmartListSection: %{public}s, account: %{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v26 setAccount:v27];
    }
  }
}

unint64_t sub_1004E9E94()
{
  unint64_t result = qword_100911180;
  if (!qword_100911180)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100911180);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for REMSmartListSectionStorageCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004E9FA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMSmartListSectionStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMSmartListSectionStorageCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMSmartListSectionStorageCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004EA0A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMSmartListSectionStorageCDIngestor.ValueKey()
{
  return &type metadata for REMSmartListSectionStorageCDIngestor.ValueKey;
}

uint64_t sub_1004EA0DC()
{
  return sub_1000B2138(&qword_10091B7E8, &qword_10091B7F0);
}

unint64_t sub_1004EA108()
{
  unint64_t result = qword_10091B7F8;
  if (!qword_10091B7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B7F8);
  }
  return result;
}

uint64_t sub_1004EA15C()
{
  return sub_1000B2138(&qword_10091B800, &qword_10091B808);
}

unint64_t sub_1004EA188()
{
  unint64_t result = qword_10091B810;
  if (!qword_10091B810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091B810);
  }
  return result;
}

uint64_t sub_1004EA1DC(uint64_t a1)
{
  uint64_t result = sub_1004EAF50(&qword_10091B850, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1004EA234()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091B818);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091B818);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1004EA2FC(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(char *, char *, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v108 = a3;
  uint64_t v101 = a2;
  id v111 = a1;
  uint64_t v94 = a5;
  uint64_t v6 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v6 - 8);
  uint64_t v89 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.FlatModel();
  __chkstk_darwin(v8 - 8);
  uint64_t v88 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.TemplateModel();
  uint64_t v92 = *(void *)(v10 - 8);
  uint64_t v93 = v10;
  __chkstk_darwin(v10);
  id v91 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v99 = (char *)&v85 - v13;
  uint64_t v98 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v90 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v96 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v97 = (char *)&v85 - v16;
  __chkstk_darwin(v17);
  uint64_t v95 = (char *)&v85 - v18;
  __chkstk_darwin(v19);
  uint64_t v102 = (char *)&v85 - v20;
  uint64_t v21 = sub_100094134(&qword_100909C60);
  __chkstk_darwin(v21 - 8);
  uint64_t v87 = (uint64_t)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  id v25 = (char *)&v85 - v24;
  uint64_t v26 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v26 - 8);
  unint64_t v105 = (void (*)(char *, uint64_t))((char *)&v85 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v104 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v104);
  os_log_type_t v29 = (char *)&v85 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v106 = (char *)&v85 - v31;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v103 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  id v110 = (char *)&v85 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration();
  uint64_t v35 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  unint64_t v37 = (char *)&v85 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  id v40 = (char *)&v85 - v39;
  uint64_t v107 = a4;
  uint64_t v41 = (void *)REMRemindersListDataView.TemplateSectionsInvocation.Parameters.templateObjectID.getter();
  id v42 = v109;
  sub_1001EF564(v41, (uint64_t)v111, v108);
  if (v42)
  {
  }
  else
  {
    uint64_t v86 = Subtasks;
    id v109 = v43;
    uint64_t v85 = v25;
    uint64_t v108 = 0;
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.configuration.getter();
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration.fetchSubtasks.getter();
    id v44 = *(void (**)(char *, uint64_t))(v35 + 8);
    v44(v40, Configuration);
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.configuration.getter();
    uint64_t v45 = (uint64_t)v105;
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration.sortingStyle.getter();
    v44(v37, Configuration);
    uint64_t v46 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
    uint64_t v47 = type metadata accessor for REMRemindersListDataView.SortingDirection();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104))(v29, v46, v47);
    swift_storeEnumTagMultiPayload();
    uint64_t v48 = v106;
    sub_100520FD4(v45, (uint64_t)v29, (uint64_t)v106);
    id v49 = v111;
    uint64_t v50 = v108;
    id v51 = sub_1001F62F0((unint64_t)v41, (uint64_t)v111, (uint64_t)v110, v48);
    if (v50)
    {

      sub_1001F8364((uint64_t)v48);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v110, v86);
    }
    else
    {
      uint64_t v52 = v51;
      sub_1001F8364((uint64_t)v48);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v110, v86);
      unint64_t v53 = (char *)[v109 accountID];
      type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation();
      uint64_t v54 = (uint64_t)v85;
      sub_1001EF8DC(v49, v53, (uint64_t)v85);
      id v55 = [v100 fetchResultTokenToDiffAgainst];
      id v56 = v102;
      sub_1001EFB7C(v55);
      id v110 = v53;
      id v111 = v41;
      uint64_t v108 = 0;

      uint64_t v57 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v89, 1, 1, v57);
      id v58 = v109;
      swift_bridgeObjectRetain();
      REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
      sub_1004EAEE8(v54, v87);
      id v109 = v58;
      REMRemindersListDataView.TemplateModel.init(listRepresentationOfTemplate:model:manualOrderingID:)();
      uint64_t v59 = v52;
      if (qword_1009076F8 != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      sub_10008E2DC(v60, (uint64_t)qword_10091B818);
      uint64_t v61 = v90;
      uint64_t v62 = v90 + 16;
      unint64_t v63 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
      unint64_t v64 = v95;
      uint64_t v65 = v56;
      uint64_t v66 = v98;
      v63(v95, v56, v98);
      unint64_t v67 = v97;
      uint64_t v107 = v63;
      uint64_t v104 = v62;
      v63(v97, v65, v66);
      swift_bridgeObjectRetain();
      uint64_t v68 = Logger.logObject.getter();
      LODWORD(v106) = static os_log_type_t.default.getter();
      BOOL v69 = os_log_type_enabled(v68, (os_log_type_t)v106);
      uint64_t v70 = v96;
      uint64_t v71 = v59;
      if (v69)
      {
        uint64_t v72 = swift_slowAlloc();
        *(_DWORD *)uint64_t v72 = 134218496;
        uint64_t v73 = *((void *)v71 + 2);
        swift_bridgeObjectRelease();
        uint64_t v112 = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v72 + 12) = 2048;
        uint64_t v74 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter();
        if ((v74 & 0xC000000000000001) != 0) {
          uint64_t v75 = __CocoaSet.count.getter();
        }
        else {
          uint64_t v75 = *(void *)(v74 + 16);
        }
        os_log_type_t v80 = v106;
        swift_bridgeObjectRelease();
        uint64_t v81 = *(void (**)(char *, uint64_t))(v61 + 8);
        v81(v95, v98);
        uint64_t v112 = v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v72 + 22) = 2048;
        uint64_t v82 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter();
        uint64_t v106 = (char *)((v61 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        if ((v82 & 0xC000000000000001) != 0) {
          uint64_t v83 = __CocoaSet.count.getter();
        }
        else {
          uint64_t v83 = *(void *)(v82 + 16);
        }
        swift_bridgeObjectRelease();
        uint64_t v66 = v98;
        v81(v97, v98);
        uint64_t v112 = v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v68, v80, "REMRemindersListDataView.TemplateInvocation: reminders %ld updated %ld inserted %ld", (uint8_t *)v72, 0x20u);
        swift_slowDealloc();

        uint64_t v79 = v92;
        uint64_t v78 = v93;
        id v77 = v99;
        unint64_t v105 = v81;
        uint64_t v70 = v96;
      }
      else
      {
        id v76 = *(void (**)(char *, uint64_t))(v61 + 8);
        id v77 = v99;
        uint64_t v106 = (char *)((v61 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        v76(v67, v66);
        unint64_t v105 = v76;
        v76(v64, v66);

        swift_bridgeObjectRelease_n();
        uint64_t v79 = v92;
        uint64_t v78 = v93;
      }
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v91, v77, v78);
      uint64_t v84 = v102;
      v107(v70, v102, v66);
      sub_1004EAF50(&qword_10091B858, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateModel);
      sub_1004EAF50(&qword_10091B860, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateModel);
      REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();

      (*(void (**)(char *, uint64_t))(v79 + 8))(v77, v78);
      v105(v84, v66);
      sub_1004EAE88((uint64_t)v85);
    }
  }
}

uint64_t sub_1004EAE88(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100909C60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004EAEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100909C60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004EAF50(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004EAF98()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091B868);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091B868);
  if (qword_100907838 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424F0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1004EB060(void *a1)
{
  int v3 = (char *)type metadata accessor for UUID();
  uint64_t v72 = *((void *)v3 - 1);
  uint64_t v73 = v3;
  __chkstk_darwin(v3);
  uint64_t v75 = (void (*)(char *, uint64_t, uint64_t, id))((char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  id v76 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (void (**)(char *, char *, char *))((char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v13 = (void (**)(void (*)(char *, uint64_t, uint64_t, id), char *))((char *)&v63 - v12);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v63 - v15;
  Date.init()();
  uint64_t v18 = a1;
  uint64_t v19 = sub_1004EF8A4(a1);
  if (v1)
  {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v7);
  }
  else
  {
    uint64_t v70 = v10;
    uint64_t v71 = v13;
    uint64_t v21 = v8;
    uint64_t v68 = v19;
    uint64_t v74 = v18;
    uint64_t v77 = 0;
    if (qword_100907700 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_10091B868);
    uint64_t v23 = *(void (**)(void, void, void))(v8 + 16);
    uint64_t v24 = v71;
    id v25 = v16;
    v23(v71, v16, v7);
    uint64_t v26 = v68;
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    int v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = v24;
      LODWORD(v66) = v29;
      uint64_t v32 = v30;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v69 = v33;
      *(_DWORD *)uint64_t v32 = 136315906;
      unint64_t v64 = v32 + 4;
      uint64_t v78 = &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
      uint64_t v79 = v33;
      sub_100094134((uint64_t *)&unk_10091B920);
      uint64_t v34 = String.init<A>(describing:)();
      os_log_t v65 = v27;
      uint64_t v78 = (ValueMetadata *)sub_1000C51B8(v34, v35, &v79);
      unint64_t v67 = &v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v78 = (ValueMetadata *)sub_1000C51B8(0xD000000000000023, 0x80000001007D7250, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 22) = 2050;
      uint64_t v36 = *(ValueMetadata **)(v26 + 16);
      swift_bridgeObjectRelease();
      uint64_t v78 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 32) = 2048;
      unint64_t v64 = v32 + 34;
      unint64_t v37 = v70;
      Date.init()();
      uint64_t v38 = v25;
      uint64_t v39 = (void (**)(void (*)(char *, uint64_t, uint64_t, id), void))v31;
      Date.timeIntervalSince(_:)();
      uint64_t v41 = v40;
      Class isa = (uint64_t *)v21[1].isa;
      ((void (*)(void (**)(char *, char *, char *), uint64_t))isa)(v37, v7);
      uint64_t v78 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v43 = v39;
      id v25 = v38;
      unint64_t v67 = isa;
      ((void (*)(void, uint64_t))isa)(v43, v7);
      os_log_t v44 = v65;
      _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v66, "[%s|%s] Did fetch identifier of all REMCDList {listIdentifiers.count: %{public}ld, cumulative elapsedSeconds: %f}", (uint8_t *)v32, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      unint64_t v67 = (uint64_t *)v21[1].isa;
      ((void (*)(void, uint64_t))v67)(v24, v7);
    }
    uint64_t v45 = v73;
    uint64_t v79 = 0;
    uint64_t v46 = *(void *)(v26 + 16);
    if (v46)
    {
      os_log_t v65 = v21;
      uint64_t v66 = v7;
      uint64_t v47 = v72 + 16;
      uint64_t v72 = *(void *)(v72 + 16);
      uint64_t v73 = v25;
      unint64_t v48 = v26 + ((*(unsigned __int8 *)(v47 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 64));
      id v49 = (void (**)(char *, void, uint64_t, char *))(v47 + 40);
      uint64_t v50 = (unsigned int (**)(char *, uint64_t, char *))(v47 + 32);
      uint64_t v69 = *(void *)(v47 + 56);
      uint64_t v70 = (void (**)(char *, char *, char *))(v47 + 16);
      uint64_t v71 = (void (**)(void (*)(char *, uint64_t, uint64_t, id), char *))(v47 - 8);
      unint64_t v64 = (v47 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      while (1)
      {
        id v51 = v76;
        ((void (*)(char *, unint64_t, char *))v72)(v76, v48, v45);
        uint64_t v52 = (void (*)(void, void, void, void))*v49;
        (*v49)(v51, 0, 1, v45);
        if ((*v50)(v51, 1, v45) == 1)
        {
          uint64_t v7 = v66;
          id v25 = v73;
          uint64_t v59 = v74;
          goto LABEL_17;
        }
        uint64_t v53 = v47;
        uint64_t v54 = v51;
        id v55 = v75;
        (*v70)((char *)v75, v54, v45);
        id v56 = v45;
        uint64_t v58 = v77;
        sub_1004EB808(v55, v74, v73, &v79);
        uint64_t v77 = v58;
        if (v58) {
          break;
        }
        (*v71)(v55, v56);
        v48 += v69;
        --v46;
        uint64_t v45 = v56;
        uint64_t v47 = v53;
        if (!v46)
        {
          uint64_t v7 = v66;
          id v25 = v73;
          uint64_t v59 = v74;
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v67)(v73, v66);
      return ((uint64_t (*)(void (*)(char *, uint64_t, uint64_t, id), char *))*v71)(v55, v56);
    }
    else
    {
      uint64_t v52 = *(void (**)(void, void, void, void))(v72 + 56);
      uint64_t v59 = v74;
LABEL_15:
      v52(v76, 1, 1, v45);
LABEL_17:
      uint64_t v60 = v67;
      swift_bridgeObjectRelease();
      if ([v59 hasChanges])
      {
        uint64_t v78 = 0;
        if ([v59 save:&v78])
        {
          uint64_t v61 = v78;
          [v59 refreshAllObjects];
        }
        else
        {
          uint64_t v62 = v78;
          _convertNSErrorToError(_:)();

          swift_willThrow();
        }
      }
      return ((uint64_t (*)(char *, uint64_t))v60)(v25, v7);
    }
  }
}

void *sub_1004EB808(void (*a1)(char *, uint64_t, uint64_t, id), void *a2, void *a3, uint64_t *a4)
{
  v199 = a4;
  v203 = a3;
  uint64_t v6 = sub_100094134(&qword_1009186A0);
  __chkstk_darwin(v6 - 8);
  v195 = (char *)&v164 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v193 = (uint64_t)&v164 - v9;
  uint64_t v188 = type metadata accessor for Date();
  uint64_t v187 = *(void *)(v188 - 8);
  __chkstk_darwin(v188);
  v194 = (char *)&v164 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v180 = (char *)&v164 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v164 - v14;
  uint64_t v16 = (void *)type metadata accessor for UUID();
  uint64_t v196 = *(v16 - 1);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v164 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v164 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v164 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v164 - v26;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v164 - v29;
  uint64_t v31 = v207;
  uint64_t result = sub_1004EFE10((uint64_t)a1, a2);
  if (v31) {
    return result;
  }
  v204 = v30;
  id v201 = v15;
  unint64_t v205 = (unint64_t)result;
  v185 = v21;
  v178 = v18;
  v206 = a2;
  v207 = a1;
  v197 = v27;
  v172 = v24;
  unint64_t v200 = 0;
  v212 = 0;
  v210 = _swiftEmptyDictionarySingleton;
  uint64_t v211 = 0;
  v209 = _swiftEmptyDictionarySingleton;
  if (qword_100907700 != -1) {
    goto LABEL_95;
  }
  while (1)
  {
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = sub_10008E2DC(v33, (uint64_t)qword_10091B868);
    uint64_t v35 = v196;
    uint64_t v36 = *(void (**)(char *, unint64_t, void *))(v196 + 16);
    unint64_t v37 = v16;
    uint64_t v190 = v196 + 16;
    v189 = v36;
    v36(v204, (unint64_t)v207, v16);
    uint64_t v38 = v187;
    uint64_t v39 = *(void (**)(char *, void *, uint64_t))(v187 + 16);
    id v40 = v201;
    uint64_t v16 = v203;
    uint64_t v41 = v188;
    uint64_t v171 = v187 + 16;
    v170 = v39;
    v39((char *)v201, v203, v188);
    unint64_t v42 = v205;
    swift_bridgeObjectRetain_n();
    uint64_t v179 = v34;
    uint64_t v43 = Logger.logObject.getter();
    int v44 = static os_log_type_t.default.getter();
    BOOL v45 = os_log_type_enabled(v43, (os_log_type_t)v44);
    uint64_t v46 = v37;
    v202 = v37;
    uint64_t v47 = v199;
    unint64_t v198 = v42 >> 62;
    if (v45)
    {
      LODWORD(v191) = v44;
      os_log_t v192 = v43;
      uint64_t v48 = swift_slowAlloc();
      v186 = (ValueMetadata *)swift_slowAlloc();
      v214 = v186;
      *(_DWORD *)uint64_t v48 = 136316162;
      v213 = &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
      sub_100094134((uint64_t *)&unk_10091B920);
      uint64_t v49 = String.init<A>(describing:)();
      v213 = (ValueMetadata *)sub_1000C51B8(v49, v50, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2080;
      v213 = (ValueMetadata *)sub_1000C51B8(0xD000000000000023, 0x80000001007D7250, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 22) = 2082;
      sub_1004F04A4((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
      id v51 = v204;
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      v213 = (ValueMetadata *)sub_1000C51B8(v52, v53, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v54 = *(ValueMetadata **)(v35 + 8);
      ((void (*)(char *, void *))v54)((char *)v51, v202);
      *(_WORD *)(v48 + 32) = 2050;
      if (v42 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v55 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      id v56 = v180;
      uint64_t v57 = (char *)v201;
      swift_bridgeObjectRelease();
      v213 = (ValueMetadata *)v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 42) = 2048;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v59 = v58;
      uint64_t v60 = *(void (**)(char *, uint64_t))(v187 + 8);
      uint64_t v61 = v188;
      v60(v56, v188);
      v213 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v169 = (void (*)(id, uint64_t))v60;
      v60(v57, v61);
      unint64_t v42 = v205;
      os_log_t v62 = v192;
      _os_log_impl((void *)&_mh_execute_header, v192, (os_log_type_t)v191, "[%s|%s] Did fetch NSManagedObjectID of reminders in ZREMCDOBJECT SQL table {list.identifier: %{public}s, reminders.count: %{public}ld, cumulative elapsedSeconds: %f}", (uint8_t *)v48, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v16 = v203;
    }
    else
    {
      uint64_t v63 = v46;
      swift_bridgeObjectRelease();
      unint64_t v64 = v63;
      uint64_t v54 = *(ValueMetadata **)(v35 + 8);
      ((void (*)(char *, void *))v54)(v204, v64);
      swift_bridgeObjectRelease();
      v169 = *(void (**)(id, uint64_t))(v38 + 8);
      v169(v40, v41);
    }
    if (v198)
    {
      swift_bridgeObjectRetain();
      uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v65 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v186 = v54;
    unint64_t v66 = v200;
    if (!v65) {
      break;
    }
    unint64_t v67 = v42 & 0xC000000000000001;
    uint64_t v68 = 4;
    while (1)
    {
      id v69 = v67 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v42 + 8 * v68);
      uint64_t v70 = v69;
      uint64_t v71 = v68 - 3;
      if (__OFADD__(v68 - 4, 1)) {
        break;
      }
      sub_1004ED07C(v206, (uint64_t)v70, (id *)&v210, (id *)&v209, v207, &v211, &v212, v47);
      if (v66)
      {

        swift_bridgeObjectRelease();
        goto LABEL_89;
      }

      ++v68;
      BOOL v73 = v71 == v65;
      unint64_t v42 = v205;
      if (v73) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    swift_once();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t v74 = v209[8];
  v173 = (char *)(v209 + 8);
  uint64_t v75 = 1 << *((unsigned char *)v209 + 32);
  uint64_t v76 = -1;
  if (v75 < 64) {
    uint64_t v76 = ~(-1 << v75);
  }
  unint64_t v77 = v76 & v74;
  unint64_t v78 = (unint64_t)(v75 + 63) >> 6;
  v182 = (void (**)(char *, uint64_t, void *))(v196 + 32);
  uint64_t v184 = v196 + 8;
  unint64_t v165 = v78 - 1;
  uint64_t v79 = swift_bridgeObjectRetain();
  uint64_t v80 = 0;
  int64_t v177 = v78;
  unint64_t v166 = v78 - 5;
  uint64_t v183 = v79;
  uint64_t v167 = v79 + 104;
  uint64_t v181 = 0x800000010078F740;
  *(void *)&long long v81 = 136315906;
  long long v176 = v81;
  unint64_t v168 = (unint64_t)"reminderInZREMCDREMINDER";
  unint64_t v175 = 0x80000001007D7250;
  v174 = (char *)&type metadata for Any + 8;
  uint64_t v82 = v202;
  uint64_t v83 = v206;
  uint64_t v84 = v207;
  while (1)
  {
    uint64_t v94 = v195;
    if (v77)
    {
      os_log_t v192 = (os_log_t)((v77 - 1) & v77);
      int64_t v191 = v80;
      unint64_t v95 = __clz(__rbit64(v77)) | (v80 << 6);
LABEL_27:
      uint64_t v96 = v183;
      v189(v195, *(void *)(v183 + 48) + *(void *)(v196 + 72) * v95, v82);
      uint64_t v97 = *(void *)(v96 + 56);
      uint64_t v98 = sub_100094134(&qword_1009186A8);
      *(void *)&v94[*(int *)(v98 + 48)] = *(void *)(v97 + 8 * v95);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v94, 0, 1, v98);
      swift_bridgeObjectRetain();
      uint64_t v99 = v194;
      goto LABEL_34;
    }
    int64_t v100 = v80 + 1;
    if (__OFADD__(v80, 1)) {
      goto LABEL_94;
    }
    if (v100 >= v177)
    {
      int64_t v191 = v80;
      uint64_t v99 = v194;
    }
    else
    {
      unint64_t v101 = *(void *)&v173[8 * v100];
      uint64_t v99 = v194;
      if (v101) {
        goto LABEL_31;
      }
      if (v80 + 2 >= v177) {
        goto LABEL_74;
      }
      unint64_t v101 = *(void *)&v173[8 * v80 + 16];
      if (v101)
      {
        int64_t v100 = v80 + 2;
LABEL_31:
        os_log_t v192 = (os_log_t)((v101 - 1) & v101);
        unint64_t v95 = __clz(__rbit64(v101)) + (v100 << 6);
        int64_t v191 = v100;
        goto LABEL_27;
      }
      if (v80 + 3 >= v177)
      {
        int64_t v191 = v80 + 2;
      }
      else
      {
        unint64_t v101 = *(void *)&v173[8 * v80 + 24];
        if (v101)
        {
          int64_t v100 = v80 + 3;
          goto LABEL_31;
        }
        int64_t v100 = v80 + 4;
        if (v80 + 4 < v177)
        {
          unint64_t v101 = *(void *)&v173[8 * v100];
          if (v101) {
            goto LABEL_31;
          }
          while (v166 != v80)
          {
            unint64_t v101 = *(void *)(v167 + 8 * v80++);
            if (v101)
            {
              int64_t v100 = v80 + 4;
              goto LABEL_31;
            }
          }
          int64_t v100 = v165;
LABEL_74:
          int64_t v191 = v100;
          goto LABEL_33;
        }
        int64_t v191 = v80 + 3;
      }
    }
LABEL_33:
    uint64_t v102 = sub_100094134(&qword_1009186A8);
    uint64_t v94 = v195;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56))(v195, 1, 1, v102);
    os_log_t v192 = 0;
LABEL_34:
    uint64_t v103 = (uint64_t)v94;
    uint64_t v104 = v193;
    sub_100096408(v103, v193, &qword_1009186A0);
    uint64_t v105 = sub_100094134(&qword_1009186A8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 48))(v104, 1, v105) == 1)
    {
      swift_release();
      unint64_t v145 = v172;
      v189(v172, (unint64_t)v84, v82);
      uint64_t v146 = v188;
      v170(v99, v16, v188);
      uint64_t v147 = Logger.logObject.getter();
      os_log_type_t v148 = static os_log_type_t.default.getter();
      int v149 = v148;
      if (os_log_type_enabled(v147, v148))
      {
        uint64_t v150 = swift_slowAlloc();
        uint64_t v151 = (void (*)(char *, uint64_t, uint64_t, id))swift_slowAlloc();
        unint64_t v200 = v66;
        v207 = v151;
        v215 = v151;
        *(_DWORD *)uint64_t v150 = 136316418;
        LODWORD(v206) = v149;
        v214 = &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
        sub_100094134((uint64_t *)&unk_10091B920);
        uint64_t v152 = String.init<A>(describing:)();
        v214 = (ValueMetadata *)sub_1000C51B8(v152, v153, (uint64_t *)&v215);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v150 + 12) = 2080;
        v214 = (ValueMetadata *)sub_1000C51B8(0xD000000000000023, v168 | 0x8000000000000000, (uint64_t *)&v215);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v150 + 22) = 2082;
        sub_1004F04A4((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v154 = dispatch thunk of CustomStringConvertible.description.getter();
        v214 = (ValueMetadata *)sub_1000C51B8(v154, v155, (uint64_t *)&v215);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(char *, void *))v186)(v145, v82);
        *(_WORD *)(v150 + 32) = 2050;
        swift_beginAccess();
        v213 = v212;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v150 + 42) = 2050;
        swift_beginAccess();
        uint64_t v208 = v211;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v150 + 52) = 2048;
        v156 = v180;
        Date.init()();
        v157 = v194;
        Date.timeIntervalSince(_:)();
        uint64_t v159 = v158;
        v160 = *(void (**)(char *, uint64_t))(v187 + 8);
        v160(v156, v146);
        uint64_t v208 = v159;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v160(v157, v146);
        _os_log_impl((void *)&_mh_execute_header, v147, (os_log_type_t)v206, "[%s|%s] Did copy reminders from ZREMCDOBJECT SQL table to ZREMCDREMINDER SQL table {list.identifier: %{public}s, topLevelReminders.count: %{public}ld, subtasks.count: %{public}ld, cumulative elapsedSeconds: %f}", (uint8_t *)v150, 0x3Eu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        ((void (*)(char *, void *))v186)(v145, v82);
        v169(v99, v146);
      }

      goto LABEL_89;
    }
    unint64_t v205 = *(void *)(v104 + *(int *)(v105 + 48));
    uint64_t v106 = (uint64_t)v197;
    (*v182)(v197, v104, v82);
    uint64_t v108 = (uint64_t)v83;
    id v109 = v107;
    id v110 = (void *)sub_1004F0110(v106, v108, 0xD00000000000001DLL, v181, (void (*)(void))type metadata accessor for REMCDReminderInZREMCDREMINDER);
    if (v66) {
      break;
    }
    id v111 = v110;
    if (!v110)
    {
      unint64_t v113 = v185;
LABEL_58:
      swift_bridgeObjectRelease();
      uint64_t v82 = v202;
      uint64_t v135 = (void (*)(char *, uint64_t, void *))v189;
      v189(v113, (unint64_t)v84, v202);
      Swift::Int v136 = v178;
      v135(v178, v106, v82);
      Swift::Int v137 = Logger.logObject.getter();
      os_log_type_t v138 = static os_log_type_t.error.getter();
      int v139 = v138;
      if (os_log_type_enabled(v137, v138))
      {
        uint64_t v85 = swift_slowAlloc();
        unint64_t v205 = swift_slowAlloc();
        v214 = (ValueMetadata *)v205;
        *(_DWORD *)uint64_t v85 = v176;
        v213 = &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
        sub_100094134((uint64_t *)&unk_10091B920);
        uint64_t v86 = String.init<A>(describing:)();
        *(void *)(v85 + 4) = sub_1000C51B8(v86, v87, (uint64_t *)&v214);
        swift_bridgeObjectRelease();
        *(_WORD *)(v85 + 12) = 2080;
        *(void *)(v85 + 14) = sub_1000C51B8(0xD000000000000023, v175, (uint64_t *)&v214);
        *(_WORD *)(v85 + 22) = 2082;
        sub_1004F04A4((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v85 + 24) = sub_1000C51B8(v88, v89, (uint64_t *)&v214);
        swift_bridgeObjectRelease();
        LODWORD(v204) = v139;
        uint64_t v90 = v113;
        id v91 = v186;
        ((void (*)(char *, void *))v186)(v90, v202);
        *(_WORD *)(v85 + 32) = 2082;
        uint64_t v82 = v202;
        uint64_t v92 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v85 + 34) = sub_1000C51B8(v92, v93, (uint64_t *)&v214);
        swift_bridgeObjectRelease();
        ((void (*)(char *, void *))v91)(v136, v82);
        _os_log_impl((void *)&_mh_execute_header, v137, (os_log_type_t)v204, "[%s|%s] Failed to fetch moID of parentReminder {list.identifier: %{public}s, parentReminderIdentifier: %{public}s}", (uint8_t *)v85, 0x2Au);
        swift_arrayDestroy();
        uint64_t v16 = v203;
        swift_slowDealloc();
        uint64_t v84 = v207;
        swift_slowDealloc();
      }
      else
      {
        uint64_t v140 = v113;
        id v91 = v186;
        ((void (*)(char *, void *))v186)(v140, v82);
        ((void (*)(char *, void *))v91)(v136, v82);
      }

      uint64_t v83 = v206;
      ((void (*)(char *, void *))v91)(v197, v82);
      goto LABEL_24;
    }
    id v112 = [v110 ic_permanentObjectID];

    unint64_t v113 = v185;
    id v201 = v112;
    if (!v112) {
      goto LABEL_58;
    }
    if (v205 >> 62)
    {
      id v141 = v201;
      swift_bridgeObjectRetain();
      uint64_t v114 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v83 = v206;
      if (v114)
      {
LABEL_40:
        unint64_t v200 = v205 & 0xC000000000000001;
        swift_beginAccess();
        swift_beginAccess();
        uint64_t v116 = 4;
        unint64_t v198 = v114;
        while (1)
        {
          if (v200) {
            id v118 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v118 = *(id *)(v205 + 8 * v116);
          }
          uint64_t v119 = v118;
          uint64_t v120 = v116 - 3;
          if (__OFADD__(v116 - 4, 1)) {
            goto LABEL_92;
          }
          v214 = 0;
          id v121 = [v83 existingObjectWithID:v119 error:&v214];
          uint64_t v122 = v214;
          if (!v121) {
            break;
          }
          uint64_t v123 = v121;
          v204 = (char *)v119;
          unint64_t v124 = v66;
          type metadata accessor for REMCDReminderInZREMCDREMINDER();
          uint64_t v125 = swift_dynamicCastClass();
          if (v125)
          {
            uint64_t v126 = (void *)v125;
            v214 = 0;
            long long v127 = v122;
            id v128 = [v83 existingObjectWithID:v201 error:&v214];
            uint64_t v129 = v214;
            if (!v128)
            {
              unint64_t v144 = v214;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              goto LABEL_86;
            }
            uint64_t v130 = v128;
            uint64_t v131 = swift_dynamicCastClass();
            long long v132 = v129;
            if (v131)
            {
              [v126 setParentReminder:v131];
              uint64_t v133 = *v199 + 1;
              uint64_t v83 = v206;
              if (__OFADD__(*v199, 1)) {
                goto LABEL_93;
              }
              uint64_t *v199 = v133;
              unint64_t v66 = v124;
              if (v133 >= 500)
              {
                v214 = 0;
                if (([v83 save:&v214] & 1) == 0)
                {
                  v162 = v214;
                  _convertNSErrorToError(_:)();

                  swift_willThrow();
LABEL_86:
                  uint64_t v119 = v204;
LABEL_87:

                  swift_release();
                  swift_bridgeObjectRelease();
                  id v163 = v201;

                  uint64_t v161 = (uint64_t)v197;
                  goto LABEL_88;
                }
                Swift::Int v134 = v214;
                [v83 refreshAllObjects];
                uint64_t *v199 = 0;

                uint64_t v123 = v130;
              }
              else
              {

                uint64_t v123 = v130;
              }
            }
            else
            {

              uint64_t v123 = v130;
              unint64_t v66 = v124;
              uint64_t v83 = v206;
            }
          }
          else
          {
            uint64_t v117 = v122;
          }

          ++v116;
          uint64_t v16 = v203;
          uint64_t v84 = v207;
          if (v120 == v198) {
            goto LABEL_76;
          }
        }
        unint64_t v143 = v214;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v114 = *(void *)((v205 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v115 = v201;
      uint64_t v83 = v206;
      if (v114) {
        goto LABEL_40;
      }
    }
LABEL_76:
    id v142 = v201;

    swift_bridgeObjectRelease();
    uint64_t v82 = v202;
    ((void (*)(char *, void *))v186)(v197, v202);
LABEL_24:
    uint64_t v80 = v191;
    unint64_t v77 = (unint64_t)v192;
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v161 = v106;
LABEL_88:
  ((void (*)(uint64_t, void *))v186)(v161, v202);
LABEL_89:
  swift_bridgeObjectRelease();
  return (void *)swift_bridgeObjectRelease();
}

void sub_1004ED07C(void *a1, uint64_t a2, id *a3, id *a4, void (*a5)(char *, uint64_t, uint64_t, id), uint64_t *a6, void *a7, uint64_t *a8)
{
  uint64_t v122 = a6;
  uint64_t v123 = a8;
  id v119 = a7;
  uint64_t v120 = a5;
  uint64_t v117 = a4;
  id v118 = a3;
  uint64_t v116 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v116);
  id v115 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v107 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v107 - v15;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(uint64_t **)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  id v121 = (char *)&v107 - v22;
  __chkstk_darwin(v23);
  unint64_t v113 = (char *)&v107 - v24;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v107 - v26;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v107 - v29;
  *(void *)&double v32 = __chkstk_darwin(v31).n128_u64[0];
  uint64_t v114 = (char *)&v107 - v33;
  v127[0] = 0;
  id v124 = a1;
  id v34 = [a1 existingObjectWithID:a2 error:v127];
  id v35 = v127[0];
  if (!v34)
  {
    id v40 = v127[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  id v36 = v34;
  id v112 = v18;
  type metadata accessor for REMCDReminderInZREMCDOBJECT();
  unint64_t v37 = v36;
  uint64_t v38 = (void *)swift_dynamicCastClass();
  id v39 = v35;
  if (!v38 || ([v38 markedForDeletion] & 1) != 0)
  {

    return;
  }
  id v109 = (void *)v17;
  uint64_t v107 = type metadata accessor for REMCDReminderInZREMCDREMINDER();
  id v41 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v42 = [v41 initWithContext:v124];
  sub_1004EDF24(v38);
  id v111 = v38;
  id v43 = [v38 ckCloudState];
  if (v43)
  {
    int v44 = v43;
    [v43 setObject:0];
    [v44 setSavedAttachment:0];
    [v44 setSavedReminder:0];
    [v44 setTemplate:0];
    [v44 setReminderInZREMCDREMINDER:v42];
  }
  id v110 = v42;
  id v45 = v111;
  id v46 = [v111 parentReminder];
  id v108 = v37;
  if (v46)
  {
    id v119 = v46;
    id v47 = [v46 identifier];
    uint64_t v48 = v112;
    if (v47)
    {
      uint64_t v49 = v47;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v50 = (void (*)(char *, char *, void *))v48[4];
      id v42 = v109;
      v50(v16, v27, v109);
      uint64_t v51 = v48[7];
      ((void (*)(char *, void, uint64_t, id))v51)(v16, 0, 1, v42);
      if (((unsigned int (*)(char *, uint64_t, id))v48[6])(v16, 1, v42) != 1)
      {
        uint64_t v30 = v114;
        v50(v114, v16, v42);
        uint64_t v52 = *v118;
        id v53 = v110;
        if (!*((void *)*v118 + 2)) {
          goto LABEL_37;
        }
        unint64_t v54 = sub_100306EC4((uint64_t)v30);
        if ((v55 & 1) == 0) {
          goto LABEL_37;
        }
        id v56 = *(void **)(v52[7] + 8 * v54);
        v127[0] = 0;
        id v45 = v56;
        id v57 = [v124 existingObjectWithID:v45 error:v127];
        id v42 = v127[0];
        if (v57)
        {
          uint64_t v58 = v57;
          uint64_t v51 = swift_dynamicCastClass();
          id v59 = v42;
          if (v51)
          {
            id v60 = v58;
            [v53 setParentReminder:v51];

            ((void (*)(char *, void *))v48[1])(v30, v109);
            goto LABEL_44;
          }

          id v42 = v109;
LABEL_37:
          id v92 = [v53 ic_permanentObjectID];
          if (*((void *)*v117 + 2) && (sub_100306EC4((uint64_t)v30), (v93 & 1) != 0))
          {
            uint64_t v51 = (uint64_t)v113;
            ((void (*)(char *, char *, id))v48[2])(v113, v30, v42);
            unint64_t v95 = sub_1001EE5F4(v127);
            if (*v94)
            {
              uint64_t v96 = v94;
              id v97 = v92;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              id v42 = *(id *)((*v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if ((unint64_t)v42 >= *(void *)((*v96 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              ((void (*)(id *, void))v95)(v127, 0);

              uint64_t v98 = (void (*)(char *, void *))v48[1];
              uint64_t v99 = v109;
              v98(v113, v109);
              v98(v30, v99);
            }
            else
            {
              ((void (*)(id *, void))v95)(v127, 0);

              uint64_t v106 = (void (*)(uint64_t, id))v48[1];
              v106(v51, v42);
              v106((uint64_t)v30, v42);
            }
          }
          else
          {
            ((void (*)(char *, char *, id))v48[2])(v27, v30, v42);
            sub_100094134((uint64_t *)&unk_10090AF20);
            uint64_t v100 = swift_allocObject();
            *(_OWORD *)(v100 + 16) = xmmword_10077A530;
            *(void *)(v100 + 32) = v92;
            v127[0] = (id)v100;
            specialized Array._endMutation()();
            uint64_t v51 = (uint64_t)v42;
            id v42 = v127[0];
            id v101 = v92;
            uint64_t v102 = v117;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v127[0] = *v102;
            *uint64_t v102 = (id)0x8000000000000000;
            sub_1002C6EC4((uint64_t)v42, (uint64_t)v27, isUniquelyReferenced_nonNull_native);
            *uint64_t v102 = v127[0];
            swift_bridgeObjectRelease();
            uint64_t v104 = (void (*)(char *, uint64_t))v48[1];
            v104(v27, v51);

            v104(v30, v51);
          }
LABEL_44:
          uint64_t v48 = v122;
          while (1)
          {
            uint64_t v89 = *v48 + 1;
            id v90 = v111;
            if (!__OFADD__(*v48, 1)) {
              goto LABEL_46;
            }
            __break(1u);
LABEL_49:
            swift_once();
LABEL_22:
            uint64_t v70 = type metadata accessor for Logger();
            sub_10008E2DC(v70, (uint64_t)qword_10091B868);
            uint64_t v71 = v121;
            ((void (*)(char *, void (*)(char *, uint64_t, uint64_t, id), id))v48[2])(v121, v120, v42);
            id v53 = v110;
            id v72 = v110;
            BOOL v73 = Logger.logObject.getter();
            int v74 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v73, (os_log_type_t)v74))
            {
              ((void (*)(char *, id))v48[1])(v71, v42);

              goto LABEL_44;
            }
            LODWORD(v118) = v74;
            uint64_t v120 = (void (*)(char *, uint64_t, uint64_t, id))v51;
            uint64_t v51 = swift_slowAlloc();
            uint64_t v75 = (id *)swift_slowAlloc();
            uint64_t v117 = v75;
            *(_DWORD *)uint64_t v51 = 136315906;
            uint64_t v126 = &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
            v127[0] = v75;
            sub_100094134((uint64_t *)&unk_10091B920);
            uint64_t v76 = String.init<A>(describing:)();
            uint64_t v126 = (ValueMetadata *)sub_1000C51B8(v76, v77, (uint64_t *)v127);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v51 + 12) = 2080;
            uint64_t v126 = (ValueMetadata *)sub_1000C51B8(0xD000000000000023, 0x80000001007D7250, (uint64_t *)v127);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v51 + 22) = 2082;
            sub_1004F04A4((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v126 = (ValueMetadata *)sub_1000C51B8(v78, v79, (uint64_t *)v127);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            ((void (*)(char *, id))v48[1])(v71, v42);
            *(_WORD *)(v51 + 32) = 2082;
            id v80 = [v72 identifier];
            if (v80)
            {
              long long v81 = v80;
              uint64_t v82 = v115;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v83 = 0;
              uint64_t v48 = v122;
            }
            else
            {
              uint64_t v83 = 1;
              uint64_t v48 = v122;
              uint64_t v82 = v115;
            }
            v120(v82, v83, 1, v42);
            id v42 = (id)(v51 + 34);
            uint64_t v84 = Optional.descriptionOrNil.getter();
            uint64_t v85 = (uint64_t)v82;
            unint64_t v87 = v86;
            sub_1000966BC(v85, (uint64_t *)&unk_100909E50);
            uint64_t v126 = (ValueMetadata *)sub_1000C51B8(v84, v87, (uint64_t *)v127);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v118, "[%s|%s] Failed to set parentReminder because parentReminder.identifier is nil {list.identifier: %{public}s, reminder.identifier: %{public}s}", (uint8_t *)v51, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            id v53 = v110;
          }
        }
LABEL_35:
        id v91 = v42;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        ((void (*)(char *, void *))v48[1])(v30, v109);
        return;
      }
    }
    else
    {
      uint64_t v51 = v112[7];
      id v42 = v109;
      ((void (*)(char *, uint64_t, uint64_t, void *))v51)(v16, 1, 1, v109);
    }
    sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
    if (qword_100907700 != -1) {
      goto LABEL_49;
    }
    goto LABEL_22;
  }
  id v61 = [v45 identifier];
  os_log_t v62 = v112;
  if (!v61)
  {
    ((void (*)(char *, uint64_t, uint64_t, void *))v112[7])(v13, 1, 1, v109);
    unint64_t v37 = v125;
    goto LABEL_27;
  }
  uint64_t v63 = v61;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v45 = v62 + 4;
  unint64_t v64 = (void (*)(char *, char *, void *))v62[4];
  id v42 = v109;
  v64(v13, v27, v109);
  ((void (*)(char *, void, uint64_t, id))v62[7])(v13, 0, 1, v42);
  int v65 = ((uint64_t (*)(char *, uint64_t, id))v62[6])(v13, 1, v42);
  unint64_t v37 = v125;
  if (v65 == 1)
  {
LABEL_27:
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
    id v53 = v110;
    uint64_t v48 = (uint64_t *)v119;
    goto LABEL_32;
  }
  v64(v30, v13, v42);
  ((void (*)(char *, char *, id))v62[2])(v20, v30, v42);
  id v66 = [v110 ic_permanentObjectID];
  if (v66)
  {
    uint64_t v67 = (uint64_t)v66;
    uint64_t v68 = v118;
    char v69 = swift_isUniquelyReferenced_nonNull_native();
    v127[0] = *v68;
    *uint64_t v68 = (id)0x8000000000000000;
    sub_1002C6D1C(v67, (uint64_t)v20, v69);
    *uint64_t v68 = v127[0];
    swift_bridgeObjectRelease();
    id v45 = (id)v62[1];
    ((void (*)(char *, id))v45)(v20, v42);
  }
  else
  {
    uint64_t v88 = (void *)sub_10030CD40((uint64_t)v20);
    id v45 = (id)v62[1];
    ((void (*)(char *, id))v45)(v20, v42);
  }
  uint64_t v48 = (uint64_t *)v119;
  ((void (*)(char *, id))v45)(v30, v42);
  id v53 = v110;
LABEL_32:
  uint64_t v89 = *v48 + 1;
  id v90 = v111;
  if (__OFADD__(*v48, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
LABEL_46:
  *uint64_t v48 = v89;
  id v105 = v124;
  [v124 refreshObject:v90 mergeChanges:0];
  sub_1004F03A0(v123, v105);
}

id sub_1004EDEE0()
{
  return sub_1004EF840((uint64_t (*)(void))type metadata accessor for REMCDReminderInZREMCDOBJECT);
}

uint64_t type metadata accessor for REMCDReminderInZREMCDOBJECT()
{
  return self;
}

void sub_1004EDF24(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v130 = *(void *)(v4 - 8);
  uint64_t v131 = v4;
  __chkstk_darwin(v4);
  id v124 = (char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v129 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v127 = *(void *)(v8 - 8);
  uint64_t v128 = v8;
  __chkstk_darwin(v8);
  uint64_t v123 = (char *)&v122 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v10 - 8);
  uint64_t v126 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v135 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v15 - 8);
  Swift::Int v134 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v133 = (char *)&v122 - v18;
  __chkstk_darwin(v19);
  long long v132 = (char *)&v122 - v20;
  __chkstk_darwin(v21);
  uint64_t v125 = (char *)&v122 - v22;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v122 - v24;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v122 - v27;
  *(void *)&double v30 = __chkstk_darwin(v29).n128_u64[0];
  double v32 = (char *)&v122 - v31;
  [v2 setAllDay:[a1 allDay:v30]];
  [v2 setCkDirtyFlags:[a1 ckDirtyFlags]];
  id v33 = [a1 ckIdentifier];
  [v2 setCkIdentifier:v33];

  [v2 setCkNeedsInitialFetchFromCloud:[a1 ckNeedsInitialFetchFromCloud]];
  [v2 setCkNeedsToBeFetchedFromCloud:[a1 ckNeedsToBeFetchedFromCloud]];
  id v34 = [a1 ckParentReminderIdentifier];
  [v2 setCkParentReminderIdentifier:v34];

  Class isa = (Class)[a1 ckServerRecordData];
  if (isa)
  {
    uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v36, v38);
  }
  [v2 setCkServerRecordData:isa];

  Class v39 = (Class)[a1 ckServerShareData];
  if (v39)
  {
    uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v42 = v41;

    Class v39 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v40, v42);
  }
  [v2 setCkServerShareData:v39];

  id v43 = [a1 ckZoneOwnerName];
  [v2 setCkZoneOwnerName:v43];

  [v2 setCompleted:[a1 completed]];
  Class v44 = (Class)[a1 completionDate];
  if (v44)
  {
    id v45 = v135;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v32, v45, v12);
    id v46 = *(char **)(v13 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v46)(v32, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v32, 1, v12) == 1)
    {
      Class v44 = 0;
    }
    else
    {
      Class v44 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
    }
  }
  else
  {
    id v46 = *(char **)(v13 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v46)(v32, 1, 1, v12);
  }
  [v2 setCompletionDate:v44];

  Class v47 = (Class)[a1 contactHandles];
  if (v47)
  {
    uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v50 = v49;

    Class v47 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v48, v50);
  }
  uint64_t v51 = v126;
  [v2 setContactHandles:v47];

  Class v52 = (Class)[a1 creationDate];
  if (v52)
  {
    id v53 = v135;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v28, v53, v12);
    ((void (*)(char *, void, uint64_t, uint64_t))v46)(v28, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v28, 1, v12) == 1)
    {
      Class v52 = 0;
    }
    else
    {
      Class v52 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v28, v12);
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v46)(v28, 1, 1, v12);
  }
  [v2 setCreationDate:v52];

  id v54 = [a1 daCalendarItemUniqueIdentifier];
  [v2 setDaCalendarItemUniqueIdentifier:v54];

  id v55 = [a1 daPushKey];
  [v2 setDaPushKey:v55];

  id v56 = [a1 daSyncToken];
  [v2 setDaSyncToken:v56];

  Class v57 = (Class)[a1 displayDateDate];
  uint64_t v58 = v135;
  if (v57)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v25, v58, v12);
    ((void (*)(char *, void, uint64_t, uint64_t))v46)(v25, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v25, 1, v12) == 1)
    {
      Class v57 = 0;
    }
    else
    {
      Class v57 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v25, v12);
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v46)(v25, 1, 1, v12);
  }
  [v2 setDisplayDateDate:v57];

  [v2 setDisplayDateIsAllDay:[a1 displayDateIsAllDay]];
  id v59 = [a1 displayDateTimeZone];
  [v2 setDisplayDateTimeZone:v59];

  [v2 setDisplayDateUpdatedForSecondsFromGMT:[a1 displayDateUpdatedForSecondsFromGMT]];
  Class v60 = (Class)[a1 dueDate];
  uint64_t v61 = v130;
  os_log_t v62 = v125;
  if (v60)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v62, v58, v12);
    ((void (*)(char *, void, uint64_t, uint64_t))v46)(v62, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v62, 1, v12) == 1)
    {
      Class v60 = 0;
    }
    else
    {
      Class v60 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v46)(v125, 1, 1, v12);
  }
  [v2 setDueDate:v60];

  [v2 setEffectiveMinimumSupportedAppVersion:[a1 effectiveMinimumSupportedAppVersion]];
  id v63 = [a1 externalIdentifier];
  [v2 setExternalIdentifier:v63];

  id v64 = [a1 externalModificationTag];
  [v2 setExternalModificationTag:v64];

  [v2 setFlagged:[a1 flagged]];
  [v2 setIcsDisplayOrder:[a1 icsDisplayOrder]];
  id v65 = [a1 icsUrl];
  if (v65)
  {
    id v66 = v123;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v67 = v127;
    uint64_t v68 = v66;
    uint64_t v69 = v128;
    (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v51, v68, v128);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v51, 0, 1, v69);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v51, 1, v69) == 1)
    {
      id v65 = 0;
    }
    else
    {
      uint64_t v126 = v46;
      uint64_t v71 = v67;
      URL._bridgeToObjectiveC()(v70);
      id v65 = v72;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v51, v69);
      id v46 = v126;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v127 + 56))(v51, 1, 1, v128);
  }
  [v2 setIcsUrl:v65];

  Class v73 = (Class)[a1 identifier];
  int v74 = v129;
  if (v73)
  {
    uint64_t v75 = v124;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v76 = v75;
    uint64_t v77 = v131;
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v74, v76, v131);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v74, 0, 1, v77);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v74, 1, v77) == 1)
    {
      Class v73 = 0;
    }
    else
    {
      Class v73 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v74, v77);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v129, 1, 1, v131);
  }
  [v2 setIdentifier:v73];

  Class v78 = (Class)[a1 importedICSData];
  if (v78)
  {
    uint64_t v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v81 = v80;

    Class v78 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v79, v81);
  }
  uint64_t v83 = v132;
  uint64_t v82 = v133;
  [v2 setImportedICSData:v78];

  Class v84 = (Class)[a1 lastBannerPresentationDate];
  if (v84)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v83, v58, v12);
    ((void (*)(char *, void, uint64_t, uint64_t))v46)(v83, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v83, 1, v12) == 1)
    {
      Class v84 = 0;
    }
    else
    {
      Class v84 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v83, v12);
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v46)(v83, 1, 1, v12);
  }
  [v2 setLastBannerPresentationDate:v84];

  Class v85 = (Class)[a1 lastModifiedDate];
  if (v85)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v82, v58, v12);
    ((void (*)(char *, void, uint64_t, uint64_t))v46)(v82, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v82, 1, v12) == 1)
    {
      Class v85 = 0;
    }
    else
    {
      Class v85 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v82, v12);
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v46)(v82, 1, 1, v12);
  }
  [v2 setLastModifiedDate:v85];

  [v2 setMarkedForDeletion:[a1 markedForDeletion]];
  [v2 setMinimumSupportedAppVersion:[a1 minimumSupportedAppVersion]];
  id v86 = [a1 notes];
  [v2 setNotes:v86];

  Class v87 = (Class)[a1 notesDocument];
  if (v87)
  {
    uint64_t v88 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v90 = v89;

    Class v87 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v88, v90);
  }
  [v2 setNotesDocument:v87];

  [v2 setPriority:[a1 priority]];
  id v91 = [a1 resolutionTokenMap];
  [v2 setResolutionTokenMap:v91];

  id v92 = [a1 resolutionTokenMap_v2_JSON];
  [v2 setResolutionTokenMap_v2_JSON:v92];

  Class v93 = (Class)[a1 resolutionTokenMap_v3_JSONData];
  if (v93)
  {
    uint64_t v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v96 = v95;

    Class v93 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v94, v96);
  }
  [v2 setResolutionTokenMap_v3_JSONData:v93];

  Class v97 = (Class)[a1 siriFoundInAppsData];
  if (v97)
  {
    uint64_t v98 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v100 = v99;

    Class v97 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v98, v100);
  }
  id v101 = v134;
  [v2 setSiriFoundInAppsData:v97];

  [v2 setSpotlightIndexCount:[a1 spotlightIndexCount]];
  Class v102 = (Class)[a1 startDate];
  if (v102)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v101, v58, v12);
    ((void (*)(char *, void, uint64_t, uint64_t))v46)(v101, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v101, 1, v12) == 1)
    {
      Class v102 = 0;
    }
    else
    {
      Class v102 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v101, v12);
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v46)(v101, 1, 1, v12);
  }
  [v2 setStartDate:v102];

  id v103 = [a1 timeZone];
  [v2 setTimeZone:v103];

  id v104 = [a1 title];
  [v2 setTitle:v104];

  Class v105 = (Class)[a1 titleDocument];
  if (v105)
  {
    uint64_t v106 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v108 = v107;

    Class v105 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v106, v108);
  }
  [v2 setTitleDocument:v105];

  Class v109 = (Class)[a1 userActivity];
  if (v109)
  {
    uint64_t v110 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v112 = v111;

    Class v109 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v110, v112);
  }
  [v2 setUserActivity:v109];

  id v113 = [a1 account];
  [v2 setAccount:v113];

  id v114 = [a1 alarmStorage];
  [v2 setAlarmStorage:v114];

  Class v115 = (Class)[a1 assignments];
  if (v115)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100909B00);
    sub_100384A30();
    static Set._unconditionallyBridgeFromObjectiveC(_:)();

    Class v115 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v2 setAssignments:v115];

  id v116 = [a1 attachments];
  [v2 setAttachments:v116];

  Class v117 = (Class)[a1 hashtags];
  if (v117)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100909B00);
    sub_100384A30();
    static Set._unconditionallyBridgeFromObjectiveC(_:)();

    Class v117 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v2 setHashtags:v117];

  id v118 = [a1 list];
  [v2 setList:v118];

  id v119 = [a1 parentAccount];
  [v2 setParentAccount:v119];

  id v120 = [a1 recurrenceRules];
  [v2 setRecurrenceRules:v120];

  id v121 = [a1 sharedToMeReminderPlaceholder];
  [v2 setSharedToMeReminderPlaceholder:v121];
}

id sub_1004EF710()
{
  return sub_1004EF840((uint64_t (*)(void))type metadata accessor for REMCDReminderInZREMCDREMINDER);
}

uint64_t type metadata accessor for REMCDReminderInZREMCDREMINDER()
{
  return self;
}

id sub_1004EF76C()
{
  return sub_1004EF840((uint64_t (*)(void))type metadata accessor for REMCDListInModelVersionV5);
}

uint64_t type metadata accessor for REMCDListInModelVersionV5()
{
  return self;
}

id sub_1004EF7C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  v8.receiver = a1;
  v8.super_class = (Class)a5(0);
  return [super initWithEntity:a3 insertIntoManagedObjectContext:a4];
}

id sub_1004EF828()
{
  return sub_1004EF840((uint64_t (*)(void))type metadata accessor for REMCKCloudStateInModelVersionV5);
}

id sub_1004EF840(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return [super dealloc];
}

uint64_t type metadata accessor for REMCKCloudStateInModelVersionV5()
{
  return self;
}

uint64_t sub_1004EF8A4(void *a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v33 - v9;
  id v11 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 initWithEntityName:v12];

  [v13 setResultType:2];
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100776E40;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 32) = 0x696669746E656469;
  *(void *)(v14 + 40) = 0xEA00000000007265;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setPropertiesToFetch:isa];

  sub_1000963CC(0, &qword_10090E4F0);
  unint64_t v16 = v45;
  unint64_t v17 = NSManagedObjectContext.fetch<A>(_:)();
  if (v16)
  {

    return (uint64_t)a1;
  }
  unint64_t v18 = v17;
  uint64_t v19 = v36;
  id v34 = v13;
  uint64_t v40 = v10;
  unint64_t v41 = v7;
  if (!(v17 >> 62))
  {
    uint64_t v20 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    id v22 = v34;
    if (v20) {
      goto LABEL_5;
    }
LABEL_26:

    swift_bridgeObjectRelease();
    a1 = _swiftEmptyArrayStorage;
LABEL_27:
    swift_bridgeObjectRelease();
    return (uint64_t)a1;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = result;
  id v22 = v34;
  if (!result) {
    goto LABEL_26;
  }
LABEL_5:
  if (v20 >= 1)
  {
    v33[1] = 0;
    uint64_t v23 = 0;
    unint64_t v45 = v18;
    unint64_t v38 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    unint64_t v39 = v18 & 0xC000000000000001;
    unint64_t v37 = (unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    uint64_t v24 = (void (**)(char *, char *, uint64_t))(v19 + 32);
    a1 = _swiftEmptyArrayStorage;
    id v35 = (char *)&type metadata for Any + 8;
    do
    {
      if (v39) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v25 = *(id *)(v45 + 8 * v23 + 32);
      }
      uint64_t v26 = v25;
      *(void *)&v42[0] = 0x696669746E656469;
      *((void *)&v42[0] + 1) = 0xEA00000000007265;
      id v27 = [v25 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v27)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v42, 0, sizeof(v42));
      }
      uint64_t v28 = v40;
      sub_100096408((uint64_t)v42, (uint64_t)v43, &qword_100908190);
      if (v44)
      {
        int v29 = swift_dynamicCast();
        (*v38)(v4, v29 ^ 1u, 1, v5);
      }
      else
      {
        sub_1000966BC((uint64_t)v43, &qword_100908190);
        (*v38)(v4, 1, 1, v5);
      }

      if ((*v37)(v4, 1, v5) == 1)
      {
        sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909E50);
      }
      else
      {
        double v30 = *v24;
        (*v24)(v28, v4, v5);
        v30(v41, v28, v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          a1 = (void *)sub_100309EC8(0, a1[2] + 1, 1, (unint64_t)a1);
        }
        unint64_t v32 = a1[2];
        unint64_t v31 = a1[3];
        if (v32 >= v31 >> 1) {
          a1 = (void *)sub_100309EC8(v31 > 1, v32 + 1, 1, (unint64_t)a1);
        }
        a1[2] = v32 + 1;
        ((void (*)(char *))v30)((char *)a1+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v32);
      }
      ++v23;
    }
    while (v20 != v23);

    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

void *sub_1004EFE10(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)sub_1004F0110(a1, (uint64_t)a2, 0x73694C44434D4552, 0xE900000000000074, (void (*)(void))type metadata accessor for REMCDListInModelVersionV5);
  if (!v2)
  {
    id v11 = v9;
    a2 = _swiftEmptyArrayStorage;
    if (v9)
    {
      id v12 = [v9 reminders];
      if (v12)
      {
        v16[1] = 0;
        id v18 = v11;
        uint64_t v19 = v6;
        unint64_t v25 = (unint64_t)_swiftEmptyArrayStorage;
        id v13 = v12;
        NSOrderedSet.makeIterator()();
        id v17 = v13;

        sub_1004F04A4((unint64_t *)&qword_100910238, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
        dispatch thunk of IteratorProtocol.next()();
        while (v24)
        {
          sub_10009A1A0(&v23, v22);
          sub_10009A1B0((uint64_t)v22, (uint64_t)v21);
          sub_1000963CC(0, (unint64_t *)&qword_100909B00);
          if (swift_dynamicCast())
          {
            id v14 = v20;
            id v15 = [v20 objectID];

            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
            if (v15)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          else
          {
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
          }
          dispatch thunk of IteratorProtocol.next()();
        }
        (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v5);
        a2 = (void *)v25;
      }
      else
      {
      }
    }
  }
  return a2;
}

unint64_t sub_1004F0110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  id v8 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 initWithEntityName:v9];

  [v10 setResultType:0];
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100776E80;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 32) = 0x696669746E656469;
  *(void *)(v11 + 40) = 0xEA00000000007265;
  uint64_t v12 = type metadata accessor for UUID();
  *(void *)(v11 + 88) = v12;
  id v13 = sub_1000C1FE8((uint64_t *)(v11 + 64));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v13, a1, v12);
  NSString v14 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = [self predicateWithFormat:v14 argumentArray:isa];

  [v10 setPredicate:v16];
  [v10 setFetchLimit:1];
  a5(0);
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v5)
  {

    return (unint64_t)a5;
  }
  unint64_t v18 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    a5 = (void (*)(void))_CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!a5) {
      goto LABEL_9;
    }
  }
  else
  {
    a5 = *(void (**)(void))((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!a5)
    {
LABEL_9:
      swift_bridgeObjectRelease();

      return (unint64_t)a5;
    }
  }
  if ((v18 & 0xC000000000000001) != 0)
  {
    uint64_t v19 = (void (*)(void))specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v19 = (void (*)(void))*(id *)(v18 + 32);
LABEL_8:
    a5 = v19;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004F03A0(uint64_t *a1, void *a2)
{
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *a1 + 1;
  if (__OFADD__(*a1, 1)) {
    __break(1u);
  }
  *a1 = v5;
  if (v5 >= 500)
  {
    v8[0] = 0;
    if ([a2 save:v8])
    {
      id v6 = v8[0];
      [a2 refreshAllObjects];
      uint64_t result = swift_beginAccess();
      *a1 = 0;
    }
    else
    {
      id v7 = v8[0];
      _convertNSErrorToError(_:)();

      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1004F04A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDEROMa()
{
  return &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
}

uint64_t sub_1004F04FC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091B930);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091B930);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

char *sub_1004F05C4()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC7remindd17RDLocationManager_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  char v7 = _dispatchPreconditionTest(_:)();
  uint64_t result = (char *)(*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v7)
  {
    id v9 = sub_1004F2084();
    id v10 = [v9 bundlePath];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = objc_allocWithZone((Class)CLLocationManager);
    id v12 = v6;
    id v13 = v0;
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v15 = [v11 initWithEffectiveBundlePath:v14 delegate:v13 onQueue:v12];

    id v16 = *(void **)&v13[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager];
    *(void *)&v13[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager] = v15;

    uint64_t result = (char *)swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      sub_1004F278C(result);
      return (char *)swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1004F07AC(uint64_t a1)
{
}

void sub_1004F07C4(void *a1, void *a2, void *a3)
{
  Class v5 = sub_1004F13C0(a3);
  [(objc_class *)v5 setOnBehalfOfBundleId:REMUniversalAppBundleIdentifier];
  if (qword_100907708 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10091B930);
  id v7 = a2;
  id v8 = v5;
  id v9 = a1;
  id v10 = v7;
  id v11 = v8;
  id v12 = v9;
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v16 = sub_1004F2C58(v11);
    uint64_t v21 = sub_1000C51B8(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    [v12 authorizationStatus:v21, v22];
    uint64_t v18 = CLAuthorizationStatus.description.getter();
    uint64_t v20 = sub_1000C51B8(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "startMonitoring: %s, authStatus: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  [v12 startMonitoringForRegion:v11, v20];
}

void sub_1004F0A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = v2;
  id v7 = *(void **)(v2 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *uint64_t v6 = v7;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  id v9 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  id v12 = *(void (**)(void *, uint64_t))(v4 + 8);
  v12(v6, v3);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  *uint64_t v6 = v10;
  v9(v6, v8, v3);
  id v13 = v10;
  char v14 = _dispatchPreconditionTest(_:)();
  v12(v6, v3);
  if ((v14 & 1) == 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v15 = *(void **)(v25 + OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager);
  if (!v15)
  {
LABEL_9:
    __break(1u);
    return;
  }
  id v16 = v15;
  id v17 = [v16 monitoredRegions];
  sub_1000963CC(0, (unint64_t *)&qword_100916EC0);
  sub_1004F455C();
  uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = v24;
  swift_bridgeObjectRetain();
  sub_1004F28E4(v18, v23, v19);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v21)
  {
    id v22 = v21;
    sub_1004F0C7C((uint64_t)v22);

    id v16 = v22;
  }
}

void sub_1004F0C7C(uint64_t a1)
{
}

void sub_1004F0C94(uint64_t a1, void (*a2)(void))
{
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)(v2 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *uint64_t v6 = v7;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  id v9 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  id v12 = *(void (**)(void *, uint64_t))(v4 + 8);
  v12(v6, v3);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  *uint64_t v6 = v10;
  v9(v6, v8, v3);
  id v13 = v10;
  char v14 = _dispatchPreconditionTest(_:)();
  v12(v6, v3);
  if ((v14 & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v15 = *(void **)(v2 + OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager);
  if (v15)
  {
    id v16 = v15;
    v18();

    return;
  }
LABEL_7:
  __break(1u);
}

id sub_1004F0E3C(void *a1, void *a2, void *a3)
{
  if (qword_100907708 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10091B930);
  id v7 = a2;
  id v8 = a3;
  id v9 = v7;
  id v10 = v8;
  char v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)id v13 = 136315138;
    uint64_t v14 = sub_1004F2C58(v10);
    uint64_t v17 = sub_1000C51B8(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "stopMonitoring: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return [a1 stopMonitoringForRegion:v10, v17, v18];
}

uint64_t sub_1004F1028()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *uint64_t v4 = v5;
  uint64_t v6 = enum case for DispatchPredicate.onQueue(_:);
  id v7 = *(void (**)(void *, uint64_t, uint64_t))(v2 + 104);
  v7(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v8 = v5;
  char v9 = _dispatchPreconditionTest(_:)();
  id v10 = *(uint64_t (**)(void *, uint64_t))(v2 + 8);
  uint64_t result = v10(v4, v1);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  *uint64_t v4 = v8;
  v7(v4, v6, v1);
  id v12 = v8;
  char v13 = _dispatchPreconditionTest(_:)();
  uint64_t result = v10(v4, v1);
  if ((v13 & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v14 = *(void **)(v0 + OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager);
  if (v14)
  {
    id v15 = v14;
    id v16 = [v15 monitoredRegions];
    sub_1000963CC(0, (unint64_t *)&qword_100916EC0);
    sub_1004F455C();
    uint64_t v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    return v17;
  }
LABEL_7:
  __break(1u);
  return result;
}

id sub_1004F120C(uint64_t a1)
{
  return sub_1004F1224(a1, (SEL *)&selRef_locationManager_didEnterRegion_);
}

id sub_1004F1218(uint64_t a1)
{
  return sub_1004F1224(a1, (SEL *)&selRef_locationManager_didExitRegion_);
}

id sub_1004F1224(uint64_t a1, SEL *a2)
{
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  id v7 = (SEL **)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = *(void **)&v2[OBJC_IVAR____TtC7remindd17RDLocationManager_queue];
  *id v7 = v8;
  uint64_t v9 = enum case for DispatchPredicate.onQueue(_:);
  id v10 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(void *, void, uint64_t, __n128))v10)(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  id v11 = v8;
  char v12 = _dispatchPreconditionTest(_:)();
  char v13 = *(uint64_t (**)(void *, uint64_t))(v4 + 8);
  id result = (id)v13(v7, v3);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  *id v7 = v11;
  v10(v7, v9, v3);
  id v15 = v11;
  char v16 = _dispatchPreconditionTest(_:)();
  id result = (id)v13(v7, v3);
  if ((v16 & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v17 = *(void *)&v2[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager];
  if (v17) {
    return [v2 *v18:v17:v19];
  }
LABEL_7:
  __break(1u);
  return result;
}

Class sub_1004F13C0(void *a1)
{
  [self minimumRegionMonitoringDistance];
  Swift::Double v3 = v2;
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    __n128 v5 = (void *)v4;
    id v6 = a1;
    [v5 radius];
    if (v7 < v3)
    {
      if (qword_100907708 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_10008E2DC(v8, (uint64_t)qword_10091B930);
      id v9 = v6;
      id v10 = v1;
      id v11 = v9;
      id v12 = v10;
      char v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 136315394;
        uint64_t v16 = Double.description.getter();
        sub_1000C51B8(v16, v17, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2080;
        uint64_t v18 = sub_1004F2C58(v5);
        sub_1000C51B8(v18, v19, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Radius less than minimum:%s for regionToMonitor:%s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000963CC(0, (unint64_t *)&unk_10091B9F0);
      return CLCircularRegion.init(circularRegion:radius:)((CLCircularRegion)v5, v3).super.super.isa;
    }
  }

  return (Class)a1;
}

id sub_1004F16C8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDLocationManager();
  return [super dealloc];
}

uint64_t type metadata accessor for RDLocationManager()
{
  return self;
}

uint64_t sub_1004F17BC(uint64_t a1, void *a2, const char *a3, uint64_t a4, unint64_t a5, void (*a6)(NSObject *, uint64_t))
{
  double v30 = a3;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = __chkstk_darwin(v11);
  uint64_t v15 = (void **)((char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(a1 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  void *v15 = v16;
  (*(void (**)(void *, void, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if (v18)
  {
    if (qword_100907708 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_10091B930);
  uint64_t v20 = a2;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    id v27 = (void *)swift_slowAlloc();
    uint64_t v28 = a4;
    *(_DWORD *)uint64_t v23 = 138412290;
    *(void *)&long long v31 = v20;
    uint64_t v24 = v20;
    unint64_t v29 = a5;
    uint64_t v25 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v27 = v20;

    a5 = v29;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, v30, v23, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    a4 = v28;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v21 = v20;
  }

  if (qword_100907360 != -1) {
    swift_once();
  }
  long long v31 = xmmword_10078F800;
  uint64_t v33 = 0;
  v34[0] = 0;
  uint64_t v32 = 0;
  *(void *)((char *)v34 + 6) = 0;
  sub_10036ED54((uint64_t)&v31, a4, a5);
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    a6(v20, result);
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1004F1B38(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, const char *a7, void (*a8)(NSObject *, uint64_t))
{
  id v16 = a1;
  id v14 = a4;
  id v15 = a3;
  sub_1004F3278(a5, a6, (uint64_t)v16, v14, a7, a5, (unint64_t)a6, a8);
}

uint64_t sub_1004F1D5C(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v9 = *(void **)(a1 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (qword_100907708 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_10091B930);
  id v12 = a2;
  __n128 v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)id v15 = 136446210;
    [v12 authorizationStatus];
    uint64_t v16 = CLAuthorizationStatus.description.getter();
    uint64_t v19 = sub_1000C51B8(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "didChangeAuthorization: {status: %{public}s}", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result) {
    return swift_unknownObjectRelease();
  }
  return result;
}

id sub_1004F2084()
{
  uint64_t v0 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v0 - 8);
  objc_super v2 = (char *)&v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  id v10 = (char *)&v46 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  __n128 v13 = (char *)&v46 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)&v46 - v14;
  id v16 = [self locationBundleURL];
  if (v16)
  {
    unint64_t v17 = v16;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    char v18 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v18(v2, v13, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) != 1)
    {
      v18(v15, v2, v3);
      id v19 = objc_allocWithZone((Class)NSBundle);
      URL._bridgeToObjectiveC()(v20);
      os_log_type_t v22 = v21;
      id v23 = [v19 initWithURL:v21];

      if (v23)
      {
        if (qword_100907708 != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        sub_10008E2DC(v24, (uint64_t)qword_10091B930);
        (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v10, v15, v3);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v25, v26))
        {
          id v27 = (uint8_t *)swift_slowAlloc();
          uint64_t v28 = swift_slowAlloc();
          uint64_t v47 = (uint64_t)v23;
          uint64_t v49 = v28;
          *(_DWORD *)id v27 = 136315138;
          id v46 = v27 + 4;
          uint64_t v29 = URL.path.getter();
          uint64_t v48 = sub_1000C51B8(v29, v30, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          long long v31 = *(void (**)(char *, uint64_t))(v4 + 8);
          v31(v10, v3);
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "daemonLocationBundle() successfully obtained from from %s", v27, 0xCu);
          swift_arrayDestroy();
          id v23 = (id)v47;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          long long v31 = *(void (**)(char *, uint64_t))(v4 + 8);
          v31(v10, v3);
        }
        v31(v15, v3);
        return v23;
      }
      else
      {
        if (qword_100907708 != -1) {
          swift_once();
        }
        uint64_t v38 = type metadata accessor for Logger();
        sub_10008E2DC(v38, (uint64_t)qword_10091B930);
        (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v15, v3);
        unint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          unint64_t v41 = (uint8_t *)swift_slowAlloc();
          uint64_t v47 = swift_slowAlloc();
          uint64_t v49 = v47;
          *(_DWORD *)unint64_t v41 = 136315138;
          uint64_t v42 = URL.path.getter();
          uint64_t v48 = sub_1000C51B8(v42, v43, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v44 = *(void (**)(char *, uint64_t))(v4 + 8);
          v44(v7, v3);
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "daemonLocationBundle() cannot locate bundle at %s, using Bundle.main instead. Location services will not work. This is expected for simulator.", v41, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v44 = *(void (**)(char *, uint64_t))(v4 + 8);
          v44(v7, v3);
        }

        id v45 = [self mainBundle];
        v44(v15, v3);
        return v45;
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  }
  sub_10016D594((uint64_t)v2);
  if (qword_100907708 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_10008E2DC(v32, (uint64_t)qword_10091B930);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    id v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "daemonLocationBundle() does not have a URL for location bundle, using Bundle.main instead. Location services will not work. This is expected for simulator.", v35, 2u);
    swift_slowDealloc();
  }

  id v36 = [self mainBundle];

  return v36;
}

uint64_t sub_1004F278C(char *a1)
{
  if (qword_100907918 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091D7B0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "locationManagerDidStart, reconciling all geofences", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = *(void *)&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = a1;
  sub_10058ABA0(v6, 0xD000000000000017, (void *)0x80000001007D7380, (uint64_t)sub_1004F45FC, v7);

  return swift_release();
}

void sub_1004F28E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_100916EC0);
    sub_1004F455C();
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v30;
    uint64_t v27 = v31;
    uint64_t v6 = v32;
    int64_t v7 = v33;
    unint64_t v8 = v34;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v27 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    int64_t v7 = 0;
  }
  uint64_t v25 = v6;
  int64_t v26 = (unint64_t)(v6 + 64) >> 6;
  int64_t v28 = v7;
  unint64_t v29 = v8;
  if (v5 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v8)
  {
    unint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v14 = v13 | (v7 << 6);
    goto LABEL_29;
  }
  int64_t v16 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v16 < v26)
    {
      unint64_t v17 = *(void *)(v27 + 8 * v16);
      ++v7;
      if (v17) {
        goto LABEL_28;
      }
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v26) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v27 + 8 * v7);
      if (v17) {
        goto LABEL_28;
      }
      int64_t v7 = v16 + 2;
      if (v16 + 2 >= v26) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v27 + 8 * v7);
      if (v17) {
        goto LABEL_28;
      }
      int64_t v7 = v16 + 3;
      if (v16 + 3 >= v26) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v27 + 8 * v7);
      if (v17)
      {
LABEL_28:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v14 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_29:
        id v15 = *(id *)(*(void *)(v5 + 48) + 8 * v14);
        if (v15)
        {
          while (1)
          {
            uint64_t v19 = a3;
            id v20 = [v15 identifier:v25];
            uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v23 = v22;

            a3 = v19;
            if (v21 == a2 && v23 == v19) {
              break;
            }
            char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v24) {
              goto LABEL_36;
            }

            int64_t v28 = v7;
            unint64_t v29 = v8;
            if ((v5 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (__CocoaSet.Iterator.next()())
            {
              sub_1000963CC(0, (unint64_t *)&qword_100916EC0);
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v15 = v35;
              swift_unknownObjectRelease();
              unint64_t v8 = v29;
              if (v35) {
                continue;
              }
            }
            goto LABEL_36;
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_36;
      }
      int64_t v7 = v16 + 4;
      if (v16 + 4 < v26)
      {
        unint64_t v17 = *(void *)(v27 + 8 * v7);
        if (!v17)
        {
          uint64_t v18 = v28 + 6;
          while (v26 != v18)
          {
            unint64_t v17 = *(void *)(v27 + 8 * v18++);
            if (v17)
            {
              int64_t v7 = v18 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_36;
        }
        goto LABEL_28;
      }
    }
LABEL_36:
    sub_1000C1AF8();
    return;
  }
  __break(1u);
}

uint64_t sub_1004F2C58(void *a1)
{
  unsigned int v2 = [a1 conservativeEntry];
  _StringGuts.grow(_:)(58);
  v3._countAndFlagsBits = 60;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  id v4 = [a1 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int64_t v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x4F796669746F6E20;
  v9._object = (void *)0xEF3A7972746E456ELL;
  String.append(_:)(v9);
  unsigned int v10 = [a1 notifyOnEntry];
  BOOL v11 = v10 == 0;
  if (v10) {
    uint64_t v12 = 1702195828;
  }
  else {
    uint64_t v12 = 0x65736C6166;
  }
  if (v11) {
    unint64_t v13 = 0xE500000000000000;
  }
  else {
    unint64_t v13 = 0xE400000000000000;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x4F796669746F6E20;
  v15._object = (void *)0xEE003A746978456ELL;
  String.append(_:)(v15);
  unsigned int v16 = [a1 notifyOnExit];
  BOOL v17 = v16 == 0;
  if (v16) {
    uint64_t v18 = 1702195828;
  }
  else {
    uint64_t v18 = 0x65736C6166;
  }
  if (v17) {
    unint64_t v19 = 0xE500000000000000;
  }
  else {
    unint64_t v19 = 0xE400000000000000;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  v21._object = (void *)0x80000001007D7310;
  v21._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v21);
  if (v2) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (v2) {
    unint64_t v23 = 0xE400000000000000;
  }
  else {
    unint64_t v23 = 0xE500000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 62;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  return 0;
}

uint64_t sub_1004F2E38(void *a1, char *a2)
{
  if (qword_100907918 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10091D7B0);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    Swift::String v8 = (uint8_t *)swift_slowAlloc();
    Swift::String v9 = (void *)swift_slowAlloc();
    *(_DWORD *)Swift::String v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDLocationAlarmProducer didEnterRegion: %@", v8, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = *(void *)&a2[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = v5;
  id v13 = v5;
  unint64_t v14 = a2;
  sub_10058ABA0(v11, 0x7265746E45646964, (void *)0xEE006E6F69676552, (uint64_t)sub_1004F4554, v12);
  return swift_release();
}

uint64_t sub_1004F3058(void *a1, char *a2)
{
  if (qword_100907918 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10091D7B0);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    Swift::String v8 = (uint8_t *)swift_slowAlloc();
    Swift::String v9 = (void *)swift_slowAlloc();
    *(_DWORD *)Swift::String v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDLocationAlarmProducer didExitRegion: %@", v8, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = *(void *)&a2[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = v5;
  id v13 = v5;
  unint64_t v14 = a2;
  sub_10058ABA0(v11, 0x5274697845646964, (void *)0xED00006E6F696765, (uint64_t)sub_1004F454C, v12);
  return swift_release();
}

uint64_t sub_1004F3278(uint64_t a1, void *a2, uint64_t a3, void *a4, const char *a5, uint64_t a6, unint64_t a7, void (*a8)(NSObject *, uint64_t))
{
  if (qword_100907708 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_10091B930);
  swift_bridgeObjectRetain_n();
  unsigned int v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v28 = a7;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, (unint64_t)a2, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "os_transaction INIT {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a7 = v28;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  uint64_t v30 = 0xD00000000000002CLL;
  unint64_t v31 = 0x80000001007D7350;
  v19._countAndFlagsBits = a1;
  v19._object = a2;
  String.append(_:)(v19);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v20 = os_transaction_create();
  swift_release();
  if (v20)
  {
    sub_1004F17BC(a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRetain_n();
    Swift::String v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a1, (unint64_t)a2, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "os_transaction RELEASE {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    Swift::String v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a1, (unint64_t)a2, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "RDLocationManagerDelegate: Couldn't create os_transaction_t for %{public}s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return sub_1004F17BC(a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1004F3768(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  if (qword_100907708 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10091B930);
  swift_bridgeObjectRetain_n();
  Swift::String v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, (unint64_t)a2, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "os_transaction INIT {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  uint64_t v21 = 0xD00000000000002CLL;
  unint64_t v22 = 0x80000001007D7350;
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v13 = os_transaction_create();
  swift_release();
  if (v13)
  {
    sub_1004F1D5C(a3, a4);
    swift_bridgeObjectRetain_n();
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unsigned int v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)unsigned int v16 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a1, (unint64_t)a2, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "os_transaction RELEASE {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a1, (unint64_t)a2, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "RDLocationManagerDelegate: Couldn't create os_transaction_t for %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return sub_1004F1D5C(a3, a4);
  }
}

void sub_1004F3C18(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  Swift::String v9 = (uint64_t *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v10 = *(void **)(v2 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    if (qword_100907708 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_10091B930);
  id v13 = a2;
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    os_log_type_t v17 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v22 = a1;
    uint64_t v23 = v18;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v22 = sub_1000C51B8(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2112;
    uint64_t v22 = (uint64_t)v13;
    id v21 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v17 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "didDetermineState: {state=%s, region=%@}", (uint8_t *)v16, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1004F3F20()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __n128 v3 = __chkstk_darwin(v1);
  uint64_t v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6)
  {
    if (qword_100907708 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10091B930);
  swift_errorRetain();
  swift_errorRetain();
  Swift::String v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)id v11 = 136315138;
    swift_getErrorValue();
    uint64_t v12 = Error.localizedDescription.getter();
    uint64_t v14 = sub_1000C51B8(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "didFailWithError: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

void sub_1004F41C4(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  id v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *id v7 = v8;
  (*(void (**)(void *, void, uint64_t, __n128))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if (v8)
  {
    if (qword_100907708 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10091B930);
  id v11 = a1;
  swift_errorRetain();
  id v12 = v11;
  swift_errorRetain();
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    if (a1)
    {
      id v16 = [v12 description];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;
    }
    else
    {
      unint64_t v19 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    uint64_t v23 = sub_1000C51B8(v17, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v20 = Error.localizedDescription.getter();
    uint64_t v23 = sub_1000C51B8(v20, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "monitoringDidFailFor: {region=%s, error=%s}", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_1004F450C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004F454C()
{
  return sub_100589974(*(char **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1004F4554()
{
  return sub_100589788(*(char **)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_1004F455C()
{
  unint64_t result = qword_10091BA00;
  if (!qword_10091BA00)
  {
    sub_1000963CC(255, (unint64_t *)&qword_100916EC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091BA00);
  }
  return result;
}

uint64_t sub_1004F45C4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004F45FC()
{
  return sub_100589764();
}

uint64_t sub_1004F4608(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_10091BA18);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0DE0(a1, a1[3]);
  sub_1004F4EEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1004F4790()
{
  unint64_t v1 = 1701667182;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000011;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1004F47E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004F4B7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004F4808(uint64_t a1)
{
  unint64_t v2 = sub_1004F4EEC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004F4844(uint64_t a1)
{
  unint64_t v2 = sub_1004F4EEC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1004F4880@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1004F4CB0(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1004F48C8(void *a1)
{
  return sub_1004F4608(a1);
}

uint64_t sub_1004F48E0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_1004F492C(v5, v7) & 1;
}

uint64_t sub_1004F492C(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  BOOL v4 = a1[1] == a2[1] && a1[2] == a2[2];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    if (a1[3] == a2[3] && a1[4] == a2[4])
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t initializeWithCopy for RDSavedHashtag(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RDSavedHashtag(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RDSavedHashtag(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedHashtag(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedHashtag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedHashtag()
{
  return &type metadata for RDSavedHashtag;
}

uint64_t sub_1004F4B7C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001007D73C0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1004F4CB0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100094134(&qword_10091BA08);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_1004F4EEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  char v24 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v23 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v21 = v10;
  char v22 = 2;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  id v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v20 = v13;
  v16(v8, v5);
  swift_bridgeObjectRetain();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v18 = v21;
  *a2 = v9;
  a2[1] = v18;
  uint64_t v19 = v20;
  a2[2] = v12;
  a2[3] = v19;
  a2[4] = v15;
  return result;
}

unint64_t sub_1004F4EEC()
{
  unint64_t result = qword_10091BA10;
  if (!qword_10091BA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091BA10);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RDSavedHashtag.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004F500CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedHashtag.CodingKeys()
{
  return &type metadata for RDSavedHashtag.CodingKeys;
}

unint64_t sub_1004F5048()
{
  unint64_t result = qword_10091BA20;
  if (!qword_10091BA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091BA20);
  }
  return result;
}

unint64_t sub_1004F50A0()
{
  unint64_t result = qword_10091BA28;
  if (!qword_10091BA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091BA28);
  }
  return result;
}

unint64_t sub_1004F50F8()
{
  unint64_t result = qword_10091BA30;
  if (!qword_10091BA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091BA30);
  }
  return result;
}

double sub_1004F514C@<D0>(uint64_t a1@<X8>)
{
  return sub_1004F5164(a1);
}

double sub_1004F5164@<D0>(uint64_t a1@<X8>)
{
  id v2 = [self sharedBabysitter];
  if (v2)
  {
    id v3 = v2;
    *(void *)(a1 + 24) = sub_1004F64A0();
    *(void *)(a1 + 32) = &off_1008C85D8;
    *(void *)a1 = v3;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1004F51D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, __n128))(a4 + 8))(&v35, a3, a4, v11);
  if (!v36) {
    return sub_1001CBADC((uint64_t)&v35);
  }
  sub_1000967D4(&v35, (uint64_t)v37);
  uint64_t v14 = v38;
  uint64_t v15 = v39;
  sub_1000C0DE0(v37, v38);
  (*(void (**)(void *, uint64_t, uint64_t))(v15 + 16))(v4, v14, v15);
  if (qword_100907710 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10008E2DC(v9, (uint64_t)qword_10091BA40);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v16, v9);
  swift_bridgeObjectRetain_n();
  id v17 = v4;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v18, v19))
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v37);
  }
  uint64_t v31 = a1;
  uint64_t v32 = v10;
  uint64_t v33 = a2;
  uint64_t v20 = swift_slowAlloc();
  uint64_t v30 = swift_slowAlloc();
  uint64_t v34 = v30;
  *(_DWORD *)uint64_t v20 = 136446466;
  id v21 = [v17 waiterID];
  if (v21)
  {
    char v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    *(void *)&long long v35 = sub_1000C51B8(v23, v25, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v33;
    sub_100094134((uint64_t *)&unk_10090A4C0);
    uint64_t v26 = Optional.descriptionOrNil.getter();
    *(void *)&long long v35 = sub_1000C51B8(v26, v27, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Reset babysitter for {waiterID: %{public}s, event: %{public}s}", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v9);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v37);
  }

  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void sub_1004F5590(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v49 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000C0DE0(a1, v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v11, v10);
  uint64_t v13 = v50;
  uint64_t v15 = sub_1004F5A7C(v12, v14, a2, a3);
  if (v13)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v16 = (void *)v15;
  uint64_t v47 = v3;
  uint64_t v48 = v9;
  uint64_t v43 = 0;
  uint64_t v17 = v49;
  uint64_t v50 = v7;
  uint64_t v45 = a2;
  swift_bridgeObjectRelease();
  if (qword_100907710 != -1) {
    swift_once();
  }
  uint64_t v18 = v50;
  uint64_t v19 = sub_10008E2DC(v50, (uint64_t)qword_10091BA40);
  uint64_t v20 = v17;
  id v21 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v48, v19, v18);
  char v22 = a1;
  sub_1003F08EC((uint64_t)a1, (uint64_t)v52);
  uint64_t v23 = v47;
  unint64_t v24 = Logger.logObject.getter();
  int v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, (os_log_type_t)v25);
  uint64_t v46 = a3;
  uint64_t v47 = v23;
  id v44 = v16;
  if (!v26)
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v52);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v18);
    goto LABEL_9;
  }
  int v41 = v25;
  os_log_t v42 = v24;
  uint64_t v27 = swift_slowAlloc();
  uint64_t v40 = swift_slowAlloc();
  uint64_t v55 = v40;
  *(_DWORD *)uint64_t v27 = 136446466;
  id v28 = [v23 waiterID:v40];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v32 = v31;

    uint64_t v51 = sub_1000C51B8(v30, v32, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2082;
    uint64_t v34 = v53;
    uint64_t v33 = v54;
    sub_1000C0DE0(v52, v53);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v34, v33);
    uint64_t v51 = sub_1000C51B8(v35, v36, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v52);
    os_log_t v37 = v42;
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v41, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v20 + 8))(v48, v50);
LABEL_9:
    uint64_t v38 = v22[3];
    uint64_t v39 = v22[5];
    sub_1000C0DE0(v22, v38);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
    sub_1004F618C(v47, (uint64_t)v22);

    return;
  }

  __break(1u);
}

uint64_t sub_1004F59B4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091BA40);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091BA40);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1004F5A7C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 8))(v12, a3, a4);
  uint64_t v8 = v13;
  if (!v13)
  {
    sub_1001CBADC((uint64_t)v12);
LABEL_5:
    uint64_t v10 = v5;
    sub_1004F5C18(a1, a2);
    swift_willThrow();
    return v10;
  }
  uint64_t v9 = v14;
  sub_1000C0DE0(v12, v13);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v9 + 8))(v4, a1, a2, v8, v9);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v12);
  if (!v10) {
    goto LABEL_5;
  }
  return v10;
}

id sub_1004F5B84()
{
  id result = [v0 waiterID];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = 0x646568736172632ELL;
    v4._object = (void *)0xE800000000000000;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1004F5C18(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = self;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 babySatErrorWithOperationName:v9];

  sub_100094134((uint64_t *)&unk_10090DC70);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = 0x696669746E656469;
  *(void *)(inited + 40) = 0xEA00000000007265;
  uint64_t v29 = a1;
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  unint64_t v12 = sub_1002EDFE8(inited);
  type metadata accessor for Analytics();
  sub_1004F5B84();
  sub_10042085C(v12);
  swift_bridgeObjectRelease();
  id v13 = v10;
  static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)();
  swift_bridgeObjectRelease();
  id v14 = v13;
  swift_bridgeObjectRelease();

  if (qword_100907710 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10008E2DC(v5, (uint64_t)qword_10091BA40);
  uint64_t v16 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v7, v15, v5);
  swift_bridgeObjectRetain_n();
  id v17 = v2;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v26 = v14;
    uint64_t v27 = v7;
    uint64_t v28 = v5;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_1000C51B8(v29, a2, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2082;
    id v21 = [v17 waiterID];
    if (v21)
    {
      char v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;

      uint64_t v31 = sub_1000C51B8(v23, v25, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Babysitting operation because it failed too many times {operation: %{public}s, waiterID: %{public}s}", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v28);
    }
    else
    {

      __break(1u);
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v5);
  }
}

id sub_1004F6058(uint64_t a1)
{
  uint64_t v3 = *v1;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 tokenByRegisteringAccount:a1 forOperationWithName:v4];

  return v5;
}

void sub_1004F60C0(void *a1)
{
  uint64_t v2 = *v1;
  id v3 = [a1 waiterID];
  [v2 giveAccountWithIDAnotherChance:v3];
}

uint64_t sub_1004F6128()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDSimpleExecutable()
{
  return self;
}

void sub_1004F618C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907710 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10008E2DC(v4, (uint64_t)qword_10091BA40);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_1003F08EC(a2, (uint64_t)v26);
  id v9 = a1;
  id v10 = Logger.logObject.getter();
  int v11 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v10, (os_log_type_t)v11))
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v26);
    goto LABEL_7;
  }
  int v23 = v11;
  uint64_t v12 = swift_slowAlloc();
  uint64_t v22 = swift_slowAlloc();
  uint64_t v25 = v22;
  *(_DWORD *)uint64_t v12 = 136446466;
  id v13 = [v9 waiterID:v22];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    uint64_t v24 = sub_1000C51B8(v15, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v18 = v27;
    uint64_t v19 = v28;
    sub_1000C0DE0(v26, v27);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
    uint64_t v24 = sub_1000C51B8(v20, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v26);
    _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v23, "Released babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_7:

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return;
  }

  __break(1u);
}

unint64_t sub_1004F64A0()
{
  unint64_t result = qword_10090F1A8;
  if (!qword_10090F1A8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090F1A8);
  }
  return result;
}

uint64_t sub_1004F64E0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for RDMentionsExtractor()
{
  return sub_1000E6FBC();
}

uint64_t sub_1004F6530()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1004F65D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    id v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_1004F66D4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_1004F6748(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  swift_bridgeObjectRetain();
  v5(v7, v8, v4);
  return a1;
}

void *sub_1004F67D8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_1004F6868(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_1004F68D8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_1004F6960(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1004F6B00(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1004F6D5CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for RDMentionsExtractor.Candidate()
{
  return sub_1000E6FBC();
}

uint64_t sub_1004F6D9C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1004F6E34(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_1004F6F2C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1004F6F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1004F6FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t sub_1004F7058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1004F70D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t sub_1004F7158(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1004F726CLL);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void sub_1004F7280(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unsigned int v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1004F742CLL);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for RDMentionsExtractor.ExtractionResult()
{
  return sub_1000E6FBC();
}

uint64_t sub_1004F746C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091BC88);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091BC88);
  if (qword_100907858 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942550);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1004F7534(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    goto LABEL_22;
  }
  unint64_t v2 = sub_1001806F8(0xD000000000000013, 0x80000001007D7420);
  if ((v3 & 1) == 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (*(void *)(a1 + 16)) {
      goto LABEL_13;
    }
LABEL_22:
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    goto LABEL_23;
  }
  sub_10009A1B0(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v39);
  int v4 = swift_dynamicCast();
  if (v4) {
    uint64_t v5 = v37;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    uint64_t v6 = v38;
  }
  else {
    uint64_t v6 = 0;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_22;
  }
LABEL_13:
  unint64_t v7 = sub_1001806F8(0x7274537865486164, 0xEB00000000676E69);
  if (v8)
  {
    sub_10009A1B0(*(void *)(a1 + 56) + 32 * v7, (uint64_t)v39);
    int v9 = swift_dynamicCast();
    if (v9) {
      uint64_t v10 = v37;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v9) {
      uint64_t v11 = v38;
    }
    else {
      uint64_t v11 = 0;
    }
    if (!*(void *)(a1 + 16)) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    if (!*(void *)(a1 + 16)) {
      goto LABEL_23;
    }
  }
  unint64_t v26 = sub_1001806F8(0xD000000000000013, 0x80000001007D7440);
  if (v27)
  {
    sub_10009A1B0(*(void *)(a1 + 56) + 32 * v26, (uint64_t)v39);
    int v28 = swift_dynamicCast();
    if (v28) {
      uint64_t v12 = v37;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v28) {
      uint64_t v13 = v38;
    }
    else {
      uint64_t v13 = 0;
    }
    if (!*(void *)(a1 + 16)) {
      goto LABEL_48;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_48;
  }
LABEL_24:
  unint64_t v14 = sub_1001806F8(6579570, 0xE300000000000000);
  if (v15)
  {
    sub_10009A1B0(*(void *)(a1 + 56) + 32 * v14, (uint64_t)v39);
    if (swift_dynamicCast())
    {
      if (*(void *)(a1 + 16))
      {
        unint64_t v16 = sub_1001806F8(0x6E65657267, 0xE500000000000000);
        if (v17)
        {
          sub_10009A1B0(*(void *)(a1 + 56) + 32 * v16, (uint64_t)v39);
          if (swift_dynamicCast())
          {
            if (*(void *)(a1 + 16))
            {
              unint64_t v18 = sub_1001806F8(1702194274, 0xE400000000000000);
              if (v19)
              {
                sub_10009A1B0(*(void *)(a1 + 56) + 32 * v18, (uint64_t)v39);
                if (swift_dynamicCast())
                {
                  if (*(void *)(a1 + 16))
                  {
                    unint64_t v20 = sub_1001806F8(0x6168706C61, 0xE500000000000000);
                    if (v21)
                    {
                      sub_10009A1B0(*(void *)(a1 + 56) + 32 * v20, (uint64_t)v39);
                      if (swift_dynamicCast())
                      {
                        if (*(void *)(a1 + 16))
                        {
                          unint64_t v22 = sub_1001806F8(0x424752726F6C6F63, 0xED00006563617053);
                          if (v23)
                          {
                            sub_10009A1B0(*(void *)(a1 + 56) + 32 * v22, (uint64_t)v39);
                            if (swift_dynamicCast())
                            {
                              id v24 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
                              return sub_1004F7AA0(v37, *(double *)&v37, *(double *)&v37, *(double *)&v37, *(double *)&v37, v5, v6, v10, v11, v12, v13);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_48:
  swift_bridgeObjectRelease();
  if (v6)
  {
    id v29 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (!v11)
    {
      NSString v31 = 0;
LABEL_54:
      id v25 = [v29 initWithDASymbolicColorName:v30 daHexString:v31];

      return v25;
    }
LABEL_53:
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  if (v11)
  {
    id v29 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v30 = 0;
    goto LABEL_53;
  }
  if (qword_100907718 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_10008E2DC(v33, (uint64_t)qword_10091BC88);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    unint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Can't construct REMColor from invalid JSON", v36, 2u);
    swift_slowDealloc();
  }

  return 0;
}

id sub_1004F7A78@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = sub_1004F7534(a1);
  *a2 = result;
  return result;
}

id sub_1004F7AA0(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a7)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a9) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v20 = 0;
    if (a11) {
      goto LABEL_4;
    }
LABEL_7:
    NSString v21 = 0;
    goto LABEL_8;
  }
  NSString v19 = 0;
  if (!a9) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a11) {
    goto LABEL_7;
  }
LABEL_4:
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_8:
  id v22 = [v11 initWithRed:a1 green:v19 blue:v20 alpha:v21 colorSpace:a2 daSymbolicColorName:a3 daHexString:a4 ckSymbolicColorName:a5];

  return v22;
}

id sub_1004F7BBC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v195 = a8;
  uint64_t v217 = type metadata accessor for TimeZone();
  unint64_t v199 = *(void *)(v217 - 8);
  __chkstk_darwin(v217);
  v216 = (char *)&v191 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = type metadata accessor for Calendar.Identifier();
  uint64_t v194 = *(void *)(v215 - 8);
  __chkstk_darwin(v215);
  v214 = (char *)&v191 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v213 = type metadata accessor for Calendar();
  uint64_t v193 = *(void *)(v213 - 8);
  __chkstk_darwin(v213);
  v212 = (char *)&v191 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = (void *)type metadata accessor for DateComponents();
  uint64_t v202 = *(v219 - 1);
  __chkstk_darwin(v219);
  uint64_t v211 = (char *)&v191 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = type metadata accessor for Date();
  uint64_t v203 = *(void *)(v218 - 8);
  __chkstk_darwin(v218);
  v210 = (char *)&v191 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v21 - 8);
  uint64_t v196 = (char *)&v191 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v23 - 8);
  uint64_t v197 = (uint64_t)&v191 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v208 = (uint64_t)&v191 - v26;
  __chkstk_darwin(v27);
  uint64_t v207 = (uint64_t)&v191 - v28;
  uint64_t v29 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v29 - 8);
  unint64_t v200 = (char *)&v191 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v206 = (void (**)(char *, uint64_t))((char *)&v191 - v32);
  id v33 = objc_allocWithZone((Class)REMReminderStorage);
  id v223 = a2;
  id v222 = a4;
  id v34 = [v33 initWithObjectID:a2 listID:a3 accountID:a4];
  [v34 setParentReminderID:a5];
  [v34 setMinimumSupportedVersion:a6];
  [v34 setEffectiveMinimumSupportedVersion:a7];
  uint64_t v35 = type metadata accessor for RDSavedReminder();
  unint64_t v36 = *(char ***)(a1 + *(int *)(v35 + 36));
  uint64_t v204 = a1;
  unint64_t v205 = (int *)v35;
  if (v36)
  {
    unint64_t v37 = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
    *(void *)&long long v227 = &_swiftEmptySetSingleton;
    v221 = v36[2];
    if (v221)
    {
      id v198 = v34;
      v220 = (void (**)(void, uint64_t))self;
      uint64_t v38 = v36 + 8;
      os_log_t v192 = v36;
      swift_bridgeObjectRetain();
      uint64_t v39 = 1;
      while (1)
      {
        v224 = (void (**)(char *, uint64_t))*(v38 - 1);
        uint64_t v40 = *v38;
        v225 = (void (**)(char *, void, uint64_t))*(v38 - 4);
        swift_bridgeObjectRetain();
        v226 = v40;
        swift_bridgeObjectRetain();
        id v41 = [v220 newObjectID];
        unint64_t v42 = v37;
        id v43 = objc_allocWithZone((Class)REMHashtag);
        swift_bridgeObjectRetain();
        id v44 = v222;
        id v45 = v223;
        NSString v46 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v47 = v43;
        unint64_t v37 = v42;
        id v48 = [v47 initWithObjectID:v41 accountID:v44 reminderID:v45 type:v225 name:v46];

        id v49 = v48;
        sub_10031F010(&v236, v49);

        if (v37)
        {
          uint64_t v50 = (uint64_t)v226;
          swift_bridgeObjectRetain();
          id v51 = [v49 objectIdentifier];
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v54 = v53;

          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v236 = v37;
          sub_1002C3F10(v52, v54, (uint64_t)v224, v50, isUniquelyReferenced_nonNull_native);
          unint64_t v37 = v236;
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (v221 == (char *)v39) {
          break;
        }
        v38 += 5;
        if (__OFADD__(v39++, 1))
        {
          __break(1u);
          break;
        }
      }
      swift_bridgeObjectRelease();
      id v34 = v198;
    }
    sub_1000963CC(0, &qword_10090DC80);
    sub_1000ED098((unint64_t *)&qword_10090B7C0, &qword_10090DC80);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v34 setHashtags:isa];

    a1 = v204;
    uint64_t v58 = (uint64_t)v205;
  }
  else
  {
    uint64_t v58 = v35;
    unint64_t v37 = 0;
  }
  uint64_t v59 = v203;
  id v60 = [v34 titleReplicaIDSource];
  uint64_t v61 = (uint64_t *)(a1 + *(int *)(v58 + 60));
  uint64_t v62 = *v61;
  unint64_t v63 = v61[1];
  id v64 = objc_allocWithZone((Class)REMCRMergeableStringDocument);
  sub_100097E38(v62, v63);
  uint64_t v65 = v209;
  id v66 = sub_10028B1B0((uint64_t)v60);
  if (!v65)
  {
    uint64_t v67 = v66;
    sub_100097F34(v62, v63);

    if (v37)
    {
      id v68 = v67;
      swift_bridgeObjectRetain();
      uint64_t v69 = (void *)REMCRMergeableStringDocument.replacingInlineHashtagIDs(newHashtagID_byOriginalHashtagID:)();
      swift_bridgeObjectRelease();

      uint64_t v70 = v204;
    }
    else
    {
      uint64_t v70 = v204;
      uint64_t v69 = v67;
    }
    uint64_t v71 = v205;
    os_log_t v192 = (char **)v69;
    [v34 setTitleDocument:v69];
    uint64_t v72 = v70 + v71[10];
    unint64_t v73 = *(void *)(v72 + 8);
    if (v73 >> 60 == 15)
    {
      uint64_t v74 = v218;
    }
    else
    {
      uint64_t v75 = *(void *)v72;
      sub_100097E38(*(void *)v72, *(void *)(v72 + 8));
      id v76 = [v34 notesReplicaIDSource];
      id v77 = objc_allocWithZone((Class)REMCRMergeableStringDocument);
      sub_100097E38(v75, v73);
      Class v78 = sub_10028B1B0((uint64_t)v76);
      sub_100097F20(v75, v73);

      if (v37)
      {
        swift_bridgeObjectRetain();
        id v79 = v78;
        Class v78 = (void *)REMCRMergeableStringDocument.replacingInlineHashtagIDs(newHashtagID_byOriginalHashtagID:)();
        swift_bridgeObjectRelease();
      }
      uint64_t v70 = v204;
      uint64_t v74 = v218;
      [v34 setNotesDocument:v78];
      sub_100097F20(v75, v73);

      uint64_t v71 = v205;
    }
    [v34 setPriority:*(void *)(v70 + v71[11])];
    [v34 setFlagged:*(void *)(v70 + v71[8])];
    unint64_t v80 = v206;
    sub_1000BF710(v70, (uint64_t)v206, (uint64_t *)&unk_100909A40);
    unint64_t v81 = *(unsigned int (**)(void, void, void))(v59 + 48);
    if (v81(v80, 1, v74) == 1)
    {
      Class v82 = 0;
    }
    else
    {
      uint64_t v83 = v80;
      Class v82 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(void, uint64_t))(v59 + 8))(v83, v74);
    }
    uint64_t v84 = (uint64_t)v200;
    [v34 setCreationDate:v82];

    sub_1000BF710(v204, v84, (uint64_t *)&unk_100909A40);
    if (v81(v84, 1, v74) == 1)
    {
      Class v85 = 0;
    }
    else
    {
      Class v85 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v84, v74);
    }
    id v86 = v205;
    uint64_t v87 = v202;
    [v34 setLastModifiedDate:v85];

    uint64_t v88 = v204;
    uint64_t v89 = v207;
    sub_1000BF710(v204 + v86[13], v207, (uint64_t *)&unk_100911810);
    unint64_t v90 = v219;
    v226 = *(char **)(v87 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, void *))v226)(v89, 1, v219) == 1)
    {
      Class v91 = 0;
    }
    else
    {
      uint64_t v92 = v89;
      Class v91 = DateComponents._bridgeToObjectiveC()().super.isa;
      uint64_t v93 = v92;
      unint64_t v90 = v219;
      (*(void (**)(uint64_t, void *))(v87 + 8))(v93, v219);
    }
    [v34 setStartDateComponents:v91];

    uint64_t v94 = v88 + v205[7];
    uint64_t v95 = v208;
    sub_1000BF710(v94, v208, (uint64_t *)&unk_100911810);
    if (((unsigned int (*)(uint64_t, uint64_t, void *))v226)(v95, 1, v90) == 1)
    {
      Class v96 = 0;
    }
    else
    {
      Class v97 = v90;
      Class v96 = DateComponents._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, void *))(v202 + 8))(v95, v97);
    }
    uint64_t v98 = 0;
    [v34 setDueDateComponents:v96];

    id v99 = sub_10014A580();
    [v34 setDisplayDate:v99];

    id v100 = sub_10014A580();
    if (v100)
    {
      id v101 = v100;
      id v102 = [v100 isAllDay];

      [v34 setAllDay:v102];
      if (v102)
      {
        NSString v103 = 0;
        uint64_t v104 = v204;
        Class v105 = v205;
        unint64_t v106 = v199;
        goto LABEL_46;
      }
    }
    else
    {
      [v34 setAllDay:0];
    }
    uint64_t v107 = v197;
    sub_1000BF710(v94, v197, (uint64_t *)&unk_100911810);
    unint64_t v108 = v219;
    if (((unsigned int (*)(uint64_t, uint64_t, void *))v226)(v107, 1, v219) == 1)
    {
      sub_1000966BC(v107, (uint64_t *)&unk_100911810);
      unint64_t v106 = v199;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v199 + 56))(v196, 1, 1, v217);
      NSString v103 = 0;
      uint64_t v104 = v204;
      Class v105 = v205;
    }
    else
    {
      Class v109 = v196;
      DateComponents.timeZone.getter();
      (*(void (**)(uint64_t, void *))(v202 + 8))(v107, v108);
      unint64_t v106 = v199;
      uint64_t v110 = v217;
      int v111 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v199 + 48))(v109, 1, v217);
      Class v105 = v205;
      if (v111 == 1)
      {
        NSString v103 = 0;
      }
      else
      {
        Class v112 = TimeZone._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v106 + 8))(v109, v110);
        id v113 = [(objc_class *)v112 name];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v103 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      uint64_t v104 = v204;
    }
LABEL_46:
    [v34 setTimeZone:v103];

    id v114 = (uint64_t *)(v104 + v105[5]);
    uint64_t v115 = *v114;
    if (!*v114)
    {
LABEL_84:
      uint64_t v165 = *(void *)(v104 + v105[6]);
      if (!v165 || !*(void *)(v165 + 16)) {
        goto LABEL_96;
      }
      id v166 = v222;
      id v167 = v223;
      uint64_t v168 = v201;
      swift_retain();
      unint64_t v169 = (unint64_t)sub_1004FDB9C(v165, v168, v167, v166);
      swift_release();

      if (!(v169 >> 62))
      {
        if (*(void *)((v169 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_88:
          unint64_t v171 = swift_bridgeObjectRetain();
          unint64_t v172 = sub_1000C9EA8(v171);
          if (v98)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

LABEL_106:
            goto LABEL_107;
          }
          v173 = (void *)v172;
          swift_bridgeObjectRelease();
          *(void *)&long long v227 = v173;
          type metadata accessor for RDDueDateDeltaAlerts();
          sub_1004FF278((unint64_t *)&unk_10090C4C8, (void (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlerts);
          uint64_t v174 = REMJSONRepresentable.toJSONData()();
          unint64_t v176 = v175;

          Class v177 = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F34(v174, v176);
          [v34 setDueDateDeltaAlertsData:v177];

          goto LABEL_95;
        }
LABEL_94:
        [v34 setDueDateDeltaAlertsData:0];
LABEL_95:
        uint64_t v104 = v204;
        Class v105 = v205;
LABEL_96:
        if ([*(id *)(v201 + 16) includeDueDateDeltaAlerts])
        {
          sub_1000963CC(0, (unint64_t *)&unk_100920C30);
          swift_bridgeObjectRetain();
          Class v179 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v34 setFetchedDueDateDeltaAlerts:v179];
        }
        uint64_t v180 = *(void *)(v104 + v105[12]);
        if (v180 && *(void *)(v180 + 16))
        {
          id v181 = v222;
          id v182 = v223;
          sub_1004FDA48(v180, v181, v182);

          Class v105 = v205;
          sub_1000963CC(0, (unint64_t *)&qword_100911840);
          Class v183 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v34 setRecurrenceRules:v183];

          uint64_t v104 = v204;
        }
        uint64_t v184 = v104 + v105[16];
        unint64_t v185 = *(void *)(v184 + 8);
        if (v185 >> 60 != 15)
        {
          uint64_t v186 = *(void *)v184;
          sub_100097E38(*(void *)v184, *(void *)(v184 + 8));
          Class v187 = Data._bridgeToObjectiveC()().super.isa;
          id v188 = [self representationFromData:v187];

          [v34 setContactHandles:v188];
          sub_100097F20(v186, v185);
        }
        [v34 setResolutionTokenMap:0];
        Class v189 = 0;
        if (a9 >> 60 != 15) {
          Class v189 = Data._bridgeToObjectiveC()().super.isa;
        }
        [v34 setResolutionTokenMapData:v189];
        swift_bridgeObjectRelease();

        goto LABEL_106;
      }
LABEL_93:
      swift_bridgeObjectRetain();
      uint64_t v178 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v178) {
        goto LABEL_88;
      }
      goto LABEL_94;
    }
    uint64_t v209 = v114[3];
    uint64_t v116 = v114[1];
    uint64_t v208 = v114[2];
    unint64_t v236 = (unint64_t)_swiftEmptyArrayStorage;
    Class v117 = *(char **)(v115 + 16);
    unint64_t v199 = v37;
    v226 = v117;
    id v198 = v34;
    uint64_t v207 = v116;
    if (v117)
    {
      unint64_t v200 = 0;
      v225 = (void (**)(char *, void, uint64_t))(v194 + 104);
      v224 = (void (**)(char *, uint64_t))(v194 + 8);
      LODWORD(v221) = enum case for Calendar.Identifier.gregorian(_:);
      v220 = (void (**)(void, uint64_t))(v106 + 8);
      v206 = (void (**)(char *, uint64_t))(v193 + 8);
      id v118 = (void (**)(char *, id))(v202 + 8);
      id v119 = (void (**)(char *, uint64_t))(v203 + 8);
      uint64_t v120 = swift_bridgeObjectRetain();
      id v121 = 0;
      uint64_t v122 = v210;
      uint64_t v123 = v211;
      do
      {
        uint64_t v124 = v120;
        Date.init(timeIntervalSinceReferenceDate:)();
        uint64_t v125 = v214;
        uint64_t v126 = v215;
        (*v225)(v214, v221, v215);
        uint64_t v127 = v212;
        Calendar.init(identifier:)();
        (*v224)(v125, v126);
        uint64_t v128 = v216;
        static TimeZone.current.getter();
        Calendar.dateComponents(in:from:)();
        (*v220)(v128, v217);
        (*v206)(v127, v213);
        id v129 = objc_allocWithZone((Class)REMAlarmDateTrigger);
        Class v130 = DateComponents._bridgeToObjectiveC()().super.isa;
        [v129 initWithDateComponents:v130];

        (*v118)(v123, v219);
        (*v119)(v122, v218);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v121;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v120 = v124;
      }
      while (v226 != v121);
      swift_bridgeObjectRelease();
      id v34 = v198;
      uint64_t v98 = v200;
      uint64_t v116 = v207;
    }
    uint64_t v131 = *(void *)(v116 + 16);
    if (v131)
    {
      unint64_t v200 = v98;
      swift_bridgeObjectRetain_n();
      uint64_t v217 = v131 - 1;
      uint64_t v132 = 32;
      while (1)
      {
        v216 = (char *)v132;
        uint64_t v133 = (long long *)(v116 + v132);
        long long v227 = *v133;
        long long v134 = v133[1];
        long long v135 = v133[2];
        long long v136 = v133[4];
        long long v230 = v133[3];
        long long v231 = v136;
        long long v228 = v134;
        long long v229 = v135;
        long long v137 = v133[5];
        long long v138 = v133[6];
        long long v139 = v133[8];
        long long v234 = v133[7];
        long long v235 = v139;
        long long v232 = v137;
        long long v233 = v138;
        v226 = (char *)v137;
        uint64_t v140 = *((void *)&v139 + 1);
        v225 = (void (**)(char *, void, uint64_t))v139;
        uint64_t v141 = v230;
        v224 = (void (**)(char *, uint64_t))*((void *)&v229 + 1);
        double v142 = *(double *)&v229;
        double v143 = *((double *)&v230 + 1);
        double v144 = *((double *)&v137 + 1);
        uint64_t v145 = *((void *)&v227 + 1);
        v221 = (char *)v227;
        uint64_t v146 = *((void *)&v234 + 1);
        v220 = (void (**)(void, uint64_t))v234;
        uint64_t v147 = *((void *)&v138 + 1);
        uint64_t v218 = v138;
        long long v148 = v228;
        long long v149 = v231;
        v219 = objc_allocWithZone((Class)REMStructuredLocation);
        sub_100097D94((uint64_t)&v227);
        sub_100097D94((uint64_t)&v227);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100097E24(v149, *((unint64_t *)&v149 + 1));
        id v150 = sub_100097BA0(v142, v143, v144, (uint64_t)v225, v140, (uint64_t)v224, v141, (uint64_t)v221, v145, (uint64_t)v220, v146, v218, v147, v148, *((uint64_t *)&v148 + 1), v149, *((unint64_t *)&v149 + 1));
        id v151 = objc_allocWithZone((Class)REMAlarmLocationTrigger);
        id v152 = [v151 initWithStructuredLocation:v150 proximity:v226];
        sub_100097E90((uint64_t)&v227);

        id v153 = v152;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        sub_100097E90((uint64_t)&v227);
        if (!v217) {
          break;
        }
        --v217;
        uint64_t v132 = (uint64_t)(v216 + 144);
        uint64_t v116 = v207;
      }
      swift_bridgeObjectRelease_n();
      id v34 = v198;
      uint64_t v98 = v200;
    }
    uint64_t v154 = *(void *)(v208 + 16);
    if (v154)
    {
      unint64_t v200 = v98;
      uint64_t v155 = swift_bridgeObjectRetain();
      uint64_t v156 = 0;
      do
      {
        [objc_allocWithZone((Class)REMAlarmTimeIntervalTrigger) initWithTimeInterval:*(double *)(v155 + 8 * v156 + 32)];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v156;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v155 = v208;
      }
      while (v154 != v156);
      swift_bridgeObjectRelease();
      uint64_t v98 = v200;
    }
    uint64_t v157 = *(void *)(v209 + 16);
    if (v157)
    {
      unint64_t v200 = v98;
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v157; ++i)
      {
        [objc_allocWithZone((Class)REMAlarmVehicleTrigger) initWithEvent:*(void *)(v209 + 8 * i + 32)];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      swift_bridgeObjectRelease();
      uint64_t v98 = v200;
    }
    unint64_t v159 = v236;
    Class v105 = v205;
    if (v236 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v160 = _CocoaArrayWrapper.endIndex.getter();
      if (v160) {
        goto LABEL_74;
      }
    }
    else
    {
      uint64_t v160 = *(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v160)
      {
LABEL_74:
        unint64_t v200 = v98;
        *(void *)&long long v227 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        if (v160 < 0)
        {
          __break(1u);
          goto LABEL_93;
        }
        uint64_t v161 = 0;
        do
        {
          if ((v159 & 0xC000000000000001) != 0) {
            id v162 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v162 = *(id *)(v159 + 8 * v161 + 32);
          }
          id v163 = v162;
          ++v161;
          [objc_allocWithZone((Class)REMAlarm) initWithTrigger:v162];

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        while (v160 != v161);
        swift_bridgeObjectRelease();
        id v34 = v198;
        Class v105 = v205;
        uint64_t v98 = v200;
        goto LABEL_83;
      }
    }
    swift_bridgeObjectRelease();
LABEL_83:
    sub_1000963CC(0, &qword_10090C4B8);
    Class v164 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v34 setAlarms:v164];

    swift_bridgeObjectRelease();
    uint64_t v104 = v204;
    goto LABEL_84;
  }
  sub_100097F34(v62, v63);

LABEL_107:
  swift_bridgeObjectRelease();
  return v34;
}

char *sub_1004F972C(void *a1)
{
  id v77 = *v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RDSavedReminder();
  *(void *)&double v9 = __chkstk_darwin(v8 - 8).n128_u64[0];
  uint64_t v11 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v79 = 0;
  id v12 = [a1 remObjectIDWithError:&v79 v9];
  if (!v12)
  {
    id v23 = v79;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v11;
  }
  Class v78 = v12;
  id v13 = v79;
  unint64_t v14 = [a1 account];
  if (v14)
  {
    uint64_t v74 = v5;
    id v79 = 0;
    char v15 = v14;
    id v16 = [v14 remObjectIDWithError:&v79];
    if (v16)
    {
      uint64_t v75 = v15;
      id v76 = v16;
      id v17 = v79;
      id v18 = [a1 template];
      if (v18)
      {
        uint64_t v19 = v18;
        id v79 = 0;
        id v20 = [v18 remObjectIDWithError:&v79];
        if (v20)
        {
          uint64_t v21 = v20;
          id v22 = v79;
          sub_10024281C();
          if (v2)
          {
          }
          else
          {
            uint64_t v71 = v11;
            unint64_t v73 = REMCDSavedReminder.parentSavedReminderObjectID.getter();
            uint64_t v69 = [a1 minimumSupportedVersion];
            id v49 = [a1 effectiveMinimumSupportedVersion];
            id v50 = [a1 resolutionTokenMapData];
            id v77 = v21;
            id v70 = v19;
            if (v50)
            {
              id v51 = v50;
              uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v53 = v52;
            }
            else
            {
              uint64_t v72 = 0;
              unint64_t v53 = 0xF000000000000000;
            }
            id v68 = (void *)v53;
            uint64_t v11 = (char *)sub_1004F7BBC((uint64_t)v71, v78, (uint64_t)v77, v76, (uint64_t)v73, (uint64_t)v69, (uint64_t)v49, v72, v53);
            sub_100097F20(v72, (unint64_t)v68);

            uint64_t v54 = [a1 storeControllerManagedObjectContext];
            if (v54)
            {
              uint64_t v55 = v54;
              id v56 = [v54 storeController];
              id v57 = v77;
              id v58 = v70;
              if (v56)
              {
                uint64_t v59 = v56;
                id v60 = [a1 attachments];
                if (v60)
                {
                  uint64_t v61 = v60;
                  unint64_t v73 = v55;
                  type metadata accessor for REMCDSavedAttachment();
                  sub_1004FF278((unint64_t *)&unk_100910220, (void (*)(uint64_t))type metadata accessor for REMCDSavedAttachment);
                  uint64_t v62 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

                  if (qword_100907728 != -1) {
                    swift_once();
                  }
                  uint64_t v63 = sub_10008E2DC(v4, (uint64_t)qword_10091BCB8);
                  uint64_t v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 16))(v7, v63, v4);
                  uint64_t v69 = v67;
                  __chkstk_darwin(v64);
                  id v68 = v67;
                  uint64_t v72 = (uint64_t)v62;
                  id v79 = v62;
                  __chkstk_darwin(v65);
                  v67[1] = sub_100094134(&qword_10091BE78);
                  sub_1000963CC(0, (unint64_t *)&unk_100909EB0);
                  sub_1000967F4(&qword_10091BE80, &qword_10091BE78);
                  Sequence.map<A>(skippingError:_:)();
                  (*(void (**)(char *, uint64_t))(v74 + 8))(v7, v4);
                  swift_bridgeObjectRelease();
                  Class isa = Array._bridgeToObjectiveC()().super.isa;
                  swift_bridgeObjectRelease();
                  [v11 setAttachments:isa];
                }
                else
                {
                }
                sub_1000D575C((uint64_t)v71);
              }
              else
              {
                sub_1000D575C((uint64_t)v71);
              }
            }
            else
            {
              sub_1000D575C((uint64_t)v71);
            }
          }
          return v11;
        }
        id v44 = v79;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        id v45 = v78;
      }
      else
      {
        if (qword_100907728 != -1) {
          swift_once();
        }
        sub_10008E2DC(v4, (uint64_t)qword_10091BCB8);
        unint64_t v36 = v78;
        unint64_t v37 = v78;
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = swift_slowAlloc();
          unint64_t v73 = (void *)swift_slowAlloc();
          uint64_t v74 = swift_slowAlloc();
          uint64_t v80 = v74;
          *(_DWORD *)uint64_t v40 = 136446466;
          id v79 = v77;
          swift_getMetatypeMetadata();
          uint64_t v41 = String.init<A>(describing:)();
          id v79 = (id)sub_1000C51B8(v41, v42, &v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 12) = 2112;
          id v79 = v37;
          id v43 = v37;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v73 = v36;

          _os_log_impl((void *)&_mh_execute_header, v38, v39, "%{public}s: cdSavedReminder.template is nil {cdSavedReminder.remObjectID: %@}", (uint8_t *)v40, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        NSString v46 = self;
        type metadata accessor for REMCDSavedReminder();
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        uint64_t v11 = (char *)String._bridgeToObjectiveC()();
        [v46 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v11];

        swift_willThrow();
        id v45 = v75;
      }

      id v33 = v76;
    }
    else
    {
      id v32 = v79;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      id v33 = v78;
    }

    return v11;
  }
  if (qword_100907728 != -1) {
    swift_once();
  }
  sub_10008E2DC(v4, (uint64_t)qword_10091BCB8);
  uint64_t v24 = v78;
  uint64_t v25 = v78;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v75 = (void *)swift_slowAlloc();
    id v76 = (void *)swift_slowAlloc();
    uint64_t v80 = (uint64_t)v76;
    *(_DWORD *)uint64_t v28 = 136446466;
    id v79 = v77;
    swift_getMetatypeMetadata();
    uint64_t v29 = String.init<A>(describing:)();
    id v79 = (id)sub_1000C51B8(v29, v30, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2112;
    id v79 = v25;
    id v31 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v75 = v24;

    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s: cdSavedReminder.account is nil {cdSavedReminder.remObjectID: %@}", (uint8_t *)v28, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v34 = self;
  type metadata accessor for REMCDSavedReminder();
  uint64_t v35 = swift_getObjCClassFromMetadata();
  uint64_t v11 = (char *)String._bridgeToObjectiveC()();
  [v34 unexpectedNilPropertyWithClass:v35 property:v11];

  swift_willThrow();
  return v11;
}

uint64_t sub_1004FA360(char a1)
{
  uint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000010;
      break;
    case 2:
      uint64_t result = 0xD000000000000017;
      break;
    case 3:
    case 10:
    case 13:
      uint64_t result = 0xD000000000000011;
      break;
    case 4:
      uint64_t v3 = 0x44656C746974;
      goto LABEL_14;
    case 5:
      uint64_t result = 0x797469726F697270;
      break;
    case 6:
      uint64_t result = 0x64656767616C66;
      break;
    case 7:
      uint64_t result = 0x6E6F697461657263;
      break;
    case 8:
      uint64_t result = 0x6E65727275636572;
      break;
    case 9:
      uint64_t result = 0xD000000000000013;
      break;
    case 11:
      uint64_t result = 0x656E6F5A656D6974;
      break;
    case 12:
      uint64_t result = 0x7961446C6C61;
      break;
    case 14:
      uint64_t v3 = 0x447365746F6ELL;
LABEL_14:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x636F000000000000;
      break;
    case 15:
      uint64_t result = 0x656D686361747461;
      break;
    case 16:
      uint64_t result = 0x736D72616C61;
      break;
    case 17:
      uint64_t result = 0xD000000000000016;
      break;
    case 18:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 19:
      uint64_t result = 0xD000000000000024;
      break;
    case 20:
      uint64_t result = 0x7367617468736168;
      break;
    case 21:
      uint64_t result = 0x48746361746E6F63;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1004FA5F8(void *a1, uint64_t *a2, uint64_t a3, int a4, const char *a5)
{
  id v188 = a5;
  int v182 = a4;
  uint64_t v9 = *v5;
  uint64_t v10 = type metadata accessor for Date();
  unint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Class v177 = (char *)&v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v13 - 8);
  char v15 = (char *)&v159 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v178 = (uint64_t)&v159 - v17;
  uint64_t v181 = type metadata accessor for RDSavedReminder();
  __chkstk_darwin(v181);
  uint64_t v183 = (uint64_t)&v159 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v19 - 8);
  unint64_t v185 = (char *)&v159 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = type metadata accessor for UUID();
  unint64_t isa = *(void *)(v193 - 8);
  *(void *)&double v22 = __chkstk_darwin(v193).n128_u64[0];
  uint64_t v191 = (char *)&v159 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = a2;
  id v24 = [a2 createResolutionTokenMapIfNecessary:v22];
  uint64_t v25 = a1;
  id v26 = [a1 resolutionTokenMap];
  uint64_t v199 = a3;
  id v197 = v24;
  if (!v26)
  {
    if (qword_100907720 != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    sub_10008E2DC(v80, (uint64_t)qword_10091BCA0);
    uint64_t v81 = v199;
    swift_bridgeObjectRetain_n();
    id v82 = v25;
    uint64_t v83 = Logger.logObject.getter();
    int v84 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v83, (os_log_type_t)v84))
    {
      LODWORD(v198) = v84;
      uint64_t v85 = swift_slowAlloc();
      id v86 = (void *)swift_slowAlloc();
      uint64_t v87 = (void *)swift_slowAlloc();
      uint64_t v203 = (uint64_t)v87;
      *(_DWORD *)uint64_t v85 = 138543618;
      uint64_t v88 = [v82 objectID];
      uint64_t v201 = v88;
      uint64_t v196 = &v202;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v200 = v86;
      *id v86 = v88;

      *(_WORD *)(v85 + 12) = 2082;
      int64_t v89 = *(void *)(v81 + 16);
      if (v89)
      {
        id v195 = v87;
        uint64_t v201 = _swiftEmptyArrayStorage;
        sub_1001DE058(0, v89, 0);
        unint64_t v90 = (unsigned __int8 *)(v81 + 32);
        Class v91 = v201;
        unint64_t v92 = (unint64_t)"debugSyncDisabled";
        unint64_t v93 = (unint64_t)"daIsNotificationsCollection";
        unint64_t v94 = (unint64_t)"daCalendarItemUniqueIdentifier";
        unint64_t v95 = (unint64_t)"lastModifiedDate";
        Class v96 = "startDateComponents";
        Class v97 = "dueDateComponents";
        unint64_t v98 = (unint64_t)"attachments";
        unint64_t v99 = (unint64_t)"dueDateDeltaAlertsData";
        unint64_t v100 = (unint64_t)"dueDateDeltaAlertsToUpsert";
        do
        {
          int v101 = *v90++;
          unint64_t v102 = 0xE800000000000000;
          uint64_t v103 = 0x44497463656A626FLL;
          switch(v101)
          {
            case 1:
              unint64_t v102 = v92 | 0x8000000000000000;
              uint64_t v103 = 0xD000000000000010;
              break;
            case 2:
              uint64_t v103 = 0xD000000000000017;
              unint64_t v102 = v93 | 0x8000000000000000;
              break;
            case 3:
              uint64_t v103 = 0xD000000000000011;
              unint64_t v102 = v94 | 0x8000000000000000;
              break;
            case 4:
              uint64_t v104 = 0x44656C746974;
              goto LABEL_94;
            case 5:
              uint64_t v103 = 0x797469726F697270;
              break;
            case 6:
              unint64_t v102 = 0xE700000000000000;
              uint64_t v103 = 0x64656767616C66;
              break;
            case 7:
              unint64_t v102 = 0xEC00000065746144;
              uint64_t v103 = 0x6E6F697461657263;
              break;
            case 8:
              unint64_t v102 = 0xEF73656C75526563;
              uint64_t v103 = 0x6E65727275636572;
              break;
            case 9:
              uint64_t v103 = 0xD000000000000013;
              unint64_t v102 = v95 | 0x8000000000000000;
              break;
            case 10:
              uint64_t v103 = 0xD000000000000011;
              unint64_t v102 = (unint64_t)v96 | 0x8000000000000000;
              break;
            case 11:
              uint64_t v103 = 0x656E6F5A656D6974;
              break;
            case 12:
              unint64_t v102 = 0xE600000000000000;
              uint64_t v103 = 0x7961446C6C61;
              break;
            case 13:
              uint64_t v103 = 0xD000000000000011;
              unint64_t v102 = (unint64_t)v97 | 0x8000000000000000;
              break;
            case 14:
              uint64_t v104 = 0x447365746F6ELL;
LABEL_94:
              uint64_t v103 = v104 & 0xFFFFFFFFFFFFLL | 0x636F000000000000;
              unint64_t v102 = 0xED0000746E656D75;
              break;
            case 15:
              unint64_t v102 = 0xEB0000000073746ELL;
              uint64_t v103 = 0x656D686361747461;
              break;
            case 16:
              unint64_t v102 = 0xE600000000000000;
              uint64_t v103 = 0x736D72616C61;
              break;
            case 17:
              uint64_t v103 = 0xD000000000000016;
              unint64_t v102 = v98 | 0x8000000000000000;
              break;
            case 18:
              uint64_t v103 = 0xD00000000000001ALL;
              unint64_t v102 = v99 | 0x8000000000000000;
              break;
            case 19:
              uint64_t v103 = 0xD000000000000024;
              unint64_t v102 = v100 | 0x8000000000000000;
              break;
            case 20:
              uint64_t v103 = 0x7367617468736168;
              break;
            case 21:
              unint64_t v102 = 0xEE0073656C646E61;
              uint64_t v103 = 0x48746361746E6F63;
              break;
            default:
              break;
          }
          uint64_t v201 = v91;
          unint64_t v106 = v91[2];
          unint64_t v105 = v91[3];
          if (v106 >= v105 >> 1)
          {
            uint64_t v186 = (const char *)v100;
            Class v187 = (const char *)v99;
            uint64_t v193 = v93;
            uint64_t v194 = (const char *)v92;
            uint64_t v191 = (const char *)v95;
            os_log_t v192 = (const char *)v94;
            Class v189 = v97;
            uint64_t v190 = v96;
            id v188 = (const char *)v98;
            sub_1001DE058(v105 > 1, v106 + 1, 1);
            unint64_t v100 = (unint64_t)v186;
            unint64_t v99 = (unint64_t)v187;
            unint64_t v98 = (unint64_t)v188;
            Class v97 = v189;
            Class v96 = v190;
            unint64_t v95 = (unint64_t)v191;
            unint64_t v94 = (unint64_t)v192;
            unint64_t v93 = v193;
            unint64_t v92 = (unint64_t)v194;
            Class v91 = v201;
          }
          v91[2] = v106 + 1;
          uint64_t v107 = &v91[2 * v106];
          v107[4] = v103;
          v107[5] = v102;
          --v89;
        }
        while (v89);
      }
      uint64_t v108 = Array.description.getter();
      unint64_t v110 = v109;
      swift_bridgeObjectRelease();
      uint64_t v201 = (void *)sub_1000C51B8(v108, v110, &v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v198, "REMReminderStorageCDIngestor: merge(storage:into cdReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v85, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    int v111 = self;
    sub_1000963CC(0, &qword_1009100F8);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v113 = String._bridgeToObjectiveC()();
    [v111 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v113];

    swift_willThrow();
    id v114 = v197;
LABEL_133:

    return;
  }
  id v166 = v15;
  unint64_t v167 = v11;
  uint64_t v168 = v10;
  uint64_t v171 = v9;
  id v184 = v26;
  id v195 = sub_10047C94C(v26, a3);
  uint64_t v27 = *(void *)(a3 + 16);
  if (!v27)
  {
    uint64_t v35 = a1;
    uint64_t v30 = (uint64_t)v192;
    goto LABEL_123;
  }
  uint64_t v28 = a3;
  id v163 = (void (**)(char *, const char *, uint64_t))(isa + 32);
  uint64_t v165 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(isa + 56);
  id v162 = (unsigned int (**)(char *, uint64_t, uint64_t))(isa + 48);
  Class v179 = (void (**)(char *, uint64_t))(isa + 8);
  swift_bridgeObjectRetain();
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  LODWORD(v187) = 0;
  int v172 = 0;
  int v173 = 0;
  LODWORD(v31) = 0;
  int v174 = 0;
  int v175 = 0;
  int v176 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = v27 - 1;
  uint64_t v190 = "debugSyncDisabled";
  *(void *)&long long v34 = 136315138;
  long long v169 = v34;
  Class v164 = (char *)&type metadata for Any + 8;
  Class v189 = "daIsNotificationsCollection";
  *(void *)&long long v34 = 136446466;
  long long v161 = v34;
  uint64_t v180 = v25;
  uint64_t v35 = v25;
  uint64_t v198 = v27 - 1;
  while (2)
  {
    uint64_t v39 = v29++;
    switch(*(unsigned char *)(v28 + v39 + 32))
    {
      case 1:
        LODWORD(v200) = v30;
        if (qword_100907730 != -1) {
          swift_once();
        }
        uint64_t v40 = *(void *)(qword_1009422E0 + 16);
        unint64_t v41 = (unint64_t)v190 | 0x8000000000000000;
        LODWORD(v194) = v31;
        if (!v40) {
          goto LABEL_46;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(0xD000000000000010, v41);
        if (v42)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_46:
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v61 = type metadata accessor for Logger();
          sub_10008E2DC(v61, (uint64_t)qword_100917690);
          uint64_t v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v62, v63))
          {
            uint64_t v64 = swift_slowAlloc();
            uint64_t v203 = swift_slowAlloc();
            *(_DWORD *)uint64_t v64 = v169;
            *(void *)(v64 + 4) = sub_1000C51B8(0xD000000000000010, (unint64_t)v190 | 0x8000000000000000, &v203);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v62, v63, "Unknown ingestable key {key: %s}", (uint8_t *)v64, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v35 = v180;
            swift_slowDealloc();
          }
        }
        NSString v65 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unint64_t isa = (unint64_t)[v197 mergeWithMap:v195 forKey:v65];

        LODWORD(v31) = v194;
        if ((isa & 1) == 0) {
          goto LABEL_67;
        }
        id v66 = [v35 parentReminderID];
        unint64_t isa = (unint64_t)v66;
        if (v66)
        {
          id v67 = [v66 uuid];

          id v68 = v191;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v69 = v185;
          id v70 = v68;
          uint64_t v71 = v193;
          (*v163)(v185, v70, v193);
          (*v165)(v69, 0, 1, v71);
          if ((*v162)(v69, 1, v71) == 1)
          {
            unint64_t isa = 0;
          }
          else
          {
            id v79 = v69;
            unint64_t isa = (unint64_t)UUID._bridgeToObjectiveC()().super.isa;
            (*v179)(v79, v71);
          }
        }
        else
        {
          (*v165)(v185, 1, 1, v193);
        }
        uint64_t v28 = v199;
        [v196 setParentSavedReminderIdentifier:isa];

        uint64_t v33 = v198;
        if (v198 != v39)
        {
          unint64_t v32 = 1;
          uint64_t v30 = v200;
          goto LABEL_7;
        }
        goto LABEL_144;
      case 2:
        LODWORD(v200) = v30;
        LODWORD(v194) = v31;
        if (qword_100907730 != -1) {
          swift_once();
        }
        unint64_t v43 = (unint64_t)v189 | 0x8000000000000000;
        if (!*(void *)(qword_1009422E0 + 16)) {
          goto LABEL_57;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(0xD000000000000017, v43);
        if (v44)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_57:
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v72 = type metadata accessor for Logger();
          sub_10008E2DC(v72, (uint64_t)qword_100917690);
          unint64_t v73 = Logger.logObject.getter();
          os_log_type_t v74 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v73, v74))
          {
            uint64_t v75 = swift_slowAlloc();
            unsigned int v170 = v32;
            uint64_t v76 = v75;
            uint64_t v203 = swift_slowAlloc();
            *(_DWORD *)uint64_t v76 = v169;
            *(void *)(v76 + 4) = sub_1000C51B8(0xD000000000000017, (unint64_t)v189 | 0x8000000000000000, &v203);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v73, v74, "Unknown ingestable key {key: %s}", (uint8_t *)v76, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            unint64_t v32 = v170;
            swift_slowDealloc();
          }

          uint64_t v35 = v180;
        }
        NSString v77 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unint64_t isa = (unint64_t)[v197 mergeWithMap:v195 forKey:v77];

        LODWORD(v31) = v194;
        if ((isa & 1) == 0) {
          goto LABEL_67;
        }
        id v78 = [v35 minimumSupportedVersion];
        [v196 setMinimumSupportedVersion:v78];
        uint64_t v33 = v198;
        if (v198 != v39)
        {
          unint64_t v32 = 1;
LABEL_68:
          uint64_t v28 = v199;
          uint64_t v30 = v200;
LABEL_7:
          if (v27 == v29)
          {
            __break(1u);
            goto LABEL_147;
          }
          continue;
        }
LABEL_144:
        swift_bridgeObjectRelease();
        if ((v200 & 1) == 0)
        {
LABEL_145:
          uint64_t v30 = (uint64_t)v192;
          goto LABEL_121;
        }
LABEL_113:
        LOBYTE(v32) = 1;
LABEL_115:
        uint64_t v30 = (uint64_t)v192;
LABEL_116:
        NSString v115 = String._bridgeToObjectiveC()();
        unsigned int v116 = [v197 mergeWithMap:v195 forKey:v115];

        if (!v116)
        {
LABEL_120:
          if (v32) {
            goto LABEL_121;
          }
          goto LABEL_123;
        }
        if (v176)
        {
          sub_1004FE044(v35);
          if (v30)
          {
            goto LABEL_132;
          }
        }
        id v137 = v35;
        uint64_t v138 = v183;
        sub_10014BDE4(v137, v182 & 1, v183);
        if (v30)
        {
LABEL_132:

          id v114 = v195;
          goto LABEL_133;
        }
        type metadata accessor for JSONEncoder();
        swift_allocObject();
        JSONEncoder.init()();
        sub_1004FF278(&qword_10091B4C0, (void (*)(uint64_t))type metadata accessor for RDSavedReminder);
        uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
        unint64_t v32 = v139;
        swift_release();
        Class v140 = Data._bridgeToObjectiveC()().super.isa;
        [v196 setMetadata:v140];

        if (v187)
        {
          swift_bridgeObjectRetain();
          char v141 = (char)v31;
          id v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v196 setTitle:v31];

          LOBYTE(v31) = v141;
        }
        uint64_t v142 = v181;
        if (v172)
        {
          if (*(void *)(v138 + *(int *)(v181 + 44)) >= 0x7FFFuLL) {
            uint64_t v143 = 0x7FFFLL;
          }
          else {
            uint64_t v143 = *(void *)(v138 + *(int *)(v181 + 44));
          }
          id v144 = [objc_allocWithZone((Class)NSNumber) initWithShort:v143];
          [v196 setPriority:v144];

          uint64_t v142 = v181;
        }
        if (v173)
        {
          uint64_t v28 = v178;
          sub_1000BF710(v138, v178, (uint64_t *)&unk_100909A40);
          unint64_t isa = v167;
          uint64_t v27 = v168;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v28, 1, v168) == 1)
          {
            Class v145 = 0;
            goto LABEL_148;
          }
LABEL_147:
          char v146 = (char)v31;
          id v31 = (_DWORD *)v28;
          Class v145 = Date._bridgeToObjectiveC()().super.isa;
          uint64_t v147 = v31;
          LOBYTE(v31) = v146;
          (*(void (**)(_DWORD *, uint64_t))(isa + 8))(v147, v27);
LABEL_148:
          [v196 setCreationDate:v145];

          uint64_t v138 = v183;
          uint64_t v142 = v181;
        }
        if (v31)
        {
          id v148 = sub_10014A580();
          if (v148)
          {
            long long v149 = v148;
            id v150 = [v148 date];
            id v151 = v177;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            Class v152 = Date._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v167 + 8))(v151, v168);
            id v153 = v196;
            [v196 setDisplayDateDate:v152];

            [v153 setDisplayDateIsAllDay:[v149 isAllDay]];
          }
          else
          {
            uint64_t v154 = v196;
            [v196 setDisplayDateDate:0];
            [v154 setDisplayDateIsAllDay:0];
          }
          uint64_t v142 = v181;
        }
        if (v174)
        {
          uint64_t v155 = *(void *)(v138 + *(int *)(v142 + 36));
          if (v155) {
            BOOL v156 = *(void *)(v155 + 16) != 0;
          }
          else {
            BOOL v156 = 0;
          }
          [v196 setHasHashtags:v156];
        }
        if (v175)
        {
          uint64_t v157 = (void *)(v138 + *(int *)(v142 + 20));
          if (*v157)
          {
            if (*(void *)(v157[1] + 16)) {
              BOOL v158 = 1;
            }
            else {
              BOOL v158 = *(void *)(v157[3] + 16) != 0;
            }
          }
          else
          {
            BOOL v158 = 0;
          }
          [v196 setHasLocationTriggersOrVehicleEventTriggers:v158];
          sub_100097F34(v29, v32);
          sub_1000D575C(v138);
        }
        else
        {
          sub_1000D575C(v138);
          sub_100097F34(v29, v32);
        }
LABEL_121:
        id v118 = [v196 template];
        if (v118)
        {
          id v119 = v118;
          uint64_t v120 = (uint64_t)v166;
          static Date.now.getter();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v167 + 56))(v120, 0, 1, v168);
          uint64_t KeyPath = (NSURL *)swift_getKeyPath();
          sub_10015F5D0(KeyPath, v120);
          swift_release();
          sub_1000966BC(v120, (uint64_t *)&unk_100909A40);
        }
LABEL_123:
        id v122 = [v196 metadata];
        if (v122)
        {
          uint64_t v123 = v122;
          uint64_t v124 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v126 = v125;

          sub_100097F34(v124, v126);
          goto LABEL_132;
        }
        if (qword_100907720 != -1) {
          swift_once();
        }
        uint64_t v127 = type metadata accessor for Logger();
        sub_10008E2DC(v127, (uint64_t)qword_10091BCA0);
        id v128 = v35;
        id v129 = Logger.logObject.getter();
        os_log_type_t v130 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v129, v130))
        {
          uint64_t v131 = swift_slowAlloc();
          uint64_t v132 = swift_slowAlloc();
          os_log_t v192 = (const char *)v30;
          uint64_t v133 = (void *)v132;
          uint64_t v201 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v131 = 136446466;
          uint64_t v203 = v171;
          swift_getMetatypeMetadata();
          uint64_t v134 = String.init<A>(describing:)();
          uint64_t v203 = sub_1000C51B8(v134, v135, (uint64_t *)&v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v131 + 12) = 2114;
          id v136 = [v128 objectID];
          uint64_t v203 = (uint64_t)v136;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v133 = v136;

          _os_log_impl((void *)&_mh_execute_header, v129, v130, "%{public}s: '\\REMCDSavedReminder.metadata' should not be nil at the end of 'merge(storage:into:changedValueKeys:optionalCoordinator:)' {objectID: %{public}@}", (uint8_t *)v131, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          goto LABEL_132;
        }

        return;
      case 3:
      case 4:
        LODWORD(v187) = 1;
        goto LABEL_37;
      case 5:
        id v45 = (char *)&v204 + 4;
        goto LABEL_36;
      case 6:
      case 0xD:
      case 0xE:
      case 0x11:
      case 0x15:
        goto LABEL_37;
      case 7:
        id v45 = (char *)&v205;
        goto LABEL_36;
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        LODWORD(v31) = 1;
        goto LABEL_37;
      case 0xF:
        LODWORD(v200) = v30;
        unint64_t isa = (unint64_t)v188;
        if (v188)
        {
          swift_retain();
          sub_1004FCFEC(v35, v196);
          swift_release();
        }
        else
        {
          unsigned int v170 = v32;
          if (qword_100907720 != -1) {
            swift_once();
          }
          uint64_t v52 = type metadata accessor for Logger();
          sub_10008E2DC(v52, (uint64_t)qword_10091BCA0);
          id v53 = v35;
          uint64_t v54 = Logger.logObject.getter();
          os_log_type_t v55 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v54, v55))
          {
            uint64_t v56 = swift_slowAlloc();
            LODWORD(v194) = v31;
            id v31 = (_DWORD *)v56;
            id v57 = (void *)swift_slowAlloc();
            uint64_t v160 = (void *)swift_slowAlloc();
            uint64_t v201 = v160;
            *id v31 = v161;
            uint64_t v203 = v171;
            swift_getMetatypeMetadata();
            uint64_t v58 = String.init<A>(describing:)();
            *(void *)(v31 + 1) = sub_1000C51B8(v58, v59, (uint64_t *)&v201);
            swift_bridgeObjectRelease();
            *((_WORD *)v31 + 6) = 2114;
            id v60 = [v53 objectID];
            *(void *)((char *)v31 + 14) = v60;
            *id v57 = v60;

            _os_log_impl((void *)&_mh_execute_header, v54, v55, "%{public}s: Failed to merge attachments because 'optionalCoordinator' is nil {objectID: %{public}@}", (uint8_t *)v31, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            uint64_t v35 = v180;
            swift_slowDealloc();
            unint64_t isa = (unint64_t)v160;
            swift_arrayDestroy();
            swift_slowDealloc();
            LODWORD(v31) = v194;
            swift_slowDealloc();
          }
          else
          {
          }
          unint64_t v32 = v170;
        }
        goto LABEL_67;
      case 0x10:
        int v175 = 1;
        LODWORD(v31) = 1;
        goto LABEL_37;
      case 0x12:
        LODWORD(v200) = v30;
        id v46 = [v35 dueDateDeltaAlertsToUpsert];
        if (!v46) {
          goto LABEL_67;
        }
        uint64_t v47 = v46;
        sub_1000963CC(0, (unint64_t *)&unk_100920C30);
        unint64_t isa = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (isa >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v48 = *(void *)((isa & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (!v48) {
          goto LABEL_67;
        }
        goto LABEL_33;
      case 0x13:
        LODWORD(v200) = v30;
        id v49 = [v35 dueDateDeltaAlertIdentifiersToDelete];
        if (v49)
        {
          id v50 = v49;
          sub_1004FF278((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v51 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t isa = *(void *)(v51 + 16);
          swift_bridgeObjectRelease();
          if (isa)
          {
LABEL_33:
            int v176 = 1;
            uint64_t v33 = v198;
            if (v198 == v39)
            {
LABEL_114:
              swift_bridgeObjectRelease();
              goto LABEL_115;
            }
            uint64_t v30 = 1;
LABEL_6:
            uint64_t v28 = v199;
            goto LABEL_7;
          }
        }
LABEL_67:
        uint64_t v33 = v198;
        if (v198 != v39) {
          goto LABEL_68;
        }
        swift_bridgeObjectRelease();
        uint64_t v30 = (uint64_t)v192;
        if (v200) {
          goto LABEL_116;
        }
        goto LABEL_120;
      case 0x14:
        id v45 = (char *)&v205 + 4;
LABEL_36:
        *((_DWORD *)v45 - 64) = 1;
LABEL_37:
        if (v33 == v39) {
          goto LABEL_114;
        }
        uint64_t v30 = 1;
        goto LABEL_7;
      default:
        id v36 = [v35 objectID];
        id v37 = [v36 uuid];

        uint64_t v38 = v191;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t isa = (unint64_t)UUID._bridgeToObjectiveC()().super.isa;
        (*v179)((char *)v38, v193);
        [v196 setIdentifier:isa];

        uint64_t v33 = v198;
        if (v198 == v39)
        {
          swift_bridgeObjectRelease();
          if ((v30 & 1) == 0) {
            goto LABEL_145;
          }
          goto LABEL_113;
        }
        unint64_t v32 = 1;
        goto LABEL_6;
    }
  }
}

uint64_t sub_1004FC31C(uint64_t a1)
{
  return sub_100156B24(a1, qword_10091BCA0, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_1004FC348(uint64_t a1)
{
  return sub_100156B24(a1, qword_10091BCB8, &qword_100907840, (uint64_t)qword_100942508);
}

uint64_t sub_1004FC374(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_1004FA360(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1004FA360(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1004FC400()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1004FA360(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1004FC464()
{
  sub_1004FA360(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004FC4B8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1004FA360(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1004FC518@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1004FDFF0();
  *a1 = result;
  return result;
}

uint64_t sub_1004FC548@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1004FA360(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1004FC574@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1004FDFF0();
  *a1 = result;
  return result;
}

uint64_t sub_1004FC59C()
{
  return sub_1004FA360(*v0);
}

void sub_1004FC5A4(void *a1@<X8>)
{
  *a1 = &off_1008B2E70;
}

uint64_t sub_1004FC5B4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2988, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t sub_1004FC614@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2988, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_1004FC678(void *a1@<X8>)
{
  *a1 = &off_1008B7140;
}

void *sub_1004FC688()
{
  uint64_t result = sub_1004FC6A8();
  qword_1009422E0 = (uint64_t)result;
  return result;
}

void *sub_1004FC6A8()
{
  uint64_t v1 = 22;
  char v2 = _swiftEmptyDictionarySingleton;
  unint64_t v3 = (unint64_t)&byte_1008B2E90;
  do
  {
    int v5 = *(unsigned __int8 *)v3++;
    int v4 = v5;
    unint64_t v6 = 0xEB0000000073746ELL;
    uint64_t v7 = 0xE800000000000000;
    uint64_t v8 = 0x656D686361747461;
    unint64_t v9 = 0x44497463656A626FLL;
    uint64_t v10 = 0x44497463656A626FLL;
    unint64_t v11 = 0xE800000000000000;
    switch(v5)
    {
      case 1:
        unint64_t v9 = 0xD000000000000010;
        uint64_t v10 = 0xD00000000000001DLL;
        unint64_t v11 = 0x80000001007C6E10;
        uint64_t v7 = 0x80000001007C67E0;
        break;
      case 2:
        unint64_t v9 = 0xD000000000000017;
        uint64_t v7 = 0x80000001007C63B0;
        uint64_t v10 = 0xD000000000000017;
        unint64_t v11 = 0x80000001007C63B0;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
        uint64_t v7 = 0x80000001007C6880;
        unint64_t v6 = 0xE800000000000000;
        uint64_t v8 = 0x617461646174656DLL;
        unint64_t v9 = 0xD000000000000011;
        uint64_t v10 = 0x617461646174656DLL;
        switch(v4)
        {
          case 4:
            uint64_t v12 = 0x44656C746974;
            goto LABEL_13;
          case 5:
            uint64_t v7 = 0xE800000000000000;
            unint64_t v9 = 0x797469726F697270;
            goto LABEL_27;
          case 6:
            uint64_t v7 = 0xE700000000000000;
            unint64_t v9 = 0x64656767616C66;
            goto LABEL_27;
          case 7:
            uint64_t v7 = 0xEC00000065746144;
            unint64_t v9 = 0x6E6F697461657263;
            goto LABEL_27;
          case 8:
            uint64_t v7 = 0xEF73656C75526563;
            unint64_t v9 = 0x6E65727275636572;
            goto LABEL_27;
          case 9:
            unint64_t v9 = 0xD000000000000013;
            uint64_t v7 = 0x80000001007C68F0;
            goto LABEL_27;
          case 10:
            uint64_t v7 = 0x80000001007C6910;
            goto LABEL_27;
          case 11:
            uint64_t v7 = 0xE800000000000000;
            unint64_t v9 = 0x656E6F5A656D6974;
            goto LABEL_27;
          case 12:
            uint64_t v7 = 0xE600000000000000;
            unint64_t v9 = 0x7961446C6C61;
            goto LABEL_27;
          case 13:
            uint64_t v7 = 0x80000001007C6930;
            goto LABEL_27;
          case 14:
            uint64_t v12 = 0x447365746F6ELL;
LABEL_13:
            unint64_t v9 = v12 & 0xFFFFFFFFFFFFLL | 0x636F000000000000;
            uint64_t v7 = 0xED0000746E656D75;
            break;
          case 15:
            goto LABEL_7;
          case 16:
            uint64_t v7 = 0xE600000000000000;
            unint64_t v9 = 0x736D72616C61;
            break;
          case 17:
            unint64_t v9 = 0xD000000000000016;
            uint64_t v7 = 0x80000001007C6970;
            break;
          case 18:
            unint64_t v9 = 0xD00000000000001ALL;
            uint64_t v7 = 0x80000001007C6990;
            break;
          case 19:
            unint64_t v9 = 0xD000000000000024;
            uint64_t v7 = 0x80000001007C69B0;
            break;
          case 20:
            uint64_t v7 = 0xE800000000000000;
            unint64_t v9 = 0x7367617468736168;
            break;
          case 21:
            uint64_t v7 = 0xEE0073656C646E61;
            unint64_t v9 = 0x48746361746E6F63;
            break;
          default:
            goto LABEL_27;
        }
        break;
      case 15:
LABEL_7:
        unint64_t v9 = 0x656D686361747461;
        uint64_t v7 = 0xEB0000000073746ELL;
        uint64_t v10 = v8;
        unint64_t v11 = v6;
        break;
      default:
        break;
    }
LABEL_27:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v50 = _swiftEmptyDictionarySingleton;
    unint64_t v15 = sub_1001806F8(v9, v7);
    uint64_t v16 = _swiftEmptyDictionarySingleton[2];
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17))
    {
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    LOBYTE(v0) = v14;
    if (_swiftEmptyDictionarySingleton[3] >= v18)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v14) {
          goto LABEL_2;
        }
      }
      else
      {
        sub_100318A14();
        if (v0) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      sub_10030E654(v18, isUniquelyReferenced_nonNull_native);
      unint64_t v19 = sub_1001806F8(v9, v7);
      if ((v0 & 1) != (v20 & 1)) {
        goto LABEL_67;
      }
      unint64_t v15 = v19;
      if (v0)
      {
LABEL_2:
        uint64_t v0 = _swiftEmptyDictionarySingleton[7] + 16 * v15;
        swift_bridgeObjectRelease();
        *(void *)uint64_t v0 = v10;
        *(void *)(v0 + 8) = v11;
        goto LABEL_3;
      }
    }
    _swiftEmptyDictionarySingleton[(v15 >> 6) + 8] |= 1 << v15;
    uint64_t v21 = (unint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v15);
    *uint64_t v21 = v9;
    v21[1] = v7;
    double v22 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v15);
    *double v22 = v10;
    v22[1] = v11;
    uint64_t v23 = _swiftEmptyDictionarySingleton[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_59;
    }
    _swiftEmptyDictionarySingleton[2] = v25;
    swift_bridgeObjectRetain();
LABEL_3:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    --v1;
  }
  while (v1);
  uint64_t v1 = (uint64_t)&off_1008B2000;
  unint64_t v3 = 0x44497473696CLL;
  uint64_t v10 = 0x49746E756F636361;
  uint64_t v7 = 0xE900000000000044;
  unint64_t v11 = 0x746E756F636361;
  unint64_t v9 = 0xE700000000000000;
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  id v50 = _swiftEmptyDictionarySingleton;
  unint64_t v15 = sub_1001806F8(0x49746E756F636361, 0xE900000000000044);
  uint64_t v28 = _swiftEmptyDictionarySingleton[2];
  BOOL v29 = (v27 & 1) == 0;
  uint64_t v30 = v28 + v29;
  if (__OFADD__(v28, v29)) {
    goto LABEL_61;
  }
  LOBYTE(v0) = v27;
  if (_swiftEmptyDictionarySingleton[3] < v30)
  {
    sub_10030E654(v30, v26);
    unint64_t v31 = sub_1001806F8(0x49746E756F636361, 0xE900000000000044);
    if ((v0 & 1) == (v32 & 1))
    {
      unint64_t v15 = v31;
      if (v0) {
        goto LABEL_46;
      }
      goto LABEL_42;
    }
LABEL_67:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x1004FCEC0);
  }
  if ((v26 & 1) == 0) {
    goto LABEL_63;
  }
  if (v27) {
    goto LABEL_46;
  }
LABEL_42:
  while (2)
  {
    v2[(v15 >> 6) + 8] |= 1 << v15;
    uint64_t v33 = (uint64_t *)(v2[6] + 16 * v15);
    *uint64_t v33 = v10;
    v33[1] = v7;
    long long v34 = (unint64_t *)(v2[7] + 16 * v15);
    *long long v34 = v11;
    v34[1] = v9;
    uint64_t v35 = v2[2];
    BOOL v24 = __OFADD__(v35, 1);
    uint64_t v36 = v35 + 1;
    if (!v24)
    {
      v2[2] = v36;
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
LABEL_62:
    __break(1u);
LABEL_63:
    sub_100318A14();
    char v2 = v50;
    if ((v0 & 1) == 0) {
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v10 = v2[7] + 16 * v15;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v10 = v11;
  *(void *)(v10 + 8) = v9;
LABEL_47:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 3768) < 2uLL)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v10 = v3;
  uint64_t v7 = 0xE600000000000000;
  uint64_t v1 = 0x6574616C706D6574;
  unint64_t v3 = 0xE800000000000000;
  char v37 = swift_isUniquelyReferenced_nonNull_native();
  id v50 = v2;
  unint64_t v15 = sub_1001806F8(v10, 0xE600000000000000);
  uint64_t v39 = v2[2];
  BOOL v40 = (v38 & 1) == 0;
  uint64_t v41 = v39 + v40;
  if (__OFADD__(v39, v40)) {
    goto LABEL_61;
  }
  LOBYTE(v0) = v38;
  if (v2[3] >= v41)
  {
    if (v37)
    {
      if (v38) {
        goto LABEL_56;
      }
    }
    else
    {
      sub_100318A14();
      if (v0) {
        goto LABEL_56;
      }
    }
    goto LABEL_52;
  }
  sub_10030E654(v41, v37);
  unint64_t v42 = sub_1001806F8(v10, 0xE600000000000000);
  if ((v0 & 1) != (v43 & 1)) {
    goto LABEL_67;
  }
  unint64_t v15 = v42;
  if ((v0 & 1) == 0)
  {
LABEL_52:
    v2[(v15 >> 6) + 8] |= 1 << v15;
    char v44 = (uint64_t *)(v2[6] + 16 * v15);
    *char v44 = v10;
    v44[1] = 0xE600000000000000;
    id v45 = (void *)(v2[7] + 16 * v15);
    *id v45 = 0x6574616C706D6574;
    v45[1] = 0xE800000000000000;
    uint64_t v46 = v2[2];
    BOOL v24 = __OFADD__(v46, 1);
    uint64_t v47 = v46 + 1;
    if (!v24)
    {
      v2[2] = v47;
      swift_bridgeObjectRetain();
      goto LABEL_57;
    }
    goto LABEL_62;
  }
LABEL_56:
  uint64_t v48 = (void *)(v2[7] + 16 * v15);
  swift_bridgeObjectRelease();
  *uint64_t v48 = 0x6574616C706D6574;
  v48[1] = 0xE800000000000000;
LABEL_57:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

id sub_1004FCF64@<X0>(void **a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = *a1;
  v10[3] = sub_1000963CC(0, (unint64_t *)&qword_10090E708);
  v10[4] = &off_1008C5F78;
  v10[0] = a2;
  id v7 = v6;
  id v8 = a2;
  id result = sub_10043AA64(v7, v10);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

void sub_1004FCFEC(void *a1, void *a2)
{
  NSString v65 = *v2;
  id v4 = [a1 attachments];
  if (v4)
  {
    int v5 = v4;
    sub_1000963CC(0, (unint64_t *)&unk_100909EB0);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for REMSavedAttachmentCDIngestor();
    uint64_t v7 = swift_allocObject();
    sub_10069AF04(v6, v7);
    swift_release();
    unint64_t v75 = v6;
    sub_100094134(&qword_100921BC0);
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    sub_1000967F4(&qword_1009114F8, &qword_100921BC0);
    sub_1000ED098((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
    uint64_t v8 = Sequence.mapToSet<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = (uint64_t)&_swiftEmptySetSingleton;
  }
  id v9 = [a2 attachments];
  if (!v9)
  {
LABEL_59:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v10 = v9;
  type metadata accessor for REMCDSavedAttachment();
  sub_1004FF278((unint64_t *)&unk_100910220, (void (*)(uint64_t))type metadata accessor for REMCDSavedAttachment);
  uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v11 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    uint64_t v11 = v75;
    uint64_t v67 = v76;
    uint64_t v12 = v77;
    int64_t v13 = v78;
    unint64_t v14 = v79;
  }
  else
  {
    int64_t v13 = 0;
    uint64_t v15 = -1 << *(unsigned char *)(v11 + 32);
    uint64_t v67 = v11 + 56;
    uint64_t v12 = ~v15;
    uint64_t v16 = -v15;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v14 = v17 & *(void *)(v11 + 56);
  }
  int64_t v66 = (unint64_t)(v12 + 64) >> 6;
  unint64_t v69 = v8 & 0xC000000000000001;
  uint64_t v64 = v8 + 56;
  uint64_t v68 = v8;
  uint64_t v72 = v11;
  while (1)
  {
    if (v11 < 0)
    {
      uint64_t v21 = __CocoaSet.Iterator.next()();
      if (!v21) {
        goto LABEL_58;
      }
      uint64_t v74 = v21;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v22 = v80;
      swift_unknownObjectRelease();
      int64_t v20 = v13;
      uint64_t v18 = v14;
      if (!v22) {
        goto LABEL_58;
      }
      goto LABEL_29;
    }
    if (!v14) {
      break;
    }
    uint64_t v18 = (v14 - 1) & v14;
    unint64_t v19 = __clz(__rbit64(v14)) | (v13 << 6);
    int64_t v20 = v13;
LABEL_28:
    id v22 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
    if (!v22) {
      goto LABEL_58;
    }
LABEL_29:
    id v25 = [v22 remObjectID];
    if (v25)
    {
      char v26 = v25;
      if (v69)
      {
        id v27 = v25;
        char v28 = __CocoaSet.contains(_:)();

        if ((v28 & 1) == 0)
        {
          unint64_t v73 = v18;
          int64_t v71 = v20;
          goto LABEL_44;
        }

        int64_t v13 = v20;
        unint64_t v14 = v18;
      }
      else
      {
        unint64_t v73 = v18;
        int64_t v71 = v20;
        if (!*(void *)(v8 + 16)) {
          goto LABEL_44;
        }
        Swift::Int v43 = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
        uint64_t v44 = -1 << *(unsigned char *)(v8 + 32);
        unint64_t v45 = v43 & ~v44;
        if (((*(void *)(v64 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
          goto LABEL_44;
        }
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        id v46 = *(id *)(*(void *)(v8 + 48) + 8 * v45);
        char v47 = static NSObject.== infix(_:_:)();

        if (v47)
        {
LABEL_43:

          int64_t v13 = v71;
          uint64_t v11 = v72;
          unint64_t v14 = v73;
        }
        else
        {
          uint64_t v48 = ~v44;
          while (1)
          {
            unint64_t v45 = (v45 + 1) & v48;
            if (((*(void *)(v64 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
              break;
            }
            id v49 = *(id *)(*(void *)(v8 + 48) + 8 * v45);
            char v50 = static NSObject.== infix(_:_:)();

            if (v50) {
              goto LABEL_43;
            }
          }
LABEL_44:
          if (qword_100907720 != -1) {
            swift_once();
          }
          uint64_t v51 = type metadata accessor for Logger();
          sub_10008E2DC(v51, (uint64_t)qword_10091BCA0);
          id v52 = v26;
          id v53 = a1;
          id v54 = v52;
          id v55 = v53;
          uint64_t v56 = Logger.logObject.getter();
          os_log_type_t v57 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v56, v57))
          {
            uint64_t v58 = swift_slowAlloc();
            unint64_t v59 = (void *)swift_slowAlloc();
            uint64_t v74 = swift_slowAlloc();
            *(_DWORD *)uint64_t v58 = 136446722;
            uint64_t v80 = v65;
            swift_getMetatypeMetadata();
            uint64_t v60 = String.init<A>(describing:)();
            *(void *)(v58 + 4) = sub_1000C51B8(v60, v61, &v74);
            swift_bridgeObjectRelease();
            *(_WORD *)(v58 + 12) = 2112;
            id v62 = [v55 objectID];
            *(void *)(v58 + 14) = v62;
            *unint64_t v59 = v62;

            *(_WORD *)(v58 + 22) = 2112;
            *(void *)(v58 + 24) = v54;
            v59[1] = v26;

            _os_log_impl((void *)&_mh_execute_header, v56, v57, "%{public}s: Removing saved attachment from saved reminder {cdSavedReminder.remObjectID: %@, cdSavedAttachment.objectID: %@}", (uint8_t *)v58, 0x20u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          int64_t v13 = v71;
          uint64_t v11 = v72;
          [v22 setReminder:0];

          unint64_t v14 = v73;
          uint64_t v8 = v68;
        }
      }
    }
    else
    {
      if (qword_100907720 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_10008E2DC(v29, (uint64_t)qword_10091BCA0);
      id v30 = a1;
      id v31 = v22;
      id v32 = v30;
      id v33 = v31;
      long long v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        int64_t v37 = v20;
        char v38 = (void *)swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136446722;
        uint64_t v80 = v65;
        swift_getMetatypeMetadata();
        uint64_t v39 = String.init<A>(describing:)();
        *(void *)(v36 + 4) = sub_1000C51B8(v39, v40, &v74);
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2112;
        id v41 = [v32 objectID];
        *(void *)(v36 + 14) = v41;
        *char v38 = v41;

        *(_WORD *)(v36 + 22) = 2112;
        id v42 = [v33 objectID];
        *(void *)(v36 + 24) = v42;
        v38[1] = v42;

        _os_log_impl((void *)&_mh_execute_header, v34, v35, "%{public}s: Can't merge saved attachment for saved reminder because cdSavedAttachment.remObjectID is nil {cdSavedReminder.remObjectID: %@, cdSavedAttachment.objectID: %@}", (uint8_t *)v36, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        uint64_t v8 = v68;
        swift_slowDealloc();
        swift_slowDealloc();

        int64_t v13 = v37;
      }
      else
      {

        int64_t v13 = v20;
      }
      unint64_t v14 = v18;
      uint64_t v11 = v72;
    }
  }
  int64_t v20 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v20 >= v66) {
      goto LABEL_58;
    }
    unint64_t v23 = *(void *)(v67 + 8 * v20);
    if (!v23)
    {
      int64_t v24 = v13 + 2;
      if (v13 + 2 >= v66) {
        goto LABEL_58;
      }
      unint64_t v23 = *(void *)(v67 + 8 * v24);
      if (v23) {
        goto LABEL_26;
      }
      int64_t v24 = v13 + 3;
      if (v13 + 3 >= v66) {
        goto LABEL_58;
      }
      unint64_t v23 = *(void *)(v67 + 8 * v24);
      if (v23)
      {
LABEL_26:
        int64_t v20 = v24;
      }
      else
      {
        int64_t v20 = v13 + 4;
        if (v13 + 4 >= v66) {
          goto LABEL_58;
        }
        unint64_t v23 = *(void *)(v67 + 8 * v20);
        if (!v23)
        {
          int64_t v63 = v13 + 5;
          while (v66 != v63)
          {
            unint64_t v23 = *(void *)(v67 + 8 * v63++);
            if (v23)
            {
              int64_t v20 = v63 - 1;
              goto LABEL_27;
            }
          }
LABEL_58:
          sub_1000C1AF8();
          goto LABEL_59;
        }
      }
    }
LABEL_27:
    uint64_t v18 = (v23 - 1) & v23;
    unint64_t v19 = __clz(__rbit64(v23)) + (v20 << 6);
    goto LABEL_28;
  }
  __break(1u);
}

id sub_1004FD9C8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 objectID];
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for REMSavedReminderStorageCDIngestor()
{
  return self;
}

_UNKNOWN **sub_1004FDA30()
{
  return &off_1008C8808;
}

_UNKNOWN **sub_1004FDA3C()
{
  return &off_1008C87D8;
}

void *sub_1004FDA48(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  id result = _swiftEmptyArrayStorage;
  if (v4)
  {
    unint64_t v14 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v8 = a1 + 32;
    sub_1000963CC(0, (unint64_t *)&qword_100911840);
    id v9 = self;
    do
    {
      long long v10 = *(_OWORD *)(v8 + 48);
      v12[2] = *(_OWORD *)(v8 + 32);
      void v12[3] = v10;
      v12[4] = *(_OWORD *)(v8 + 64);
      uint64_t v13 = *(void *)(v8 + 80);
      long long v11 = *(_OWORD *)(v8 + 16);
      v12[0] = *(_OWORD *)v8;
      v12[1] = v11;
      sub_1004FF2E8((uint64_t)v12);
      sub_1004FF2E8((uint64_t)v12);
      sub_1002A414C((uint64_t *)v12, [v9 newObjectID], a2, a3);
      sub_1002A4974((uint64_t)v12);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v8 += 88;
      --v4;
    }
    while (v4);
    return v14;
  }
  return result;
}

void *sub_1004FDB9C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v40 = a3;
  id v41 = a4;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  uint64_t v39 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for UUID();
  __chkstk_darwin(v38);
  uint64_t v48 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = _swiftEmptyArrayStorage;
  unint64_t v49 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    id v42 = *(id *)(a2 + 16);
    os_log_type_t v35 = (uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    void v32[2] = v4;
    id v33 = (void (**)(char *, uint64_t))(v13 + 8);
    swift_bridgeObjectRetain();
    v32[1] = a1;
    uint64_t v17 = (uint64_t *)(a1 + 48);
    int64_t v37 = v12;
    long long v34 = (void (**)(char *, uint64_t))(v10 + 8);
    do
    {
      uint64_t v18 = *v17;
      id v19 = (id)*(v17 - 2);
      if (([v42 includeConcealed] & 1) != 0 || rem_currentRuntimeVersion() >= v18)
      {
        id v47 = (id)v18;
        id v20 = [self newObjectID];
        id v21 = [v20 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        id v43 = v19;
        id v46 = v40;
        id v44 = v41;
        Date.init(timeIntervalSinceReferenceDate:)();
        id v22 = v39;
        (*v36)(v39, 1, 1, v9);
        v23.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        v24.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
        int v25 = (*v35)(v22, 1, v9);
        uint64_t v45 = v16;
        if (v25 == 1)
        {
          Class isa = 0;
          id v27 = v34;
        }
        else
        {
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          id v27 = v34;
          (*v34)(v22, v9);
        }
        id v28 = objc_allocWithZone((Class)REMDueDateDeltaAlert);
        uint64_t v29 = v46;
        id v31 = v43;
        id v30 = v44;
        id v47 = [v28 initWithIdentifier:v23.super.isa reminderID:v46 accountID:v44 dueDateDelta:v43 creationDate:v24.super.isa acknowledgedDate:isa minimumSupportedAppVersion:v47];

        (*v27)(v37, v9);
        (*v33)(v48, v38);

        uint64_t v16 = v45;
        if (v47)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {
      }
      v17 += 3;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    return (void *)v49;
  }
  return result;
}

uint64_t sub_1004FDFF0()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x16) {
    return 22;
  }
  else {
    return v0;
  }
}

void sub_1004FE044(void *a1)
{
  id v4 = [a1 fetchedDueDateDeltaAlerts];
  if (v4)
  {
    int v5 = v4;
    sub_1000963CC(0, (unint64_t *)&unk_100920C30);
    unint64_t v6 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    id v10 = [a1 dueDateDeltaAlertsData];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      type metadata accessor for RDDueDateDeltaAlerts();
      sub_1004FF278(&qword_10090C4C8, (void (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlerts);
      static REMJSONRepresentable.fromJSONData(_:)();
      if (v1)
      {
        sub_100097F34(v12, v14);
        return;
      }
      sub_100097F34(v12, v14);
      unint64_t v6 = *(void **)&v32[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects];
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v6 = _swiftEmptyArrayStorage;
    }
  }
  id v7 = [a1 dueDateDeltaAlertsToUpsert];
  if (v7)
  {
    uint64_t v8 = v7;
    sub_1000963CC(0, (unint64_t *)&unk_100920C30);
    uint64_t v9 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v9 = 0;
  }
  id v15 = [a1 dueDateDeltaAlertIdentifiersToDelete];
  if (v15)
  {
    uint64_t v16 = v15;
    type metadata accessor for UUID();
    sub_1004FF278((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v17 = 0;
  }
  char v18 = sub_10024C1A0(v9, v17, v6);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18)
    {
      if (qword_100907720 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_10008E2DC(v19, (uint64_t)qword_10091BCA0);
      id v20 = a1;
      id v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        NSUUID v23 = (uint8_t *)swift_slowAlloc();
        NSDate v24 = (void *)swift_slowAlloc();
        *(_DWORD *)NSUUID v23 = 138543362;
        id v33 = [v20 remObjectID];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *NSDate v24 = v33;

        _os_log_impl((void *)&_mh_execute_header, v21, v22, "REMSavedReminderStorageCDIngestor.updateDueDateDeltaAlerts: Applied early alert changes and setFetchedDueDateDeltaAlerts() {savedReminderID: %{public}@}", v23, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v21 = v20;
      }

      sub_1000963CC(0, (unint64_t *)&unk_100920C30);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v20 setFetchedDueDateDeltaAlerts:isa];
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100907720 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_10008E2DC(v25, (uint64_t)qword_10091BCA0);
      id v26 = a1;
      id v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        id v30 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 138543362;
        id v34 = [v26 remObjectID];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v30 = v34;

        _os_log_impl((void *)&_mh_execute_header, v27, v28, "REMSavedReminderStorageCDIngestor.updateDueDateDeltaAlerts: Noop {savedReminderID: %{public}@}", v29, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
}

void *sub_1004FE600(id a1, char a2)
{
  if (a2)
  {
    id v4 = [a1 listID];
    int v5 = v4;
    uint64_t v3 = _swiftEmptyArrayStorage;
    if (v4)
    {
      id v6 = v4;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v3 = (void *)swift_allocObject();
    *((_OWORD *)v3 + 1) = xmmword_10077A530;
    v3[4] = [a1 accountID];
    specialized Array._endMutation()();
  }
  return v3;
}

void sub_1004FE71C(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v10 = __chkstk_darwin(v9 - 8).n128_u64[0];
  uint64_t v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) == 0)
  {
    id v13 = [a1 accountID:v10];
    sub_10047A1F4(0, v13, a4);
    id v15 = v14;

    if (v4) {
      return;
    }
    if (qword_100907720 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_10091BCA0);
    id v17 = a2;
    id v18 = v15;
    id v19 = v17;
    id v20 = v18;
    id v21 = Logger.logObject.getter();
    int v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      LODWORD(v96) = v22;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v97 = swift_slowAlloc();
      uint64_t v99 = v97;
      *(_DWORD *)uint64_t v23 = 136446466;
      id v24 = [v19 remObjectID];
      if (v24)
      {
        uint64_t v25 = v24;
        id v26 = [v24 description];

        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;
      }
      else
      {
        unint64_t v29 = 0xE300000000000000;
        uint64_t v27 = 7104878;
      }
      uint64_t v98 = sub_1000C51B8(v27, v29, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2082;
      id v68 = [v20 remObjectID];
      if (v68)
      {
        unint64_t v69 = v68;
        id v70 = [v68 description];

        uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v73 = v72;
      }
      else
      {
        unint64_t v73 = 0xE300000000000000;
        uint64_t v71 = 7104878;
      }
      uint64_t v98 = sub_1000C51B8(v71, v73, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v96, "Updating cdSavedReminder.account {cdSavedReminder: %{public}s, cdAccount: %{public}s}", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    [v19 setAccount:v20];
    goto LABEL_47;
  }
  id v30 = [a2 createResolutionTokenMapIfNecessary:v10];
  id v31 = [a1 resolutionTokenMap];
  if (!v31)
  {
    if (qword_100907720 != -1) {
      swift_once();
    }
    id v96 = v30;
    uint64_t v43 = type metadata accessor for Logger();
    sub_10008E2DC(v43, (uint64_t)qword_10091BCA0);
    id v44 = a1;
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      uint64_t v99 = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 138543618;
      id v49 = [v44 objectID];
      uint64_t v98 = (uint64_t)v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v48 = v49;

      *(_WORD *)(v47 + 12) = 2082;
      uint64_t v98 = sub_1000C51B8(0x44497473696CLL, 0xE600000000000000, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "REMSavedReminderStorageCDIngestor:establishRelationship(onStorage:into cdSavedReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v47, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    char v50 = self;
    sub_1000963CC(0, &qword_1009100F8);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v52 = String._bridgeToObjectiveC()();
    [v50 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v52];

    swift_willThrow();
    id v39 = v96;
    goto LABEL_21;
  }
  id v32 = v31;
  uint64_t v97 = v4;
  sub_100094134(&qword_100913EB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(unsigned char *)(inited + 32) = 1;
  id v20 = sub_1004813D8(v32, inited);
  swift_setDeallocating();
  sub_10047F46C(1);
  id v34 = v32;
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v36 = [v30 mergeWithMap:v20 forKey:v35];

  if (v36)
  {
    id v95 = v20;
    id v37 = [a1 listID];
    uint64_t v38 = v34;
    if (v37)
    {
      id v39 = v37;
      uint64_t v40 = v97;
      sub_10047A224(1, v39, a4);
      id v42 = v30;
      uint64_t v97 = v40;
      if (v40)
      {

LABEL_21:
        return;
      }
      id v53 = v41;
    }
    else
    {
      id v53 = 0;
      id v42 = v30;
    }
    id v94 = v38;
    if (qword_100907720 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    sub_10008E2DC(v54, (uint64_t)qword_10091BCA0);
    id v55 = v53;
    id v56 = a2;
    id v57 = v55;
    id v58 = v56;
    unint64_t v59 = Logger.logObject.getter();
    int v60 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v59, (os_log_type_t)v60))
    {
      int v91 = v60;
      os_log_t v92 = v59;
      id v93 = v57;
      id v96 = v42;
      uint64_t v61 = swift_slowAlloc();
      uint64_t v90 = swift_slowAlloc();
      uint64_t v99 = v90;
      *(_DWORD *)uint64_t v61 = 136446466;
      id v62 = [v58 remObjectID:v90];
      if (v62)
      {
        int64_t v63 = v62;
        id v64 = [v62 description];

        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v67 = v66;
      }
      else
      {
        unint64_t v67 = 0xE300000000000000;
        uint64_t v65 = 7104878;
      }
      uint64_t v98 = sub_1000C51B8(v65, v67, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v61 + 12) = 2082;
      if (v53 && (id v74 = [v93 remObjectID]) != 0)
      {
        unint64_t v75 = v74;
        id v76 = [v74 description];

        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v79 = v78;

        id v42 = v96;
      }
      else
      {
        unint64_t v79 = 0xE300000000000000;
        id v42 = v96;
        uint64_t v77 = 7104878;
      }
      uint64_t v98 = sub_1000C51B8(v77, v79, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v80 = v93;

      id v57 = v80;
      swift_bridgeObjectRelease();
      os_log_t v81 = v92;
      _os_log_impl((void *)&_mh_execute_header, v92, (os_log_type_t)v91, "Updating cdSavedReminder.template {cdSavedReminder: %{public}s, cdTemplate: %{public}s}", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v82 = v53;
    id v20 = [v58 template];
    [v58 setTemplate:v57];
    if (v20)
    {
      id v83 = v20;
      static Date.now.getter();
      uint64_t v84 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v12, 0, 1, v84);
      uint64_t KeyPath = (NSURL *)swift_getKeyPath();
      sub_10015F5D0(KeyPath, (uint64_t)v12);
      swift_release();
      sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);
    }
    id v86 = v95;
    if (v82)
    {
      id v87 = v57;
      static Date.now.getter();
      uint64_t v88 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v12, 0, 1, v88);
      int64_t v89 = (NSURL *)swift_getKeyPath();
      sub_10015F5D0(v89, (uint64_t)v12);
      swift_release();
      sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);

      id v20 = v87;
    }
    else
    {
    }
  }
  else
  {
  }
LABEL_47:
}

uint64_t sub_1004FF278(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1004FF2C0@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_1004FCF64(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1004FF2DC()
{
  return sub_1003EB1B8();
}

uint64_t sub_1004FF2E8(uint64_t a1)
{
  return a1;
}

unsigned char *storeEnumTagSinglePayload for REMSavedReminderStorageCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004FF424);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMSavedReminderStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMSavedReminderStorageCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMSavedReminderStorageCDIngestor.ValueKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEB) {
    goto LABEL_17;
  }
  if (a2 + 21 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 21) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 21;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v8 = v6 - 22;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for REMSavedReminderStorageCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEA)
  {
    unsigned int v6 = ((a2 - 235) >> 8) + 1;
    void *result = a2 + 21;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004FF5B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 21;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMSavedReminderStorageCDIngestor.ValueKey()
{
  return &type metadata for REMSavedReminderStorageCDIngestor.ValueKey;
}

uint64_t sub_1004FF5F0()
{
  return sub_1000967F4(&qword_10091BE88, &qword_10091BE90);
}

unint64_t sub_1004FF630()
{
  unint64_t result = qword_10091BE98;
  if (!qword_10091BE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091BE98);
  }
  return result;
}

uint64_t sub_1004FF684()
{
  return sub_1000967F4(&qword_10091BEA0, &qword_10091BEA8);
}

unint64_t sub_1004FF6C4()
{
  unint64_t result = qword_10091BEB0;
  if (!qword_10091BEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091BEB0);
  }
  return result;
}

id sub_1004FF758()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDXPCBarebonesDaemon();
  return [super dealloc];
}

uint64_t type metadata accessor for RDXPCBarebonesDaemon()
{
  return self;
}

unint64_t sub_1004FF7B0()
{
  return sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1004FF7BC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091BEE0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091BEE0);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_1004FF884(void *a1)
{
  int v3 = v1;
  uint64_t v5 = type metadata accessor for REMManualOrdering.Predefined();
  NSString v52 = *(char **)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMManualOrdering.ManualOrderingID();
  uint64_t v54 = *(void *)(v8 - 8);
  *(void *)&double v9 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v53 = v3;
  id v12 = [v3 accountObjectID:v9];
  id v13 = (objc_class *)sub_1002E4DD0();
  unint64_t v14 = (void *)sub_1002E4A54(v12, (uint64_t)a1, v13, 0);

  swift_bridgeObjectRelease();
  if (!v2)
  {
    uint64_t v50 = v8;
    uint64_t v51 = v14;
    id v15 = v52;
    (*((void (**)(char *, void, uint64_t))v52 + 13))(v7, enum case for REMManualOrdering.Predefined.templates(_:), v5);
    REMManualOrdering.Predefined.manualOrderingID.getter();
    (*((void (**)(char *, uint64_t))v15 + 1))(v7, v5);
    uint64_t v16 = (void *)REMManualOrdering.ManualOrderingID.listType.getter();
    uint64_t v17 = REMManualOrdering.ManualOrderingID.listID.getter();
    id v19 = v18;
    id v20 = [v53 accountObjectID];
    if (qword_100907B18 != -1) {
      swift_once();
    }
    uint64_t v21 = qword_100942620;
    swift_retain();
    int v22 = sub_1000CF564(v16, v17, v19, v20, a1, 1, v21);
    swift_bridgeObjectRelease();

    swift_release();
    if (v22)
    {
      sub_1001B3874((uint64_t)v56);
      sub_100375628((uint64_t)v56, (uint64_t)v57);
      uint64_t v27 = v54;
      uint64_t v28 = v50;
      if (v57[0])
      {
        id v53 = (id)v57[0];
        uint64_t v29 = v57[1];
        uint64_t v30 = v57[2];
        uint64_t v32 = v57[3];
        uint64_t v31 = v57[4];
        id v33 = [v22 account];
        if (v33)
        {
          uint64_t v46 = v29;
          uint64_t v47 = v30;
          uint64_t v48 = v32;
          uint64_t v49 = v31;
          NSString v52 = v11;
          id v34 = v33;
          NSString v35 = sub_1005E82D8();
          uint64_t v36 = type metadata accessor for RDManualSortIDCache();
          uint64_t v37 = v36;
          if (qword_100907870 != -1) {
            uint64_t v36 = swift_once();
          }
          uint64_t v38 = qword_10091C658;
          __chkstk_darwin(v36);
          *(&v46 - 4) = v37;
          *(&v46 - 3) = (uint64_t)v35;
          *(&v46 - 2) = v38;
          OS_dispatch_queue.sync<A>(execute:)();
          uint64_t v39 = v55;
          type metadata accessor for RDManualSortIDAdapter();
          swift_allocObject();
          sub_1001A1374(v39, (uint64_t)v35, 0);

          unint64_t v40 = (unint64_t)v51;
          unint64_t v41 = swift_bridgeObjectRetain();
          uint64_t v42 = sub_100127210(v41);
          swift_bridgeObjectRelease();
          uint64_t v43 = sub_100333A6C(v42);
          uint64_t v44 = sub_1001A27F8(v43);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v45 = sub_1001F88BC((uint64_t)v53, v44, v40);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v63 = v46;
          sub_1000F5C48((uint64_t)&v63);
          uint64_t v64 = v47;
          sub_1000F5C48((uint64_t)&v64);
          uint64_t v65 = v48;
          sub_1000F5C48((uint64_t)&v65);
          uint64_t v66 = v49;
          sub_1000F5C48((uint64_t)&v66);
          swift_bridgeObjectRelease();

          (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v50);
          uint64_t v51 = v45;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
          id v58 = v53;
          sub_1000F5C48((uint64_t)&v58);
          uint64_t v59 = v29;
          sub_1000F5C48((uint64_t)&v59);
          uint64_t v60 = v30;
          sub_1000F5C48((uint64_t)&v60);
          uint64_t v61 = v32;
          sub_1000F5C48((uint64_t)&v61);
          uint64_t v62 = v31;
          sub_1000F5C48((uint64_t)&v62);
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v11, v50);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v54 + 8))(v11, v50);
    }
    id v23 = [self sharedConfiguration];
    [v23 templatePublicLinkTTL];

    sub_100500424((unint64_t)v51);
    swift_bridgeObjectRelease();
    id v25 = objc_allocWithZone((Class)REMTemplatesDataViewInvocationResult);
    sub_1000963CC(0, &qword_10090D2A0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v14 = [v25 initWithTemplateStorages:isa];
  }
  return v14;
}

void *sub_10050014C(void *a1)
{
  return sub_1004FF884(a1);
}

void sub_100500170()
{
  type metadata accessor for REMCDTemplate();
  id v2 = [v0 objectIDs];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  sub_1001207D4();
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10020A3A0(v3);
  swift_bridgeObjectRelease();
  unsigned int v4 = sub_1002E4DD0();
  unint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = (void *)sub_1002E3548(v5, 1);
  id v7 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v8 = [(id)swift_getObjCClassFromMetadata() entity];
  [v7 setEntity:v8];

  [v7 setAffectedStores:0];
  [v7 setPredicate:v6];

  sub_1001FFC40((uint64_t)v4);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v7 setPropertiesToFetch:isa];

  [v7 setRelationshipKeyPathsForPrefetching:0];
  unint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  swift_bridgeObjectRelease();
  swift_release_n();

  if (!v1)
  {
    id v11 = [self sharedConfiguration];
    [v11 templatePublicLinkTTL];

    sub_100500424(v10);
    swift_bridgeObjectRelease();
    id v12 = objc_allocWithZone((Class)REMTemplatesDataViewInvocationResult);
    sub_1000963CC(0, &qword_10090D2A0);
    Class v13 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v12 initWithTemplateStorages:v13];
  }
}

void sub_100500400()
{
}

void *sub_100500424(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      sub_100166628(v5);
      if (v1)
      {
        swift_bridgeObjectRelease();

        return (void *)swift_bridgeObjectRelease();
      }

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      ++v4;
      if (v7 == v3) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

NSObject *sub_1005005A4(NSObject *a1)
{
  uint64_t v3 = v1;
  id v5 = [v1 smartListType];
  id v6 = [v3 objectID];
  if (qword_100907B18 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100942620;
  swift_retain();
  id v8 = sub_10064C1FC(v5, v6, a1, v7);
  if (v2)
  {

    swift_release();
    if ([v3 createIfNeeded])
    {
      id v12 = [v3 smartListType];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;
      if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
          id v5 = a1;
          uint64_t v20 = sub_100349CDC();
          if (v20)
          {
            uint64_t v21 = (void *)v20;
            id v22 = [v3 smartListType];
            id v23 = sub_1001B89A0(v22, (uint64_t)v21);

            sub_100094134((uint64_t *)&unk_10090AF20);
            uint64_t v24 = swift_allocObject();
            *(_OWORD *)(v24 + 16) = xmmword_10077A530;
            *(void *)(v24 + 32) = v23;
            specialized Array._endMutation()();
            id v25 = objc_allocWithZone((Class)REMSmartListsDataViewInvocationResult);
            sub_1000963CC(0, &qword_10090B328);
            id v26 = v23;
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v5 = [v25 initWithSmartListStorages:isa];

            swift_errorRelease();
            return v5;
          }
          [self noPrimaryActiveCloudKitAccountError];
          goto LABEL_13;
        }
      }
      id v5 = self;
      NSString v18 = String._bridgeToObjectiveC()();
      [v5 invalidParameterErrorWithDescription:v18];

LABEL_13:
      swift_willThrow();
      swift_errorRelease();
      return v5;
    }
    swift_willThrow();
  }
  else
  {
    double v9 = v8;

    swift_release();
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_10077A530;
    *(void *)(v10 + 32) = v9;
    uint64_t v28 = (void *)v10;
    specialized Array._endMutation()();
    id v11 = v9;
    id v5 = sub_1005014E0(v28);
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_100500980()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091BEF8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091BEF8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

NSObject *sub_100500A48(NSObject *a1)
{
  return sub_1005005A4(a1);
}

uint64_t sub_100500A6C(uint64_t a1)
{
  uint64_t v3 = _s10PredicatesOMa_3();
  __chkstk_darwin(v3);
  id v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  id v6 = (void *)sub_100649DD0((uint64_t)v5, a1, 0);
  if (v1)
  {
    sub_100501D98((uint64_t)v5);
  }
  else
  {
    a1 = sub_1005014E0(v6);
    sub_100501D98((uint64_t)v5);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_100500B4C(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = _s10PredicatesOMa_3();
  *(void *)&double v6 = __chkstk_darwin(v5).n128_u64[0];
  uint64_t v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v8 = [*v1 accountObjectID:v6];
  swift_storeEnumTagMultiPayload();
  double v9 = (void *)sub_100649DD0((uint64_t)v8, a1, 0);
  if (v2)
  {
    sub_100501D98((uint64_t)v8);
  }
  else
  {
    uint64_t v3 = sub_1005014E0(v9);
    sub_100501D98((uint64_t)v8);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_100500C54(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = _s10PredicatesOMa_3();
  *(void *)&double v6 = __chkstk_darwin(v5).n128_u64[0];
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v8 = [*v1 groupObjectID:v6];
  v8[8] = 1;
  swift_storeEnumTagMultiPayload();
  double v9 = (void *)sub_100649DD0((uint64_t)v8, a1, 0);
  if (v2)
  {
    sub_100501D98((uint64_t)v8);
  }
  else
  {
    uint64_t v3 = sub_1005014E0(v9);
    sub_100501D98((uint64_t)v8);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_100500D64(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = self;
  _StringGuts.grow(_:)(119);
  v3._object = (void *)0x80000001007D75E0;
  v3._countAndFlagsBits = 0xD000000000000075;
  String.append(_:)(v3);
  id v4 = [v1 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 invalidParameterErrorWithDescription:v9];

  return swift_willThrow();
}

uint64_t sub_100500E6C(unint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = a1;
  if (!(a1 >> 62))
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_3;
    }
LABEL_40:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
LABEL_39:
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_40;
  }
LABEL_3:
  unint64_t v40 = v9 & 0xC000000000000001;
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(v9 + 32);
LABEL_6:
    id v12 = v11;
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v13)
      {
LABEL_8:
        uint64_t v42 = v5;
        uint64_t v5 = 0;
        unint64_t v41 = a2 & 0xC000000000000001;
        uint64_t v37 = v9 & 0xFFFFFFFFFFFFFF8;
        uint64_t v38 = (char *)(a2 + 32);
        uint64_t v39 = v10 - 1;
        uint64_t v36 = v9 + 40;
        do
        {
          if (v41) {
            id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v14 = *(id *)&v38[8 * (void)v5];
          }
          a2 = (unint64_t)v14;
          uint64_t v46 = v12;
          id v45 = v14;
          uint64_t v15 = *(void **)a4;
          unint64_t v17 = sub_100306FE8((uint64_t)v12);
          uint64_t v18 = v15[2];
          BOOL v19 = (v16 & 1) == 0;
          uint64_t v20 = v18 + v19;
          if (__OFADD__(v18, v19))
          {
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v9 = v16;
          if (v15[3] >= v20)
          {
            if (a3)
            {
              if ((v16 & 1) == 0) {
                goto LABEL_22;
              }
            }
            else
            {
              sub_100318548();
              if ((v9 & 1) == 0) {
                goto LABEL_22;
              }
            }
          }
          else
          {
            sub_10030DBF8(v20, a3 & 1);
            unint64_t v21 = sub_100306FE8((uint64_t)v12);
            if ((v9 & 1) != (v22 & 1)) {
              goto LABEL_46;
            }
            unint64_t v17 = v21;
            if ((v9 & 1) == 0)
            {
LABEL_22:
              id v26 = *(void **)a4;
              *(void *)(*(void *)a4 + 8 * (v17 >> 6) + 64) |= 1 << v17;
              uint64_t v27 = 8 * v17;
              *(void *)(v26[6] + v27) = v12;
              *(void *)(v26[7] + v27) = a2;
              uint64_t v28 = v26[2];
              BOOL v29 = __OFADD__(v28, 1);
              uint64_t v30 = v28 + 1;
              if (v29) {
                goto LABEL_37;
              }
              v26[2] = v30;
              goto LABEL_24;
            }
          }
          id v23 = *(void **)a4;
          uint64_t v44 = *(void **)(*(void *)(*(void *)a4 + 56) + 8 * v17);
          uint64_t v24 = v44;
          sub_100500D64(&v44);
          if (v42)
          {

            uint64_t v44 = v42;
            swift_errorRetain();
            sub_100094134((uint64_t *)&unk_10090ABB0);
            if (swift_dynamicCast()) {
              goto LABEL_47;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v32 = v45;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return swift_errorRelease();
          }

          uint64_t v25 = v23[7];
          uint64_t v9 = 8 * v17;
          a2 = v43;

          *(void *)(v25 + 8 * v17) = v43;
LABEL_24:
          if ((void *)v39 == v5) {
            goto LABEL_40;
          }
          if (v40)
          {
            id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((unint64_t)v5 + 1 >= *(void *)(v37 + 16)) {
              goto LABEL_38;
            }
            id v31 = *(id *)(v36 + 8 * (void)v5);
          }
          id v12 = v31;
          if (v5 == (void *)0x7FFFFFFFFFFFFFFELL) {
            goto LABEL_36;
          }
          uint64_t v5 = (char *)v5 + 1;
          a3 = 1;
        }
        while ((void *)v13 != v5);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_44:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_46:
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_47:
  _StringGuts.grow(_:)(30);
  v34._object = (void *)0x80000001007D3E70;
  v34._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v34);
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  _print_unlocked<A, B>(_:_:)();
  v35._countAndFlagsBits = 39;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100501360(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v4);
      double v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      sub_1001B7C30(v5);
      if (v1)
      {
        swift_bridgeObjectRelease();

        return (void *)swift_bridgeObjectRelease();
      }

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      ++v4;
      if (v7 == v3) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1005014E0(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  unint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  double v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v53 = (unint64_t)a1;
  sub_100094134((uint64_t *)&unk_100921B00);
  uint64_t v7 = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  sub_1000BFEAC((unint64_t *)&qword_100911190, (uint64_t *)&unk_100921B00);
  unint64_t v8 = sub_1001207D4();
  uint64_t v9 = &v53;
  unint64_t v10 = Sequence.unique<A>(by:)();
  if (v1) {
    return (uint64_t)v9;
  }
  unint64_t v12 = v10;
  uint64_t v51 = v6;
  NSString v52 = 0;
  unint64_t v50 = v4;
  unint64_t v13 = v10 >> 62;
  if (!(v10 >> 62))
  {
    uint64_t v14 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14) {
      goto LABEL_5;
    }
LABEL_49:
    swift_bridgeObjectRelease();
    id v44 = objc_allocWithZone((Class)REMSmartListsDataViewInvocationResult);
    sub_1000963CC(0, &qword_10090B328);
    v43.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    uint64_t v9 = (unint64_t *)[v44 initWithSmartListStorages:v43.super.isa];
    goto LABEL_50;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_49;
  }
LABEL_5:
  uint64_t v48 = v7;
  uint64_t v49 = v3;
  unint64_t v47 = v8;
  unint64_t v53 = (unint64_t)_swiftEmptyArrayStorage;
  if (v14 < 1)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v16 = *(id *)(v12 + 8 * i + 32);
      }
      unint64_t v17 = v16;
      id v18 = [v16 account:v47, v48];

      if (v18)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v3 = v53;
    if (!(v53 >> 62))
    {
      uint64_t v9 = *(unint64_t **)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = (unint64_t *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_17:
  BOOL v19 = v51;
  if (v13)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v21 = v52;
  if (v9 != (unint64_t *)v20)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v23 = self;
    uint64_t v9 = (unint64_t *)String._bridgeToObjectiveC()();
    id v24 = [v23 internalErrorWithDebugDescription:v9];
LABEL_24:
    v24;

    swift_willThrow();
    return (uint64_t)v9;
  }
  char v22 = sub_100501360(v12);
  if (v21)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
  unint64_t v25 = (unint64_t)v22;
  if (qword_100907740 != -1) {
    swift_once();
  }
  uint64_t v26 = v49;
  uint64_t v27 = sub_10008E2DC(v49, (uint64_t)qword_10091BEF8);
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 16))(v19, v27, v26);
  NSString v52 = &v47;
  unint64_t v53 = v3;
  __chkstk_darwin(v28);
  *(&v47 - 2) = (unint64_t)v19;
  sub_100094134(&qword_100910070);
  uint64_t v29 = sub_1000963CC(0, &qword_100910180);
  sub_1000BFEAC((unint64_t *)&qword_1009133E0, &qword_100910070);
  uint64_t v51 = (char *)v29;
  uint64_t v30 = 0;
  unint64_t v31 = Sequence.map<A>(skippingError:_:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v19, v49);
  swift_bridgeObjectRelease();
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!(v25 >> 62))
    {
LABEL_29:
      if (v32 == *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_30;
      }
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!(v25 >> 62)) {
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v32 != v45)
  {
LABEL_55:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v46 = self;
    uint64_t v9 = (unint64_t *)String._bridgeToObjectiveC()();
    id v24 = [v46 internalErrorWithDebugDescription:v9];
    goto LABEL_24;
  }
LABEL_30:
  unint64_t v33 = (unint64_t)_swiftEmptyArrayStorage;
  if (!v32) {
    goto LABEL_38;
  }
  unint64_t v50 = v31;
  NSString v52 = 0;
  unint64_t v53 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v32 & 0x8000000000000000) == 0)
  {
    uint64_t v34 = 0;
    do
    {
      if ((v25 & 0xC000000000000001) != 0) {
        id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v35 = *(id *)(v25 + 8 * v34 + 32);
      }
      uint64_t v36 = v35;
      ++v34;
      id v37 = [v35 objectID:v47, v48];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v32 != v34);
    unint64_t v33 = v53;
    uint64_t v30 = v52;
    unint64_t v31 = v50;
LABEL_38:
    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v38 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v32 < v38) {
      uint64_t v38 = v32;
    }
    if (v38)
    {
      sub_100094134(&qword_10090E1A8);
      uint64_t v39 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v39 = _swiftEmptyDictionarySingleton;
    }
    unint64_t v53 = (unint64_t)v39;
    sub_100500E6C(v33, v31, 1, (uint64_t)&v53);
    uint64_t v9 = (unint64_t *)v53;
    if (v30)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v9;
    }
    sub_10064A250(v12);
    swift_bridgeObjectRelease();
    NSString v52 = 0;
    id v40 = objc_allocWithZone((Class)REMSmartListsDataViewInvocationResult);
    sub_1000963CC(0, &qword_10090B328);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v42 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    v43.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v9 = (unint64_t *)[v40 initWithSmartListStorages:isa accountStorages:v42 parentListStorages:v43.super.isa];

LABEL_50:
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100501D98(uint64_t a1)
{
  uint64_t v2 = _s10PredicatesOMa_3();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100501DF4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091BF10);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091BF10);
  if (qword_100907818 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942490);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100501EBC(uint64_t a1)
{
  if (qword_100907748 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_10091BF10);
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    double v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "os_transaction INIT {name: com.apple.remindd.intentsRelevantShortcutsHandler}", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = os_transaction_create();
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = _swiftEmptyArrayStorage;
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(type metadata accessor for REMWidgetRefresh.WidgetKind() - 8);
    uint64_t v12 = v8 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v13 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain_n();
    do
    {
      sub_100503088((uint64_t)aBlock, v12, a1);
      v12 += v13;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease_n();
    uint64_t v9 = (void *)aBlock[0];
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    id v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v16 = 134217984;
    aBlock[0] = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "RelevantShortcutsHandler setting %ld shortcuts", v16, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  id v17 = [self defaultStore];
  sub_1000963CC(0, &qword_100910280);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  BOOL v19 = (void *)REMAppBundleIdentifier;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v7;
  *(void *)(v20 + 24) = v9;
  aBlock[4] = sub_1005037A4;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E13D0;
  aBlock[3] = &unk_1008C8A28;
  unint64_t v21 = _Block_copy(aBlock);
  id v22 = v19;
  swift_unknownObjectRetain();
  swift_release();
  [v17 setRelevantShortcuts:isa forBundleIdentifier:v22 completionHandler:v21];
  _Block_release(v21);
  swift_unknownObjectRelease();
}

void sub_10050226C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100907748 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091BF10);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      double v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)double v6 = 136315138;
      swift_getErrorValue();
      uint64_t v7 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v7, v8, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "RelevantShortcutsHandler unable to set shortcuts because %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100907748 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_10091BF10);
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 134217984;
      if (a3 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v14 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "RelevantShortcutsHandler set %ld shortcuts", v13, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  if (qword_100907748 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_10091BF10);
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "os_transaction RELEASE {name: com.apple.remindd.intentsRelevantShortcutsHandler}", v18, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10050264C(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v63 = a3;
  uint64_t v64 = a1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  unint64_t v73 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_10091BFF0);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_100094134(&qword_100909C68);
  uint64_t v62 = *(void *)(v72 - 8);
  __chkstk_darwin(v72 - 8);
  uint64_t v76 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v77 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134(&qword_10091C000);
  __chkstk_darwin(v13 - 8);
  uint64_t v75 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for INShortcut();
  uint64_t v69 = *(void *)(v15 - 8);
  uint64_t v70 = v15;
  __chkstk_darwin(v15);
  id v68 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a2[1];
  uint64_t v66 = *a2;
  uint64_t v18 = a2[2];
  id v19 = objc_allocWithZone((Class)type metadata accessor for ConfigurationIntent());
  unint64_t v67 = v17;
  swift_bridgeObjectRetain();
  id v20 = [v19 init];
  uint64_t v21 = *(void *)(v18 + 16);
  uint64_t v65 = v18;
  uint64_t v61 = v11;
  if (v21) {
    swift_bridgeObjectRetain();
  }
  type metadata accessor for ConfigurationList();
  id v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v25 = [v22 initWithIdentifier:v23 displayString:v24];

  [v20 setList:v25];
  id v26 = v20;
  uint64_t v27 = v75;
  INShortcut.init(intent:)();
  uint64_t v29 = v69;
  uint64_t v28 = v70;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v27, 1, v70) == 1)
  {
    swift_bridgeObjectRelease();

    return sub_1000966BC(v27, &qword_10091C000);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v68, v27, v28);
  uint64_t v79 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v31 = v72;
  id v74 = v26;
  if (!v21) {
    goto LABEL_19;
  }
  uint64_t v32 = v65 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
  uint64_t v75 = *(void *)(v61 + 72);
  unint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
  swift_bridgeObjectRetain();
  uint64_t v34 = v77;
  uint64_t v71 = v10;
  do
  {
    sub_10050382C(v32, (uint64_t)v34);
    sub_100503890((uint64_t)&v34[*(int *)(v10 + 24)], (uint64_t)v8);
    if ((*v33)(v8, 1, v31) == 1)
    {
      sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_10091BFF0);
      uint64_t v35 = *(void *)&v34[*(int *)(v10 + 28)];
      if (!v35)
      {
        sub_1005038F8((uint64_t)v34);
        goto LABEL_8;
      }
      [objc_allocWithZone((Class)INLocationRelevanceProvider) initWithRegion:v35];
    }
    else
    {
      uint64_t v36 = v8;
      uint64_t v37 = v76;
      sub_1001326D0((uint64_t)v8, v76);
      uint64_t v38 = v37 + *(int *)(v31 + 36);
      uint64_t v39 = type metadata accessor for Date();
      uint64_t v40 = *(void *)(v39 - 8);
      unint64_t v41 = v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v73, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v41, 0, 1, v39);
      v42.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v41, 1, v39) != 1)
      {
        id v44 = v73;
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v39);
      }
      [objc_allocWithZone((Class)INDateRelevanceProvider) initWithStartDate:v42.super.isa endDate:isa];

      sub_1000966BC(v76, &qword_100909C68);
      unint64_t v8 = v36;
      uint64_t v10 = v71;
      uint64_t v31 = v72;
    }
    sub_1005038F8((uint64_t)v77);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v26 = v74;
    uint64_t v34 = v77;
LABEL_8:
    v32 += v75;
    --v21;
  }
  while (v21);
  swift_bridgeObjectRelease();
LABEL_19:
  id v45 = objc_allocWithZone((Class)INRelevantShortcut);
  Class v46 = INShortcut._bridgeToObjectiveC()().super.isa;
  id v47 = [v45 initWithShortcut:v46];

  [v47 setShortcutRole:1];
  REMWidgetRefresh.WidgetKind.widgetKindIdentifier.getter();
  NSString v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v47 setWidgetKind:v48];

  sub_1000963CC(0, &qword_10091C008);
  Class v49 = Array._bridgeToObjectiveC()().super.isa;
  [v47 setRelevanceProviders:v49];

  unint64_t v50 = (char *)v47;
  uint64_t v51 = v64;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  unint64_t v52 = v67;
  if (qword_100907748 != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  sub_10008E2DC(v53, (uint64_t)qword_10091BF10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = swift_slowAlloc();
    uint64_t v79 = swift_slowAlloc();
    *(_DWORD *)uint64_t v56 = 136446466;
    uint64_t v77 = v50;
    swift_bridgeObjectRetain();
    uint64_t v78 = sub_1000C51B8(v66, v52, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v56 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v57 = Array.description.getter();
    unint64_t v59 = v58;
    swift_bridgeObjectRelease();
    uint64_t v78 = sub_1000C51B8(v57, v59, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "RDIntentsRelevantShortcutsHandler: adding relevant shortcut {identifier: %{public}s, relevanceProviders: %s}", (uint8_t *)v56, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v68, v70);
}

uint64_t sub_10050302C()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDIntentsRelevantShortcutsHandler()
{
  return self;
}

uint64_t sub_100503088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_10091BFD0);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for URL();
  uint64_t v71 = *(void (***)(char *, uint64_t))(v74 - 8);
  __chkstk_darwin(v74);
  unint64_t v73 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v72 = (uint64_t)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (id *)((char *)v64 - v14);
  uint64_t v16 = type metadata accessor for REMWidgetRefresh.WidgetKind();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v18 = __chkstk_darwin(v16);
  id v20 = (char *)v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
  uint64_t v65 = a2;
  v21(v20, a2, v16, v18);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v20, v16);
  if (v22 == enum case for REMWidgetRefresh.WidgetKind.widgetForAnyList(_:))
  {
    v64[1] = a1;
    NSString v23 = _swiftEmptyDictionarySingleton;
    uint64_t v75 = _swiftEmptyDictionarySingleton;
    uint64_t v24 = *(void *)(a3 + 16);
    if (v24)
    {
      uint64_t v25 = *(unsigned __int8 *)(v11 + 80);
      uint64_t v26 = (v25 + 32) & ~v25;
      uint64_t v27 = a3 + v26;
      uint64_t v28 = *(void *)(v11 + 72);
      uint64_t v70 = v26;
      ++v71;
      uint64_t v67 = v25 | 7;
      uint64_t v68 = v28 + v26;
      v64[0] = a3;
      uint64_t v29 = v28;
      swift_bridgeObjectRetain();
      long long v66 = xmmword_100776E40;
      uint64_t v69 = v29;
      while (1)
      {
        sub_10050382C(v27, (uint64_t)v15);
        id v31 = [*v15 urlRepresentation];
        uint64_t v32 = v73;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v33 = URL.absoluteString.getter();
        uint64_t v35 = v34;
        (*v71)(v32, v74);
        unint64_t v37 = sub_1001806F8(v33, v35);
        uint64_t v38 = v23[2];
        BOOL v39 = (v36 & 1) == 0;
        uint64_t v40 = v38 + v39;
        if (__OFADD__(v38, v39)) {
          break;
        }
        char v41 = v36;
        if (v23[3] < v40)
        {
          sub_100315060(v40, 1);
          NSString v23 = v75;
          unint64_t v42 = sub_1001806F8(v33, v35);
          if ((v41 & 1) != (v43 & 1)) {
            goto LABEL_27;
          }
          unint64_t v37 = v42;
        }
        if (v41)
        {
          swift_bridgeObjectRelease();
          uint64_t v44 = v23[7];
          sub_10026B6E8((uint64_t)v15, v72);
          unint64_t v45 = *(void *)(v44 + 8 * v37);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v44 + 8 * v37) = v45;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v45 = sub_10030B2E4(0, *(void *)(v45 + 16) + 1, 1, v45);
            *(void *)(v44 + 8 * v37) = v45;
          }
          unint64_t v48 = *(void *)(v45 + 16);
          unint64_t v47 = *(void *)(v45 + 24);
          if (v48 >= v47 >> 1)
          {
            unint64_t v45 = sub_10030B2E4(v47 > 1, v48 + 1, 1, v45);
            *(void *)(v44 + 8 * v37) = v45;
          }
          *(void *)(v45 + 16) = v48 + 1;
          uint64_t v30 = v45 + v70 + v48 * v69;
          uint64_t v29 = v69;
          sub_10026B6E8(v72, v30);
        }
        else
        {
          sub_100094134((uint64_t *)&unk_10091BFE0);
          uint64_t v49 = swift_allocObject();
          *(_OWORD *)(v49 + 16) = v66;
          sub_10026B6E8((uint64_t)v15, v49 + v70);
          v23[(v37 >> 6) + 8] |= 1 << v37;
          unint64_t v50 = (uint64_t *)(v23[6] + 16 * v37);
          uint64_t *v50 = v33;
          v50[1] = v35;
          *(void *)(v23[7] + 8 * v37) = v49;
          uint64_t v51 = v23[2];
          BOOL v52 = __OFADD__(v51, 1);
          uint64_t v53 = v51 + 1;
          if (v52) {
            goto LABEL_26;
          }
          v23[2] = v53;
        }
        v27 += v29;
        if (!--v24)
        {
          uint64_t v22 = swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_28;
    }
LABEL_24:
    __chkstk_darwin(v22);
    v64[-2] = v65;
    unint64_t v62 = sub_1002B1648((uint64_t)_swiftEmptyArrayStorage, (void (*)(uint64_t *, void *))sub_100503810, (uint64_t)&v64[-4], (uint64_t)v23);
    swift_bridgeObjectRelease();
    return sub_100203E60(v62);
  }
  if (v22 == enum case for REMWidgetRefresh.WidgetKind.widgetForTodayList(_:))
  {
    sub_100094134(&qword_10091BFD8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    id v55 = REMSmartListTypeToday;
    REMNavigationSpecifier.init(_:)();
    uint64_t v56 = type metadata accessor for REMNavigationSpecifier();
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v8, 1, v56) == 1)
    {
      sub_1000966BC((uint64_t)v8, &qword_10091BFD0);
      unint64_t v58 = 0xED00005941444F54;
      uint64_t v59 = 0x20474E495353494DLL;
    }
    else
    {
      uint64_t v60 = v73;
      REMNavigationSpecifier.url.getter();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v8, v56);
      uint64_t v59 = URL.absoluteString.getter();
      unint64_t v58 = v61;
      v71[1](v60, v74);
    }
    *(void *)(inited + 32) = v59;
    *(void *)(inited + 40) = v58;
    *(void *)(inited + 48) = a3;
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_1002EF774(inited);
    NSString v23 = (void *)v22;
    goto LABEL_24;
  }
LABEL_28:
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100503764()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1005037A4(uint64_t a1)
{
  sub_10050226C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1005037AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005037BC()
{
  return swift_release();
}

uint64_t type metadata accessor for RDIntentsRelevantShortcutsHandlerItem()
{
  uint64_t result = qword_10091C068;
  if (!qword_10091C068) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100503810(void *a1, uint64_t *a2)
{
  return sub_10050264C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10050382C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100503890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10091BFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005038F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100503954(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    unint64_t v8 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = v5;
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_100094134(&qword_100909C68);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
    {
      uint64_t v15 = sub_100094134((uint64_t *)&unk_10091BFF0);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v16 = type metadata accessor for Date();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(v10, v11, v16);
      v17(&v10[*(int *)(v13 + 36)], &v11[*(int *)(v13 + 36)], v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    }
    uint64_t v18 = *(int *)(a3 + 28);
    uint64_t v19 = *(char **)((char *)a2 + v18);
    *(void *)&a1[v18] = v19;
    id v20 = v19;
  }
  return a1;
}

void sub_100503B2C(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  int v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_100094134(&qword_100909C68);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8);
    v7(v4, v6);
    v7(&v4[*(int *)(v5 + 36)], v6);
  }
  unint64_t v8 = *(id *)((char *)a1 + *(int *)(a2 + 28));
}

void *sub_100503C34(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  a1[2] = *(void *)(a2 + 16);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  id v11 = v6;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_100094134(&qword_100909C68);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
  {
    uint64_t v14 = sub_100094134((uint64_t *)&unk_10091BFF0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v9, v10, v15);
    v16(&v9[*(int *)(v12 + 36)], &v10[*(int *)(v12 + 36)], v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  uint64_t v17 = *(int *)(a3 + 28);
  uint64_t v18 = *(void **)(a2 + v17);
  *(void *)((char *)a1 + v17) = v18;
  id v19 = v18;
  return a1;
}

uint64_t sub_100503DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)(a1 + v9);
  id v11 = (char *)(a2 + v9);
  uint64_t v12 = sub_100094134(&qword_100909C68);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      uint64_t v25 = type metadata accessor for Date();
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24);
      v26(v10, v11, v25);
      v26(&v10[*(int *)(v12 + 36)], &v11[*(int *)(v12 + 36)], v25);
      goto LABEL_7;
    }
    sub_1000966BC((uint64_t)v10, &qword_100909C68);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v19 = sub_100094134((uint64_t *)&unk_10091BFF0);
    memcpy(v10, v11, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
  v18(v10, v11, v17);
  v18(&v10[*(int *)(v12 + 36)], &v11[*(int *)(v12 + 36)], v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v20 = *(int *)(a3 + 28);
  uint64_t v21 = *(void **)(a1 + v20);
  uint64_t v22 = *(void **)(a2 + v20);
  *(void *)(a1 + v20) = v22;
  id v23 = v22;

  return a1;
}

uint64_t sub_100504008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  id v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_100094134(&qword_100909C68);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100094134((uint64_t *)&unk_10091BFF0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
    v13(v7, v8, v12);
    v13(&v7[*(int *)(v9 + 36)], &v8[*(int *)(v9 + 36)], v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_100504188(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_100094134(&qword_100909C68);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v22 = type metadata accessor for Date();
      id v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 40);
      v23(v9, v10, v22);
      v23(&v9[*(int *)(v11 + 36)], &v10[*(int *)(v11 + 36)], v22);
      goto LABEL_7;
    }
    sub_1000966BC((uint64_t)v9, &qword_100909C68);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v18 = sub_100094134((uint64_t *)&unk_10091BFF0);
    memcpy(v9, v10, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
  v17(v9, v10, v16);
  v17(&v9[*(int *)(v11 + 36)], &v10[*(int *)(v11 + 36)], v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v19 = *(int *)(a3 + 28);
  uint64_t v20 = *(void **)(a1 + v19);
  *(void *)(a1 + v19) = *(void *)((char *)a2 + v19);

  return a1;
}

uint64_t sub_1005043B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005043C8);
}

uint64_t sub_1005043C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100094134((uint64_t *)&unk_10091BFF0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10050447C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100504490);
}

void *sub_100504490(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    void *result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100094134((uint64_t *)&unk_10091BFF0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10050453C()
{
  sub_1005045E8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1005045E8()
{
  if (!qword_10091C078)
  {
    sub_100096058(&qword_100909C68);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10091C078);
    }
  }
}

uint64_t sub_100504644()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091C0B0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091C0B0);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100504824(uint64_t a1)
{
  if (a1)
  {
    uint64_t ObjectType = swift_getObjectType();
    __chkstk_darwin(ObjectType);
    type metadata accessor for UnfairLock();
    swift_unknownObjectRetain();
    swift_retain();
    Lock.sync<A>(_:)();
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    if (qword_100907750 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_10091C0B0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v3, "Trying to add observer to RDAccountPropertiesNotifier but input observer is nil", v4, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1005049EC(void *a1, char *a2, uint64_t a3)
{
  uint64_t v51 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v52 = v5;
  uint64_t v53 = v6;
  __chkstk_darwin(v5);
  unint64_t v50 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134(&qword_100917C38);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v46 = v15;
  uint64_t v47 = v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100094134(&qword_10091C108);
  uint64_t v20 = *(uint8_t **)(v19 - 8);
  uint64_t v48 = v19;
  uint64_t v49 = v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = [self defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a1;
  *(void *)(v24 + 24) = a3;
  sub_100506588((unint64_t *)&qword_10091A460, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
  swift_unknownObjectRetain();
  Publisher.filter(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v55[0] = [a1 callbackQueue];
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v10, 1, 1, v25);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1000967F4((unint64_t *)&unk_100917C68, &qword_100917C38);
  sub_100096654();
  uint64_t v26 = v46;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v26);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a1;
  *(void *)(v27 + 24) = a3;
  sub_1000967F4(&qword_10091C110, &qword_10091C108);
  swift_unknownObjectRetain();
  uint64_t v28 = v48;
  uint64_t v29 = (char *)Publisher<>.sink(receiveValue:)();
  swift_release();
  (*((void (**)(char *, uint64_t))v49 + 1))(v22, v28);
  id v30 = [a1 uuid];
  uint64_t v31 = (uint64_t)v50;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v32 = (uint64_t *)&v51[OBJC_IVAR___RDAccountPropertiesNotifier_l_observers];
  swift_beginAccess();
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *v32;
  *uint64_t v32 = 0x8000000000000000;
  sub_1002C70CC((uint64_t)a1, v31, isUniquelyReferenced_nonNull_native);
  *uint64_t v32 = v54;
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
  v53 += 8;
  v34(v31, v52);
  swift_endAccess();
  id v35 = [a1 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v55[3] = (id)type metadata accessor for AnyCancellable();
  v55[4] = &protocol witness table for AnyCancellable;
  v55[0] = v29;
  swift_beginAccess();
  swift_retain();
  sub_10035DC38((uint64_t)v55, v31);
  swift_endAccess();
  if (qword_100907750 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  sub_10008E2DC(v36, (uint64_t)qword_10091C0B0);
  swift_unknownObjectRetain_n();
  unint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = swift_slowAlloc();
    uint64_t v51 = v29;
    uint64_t v40 = (uint8_t *)v39;
    v55[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315138;
    uint64_t v49 = v40 + 4;
    id v41 = [a1 uuid];
    uint64_t v42 = v31;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v43 = UUID.uuidString.getter();
    unint64_t v45 = v44;
    v34(v42, v52);
    uint64_t v54 = sub_1000C51B8(v43, v45, (uint64_t *)v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDAccountPropertiesNotifier added observer {uuid: %s}", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_unknownObjectRelease_n();
    swift_release();
  }
}

uint64_t sub_1005051F0(uint64_t a1, void *a2)
{
  uint64_t result = Notification.userInfo.getter();
  if (result)
  {
    uint64_t v4 = result;
    strcpy((char *)v17, "propertyValue");
    HIWORD(v17[0]) = -4864;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v4 + 16) && (unint64_t v5 = sub_100307418((uint64_t)v15), (v6 & 1) != 0)) {
      sub_10009A1B0(*(void *)(v4 + 56) + 32 * v5, (uint64_t)v17);
    }
    else {
      memset(v17, 0, sizeof(v17));
    }
    swift_bridgeObjectRelease();
    sub_100233FFC((uint64_t)v15);
    sub_1000E6E80((uint64_t)v17, (uint64_t)v15);
    uint64_t v7 = v16;
    if (v16)
    {
      uint64_t v8 = sub_1000C0DE0(v15, v16);
      uint64_t v9 = *(void *)(v7 - 8);
      __n128 v10 = __chkstk_darwin(v8);
      uint64_t v12 = (char *)&v15[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v9 + 16))(v12, v10);
      uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v15);
    }
    else
    {
      uint64_t v13 = 0;
    }
    [a2 notify:v13];
    swift_unknownObjectRelease();
    return sub_1000966BC((uint64_t)v17, &qword_100908190);
  }
  return result;
}

void sub_1005053E8(uint64_t a1)
{
  if (a1)
  {
    __chkstk_darwin(a1);
    type metadata accessor for UnfairLock();
    swift_unknownObjectRetain();
    swift_retain();
    Lock.sync<A>(_:)();
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    if (qword_100907750 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_10091C0B0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v2))
    {
      os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v2, "Trying to remove observer to RDAccountPropertiesNotifier but input observer is nil", v3, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1005055A4(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)&double v5 = __chkstk_darwin(v3).n128_u64[0];
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [a2 uuid:v5];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  double v9 = sub_10030CE40((uint64_t)v7, (uint64_t)&v37);
  __n128 v10 = *(void (**)(char *, uint64_t, double))(v4 + 8);
  uint64_t v35 = v3;
  v10(v7, v3, v9);
  swift_endAccess();
  if (v38)
  {
    sub_1000967D4(&v37, (uint64_t)v39);
    sub_1000C0DE0(v39, v39[3]);
    dispatch thunk of Cancellable.cancel()();
    id v11 = [a2 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    sub_10030CF74((uint64_t)v7);
    uint64_t v12 = v35;
    ((void (*)(char *, uint64_t))v10)(v7, v35);
    swift_endAccess();
    swift_unknownObjectRelease();
    id v13 = [a2 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    double v14 = sub_10030CE40((uint64_t)v7, (uint64_t)&v37);
    v10(v7, v12, v14);
    sub_1000966BC((uint64_t)&v37, &qword_100911688);
    swift_endAccess();
    if (qword_100907750 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091C0B0);
    swift_unknownObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v34 = (void (*)(char *, uint64_t))v10;
      *(void *)&long long v37 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v33 = v18 + 4;
      id v20 = [a2 uuid:v18 + 4];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v21 = UUID.uuidString.getter();
      unint64_t v23 = v22;
      v34(v7, v35);
      uint64_t v36 = sub_1000C51B8(v21, v23, (uint64_t *)&v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDAccountPropertiesNotifier removed observer {uuid: %s}", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v39);
  }
  else
  {
    sub_1000966BC((uint64_t)&v37, &qword_100911688);
    if (qword_100907750 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_10091C0B0);
    swift_unknownObjectRetain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v34 = (void (*)(char *, uint64_t))v10;
      v39[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      id v29 = [a2 uuid:v27 + 4];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v30 = UUID.uuidString.getter();
      unint64_t v32 = v31;
      v34(v7, v35);
      *(void *)&long long v37 = sub_1000C51B8(v30, v32, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "RDAccountPropertiesNotifier cannot unobserve as the observer is not found {uuid: %s}", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

void sub_100505BB0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_unknownObjectRetain();
  id v7 = a1;
  a4(a3);
  swift_unknownObjectRelease();
}

id sub_100505C28()
{
  uint64_t v1 = type metadata accessor for UnfairLock.Options();
  __chkstk_darwin(v1);
  uint64_t v2 = OBJC_IVAR___RDAccountPropertiesNotifier_lock;
  uint64_t v6 = _swiftEmptyArrayStorage;
  sub_100506588((unint64_t *)&qword_100908278, (void (*)(uint64_t))&type metadata accessor for UnfairLock.Options);
  uint64_t v3 = v0;
  sub_100094134(&qword_100908280);
  sub_1000967F4((unint64_t *)&qword_100908288, &qword_100908280);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for UnfairLock();
  swift_allocObject();
  *(void *)&v0[v2] = UnfairLock.init(options:)();
  *(void *)&v3[OBJC_IVAR___RDAccountPropertiesNotifier_l_observers] = _swiftEmptyDictionarySingleton;
  *(void *)&v3[OBJC_IVAR___RDAccountPropertiesNotifier_l_cancellables] = _swiftEmptyDictionarySingleton;

  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for RDAccountPropertiesNotifier();
  return [super init];
}

id sub_100505DE0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDAccountPropertiesNotifier();
  return [super dealloc];
}

uint64_t type metadata accessor for RDAccountPropertiesNotifier()
{
  return self;
}

void sub_100505E94()
{
  sub_1005055A4(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_100505E9C()
{
  sub_1005049EC(*(void **)(v0 + 16), *(char **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100505EA8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100505EE0(uint64_t a1)
{
  return sub_100505EF0(a1, *(void **)(v1 + 16));
}

uint64_t sub_100505EE8(uint64_t a1)
{
  return sub_1005051F0(a1, *(void **)(v1 + 16));
}

uint64_t sub_100505EF0(uint64_t a1, void *a2)
{
  uint64_t v3 = Notification.userInfo.getter();
  if (!v3)
  {
    if (qword_100907750 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_10091C0B0);
    id v7 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v7, v11)) {
      goto LABEL_22;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    id v13 = "Received RDStoreControllerREMAccountPropertiesDidUpdate has no userInfo";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v7, v11, v13, v12, 2u);
    swift_slowDealloc();
LABEL_22:

LABEL_23:
    char v15 = 0;
    return v15 & 1;
  }
  uint64_t v4 = v3;
  v33[0] = 0x4F746E756F636361;
  v33[1] = 0xEF44497463656A62;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_100307418((uint64_t)v34), (v6 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v35);
  }
  else
  {
    long long v35 = 0u;
    long long v36 = 0u;
  }
  sub_100233FFC((uint64_t)v34);
  if (!*((void *)&v36 + 1))
  {
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)&v35, &qword_100908190);
LABEL_17:
    if (qword_100907750 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_10091C0B0);
    id v7 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v7, v11)) {
      goto LABEL_22;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    id v13 = "Received RDStoreControllerREMAccountPropertiesDidUpdate has no account REMObjectID in the userInfo";
    goto LABEL_21;
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  id v7 = v33[0];
  strcpy((char *)v33, "accountType");
  HIDWORD(v33[1]) = -352321536;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v8 = sub_100307418((uint64_t)v34), (v9 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v4 + 56) + 32 * v8, (uint64_t)&v35);
  }
  else
  {
    long long v35 = 0u;
    long long v36 = 0u;
  }
  sub_100233FFC((uint64_t)v34);
  if (!*((void *)&v36 + 1))
  {
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)&v35, &qword_100908190);
    goto LABEL_33;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_33:
    if (qword_100907750 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E2DC(v20, (uint64_t)qword_10091C0B0);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v23 = 0;
      uint64_t v24 = "Received RDStoreControllerREMAccountPropertiesDidUpdate has no account type in the userInfo";
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v21, v22, v24, v23, 2u);
      swift_slowDealloc();

      goto LABEL_23;
    }
    goto LABEL_51;
  }
  id v17 = (id)v33[0];
  strcpy((char *)v33, "propertyName");
  BYTE5(v33[1]) = 0;
  HIWORD(v33[1]) = -5120;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v18 = sub_100307418((uint64_t)v34), (v19 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v4 + 56) + 32 * v18, (uint64_t)&v35);
  }
  else
  {
    long long v35 = 0u;
    long long v36 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100233FFC((uint64_t)v34);
  if (!*((void *)&v36 + 1))
  {
    sub_1000966BC((uint64_t)&v35, &qword_100908190);
LABEL_46:
    if (qword_100907750 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_10008E2DC(v32, (uint64_t)qword_10091C0B0);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v23 = 0;
      uint64_t v24 = "Received RDStoreControllerREMAccountPropertiesDidUpdate has no property name in the userInfo";
      goto LABEL_50;
    }
LABEL_51:

    goto LABEL_22;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_46;
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090C120);
  id v25 = [[objc_msgSend(a2, "account") objectID];
  swift_unknownObjectRelease();
  char v26 = static NSObject.== infix(_:_:)();

  if ((v26 & 1) == 0
    || (id v27 = objc_msgSend(objc_msgSend(a2, "account"), "type"),
        swift_unknownObjectRelease(),
        v27 != v17))
  {

    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  id v28 = [a2 propertyName];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  if (v29 == v33[0] && v31 == v33[1])
  {

    swift_bridgeObjectRelease_n();
    char v15 = 1;
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  return v15 & 1;
}

uint64_t sub_100506588(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

__CFString *_sSo24ICCloudContextSyncReasona7reminddE03xpcc9InterfacecD0ABSgSo010REMXPCSyncgcD0a_tcfC_0(void *a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_AppDelegate;
LABEL_8:
    swift_bridgeObjectRelease_n();
    goto LABEL_9;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_AppDelegate;
LABEL_9:
    char v9 = *v8;

    return v9;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_DebugMenu;
    goto LABEL_8;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_DebugMenu;
    goto LABEL_9;
  }
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitDeleteAll;
    goto LABEL_8;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v21)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitDeleteAll;
    goto LABEL_9;
  }
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitRestart;
    goto LABEL_8;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitRestart;
    goto LABEL_9;
  }
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;
  if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitSync;
    goto LABEL_8;
  }
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v31)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitSync;
    goto LABEL_9;
  }
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;
  if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v34 == v35)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_SignificantTimeChange;
    goto LABEL_8;
  }
  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v36)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_SignificantTimeChange;
    goto LABEL_9;
  }
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;
  if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v39 == v40)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_UpdateAccounts;
    goto LABEL_8;
  }
  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v41)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_UpdateAccounts;
    goto LABEL_9;
  }
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v43;
  if (v42 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v44 == v45)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_FamilyChecklistCloudKitSync;
    goto LABEL_8;
  }
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v46)
  {
    unint64_t v8 = &ICCloudContextSyncReasonSyncInterface_FamilyChecklistCloudKitSync;
    goto LABEL_9;
  }
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  sub_10008E2DC(v47, (uint64_t)qword_100942328);
  id v48 = a1;
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 136315138;
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000C51B8(v52, v53, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Cannot convert to ICCloudContextSyncReason from unknown REMXPCSyncInterfaceSyncReason: %s", v51, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

char *sub_100506B7C()
{
  return sub_100506E8C();
}

char *sub_100506B94()
{
  return sub_100507220();
}

char *sub_100506BAC()
{
  return sub_100507528();
}

id sub_100506BC4()
{
  return sub_1005078BC();
}

id sub_100506BDC()
{
  id v2 = v1;
  uint64_t v3 = _s10PredicatesOMa(0);
  *(void *)&double v4 = __chkstk_darwin(v3).n128_u64[0];
  char v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *char v6 = [v0 listID:v4];
  swift_storeEnumTagMultiPayload();
  char v7 = (void *)sub_10038F1F0();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v8 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v9 = [(id)swift_getObjCClassFromMetadata() entity];
  [v8 setEntity:v9];

  [v8 setAffectedStores:0];
  [v8 setPredicate:v7];

  [v8 setFetchLimit:1];
  uint64_t v10 = NSManagedObjectContext.count<A>(for:)();
  if (v1)
  {
    sub_1005080CC((uint64_t)v6, _s10PredicatesOMa);
  }
  else
  {
    uint64_t v11 = v10;
    id v2 = [objc_allocWithZone((Class)REMStoreInvocationResult) init];
    id v12 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v11];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 storeProperty:v12 forKey:v13];

    sub_1005080CC((uint64_t)v6, _s10PredicatesOMa);
  }
  return v2;
}

id sub_100506E38()
{
  return sub_100506BDC();
}

char *sub_100506E5C()
{
  return sub_100507AF8();
}

id sub_100506E74()
{
  return sub_100507E00();
}

char *sub_100506E8C()
{
  uint64_t v1 = _s10PredicatesOMa_1();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907B10 != -1) {
    swift_once();
  }
  double v4 = swift_retain();
  id v5 = sub_10034A86C(v4);
  swift_release();

  if (!v5)
  {
    [self noPrimaryActiveCloudKitAccountError];
    swift_willThrow();
    return v3;
  }
  char v6 = self;
  id v7 = [v6 daemonUserDefaults];
  id v8 = [v7 tipKitCachedCountOfLists];

  if (v8)
  {
    uint64_t v9 = (uint64_t)[v8 integerValue];

    if (v9 > 3)
    {
LABEL_10:
      uint64_t v3 = (char *)[objc_allocWithZone((Class)REMStoreInvocationResult) init];
      id v16 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v9];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v3 storeProperty:v16 forKey:v17];

      return v3;
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v11 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v12 = [(id)swift_getObjCClassFromMetadata() entity];
  [v11 setEntity:v12];

  [v11 setAffectedStores:0];
  [v11 setPredicate:v10];

  [v11 setFetchLimit:4];
  uint64_t v13 = NSManagedObjectContext.count<A>(for:)();
  if (!v0)
  {
    uint64_t v9 = v13;
    id v14 = [v6 daemonUserDefaults];
    id v15 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v9];
    [v14 setTipKitCachedCountOfLists:v15];

    sub_1005080CC((uint64_t)v3, (uint64_t (*)(void))_s10PredicatesOMa_1);
    goto LABEL_10;
  }
  sub_1005080CC((uint64_t)v3, (uint64_t (*)(void))_s10PredicatesOMa_1);

  return v3;
}

char *sub_100507220()
{
  uint64_t v1 = _s10PredicatesOMa_1();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v4 = self;
  id v5 = [v4 daemonUserDefaults];
  id v6 = [v5 tipKitCachedCountOfListsWithCustomBadge];

  if (v6)
  {
    id v7 = [v6 integerValue];

    if ((uint64_t)v7 > 0) {
      goto LABEL_6;
    }
  }
  swift_storeEnumTagMultiPayload();
  id v8 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v9 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v10 = [(id)swift_getObjCClassFromMetadata() entity];
  [v9 setEntity:v10];

  [v9 setAffectedStores:0];
  [v9 setPredicate:v8];

  [v9 setFetchLimit:1];
  uint64_t v11 = NSManagedObjectContext.count<A>(for:)();
  if (!v0)
  {
    id v7 = (id)v11;
    id v12 = [v4 daemonUserDefaults];
    id v13 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v7];
    [v12 setTipKitCachedCountOfListsWithCustomBadge:v13];

    sub_1005080CC((uint64_t)v3, (uint64_t (*)(void))_s10PredicatesOMa_1);
LABEL_6:
    uint64_t v3 = (char *)[objc_allocWithZone((Class)REMStoreInvocationResult) init];
    id v14 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v7];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 storeProperty:v14 forKey:v15];

    return v3;
  }
  sub_1005080CC((uint64_t)v3, (uint64_t (*)(void))_s10PredicatesOMa_1);

  return v3;
}

char *sub_100507528()
{
  uint64_t v1 = _s10PredicatesOMa(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907B10 != -1) {
    swift_once();
  }
  double v4 = swift_retain();
  id v5 = sub_10034A86C(v4);
  swift_release();

  if (!v5)
  {
    [self noPrimaryActiveCloudKitAccountError];
    swift_willThrow();
    return v3;
  }
  id v6 = self;
  id v7 = [v6 daemonUserDefaults];
  id v8 = [v7 tipKitCachedCountOfUncompletedReminders];

  if (v8)
  {
    uint64_t v9 = (uint64_t)[v8 integerValue];

    if (v9 > 5)
    {
LABEL_10:
      uint64_t v3 = (char *)[objc_allocWithZone((Class)REMStoreInvocationResult) init];
      id v16 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v9];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v3 storeProperty:v16 forKey:v17];

      return v3;
    }
  }
  swift_storeEnumTagMultiPayload();
  id v10 = (void *)sub_10038F1F0();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v11 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v12 = [(id)swift_getObjCClassFromMetadata() entity];
  [v11 setEntity:v12];

  [v11 setAffectedStores:0];
  [v11 setPredicate:v10];

  [v11 setFetchLimit:6];
  uint64_t v13 = NSManagedObjectContext.count<A>(for:)();
  if (!v0)
  {
    uint64_t v9 = v13;
    id v14 = [v6 daemonUserDefaults];
    id v15 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v9];
    [v14 setTipKitCachedCountOfUncompletedReminders:v15];

    sub_1005080CC((uint64_t)v3, _s10PredicatesOMa);
    goto LABEL_10;
  }
  sub_1005080CC((uint64_t)v3, _s10PredicatesOMa);

  return v3;
}

id sub_1005078BC()
{
  id v1 = v0;
  uint64_t v2 = _s10PredicatesOMa(0);
  __chkstk_darwin(v2);
  double v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  id v5 = (void *)sub_10038F1F0();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v6 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v7 = [(id)swift_getObjCClassFromMetadata() entity];
  [v6 setEntity:v7];

  [v6 setAffectedStores:0];
  [v6 setPredicate:v5];

  [v6 setFetchLimit:1];
  uint64_t v8 = NSManagedObjectContext.count<A>(for:)();
  if (v0)
  {
    sub_1005080CC((uint64_t)v4, _s10PredicatesOMa);
  }
  else
  {
    uint64_t v9 = v8;
    id v1 = [objc_allocWithZone((Class)REMStoreInvocationResult) init];
    id v10 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v9];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v1 storeProperty:v10 forKey:v11];

    sub_1005080CC((uint64_t)v4, _s10PredicatesOMa);
  }
  return v1;
}

char *sub_100507AF8()
{
  uint64_t v1 = _s10PredicatesOMa_3();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v4 = self;
  id v5 = [v4 daemonUserDefaults];
  id v6 = [v5 tipKitCachedCountOfCustomSmartLists];

  if (v6)
  {
    id v7 = [v6 integerValue];

    if ((uint64_t)v7 > 0) {
      goto LABEL_6;
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = (void *)sub_100646F04();
  sub_1000963CC(0, (unint64_t *)&unk_100910210);
  id v9 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v10 = [(id)swift_getObjCClassFromMetadata() entity];
  [v9 setEntity:v10];

  [v9 setAffectedStores:0];
  [v9 setPredicate:v8];

  [v9 setFetchLimit:1];
  uint64_t v11 = NSManagedObjectContext.count<A>(for:)();
  if (!v0)
  {
    id v7 = (id)v11;
    id v12 = [v4 daemonUserDefaults];
    id v13 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v7];
    [v12 setTipKitCachedCountOfCustomSmartLists:v13];

    sub_1005080CC((uint64_t)v3, (uint64_t (*)(void))_s10PredicatesOMa_3);
LABEL_6:
    uint64_t v3 = (char *)[objc_allocWithZone((Class)REMStoreInvocationResult) init];
    id v14 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v7];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 storeProperty:v14 forKey:v15];

    return v3;
  }
  sub_1005080CC((uint64_t)v3, (uint64_t (*)(void))_s10PredicatesOMa_3);

  return v3;
}

id sub_100507E00()
{
  id v1 = self;
  id v2 = [v1 daemonUserDefaults];
  id v3 = [v2 tipKitCachedCountOfHashtags];

  if (v3)
  {
    id v4 = [v3 integerValue];

    if ((uint64_t)v4 > 0) {
      goto LABEL_7;
    }
  }
  sub_1002F51CC(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v5 = (void *)sub_1002F52FC(_swiftEmptyArrayStorage);
  sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  NSString v6 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v7 = [(id)swift_getObjCClassFromMetadata() entity];
  [v6 setEntity:v7];

  [v6 setAffectedStores:0];
  [v6 setPredicate:v5];

  [v6 setFetchLimit:1];
  uint64_t v8 = NSManagedObjectContext.count<A>(for:)();
  if (!v0)
  {
    id v4 = (id)v8;
    id v9 = [v1 daemonUserDefaults];
    id v10 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v4];
    [v9 setTipKitCachedCountOfHashtags:v10];

LABEL_7:
    id v1 = [objc_allocWithZone((Class)REMStoreInvocationResult) init];
    id v11 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v4];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v1 storeProperty:v11 forKey:v6];
  }
  return v1;
}

uint64_t sub_1005080CC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10050812C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 24))(v10);
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  sub_1000C0DE0(v10, v11);
  v9[3] = a1;
  v9[4] = a2;
  id v7 = sub_1000C1FE8(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(v7, v2, a1);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 8))(v9, v5, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v9);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v10);
}

uint64_t sub_100508214@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v1 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v1 - 8);
  uint64_t v29 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for TimeZone();
  uint64_t v3 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v25 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  id v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  NSString v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  __chkstk_darwin(v16);
  (*(void (**)(char *, void))(v18 + 104))((char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:));
  uint64_t v19 = v12;
  uint64_t v20 = v28;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for Date.ISO8601FormatStyle.DateTimeSeparator.standard(_:), v19);
  char v21 = v7;
  uint64_t v22 = v29;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Date.ISO8601FormatStyle.TimeSeparator.colon(_:), v8);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v21, enum case for Date.ISO8601FormatStyle.TimeZoneSeparator.omitted(_:), v27);
  TimeZone.init(secondsFromGMT:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v22, 1, v20);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v25, v22, v20);
    return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
  }
  return result;
}

uint64_t sub_100508614()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091C118);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091C118);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1005086DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v59 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = __chkstk_darwin(v12);
  NSString v15 = (char *)&v49 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v49 - v17;
  __chkstk_darwin(v16);
  char v21 = (char *)&v49 - v20;
  if (*(double *)(v2 + 56) <= 0.0)
  {
    return static Date.distantPast.getter();
  }
  else
  {
    uint64_t v60 = v19;
    uint64_t v56 = v4;
    uint64_t v57 = a1;
    uint64_t v23 = *(void *)(v2 + 40);
    uint64_t v22 = *(void *)(v2 + 48);
    id v55 = (void *)(v2 + 16);
    sub_1000C0DE0((void *)(v2 + 16), v23);
    sub_10050812C(v23, v22);
    Optional<A>.orDistantPast.getter();
    sub_1000EACF4((uint64_t)v9);
    Date.addingTimeInterval(_:)();
    if (qword_100907758 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_10091C118);
    uint64_t v58 = v11;
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v25(v15, v21, v10);
    v25(v60, v18, v10);
    swift_retain_n();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    int v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v54 = v18;
      uint64_t v30 = v29;
      uint64_t v53 = swift_slowAlloc();
      uint64_t v62 = v53;
      *(_DWORD *)uint64_t v30 = 136446722;
      uint64_t v50 = v30 + 4;
      os_log_t v52 = v26;
      uint64_t v31 = *(void *)(v2 + 40);
      uint64_t v32 = *(void *)(v2 + 48);
      sub_1000C0DE0(v55, v31);
      uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 16);
      LODWORD(v55) = v28;
      uint64_t v34 = v33(v31, v32);
      uint64_t v61 = sub_1000C51B8(v34, v35, &v62);
      uint64_t v51 = &v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2082;
      sub_100508214((uint64_t)v6);
      uint64_t v36 = Date.ISO8601Format(_:)();
      unint64_t v38 = v37;
      uint64_t v59 = *(void *)(v59 + 8);
      ((void (*)(char *, uint64_t))v59)(v6, v56);
      uint64_t v61 = sub_1000C51B8(v36, v38, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = *(void (**)(char *, uint64_t))(v58 + 8);
      v39(v15, v10);
      *(_WORD *)(v30 + 22) = 2082;
      uint64_t v50 = v30 + 24;
      sub_100508214((uint64_t)v6);
      uint64_t v40 = v60;
      uint64_t v41 = Date.ISO8601Format(_:)();
      unint64_t v43 = v42;
      ((void (*)(char *, uint64_t))v59)(v6, v56);
      uint64_t v61 = sub_1000C51B8(v41, v43, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v39(v40, v10);
      os_log_t v44 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v55, "RDExecutionIntervalThrottlingPolicy: Calculating reset date {identifier: %{public}s, lastExecuted: %{public}s, result: %{public}s}", (uint8_t *)v30, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v18 = v54;
      swift_slowDealloc();

      v39(v21, v10);
      uint64_t v45 = v58;
    }
    else
    {

      uint64_t v47 = v58;
      id v48 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v48((uint64_t)v60, v10);
      v48((uint64_t)v15, v10);
      swift_release_n();
      v48((uint64_t)v21, v10);
      uint64_t v45 = v47;
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v45 + 32))(v57, v18, v10);
  }
}

uint64_t sub_100508CE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - v7;
  static Date.now.getter();
  uint64_t v9 = v0 + 2;
  uint64_t v10 = v0[5];
  uint64_t v11 = v0[6];
  sub_1000C0DE0(v0 + 2, v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 24))(v44, v10, v11);
  uint64_t v12 = v45;
  uint64_t v13 = v46;
  sub_1000C0DE0(v44, v45);
  (*(void (**)(void *, char *, uint64_t, uint64_t))(v13 + 16))(v0 + 2, v8, v12, v13);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v44);
  id v14 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v15 = String._bridgeToObjectiveC()();
  [v14 setDateFormat:v15];

  if (qword_100907758 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_10008E2DC(v16, (uint64_t)qword_10091C118);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  swift_retain_n();
  id v17 = v14;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v41 = v3;
    uint64_t v22 = v21;
    uint64_t v42 = swift_slowAlloc();
    v44[0] = v42;
    *(_DWORD *)uint64_t v22 = 136446466;
    int v40 = v20;
    unint64_t v38 = v5;
    uint64_t v39 = v2;
    uint64_t v23 = v1[5];
    uint64_t v24 = v1[6];
    sub_1000C0DE0(v9, v23);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
    uint64_t v43 = sub_1000C51B8(v25, v26, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2082;
    os_log_type_t v27 = v38;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v29 = [v17 stringFromDate:isa];

    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v32 = v31;

    uint64_t v43 = sub_1000C51B8(v30, v32, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    uint64_t v33 = *(void (**)(char *, uint64_t))(v41 + 8);
    uint64_t v34 = v39;
    v33(v27, v39);
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v40, "RDExecutionIntervalThrottlingPolicy: Updated last executed date {identifier: %{public}s, date: %{public}s}", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return ((uint64_t (*)(char *, uint64_t))v33)(v8, v34);
  }
  else
  {

    uint64_t v36 = *(void (**)(char *, uint64_t))(v3 + 8);
    v36(v5, v2);

    swift_release_n();
    return ((uint64_t (*)(char *, uint64_t))v36)(v8, v2);
  }
}

uint64_t sub_100509164()
{
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDExecutionIntervalThrottlingPolicy()
{
  return self;
}

uint64_t sub_1005091C0(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  uint64_t v8 = sub_1000C1FE8((uint64_t *)&v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v8, a1, a4);
  uint64_t v9 = swift_allocObject();
  sub_1000967D4(&v11, v9 + 16);
  *(double *)(v9 + 56) = a2;
  return v9;
}

uint64_t sub_100509268()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091C1E0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091C1E0);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100509368(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for REMCDManualSortHint();
  id v6 = a1;
  swift_bridgeObjectRetain();
  id v7 = a4;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [(id)swift_getObjCClassFromMetadata() objectWithRecordID:v6 accountID:v8 context:v7];

  if (v9)
  {
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id sub_1005094E0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      uint64_t v12 = v11;
      [v10 setAccount:a2];
      [v10 mergeDataFromRecord:a1 accountID:v12];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_100907760 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_10091C1E0);
      id v14 = a2;
      NSString v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          uint64_t v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

void sub_100509984(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v126 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Class v117 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  Class v112 = (char *)&v112 - v7;
  uint64_t v116 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v116);
  NSString v9 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v114);
  NSString v113 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v118 = (uint64_t)&v112 - v12;
  __chkstk_darwin(v13);
  NSString v15 = (char *)&v112 - v14;
  __chkstk_darwin(v16);
  uint64_t v120 = (uint64_t)&v112 - v17;
  __chkstk_darwin(v18);
  uint64_t v129 = (uint64_t)&v112 - v19;
  __chkstk_darwin(v20);
  uint64_t v122 = (uint64_t)&v112 - v21;
  __chkstk_darwin(v22);
  NSString v115 = (char *)&v112 - v23;
  __chkstk_darwin(v24);
  uint64_t v127 = (uint64_t)&v112 - v25;
  uint64_t v26 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v112 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  id v128 = (char *)&v112 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v32 = String._bridgeToObjectiveC()();
  uint64_t v33 = (objc_class *)type metadata accessor for REMCDManualSortHint();
  v132.receiver = v2;
  v132.super_class = v33;
  [super mergeDataFromRecord:a1 accountID:v32];

  id v34 = [a1 recordID];
  NSString v35 = [v34 recordName];

  if (!v35)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v119 = v15;
  id v121 = v9;
  uint64_t v125 = v4;
  NSString v36 = [v2 ckIdentifierFromRecordName:v35];

  if (!v36)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setCkIdentifier:v36];

  uint64_t v37 = 9;
  unint64_t v38 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
  uint64_t v39 = (unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  uint64_t v123 = (void (**)(char *, uint64_t))(v30 + 8);
  uint64_t v124 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v30 + 32);
  int v40 = &byte_1008B7188;
  while (2)
  {
    int v42 = *v40++;
    switch(v42)
    {
      case 5:
        uint64_t v43 = CKRecord.subscript.getter();
        if (!v43)
        {
          (*v38)(v28, 1, 1, v29);
LABEL_24:
          sub_1000966BC((uint64_t)v28, (uint64_t *)&unk_100909A40);
          goto LABEL_10;
        }
        *(void *)&long long v131 = v43;
        sub_100094134(&qword_100909AB0);
        int v44 = swift_dynamicCast();
        (*v38)(v28, v44 ^ 1u, 1, v29);
        if ((*v39)(v28, 1, v29) == 1) {
          goto LABEL_24;
        }
        uint64_t v45 = v128;
        (*(void (**)(char *, char *, uint64_t))v124)(v128, v28, v29);
        Date.timeIntervalSinceReferenceDate.getter();
        Swift::Int32 v47 = Int32.init(timeIntervalSinceReferenceDate:)(v46);
        unsigned int v48 = [v2 lastAccessedSinceReferenceDate];
        if (v47 <= (int)v48) {
          uint64_t v49 = v48;
        }
        else {
          uint64_t v49 = v47;
        }
        [v2 setLastAccessedSinceReferenceDate:v49];
        (*v123)(v45, v29);
LABEL_10:
        if (--v37) {
          continue;
        }
        uint64_t v52 = CKRecord.subscript.getter();
        uint64_t v53 = v129;
        if (v52
          && (*(void *)&long long v131 = v52, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) != 0)
          && ((signed int v54 = (__int16)v130, v55 = [v2 serializationVersion], v54 <= v55)
            ? (signed int v56 = v55)
            : (signed int v56 = v54),
              v56 == 1))
        {
          uint64_t v57 = v127;
          uint64_t v58 = (void (**)(char *, uint64_t))(v126 + 56);
          id v128 = *(char **)(v126 + 56);
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v128)(v127, 1, 1, v125);
          uint64_t v59 = CKRecord.subscript.getter();
          if (v59)
          {
            os_log_type_t v130 = (unsigned int (*)(void, void, void))v59;
            if (swift_dynamicCast())
            {
              uint64_t v60 = (uint64_t)v115;
              UUID.init(uuidString:)();
              swift_bridgeObjectRelease();
              sub_1000966BC(v57, (uint64_t *)&unk_100909E50);
              sub_100096408(v60, v57, (uint64_t *)&unk_100909E50);
            }
          }
          uint64_t v61 = v122;
          sub_1001248EC(v57, v122);
          uint64_t v62 = v125;
          uint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48);
          unsigned int v64 = v63(v61, 1, v125);
          sub_1000966BC(v61, (uint64_t *)&unk_100909E50);
          if (v64 == 1) {
            goto LABEL_55;
          }
          uint64_t v124 = v63;
          sub_1001248EC(v127, v53);
          id v65 = [v2 eTag];
          if (v65)
          {
            long long v66 = v65;
            uint64_t v67 = v120;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v68 = 0;
          }
          else
          {
            uint64_t v68 = 1;
            uint64_t v67 = v120;
          }
          uint64_t v123 = v58;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v128)(v67, v68, 1, v62);
          uint64_t v73 = (uint64_t)v121;
          uint64_t v74 = (uint64_t)&v121[*(int *)(v116 + 48)];
          sub_1001248EC(v53, (uint64_t)v121);
          sub_1001248EC(v67, v74);
          uint64_t v75 = v124;
          if (v124(v73, 1, v62) == 1)
          {
            sub_1000966BC(v67, (uint64_t *)&unk_100909E50);
            sub_1000966BC(v53, (uint64_t *)&unk_100909E50);
            uint64_t v63 = v75;
            if (v75(v74, 1, v62) == 1)
            {
              sub_1000966BC((uint64_t)v121, (uint64_t *)&unk_100909E50);
              goto LABEL_50;
            }
LABEL_48:
            sub_1000966BC((uint64_t)v121, (uint64_t *)&unk_10090B4C0);
            goto LABEL_55;
          }
          sub_1001248EC(v73, (uint64_t)v119);
          uint64_t v63 = v75;
          if (v75(v74, 1, v62) == 1)
          {
            sub_1000966BC(v120, (uint64_t *)&unk_100909E50);
            sub_1000966BC(v53, (uint64_t *)&unk_100909E50);
            (*(void (**)(char *, uint64_t))(v126 + 8))(v119, v62);
            goto LABEL_48;
          }
          uint64_t v76 = v126;
          uint64_t v77 = v112;
          (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v112, v74, v62);
          sub_100124954();
          LODWORD(v122) = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v78 = *(void (**)(char *, uint64_t))(v76 + 8);
          v78(v77, v125);
          sub_1000966BC(v120, (uint64_t *)&unk_100909E50);
          sub_1000966BC(v129, (uint64_t *)&unk_100909E50);
          v78(v119, v125);
          uint64_t v62 = v125;
          sub_1000966BC(v73, (uint64_t *)&unk_100909E50);
          if (v122)
          {
LABEL_50:
            if (qword_100907760 != -1) {
              swift_once();
            }
            uint64_t v79 = type metadata accessor for Logger();
            sub_10008E2DC(v79, (uint64_t)qword_10091C1E0);
            id v80 = Logger.logObject.getter();
            os_log_type_t v81 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v80, v81))
            {
              id v82 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)id v82 = 0;
              _os_log_impl((void *)&_mh_execute_header, v80, v81, "Skip merging for different in eTag", v82, 2u);
              swift_slowDealloc();
            }

LABEL_74:
            sub_1000966BC(v127, (uint64_t *)&unk_100909E50);
          }
          else
          {
LABEL_55:
            sub_1004C1A54(a1, 0xD00000000000002FLL, 1, &v131);
            id v83 = (void *)*((void *)&v131 + 1);
            if (*((void *)&v131 + 1) >> 60 == 15)
            {
              sub_1004C1A54(a1, 0xD000000000000035, 1, &v131);
              id v83 = (void *)*((void *)&v131 + 1);
              if (*((void *)&v131 + 1) >> 60 == 15) {
                goto LABEL_74;
              }
            }
            uint64_t v84 = v131;
            uint64_t v85 = v118;
            sub_1001248EC(v127, v118);
            unsigned int v86 = v63(v85, 1, v62);
            uint64_t v87 = v126;
            uint64_t v88 = (uint64_t)v117;
            if (v86 == 1)
            {
              UUID.init()();
              sub_1000966BC(v85, (uint64_t *)&unk_100909E50);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v117, v85, v62);
            }
            sub_10050C340(v84, v83, v88);
            (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v62);
            [v2 listTypeRawValue];
            if ((REMManualOrderingListType.init(intValue:)() & 0x1FFFF) == 4)
            {
              if (qword_100907760 != -1) {
                swift_once();
              }
              uint64_t v89 = type metadata accessor for Logger();
              sub_10008E2DC(v89, (uint64_t)qword_10091C1E0);
              id v90 = v2;
              int v91 = Logger.logObject.getter();
              int v92 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v91, (os_log_type_t)v92))
              {
                LODWORD(v126) = v92;
                uint64_t v93 = swift_slowAlloc();
                uint64_t v124 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc();
                os_log_type_t v130 = v124;
                *(_DWORD *)uint64_t v93 = 136446466;
                id v94 = [v90 ckIdentifier];
                uint64_t v129 = v84;
                if (v94)
                {
                  id v95 = v94;
                  uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v98 = v97;
                }
                else
                {
                  uint64_t v96 = 0;
                  uint64_t v98 = 0;
                }
                *(void *)&long long v131 = v96;
                *((void *)&v131 + 1) = v98;
                sub_100094134((uint64_t *)&unk_10090A4C0);
                uint64_t v99 = Optional.descriptionOrNil.getter();
                unint64_t v101 = v100;
                swift_bridgeObjectRelease();
                *(void *)&long long v131 = sub_1000C51B8(v99, v101, (uint64_t *)&v130);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v93 + 12) = 2082;
                id v102 = [v90 eTag];
                if (v102)
                {
                  uint64_t v103 = v102;
                  uint64_t v104 = (uint64_t)v113;
                  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v105 = 0;
                  uint64_t v106 = v125;
                }
                else
                {
                  uint64_t v105 = 1;
                  uint64_t v106 = v125;
                  uint64_t v104 = (uint64_t)v113;
                }
                ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v128)(v104, v105, 1, v106);
                uint64_t v107 = Optional.descriptionOrNil.getter();
                unint64_t v109 = v108;
                sub_1000966BC(v104, (uint64_t *)&unk_100909E50);
                *(void *)&long long v131 = sub_1000C51B8(v107, v109, (uint64_t *)&v130);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v126, "REMCDManualSortHint.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' {ckIdentifier: %{public}s, eTag: %{public}s}", (uint8_t *)v93, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                uint64_t v84 = v129;
              }
              else
              {
              }
              id v110 = [v90 storeControllerManagedObjectContext];
              if (v110)
              {
                int v111 = v110;
                [v110 setPendingPostSaveActions:((unint64_t)[v110 pendingPostSaveActions] | 2)];
                sub_100097F34(v84, (unint64_t)v83);

                goto LABEL_74;
              }
            }
            sub_1000966BC(v127, (uint64_t *)&unk_100909E50);
            sub_100097F34(v84, (unint64_t)v83);
          }
        }
        else
        {
          if (qword_100907760 != -1) {
            swift_once();
          }
          uint64_t v69 = type metadata accessor for Logger();
          sub_10008E2DC(v69, (uint64_t)qword_10091C1E0);
          uint64_t v70 = Logger.logObject.getter();
          os_log_type_t v71 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v70, v71))
          {
            uint64_t v72 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v72 = 0;
            _os_log_impl((void *)&_mh_execute_header, v70, v71, "Unable to support REMCDManualSortHint serialization version introduced in a subsequent release", v72, 2u);
            swift_slowDealloc();
          }
        }
        return;
      case 6:
        uint64_t v50 = CKRecord.subscript.getter();
        if (v50
          && (os_log_type_t v130 = (unsigned int (*)(void, void, void))v50,
              sub_100094134(&qword_100909AB0),
              (swift_dynamicCast() & 1) != 0))
        {
          NSString v51 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v51 = 0;
        }
        [v2 setListID:v51];

        goto LABEL_10;
      case 7:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        if (BYTE2(v131)) {
          __int16 v41 = 0;
        }
        else {
          __int16 v41 = v131;
        }
        [v2 setListTypeRawValue:v41];
        goto LABEL_10;
      default:
        goto LABEL_10;
    }
  }
}

NSObject *sub_10050AADC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v134 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v114 - v9;
  uint64_t v11 = (objc_class *)type metadata accessor for REMCDManualSortHint();
  v148.receiver = (id)v1;
  v148.super_class = v11;
  uint64_t v12 = [super newlyCreatedRecord];
  if (v12)
  {
    Class v140 = v10;
    uint64_t v138 = v2;
    os_log_t v13 = (os_log_t)v1;
    uint64_t v14 = 0;
    sub_1001B3874((uint64_t)v149);
    NSString v15 = &qword_100907000;
    uint64_t v139 = v1;
    sub_100096408((uint64_t)v149, (uint64_t)v158, (uint64_t *)&unk_100915B90);
    if (*(void *)&v158[0])
    {
      long long v160 = v158[0];
      long long v161 = v158[1];
      uint64_t v162 = v159;
      sub_10041697C(v150);
      uint64_t v163 = v160;
      sub_1000F5C48((uint64_t)&v163);
      uint64_t v164 = *((void *)&v160 + 1);
      sub_1000F5C48((uint64_t)&v164);
      uint64_t v165 = v161;
      sub_1000F5C48((uint64_t)&v165);
      uint64_t v166 = *((void *)&v161 + 1);
      sub_1000F5C48((uint64_t)&v166);
      uint64_t v167 = v162;
      sub_1000F5C48((uint64_t)&v167);
      sub_100416DEC(v151);
      v187[0] = v150[0];
      sub_1000F5C48((uint64_t)v187);
      uint64_t v186 = v150[1];
      sub_1000F5C48((uint64_t)&v186);
      uint64_t v185 = v150[2];
      sub_1000F5C48((uint64_t)&v185);
      uint64_t v184 = v150[3];
      sub_1000F5C48((uint64_t)&v184);
      uint64_t v183 = v150[4];
      sub_1000F5C48((uint64_t)&v183);
      uint64_t v16 = sub_1000F49E8();
      uint64_t v108 = v107;
      uint64_t v141 = v3;
      *(void *)&long long v142 = v16;
      sub_100094134((uint64_t *)&unk_10090A490);
      uint64_t v109 = swift_allocObject();
      os_log_t v13 = (os_log_t)v109;
      *(_OWORD *)(v109 + 16) = xmmword_100776E40;
      if (qword_100907780 != -1) {
LABEL_84:
      }
        swift_once();
      id v110 = *(objc_class **)algn_1009422F8;
      v13[4].Class isa = (Class)qword_1009422F0;
      v13[5].Class isa = v110;
      swift_bridgeObjectRetain();
      uint64_t v111 = sub_10012674C((uint64_t)v13);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      sub_10048612C(v111, &v152);
      swift_bridgeObjectRelease();
      uint64_t v182 = v151[0];
      sub_1000F5C48((uint64_t)&v182);
      uint64_t v181 = v151[1];
      sub_1000F5C48((uint64_t)&v181);
      uint64_t v180 = v151[2];
      sub_1000F5C48((uint64_t)&v180);
      uint64_t v179 = v151[3];
      sub_1000F5C48((uint64_t)&v179);
      uint64_t v178 = v151[4];
      sub_1000F5C48((uint64_t)&v178);
      sub_100416DEC(v157);
      if (v14)
      {
        uint64_t v177 = v152;
        sub_1000F5C48((uint64_t)&v177);
        uint64_t v176 = v153;
        sub_1000F5C48((uint64_t)&v176);
        uint64_t v175 = v154;
        sub_1000F5C48((uint64_t)&v175);
        uint64_t v174 = v155;
        sub_1000F5C48((uint64_t)&v174);
        uint64_t v173 = v156;
        sub_1000F5C48((uint64_t)&v173);
        uint64_t v3 = v141;
        *((void *)&v142 + 1) = v108;
        if (v15[236] != -1) {
          swift_once();
        }
        uint64_t v17 = type metadata accessor for Logger();
        sub_10008E2DC(v17, (uint64_t)qword_10091C1E0);
        id v18 = (id)v1;
        swift_errorRetain();
        id v19 = v18;
        swift_errorRetain();
        os_log_t v13 = (os_log_t)Logger.logObject.getter();
        int v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, (os_log_type_t)v20))
        {
          uint64_t v141 = v3;
          uint64_t v21 = swift_slowAlloc();
          id v136 = (char *)swift_slowAlloc();
          id v144 = v136;
          *(_DWORD *)uint64_t v21 = 136446978;
          id v22 = [v19 ckIdentifier];
          NSString v115 = v7;
          unint64_t v143 = (unint64_t)v13;
          LODWORD(v137) = v20;
          if (v22)
          {
            uint64_t v23 = v22;
            uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v26 = v25;
          }
          else
          {
            uint64_t v24 = 0;
            uint64_t v26 = 0;
          }
          *(void *)&long long v145 = v24;
          *((void *)&v145 + 1) = v26;
          sub_100094134((uint64_t *)&unk_10090A4C0);
          uint64_t v27 = String.init<A>(describing:)();
          *(void *)&long long v145 = sub_1000C51B8(v27, v28, (uint64_t *)&v144);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v21 + 12) = 2080;
          [v19 listTypeRawValue];
          uint64_t v29 = REMManualOrderingListType.init(intValue:)();
          LOWORD(v145) = v29;
          BYTE2(v145) = BYTE2(v29) & 1;
          sub_100094134(&qword_10091C208);
          uint64_t v30 = String.init<A>(describing:)();
          *(void *)&long long v145 = sub_1000C51B8(v30, v31, (uint64_t *)&v144);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v21 + 22) = 2080;
          id v32 = [v19 listID];
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v36 = v35;
          }
          else
          {
            uint64_t v34 = 0;
            uint64_t v36 = 0;
          }
          *(void *)&long long v145 = v34;
          *((void *)&v145 + 1) = v36;
          uint64_t v37 = String.init<A>(describing:)();
          *(void *)&long long v145 = sub_1000C51B8(v37, v38, (uint64_t *)&v144);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v21 + 32) = 2082;
          swift_getErrorValue();
          uint64_t v39 = Error.localizedDescription.getter();
          *(void *)&long long v145 = sub_1000C51B8(v39, v40, (uint64_t *)&v144);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          os_log_t v13 = (os_log_t)v143;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v143, (os_log_type_t)v137, "newlyCreatedRecord: Failed to serialize/deserialize hintData in REMCDManualSortHint {ckIdentifier: %{public}s, list type: %s, listID: %s, error: %{public}s}", (uint8_t *)v21, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          uint64_t v14 = 0;
          unint64_t v143 = 0xF000000000000000;
          uint64_t v1 = v139;
          uint64_t v7 = v115;
          uint64_t v3 = v141;
        }
        else
        {
          swift_errorRelease();

          swift_errorRelease();
          swift_errorRelease();

          uint64_t v14 = 0;
          unint64_t v143 = 0xF000000000000000;
        }
      }
      else
      {
        uint64_t v177 = v152;
        sub_1000F5C48((uint64_t)&v177);
        uint64_t v176 = v153;
        sub_1000F5C48((uint64_t)&v176);
        uint64_t v175 = v154;
        sub_1000F5C48((uint64_t)&v175);
        uint64_t v174 = v155;
        sub_1000F5C48((uint64_t)&v174);
        uint64_t v173 = v156;
        sub_1000F5C48((uint64_t)&v173);
        uint64_t v112 = sub_1000F49E8();
        uint64_t v3 = v141;
        os_log_t v13 = (os_log_t)v112;
        *((void *)&v142 + 1) = v108;
        unint64_t v143 = (unint64_t)v113;
        uint64_t v172 = v157[0];
        sub_1000F5C48((uint64_t)&v172);
        uint64_t v171 = v157[1];
        sub_1000F5C48((uint64_t)&v171);
        uint64_t v170 = v157[2];
        sub_1000F5C48((uint64_t)&v170);
        uint64_t v169 = v157[3];
        sub_1000F5C48((uint64_t)&v169);
        uint64_t v168 = v157[4];
        sub_1000F5C48((uint64_t)&v168);
        uint64_t v14 = (uint64_t)v13;
      }
    }
    else
    {
      uint64_t v14 = 0;
      unint64_t v143 = 0xF000000000000000;
      *(void *)&long long v142 = 0;
      *((void *)&v142 + 1) = 0xF000000000000000;
    }
    uint64_t v108 = 9;
    uint64_t v141 = v14;
    BOOL v41 = __OFSUB__(HIDWORD(v14), v14);
    BOOL v121 = v41;
    uint64_t v119 = BYTE6(v143);
    uint64_t v120 = HIDWORD(v14) - (int)v14;
    BOOL v42 = __OFSUB__(DWORD1(v142), v142);
    BOOL v118 = v42;
    uint64_t v116 = BYTE14(v142);
    uint64_t v117 = DWORD1(v142) - (int)v142;
    id v136 = (char *)(v3 + 48);
    id v137 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v126 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v127 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    NSString v15 = (uint64_t *)&byte_1008B7188;
    uint64_t v125 = "gRemindersInLocalAccountAsBytes";
    uint64_t v124 = "aryAccountOnlyAsAsset";
    unint64_t v132 = 0x80000001007D78E0;
    unint64_t v133 = 0x80000001007D7910;
    unint64_t v128 = v143 >> 62;
    uint64_t v129 = *((void *)&v142 + 1) >> 62;
    unint64_t v135 = 0x80000001007D7840;
    uint64_t v122 = "SerializationVersion";
    uint64_t v123 = "aryAccountOnlyAsBytes";
    unint64_t v130 = 0x80000001007D7860;
    unint64_t v131 = 0x80000001007D78A0;
    while (2)
    {
      int v43 = *(unsigned __int8 *)v15;
      NSString v15 = (uint64_t *)((char *)v15 + 1);
      switch(v43)
      {
        case 1:
          unint64_t v47 = *((void *)&v142 + 1) >> 60;
          if (*((void *)&v142 + 1) >> 60 != 15)
          {
            uint64_t v1 = 0;
            switch(v129)
            {
              case 1:
                uint64_t v1 = v117;
                if (!v118) {
                  goto LABEL_48;
                }
                __break(1u);
                goto LABEL_81;
              case 2:
                uint64_t v65 = *(void *)(v142 + 16);
                uint64_t v64 = *(void *)(v142 + 24);
                uint64_t v1 = v64 - v65;
                if (!__OFSUB__(v64, v65)) {
                  goto LABEL_48;
                }
LABEL_81:
                __break(1u);
                goto LABEL_82;
              case 3:
                goto LABEL_48;
              default:
                uint64_t v1 = v116;
LABEL_48:
                long long v66 = self;
                sub_100097E38(v142, *((unint64_t *)&v142 + 1));
                id v67 = [v66 sharedConfiguration];
                unint64_t v68 = (unint64_t)[v67 maxInlineAssetSizeBytes];

                if (v1 >= 1 && v68 >> 1 < v1)
                {
                  uint64_t v69 = self;
                  uint64_t v70 = v142;
                  os_log_type_t v71 = v7;
                  unint64_t v72 = *((void *)&v142 + 1);
                  sub_100097E38(v142, *((unint64_t *)&v142 + 1));
                  Class isa = Data._bridgeToObjectiveC()().super.isa;
                  id v74 = [v69 assetForData:isa];

                  os_log_t v13 = v12;
                  CKRecord.subscript.setter();
                  sub_100097F20(v70, v72);
                  CKRecord.subscript.setter();
                  uint64_t v75 = v70;
                  unint64_t v76 = v72;
                  uint64_t v7 = v71;
                  uint64_t v14 = v141;
                  goto LABEL_62;
                }
                sub_100097F20(v142, *((unint64_t *)&v142 + 1));
                uint64_t v1 = v139;
                break;
            }
          }
          uint64_t v77 = v7;
          CKRecord.subscript.setter();
          os_log_t v13 = (os_log_t)[v12 encryptedValues];
          if (v47 <= 0xE)
          {
            *((void *)&v146 + 1) = &type metadata for Data;
            uint64_t v147 = &protocol witness table for Data;
            unint64_t v78 = *((void *)&v142 + 1);
            uint64_t v79 = v142;
            long long v145 = v142;
          }
          else
          {
            uint64_t v147 = 0;
            long long v145 = 0u;
            long long v146 = 0u;
            unint64_t v78 = *((void *)&v142 + 1);
            uint64_t v79 = v142;
          }
          swift_getObjectType();
          sub_100097E24(v79, v78);
          CKRecordKeyValueSetting.subscript.setter();
          swift_unknownObjectRelease();
          uint64_t v7 = v77;
          uint64_t v14 = v141;
          goto LABEL_25;
        case 2:
        case 4:
          goto LABEL_25;
        case 3:
          unint64_t v48 = v143 >> 60;
          if (v143 >> 60 == 15)
          {
LABEL_64:
            CKRecord.subscript.setter();
            os_log_t v13 = (os_log_t)[v12 encryptedValues];
            if (v48 <= 0xE)
            {
              *((void *)&v146 + 1) = &type metadata for Data;
              uint64_t v147 = &protocol witness table for Data;
              os_log_t v89 = (os_log_t)v143;
              *(void *)&long long v145 = v14;
              *((void *)&v145 + 1) = v143;
            }
            else
            {
              uint64_t v147 = 0;
              long long v145 = 0u;
              long long v146 = 0u;
              os_log_t v89 = (os_log_t)v143;
            }
            swift_getObjectType();
            sub_100097E24(v14, (unint64_t)v89);
            CKRecordKeyValueSetting.subscript.setter();
            swift_unknownObjectRelease();
          }
          else
          {
            uint64_t v1 = 0;
            switch(v128)
            {
              case 1uLL:
                uint64_t v1 = v120;
                if (!v121) {
                  goto LABEL_59;
                }
LABEL_82:
                __break(1u);
                goto LABEL_83;
              case 2uLL:
                uint64_t v81 = *(void *)(v14 + 16);
                uint64_t v80 = *(void *)(v14 + 24);
                uint64_t v1 = v80 - v81;
                if (!__OFSUB__(v80, v81)) {
                  goto LABEL_59;
                }
LABEL_83:
                __break(1u);
                goto LABEL_84;
              case 3uLL:
                goto LABEL_59;
              default:
                uint64_t v1 = v119;
LABEL_59:
                id v82 = self;
                sub_100097E38(v14, v143);
                id v83 = [v82 sharedConfiguration];
                unint64_t v84 = (unint64_t)[v83 maxInlineAssetSizeBytes];

                if (v1 < 1 || v84 >> 1 >= v1)
                {
                  sub_100097F20(v14, v143);
                  uint64_t v1 = v139;
                  goto LABEL_64;
                }
                uint64_t v85 = self;
                os_log_t v86 = (os_log_t)v143;
                sub_100097E38(v14, v143);
                Class v87 = Data._bridgeToObjectiveC()().super.isa;
                id v88 = [v85 assetForData:v87];

                os_log_t v13 = v12;
                CKRecord.subscript.setter();
                sub_100097F20(v14, (unint64_t)v86);
                CKRecord.subscript.setter();
                uint64_t v75 = v14;
                unint64_t v76 = (unint64_t)v86;
LABEL_62:
                sub_100097F20(v75, v76);
                uint64_t v1 = v139;
                break;
            }
          }
          goto LABEL_25;
        case 5:
          *((void *)&v146 + 1) = type metadata accessor for Date();
          uint64_t v147 = &protocol witness table for Date;
          sub_1000C1FE8((uint64_t *)&v145);
          [(id)v1 lastAccessedSinceReferenceDate];
          Date.init(timeIntervalSinceReferenceDate:)();
          sub_10012451C();
          goto LABEL_24;
        case 6:
          id v49 = [(id)v1 listID];
          if (v49)
          {
            uint64_t v50 = v49;
            uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v53 = v52;

            *((void *)&v146 + 1) = &type metadata for String;
            uint64_t v147 = &protocol witness table for String;
            *(void *)&long long v145 = v51;
            *((void *)&v145 + 1) = v53;
          }
          else
          {
            uint64_t v147 = 0;
            long long v145 = 0u;
            long long v146 = 0u;
          }
          goto LABEL_43;
        case 7:
          unsigned __int16 v54 = (unsigned __int16)[(id)v1 listTypeRawValue];
          *((void *)&v146 + 1) = &type metadata for Int16;
          uint64_t v147 = &protocol witness table for Int16;
          LOWORD(v145) = v54;
          sub_10012451C();
          goto LABEL_24;
        case 8:
          *((void *)&v146 + 1) = &type metadata for Int16;
          uint64_t v147 = &protocol witness table for Int16;
          LOWORD(v145) = 1;
          sub_10012451C();
          goto LABEL_24;
        default:
          id v44 = [(id)v1 eTag];
          if (v44)
          {
            uint64_t v45 = v44;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v46 = 0;
          }
          else
          {
            uint64_t v46 = 1;
          }
          uint64_t v55 = (uint64_t)v140;
          uint64_t v56 = v138;
          (*v137)(v7, v46, 1, v138);
          sub_100096408((uint64_t)v7, v55, (uint64_t *)&unk_100909E50);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v136)(v55, 1, v56))
          {
            sub_1000966BC(v55, (uint64_t *)&unk_100909E50);
            long long v145 = 0u;
            long long v146 = 0u;
            uint64_t v147 = 0;
          }
          else
          {
            uint64_t v57 = v7;
            uint64_t v58 = v134;
            (*v127)(v134, (uint64_t)v140, v56);
            sub_1000966BC((uint64_t)v140, (uint64_t *)&unk_100909E50);
            uint64_t v59 = v56;
            uint64_t v60 = UUID.uuidString.getter();
            uint64_t v62 = v61;
            uint64_t v63 = v58;
            uint64_t v7 = v57;
            uint64_t v14 = v141;
            (*v126)(v63, v59);
            *((void *)&v146 + 1) = &type metadata for String;
            uint64_t v147 = &protocol witness table for String;
            *(void *)&long long v145 = v60;
            *((void *)&v145 + 1) = v62;
          }
LABEL_43:
          sub_10012451C();
LABEL_24:
          os_log_t v13 = v12;
          CKRecordKeyValueSetting.subscript.setter();
LABEL_25:
          if (--v108) {
            continue;
          }
          if (qword_100907760 != -1) {
            swift_once();
          }
          uint64_t v90 = type metadata accessor for Logger();
          sub_10008E2DC(v90, (uint64_t)qword_10091C1E0);
          id v91 = (id)v1;
          int v92 = Logger.logObject.getter();
          os_log_type_t v93 = static os_log_type_t.default.getter();
          BOOL v94 = os_log_type_enabled(v92, v93);
          os_log_t v95 = (os_log_t)v143;
          if (v94)
          {
            uint64_t v96 = swift_slowAlloc();
            Class v140 = (char *)swift_slowAlloc();
            id v144 = v140;
            *(_DWORD *)uint64_t v96 = 136446466;
            id v97 = [v91 ckIdentifier];
            if (v97)
            {
              uint64_t v98 = v97;
              uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v101 = v100;
            }
            else
            {
              uint64_t v99 = 0;
              uint64_t v101 = 0;
            }
            *(void *)&long long v145 = v99;
            *((void *)&v145 + 1) = v101;
            sub_100094134((uint64_t *)&unk_10090A4C0);
            uint64_t v102 = Optional.descriptionOrNil.getter();
            unint64_t v104 = v103;
            swift_bridgeObjectRelease();
            *(void *)&long long v145 = sub_1000C51B8(v102, v104, (uint64_t *)&v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v96 + 12) = 514;
            unsigned __int16 v105 = (unsigned __int16)[v91 listTypeRawValue];

            LOWORD(v145) = v105;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl((void *)&_mh_execute_header, v92, v93, "REMCDManualSortHint+CloudKit: newlyCreatedRecord(): {ckIdentifier: %{public}s, listTypeRawValue: %{public}hd}", (uint8_t *)v96, 0x10u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_100097F20(v142, *((unint64_t *)&v142 + 1));
            sub_100097F20(v141, v143);
          }
          else
          {

            sub_100097F20(v141, (unint64_t)v95);
            sub_100097F20(v142, *((unint64_t *)&v142 + 1));
          }
          break;
      }
      break;
    }
  }
  return v12;
}

void sub_10050C108()
{
  if (qword_100907760 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091C1E0);
  id v7 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getObjectType();
    sub_100094134((uint64_t *)&unk_10091C1F8);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_10050C340(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v82 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v81 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v7 = (char *)v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void **)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v67 - v13;
  sub_100097E38(a1, (unint64_t)a2);
  sub_1000F553C(a1, (unint64_t)a2, (uint64_t)&v85);
  uint64_t v79 = a1;
  uint64_t v80 = a2;
  uint64_t v75 = v11;
  unint64_t v76 = v14;
  uint64_t v77 = v9;
  uint64_t v78 = v8;
  uint64_t v73 = v5;
  id v74 = v7;
  uint64_t v16 = v85;
  NSString v15 = (void *)v86;
  uint64_t v17 = v87;
  uint64_t v18 = v88;
  uint64_t v19 = v89;
  sub_1001B3874((uint64_t)v90);
  os_log_type_t v71 = v16;
  unint64_t v72 = v15;
  sub_100096408((uint64_t)v90, (uint64_t)v104, (uint64_t *)&unk_100915B90);
  if (!*(void *)&v104[0])
  {
    *(void *)&long long v106 = v71;
    sub_1000F5C48((uint64_t)&v106);
    uint64_t v99 = v72;
    sub_1000F5C48((uint64_t)&v99);
    BOOL v94 = v17;
    sub_1000F5C48((uint64_t)&v94);
    v92[0] = v18;
    sub_1000F5C48((uint64_t)v92);
    v91[0] = v19;
    sub_1000F5C48((uint64_t)v91);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v21 = v83;
    [v83 setETag:isa];

    Class v22 = Data._bridgeToObjectiveC()().super.isa;
    [v21 setHintData:v22];

    [v21 setSerializationVersion:1];
    return;
  }
  long long v106 = v104[0];
  long long v107 = v104[1];
  uint64_t v108 = v105;
  sub_10041697C(v91);
  uint64_t v23 = v19;
  void v67[2] = v18;
  uint64_t v79 = v91[1];
  uint64_t v80 = (void *)v91[0];
  uint64_t v69 = v91[3];
  uint64_t v70 = v91[2];
  uint64_t v68 = v91[4];
  uint64_t v25 = v77;
  uint64_t v24 = v78;
  uint64_t v27 = v75;
  uint64_t v26 = v76;
  sub_1004884E8((uint64_t *)&v85, 0, v92);
  uint64_t v109 = v106;
  sub_1000F5C48((uint64_t)&v109);
  uint64_t v110 = *((void *)&v106 + 1);
  sub_1000F5C48((uint64_t)&v110);
  uint64_t v111 = v107;
  sub_1000F5C48((uint64_t)&v111);
  uint64_t v112 = *((void *)&v107 + 1);
  sub_1000F5C48((uint64_t)&v112);
  uint64_t v113 = v108;
  sub_1000F5C48((uint64_t)&v113);
  id v28 = [self sharedConfiguration];
  [v28 manualSortHintClientSideExpiration];

  Date.init()();
  Date.addingTimeInterval(_:)();
  uint64_t v29 = (void (*)(char *, uint64_t))v25[1];
  v29(v27, v24);
  Date.timeIntervalSinceReferenceDate.getter();
  double v31 = v30;
  v29(v26, v24);
  uint64_t v32 = v93;
  uint64_t v125 = v92[1];
  v126[0] = v92[0];
  uint64_t v123 = v93;
  uint64_t v124 = v92[2];
  sub_1000F5C74((uint64_t)v126);
  sub_1000F5C74((uint64_t)&v125);
  sub_1000F5C74((uint64_t)&v124);
  sub_1000F5C74((uint64_t)&v123);
  uint64_t v33 = swift_bridgeObjectRetain();
  uint64_t v34 = sub_10048A7C0(v33, v32, v31);
  sub_1000F5C48((uint64_t)v126);
  sub_1000F5C48((uint64_t)&v125);
  sub_1000F5C48((uint64_t)&v124);
  sub_1000F5C48((uint64_t)&v123);
  uint64_t v35 = sub_10012674C(v34);
  swift_bridgeObjectRelease();
  sub_10048612C(v35, (uint64_t *)&v94);
  swift_bridgeObjectRelease();
  sub_1000F5C48((uint64_t)v126);
  sub_1000F5C48((uint64_t)&v125);
  sub_1000F5C48((uint64_t)&v124);
  sub_1000F5C48((uint64_t)&v123);
  swift_bridgeObjectRelease();
  sub_10041697C(&v99);
  v67[1] = v17;
  uint64_t v78 = v23;
  uint64_t v36 = v99;
  uint64_t v37 = v100;
  unint64_t v38 = v101;
  uint64_t v39 = v102;
  uint64_t v40 = v103;
  BOOL v41 = v80;
  if (!v80)
  {
    if (!v99)
    {
      uint64_t v49 = 0;
      goto LABEL_4;
    }
LABEL_14:
    uint64_t v45 = v102;
    uint64_t v46 = v101;
    uint64_t v44 = v100;
    sub_10050DA8C((uint64_t)v99);
    sub_1001F84E8((uint64_t)v41);
    sub_1001F84E8((uint64_t)v36);
    goto LABEL_15;
  }
  if (!v99) {
    goto LABEL_14;
  }
  char v42 = sub_10034F5D4(v80, v99);
  uint64_t v77 = v36;
  int v43 = v38;
  uint64_t v44 = v37;
  uint64_t v45 = v39;
  uint64_t v46 = v43;
  sub_10050DA8C((uint64_t)v36);
  uint64_t v47 = (uint64_t)v41;
  uint64_t v48 = v79;
  sub_10050DA8C(v47);
  uint64_t v79 = v48;
  if ((v42 & 1) == 0
    || (sub_1004858F0(v48, v37) & 1) == 0
    || (sub_100485B60(v70, (uint64_t)v46) & 1) == 0
    || (sub_100485D80(v69, v45) & 1) == 0)
  {
    uint64_t v36 = v77;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001F84E8((uint64_t)v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  LODWORD(v76) = sub_100596C74(v68, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v36 = v77;
  swift_bridgeObjectRelease();
  sub_1001F84E8((uint64_t)v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = (uint64_t)v36;
  if (v76)
  {
LABEL_4:
    v84[0] = v94;
    sub_1000F5C48((uint64_t)v84);
    uint64_t v122 = v95;
    sub_1000F5C48((uint64_t)&v122);
    uint64_t v121 = (uint64_t)v96;
    sub_1000F5C48((uint64_t)&v121);
    uint64_t v120 = v97;
    sub_1000F5C48((uint64_t)&v120);
    uint64_t v119 = v98;
    sub_1000F5C48((uint64_t)&v119);
    sub_1001F84E8(v49);
    BOOL v118 = v85;
    sub_1000F5C48((uint64_t)&v118);
    uint64_t v117 = v86;
    sub_1000F5C48((uint64_t)&v117);
    uint64_t v116 = v87;
    sub_1000F5C48((uint64_t)&v116);
    uint64_t v115 = v88;
    sub_1000F5C48((uint64_t)&v115);
    uint64_t v114 = v89;
    sub_1000F5C48((uint64_t)&v114);
    return;
  }
LABEL_15:
  uint64_t v50 = sub_1000F49E8();
  unint64_t v52 = v51;
  uint64_t v80 = v46;
  uint64_t v53 = v45;
  uint64_t v54 = v40;
  Class v55 = Data._bridgeToObjectiveC()().super.isa;
  sub_100097F34(v50, v52);
  id v56 = v83;
  [v83 setHintData:v55];

  [v56 setSerializationVersion:1];
  if (!v36)
  {
    sub_1001F84E8(0);
    sub_1001F84E8((uint64_t)v71);
    uint64_t v60 = v73;
    uint64_t v61 = v81;
LABEL_28:
    uint64_t v62 = v74;
    UUID.init()();
    goto LABEL_29;
  }
  if (sub_10034F5D4(v36, v85))
  {
    uint64_t v57 = v86;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v58 = v80;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_1004858F0(v44, v57) & 1) != 0
      && (sub_100485B60((uint64_t)v58, (uint64_t)v87) & 1) != 0
      && (sub_100485D80(v53, v88) & 1) != 0)
    {
      char v59 = sub_100596C74(v54, v89);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      char v59 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v59 = 0;
    uint64_t v57 = v86;
  }
  v84[0] = v57;
  sub_1000F5C48((uint64_t)v84);
  uint64_t v122 = (uint64_t)v87;
  sub_1000F5C48((uint64_t)&v122);
  uint64_t v121 = v88;
  sub_1000F5C48((uint64_t)&v121);
  uint64_t v120 = v89;
  sub_1000F5C48((uint64_t)&v120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001F84E8((uint64_t)v36);
  uint64_t v60 = v73;
  uint64_t v61 = v81;
  if ((v59 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v62 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v74, v82, v73);
LABEL_29:
  Class v63 = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
  [v83 setETag:v63];

  uint64_t v119 = v98;
  uint64_t v64 = swift_bridgeObjectRetain();
  uint64_t v65 = sub_100489E1C(v64);
  sub_10026B960(v65);
  uint64_t v117 = v95;
  BOOL v118 = v96;
  uint64_t v116 = v94;
  uint64_t v66 = sub_1004E63C0(1, v94, v95, (uint64_t)v96);
  sub_1000F5C48((uint64_t)&v116);
  sub_1000F5C48((uint64_t)&v117);
  sub_1000F5C48((uint64_t)&v118);
  uint64_t v115 = v97;
  sub_1000F5C48((uint64_t)&v115);
  sub_1000F5C48((uint64_t)&v119);
  sub_10026B974(v66);
}

uint64_t sub_10050D6A8()
{
  if (qword_100907760 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091C1E0);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134((uint64_t *)&unk_10091C1F8);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_10050D870()
{
  if (qword_100907760 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091C1E0);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134((uint64_t *)&unk_10091C1F8);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

unint64_t sub_10050DA38()
{
  unint64_t result = qword_10091C210;
  if (!qword_10091C210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091C210);
  }
  return result;
}

uint64_t sub_10050DA8C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10050DAF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_10050DB04()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091C220);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091C220);
  if (qword_1009077D8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423D0);
  os_log_type_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10050DCB8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *os_log_type_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    unint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter);
    [v7 setDelegate:v0];
    [v7 setWantsNotificationResponsesDelivered];
    uint64_t v8 = sub_1002719B4();
    sub_100126808((unint64_t)v8);
    swift_bridgeObjectRelease();
    sub_1000963CC(0, &qword_100914390);
    sub_1005173A4();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v7 setNotificationCategories:isa];
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10050DE64(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  NSString v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = *(void *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a1;
  uint64_t v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  aBlock[4] = sub_100517630;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C9170;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = a1;
  uint64_t v19 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v21[1] = _swiftEmptyArrayStorage;
  sub_100517304((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_10050E120(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  uint64_t v10 = (uint64_t *)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = (char *)[a1 authorizationStatus:v8];
  if ((unint64_t)(v11 - 2) < 3)
  {
    uint64_t v12 = *(void **)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
    *uint64_t v10 = v12;
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
    id v13 = v12;
    LOBYTE(v12) = _dispatchPreconditionTest(_:)();
    uint64_t v14 = *(void (**)(void *, uint64_t))(v7 + 8);
    v7 += 8;
    v14(v10, v6);
    if (v12)
    {
      uint64_t v15 = *(void *)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter);
      return a3(v15);
    }
    __break(1u);
LABEL_25:
    swift_once();
LABEL_7:
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10091C220);
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      int v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "User denied notification access", v20, 2u);
      swift_slowDealloc();
    }

    id v21 = *(void **)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
    *uint64_t v10 = v21;
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
    id v22 = v21;
    LOBYTE(v21) = _dispatchPreconditionTest(_:)();
    uint64_t v23 = *(void (**)(void *, uint64_t))(v7 + 8);
    v7 += 8;
    v23(v10, v6);
    if (v21) {
      goto LABEL_22;
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v16 = &qword_100907000;
  if (v11)
  {
    if (v11 != (char *)1) {
      goto LABEL_17;
    }
    if (qword_100907768 == -1) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_11:
  if (v16[237] != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_10008E2DC(v24, (uint64_t)qword_10091C220);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "User hasn't been prompted for notification access", v27, 2u);
    swift_slowDealloc();
  }

  id v28 = *(void **)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *uint64_t v10 = v28;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v29 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)();
  double v30 = *(void (**)(void *, uint64_t))(v7 + 8);
  v7 += 8;
  v30(v10, v6);
  if (v28) {
    goto LABEL_22;
  }
  __break(1u);
LABEL_17:
  if (v16[237] != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10008E2DC(v31, (uint64_t)qword_10091C220);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unknown notification authorization status", v34, 2u);
    swift_slowDealloc();
  }

  uint64_t v35 = *(void **)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *uint64_t v10 = v35;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v36 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v35)
  {
LABEL_22:
    uint64_t v15 = 0;
    return a3(v15);
  }
  __break(1u);
  return result;
}

void RDUserNotificationCenter.init()()
{
}

id RDUserNotificationCenter.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDUserNotificationCenter();
  return [super dealloc];
}

uint64_t type metadata accessor for RDUserNotificationCenter()
{
  return self;
}

uint64_t sub_10050E738(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v5;
  v11[3] = a4;
  v11[4] = a5;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  uint64_t v12 = *(void **)&v5[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter];
  id v13 = (void *)swift_allocObject();
  v13[2] = v5;
  v13[3] = sub_1005174C8;
  v13[4] = v11;
  void v18[4] = sub_100517878;
  v18[5] = v13;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1004AE934;
  v18[3] = &unk_1008C9080;
  uint64_t v14 = _Block_copy(v18);
  uint64_t v15 = v5;
  sub_1000E4F30(a4);
  swift_bridgeObjectRetain();
  id v16 = a3;
  swift_retain();
  swift_release();
  [v12 getNotificationSettingsWithCompletionHandler:v14];
  _Block_release(v14);
  return swift_release();
}

void sub_10050E8A8(void *a1, char *a2, void (*a3)(void), uint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char **)((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    uint64_t v33 = a4;
    id v32 = a1;
    swift_bridgeObjectRetain();
    id v18 = a7;
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v20 = [self requestWithIdentifier:v19 content:v18 trigger:0];

    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_10091C220);
    swift_bridgeObjectRetain_n();
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v31 = a2;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_1000C51B8(a5, a6, aBlock);
      a2 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Issuing: showNotification notificationCenter.add(request) {identifier: %{public}s}", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v27 = (void *)swift_allocObject();
    void v27[2] = a2;
    v27[3] = a3;
    v27[4] = v33;
    aBlock[4] = (uint64_t)sub_100517528;
    aBlock[5] = (uint64_t)v27;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000E13D0;
    aBlock[3] = (uint64_t)&unk_1008C90D0;
    id v28 = _Block_copy(aBlock);
    id v29 = a2;
    sub_1000E4F30((uint64_t)a3);
    swift_release();
    id v30 = v32;
    [v32 addNotificationRequest:v20 withCompletionHandler:v28];
    _Block_release(v28);
  }
  else
  {
    uint64_t v25 = *(void **)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
    *uint64_t v17 = v25;
    (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
    id v26 = v25;
    LOBYTE(v25) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
    if (v25)
    {
      if (a3) {
        a3(0);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10050ECB8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  uint64_t v9 = (void *)((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)&v2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  void *v9 = v10;
  (*(void (**)(void *, void, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    uint64_t v12 = *(void **)&v2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter];
    id v13 = (void *)swift_allocObject();
    v13[2] = v2;
    v13[3] = a1;
    v13[4] = a2;
    aBlock[4] = sub_100517410;
    aBlock[5] = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10050F290;
    aBlock[3] = &unk_1008C8FB8;
    uint64_t v14 = _Block_copy(aBlock);
    uint64_t v15 = v2;
    swift_retain();
    swift_release();
    [v12 getDeliveredNotificationsWithCompletionHandler:v14];
    _Block_release(v14);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10050EE9C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(void *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a2;
  uint64_t v16[3] = a3;
  v16[4] = a4;
  v16[5] = a1;
  aBlock[4] = sub_100517464;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C9008;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_100517304((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_10050F15C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = __chkstk_darwin(v7);
  id v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(a1 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t, __n128))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7, v9);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if (v12) {
    return a2(a4);
  }
  __break(1u);
  return result;
}

uint64_t sub_10050F290(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_1000963CC(0, (unint64_t *)&unk_10091C310);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_10050F314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = __chkstk_darwin(v9);
  id v13 = (void *)((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)&v4[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  *id v13 = v14;
  (*(void (**)(void *, void, uint64_t, __n128))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9, v11);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if (v14)
  {
    uint64_t v16 = *(void **)&v4[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter];
    uint64_t v17 = (void *)swift_allocObject();
    _OWORD v17[2] = v4;
    v17[3] = a3;
    v17[4] = a4;
    v17[5] = a1;
    v17[6] = a2;
    aBlock[4] = sub_100515A6C;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10050F290;
    aBlock[3] = &unk_1008C8C48;
    id v18 = _Block_copy(aBlock);
    NSString v19 = v4;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    [v16 getDeliveredNotificationsWithCompletionHandler:v18];
    _Block_release(v18);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10050F514(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  id v18 = (void *)swift_allocObject();
  v18[2] = a2;
  v18[3] = a3;
  void v18[4] = a4;
  v18[5] = a1;
  void v18[6] = a5;
  v18[7] = a6;
  aBlock[4] = sub_100515AD4;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C8C98;
  NSString v19 = _Block_copy(aBlock);
  id v20 = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_100517304((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v23);
  return swift_release();
}

uint64_t sub_10050F7EC(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t, __n128))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10, v12);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v14, v10);
  if (v15)
  {
    swift_bridgeObjectRetain();
    unint64_t v18 = swift_bridgeObjectRetain();
    NSString v19 = sub_100515AEC(v18, a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a2(v19);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10050F970()
{
  id v1 = [v0 userInfo];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(void *)(v2 + 16) && (unint64_t v3 = sub_100307418((uint64_t)v8), (v4 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v2 + 56) + 32 * v3, (uint64_t)&v9);
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100233FFC((uint64_t)v8);
  if (!*((void *)&v10 + 1))
  {
    sub_1000966BC((uint64_t)&v9, &qword_100908190);
    goto LABEL_9;
  }
  sub_100094134((uint64_t *)&unk_10090AFB0);
  if (!swift_dynamicCast())
  {
LABEL_9:
    uint64_t v5 = _swiftEmptyArrayStorage;
    goto LABEL_10;
  }
  uint64_t v5 = (void *)0xD000000000000025;
LABEL_10:
  uint64_t v6 = sub_10012674C((uint64_t)v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_10050FAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, int a6, uint64_t a7, uint64_t a8)
{
  int v30 = a6;
  uint64_t v31 = a4;
  id v32 = a5;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = __chkstk_darwin(v14);
  unint64_t v18 = (uint64_t *)((char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  NSString v19 = *(void **)&v8[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  void *v18 = v19;
  (*(void (**)(void *, void, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  if (v19)
  {
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v8;
    *(void *)(v22 + 24) = a7;
    *(void *)(v22 + 32) = a8;
    *(void *)(v22 + 40) = a1;
    *(void *)(v22 + 48) = a2;
    *(void *)(v22 + 56) = a3;
    uint64_t v23 = v32;
    *(void *)(v22 + 64) = v31;
    *(void *)(v22 + 72) = v23;
    *(unsigned char *)(v22 + 80) = v30 & 1;
    uint64_t v24 = *(void **)&v8[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter];
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = v8;
    v25[3] = sub_1005170DC;
    v25[4] = v22;
    aBlock[4] = sub_100517878;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004AE934;
    aBlock[3] = &unk_1008C8D88;
    id v26 = _Block_copy(aBlock);
    uint64_t v27 = v8;
    sub_1000E4F30(a7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v28 = v23;
    swift_retain();
    swift_release();
    [v24 getNotificationSettingsWithCompletionHandler:v26];
    _Block_release(v26);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10050FD3C(void *a1, char *a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10)
{
  uint64_t v31 = a7;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __n128 v19 = __chkstk_darwin(v17);
  uint64_t v21 = (uint64_t *)((char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a2;
    *(void *)(v22 + 24) = a5;
    *(void *)(v22 + 32) = a6;
    *(void *)(v22 + 40) = a3;
    uint64_t v23 = v31;
    *(void *)(v22 + 48) = a4;
    *(void *)(v22 + 56) = v23;
    *(void *)(v22 + 64) = a8;
    *(void *)(v22 + 72) = a9;
    *(void *)(v22 + 80) = a1;
    *(unsigned char *)(v22 + 88) = a10 & 1;
    aBlock[4] = sub_100517184;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10050F290;
    aBlock[3] = &unk_1008C8DD8;
    uint64_t v24 = _Block_copy(aBlock);
    id v25 = a1;
    id v26 = a2;
    swift_bridgeObjectRetain();
    sub_1000E4F30((uint64_t)a3);
    swift_bridgeObjectRetain();
    id v27 = a9;
    swift_release();
    [v25 getDeliveredNotificationsWithCompletionHandler:v24];
    _Block_release(v24);
  }
  else
  {
    id v28 = *(void **)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
    *uint64_t v21 = v28;
    (*(void (**)(void *, void, uint64_t, __n128))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17, v19);
    id v29 = v28;
    LOBYTE(v28) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v18 + 8))(v21, v17);
    if (v28)
    {
      if (a3) {
        a3(0);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10050FFA0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, unsigned __int8 a11)
{
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  int v32 = a11;
  uint64_t v31 = a9;
  uint64_t v36 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v35 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  __n128 v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = *(void *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  *(void *)(v20 + 32) = a1;
  *(void *)(v20 + 40) = a5;
  uint64_t v21 = v33;
  uint64_t v22 = v34;
  *(void *)(v20 + 48) = a6;
  *(void *)(v20 + 56) = v21;
  uint64_t v23 = v31;
  *(void *)(v20 + 64) = v22;
  *(void *)(v20 + 72) = v23;
  *(void *)(v20 + 80) = a2;
  *(void *)(v20 + 88) = a10;
  *(unsigned char *)(v20 + 96) = v32;
  aBlock[4] = sub_100517234;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C8E28;
  uint64_t v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000E4F30(a5);
  swift_bridgeObjectRetain();
  id v25 = v23;
  id v26 = a2;
  id v27 = a10;
  static DispatchQoS.unspecified.getter();
  BOOL v41 = _swiftEmptyArrayStorage;
  sub_100517304((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  id v29 = v35;
  uint64_t v28 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v28);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v39);
  return swift_release();
}

void sub_1005102C4(uint64_t a1, unint64_t a2, unint64_t a3, void (*a4)(void), uint64_t a5, NSObject *a6, uint64_t a7, void *a8, NSObject *a9, uint8_t *a10, char a11)
{
  long long v233 = a6;
  Swift::Int v234 = a7;
  uint64_t v219 = type metadata accessor for DispatchPredicate();
  uint64_t v218 = *(void *)(v219 - 8);
  __chkstk_darwin(v219);
  uint64_t v217 = (uint64_t *)((char *)&v212 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v231 = type metadata accessor for Date();
  long long v232 = *(void **)(v231 - 8);
  __chkstk_darwin(v231);
  uint64_t v215 = (char *)&v212 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v221 = (char *)&v212 - v20;
  __chkstk_darwin(v21);
  v214 = (char *)&v212 - v22;
  uint64_t v222 = sub_100094134((uint64_t *)&unk_10091C320);
  __chkstk_darwin(v222);
  uint64_t v228 = (uint64_t)&v212 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v24 - 8);
  v220 = (char *)&v212 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  id v223 = (char *)&v212 - v27;
  __chkstk_darwin(v28);
  uint64_t v216 = (uint64_t)&v212 - v29;
  __chkstk_darwin(v30);
  uint64_t v230 = (uint64_t)&v212 - v31;
  __chkstk_darwin(v32);
  uint64_t v226 = (uint64_t)&v212 - v33;
  if (qword_100907768 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v35 = sub_10008E2DC(v34, (uint64_t)qword_10091C220);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v238 = v35;
  uint64_t v36 = Logger.logObject.getter();
  int v37 = static os_log_type_t.default.getter();
  BOOL v38 = os_log_type_enabled(v36, (os_log_type_t)v37);
  unint64_t v236 = a4;
  uint64_t v237 = (uint64_t)a8;
  uint64_t v235 = a5;
  if (v38)
  {
    LODWORD(v213) = v37;
    uint64_t v39 = swift_slowAlloc();
    uint64_t v212 = swift_slowAlloc();
    id aBlock = v212;
    *(_DWORD *)uint64_t v39 = 136315394;
    swift_bridgeObjectRetain();
    v245 = (void *)sub_1000C51B8(a1, a2, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v224 = a2;
    swift_bridgeObjectRelease_n();
    v225 = (uint8_t *)v39;
    *(_WORD *)(v39 + 12) = 2080;
    os_log_t v229 = v36;
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v40 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v40)
    {
      v245 = _swiftEmptyArrayStorage;
      sub_1001DE058(0, v40 & ~(v40 >> 63), 0);
      if (v40 < 0)
      {
        __break(1u);
        goto LABEL_105;
      }
      uint64_t v227 = a1;
      uint64_t v41 = 0;
      char v42 = v245;
      unint64_t v43 = a3 & 0xC000000000000001;
      unint64_t v44 = a3;
      do
      {
        if (v43) {
          id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v45 = *(id *)(a3 + 8 * v41 + 32);
        }
        uint64_t v46 = v45;
        id v47 = [v45 request];
        id v48 = [v47 identifier];

        uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v51 = v50;

        v245 = v42;
        unint64_t v53 = v42[2];
        unint64_t v52 = v42[3];
        if (v53 >= v52 >> 1)
        {
          sub_1001DE058(v52 > 1, v53 + 1, 1);
          char v42 = v245;
        }
        ++v41;
        _OWORD v42[2] = v53 + 1;
        uint64_t v54 = &v42[2 * v53];
        v54[4] = v49;
        v54[5] = v51;
        a3 = v44;
      }
      while (v40 != v41);
      a5 = v235;
      a1 = v227;
      a8 = (void *)v237;
    }
    Class v55 = v225;
    uint64_t v56 = Array.description.getter();
    unint64_t v58 = v57;
    swift_bridgeObjectRelease();
    v245 = (void *)sub_1000C51B8(v56, v58, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v59 = v229;
    _os_log_impl((void *)&_mh_execute_header, v229, (os_log_type_t)v213, "Determine useReplaceInsteadOfAdd {identifier: %s, deliveredNotifications: %s}", v55, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v224;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t v60 = sub_100515C8C(a3, a1, a2);
  swift_bridgeObjectRelease();
  if (!v60)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.default.getter();
    BOOL v84 = os_log_type_enabled(v82, v83);
    os_log_t v229 = a9;
    v225 = a10;
    if (v84)
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      id aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v85 = 136446210;
      swift_bridgeObjectRetain();
      v245 = (void *)sub_1000C51B8(a1, a2, &aBlock);
      a8 = (void *)v237;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Strategy: no existing notification {identifier: %{public}s, useReplaceInsteadOfAdd: false}", v85, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v245 = (void *)sub_10050F970();
    Swift::Int v93 = v234;
    swift_bridgeObjectRetain();
    sub_10031DC68(&aBlock, (Swift::Int)v233, v93);
    swift_bridgeObjectRelease();
    sub_1005121A0();
    swift_bridgeObjectRelease();
    char v94 = a11;
    if ((a11 & 1) == 0) {
      goto LABEL_93;
    }
    goto LABEL_81;
  }
  id v61 = [v60 request];
  uint64_t v62 = v60;
  id v63 = [v61 content];

  [v63 mutableCopy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1000963CC(0, (unint64_t *)&unk_10091C330);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v86 = v62;
    Class v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = (uint8_t *)swift_slowAlloc();
      uint64_t v90 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v89 = 138412290;
      id v91 = [v86 request];
      id v92 = [v91 content];

      id aBlock = (uint64_t)v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v90 = v92;

      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Unable to get UNMutableNotificationContent from UNNotificationContent {notification: %@}", v89, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      Class v87 = v86;
    }
    NSString v104 = v86;

    if (v236) {
      v236(0);
    }
    goto LABEL_102;
  }
  id v213 = v62;
  v225 = a10;
  os_log_t v229 = a9;
  uint64_t v227 = a1;
  uint64_t v64 = v245;
  uint64_t v65 = sub_10050F970();

  id v67 = v233;
  uint64_t v66 = v234;
  LODWORD(v224) = sub_1001CBC20((uint64_t)v233, v234, v65);
  uint64_t v68 = sub_10050F970();
  uint64_t v69 = sub_10065D708(v65, v68);
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = v67;
  *(void *)(inited + 40) = v66;
  swift_bridgeObjectRetain();
  uint64_t v71 = sub_10012674C(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  Swift::Int v234 = sub_10065D708(v71, v69);
  id v72 = [a8 title];
  uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v75 = v74;

  id v76 = [v64 title];
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v79 = v78;

  if (v73 == v77 && v75 == v79)
  {
    swift_bridgeObjectRelease_n();
    a8 = (void *)v237;
    uint64_t v80 = v228;
    uint64_t v81 = v230;
  }
  else
  {
    char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a8 = (void *)v237;
    uint64_t v80 = v228;
    uint64_t v81 = v230;
    if ((v95 & 1) == 0) {
      goto LABEL_59;
    }
  }
  id v96 = [a8 subtitle];
  uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v99 = v98;

  id v100 = [v64 subtitle];
  uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v103 = v102;

  if (v97 == v101 && v99 == v103)
  {
    swift_bridgeObjectRelease_n();
    a8 = (void *)v237;
  }
  else
  {
    char v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a8 = (void *)v237;
    if ((v105 & 1) == 0) {
      goto LABEL_59;
    }
  }
  id v106 = [a8 body];
  uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v109 = v108;

  id v110 = [v64 body];
  uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v113 = v112;

  if (v107 == v111 && v109 == v113)
  {
    swift_bridgeObjectRelease_n();
    a8 = (void *)v237;
    goto LABEL_42;
  }
  char v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a8 = (void *)v237;
  if ((v114 & 1) == 0)
  {
LABEL_59:
    NSString v104 = v213;
    if ((v224 & 1) == 0) {
      goto LABEL_77;
    }
    char v144 = 1;
    goto LABEL_61;
  }
LABEL_42:
  id v115 = [a8 date];
  uint64_t v116 = v232;
  if (v115)
  {
    uint64_t v117 = v115;
    uint64_t v118 = v226;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v119 = (void (*)(void, void, void, void))v116[7];
    v119(v118, 0, 1, v231);
  }
  else
  {
    uint64_t v119 = (void (*)(void, void, void, void))v232[7];
    v119(v226, 1, 1, v231);
  }
  id v120 = [v64 date];
  uint64_t v212 = (uint64_t)v64;
  if (v120)
  {
    uint64_t v121 = v120;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v122 = 0;
  }
  else
  {
    uint64_t v122 = 1;
  }
  uint64_t v123 = v226;
  uint64_t v124 = v232;
  uint64_t v125 = v231;
  v119(v81, v122, 1, v231);
  uint64_t v126 = v124;
  uint64_t v127 = v80 + *(int *)(v222 + 48);
  sub_1000CAA4C(v123, v80);
  sub_1000CAA4C(v81, v127);
  unint64_t v128 = (uint64_t (*)(void, void, void))v126[6];
  if (v128(v80, 1, v125) == 1)
  {
    sub_1000966BC(v81, (uint64_t *)&unk_100909A40);
    sub_1000966BC(v123, (uint64_t *)&unk_100909A40);
    int v129 = v128(v127, 1, v125);
    uint64_t v64 = (void *)v212;
    if (v129 == 1)
    {
      sub_1000966BC(v80, (uint64_t *)&unk_100909A40);
      goto LABEL_55;
    }
    goto LABEL_53;
  }
  uint64_t v130 = v216;
  sub_1000CAA4C(v80, v216);
  int v131 = v128(v127, 1, v125);
  uint64_t v64 = (void *)v212;
  if (v131 == 1)
  {
    sub_1000966BC(v230, (uint64_t *)&unk_100909A40);
    sub_1000966BC(v226, (uint64_t *)&unk_100909A40);
    ((void (*)(uint64_t, uint64_t))v126[1])(v130, v125);
LABEL_53:
    sub_1000966BC(v80, (uint64_t *)&unk_10091C320);
    goto LABEL_59;
  }
  uint64_t v132 = v130;
  unint64_t v133 = v214;
  ((void (*)(char *, uint64_t, uint64_t))v126[4])(v214, v127, v125);
  sub_100517304((unint64_t *)&qword_100909F80, (void (*)(uint64_t))&type metadata accessor for Date);
  char v134 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v135 = (void (*)(void, void))v126[1];
  v135(v133, v125);
  sub_1000966BC(v230, (uint64_t *)&unk_100909A40);
  sub_1000966BC(v226, (uint64_t *)&unk_100909A40);
  v135(v132, v125);
  sub_1000966BC(v228, (uint64_t *)&unk_100909A40);
  if ((v134 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_55:
  id v136 = [a8 categoryIdentifier:v212];
  uint64_t v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v139 = v138;

  id v140 = [v64 categoryIdentifier];
  uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v143 = v142;

  if (v137 == v141 && v139 == v143)
  {
    swift_bridgeObjectRelease_n();
    a8 = (void *)v237;
    NSString v104 = v213;
    if (v224)
    {
      char v144 = 0;
      goto LABEL_61;
    }
LABEL_77:
    swift_bridgeObjectRetain_n();
    uint64_t v175 = Logger.logObject.getter();
    os_log_type_t v176 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v175, v176))
    {
      uint64_t v177 = (uint8_t *)swift_slowAlloc();
      id aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v177 = 136446210;
      swift_bridgeObjectRetain();
      v245 = (void *)sub_1000C51B8(v227, a2, &aBlock);
      a8 = (void *)v237;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v175, v176, "Strategy: !alreadyRetained {identifier: %{public}s, useReplaceInsteadOfAdd: false}", v177, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a5 = v235;
    sub_1005121A0();
    swift_bridgeObjectRelease();

    a1 = v227;
    char v94 = a11;
    if ((a11 & 1) == 0) {
      goto LABEL_93;
    }
    goto LABEL_81;
  }
  char v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a8 = (void *)v237;
  NSString v104 = v213;
  if ((v224 & 1) == 0) {
    goto LABEL_77;
  }
  char v144 = v174 ^ 1;
LABEL_61:
  long long v145 = v64;
  uint64_t v146 = (uint64_t)v223;
  UNNotificationContent.lastRecurringFireDate.getter();
  long long v233 = v145;

  uint64_t v147 = v232;
  objc_super v148 = (unsigned int (*)(void, void, void))v232[6];
  uint64_t v149 = v231;
  if (v148(v146, 1, v231) == 1)
  {
    sub_1000966BC(v146, (uint64_t *)&unk_100909A40);
    if (v144)
    {
LABEL_63:
      swift_bridgeObjectRetain_n();
      id v150 = Logger.logObject.getter();
      os_log_type_t v151 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v150, v151))
      {
        uint64_t v152 = (uint8_t *)swift_slowAlloc();
        id aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v152 = 136446210;
        swift_bridgeObjectRetain();
        v245 = (void *)sub_1000C51B8(v227, a2, &aBlock);
        NSString v104 = v213;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v150, v151, "Strategy: alreadyRetained && contentChanged {identifier: %{public}s, useReplaceInsteadOfAdd: true}", v152, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v162 = v235;
      uint64_t v163 = v233;
      uint64_t v164 = v237;
      sub_1005121A0();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRetain_n();
      uint64_t v165 = Logger.logObject.getter();
      os_log_type_t v166 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v165, v166))
      {
        uint64_t v167 = (uint8_t *)swift_slowAlloc();
        id aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v167 = 136446210;
        swift_bridgeObjectRetain();
        v245 = (void *)sub_1000C51B8(v227, a2, &aBlock);
        uint64_t v164 = v237;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v165, v166, "Issuing: replaceContentForRequest() {identifier: %{public}s}", v167, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      os_log_t v168 = v229;
      uint64_t v169 = v225;
      NSString v104 = String._bridgeToObjectiveC()();
      uint64_t v170 = (void *)swift_allocObject();
      uint64_t v171 = (uint64_t)v236;
      v170[2] = v168;
      v170[3] = v171;
      v170[4] = v162;
      v243 = sub_1005172C0;
      v244 = v170;
      id aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v240 = 1107296256;
      v241 = sub_1000E13D0;
      v242 = &unk_1008C8EC8;
      uint64_t v172 = _Block_copy(&aBlock);
      uint64_t v173 = v168;
      sub_1000E4F30(v171);
      swift_release();
      [(uint8_t *)v169 replaceContentForRequestWithIdentifier:v104 replacementContent:v164 completionHandler:v172];
LABEL_101:
      _Block_release(v172);
LABEL_102:

      return;
    }
    goto LABEL_84;
  }
  unint64_t v224 = a2;
  uint64_t v153 = v146;
  uint64_t v154 = (void (*)(void, void, void))v147[4];
  uint64_t v155 = v221;
  v154(v221, v153, v149);
  uint64_t v156 = (uint64_t)v220;
  UNNotificationContent.lastRecurringFireDate.getter();
  if (v148(v156, 1, v149) == 1)
  {
    ((void (*)(char *, uint64_t))v147[1])(v155, v149);
    sub_1000966BC(v156, (uint64_t *)&unk_100909A40);
    goto LABEL_83;
  }
  uint64_t v157 = v215;
  v154(v215, v156, v149);
  BOOL v158 = v155;
  if (static Date.> infix(_:_:)())
  {
    a2 = v224;
    swift_bridgeObjectRetain_n();
    uint64_t v159 = Logger.logObject.getter();
    os_log_type_t v160 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v159, v160))
    {
      long long v161 = (uint8_t *)swift_slowAlloc();
      id aBlock = swift_slowAlloc();
      *(_DWORD *)long long v161 = 136446210;
      swift_bridgeObjectRetain();
      v245 = (void *)sub_1000C51B8(v227, v224, &aBlock);
      uint64_t v149 = v231;
      a2 = v224;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v159, v160, "Strategy: alreadyRetained && recurring reminder {identifier: %{public}s, useReplaceInsteadOfAdd: false}", v161, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    Class v189 = v215;
    uint64_t v190 = v233;
    a8 = (void *)v237;
    sub_1005121A0();

    swift_bridgeObjectRelease();
    uint64_t v191 = (void (*)(void, void))v232[1];
    v191(v189, v149);
    v191(v158, v149);
    a1 = v227;
    a5 = v235;
    char v94 = a11;
    if ((a11 & 1) == 0)
    {
LABEL_93:
      uint64_t v178 = 15;
      goto LABEL_94;
    }
LABEL_81:
    [a8 setSound:0, v212];
    uint64_t v178 = 6;
LABEL_94:
    swift_bridgeObjectRetain();
    id v192 = a8;
    NSString v193 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v104 = [self requestWithIdentifier:v193 content:v192 trigger:0 destinations:v178];

    swift_bridgeObjectRetain_n();
    id v194 = v192;
    id v195 = Logger.logObject.getter();
    os_log_type_t v196 = static os_log_type_t.default.getter();
    int v197 = v196;
    if (os_log_type_enabled(v195, v196))
    {
      uint64_t v198 = swift_slowAlloc();
      LODWORD(v238) = v197;
      uint64_t v199 = v198;
      uint64_t v237 = swift_slowAlloc();
      id aBlock = v237;
      *(_DWORD *)uint64_t v199 = 136446722;
      swift_bridgeObjectRetain();
      v245 = (void *)sub_1000C51B8(a1, a2, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v199 + 12) = 2082;
      if (v94) {
        uint64_t v200 = 89;
      }
      else {
        uint64_t v200 = 78;
      }
      v245 = (void *)sub_1000C51B8(v200, 0xE100000000000000, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v199 + 22) = 2080;
      Swift::Int v234 = v199 + 24;
      uint64_t v201 = a5;
      id v202 = [v194 userInfo];
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      long long v233 = v195;

      a5 = v201;
      uint64_t v203 = Dictionary.description.getter();
      unint64_t v205 = v204;
      swift_bridgeObjectRelease();
      v245 = (void *)sub_1000C51B8(v203, v205, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v206 = v233;
      _os_log_impl((void *)&_mh_execute_header, v233, (os_log_type_t)v238, "Issuing: notificationCenter.add(request) {identifier: %{public}s, skipBanner: %{public}s, userInfo: %s}", (uint8_t *)v199, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v207 = v225;
    uint64_t v208 = (void *)swift_allocObject();
    os_log_t v209 = v229;
    uint64_t v210 = (uint64_t)v236;
    v208[2] = v229;
    v208[3] = v210;
    v208[4] = a5;
    v243 = sub_100517278;
    v244 = v208;
    id aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v240 = 1107296256;
    v241 = sub_1000E13D0;
    v242 = &unk_1008C8E78;
    uint64_t v172 = _Block_copy(&aBlock);
    uint64_t v211 = v209;
    sub_1000E4F30(v210);
    swift_release();
    [(uint8_t *)v207 addNotificationRequest:v104 withCompletionHandler:v172];
    goto LABEL_101;
  }
  uint64_t v179 = (void (*)(void, void))v232[1];
  v179(v157, v149);
  v179(v155, v149);
LABEL_83:
  a2 = v224;
  NSString v104 = v213;
  if (v144) {
    goto LABEL_63;
  }
LABEL_84:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v180 = Logger.logObject.getter();
  os_log_type_t v181 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v180, v181))
  {
    uint64_t v182 = (uint8_t *)swift_slowAlloc();
    id aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v182 = 136446210;
    swift_bridgeObjectRetain();
    v245 = (void *)sub_1000C51B8(v227, a2, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    NSString v104 = v213;
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v180, v181, "Strategy: alreadyRetained && !contentChanged, nothing to do {identifier: %{public}s}", v182, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v183 = v236;
  uint64_t v184 = *(Class *)((char *)&v229->isa + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  uint64_t v185 = v217;
  *uint64_t v217 = v184;
  uint64_t v186 = v218;
  uint64_t v187 = v219;
  (*(void (**)(void *, void, uint64_t))(v218 + 104))(v185, enum case for DispatchPredicate.onQueue(_:), v219);
  id v188 = v184;
  LOBYTE(v184) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v186 + 8))(v185, v187);
  if (v184)
  {
    if (v183) {
      v183(0);
    }

    goto LABEL_102;
  }
LABEL_105:
  __break(1u);
}

void sub_1005121A0()
{
  id v1 = v0;
  *((void *)&v10 + 1) = 0x80000001007D7AD0;
  AnyHashable.init<A>(_:)();
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = sub_100209D8C(v2);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_100094134((uint64_t *)&unk_10090AFB0);
  *(void *)&long long v10 = v3;
  id v4 = [v0 userInfo];
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = v5;
  if (v11)
  {
    sub_10009A1A0(&v10, v8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C48E0(v8, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_100233FFC((uint64_t)v12);
  }
  else
  {
    sub_1000966BC((uint64_t)&v10, &qword_100908190);
    sub_10030C450((uint64_t)v12, v8);
    sub_100233FFC((uint64_t)v12);
    sub_1000966BC((uint64_t)v8, &qword_100908190);
  }
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v1 setUserInfo:isa];
}

uint64_t sub_100512350(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v23 = a7;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a2;
  void v18[4] = a3;
  v18[5] = a4;
  aBlock[4] = a6;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = v23;
  uint64_t v19 = _Block_copy(aBlock);
  swift_errorRetain();
  uint64_t v20 = a2;
  sub_1000E4F30(a3);
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = &_swiftEmptyArrayStorage;
  sub_100517304((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v25);
  return swift_release();
}

uint64_t sub_10051260C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, const char *a5)
{
  uint64_t v25 = a5;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100907768 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_10091C220);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v23[0] = a2;
    v23[1] = a4;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v24 = a3;
    if (a1)
    {
      swift_getErrorValue();
      uint64_t v17 = Error.localizedDescription.getter();
      unint64_t v19 = v18;
    }
    else
    {
      unint64_t v19 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    uint64_t v26 = sub_1000C51B8(v17, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v25, v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a3 = v24;
    a2 = v23[0];
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v20 = *(void **)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *uint64_t v12 = v20;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v20)
  {
    if (a3) {
      return a3(a1);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RDUserNotificationCenter.releaseNotification(identifier:reference:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a4;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = __chkstk_darwin(v12);
  uint64_t v16 = (uint64_t *)((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void **)&v6[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  void *v16 = v17;
  (*(void (**)(void *, void, uint64_t, __n128))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12, v14);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if (v17)
  {
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = v6;
    v20[3] = a5;
    v20[4] = a6;
    v20[5] = a1;
    v20[6] = a2;
    v20[7] = a3;
    v20[8] = v26;
    id v21 = *(void **)&v6[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter];
    uint64_t v22 = (void *)swift_allocObject();
    _OWORD v22[2] = v6;
    v22[3] = sub_100512F24;
    v22[4] = v20;
    aBlock[4] = sub_100512F3C;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004AE934;
    aBlock[3] = &unk_1008C8B80;
    uint64_t v23 = _Block_copy(aBlock);
    uint64_t v24 = v6;
    sub_1000E4F30(a5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    [v21 getNotificationSettingsWithCompletionHandler:v23];
    _Block_release(v23);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100512C80(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a8;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v17 = __chkstk_darwin(v15);
  unint64_t v19 = (uint64_t *)((char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = a2;
    v20[3] = a5;
    v20[4] = a6;
    v20[5] = a3;
    v20[6] = a4;
    v20[7] = a7;
    v20[8] = v28;
    v20[9] = a1;
    aBlock[4] = sub_10051769C;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10050F290;
    aBlock[3] = &unk_1008C91C0;
    id v21 = _Block_copy(aBlock);
    id v22 = a1;
    uint64_t v23 = a2;
    swift_bridgeObjectRetain();
    sub_1000E4F30(a3);
    swift_bridgeObjectRetain();
    swift_release();
    [v22 getDeliveredNotificationsWithCompletionHandler:v21];
    _Block_release(v21);
  }
  else
  {
    uint64_t v24 = (void (*)(void))a3;
    uint64_t v25 = *(void **)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
    *unint64_t v19 = v25;
    (*(void (**)(void *, void, uint64_t, __n128))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
    id v26 = v25;
    LOBYTE(v25) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v16 + 8))(v19, v15);
    if (v25)
    {
      if (v24) {
        v24(0);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100512ECC()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_100512F24(void *a1)
{
  sub_100512C80(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_100512F3C(void *a1)
{
  return sub_10050DE64(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100512F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100512F58()
{
  return swift_release();
}

uint64_t sub_100512F60(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v28 = a9;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  unint64_t v19 = (void *)swift_allocObject();
  v19[2] = a1;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = a2;
  v19[6] = a5;
  v19[7] = a6;
  uint64_t v20 = v30;
  v19[8] = v29;
  v19[9] = v20;
  id v21 = v28;
  v19[10] = v28;
  aBlock[4] = sub_100517738;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C9210;
  id v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = a2;
  sub_1000E4F30(a5);
  swift_bridgeObjectRetain();
  id v24 = v21;
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = _swiftEmptyArrayStorage;
  sub_100517304((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  uint64_t v25 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v25);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v34);
  return swift_release();
}

void sub_100513270(unint64_t a1, uint64_t a2, unint64_t a3, char *a4, void (*a5)(void), uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v83 = a6;
  BOOL v84 = a5;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  uint64_t v82 = a2;
  unint64_t v19 = sub_100515C8C(a1, a2, a3);
  swift_bridgeObjectRelease();
  if (v19)
  {
    uint64_t v79 = v16;
    uint64_t v80 = v15;
    uint64_t v81 = a4;
    id v20 = [v19 request];
    id v21 = [v20 content];

    [v21 mutableCopy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000963CC(0, (unint64_t *)&unk_10091C330);
    if (swift_dynamicCast())
    {
      uint64_t v22 = v86;
      aBlock[0] = sub_10050F970();
      sub_10065ACF8(a7, a8);
      swift_bridgeObjectRelease();
      sub_1005121A0();
      swift_bridgeObjectRelease();
      if (qword_100907768 == -1) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_10008E2DC(v38, (uint64_t)qword_10091C220);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.fault.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = v80;
    if (v41)
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to create UNMutableNotificationContent from UNNotificationContent", v43, 2u);
      swift_slowDealloc();
    }

    unint64_t v44 = *(void **)&v81[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
    void *v18 = v44;
    uint64_t v45 = v79;
    (*(void (**)(void *, void, uint64_t))(v79 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v42);
    id v46 = v44;
    LOBYTE(v44) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v45 + 8))(v18, v42);
    if ((v44 & 1) == 0)
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v84) {
      v84(0);
    }
  }
  else
  {
    uint64_t v36 = *(void **)&a4[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
    void *v18 = v36;
    (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
    id v37 = v36;
    uint64_t v22 = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
    if ((v22 & 1) == 0)
    {
      __break(1u);
LABEL_32:
      swift_once();
LABEL_4:
      id v23 = a9;
      uint64_t v24 = type metadata accessor for Logger();
      sub_10008E2DC(v24, (uint64_t)qword_10091C220);
      swift_bridgeObjectRetain_n();
      id v25 = (id)v22;
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      int v28 = v27;
      BOOL v29 = os_log_type_enabled(v26, v27);
      uint64_t v78 = v19;
      if (v29)
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        aBlock[0] = v76;
        *(_DWORD *)uint64_t v30 = 136446466;
        id v77 = a9;
        swift_bridgeObjectRetain();
        uint64_t v86 = sub_1000C51B8(v82, a3, aBlock);
        uint64_t v75 = &v87;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v30 + 12) = 2080;
        uint64_t v73 = v30 + 14;
        id v31 = [v25 userInfo];
        os_log_t v74 = v26;
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
        HIDWORD(v72) = v28;

        uint64_t v32 = Dictionary.description.getter();
        unint64_t v34 = v33;
        swift_bridgeObjectRelease();
        uint64_t v86 = sub_1000C51B8(v32, v34, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_t v35 = v74;
        _os_log_impl((void *)&_mh_execute_header, v74, BYTE4(v72), "releaseNotification: {identifier: %{public}s, userInfo = %s}", (uint8_t *)v30, 0x16u);
        id v23 = v77;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v47 = v25;
      uint64_t v48 = sub_10050F970();

      uint64_t v49 = *(void *)(v48 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.default.getter();
      BOOL v52 = os_log_type_enabled(v50, v51);
      if (v49)
      {
        uint64_t v53 = v82;
        if (v52)
        {
          uint64_t v54 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v86 = sub_1000C51B8(v53, a3, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Issuing: replaceContentForRequest {identifier: %{public}s}", v54, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v57 = v83;
        unint64_t v58 = v78;
        NSString v59 = String._bridgeToObjectiveC()();
        uint64_t v60 = (void *)swift_allocObject();
        id v61 = v81;
        v60[2] = v81;
        v60[3] = v53;
        uint64_t v62 = (uint64_t)v84;
        v60[4] = a3;
        v60[5] = v62;
        v60[6] = v57;
        aBlock[4] = (uint64_t)sub_1005177C0;
        aBlock[5] = (uint64_t)v60;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000E13D0;
        aBlock[3] = (uint64_t)&unk_1008C9260;
        id v63 = _Block_copy(aBlock);
        swift_bridgeObjectRetain();
        id v64 = v61;
        sub_1000E4F30(v62);
        swift_release();
        [v23 replaceContentForRequestWithIdentifier:v59 replacementContent:v47 completionHandler:v63];
        _Block_release(v63);

        return;
      }
      id v77 = v23;
      uint64_t v55 = v82;
      if (v52)
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v86 = sub_1000C51B8(v55, a3, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Issuing: removeDeliveredNotifications since retain count is zero {identifier: %{public}s}", v56, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v65 = v78;
      uint64_t v66 = v79;
      sub_100094134((uint64_t *)&unk_10090A490);
      uint64_t v67 = swift_allocObject();
      *(_OWORD *)(v67 + 16) = xmmword_100776E40;
      *(void *)(v67 + 32) = v55;
      *(void *)(v67 + 40) = a3;
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v77 removeDeliveredNotificationsWithIdentifiers:isa];

      uint64_t v69 = v80;
      uint64_t v70 = *(void **)&v81[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
      void *v18 = v70;
      (*(void (**)(void *, void, uint64_t))(v66 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v69);
      id v71 = v70;
      LOBYTE(v70) = _dispatchPreconditionTest(_:)();
      (*(void (**)(void *, uint64_t))(v66 + 8))(v18, v69);
      if (v70)
      {
        if (v84) {
          v84(0);
        }

        return;
      }
LABEL_34:
      __break(1u);
      return;
    }
    if (v84) {
      v84(0);
    }
  }
}

uint64_t sub_100513CC0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  __n128 v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a3;
  v18[3] = a4;
  void v18[4] = a1;
  v18[5] = a2;
  void v18[6] = a5;
  v18[7] = a6;
  aBlock[4] = sub_100517848;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C92B0;
  unint64_t v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  id v20 = a2;
  sub_1000E4F30(a5);
  static DispatchQoS.unspecified.getter();
  id v25 = _swiftEmptyArrayStorage;
  sub_100517304((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v23);
  return swift_release();
}

uint64_t sub_100513F9C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v27 = a4;
  uint64_t v28 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100907768 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10091C220);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v25 = a6;
    id v26 = a5;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_1000C51B8(a1, a2, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    if (a3)
    {
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      unint64_t v20 = v19;
    }
    else
    {
      unint64_t v20 = 0xE300000000000000;
      uint64_t v18 = 7104878;
    }
    uint64_t v29 = sub_1000C51B8(v18, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "releaseNotification: replaced content {identifier: %{public}s, error: %s}", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a5 = v26;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v21 = v28;
  uint64_t v22 = *(void **)(v27 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *uint64_t v13 = v22;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v21);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v21);
  if (v22)
  {
    if (a5) {
      return a5(a3);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RDUserNotificationCenter.userNotificationCenter(_:willPresent:withCompletionHandler:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (qword_100907768 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10091C220);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "userNotificationCenter willPresent", v7, 2u);
    swift_slowDealloc();
  }

  return a3(27);
}

uint64_t RDUserNotificationCenter.userNotificationCenter(_:didReceive:withCompletionHandler:)(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  id v110 = a3;
  uint64_t v111 = a4;
  uint64_t v5 = sub_100094134(&qword_10091C248);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RDUserNotificationType();
  uint64_t v109 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v108 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v107 = (char *)&v104 - v11;
  uint64_t v12 = sub_100094134((uint64_t *)&unk_10091C250);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for RDUserNotificationAction();
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)&double v17 = __chkstk_darwin(v15).n128_u64[0];
  unint64_t v19 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = [a2 actionIdentifier:v17];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;

  swift_bridgeObjectRetain();
  RDUserNotificationAction.init(rawValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_10091C250);
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_10091C220);
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v113 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v112 = sub_1000C51B8(v21, v23, (uint64_t *)&v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unknown notification action. {actionIdentifier: %s}", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v28 = swift_bridgeObjectRelease_n();
    }
    return v110(v28);
  }
  swift_bridgeObjectRelease();
  uint64_t v105 = v16;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v14, v15);
  NSString v104 = (uint8_t *)a2;
  id v29 = [a2 notification];
  id v30 = [v29 request];

  id v31 = [v30 content];
  uint64_t v32 = (uint8_t *)v31;
  RDUserNotificationType.init(notificationContent:)();
  unint64_t v33 = v109;
  unint64_t v34 = v19;
  uint64_t v35 = v15;
  if (v109[6](v7, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v7, &qword_10091C248);
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_10008E2DC(v36, (uint64_t)qword_10091C220);
    id v37 = v32;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
      BOOL v41 = (void *)swift_slowAlloc();
      uint64_t v109 = (unsigned int (**)(char *, uint64_t, uint64_t))v19;
      *(_DWORD *)os_log_type_t v40 = 138412290;
      uint64_t v113 = v37;
      uint64_t v42 = v35;
      unint64_t v43 = v37;
      unint64_t v34 = (char *)v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v41 = v37;

      uint64_t v35 = v42;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unknown notification type from content. {content: %@}", v40, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v57 = v105;

    uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v34, v35);
    return v110(v28);
  }
  uint64_t v44 = v8;
  uint64_t v45 = v107;
  v33[4](v107, (uint64_t)v7, v8);
  id v46 = v108;
  v33[2](v108, (uint64_t)v45, v44);
  int v47 = ((uint64_t (*)(char *, uint64_t))v33[11])(v46, v44);
  if (v47 == enum case for RDUserNotificationType.reminderAlarm(_:))
  {
    uint64_t v48 = v44;
    uint64_t v49 = v105;
    uint64_t v50 = v106;
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E2DC(v51, (uint64_t)qword_10091C220);
    BOOL v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v52, v53)) {
      goto LABEL_18;
    }
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    uint64_t v55 = "Forwarding .reminderAlarm notification response to reminderAlarmDelegate";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v52, v53, v55, v54, 2u);
    uint64_t v49 = v105;
    swift_slowDealloc();
LABEL_18:

    uint64_t v56 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_reminderAlarmDelegate;
LABEL_28:
    uint64_t v63 = v50 + v56;
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v64 = *(void *)(v63 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint8_t *, char *, char *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v64 + 8))(v50, v104, v45, v34, v110, v111, ObjectType, v64);

      swift_unknownObjectRelease();
    }
    else
    {
    }
    uint64_t v66 = v33[1];
    ((void (*)(char *, uint64_t))v66)(v45, v48);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v34, v35);
    return ((uint64_t (*)(char *, uint64_t))v66)(v108, v48);
  }
  uint64_t v49 = v105;
  uint64_t v50 = v106;
  if (v47 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    uint64_t v48 = v44;
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    sub_10008E2DC(v59, (uint64_t)qword_10091C220);
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Forwarding .todayNotificationForSingleReminder notification response to todayNotificationDelegate", v62, 2u);
      uint64_t v49 = v105;
      swift_slowDealloc();
    }

    uint64_t v56 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate;
    goto LABEL_28;
  }
  if (v47 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    uint64_t v67 = v33[12];
    uint64_t v68 = (id *)v108;
    uint64_t v106 = v44;
    ((void (*)(char *, uint64_t))v67)(v108, v44);

    uint64_t v69 = v104;
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    sub_10008E2DC(v70, (uint64_t)qword_10091C220);
    id v71 = v69;
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v108 = (char *)v72;
      os_log_t v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = (void *)swift_slowAlloc();
      NSString v104 = v74;
      *(_DWORD *)os_log_t v74 = 138412290;
      uint64_t v113 = v71;
      uint64_t v76 = v71;
      uint64_t v49 = v105;
      uint64_t v45 = v107;
      uint64_t v72 = v108;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v75 = v71;

      id v77 = "remindd didn't expect to receive actions from .caldavSharedList. {response: %@}";
LABEL_37:
      _os_log_impl((void *)&_mh_execute_header, v72, v73, v77, v104, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_71:

      ((void (*)(char *, uint64_t))v109[1])(v45, v106);
      uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v34, v35);
      return v110(v28);
    }
    goto LABEL_70;
  }
  uint64_t v78 = v104;
  if (v47 == enum case for RDUserNotificationType.assignmentNotification(_:))
  {
    ((void (*)(char *, uint64_t))v33[12])(v108, v44);
    swift_bridgeObjectRelease();
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    sub_10008E2DC(v79, (uint64_t)qword_10091C220);
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Forwarding .assignmentNotification response to assignmentNotificationDelegate", v82, 2u);
      uint64_t v45 = v107;
      swift_slowDealloc();
    }

    uint64_t v83 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_assignmentNotificationDelegate;
  }
  else if (v47 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
  {
    ((void (*)(char *, uint64_t))v33[12])(v108, v44);
    swift_bridgeObjectRelease();
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for Logger();
    sub_10008E2DC(v84, (uint64_t)qword_10091C220);
    uint64_t v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v85, v86))
    {
      uint64_t v87 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v87 = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "Forwarding .shareListUpdateNotification response to sharedListUpdateNotificationDelegate", v87, 2u);
      uint64_t v45 = v107;
      swift_slowDealloc();
    }

    uint64_t v83 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_sharedListUpdateNotificationDelegate;
  }
  else
  {
    if (v47 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
    {
      uint64_t v48 = v44;
      if (qword_100907768 != -1) {
        swift_once();
      }
      uint64_t v91 = type metadata accessor for Logger();
      sub_10008E2DC(v91, (uint64_t)qword_10091C220);
      BOOL v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v52, v53)) {
        goto LABEL_18;
      }
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      uint64_t v55 = "Forwarding .dueDateDeltaAlarm notification response to reminderAlarmDelegate";
      goto LABEL_17;
    }
    if (v47 == enum case for RDUserNotificationType.todayNotification(_:))
    {
      if (qword_100907768 != -1) {
        swift_once();
      }
      uint64_t v92 = type metadata accessor for Logger();
      sub_10008E2DC(v92, (uint64_t)qword_10091C220);
      Swift::Int v93 = Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v93, v94))
      {
        char v95 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v95 = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "Forwarding .todayNotification notification response to todayNotificationDelegate", v95, 2u);
        uint64_t v45 = v107;
        swift_slowDealloc();
      }

      uint64_t v83 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate;
    }
    else
    {
      if (v47 == enum case for RDUserNotificationType.todayNotificationBadge(_:))
      {
        uint64_t v106 = v44;
        if (qword_100907768 != -1) {
          swift_once();
        }
        uint64_t v96 = type metadata accessor for Logger();
        sub_10008E2DC(v96, (uint64_t)qword_10091C220);
        id v71 = v78;
        uint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v72, v73))
        {
          uint64_t v108 = (char *)v72;
          uint64_t v97 = (uint8_t *)swift_slowAlloc();
          uint64_t v98 = (void *)swift_slowAlloc();
          NSString v104 = v97;
          *(_DWORD *)uint64_t v97 = 138412290;
          uint64_t v113 = v71;
          uint64_t v99 = v71;
          uint64_t v49 = v105;
          uint64_t v45 = v107;
          uint64_t v72 = v108;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v98 = v71;

          id v77 = "remindd didn't expect to receive actions from .todayNotificationBadge. {response: %@}";
          goto LABEL_37;
        }
LABEL_70:

        uint64_t v32 = v71;
        goto LABEL_71;
      }
      if (v47 != enum case for RDUserNotificationType.beforeFirstUnlock(_:))
      {
        uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        return result;
      }
      if (qword_100907768 != -1) {
        swift_once();
      }
      uint64_t v100 = type metadata accessor for Logger();
      sub_10008E2DC(v100, (uint64_t)qword_10091C220);
      uint64_t v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v101, v102))
      {
        uint64_t v103 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v103 = 0;
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "Forwarding .beforeFirstUnlock notification response to beforeFirstUnlockReminderDelegate", v103, 2u);
        uint64_t v45 = v107;
        swift_slowDealloc();
      }

      uint64_t v83 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_beforeFirstUnlockReminderDelegate;
    }
  }
  uint64_t v88 = v50 + v83;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v89 = *(void *)(v88 + 8);
    uint64_t v90 = swift_getObjectType();
    (*(void (**)(uint64_t, uint8_t *, char *, char *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v89 + 8))(v50, v104, v45, v34, v110, v111, v90, v89);

    swift_unknownObjectRelease();
  }
  else
  {
  }
  ((void (*)(char *, uint64_t))v33[1])(v45, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v34, v35);
}

Swift::Void __swiftcall RDUserNotificationCenter.userNotificationCenter(_:openSettingsFor:)(UNUserNotificationCenter _, UNNotification_optional openSettingsFor)
{
  if (qword_100907768 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091C220);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, "userNotificationCenter openSettingsForNotification, but we don't have any settings pane yet so bye ;)",
      v4,
      2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100515A24()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100515A6C(uint64_t a1)
{
  return sub_1005177D8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10050F514);
}

uint64_t sub_100515A84()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100515AD4()
{
  return sub_100517860((uint64_t (*)(void, void, void, void, void, void))sub_10050F7EC);
}

void *sub_100515AEC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v7 = v6;
        unint64_t v8 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_15;
        }
        id v9 = [v6 request];
        id v10 = [v9 content];

        uint64_t v11 = sub_10050F970();
        LOBYTE(v10) = sub_1001CBC20(a2, a3, v11);
        swift_bridgeObjectRelease();
        if (v10)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v5;
        if (v8 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v6 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_100515C8C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v23 = v4;
      unint64_t v24 = v7;
      unint64_t v25 = v7 & 0xC000000000000001;
      uint64_t v4 = 4;
      do
      {
        uint64_t v9 = v4 - 4;
        if (v25)
        {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1)) {
            goto LABEL_19;
          }
        }
        else
        {
          id v10 = *(id *)(v7 + 8 * v4);
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        uint64_t v12 = v8;
        uint64_t v13 = v10;
        id v14 = [v10 request:v23];
        uint64_t v15 = a3;
        id v16 = [v14 identifier];

        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        a3 = v15;
        BOOL v20 = v17 == a2 && v19 == v15;
        if (v20)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v13;
        }
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_18;
        }

        ++v4;
        uint64_t v8 = v12;
        BOOL v20 = v11 == v12;
        unint64_t v7 = v24;
      }
      while (!v20);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100515E54(NSObject *a1, char *a2, void (**a3)(void))
{
  uint64_t v103 = a2;
  uint64_t v5 = sub_100094134(&qword_10091C248);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RDUserNotificationType();
  uint64_t v105 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v104 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  os_log_type_t v102 = (char *)&v100 - v11;
  uint64_t v12 = sub_100094134((uint64_t *)&unk_10091C250);
  __chkstk_darwin(v12 - 8);
  id v14 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for RDUserNotificationAction();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  uint64_t v106 = a3;
  uint64_t v107 = v19;
  *(void *)(v19 + 16) = a3;
  _Block_copy(a3);
  id v20 = [a1 actionIdentifier];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;

  uint64_t v24 = v16;
  swift_bridgeObjectRetain();
  RDUserNotificationAction.init(rawValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_10091C250);
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_10091C220);
    swift_bridgeObjectRetain();
    os_log_type_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v109 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v108 = sub_1000C51B8(v21, v23, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unknown notification action. {actionIdentifier: %s}", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
  uint64_t v101 = a1;
  id v29 = [a1 notification];
  id v30 = [v29 request];

  id v31 = [v30 content];
  uint64_t v32 = (char *)v31;
  RDUserNotificationType.init(notificationContent:)();
  uint64_t v33 = v105;
  unint64_t v34 = v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v7, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v7, &qword_10091C248);
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_10008E2DC(v35, (uint64_t)qword_10091C220);
    uint64_t v36 = v32;
    id v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      NSString v104 = (char *)v15;
      os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v105 = v24;
      BOOL v41 = (void *)v40;
      *(_DWORD *)os_log_type_t v39 = 138412290;
      uint64_t v109 = (uint64_t)v36;
      uint64_t v42 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v41 = v36;

      uint64_t v15 = (uint64_t)v104;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unknown notification type from content. {content: %@}", v39, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      uint64_t v24 = v105;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_21;
  }
  uint64_t v43 = v8;
  uint64_t v44 = v102;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v102, v7, v43);
  uint64_t v45 = v104;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v104, v44, v43);
  int v46 = (*(uint64_t (**)(char *, uint64_t))(v33 + 88))(v45, v43);
  if (v46 == enum case for RDUserNotificationType.reminderAlarm(_:))
  {
    int v47 = v103;
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    sub_10008E2DC(v48, (uint64_t)qword_10091C220);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v49, v50)) {
      goto LABEL_18;
    }
    uint64_t v51 = v32;
    BOOL v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v52 = 0;
    os_log_type_t v53 = "Forwarding .reminderAlarm notification response to reminderAlarmDelegate";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v49, v50, v53, v52, 2u);
    uint64_t v32 = v51;
    int v47 = v103;
    swift_slowDealloc();
LABEL_18:

    uint64_t v54 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_reminderAlarmDelegate;
LABEL_30:
    os_log_type_t v61 = &v47[v54];
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v62 = *((void *)v61 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, NSObject *, char *, char *, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v62 + 8))(v47, v101, v44, v34, sub_10051706C, v107, ObjectType, v62);

      swift_unknownObjectRelease();
    }
    else
    {
    }
    uint64_t v64 = *(void (**)(char *, uint64_t))(v33 + 8);
    v64(v44, v43);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v34, v15);
    v64(v104, v43);
    return swift_release();
  }
  uint64_t v56 = v101;
  int v47 = v103;
  if (v46 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_10008E2DC(v57, (uint64_t)qword_10091C220);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Forwarding .todayNotificationForSingleReminder notification response to todayNotificationDelegate", v60, 2u);
      int v47 = v103;
      swift_slowDealloc();
    }

    uint64_t v54 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate;
    goto LABEL_30;
  }
  if (v46 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    uint64_t v103 = v32;
    uint64_t v65 = (id *)v104;
    (*(void (**)(char *, uint64_t))(v33 + 96))(v104, v43);

    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    sub_10008E2DC(v66, (uint64_t)qword_10091C220);
    uint64_t v67 = v56;
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v101 = v68;
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      uint64_t v100 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = 138412290;
      uint64_t v109 = (uint64_t)v67;
      id v71 = v67;
      NSString v104 = (char *)v15;
      uint64_t v72 = v24;
      os_log_type_t v73 = v71;
      uint64_t v68 = v101;
      uint64_t v33 = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v100 = v67;

      uint64_t v24 = v72;
      uint64_t v15 = (uint64_t)v104;
      os_log_t v74 = "remindd didn't expect to receive actions from .caldavSharedList. {response: %@}";
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, v68, v69, v74, v70, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v67 = v103;
LABEL_73:

      (*(void (**)(char *, uint64_t))(v33 + 8))(v102, v43);
LABEL_21:
      (*(void (**)(char *, uint64_t))(v24 + 8))(v34, v15);
LABEL_22:
      v106[2]();
      return swift_release();
    }
    goto LABEL_72;
  }
  if (v46 == enum case for RDUserNotificationType.assignmentNotification(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v104, v43);
    swift_bridgeObjectRelease();
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v75 = type metadata accessor for Logger();
    sub_10008E2DC(v75, (uint64_t)qword_10091C220);
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Forwarding .assignmentNotification response to assignmentNotificationDelegate", v78, 2u);
      int v47 = v103;
      swift_slowDealloc();
    }

    uint64_t v79 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_assignmentNotificationDelegate;
LABEL_52:
    uint64_t v84 = &v47[v79];
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v85 = *((void *)v84 + 1);
      uint64_t v86 = swift_getObjectType();
      (*(void (**)(char *, NSObject *, char *, char *, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v85 + 8))(v47, v101, v44, v34, sub_10051706C, v107, v86, v85);

      swift_unknownObjectRelease();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v44, v43);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v34, v15);
    return swift_release();
  }
  if (v46 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v104, v43);
    swift_bridgeObjectRelease();
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    sub_10008E2DC(v80, (uint64_t)qword_10091C220);
    os_log_type_t v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v81, v82))
    {
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Forwarding .shareListUpdateNotification response to sharedListUpdateNotificationDelegate", v83, 2u);
      int v47 = v103;
      swift_slowDealloc();
    }

    uint64_t v79 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_sharedListUpdateNotificationDelegate;
    goto LABEL_52;
  }
  if (v46 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
  {
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    sub_10008E2DC(v87, (uint64_t)qword_10091C220);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v49, v50)) {
      goto LABEL_18;
    }
    uint64_t v51 = v32;
    BOOL v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v52 = 0;
    os_log_type_t v53 = "Forwarding .dueDateDeltaAlarm notification response to reminderAlarmDelegate";
    goto LABEL_17;
  }
  if (v46 == enum case for RDUserNotificationType.todayNotification(_:))
  {
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v88 = type metadata accessor for Logger();
    sub_10008E2DC(v88, (uint64_t)qword_10091C220);
    uint64_t v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v91 = 0;
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "Forwarding .todayNotification notification response to todayNotificationDelegate", v91, 2u);
      int v47 = v103;
      swift_slowDealloc();
    }

    uint64_t v79 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate;
    goto LABEL_52;
  }
  if (v46 == enum case for RDUserNotificationType.todayNotificationBadge(_:))
  {
    uint64_t v103 = v32;
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    sub_10008E2DC(v92, (uint64_t)qword_10091C220);
    uint64_t v67 = v56;
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v101 = v68;
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      uint64_t v100 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = 138412290;
      uint64_t v109 = (uint64_t)v67;
      Swift::Int v93 = v67;
      NSString v104 = (char *)v15;
      uint64_t v94 = v24;
      char v95 = v93;
      uint64_t v68 = v101;
      uint64_t v33 = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v100 = v67;

      uint64_t v24 = v94;
      uint64_t v15 = (uint64_t)v104;
      os_log_t v74 = "remindd didn't expect to receive actions from .todayNotificationBadge. {response: %@}";
      goto LABEL_39;
    }
LABEL_72:

    goto LABEL_73;
  }
  if (v46 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
  {
    if (qword_100907768 != -1) {
      swift_once();
    }
    uint64_t v96 = type metadata accessor for Logger();
    sub_10008E2DC(v96, (uint64_t)qword_10091C220);
    uint64_t v97 = Logger.logObject.getter();
    os_log_type_t v98 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v97, v98))
    {
      uint64_t v99 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v99 = 0;
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "Forwarding .beforeFirstUnlock notification response to beforeFirstUnlockReminderDelegate", v99, 2u);
      int v47 = v103;
      swift_slowDealloc();
    }

    uint64_t v79 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_beforeFirstUnlockReminderDelegate;
    goto LABEL_52;
  }
  swift_release();
  _Block_release(v106);
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100517034()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10051706C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10051707C()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 81, 7);
}

void sub_1005170DC(void *a1)
{
  sub_10050FD3C(a1, *(char **)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void **)(v1 + 72), *(unsigned char *)(v1 + 80));
}

uint64_t sub_10051711C()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 89, 7);
}

uint64_t sub_100517184(uint64_t a1)
{
  return sub_10050FFA0(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void **)(v1 + 72), *(void **)(v1 + 80), *(unsigned char *)(v1 + 88));
}

uint64_t sub_1005171C4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 97, 7);
}

void sub_100517234()
{
  sub_1005102C4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void))(v0 + 40), *(void *)(v0 + 48), *(NSObject **)(v0 + 56), *(void *)(v0 + 64), *(void **)(v0 + 72), *(NSObject **)(v0 + 80), *(uint8_t **)(v0 + 88), *(unsigned char *)(v0 + 96));
}

uint64_t sub_100517278(uint64_t a1)
{
  return sub_100512350(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t)&unk_1008C8F50, (uint64_t)sub_10051737C, (uint64_t)&unk_1008C8F68);
}

uint64_t sub_1005172C0(uint64_t a1)
{
  return sub_100512350(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t)&unk_1008C8F00, (uint64_t)sub_100517350, (uint64_t)&unk_1008C8F18);
}

uint64_t sub_100517304(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100517350()
{
  return sub_10051260C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32), *(void *)(v0 + 40), "retainNotification content replaced {error: %s}");
}

uint64_t sub_10051737C()
{
  return sub_10051260C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32), *(void *)(v0 + 40), "retainNotification request added {error: %s}");
}

unint64_t sub_1005173A4()
{
  unint64_t result = qword_10091C340;
  if (!qword_10091C340)
  {
    sub_1000963CC(255, &qword_100914390);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091C340);
  }
  return result;
}

uint64_t sub_100517410(uint64_t a1)
{
  return sub_10050EE9C(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10051741C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100517464()
{
  return sub_10050F15C(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100517470()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1005174C8(void *a1)
{
  sub_10050E8A8(a1, *(char **)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_1005174E0()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100517528(uint64_t a1)
{
  return sub_100512350(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t)&unk_1008C9108, (uint64_t)sub_1005175C0, (uint64_t)&unk_1008C9120);
}

uint64_t sub_100517570()
{
  swift_errorRelease();

  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1005175C0()
{
  return sub_10051260C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32), *(void *)(v0 + 40), "showNotification request added {error: %s}");
}

uint64_t sub_1005175E8()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100517630()
{
  return sub_10050E120(*(void **)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

uint64_t sub_10051763C()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10051769C(uint64_t a1)
{
  return sub_100512F60(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void **)(v1 + 72));
}

uint64_t sub_1005176D0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 48)) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_100517738()
{
  sub_100513270(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(char **)(v0 + 40), *(void (**)(void))(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void **)(v0 + 80));
}

uint64_t sub_100517770()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005177C0(uint64_t a1)
{
  return sub_1005177D8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100513CC0);
}

uint64_t sub_1005177D8(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_1005177F0()
{
  swift_bridgeObjectRelease();
  swift_errorRelease();

  if (*(void *)(v0 + 48)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100517848()
{
  return sub_100517860((uint64_t (*)(void, void, void, void, void, void))sub_100513F9C);
}

uint64_t sub_100517860(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

unint64_t sub_10051791C(uint64_t a1)
{
  unint64_t result = sub_100517944();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100517944()
{
  unint64_t result = qword_10091C388;
  if (!qword_10091C388)
  {
    type metadata accessor for REMRemindersListDataView.TodaySectionOrderingInvocation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091C388);
  }
  return result;
}

uint64_t sub_10051799C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091C350);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091C350);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100517A64@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v59 = a2;
  uint64_t v60 = a1;
  uint64_t v4 = type metadata accessor for REMSmartListSection.PredefinedSectionType.Today();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  os_log_type_t v61 = (char *)v56 - v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v56 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v56 - v14;
  uint64_t v16 = static REMSmartListSection.PredefinedSectionType.Today.allCases.getter();
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v65 = v5;
  if (v17)
  {
    uint64_t v57 = v2;
    unint64_t v58 = v7;
    uint64_t v67 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    uint64_t v18 = v5 + 16;
    uint64_t v20 = *(unsigned __int8 *)(v18 + 64);
    v56[1] = v16;
    uint64_t v21 = v16 + ((v20 + 32) & ~v20);
    uint64_t v62 = *(void *)(v18 + 56);
    uint64_t v63 = v19;
    uint64_t v64 = v18;
    do
    {
      unint64_t v22 = v63;
      v63(v15, (char *)v21, v4);
      REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter();
      v22(v12, v15, v4);
      sub_100094134(&qword_10091C390);
      swift_allocObject();
      REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v15, v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v21 += v62;
      --v17;
    }
    while (v17);
    unint64_t v23 = (unint64_t)v67;
    swift_bridgeObjectRelease();
    uint64_t v3 = v57;
    unint64_t v7 = v58;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v23 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v24 = REMSmartListTypeToday;
  uint64_t v25 = v61;
  if (qword_100907B18 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_100942620;
  swift_retain();
  os_log_type_t v27 = sub_10064C1FC(v24, 0, v60, v26);
  if (v3)
  {
    swift_release();
    uint64_t v63 = 0;
    if (qword_100907770 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_10008E2DC(v37, (uint64_t)qword_10091C350);
    swift_errorRetain();
    swift_errorRetain();
    id v29 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v64 = v4;
      uint64_t v40 = (uint8_t *)v39;
      uint64_t v62 = swift_slowAlloc();
      uint64_t v67 = (void *)v62;
      *(_DWORD *)uint64_t v40 = 136446210;
      swift_getErrorValue();
      uint64_t v41 = Error.rem_errorDescription.getter();
      uint64_t v66 = sub_1000C51B8(v41, v42, (uint64_t *)&v67);
      uint64_t v25 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v38, "TodaySectionOrderingInvocation: error upon retrieving ordering, use default ordering {error: %{public}s}", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v4 = v64;
      swift_slowDealloc();

      swift_errorRelease();
      if (v23 >> 62) {
        goto LABEL_34;
      }
      goto LABEL_20;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
LABEL_19:

    if (v23 >> 62) {
      goto LABEL_34;
    }
    goto LABEL_20;
  }
  uint64_t v28 = v27;
  swift_release();
  id v29 = v28;
  id v30 = [v29 sectionIDsOrderingAsData];
  if (!v30)
  {
    uint64_t v63 = 0;

    goto LABEL_19;
  }
  id v31 = v30;
  uint64_t v32 = v4;
  uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v35 = v34;

  sub_100518234();
  static REMJSONRepresentable.fromJSONData(_:)();
  sub_100097F34(v33, v35);
  uint64_t v36 = v67;
  sub_100094134(&qword_10091C390);
  unint64_t v55 = REMOrderedIdentifierMap.reorder<A>(objects:)();
  uint64_t v63 = 0;

  swift_bridgeObjectRelease();
  unint64_t v23 = v55;
  uint64_t v4 = v32;
  if (v55 >> 62)
  {
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v43) {
      goto LABEL_35;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v43 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v43)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    return REMRemindersListDataView.TodaySectionOrderingModel.init(sectionOrdering:)();
  }
LABEL_21:
  uint64_t v67 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1001DE4A4(0, v43 & ~(v43 >> 63), 0);
  if ((v43 & 0x8000000000000000) == 0)
  {
    uint64_t v45 = v67;
    if ((v23 & 0xC000000000000001) != 0)
    {
      uint64_t v64 = v43;
      uint64_t v46 = 0;
      int v47 = v25;
      do
      {
        uint64_t v48 = (void *)v23;
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        REMOrderedIdentifierMap.IdentifiableContainer.nonIdentifiable.getter();
        swift_unknownObjectRelease();
        uint64_t v67 = v45;
        unint64_t v50 = v45[2];
        unint64_t v49 = v45[3];
        if (v50 >= v49 >> 1)
        {
          sub_1001DE4A4(v49 > 1, v50 + 1, 1);
          uint64_t v45 = v67;
        }
        ++v46;
        v45[2] = v50 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v65 + 32))((unint64_t)v45+ ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(void *)(v65 + 72) * v50, v47, v4);
        unint64_t v23 = (unint64_t)v48;
      }
      while (v64 != v46);
    }
    else
    {
      uint64_t v51 = 0;
      uint64_t v64 = v65 + 32;
      do
      {
        swift_retain();
        REMOrderedIdentifierMap.IdentifiableContainer.nonIdentifiable.getter();
        swift_release();
        uint64_t v67 = v45;
        BOOL v52 = v7;
        unint64_t v54 = v45[2];
        unint64_t v53 = v45[3];
        if (v54 >= v53 >> 1)
        {
          sub_1001DE4A4(v53 > 1, v54 + 1, 1);
          uint64_t v45 = v67;
        }
        ++v51;
        v45[2] = v54 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v65 + 32))((unint64_t)v45+ ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(void *)(v65 + 72) * v54, v52, v4);
        unint64_t v7 = v52;
      }
      while (v43 != v51);
    }
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

unint64_t sub_100518234()
{
  unint64_t result = qword_10090D600;
  if (!qword_10090D600)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090D600);
  }
  return result;
}

uint64_t sub_100518274(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  v257 = (char *)&v244 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v7 - 8);
  v255 = (char *)&v244 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TimeZone();
  v256 = *(void (***)(char *, uint64_t, uint64_t, char **))(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v244 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = type metadata accessor for Date();
  v258 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v263 - 8);
  __chkstk_darwin(v263);
  v250 = (char *)&v244 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v260 = (char *)&v244 - v14;
  uint64_t v270 = type metadata accessor for DateComponents();
  uint64_t v267 = *(void *)(v270 - 8);
  __chkstk_darwin(v270);
  v246 = (char *)&v244 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v249 = (char *)&v244 - v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v244 - v19;
  __chkstk_darwin(v21);
  unint64_t v23 = (char *)&v244 - v22;
  __chkstk_darwin(v24);
  v262 = (char *)&v244 - v25;
  uint64_t v26 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v244 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  id v31 = (char *)&v244 - v30;
  __chkstk_darwin(v32);
  v248 = (char *)&v244 - v33;
  __chkstk_darwin(v34);
  v252 = (char *)&v244 - v35;
  __chkstk_darwin(v36);
  v251 = (char *)&v244 - v37;
  __chkstk_darwin(v38);
  v264 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v244 - v39);
  __chkstk_darwin(v40);
  v266 = (char *)&v244 - v41;
  __chkstk_darwin(v42);
  v265 = (uint64_t *)((char *)&v244 - v43);
  v271 = (int *)type metadata accessor for RDSavedReminder();
  uint64_t v44 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(a1 + v271[9]);
  uint64_t v45 = a2;
  id v273 = a2;
  v261 = (char **)v9;
  v259 = v11;
  v254 = (void (**)(void, void, void, void))v31;
  v253 = v28;
  v247 = v20;
  v245 = v23;
  if (!v44)
  {
    v276 = 0;
LABEL_29:
    id v49 = v45;
LABEL_30:
    id v82 = [v49 storage];
    id v83 = [v82 titleReplicaIDSource];

    uint64_t v84 = (uint64_t *)(a1 + v271[15]);
    uint64_t v85 = *v84;
    unint64_t v86 = v84[1];
    id v87 = objc_allocWithZone((Class)REMCRMergeableStringDocument);
    sub_100097E38(v85, v86);
    unint64_t v88 = v269;
    id v89 = sub_10028B1B0((uint64_t)v83);
    uint64_t v90 = v88;
    sub_100097F34(v85, v86);

    if (v88) {
      return swift_bridgeObjectRelease();
    }
    if (v276)
    {
      id v91 = v89;
      swift_bridgeObjectRetain();
      uint64_t v92 = (void *)REMCRMergeableStringDocument.replacingInlineHashtagIDs(newHashtagID_byOriginalHashtagID:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v92 = v89;
    }
    uint64_t v93 = v270;
    id v275 = v92;
    id v94 = [v92 attributedString];
    id v95 = v273;
    [v273 setTitle:v94];

    uint64_t v96 = v271;
    uint64_t v97 = a1 + v271[10];
    unint64_t v98 = *(void *)(v97 + 8);
    if (v98 >> 60 != 15)
    {
      uint64_t v99 = *(void *)v97;
      sub_100097E38(*(void *)v97, *(void *)(v97 + 8));
      id v100 = [v95 storage];
      id v101 = [v100 notesReplicaIDSource];

      id v102 = objc_allocWithZone((Class)REMCRMergeableStringDocument);
      sub_100097E38(v99, v98);
      uint64_t v103 = sub_10028B1B0((uint64_t)v101);
      sub_100097F20(v99, v98);

      if (v276)
      {
        swift_bridgeObjectRetain();
        id v104 = v103;
        uint64_t v103 = (void *)REMCRMergeableStringDocument.replacingInlineHashtagIDs(newHashtagID_byOriginalHashtagID:)();
        swift_bridgeObjectRelease();
      }
      id v105 = [v103 attributedString];
      [v273 setNotes:v105];

      sub_100097F20(v99, v98);
      uint64_t v93 = v270;
      uint64_t v96 = v271;
      uint64_t v90 = 0;
    }
    id v106 = v273;
    [v273 setPriority:*(void *)(a1 + v96[11])];
    [v106 setFlagged:*(void *)(a1 + v96[8])];
    uint64_t v107 = a1 + v96[13];
    uint64_t v108 = (void (*)(void, void))v265;
    sub_100519FB0(v107, (uint64_t)v265);
    uint64_t v109 = v267;
    unint64_t v110 = v267 + 48;
    id v274 = *(id *)(v267 + 48);
    int v111 = ((uint64_t (*)(void (*)(void, void), uint64_t, uint64_t))v274)(v108, 1, v93);
    uint64_t v112 = (uint64_t)v266;
    if (v111 == 1)
    {
      Class isa = 0;
    }
    else
    {
      v114.super.Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
      uint64_t v93 = v270;
      id v115 = v108;
      Class isa = v114.super.isa;
      (*(void (**)(void, uint64_t))(v109 + 8))(v115, v270);
    }
    [v273 setStartDateComponents:isa];

    uint64_t v116 = a1 + v271[7];
    sub_100519FB0(v116, v112);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v274)(v112, 1, v93) == 1)
    {
      Class v117 = 0;
    }
    else
    {
      v118.super.Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
      uint64_t v93 = v270;
      Class v117 = v118.super.isa;
      (*(void (**)(uint64_t, uint64_t))(v267 + 8))(v112, v270);
    }
    [v273 setDueDateComponents:v117];

    uint64_t v119 = (uint64_t *)(a1 + v271[5]);
    if (*v119)
    {
      sub_100097314(*v119, v119[1], v119[2], v119[3]);
      uint64_t v93 = v270;
    }
    uint64_t v120 = v116;
    uint64_t v121 = v264;
    sub_100519FB0(v120, (uint64_t)v264);
    if (((unsigned int (*)(void, uint64_t, uint64_t))v274)(v121, 1, v93) == 1)
    {
      Class v122 = 0;
    }
    else
    {
      Class v122 = DateComponents._bridgeToObjectiveC()().super.isa;
      (*(void (**)(unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v267 + 8))(v121, v270);
    }
    id v123 = v273;
    [v273 setDueDateComponents:v122];

    uint64_t v124 = v271;
    uint64_t v125 = *(void *)(a1 + v271[6]);
    if (v125)
    {
      id v126 = [v123 dueDateDeltaAlertContext];
      if (v126)
      {
        uint64_t v127 = v126;
        unint64_t v277 = (unint64_t)_swiftEmptyArrayStorage;
        uint64_t v128 = *(void *)(v125 + 16);
        if (v128)
        {
          unint64_t v269 = v110;
          uint64_t v272 = v90;
          uint64_t v244 = a1;
          swift_bridgeObjectRetain();
          uint64_t v129 = kREMSupportedVersionUnset;
          v268 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v125;
          uint64_t v130 = (uint64_t *)(v125 + 48);
          do
          {
            uint64_t v131 = *v130;
            id v132 = (id)*(v130 - 2);
            id v133 = [v127 addDueDateDeltaAlertWithDueDateDelta:v132];
            if (v129 < v131)
            {
              id v134 = [v127 updateDueDateDeltaAlert:v133];
              id v135 = [v134 _setMinimumSupportedAppVersion:v131];

              id v133 = v135;
            }
            id v136 = v133;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v277 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v277 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            v130 += 3;
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            --v128;
          }
          while (v128);
          swift_bridgeObjectRelease();
          a1 = v244;
          uint64_t v90 = v272;
          unint64_t v110 = v269;
        }

        swift_bridgeObjectRelease();
        uint64_t v124 = v271;
      }
    }
    uint64_t v137 = *(void *)(a1 + v124[12]);
    if (!v137) {
      goto LABEL_90;
    }
    uint64_t v138 = *(void *)(v137 + 16);
    if (!v138) {
      goto LABEL_90;
    }
    unint64_t v269 = v110;
    uint64_t v272 = v90;
    uint64_t v244 = a1;
    v268 = v258;
    sub_1000963CC(0, (unint64_t *)&qword_100911840);
    uint64_t v139 = self;
    swift_bridgeObjectRetain();
    uint64_t v140 = 32;
    id v58 = v273;
    do
    {
      long long v141 = *(_OWORD *)(v137 + v140 + 16);
      v278[0] = *(_OWORD *)(v137 + v140);
      v278[1] = v141;
      long long v142 = *(_OWORD *)(v137 + v140 + 32);
      long long v143 = *(_OWORD *)(v137 + v140 + 48);
      long long v144 = *(_OWORD *)(v137 + v140 + 64);
      uint64_t v279 = *(void *)(v137 + v140 + 80);
      v278[3] = v143;
      v278[4] = v144;
      v278[2] = v142;
      sub_1004FF2E8((uint64_t)v278);
      sub_1004FF2E8((uint64_t)v278);
      id v145 = sub_1002A414C((uint64_t *)v278, [v139 newObjectID], [v58 accountID], [v58 objectID]);
      [v58 addRecurrenceRule:v145];

      sub_1002A4974((uint64_t)v278);
      v140 += 88;
      --v138;
    }
    while (v138);
    swift_bridgeObjectRelease();
    unsigned __int8 v146 = [v58 isOverdue];
    a1 = v244;
    if ((v146 & 1) == 0)
    {
      uint64_t v124 = v271;
LABEL_91:
      uint64_t v191 = a1 + v124[16];
      unint64_t v192 = *(void *)(v191 + 8);
      if (v192 >> 60 == 15)
      {
        id v193 = v275;
      }
      else
      {
        uint64_t v194 = *(void *)v191;
        sub_100097E38(*(void *)v191, *(void *)(v191 + 8));
        Class v195 = Data._bridgeToObjectiveC()().super.isa;
        id v193 = [self representationFromData:v195];

        [v58 setContactHandles:v193];
        sub_100097F20(v194, v192);
      }

      return swift_bridgeObjectRelease();
    }
    Class v147 = (Class)[v58 dueDateComponents];
    if (v147)
    {
      objc_super v148 = v262;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v149 = v267;
      id v150 = v251;
      uint64_t v151 = v270;
      (*(void (**)(char *, char *, uint64_t))(v267 + 32))(v251, v148, v270);
      id v49 = *(id *)(v149 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v49)(v150, 0, 1, v151);
      int v152 = ((uint64_t (*)(char *, uint64_t, uint64_t))v274)(v150, 1, v151);
      int v47 = v261;
      if (v152 == 1)
      {
        Class v147 = 0;
      }
      else
      {
        uint64_t v153 = v150;
        uint64_t v154 = v151;
        Class v147 = DateComponents._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v149 + 8))(v153, v154);
      }
    }
    else
    {
      id v49 = *(id *)(v267 + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v49)(v251, 1, 1, v270);
      int v47 = v261;
    }
    uint64_t v155 = v260;
    static Date.now.getter();
    Class v156 = Date._bridgeToObjectiveC()().super.isa;
    v264 = v268[1];
    ++v268;
    ((void (*)(char *, uint64_t))v264)(v155, v263);
    id v157 = v273;
    [v273 nextRecurrentAdvanceAmountForDateComponents:v147 afterDate:v156];
    double v2 = v158;

    uint64_t v28 = v252;
    if (v2 <= 0.0) {
      goto LABEL_83;
    }
    id v159 = [v157 dueDateComponents];
    if (v159)
    {
      os_log_type_t v160 = v159;
      long long v161 = v262;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v162 = *(void (**)(char *, char *, uint64_t))(v267 + 32);
      uint64_t v163 = v161;
      uint64_t v164 = v270;
      v162(v28, v163, v270);
      ((void (*)(char *, void, uint64_t, uint64_t))v49)(v28, 0, 1, v164);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v274)(v28, 1, v164) != 1)
      {
        uint64_t v165 = v245;
        uint64_t v166 = v270;
        v162(v245, v28, v270);
        Class v167 = DateComponents._bridgeToObjectiveC()().super.isa;
        id v168 = [(objc_class *)v167 rem_dateComponentsByAddingTimeInterval:v2];

        uint64_t v169 = v262;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

        Class v170 = DateComponents._bridgeToObjectiveC()().super.isa;
        uint64_t v171 = *(void (**)(char *, uint64_t))(v267 + 8);
        v171(v169, v166);
        [v273 setDueDateComponents:v170];

        v171(v165, v166);
        goto LABEL_78;
      }
LABEL_77:
      sub_1000966BC((uint64_t)v28, (uint64_t *)&unk_100911810);
LABEL_78:
      id v172 = [v273 startDateComponents];
      if (v172)
      {
        uint64_t v173 = v172;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

        char v174 = *(void (**)(void))(v267 + 32);
        uint64_t v175 = (uint64_t)v248;
        uint64_t v176 = v270;
        v174();
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v49)(v175, 0, 1, v176);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v274)(v175, 1, v176) != 1)
        {
          uint64_t v177 = v270;
          ((void (*)(char *, uint64_t, uint64_t))v174)(v247, v175, v270);
          Class v178 = DateComponents._bridgeToObjectiveC()().super.isa;
          id v179 = [(objc_class *)v178 rem_dateComponentsByAddingTimeInterval:v2];

          uint64_t v180 = v262;
          static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

          Class v181 = DateComponents._bridgeToObjectiveC()().super.isa;
          uint64_t v182 = *(void (**)(char *, uint64_t))(v267 + 8);
          v182(v180, v177);
          id v157 = v273;
          [v273 setStartDateComponents:v181];

          v182(v247, v177);
LABEL_83:
          id v183 = [v157 dueDateComponents];
          if (v183)
          {
            uint64_t v184 = v183;
            uint64_t v185 = v253;
            static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v186 = 0;
            uint64_t v56 = v256;
            uint64_t v187 = v270;
            uint64_t v62 = v272;
          }
          else
          {
            uint64_t v186 = 1;
            uint64_t v56 = v256;
            uint64_t v187 = v270;
            uint64_t v62 = v272;
            uint64_t v185 = v253;
          }
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v49)(v185, v186, 1, v187);
          uint64_t v188 = (uint64_t)v185;
          Class v189 = v254;
          sub_10051A018(v188, (uint64_t)v254);
          if (((unsigned int (*)(void (**)(void, void, void, void), uint64_t, uint64_t))v274)(v189, 1, v187))
          {
            sub_1000966BC((uint64_t)v189, (uint64_t *)&unk_100911810);
            uint64_t v190 = (uint64_t)v255;
            v56[7](v255, 1, 1, v47);
LABEL_89:
            sub_1000966BC(v190, &qword_100910408);
            uint64_t v124 = v271;
LABEL_90:
            id v58 = v273;
            goto LABEL_91;
          }
          uint64_t v190 = (uint64_t)v255;
          DateComponents.timeZone.getter();
          sub_1000966BC((uint64_t)v189, (uint64_t *)&unk_100911810);
          if (((unsigned int (*)(uint64_t, uint64_t, char **))v56[6])(v190, 1, v47) == 1) {
            goto LABEL_89;
          }
          unint64_t v60 = (unint64_t)v259;
          ((void (*)(char *, uint64_t, char **))v56[4])(v259, v190, v47);
          id v58 = v273;
          id v197 = [v273 alarms];
          if (v197)
          {
            uint64_t v198 = v197;
            sub_1000963CC(0, &qword_10090C4B8);
            unint64_t v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if (v60 >> 62) {
              goto LABEL_123;
            }
            uint64_t v199 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_99;
          }
          goto LABEL_119;
        }
      }
      else
      {
        uint64_t v175 = (uint64_t)v248;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v49)(v248, 1, 1, v270);
      }
      sub_1000966BC(v175, (uint64_t *)&unk_100911810);
      id v157 = v273;
      goto LABEL_83;
    }
LABEL_76:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v49)(v28, 1, 1, v270);
    goto LABEL_77;
  }
  v268 = v44;
  uint64_t v46 = (void *)sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v272 = (uint64_t)v268[2];
  if (!v272)
  {
    v276 = v46;
    goto LABEL_29;
  }
  uint64_t v244 = a1;
  int v47 = (char **)(v268 + 8);
  swift_bridgeObjectRetain();
  a1 = 1;
  uint64_t v48 = v272;
  id v49 = v45;
  while (1)
  {
    if (!v46) {
      goto LABEL_5;
    }
    uint64_t v51 = (uint64_t)*(v47 - 4);
    BOOL v52 = *(v47 - 2);
    v276 = *(v47 - 1);
    uint64_t v28 = *v47;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    id v53 = [v49 hashtagContext];
    if (v53) {
      break;
    }
    swift_bridgeObjectRetain();
    unint64_t v76 = sub_1001806F8((uint64_t)v276, (uint64_t)v28);
    char v78 = v77;
    swift_bridgeObjectRelease();
    if (v78)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v277 = (unint64_t)v46;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100318A14();
        uint64_t v46 = (void *)v277;
      }
      swift_bridgeObjectRelease();
      sub_1002C1FAC(v76, (uint64_t)v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
LABEL_5:
    if (v48 == a1) {
      goto LABEL_26;
    }
LABEL_6:
    v47 += 5;
    BOOL v50 = __OFADD__(a1++, 1);
    if (v50)
    {
      __break(1u);
      goto LABEL_76;
    }
  }
  unint64_t v54 = v53;
  id v274 = v52;
  NSString v55 = String._bridgeToObjectiveC()();
  uint64_t v56 = (void (**)(char *, uint64_t, uint64_t, char **))[v54 addHashtagWithType:v51 name:v55];

  id v57 = [v56 objectIdentifier];
  id v58 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v275 = v59;

  unint64_t v60 = (unint64_t)v46;
  char v61 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v277 = v60;
  uint64_t v62 = (uint64_t)v276;
  unint64_t v64 = sub_1001806F8((uint64_t)v276, (uint64_t)v28);
  uint64_t v65 = *(void *)(v60 + 16);
  BOOL v66 = (v63 & 1) == 0;
  uint64_t v67 = v65 + v66;
  if (__OFADD__(v65, v66))
  {
    __break(1u);
LABEL_119:
    ((void (*)(unint64_t, char **))v56[1])(v60, v47);
    goto LABEL_120;
  }
  char v68 = v63;
  if (*(void *)(v60 + 24) >= v67)
  {
    if (v61)
    {
      uint64_t v46 = (void *)v277;
      if (v63) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v60 = (unint64_t)&v277;
      sub_100318A14();
      uint64_t v46 = (void *)v277;
      if (v68) {
        goto LABEL_21;
      }
    }
LABEL_13:
    v46[(v64 >> 6) + 8] |= 1 << v64;
    id v71 = (uint64_t *)(v46[6] + 16 * v64);
    *id v71 = v62;
    v71[1] = (uint64_t)v28;
    uint64_t v72 = (void *)(v46[7] + 16 * v64);
    id v73 = v275;
    void *v72 = v58;
    v72[1] = v73;
    uint64_t v74 = v46[2];
    BOOL v50 = __OFADD__(v74, 1);
    uint64_t v75 = v74 + 1;
    if (v50)
    {
      __break(1u);
      while (2)
      {
        __break(1u);
LABEL_123:
        swift_bridgeObjectRetain();
        uint64_t v199 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_99:
        if (!v199)
        {
LABEL_117:
          swift_bridgeObjectRelease();
          ((void (*)(char *, char **))v256[1])(v259, v47);
LABEL_120:
          uint64_t v124 = v271;
          goto LABEL_91;
        }
        unint64_t v269 = v60 & 0xC000000000000001;
        v266 = (char *)(v267 + 8);
        v253 = (char *)(v258 + 4);
        v254 = (void (**)(void, void, void, void))(v258 + 7);
        v258 += 6;
        uint64_t v200 = 4;
        v255 = (char *)v60;
        uint64_t v267 = v199;
LABEL_103:
        if (v269) {
          id v201 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v201 = *(id *)(v60 + 8 * v200);
        }
        id v202 = v201;
        uint64_t v272 = v62;
        uint64_t v203 = v200 - 3;
        if (__OFADD__(v200 - 4, 1)) {
          continue;
        }
        break;
      }
      unint64_t v204 = (char *)[v201 trigger];
      self;
      uint64_t v205 = swift_dynamicCastObjCClass();
      if (v205)
      {
        v206 = (void *)v205;
        id v274 = v202;
        uint64_t v207 = self;
        id v208 = [v206 dateComponents];
        os_log_t v209 = v262;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

        Class v210 = DateComponents._bridgeToObjectiveC()().super.isa;
        v265 = *(uint64_t **)v266;
        ((void (*)(char *, uint64_t))v265)(v209, v270);
        Class v211 = TimeZone._bridgeToObjectiveC()().super.isa;
        id v212 = [v207 rem_dateWithDateComponents:v210 timeZone:v211];

        if (v212)
        {
          id v213 = v260;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v214 = *(void (**)(char *, uint64_t, uint64_t))v253;
          uint64_t v215 = (uint64_t)v257;
          uint64_t v216 = v213;
          uint64_t v217 = v263;
          (*(void (**)(char *, char *, uint64_t))v253)(v257, v216, v263);
          (*v254)(v215, 0, 1, v217);
          if ((*v258)(v215, 1, v217) != 1)
          {
            v252 = v204;
            uint64_t v218 = v263;
            v214(v250, v215, v263);
            Class v219 = Date._bridgeToObjectiveC()().super.isa;
            Class v220 = TimeZone._bridgeToObjectiveC()().super.isa;
            id v221 = [v207 rem_dateComponentsWithDate:v219 timeZone:v220 isAllDay:0];

            uint64_t v222 = v249;
            static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

            Class v223 = DateComponents._bridgeToObjectiveC()().super.isa;
            unint64_t v224 = v260;
            static Date.now.getter();
            Class v225 = Date._bridgeToObjectiveC()().super.isa;
            uint64_t v226 = v224;
            uint64_t v227 = v264;
            ((void (*)(char *, uint64_t))v264)(v226, v218);
            id v228 = v273;
            [v273 nextRecurrentAdvanceAmountForDateComponents:v223 afterDate:v225];
            double v230 = v229;

            if (v230 <= 0.0)
            {

              ((void (*)(char *, uint64_t))v265)(v222, v270);
              ((void (*)(char *, uint64_t))v227)(v250, v263);
            }
            else
            {
              id v231 = v274;
              [v228 removeAlarm:v274];
              id v232 = [v206 dateComponents];
              id v233 = v252;
              if (!v232)
              {
                __break(1u);
                goto LABEL_125;
              }
              Swift::Int v234 = v232;
              id v235 = [v232 rem_dateComponentsByAddingTimeInterval:v230];

              unint64_t v236 = v246;
              static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

              id v237 = objc_allocWithZone((Class)REMAlarmDateTrigger);
              Class v238 = DateComponents._bridgeToObjectiveC()().super.isa;
              id v239 = [v237 initWithDateComponents:v238];

              id v240 = [v228 addAlarmWithTrigger:v239];
              v241 = v236;
              uint64_t v242 = v270;
              v243 = (void (*)(char *, uint64_t))v265;
              ((void (*)(char *, uint64_t))v265)(v241, v270);
              v243(v249, v242);
              ((void (*)(char *, uint64_t))v264)(v250, v263);
            }
LABEL_115:
            int v47 = v261;
            unint64_t v60 = (unint64_t)v255;
LABEL_102:
            ++v200;
            uint64_t v62 = v272;
            id v58 = v273;
            if (v203 == v267) {
              goto LABEL_117;
            }
            goto LABEL_103;
          }
        }
        else
        {
          uint64_t v215 = (uint64_t)v257;
          (*v254)(v257, 1, 1, v263);
        }

        sub_1000966BC(v215, (uint64_t *)&unk_100909A40);
        goto LABEL_115;
      }

      goto LABEL_102;
    }
    v46[2] = v75;
    swift_bridgeObjectRetain();
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v48 = v272;
    id v49 = v273;
    if (v272 == a1)
    {
LABEL_26:
      v276 = v46;
      swift_bridgeObjectRelease();
      a1 = v244;
      goto LABEL_30;
    }
    goto LABEL_6;
  }
  sub_10030E654(v67, v61);
  unint64_t v60 = v277;
  unint64_t v69 = sub_1001806F8(v62, (uint64_t)v28);
  if ((v68 & 1) == (v70 & 1))
  {
    unint64_t v64 = v69;
    uint64_t v46 = (void *)v277;
    if ((v68 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_21:
    uint64_t v80 = (void *)(v46[7] + 16 * v64);
    swift_bridgeObjectRelease();
    id v81 = v275;
    *uint64_t v80 = v58;
    v80[1] = v81;
    goto LABEL_22;
  }
LABEL_125:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100519FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100911810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10051A018(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100911810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10051A080(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 personID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10051A0E8(uint64_t a1, void **a2)
{
  double v2 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v3 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v3 = 0;
  }
  id v4 = v3;
  [v2 setPersonID:];
}

uint64_t sub_10051A158(void *a1, void *a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v31 - v13;
  id v15 = [a1 identifier];
  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_5;
  }
  uint64_t v16 = v15;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v17(v7, v12, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_5:

    swift_release();
    sub_1001260DC((uint64_t)v7);
    return 0;
  }
  v31[1] = v9 + 32;
  uint64_t v32 = (void (*)(uint64_t, char *, uint64_t))v17;
  v17(v14, v7, v8);
  id v18 = [a1 accountTypeHost];
  id v37 = v18;
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v38 = v14;
  uint64_t v20 = v19;
  v19[2] = v18;
  v19[3] = a2;
  v19[4] = a1;
  v19[5] = v2;
  uint64_t v21 = swift_allocObject();
  v31[0] = v2;
  *(void *)(v21 + 16) = a1;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a1;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v2;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v2;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = sub_10051AE34;
  *(void *)(v24 + 24) = v20;
  id v33 = a1;
  id v25 = v37;
  id v37 = a2;
  swift_retain();
  swift_retain();
  uint64_t v35 = v23;
  uint64_t v36 = v22;
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  uint64_t v27 = v39;
  uint64_t v28 = v40;
  uint64_t v29 = v32;
  v32((uint64_t)v12, v38, v8);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v27;
  *(void *)(v30 + 24) = v28;
  v29(v30 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_localUUID, v12, v8);
  *(void *)(v30 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_accountTypeHost) = v25;
  *(void *)(v30 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_persistenceHost) = v37;
  return v30;
}

id sub_10051A65C@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 type];
  *a2 = (_WORD)result;
  return result;
}

id sub_10051A690(__int16 *a1, id *a2)
{
  return [*a2 setType:*a1];
}

void sub_10051A6A4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 personIDSalt_v1];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10051A70C(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v4 = isa;
  [v2 setPersonIDSalt_v1:];
}

uint64_t sub_10051A784()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1007895E0;
  *(void *)(v0 + 32) = swift_getKeyPath();
  *(void *)(v0 + 40) = swift_getKeyPath();
  *(void *)(v0 + 48) = swift_getKeyPath();
  *(void *)(v0 + 56) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  if ((v0 & 0x8000000000000000) != 0 || (v0 & 0x4000000000000000) != 0)
  {
    uint64_t v2 = (uint64_t)sub_100209778(v0);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = v0 & 0xFFFFFFFFFFFFFF8;
  }
  qword_1009422E8 = v2;
  return result;
}

uint64_t sub_10051A84C()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1009422F0 = result;
  *(void *)algn_1009422F8 = v1;
  return result;
}

uint64_t sub_10051A87C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_100121F2C();
  if (static NSObject.== infix(_:_:)())
  {
    if (qword_100907780 != -1) {
      swift_once();
    }
    uint64_t v4 = qword_1009422F0;
    swift_bridgeObjectRetain();
  }
  else
  {
    id v5 = [a3 personID];
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_10051A958(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [a1 personID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

uint64_t sub_10051A9CC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10051AA00()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_localUUID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10051AAC8()
{
  return type metadata accessor for RDAccountManualSortID();
}

uint64_t type metadata accessor for RDAccountManualSortID()
{
  uint64_t result = qword_10091C3C0;
  if (!qword_10091C3C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10051AB1C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10051ABD4(uint64_t *a1, uint64_t *a2)
{
  return sub_10051AF90(*a1, *a2);
}

uint64_t sub_10051ABE0()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(90);
  v2._object = (void *)0x80000001007D7B40;
  v2._countAndFlagsBits = 0xD000000000000028;
  String.append(_:)(v2);
  long long v20 = *(_OWORD *)(v0 + 16);
  sub_100094134((uint64_t *)&unk_10090A4C0);
  v3._countAndFlagsBits = Optional.descriptionOrNil.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x556C61636F6C202CLL;
  v4._object = (void *)0xED0000203A444955;
  String.append(_:)(v4);
  v5._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6E756F636361202CLL;
  v6._object = (void *)0xEF203A6570795474;
  String.append(_:)(v6);
  id v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_accountTypeHost), "description", v20));
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x795474736F68202CLL;
  v12._object = (void *)0xEC000000203A6570;
  String.append(_:)(v12);
  id v13 = [*(id *)(*(void *)(v1 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_persistenceHost) + 32) description];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 15997;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  return 0;
}

uint64_t sub_10051ADC8()
{
  return sub_10051ABE0();
}

uint64_t sub_10051ADEC()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10051AE34()
{
  return sub_10051A87C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10051AE40()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10051AE78(uint64_t *a1@<X8>)
{
  sub_10051A958(*(void **)(v1 + 16), a1);
}

uint64_t sub_10051AE94()
{
  return _swift_deallocObject(v0, 24, 7);
}

double sub_10051AEA4@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 0x6C61636F6CLL;
  *a1 = xmmword_1007904D0;
  return result;
}

uint64_t sub_10051AEB4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10051AEC4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10051AEFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

id sub_10051AF38@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 type];
  *a2 = (_WORD)result;
  return result;
}

id sub_10051AF6C(__int16 *a1, id *a2)
{
  return [*a2 setType:*a1];
}

uint64_t sub_10051AF90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_8;
      }
    }
    return 0;
  }
  if (v4) {
    return 0;
  }
LABEL_8:

  return static UUID.== infix(_:_:)();
}

void sub_10051B018(uint64_t *a1@<X8>)
{
}

void sub_10051B034(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X3>, uint64_t *a5@<X8>)
{
  Swift::String v6 = v5;
  v312 = a4;
  id v274 = a3;
  uint64_t v271 = a2;
  uint64_t v270 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v290 = sub_100094134(&qword_100919930);
  __chkstk_darwin(v290);
  v289 = (char *)&v246 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v297 = (uint64_t)&v246 - v11;
  __chkstk_darwin(v12);
  v288 = (char *)&v246 - v13;
  uint64_t v313 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v273 = *(void *)(v313 - 8);
  __chkstk_darwin(v313);
  unint64_t v269 = (char *)&v246 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v310 = (char *)&v246 - v16;
  uint64_t v298 = type metadata accessor for UUID();
  v299 = *(char **)(v298 - 8);
  __chkstk_darwin(v298);
  v303 = (char *)&v246 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v316 = (char *)&v246 - v19;
  __chkstk_darwin(v20);
  v315 = (char *)&v246 - v21;
  __chkstk_darwin(v22);
  v307 = (char *)&v246 - v23;
  __chkstk_darwin(v24);
  v308 = (char *)&v246 - v25;
  __chkstk_darwin(v26);
  v314 = (uint64_t *)((char *)&v246 - v27);
  __chkstk_darwin(v28);
  uint64_t v272 = (char *)&v246 - v29;
  __chkstk_darwin(v30);
  id v275 = (char *)&v246 - v31;
  __chkstk_darwin(v32);
  v311 = (char *)&v246 - v33;
  uint64_t v284 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType();
  v294 = *(void (***)(void, void))(v284 - 8);
  __chkstk_darwin(v284);
  v283 = (char *)&v246 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v35 - 8);
  v300 = (char *)&v246 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v304 = (char *)&v246 - v38;
  __chkstk_darwin(v39);
  v305 = (char *)&v246 - v40;
  __chkstk_darwin(v41);
  v292 = (char *)&v246 - v42;
  __chkstk_darwin(v43);
  uint64_t v309 = (uint64_t)&v246 - v44;
  __chkstk_darwin(v45);
  uint64_t v282 = (uint64_t)&v246 - v46;
  __chkstk_darwin(v47);
  uint64_t v286 = (uint64_t)&v246 - v48;
  unint64_t v293 = type metadata accessor for REMRemindersListDataView.SectionLite();
  v285 = *(char **)(v293 - 8);
  __chkstk_darwin(v293);
  v287 = (char *)&v246 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v50 - 8);
  BOOL v52 = (char *)&v246 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v53);
  NSString v55 = (char *)&v246 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  v302 = (void (*)(char *, unint64_t, id))((char *)&v246 - v57);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v59 = *(void (**)(void, char *, id))(Subtasks - 8);
  *(void *)&double v60 = __chkstk_darwin(Subtasks).n128_u64[0];
  v306 = (char *)&v246 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v62 = [v6 storeControllerManagedObjectContext:v60];
  if (!v62)
  {
    char v70 = self;
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v72 = String._bridgeToObjectiveC()();
    [v70 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v72];

    swift_willThrow();
    return;
  }
  uint64_t v63 = (uint64_t)v62;
  uint64_t v296 = Subtasks;
  id v295 = [v6 remObjectID];
  if (!v295)
  {
    id v73 = self;
    uint64_t v74 = swift_getObjCClassFromMetadata();
    NSString v75 = String._bridgeToObjectiveC()();
    [v73 unexpectedNilPropertyWithClass:v74 property:v75];

    swift_willThrow();
    return;
  }
  v262 = a5;
  id v64 = [v6 name];
  if (!v64)
  {
    unint64_t v76 = self;
    uint64_t v77 = swift_getObjCClassFromMetadata();
    NSString v78 = String._bridgeToObjectiveC()();
    [v76 unexpectedNilPropertyWithClass:v77 property:v78];

    swift_willThrow();
    return;
  }
  uint64_t v65 = v64;
  uint64_t v257 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v265 = v66;

  id v67 = [v6 sortingStyle];
  v276 = v6;
  id v291 = (id)v63;
  uint64_t v261 = ObjectType;
  if (v67)
  {
    char v68 = v67;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v69 = (id)REMSortingStyle.init(stringValue:)();
    if (!v69)
    {
      id v79 = REMSortingStyleDefault;
      Swift::String v6 = v276;
      uint64_t v63 = (uint64_t)v291;
      goto LABEL_13;
    }
    Swift::String v6 = v276;
    uint64_t v63 = (uint64_t)v291;
  }
  else
  {
    id v69 = REMSortingStyleDefault;
  }
  id v79 = v69;
LABEL_13:
  v323 = _swiftEmptyArrayStorage;
  v321 = _swiftEmptyDictionarySingleton;
  v322 = _swiftEmptyDictionarySingleton;
  v319 = (char *)_swiftEmptyArrayStorage;
  v320 = (char *)_swiftEmptyDictionarySingleton;
  unint64_t v267 = sub_1002EF3B4((uint64_t)_swiftEmptyArrayStorage);
  v280 = (void (*)(void, char *, id))sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v80 = (uint64_t)v306;
  (*((void (**)(char *, void, uint64_t))v59 + 13))(v306, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), v296);
  id v264 = v79;
  REMSortingStyle.dataViewSortingStyle.getter();
  uint64_t v81 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v82 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v82 - 8) + 104))(v55, v81, v82);
  swift_storeEnumTagMultiPayload();
  id v83 = v302;
  sub_100520FD4((uint64_t)v52, (uint64_t)v55, (uint64_t)v302);
  unint64_t v84 = (unint64_t)v295;
  uint64_t v85 = v301;
  unint64_t v86 = sub_1001F62F0((unint64_t)v295, v63, v80, v83);
  v268 = v85;
  if (v85)
  {
LABEL_18:
    sub_100452DFC((uint64_t)v83, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    (*((void (**)(char *, uint64_t))v59 + 1))(v306, v296);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  id v87 = v86;
  uint64_t v88 = qword_100907478;
  id v89 = (id)v84;
  if (v88 != -1) {
    goto LABEL_145;
  }
LABEL_15:
  uint64_t v90 = (objc_class *)qword_100942200;
  id v91 = (objc_class *)sub_1003DCBA4();
  uint64_t v92 = (objc_class *)sub_1003DD0C4();
  uint64_t v93 = v268;
  uint64_t v94 = sub_1003DD360(v84, 1, v63, v90, v91, v92);
  if (v93)
  {
    v268 = v93;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v84 = (unint64_t)v295;
    id v83 = v302;
    goto LABEL_18;
  }
  unint64_t v95 = v94;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v96 = (void *)sub_100200000(v95);
  swift_bridgeObjectRelease();
  uint64_t v97 = sub_10013D83C(v96, (uint64_t)v87);
  v268 = 0;
  uint64_t v98 = v97;
  swift_bridgeObjectRelease();
  id v247 = v89;

  swift_bridgeObjectRelease();
  sub_100452DFC((uint64_t)v302, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  (*((void (**)(char *, uint64_t))v59 + 1))(v306, v296);
  uint64_t v258 = *(void *)(v98 + 16);
  if (v258)
  {
    unint64_t v99 = 0;
    unint64_t v100 = (v285[80] + 32) & ~(unint64_t)v285[80];
    uint64_t v259 = v98;
    unint64_t v256 = v98 + v100;
    v255 = v285 + 16;
    v254 = (uint64_t (**)(char *, uint64_t))(v294 + 11);
    int v253 = enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:);
    int v249 = enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:);
    id v87 = v299;
    v306 = v299 + 56;
    v248 = (void (**)(char *, uint64_t))(v294 + 12);
    v281 = v299 + 48;
    v278 = (void (**)(char *, uint64_t, id))(v299 + 32);
    v266 = (void (**)(char *, char *, id))(v299 + 16);
    uint64_t v279 = (void (**)(uint64_t, id))(v299 + 8);
    id v295 = (id)(v273 + 16);
    v251 = v299 + 40;
    v294 = (void (**)(void, void))(v273 + 8);
    v252 = (void (**)(char *, unint64_t))(v285 + 8);
    v250 = (char *)_swiftEmptyArrayStorage;
    id v89 = (id)v298;
    uint64_t v59 = v280;
    uint64_t v101 = v313;
    unint64_t v84 = (unint64_t)v287;
    while (1)
    {
      if (v99 >= *(void *)(v259 + 16)) {
        goto LABEL_142;
      }
      uint64_t v103 = *((void *)v285 + 9);
      unint64_t v263 = v99;
      (*((void (**)(unint64_t, unint64_t, unint64_t))v285 + 2))(v84, v256 + v103 * v99, v293);
      id v104 = v283;
      REMRemindersListDataView.SectionLite.type.getter();
      uint64_t v105 = v284;
      int v106 = (*v254)(v104, v284);
      if (v106 == v253)
      {
        uint64_t v107 = v87;
        (*v248)(v104, v105);
        uint64_t v108 = *(void **)v104;
        v301 = (void (*)(void, void, void))*((void *)v104 + 1);
        uint64_t v109 = *((void *)v104 + 2);
        swift_bridgeObjectRelease();
        id v110 = [v108 uuid];
        uint64_t v111 = v286;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v101 = v313;
        v302 = *(void (**)(char *, unint64_t, id))v306;
        ((void (*)(uint64_t, void, uint64_t, id))v302)(v111, 0, 1, v89);
      }
      else
      {
        if (v106 != v249) {
          goto LABEL_148;
        }
        uint64_t v107 = v87;
        uint64_t v111 = v286;
        v302 = *(void (**)(char *, unint64_t, id))v306;
        ((void (*)(uint64_t, uint64_t, uint64_t, id))v302)(v286, 1, 1, v89);
        v301 = 0;
        uint64_t v109 = 0;
      }
      uint64_t v112 = v287;
      uint64_t v113 = REMRemindersListDataView.SectionLite.reminders.getter();
      uint64_t v114 = swift_bridgeObjectRetain();
      sub_1002026F8(v114);
      uint64_t v115 = v282;
      sub_1001248EC(v111, v282);
      v280 = (void (*)(void, char *, id))*v281;
      if (((unsigned int (*)(uint64_t, uint64_t, id))v280)(v115, 1, v89) == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000966BC(v111, (uint64_t *)&unk_100909E50);
        (*v252)(v112, v293);
        sub_1000966BC(v115, (uint64_t *)&unk_100909E50);
        uint64_t v102 = (uint64_t)v312;
        unint64_t v84 = (unint64_t)v112;
      }
      else
      {
        uint64_t v260 = v113;
        uint64_t v116 = v115;
        Class v117 = v311;
        unint64_t v277 = *v278;
        v277(v311, v116, v89);
        if (v109)
        {
          uint64_t v118 = v109;
          unint64_t v119 = (unint64_t)v250;
          uint64_t v120 = v279;
          uint64_t v63 = (uint64_t)v291;
          if (v250)
          {
            (*v266)(v275, v311, v89);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v119 = sub_100309EC8(0, *(void *)(v119 + 16) + 1, 1, v119);
            }
            v250 = (char *)v119;
            unint64_t v122 = *(void *)(v119 + 16);
            unint64_t v121 = *(void *)(v119 + 24);
            if (v122 >= v121 >> 1) {
              v250 = (char *)sub_100309EC8(v121 > 1, v122 + 1, 1, (unint64_t)v250);
            }
            id v123 = v250;
            *((void *)v250 + 2) = v122 + 1;
            v277(&v123[((v107[80] + 32) & ~(unint64_t)v107[80])+ *((void *)v107 + 9) * v122], (uint64_t)v275, v89);
            uint64_t v101 = v313;
          }
          else
          {
            v250 = 0;
          }
          unint64_t v124 = v267;
          Swift::String v6 = v276;
          if (v267)
          {
            uint64_t v125 = (uint64_t)v272;
            (*v266)(v272, v311, v89);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            int64_t v318 = v124;
            sub_1002C5EEC((uint64_t)v301, v118, v125, isUniquelyReferenced_nonNull_native);
            unint64_t v267 = v318;
            swift_bridgeObjectRelease();
            (*v120)(v125, v89);
          }
          else
          {
            swift_bridgeObjectRelease();
            unint64_t v267 = 0;
          }
          uint64_t v102 = (uint64_t)v312;
          uint64_t v127 = v310;
          id v87 = *(char **)(v260 + 16);
          if (v87)
          {
            unint64_t v128 = v260
                 + ((*(unsigned __int8 *)(v273 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v273 + 80));
            uint64_t v296 = *(void *)(v273 + 72);
            v301 = *(void (**)(void, void, void))(v273 + 16);
            Swift::String v6 = (char *)v266;
            v301(v310, v128, v101);
            while (1)
            {
              if (v59)
              {
                id v132 = v59;
                id v133 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
                id v134 = [v133 uuid];

                id v135 = (void (*)(void, void, void))v314;
                static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v59 = *(void (**)(void, char *, id))v6;
                uint64_t v136 = v309;
                (*(void (**)(uint64_t, char *, id))v6)(v309, v311, v89);
                ((void (*)(uint64_t, void, uint64_t, id))v302)(v136, 0, 1, v89);
                if (((unsigned int (*)(uint64_t, uint64_t, id))v280)(v136, 1, v89) == 1)
                {
                  uint64_t v137 = v63;
                  sub_1000966BC(v136, (uint64_t *)&unk_100909E50);
                  uint64_t v59 = v132;
                  swift_bridgeObjectRetain();
                  unint64_t v138 = sub_100306EC4((uint64_t)v135);
                  char v140 = v139;
                  swift_bridgeObjectRelease();
                  if (v140)
                  {
                    char v141 = swift_isUniquelyReferenced_nonNull_native();
                    int64_t v318 = (int64_t)v132;
                    if ((v141 & 1) == 0)
                    {
                      sub_10031967C();
                      uint64_t v59 = (void (*)(void, char *, id))v318;
                    }
                    uint64_t v142 = *((void *)v59 + 6);
                    unint64_t v143 = *((void *)v299 + 9) * v138;
                    uint64_t v131 = (void (*)(uint64_t, id))*((void *)v299 + 1);
                    v131(v142 + v143, v89);
                    unint64_t v144 = *(void *)(v318 + 56) + v143;
                    uint64_t v59 = (void (*)(void, char *, id))v318;
                    uint64_t v130 = (uint64_t)v292;
                    v277(v292, v144, v89);
                    sub_1002C2610(v138, (uint64_t)v59);
                    swift_bridgeObjectRelease();
                    ((void (*)(uint64_t, void, uint64_t, id))v302)(v130, 0, 1, v89);
                  }
                  else
                  {
                    uint64_t v129 = v279;
                    uint64_t v130 = (uint64_t)v292;
                    ((void (*)(char *, uint64_t, uint64_t, id))v302)(v292, 1, 1, v89);
                    uint64_t v131 = *v129;
                  }
                  v131((uint64_t)v314, v89);
                  sub_1000966BC(v130, (uint64_t *)&unk_100909E50);
                  uint64_t v102 = (uint64_t)v312;
                  uint64_t v101 = v313;
                  uint64_t v127 = v310;
                  uint64_t v63 = v137;
                  Swift::String v6 = (char *)v266;
                }
                else
                {
                  v277(v308, v136, v89);
                  uint64_t v145 = (uint64_t)v135;
                  unint64_t v84 = (unint64_t)v132;
                  uint64_t v63 = swift_isUniquelyReferenced_nonNull_native();
                  int64_t v318 = (int64_t)v132;
                  unint64_t v147 = sub_100306EC4(v145);
                  uint64_t v148 = *((void *)v132 + 2);
                  BOOL v149 = (v146 & 1) == 0;
                  uint64_t v150 = v148 + v149;
                  if (__OFADD__(v148, v149)) {
                    goto LABEL_141;
                  }
                  char v151 = v146;
                  if (*(void *)(v84 + 24) >= v150)
                  {
                    if ((v63 & 1) == 0) {
                      sub_10031967C();
                    }
                  }
                  else
                  {
                    sub_100310698(v150, v63);
                    unint64_t v152 = sub_100306EC4((uint64_t)v314);
                    if ((v151 & 1) != (v153 & 1)) {
                      goto LABEL_147;
                    }
                    unint64_t v147 = v152;
                  }
                  uint64_t v63 = (uint64_t)v291;
                  unint64_t v84 = v318;
                  if (v151)
                  {
                    (*((void (**)(unint64_t, char *, id))v299 + 5))(*(void *)(v318 + 56) + *((void *)v299 + 9) * v147, v308, v89);
                  }
                  else
                  {
                    *(void *)(v318 + 8 * (v147 >> 6) + 64) |= 1 << v147;
                    unint64_t v154 = *((void *)v299 + 9) * v147;
                    v59(*(void *)(v84 + 48) + v154, (char *)v314, v89);
                    v277((char *)(*(void *)(v84 + 56) + v154), (uint64_t)v308, v89);
                    uint64_t v155 = *(void *)(v84 + 16);
                    BOOL v156 = __OFADD__(v155, 1);
                    uint64_t v157 = v155 + 1;
                    if (v156) {
                      goto LABEL_143;
                    }
                    *(void *)(v84 + 16) = v157;
                  }
                  uint64_t v102 = (uint64_t)v312;
                  uint64_t v101 = v313;
                  uint64_t v59 = (void (*)(void, char *, id))v318;
                  swift_bridgeObjectRelease();
                  (*v279)((uint64_t)v314, v89);
                  uint64_t v127 = v310;
                }
              }
              (*v294)(v127, v101);
              v128 += v296;
              if (!--v87) {
                break;
              }
              v301(v127, v128, v101);
            }
            swift_bridgeObjectRelease();
            Swift::String v6 = v276;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          (*v279)((uint64_t)v311, v89);
          sub_1000966BC(v286, (uint64_t *)&unk_100909E50);
          unint64_t v84 = (unint64_t)v287;
          (*v252)(v287, v293);
          id v87 = v299;
          goto LABEL_25;
        }
        swift_bridgeObjectRelease();
        (*v279)((uint64_t)v117, v89);
        sub_1000966BC(v286, (uint64_t *)&unk_100909E50);
        unint64_t v84 = (unint64_t)v287;
        (*v252)(v287, v293);
        uint64_t v102 = (uint64_t)v312;
      }
      uint64_t v63 = (uint64_t)v291;
      id v87 = v107;
      Swift::String v6 = v276;
LABEL_25:
      unint64_t v99 = v263 + 1;
      if (v263 + 1 == v258)
      {
        v280 = v59;
        swift_bridgeObjectRelease();
        goto LABEL_72;
      }
    }
  }
  swift_bridgeObjectRelease();
  v250 = (char *)_swiftEmptyArrayStorage;
  id v89 = (id)v298;
  id v87 = v299;
  uint64_t v102 = (uint64_t)v312;
  uint64_t v101 = v313;
LABEL_72:
  int64_t v318 = 0;
  uint64_t v158 = *((void *)v319 + 2);
  if (v158)
  {
    v314 = *(void **)(v273 + 16);
    uint64_t v159 = *(unsigned __int8 *)(v273 + 80);
    v311 = v319;
    os_log_type_t v160 = &v319[(v159 + 32) & ~v159];
    long long v161 = (void (**)(char *, uint64_t))(v273 + 8);
    uint64_t v162 = *(void *)(v273 + 72);
    uint64_t v163 = v269;
    ((void (*)(char *, char *, uint64_t))v314)(v269, v160, v101);
    while (1)
    {
      if (v318 < v102)
      {
        uint64_t v166 = v102;
        Class v167 = v165;
        id v168 = v268;
        sub_10051D534(v163, (uint64_t)v291, (unint64_t *)&v323, (uint64_t)&v321, v274, (uint64_t *)&v320, &v318, v166, (uint64_t *)&v322, v261);
        v268 = v168;
        if (v168)
        {
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          (*v161)(v163, v313);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_19:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_20:
          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v102 = (uint64_t)v312;
      }
      uint64_t v164 = v313;
      (*v161)(v163, v313);
      v160 += v162;
      if (!--v158) {
        break;
      }
      ((void (*)(char *, char *, uint64_t))v314)(v163, v160, v164);
    }
    swift_bridgeObjectRelease();
    Swift::String v6 = v276;
    uint64_t v63 = (uint64_t)v291;
    id v87 = v299;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v169 = v323;
  uint64_t v170 = (uint64_t)v321;
  uint64_t v171 = v322;
  id v172 = v320;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v281 = v169;
  swift_bridgeObjectRetain();
  uint64_t v282 = v170;
  swift_bridgeObjectRetain();
  v283 = v172;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v311 = (char *)sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v173 = v171[8];
  uint64_t v284 = (uint64_t)(v171 + 8);
  uint64_t v174 = 1 << *((unsigned char *)v171 + 32);
  uint64_t v175 = -1;
  if (v174 < 64) {
    uint64_t v175 = ~(-1 << v174);
  }
  unint64_t v84 = v175 & v173;
  uint64_t v286 = (unint64_t)(v174 + 63) >> 6;
  uint64_t v59 = (void (*)(void, char *, id))(v87 + 16);
  v314 = v87 + 32;
  uint64_t v309 = (uint64_t)(v87 + 56);
  v285 = v87 + 48;
  uint64_t v296 = (uint64_t)(v87 + 40);
  v301 = (void (*)(void, void, void))(v87 + 8);
  swift_bridgeObjectRetain();
  id v176 = 0;
  v306 = v87 + 16;
  v287 = (char *)v171;
  while (1)
  {
    if (v84)
    {
      v294 = (void (**)(void, void))((v84 - 1) & v84);
      id v295 = v176;
      unint64_t v177 = __clz(__rbit64(v84)) | ((void)v176 << 6);
      goto LABEL_99;
    }
    BOOL v156 = __OFADD__(v176, 1);
    uint64_t v178 = (uint64_t)v176 + 1;
    if (v156) {
      goto LABEL_144;
    }
    if (v178 >= v286)
    {
LABEL_131:
      swift_release();
      Class v225 = v171;
      swift_bridgeObjectRelease();
      v316 = (char *)[v6 color];
      id v226 = [v6 badgeEmblem];
      if (v226)
      {
        uint64_t v227 = v226;
        v315 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v229 = v228;
      }
      else
      {
        v315 = 0;
        uint64_t v229 = 0;
      }
      id v230 = [v6 sortingStyle];
      if (v230)
      {
        id v231 = v230;
        uint64_t v232 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v234 = v233;
      }
      else
      {

        uint64_t v232 = 0;
        uint64_t v234 = 0;
      }
      id v235 = (int *)type metadata accessor for RDPublicTemplate();
      unint64_t v236 = v262;
      (*(void (**)(char *, uint64_t, id))v306)((char *)v262 + v235[8], v270, v89);
      id v237 = (char *)v236 + v235[9];
      uint64_t v238 = type metadata accessor for Date();
      uint64_t v239 = *(void *)(v238 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v239 + 16))(v237, v271, v238);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v239 + 56))(v237, 0, 1, v238);
      uint64_t v240 = v265;
      *unint64_t v236 = v257;
      v236[1] = v240;
      v241 = v315;
      v236[2] = (uint64_t)v316;
      v236[3] = (uint64_t)v241;
      v236[4] = v229;
      v236[5] = v232;
      v236[6] = v234;
      uint64_t v242 = (uint64_t *)((char *)v236 + v235[10]);
      void *v242 = v281;
      v242[1] = v225;
      v243 = v283;
      v242[2] = v282;
      v242[3] = v243;
      unint64_t v244 = v267;
      v242[4] = v250;
      v242[5] = v244;
      v245 = v311;
      v242[6] = v280;
      v242[7] = v245;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    unint64_t v179 = *(void *)(v284 + 8 * v178);
    if (!v179) {
      break;
    }
LABEL_98:
    v294 = (void (**)(void, void))((v179 - 1) & v179);
    id v295 = (id)v178;
    unint64_t v177 = __clz(__rbit64(v179)) + (v178 << 6);
LABEL_99:
    uint64_t v181 = v171[6];
    v310 = (char *)*((void *)v87 + 9);
    uint64_t v182 = (void (*)(char *, unint64_t, id))*((void *)v87 + 2);
    uint64_t v183 = (uint64_t)v288;
    v182(v288, v181 + (void)v310 * v177, v89);
    uint64_t v184 = *(void *)(v171[7] + 8 * v177);
    uint64_t v185 = v290;
    *(void *)(v183 + *(int *)(v290 + 48)) = v184;
    uint64_t v186 = v297;
    sub_10051E1D4(v183, v297);
    uint64_t v187 = *(int *)(v185 + 48);
    uint64_t v188 = v289;
    v302 = v182;
    v182(v289, v186, v89);
    Class v189 = *(char **)(v186 + v187);
    v308 = (char *)*((void *)v87 + 4);
    ((void (*)(char *, char *, id))v308)(v307, v188, v89);
    uint64_t v190 = *((void *)v189 + 2);
    uint64_t v191 = (uint64_t *)v309;
    unint64_t v293 = v309 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    if (v190)
    {
      unint64_t v192 = &v189[(v87[80] + 32) & ~(unint64_t)v87[80]];
      v292 = v189;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v59 = (void (*)(void, char *, id))v285;
      id v87 = (char *)v302;
      while (1)
      {
        v312 = v192;
        uint64_t v313 = v190;
        id v197 = v305;
        ((void (*)(char *, char *, id))v87)(v305, v192, v89);
        uint64_t v63 = *v191;
        ((void (*)(char *, void, uint64_t, id))*v191)(v197, 0, 1, v89);
        uint64_t v198 = *(unsigned int (**)(uint64_t, uint64_t, id))v59;
        if ((*(unsigned int (**)(char *, uint64_t, id))v59)(v197, 1, v89) == 1)
        {
          Swift::String v6 = v276;
          uint64_t v63 = (uint64_t)v291;
          id v87 = v299;
          uint64_t v171 = v287;
          id v176 = v295;
          unint64_t v84 = (unint64_t)v294;
          goto LABEL_85;
        }
        uint64_t v199 = v315;
        uint64_t v200 = v197;
        id v201 = v308;
        ((void (*)(char *, char *, id))v308)(v315, v200, v89);
        ((void (*)(char *, char *, id))v87)(v316, v199, v89);
        uint64_t v202 = (uint64_t)v304;
        ((void (*)(char *, char *, id))v87)(v304, v307, v89);
        ((void (*)(uint64_t, void, uint64_t, id))v63)(v202, 0, 1, v89);
        if (v198(v202, 1, v89) == 1)
        {
          sub_1000966BC(v202, (uint64_t *)&unk_100909E50);
          uint64_t v203 = (uint64_t)v311;
          swift_bridgeObjectRetain();
          unint64_t v204 = sub_100306EC4((uint64_t)v316);
          char v206 = v205;
          swift_bridgeObjectRelease();
          if (v206)
          {
            char v207 = swift_isUniquelyReferenced_nonNull_native();
            v317 = (void *)v203;
            id v87 = (char *)v302;
            if ((v207 & 1) == 0)
            {
              sub_10031967C();
              uint64_t v203 = (uint64_t)v317;
            }
            unint64_t v208 = v204 * (void)v310;
            uint64_t v194 = *(void (**)(char *, id))v301;
            id v89 = (id)v298;
            (*(void (**)(unint64_t, uint64_t))v301)(*(void *)(v203 + 48) + v204 * (void)v310, v298);
            uint64_t v203 = (uint64_t)v317;
            unint64_t v209 = v317[7] + v208;
            uint64_t v193 = (uint64_t)v300;
            ((void (*)(char *, unint64_t, id))v308)(v300, v209, v89);
            sub_1002C2610(v204, v203);
            swift_bridgeObjectRelease();
            ((void (*)(uint64_t, void, uint64_t, id))v63)(v193, 0, 1, v89);
          }
          else
          {
            uint64_t v193 = (uint64_t)v300;
            ((void (*)(char *, uint64_t, uint64_t, id))v63)(v300, 1, 1, v89);
            uint64_t v194 = *(void (**)(char *, id))v301;
            id v87 = (char *)v302;
          }
          v194(v316, v89);
          sub_1000966BC(v193, (uint64_t *)&unk_100909E50);
          goto LABEL_103;
        }
        ((void (*)(char *, uint64_t, id))v201)(v303, v202, v89);
        Swift::String v6 = v311;
        int v210 = swift_isUniquelyReferenced_nonNull_native();
        v317 = v6;
        unint64_t v84 = (unint64_t)v6;
        unint64_t v212 = sub_100306EC4((uint64_t)v316);
        uint64_t v213 = *((void *)v6 + 2);
        BOOL v214 = (v211 & 1) == 0;
        uint64_t v215 = v213 + v214;
        if (__OFADD__(v213, v214))
        {
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          swift_once();
          goto LABEL_15;
        }
        char v216 = v211;
        if (*((void *)v6 + 3) >= v215)
        {
          id v87 = (char *)v302;
          if (v210)
          {
            unint64_t v84 = (unint64_t)v317;
            if ((v211 & 1) == 0) {
              goto LABEL_114;
            }
          }
          else
          {
            sub_10031967C();
            unint64_t v84 = (unint64_t)v317;
            if ((v216 & 1) == 0) {
              goto LABEL_114;
            }
          }
        }
        else
        {
          sub_100310698(v215, v210);
          unint64_t v217 = sub_100306EC4((uint64_t)v316);
          id v87 = (char *)v302;
          if ((v216 & 1) != (v218 & 1)) {
            goto LABEL_147;
          }
          unint64_t v212 = v217;
          unint64_t v84 = (unint64_t)v317;
          if ((v216 & 1) == 0)
          {
LABEL_114:
            *(void *)(v84 + 8 * (v212 >> 6) + 64) |= 1 << v212;
            unint64_t v219 = v212 * (void)v310;
            ((void (*)(unint64_t, char *, id))v87)(*(void *)(v84 + 48) + v219, v316, v89);
            ((void (*)(unint64_t, char *, id))v308)(*(void *)(v84 + 56) + v219, v303, v89);
            uint64_t v220 = *(void *)(v84 + 16);
            BOOL v156 = __OFADD__(v220, 1);
            uint64_t v221 = v220 + 1;
            if (v156) {
              goto LABEL_140;
            }
            *(void *)(v84 + 16) = v221;
            goto LABEL_119;
          }
        }
        (*(void (**)(unint64_t, char *, id))v296)(*(void *)(v84 + 56) + v212 * (void)v310, v303, v89);
LABEL_119:
        uint64_t v203 = (uint64_t)v317;
        swift_bridgeObjectRelease();
        uint64_t v194 = *(void (**)(char *, id))v301;
        (*(void (**)(char *, id))v301)(v316, v89);
LABEL_103:
        os_log_type_t v196 = v312;
        uint64_t v195 = v313;
        v311 = (char *)v203;
        v194(v315, v89);
        uint64_t v191 = (uint64_t *)v309;
        unint64_t v192 = &v310[(void)v196];
        uint64_t v190 = v195 - 1;
        if (!v190)
        {
          Swift::String v6 = v276;
          uint64_t v222 = (void (*)(char *, uint64_t, uint64_t, id))v63;
          uint64_t v63 = (uint64_t)v291;
          Class v223 = v305;
          uint64_t v171 = v287;
          id v176 = v295;
          unint64_t v84 = (unint64_t)v294;
          goto LABEL_124;
        }
      }
    }
    uint64_t v222 = *(void (**)(char *, uint64_t, uint64_t, id))v309;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    Swift::String v6 = v276;
    Class v223 = v305;
    uint64_t v171 = v287;
    id v176 = v295;
    unint64_t v84 = (unint64_t)v294;
LABEL_124:
    v222(v223, 1, 1, v89);
    id v87 = v299;
LABEL_85:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, id))v301)(v307, v89);
    swift_bridgeObjectRelease();
    sub_1000966BC(v297, &qword_100919930);
    uint64_t v59 = (void (*)(void, char *, id))v306;
  }
  uint64_t v180 = v178 + 1;
  if (v178 + 1 >= v286) {
    goto LABEL_131;
  }
  unint64_t v179 = *(void *)(v284 + 8 * v180);
  if (v179) {
    goto LABEL_97;
  }
  uint64_t v180 = v178 + 2;
  if (v178 + 2 >= v286) {
    goto LABEL_131;
  }
  unint64_t v179 = *(void *)(v284 + 8 * v180);
  if (v179) {
    goto LABEL_97;
  }
  uint64_t v180 = v178 + 3;
  if (v178 + 3 >= v286) {
    goto LABEL_131;
  }
  unint64_t v179 = *(void *)(v284 + 8 * v180);
  if (v179)
  {
LABEL_97:
    uint64_t v178 = v180;
    goto LABEL_98;
  }
  uint64_t v224 = v178 + 4;
  if (v178 + 4 >= v286) {
    goto LABEL_131;
  }
  unint64_t v179 = *(void *)(v284 + 8 * v224);
  v178 += 4;
  if (v179) {
    goto LABEL_98;
  }
  while (1)
  {
    uint64_t v178 = v224 + 1;
    if (__OFADD__(v224, 1)) {
      break;
    }
    if (v178 >= v286) {
      goto LABEL_131;
    }
    unint64_t v179 = *(void *)(v284 + 8 * v178);
    ++v224;
    if (v179) {
      goto LABEL_98;
    }
  }
  __break(1u);
LABEL_147:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_148:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

void sub_10051D534(char *a1, uint64_t a2, unint64_t *a3, uint64_t a4, void *a5, uint64_t *a6, void *a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v98 = a7;
  uint64_t v94 = a8;
  unint64_t v95 = a6;
  id v91 = a5;
  uint64_t v97 = a4;
  uint64_t v88 = a3;
  uint64_t v12 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v84 = *(void *)(v12 - 8);
  uint64_t v85 = v12;
  __chkstk_darwin(v12);
  uint64_t v96 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909EA0);
  __chkstk_darwin(v14 - 8);
  uint64_t v90 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v92 = v16;
  uint64_t v93 = v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  id v87 = (char *)&v80 - v21;
  uint64_t v22 = type metadata accessor for RDSavedReminder();
  uint64_t v89 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v80 - v26;
  type metadata accessor for REMCDSavedReminder();
  uint64_t v28 = a1;
  uint64_t v29 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
  uint64_t v30 = v99;
  sub_100547CFC(v29, a2);

  if (!v30)
  {
    uint64_t v80 = v24;
    uint64_t v81 = v22;
    uint64_t v86 = a2;
    uint64_t v99 = 0;
    uint64_t v82 = v19;
    id v83 = v27;
    uint64_t v31 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
    id v32 = [v31 uuid];

    uint64_t v33 = v87;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = v88;
    unint64_t v35 = *v88;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v34 = v35;
    uint64_t v37 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v35 = sub_100309EC8(0, *(void *)(v35 + 16) + 1, 1, v35);
      *uint64_t v34 = v35;
    }
    uint64_t v38 = v93;
    uint64_t v39 = (uint64_t)v83;
    unint64_t v41 = *(void *)(v35 + 16);
    unint64_t v40 = *(void *)(v35 + 24);
    if (v41 >= v40 >> 1)
    {
      unint64_t v35 = sub_100309EC8(v40 > 1, v41 + 1, 1, v35);
      *uint64_t v34 = v35;
    }
    *(void *)(v35 + 16) = v41 + 1;
    uint64_t v42 = v92;
    (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v35+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v41, v33, v92);
    uint64_t v43 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
    uint64_t v44 = v38;
    id v45 = [v43 uuid];

    uint64_t v46 = (uint64_t)v82;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v47 = (uint64_t)v80;
    sub_1000D57B8(v39, (uint64_t)v80);
    uint64_t v48 = v39;
    uint64_t v49 = (char *)v91;
    uint64_t v50 = v90;
    sub_10014D020(v47, v49, (uint64_t)v90);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v89 + 56))(v50, 0, 1, v81);
    sub_10035DD58((uint64_t)v50, v46);
    uint64_t v51 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
    uint64_t v52 = v99;
    sub_10051E720(v51);
    uint64_t v99 = v52;
    if (v52)
    {
      sub_100452DFC(v48, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
    }
    else
    {
      uint64_t v54 = v53;
      uint64_t v55 = v44;
      uint64_t v90 = v49;

      uint64_t v56 = v42;
      if (v54)
      {
        uint64_t v57 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
        id v58 = [v57 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v59 = v95;
        char v60 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v101 = (void *)*v59;
        *uint64_t v59 = 0x8000000000000000;
        sub_1002C72A0(v54, v46, v60);
        *uint64_t v59 = (uint64_t)v101;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v46, v42);
      }
      if (__OFADD__(*v98, 1))
      {
        __break(1u);
      }
      else
      {
        uint64_t v61 = &selRef_stringFromDate_;
        ++*v98;
        uint64_t v88 = (unint64_t *)REMRemindersListDataView.ReminderLite.subtasks.getter();
        uint64_t v62 = v85;
        uint64_t v63 = v96;
        if (v88)
        {
          uint64_t v64 = v56;
          uint64_t v101 = _swiftEmptyArrayStorage;
          unint64_t v65 = v88[2];
          if (v65)
          {
            id v87 = v37;
            uint64_t v89 = a10;
            uint64_t v66 = v84 + 16;
            id v91 = *(id *)(v84 + 16);
            id v67 = (char *)v88
                + ((*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80));
            char v68 = (void (**)(char *, uint64_t))(v84 + 8);
            uint64_t v69 = *(void *)(v84 + 72);
            uint64_t v70 = v94;
            while (1)
            {
              uint64_t v71 = v66;
              ((void (*)(char *, char *, uint64_t))v91)(v63, v67, v62);
              uint64_t v72 = (uint64_t)v63;
              id v73 = v98;
              if (*v98 >= v70)
              {
                uint64_t v63 = (char *)v72;
              }
              else
              {
                uint64_t v75 = v99;
                sub_10051DCF0(v72, v86, (unint64_t *)&v101, v97, v90, v95, v73);
                uint64_t v99 = v75;
                if (v75)
                {
                  swift_bridgeObjectRelease();
                  sub_100452DFC((uint64_t)v83, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
                  (*v68)(v96, v62);
                  goto LABEL_24;
                }
                uint64_t v70 = v94;
                uint64_t v63 = v96;
              }
              (*v68)(v63, v62);
              v67 += v69;
              --v65;
              uint64_t v66 = v71;
              if (!v65)
              {
                swift_bridgeObjectRelease();
                unint64_t v76 = v101;
                uint64_t v64 = v92;
                uint64_t v46 = (uint64_t)v82;
                uint64_t v61 = &selRef_stringFromDate_;
                goto LABEL_22;
              }
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v76 = _swiftEmptyArrayStorage;
LABEL_22:
          uint64_t v77 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
          id v78 = [v77 v61[136]];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          swift_bridgeObjectRetain();
          char v79 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v100 = *a9;
          *a9 = 0x8000000000000000;
          sub_1002C7274((uint64_t)v76, v46, v79);
          *a9 = v100;
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v46, v64);
          sub_100452DFC((uint64_t)v83, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
LABEL_24:
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_100452DFC(v48, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
        }
      }
    }
  }
}

void sub_10051DCF0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, void *a5, uint64_t *a6, void *a7)
{
  uint64_t v55 = a6;
  uint64_t v56 = a7;
  id v61 = a5;
  uint64_t v63 = a4;
  uint64_t v64 = a3;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909EA0);
  __chkstk_darwin(v9 - 8);
  uint64_t v62 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v65 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v58 = (char *)&v51 - v14;
  uint64_t v15 = type metadata accessor for RDSavedReminder();
  uint64_t v57 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v51 - v19;
  type metadata accessor for REMCDSavedReminder();
  uint64_t v59 = a1;
  uint64_t v21 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
  uint64_t v22 = v66;
  sub_100547CFC(v21, a2);

  if (!v22)
  {
    uint64_t v52 = v17;
    uint64_t v53 = 0;
    uint64_t v23 = v57;
    uint64_t v54 = v15;
    uint64_t v66 = v12;
    uint64_t v24 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
    id v25 = [v24 uuid];

    uint64_t v26 = v58;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = v64;
    unint64_t v28 = *v64;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v27 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v28 = sub_100309EC8(0, *(void *)(v28 + 16) + 1, 1, v28);
      *uint64_t v27 = v28;
    }
    uint64_t v30 = v23;
    unint64_t v32 = *(void *)(v28 + 16);
    unint64_t v31 = *(void *)(v28 + 24);
    uint64_t v33 = v65;
    if (v32 >= v31 >> 1)
    {
      uint64_t v50 = sub_100309EC8(v31 > 1, v32 + 1, 1, v28);
      uint64_t v34 = v26;
      uint64_t v33 = v65;
      unint64_t v28 = v50;
      unint64_t *v64 = v50;
    }
    else
    {
      uint64_t v34 = v26;
    }
    *(void *)(v28 + 16) = v32 + 1;
    uint64_t v35 = v60;
    (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v28+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v32, v34, v60);
    uint64_t v36 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
    id v37 = [v36 uuid];

    uint64_t v38 = (uint64_t)v66;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v39 = (uint64_t)v52;
    sub_1000D57B8((uint64_t)v20, (uint64_t)v52);
    id v40 = v61;
    uint64_t v41 = v62;
    sub_10014D020(v39, v40, v62);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v41, 0, 1, v54);
    sub_10035DD58(v41, v38);
    uint64_t v42 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
    uint64_t v43 = v53;
    sub_10051E720(v42);
    if (v43)
    {
      sub_100452DFC((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
    }
    else
    {
      uint64_t v45 = v44;

      if (v45)
      {
        uint64_t v46 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
        id v47 = [v46 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = v55;
        char v49 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v67 = *v48;
        *uint64_t v48 = 0x8000000000000000;
        sub_1002C72A0(v45, v38, v49);
        *uint64_t v48 = v67;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v38, v35);
      }
      sub_100452DFC((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
      if (__OFADD__(*v56, 1)) {
        __break(1u);
      }
      else {
        ++*v56;
      }
    }
  }
}

uint64_t sub_10051E1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100919930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_10051E23C(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v51 = a2;
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_10091C460);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RDSavedURLAttachment();
  uint64_t v44 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v50 = (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v43 = (uint64_t)&v40 - v13;
  if (a1 >> 62) {
    goto LABEL_26;
  }
  uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v14; uint64_t v14 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v54 = v3;
    uint64_t v48 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56);
    unint64_t v49 = a1 & 0xC000000000000001;
    id v40 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v15 = _swiftEmptyArrayStorage;
    uint64_t v46 = v10;
    id v47 = (unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    uint64_t v16 = 4;
    unint64_t v41 = a1;
    while (1)
    {
      uint64_t v52 = v15;
      uint64_t v10 = v16 - 4;
      uint64_t v17 = v49 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v16);
      uint64_t v15 = v17;
      uint64_t v5 = v16 - 3;
      if (__OFADD__(v10, 1)) {
        break;
      }
      uint64_t v3 = v14;
      v53[3] = sub_1000963CC(0, (unint64_t *)&qword_10090E708);
      v53[4] = &off_1008C5F78;
      uint64_t v18 = v51;
      v53[0] = v51;
      uint64_t v19 = v15;
      id v20 = v18;
      uint64_t v21 = v54;
      id v22 = sub_10043AA64(v19, v53);
      uint64_t v54 = v21;
      if (v21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v15;
      }
      if (v23)
      {

        uint64_t v24 = 1;
        uint64_t v25 = v46;
      }
      else
      {
        id v26 = v22;
        id v27 = [v26 url];
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        id v28 = [v26 metadata];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v32 = v31;
        }
        else
        {

          uint64_t v30 = 0;
          unint64_t v32 = 0xF000000000000000;
        }
        (*v40)(v9, v45, v42);
        uint64_t v24 = 0;
        uint64_t v25 = v46;
        uint64_t v33 = (uint64_t *)&v9[*(int *)(v46 + 20)];
        *uint64_t v33 = v30;
        v33[1] = v32;
        a1 = v41;
      }
      (*v48)(v9, v24, 1, v25);

      if ((*v47)(v9, 1, v25) == 1)
      {
        sub_1000966BC((uint64_t)v9, &qword_10091C460);
        uint64_t v14 = v3;
        uint64_t v15 = v52;
      }
      else
      {
        uint64_t v34 = v43;
        sub_10051EB08((uint64_t)v9, v43);
        sub_10051EB08(v34, v50);
        unint64_t v35 = (unint64_t)v52;
        uint64_t v14 = v3;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v35 = sub_10030BD04(0, *(void *)(v35 + 16) + 1, 1, v35);
        }
        unint64_t v37 = *(void *)(v35 + 16);
        unint64_t v36 = *(void *)(v35 + 24);
        uint64_t v38 = v35;
        if (v37 >= v36 >> 1) {
          uint64_t v38 = sub_10030BD04(v36 > 1, v37 + 1, 1, v35);
        }
        *(void *)(v38 + 16) = v37 + 1;
        uint64_t v15 = (void *)v38;
        sub_10051EB08(v50, v38+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v37);
      }
      ++v16;
      if (v5 == v14)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_10051E720(void *a1)
{
  type metadata accessor for REMCDSavedAttachment();
  uint64_t v3 = sub_1005B2C20();
  id v4 = a1;
  uint64_t v5 = (void *)sub_1005B22E0(a1, 0x20u);
  id v6 = [objc_allocWithZone((Class)NSFetchRequest) init];
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v8 = [ObjCClassFromMetadata entity];
  [v6 setEntity:v8];

  [v6 setAffectedStores:0];
  [v6 setPredicate:v5];

  if (qword_1009079B8 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v6 setSortDescriptors:isa];

  sub_1001FFC40((uint64_t)v3);
  Class v10 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setPropertiesToFetch:v10];

  unint64_t v11 = NSManagedObjectContext.fetch<A>(_:)();
  swift_bridgeObjectRelease();

  if (!v1)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v22) {
        goto LABEL_18;
      }
    }
    else if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_18;
    }
    if ((v11 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      id v12 = *(id *)(v11 + 32);
    }
    id v13 = [v12 storeControllerManagedObjectContext];
    if (v13)
    {
      uint64_t v14 = v13;
      id v15 = [v13 storeController];
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = sub_10051E23C(v11, v16);
        swift_bridgeObjectRelease();

        if (v17[2]) {
          return;
        }
LABEL_18:
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
      id v20 = self;
      NSString v21 = String._bridgeToObjectiveC()();
      [v20 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v21];

      swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v18 = self;
      NSString v19 = String._bridgeToObjectiveC()();
      [v18 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v19];

      swift_willThrow();
      uint64_t v14 = v12;
    }
  }
}

uint64_t sub_10051EB08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDSavedURLAttachment();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10051EB6C(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)NSFetchRequest) init];
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v4 = [(id)swift_getObjCClassFromMetadata() entity];
  [v3 setEntity:v4];

  [v3 setAffectedStores:0];
  [v3 setPredicate:a2];
  [v3 setResultType:2];
  uint64_t v5 = sub_1000963CC(0, &qword_10090B098);
  swift_getKeyPath();
  id v6 = NSExpression.init<A, B>(forKeyPath:)();
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100776E40;
  *(void *)(v7 + 56) = v5;
  *(void *)(v7 + 32) = v6;
  id v41 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [self expressionForFunction:v8 arguments:isa];

  id v11 = [objc_allocWithZone((Class)NSExpressionDescription) init];
  [v11 setExpression:v10];
  id v12 = v11;
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 setName:v13];

  [v12 setExpressionResultType:300];
  [v3 setReturnsObjectsAsFaults:0];
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100776E40;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 32) = 0x6574656C706D6F63;
  *(void *)(v14 + 40) = 0xE900000000000064;
  Class v15 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 setPropertiesToGroupBy:v15];

  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100776E80;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 32) = 0x6574656C706D6F63;
  *(void *)(v16 + 40) = 0xE900000000000064;
  uint64_t v17 = v3;
  *(void *)(v16 + 88) = sub_1000963CC(0, (unint64_t *)&unk_10090B0A0);
  *(void *)(v16 + 64) = v12;
  id v18 = v12;
  Class v19 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 setPropertiesToFetch:v19];

  [v3 setResultType:2];
  sub_1000963CC(0, &qword_10090E4F0);
  unint64_t v20 = NSManagedObjectContext.fetch<A>(_:)();
  if (v42)
  {

    return;
  }
  unint64_t v21 = v20;
  unint64_t v37 = v18;
  id v38 = v10;
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  char v23 = v41;
  uint64_t v24 = v38;
  if (!v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  if (v22 < 1)
  {
LABEL_38:
    __break(1u);
    return;
  }
  unint64_t v36 = v17;
  uint64_t v40 = 0;
  uint64_t v39 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = v21 & 0xC000000000000001;
  while (1)
  {
    if (v26) {
      id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v27 = *(id *)(v21 + 8 * v25 + 32);
    }
    id v28 = v27;
    *(void *)&long long v43 = 0x6574656C706D6F63;
    *((void *)&v43 + 1) = 0xE900000000000064;
    id v29 = [v27 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v29)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v43 = 0u;
      long long v44 = 0u;
    }
    sub_100096408((uint64_t)&v43, (uint64_t)v45, &qword_100908190);
    if (!v46)
    {

      sub_1000966BC((uint64_t)v45, &qword_100908190);
      goto LABEL_9;
    }
    sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
    if ((swift_dynamicCast() & 1) == 0)
    {

      goto LABEL_9;
    }
    uint64_t v30 = v47;
    *(void *)&long long v43 = 0x746E756F63;
    *((void *)&v43 + 1) = 0xE500000000000000;
    id v31 = [v28 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v31)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v43 = 0u;
      long long v44 = 0u;
    }
    sub_100096408((uint64_t)&v43, (uint64_t)v45, &qword_100908190);
    if (!v46)
    {

      sub_1000966BC((uint64_t)v45, &qword_100908190);
      unint64_t v26 = v21 & 0xC000000000000001;
      goto LABEL_9;
    }
    if ((swift_dynamicCast() & 1) == 0)
    {

      unint64_t v26 = v21 & 0xC000000000000001;
      goto LABEL_9;
    }
    unint64_t v32 = v47;
    unsigned int v33 = [v30 BOOLValue];
    id v34 = [v32 integerValue];

    if (v33)
    {
      BOOL v35 = __OFADD__(v39, v34);
      v39 += (uint64_t)v34;
      unint64_t v26 = v21 & 0xC000000000000001;
      if (v35)
      {
        __break(1u);
        goto LABEL_38;
      }
      goto LABEL_9;
    }
    BOOL v35 = __OFADD__(v40, v34);
    v40 += (uint64_t)v34;
    unint64_t v26 = v21 & 0xC000000000000001;
    if (v35) {
      break;
    }
LABEL_9:
    if (v22 == ++v25) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_33:
  swift_bridgeObjectRelease();
  uint64_t v17 = v36;
  char v23 = v41;
  uint64_t v24 = v38;
LABEL_35:
  REMRemindersListDataView.CountByCompleted.init(completed:incomplete:)();
}

void sub_10051F2BC(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v139 = a3;
  uint64_t v147 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v7 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  char v146 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    Swift::Int v4 = (Swift::Int)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
      goto LABEL_144;
    }
    goto LABEL_132;
  }
  uint64_t v169 = &_swiftEmptySetSingleton;
  Class v167 = &_swiftEmptySetSingleton;
  id v168 = &_swiftEmptySetSingleton;
  uint64_t v165 = &_swiftEmptySetSingleton;
  uint64_t v166 = &_swiftEmptySetSingleton;
  id v9 = a1;
  unint64_t v10 = sub_1005A52C0(v9, (unint64_t)_swiftEmptyArrayStorage);
  if (v3)
  {
LABEL_148:

    return;
  }
  unint64_t v12 = v10;
  uint64_t v155 = a2;
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_5;
    }
    goto LABEL_147;
  }
  uint64_t v13 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v13)
  {
LABEL_147:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    REMRemindersListDataView.Diff.init(updatedReminderObjectIDs:insertedReminderObjectIDs:updatedListObjectIDs:updatedSectionObjectIDs:newReminderMembershipsViaAutomation:)();
    swift_bridgeObjectRelease();
    goto LABEL_148;
  }
LABEL_5:
  unint64_t v145 = v12 & 0xC000000000000001;
  uint64_t v134 = v12 & 0xFFFFFFFFFFFFFF8;
  unint64_t v133 = v12 + 32;
  uint64_t v141 = RDGroceryOperationAuthor;
  uint64_t v131 = (void (**)(char *, uint64_t))(v7 + 8);
  unint64_t v14 = 0;
  *(void *)&long long v11 = 138412290;
  long long v151 = v11;
  Class v15 = &selRef_ckServerChangeTokens;
  unint64_t v143 = (char *)&type metadata for Any + 8;
  uint64_t v138 = 0;
  id v137 = v9;
  unint64_t v136 = v12;
  uint64_t v135 = v13;
  while (1)
  {
    while (1)
    {
      if (v145)
      {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v17 = __OFADD__(v14, 1);
        unint64_t v18 = v14 + 1;
        if (v17) {
          goto LABEL_142;
        }
      }
      else
      {
        if (v14 >= *(void *)(v134 + 16)) {
          goto LABEL_143;
        }
        id v16 = *(id *)(v133 + 8 * v14);
        BOOL v17 = __OFADD__(v14, 1);
        unint64_t v18 = v14 + 1;
        if (v17) {
          goto LABEL_142;
        }
      }
      unint64_t v149 = v18;
      Class v19 = v16;
      id v20 = [v16 changes:v131];
      if (v20) {
        break;
      }
      if (qword_100907788 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_10008E2DC(v29, (uint64_t)qword_10091C468);
      id v30 = v19;
      id v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        Swift::Int v4 = swift_slowAlloc();
        unsigned int v33 = (void *)swift_slowAlloc();
        *(_DWORD *)Swift::Int v4 = v151;
        *(void *)(v4 + 4) = v30;
        *unsigned int v33 = v30;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Skipping transaction because it contains no changes {transaction: %@}", (uint8_t *)v4, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        Class v15 = &selRef_ckServerChangeTokens;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
LABEL_6:
      unint64_t v14 = v149;
      if (v149 == v13) {
        goto LABEL_147;
      }
    }
    unint64_t v21 = v20;
    sub_1000963CC(0, &qword_10090FD90);
    unint64_t v154 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v148 = v19;
    id v22 = [v19 author];
    if (!v22)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      goto LABEL_29;
    }
    char v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (!v26) {
      goto LABEL_29;
    }
    if (v24 == v27 && v26 == v28)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0) {
        goto LABEL_30;
      }
    }
    id v35 = [v148 contextName];
    if (v35)
    {
      unint64_t v36 = v35;
      Swift::Int v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v4 = v38;

      sub_10031DC68((Swift::Int *)&v163, v37, v4);
LABEL_29:
      swift_bridgeObjectRelease();
    }
LABEL_30:
    if (v154 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v39 = *(void *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v14 = v149;
    if (v39) {
      break;
    }

    swift_bridgeObjectRelease();
    if (v14 == v13) {
      goto LABEL_147;
    }
  }
  uint64_t v140 = sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  uint64_t v40 = sub_1000963CC(0, (unint64_t *)&unk_100917C20);
  unint64_t v41 = 0;
  unint64_t v159 = v154 & 0xC000000000000001;
  uint64_t v153 = v154 & 0xFFFFFFFFFFFFFF8;
  unint64_t v152 = v154 + 32;
  uint64_t v42 = &stru_1008F6000;
  uint64_t v156 = v40;
  uint64_t v157 = v39;
  while (1)
  {
    if (v159)
    {
      id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v41 >= *(void *)(v153 + 16)) {
        goto LABEL_141;
      }
      id v43 = *(id *)(v152 + 8 * v41);
    }
    long long v44 = v43;
    BOOL v17 = __OFADD__(v41++, 1);
    if (v17) {
      break;
    }
    id v45 = [v43 v42[165].types];
    Swift::Int v4 = (Swift::Int)[v45 v15[228]];
    uint64_t v46 = v15;
    id v47 = [ObjCClassFromMetadata v15[228]];
    char v48 = static NSObject.== infix(_:_:)();

    if (v48)
    {

      id v49 = sub_1005A2E48(v45);
      if (!v49) {
        goto LABEL_64;
      }
      Swift::Int v4 = (Swift::Int)v49;
      self;
      uint64_t v50 = swift_dynamicCastObjCClass();
      if (v50)
      {
        uint64_t v51 = (void *)v50;
        id v52 = (id)v4;
        id v53 = [v51 remObjectID];
        if (v53)
        {
          Swift::Int v4 = (Swift::Int)v53;
          if ((unint64_t)[v44 changeType] <= 1)
          {
            uint64_t v118 = (void *)REMObjectID.codable.getter();
            sub_10031DE8C(&v163, v118);

LABEL_95:
            goto LABEL_105;
          }
        }
        else
        {
          if (qword_100907788 != -1) {
            swift_once();
          }
          uint64_t v90 = type metadata accessor for Logger();
          sub_10008E2DC(v90, (uint64_t)qword_10091C468);
          id v91 = v45;
          id v83 = Logger.logObject.getter();
          os_log_type_t v92 = static os_log_type_t.error.getter();
          Swift::Int v4 = v92;
          if (os_log_type_enabled(v83, v92))
          {
            uint64_t v93 = swift_slowAlloc();
            uint64_t v94 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v93 = v151;
            *(void *)(v93 + 4) = v91;
            *uint64_t v94 = v91;

            unint64_t v95 = v83;
            os_log_type_t v96 = v4;
            uint64_t v97 = "Failed to get remObjectID from REMCDReminder {objectID: %@}";
            goto LABEL_101;
          }
        }
      }
      else
      {
        if (qword_100907788 != -1) {
          swift_once();
        }
        uint64_t v81 = type metadata accessor for Logger();
        sub_10008E2DC(v81, (uint64_t)qword_10091C468);
        id v82 = v45;
        id v83 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v83, v84))
        {
          uint64_t v85 = swift_slowAlloc();
          uint64_t v86 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v85 = v151;
          *(void *)(v85 + 4) = v82;
          *uint64_t v86 = v82;

          id v87 = v83;
          os_log_type_t v88 = v84;
          uint64_t v89 = "Failed to cast managedObject to REMCDReminder {objectID: %@}";
          goto LABEL_87;
        }
      }
    }
    else
    {
      sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
      uint64_t v54 = swift_getObjCClassFromMetadata();
      Swift::Int v4 = (Swift::Int)(id)v4;
      id v55 = [(id)v54 v46[228]];
      LOBYTE(v54) = static NSObject.== infix(_:_:)();

      if ((v54 & 1) == 0)
      {
        type metadata accessor for REMCDListSection();
        uint64_t v73 = swift_getObjCClassFromMetadata();
        Swift::Int v4 = (Swift::Int)(id)v4;
        id v74 = [(id)v73 v46[228]];
        LOBYTE(v73) = static NSObject.== infix(_:_:)();

        if (v73)
        {
        }
        else
        {
          type metadata accessor for REMCDSmartListSection();
          id v75 = [(id)swift_getObjCClassFromMetadata() v46[228]];
          char v76 = static NSObject.== infix(_:_:)();

          if ((v76 & 1) == 0)
          {
            if (qword_100907788 != -1) {
              swift_once();
            }
            uint64_t v98 = type metadata accessor for Logger();
            sub_10008E2DC(v98, (uint64_t)qword_10091C468);
            id v99 = v45;
            id v83 = Logger.logObject.getter();
            os_log_type_t v100 = static os_log_type_t.debug.getter();
            Swift::Int v4 = v100;
            if (os_log_type_enabled(v83, v100))
            {
              uint64_t v101 = swift_slowAlloc();
              uint64_t v102 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v101 = v151;
              *(void *)(v101 + 4) = v99;
              *uint64_t v102 = v99;
              _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v4, "Skipping change unhandled type {objectID: %@}", (uint8_t *)v101, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              uint64_t v42 = &stru_1008F6000;
              swift_slowDealloc();
              swift_slowDealloc();

              goto LABEL_103;
            }

            goto LABEL_104;
          }
        }
        id v77 = sub_1005A2E48(v45);
        if (v77)
        {
          Swift::Int v4 = (Swift::Int)v77;
          type metadata accessor for REMCDBaseSection();
          uint64_t v78 = swift_dynamicCastClass();
          if (!v78)
          {
            if (qword_100907788 != -1) {
              swift_once();
            }
            uint64_t v108 = type metadata accessor for Logger();
            sub_10008E2DC(v108, (uint64_t)qword_10091C468);
            id v82 = v45;
            id v83 = Logger.logObject.getter();
            os_log_type_t v109 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v83, v109))
            {
              uint64_t v85 = swift_slowAlloc();
              id v110 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v85 = v151;
              *(void *)(v85 + 4) = v82;
              *id v110 = v82;
              id v87 = v83;
              os_log_type_t v88 = v109;
              uint64_t v89 = "Failed to cast managedObject to REMCDBaseSection {objectID: %@}";
LABEL_87:
              _os_log_impl((void *)&_mh_execute_header, v87, v88, v89, (uint8_t *)v85, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v42 = &stru_1008F6000;
              swift_slowDealloc();

              goto LABEL_103;
            }

LABEL_104:
            goto LABEL_105;
          }
          char v79 = (void *)v78;
          id v52 = (id)v4;
          id v80 = [v79 remObjectID];
          if (!v80)
          {
            if (qword_100907788 != -1) {
              swift_once();
            }
            uint64_t v119 = type metadata accessor for Logger();
            sub_10008E2DC(v119, (uint64_t)qword_10091C468);
            id v91 = v45;
            id v83 = Logger.logObject.getter();
            os_log_type_t v120 = static os_log_type_t.error.getter();
            Swift::Int v4 = v120;
            if (os_log_type_enabled(v83, v120))
            {
              uint64_t v93 = swift_slowAlloc();
              unint64_t v121 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v93 = v151;
              *(void *)(v93 + 4) = v91;
              *unint64_t v121 = v91;
              unint64_t v95 = v83;
              os_log_type_t v96 = v4;
              uint64_t v97 = "Failed to get remObjectID from REMCDBaseSection {objectID: %@}";
LABEL_101:
              _os_log_impl((void *)&_mh_execute_header, v95, v96, v97, (uint8_t *)v93, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v42 = &stru_1008F6000;
              swift_slowDealloc();

LABEL_102:
LABEL_103:

              goto LABEL_104;
            }

LABEL_120:
            goto LABEL_104;
          }
          Swift::Int v4 = (Swift::Int)v80;
          if ([v44 changeType] == (id)1)
          {
            uint64_t v127 = (void *)REMObjectID.codable.getter();
            sub_10031DE8C(&v163, v127);

            goto LABEL_95;
          }
        }
LABEL_64:

        goto LABEL_105;
      }

      id v56 = sub_1005A2E48(v45);
      if (!v56) {
        goto LABEL_64;
      }
      id v52 = v56;
      self;
      uint64_t v57 = swift_dynamicCastObjCClass();
      if (!v57)
      {
        if (qword_100907788 != -1) {
          swift_once();
        }
        uint64_t v103 = type metadata accessor for Logger();
        sub_10008E2DC(v103, (uint64_t)qword_10091C468);
        id v104 = v45;
        id v83 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.fault.getter();
        Swift::Int v4 = v105;
        if (os_log_type_enabled(v83, v105))
        {
          uint64_t v106 = swift_slowAlloc();
          uint64_t v107 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v106 = v151;
          *(void *)(v106 + 4) = v104;
          *uint64_t v107 = v104;
          _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v4, "Failed to cast managedObject to REMCDList {objectID: %@}", (uint8_t *)v106, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v42 = &stru_1008F6000;
          swift_slowDealloc();

          goto LABEL_102;
        }

        goto LABEL_120;
      }
      Swift::Int v4 = v57;
      uint64_t v150 = v52;
      id v58 = [(id)v4 remObjectID];
      if (v58)
      {
        uint64_t v59 = v58;
        id v60 = [v44 updatedProperties];
        Class v15 = &selRef_ckServerChangeTokens;
        if (v60)
        {
          id v61 = v60;
          unint64_t v144 = v59;
          sub_1000963CC(0, (unint64_t *)&unk_100916ED0);
          sub_1000ED098((unint64_t *)&qword_100919298, (unint64_t *)&unk_100916ED0);
          uint64_t v62 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          id v63 = [v45 entity];
          id v64 = [v63 relationshipsByName];

          sub_1000963CC(0, &qword_100921AA0);
          uint64_t v65 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (!*(void *)(v65 + 16))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            Class v15 = &selRef_ckServerChangeTokens;
            goto LABEL_118;
          }
          unint64_t v66 = sub_1001806F8(0x73656572616873, 0xE700000000000000);
          Class v15 = &selRef_ckServerChangeTokens;
          uint64_t v59 = v144;
          if (v67)
          {
            id v68 = *(id *)(*(void *)(v65 + 56) + 8 * v66);
            swift_bridgeObjectRelease();
            id v142 = v68;
            char v69 = sub_1001CBF80(v68, v62);
            swift_bridgeObjectRelease();
            if (v69)
            {
              id v70 = [(id)v4 reminders];
              if (v70)
              {
                id v71 = v70;
                NSOrderedSet.makeIterator()();
                id v132 = v71;

                Swift::Int v4 = sub_10052C300((unint64_t *)&qword_100910238, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
                Class v15 = &selRef_ckServerChangeTokens;
                dispatch thunk of IteratorProtocol.next()();
                id v72 = v142;
                while (v164)
                {
                  sub_10009A1A0(&v163, &v162);
                  sub_10009A1B0((uint64_t)&v162, (uint64_t)&v161);
                  if (swift_dynamicCast())
                  {
                    id v125 = v160;
                    id v126 = [v160 remObjectID];
                    if (v126)
                    {
                      unint64_t v122 = v126;
                      id v123 = (void *)REMObjectID.codable.getter();

                      id v124 = v123;
                      sub_10031DE8C(&v161, v124);

                      Class v15 = &selRef_ckServerChangeTokens;
                    }
                    else
                    {
                    }
                    id v72 = v142;
                  }
                  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v162);
                  dispatch thunk of IteratorProtocol.next()();
                }
                (*v131)(v146, v147);
              }
              else
              {
              }
LABEL_118:
              uint64_t v59 = v144;
            }
            else
            {
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        if ([v44 changeType] == (id)1)
        {
          unint64_t v128 = (void *)REMObjectID.codable.getter();
          sub_10031DE8C(&v163, v128);
        }
        uint64_t v129 = (void *)REMObjectID.codable.getter();
        sub_10031DE8C(&v163, v129);

        uint64_t v130 = v150;
        uint64_t v42 = &stru_1008F6000;
        goto LABEL_106;
      }
      if (qword_100907788 != -1) {
        swift_once();
      }
      uint64_t v111 = type metadata accessor for Logger();
      sub_10008E2DC(v111, (uint64_t)qword_10091C468);
      id v112 = v45;
      uint64_t v113 = Logger.logObject.getter();
      os_log_type_t v114 = static os_log_type_t.error.getter();
      Swift::Int v4 = v114;
      if (os_log_type_enabled(v113, v114))
      {
        uint64_t v115 = swift_slowAlloc();
        uint64_t v116 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v115 = v151;
        *(void *)(v115 + 4) = v112;
        *uint64_t v116 = v112;
        _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v4, "Failed to get remObjectID from REMCDList {objectID: %@}", (uint8_t *)v115, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        Class v117 = v150;
      }
      else
      {

        uint64_t v113 = v150;
      }

      uint64_t v42 = &stru_1008F6000;
    }
LABEL_105:
    Class v15 = &selRef_ckServerChangeTokens;
LABEL_106:
    if (v41 == v157)
    {

      swift_bridgeObjectRelease();
      id v9 = v137;
      uint64_t v13 = v135;
      goto LABEL_6;
    }
  }
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  if (_CocoaArrayWrapper.endIndex.getter())
  {
    sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
    goto LABEL_150;
  }
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0) {
    goto LABEL_132;
  }
LABEL_150:
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_132:
    if ((v4 & 0xC000000000000000) != 0) {
      goto LABEL_133;
    }
    goto LABEL_135;
  }
  sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
LABEL_133:
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_135:
    if ((v4 & 0xC000000000000000) != 0) {
      goto LABEL_136;
    }
    goto LABEL_139;
  }
  sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
LABEL_136:
  if (_CocoaArrayWrapper.endIndex.getter()) {
    sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
  }
LABEL_139:
  REMRemindersListDataView.Diff.init(updatedReminderObjectIDs:insertedReminderObjectIDs:updatedListObjectIDs:updatedSectionObjectIDs:newReminderMembershipsViaAutomation:)();
}

id sub_100520998(Class isa, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)NSFetchRequest) init];
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v5 = [(id)swift_getObjCClassFromMetadata() entity];
  [v4 setEntity:v5];

  if (isa)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  [v4 setAffectedStores:isa];

  [v4 setPredicate:a2];
  [v4 setResultType:2];
  return v4;
}

id sub_100520A9C(Class isa, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)NSFetchRequest) init];
  type metadata accessor for REMCDManualSortHint();
  id v5 = [(id)swift_getObjCClassFromMetadata() entity];
  [v4 setEntity:v5];

  if (isa)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  [v4 setAffectedStores:isa];

  [v4 setPredicate:a2];
  [v4 setResultType:2];
  return v4;
}

void *sub_100520B90(unint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  id v45 = a2;
  uint64_t v46 = a3;
  uint64_t v6 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v44 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v52 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v43 = (char *)&v41 - v12;
  if (a1 >> 62) {
    goto LABEL_33;
  }
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v13; uint64_t v13 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v51 = a1 & 0xC000000000000001;
    uint64_t v41 = v4;
    uint64_t v42 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
    id v47 = (void (**)(char *, char *, uint64_t))(v44 + 32);
    char v48 = (uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
    unint64_t v14 = _swiftEmptyArrayStorage;
    uint64_t v15 = 4;
    uint64_t v49 = v13;
    unint64_t v50 = a1;
    while (1)
    {
      id v53 = v14;
      uint64_t v16 = v9;
      uint64_t v9 = (uint64_t)v8;
      uint64_t v4 = v15 - 4;
      BOOL v17 = v51
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (char *)*(id *)(a1 + 8 * v15);
      uint64_t v8 = v17;
      uint64_t v18 = v15 - 3;
      if (__OFADD__(v4, 1)) {
        break;
      }
      id v19 = [v17 remObjectID];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = *v45;
        if (*(void *)(*v45 + 16))
        {
          id v22 = v19;
          unint64_t v23 = sub_100306FE8((uint64_t)v22);
          if (v24) {
            uint64_t v25 = *(void *)(*(void *)(v21 + 56) + 8 * v23);
          }
          else {
            uint64_t v25 = 0;
          }
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v28 = *v46;
        if (*(void *)(*v46 + 16))
        {
          id v29 = v20;
          unint64_t v30 = sub_100306FE8((uint64_t)v29);
          if (v31)
          {
            unint64_t v32 = *(void *)(*(void *)(v28 + 56) + 8 * v30);
            swift_bridgeObjectRetain();
          }
          else
          {
            unint64_t v32 = 0;
          }
        }
        else
        {
          unint64_t v32 = 0;
        }
        unsigned int v33 = v8;
        uint64_t v8 = (char *)v9;
        sub_100521784(v33, v25, v32, v9);

        uint64_t v9 = v16;
      }
      else
      {
        uint64_t v26 = (char *)v9;
        uint64_t v27 = v9;
        uint64_t v9 = v16;
        (*v42)(v27, 1, 1, v16);
        id v20 = v8;
        uint64_t v8 = v26;
      }

      int v34 = (*v48)(v8, 1, v9);
      unint64_t v14 = v53;
      if (v34 == 1)
      {
        sub_1000966BC((uint64_t)v8, &qword_10090FD78);
        a1 = v50;
      }
      else
      {
        id v35 = *v47;
        unint64_t v36 = v43;
        (*v47)(v43, v8, v9);
        v35(v52, v36, v9);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        a1 = v50;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          unint64_t v14 = (void *)sub_1003091E4(0, v14[2] + 1, 1, (unint64_t)v14);
        }
        unint64_t v39 = v14[2];
        unint64_t v38 = v14[3];
        if (v39 >= v38 >> 1) {
          unint64_t v14 = (void *)sub_1003091E4(v38 > 1, v39 + 1, 1, (unint64_t)v14);
        }
        void v14[2] = v39 + 1;
        v35((char *)v14+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v39, v52, v9);
      }
      ++v15;
      if (v18 == v49)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100520FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a1, v6, v8);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v11 == enum case for REMRemindersListDataView.SortingStyle.displayDate(_:)
    || v11 == enum case for REMRemindersListDataView.SortingStyle.priority(_:)
    || v11 == enum case for REMRemindersListDataView.SortingStyle.creationDate(_:)
    || v11 == enum case for REMRemindersListDataView.SortingStyle.title(_:))
  {
    sub_10052C290(a2, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    uint64_t v12 = type metadata accessor for REMRemindersListDataView.SortingDirection();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a3, v10, v12);
    _s9UtilitiesO12SortingStyleOMa();
    return swift_storeEnumTagMultiPayload();
  }
  if (v11 == enum case for REMRemindersListDataView.SortingStyle.default(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    return sub_100431BD4(a2, a3);
  }
  if (v11 == enum case for REMRemindersListDataView.SortingStyle.manual(_:))
  {
    sub_10052C290(a2, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    _s9UtilitiesO12SortingStyleOMa();
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

char *sub_100521450(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, NSObject *a6)
{
  uint64_t v13 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v27 - v17;
  sub_100521C40((uint64_t)v15, a1, a6, a3);
  if (!v6)
  {
    sub_100431BD4((uint64_t)v15, (uint64_t)v18);
    id v19 = [a1 persistentStoreCoordinator];
    id v20 = v19;
    if (v19)
    {
      id v29 = a5;
      id v21 = [v19 persistentStores];

      sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
      unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      char v31 = &_swiftEmptySetSingleton;
      if ((sub_1005E8824(a6, 1) & 1) == 0)
      {
        id v22 = [self localAccountID];
        id v23 = [a1 persistentStoreOfAccountWithAccountID:v22];

        if (v23)
        {
          sub_10031EBB4(&v30, v23);
        }
      }
      if ((sub_1005E8824(a6, 5) & 1) == 0)
      {
        id v24 = [self localInternalAccountID];
        id v25 = [a1 persistentStoreOfAccountWithAccountID:v24];

        if (v25)
        {
          sub_10031EBB4(&v30, v25);
        }
      }
      id v20 = sub_10052ABEC(v28, &v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a5 = v29;
    }
    a5 = (char *)sub_100522260((uint64_t)a1, a2, (uint64_t)v18, 0, 0, a4, a5, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v20, 0);
    swift_bridgeObjectRelease();
    sub_10052C290((uint64_t)v18, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    swift_bridgeObjectRelease();
  }
  return a5;
}

uint64_t sub_100521784@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v54 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v53 = (char *)&v42 - v15;
  __chkstk_darwin(v16);
  id v52 = (char *)&v42 - v17;
  *(void *)&double v19 = __chkstk_darwin(v18).n128_u64[0];
  unint64_t v51 = (char *)&v42 - v20;
  id v21 = [a1 remObjectID:v19];
  if (v21)
  {
    id v22 = v21;
    if (a3)
    {
      id v45 = a1;
      id v43 = v21;
      if (a3 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v23 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      uint64_t result = v54;
      uint64_t v46 = a4;
      uint64_t v44 = a2;
      if (v23)
      {
        if (v23 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v25 = 0;
        unint64_t v26 = a3 & 0xC000000000000001;
        uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
        unint64_t v28 = (void (**)(char *, char *, uint64_t))(v54 + 32);
        id v55 = _swiftEmptyArrayStorage;
        uint64_t v49 = v13;
        unint64_t v50 = a3;
        unint64_t v47 = a3 & 0xC000000000000001;
        uint64_t v48 = v23;
        do
        {
          if (v26) {
            id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v29 = *(id *)(a3 + 8 * v25 + 32);
          }
          sub_100521784(v29, 0, 0);
          if ((*v27)(v10, 1, v11))
          {
            sub_1000966BC((uint64_t)v10, &qword_10090FD78);
          }
          else
          {
            id v30 = *v28;
            char v31 = v53;
            (*v28)(v53, v10, v11);
            unint64_t v32 = v52;
            v30(v52, v31, v11);
            unsigned int v33 = v51;
            v30(v51, v32, v11);
            v30(v13, v33, v11);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              unint64_t v34 = (unint64_t)v55;
            }
            else {
              unint64_t v34 = sub_1003091E4(0, v55[2] + 1, 1, (unint64_t)v55);
            }
            unint64_t v36 = *(void *)(v34 + 16);
            unint64_t v35 = *(void *)(v34 + 24);
            uint64_t v37 = v54;
            uint64_t v23 = v48;
            if (v36 >= v35 >> 1)
            {
              unint64_t v34 = sub_1003091E4(v35 > 1, v36 + 1, 1, v34);
              uint64_t v37 = v54;
            }
            *(void *)(v34 + 16) = v36 + 1;
            unint64_t v38 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
            id v55 = (void *)v34;
            unint64_t v39 = v34 + v38 + *(void *)(v37 + 72) * v36;
            uint64_t v13 = v49;
            v30((char *)v39, v49, v11);
            a3 = v50;
            unint64_t v26 = v47;
          }
          ++v25;
        }
        while (v23 != v25);
      }
      else
      {
        id v55 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease_n();
      a1 = v45;
      a4 = v46;
      id v22 = v43;
      uint64_t v41 = v55;
    }
    else
    {
      uint64_t v41 = 0;
    }
    REMObjectID.codable.getter();
    [a1 completed];
    if (v41)
    {
      if (!v41[2]) {
        swift_bridgeObjectRelease();
      }
    }
    REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtaskCount:subtasks:)();

    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(a4, 0, 1, v11);
  }
  else
  {

    swift_bridgeObjectRelease();
    uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56);
    return v40(a4, 1, 1, v11);
  }
}

NSObject *sub_100521C40(uint64_t a1, void *a2, NSObject *a3, uint64_t a4)
{
  uint64_t v9 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v9);
  uint64_t v54 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10052C360(a4, a1, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  if (qword_100907B18 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100942620;
  swift_retain();
  uint64_t v12 = sub_10064C1FC(a3, 0, a2, v11);
  if (v4)
  {
    swift_release();
    swift_getErrorValue();
    char v13 = Error.isREMError(withErrorCode:)();
    uint64_t v53 = a4;
    if (v13)
    {
      if (qword_100907788 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10008E2DC(v14, (uint64_t)qword_10091C468);
      uint64_t v15 = a3;
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v49 = a2;
        uint64_t v18 = swift_slowAlloc();
        unint64_t v51 = a3;
        double v19 = (uint8_t *)v18;
        v56[0] = swift_slowAlloc();
        uint64_t v52 = v9;
        *(_DWORD *)double v19 = 136446210;
        unint64_t v50 = (uint64_t *)a1;
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v55 = sub_1000C51B8(v20, v21, v56);
        a1 = (uint64_t)v50;
        uint64_t v9 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        a2 = v49;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "REMCDSmartList for pre-defined smart list type not found {pre-defined smart list type: %{public}s}", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
      }
      id v22 = 0;
    }
    else
    {
      if (qword_100907788 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E2DC(v23, (uint64_t)qword_10091C468);
      unint64_t v51 = a3;
      id v24 = a3;
      swift_errorRetain();
      uint64_t v25 = v24;
      swift_errorRetain();
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v52 = v9;
        uint64_t v29 = v28;
        unint64_t v50 = (uint64_t *)swift_slowAlloc();
        v56[0] = (uint64_t)v50;
        *(_DWORD *)uint64_t v29 = 136446466;
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v55 = sub_1000C51B8(v30, v31, v56);
        uint64_t v49 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 12) = 2082;
        swift_getErrorValue();
        uint64_t v32 = Error.rem_errorDescription.getter();
        uint64_t v55 = sub_1000C51B8(v32, v33, v56);
        a2 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to fetch REMCDSmartList for pre-defined smart list type {smart list type: %{public}s, error: %{public}s}", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v9 = v52;
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
      }
      id v22 = 0;
    }
    a4 = v53;
  }
  else
  {
    id v22 = v12;
    swift_release();
  }
  if (REMSmartListType.hasPredefinedManualOrderingObjectID.getter())
  {
    uint64_t v34 = a4;
    uint64_t v35 = v54;
    sub_10052C360(v34, v54, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_10052C290(v35, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    if (EnumCaseMultiPayload == 5)
    {
      uint64_t v52 = v9;
      unint64_t v50 = (uint64_t *)a1;
      uint64_t v37 = sub_100349CDC();
      if (v37)
      {
        unint64_t v38 = (void *)v37;
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_100526968(a2, 1, v39, v40, v38, (uint64_t)v56);
        uint64_t v41 = v56[0];
        uint64_t v42 = v56[1];
        uint64_t v43 = v56[2];
        uint64_t v44 = v56[3];
        uint64_t v45 = v56[4];

        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
      }
      uint64_t v46 = v50;
      sub_10052C290((uint64_t)v50, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      *uint64_t v46 = v41;
      v46[1] = v42;
      v46[2] = v43;
      v46[3] = v44;
      v46[4] = v45;
      v46[5] = 0;
      swift_storeEnumTagMultiPayload();
    }
  }
  return v22;
}

void *sub_100522260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t), uint64_t a6, char *a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v141 = a7;
  uint64_t v138 = a5;
  uint64_t v148 = a4;
  uint64_t v155 = sub_100094134(&qword_100914420);
  uint64_t v132 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  unint64_t v154 = (char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v133 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v130 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v129 - v19;
  uint64_t v147 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v147);
  uint64_t v136 = (uint64_t)&v129 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v135 = (uint64_t *)((char *)&v129 - v23);
  __chkstk_darwin(v24);
  uint64_t v140 = (uint64_t)&v129 - v25;
  uint64_t v145 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v144 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v131 = (uint64_t *)((char *)&v129 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v27);
  uint64_t v139 = (uint64_t *)((char *)&v129 - v28);
  unint64_t v152 = (void *)a1;
  uint64_t v29 = sub_100523970(a1);
  if (qword_100907790 != -1) {
    swift_once();
  }
  uint64_t v157 = qword_100942318;
  swift_bridgeObjectRetain();
  unint64_t v30 = swift_bridgeObjectRetain();
  sub_1002014E4(v30);
  uint64_t v164 = v157;
  unint64_t v163 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v31 = sub_100526DD0(a3);
  sub_1002014E4((unint64_t)v31);
  uint64_t v32 = sub_100526FE4(a3);
  sub_1002014E4((unint64_t)v32);
  int v33 = v163;
  unint64_t v161 = v163;
  uint64_t v162 = v164;
  uint64_t v143 = a8;
  uint64_t v157 = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100094134(&qword_1009169B0);
  sub_1000967F4(&qword_1009169B8, &qword_1009169B0);
  uint64_t Predicate = Sequence<>.postFetchPredicateTypes.getter();
  uint64_t v35 = sub_1001C0698(Predicate);
  sub_100201514(v35);
  uint64_t v36 = sub_1001C06B0(Predicate);
  swift_bridgeObjectRelease();
  sub_100201514(v36);
  sub_100094134(&qword_10090FF40);
  unint64_t v37 = (unint64_t)&protocol witness table for AnyKeyPath;
  Array<A>.removeDuplicates()();
  Array<A>.removeDuplicates()();
  Array<A>.removeDuplicates()();
  Array<A>.removeDuplicates()();
  unint64_t v38 = (void (*)(uint64_t *, uint64_t, uint64_t))v164;
  unint64_t v39 = swift_bridgeObjectRetain();
  uint64_t v142 = a10;
  uint64_t v40 = (void *)sub_1003BC8C4(v39, 0, a10, a2);
  char v146 = v38;
  swift_bridgeObjectRelease();
  unint64_t v41 = v163;
  if (v163 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v42 = *(void *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v156 = (unint64_t *)v41;
  uint64_t v150 = a6;
  uint64_t v151 = v29;
  uint64_t v153 = (char *)a3;
  uint64_t v129 = v20;
  if (v42)
  {
    id v160 = _swiftEmptyArrayStorage;
    sub_1001DE058(0, v42 & ~(v42 >> 63), 0);
    if (v42 < 0)
    {
      __break(1u);
LABEL_69:
      uint64_t v157 = 0;
      unint64_t v158 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v126._object = (void *)0x80000001007CAF70;
      v126._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v126);
      unint64_t v159 = (void *)a3;
      sub_100094134((uint64_t *)&unk_10090B070);
      _print_unlocked<A, B>(_:_:)();
      LODWORD(v128) = 0;
      uint64_t v127 = 19;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_70;
    }
    id v137 = v40;
    uint64_t v43 = 0;
    uint64_t v44 = v160;
    unint64_t v45 = v41 & 0xC000000000000001;
    while (v42 != v43)
    {
      if (v45)
      {
        a3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        a3 = *(void *)(v41 + 8 * v43 + 32);
        swift_retain();
      }
      uint64_t v46 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
      if (!v47) {
        goto LABEL_69;
      }
      uint64_t v48 = v46;
      uint64_t v49 = v47;
      swift_release();
      id v160 = v44;
      unint64_t v37 = v44[2];
      unint64_t v50 = v44[3];
      if (v37 >= v50 >> 1)
      {
        sub_1001DE058(v50 > 1, v37 + 1, 1);
        uint64_t v44 = v160;
      }
      ++v43;
      v44[2] = v37 + 1;
      unint64_t v51 = &v44[2 * v37];
      unsigned char v51[4] = v48;
      v51[5] = v49;
      unint64_t v41 = (unint64_t)v156;
      if (v42 == v43)
      {
        swift_bridgeObjectRelease();
        a6 = v150;
        a3 = (uint64_t)v153;
        uint64_t v40 = v137;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_47:
    int v80 = enum case for REMRemindersListDataView.ShowCompleted.on(_:);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v33 == v80) {
      goto LABEL_48;
    }
LABEL_70:
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    JUMPOUT(0x100523510);
  }
  swift_bridgeObjectRelease();
LABEL_18:
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v53 = v40;
  [v40 setRelationshipKeyPathsForPrefetching:isa];

  if (v148)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    v54.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    sub_100527148(a3, a6, (unint64_t)v138);
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    v54.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  uint64_t v55 = v152;
  id v56 = v53;
  [v53 setSortDescriptors:v54.super.isa, v129];

  uint64_t v57 = swift_allocObject();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  uint64_t v58 = v149;
  uint64_t v59 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v60 = v58;
  if (v58)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocUninitializedObject();
    return v55;
  }
  uint64_t v156 = (unint64_t *)(v57 + 16);
  *(void *)(v57 + 16) = v59;

  uint64_t v61 = v144;
  uint64_t v62 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v144 + 16);
  id v63 = v139;
  uint64_t v64 = v145;
  v62(v139, a6, v145);
  uint64_t v65 = *(uint64_t (**)(uint64_t *, uint64_t))(v61 + 88);
  int v66 = v65(v63, v64);
  uint64_t v148 = v57;
  char v146 = v62;
  uint64_t v138 = v65;
  LODWORD(v137) = enum case for REMRemindersListDataView.ShowCompleted.after(_:);
  if (v66 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v61 + 8))(v63, v64);
    char v67 = &_swiftEmptySetSingleton;
LABEL_28:
    id v68 = v156;
    uint64_t v69 = v143;
    goto LABEL_29;
  }
  if (v66 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v61 + 96))(v63, v64);
    uint64_t v157 = *v63;
    sub_100094134(&qword_10091C480);
    type metadata accessor for UUID();
    sub_1000967F4(&qword_10091C488, &qword_10091C480);
    sub_10052C300((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v67 = (void *)Sequence.mapToSet<A>(_:)();
    uint64_t v60 = 0;
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  char v67 = &_swiftEmptySetSingleton;
  if (v66 == enum case for REMRemindersListDataView.ShowCompleted.off(_:)) {
    goto LABEL_28;
  }
  id v68 = v156;
  uint64_t v69 = v143;
  if (v66 != enum case for REMRemindersListDataView.ShowCompleted.on(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    goto LABEL_40;
  }
LABEL_29:
  unint64_t v70 = *v68;
  uint64_t v71 = *(void *)(v69 + 16);
  swift_bridgeObjectRetain();
  if (v71)
  {
    swift_bridgeObjectRetain();
    id v72 = sub_10039C7F8(v70, (uint64_t)v67, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v70 = (unint64_t)v72;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  *id v68 = v70;
  swift_bridgeObjectRelease();
  uint64_t v73 = v140;
  sub_10052C360((uint64_t)v153, v140, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_10052C290(v73, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    uint64_t v43 = v150;
    uint64_t v42 = v151;
    goto LABEL_50;
  }
  uint64_t v149 = v60;
  unint64_t v45 = *(void *)v73;

  if (!v45) {
    goto LABEL_41;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v151)
  {
LABEL_40:
    swift_bridgeObjectRelease();
LABEL_41:
    uint64_t v43 = v150;
    uint64_t v42 = v151;
    uint64_t v60 = v149;
    goto LABEL_50;
  }
  unint64_t v37 = *v156;
  id v74 = v131;
  uint64_t v75 = v145;
  v146(v131, v150, v145);
  int v76 = v138(v74, v75);
  if (v76 == v137)
  {
    id v77 = *(void (**)(uint64_t *, uint64_t))(v144 + 8);
    uint64_t v42 = v151;
    swift_retain();
    swift_bridgeObjectRetain();
    v77(v74, v75);
    uint64_t v78 = &_swiftEmptySetSingleton;
    uint64_t v43 = v150;
  }
  else
  {
    int v33 = v76;
    uint64_t v42 = v151;
    if (v76 != enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
    {
      uint64_t v43 = v150;
      if (v76 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
      {
        swift_retain();
        swift_bridgeObjectRetain();
LABEL_48:
        uint64_t v78 = &_swiftEmptySetSingleton;
        goto LABEL_49;
      }
      goto LABEL_47;
    }
    (*(void (**)(uint64_t *, uint64_t))(v144 + 96))(v74, v75);
    uint64_t v79 = *v74;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v78 = (void *)sub_10033305C(v79);
    swift_bridgeObjectRelease();
    uint64_t v43 = v150;
  }
LABEL_49:
  unint64_t v81 = swift_bridgeObjectRetain();
  uint64_t v82 = v149;
  id v83 = sub_100527F44(v81, (uint64_t)v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v84 = sub_100126B38((unint64_t)v83);
  swift_bridgeObjectRelease();
  uint64_t v85 = sub_1001A0C38(v84);
  swift_bridgeObjectRelease();
  uint64_t v86 = sub_1001F553C(v45, v85, v37);
  uint64_t v60 = v82;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t *v156 = (unint64_t)v86;
  swift_bridgeObjectRelease();
LABEL_50:
  uint64_t v87 = swift_allocObject();
  *(void *)(v87 + 16) = 0;
  uint64_t v88 = swift_allocObject();
  *(void *)(v88 + 16) = 0;
  unint64_t v159 = _swiftEmptyDictionarySingleton;
  id v160 = _swiftEmptyDictionarySingleton;
  uint64_t v89 = (char *)v148;
  unint64_t v90 = *(void *)(v148 + 16);
  __chkstk_darwin(v88);
  id v91 = v141;
  *(&v129 - 14) = v153;
  *(&v129 - 13) = v91;
  os_log_type_t v92 = (char *)v152;
  *(&v129 - 12) = v93;
  *(&v129 - 11) = v92;
  *(&v129 - 10) = v89;
  *(&v129 - 9) = (char *)v43;
  *(&v129 - 8) = (char *)&v162;
  *(&v129 - 7) = (char *)&v161;
  *(&v129 - 6) = (char *)v142;
  *((unsigned char *)&v129 - 40) = a11 & 1;
  *(&v129 - 4) = (char *)v42;
  *(&v129 - 3) = (char *)v87;
  uint64_t v127 = (uint64_t)&v160;
  unint64_t v128 = &v159;
  swift_bridgeObjectRetain();
  sub_1003B328C((void (*)(id *))sub_10052B7E8, (uint64_t)(&v129 - 16), v90);
  if (v60)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v55 = v160;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    os_log_type_t v96 = v94;
    char v146 = (void (*)(uint64_t *, uint64_t, uint64_t))v88;
    unint64_t v152 = (void *)v87;
    swift_bridgeObjectRelease();
    uint64_t v97 = v135;
    sub_10052C360((uint64_t)v153, (uint64_t)v135, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    id v99 = v156;
    switch(EnumCaseMultiPayload)
    {
      case 2:
      case 3:
        sub_10052C290((uint64_t)v97, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
        break;
      case 4:
        uint64_t v107 = *v97;
        uint64_t v108 = (void *)v97[5];
        sub_1001F84E8(v107);

        break;
      case 5:
        break;
      default:
        uint64_t v100 = (uint64_t)v96;
        uint64_t v101 = v133;
        uint64_t v102 = (uint64_t)v129;
        uint64_t v103 = v97;
        uint64_t v104 = v134;
        (*(void (**)(char *, uint64_t *, uint64_t))(v133 + 32))(v129, v103, v134);
        os_log_type_t v105 = sub_1000ED7A8(v102, v43, v100);
        swift_bridgeObjectRelease();
        uint64_t v106 = v102;
        uint64_t v60 = 0;
        id v99 = v156;
        (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v106, v104);
        os_log_type_t v96 = v105;
        break;
    }
    os_log_type_t v109 = _swiftEmptyArrayStorage;
    uint64_t v157 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v110 = v96[2];
    if (v110)
    {
      uint64_t v149 = v60;
      uint64_t v111 = *(void (**)(char *, char *, uint64_t))(v132 + 16);
      id v112 = (char *)v96
           + ((*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80));
      uint64_t v113 = *(void *)(v132 + 72);
      os_log_type_t v114 = (void (**)(char *, uint64_t))(v132 + 8);
      uint64_t v145 = (uint64_t)v96;
      swift_bridgeObjectRetain();
      do
      {
        uint64_t v115 = v154;
        uint64_t v116 = v155;
        v111(v154, v112, v155);
        REMSortableElement.element.getter();
        (*v114)(v115, v116);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v112 += v113;
        --v110;
      }
      while (v110);
      swift_bridgeObjectRelease();
      id v99 = v156;
      os_log_type_t v109 = (void *)v157;
    }
    swift_bridgeObjectRelease();
    swift_beginAccess();
    unint64_t *v99 = (unint64_t)v109;
    swift_bridgeObjectRelease();
    uint64_t v117 = v136;
    sub_10052C360((uint64_t)v153, v136, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    int v118 = swift_getEnumCaseMultiPayload();
    uint64_t v119 = v150;
    if (v118 == 3)
    {
      uint64_t v120 = v133;
      uint64_t v121 = (uint64_t)v130;
      uint64_t v122 = v134;
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 32))(v130, v117, v134);
      unint64_t v123 = *v99;
      swift_bridgeObjectRetain();
      uint64_t v124 = sub_1000ED0E8(v121, v119, v123);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v121, v122);
      unint64_t *v99 = v124;
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10052C290(v117, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    }
    unint64_t v125 = swift_bridgeObjectRetain();
    uint64_t v55 = sub_100520B90(v125, (uint64_t *)&v160, (uint64_t *)&v159);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v55;
}

uint64_t sub_100523528()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091C468);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091C468);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1005235F0()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077B710;
  *(void *)(v0 + 32) = swift_getKeyPath();
  *(void *)(v0 + 40) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  qword_100942318 = v0;
  return result;
}

uint64_t sub_100523674()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077DE90;
  *(void *)(v0 + 32) = swift_getKeyPath();
  *(void *)(v0 + 40) = swift_getKeyPath();
  *(void *)(v0 + 48) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  qword_100942320 = v0;
  return result;
}

uint64_t sub_100523708@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10052C360(v2, (uint64_t)v6, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = type metadata accessor for REMRemindersListDataView.SortingDirection();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, v6, v9);
      uint64_t v8 = (unsigned int *)&enum case for REMRemindersListDataView.SortingStyle.priority(_:);
      break;
    case 2u:
      uint64_t v10 = type metadata accessor for REMRemindersListDataView.SortingDirection();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, v6, v10);
      uint64_t v8 = (unsigned int *)&enum case for REMRemindersListDataView.SortingStyle.creationDate(_:);
      break;
    case 3u:
      uint64_t v11 = type metadata accessor for REMRemindersListDataView.SortingDirection();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v6, v11);
      uint64_t v8 = (unsigned int *)&enum case for REMRemindersListDataView.SortingStyle.title(_:);
      break;
    case 4u:
      sub_10052C290((uint64_t)v6, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      goto LABEL_7;
    case 5u:
LABEL_7:
      uint64_t v8 = (unsigned int *)&enum case for REMRemindersListDataView.SortingStyle.manual(_:);
      break;
    default:
      uint64_t v7 = type metadata accessor for REMRemindersListDataView.SortingDirection();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, v6, v7);
      uint64_t v8 = (unsigned int *)&enum case for REMRemindersListDataView.SortingStyle.displayDate(_:);
      break;
  }
  uint64_t v12 = *v8;
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(a1, v12, v13);
}

uint64_t sub_100523970(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10052C360(v1, (uint64_t)v9, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 4u:
      uint64_t v11 = (void *)v9[5];
      sub_1001F84E8(*v9);
      if (v11)
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_10077A530;
        *(void *)(v12 + 32) = v11;
        uint64_t v31 = v12;
        specialized Array._endMutation()();
        unint64_t v13 = v31;
        id v14 = v11;
        uint64_t v15 = (void *)sub_1003AD42C(v13, 0, 6);
        swift_bridgeObjectRelease();
        if (qword_100907778 != -1) {
          swift_once();
        }
        uint64_t v16 = (void *)sub_1003BC0CC(qword_1009422E8, 0, 0, (uint64_t)v15);

        sub_1000963CC(0, &qword_10090ABC0);
        unint64_t v17 = NSManagedObjectContext.fetch<A>(_:)();
        unint64_t v21 = v17;
        if (v17 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v6)
          {
LABEL_13:
            if ((v21 & 0xC000000000000001) != 0)
            {
              id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (!*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_31:
                uint64_t v26 = swift_once();
LABEL_19:
                uint64_t v27 = qword_10091C658;
                __chkstk_darwin(v26);
                *(&v30 - 4) = (uint64_t)v14;
                *(&v30 - 3) = v6;
                *(&v30 - 2) = v27;
                OS_dispatch_queue.sync<A>(execute:)();
                uint64_t v28 = v31;
                type metadata accessor for RDManualSortIDAdapter();
                swift_allocObject();
                uint64_t v6 = sub_1001A1374(v28, v6, 0);

                uint64_t v31 = 0;
                __chkstk_darwin(v29);
                *(&v30 - 4) = v6;
                *(&v30 - 3) = a1;
                *(&v30 - 2) = (uint64_t)&v31;
                swift_retain();
                NSManagedObjectContext.performAndWait<A>(_:)();
                if (!v31) {
                  sub_1002ED224((uint64_t)_swiftEmptyArrayStorage);
                }
                swift_release();

                swift_bridgeObjectRelease();
                return v6;
              }
              id v22 = *(id *)(v21 + 32);
            }
            uint64_t v3 = v22;
            swift_bridgeObjectRelease();
            id v23 = [v3 remObjectID];
            if (!v23) {
              goto LABEL_20;
            }
            uint64_t v24 = v23;
            sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
            id v2 = v14;
            id v25 = v24;
            LOBYTE(v24) = static NSObject.== infix(_:_:)();

            if ((v24 & 1) == 0)
            {
LABEL_20:

              return 0;
            }
            uint64_t v4 = v16;
            uint64_t v6 = (uint64_t)sub_1005E82D8();
            uint64_t v26 = type metadata accessor for RDManualSortIDCache();
            id v14 = (id)v26;
            if (qword_100907870 == -1) {
              goto LABEL_19;
            }
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v6 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v6) {
            goto LABEL_13;
          }
        }

        swift_bridgeObjectRelease();
        return v6;
      }
      uint64_t v18 = sub_100526BA8();
      if (!v18) {
        return 0;
      }
      uint64_t v19 = v18;
      uint64_t v31 = 0;
      __chkstk_darwin(v18);
      *(&v30 - 4) = v20;
      *(&v30 - 3) = a1;
      *(&v30 - 2) = (uint64_t)&v31;
      swift_retain();
      NSManagedObjectContext.performAndWait<A>(_:)();
      if (!v31) {
        sub_1002ED224((uint64_t)_swiftEmptyArrayStorage);
      }
      swift_release();
      swift_bridgeObjectRelease();
      return v19;
    case 5u:
      return v6;
    default:
      sub_10052C290((uint64_t)v9, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      return 0;
  }
}

void sub_1005242F8(unint64_t a1, id a2, id a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = _s10PredicatesOMa(0);
  __chkstk_darwin(v10);
  unint64_t v13 = (void *)((char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 >> 62)
  {
    *(void *)&long long v74 = v11;
    swift_bridgeObjectRetain();
    uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v66)
    {
      id v75 = a2;
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v19 = _swiftEmptyArrayStorage;
      if (!v14) {
        goto LABEL_58;
      }
      v79[0] = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      a2 = v75;
      if ((v14 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
      __break(1u);
    }
LABEL_56:
    sub_1002EDB5C((uint64_t)_swiftEmptyArrayStorage);
    return;
  }
  uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v14) {
    goto LABEL_56;
  }
  *(void *)&long long v74 = v11;
  v79[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
LABEL_4:
  id v75 = a2;
  id v72 = (char *)a4;
  unint64_t v73 = (unint64_t)a3;
  uint64_t v70 = v4;
  uint64_t v15 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v16 = *(id *)(a1 + 8 * v15 + 32);
    }
    unint64_t v17 = v16;
    ++v15;
    id v18 = [v16 objectID];

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v14 != v15);
  uint64_t v19 = (void *)v79[0];
  uint64_t v5 = v70;
  a4 = (unint64_t)v72;
  while (1)
  {
    uint64_t v20 = (char *)v13 + *(int *)(sub_100094134(&qword_100916968) + 48);
    *unint64_t v13 = v19;
    uint64_t v21 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
    (*(void (**)(char *, id, uint64_t))(*(void *)(v21 - 8) + 16))(v20, v75, v21);
    swift_storeEnumTagMultiPayload();
    id v22 = (void *)sub_10038F1F0();
    sub_10052C290((uint64_t)v13, _s10PredicatesOMa);
    id v71 = v22;
    id v23 = sub_100520998((Class)a4, (uint64_t)v22);
    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v24 = swift_allocObject();
    long long v74 = xmmword_100776E40;
    *(_OWORD *)(v24 + 16) = xmmword_100776E40;
    id v25 = self;
    id v26 = [v25 expressionForEvaluatedObject];
    *(void *)(v24 + 56) = sub_1000963CC(0, &qword_10090B098);
    *(void *)(v24 + 32) = v26;
    NSString v27 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v29 = [v25 expressionForFunction:v27 arguments:isa];

    id v30 = [objc_allocWithZone((Class)NSExpressionDescription) init];
    id v75 = v29;
    [v30 setExpression:v29];
    id v31 = v30;
    NSString v32 = String._bridgeToObjectiveC()();
    [v31 setName:v32];

    [v31 setExpressionResultType:300];
    [v23 setReturnsObjectsAsFaults:0];
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = v74;
    *(void *)(v33 + 56) = &type metadata for String;
    strcpy((char *)(v33 + 32), "parentReminder");
    *(unsigned char *)(v33 + 47) = -18;
    Class v34 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v23 setPropertiesToGroupBy:v34];

    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_100776E80;
    *(void *)(v35 + 56) = &type metadata for String;
    strcpy((char *)(v35 + 32), "parentReminder");
    *(unsigned char *)(v35 + 47) = -18;
    *(void *)(v35 + 88) = sub_1000963CC(0, (unint64_t *)&unk_10090B0A0);
    *(void *)(v35 + 64) = v31;
    id v36 = v31;
    Class v37 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v23 setPropertiesToFetch:v37];

    [v23 setResultType:2];
    sub_1000963CC(0, &qword_10090E4F0);
    unint64_t v38 = NSManagedObjectContext.fetch<A>(_:)();
    if (v5)
    {

      return;
    }
    unint64_t v39 = v38;
    id v68 = v36;
    id v69 = v23;
    unint64_t v81 = _swiftEmptyDictionarySingleton;
    unint64_t v40 = v38 >> 62;
    if (v38 >> 62)
    {
      swift_bridgeObjectRetain();
      Swift::Int v41 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      Swift::Int v41 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id v42 = v71;
    uint64_t v70 = 0;
    sub_100094134(&qword_10091C498);
    Dictionary.reserveCapacity(_:)(v41);
    if (v40)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      id v43 = v75;
      *(void *)&long long v74 = v44;
      if (!v44)
      {
LABEL_51:

        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      id v43 = v75;
      *(void *)&long long v74 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!(void)v74) {
        goto LABEL_51;
      }
    }
    if ((uint64_t)v74 < 1) {
      break;
    }
    uint64_t v5 = 0;
    id v72 = (char *)&type metadata for Any + 8;
    unint64_t v73 = v39 & 0xC000000000000001;
    while (1)
    {
      if (v73) {
        unint64_t v45 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        unint64_t v45 = *(id *)(v39 + 8 * v5 + 32);
      }
      uint64_t v19 = v45;
      *(void *)&long long v77 = 0x746E756F63;
      *((void *)&v77 + 1) = 0xE500000000000000;
      id v46 = [v45 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v46)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v77 = 0u;
        long long v78 = 0u;
      }
      sub_100096408((uint64_t)&v77, (uint64_t)v79, &qword_100908190);
      if (!v80)
      {

        sub_1000966BC((uint64_t)v79, &qword_100908190);
        goto LABEL_21;
      }
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      if ((swift_dynamicCast() & 1) == 0)
      {

        goto LABEL_21;
      }
      id v47 = v76;
      a3 = [v76 integerValue];

      if ((uint64_t)a3 <= 0) {
        goto LABEL_41;
      }
      strcpy((char *)&v77, "parentReminder");
      HIBYTE(v77) = -18;
      unint64_t v13 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      id v48 = [v19 __swift_objectForKeyedSubscript:v13];
      swift_unknownObjectRelease();
      if (v48)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v77 = 0u;
        long long v78 = 0u;
      }
      sub_100096408((uint64_t)&v77, (uint64_t)v79, &qword_100908190);
      if (!v80)
      {

        sub_1000966BC((uint64_t)v79, &qword_100908190);
        goto LABEL_43;
      }
      uint64_t v49 = sub_1000963CC(0, (unint64_t *)&qword_100914150);
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_41:

LABEL_43:
        id v42 = v71;
        goto LABEL_21;
      }
      v67[1] = v49;
      id v50 = v76;
      unint64_t v51 = v81;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v79[0] = v51;
      unint64_t v81 = (void *)0x8000000000000000;
      a4 = sub_100306F98((uint64_t)v50);
      uint64_t v54 = v51[2];
      BOOL v55 = (v53 & 1) == 0;
      uint64_t v56 = v54 + v55;
      if (__OFADD__(v54, v55)) {
        break;
      }
      char v57 = v53;
      if (v51[3] >= v56)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100318DB8();
        }
      }
      else
      {
        sub_10030ECF8(v56, isUniquelyReferenced_nonNull_native);
        unint64_t v58 = sub_100306F98((uint64_t)v50);
        if ((v57 & 1) != (v59 & 1)) {
          goto LABEL_62;
        }
        a4 = v58;
      }
      uint64_t v60 = (void *)v79[0];
      if (v57)
      {
        *(void *)(*(void *)(v79[0] + 56) + 8 * a4) = a3;
      }
      else
      {
        *(void *)(v79[0] + 8 * (a4 >> 6) + 64) |= 1 << a4;
        uint64_t v61 = 8 * a4;
        *(void *)(v60[6] + v61) = v50;
        *(void *)(v60[7] + v61) = a3;
        uint64_t v62 = v60[2];
        BOOL v63 = __OFADD__(v62, 1);
        uint64_t v64 = v62 + 1;
        if (v63) {
          goto LABEL_61;
        }
        v60[2] = v64;
        id v65 = v50;
      }
      id v42 = v71;
      unint64_t v81 = v60;

      swift_bridgeObjectRelease();
LABEL_21:
      ++v5;
      id v43 = v75;
      if ((void)v74 == v5) {
        goto LABEL_51;
      }
    }
    __break(1u);
LABEL_58:
    unint64_t v73 = (unint64_t)a3;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_100524D18(void **a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void (*a6)(char *, char *, uint64_t)@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t *a10, unint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, void **a16)
{
  unint64_t v174 = a8;
  uint64_t v182 = a7;
  uint64_t v183 = a6;
  uint64_t v184 = a5;
  uint64_t v185 = a3;
  uint64_t v181 = (void *)a4;
  uint64_t v19 = sub_100094134(&qword_100914420);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  id v168 = (char *)v156 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  Class v167 = (char *)v156 - v23;
  __chkstk_darwin(v24);
  uint64_t v164 = (char *)v156 - v25;
  uint64_t v171 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v170 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  unint64_t v163 = (char *)v156 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v166 = (char *)v156 - v28;
  __chkstk_darwin(v29);
  uint64_t v169 = (uint64_t)v156 - v30;
  uint64_t v162 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v161 = *(void *)(v162 - 8);
  __chkstk_darwin(v162);
  id v160 = (void *)((char *)v156 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v173 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v173);
  uint64_t v165 = (uint64_t)v156 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  id v172 = (void *)((char *)v156 - v34);
  __chkstk_darwin(v35);
  Class v37 = (char *)v156 - v36;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v39 = *(void *)(Subtasks - 8);
  *(void *)&double v40 = __chkstk_darwin(Subtasks).n128_u64[0];
  id v42 = (char *)v156 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v43 = *a1;
  id v186 = [v43 remObjectID:v40];
  if (v186)
  {
    uint64_t v178 = v20;
    uint64_t v179 = v19;
    uint64_t v175 = a9;
    uint64_t v44 = a16;
    uint64_t v158 = a2;
    uint64_t v180 = v43;
    uint64_t v45 = sub_100526148(a2);
    int v47 = v46;
    int v177 = v46 & 1;
    (*(void (**)(char *, void **, uint64_t))(v39 + 16))(v42, v185, Subtasks);
    int v48 = (*(uint64_t (**)(char *, uint64_t))(v39 + 88))(v42, Subtasks);
    uint64_t v176 = v45;
    if (v48 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:))
    {
      unint64_t v159 = a15;
      uint64_t v49 = v186;
LABEL_4:
      uint64_t v50 = v179;
      uint64_t v51 = v175;
LABEL_5:
      sub_10030D338((uint64_t)v49);
      goto LABEL_6;
    }
    uint64_t v49 = v186;
    unint64_t v54 = v187;
    if (v48 == enum case for REMRemindersListDataView.FetchSubtasks.on(_:))
    {
      uint64_t v55 = (uint64_t)v184;
      uint64_t v56 = sub_10052BECC((uint64_t)v181, (uint64_t)v184, (uint64_t)v183);
      if (!v54)
      {
        uint64_t v185 = a16;
        char v57 = sub_1001CBD58(v49, v56);
        swift_bridgeObjectRelease();
        if ((v57 & 1) == 0)
        {
          unint64_t v159 = a15;
          uint64_t v50 = v179;
          uint64_t v51 = v175;
          goto LABEL_5;
        }
        unint64_t v58 = *a10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v59 = (unint64_t)sub_10052BFBC(v180, v158, v182, v55, v58, a11, a12 & 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v44 = v185;
        unint64_t v159 = a15;
        unint64_t v187 = v59;
        if (v59 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v60 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v61 = v158;
        uint64_t v50 = v179;
        int v157 = v47;
        if (v60)
        {
          sub_10052C360(v158, (uint64_t)v37, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
          if (swift_getEnumCaseMultiPayload() == 4)
          {
            uint64_t v62 = *(void *)v37;
            BOOL v63 = (void (*)(char *, char *, uint64_t))*((void *)v37 + 1);
            uint64_t v64 = *((void *)v37 + 2);
            id v65 = (void *)*((void *)v37 + 3);
            unint64_t v66 = *((void *)v37 + 4);

            char v67 = v180;
            if (a13)
            {
              unint64_t v174 = v66;
              uint64_t v181 = (void *)v62;
              uint64_t v183 = v63;
              uint64_t v184 = v65;
              v156[2] = v64;
              swift_retain();
              id v68 = [v67 remObjectID];
              if (v68)
              {
                id v69 = v68;
                sub_100094134((uint64_t *)&unk_10090AF20);
                uint64_t inited = swift_initStackObject();
                *(_OWORD *)(inited + 16) = xmmword_10077A530;
                *(void *)(inited + 32) = v67;
                uint64_t v188 = (void *)inited;
                specialized Array._endMutation()();
                unint64_t v71 = (unint64_t)v188;
                id v72 = v67;
                uint64_t v73 = sub_100126B38(v71);
                swift_bridgeObjectRelease();
                uint64_t v74 = sub_1001A0C38(v73);
                swift_bridgeObjectRelease();
                id v75 = v69;
                uint64_t v76 = sub_1002EFDB4(v75, v74);
                swift_bridgeObjectRelease();

                if (!v76)
                {
                  swift_release();
                  sub_1001F84E8((uint64_t)v181);
                  uint64_t v49 = v186;
                  unint64_t v91 = v187;
                  goto LABEL_41;
                }
                v156[1] = a13;
                uint64_t v49 = v186;
                if (v181)
                {
                  long long v77 = (void *)sub_10026651C(v76, (uint64_t)v183);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v77)
                  {
                    uint64_t v50 = v179;
                    uint64_t v44 = v185;
                    uint64_t v61 = v158;
                    if (v77[2])
                    {
                      uint64_t v184 = v77;
                      uint64_t v78 = v161;
                      uint64_t v79 = v160;
                      uint64_t v80 = v162;
                      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v161 + 16))(v160, v182, v162);
                      int v81 = (*(uint64_t (**)(uint64_t *, uint64_t))(v78 + 88))(v79, v80);
                      if (v81 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
                      {
                        uint64_t v82 = *(void (**)(uint64_t *, uint64_t))(v78 + 8);
                        unint64_t v83 = v187;
                        swift_bridgeObjectRetain();
                        v82(v79, v80);
                        uint64_t v84 = &_swiftEmptySetSingleton;
                      }
                      else
                      {
                        int v148 = v81;
                        if (v81 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
                        {
                          (*(void (**)(uint64_t *, uint64_t))(v78 + 96))(v79, v80);
                          uint64_t v149 = *v79;
                          unint64_t v83 = v187;
                          swift_bridgeObjectRetain();
                          uint64_t v84 = (void *)sub_10033305C(v149);
                          swift_bridgeObjectRelease();
                        }
                        else
                        {
                          if (v81 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
                          {
                            unint64_t v83 = v187;
                            swift_bridgeObjectRetain();
                            uint64_t v84 = &_swiftEmptySetSingleton;
                            uint64_t v50 = v179;
                            uint64_t v49 = v186;
                          }
                          else
                          {
                            int v150 = enum case for REMRemindersListDataView.ShowCompleted.on(_:);
                            swift_bridgeObjectRetain();
                            if (v148 != v150)
                            {
LABEL_104:
                              _diagnoseUnexpectedEnumCase<A>(type:)();
                              __break(1u);
                              JUMPOUT(0x100526130);
                            }
                            uint64_t v84 = &_swiftEmptySetSingleton;
                            uint64_t v50 = v179;
                            uint64_t v49 = v186;
                            unint64_t v83 = v187;
                          }
                          uint64_t v61 = v158;
                        }
                      }
                      unint64_t v151 = swift_bridgeObjectRetain();
                      unint64_t v152 = v83;
                      uint64_t v153 = sub_100527F44(v151, (uint64_t)v84);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v154 = sub_100126B38((unint64_t)v153);
                      swift_bridgeObjectRelease();
                      uint64_t v155 = (void (*)(char *, char *, uint64_t))sub_1001A0C38(v154);
                      uint64_t v183 = v155;
                      swift_bridgeObjectRelease();
                      unint64_t v91 = (unint64_t)sub_1001F553C((uint64_t)v184, (uint64_t)v155, v152);
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_release();
                      swift_bridgeObjectRelease();
                      uint64_t v44 = v185;
                      goto LABEL_42;
                    }
                    swift_release();
                    swift_release();
                    swift_bridgeObjectRelease();
                    goto LABEL_36;
                  }
                }
                swift_release();
                swift_release();
LABEL_40:
                unint64_t v91 = v187;
LABEL_41:
                uint64_t v50 = v179;
                uint64_t v44 = v185;
                uint64_t v61 = v158;
                goto LABEL_42;
              }
              swift_release();
              uint64_t v96 = (uint64_t)v181;
            }
            else
            {
              uint64_t v96 = v62;
            }
            sub_1001F84E8(v96);
            goto LABEL_40;
          }
          sub_10052C290((uint64_t)v37, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
        }
LABEL_36:
        unint64_t v91 = v187;
LABEL_42:
        uint64_t v97 = v172;
        if (v91 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v184 = (void *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v184 = *(void **)((v91 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        sub_10052C360(v61, (uint64_t)v97, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 2u:
            sub_10052C290((uint64_t)v97, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
            goto LABEL_30;
          case 3u:
            uint64_t v109 = v170;
            uint64_t v110 = (uint64_t)v166;
            uint64_t v111 = v171;
            (*(void (**)(char *, uint64_t *, uint64_t))(v170 + 32))(v166, v97, v171);
            swift_bridgeObjectRetain();
            uint64_t v112 = sub_1000ED0E8(v110, v182, v91);
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v110, v111);
            swift_bridgeObjectRelease();
            unint64_t v91 = v112;
            goto LABEL_30;
          case 4u:
            uint64_t v107 = *v97;
            uint64_t v108 = (void *)v97[5];
            sub_1001F84E8(v107);

            goto LABEL_30;
          case 5u:
            goto LABEL_30;
          default:
            uint64_t v98 = v170;
            uint64_t v99 = v169;
            uint64_t v100 = v97;
            uint64_t v101 = v171;
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(v170 + 32))(v169, v100, v171);
            id v102 = [v180 completed];
            if (v102)
            {
              (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v99, v101);
              goto LABEL_30;
            }
            __chkstk_darwin(v102);
            v156[-2] = v61;
            swift_bridgeObjectRetain();
            uint64_t v103 = sub_1002249C0((void (*)(id *))sub_10052C270, (uint64_t)&v156[-4], v91);
            swift_bridgeObjectRelease();
            if (!*(void *)(v103 + 16))
            {
              (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v169, v171);
              swift_bridgeObjectRelease();
              goto LABEL_30;
            }
            uint64_t v181 = (void *)v103;
            uint64_t v104 = v165;
            sub_10052C360(v61, v165, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            sub_10052C290(v104, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
            if (EnumCaseMultiPayload == 1)
            {
              uint64_t v106 = sub_1000ED7A8(v169, v182, (uint64_t)v181);
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v106 = v181;
            }
            uint64_t v113 = v106[2];
            unint64_t v187 = 0;
            uint64_t v181 = v106;
            if (v113)
            {
              unint64_t v174 = v91;
              uint64_t v188 = _swiftEmptyArrayStorage;
              swift_bridgeObjectRetain();
              specialized ContiguousArray.reserveCapacity(_:)();
              os_log_type_t v114 = *(void (**)(char *, char *, uint64_t))(v178 + 16);
              uint64_t v115 = (char *)v106
                   + ((*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80));
              uint64_t v182 = *(void *)(v178 + 72);
              uint64_t v183 = v114;
              uint64_t v116 = (void (**)(char *, uint64_t))(v178 + 8);
              uint64_t v117 = v164;
              do
              {
                v183(v117, v115, v50);
                REMSortableElement.element.getter();
                (*v116)(v117, v50);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
                v115 += v182;
                --v113;
              }
              while (v113);
              unint64_t v91 = (unint64_t)v188;
              swift_bridgeObjectRelease();
              uint64_t v106 = v181;
              swift_bridgeObjectRelease();
              uint64_t v49 = v186;
              uint64_t v44 = v185;
            }
            else
            {
              swift_bridgeObjectRelease();
              unint64_t v91 = (unint64_t)_swiftEmptyArrayStorage;
            }
            if ((v157 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v169, v171);
              int v177 = 0;
              goto LABEL_30;
            }
            uint64_t v118 = v170;
            uint64_t v119 = v163;
            uint64_t v120 = v169;
            uint64_t v121 = v171;
            (*(void (**)(char *, uint64_t, uint64_t))(v170 + 16))(v163, v169, v171);
            int v122 = (*(uint64_t (**)(char *, uint64_t))(v118 + 88))(v119, v121);
            unint64_t v174 = v91;
            if (v122 == enum case for REMRemindersListDataView.SortingDirection.ascending(_:))
            {
              uint64_t v123 = v106[2];
              if (v123)
              {
                uint64_t v124 = *(void (**)(char *, char *, uint64_t))(v178 + 16);
                unint64_t v125 = (char *)v106
                     + ((*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80));
                uint64_t v182 = *(void *)(v178 + 72);
                uint64_t v183 = v124;
                Swift::String v126 = (void (**)(char *, uint64_t))(v178 + 8);
                swift_bridgeObjectRetain();
                uint64_t v127 = _swiftEmptyArrayStorage;
                unint64_t v128 = v167;
                do
                {
                  v183(v128, v125, v50);
                  uint64_t v129 = REMSortableElement.sortIndex.getter();
                  char v131 = v130;
                  (*v126)(v128, v50);
                  if ((v131 & 1) == 0)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v127 = sub_10030AB08(0, v127[2] + 1, 1, v127);
                    }
                    unint64_t v133 = v127[2];
                    unint64_t v132 = v127[3];
                    if (v133 >= v132 >> 1) {
                      uint64_t v127 = sub_10030AB08((void *)(v132 > 1), v133 + 1, 1, v127);
                    }
                    v127[2] = v133 + 1;
                    v127[v133 + 4] = v129;
                    uint64_t v50 = v179;
                  }
                  v125 += v182;
                  --v123;
                }
                while (v123);
                swift_bridgeObjectRelease_n();
                uint64_t v121 = v171;
                uint64_t v118 = v170;
                uint64_t v120 = v169;
              }
              else
              {
                swift_bridgeObjectRelease();
                uint64_t v127 = _swiftEmptyArrayStorage;
              }
              (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v120, v121);
              uint64_t v145 = sub_1001F237C((uint64_t)v127);
LABEL_91:
              uint64_t v176 = v145;
              char v147 = v146;
              swift_bridgeObjectRelease();
              int v177 = v147 & 1;
              uint64_t v49 = v186;
              uint64_t v44 = v185;
              unint64_t v91 = v174;
              goto LABEL_30;
            }
            if (v122 == enum case for REMRemindersListDataView.SortingDirection.descending(_:))
            {
              uint64_t v134 = v106[2];
              if (v134)
              {
                uint64_t v135 = *(void (**)(char *, char *, uint64_t))(v178 + 16);
                uint64_t v136 = (char *)v106
                     + ((*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80));
                uint64_t v182 = *(void *)(v178 + 72);
                uint64_t v183 = v135;
                id v137 = (void (**)(char *, uint64_t))(v178 + 8);
                swift_bridgeObjectRetain();
                uint64_t v138 = _swiftEmptyArrayStorage;
                uint64_t v139 = v168;
                do
                {
                  v183(v139, v136, v50);
                  uint64_t v140 = REMSortableElement.sortIndex.getter();
                  char v142 = v141;
                  (*v137)(v139, v50);
                  if ((v142 & 1) == 0)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v138 = sub_10030AB08(0, v138[2] + 1, 1, v138);
                    }
                    unint64_t v144 = v138[2];
                    unint64_t v143 = v138[3];
                    if (v144 >= v143 >> 1) {
                      uint64_t v138 = sub_10030AB08((void *)(v143 > 1), v144 + 1, 1, v138);
                    }
                    v138[2] = v144 + 1;
                    v138[v144 + 4] = v140;
                    uint64_t v50 = v179;
                  }
                  v136 += v182;
                  --v134;
                }
                while (v134);
                swift_bridgeObjectRelease_n();
              }
              else
              {
                swift_bridgeObjectRelease();
                uint64_t v138 = _swiftEmptyArrayStorage;
              }
              (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v169, v171);
              uint64_t v145 = sub_1001F23C0((uint64_t)v138);
              goto LABEL_91;
            }
            break;
        }
        goto LABEL_103;
      }
    }
    else
    {
      if (v48 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
      {
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
LABEL_103:
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        goto LABEL_104;
      }
      uint64_t v85 = sub_10052B838(a14, (uint64_t)v183, (void *)v182, v184, a11);
      if (!v54)
      {
        uint64_t v86 = v85;
        unint64_t v159 = a15;
        id v87 = [v180 objectID];
        uint64_t v88 = v87;
        if (!*(void *)(v86 + 16) || (unint64_t v89 = sub_100306F98((uint64_t)v87), (v90 & 1) == 0))
        {

          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v184 = *(void **)(*(void *)(v86 + 56) + 8 * v89);

        swift_bridgeObjectRelease();
        unint64_t v91 = 0;
        uint64_t v50 = v179;
LABEL_30:
        id v92 = v49;
        uint64_t v93 = v159;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v188 = *v93;
        *uint64_t v93 = (void *)0x8000000000000000;
        sub_1002C74CC((uint64_t)v184, v92, isUniquelyReferenced_nonNull_native);
        *uint64_t v93 = v188;
        swift_bridgeObjectRelease();
        if (v91)
        {
          swift_bridgeObjectRetain();
          char v95 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v188 = *v44;
          *uint64_t v44 = (void *)0x8000000000000000;
          sub_1002C74A0(v91, v92, v95);
          *uint64_t v44 = v188;

          swift_bridgeObjectRelease();
          uint64_t v51 = v175;
          goto LABEL_7;
        }
        uint64_t v51 = v175;
LABEL_6:
        sub_10030D268((uint64_t)v49);

        swift_bridgeObjectRelease();
LABEL_7:
        uint64_t v52 = v180;
        uint64_t v188 = v180;
        sub_1000963CC(0, (unint64_t *)&qword_10090B040);
        id v53 = v52;
        REMSortableElement.init(element:sortIndex:)();

        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v178 + 56))(v51, 0, 1, v50);
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(a9, 1, 1, v19);
  }
}

uint64_t sub_100526148(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10052C360(a1, (uint64_t)v15, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  double v16 = 0.0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      if ((uint64_t)[v1 priority] < 1) {
        goto LABEL_2;
      }
      id v20 = [v1 priority];
      if (__OFSUB__(10, v20))
      {
        __break(1u);
        JUMPOUT(0x1005264E0);
      }
      double v16 = (double)(10 - (uint64_t)v20);
      sub_10052C290((uint64_t)v15, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      break;
    case 2u:
    case 3u:
LABEL_2:
      sub_10052C290((uint64_t)v15, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      goto LABEL_9;
    case 4u:
      uint64_t v21 = *v15;
      uint64_t v22 = (void *)v15[5];
      sub_1001F84E8(v21);

LABEL_9:
      double v16 = 0.0;
      break;
    case 5u:
      return *(void *)&v16;
    default:
      id v17 = [v1 displayDateDate];
      if (v17)
      {
        id v18 = v17;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v19 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, v19, 1, v3);
      sub_100096408((uint64_t)v9, (uint64_t)v12, (uint64_t *)&unk_100909A40);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3))
      {
        sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);
        double v16 = 0.0;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v12, v3);
        sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);
        Date.timeIntervalSinceReferenceDate.getter();
        double v24 = v23;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        double v16 = v24;
      }
      sub_10052C290((uint64_t)v15, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      break;
  }
  return *(void *)&v16;
}

uint64_t sub_1005264F8(id *a1, uint64_t a2)
{
  id v3 = *a1;
  sub_100526148(a2);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  return REMSortableElement.init(element:sortIndex:)();
}

uint64_t sub_100526588(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  if (qword_100907B18 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100942620;
  swift_retain();
  uint64_t v13 = sub_1000CF564(a1, a2, a3, a4, a5, 1, v12);
  swift_release();
  if (v13)
  {
    id v14 = v13;
    sub_1001B3874((uint64_t)v22);
    long long v20 = v22[1];
    *(_OWORD *)osos_log_t log = v22[0];
    uint64_t v15 = v23;

    long long v17 = v20;
    long long v16 = *(_OWORD *)oslog;
  }
  else
  {
    uint64_t v15 = 0;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
  }
  uint64_t v18 = *(void *)a6;
  *(_OWORD *)a6 = v16;
  *(_OWORD *)(a6 + 16) = v17;
  *(void *)(a6 + 32) = v15;

  return sub_1001F84E8(v18);
}

uint64_t sub_100526968@<X0>(void *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v12 = swift_allocObject();
  *(_WORD *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  *(void *)(v12 + 32) = a4;
  *(void *)(v12 + 40) = a5;
  *(void *)(v12 + 48) = a1;
  *(void *)(v12 + 56) = &v22;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_100526B6C;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = sub_10008F6F4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C9428;
  id v14 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v15 = a5;
  id v16 = a1;
  swift_retain();
  swift_release();
  [v16 performBlockAndWait:v14];
  _Block_release(v14);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v16)
  {
    __break(1u);
  }
  else
  {
    long long v19 = v23;
    long long v20 = v22;
    uint64_t v18 = v24;
    uint64_t result = swift_release();
    *(_OWORD *)a6 = v20;
    *(_OWORD *)(a6 + 16) = v19;
    *(void *)(a6 + 32) = v18;
  }
  return result;
}

uint64_t sub_100526B24()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100526B6C()
{
  return sub_100526588((void *)*(unsigned __int16 *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_100526B80()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100526B90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100526BA0()
{
  return swift_release();
}

uint64_t sub_100526BA8()
{
  if (qword_100907B10 != -1) {
    swift_once();
  }
  uint64_t v0 = swift_retain();
  id v1 = sub_10034A86C(v0);
  swift_release();
  if (v1)
  {
    uint64_t v2 = sub_1005E82D8();
    uint64_t v3 = type metadata accessor for RDManualSortIDCache();
    if (qword_100907870 != -1) {
      uint64_t v3 = swift_once();
    }
    __chkstk_darwin(v3);
    OS_dispatch_queue.sync<A>(execute:)();
    type metadata accessor for RDManualSortIDAdapter();
    swift_allocObject();
    uint64_t v4 = sub_1001A1374(v10, (uint64_t)v2, 0);
  }
  else
  {
    if (qword_100907788 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_10091C468);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No primary active CloudKit account found when trying to fetch reminders in REMRemindersListDataView invocation with .manualWithSortHint sorting style", v8, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v4;
}

void *sub_100526DD0(uint64_t a1)
{
  uint64_t v2 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10052C360(a1, (uint64_t)v4, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  uint64_t v5 = _swiftEmptyArrayStorage;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      goto LABEL_3;
    case 4u:
      uint64_t v7 = *v4;
      uint64_t v8 = (void *)v4[5];
      sub_1001F84E8(v7);

      if (qword_100907B20 != -1) {
        swift_once();
      }
      uint64_t v5 = (void *)qword_100942668;
      swift_bridgeObjectRetain();
      break;
    case 5u:
      return v5;
    default:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_10077A530;
      *(void *)(v6 + 32) = swift_getKeyPath();
      uint64_t v11 = (void *)v6;
      specialized Array._endMutation()();
      uint64_t v5 = v11;
LABEL_3:
      sub_10052C290((uint64_t)v4, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      break;
  }
  return v5;
}

void *sub_100526FE4(uint64_t a1)
{
  uint64_t v2 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10052C360(a1, (uint64_t)v4, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = _swiftEmptyArrayStorage;
  switch(EnumCaseMultiPayload)
  {
    case 4:
      uint64_t v7 = *v4;
      uint64_t v8 = (void *)v4[5];
      sub_1001F84E8(v7);

      if (qword_100907B28 != -1) {
        swift_once();
      }
      uint64_t result = (void *)swift_bridgeObjectRetain();
      break;
    case 5:
      return result;
    default:
      sub_10052C290((uint64_t)v4, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      uint64_t result = _swiftEmptyArrayStorage;
      break;
  }
  return result;
}

unint64_t sub_100527148(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v83 = a3;
  uint64_t v85 = a2;
  uint64_t v84 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v4 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v86 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v82 - v11;
  __chkstk_darwin(v13);
  id v15 = (char *)&v82 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v82 - v17;
  uint64_t v19 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v19);
  uint64_t v21 = (uint64_t *)((char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10052C360(a1, (uint64_t)v21, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v12, v21, v6);
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_10077A530;
      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v15, enum case for REMRemindersListDataView.SortingDirection.descending(_:), v6);
      sub_10052C300((unint64_t *)&qword_10090A9A0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SortingDirection);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      unint64_t v39 = v88;
      unint64_t v38 = v89;
      uint64_t v33 = *(void (**)(char *, uint64_t))(v7 + 8);
      v33(v15, v6);
      if (v38 == v39)
      {
        if (qword_1009073D8 != -1) {
          swift_once();
        }
        double v40 = &qword_100942198;
      }
      else
      {
        if (qword_1009073D0 != -1) {
          swift_once();
        }
        double v40 = &qword_100942190;
      }
      uint64_t v26 = v84;
      int v47 = (void *)*v40;
      *(void *)(v37 + 32) = *v40;
      unint64_t v89 = v37;
      specialized Array._endMutation()();
      if (v83)
      {
        unint64_t v48 = v83;
      }
      else
      {
        uint64_t v61 = swift_allocObject();
        *(_OWORD *)(v61 + 16) = xmmword_10077B710;
        uint64_t v62 = qword_1009073E0;
        id v63 = v47;
        if (v62 != -1) {
          swift_once();
        }
        uint64_t v64 = (void *)qword_1009421A0;
        *(void *)(v61 + 32) = qword_1009421A0;
        uint64_t v65 = qword_1009073C8;
        id v66 = v64;
        if (v65 != -1) {
          swift_once();
        }
        int v47 = (void *)qword_100942188;
        *(void *)(v61 + 40) = qword_100942188;
        unint64_t v88 = v61;
        specialized Array._endMutation()();
        unint64_t v48 = v88;
      }
      id v67 = v47;
      swift_bridgeObjectRetain();
      sub_100200CD0(v48);
      id v53 = v12;
      goto LABEL_59;
    case 2u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v9, v21, v6);
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v30 = swift_allocObject();
      long long v82 = xmmword_10077A530;
      *(_OWORD *)(v30 + 16) = xmmword_10077A530;
      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v15, enum case for REMRemindersListDataView.SortingDirection.descending(_:), v6);
      sub_10052C300((unint64_t *)&qword_10090A9A0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SortingDirection);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      unint64_t v32 = v88;
      unint64_t v31 = v89;
      uint64_t v33 = *(void (**)(char *, uint64_t))(v7 + 8);
      v33(v15, v6);
      if (v31 == v32)
      {
        if (qword_1009073E8 != -1) {
          swift_once();
        }
        uint64_t v34 = &qword_1009421A8;
      }
      else
      {
        if (qword_1009073E0 != -1) {
          swift_once();
        }
        uint64_t v34 = &qword_1009421A0;
      }
      uint64_t v26 = v84;
      id v42 = (void *)*v34;
      *(void *)(v30 + 32) = *v34;
      unint64_t v89 = v30;
      specialized Array._endMutation()();
      if (v83)
      {
        unint64_t v43 = v83;
      }
      else
      {
        uint64_t v49 = swift_allocObject();
        *(_OWORD *)(v49 + 16) = v82;
        uint64_t v50 = qword_1009073C8;
        id v51 = v42;
        if (v50 != -1) {
          swift_once();
        }
        id v42 = (void *)qword_100942188;
        *(void *)(v49 + 32) = qword_100942188;
        unint64_t v88 = v49;
        specialized Array._endMutation()();
        unint64_t v43 = v88;
      }
      id v52 = v42;
      swift_bridgeObjectRetain();
      sub_100200CD0(v43);
      id v53 = v9;
LABEL_59:
      v33(v53, v6);
      goto LABEL_60;
    case 3u:
      if (v83)
      {
        unint64_t v35 = v83;
        uint64_t v26 = v84;
        uint64_t v36 = v86;
      }
      else
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v54 = swift_allocObject();
        *(_OWORD *)(v54 + 16) = xmmword_10077B710;
        uint64_t v26 = v84;
        uint64_t v36 = v86;
        if (qword_1009073E0 != -1) {
          swift_once();
        }
        uint64_t v55 = (void *)qword_1009421A0;
        *(void *)(v54 + 32) = qword_1009421A0;
        uint64_t v56 = qword_1009073C8;
        id v57 = v55;
        if (v56 != -1) {
          swift_once();
        }
        unint64_t v58 = (void *)qword_100942188;
        *(void *)(v54 + 40) = qword_100942188;
        unint64_t v89 = v54;
        specialized Array._endMutation()();
        unint64_t v35 = v89;
        id v59 = v58;
      }
      uint64_t v60 = v85;
      unint64_t v89 = v35;
      swift_bridgeObjectRetain();
      sub_10052C290((uint64_t)v21, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      goto LABEL_61;
    case 4u:
      uint64_t v27 = (void *)v21[5];
      sub_1001F84E8(*v21);

      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_10077A530;
      if (qword_1009073E0 != -1) {
        swift_once();
      }
      uint64_t v29 = (void *)qword_1009421A0;
      goto LABEL_24;
    case 5u:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_10077A530;
      if (qword_1009073C8 != -1) {
        swift_once();
      }
      uint64_t v29 = (void *)qword_100942188;
LABEL_24:
      *(void *)(v28 + 32) = v29;
      unint64_t v89 = v28;
      specialized Array._endMutation()();
      id v41 = v29;
      uint64_t v26 = v84;
LABEL_60:
      uint64_t v60 = v85;
      uint64_t v36 = v86;
      goto LABEL_61;
    default:
      (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v18, v21, v6);
      unint64_t v89 = (unint64_t)_swiftEmptyArrayStorage;
      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v15, enum case for REMRemindersListDataView.SortingDirection.descending(_:), v6);
      sub_10052C300((unint64_t *)&qword_10090A9A0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SortingDirection);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v23 = v87;
      unint64_t v22 = v88;
      uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
      v24(v15, v6);
      if (v22 == v23)
      {
        if (qword_100907408 != -1) {
          swift_once();
        }
        id v25 = (id)qword_1009421C8;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v26 = v84;
        if (*(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        if (qword_100907400 != -1) {
          swift_once();
        }
        uint64_t v26 = v84;
        if (!qword_1009421C0)
        {
          if (qword_100907788 != -1) {
            swift_once();
          }
          uint64_t v71 = type metadata accessor for Logger();
          sub_10008E2DC(v71, (uint64_t)qword_10091C468);
          id v72 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.fault.getter();
          BOOL v74 = os_log_type_enabled(v72, v73);
          uint64_t v36 = v86;
          if (v74)
          {
            id v75 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v75 = 0;
            _os_log_impl((void *)&_mh_execute_header, v72, v73, "REMCDReminder.displayDateSortDescriptor should not be nil", v75, 2u);
            swift_slowDealloc();
          }

          unint64_t v45 = v83;
          if (v83) {
            goto LABEL_37;
          }
          goto LABEL_74;
        }
        id v44 = (id)qword_1009421C0;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      uint64_t v36 = v86;
      unint64_t v45 = v83;
      if (v83)
      {
LABEL_37:
        unint64_t v46 = v45;
        goto LABEL_79;
      }
LABEL_74:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = xmmword_10077B710;
      if (qword_1009073E0 != -1) {
        swift_once();
      }
      long long v77 = (void *)qword_1009421A0;
      *(void *)(v76 + 32) = qword_1009421A0;
      uint64_t v78 = qword_1009073C8;
      id v79 = v77;
      if (v78 != -1) {
        swift_once();
      }
      uint64_t v80 = (void *)qword_100942188;
      *(void *)(v76 + 40) = qword_100942188;
      unint64_t v88 = v76;
      specialized Array._endMutation()();
      unint64_t v46 = v88;
      id v81 = v80;
LABEL_79:
      swift_bridgeObjectRetain();
      sub_100200CD0(v46);
      v24(v18, v6);
      uint64_t v60 = v85;
LABEL_61:
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v36, v60, v26);
      int v68 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v36, v26);
      if (v68 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v36, v26);
      }
      else if (v68 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
      {
        (*(void (**)(char *, uint64_t))(v4 + 96))(v36, v26);
        swift_bridgeObjectRelease();
      }
      else if (v68 != enum case for REMRemindersListDataView.ShowCompleted.off(_:))
      {
        if (v68 != enum case for REMRemindersListDataView.ShowCompleted.on(_:))
        {
          _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          JUMPOUT(0x100527F2CLL);
        }
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v69 = swift_allocObject();
        *(_OWORD *)(v69 + 16) = xmmword_10077A530;
        sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
        swift_getKeyPath();
        *(void *)(v69 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
        unint64_t v88 = v69;
        specialized Array._endMutation()();
        sub_100200CD0(v89);
        return v88;
      }
      return v89;
  }
}

void *sub_100527F44(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v6 = v5;
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_19;
        }
        id v8 = [v5 remObjectID];
        if (v8)
        {
          uint64_t v9 = v8;
          if (![v6 completed])
          {

LABEL_15:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            goto LABEL_5;
          }
          char v10 = sub_1001CBD58(v9, a2);

          if (v10) {
            goto LABEL_15;
          }
        }

LABEL_5:
        ++v4;
        if (v7 == v3) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1005280D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, objc_class *a5)
{
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v74 - v16;
  __chkstk_darwin(v18);
  id v81 = (char *)&v74 - v20;
  if (a1 < 1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v87 = v19;
  uint64_t v76 = a5;
  uint64_t v77 = a3;
  sub_100094134(&qword_10091C4A0);
  swift_allocObject();
  uint64_t v21 = MutableOrderedSet.init(_:)();
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v88 = v21;
  uint64_t v83 = v22;
  if (v22)
  {
    id v75 = a4;
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    unint64_t v78 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v82 = a2 + v78;
    uint64_t v92 = *(void *)(v11 + 72);
    uint64_t v93 = v23;
    uint64_t v24 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v74 = a2;
    swift_bridgeObjectRetain();
    uint64_t v25 = 0;
    *(void *)&long long v26 = 138543362;
    long long v84 = v26;
    uint64_t v89 = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v90 = v11 + 16;
    uint64_t v85 = a1;
    uint64_t v27 = v81;
    id v79 = v13;
    unint64_t v91 = v17;
    while (1)
    {
      uint64_t v86 = v25;
      v93(v27, v82 + v92 * v25, v10);
      if (MutableOrderedSet.count.getter() >= a1) {
        break;
      }
      uint64_t v29 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
      uint64_t v94 = v29;
      char v30 = MutableOrderedSet.contains(_:)();

      if (v30)
      {
        if (qword_100907788 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_10008E2DC(v31, (uint64_t)qword_10091C468);
        v93(v13, (uint64_t)v27, v10);
        unint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = swift_slowAlloc();
          unint64_t v35 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v34 = v84;
          uint64_t v36 = REMRemindersListDataView.ReminderLite.objectID.getter();
          *(void *)(v34 + 4) = v36;
          *unint64_t v35 = v36;
          uint64_t v28 = *v24;
          (*v24)(v13, v10);
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Attempted to fetch duplicate initial reminders {reminderLite.objectID: %{public}@}", (uint8_t *)v34, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          a1 = v85;
          swift_slowDealloc();
        }
        else
        {

          uint64_t v28 = *v24;
          (*v24)(v13, v10);
        }
        v28(v27, v10);
      }
      else
      {
        uint64_t v37 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
        uint64_t v94 = v37;
        MutableOrderedSet.add(_:)();

        unint64_t v38 = (void *)REMRemindersListDataView.ReminderLite.subtasks.getter();
        if (!v38) {
          unint64_t v38 = _swiftEmptyArrayStorage;
        }
        uint64_t v39 = v38[2];
        if (v39)
        {
          uint64_t v80 = v38;
          double v40 = (char *)v38 + v78;
          do
          {
            v93(v17, (uint64_t)v40, v10);
            if (MutableOrderedSet.count.getter() >= a1)
            {
              uint64_t v56 = *v24;
              (*v24)(v17, v10);
              swift_bridgeObjectRelease();
              uint64_t v27 = v81;
              v56(v81, v10);
              uint64_t v13 = v79;
              goto LABEL_5;
            }
            unint64_t v43 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
            uint64_t v94 = v43;
            char v44 = MutableOrderedSet.contains(_:)();

            if (v44)
            {
              uint64_t v45 = v10;
              unint64_t v46 = v24;
              if (qword_100907788 != -1) {
                swift_once();
              }
              uint64_t v47 = type metadata accessor for Logger();
              sub_10008E2DC(v47, (uint64_t)qword_10091C468);
              unint64_t v48 = v87;
              v93(v87, (uint64_t)v91, v45);
              uint64_t v49 = Logger.logObject.getter();
              os_log_type_t v50 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled(v49, v50))
              {
                uint64_t v51 = swift_slowAlloc();
                id v52 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v51 = v84;
                uint64_t v53 = REMRemindersListDataView.ReminderLite.objectID.getter();
                *(void *)(v51 + 4) = v53;
                *id v52 = v53;
                id v42 = *v46;
                uint64_t v54 = v48;
                uint64_t v24 = v46;
                (*v46)(v54, v45);
                _os_log_impl((void *)&_mh_execute_header, v49, v50, "Attempted to fetch duplicate initial reminders {subtask.objectID: %{public}@}", (uint8_t *)v51, 0xCu);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                a1 = v85;
                swift_slowDealloc();
              }
              else
              {

                id v42 = *v46;
                uint64_t v55 = v48;
                uint64_t v24 = v46;
                (*v46)(v55, v45);
              }
              uint64_t v10 = v45;
              uint64_t v17 = v91;
              v42(v91, v10);
            }
            else
            {
              id v41 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
              uint64_t v94 = v41;
              MutableOrderedSet.add(_:)();

              id v42 = *v24;
              (*v24)(v17, v10);
            }
            v40 += v92;
            --v39;
          }
          while (v39);
          swift_bridgeObjectRelease();
          uint64_t v13 = v79;
        }
        else
        {
          swift_bridgeObjectRelease();
          id v42 = *v24;
        }
        uint64_t v27 = v81;
        v42(v81, v10);
      }
LABEL_5:
      uint64_t v25 = v86 + 1;
      if (v86 + 1 == v83) {
        goto LABEL_32;
      }
    }
    (*v24)(v27, v10);
LABEL_32:
    swift_bridgeObjectRelease();
    a4 = v75;
  }
  unint64_t v57 = MutableOrderedSet.array.getter();
  unint64_t v58 = v57;
  uint64_t v94 = _swiftEmptyArrayStorage;
  if (v57 >> 62) {
    goto LABEL_46;
  }
  uint64_t v59 = *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v59)
  {
LABEL_35:
    uint64_t v60 = 4;
    while (1)
    {
      uint64_t v61 = v60 - 4;
      if ((v58 & 0xC000000000000001) != 0)
      {
        id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v63 = v60 - 3;
        if (__OFADD__(v61, 1)) {
          goto LABEL_45;
        }
      }
      else
      {
        id v62 = *(id *)(v58 + 8 * v60);
        uint64_t v63 = v60 - 3;
        if (__OFADD__(v61, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          swift_bridgeObjectRetain();
          uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
          if (!v59) {
            break;
          }
          goto LABEL_35;
        }
      }
      id v64 = v62;
      sub_100693E40(v64);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v94[2] >= v94[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      ++v60;
      if (v63 == v59)
      {
        swift_bridgeObjectRelease();
        uint64_t v65 = v94;
        goto LABEL_48;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v65 = _swiftEmptyArrayStorage;
LABEL_48:
  swift_bridgeObjectRelease();
  id v66 = sub_10039CE28();
  uint64_t v67 = v77;
  int v68 = sub_100697018((uint64_t)v65, 0, 1, (uint64_t)v66, v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v69 = [self defaultFetchOptions];
  id v70 = [v69 fetchOptionsIncludingDueDateDeltaAlerts];

  id v71 = v70;
  uint64_t v73 = sub_10039E084((unint64_t)v68, v71, v67, a4);
  swift_release();
  swift_bridgeObjectRelease();

  return (void *)v73;
}

void *sub_100528BCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, objc_class *a5)
{
  uint64_t v61 = a5;
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)v58 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v17((char *)v58 - v15, a2, v9, v14);
  if (a1 < 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    return _swiftEmptyArrayStorage;
  }
  uint64_t v59 = a4;
  uint64_t v60 = a3;
  uint64_t v18 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter();
  if ((v18 & 0xC000000000000001) != 0) {
    uint64_t v19 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v19 = *(void *)(v18 + 16);
  }
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v17)(v12, v16, v9);
  if (v19)
  {
    uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v12, v9);
    v20(v16, v9);
    goto LABEL_12;
  }
  uint64_t v21 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter();
  if ((v21 & 0xC000000000000001) != 0) {
    uint64_t v22 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v22 = *(void *)(v21 + 16);
  }
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v12, v9);
  v23(v16, v9);
  if (!v22) {
    return _swiftEmptyArrayStorage;
  }
LABEL_12:
  uint64_t v24 = (void *)REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter();
  unint64_t v25 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter();
  sub_10065D03C(v25, v24);
  uint64_t v27 = (uint64_t)sub_100209B04(v26);
  swift_bridgeObjectRelease();
  LODWORD(v28) = v27 < 0 || (v27 & 0x4000000000000000) != 0;
  if (v28 == 1) {
    goto LABEL_45;
  }
  if (*(void *)(v27 + 16) >= a1) {
    uint64_t v29 = a1;
  }
  else {
    uint64_t v29 = *(void *)(v27 + 16);
  }
  while (1)
  {
    if ((v27 & 0xC000000000000001) != 0 && v29)
    {
      type metadata accessor for REMObjectID_Codable();
      Swift::Int v30 = 0;
      do
      {
        a1 = v30 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v30);
        Swift::Int v30 = a1;
      }
      while (v29 != a1);
    }
    if (v28)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      a1 = v36;
      swift_release_n();
      uint64_t v29 = (unint64_t)a1 >> 1;
      uint64_t v27 = v31;
    }
    else
    {
      uint64_t v35 = 0;
      uint64_t v33 = v27 + 32;
    }
    uint64_t v37 = v29 - v35;
    if (__OFSUB__(v29, v35)) {
      goto LABEL_52;
    }
    if (!v37) {
      break;
    }
    uint64_t v63 = _swiftEmptyArrayStorage;
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v37 < 0)
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      return result;
    }
    v58[1] = v27;
    uint64_t v27 = 0;
    a1 = 0;
    while (1)
    {
      uint64_t v39 = v27 + 1;
      if (__OFADD__(v27, 1)) {
        break;
      }
      if (v35 + v27 >= v29 || v27 >= v37) {
        goto LABEL_44;
      }
      id v40 = *(id *)(v33 + 8 * v35 + 8 * v27);
      sub_100693E40(v40);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v28 = v63[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      ++v27;
      if (v39 == v37)
      {
        id v41 = v63;
        swift_unknownObjectRelease();
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    swift_bridgeObjectRetain();
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = (void *)swift_release();
    if (v55 >= a1) {
      uint64_t v29 = a1;
    }
    else {
      uint64_t v29 = v55;
    }
    if (v29 < 0) {
      goto LABEL_54;
    }
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = (void *)swift_release();
    if (v56 < 0) {
      goto LABEL_55;
    }
    swift_bridgeObjectRetain();
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v57 < v29)
    {
      __break(1u);
LABEL_52:
      __break(1u);
      swift_once();
      uint64_t v48 = type metadata accessor for Logger();
      sub_10008E2DC(v48, (uint64_t)qword_10091C468);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v51 = 136446210;
        uint64_t v62 = a1;
        swift_errorRetain();
        sub_100094134((uint64_t *)&unk_10090ABB0);
        uint64_t v52 = String.init<A>(describing:)();
        uint64_t v62 = sub_1000C51B8(v52, v53, (uint64_t *)&v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Failed to fetch reminders from reminderLites. Not returning initial reminder {error: %{public}s}", v51, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRelease();
      return _swiftEmptyArrayStorage;
    }
  }
  swift_unknownObjectRelease();
  id v41 = _swiftEmptyArrayStorage;
LABEL_36:
  uint64_t v42 = v60;
  unint64_t v43 = sub_10039CE28();
  char v44 = sub_100697018((uint64_t)v41, 0, 1, (uint64_t)v43, v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v45 = [self defaultFetchOptions];
  id v46 = [v45 fetchOptionsIncludingDueDateDeltaAlerts];

  id v47 = v46;
  uint64_t v54 = sub_10039E084((unint64_t)v44, v47, v42, v59);
  swift_bridgeObjectRelease();

  return (void *)v54;
}

void *sub_10052929C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v91 = a1;
  uint64_t v92 = a5;
  uint64_t v8 = _s10PredicatesOMa(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v85 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v85 - v15;
  uint64_t v17 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v96 = (char *)&v85 - v23;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v100 = *(void *)(a2 + 16);
  if (v100)
  {
    uint64_t v86 = v10;
    uint64_t v88 = v8;
    uint64_t v89 = v13;
    uint64_t v90 = a3;
    uint64_t v85 = a4;
    uint64_t v93 = (uint64_t *)v16;
    v105[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    uint64_t v26 = v18 + 16;
    unint64_t v25 = v27;
    unint64_t v95 = (*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64);
    uint64_t v28 = v22 + v95;
    uint64_t v29 = *(void *)(v26 + 56);
    Swift::Int v30 = (void (**)(char *, uint64_t))(v26 - 8);
    uint64_t v87 = v22;
    swift_bridgeObjectRetain();
    uint64_t v31 = 0;
    long long v99 = xmmword_10077A530;
    uint64_t v32 = v96;
    uint64_t v103 = (void (*)(char *, unint64_t, uint64_t))v27;
    uint64_t v94 = v28;
    uint64_t v101 = v29;
    do
    {
      uint64_t v102 = v31;
      v25(v32, v28 + v29 * v31, v17);
      uint64_t v35 = REMRemindersListDataView.ReminderLite.subtasks.getter();
      if (v35)
      {
        uint64_t v36 = v35;
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v37 = swift_allocObject();
        *(_OWORD *)(v37 + 16) = v99;
        *(void *)(v37 + 32) = REMRemindersListDataView.ReminderLite.objectID.getter();
        uint64_t v104 = (void *)v37;
        specialized Array._endMutation()();
        unint64_t v38 = v104;
        uint64_t v39 = *(void *)(v36 + 16);
        if (v39)
        {
          uint64_t v97 = v104;
          uint64_t v104 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v98 = v36;
          unint64_t v40 = v36 + v95;
          uint64_t v41 = v101;
          do
          {
            v103(v20, v40, v17);
            REMRemindersListDataView.ReminderLite.objectID.getter();
            (*v30)(v20, v17);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v40 += v41;
            --v39;
          }
          while (v39);
          uint64_t v42 = v104;
          swift_bridgeObjectRelease();
          uint64_t v32 = v96;
          unint64_t v38 = v97;
          uint64_t v28 = v94;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v42 = _swiftEmptyArrayStorage;
        }
        uint64_t v104 = v38;
        sub_100200CE8((unint64_t)v42);
        unint64_t v34 = (unint64_t)v104;
        unint64_t v25 = (void (*)(char *, uint64_t, uint64_t))v103;
      }
      else
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = v99;
        *(void *)(v33 + 32) = REMRemindersListDataView.ReminderLite.objectID.getter();
        uint64_t v104 = (void *)v33;
        specialized Array._endMutation()();
        unint64_t v34 = (unint64_t)v104;
      }
      uint64_t v31 = v102 + 1;
      (*v30)(v32, v17);
      sub_100200CE8(v34);
      uint64_t v29 = v101;
    }
    while (v31 != v100);
    swift_bridgeObjectRelease();
    uint64_t v43 = v105[0];
    if (qword_100907788 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    uint64_t v45 = sub_10008E2DC(v44, (uint64_t)qword_10091C468);
    swift_bridgeObjectRetain_n();
    id v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      v105[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315138;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v49 = Array.description.getter();
      unint64_t v51 = v50;
      swift_bridgeObjectRelease();
      uint64_t v104 = (void *)sub_1000C51B8(v49, v51, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "fetchRemindersDue objectIDs %s", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v52 = v93;
    uint64_t v53 = sub_100094134(&qword_100916978);
    uint64_t v54 = (char *)v52 + *(int *)(v53 + 48);
    uint64_t v55 = (char *)v52 + *(int *)(v53 + 64);
    *uint64_t v52 = v43;
    uint64_t v56 = type metadata accessor for Date();
    uint64_t v57 = *(void *)(v56 - 8);
    unint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
    uint64_t v59 = v91;
    v58(v54, v91, v56);
    uint64_t v60 = *(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56);
    v60(v54, 0, 1, v56);
    uint64_t v61 = sub_100094134(&qword_100909C68);
    v58(v55, v59 + *(int *)(v61 + 36), v56);
    v60(v55, 0, 1, v56);
    swift_storeEnumTagMultiPayload();
    uint64_t v62 = (uint64_t)v89;
    sub_10052C360((uint64_t)v52, (uint64_t)v89, _s10PredicatesOMa);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      uint64_t v103 = (void (*)(char *, unint64_t, uint64_t))v45;
      v105[0] = v66;
      *(_DWORD *)uint64_t v65 = 136315138;
      sub_10052C360(v62, (uint64_t)v86, _s10PredicatesOMa);
      uint64_t v67 = String.init<A>(describing:)();
      uint64_t v104 = (void *)sub_1000C51B8(v67, v68, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v52 = v93;
      swift_bridgeObjectRelease();
      sub_10052C290(v62, _s10PredicatesOMa);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "fetchRemindersDue predicate %s", v65, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10052C290(v62, _s10PredicatesOMa);
    }

    uint64_t v69 = v90;
    uint64_t v70 = v92;
    if (qword_100907418 != -1) {
      swift_once();
    }
    unint64_t v71 = sub_10039E88C((uint64_t)v52, (objc_class *)qword_1009421D8, v69, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, v70);
    swift_bridgeObjectRetain_n();
    id v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      v105[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v74 = 136315138;
      uint64_t v103 = (void (*)(char *, unint64_t, uint64_t))(v74 + 4);
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      swift_bridgeObjectRetain();
      uint64_t v75 = Array.description.getter();
      unint64_t v77 = v76;
      swift_bridgeObjectRelease();
      uint64_t v104 = (void *)sub_1000C51B8(v75, v77, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v52 = v93;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "fetchRemindersDue cdReminders %s", v74, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v78 = self;
    id v79 = [v78 defaultFetchOptions];
    id v80 = v79;
    if (!v79) {
      id v80 = [v78 defaultFetchOptions];
    }
    id v81 = v79;
    id v82 = [v80 fetchOptionsIncludingDueDateDeltaAlerts];

    id v83 = v82;
    uint64_t v84 = sub_10039E084(v71, v83, v90, v85);

    sub_10052C290((uint64_t)v52, _s10PredicatesOMa);
    swift_bridgeObjectRelease();

    return (void *)v84;
  }
  return result;
}

id sub_100529EE0(void *a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  return sub_1000CE9E8(a1, a2, a3, a4, a5);
}

void *sub_10052A220(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t), uint64_t a3, void *a4, objc_class *a5, uint64_t a6)
{
  return sub_10052A27C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.DatesModel.Group, (uint64_t (*)(uint64_t))&REMRemindersListDataView.DatesModel.Group.reminders.getter);
}

void *sub_10052A250(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t), uint64_t a3, void *a4, objc_class *a5, uint64_t a6)
{
  return sub_10052A27C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, __n128))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist, (uint64_t (*)(uint64_t))&REMRemindersListDataView.ListsModel.Sublist.reminders.getter);
}

void *sub_10052A27C(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t), uint64_t a3, void *a4, objc_class *a5, uint64_t a6, uint64_t (*a7)(void, __n128), uint64_t (*a8)(uint64_t))
{
  uint64_t v57 = a8;
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v13 = sub_100094134(&qword_100909C68);
  __n128 v14 = __chkstk_darwin(v13 - 8);
  uint64_t v56 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a7(0, v14);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v53 - v18;
  uint64_t v20 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v22 = __chkstk_darwin(v20);
  uint64_t v24 = (uint64_t *)((char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v21 + 16))(v24, a1, v20, v22);
  int v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(v21 + 88))(v24, v20);
  if (v25 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v21 + 96))(v24, v20);
    uint64_t v26 = *v24;
    uint64_t v27 = _swiftEmptyArrayStorage;
    uint64_t v60 = _swiftEmptyArrayStorage;
    uint64_t v28 = *(void *)(a6 + 16);
    if (v28)
    {
      uint64_t v55 = a5;
      uint64_t v56 = v26;
      uint64_t v54 = a4;
      Swift::Int v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16);
      uint64_t v29 = v17 + 16;
      uint64_t v59 = v30;
      uint64_t v31 = a6 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
      uint64_t v32 = *(void *)(v29 + 56);
      uint64_t v33 = (void (**)(char *, uint64_t))(v29 - 8);
      unint64_t v34 = v57;
      do
      {
        uint64_t v35 = v59(v19, v31, v16);
        uint64_t v36 = v34(v35);
        (*v33)(v19, v16);
        sub_1002026F8(v36);
        v31 += v32;
        --v28;
      }
      while (v28);
      uint64_t v27 = v60;
      a4 = v54;
      a5 = v55;
      uint64_t v26 = v56;
    }
    uint64_t v37 = sub_1005280D0(v26, (uint64_t)v27, v58, a4, a5);
    swift_bridgeObjectRelease();
    return v37;
  }
  if (v25 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v21 + 96))(v24, v20);
    return sub_100528BCC(*v24, (uint64_t)v59, v58, a4, a5);
  }
  if (v25 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v21 + 96))(v24, v20);
    uint64_t v39 = *v24;
    uint64_t v40 = sub_100094134(&qword_100909C78);
    sub_100096408((uint64_t)v24 + *(int *)(v40 + 48), v56, &qword_100909C68);
    uint64_t v41 = _swiftEmptyArrayStorage;
    uint64_t v60 = _swiftEmptyArrayStorage;
    uint64_t v42 = *(void *)(a6 + 16);
    if (v42)
    {
      uint64_t v53 = v39;
      uint64_t v54 = a4;
      uint64_t v55 = a5;
      uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16);
      uint64_t v43 = v17 + 16;
      uint64_t v59 = v44;
      uint64_t v45 = a6 + ((*(unsigned __int8 *)(v43 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 64));
      uint64_t v46 = *(void *)(v43 + 56);
      os_log_type_t v47 = (void (**)(char *, uint64_t))(v43 - 8);
      uint64_t v48 = v57;
      do
      {
        uint64_t v49 = v59(v19, v45, v16);
        uint64_t v50 = v48(v49);
        (*v47)(v19, v16);
        sub_1002026F8(v50);
        v45 += v46;
        --v42;
      }
      while (v42);
      uint64_t v41 = v60;
      a4 = v54;
      a5 = v55;
      uint64_t v39 = v53;
    }
    uint64_t v51 = v58;
    uint64_t v37 = sub_1005280D0(v39, (uint64_t)v41, v58, a4, a5);
    uint64_t v52 = v56;
    sub_10052929C(v56, (uint64_t)v41, v51, a4, (uint64_t)a5);
    swift_bridgeObjectRelease();
    sub_1000966BC(v52, &qword_100909C68);
    return v37;
  }
  if (v25 == enum case for REMRemindersListDataView.RemindersPrefetch.none(_:)) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t result = (void *)_diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

void *sub_10052A740(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, objc_class *a5, uint64_t a6)
{
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v10 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v10 - 8);
  uint64_t v48 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v18 = __chkstk_darwin(v16);
  uint64_t v20 = (uint64_t *)((char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v17 + 16))(v20, a1, v16, v18);
  int v21 = (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 88))(v20, v16);
  if (v21 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v20, v16);
    uint64_t v22 = *v20;
    uint64_t v51 = _swiftEmptyArrayStorage;
    uint64_t v23 = *(void *)(a6 + 16);
    if (v23)
    {
      os_log_type_t v47 = a5;
      uint64_t v48 = v22;
      uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      uint64_t v24 = v13 + 16;
      int v25 = v26;
      uint64_t v27 = a6 + ((*(unsigned __int8 *)(v24 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 64));
      uint64_t v28 = *(void *)(v24 + 56);
      do
      {
        v25(v15, v27, v12);
        uint64_t v29 = REMRemindersListDataView.ListsSectionsModel.List.sections.getter();
        (*(void (**)(char *, uint64_t))(v24 - 8))(v15, v12);
        sub_100203524(v29);
        v27 += v28;
        --v23;
      }
      while (v23);
      a5 = v47;
      uint64_t v22 = v48;
    }
    uint64_t v30 = Array<A>.reminders.getter();
    swift_bridgeObjectRelease();
    uint64_t v31 = sub_1005280D0(v22, v30, v49, v50, a5);
    swift_bridgeObjectRelease();
    return v31;
  }
  if (v21 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v20, v16);
    return sub_100528BCC(*v20, a2, v49, v50, a5);
  }
  if (v21 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v20, v16);
    uint64_t v33 = *v20;
    uint64_t v34 = sub_100094134(&qword_100909C78);
    sub_100096408((uint64_t)v20 + *(int *)(v34 + 48), v48, &qword_100909C68);
    uint64_t v51 = _swiftEmptyArrayStorage;
    uint64_t v35 = *(void *)(a6 + 16);
    if (v35)
    {
      uint64_t v46 = v33;
      os_log_type_t v47 = a5;
      unint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      uint64_t v36 = v13 + 16;
      uint64_t v37 = v38;
      uint64_t v39 = a6 + ((*(unsigned __int8 *)(v36 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 64));
      uint64_t v40 = *(void *)(v36 + 56);
      do
      {
        v37(v15, v39, v12);
        uint64_t v41 = REMRemindersListDataView.ListsSectionsModel.List.sections.getter();
        (*(void (**)(char *, uint64_t))(v36 - 8))(v15, v12);
        sub_100203524(v41);
        v39 += v40;
        --v35;
      }
      while (v35);
      uint64_t v33 = v46;
      a5 = v47;
    }
    uint64_t v42 = Array<A>.reminders.getter();
    swift_bridgeObjectRelease();
    uint64_t v44 = v49;
    uint64_t v43 = v50;
    uint64_t v31 = sub_1005280D0(v33, v42, v49, v50, a5);
    uint64_t v45 = v48;
    sub_10052929C(v48, v42, v44, v43, (uint64_t)a5);
    swift_bridgeObjectRelease();
    sub_1000966BC(v45, &qword_100909C68);
    return v31;
  }
  if (v21 == enum case for REMRemindersListDataView.RemindersPrefetch.none(_:)) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t result = (void *)_diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

void *sub_10052ABEC(unint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v28 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_25;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0;
      unint64_t v6 = v3 & 0xC000000000000001;
      uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8;
      uint64_t v26 = a2;
      uint64_t v27 = v3 + 32;
      unint64_t v24 = v3 & 0xC000000000000001;
      uint64_t v25 = v4;
      uint64_t v23 = v3 & 0xFFFFFFFFFFFFFF8;
      while (v6)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_10:
        uint64_t v9 = v8;
        if (__OFADD__(v5++, 1)) {
          goto LABEL_24;
        }
        uint64_t v11 = *a2;
        if ((*a2 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v3 = v9;
          char v12 = __CocoaSet.contains(_:)();
          swift_bridgeObjectRelease();

          if (v12)
          {

            goto LABEL_6;
          }
        }
        else if (*(void *)(v11 + 16))
        {
          Swift::Int v13 = *(void *)(v11 + 40);
          swift_bridgeObjectRetain();
          Swift::Int v14 = NSObject._rawHashValue(seed:)(v13);
          uint64_t v15 = -1 << *(unsigned char *)(v11 + 32);
          unint64_t v16 = v14 & ~v15;
          if ((*(void *)(v11 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
          {
            uint64_t v3 = sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
            id v17 = *(id *)(*(void *)(v11 + 48) + 8 * v16);
            char v18 = static NSObject.== infix(_:_:)();

            if (v18)
            {
LABEL_20:

              swift_bridgeObjectRelease();
              uint64_t v4 = v25;
              a2 = v26;
              uint64_t v7 = v23;
              unint64_t v6 = v24;
              goto LABEL_6;
            }
            uint64_t v19 = ~v15;
            while (1)
            {
              unint64_t v16 = (v16 + 1) & v19;
              if (((*(void *)(v11 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
                break;
              }
              id v20 = *(id *)(*(void *)(v11 + 48) + 8 * v16);
              char v21 = static NSObject.== infix(_:_:)();

              if (v21) {
                goto LABEL_20;
              }
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v4 = v25;
          a2 = v26;
          uint64_t v7 = v23;
          unint64_t v6 = v24;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t v3 = (uint64_t)&v28;
        specialized ContiguousArray._endMutation()();
LABEL_6:
        if (v5 == v4) {
          return v28;
        }
      }
      if (v5 < *(void *)(v7 + 16)) {
        break;
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v8 = *(id *)(v27 + 8 * v5);
    goto LABEL_10;
  }
  return _swiftEmptyArrayStorage;
}

id sub_10052AE6C(void *a1, void *a2, uint64_t a3, id a4)
{
  if (a1)
  {
    id v6 = a1;
    id v7 = sub_1001B7C30(v6);
    if (v4)
    {
    }
    else
    {
      char v18 = v7;
      [objc_allocWithZone((Class)REMSmartList) initWithStore:a4 storage:v7];
      id v19 = objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable());
      a4 = (id)REMSmartList_Codable.init(_:)();
    }
    return a4;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
LABEL_14:
    id v20 = self;
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 invalidParameterErrorWithDescription:v21];

    swift_willThrow();
    return a4;
  }
  uint64_t v15 = sub_100349CDC();
  if (!v15) {
    return 0;
  }
  unint64_t v16 = (void *)v15;
  id v17 = sub_1001B89A0(a2, v15);
  if (v4)
  {
  }
  else
  {
    uint64_t v23 = v17;
    id v24 = objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable());
    id v25 = a4;
    a4 = [v24 initWithStore:v25 storage:v23];
  }
  return a4;
}

uint64_t sub_10052B078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v63 = a5;
  uint64_t v62 = a4;
  v52[0] = a2;
  v52[1] = a1;
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  __chkstk_darwin(v6);
  uint64_t v55 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v58 = (char *)v52 - v12;
  uint64_t v13 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v13 - 8);
  uint64_t v57 = (uint64_t)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v17 = (char *)v52 - v16;
  uint64_t v18 = sub_100094134(&qword_10091C4A8);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  NSString v21 = (char *)v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  id v24 = (char *)v52 - v23;
  id v25 = (char *)v52 + *(int *)(v19 + 56) - v23;
  sub_100132738(a3, (uint64_t)v52 - v23);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v26(v25, v62, v8);
  *(void *)&v24[*(int *)(v19 + 72)] = v63;
  uint64_t v27 = &v21[*(int *)(v19 + 56)];
  sub_100132738((uint64_t)v24, (uint64_t)v21);
  uint64_t v28 = v25;
  uint64_t v29 = v58;
  uint64_t v53 = (void (*)(char *, char *, uint64_t))v26;
  v26(v27, (uint64_t)v28, v8);
  sub_100096408((uint64_t)v21, (uint64_t)v17, &qword_100909C70);
  uint64_t v30 = v9;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v62 = v8;
  v31(v29, v27, v8);
  uint64_t v61 = v17;
  uint64_t v32 = (uint64_t)v17;
  uint64_t v33 = v57;
  sub_100132738(v32, v57);
  uint64_t v34 = v59;
  uint64_t v35 = v60;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v59 + 48))(v33, 1) == 1)
  {
    uint64_t v36 = v63;
    swift_bridgeObjectRetain();
    sub_1000966BC(v33, &qword_100909C70);
    if (*(void *)(v36 + 16))
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v29, v62);
      sub_1000966BC((uint64_t)v61, &qword_100909C70);
      sub_1000966BC((uint64_t)v24, &qword_10091C4A8);
      LOBYTE(v37) = 1;
      return v37 & 1;
    }
    uint64_t v43 = v54;
    uint64_t v44 = v29;
    uint64_t v45 = v62;
    v53(v54, v29, v62);
    int v46 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v43, v45);
    if (v46 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v43, v62);
LABEL_11:
      uint64_t v47 = (uint64_t)v24;
LABEL_12:
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      uint64_t v37 = (uint64_t)[objc_allocWithZone((Class)NSFetchRequest) init];
      id v48 = [(id)swift_getObjCClassFromMetadata() entity];
      [(id)v37 setEntity:v48];

      [(id)v37 setAffectedStores:0];
      [(id)v37 setPredicate:v52[0]];
      [(id)v37 setFetchLimit:1];
      [(id)v37 setAffectedStores:0];
      uint64_t v49 = v56;
      uint64_t v50 = NSManagedObjectContext.count<A>(for:)();
      if (v49)
      {
      }
      else
      {
        uint64_t v51 = v50;

        LOBYTE(v37) = v51 > 0;
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v44, v62);
      sub_1000966BC((uint64_t)v61, &qword_100909C70);
      sub_1000966BC(v47, &qword_10091C4A8);
      return v37 & 1;
    }
    if (v46 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v43, v62);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    uint64_t v47 = (uint64_t)v24;
    if (v46 == enum case for REMRemindersListDataView.ShowCompleted.off(_:)) {
      goto LABEL_12;
    }
    if (v46 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v44, v62);
      sub_1000966BC((uint64_t)v61, &qword_100909C70);
      sub_1000966BC((uint64_t)v24, &qword_10091C4A8);
      LOBYTE(v37) = 0;
      return v37 & 1;
    }
  }
  else
  {
    uint64_t v38 = v34;
    uint64_t v39 = v55;
    uint64_t v40 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v55, v33, v35);
    swift_bridgeObjectRetain();
    uint64_t v37 = REMRemindersListDataView.CountByCompleted.incomplete.getter();
    uint64_t v41 = REMRemindersListDataView.CountByCompleted.completed.getter();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v62);
    sub_1000966BC((uint64_t)v61, &qword_100909C70);
    sub_1000966BC((uint64_t)v24, &qword_10091C4A8);
    if (!__OFADD__(v37, v41))
    {
      LOBYTE(v37) = v37 + v41 > 0;
      return v37 & 1;
    }
    __break(1u);
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t _s9UtilitiesO12SortingStyleOMa()
{
  uint64_t result = qword_10091C520;
  if (!qword_10091C520) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10052B7B0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10052B7E8(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_100524D18(a1, *(void *)(v2 + 16), *(void ***)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), *(void (**)(char *, char *, uint64_t))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), a2, *(unint64_t **)(v2 + 72), *(void *)(v2 + 80), *(unsigned char *)(v2 + 88), *(void *)(v2 + 96), *(void *)(v2 + 104), *(void ***)(v2 + 112), *(void ***)(v2 + 120));
}

uint64_t sub_10052B838(uint64_t a1, uint64_t a2, void *a3, void *a4, unint64_t a5)
{
  uint64_t v10 = (void *)(a1 + 16);
  swift_beginAccess();
  if (*(void *)(a1 + 16))
  {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  else
  {
    swift_beginAccess();
    unint64_t v12 = swift_bridgeObjectRetain();
    sub_1005242F8(v12, a3, a4, a5);
    uint64_t v11 = v13;
    swift_bridgeObjectRelease();
    if (v5) {
      return v11;
    }
    swift_beginAccess();
    *uint64_t v10 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v11;
}

uint64_t sub_10052B93C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  sub_100094134(&qword_10090C688);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  unint64_t v6 = a2 >> 62;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v7)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v7 < 0)
    {
      __break(1u);
      goto LABEL_31;
    }
    unint64_t v27 = a2 >> 62;
    uint64_t v8 = 0;
    do
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(a2 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      ++v8;
      id v11 = [v9 objectID:v27];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v7 != v8);
    unint64_t v6 = v27;
  }
  sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100776E40;
  *(void *)(v12 + 56) = sub_100094134(&qword_100908270);
  *(void *)(v12 + 64) = sub_1000967F4(&qword_10091C490, &qword_100908270);
  *(void *)(v12 + 32) = _swiftEmptyArrayStorage;
  *(void *)(inited + 32) = NSPredicate.init(format:_:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v14 = sub_10039B46C(KeyPath, 0);
  swift_release();
  *(void *)(inited + 40) = v14;
  specialized Array._endMutation()();
  uint64_t inited = sub_1002F52FC(inited);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_10077A530;
  *(void *)(v15 + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  unint64_t v16 = v15;
  if (v6)
  {
    sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    swift_bridgeObjectRetain();
    uint64_t v17 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    a2 = v17;
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
  }
  sub_100094134(&qword_10090FF00);
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  sub_1000967F4((unint64_t *)&qword_10090FE58, &qword_10090FF00);
  sub_1000ED098((unint64_t *)&qword_100910050, (unint64_t *)&qword_10090FE00);
  uint64_t v18 = Sequence.compactMapToSet<A>(_:)();
  uint64_t v19 = sub_1002099D8(v18);
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)sub_1003BC8C4(v16, 0, (uint64_t)v19, inited);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  unint64_t v20 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

LABEL_33:
    return a2;
  }
  a2 = v20;
  if (!(v20 >> 62))
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v21) {
      goto LABEL_18;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a2 = sub_100126B08((unint64_t)_swiftEmptyArrayStorage);

    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
LABEL_31:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v21 = result;
  if (!result) {
    goto LABEL_32;
  }
LABEL_18:
  if (v21 >= 1)
  {
    for (uint64_t i = 0; i != v21; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v24 = *(id *)(a2 + 8 * i + 32);
      }
      id v25 = v24;
      id v26 = [v24 remObjectID];

      if (v26)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_10052BECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  if (*(void *)(a1 + 16))
  {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  else
  {
    swift_beginAccess();
    unint64_t v9 = *(void *)(a3 + 16);
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_10052B93C(a2, v9);
    swift_bridgeObjectRelease();
    if (v3) {
      return v8;
    }
    swift_beginAccess();
    *uint64_t v7 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v8;
}

id sub_10052BFBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7)
{
  uint64_t v31 = a6;
  uint64_t v32 = a2;
  uint64_t v13 = _s10PredicatesOMa(0);
  *(void *)&double v14 = __chkstk_darwin(v13).n128_u64[0];
  unint64_t v16 = (void *)((char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v33 = 0;
  id v17 = [a1 remObjectIDWithError:&v33 v14];
  id v18 = v33;
  if (v17)
  {
    id v19 = v17;
    v30[0] = a4;
    v30[1] = v7;
    uint64_t v20 = sub_100094134(&qword_100916970);
    uint64_t v21 = (char *)v16 + *(int *)(v20 + 48);
    uint64_t v22 = *(int *)(v20 + 64);
    void *v16 = v19;
    uint64_t v23 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v21, a3, v23);
    *((unsigned char *)v16 + v22) = a7 & 1;
    swift_storeEnumTagMultiPayload();
    id v24 = v18;
    id v25 = (void *)sub_10038F1F0();
    if (qword_100907790 != -1) {
      swift_once();
    }
    id v26 = (void *)sub_1003BC8C4(qword_100942318, a5, v31, (uint64_t)v25);

    sub_100527148(v32, a3, 0);
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v26 setSortDescriptors:isa];

    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    id v28 = (id)NSManagedObjectContext.fetch<A>(_:)();
    sub_10052C290((uint64_t)v16, _s10PredicatesOMa);
  }
  else
  {
    id v28 = v33;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v28;
}

uint64_t sub_10052C270(id *a1)
{
  return sub_1005264F8(a1, *(void *)(v1 + 16));
}

uint64_t sub_10052C290(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10052C300(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10052C360(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

ValueMetadata *_s9UtilitiesOMa()
{
  return &_s9UtilitiesON;
}

void *sub_10052C3E8(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
        uint64_t v7 = type metadata accessor for REMRemindersListDataView.SortingDirection();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        if (*a2)
        {
          uint64_t v10 = a2[1];
          uint64_t v11 = a2[2];
          *a1 = *a2;
          a1[1] = v10;
          uint64_t v12 = a2[3];
          uint64_t v13 = a2[4];
          a1[2] = v11;
          a1[3] = v12;
          a1[4] = v13;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v14 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v14;
          a1[4] = a2[4];
        }
        uint64_t v15 = (void *)a2[5];
        a1[5] = v15;
        id v16 = v15;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void sub_10052C690(void *a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
      uint64_t v2 = type metadata accessor for REMRemindersListDataView.SortingDirection();
      uint64_t v3 = *(void (**)(void *, uint64_t))(*(void *)(v2 - 8) + 8);
      v3(a1, v2);
      break;
    case 4u:
      if (*a1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v4 = (void *)a1[5];

      break;
    default:
      return;
  }
}

void *sub_10052C790(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
      uint64_t v6 = type metadata accessor for REMRemindersListDataView.SortingDirection();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_8;
    case 4u:
      if (*a2)
      {
        uint64_t v7 = a2[1];
        uint64_t v8 = a2[2];
        *a1 = *a2;
        a1[1] = v7;
        uint64_t v9 = a2[3];
        uint64_t v10 = a2[4];
        a1[2] = v8;
        a1[3] = v9;
        a1[4] = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v11 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v11;
        a1[4] = a2[4];
      }
      uint64_t v12 = (void *)a2[5];
      a1[5] = v12;
      id v13 = v12;
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_10052C9E4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10052C290((uint64_t)a1, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
        uint64_t v6 = type metadata accessor for REMRemindersListDataView.SortingDirection();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_9;
      case 4u:
        if (*a2)
        {
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          a1[4] = a2[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v7 = *(_OWORD *)a2;
          long long v8 = *((_OWORD *)a2 + 1);
          a1[4] = a2[4];
          *(_OWORD *)a1 = v7;
          *((_OWORD *)a1 + 1) = v8;
        }
        uint64_t v9 = (void *)a2[5];
        a1[5] = v9;
        id v10 = v9;
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_10052CC6C(void *a1, const void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
      uint64_t v6 = type metadata accessor for REMRemindersListDataView.SortingDirection();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_10052CE3C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10052C290((uint64_t)a1, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
        uint64_t v6 = type metadata accessor for REMRemindersListDataView.SortingDirection();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10052D030()
{
  uint64_t result = type metadata accessor for REMRemindersListDataView.SortingDirection();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void **_s9UtilitiesO29ManualSortHintPersistenceHostOwca(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void **_s9UtilitiesO29ManualSortHintPersistenceHostOwta(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *_s9UtilitiesO29ManualSortHintPersistenceHostOMa()
{
  return &_s9UtilitiesO29ManualSortHintPersistenceHostON;
}

void sub_10052D14C()
{
}

uint64_t sub_10052D164(uint64_t a1)
{
  uint64_t result = sub_10052EC70(&qword_10091C578, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AllSectionsInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10052D1BC@<X0>(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v62 = a3;
  uint64_t v66 = a5;
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel();
  uint64_t v67 = *(void *)(v7 - 8);
  uint64_t v68 = v7;
  __chkstk_darwin(v7);
  os_log_type_t v64 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v65 = (char *)&v52 - v10;
  uint64_t v11 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v60 = *(void *)(v11 - 8);
  uint64_t v61 = v11;
  __chkstk_darwin(v11);
  uint64_t v59 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v63 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v18 = (char *)&v52 - v17;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v73 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v52 - v22;
  __chkstk_darwin(v24);
  id v26 = (char *)&v52 - v25;
  uint64_t v27 = a4;
  REMRemindersListDataView.AllSectionsInvocation.Parameters.configuration.getter();
  uint64_t v28 = v72;
  unint64_t v29 = sub_1001252F4((uint64_t)a1, (unint64_t)v26);
  if (v28) {
    return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v26, Configuration);
  }
  uint64_t v31 = v29;
  uint64_t v72 = v30;
  uint64_t v57 = v23;
  uint64_t v58 = v27;
  uint64_t v54 = v20;
  uint64_t v55 = v15;
  uint64_t v56 = v18;
  uint64_t v32 = sub_100125148(a1);
  swift_bridgeObjectRetain();
  uint64_t v33 = v72;
  swift_bridgeObjectRetain();
  id v34 = a1;
  sub_10052E8F8((unint64_t)v32, v31, v33, (uint64_t)v34);
  uint64_t v53 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  uint64_t v37 = v73 + 8;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v73 + 8);
  uint64_t v38 = Configuration;
  v36(v26, Configuration);
  uint64_t v39 = v57;
  REMRemindersListDataView.AllSectionsInvocation.Parameters.configuration.getter();
  LOBYTE(v31) = REMRemindersListDataView.FetchConfiguration.countCompleted.getter();
  v36(v39, v38);
  uint64_t v72 = (uint64_t)v34;
  sub_100125E84((uint64_t)v34, v31 & 1);
  LOBYTE(v31) = v40;
  uint64_t v73 = v37;
  id v41 = [v69 fetchResultTokenToDiffAgainst];
  uint64_t v42 = (uint64_t)v56;
  sub_10051F2BC(v41, v72, (uint64_t)v56);

  LODWORD(v70) = v31 & 1;
  uint64_t v43 = v54;
  REMRemindersListDataView.AllSectionsInvocation.Parameters.configuration.getter();
  uint64_t v44 = (uint64_t)v59;
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter();
  v36(v43, v38);
  uint64_t v45 = v53;
  swift_bridgeObjectRetain();
  sub_10052A24C(v44, v42, v72, v62, 0, v45);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v44, v61);
  uint64_t v73 = 0;
  int v46 = v65;
  REMRemindersListDataView.ListsSectionsModel.init(lists:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
  uint64_t v48 = v67;
  uint64_t v47 = v68;
  (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v64, v46, v68);
  uint64_t v49 = v42;
  uint64_t v50 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v55, v49, v13);
  sub_10052EC70(&qword_1009138B8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel);
  sub_10052EC70(&qword_1009138C0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel);
  REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v56, v13);
}

void sub_10052D810(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v91 = a4;
  uint64_t v93 = a5;
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List.ListType();
  uint64_t v90 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v88 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v86 = (char *)&v79 - v12;
  __chkstk_darwin(v13);
  uint64_t v89 = (char *)&v79 - v14;
  uint64_t v15 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType();
  uint64_t v84 = *(void *)(v15 - 8);
  uint64_t v85 = v15;
  __chkstk_darwin(v15);
  id v83 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v25 = __chkstk_darwin(v24).n128_u64[0];
  uint64_t v92 = (char *)&v79 - v26;
  id v87 = *a1;
  id v27 = [v87 identifier:v25];
  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    goto LABEL_10;
  }
  uint64_t v28 = v27;
  uint64_t v82 = v9;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v29 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v29(v19, v23, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
LABEL_10:
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    uint64_t v43 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v93, 1, 1, v43);
    return;
  }
  uint64_t v30 = (uint64_t)v92;
  v29(v92, v19, v20);
  uint64_t v31 = v30;
  if (*(void *)(a2 + 16))
  {
    sub_100306EC4(v30);
    if (v32)
    {
      swift_bridgeObjectRetain();
      unint64_t v33 = swift_bridgeObjectRetain();
      id v81 = sub_10052E30C(v33, a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v34 = self;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v36 = [v34 objectIDWithUUID:isa];

      uint64_t v37 = qword_100907908;
      id v38 = v36;
      if (v37 != -1) {
        swift_once();
      }
      uint64_t v39 = (objc_class *)qword_100942578;
      char v40 = (objc_class *)sub_1005868C0();
      id v41 = (objc_class *)sub_100586DE0();
      uint64_t v42 = sub_10058707C((unint64_t)v36, 1, v91, v39, v40, v41);
      if (v5)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v31, v20);
        swift_bridgeObjectRelease();

        return;
      }
      unint64_t v55 = v42;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v55 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v58) {
          goto LABEL_20;
        }
      }
      else if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_20:
        uint64_t v56 = (void *)sub_1001FFDC4(v55);
        swift_bridgeObjectRelease();
        uint64_t v80 = sub_10013D83C(v56, (uint64_t)v81);
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
LABEL_25:
      swift_bridgeObjectRelease();
      sub_100094134(&qword_1009142E0);
      type metadata accessor for REMRemindersListDataView.SectionLite();
      uint64_t v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_100776E40;
      uint64_t v80 = v59;
      (*(void (**)(char *, void, uint64_t))(v84 + 104))(v83, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v85);
      REMRemindersListDataView.SectionLite.init(type:reminders:)();
      goto LABEL_26;
    }
  }
  uint64_t v44 = self;
  Class v45 = UUID._bridgeToObjectiveC()().super.isa;
  id v46 = [v44 objectIDWithUUID:v45];

  uint64_t v47 = qword_100907908;
  id v48 = v46;
  if (v47 != -1) {
    swift_once();
  }
  uint64_t v49 = (objc_class *)qword_100942578;
  uint64_t v50 = (objc_class *)sub_1005868C0();
  uint64_t v51 = (objc_class *)sub_100586DE0();
  uint64_t v52 = sub_10058707C((unint64_t)v46, 1, v91, v49, v50, v51);
  if (v5)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v31, v20);

    return;
  }
  unint64_t v53 = v52;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v53 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v57) {
      goto LABEL_25;
    }
  }
  else if (!*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_25;
  }
  uint64_t v54 = (void *)sub_1001FFDC4(v53);
  swift_bridgeObjectRelease();
  uint64_t v80 = sub_10013D83C(v54, (uint64_t)_swiftEmptyArrayStorage);
LABEL_21:
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v91 = 0;
  id v60 = v87;
  unsigned int v61 = [v87 shouldCategorizeGroceryItems];
  uint64_t v62 = v90;
  uint64_t v63 = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.grocery(_:);
  if (!v61) {
    uint64_t v63 = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.regular(_:);
  }
  os_log_type_t v64 = v86;
  uint64_t v65 = v82;
  (*(void (**)(char *, void, uint64_t))(v90 + 104))(v86, *v63, v82);
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v89, v64, v65);
  uint64_t v66 = self;
  Class v67 = UUID._bridgeToObjectiveC()().super.isa;
  id v68 = [v66 objectIDWithUUID:v67];

  uint64_t v69 = REMObjectID.codable.getter();
  id v70 = [v60 displayName];
  uint64_t v86 = (char *)v69;
  if (v70)
  {
    unint64_t v71 = v70;
    uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v85 = 0;
  }
  id v72 = [v60 color];
  if (v72)
  {
    uint64_t v73 = v72;
    REMColor.codable.getter();
  }
  uint64_t v74 = v89;
  uint64_t v75 = v90;
  uint64_t v76 = v82;
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v88, v89, v82);
  uint64_t v77 = v93;
  REMRemindersListDataView.ListsSectionsModel.List.init(listID:listName:listColor:listType:sections:)();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v76);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v92, v20);
  uint64_t v78 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v77, 0, 1, v78);
}

void *sub_10052E30C(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v48 = a2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v59 = (uint64_t)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v46 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v46 - v11;
  uint64_t v13 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v13 - 8);
  unint64_t v15 = (unint64_t)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v50 = *(v16 - 1);
  __chkstk_darwin(v16);
  uint64_t v58 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v49 = (char *)v46 - v19;
  if (a1 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20) {
      goto LABEL_3;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v20) {
    goto LABEL_33;
  }
LABEL_3:
  v46[1] = v3;
  unint64_t v57 = a1 & 0xC000000000000001;
  uint64_t v51 = (void (**)(char *, unint64_t, void *))(v50 + 32);
  uint64_t v52 = (unsigned int (**)(unint64_t, uint64_t, void *))(v50 + 48);
  id v60 = _swiftEmptyArrayStorage;
  uint64_t v21 = 4;
  unint64_t v55 = v15;
  unint64_t v56 = a1;
  uint64_t v53 = v20;
  uint64_t v54 = v16;
  uint64_t v47 = v9;
  while (1)
  {
    uint64_t v3 = v21 - 4;
    if (v57) {
      uint64_t v22 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v22 = *(id *)(a1 + 8 * v21);
    }
    uint64_t v16 = v22;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    uint64_t v61 = v21 - 3;
    id v23 = [v22 identifier];
    if (v23)
    {
      uint64_t v24 = v23;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v25 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 0, 1, v25);
    }
    else
    {
      uint64_t v25 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 1, 1, v25);
    }
    sub_1000F44F4((uint64_t)v9, (uint64_t)v12);
    type metadata accessor for UUID();
    uint64_t v26 = *(void *)(v25 - 8);
    id v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    if (v27(v12, 1, v25) == 1) {
      goto LABEL_21;
    }
    uint64_t v28 = v59;
    sub_1001248EC((uint64_t)v12, v59);
    uint64_t result = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v27)(v28, 1, v25);
    if (result == 1) {
      break;
    }
    uint64_t v30 = v48;
    uint64_t v31 = v59;
    if (!*(void *)(v48 + 16) || (unint64_t v32 = sub_100306EC4(v59), (v33 & 1) == 0))
    {
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v31, v25);
      uint64_t v9 = v47;
LABEL_21:
      id v38 = v16;
      uint64_t v36 = 0;
      unint64_t v34 = 0;
      a1 = v56;
      goto LABEL_22;
    }
    unint64_t v34 = *(void *)(*(void *)(v30 + 56) + 8 * v32);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    swift_bridgeObjectRetain();
    v35(v31, v25);
    if (v34 >> 62)
    {
      Class v45 = v16;
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v36 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v37 = v16;
    }
    a1 = v56;
    uint64_t v9 = v47;
LABEL_22:
    unint64_t v15 = v55;
    sub_100521784(v16, v36, v34, v55);
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909E50);

    uint64_t v39 = v54;
    if ((*v52)(v15, 1, v54) == 1)
    {
      sub_1000966BC(v15, &qword_10090FD78);
    }
    else
    {
      char v40 = (void (*)(char *, char *, void *))*v51;
      id v41 = v49;
      (*v51)(v49, v15, v39);
      v40(v58, v41, v39);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        unint64_t v42 = (unint64_t)v60;
      }
      else {
        unint64_t v42 = sub_1003091E4(0, v60[2] + 1, 1, (unint64_t)v60);
      }
      unint64_t v15 = *(void *)(v42 + 16);
      unint64_t v43 = *(void *)(v42 + 24);
      if (v15 >= v43 >> 1) {
        unint64_t v42 = sub_1003091E4(v43 > 1, v15 + 1, 1, v42);
      }
      *(void *)(v42 + 16) = v15 + 1;
      unint64_t v44 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
      id v60 = (void *)v42;
      v40((char *)(v42 + v44 + *(void *)(v50 + 72) * v15), v58, v39);
    }
    ++v21;
    if (v61 == v53)
    {
      swift_bridgeObjectRelease();
      return v60;
    }
  }
  __break(1u);
  return result;
}

void sub_10052E8F8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v8 = sub_100094134(&qword_1009138C8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List();
  uint64_t v30 = *(v11 - 1);
  __chkstk_darwin(v11);
  uint64_t v35 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v29 = (char *)&v27 - v14;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v15; uint64_t v15 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v34 = a1 & 0xC000000000000001;
    uint64_t v31 = v30 + 32;
    unint64_t v32 = (unsigned int (**)(char *, uint64_t, void *))(v30 + 48);
    id v38 = _swiftEmptyArrayStorage;
    uint64_t v16 = 4;
    uint64_t v27 = a4;
    unint64_t v28 = a1;
    uint64_t v33 = v15;
    uint64_t v17 = (void (**)(char *, char *, void *))(v30 + 32);
    while (1)
    {
      uint64_t v18 = v11;
      uint64_t v19 = v34 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v16);
      uint64_t v11 = v19;
      uint64_t v20 = v16 - 3;
      if (__OFADD__(v16 - 4, 1)) {
        break;
      }
      id v39 = v19;
      sub_10052D810(&v39, v36, v37, a4, (uint64_t)v10);
      if (v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

      uint64_t v11 = v18;
      if ((*v32)(v10, 1, v18) == 1)
      {
        sub_1000966BC((uint64_t)v10, &qword_1009138C8);
      }
      else
      {
        uint64_t v21 = *v17;
        uint64_t v22 = v29;
        (*v17)(v29, v10, v18);
        v21(v35, v22, v18);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v23 = (unint64_t)v38;
        }
        else {
          unint64_t v23 = sub_100309604(0, v38[2] + 1, 1, (unint64_t)v38);
        }
        unint64_t v25 = *(void *)(v23 + 16);
        unint64_t v24 = *(void *)(v23 + 24);
        if (v25 >= v24 >> 1) {
          unint64_t v23 = sub_100309604(v24 > 1, v25 + 1, 1, v23);
        }
        *(void *)(v23 + 16) = v25 + 1;
        unint64_t v26 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
        id v38 = (void *)v23;
        uint64_t v11 = v18;
        v21((char *)(v23 + v26 + *(void *)(v30 + 72) * v25), v35, v18);
        a4 = v27;
        a1 = v28;
      }
      ++v16;
      if (v20 == v33) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
LABEL_22:
  swift_bridgeObjectRelease();
}

uint64_t sub_10052EC70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10052ECB8(uint64_t a1, uint64_t a2, char a3)
{
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.fault.getter();
  uint64_t v17 = a1;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446722;
    uint64_t v8 = StaticString.description.getter();
    sub_1000C51B8(v8, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    char v16 = a3;
    uint64_t v10 = Dictionary.description.getter();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    sub_1000C51B8(v10, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v13 = Dictionary.description.getter();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    sub_1000C51B8(v13, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a3 = v16;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s; UserInfo=%s; PublicUserInfo=%{public}s",
      (uint8_t *)v7,
      0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  if (a3) {
    goto LABEL_7;
  }
  if (v17)
  {
    rdi_os_crash();
LABEL_7:
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10052EF3C(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942328, (uint64_t)REMLog_ptr, (SEL *)&selRef_xpc);
}

uint64_t sub_10052EF58(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942340, (uint64_t)REMLog_ptr, (SEL *)&selRef_changeTracking);
}

uint64_t sub_10052EF74(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942358, (uint64_t)REMLog_ptr, (SEL *)&selRef_alarmEngine);
}

uint64_t sub_10052EF90(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942370, (uint64_t)REMLog_ptr, (SEL *)&selRef_housekeepingingActivityScheduler);
}

uint64_t sub_10052EFAC(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942388, (uint64_t)REMLog_ptr, (SEL *)&selRef_cloudkit);
}

uint64_t sub_10052EFC8(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_1009423A0, (uint64_t)REMLog_ptr, (SEL *)&selRef_migration);
}

uint64_t sub_10052EFE4(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_1009423B8, (uint64_t)REMLog_ptr, (SEL *)&selRef_dataAccess);
}

uint64_t sub_10052F000(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_1009423D0, (uint64_t)REMLog_ptr, (SEL *)&selRef_notification);
}

uint64_t sub_10052F01C(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_1009423E8, (uint64_t)REMLog_ptr, (SEL *)&selRef_utility);
}

uint64_t sub_10052F038(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942400, (uint64_t)REMLog_ptr, (SEL *)&selRef_suggestedAttributes);
}

uint64_t sub_10052F054(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942418, (uint64_t)REMLog_ptr, (SEL *)&selRef_intelligentGrocery);
}

uint64_t sub_10052F070(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942430, (uint64_t)REMLog_ptr, (SEL *)&selRef_account);
}

uint64_t sub_10052F08C(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942448, (uint64_t)REMLog_ptr, (SEL *)&selRef_analytics);
}

uint64_t sub_10052F0A8(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942460, (uint64_t)REMLog_ptr, (SEL *)&selRef_siriKit);
}

uint64_t sub_10052F0C4(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942478, (uint64_t)REMLog_ptr, (SEL *)&selRef_applicationShortcut);
}

uint64_t sub_10052F0E0(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942490, (uint64_t)REMLog_ptr, (SEL *)&selRef_timelineEngine);
}

uint64_t sub_10052F0FC(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_1009424A8, (uint64_t)REMLog_ptr, (SEL *)&selRef_inlineTagAutoConvertEngine);
}

uint64_t sub_10052F118(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_1009424C0, (uint64_t)REMLog_ptr, (SEL *)&selRef_templates);
}

uint64_t sub_10052F134(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_1009424D8, (uint64_t)REMLogStore_ptr, (SEL *)&selRef_container);
}

uint64_t sub_10052F150(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_1009424F0, (uint64_t)REMLogStore_ptr, (SEL *)&selRef_stagedLightweightCoreDataMigration);
}

uint64_t sub_10052F16C(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942508, (uint64_t)REMLogStore_ptr, (SEL *)&selRef_read);
}

uint64_t sub_10052F188(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942520, (uint64_t)REMLogStore_ptr, (SEL *)&selRef_write);
}

uint64_t sub_10052F1A4(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942538, (uint64_t)REMLogStore_ptr, (SEL *)&selRef_search);
}

uint64_t sub_10052F1C0(uint64_t a1)
{
  return sub_10052F1DC(a1, qword_100942550, (uint64_t)REMLogStore_ptr, (SEL *)&selRef_utility);
}

uint64_t sub_10052F1DC(uint64_t a1, uint64_t *a2, uint64_t a3, SEL *a4)
{
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E278(v6, a2);
  sub_10008E2DC(v6, (uint64_t)a2);
  id v7 = [self *a4];
  return Logger.init(_:)();
}

uint64_t sub_10052F250()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091C580);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091C580);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10052F318(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v77 = a1;
  id v72 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = a2;
  unint64_t v12 = sub_100159F08();
  uint64_t v13 = v11;
  if (a2)
  {
    uint64_t v76 = (uint64_t)v3;
    if (v11)
    {
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v78 = 0;
      uint64_t v79 = 0xE000000000000000;
      id v15 = [v10 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v16 = UUID.uuidString.getter();
      uint64_t v18 = v17;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_bridgeObjectRelease();
      uint64_t v78 = v16;
      uint64_t v79 = v18;
      v19._countAndFlagsBits = 47;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      v20._countAndFlagsBits = v12;
      v20._object = v13;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      uint64_t v21 = sub_10032FBE8(KeyPath, v78, v79);

      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      int v24 = swift_getKeyPath();
      id v25 = [v10 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v26 = UUID.uuidString.getter();
      uint64_t v28 = v27;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v78 = v26;
      uint64_t v79 = v28;
      swift_bridgeObjectRetain();
      v29._countAndFlagsBits = 47;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      uint64_t v21 = (uint64_t)sub_10052FC78(v24, v78, v79, 6, 18, 0x4E49474542204B25, 0xED00004854495753, &qword_100914378);

      swift_release();
    }
    uint64_t v4 = (void *)v76;
  }
  else if (v11)
  {
    int v22 = swift_getKeyPath();
    uint64_t v78 = 47;
    uint64_t v79 = 0xE100000000000000;
    v23._countAndFlagsBits = v12;
    v23._object = v13;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    uint64_t v21 = (uint64_t)sub_10052FC78(v22, v78, v79, 6, 16, 0x5753444E45204B25, 0xEB00000000485449, &qword_100914378);
    swift_release();
  }
  else
  {
    uint64_t v21 = 0;
  }
  sub_100530A30();
  unint64_t v30 = (unint64_t)[objc_allocWithZone((Class)NSFetchRequest) init];
  id v31 = [(id)swift_getObjCClassFromMetadata() entity];
  [(id)v30 setEntity:v31];

  [(id)v30 setAffectedStores:0];
  [(id)v30 setPredicate:v21];
  [(id)v30 setReturnsObjectsAsFaults:0];
  uint64_t v32 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v33 = v4;
  if (v4)
  {

    return;
  }
  uint64_t v34 = v32;
  uint64_t v80 = sub_100094134(&qword_10091C638);
  uint64_t v78 = v34;
  throwingCast<A>(_:as:failureMessage:)();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v78);
  uint64_t v35 = v81;
  if (v81 >> 62)
  {
LABEL_50:
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v36 = *(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v69[1] = v33;
  id v70 = (id)v30;
  id v71 = (id)v21;
  if (!v36)
  {
    uint64_t v33 = _swiftEmptyDictionarySingleton;
LABEL_46:

    swift_bridgeObjectRelease();
    void *v72 = v33;
    return;
  }
  unint64_t v75 = v35 & 0xC000000000000001;
  uint64_t v33 = _swiftEmptyDictionarySingleton;
  uint64_t v37 = 4;
  uint64_t v73 = v36;
  uint64_t v74 = v35;
  while (1)
  {
    if (v75) {
      id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v38 = *(id *)(v35 + 8 * v37);
    }
    id v39 = v38;
    uint64_t v40 = v37 - 3;
    if (__OFADD__(v37 - 4, 1))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    id v41 = [v38 identifier];
    if (v41) {
      break;
    }

LABEL_16:
    ++v37;
    if (v40 == v36) {
      goto LABEL_46;
    }
  }
  unint64_t v42 = v41;
  uint64_t v76 = v37 - 3;
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v43;

  id v45 = [v39 managerData];
  if (v45)
  {
    id v46 = v45;
    uint64_t v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v48;
  }
  else
  {
    uint64_t v47 = 0;
    unint64_t v49 = 0xC000000000000000;
  }
  unint64_t v50 = (unint64_t)[v39 version];
  if ((v50 & 0x8000000000000000) == 0)
  {
    unint64_t v51 = v50;
    id v52 = objc_allocWithZone((Class)REMReplicaManagerSerializedData);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v21 = (uint64_t)[v52 initWithManagerData:isa version:v51];
    sub_100097F34(v47, v49);

    if (!v21)
    {
      swift_bridgeObjectRetain();
      unint64_t v30 = sub_1001806F8(v77, v44);
      uint64_t v21 = v62;
      swift_bridgeObjectRelease();
      if (v21)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v78 = (uint64_t)v33;
        uint64_t v36 = v73;
        uint64_t v35 = v74;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10031D064();
          uint64_t v33 = (void *)v78;
        }
        swift_bridgeObjectRelease();
        uint64_t v21 = *(void *)(v33[7] + 8 * v30);
        sub_1002C2184(v30, v33);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v40 = v76;
        goto LABEL_16;
      }

      goto LABEL_44;
    }
    uint64_t v35 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v78 = (uint64_t)v33;
    unint64_t v30 = v44;
    unint64_t v55 = sub_1001806F8(v77, v44);
    uint64_t v56 = v33[2];
    BOOL v57 = (v54 & 1) == 0;
    uint64_t v58 = v56 + v57;
    if (__OFADD__(v56, v57)) {
      goto LABEL_48;
    }
    char v59 = v54;
    if (v33[3] < v58)
    {
      sub_1003167EC(v58, v35);
      unint64_t v60 = sub_1001806F8(v77, v44);
      if ((v59 & 1) != (v61 & 1)) {
        goto LABEL_52;
      }
      unint64_t v55 = v60;
      uint64_t v33 = (void *)v78;
      if ((v59 & 1) == 0) {
        goto LABEL_41;
      }
LABEL_38:
      uint64_t v64 = v33[7];

      *(void *)(v64 + 8 * v55) = v21;
      unint64_t v30 = v44;
LABEL_43:

      swift_bridgeObjectRelease();
LABEL_44:
      swift_bridgeObjectRelease();
      uint64_t v36 = v73;
      uint64_t v35 = v74;
      uint64_t v40 = v76;
      goto LABEL_16;
    }
    if (v35)
    {
      uint64_t v33 = (void *)v78;
      if (v54) {
        goto LABEL_38;
      }
    }
    else
    {
      sub_10031D064();
      uint64_t v33 = (void *)v78;
      if (v59) {
        goto LABEL_38;
      }
    }
LABEL_41:
    v33[(v55 >> 6) + 8] |= 1 << v55;
    uint64_t v65 = (void *)(v33[6] + 16 * v55);
    *uint64_t v65 = v77;
    v65[1] = v44;
    *(void *)(v33[7] + 8 * v55) = v21;
    uint64_t v66 = v33[2];
    BOOL v67 = __OFADD__(v66, 1);
    uint64_t v68 = v66 + 1;
    if (v67) {
      goto LABEL_49;
    }
    void v33[2] = v68;
    swift_bridgeObjectRetain();
    goto LABEL_43;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_52:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_10052FB20(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 identifier];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10052FB88(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v3 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v3 = 0;
  }
  id v4 = v3;
  [v2 setIdentifier:];
}

uint64_t type metadata accessor for RDReplicaManagerUtilities()
{
  return self;
}

id sub_10052FC1C(int a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10052FC78(a1, a2, a3, a4, 18, 0x4E49474542204B25, 0xED00004854495753, (uint64_t *)&unk_10090B070);
}

id sub_10052FC4C(int a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10052FC78(a1, a2, a3, a4, 16, 0x5753444E45204B25, 0xEB00000000485449, (uint64_t *)&unk_10090B070);
}

id sub_10052FC78(int a1, uint64_t a2, uint64_t a3, char a4, Swift::Int a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  _StringGuts.grow(_:)(a5);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = sub_10034D54C(a4);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 4203808;
  v13._object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100776E80;
  swift_retain();
  uint64_t v15 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v16)
  {
    uint64_t v17 = v15;
    uint64_t v18 = v16;
    swift_release();
    *(void *)(v14 + 32) = v17;
    *(void *)(v14 + 40) = v18;
    *(void *)(v14 + 88) = &type metadata for String;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = a2;
    *(void *)(v14 + 72) = a3;
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v21 = [self predicateWithFormat:v19 argumentArray:isa];

    return v21;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v23._object = (void *)0x80000001007CAF70;
    v23._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v23);
    sub_100094134(a8);
    _print_unlocked<A, B>(_:_:)();
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *sub_10052FE9C(uint64_t a1, void *a2)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = sub_1001FFB00(a1);
  uint64_t v7 = (void *)sub_1003A0358(KeyPath, (uint64_t)v6);
  swift_release();
  sub_100530A30();
  id v8 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v9 = [(id)swift_getObjCClassFromMetadata() entity];
  [v8 setEntity:v9];

  [v8 setAffectedStores:0];
  [v8 setPredicate:v7];

  uint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    return a2;
  }
  uint64_t v11 = v10;
  uint64_t v37 = v8;
  v41[3] = sub_100094134(&qword_10091C638);
  v41[0] = v11;
  throwingCast<A>(_:as:failureMessage:)();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v41);
  uint64_t v12 = v42;
  if (v42 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_5;
    }
LABEL_30:

    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  uint64_t v13 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v13) {
    goto LABEL_30;
  }
LABEL_5:
  unint64_t v40 = v12 & 0xC000000000000001;
  a2 = _swiftEmptyDictionarySingleton;
  uint64_t v14 = 4;
  uint64_t v38 = v13;
  uint64_t v39 = v12;
  while (1)
  {
    if (v40) {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v15 = *(id *)(v12 + 8 * v14);
    }
    uint64_t v16 = v15;
    id v8 = (id)(v14 - 3);
    if (__OFADD__(v14 - 4, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    id v17 = [v15 identifier];
    if (v17) {
      break;
    }

LABEL_7:
    ++v14;
    if (v8 == (id)v13)
    {

      swift_bridgeObjectRelease();
      return a2;
    }
  }
  uint64_t v18 = v17;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v20;

  id v21 = v16;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v41[0] = a2;
  unint64_t v24 = sub_1001806F8(v19, v12);
  uint64_t v25 = a2[2];
  BOOL v26 = (v23 & 1) == 0;
  uint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26)) {
    goto LABEL_27;
  }
  char v28 = v23;
  if (a2[3] >= v27)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      a2 = (void *)v41[0];
      if (v23) {
        goto LABEL_20;
      }
    }
    else
    {
      sub_10031D070();
      a2 = (void *)v41[0];
      if (v28) {
        goto LABEL_20;
      }
    }
LABEL_22:
    a2[(v24 >> 6) + 8] |= 1 << v24;
    uint64_t v32 = (uint64_t *)(a2[6] + 16 * v24);
    *uint64_t v32 = v19;
    v32[1] = v12;
    *(void *)(a2[7] + 8 * v24) = v21;
    uint64_t v33 = a2[2];
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_28;
    }
    a2[2] = v35;
    swift_bridgeObjectRetain();
    goto LABEL_24;
  }
  sub_1003167F8(v27, isUniquelyReferenced_nonNull_native);
  unint64_t v29 = sub_1001806F8(v19, v12);
  if ((v28 & 1) == (v30 & 1))
  {
    unint64_t v24 = v29;
    a2 = (void *)v41[0];
    if ((v28 & 1) == 0) {
      goto LABEL_22;
    }
LABEL_20:
    uint64_t v31 = a2[7];

    *(void *)(v31 + 8 * v24) = v21;
LABEL_24:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v38;
    uint64_t v12 = v39;
    goto LABEL_7;
  }
  id result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100530270(uint64_t a1, void *a2, void *a3)
{
  id v4 = v3;
  uint64_t v98 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v97 = (char *)v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  id v90 = a3;
  uint64_t v91 = a2;
  uint64_t v93 = v8;
  if (v10)
  {
    id v94 = v3;
    uint64_t v101 = _swiftEmptyArrayStorage;
    sub_1001DE058(0, v10, 0);
    unint64_t v95 = (void (**)(char *, uint64_t))v10;
    uint64_t v96 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v89 = a1;
    uint64_t v12 = (void **)(a1 + 56);
    do
    {
      uint64_t v13 = *(v12 - 3);
      uint64_t v14 = (uint64_t)*(v12 - 2);
      uint64_t v16 = *(v12 - 1);
      id v15 = *v12;
      uint64_t v99 = 0;
      uint64_t v100 = 0xE000000000000000;
      id v17 = v13;
      swift_bridgeObjectRetain();
      id v18 = v15;
      id v19 = [v17 uuid];
      uint64_t v20 = v97;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v23 = v22;
      (*v96)(v20, v98);
      swift_bridgeObjectRelease();
      uint64_t v99 = v21;
      uint64_t v100 = v23;
      v24._countAndFlagsBits = 47;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      v25._countAndFlagsBits = v14;
      v25._object = v16;
      String.append(_:)(v25);

      swift_bridgeObjectRelease();
      uint64_t v26 = v99;
      uint64_t v27 = v100;
      uint64_t v11 = v101;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE058(0, v11[2] + 1, 1);
        uint64_t v11 = v101;
      }
      unint64_t v29 = v11[2];
      unint64_t v28 = v11[3];
      if (v29 >= v28 >> 1)
      {
        sub_1001DE058(v28 > 1, v29 + 1, 1);
        uint64_t v11 = v101;
      }
      void v11[2] = v29 + 1;
      char v30 = &v11[2 * v29];
      uint64_t v30[4] = v26;
      v30[5] = v27;
      v12 += 4;
      --v10;
    }
    while (v10);
    a1 = v89;
    a2 = v91;
    id v4 = v94;
    int64_t v10 = (int64_t)v95;
  }
  uint64_t v31 = sub_10052FE9C((uint64_t)v11, a2);
  if (v4) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v33 = v31;
  swift_bridgeObjectRelease();
  if (!v10) {
    return swift_bridgeObjectRelease();
  }
  v87[1] = 0;
  unint64_t v95 = (void (**)(char *, uint64_t))(v93 + 8);
  swift_bridgeObjectRetain();
  uint64_t v89 = a1;
  BOOL v34 = (void **)(a1 + 56);
  *(void *)&long long v35 = 134218240;
  long long v88 = v35;
  uint64_t v92 = v33;
  while (1)
  {
    uint64_t v38 = *(v34 - 3);
    uint64_t v39 = (uint64_t)*(v34 - 2);
    unint64_t v40 = *(v34 - 1);
    id v41 = *v34;
    uint64_t v99 = 0;
    uint64_t v100 = 0xE000000000000000;
    unint64_t v42 = v38;
    swift_bridgeObjectRetain();
    id v94 = v41;
    uint64_t v96 = (void (**)(char *, uint64_t))v42;
    id v43 = [v42 uuid];
    uint64_t v44 = v97;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v45 = UUID.uuidString.getter();
    uint64_t v47 = v46;
    unint64_t v48 = *v95;
    (*v95)(v44, v98);
    swift_bridgeObjectRelease();
    uint64_t v99 = v45;
    uint64_t v100 = v47;
    v49._countAndFlagsBits = 47;
    v49._object = (void *)0xE100000000000000;
    String.append(_:)(v49);
    v50._countAndFlagsBits = v39;
    v50._object = v40;
    String.append(_:)(v50);
    if (!v33[2]) {
      goto LABEL_21;
    }
    unint64_t v51 = sub_1001806F8(v99, v100);
    if (v52)
    {
      uint64_t v53 = *(id *)(v33[7] + 8 * v51);
      swift_bridgeObjectRelease();
      id v54 = [v94 version];
      unint64_t v55 = (unint64_t)[v53 version];
      if ((v55 & 0x8000000000000000) != 0) {
        goto LABEL_33;
      }
      unint64_t v56 = v55;
      if (v55 >= (unint64_t)v54)
      {
        if (qword_100907860 != -1) {
          swift_once();
        }
        uint64_t v83 = type metadata accessor for Logger();
        sub_10008E2DC(v83, (uint64_t)qword_10091C580);
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.info.getter();
        BOOL v85 = os_log_type_enabled(v36, v84);
        id v76 = v94;
        if (v85)
        {
          uint64_t v86 = swift_slowAlloc();
          *(_DWORD *)uint64_t v86 = v88;
          *(void *)(v86 + 4) = v54;
          *(_WORD *)(v86 + 12) = 2048;
          *(void *)(v86 + 14) = v56;
          _os_log_impl((void *)&_mh_execute_header, v36, v84, "Skipping replica manager update. Version in database is newer {inputVersion: %llu, currentVersion: %llu}", (uint8_t *)v86, 0x16u);
          swift_slowDealloc();
        }
        else
        {

          uint64_t v36 = v53;
        }
        uint64_t v37 = v96;
        goto LABEL_15;
      }
      uint64_t v93 = v39;
      uint64_t v36 = v53;
    }
    else
    {
LABEL_21:
      uint64_t v93 = v39;
      int64_t v57 = v10;
      swift_bridgeObjectRelease();
      id v58 = [v96 uuid];
      char v59 = v97;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      UUID.uuidString.getter();
      v48(v59, v98);
      NSString v60 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v61 = [v90 storeForAccountIdentifier:v60];

      sub_100530A30();
      id ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      id v63 = [ObjCClassFromMetadata entity];
      id v64 = objc_allocWithZone((Class)ObjCClassFromMetadata);
      uint64_t v65 = v91;
      uint64_t v36 = [v64 initWithEntity:v63 insertIntoManagedObjectContext:v91];
      if (v61)
      {
        id v66 = v61;
        BOOL v67 = v36;
        [v65 assignObject:v67 toPersistentStore:v66];
      }
      int64_t v10 = v57;
    }
    uint64_t v99 = 0;
    uint64_t v100 = 0xE000000000000000;
    uint64_t v37 = v96;
    id v68 = [v96 uuid];
    uint64_t v69 = v97;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v70 = UUID.uuidString.getter();
    uint64_t v72 = v71;
    v48(v69, v98);
    swift_bridgeObjectRelease();
    uint64_t v99 = v70;
    uint64_t v100 = v72;
    v73._countAndFlagsBits = 47;
    v73._object = (void *)0xE100000000000000;
    String.append(_:)(v73);
    v74._countAndFlagsBits = v93;
    v74._object = v40;
    String.append(_:)(v74);
    NSString v75 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v36 setIdentifier:v75];

    id v76 = v94;
    id v77 = [v94 managerData];
    uint64_t v78 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v80 = v79;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v78, v80);
    [v36 setManagerData:isa];

    unint64_t v82 = (unint64_t)[v76 version];
    if ((v82 & 0x8000000000000000) != 0) {
      break;
    }
    [v36 setVersion:v82];
LABEL_15:

    swift_bridgeObjectRelease();
    v34 += 4;
    --v10;
    uint64_t v33 = v92;
    if (!v10)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_33:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100530A30()
{
  unint64_t result = qword_10091C630;
  if (!qword_10091C630)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10091C630);
  }
  return result;
}

void destroy for RDReplicaManagerPayload(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for RDReplicaManagerPayload(void *a1, uint64_t a2)
{
  NSString v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  id v6 = v3;
  swift_bridgeObjectRetain();
  id v7 = v5;
  return a1;
}

uint64_t assignWithCopy for RDReplicaManagerPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v7 = *(void **)(a2 + 24);
  uint64_t v8 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for RDReplicaManagerPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for RDReplicaManagerPayload()
{
  return &type metadata for RDReplicaManagerPayload;
}

uint64_t sub_100530BE8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  int64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(v4 + 16);
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = swift_weakInit();
  if (a1)
  {
    __chkstk_darwin(v16);
    *(&v20 - 4) = v15;
    *(&v20 - 3) = a2;
    *(&v20 - 2) = a3;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    id v17 = (void *)swift_allocObject();
    _OWORD v17[2] = v15;
    v17[3] = a2;
    v17[4] = a3;
    aBlock[4] = sub_10053229C;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008C9670;
    id v18 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v18);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100530EE0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091C640);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091C640);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100530FA8@<X0>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  if (qword_100907878 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = qword_10091C660;
  uint64_t v7 = swift_retain();
  uint64_t v8 = (void *)sub_1002F01B4(v7, v6);
  swift_release();
  if (v8)
  {
    uint64_t result = swift_endAccess();
  }
  else
  {
    swift_endAccess();
    type metadata accessor for RDManualSortIDCache();
    uint64_t v8 = (void *)swift_allocObject();
    _OWORD v8[4] = 0;
    _OWORD v8[2] = a2;
    type metadata accessor for RDManualSortIDCacheContext();
    swift_allocObject();
    id v10 = a2;
    uint64_t v11 = sub_10043D894(0);
    id v8[3] = v11;
    v11[5] = &off_1008C9610;
    swift_unknownObjectWeakAssign();
    swift_beginAccess();
    swift_retain();
    uint64_t v12 = swift_retain();
    sub_1001A6CB8(v12, a1);
    swift_endAccess();
    uint64_t result = swift_release();
  }
  *a3 = v8;
  return result;
}

uint64_t sub_10053111C(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100531134(a1, a2, a3, (uint64_t)&off_1008C62E8);
}

uint64_t sub_100531128(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100531134(a1, a2, a3, (uint64_t)&off_1008C62C0);
}

uint64_t sub_100531134(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = *(void *)(result + 24);
    id v8[3] = type metadata accessor for RDManualSortIDCacheContext();
    _OWORD v8[4] = a4;
    v8[0] = v7;
    swift_retain();
    a2(v8);
    swift_release();
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v8);
  }
  return result;
}

uint64_t sub_1005311D4(uint64_t a1, void (*a2)(void *))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = *(void *)(result + 24);
    v5[3] = type metadata accessor for RDManualSortIDCacheContext();
    v5[4] = &off_1008C62C0;
    v5[0] = v4;
    swift_retain();
    a2(v5);
    swift_release();
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v5);
  }
  return result;
}

uint64_t sub_100531280(char a1)
{
  uint64_t v2 = v1;
  sub_100530BE8(a1 & 1, (uint64_t)sub_1005313B8, 0);
  if (qword_100907868 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_10091C640);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDManualSortIDCache cancels observing account changes", v6, 2u);
    swift_slowDealloc();
  }

  if (*(void *)(v2 + 32))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  *(void *)(v2 + 32) = 0;

  return swift_release();
}

void sub_1005313B8(void *a1)
{
  uint64_t v1 = *sub_1000C0DE0(a1, a1[3]);
  swift_beginAccess();
  *(void *)(v1 + 16) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  [*(id *)(v1 + 24) removeAllObjects];
  if (qword_100907598 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_100918850);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RDManualSortIDCacheContext > cleared all", v5, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1005314DC()
{
  uint64_t v0 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v0 - 8);
  char v30 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100094134((uint64_t *)&unk_10090DD20);
  uint64_t v2 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  os_log_type_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100094134((uint64_t *)&unk_1009081D0);
  uint64_t v31 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  id v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_10090DD30);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v33 = v11;
  uint64_t v34 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [self defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v18 = (void *)sub_100405004(v16, v17, (void *)0xD000000000000013, 0x8000000100790920, 0);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  id v35 = v18;
  sub_100094134((uint64_t *)&unk_1009081E0);
  sub_100094134((uint64_t *)&unk_10090AB80);
  sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
  Publisher.map<A>(_:)();
  sub_1000967F4((unint64_t *)&unk_10090AB90, (uint64_t *)&unk_10090DD20);
  uint64_t v19 = v28;
  Publisher.filter(_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v19);
  swift_release();
  id v35 = *(id *)(v32 + 16);
  id v20 = v35;
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v22 = (uint64_t)v30;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v30, 1, 1, v21);
  sub_1000D0FD4();
  sub_1000967F4((unint64_t *)&unk_100908200, (uint64_t *)&unk_1009081D0);
  sub_1005322DC((unint64_t *)&qword_10090D990, (void (*)(uint64_t))sub_1000D0FD4);
  id v23 = v20;
  uint64_t v24 = v29;
  Publisher.receive<A>(on:options:)();
  sub_10022B0D4(v22);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v24);
  swift_allocObject();
  swift_weakInit();
  sub_1000967F4(&qword_100908210, (uint64_t *)&unk_10090DD30);
  uint64_t v25 = v33;
  uint64_t v26 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v25);
  return v26;
}

uint64_t sub_100531AA4()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v13 = *(void *)(v0 - 8);
  uint64_t v14 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D0FD4();
  id v15 = (void *)type metadata accessor for RDManualSortIDCache();
  sub_100094134(&qword_10091C718);
  uint64_t v9 = String.init<A>(reflecting:)();
  v12[1] = v10;
  v12[2] = v9;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v5);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  id v15 = _swiftEmptyArrayStorage;
  sub_1005322DC((unint64_t *)&qword_10090AAC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1000967F4((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v14);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_10091C658 = result;
  return result;
}

unint64_t sub_100531DD0()
{
  unint64_t result = sub_1002EF780((uint64_t)_swiftEmptyArrayStorage);
  qword_10091C660 = result;
  return result;
}

uint64_t sub_100531DF8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100531280(0);
    return swift_release();
  }
  return result;
}

uint64_t sub_100531E54()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDManualSortIDCache()
{
  return self;
}

unint64_t *sub_100531EC0(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_100532024((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_100532024((unint64_t *)v7, v4, v2);
    swift_release();
    swift_slowDealloc();
  }
  return v6;
}

unint64_t *sub_100532024(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a2;
  id v18 = result;
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v13 >= v10) {
      goto LABEL_22;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_22;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14) {
        break;
      }
    }
LABEL_18:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    uint64_t result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 24 * v12 + 8) isCloudKit:v17];
    if (result)
    {
      *(unint64_t *)((char *)v18 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_22:
        swift_retain();
        return (unint64_t *)sub_10023FC68(v18, v17, v4, a3);
      }
    }
  }
  int64_t v15 = v13 + 2;
  if (v15 >= v10) {
    goto LABEL_22;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_22;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

unint64_t *sub_1005321B8@<X0>(unint64_t **a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t result = sub_100531EC0(v2);
  *a1 = result;
  return result;
}

uint64_t sub_1005321FC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100532234()
{
  return sub_100531DF8();
}

uint64_t sub_10053223C()
{
  return sub_1005311D4(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24));
}

uint64_t sub_10053225C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10053229C()
{
  return sub_100531134(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void *)(v0 + 32), (uint64_t)&off_1008C62C0);
}

uint64_t sub_1005322C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005322D4()
{
  return swift_release();
}

uint64_t sub_1005322DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_100532324(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    int64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_10053242C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1005324D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_10053258C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_100532644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_1005326FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1005327B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005327C8);
}

uint64_t sub_1005327C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1005328C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005328D4);
}

uint64_t sub_1005328D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for RDPermanentlyHiddenReminder()
{
  uint64_t result = qword_10091C778;
  if (!qword_10091C778) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100532A24()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

Swift::Int sub_100532AEC()
{
  return Hasher._finalize()();
}

uint64_t sub_100532BD8()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_100532CAC()
{
  return Hasher._finalize()();
}

uint64_t sub_100532D94(uint64_t a1, uint64_t a2)
{
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - v7;
  char v9 = static UUID.== infix(_:_:)();
  sub_100128070(a1, (uint64_t)v8);
  sub_100128070(a2, (uint64_t)v5);
  if (v9) {
    char v10 = static Date.== infix(_:_:)();
  }
  else {
    char v10 = 0;
  }
  sub_100128138((uint64_t)v5);
  sub_100128138((uint64_t)v8);
  return v10 & 1;
}

uint64_t sub_100532E84()
{
  return sub_100532ECC(&qword_10091C7B0, (void (*)(uint64_t))type metadata accessor for RDPermanentlyHiddenReminder);
}

uint64_t sub_100532ECC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100532F14(uint64_t a1)
{
  uint64_t result = sub_10053445C(&qword_10091C7D8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AllInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_100532F6C@<X0>(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v49 = a4;
  unint64_t v42 = a3;
  uint64_t v44 = a5;
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.ListsModel();
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v46 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v34 - v10;
  uint64_t v12 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v41 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v43 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v20 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v34 - v19);
  uint64_t v21 = (uint64_t)a1;
  uint64_t v22 = v50;
  uint64_t result = sub_100534118(a1);
  if (!v22)
  {
    uint64_t v50 = (uint64_t)result;
    uint64_t v34 = v14;
    uint64_t v35 = v12;
    uint64_t v36 = v17;
    uint64_t v37 = v15;
    uint64_t v39 = v11;
    unint64_t v40 = v20;
    uint64_t v38 = v8;
    char v24 = REMRemindersListDataView.AllInvocation.Parameters.countCompleted.getter();
    sub_100125E84((uint64_t)a1, v24 & 1);
    id v25 = [v47 fetchResultTokenToDiffAgainst];
    uint64_t v26 = v40;
    sub_10051F2BC(v25, v21, (uint64_t)v40);

    uint64_t v48 = 0;
    uint64_t v27 = (uint64_t)v34;
    REMRemindersListDataView.AllInvocation.Parameters.remindersPrefetch.getter();
    uint64_t v28 = v50;
    swift_bridgeObjectRetain();
    sub_10052A250(v27, v26, v21, v42, 0, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v27, v35);
    uint64_t v29 = v39;
    REMRemindersListDataView.ListsModel.init(groups:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    uint64_t v30 = v45;
    uint64_t v31 = v46;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v38, v29, v46);
    uint64_t v32 = v43;
    uint64_t v33 = v37;
    (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v43 + 16))(v36, v26, v37);
    sub_10053445C(&qword_10091C7E0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsModel);
    sub_10053445C(&qword_10091C7E8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v31);
    return (void *)(*(uint64_t (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v32 + 8))(v40, v33);
  }
  return result;
}

uint64_t sub_1005333B8@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v15 = __chkstk_darwin(v14).n128_u64[0];
  uint64_t v17 = (char *)&v37 - v16;
  id v18 = *a1;
  id v19 = [*a1 identifier:v15];
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_7;
  }
  id v20 = v19;
  uint64_t v39 = a3;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v21(v9, v13, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_7:
    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
    uint64_t v26 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v40, 1, 1, v26);
  }
  v21(v17, v9, v10);
  if (*(void *)(a2 + 16) && (sub_100306EC4((uint64_t)v17), (v22 & 1) != 0))
  {
    uint64_t v23 = v39;
    swift_bridgeObjectRetain();
    unint64_t v24 = swift_bridgeObjectRetain();
    uint64_t v25 = v41;
    uint64_t v38 = sub_1005337B4(v24, v23);
    uint64_t v41 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v38 = _swiftEmptyArrayStorage;
  }
  uint64_t v28 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v30 = [v28 objectIDWithUUID:isa];

  REMObjectID.codable.getter();
  id v31 = [v18 displayName];
  if (v31)
  {
    uint64_t v32 = v31;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v33 = [v18 color];
  if (v33)
  {
    uint64_t v34 = v33;
    REMColor.codable.getter();
  }
  uint64_t v35 = v40;
  REMRemindersListDataView.ListsModel.Sublist.init(listID:listName:listColor:reminders:isCustomSmartList:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  uint64_t v36 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
}

void *sub_1005337B4(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v48 = a2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v59 = (uint64_t)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v46 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v46 - v11;
  uint64_t v13 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v13 - 8);
  unint64_t v15 = (unint64_t)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v50 = *(v16 - 1);
  __chkstk_darwin(v16);
  id v58 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v49 = (char *)v46 - v19;
  if (a1 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20) {
      goto LABEL_3;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v20) {
    goto LABEL_33;
  }
LABEL_3:
  v46[1] = v3;
  unint64_t v57 = a1 & 0xC000000000000001;
  unint64_t v51 = (void (**)(char *, unint64_t, void *))(v50 + 32);
  char v52 = (unsigned int (**)(unint64_t, uint64_t, void *))(v50 + 48);
  NSString v60 = _swiftEmptyArrayStorage;
  uint64_t v21 = 4;
  unint64_t v55 = v15;
  unint64_t v56 = a1;
  uint64_t v53 = v20;
  id v54 = v16;
  id v47 = v9;
  while (1)
  {
    uint64_t v3 = v21 - 4;
    if (v57) {
      char v22 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      char v22 = *(id *)(a1 + 8 * v21);
    }
    uint64_t v16 = v22;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    uint64_t v61 = v21 - 3;
    id v23 = [v22 identifier];
    if (v23)
    {
      unint64_t v24 = v23;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v25 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 0, 1, v25);
    }
    else
    {
      uint64_t v25 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 1, 1, v25);
    }
    sub_1000F44F4((uint64_t)v9, (uint64_t)v12);
    type metadata accessor for UUID();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    if (v27(v12, 1, v25) == 1) {
      goto LABEL_21;
    }
    uint64_t v28 = v59;
    sub_1001248EC((uint64_t)v12, v59);
    uint64_t result = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v27)(v28, 1, v25);
    if (result == 1) {
      break;
    }
    uint64_t v30 = v48;
    uint64_t v31 = v59;
    if (!*(void *)(v48 + 16) || (unint64_t v32 = sub_100306EC4(v59), (v33 & 1) == 0))
    {
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v31, v25);
      uint64_t v9 = v47;
LABEL_21:
      uint64_t v38 = v16;
      uint64_t v36 = 0;
      unint64_t v34 = 0;
      a1 = v56;
      goto LABEL_22;
    }
    unint64_t v34 = *(void *)(*(void *)(v30 + 56) + 8 * v32);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    swift_bridgeObjectRetain();
    v35(v31, v25);
    if (v34 >> 62)
    {
      uint64_t v45 = v16;
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v36 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v37 = v16;
    }
    a1 = v56;
    uint64_t v9 = v47;
LABEL_22:
    unint64_t v15 = v55;
    sub_100521784(v16, v36, v34, v55);
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909E50);

    uint64_t v39 = v54;
    if ((*v52)(v15, 1, v54) == 1)
    {
      sub_1000966BC(v15, &qword_10090FD78);
    }
    else
    {
      uint64_t v40 = (void (*)(char *, char *, void *))*v51;
      uint64_t v41 = v49;
      (*v51)(v49, v15, v39);
      v40(v58, v41, v39);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        unint64_t v42 = (unint64_t)v60;
      }
      else {
        unint64_t v42 = sub_1003091E4(0, v60[2] + 1, 1, (unint64_t)v60);
      }
      unint64_t v15 = *(void *)(v42 + 16);
      unint64_t v43 = *(void *)(v42 + 24);
      if (v15 >= v43 >> 1) {
        unint64_t v42 = sub_1003091E4(v43 > 1, v15 + 1, 1, v42);
      }
      *(void *)(v42 + 16) = v15 + 1;
      unint64_t v44 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
      NSString v60 = (void *)v42;
      v40((char *)(v42 + v44 + *(void *)(v50 + 72) * v15), v58, v39);
    }
    ++v21;
    if (v61 == v53)
    {
      swift_bridgeObjectRelease();
      return v60;
    }
  }
  __break(1u);
  return result;
}

void sub_100533DA0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v36 = a2;
  uint64_t v7 = sub_100094134(&qword_10091C7F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
  uint64_t v30 = *(v10 - 1);
  __chkstk_darwin(v10);
  uint64_t v35 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v29 = (char *)&v26 - v13;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v14; uint64_t v14 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v34 = a1 & 0xC000000000000001;
    uint64_t v31 = v30 + 32;
    unint64_t v32 = (unsigned int (**)(char *, uint64_t, void *))(v30 + 48);
    uint64_t v37 = _swiftEmptyArrayStorage;
    uint64_t v15 = 4;
    uint64_t v27 = a3;
    unint64_t v28 = a1;
    uint64_t v33 = v14;
    uint64_t v16 = (void (**)(char *, char *, void *))(v30 + 32);
    while (1)
    {
      uint64_t v17 = v10;
      uint64_t v18 = v34 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v15);
      uint64_t v10 = v18;
      uint64_t v19 = v15 - 3;
      if (__OFADD__(v15 - 4, 1)) {
        break;
      }
      id v38 = v18;
      sub_1005333B8(&v38, v36, a3, (uint64_t)v9);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

      uint64_t v10 = v17;
      if ((*v32)(v9, 1, v17) == 1)
      {
        sub_1000966BC((uint64_t)v9, &qword_10091C7F0);
      }
      else
      {
        uint64_t v20 = *v16;
        uint64_t v21 = v29;
        (*v16)(v29, v9, v17);
        v20(v35, v21, v17);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v22 = (unint64_t)v37;
        }
        else {
          unint64_t v22 = sub_10030931C(0, v37[2] + 1, 1, (unint64_t)v37);
        }
        unint64_t v24 = *(void *)(v22 + 16);
        unint64_t v23 = *(void *)(v22 + 24);
        if (v24 >= v23 >> 1) {
          unint64_t v22 = sub_10030931C(v23 > 1, v24 + 1, 1, v22);
        }
        *(void *)(v22 + 16) = v24 + 1;
        unint64_t v25 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
        uint64_t v37 = (void *)v22;
        uint64_t v10 = v17;
        v20((char *)(v22 + v25 + *(void *)(v30 + 72) * v24), v35, v17);
        a3 = v27;
        a1 = v28;
      }
      ++v15;
      if (v19 == v33) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
LABEL_22:
  swift_bridgeObjectRelease();
}

void *sub_100534118(void *a1)
{
  unint64_t v22 = a1;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v1 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v6 - 8);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v7 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.AllInvocation.Parameters.sortingStyle.getter();
  REMRemindersListDataView.AllInvocation.Parameters.showCompleted.getter();
  REMRemindersListDataView.AllInvocation.Parameters.countCompleted.getter();
  REMRemindersListDataView.AllInvocation.Parameters.remindersPrefetch.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), Subtasks);
  uint64_t v10 = v22;
  REMRemindersListDataView.FetchConfiguration.init(sortingStyle:showCompleted:countCompleted:remindersPrefetch:fetchSubtasks:)();
  uint64_t v11 = v23;
  unint64_t v12 = sub_1001252F4((uint64_t)v10, (unint64_t)v9);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, Configuration);
  }
  else
  {
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, Configuration);
    uint64_t v17 = sub_100125148(v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100533DA0((unint64_t)v17, v14, v15);
    uint64_t v10 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t sub_10053445C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1005344A4(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  sub_1000E6E80(a1, (uint64_t)v10);
  uint64_t v3 = v11;
  if (v11)
  {
    uint64_t v4 = sub_1000C0DE0(v10, v11);
    uint64_t v5 = *(void *)(v3 - 8);
    __chkstk_darwin(v4);
    uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v5 + 16))(v7);
    uint64_t v8 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v10);
  }
  else
  {
    uint64_t v8 = 0;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  [v2 setObject:v8 forKey:v9];
  swift_unknownObjectRelease();
}

uint64_t sub_100534608(uint64_t a1)
{
  uint64_t result = sub_100535AF4(&qword_10091C818, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.RecentlyDeletedInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100534660@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v33 = a3;
  uint64_t v4 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v34 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v41 = (uint64_t)&v30 - v8;
  uint64_t v9 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v40 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v39 = (char *)&v30 - v16;
  uint64_t v38 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
  uint64_t v17 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = (char *)a1;
  uint64_t v20 = v42;
  uint64_t result = sub_100535050(a1);
  if (!v20)
  {
    uint64_t v31 = v6;
    unint64_t v32 = v14;
    uint64_t v42 = v12;
    swift_bridgeObjectRetain();
    REMRemindersListDataView.CountByCompleted.init(reminders:)();
    uint64_t v22 = v38;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v11, v19, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v11, 0, 1, v22);
    uint64_t v23 = v39;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    id v24 = [v35 fetchResultTokenToDiffAgainst];
    sub_10051F2BC(v24, (uint64_t)v37, v41);

    uint64_t v25 = v40;
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    uint64_t v37 = v19;
    uint64_t v27 = v42;
    v26(v32, v23, v42);
    uint64_t v28 = v34;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
    uint64_t v30 = v4;
    v29(v31, v41, v4);
    uint64_t v36 = sub_100535AF4(&qword_10090BC38, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
    sub_100535AF4((unint64_t *)&unk_10090BC40, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v41, v30);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v37, v22);
  }
  return result;
}

char *sub_100534AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v55 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v61 = (char *)v38 - v12;
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  __chkstk_darwin(v13);
  unint64_t v51 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v18 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)v38 - v16;
  uint64_t result = (char *)_swiftEmptyArrayStorage;
  uint64_t v62 = (char *)_swiftEmptyArrayStorage;
  uint64_t v49 = *(void *)(a1 + 16);
  if (v49)
  {
    v38[1] = v2;
    uint64_t v21 = 0;
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
    uint64_t v22 = v17 + 16;
    unint64_t v41 = (*(unsigned __int8 *)(v22 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 64);
    uint64_t v43 = a1 + v41;
    unint64_t v44 = v23;
    uint64_t v52 = *(void *)(v22 + 56);
    unint64_t v59 = v9 + 56;
    unint64_t v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v57 = v9 + 16;
    id v54 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v40 = v9;
    NSString v60 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v39 = (void (**)(char *, uint64_t))(v22 - 8);
    uint64_t v50 = (void (**)(char *, char *, uint64_t))(v22 + 16);
    uint64_t v47 = v13;
    uint64_t v48 = a2;
    uint64_t v45 = (char *)v38 - v16;
    uint64_t v46 = v22;
    do
    {
      uint64_t v53 = v21;
      v44(v19, v43 + v52 * v21, v13, v18);
      id v24 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
      id v25 = [v24 uuid];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = *(void *)(a2 + 16);
      uint64_t v27 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v59;
      if (v26)
      {
        unint64_t v42 = v59 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        uint64_t v28 = a2 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
        uint64_t v58 = *(void *)(v40 + 72);
        uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
        swift_bridgeObjectRetain();
        while (1)
        {
          v29(v7, v28, v8);
          uint64_t v30 = *v27;
          (*v27)(v7, 0, 1, v8);
          if ((*v56)(v7, 1, v8) == 1) {
            break;
          }
          uint64_t v31 = v55;
          (*v54)(v55, v7, v8);
          sub_100535AF4((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v33 = *v60;
          (*v60)(v31, v8);
          if (v32)
          {
            a2 = v48;
            swift_bridgeObjectRelease();
            v33(v61, v8);
            uint64_t v19 = v45;
            uint64_t v13 = v47;
            (*v39)(v45, v47);
            goto LABEL_4;
          }
          uint64_t v27 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v59;
          v28 += v58;
          if (!--v26) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v59;
        swift_bridgeObjectRetain();
LABEL_12:
        v30(v7, 1, 1, v8);
      }
      a2 = v48;
      swift_bridgeObjectRelease();
      (*v60)(v61, v8);
      uint64_t v34 = *v50;
      uint64_t v19 = v45;
      uint64_t v13 = v47;
      (*v50)(v51, v45, v47);
      id v35 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE40C(0, *((void *)v35 + 2) + 1, 1);
        id v35 = v62;
      }
      unint64_t v37 = *((void *)v35 + 2);
      unint64_t v36 = *((void *)v35 + 3);
      if (v37 >= v36 >> 1)
      {
        sub_1001DE40C(v36 > 1, v37 + 1, 1);
        id v35 = v62;
      }
      *((void *)v35 + 2) = v37 + 1;
      v34(&v35[v41 + v37 * v52], v51, v13);
      uint64_t v62 = v35;
LABEL_4:
      uint64_t v21 = v53 + 1;
    }
    while (v53 + 1 != v49);
    return v62;
  }
  return result;
}

uint64_t sub_100535050(uint64_t a1)
{
  id v68 = (void *)a1;
  uint64_t v1 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v65 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v64 = (uint64_t)v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v63 = (uint64_t)v59 - v4;
  uint64_t v75 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  Swift::String v74 = (char *)v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v72 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v70 = (char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v71 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  Swift::String v73 = (char *)v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v8 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v10 = (char *)v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v59 - v15;
  uint64_t v17 = _s10PredicatesOMa(0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_100916958);
  *(void *)uint64_t v19 = REMRemindersListDataView.RecentlyDeletedInvocation.Parameters.accountID.getter();
  REMRemindersListDataView.RecentlyDeletedInvocation.Parameters.deletedAfterDate.getter();
  v19[8] = 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = (void *)sub_10038F1F0();
  sub_100535A94((uint64_t)v19, _s10PredicatesOMa);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_10077A530;
  if (qword_1009073F0 != -1) {
    swift_once();
  }
  uint64_t v22 = (void *)qword_1009421B0;
  *(void *)(v21 + 32) = qword_1009421B0;
  uint64_t v78 = (void *)v21;
  specialized Array._endMutation()();
  uint64_t v23 = (uint64_t)v78;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for REMRemindersListDataView.SortingStyle.default(_:), v67);
  swift_storeEnumTagMultiPayload();
  id v24 = v22;
  sub_100520FD4((uint64_t)v10, (uint64_t)v13, (uint64_t)v16);
  uint64_t v25 = v71;
  uint64_t v26 = (uint64_t)v73;
  (*(void (**)(char *, void, uint64_t))(v71 + 104))(v73, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v76);
  uint64_t v27 = v72;
  uint64_t v28 = (uint64_t)v70;
  (*(void (**)(char *, void, uint64_t))(v72 + 104))(v70, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), Subtasks);
  id v29 = v69;
  uint64_t v30 = sub_100522260((uint64_t)v68, (uint64_t)v20, (uint64_t)v16, v23, 0, v26, (char *)v28, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 1);
  id v32 = v29;
  if (v29)
  {
    swift_bridgeObjectRelease();

LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, Subtasks);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v76);
    return sub_100535A94((uint64_t)v16, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  }
  else
  {
    unint64_t v34 = v31;
    id v68 = v30;
    id v69 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    if (v34 >> 62) {
      goto LABEL_33;
    }
    if (*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      while (1)
      {
        if ((v34 & 0xC000000000000001) != 0)
        {
          id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          id v35 = *(id *)(v34 + 32);
        }
        unint64_t v36 = v35;
        swift_bridgeObjectRelease();
        id v37 = [v36 account];

        id v38 = v69;
        if (!v37) {
          goto LABEL_35;
        }
        id v39 = [v37 recentlyDeletedInfoAsData];
        if (!v39)
        {

          goto LABEL_35;
        }
        uint64_t v40 = v39;
        id v60 = v37;
        uint64_t v61 = v16;
        uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v43 = v42;

        type metadata accessor for RDRecentlyDeletedInfo();
        sub_100535AF4(&qword_100911D58, (void (*)(uint64_t))type metadata accessor for RDRecentlyDeletedInfo);
        static REMJSONRepresentable.fromJSONData(_:)();
        if (v32)
        {
          sub_100097F34(v41, v43);
          swift_bridgeObjectRelease();

          uint64_t v16 = v61;
          goto LABEL_5;
        }
        v59[2] = 0;
        sub_100097F34(v41, v43);
        v59[1] = v78;
        uint64_t v26 = v78[2];
        unint64_t v34 = *(void *)(v26 + 16);
        unint64_t v44 = _swiftEmptyArrayStorage;
        if (!v34) {
          break;
        }
        uint64_t v78 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_1001DE148(0, v34, 0);
        uint64_t v28 = sub_1002C8B80(v26);
        uint64_t v16 = v45;
        uint64_t v25 = v46 & 1;
        uint64_t v67 = v26 + 56;
        uint64_t v27 = v66 + 16;
        uint64_t v62 = v66 + 32;
        while ((v28 & 0x8000000000000000) == 0 && v28 < 1 << *(unsigned char *)(v26 + 32))
        {
          if (((*(void *)(v67 + (((unint64_t)v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v28) & 1) == 0) {
            goto LABEL_31;
          }
          if (*(_DWORD *)(v26 + 36) != v16) {
            goto LABEL_32;
          }
          uint64_t v47 = v63;
          sub_100128070(*(void *)(v26 + 48) + *(void *)(v65 + 72) * v28, v63);
          uint64_t v48 = v47;
          uint64_t v49 = v64;
          sub_1001280D4(v48, v64);
          (*(void (**)(char *, uint64_t, uint64_t))v27)(v74, v49, v75);
          sub_100535A94(v49, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
          unint64_t v44 = v78;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1001DE148(0, v44[2] + 1, 1);
            unint64_t v44 = v78;
          }
          unint64_t v51 = v44[2];
          unint64_t v50 = v44[3];
          id v32 = (id)(v51 + 1);
          if (v51 >= v50 >> 1)
          {
            sub_1001DE148(v50 > 1, v51 + 1, 1);
            unint64_t v44 = v78;
          }
          v44[2] = v32;
          (*(void (**)(unint64_t, char *, uint64_t))(v66 + 32))((unint64_t)v44+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(void *)(v66 + 72) * v51, v74, v75);
          uint64_t v78 = v44;
          uint64_t v52 = sub_1003C9E34(v28, v16, v25 & 1, v26);
          uint64_t v28 = v52;
          uint64_t v16 = (char *)v53;
          uint64_t v25 = v54 & 1;
          if (!--v34)
          {
            sub_1000E4EA4(v52, v53, v54 & 1);
            swift_bridgeObjectRelease();
            uint64_t v55 = v76;
            uint64_t v56 = Subtasks;
            uint64_t v25 = v71;
            uint64_t v27 = v72;
            uint64_t v28 = (uint64_t)v70;
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        swift_bridgeObjectRetain();
        uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if (!v58) {
          goto LABEL_34;
        }
      }
      uint64_t v55 = v76;
      uint64_t v56 = Subtasks;
LABEL_29:
      swift_bridgeObjectRetain();
      uint64_t v57 = sub_100534AD4((uint64_t)v68, (uint64_t)v44);
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v56);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v73, v55);
      sub_100535A94((uint64_t)v61, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      swift_bridgeObjectRelease();
      return (uint64_t)v57;
    }
    else
    {
LABEL_34:
      swift_bridgeObjectRelease();
      id v38 = v69;
LABEL_35:

      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, Subtasks);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v76);
      sub_100535A94((uint64_t)v16, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      return (uint64_t)v68;
    }
  }
}

uint64_t sub_100535A94(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100535AF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100535B3C()
{
  uint64_t v282 = type metadata accessor for REMSearchableListType();
  unint64_t v289 = *(void *)(v282 - 8);
  uint64_t v1 = __chkstk_darwin(v282);
  v280 = &v237[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v1);
  v281 = &v237[-v3];
  uint64_t v287 = type metadata accessor for REMStringMatchingStyle();
  uint64_t v284 = *(void *)(v287 - 8);
  uint64_t v4 = __chkstk_darwin(v287);
  v283 = &v237[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v285 = &v237[-v6];
  uint64_t v290 = type metadata accessor for REMSearchCriterion();
  uint64_t v292 = *(void *)(v290 - 8);
  uint64_t v7 = __chkstk_darwin(v290);
  id v291 = &v237[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __chkstk_darwin(v7);
  v288 = &v237[-v10];
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v286 = &v237[-v12];
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v293 = &v237[-v14];
  __chkstk_darwin(v13);
  v294 = &v237[-v15];
  uint64_t v298 = type metadata accessor for UUID();
  uint64_t v296 = *(void *)(v298 - 8);
  __chkstk_darwin(v298);
  uint64_t v17 = &v237[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v297 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v21 = &v237[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = __chkstk_darwin(v19);
  id v24 = &v237[-v23];
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = &v237[-v26];
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = &v237[-v29];
  __chkstk_darwin(v28);
  id v295 = &v237[-v31];
  uint64_t v32 = _s10PredicatesOMa_1();
  __chkstk_darwin(v32);
  unint64_t v34 = &v237[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v300 = _swiftEmptyArrayStorage;
  sub_100539DA0(v0, (uint64_t)v34);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  int v36 = 1;
  int v37 = 0;
  int v38 = 0;
  int v39 = 0;
  LODWORD(v40) = 1;
  LODWORD(v41) = 1;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v99 = *(void **)v34;
      uint64_t KeyPath = swift_getKeyPath();
      id v101 = [v99 uuid];
      uint64_t v102 = (uint64_t)v295;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v102, 0, 1, v298);
      sub_10032E068(KeyPath, v102);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      int v37 = 0;
      int v38 = 0;
      int v39 = 0;
      int v36 = 0;
      LODWORD(v40) = 0;
      goto LABEL_217;
    case 2:
      BOOL v85 = *(void **)v34;
      uint64_t v86 = swift_getKeyPath();
      id v87 = [v85 uuid];
      uint64_t v88 = (uint64_t)v295;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v88, 0, 1, v298);
      sub_10032E068(v86, v88);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      int v37 = 0;
      int v39 = 0;
      int v36 = 0;
      LODWORD(v40) = 0;
      goto LABEL_3;
    case 3:
      uint64_t v27 = *(unsigned char **)v34;
      char v118 = v34[8];
      uint64_t v119 = swift_getKeyPath();
      id v120 = [v27 uuid];
      uint64_t v121 = (uint64_t)v295;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v121, 0, 1, v298);
      sub_10032E068(v119, v121);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v118) {
        goto LABEL_75;
      }
      uint64_t v122 = swift_getKeyPath();
      sub_10039B014(v122);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] < v300[3] >> 1) {
        goto LABEL_74;
      }
      goto LABEL_256;
    case 4:
      unint64_t v89 = *(void *)v34;
      uint64_t v27 = (unsigned char *)swift_getKeyPath();
      if (v89 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v90) {
          goto LABEL_44;
        }
LABEL_204:
        swift_bridgeObjectRelease();
        uint64_t v92 = _swiftEmptyArrayStorage;
        goto LABEL_205;
      }
      uint64_t v90 = *(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v90) {
        goto LABEL_204;
      }
LABEL_44:
      v294 = v27;
      v299 = _swiftEmptyArrayStorage;
      sub_1001DE118(0, v90 & ~(v90 >> 63), 0);
      if (v90 < 0)
      {
        __break(1u);
        goto LABEL_254;
      }
      uint64_t v91 = 0;
      uint64_t v92 = v299;
      uint64_t v93 = (void (**)(unsigned char *, void, uint64_t, uint64_t))(v296 + 56);
      do
      {
        if ((v89 & 0xC000000000000001) != 0) {
          id v94 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v94 = *(id *)(v89 + 8 * v91 + 32);
        }
        unint64_t v95 = v94;
        id v96 = [v94 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*v93)(v30, 0, 1, v298);
        v299 = v92;
        unint64_t v98 = v92[2];
        unint64_t v97 = v92[3];
        if (v98 >= v97 >> 1)
        {
          sub_1001DE118(v97 > 1, v98 + 1, 1);
          uint64_t v92 = v299;
        }
        ++v91;
        v92[2] = v98 + 1;
        sub_1000F44F4((uint64_t)v30, (uint64_t)v92+ ((*(unsigned __int8 *)(v297 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v297 + 80))+ *(void *)(v297 + 72) * v98);
      }
      while (v90 != v91);
      swift_bridgeObjectRelease();
      uint64_t v27 = v294;
LABEL_205:
      sub_10039B038((uint64_t)v27, (uint64_t)v92);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      int v37 = 0;
      int v38 = 0;
      int v39 = 0;
      int v36 = 0;
LABEL_208:
      LODWORD(v40) = 1;
      LODWORD(v41) = 1;
LABEL_217:
      int v216 = v36;
      int v217 = v39;
      int v218 = v38;
      sub_100398324(0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100094134(&qword_10090D5A0);
      uint64_t inited = (void *)swift_initStackObject();
      *((_OWORD *)inited + 1) = xmmword_100776E80;
      uint64_t v220 = swift_getKeyPath();
      uint64_t v221 = sub_10039B014(v220);
      swift_release();
      inited[4] = v221;
      uint64_t v222 = swift_getKeyPath();
      uint64_t v223 = sub_10039B0CC(v222);
      swift_release();
      inited[5] = v223;
      v299 = inited;
      specialized Array._endMutation()();
      sub_100397E58(v299);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (!v41)
      {
        if (v40) {
          goto LABEL_225;
        }
LABEL_235:
        if (!v216) {
          goto LABEL_228;
        }
        goto LABEL_236;
      }
LABEL_222:
      sub_100094134(&qword_10090D5A0);
      uint64_t v224 = (void *)swift_initStackObject();
      *((_OWORD *)v224 + 1) = xmmword_100776E80;
      uint64_t v225 = swift_getKeyPath();
      uint64_t v226 = sub_10039B0CC(v225);
      swift_release();
      v224[4] = v226;
      uint64_t v227 = swift_getKeyPath();
      uint64_t v228 = sub_10039B0CC(v227);
      swift_release();
      v224[5] = v228;
      v299 = v224;
      specialized Array._endMutation()();
      sub_1002F52FC(v299);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if ((v40 & 1) == 0) {
        goto LABEL_235;
      }
LABEL_225:
      uint64_t v229 = swift_getKeyPath();
      sub_10039B0CC(v229);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if ((v216 & 1) == 0)
      {
LABEL_228:
        if (v217) {
          goto LABEL_229;
        }
LABEL_239:
        if (!v218) {
          goto LABEL_232;
        }
LABEL_240:
        uint64_t v235 = swift_getKeyPath();
        sub_10039B0CC(v235);
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v300[2] >= v300[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        if ((v37 & 1) == 0) {
          return sub_1002F52FC(v300);
        }
        goto LABEL_243;
      }
LABEL_236:
      uint64_t v231 = swift_getKeyPath();
      id v232 = [self localInternalAccountID];
      id v233 = [v232 uuid];

      uint64_t v234 = (uint64_t)v295;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v234, 0, 1, v298);
      sub_10039B0EC(v231, v234);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if ((v217 & 1) == 0) {
        goto LABEL_239;
      }
LABEL_229:
      uint64_t v230 = swift_getKeyPath();
      sub_10039B014(v230);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v218) {
        goto LABEL_240;
      }
LABEL_232:
      if (!v37) {
        return sub_1002F52FC(v300);
      }
LABEL_243:
      sub_100539E1C();
LABEL_244:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      return sub_1002F52FC(v300);
    case 5:
      uint64_t v62 = *(void *)v34;
      sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16) = xmmword_100776E40;
      *(void *)(v63 + 56) = sub_100094134(&qword_100908270);
      *(void *)(v63 + 64) = sub_1000967F4(&qword_10091C490, &qword_100908270);
      *(void *)(v63 + 32) = v62;
      NSPredicate.init(format:_:)();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      int v37 = 0;
      int v38 = 0;
      int v39 = 0;
      int v36 = 0;
      goto LABEL_216;
    case 6:
      uint64_t v64 = *(void **)v34;
      uint64_t v65 = swift_getKeyPath();
      id v66 = [v64 uuid];
      uint64_t v67 = (uint64_t)v295;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v67, 0, 1, v298);
      sub_10032E068(v65, v67);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v68 = swift_getKeyPath();
      sub_100539BAC(v68, 0);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100094134(&qword_10090D5A0);
      id v69 = (void *)swift_initStackObject();
      *((_OWORD *)v69 + 1) = xmmword_100776E80;
      uint64_t v70 = swift_getKeyPath();
      uint64_t v71 = sub_10032E07C(v70, 2);
      swift_release();
      v69[4] = v71;
      uint64_t v72 = swift_getKeyPath();
      uint64_t v73 = sub_10032E07C(v72, 1);
      swift_release();
      v69[5] = v73;
      v299 = v69;
      specialized Array._endMutation()();
      sub_100397E58(v299);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_89;
    case 7:
      uint64_t v114 = v296;
      uint64_t v115 = v298;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v296 + 32))(v17, v34, v298);
      uint64_t v116 = swift_getKeyPath();
      uint64_t v117 = (uint64_t)v295;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v114 + 16))(v295, v17, v115);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v114 + 56))(v117, 0, 1, v115);
      sub_10032E068(v116, v117);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      (*(void (**)(unsigned char *, uint64_t))(v114 + 8))(v17, v115);
      goto LABEL_89;
    case 8:
      uint64_t v145 = *(void **)v34;
      uint64_t v146 = swift_getKeyPath();
      id v147 = [v145 uuid];
      uint64_t v148 = (uint64_t)v295;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v148, 0, 1, v298);
      sub_10032E068(v146, v148);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      int v37 = 0;
      int v38 = 0;
      int v36 = 0;
      LODWORD(v40) = 0;
      LODWORD(v41) = 0;
      int v39 = 1;
      goto LABEL_217;
    case 9:
      uint64_t v78 = *(void **)v34;
      uint64_t v79 = *((void *)v34 + 1);
      uint64_t v80 = swift_getKeyPath();
      id v81 = [v78 uuid];
      uint64_t v82 = (uint64_t)v295;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v82, 0, 1, v298);
      sub_10032E068(v80, v82);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v83 = swift_getKeyPath();
      os_log_type_t v84 = sub_1001FFB00(v79);
      swift_bridgeObjectRelease();
      sub_10039B088(v83, (uint64_t)v84);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_214;
    case 10:
      unint64_t v103 = *(void *)v34;
      uint64_t v104 = swift_getKeyPath();
      if (v103 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v105 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v105) {
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v105 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v105)
        {
LABEL_58:
          v294 = (unsigned char *)v104;
          v299 = _swiftEmptyArrayStorage;
          sub_1001DE118(0, v105 & ~(v105 >> 63), 0);
          if (v105 < 0)
          {
LABEL_254:
            __break(1u);
            goto LABEL_255;
          }
          uint64_t v106 = 0;
          uint64_t v107 = v299;
          uint64_t v108 = (void (**)(unsigned char *, void, uint64_t, uint64_t))(v296 + 56);
          do
          {
            if ((v103 & 0xC000000000000001) != 0) {
              id v109 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v109 = *(id *)(v103 + 8 * v106 + 32);
            }
            uint64_t v110 = v109;
            id v111 = [v109 uuid];
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            (*v108)(v27, 0, 1, v298);
            v299 = v107;
            unint64_t v113 = v107[2];
            unint64_t v112 = v107[3];
            if (v113 >= v112 >> 1)
            {
              sub_1001DE118(v112 > 1, v113 + 1, 1);
              uint64_t v107 = v299;
            }
            ++v106;
            v107[2] = v113 + 1;
            sub_1000F44F4((uint64_t)v27, (uint64_t)v107+ ((*(unsigned __int8 *)(v297 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v297 + 80))+ *(void *)(v297 + 72) * v113);
          }
          while (v105 != v106);
          swift_bridgeObjectRelease();
          uint64_t v104 = (uint64_t)v294;
LABEL_211:
          sub_10039B038(v104, (uint64_t)v107);
          swift_release();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v300[2] >= v300[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
LABEL_214:
          int v37 = 0;
          int v38 = 0;
          int v39 = 0;
          LODWORD(v41) = 0;
LABEL_215:
          int v36 = 1;
LABEL_216:
          LODWORD(v40) = 1;
          goto LABEL_217;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v107 = _swiftEmptyArrayStorage;
      goto LABEL_211;
    case 11:
      unint64_t v135 = *(void *)v34;
      uint64_t v27 = (unsigned char *)swift_getKeyPath();
      if (v135 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v136 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v136) {
          goto LABEL_93;
        }
      }
      else
      {
        uint64_t v136 = *(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v136)
        {
LABEL_93:
          v294 = v27;
          v299 = _swiftEmptyArrayStorage;
          sub_1001DE118(0, v136 & ~(v136 >> 63), 0);
          if (v136 < 0)
          {
LABEL_255:
            __break(1u);
LABEL_256:
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_74:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
LABEL_75:

            int v37 = 0;
            int v38 = 0;
            int v39 = 0;
            goto LABEL_215;
          }
          uint64_t v137 = 0;
          uint64_t v138 = v299;
          uint64_t v139 = (void (**)(unsigned char *, void, uint64_t, uint64_t))(v296 + 56);
          do
          {
            if ((v135 & 0xC000000000000001) != 0) {
              id v140 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v140 = *(id *)(v135 + 8 * v137 + 32);
            }
            char v141 = v140;
            id v142 = [v140 uuid];
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            (*v139)(v24, 0, 1, v298);
            v299 = v138;
            unint64_t v144 = v138[2];
            unint64_t v143 = v138[3];
            if (v144 >= v143 >> 1)
            {
              sub_1001DE118(v143 > 1, v144 + 1, 1);
              uint64_t v138 = v299;
            }
            ++v137;
            v138[2] = v144 + 1;
            sub_1000F44F4((uint64_t)v24, (uint64_t)v138+ ((*(unsigned __int8 *)(v297 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v297 + 80))+ *(void *)(v297 + 72) * v144);
          }
          while (v136 != v137);
          swift_bridgeObjectRelease();
          uint64_t v27 = v294;
LABEL_250:
          sub_10039B038((uint64_t)v27, (uint64_t)v138);
          swift_release();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v300[2] >= v300[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          int v37 = 0;
          int v218 = 0;
          int v217 = 0;
          int v216 = 1;
          LOBYTE(v40) = 1;
          goto LABEL_222;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v138 = _swiftEmptyArrayStorage;
      goto LABEL_250;
    case 12:
      uint64_t v55 = *(void *)v34;
      uint64_t v54 = *((void *)v34 + 1);
      uint64_t v56 = (void *)*((void *)v34 + 2);
      if (v56)
      {
        uint64_t v57 = swift_getKeyPath();
        id v58 = v56;
        id v59 = [v58 uuid];
        uint64_t v60 = (uint64_t)v295;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v60, 0, 1, v298);
        sub_10032E068(v57, v60);
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v300[2] >= v300[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      uint64_t v61 = swift_getKeyPath();
      sub_10032E088(v61, v55, v54);
      swift_release();
      swift_bridgeObjectRelease();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_197;
    case 13:
      uint64_t v123 = *(void **)v34;
      uint64_t v124 = swift_getKeyPath();
      id v125 = [v123 uuid];
      uint64_t v126 = (uint64_t)v295;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v126, 0, 1, v298);
      sub_10032E068(v124, v126);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v127 = swift_getKeyPath();
      sub_10039B07C(v127, 0);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      int v37 = 0;
      int v38 = 0;
      int v39 = 0;
      int v36 = 0;
      LODWORD(v40) = 0;
      LODWORD(v41) = 0;
      goto LABEL_217;
    case 14:
      uint64_t v49 = *(void **)v34;
      uint64_t v50 = swift_getKeyPath();
      id v51 = [v49 uuid];
      uint64_t v52 = (uint64_t)v295;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v52, 0, 1, v298);
      sub_10032E068(v50, v52);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v53 = swift_getKeyPath();
      sub_10039B04C(v53);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      return sub_1002F52FC(v300);
    case 15:
      char v130 = *(void **)v34;
      uint64_t v131 = swift_getKeyPath();
      id v132 = [v130 uuid];
      uint64_t v133 = (uint64_t)v295;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v133, 0, 1, v298);
      sub_10032E068(v131, v133);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v134 = swift_getKeyPath();
      sub_10039B04C(v134);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_89;
    case 16:
      uint64_t v149 = *(void *)v34;
      uint64_t v279 = *(void *)(*(void *)v34 + 16);
      if (!v279)
      {
        swift_bridgeObjectRelease();
LABEL_195:
        int v37 = 0;
        int v39 = 0;
        int v38 = 1;
        int v36 = 1;
        goto LABEL_217;
      }
      unint64_t v150 = 0;
      uint64_t v151 = v292;
      uint64_t v278 = v149 + ((*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80));
      int v277 = enum case for REMSearchCriterion.itemTypes(_:);
      int v273 = enum case for REMSearchCriterion.objectID(_:);
      int v270 = enum case for REMSearchCriterion.accountID(_:);
      int v268 = enum case for REMSearchCriterion.listID(_:);
      int v265 = enum case for REMSearchCriterion.textualField(_:);
      int v263 = enum case for REMSearchCriterion.displayName(_:);
      int v258 = enum case for REMSearchCriterion.isCompleted(_:);
      int v256 = enum case for REMSearchCriterion.completionDate(_:);
      int v254 = enum case for REMSearchCriterion.hasLocation(_:);
      int v253 = enum case for REMSearchCriterion.location(_:);
      unint64_t v244 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v289 + 32);
      v243 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v289 + 16);
      uint64_t v242 = (uint64_t (**)(unsigned char *, uint64_t))(v289 + 88);
      v241 = (void (**)(unsigned char *, uint64_t))(v289 + 8);
      id v264 = (void (**)(uint64_t, uint64_t))(v284 + 8);
      v262 = (void (**)(unsigned char *, uint64_t, uint64_t))(v284 + 32);
      uint64_t v261 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v284 + 16);
      uint64_t v260 = (uint64_t (**)(unsigned char *, uint64_t))(v284 + 88);
      *((void *)&v152 + 1) = 4;
      long long v271 = xmmword_100776E80;
      *(void *)&long long v152 = 136315138;
      long long v267 = v152;
      int v252 = enum case for REMSearchCriterion.dueDate(_:);
      int v251 = enum case for REMSearchCriterion.hasDueDate(_:);
      int v250 = enum case for REMSearchCriterion.modifiedDate(_:);
      int v249 = enum case for REMSearchCriterion.creationDate(_:);
      int v248 = enum case for REMSearchCriterion.isRecurrent(_:);
      int v247 = enum case for REMSearchCriterion.isFlagged(_:);
      int v246 = enum case for REMSearchCriterion.spotlightItemIdentifier(_:);
      int v245 = enum case for REMSearchCriterion.daCalendarItemUniqueIdentifier(_:);
      int v240 = enum case for REMSearchCriterion.listType(_:);
      int v239 = enum case for REMSearchableListType.grocery(_:);
      int v238 = enum case for REMSearchableListType.none(_:);
      int v259 = enum case for REMStringMatchingStyle.exact(_:);
      int v257 = enum case for REMStringMatchingStyle.prefix(_:);
      int v255 = enum case for REMStringMatchingStyle.word(_:);
      uint64_t v276 = v292 + 88;
      id v274 = (void (**)(uint64_t, uint64_t))(v292 + 96);
      id v275 = (void (**)(unsigned char *, uint64_t))(v292 + 8);
      uint64_t v153 = (void (**)(unsigned char *, void, uint64_t, uint64_t))(v296 + 56);
      unint64_t v269 = (char *)&type metadata for Any + 8;
      uint64_t v41 = v290;
      uint64_t v40 = (uint64_t)v293;
      uint64_t v154 = v294;
      uint64_t v272 = v149;
      uint64_t v284 = v292 + 16;
      break;
    case 17:
    case 30:
      goto LABEL_217;
    case 18:
      int v37 = 0;
      int v38 = 0;
      int v39 = 0;
      int v36 = 0;
      goto LABEL_217;
    case 19:
      int v39 = 0;
      int v37 = 1;
      goto LABEL_3;
    case 20:
    case 21:
    case 29:
    case 32:
    case 35:
      int v37 = 0;
      int v39 = 0;
LABEL_3:
      int v38 = 1;
      goto LABEL_217;
    case 22:
    case 27:
      goto LABEL_187;
    case 23:
    case 26:
      uint64_t v42 = swift_getKeyPath();
      sub_10032E07C(v42, 2);
      goto LABEL_193;
    case 24:
    case 33:
      uint64_t v215 = swift_getKeyPath();
      sub_10039B058(v215);
      goto LABEL_193;
    case 25:
      uint64_t v128 = swift_getKeyPath();
      sub_10039B07C(v128, 0);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v129 = swift_getKeyPath();
      sub_10039B058(v129);
      goto LABEL_193;
    case 28:
      sub_100094134(&qword_10090D5A0);
      unint64_t v43 = (void *)swift_initStackObject();
      *((_OWORD *)v43 + 1) = xmmword_100776E80;
      uint64_t v44 = swift_getKeyPath();
      uint64_t v45 = sub_10032E07C(v44, 0);
      swift_release();
      v43[4] = v45;
      uint64_t v46 = swift_getKeyPath();
      uint64_t v47 = sub_10032E07C(v46, 1);
      swift_release();
      v43[5] = v47;
      v299 = v43;
      specialized Array._endMutation()();
      sub_100397E58(v299);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] < v300[3] >> 1) {
        goto LABEL_6;
      }
      goto LABEL_202;
    case 31:
      sub_100398324(0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v214 = swift_getKeyPath();
      sub_10039B0A8(v214);
      swift_release();
      goto LABEL_244;
    case 34:
      uint64_t v212 = swift_getKeyPath();
      sub_10039B07C(v212, 0);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_187:
      uint64_t v213 = swift_getKeyPath();
      sub_10039B04C(v213);
LABEL_193:
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] < v300[3] >> 1) {
        goto LABEL_194;
      }
      goto LABEL_200;
    default:
      Swift::String v74 = *(void **)v34;
      uint64_t v75 = swift_getKeyPath();
      id v76 = [v74 uuid];
      uint64_t v77 = (uint64_t)v295;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v296 + 56))(v77, 0, 1, v298);
      sub_10032E068(v75, v77);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      int v37 = 0;
      int v38 = 0;
      int v36 = 0;
      LODWORD(v40) = 0;
      int v39 = 1;
      goto LABEL_217;
  }
  while (1)
  {
    if (v150 >= *(void *)(v149 + 16))
    {
      __break(1u);
LABEL_200:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_194:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_195;
    }
    uint64_t v155 = *(void *)(v151 + 72);
    unint64_t v289 = v150;
    uint64_t v156 = *(void (**)(unsigned char *, unint64_t, uint64_t))(v151 + 16);
    v156(v154, v278 + v155 * v150, v41);
    v156((unsigned char *)v40, (unint64_t)v154, v41);
    int v157 = (*(uint64_t (**)(uint64_t, uint64_t))(v151 + 88))(v40, v41);
    if (v157 != v277) {
      break;
    }
    (*v275)(v154, v41);
    (*v274)(v40, v41);
    swift_bridgeObjectRelease();
LABEL_108:
    unint64_t v150 = v289 + 1;
    if (v289 + 1 == v279)
    {
      swift_bridgeObjectRelease();
LABEL_197:
      int v37 = 0;
      int v39 = 0;
      int v38 = 1;
      int v36 = 1;
      goto LABEL_208;
    }
  }
  if (v157 == v273)
  {
    (*v274)(v40, v41);
    id v158 = *(id *)v40;
    if (*(void *)v40 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v159 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v159) {
        goto LABEL_114;
      }
    }
    else
    {
      uint64_t v159 = *(void *)(((unint64_t)v158 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v159)
      {
LABEL_114:
        v299 = _swiftEmptyArrayStorage;
        sub_1001DE118(0, v159 & ~(v159 >> 63), 0);
        if (v159 < 0)
        {
          __break(1u);
LABEL_202:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_6:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v48 = swift_getKeyPath();
          sub_10039B058(v48);
          swift_release();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v300[2] >= v300[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
LABEL_89:
          int v37 = 0;
          int v39 = 0;
          int v38 = 1;
          goto LABEL_215;
        }
        uint64_t v160 = 0;
        uint64_t v161 = v299;
        do
        {
          if (((unint64_t)v158 & 0xC000000000000001) != 0) {
            id v162 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v162 = *((id *)v158 + v160 + 4);
          }
          unint64_t v163 = v162;
          id v164 = [v162 uuid];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          (*v153)(v21, 0, 1, v298);
          v299 = v161;
          unint64_t v166 = v161[2];
          unint64_t v165 = v161[3];
          if (v166 >= v165 >> 1)
          {
            sub_1001DE118(v165 > 1, v166 + 1, 1);
            uint64_t v161 = v299;
          }
          ++v160;
          v161[2] = v166 + 1;
          sub_1000F44F4((uint64_t)v21, (uint64_t)v161+ ((*(unsigned __int8 *)(v297 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v297 + 80))+ *(void *)(v297 + 72) * v166);
        }
        while (v159 != v160);
        swift_bridgeObjectRelease();
        uint64_t v41 = v290;
        goto LABEL_167;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v161 = _swiftEmptyArrayStorage;
LABEL_167:
    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v197 = swift_allocObject();
    *(_OWORD *)(v197 + 16) = v271;
    *(void *)(v197 + 56) = &type metadata for String;
    *(void *)(v197 + 32) = 0x696669746E656469;
    *(void *)(v197 + 40) = 0xEA00000000007265;
    *(void *)(v197 + 88) = sub_100094134(&qword_1009169A8);
    *(void *)(v197 + 64) = v161;
    NSString v198 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v200 = [self predicateWithFormat:v198 argumentArray:isa];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v151 = v292;
    if (v300[2] >= v300[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v154 = v294;
    (*v275)(v294, v41);
    goto LABEL_170;
  }
  Class v167 = v291;
  if (v157 == v270)
  {
    (*v274)(v40, v41);
    swift_bridgeObjectRelease();
LABEL_125:
    if (qword_100907880 != -1) {
      swift_once();
    }
    uint64_t v168 = type metadata accessor for Logger();
    sub_10008E2DC(v168, (uint64_t)qword_10091C820);
    v156(v167, (unint64_t)v294, v41);
    uint64_t v169 = Logger.logObject.getter();
    os_log_type_t v170 = static os_log_type_t.fault.getter();
LABEL_134:
    os_log_type_t v174 = v170;
    if (!os_log_type_enabled(v169, v170))
    {

      uint64_t v181 = *v275;
      (*v275)(v167, v41);
      uint64_t v182 = v294;
      v181(v294, v41);
      uint64_t v154 = v182;
LABEL_171:
      uint64_t v149 = v272;
      goto LABEL_108;
    }
    uint64_t v175 = (_DWORD *)swift_slowAlloc();
    v266 = v175;
    v299 = (void *)swift_slowAlloc();
    *uint64_t v175 = v267;
    v156(v288, (unint64_t)v167, v41);
    uint64_t v176 = String.init<A>(describing:)();
    uint64_t v178 = sub_1000C51B8(v176, v177, (uint64_t *)&v299);
    uint64_t v179 = (uint8_t *)v266;
    *(void *)(v266 + 1) = v178;
    swift_bridgeObjectRelease();
    uint64_t v180 = *v275;
    (*v275)(v167, v41);
    _os_log_impl((void *)&_mh_execute_header, v169, v174, "Dropping unsupported criterion for searching REMCDList. {criterion: %s}", v179, 0xCu);
    swift_arrayDestroy();
    uint64_t v151 = v292;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v154 = v294;
    v180(v294, v41);
LABEL_170:
    uint64_t v40 = (uint64_t)v293;
    goto LABEL_171;
  }
  if (v157 == v268)
  {
    (*v274)(v40, v41);

    uint64_t v171 = v40 + *(int *)(sub_100094134(&qword_100916928) + 48);
    uint64_t v172 = type metadata accessor for REMSearchCriterion.Inclusion();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v172 - 8) + 8))(v171, v172);
LABEL_130:
    Class v167 = v286;
    goto LABEL_131;
  }
  if (v157 == v265)
  {
    (*v274)(v40, v41);
    id v184 = *(id *)v40;
    uint64_t v183 = *(void *)(v40 + 8);
    uint64_t v185 = sub_100094134((uint64_t *)&unk_100915A00);
    id v186 = v285;
    uint64_t v187 = v287;
    (*v262)(v285, v40 + *(int *)(v185 + 48), v287);
    uint64_t v188 = v283;
    (*v261)(v283, v186, v187);
    int v189 = (*v260)(v188, v187);
    if (v189 != v259)
    {
      if (v189 != v257 && v189 != v255)
      {
LABEL_257:
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        JUMPOUT(0x100538FD4);
      }
      uint64_t v194 = swift_getKeyPath();
      sub_10039B09C(v194, (uint64_t)v184, v183, 6);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v151 = v292;
      uint64_t v40 = (uint64_t)v293;
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      (*v264)((uint64_t)v285, v287);
      uint64_t v154 = v294;
      (*v275)(v294, v41);
      goto LABEL_171;
    }
    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v190 = swift_allocObject();
    *(_OWORD *)(v190 + 16) = v271;
    *(void *)(v190 + 56) = &type metadata for String;
    *(void *)(v190 + 32) = 1701667182;
    *(void *)(v190 + 40) = 0xE400000000000000;
    *(void *)(v190 + 88) = sub_100094134((uint64_t *)&unk_10090A4C0);
    *(void *)(v190 + 64) = v184;
    *(void *)(v190 + 72) = v183;
    swift_bridgeObjectRetain();
    NSString v191 = String._bridgeToObjectiveC()();
    Class v192 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [self predicateWithFormat:v191 argumentArray:v192];
    swift_bridgeObjectRelease();

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v300[2] >= v300[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    (*v264)((uint64_t)v285, v287);
    uint64_t v154 = v294;
    (*v275)(v294, v41);
  }
  else
  {
    if (v157 == v263)
    {
      (*v274)(v40, v41);
      swift_bridgeObjectRelease();
      uint64_t v193 = sub_100094134((uint64_t *)&unk_100915A00);
      (*v264)(v40 + *(int *)(v193 + 48), v287);
      goto LABEL_125;
    }
    Class v167 = v286;
    if (v157 == v258)
    {
LABEL_131:
      if (qword_100907880 != -1) {
        swift_once();
      }
      uint64_t v173 = type metadata accessor for Logger();
      sub_10008E2DC(v173, (uint64_t)qword_10091C820);
      v156(v167, (unint64_t)v294, v41);
      uint64_t v169 = Logger.logObject.getter();
      os_log_type_t v170 = static os_log_type_t.info.getter();
      goto LABEL_134;
    }
    if (v157 == v256) {
      goto LABEL_152;
    }
    if (v157 == v254) {
      goto LABEL_131;
    }
    if (v157 == v253)
    {
      (*v274)(v40, v41);
      swift_bridgeObjectRelease();
      uint64_t v196 = sub_100094134((uint64_t *)&unk_100915A00);
      (*v264)(v40 + *(int *)(v196 + 48), v287);
      goto LABEL_131;
    }
    if (v157 == v252) {
      goto LABEL_152;
    }
    if (v157 == v251) {
      goto LABEL_131;
    }
    if (v157 == v250 || v157 == v249)
    {
LABEL_152:
      (*v274)(v40, v41);
      uint64_t v195 = sub_100094134((uint64_t *)&unk_10091C320);
      sub_1000966BC(v40 + *(int *)(v195 + 48), (uint64_t *)&unk_100909A40);
      sub_1000966BC(v40, (uint64_t *)&unk_100909A40);
      goto LABEL_131;
    }
    if (v157 == v248 || v157 == v247) {
      goto LABEL_131;
    }
    if (v157 == v246 || v157 == v245)
    {
      uint64_t v40 = (uint64_t)v293;
      uint64_t v41 = v290;
      (*v274)((uint64_t)v293, v290);
      swift_bridgeObjectRelease();
      uint64_t v151 = v292;
      goto LABEL_130;
    }
    if (v157 != v240) {
      goto LABEL_257;
    }
    id v201 = v293;
    (*v274)((uint64_t)v293, v290);
    uint64_t v202 = v281;
    uint64_t v203 = v201;
    uint64_t v204 = v282;
    (*v244)(v281, v203, v282);
    char v205 = v280;
    (*v243)(v280, v202, v204);
    int v206 = (*v242)(v205, v204);
    if (v206 == v239)
    {
      uint64_t v207 = swift_getKeyPath();
      sub_10039B04C(v207);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v300[2] >= v300[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      if (v206 != v238) {
        goto LABEL_257;
      }
      if (qword_100907880 != -1) {
        swift_once();
      }
      uint64_t v208 = type metadata accessor for Logger();
      sub_10008E2DC(v208, (uint64_t)qword_10091C820);
      unint64_t v209 = Logger.logObject.getter();
      os_log_type_t v210 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v209, v210))
      {
        char v211 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v211 = 0;
        _os_log_impl((void *)&_mh_execute_header, v209, v210, "Dropping unsupported .none list type criterion", v211, 2u);
        swift_slowDealloc();
      }
    }
    (*v241)(v281, v282);
    uint64_t v154 = v294;
    uint64_t v41 = v290;
    (*v275)(v294, v290);
  }
  uint64_t v151 = v292;
  goto LABEL_170;
}

id sub_100539064@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 parentAccount];
  *a2 = result;
  return result;
}

id sub_1005390A0(void *a1, id *a2)
{
  return [*a2 setParentAccount:*a1];
}

void *sub_1005390B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = _s10PredicatesOMa(0);
  *(void *)&double v8 = __chkstk_darwin(v7).n128_u64[0];
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  [v4 remObjectID:v8];
  if (!v11) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v11;
  uint64_t v24 = a1;
  *(void *)uint64_t v10 = v11;
  v10[8] = 1;
  *((void *)v10 + 2) = a2;
  swift_storeEnumTagMultiPayload();
  id v25 = v12;
  uint64_t v13 = (void *)sub_10038F1F0();
  sub_1003DC140((uint64_t)v10, _s10PredicatesOMa);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10077A530;
  *(void *)(v14 + 32) = v4;
  uint64_t v26 = v14;
  specialized Array._endMutation()();
  id v15 = v4;
  sub_100094134(&qword_10090FF00);
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  sub_1000967F4((unint64_t *)&qword_10090FE58, &qword_10090FF00);
  sub_1000ED098((unint64_t *)&qword_100910050, (unint64_t *)&qword_10090FE00);
  uint64_t v16 = Sequence.compactMapToSet<A>(_:)();
  sub_1002099D8(v16);
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v17 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v18 = [(id)swift_getObjCClassFromMetadata() entity];
  [v17 setEntity:v18];

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v17 setAffectedStores:isa];

  [v17 setPredicate:v13];
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_100907418 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class v20 = Array._bridgeToObjectiveC()().super.isa;
  [v17 setSortDescriptors:v20];

  uint64_t v21 = v24;
  uint64_t v22 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {
  }
  else
  {
    uint64_t v26 = v22;
    sub_100094134(&qword_10090D750);
    sub_1000967F4((unint64_t *)&qword_10090FD80, &qword_10090D750);
    uint64_t v21 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();
  }
  return (void *)v21;
}

uint64_t sub_1005394B0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_mostRecentTargetTemplateIdentifierByCurrentUser, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1005394E4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100539520()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091C820);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091C820);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1005395E8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 sharees];
  if (v3)
  {
    uint64_t v4 = v3;
    sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
    sub_1000ED098((unint64_t *)&unk_100913900, (unint64_t *)&qword_100909AF8);
    uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
}

void sub_100539694(void *a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*a1)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
    sub_1000ED098((unint64_t *)&unk_100913900, (unint64_t *)&qword_100909AF8);
    v3.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.Class isa = 0;
  }
  Class isa = v3.super.isa;
  [v2 setSharees:];
}

void sub_100539750(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  id v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  Class v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    Class v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

id sub_100539898@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isPinnedByCurrentUser];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1005398CC(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsPinnedByCurrentUser:*a1];
}

uint64_t sub_1005398E0()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_100942568 = v0;
  return result;
}

id sub_100539978@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 parentAccount];
  *a2 = result;
  return result;
}

id sub_1005399B4(void *a1, id *a2)
{
  return [*a2 setParentAccount:*a1];
}

uint64_t sub_1005399C8()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077DE90;
  *(void *)(v0 + 32) = swift_getKeyPath();
  *(void *)(v0 + 40) = swift_getKeyPath();
  *(void *)(v0 + 48) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  qword_100942570 = v0;
  return result;
}

void *sub_100539A5C(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v3) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v3 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = 0;
    while (v3 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      dispatch thunk of REMStoreObjectsContainer.storedList(with:)();

      if (v1) {
        return (void *)swift_release();
      }
      ++v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v3 == v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100539BAC(uint64_t a1, uint64_t a2)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100776E80;
  uint64_t v4 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v5)
  {
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v5;
    *(void *)(v3 + 88) = &type metadata for Int;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = a2;
    NSString v6 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v8 = [self predicateWithFormat:v6 argumentArray:isa];

    return (uint64_t)v8;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v10._object = (void *)0x80000001007CAF70;
    v10._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v10);
    sub_100094134(&qword_100913A10);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _s10PredicatesOMa_1()
{
  uint64_t result = qword_10091C8A8;
  if (!qword_10091C8A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100539DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10PredicatesOMa_1();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100539E1C()
{
  uint64_t KeyPath = swift_getKeyPath();
  sub_10039B114(KeyPath, 0);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v1 = swift_getKeyPath();
  sub_10039B07C(v1, 2);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  return sub_1002F52FC(_swiftEmptyArrayStorage);
}

const char *sub_100539F48()
{
  return "isGroup";
}

id sub_100539F54@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isGroup];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100539F88(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsGroup:*a1];
}

const char *sub_100539FDC()
{
  return "badgeEmblem";
}

void sub_100539FE8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10053A008(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_10053A038(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10053A058(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10053A088@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_mostRecentTargetTemplateIdentifierByCurrentUser, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10053A0D0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_10053A120()
{
  return "pinnedDate";
}

uint64_t sub_10053A12C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_pinnedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10053A174(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_10053A1C4()
{
  return "isPinnedByCurrentUser";
}

id sub_10053A1D0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isPinnedByCurrentUser];
  *a2 = (_BYTE)result;
  return result;
}

id sub_10053A204(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsPinnedByCurrentUser:*a1];
}

const char *sub_10053A218()
{
  return "sharees";
}

void sub_10053A244(void *a1, id *a2, uint64_t *a3)
{
  id v5 = *a2;
  id v28 = [*a2 account];
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  id v27 = [v5 remObjectID];
  sub_100094134((uint64_t *)&unk_100914BC0);
  uint64_t v6 = Optional.descriptionOrNil.getter();
  id v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 125;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  sub_100094134((uint64_t *)&unk_10090AF30);
  Optional.tryUnwrap(_:file:line:)();
  swift_bridgeObjectRelease();

  if (!v3)
  {
    id v25 = a1;
    id v11 = [v29 remObjectID];
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    id v12 = [v29 objectID];
    id v13 = [v12 description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    v17._countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);

    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 125;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    Optional.tryUnwrap(_:file:line:)();
    swift_bridgeObjectRelease();

    uint64_t v19 = *a3;
    id v20 = v29;
    id v21 = sub_1002F0290(v20, v19);

    if (!v21)
    {
      id v23 = sub_10028AA2C(v29);
      id v24 = v20;
      id v21 = v23;
      sub_1001A6CE4((uint64_t)v21, (uint64_t)v24);
    }
    id v22 = v21;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
}

void sub_10053A5AC(void *a1, void **a2, uint64_t *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  id v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t v16 = *a2;
  id v17 = [v16 parentList];
  if (v17)
  {
    Swift::String v18 = v17;
    if ([v17 isDeleted])
    {
      if (qword_100907880 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_10008E2DC(v19, (uint64_t)qword_10091C820);
      id v20 = v16;
      id v21 = Logger.logObject.getter();
      int v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, (os_log_type_t)v22))
      {
        int v47 = v22;
        os_log_t v48 = v21;
        id v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        uint64_t v50 = v46;
        *(_DWORD *)id v23 = 136315138;
        id v24 = [v20 identifier];
        if (v24)
        {
          id v25 = v24;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v13, 1, 1, v6);
        }
        sub_1000F44F4((uint64_t)v13, (uint64_t)v15);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6))
        {
          sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
          unint64_t v39 = 0xE300000000000000;
          uint64_t v40 = 7104878;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, v6);
          sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
          uint64_t v40 = UUID.uuidString.getter();
          unint64_t v39 = v41;
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        }
        id v53 = (id)sub_1000C51B8(v40, v39, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_t v42 = v48;
        _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v47, "REMCDList's parentList is unexpectedly deleted {identifier: %s}", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      id v26 = [v18 remObjectID];
      uint64_t v50 = 0;
      unint64_t v51 = 0xE000000000000000;
      id v52 = v26;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      uint64_t v50 = 0xD00000000000002CLL;
      unint64_t v51 = 0x80000001007D7C50;
      id v27 = [v18 objectID];
      id v28 = [v27 description];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;

      v32._countAndFlagsBits = v29;
      v32._object = v31;
      String.append(_:)(v32);

      swift_bridgeObjectRelease();
      v33._countAndFlagsBits = 125;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      sub_100094134((uint64_t *)&unk_100914BC0);
      uint64_t v34 = v49;
      Optional.tryUnwrap(_:file:line:)();
      if (v34)
      {

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();

        uint64_t v35 = *a3;
        id v36 = v53;
        int v37 = sub_1002F02B8(v36, v35);

        if (!v37)
        {
          unint64_t v43 = sub_1005DFE88(v18);
          id v44 = v36;
          int v37 = v43;
          sub_1001A6D10((uint64_t)v37, (uint64_t)v44);
        }
        int v38 = v37;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
  }
}

void *sub_10053ABA4(void *a1, unint64_t a2, uint64_t a3, void (*a4)(void **, id *, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v8 = a1;
  if (a2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v9; uint64_t v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v11 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(a2 + 8 * i);
      uint64_t v8 = v11;
      uint64_t v12 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v14 = v11;
      a4(&v15, &v14, a3);
      if (v4)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v8;
      }

      if (v12 == v9)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v8;
}

void *sub_10053ACE4(unint64_t a1)
{
  uint64_t v7 = _swiftEmptyDictionarySingleton;
  uint64_t v4 = sub_10053ABA4(_swiftEmptyArrayStorage, a1, (uint64_t)&v7, (void (*)(void **, id *, uint64_t))sub_10053A244);
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v1 = v4;
    uint64_t v6 = _swiftEmptyDictionarySingleton;
    sub_10053ABA4(_swiftEmptyArrayStorage, a1, (uint64_t)&v6, (void (*)(void **, id *, uint64_t))sub_10053A5AC);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_10053ADC8(unint64_t a1, void *a2)
{
  id v30 = a2;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for REMListStorageCDIngestor();
  swift_initStackObject();
  if (qword_100907880 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_10008E2DC(v3, (uint64_t)qword_10091C820);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  unint64_t v32 = a1;
  Swift::String v33 = (void *)a1;
  __chkstk_darwin(v8);
  *(&v29 - 2) = v6;
  sub_100094134(&qword_100910160);
  sub_1000963CC(0, (unint64_t *)&unk_100914440);
  sub_1000967F4((unint64_t *)&qword_10090A988, &qword_100910160);
  uint64_t v9 = v31;
  uint64_t v10 = Sequence.map<A>(skippingError:_:)();
  if (v9)
  {
    swift_errorRelease();
    id v11 = _swiftEmptyArrayStorage;
  }
  else
  {
    id v11 = (void *)v10;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v12 = sub_10053ACE4(v32);
  uint64_t v29 = v13;
  Swift::String v33 = v11;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v14 = sub_100094134(&qword_1009100B0);
  uint64_t v15 = sub_1000967F4(&qword_10090ADB0, &qword_1009100B0);
  sub_1000ED098((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
  uint64_t v31 = v15;
  unint64_t v32 = v14;
  unint64_t v16 = Sequence.indexBy<A, B>(key:value:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v17 = sub_10042048C(v16);
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::String v33 = _swiftEmptyDictionarySingleton;
  sub_10039A7C0(v17, (uint64_t)sub_10039A770, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v33);
  uint64_t v19 = v33;
  swift_bridgeObjectRelease();
  Swift::String v33 = v12;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_100094134(&qword_1009101F0);
  sub_1000967F4(&qword_1009169E8, &qword_1009101F0);
  unint64_t v20 = Sequence.indexBy<A, B>(key:value:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v21 = sub_100420018(v20);
  swift_bridgeObjectRelease();
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  Swift::String v33 = v19;
  sub_10039A7C0(v21, (uint64_t)sub_10039A770, 0, v22, (uint64_t)&v33);
  id v23 = v33;
  swift_bridgeObjectRelease();
  Swift::String v33 = v29;
  swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v24 = Sequence.indexBy<A, B>(key:value:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v25 = sub_10042048C(v24);
  swift_bridgeObjectRelease();
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  Swift::String v33 = v23;
  sub_10039A7C0(v25, (uint64_t)sub_10039A770, 0, v26, (uint64_t)&v33);
  swift_bridgeObjectRelease();
  type metadata accessor for REMStoreObjectsContainer();
  swift_allocObject();
  id v27 = v30;
  return REMStoreObjectsContainer.init(store:storages:)();
}

uint64_t sub_10053B340(unint64_t a1, void *a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (!v5) {
    return (uint64_t)v6;
  }
  uint64_t result = sub_10053ADC8(a1, a2);
  if (v2) {
    return (uint64_t)v6;
  }
  if (v5 >= 1)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(a1 + 8 * i + 32);
      }
      uint64_t v10 = v9;
      id v11 = [v9 remObjectID];

      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v6 = sub_100539A5C((unint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    swift_release_n();
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

char *sub_10053B510(char *a1, unsigned char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    id v9 = *(char **)a2;
    *(void *)a1 = *(void *)a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 6u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
        uint64_t v7 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v8 = v7;
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        id v11 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        id v12 = v11;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
      case 5u:
      case 0xAu:
      case 0xBu:
      case 0x10u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        uint64_t v13 = type metadata accessor for UUID();
        (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
        uint64_t v14 = *(void **)a2;
        uint64_t v15 = *((void *)a2 + 1);
        *(void *)a1 = v14;
        *((void *)a1 + 1) = v15;
        id v16 = v14;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0xCu:
        uint64_t v17 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v17;
        Swift::String v18 = (void *)*((void *)a2 + 2);
        *((void *)a1 + 2) = v18;
        swift_bridgeObjectRetain();
        id v19 = v18;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void sub_10053B890(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 6u:
    case 8u:
    case 0xDu:
    case 0xEu:
    case 0xFu:
      id v2 = *(id *)a1;
      goto LABEL_3;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
    case 0x10u:
      goto LABEL_6;
    case 7u:
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      return;
    case 9u:

LABEL_6:
      swift_bridgeObjectRelease();
      break;
    case 0xCu:
      swift_bridgeObjectRelease();
      id v2 = *(id *)(a1 + 16);
LABEL_3:

      break;
    default:
      return;
  }
}

unsigned char *sub_10053B9D4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 6u:
    case 8u:
    case 0xDu:
    case 0xEu:
    case 0xFu:
      uint64_t v6 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v7 = v6;
      goto LABEL_9;
    case 3u:
      id v8 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      id v9 = v8;
      goto LABEL_9;
    case 4u:
    case 5u:
    case 0xAu:
    case 0xBu:
    case 0x10u:
      *(void *)a1 = *(void *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 7u:
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      goto LABEL_9;
    case 9u:
      id v11 = *(void **)a2;
      uint64_t v12 = *((void *)a2 + 1);
      *(void *)a1 = v11;
      *((void *)a1 + 1) = v12;
      id v13 = v11;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 0xCu:
      uint64_t v14 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v14;
      uint64_t v15 = (void *)*((void *)a2 + 2);
      *((void *)a1 + 2) = v15;
      swift_bridgeObjectRetain();
      id v16 = v15;
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

unsigned char *sub_10053BCD0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003DC140((uint64_t)a1, (uint64_t (*)(void))_s10PredicatesOMa_1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 6u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
        uint64_t v6 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v7 = v6;
        goto LABEL_10;
      case 3u:
        id v8 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        id v9 = v8;
        goto LABEL_10;
      case 4u:
      case 5u:
      case 0xAu:
      case 0xBu:
      case 0x10u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 7u:
        uint64_t v10 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_10;
      case 9u:
        id v11 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        id v12 = v11;
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 0xCu:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        id v13 = (void *)*((void *)a2 + 2);
        *((void *)a1 + 2) = v13;
        swift_bridgeObjectRetain();
        id v14 = v13;
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_10053C000(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 7)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10053C0B8(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003DC140((uint64_t)a1, (uint64_t (*)(void))_s10PredicatesOMa_1);
    if (swift_getEnumCaseMultiPayload() == 7)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10053C194()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_10053C274()
{
  unint64_t v1 = *v0;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 unsafeUntilSystemReady_displayedHostnameOfICloudACAccountWithAccountIdentifier:v2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_10053C2F4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091C8E0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091C8E0);
  if (qword_1009077D0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423B8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10053C3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v59 = a4;
  uint64_t v57 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v60 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  Swift::String v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v12;
  uint64_t v62 = v10;
  id v58 = v16;
  if (v16)
  {
    uint64_t v56 = v11;
    uint64_t v19 = qword_100907898;
    id v20 = v16;
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_10008E2DC(v14, (uint64_t)qword_10091C8E0);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v21, v14);
    swift_errorRetain();
    id v22 = v20;
    swift_errorRetain();
    id v23 = v22;
    unint64_t v24 = Logger.logObject.getter();
    int v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      int v52 = v25;
      os_log_t v53 = v24;
      uint64_t v54 = v8;
      uint64_t v55 = v7;
      uint64_t v50 = a5;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      aBlock[0] = v51;
      *(_DWORD *)uint64_t v26 = 136315394;
      id v27 = [v23 transactionId];
      if (!v27)
      {
        swift_errorRelease();

        __break(1u);
        return;
      }
      id v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v31 = v30;

      uint64_t v63 = (void *)sub_1000C51B8(v29, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      if (a1)
      {
        swift_getErrorValue();
        uint64_t v32 = Error.localizedDescription.getter();
        unint64_t v34 = v33;
      }
      else
      {
        uint64_t v32 = 7104878;
        unint64_t v34 = 0xE300000000000000;
      }
      a5 = v50;
      uint64_t v63 = (void *)sub_1000C51B8(v32, v34, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v41 = v53;
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v52, "DADREMShareResponseDelegate has completed with DATransaction {transactionId: %s, error: %s}", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      uint64_t v7 = v55;
      uint64_t v8 = v54;
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
    goto LABEL_19;
  }
  if (qword_100907898 != -1) {
    swift_once();
  }
  sub_10008E2DC(v14, (uint64_t)qword_10091C8E0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v56 = v11;
    int v37 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)int v37 = 136315138;
    if (a1)
    {
      swift_getErrorValue();
      uint64_t v38 = Error.localizedDescription.getter();
      unint64_t v40 = v39;
    }
    else
    {
      uint64_t v38 = 7104878;
      unint64_t v40 = 0xE300000000000000;
    }
    uint64_t v63 = (void *)sub_1000C51B8(v38, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "DADREMShareResponseDelegate has completed, but DATransaction was nil?! {error: %s}", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_19:
    uint64_t v11 = v56;
    goto LABEL_20;
  }
  swift_errorRelease();
  swift_errorRelease();

LABEL_20:
  uint64_t v42 = v59;
  if (qword_1009070C0 != -1) {
    swift_once();
  }
  unint64_t v43 = (void *)swift_allocObject();
  id v44 = v58;
  v43[2] = v57;
  v43[3] = v42;
  v43[4] = a1;
  v43[5] = v44;
  aBlock[4] = (uint64_t)sub_10053DB9C;
  aBlock[5] = (uint64_t)v43;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100236C78;
  aBlock[3] = (uint64_t)&unk_1008C9790;
  uint64_t v45 = _Block_copy(aBlock);
  swift_errorRetain();
  id v46 = v44;
  swift_retain();
  int v47 = v60;
  static DispatchQoS.unspecified.getter();
  uint64_t v63 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  os_log_t v48 = v62;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v45);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v48, v7);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v47, v11);
  swift_release();
  [a5 setRemXPCCompletion:0];
}

void sub_10053CBD4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(a3);
  if (a4)
  {
    uint64_t v11 = qword_100907898;
    id v12 = a4;
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_10008E2DC(v7, (uint64_t)qword_10091C8E0);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v13, v7);
    swift_errorRetain();
    id v14 = v12;
    swift_errorRetain();
    id v15 = v14;
    id v16 = Logger.logObject.getter();
    int v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      LODWORD(v37) = v17;
      uint64_t v35 = v8;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v39 = v36;
      *(_DWORD *)uint64_t v18 = 136315394;
      id v19 = [v15 transactionId];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;

        uint64_t v38 = sub_1000C51B8(v21, v23, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 12) = 2080;
        if (a3)
        {
          swift_getErrorValue();
          uint64_t v24 = Error.localizedDescription.getter();
          unint64_t v26 = v25;
        }
        else
        {
          uint64_t v24 = 7104878;
          unint64_t v26 = 0xE300000000000000;
        }
        uint64_t v33 = v35;
        uint64_t v38 = sub_1000C51B8(v24, v26, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v37, "DADREMShareResponseDelegate has done calling XPC completion with DATransaction {transactionId: %s, error: %s}", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
      }
      else
      {
        swift_errorRelease();

        __break(1u);
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  else
  {
    if (qword_100907898 != -1) {
      swift_once();
    }
    sub_10008E2DC(v7, (uint64_t)qword_10091C8E0);
    swift_errorRetain();
    swift_errorRetain();
    int v37 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)id v28 = 136315138;
      if (a3)
      {
        swift_getErrorValue();
        uint64_t v29 = Error.localizedDescription.getter();
        unint64_t v31 = v30;
      }
      else
      {
        uint64_t v29 = 7104878;
        unint64_t v31 = 0xE300000000000000;
      }
      uint64_t v38 = sub_1000C51B8(v29, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v27, "DADREMShareResponseDelegate has done calling XPC completion, but DATransaction was nil?! {error: %s}", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v32 = v37;
    }
  }
}

uint64_t type metadata accessor for RDDACalDAVShareRequestHandler()
{
  return self;
}

uint64_t sub_10053D140(void (*a1)(void))
{
  if (qword_100907BA8 != -1) {
    swift_once();
  }
  if ((byte_1009426D9 & 1) == 0)
  {
    if (qword_100907898 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_10091C8E0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v4, v5)) {
      goto LABEL_18;
    }
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    uint64_t v7 = "RDDACalDAVShareRequestHandler: Attempted to call DADREMShareResponseDelegate when DataAccess is disabled, aborting...";
    goto LABEL_17;
  }
  if (byte_1009426D8 == 1 && gDADOperationQueue != 0)
  {
    id v9 = [self sharedManager];
    id v10 = [v9 rem_storeProvider];
    swift_unknownObjectRelease();
    if (v10)
    {
      id v11 = [v9 activeAgents];
      if (v11)
      {
        id v12 = v11;
        sub_10053DBA8();
        unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v13 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v14)
        {

          return 1;
        }
      }
      if (qword_100907898 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_10008E2DC(v16, (uint64_t)qword_10091C8E0);
      int v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v17, v18)) {
        goto LABEL_34;
      }
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      id v20 = "RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DADAgentManager has no active"
            " accounts, aborting...";
    }
    else
    {
      if (qword_100907898 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_10008E2DC(v21, (uint64_t)qword_10091C8E0);
      int v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v17, v18)) {
        goto LABEL_34;
      }
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      id v20 = "RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DADAgentManager is not yet se"
            "t up properly, aborting...";
    }
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v20, v19, 2u);
    swift_slowDealloc();
LABEL_34:

    a1(0);
    return 0;
  }
  if (qword_100907898 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_10091C8E0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    uint64_t v7 = "RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DataAccess is not yet up and run"
         "ning, aborting...";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
    swift_slowDealloc();
  }
LABEL_18:

  a1(0);
  return 0;
}

void sub_10053D558(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(void), uint64_t a7)
{
  uint64_t v8 = a6;
  if (sub_10053D140(a6))
  {
    id v14 = [objc_allocWithZone((Class)DATransaction) init];
    if (qword_100907898 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091C8E0);
    id v45 = v14;
    id v16 = v14;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v17 = v16;
    os_log_type_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v41 = v19;
      uint64_t v42 = a2;
      uint64_t v44 = a1;
      uint64_t v20 = 1819047278;
      uint64_t v21 = swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315650;
      unint64_t v43 = v8;
      if (v17 && (id v22 = [v17 transactionId]) != 0)
      {
        unint64_t v23 = v22;
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v25 = v24;
      }
      else
      {
        unint64_t v25 = 0xE400000000000000;
      }
      sub_1000C51B8(v20, v25, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a4, a5, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 22) = 2080;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v42, a3, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v41, "RDDACalDAVShareRequestHandler: Creating a DADREMShareResponseDelegate to call onto respondToShareRequest() {DATransaction.id: %s, accountID: %s, calendarURL: %s}", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v8 = v43;
      a1 = v44;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    id v26 = objc_allocWithZone((Class)DADREMShareResponseDelegate);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v29 = [v26 initWithAccountID:v27 calendarID:v28];

    unint64_t v30 = (void *)swift_allocObject();
    void v30[2] = v45;
    v30[3] = v8;
    uint64_t v30[4] = a7;
    v30[5] = v29;
    uint64_t v50 = sub_10053DAE8;
    uint64_t v51 = v30;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v47 = 1107296256;
    os_log_t v48 = sub_1000E13D0;
    uint64_t v49 = &unk_1008C96F0;
    unint64_t v31 = _Block_copy(&aBlock);
    id v32 = v29;
    id v33 = v17;
    id v34 = v32;
    swift_retain();
    swift_release();
    [v34 setRemXPCCompletion:v31];
    _Block_release(v31);

    id v35 = [self sharedMain];
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = v34;
      *(void *)(v37 + 24) = a1;
      uint64_t v50 = sub_10053DB44;
      uint64_t v51 = (void *)v37;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v47 = 1107296256;
      os_log_t v48 = sub_100236C78;
      uint64_t v49 = &unk_1008C9740;
      uint64_t v38 = _Block_copy(&aBlock);
      id v39 = v34;
      id v40 = v36;
      swift_release();
      [v40 addToOperationsQueueDisabledCheckAndGoBlock:0 wrappedBlock:v38];

      _Block_release(v38);
      id v33 = v40;
    }
    else
    {
    }
  }
}

uint64_t sub_10053DAA0()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10053DAE8(uint64_t a1)
{
  sub_10053C3BC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10053DAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10053DB04()
{
  return swift_release();
}

uint64_t sub_10053DB0C()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_10053DB44()
{
  return [*(id *)(v0 + 16) respondToShareRequestWithResponse:*(void *)(v0 + 24)];
}

uint64_t sub_10053DB54()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10053DB9C()
{
  sub_10053CBD4(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

unint64_t sub_10053DBA8()
{
  unint64_t result = qword_10091C990;
  if (!qword_10091C990)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10091C990);
  }
  return result;
}

uint64_t sub_10053DBF8(uint64_t a1)
{
  uint64_t result = sub_100540A2C(&qword_10091C9D0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10053DC50()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091C998);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091C998);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10053DD18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v53 = a3;
  uint64_t v50 = a1;
  uint64_t v47 = a6;
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.ListsModel();
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v49 = v9;
  __chkstk_darwin(v9);
  id v45 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v46 = (char *)&v38 - v12;
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v42 = *(void *)(v13 - 8);
  uint64_t v43 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v44 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  os_log_type_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v38 - v20);
  uint64_t v51 = a5;
  id v22 = (void *)REMRemindersListDataView.GroupInvocation.Parameters.group.getter();
  unint64_t v23 = a4;
  uint64_t v24 = (uint64_t)v54;
  sub_10053F790(a2, a4, v22);

  if (!v24)
  {
    id v40 = v15;
    os_log_type_t v41 = v18;
    uint64_t v54 = v21;
    uint64_t v39 = v16;
    uint64_t v25 = v49;
    id v26 = v52;
    NSString v27 = v23;
    uint64_t v28 = sub_10053E120(v50, a2, v53, v23, v51);
    uint64_t v50 = v29;
    id v30 = [v26 fetchResultTokenToDiffAgainst];
    unint64_t v31 = v54;
    sub_10051F2BC(v30, a2, (uint64_t)v54);
    uint64_t v53 = 0;

    uint64_t v32 = (uint64_t)v40;
    REMRemindersListDataView.GroupInvocation.Parameters.remindersPrefetch.getter();
    swift_bridgeObjectRetain();
    sub_10052A250(v32, v31, a2, v27, 0, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v32, v43);
    id v33 = v46;
    REMRemindersListDataView.ListsModel.init(groups:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    uint64_t v34 = v48;
    uint64_t v35 = v25;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v33, v25);
    uint64_t v36 = v44;
    uint64_t v37 = v39;
    (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v44 + 16))(v41, v31, v39);
    REMRemindersListDataView.GroupInvocation.Result.init(model:diff:group:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v35);
    (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v36 + 8))(v31, v37);
  }
}

uint64_t sub_10053E120(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v54 = a4;
  uint64_t v48 = a1;
  uint64_t v49 = a3;
  uint64_t v50 = _s10PredicatesOMa_3();
  __chkstk_darwin(v50);
  uint64_t v51 = (uint64_t *)((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = _s10PredicatesOMa_1();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)REMRemindersListDataView.GroupInvocation.Parameters.group.getter();
  id v13 = [v12 objectID];

  char v14 = REMRemindersListDataView.GroupInvocation.Parameters.includePinnedSublists.getter();
  *(void *)uint64_t v11 = v13;
  char v15 = v14 & 1;
  v11[8] = v14 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = qword_100907890;
  id v17 = v13;
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v53 = a5;
  unint64_t v18 = qword_100942570;
  uint64_t v19 = (void *)sub_100535B3C();
  uint64_t v20 = (void *)sub_1003BD0F4(0, v18, 0, (uint64_t)v19);

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v20 setSortDescriptors:isa];

  uint64_t v22 = sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t v23 = NSManagedObjectContext.fetch<A>(_:)();
  if (v5)
  {

    sub_100540FF0((uint64_t)v11, (uint64_t (*)(void))_s10PredicatesOMa_1);
  }
  else
  {
    uint64_t v47 = a2;
    uint64_t v56 = v23;
    sub_100094134(&qword_100910160);
    sub_1000ED03C();
    unint64_t v24 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    sub_100540FF0((uint64_t)v11, (uint64_t (*)(void))_s10PredicatesOMa_1);
    uint64_t v25 = v54;
    unint64_t v26 = sub_10053B340(v24, v54);
    uint64_t v27 = swift_bridgeObjectRelease();
    uint64_t v56 = 0;
    __chkstk_darwin(v27);
    uint64_t v28 = v53;
    uint64_t v29 = v47;
    *(&v46 - 4) = (uint64_t)v52;
    *(&v46 - 3) = v29;
    *(&v46 - 2) = v28;
    *(&v46 - 1) = (uint64_t)&v56;
    uint64_t v30 = sub_100224980((void (*)(id *, uint64_t *))sub_10053FB28, (uint64_t)(&v46 - 6), v26);
    uint64_t v31 = (uint64_t)v51;
    *uint64_t v51 = v17;
    *(unsigned char *)(v31 + 8) = v15;
    swift_storeEnumTagMultiPayload();
    id v32 = v17;
    unint64_t v34 = sub_100649DD0(v31, v29, 0);
    sub_100540FF0(v31, (uint64_t (*)(void))_s10PredicatesOMa_3);
    uint64_t v35 = sub_10064A824(v34, v25);
    swift_bridgeObjectRelease();
    type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation();
    id v36 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
    __chkstk_darwin(v36);
    id v52 = v37;
    uint64_t v38 = v48;
    *(&v46 - 8) = (uint64_t)v37;
    *(&v46 - 7) = v38;
    uint64_t v39 = v49;
    *(&v46 - 6) = v29;
    *(&v46 - 5) = v39;
    *(&v46 - 4) = (uint64_t)v25;
    *(&v46 - 3) = v28;
    *(&v46 - 2) = (uint64_t)&v56;
    unint64_t v40 = (unint64_t)v35;
    uint64_t v41 = sub_100224980((void (*)(id *, uint64_t *))sub_10053FB4C, (uint64_t)(&v46 - 10), (unint64_t)v35);
    uint64_t v55 = (char *)v30;
    sub_100202274(v41);
    uint64_t v42 = (void *)v29;
    uint64_t v43 = v55;
    uint64_t v44 = (void *)REMRemindersListDataView.GroupInvocation.Parameters.group.getter();
    id v45 = [v44 accountID];

    uint64_t v22 = sub_10053FF58(v43, v26, v40, (unint64_t)v45, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v22;
}

void sub_10053E6E0(void **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v42 = a5;
  uint64_t v39 = a4;
  uint64_t v40 = a6;
  uint64_t v38 = _s10PredicatesOMa(0);
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)&double v15 = __chkstk_darwin(v13).n128_u64[0];
  id v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = *a1;
  id v19 = [v18 objectID:v15];
  REMRemindersListDataView.GroupInvocation.Parameters.sortingStyle.getter();
  uint64_t v20 = a2;
  uint64_t v21 = v43;
  uint64_t v22 = sub_100540B44(v19, a2, a3, (uint64_t)v17);
  uint64_t v43 = v21;
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    uint64_t v23 = v43;
LABEL_3:

    *uint64_t v42 = v23;
    return;
  }
  unint64_t v24 = v41;
  v36[0] = v20;
  v36[1] = (uint64_t)v22;
  uint64_t v37 = v12;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);

  id v19 = [v18 objectID];
  if (REMRemindersListDataView.GroupInvocation.Parameters.countCompleted.getter())
  {
    uint64_t v25 = v18;
    *unint64_t v24 = v19;
    swift_storeEnumTagMultiPayload();
    id v26 = v19;
    id v19 = (id)sub_10038F1F0();
    sub_100540FF0((uint64_t)v24, _s10PredicatesOMa);
    uint64_t v27 = (uint64_t)v37;
    uint64_t v28 = v43;
    sub_10051EB6C(v36[0], (uint64_t)v19);
    uint64_t v23 = v28;
    if (v28)
    {

      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
    uint64_t v29 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v27, 0, 1, v29);

    unint64_t v18 = v25;
  }
  else
  {
    uint64_t v29 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    uint64_t v27 = (uint64_t)v37;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v37, 1, 1, v29);
  }

  type metadata accessor for REMRemindersListDataView.CountByCompleted();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v27, 1, v29) == 1)
  {
    sub_1000966BC(v27, &qword_100909C70);
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v31 = REMRemindersListDataView.CountByCompleted.completed.getter();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v27, v29);
  }
  if (__OFADD__(*v39, v31))
  {
    __break(1u);
  }
  else
  {
    *v39 += v31;
    id v32 = [v18 objectID];
    REMObjectID.codable.getter();

    id v33 = [v18 displayName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v34 = [v18 color];
    if (v34)
    {
      uint64_t v35 = v34;
      REMColor.codable.getter();
    }
    REMRemindersListDataView.ListsModel.Sublist.init(listID:listName:listColor:reminders:isCustomSmartList:)();
  }
}

uint64_t sub_10053EB94@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X7>, uint64_t a8@<X8>, void *a9)
{
  uint64_t v62 = a6;
  uint64_t v51 = a8;
  id v52 = a7;
  uint64_t v59 = a4;
  uint64_t v60 = a5;
  uint64_t v58 = a3;
  uint64_t v61 = a2;
  uint64_t v54 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v64 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v49 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v50 = (char *)&v46 - v12;
  uint64_t v13 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v13 - 8);
  uint64_t v53 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v56 = *(void *)(Subtasks - 8);
  uint64_t v57 = Subtasks;
  __chkstk_darwin(Subtasks);
  id v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  __chkstk_darwin(v18 - 8);
  uint64_t v19 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  __chkstk_darwin(v19 - 8);
  uint64_t v20 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v20 - 8);
  uint64_t v55 = type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation.Parameters();
  uint64_t v21 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation.Result();
  uint64_t v47 = *(void *)(v24 - 8);
  uint64_t v48 = v24;
  __chkstk_darwin(v24);
  id v26 = (char *)&v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v27 = *a1;
  REMRemindersListDataView.GroupInvocation.Parameters.sortingStyle.getter();
  REMRemindersListDataView.GroupInvocation.Parameters.showCompleted.getter();
  REMRemindersListDataView.GroupInvocation.Parameters.remindersPrefetch.getter();
  (*(void (**)(char *, void, uint64_t))(v56 + 104))(v17, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), v57);
  REMRemindersListDataView.CustomSmartListInvocation.Parameters.init(smartList:sortingStyle:showCompleted:countCompleted:remindersPrefetch:fetchSubtasks:shouldFetchManualOrderingID:)();
  id v28 = v63;
  sub_1005AD16C(v59, v60, v62, (uint64_t)v26);
  if (v28)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v55);
    *a9 = v28;
  }
  else
  {
    id v63 = v27;
    uint64_t v30 = v52;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v55);
    uint64_t v31 = v50;
    REMRemindersListDataView.CustomSmartListInvocation.Result.model.getter();
    uint64_t v32 = (uint64_t)v53;
    REMRemindersListDataView.FlatModel.remindersCount.getter();
    uint64_t v33 = v64 + 8;
    uint64_t v62 = *(void **)(v64 + 8);
    ((void (*)(char *, uint64_t))v62)(v31, v54);
    uint64_t v34 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v32, 1, v34) == 1)
    {
      uint64_t result = sub_1000966BC(v32, &qword_100909C70);
      uint64_t v36 = 0;
    }
    else
    {
      uint64_t v36 = REMRemindersListDataView.CountByCompleted.completed.getter();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v32, v34);
    }
    uint64_t v37 = *v30 + v36;
    uint64_t v38 = v63;
    if (__OFADD__(*v30, v36))
    {
      __break(1u);
    }
    else
    {
      uint64_t v39 = v26;
      uint64_t v64 = v33;
      *uint64_t v30 = v37;
      uint64_t v40 = v38;
      id v41 = [v38 objectID];
      REMObjectID.codable.getter();

      id v42 = [v40 name];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v43 = [v40 color];
      if (v43)
      {
        uint64_t v44 = v43;
        REMColor.codable.getter();
      }
      id v45 = v49;
      REMRemindersListDataView.CustomSmartListInvocation.Result.model.getter();
      REMRemindersListDataView.FlatModel.reminders.getter();
      ((void (*)(char *, uint64_t))v62)(v45, v54);
      REMRemindersListDataView.ListsModel.Sublist.init(listID:listName:listColor:reminders:isCustomSmartList:)();
      return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v39, v48);
    }
  }
  return result;
}

uint64_t _s19PolymorphicListItemCMa_0()
{
  return self;
}

ValueMetadata *_s19PolymorphicListItemC5ModelOMa_0()
{
  return &_s19PolymorphicListItemC5ModelON_0;
}

uint64_t sub_10053F258(uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_10090F790);
  __chkstk_darwin(v11);
  double v15 = (void **)((char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  LODWORD(v61) = a2;
  uint64_t v57 = v3;
  uint64_t v58 = v16;
  id v17 = (char *)v15 + *(int *)(v12 + 48);
  unint64_t v56 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = a1 + v56;
  uint64_t v63 = *(void *)(v13 + 72);
  uint64_t v60 = a1;
  swift_bridgeObjectRetain();
  sub_100540ADC(v18, (uint64_t)v15);
  uint64_t v59 = v8;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  id v69 = *v15;
  uint64_t v20 = (uint64_t)v69;
  uint64_t v64 = v7;
  uint64_t v65 = v10;
  uint64_t v62 = v17;
  v19(v10, v17, v7);
  uint64_t v21 = (void *)*a3;
  unint64_t v23 = sub_100307040(v20);
  uint64_t v24 = v21[2];
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_23;
  }
  char v27 = v22;
  if (v21[3] >= v26)
  {
    if (v61)
    {
      if (v22) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_100318D98();
      if (v27) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v33 = (void *)*a3;
    *(void *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    *(void *)(v33[6] + 8 * v23) = v20;
    uint64_t v34 = v33[7];
    uint64_t v61 = *(void *)(v59 + 72);
    uint64_t v35 = v64;
    v19((char *)(v34 + v61 * v23), v65, v64);
    uint64_t v36 = v33[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v33[2] = v38;
    uint64_t v39 = v58 - 1;
    if (v58 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v40 = v60 + v63 + v56;
    while (1)
    {
      sub_100540ADC(v40, (uint64_t)v15);
      id v69 = *v15;
      uint64_t v41 = (uint64_t)v69;
      v19(v65, v62, v35);
      id v42 = (void *)*a3;
      unint64_t v43 = sub_100307040(v41);
      uint64_t v45 = v42[2];
      BOOL v46 = (v44 & 1) == 0;
      BOOL v37 = __OFADD__(v45, v46);
      uint64_t v47 = v45 + v46;
      if (v37) {
        break;
      }
      char v48 = v44;
      if (v42[3] < v47)
      {
        sub_10030ECCC(v47, 1);
        unint64_t v43 = sub_100307040(v41);
        if ((v48 & 1) != (v49 & 1)) {
          goto LABEL_25;
        }
      }
      if (v48) {
        goto LABEL_10;
      }
      uint64_t v50 = (void *)*a3;
      *(void *)(*a3 + 8 * (v43 >> 6) + 64) |= 1 << v43;
      *(void *)(v50[6] + 8 * v43) = v41;
      uint64_t v35 = v64;
      v19((char *)(v50[7] + v61 * v43), v65, v64);
      uint64_t v51 = v50[2];
      BOOL v37 = __OFADD__(v51, 1);
      uint64_t v52 = v51 + 1;
      if (v37) {
        goto LABEL_24;
      }
      uint64_t v50[2] = v52;
      v40 += v63;
      if (!--v39) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_10030ECCC(v26, v61 & 1);
  unint64_t v28 = sub_100307040(v20);
  if ((v27 & 1) == (v29 & 1))
  {
    unint64_t v23 = v28;
    if ((v27 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v31 = swift_allocError();
    swift_willThrow();
    uint64_t v68 = v31;
    swift_errorRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v65, v64);
      uint64_t v32 = v69;
      swift_bridgeObjectRelease();

      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  type metadata accessor for REMObjectID_Codable();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  uint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v53._object = (void *)0x80000001007D3E70;
  v53._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v53);
  type metadata accessor for REMObjectID_Codable();
  _print_unlocked<A, B>(_:_:)();
  v54._countAndFlagsBits = 39;
  v54._object = (void *)0xE100000000000000;
  String.append(_:)(v54);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_10053F790(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = _s10PredicatesOMa_1();
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10077A530;
  *(void *)(v9 + 32) = [a3 objectID];
  uint64_t v21 = v9;
  specialized Array._endMutation()();
  *uint64_t v8 = v21;
  swift_storeEnumTagMultiPayload();
  if (qword_100907890 != -1) {
    swift_once();
  }
  unint64_t v10 = qword_100942570;
  uint64_t v11 = (void *)sub_100535B3C();
  uint64_t v12 = (void *)sub_1003BD0F4(0, v10, 0, (uint64_t)v11);

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v12 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {

    sub_100540FF0((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
    return a3;
  }
  uint64_t v21 = v14;
  sub_100094134(&qword_100910160);
  sub_1000ED03C();
  unint64_t v15 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();

  unint64_t v16 = sub_10053B340(v15, a2);
  id result = (id)swift_bridgeObjectRelease();
  if (!(v16 >> 62))
  {
    if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    sub_100540FF0((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
    return a3;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  id result = (id)swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_14;
  }
LABEL_9:
  if ((v16 & 0xC000000000000001) != 0)
  {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_12;
  }
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v18 = *(id *)(v16 + 32);
LABEL_12:
    a3 = v18;
    swift_bridgeObjectRelease();
    sub_100540FF0((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
    return a3;
  }
  __break(1u);
  return result;
}

void sub_10053FB28(void **a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_10053E6E0(a1, *(void *)(v3 + 24), *(void *)(v3 + 32), *(void **)(v3 + 40), a2, a3);
}

uint64_t sub_10053FB4C@<X0>(id *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10053EB94(a1, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void (**)(char *, uint64_t, uint64_t))(v3 + 32), *(void *)(v3 + 40), *(void **)(v3 + 48), *(void **)(v3 + 64), a3, a2);
}

char *sub_10053FB84(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v36 = a2;
  uint64_t v5 = sub_100094134(&qword_10091C7F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
  uint64_t v29 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v35 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v28 = (char *)v27 - v11;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v34 = a1 & 0xC000000000000001;
    v27[1] = v3;
    void v27[2] = v29 + 16;
    uint64_t v31 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    uint64_t v32 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
    uint64_t v30 = (void (**)(char *, char *, uint64_t))(v29 + 32);
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
    uint64_t v3 = 4;
    unint64_t v33 = a1;
    while (1)
    {
      id v14 = v34 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v3);
      unint64_t v15 = v14;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      uint64_t v37 = v3 - 3;
      uint64_t v16 = REMObjectID.codable.getter();
      id v17 = (void *)v16;
      uint64_t v18 = v36;
      if (*(void *)(v36 + 16))
      {
        unint64_t v19 = sub_100307040(v16);
        if (v20)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v7, *(void *)(v18 + 56) + *(void *)(v29 + 72) * v19, v8);
          uint64_t v21 = 0;
        }
        else
        {
          uint64_t v21 = 1;
        }
      }
      else
      {
        uint64_t v21 = 1;
      }
      (*v32)(v7, v21, 1, v8);

      if ((*v31)(v7, 1, v8) == 1)
      {
        sub_1000966BC((uint64_t)v7, &qword_10091C7F0);
      }
      else
      {
        char v22 = *v30;
        unint64_t v23 = v28;
        (*v30)(v28, v7, v8);
        v22(v35, v23, v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = (char *)sub_10030931C(0, *((void *)v13 + 2) + 1, 1, (unint64_t)v13);
        }
        unint64_t v25 = *((void *)v13 + 2);
        unint64_t v24 = *((void *)v13 + 3);
        if (v25 >= v24 >> 1) {
          uint64_t v13 = (char *)sub_10030931C(v24 > 1, v25 + 1, 1, (unint64_t)v13);
        }
        *((void *)v13 + 2) = v25 + 1;
        v22(&v13[((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v25], v35, v8);
      }
      a1 = v33;
      ++v3;
      if (v37 == v12)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_10053FF58(char *a1, unint64_t a2, unint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v11 = sub_100094134(&qword_10090F790);
  uint64_t v71 = *(void *)(v11 - 8);
  uint64_t v72 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v70 = a2;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v14) {
      goto LABEL_61;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v14) {
      goto LABEL_61;
    }
  }
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_5;
    }
LABEL_61:
    swift_bridgeObjectRetain();
    return (uint64_t)a1;
  }
  uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15) {
    goto LABEL_61;
  }
LABEL_5:
  unint64_t v82 = (unint64_t)_swiftEmptyArrayStorage;
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v74 = v15;
  uint64_t v75 = a3;
  uint64_t v65 = a5;
  id v68 = (id)a4;
  unint64_t v67 = a1;
  uint64_t v66 = (uint64_t *)v13;
  uint64_t v69 = v5;
  unint64_t v16 = v70;
  unint64_t v73 = v70 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  id v17 = 0;
  a4 = v14;
  do
  {
    if (v73) {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v18 = *(id *)(v16 + 8 * (void)v17 + 32);
    }
    id v19 = v18;
    _s19PolymorphicListItemCMa_0();
    uint64_t v20 = swift_allocObject();
    uint64_t v79 = type metadata accessor for REMList_Codable();
    uint64_t v80 = sub_100540A2C(&qword_100919310, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
    uint64_t v81 = sub_100540A2C(&qword_100919318, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
    v78[0] = v19;
    sub_1003F08EC((uint64_t)v78, (uint64_t)v77);
    sub_100094134(&qword_100919320);
    if (swift_dynamicCast())
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
      unint64_t v21 = v76;
LABEL_16:
      *(void *)(v20 + 16) = v21;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v77);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_8;
    }
    type metadata accessor for REMSmartList_Codable();
    if (swift_dynamicCast())
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
      unint64_t v21 = v76 | 0x8000000000000000;
      goto LABEL_16;
    }
    if (qword_1009078A0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_10091C998);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "unknown or unsupported REM object type for PolymorphicListItem", v25, 2u);
      unint64_t v16 = v70;
      swift_slowDealloc();
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v77);
    swift_deallocPartialClassInstance();
LABEL_8:
    id v17 = (char *)v17 + 1;
  }
  while ((void *)a4 != v17);
  swift_bridgeObjectRelease();
  unint64_t v26 = v82;
  unint64_t v82 = (unint64_t)_swiftEmptyArrayStorage;
  if (v74 < 1)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  unint64_t v73 = v26;
  unint64_t v27 = v75 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  do
  {
    if (v27) {
      id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v29 = *(id *)(v75 + 8 * v28 + 32);
    }
    id v30 = v29;
    uint64_t v31 = swift_allocObject();
    uint64_t v79 = type metadata accessor for REMSmartList_Codable();
    uint64_t v80 = sub_100540A2C(&qword_100919328, (void (*)(uint64_t))&type metadata accessor for REMSmartList_Codable);
    uint64_t v81 = sub_100540A2C(&qword_100919330, (void (*)(uint64_t))&type metadata accessor for REMSmartList_Codable);
    v78[0] = v30;
    sub_1003F08EC((uint64_t)v78, (uint64_t)v77);
    if (swift_dynamicCast())
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
      unint64_t v32 = v76;
LABEL_34:
      *(void *)(v31 + 16) = v32;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v77);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_26;
    }
    if (swift_dynamicCast())
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
      unint64_t v32 = v76 | 0x8000000000000000;
      goto LABEL_34;
    }
    if (qword_1009078A0 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_10008E2DC(v33, (uint64_t)qword_10091C998);
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "unknown or unsupported REM object type for PolymorphicListItem", v36, 2u);
      swift_slowDealloc();
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v77);
    swift_deallocPartialClassInstance();
LABEL_26:
    ++v28;
  }
  while (v74 != v28);
  swift_bridgeObjectRelease();
  v78[0] = v73;
  sub_100202070(v82);
  a4 = v78[0];
  if (!(v78[0] >> 62))
  {
    uint64_t v37 = *(void *)((v78[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v38 = v68;
    id v39 = v68;
    goto LABEL_43;
  }
LABEL_64:
  id v38 = v68;
  id v49 = v68;
  swift_bridgeObjectRetain();
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_43:
  uint64_t v40 = v69;
  if (v37 <= 1) {
    goto LABEL_48;
  }
  uint64_t v41 = (void *)sub_10022914C(v38, v65);
  if (v40)
  {

    swift_errorRelease();
    id v42 = 0;
    uint64_t v40 = 0;
    goto LABEL_49;
  }
  if (v41)
  {
    id v42 = v41;
    uint64_t v43 = REMOrderedIdentifierMap.reorder<A>(objects:)();
    swift_bridgeObjectRelease();

    a4 = v43;
  }
  else
  {
LABEL_48:

    id v42 = 0;
  }
LABEL_49:
  uint64_t v69 = v40;
  if (a4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v44) {
      goto LABEL_66;
    }
LABEL_51:
    v78[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v44 & 0x8000000000000000) == 0)
    {
      uint64_t v45 = 0;
      do
      {
        if ((a4 & 0xC000000000000001) != 0)
        {
          uint64_t v46 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v46 = *(void *)(a4 + 8 * v45 + 32);
          swift_retain();
        }
        id v47 = [(id)(*(void *)(v46 + 16) & 0x7FFFFFFFFFFFFFFFLL) remObjectID];
        swift_release();
        ++v45;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v44 != v45);
      char v48 = (void *)v78[0];
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v44 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v44) {
    goto LABEL_51;
  }
LABEL_66:
  swift_bridgeObjectRelease();
  char v48 = _swiftEmptyArrayStorage;
LABEL_67:
  uint64_t v50 = v67;
  int64_t v51 = *((void *)v67 + 2);
  uint64_t v52 = _swiftEmptyArrayStorage;
  if (v51)
  {
    unint64_t v70 = (unint64_t)v48;
    unint64_t v73 = (unint64_t)v42;
    v78[0] = _swiftEmptyArrayStorage;
    sub_1001DE304(0, v51, 0);
    uint64_t v52 = (void *)v78[0];
    uint64_t v75 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
    uint64_t v53 = *(void *)(v75 - 8);
    uint64_t v74 = *(void *)(v53 + 16);
    Swift::String v54 = &v50[(*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80)];
    uint64_t v55 = *(void *)(v53 + 72);
    unint64_t v56 = v66;
    do
    {
      ((void (*)(char *, char *, uint64_t))v74)((char *)v56 + *(int *)(v72 + 48), v54, v75);
      *unint64_t v56 = REMRemindersListDataView.ListsModel.Sublist.listID.getter();
      v78[0] = v52;
      unint64_t v58 = v52[2];
      unint64_t v57 = v52[3];
      if (v58 >= v57 >> 1)
      {
        sub_1001DE304(v57 > 1, v58 + 1, 1);
        uint64_t v52 = (void *)v78[0];
      }
      void v52[2] = v58 + 1;
      sub_100540A74((uint64_t)v56, (uint64_t)v52+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(void *)(v71 + 72) * v58);
      v54 += v55;
      --v51;
    }
    while (v51);
    id v42 = (id)v73;
    char v48 = (void *)v70;
  }
  uint64_t v59 = v69;
  if (v52[2])
  {
    sub_100094134(&qword_1009147F8);
    uint64_t v60 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v60 = _swiftEmptyDictionarySingleton;
  }
  v78[0] = v60;
  uint64_t v61 = swift_bridgeObjectRetain();
  sub_10053F258(v61, 1, v78);
  if (v59)
  {
LABEL_80:
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v62 = v78[0];
  swift_retain();
  a1 = sub_10053FB84((unint64_t)v48, v62);
  swift_bridgeObjectRelease();

  swift_release_n();
  return (uint64_t)a1;
}

uint64_t sub_100540A2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100540A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10090F790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100540ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10090F790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *sub_100540B44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = a2;
  uint64_t v38 = a4;
  v34[1] = a3;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v39 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  os_log_type_t v35 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v42 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v36 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[0] = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v34[0]);
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v34 - v14;
  uint64_t v16 = _s10PredicatesOMa(0);
  __chkstk_darwin(v16);
  id v18 = (void *)((char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100094134(&qword_100916940);
  void *v18 = a1;
  id v19 = a1;
  REMRemindersListDataView.GroupInvocation.Parameters.showCompleted.getter();
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = (void *)sub_10038F1F0();
  uint64_t v21 = (uint64_t)v18;
  uint64_t v22 = Subtasks;
  sub_100540FF0(v21, _s10PredicatesOMa);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v38, v7);
  unint64_t v23 = v35;
  uint64_t v24 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v25 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v12, v24, v25);
  uint64_t v26 = v39;
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = (uint64_t)v10;
  uint64_t v28 = (uint64_t)v36;
  uint64_t v29 = (uint64_t)v12;
  uint64_t v30 = (uint64_t)v15;
  sub_100520FD4(v27, v29, (uint64_t)v15);
  REMRemindersListDataView.GroupInvocation.Parameters.showCompleted.getter();
  (*(void (**)(char *, void, uint64_t))(v26 + 104))(v23, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), v22);
  uint64_t v31 = v41;
  unint64_t v32 = (char *)sub_100522260(v40, (uint64_t)v20, (uint64_t)v15, 0, 0, v28, v23, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (v31)
  {

    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v22);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v28, v43);
    sub_100540FF0((uint64_t)v15, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  }
  else
  {
    uint64_t v15 = v32;
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v22);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v28, v43);
    sub_100540FF0(v30, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  }
  return v15;
}

uint64_t sub_100540FF0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_100541244(void *a1, int a2, int a3, void *aBlock, uint64_t (*a5)(void))
{
  uint64_t v7 = _Block_copy(aBlock);
  _Block_copy(v7);
  id v8 = a1;
  uint64_t v9 = (void *)a5();
  _Block_release(v7);
  _Block_release(v7);

  return v9;
}

void sub_1005412D8(void *a1, int a2, int a3, void *aBlock, const void *a5, uint64_t (*a6)(void))
{
  uint64_t v9 = (void (**)(void *, uint64_t))_Block_copy(aBlock);
  uint64_t v10 = _Block_copy(a5);
  _Block_copy(v10);
  id v12 = a1;
  uint64_t v11 = a6();
  _Block_release(v10);
  if (v11)
  {
    v9[2](v9, v11);
    swift_unknownObjectRelease();
  }
  _Block_release(v10);
  _Block_release(v9);
}

uint64_t type metadata accessor for RDDaemonController()
{
  return self;
}

id sub_10054145C(uint64_t a1, uint64_t a2, uint64_t a3, Class a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (char *)objc_allocWithZone(a4);
  id v12 = &v11[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(void *)id v12 = a1;
  *((void *)v12 + 1) = a6;
  sub_10010B4E8(a2, (uint64_t)&v11[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity]);
  *(void *)&v11[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = a3;
  v14.receiver = v11;
  v14.super_class = a4;
  return [super init];
}

uint64_t sub_1005414F4(uint64_t a1, uint64_t a2)
{
  sub_10010B4E8(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v12);
  sub_10010B4E8((uint64_t)v12, (uint64_t)v13);
  unint64_t v4 = v14 | ((unint64_t)v15 << 32);
  int v5 = 0x7FFFFFFF;
  switch(v15 >> 14)
  {
    case 2:
      unsigned __int16 v15 = WORD2(v4) & 0x3FFF;
      int v5 = v4;
      break;
    case 3:
      break;
    default:
      int v5 = 2147483519;
      unsigned __int16 v15 = WORD2(v4) & 0x3FFF;
      break;
  }
  sub_100662770(16, v5);
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 8))(v12, *(void *)(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken), ObjectType, v7);
  if (!result)
  {
    uint64_t v10 = self;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 xpcPerformerUnavailableErrorWithDescription:v11];

    swift_willThrow();
    uint64_t v6 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v6);

    swift_errorRelease();
    return 0;
  }
  return result;
}

uint64_t sub_1005416A8(uint64_t a1, uint64_t a2)
{
  sub_10010B4E8(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v12);
  sub_10010B4E8((uint64_t)v12, (uint64_t)v13);
  unint64_t v4 = v14 | ((unint64_t)v15 << 32);
  int v5 = 0x7FFFFFFF;
  switch(v15 >> 14)
  {
    case 2:
      unsigned __int16 v15 = WORD2(v4) & 0x3FFF;
      int v5 = v4;
      break;
    case 3:
      break;
    default:
      int v5 = 2147483519;
      unsigned __int16 v15 = WORD2(v4) & 0x3FFF;
      break;
  }
  sub_100662770(32, v5);
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 16))(v12, *(void *)(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken), ObjectType, v7);
  if (!result)
  {
    uint64_t v10 = self;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 xpcPerformerUnavailableErrorWithDescription:v11];

    swift_willThrow();
    uint64_t v6 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v6);

    swift_errorRelease();
    return 0;
  }
  return result;
}

uint64_t sub_10054185C(void (*a1)(uint64_t), uint64_t a2, void (*a3)(id))
{
  sub_10010B4E8(v3 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v16);
  sub_10010B4E8((uint64_t)v16, (uint64_t)v17);
  unint64_t v6 = v18 | ((unint64_t)v19 << 32);
  int v7 = 0x7FFFFFFF;
  switch(v19 >> 14)
  {
    case 2:
      unsigned __int16 v19 = WORD2(v6) & 0x3FFF;
      int v7 = v6;
      break;
    case 3:
      break;
    default:
      int v7 = 2147483519;
      unsigned __int16 v19 = WORD2(v6) & 0x3FFF;
      break;
  }
  swift_retain();
  sub_100662770(32, v7);
  uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 16))(v16, *(void *)(v3 + OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken), ObjectType, v8);
  if (v10)
  {
    uint64_t v11 = v10;
    swift_release();
    a1(v11);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v13 = self;
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [v13 xpcPerformerUnavailableErrorWithDescription:v14];

    swift_willThrow();
    a3(v15);
    swift_errorRelease();
    return swift_release();
  }
}

uint64_t sub_100541A48(uint64_t a1, uint64_t a2)
{
  sub_10010B4E8(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v12);
  sub_10010B4E8((uint64_t)v12, (uint64_t)v13);
  unint64_t v4 = v14 | ((unint64_t)v15 << 32);
  int v5 = 0x7FFFFFFF;
  switch(v15 >> 14)
  {
    case 2:
      unsigned __int16 v15 = WORD2(v4) & 0x3FFF;
      int v5 = v4;
      break;
    case 3:
      break;
    default:
      int v5 = 2147483519;
      unsigned __int16 v15 = WORD2(v4) & 0x3FFF;
      break;
  }
  sub_100662770(1, v5);
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 24))(v12, *(void *)(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken), ObjectType, v7);
  if (!result)
  {
    uint64_t v10 = self;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 xpcPerformerUnavailableErrorWithDescription:v11];

    swift_willThrow();
    unint64_t v6 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v6);

    swift_errorRelease();
    return 0;
  }
  return result;
}

uint64_t sub_100541BFC(uint64_t a1, uint64_t a2)
{
  sub_10010B4E8(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v12);
  sub_10010B4E8((uint64_t)v12, (uint64_t)v13);
  unint64_t v4 = v14 | ((unint64_t)v15 << 32);
  int v5 = 0x7FFFFFFF;
  switch(v15 >> 14)
  {
    case 2:
      unsigned __int16 v15 = WORD2(v4) & 0x3FFF;
      int v5 = v4;
      break;
    case 3:
      break;
    default:
      int v5 = 2147483519;
      unsigned __int16 v15 = WORD2(v4) & 0x3FFF;
      break;
  }
  sub_100662770(8, v5);
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 32))(v12, 0, ObjectType, v7);
  if (!result)
  {
    uint64_t v10 = self;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 xpcPerformerUnavailableErrorWithDescription:v11];

    swift_willThrow();
    unint64_t v6 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v6);

    swift_errorRelease();
    return 0;
  }
  return result;
}

uint64_t sub_100541DA4(uint64_t a1, uint64_t a2)
{
  sub_10010B4E8(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v12);
  sub_10010B4E8((uint64_t)v12, (uint64_t)v13);
  unint64_t v4 = v14 | ((unint64_t)v15 << 32);
  int v5 = 0x7FFFFFFF;
  switch(v15 >> 14)
  {
    case 2:
      unsigned __int16 v15 = WORD2(v4) & 0x3FFF;
      int v5 = v4;
      break;
    case 3:
      break;
    default:
      int v5 = 2147483519;
      unsigned __int16 v15 = WORD2(v4) & 0x3FFF;
      break;
  }
  sub_100662770(64, v5);
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 40))(v12, ObjectType, v7);
  if (!result)
  {
    uint64_t v10 = self;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 xpcPerformerUnavailableErrorWithDescription:v11];

    swift_willThrow();
    unint64_t v6 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v6);

    swift_errorRelease();
    return 0;
  }
  return result;
}

uint64_t sub_100541F48()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100541F84(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for RDPermanentlyHiddenReminder() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1001F54D0(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100542A5C(v5);
  *a1 = v3;
}

uint64_t sub_10054202C()
{
  uint64_t v72 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v2 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v71 = (uint64_t)v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v61 = (char *)v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100914280);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_bridgeObjectRetain();
  unsigned int v14 = sub_10020B9F0(v13);
  swift_bridgeObjectRelease();
  *(void *)&long long v77 = v14;
  swift_bridgeObjectRetain();
  sub_100541F84((void **)&v77);
  if (v1)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    uint64_t v63 = v9;
    uint64_t v65 = 0;
    swift_release();
    uint64_t v15 = *(void *)(v77 + 16);
    uint64_t v64 = v7;
    uint64_t v62 = v0;
    if (v15)
    {
      uint64_t v60 = v6;
      uint64_t v16 = v77 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      unint64_t v17 = v2 + 56;
      uint64_t v67 = *(void *)(v2 + 72);
      id v68 = (unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
      v59[2] = v77;
      swift_retain();
      unsigned int v18 = _swiftEmptyArrayStorage;
      uint64_t v69 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v17;
      v59[1] = v17 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v66 = (char *)&type metadata for Any + 8;
      uint64_t v19 = v71;
      do
      {
        sub_100128070(v16, (uint64_t)v12);
        uint64_t v20 = *v69;
        uint64_t v21 = v72;
        (*v69)(v12, 0, 1, v72);
        if ((*v68)(v12, 1, v21) == 1)
        {
          uint64_t v6 = v60;
          uint64_t v45 = (uint64_t)v61;
          goto LABEL_25;
        }
        sub_1001280D4((uint64_t)v12, v19);
        uint64_t v22 = type metadata accessor for UUID();
        uint64_t v78 = (void *)v22;
        unint64_t v23 = sub_1000C1FE8((uint64_t *)&v77);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v23, v19, v22);
        v24._countAndFlagsBits = 0x7265646E696D6572;
        unint64_t v70 = v18;
        uint64_t v73 = 0;
        unint64_t v74 = 0xE000000000000000;
        v24._object = (void *)0xEA00000000004449;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._countAndFlagsBits = 58;
        v25._object = (void *)0xE100000000000000;
        String.append(_:)(v25);
        _print_unlocked<A, B>(_:_:)();
        uint64_t v26 = v73;
        unint64_t v27 = v74;
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v77);
        uint64_t v28 = _swiftEmptyArrayStorage;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v28 = sub_100308F88(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
        }
        unint64_t v30 = v28[2];
        unint64_t v29 = v28[3];
        if (v30 >= v29 >> 1) {
          uint64_t v28 = sub_100308F88((void *)(v29 > 1), v30 + 1, 1, v28);
        }
        uint64_t v28[2] = v30 + 1;
        uint64_t v31 = &v28[2 * v30];
        v31[4] = v26;
        v31[5] = v27;
        Date.timeIntervalSinceReferenceDate.getter();
        uint64_t v78 = &type metadata for Double;
        *(void *)&long long v77 = v32;
        v33._countAndFlagsBits = 0x44646574656C6564;
        uint64_t v73 = 0;
        unint64_t v74 = 0xE000000000000000;
        v33._object = (void *)0xEB00000000657461;
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._countAndFlagsBits = 58;
        v34._object = (void *)0xE100000000000000;
        String.append(_:)(v34);
        _print_unlocked<A, B>(_:_:)();
        uint64_t v35 = v73;
        unint64_t v36 = v74;
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v77);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v28 = sub_100308F88(0, v28[2] + 1, 1, v28);
        }
        unint64_t v38 = v28[2];
        unint64_t v37 = v28[3];
        if (v38 >= v37 >> 1) {
          uint64_t v28 = sub_100308F88((void *)(v37 > 1), v38 + 1, 1, v28);
        }
        uint64_t v28[2] = v38 + 1;
        uint64_t v39 = &v28[2 * v38];
        uint64_t v39[4] = v35;
        v39[5] = v36;
        *(void *)&long long v77 = v28;
        sub_100094134((uint64_t *)&unk_10090AFB0);
        sub_1001E98BC();
        uint64_t v40 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v42 = v41;
        swift_bridgeObjectRelease();
        unint64_t v76 = &type metadata for String;
        *(void *)&long long v75 = v40;
        *((void *)&v75 + 1) = v42;
        uint64_t v19 = v71;
        sub_100128138(v71);
        if (v76)
        {
          sub_10009A1A0(&v75, &v77);
          sub_10009A1A0(&v77, &v75);
          unsigned int v18 = v70;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unsigned int v18 = sub_1003090C0(0, v18[2] + 1, 1, v18);
          }
          unint64_t v44 = v18[2];
          unint64_t v43 = v18[3];
          if (v44 >= v43 >> 1) {
            unsigned int v18 = sub_1003090C0((void *)(v43 > 1), v44 + 1, 1, v18);
          }
          v18[2] = v44 + 1;
          sub_10009A1A0(&v75, &v18[4 * v44 + 4]);
        }
        else
        {
          sub_1000966BC((uint64_t)&v75, &qword_100908190);
          unsigned int v18 = v70;
        }
        v16 += v67;
        --v15;
      }
      while (v15);
      uint64_t v6 = v60;
    }
    else
    {
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      swift_retain();
      unsigned int v18 = _swiftEmptyArrayStorage;
    }
    v20(v12, 1, 1, v72);
    uint64_t v45 = (uint64_t)v61;
LABEL_25:
    swift_release_n();
    sub_1000CAA4C(v62 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate, v45);
    uint64_t v46 = v64;
    int v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v45, 1, v6);
    char v48 = v63;
    if (v47 == 1)
    {
      sub_1000966BC(v45, (uint64_t *)&unk_100909A40);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v63, v45, v6);
      *(void *)&long long v77 = 0;
      *((void *)&v77 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      v49._object = (void *)0x80000001007D7E80;
      v49._countAndFlagsBits = 0xD00000000000002ALL;
      String.append(_:)(v49);
      Date.timeIntervalSinceReferenceDate.getter();
      Double.write<A>(to:)();
      uint64_t v78 = &type metadata for String;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned int v18 = sub_1003090C0(0, v18[2] + 1, 1, v18);
      }
      unint64_t v51 = v18[2];
      unint64_t v50 = v18[3];
      if (v51 >= v50 >> 1) {
        unsigned int v18 = sub_1003090C0((void *)(v50 > 1), v51 + 1, 1, v18);
      }
      v18[2] = v51 + 1;
      sub_10009A1A0(&v77, &v18[4 * v51 + 4]);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v6);
    }
    uint64_t v53 = self;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    *(void *)&long long v77 = 0;
    id v55 = [v53 dataWithJSONObject:isa options:0 error:&v77];

    id v56 = (id)v77;
    if (v55)
    {
      unint64_t v57 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      unint64_t v57 = v56;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v57;
  }
  return result;
}

uint64_t sub_100542A38()
{
  return sub_10054202C();
}

void sub_100542A5C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v144 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v4 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v138 = (uint64_t)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v148 = (uint64_t)&v130 - v7;
  __chkstk_darwin(v8);
  uint64_t v150 = (uint64_t)&v130 - v9;
  __chkstk_darwin(v10);
  uint64_t v149 = (uint64_t)&v130 - v11;
  __chkstk_darwin(v12);
  uint64_t v141 = (uint64_t)&v130 - v13;
  __chkstk_darwin(v14);
  uint64_t v140 = (uint64_t)&v130 - v15;
  __chkstk_darwin(v16);
  uint64_t v136 = (uint64_t)&v130 - v17;
  __chkstk_darwin(v18);
  uint64_t v135 = (uint64_t)&v130 - v19;
  uint64_t v151 = a1;
  Swift::Int v20 = a1[1];
  Swift::Int v21 = _minimumMergeRunLength(_:)(v20);
  if (v21 >= v20)
  {
    if (v20 < 0) {
      goto LABEL_150;
    }
    if (v20) {
      sub_100543570(0, v20, 1, v151);
    }
    return;
  }
  if (v20 >= 0) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = v20 + 1;
  }
  if (v20 < -1) {
    goto LABEL_158;
  }
  uint64_t v143 = v4;
  Swift::Int v132 = v21;
  if (v20 < 2)
  {
    uint64_t v26 = (char *)_swiftEmptyArrayStorage;
    unint64_t v142 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v131 = _swiftEmptyArrayStorage;
    if (v20 != 1)
    {
      unint64_t v28 = _swiftEmptyArrayStorage[2];
LABEL_116:
      uint64_t v123 = v26;
      if (v28 >= 2)
      {
        uint64_t v124 = *v151;
        do
        {
          unint64_t v125 = v28 - 2;
          if (v28 < 2) {
            goto LABEL_145;
          }
          if (!v124) {
            goto LABEL_157;
          }
          uint64_t v126 = *(void *)&v123[16 * v125 + 32];
          uint64_t v127 = *(void *)&v123[16 * v28 + 24];
          sub_10054382C(v124 + *(void *)(v143 + 72) * v126, v124 + *(void *)(v143 + 72) * *(void *)&v123[16 * v28 + 16], v124 + *(void *)(v143 + 72) * v127, v142);
          if (v2) {
            break;
          }
          if (v127 < v126) {
            goto LABEL_146;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v123 = sub_1001F433C((uint64_t)v123);
          }
          if (v125 >= *((void *)v123 + 2)) {
            goto LABEL_147;
          }
          uint64_t v128 = &v123[16 * v125 + 32];
          *(void *)uint64_t v128 = v126;
          *((void *)v128 + 1) = v127;
          unint64_t v129 = *((void *)v123 + 2);
          if (v28 > v129) {
            goto LABEL_148;
          }
          memmove(&v123[16 * v28 + 16], &v123[16 * v28 + 32], 16 * (v129 - v28));
          *((void *)v123 + 2) = v129 - 1;
          unint64_t v28 = v129 - 1;
        }
        while (v129 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease();
      v131[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v23 = v22 >> 1;
    uint64_t v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v24 + 16) = v23;
    uint64_t v25 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v131 = (void *)v24;
    unint64_t v142 = v24 + ((v25 + 32) & ~v25);
  }
  Swift::Int v27 = 0;
  uint64_t v26 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v29 = v27;
    Swift::Int v30 = v27 + 1;
    if (v27 + 1 >= v20)
    {
      Swift::Int v37 = v27 + 1;
      goto LABEL_67;
    }
    Swift::Int v147 = v20;
    uint64_t v31 = *v151;
    uint64_t v32 = *(void *)(v4 + 72);
    sub_100128070(*v151 + v32 * v30, v135);
    uint64_t v145 = v31;
    sub_100128070(v31 + v32 * v29, v136);
    uint64_t v33 = UUID.uuidString.getter();
    uint64_t v35 = v34;
    if (UUID.uuidString.getter() == v33 && v36 == v35) {
      LODWORD(v146) = 0;
    }
    else {
      LODWORD(v146) = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100128138(v136);
    sub_100128138(v135);
    Swift::Int v37 = v29 + 2;
    if (v29 + 2 < v147)
    {
      uint64_t v139 = v29;
      uint64_t v133 = v26;
      uint64_t v134 = v2;
      uint64_t v38 = v32 * v30;
      uint64_t v39 = v145;
      uint64_t v40 = v32 * v37;
      while (1)
      {
        Swift::Int v41 = v37;
        sub_100128070(v39 + v40, v140);
        sub_100128070(v39 + v38, v141);
        uint64_t v42 = UUID.uuidString.getter();
        uint64_t v44 = v43;
        if (UUID.uuidString.getter() == v42 && v45 == v44) {
          int v46 = 0;
        }
        else {
          int v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100128138(v141);
        sub_100128138(v140);
        if ((v146 ^ v46)) {
          break;
        }
        ++v37;
        v39 += v32;
        if (v147 == v41 + 1)
        {
          Swift::Int v37 = v147;
          uint64_t v4 = v143;
          uint64_t v26 = v133;
          uint64_t v2 = v134;
          goto LABEL_31;
        }
      }
      uint64_t v4 = v143;
      uint64_t v26 = v133;
      uint64_t v2 = v134;
LABEL_31:
      Swift::Int v29 = v139;
    }
    if (v146)
    {
      if (v37 < v29) {
        goto LABEL_151;
      }
      if (v29 < v37)
      {
        uint64_t v133 = v26;
        uint64_t v134 = v2;
        uint64_t v47 = 0;
        uint64_t v48 = v32 * (v37 - 1);
        Swift::Int v49 = v37 * v32;
        Swift::Int v50 = v29;
        uint64_t v139 = v29;
        uint64_t v51 = v29 * v32;
        do
        {
          if (v50 != v37 + v47 - 1)
          {
            uint64_t v53 = v145;
            if (!v145) {
              goto LABEL_156;
            }
            unint64_t v54 = v145 + v51;
            uint64_t v146 = v145 + v48;
            sub_1001280D4(v145 + v51, v138);
            if (v51 < v48 || v54 >= v53 + v49)
            {
              uint64_t v52 = v146;
              swift_arrayInitWithTakeFrontToBack();
            }
            else
            {
              uint64_t v52 = v146;
              if (v51 != v48) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            sub_1001280D4(v138, v52);
          }
          ++v50;
          --v47;
          v48 -= v32;
          v49 -= v32;
          v51 += v32;
        }
        while (v50 < v37 + v47);
        uint64_t v26 = v133;
        uint64_t v2 = v134;
        uint64_t v4 = v143;
        Swift::Int v29 = v139;
      }
    }
    if (v37 < v147)
    {
      if (__OFSUB__(v37, v29)) {
        goto LABEL_149;
      }
      if (v37 - v29 < v132) {
        break;
      }
    }
LABEL_67:
    if (v37 < v29) {
      goto LABEL_144;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v147 = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v26 = sub_1001F3D80(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    unint64_t v72 = *((void *)v26 + 2);
    unint64_t v71 = *((void *)v26 + 3);
    unint64_t v28 = v72 + 1;
    if (v72 >= v71 >> 1) {
      uint64_t v26 = sub_1001F3D80((char *)(v71 > 1), v72 + 1, 1, v26);
    }
    uint64_t v73 = v2;
    *((void *)v26 + 2) = v28;
    unint64_t v74 = v26 + 32;
    long long v75 = &v26[16 * v72 + 32];
    Swift::Int v76 = v147;
    *(void *)long long v75 = v29;
    *((void *)v75 + 1) = v76;
    if (v72)
    {
      while (1)
      {
        unint64_t v77 = v28 - 1;
        if (v28 >= 4)
        {
          unint64_t v82 = &v74[16 * v28];
          uint64_t v83 = *((void *)v82 - 8);
          uint64_t v84 = *((void *)v82 - 7);
          BOOL v88 = __OFSUB__(v84, v83);
          uint64_t v85 = v84 - v83;
          if (v88) {
            goto LABEL_133;
          }
          uint64_t v87 = *((void *)v82 - 6);
          uint64_t v86 = *((void *)v82 - 5);
          BOOL v88 = __OFSUB__(v86, v87);
          uint64_t v80 = v86 - v87;
          char v81 = v88;
          if (v88) {
            goto LABEL_134;
          }
          unint64_t v89 = v28 - 2;
          uint64_t v90 = &v74[16 * v28 - 32];
          uint64_t v92 = *(void *)v90;
          uint64_t v91 = *((void *)v90 + 1);
          BOOL v88 = __OFSUB__(v91, v92);
          uint64_t v93 = v91 - v92;
          if (v88) {
            goto LABEL_136;
          }
          BOOL v88 = __OFADD__(v80, v93);
          uint64_t v94 = v80 + v93;
          if (v88) {
            goto LABEL_139;
          }
          if (v94 >= v85)
          {
            unint64_t v112 = &v74[16 * v77];
            uint64_t v114 = *(void *)v112;
            uint64_t v113 = *((void *)v112 + 1);
            BOOL v88 = __OFSUB__(v113, v114);
            uint64_t v115 = v113 - v114;
            if (v88) {
              goto LABEL_143;
            }
            BOOL v105 = v80 < v115;
            goto LABEL_104;
          }
        }
        else
        {
          if (v28 != 3)
          {
            uint64_t v106 = *((void *)v26 + 4);
            uint64_t v107 = *((void *)v26 + 5);
            BOOL v88 = __OFSUB__(v107, v106);
            uint64_t v99 = v107 - v106;
            char v100 = v88;
            goto LABEL_98;
          }
          uint64_t v79 = *((void *)v26 + 4);
          uint64_t v78 = *((void *)v26 + 5);
          BOOL v88 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          char v81 = v88;
        }
        if (v81) {
          goto LABEL_135;
        }
        unint64_t v89 = v28 - 2;
        unint64_t v95 = &v74[16 * v28 - 32];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v98 = __OFSUB__(v96, v97);
        uint64_t v99 = v96 - v97;
        char v100 = v98;
        if (v98) {
          goto LABEL_138;
        }
        id v101 = &v74[16 * v77];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v88 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v88) {
          goto LABEL_141;
        }
        if (__OFADD__(v99, v104)) {
          goto LABEL_142;
        }
        if (v99 + v104 >= v80)
        {
          BOOL v105 = v80 < v104;
LABEL_104:
          if (v105) {
            unint64_t v77 = v89;
          }
          goto LABEL_106;
        }
LABEL_98:
        if (v100) {
          goto LABEL_137;
        }
        uint64_t v108 = &v74[16 * v77];
        uint64_t v110 = *(void *)v108;
        uint64_t v109 = *((void *)v108 + 1);
        BOOL v88 = __OFSUB__(v109, v110);
        uint64_t v111 = v109 - v110;
        if (v88) {
          goto LABEL_140;
        }
        if (v111 < v99) {
          goto LABEL_14;
        }
LABEL_106:
        unint64_t v116 = v77 - 1;
        if (v77 - 1 >= v28)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!*v151) {
          goto LABEL_155;
        }
        uint64_t v117 = v26;
        char v118 = &v74[16 * v116];
        uint64_t v119 = *(void *)v118;
        id v120 = &v74[16 * v77];
        uint64_t v121 = *((void *)v120 + 1);
        sub_10054382C(*v151 + *(void *)(v143 + 72) * *(void *)v118, *v151 + *(void *)(v143 + 72) * *(void *)v120, *v151 + *(void *)(v143 + 72) * v121, v142);
        if (v73) {
          goto LABEL_127;
        }
        if (v121 < v119) {
          goto LABEL_130;
        }
        if (v77 > *((void *)v117 + 2)) {
          goto LABEL_131;
        }
        *(void *)char v118 = v119;
        *(void *)&v74[16 * v116 + 8] = v121;
        unint64_t v122 = *((void *)v117 + 2);
        if (v77 >= v122) {
          goto LABEL_132;
        }
        uint64_t v26 = v117;
        unint64_t v28 = v122 - 1;
        memmove(&v74[16 * v77], v120 + 16, 16 * (v122 - 1 - v77));
        *((void *)v117 + 2) = v122 - 1;
        if (v122 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v28 = 1;
LABEL_14:
    Swift::Int v20 = v151[1];
    Swift::Int v27 = v147;
    uint64_t v2 = v73;
    uint64_t v4 = v143;
    if (v147 >= v20) {
      goto LABEL_116;
    }
  }
  if (__OFADD__(v29, v132)) {
    goto LABEL_152;
  }
  if (v29 + v132 >= v147) {
    Swift::Int v55 = v147;
  }
  else {
    Swift::Int v55 = v29 + v132;
  }
  if (v55 >= v29)
  {
    if (v37 != v55)
    {
      uint64_t v139 = v29;
      uint64_t v133 = v26;
      uint64_t v134 = v2;
      uint64_t v56 = *(void *)(v4 + 72);
      uint64_t v57 = v56 * (v37 - 1);
      uint64_t v145 = v56;
      uint64_t v58 = v37 * v56;
      Swift::Int v137 = v55;
      do
      {
        uint64_t v60 = 0;
        uint64_t v61 = v139;
        uint64_t v146 = v58;
        Swift::Int v147 = v37;
        while (1)
        {
          uint64_t v62 = *v151;
          sub_100128070(v58 + v60 + *v151, v149);
          sub_100128070(v57 + v60 + v62, v150);
          uint64_t v63 = UUID.uuidString.getter();
          uint64_t v65 = v64;
          if (UUID.uuidString.getter() == v63 && v66 == v65) {
            break;
          }
          char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100128138(v150);
          sub_100128138(v149);
          if ((v67 & 1) == 0) {
            goto LABEL_57;
          }
          uint64_t v68 = *v151;
          if (!*v151) {
            goto LABEL_154;
          }
          uint64_t v58 = v146;
          uint64_t v69 = v68 + v57 + v60;
          sub_1001280D4(v68 + v146 + v60, v148);
          swift_arrayInitWithTakeFrontToBack();
          sub_1001280D4(v148, v69);
          v60 -= v145;
          ++v61;
          Swift::Int v59 = v147;
          if (v147 == v61) {
            goto LABEL_58;
          }
        }
        swift_bridgeObjectRelease_n();
        sub_100128138(v150);
        sub_100128138(v149);
LABEL_57:
        uint64_t v58 = v146;
        Swift::Int v59 = v147;
LABEL_58:
        Swift::Int v37 = v59 + 1;
        v57 += v145;
        v58 += v145;
      }
      while (v37 != v137);
      Swift::Int v37 = v137;
      uint64_t v26 = v133;
      uint64_t v2 = v134;
      Swift::Int v29 = v139;
    }
    goto LABEL_67;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100543570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v34 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = type metadata accessor for RDPermanentlyHiddenReminder();
  __chkstk_darwin(v29);
  uint64_t v33 = (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v36 = (uint64_t)&v26 - v8;
  __chkstk_darwin(v9);
  uint64_t v35 = (uint64_t)&v26 - v11;
  uint64_t v32 = a3;
  uint64_t v27 = a2;
  if (a3 != a2)
  {
    uint64_t v12 = *(void *)(v10 + 72);
    uint64_t v13 = v12 * (v32 - 1);
    uint64_t v30 = v12;
    uint64_t v14 = v12 * v32;
LABEL_6:
    uint64_t v15 = 0;
    uint64_t v16 = v28;
    uint64_t v31 = v14;
    while (1)
    {
      uint64_t v17 = *v34;
      sub_100128070(v14 + v15 + *v34, v35);
      uint64_t v18 = v13;
      sub_100128070(v13 + v15 + v17, v36);
      uint64_t v19 = UUID.uuidString.getter();
      uint64_t v21 = v20;
      if (UUID.uuidString.getter() == v19 && v22 == v21)
      {
        swift_bridgeObjectRelease_n();
        sub_100128138(v36);
        sub_100128138(v35);
        uint64_t v13 = v18;
        uint64_t v14 = v31;
LABEL_5:
        v13 += v30;
        v14 += v30;
        if (++v32 == v27) {
          return;
        }
        goto LABEL_6;
      }
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100128138(v36);
      sub_100128138(v35);
      uint64_t v13 = v18;
      uint64_t v14 = v31;
      if ((v23 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v24 = *v34;
      if (!*v34) {
        break;
      }
      uint64_t v25 = v24 + v18 + v15;
      sub_1001280D4(v24 + v31 + v15, v33);
      swift_arrayInitWithTakeFrontToBack();
      sub_1001280D4(v33, v25);
      v15 -= v30;
      if (v32 == ++v16) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
}

uint64_t sub_10054382C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v50 = type metadata accessor for RDPermanentlyHiddenReminder();
  __chkstk_darwin(v50);
  uint64_t v52 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v51 = (uint64_t)&v48 - v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v48 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v48 - v15;
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v19 = v18;
  if (a2 - a1 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_68;
  }
  int64_t v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_69;
  }
  uint64_t v21 = (uint64_t)(a2 - a1) / v18;
  unint64_t v55 = a1;
  unint64_t v54 = a4;
  uint64_t v22 = v20 / v18;
  if (v21 >= v20 / v19)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      uint64_t v24 = v22 * v19;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v35 = a4 + v24;
      unint64_t v53 = a4 + v24;
      unint64_t v55 = a2;
      unint64_t v49 = a1;
      if (v24 >= 1 && a1 < a2)
      {
        uint64_t v37 = -v19;
        uint64_t v38 = v52;
        do
        {
          sub_100128070(v35 + v37, v51);
          unint64_t v39 = a2 + v37;
          sub_100128070(a2 + v37, v38);
          uint64_t v40 = UUID.uuidString.getter();
          uint64_t v42 = v41;
          if (UUID.uuidString.getter() == v40 && v43 == v42) {
            char v44 = 0;
          }
          else {
            char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v45 = a3 + v37;
          sub_100128138(v52);
          sub_100128138(v51);
          if (v44)
          {
            if (a3 < a2 || v45 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v55 += v37;
          }
          else
          {
            unint64_t v46 = v53;
            v53 += v37;
            if (a3 < v46 || v45 >= v46)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v46)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v39 = a2;
          }
          unint64_t v35 = v53;
          if (v53 <= a4) {
            break;
          }
          a2 = v39;
          a3 += v37;
        }
        while (v39 > v49);
      }
LABEL_66:
      sub_1001F41E0(&v55, &v54, (uint64_t *)&v53);
      return 1;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    uint64_t v23 = v21 * v19;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v25 = a4 + v23;
    unint64_t v53 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      while (1)
      {
        sub_100128070(a2, (uint64_t)v16);
        sub_100128070(a4, (uint64_t)v13);
        uint64_t v27 = UUID.uuidString.getter();
        uint64_t v29 = v28;
        if (UUID.uuidString.getter() == v27 && v30 == v29) {
          break;
        }
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100128138((uint64_t)v13);
        sub_100128138((uint64_t)v16);
        if ((v31 & 1) == 0) {
          goto LABEL_30;
        }
        unint64_t v32 = v55;
        unint64_t v33 = a2 + v19;
        if (v55 < a2 || v55 >= v33)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v55 == a2)
        {
          unint64_t v32 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_36:
        unint64_t v55 = v32 + v19;
        a4 = v54;
        if (v54 < v25)
        {
          a2 = v33;
          if (v33 < a3) {
            continue;
          }
        }
        goto LABEL_66;
      }
      swift_bridgeObjectRelease_n();
      sub_100128138((uint64_t)v13);
      sub_100128138((uint64_t)v16);
LABEL_30:
      unint64_t v32 = v55;
      unint64_t v34 = v54 + v19;
      if (v55 < v54 || v55 >= v34)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v55 != v54)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v54 = v34;
      unint64_t v33 = a2;
      goto LABEL_36;
    }
    goto LABEL_66;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100543DA8@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v42 = type metadata accessor for Locale();
  uint64_t v4 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134(&qword_100908170);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x80000001007C68D0;
  Date.timeIntervalSinceReferenceDate.getter();
  *(void *)(inited + 72) = &type metadata for Double;
  *(void *)(inited + 48) = v8;
  unint64_t v9 = sub_1001805C0(inited);
  unint64_t v10 = v9;
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales);
  if (v11)
  {
    uint64_t v37 = v6;
    int64_t v12 = *(void *)(v11 + 16);
    uint64_t v13 = _swiftEmptyArrayStorage;
    if (v12)
    {
      unint64_t v34 = v9;
      unint64_t v35 = a1;
      uint64_t v36 = v2;
      *(void *)&long long v44 = _swiftEmptyArrayStorage;
      sub_1001DE058(0, v12, 0);
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      uint64_t v14 = v4 + 16;
      uint64_t v16 = v11 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
      uint64_t v38 = *(void *)(v14 + 56);
      unint64_t v39 = v15;
      uint64_t v40 = v14;
      uint64_t v17 = (void (**)(char *, uint64_t))(v14 - 8);
      do
      {
        uint64_t v18 = v41;
        uint64_t v19 = v42;
        v39(v41, v16, v42);
        uint64_t v20 = Locale.identifier.getter();
        uint64_t v22 = v21;
        (*v17)(v18, v19);
        uint64_t v13 = (void *)v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE058(0, v13[2] + 1, 1);
          uint64_t v13 = (void *)v44;
        }
        unint64_t v24 = v13[2];
        unint64_t v23 = v13[3];
        if (v24 >= v23 >> 1)
        {
          sub_1001DE058(v23 > 1, v24 + 1, 1);
          uint64_t v13 = (void *)v44;
        }
        v13[2] = v24 + 1;
        unint64_t v25 = &v13[2 * v24];
        v25[4] = v20;
        v25[5] = v22;
        v16 += v38;
        --v12;
      }
      while (v12);
      a1 = v35;
      unint64_t v10 = v34;
    }
    uint64_t v26 = swift_initStackObject();
    *(_OWORD *)(v26 + 16) = xmmword_100776E80;
    *(void *)(v26 + 32) = 0x657079546D756E65;
    *(void *)(v26 + 40) = 0xE800000000000000;
    *(void *)(v26 + 48) = 0x646469727265766FLL;
    *(void *)(v26 + 56) = 0xEA00000000006E65;
    *(void *)(v26 + 72) = &type metadata for String;
    *(void *)(v26 + 80) = 0x73656C61636F6CLL;
    *(void *)(v26 + 88) = 0xE700000000000000;
    *(void *)(v26 + 120) = sub_100094134((uint64_t *)&unk_10090AFB0);
    *(void *)(v26 + 96) = v13;
    unint64_t v27 = sub_1001805C0(v26);
    uint64_t v28 = (uint64_t *)&unk_100917670;
  }
  else
  {
    unint64_t v27 = sub_1002ED5C0((uint64_t)&off_1008B71F0);
    uint64_t v28 = &qword_10090B068;
  }
  uint64_t v45 = sub_100094134(v28);
  *(void *)&long long v44 = v27;
  sub_10009A1A0(&v44, v43);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v46 = v10;
  sub_1002C54C8(v43, 0xD000000000000017, 0x80000001007D44A0, isUniquelyReferenced_nonNull_native);
  unint64_t v30 = v46;
  swift_bridgeObjectRelease();
  *a1 = v30;
  uint64_t v31 = enum case for REMJSONType.jsonObject(_:);
  uint64_t v32 = type metadata accessor for REMJSONType();
  return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(a1, v31, v32);
}

uint64_t sub_100544184@<X0>(unint64_t *a1@<X8>)
{
  return sub_100543DA8(a1);
}

uint64_t sub_1005441A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1005441D4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1005441D4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v60 = v2;
  uint64_t v61 = v3;
  __chkstk_darwin(v2);
  unint64_t v55 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134(&qword_10091CB80);
  uint64_t v56 = *(void *)(v5 - 8);
  uint64_t v57 = v5;
  __chkstk_darwin(v5);
  uint64_t v58 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_10091CB88);
  uint64_t v63 = *(void *)(v7 - 8);
  uint64_t v64 = v7;
  __chkstk_darwin(v7);
  uint64_t v62 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134(&qword_10091CB90);
  uint64_t v66 = *(void **)(v9 - 8);
  uint64_t v67 = v9;
  __chkstk_darwin(v9);
  uint64_t v65 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100913060);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v68 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  Swift::Int v59 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v20 = type metadata accessor for REMJSONType();
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v22 = __chkstk_darwin(v20);
  unint64_t v24 = (uint64_t *)((char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v21 + 16))(v24, a1, v20, v22);
  int v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(v21 + 88))(v24, v20);
  if (v25 == enum case for REMJSONType.jsonObject(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v21 + 96))(v24, v20);
    uint64_t v26 = *v24;
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for Dictionary<>.DeserializableValueType.date<A, B><A1>(_:), v11);
    unint64_t v27 = v71;
    Dictionary<>.deserializeRequired<A>(key:valueType:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    if (v27)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = v15;
      uint64_t v31 = v65;
      unint64_t v30 = v66;
      uint64_t v32 = v67;
      ((void (*)(char *, void, uint64_t))v66[13])(v65, enum case for Dictionary<>.DeserializableValueType.remJSONObject<A, B><A1>(_:), v67);
      sub_100094134((uint64_t *)&unk_100917670);
      Dictionary<>.deserializeRequired<A>(key:valueType:)();
      ((void (*)(char *, uint64_t))v30[1])(v31, v32);
      swift_bridgeObjectRelease();
      unint64_t v34 = v62;
      uint64_t v33 = v63;
      uint64_t v35 = v64;
      (*(void (**)(char *, void, uint64_t))(v63 + 104))(v62, enum case for Dictionary<>.DeserializableValueType.string<A, B><A1>(_:), v64);
      Dictionary<>.deserializeRequired<A>(key:valueType:)();
      unint64_t v71 = v19;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
      uint64_t v38 = v69;
      uint64_t v37 = v70;
      if (v69 == (void *)0x6974616D6F747561 && v70 == 0xE900000000000063)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v39 = 0;
        uint64_t v40 = v71;
      }
      else
      {
        char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v40 = v71;
        if (v41)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v39 = 0;
        }
        else
        {
          if (v38 == (void *)0x646469727265766FLL && v37 == 0xEA00000000006E65)
          {
            swift_bridgeObjectRelease();
            long long v44 = v58;
          }
          else
          {
            char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            long long v44 = v58;
            if ((v45 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              uint64_t v26 = type metadata accessor for REMJSONDeserializationError();
              sub_1002DE470();
              swift_allocError();
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v54, enum case for REMJSONDeserializationError.invalidData(_:), v26);
              swift_willThrow();
              (*(void (**)(char *, uint64_t))(v68 + 8))(v40, v15);
              return v26;
            }
          }
          uint64_t v47 = v56;
          uint64_t v46 = v57;
          (*(void (**)(char *, void, uint64_t))(v56 + 104))(v44, enum case for Dictionary<>.DeserializableValueType.arrayOfStrings<A, B><A1>(_:), v57);
          sub_100094134((uint64_t *)&unk_10090AFB0);
          Dictionary<>.deserializeRequired<A>(key:valueType:)();
          (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v46);
          swift_bridgeObjectRelease();
          uint64_t v48 = v69;
          int64_t v49 = v69[2];
          if (v49)
          {
            uint64_t v67 = v15;
            uint64_t v69 = _swiftEmptyArrayStorage;
            sub_1001DEB04(0, v49, 0);
            unint64_t v39 = v69;
            uint64_t v66 = v48;
            uint64_t v50 = v48 + 5;
            uint64_t v51 = v55;
            do
            {
              swift_bridgeObjectRetain();
              Locale.init(identifier:)();
              uint64_t v69 = v39;
              unint64_t v53 = v39[2];
              unint64_t v52 = v39[3];
              if (v53 >= v52 >> 1)
              {
                sub_1001DEB04(v52 > 1, v53 + 1, 1);
                unint64_t v39 = v69;
              }
              v50 += 2;
              v39[2] = v53 + 1;
              (*(void (**)(unint64_t, char *, uint64_t))(v61 + 32))((unint64_t)v39+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v53, v51, v60);
              --v49;
            }
            while (v49);
            swift_bridgeObjectRelease();
            uint64_t v29 = v67;
            uint64_t v40 = v71;
          }
          else
          {
            swift_bridgeObjectRelease();
            unint64_t v39 = _swiftEmptyArrayStorage;
          }
        }
      }
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
      uint64_t v43 = v59;
      v42(v59, v40, v29);
      type metadata accessor for RDSecondaryGroceryLocalesInfo();
      uint64_t v26 = swift_allocObject();
      v42((char *)(v26 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_lastModifiedDate), v43, v29);
      *(void *)(v26 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales) = v39;
    }
    return v26;
  }
  if (v25 == enum case for REMJSONType.jsonArray(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v21 + 96))(v24, v20);
    swift_bridgeObjectRelease();
    uint64_t v26 = type metadata accessor for REMJSONDeserializationError();
    sub_1002DE470();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, enum case for REMJSONDeserializationError.invalidData(_:), v26);
    swift_willThrow();
    return v26;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100544C80()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091CB98);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091CB98);
  if (qword_100907820 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424A8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100544D48()
{
  dispatch thunk of Collection.count.getter();
  sub_100094134(&qword_10090C040);
  v93[0] = Dictionary.init(minimumCapacity:)();
  sub_100094134(&qword_10091CC68);
  Sequence.reduce<A>(into:_:)();
  uint64_t v1 = v90;
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_10020A420(v2);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1005462E0(v3);
  swift_release();
  uint64_t v90 = v10;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_100094134(&qword_10090D750);
  sub_100431B78();
  uint64_t v11 = Sequence.compactIndexBy<A, B>(key:value:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v12 = swift_release();
  __chkstk_darwin(v12);
  v72[2] = v11;
  uint64_t v73 = v0;
  uint64_t v78 = sub_1005470A0(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1005466BC, (uint64_t)v72);
  swift_bridgeObjectRelease();
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v75 = v11 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v76 = (unint64_t)(v16 + 63) >> 6;
  *(void *)&long long v13 = 136446210;
  long long v83 = v13;
  char v81 = (char *)&type metadata for Any + 8;
  uint64_t v74 = v0;
  uint64_t v77 = v11;
  while (1)
  {
    if (v18)
    {
      uint64_t v79 = (v18 - 1) & v18;
      unint64_t v19 = __clz(__rbit64(v18)) | (v14 << 6);
      uint64_t v20 = v78;
    }
    else
    {
      int64_t v21 = v14 + 1;
      uint64_t v20 = v78;
      if (__OFADD__(v14, 1)) {
        goto LABEL_65;
      }
      if (v21 >= v76)
      {
LABEL_62:
        swift_release();
        swift_release();
        return;
      }
      unint64_t v22 = *(void *)(v75 + 8 * v21);
      ++v14;
      if (!v22)
      {
        int64_t v14 = v21 + 1;
        if (v21 + 1 >= v76) {
          goto LABEL_62;
        }
        unint64_t v22 = *(void *)(v75 + 8 * v14);
        if (!v22)
        {
          int64_t v14 = v21 + 2;
          if (v21 + 2 >= v76) {
            goto LABEL_62;
          }
          unint64_t v22 = *(void *)(v75 + 8 * v14);
          if (!v22)
          {
            int64_t v23 = v21 + 3;
            if (v23 >= v76) {
              goto LABEL_62;
            }
            unint64_t v22 = *(void *)(v75 + 8 * v23);
            if (!v22)
            {
              while (1)
              {
                int64_t v14 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_66;
                }
                if (v14 >= v76) {
                  goto LABEL_62;
                }
                unint64_t v22 = *(void *)(v75 + 8 * v14);
                ++v23;
                if (v22) {
                  goto LABEL_23;
                }
              }
            }
            int64_t v14 = v23;
          }
        }
      }
LABEL_23:
      uint64_t v79 = (v22 - 1) & v22;
      unint64_t v19 = __clz(__rbit64(v22)) + (v14 << 6);
    }
    int64_t v80 = v14;
    unint64_t v24 = *(void **)(*(void *)(v11 + 56) + 8 * v19);
    if (*(void *)(v20 + 16))
    {
      uint64_t v25 = v20;
      uint64_t v26 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v19);
      uint64_t v28 = *v26;
      uint64_t v27 = v26[1];
      swift_bridgeObjectRetain();
      id v29 = v24;
      unint64_t v30 = sub_1001806F8(v28, v27);
      if (v31)
      {
        unint64_t v32 = *(void *)(*(void *)(v25 + 56) + 8 * v30);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      id v33 = v24;
    }
    unint64_t v32 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_30:
    id v85 = v24;
    if (v32 >> 62) {
      break;
    }
    uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v34) {
      goto LABEL_32;
    }
LABEL_7:

    swift_bridgeObjectRelease();
    uint64_t v11 = v77;
    int64_t v14 = v80;
    unint64_t v18 = v79;
  }
  swift_bridgeObjectRetain();
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v34) {
    goto LABEL_7;
  }
LABEL_32:
  if (v34 >= 1)
  {
    uint64_t v35 = 0;
    uint64_t v84 = *(void **)(v74 + 16);
    uint64_t v87 = v34;
    unint64_t v88 = v32 & 0xC000000000000001;
    uint64_t v86 = (void *)v32;
    while (1)
    {
      if (v88) {
        id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v36 = *(id *)(v32 + 8 * v35 + 32);
      }
      uint64_t v37 = v36;
      unsigned int v38 = [v36 activityTypeRawValue];
      if (v38 == 2)
      {
        char v39 = 0;
      }
      else
      {
        if ((unsigned __int16)v38 != 3)
        {
          unsigned int v59 = [v37 activityTypeRawValue];
          uint64_t v55 = 0;
          char v58 = 0;
          if (v59 >= 6) {
            uint64_t v53 = 6;
          }
          else {
            uint64_t v53 = qword_100791368[v59];
          }
          goto LABEL_54;
        }
        char v39 = 1;
      }
      uint64_t v40 = (objc_class *)type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter();
      char v41 = objc_allocWithZone(v40);
      uint64_t v43 = v84;
      id v42 = v85;
      *(void *)&v41[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder] = v85;
      v41[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_field] = v39;
      *(void *)&v41[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_storeObjectContext] = v43;
      long long v44 = &v41[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_onlySpecificCanonicalName];
      *long long v44 = 0;
      v44[1] = 0;
      id v45 = objc_allocWithZone((Class)RDPersistentStoreLookupForREMCDObject);
      id v46 = v42;
      id v47 = v43;
      id v48 = v46;
      id v49 = v47;
      uint64_t v50 = v41;
      id v51 = [v45 init:v48];
      *(void *)&v50[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_persistentStoreLookup] = v51;

      v89.receiver = v50;
      v89.super_class = v40;
      id v52 = [super init];

      uint64_t v53 = sub_100134E1C();
      uint64_t v55 = v54;
      unsigned __int8 v57 = v56;

      if (!(v57 >> 6))
      {
        if (qword_1009078A8 != -1) {
          swift_once();
        }
        uint64_t v60 = type metadata accessor for Logger();
        sub_10008E2DC(v60, (uint64_t)qword_10091CB98);
        sub_10013C078(v53, v55, v57);
        sub_10013C078(v53, v55, v57);
        uint64_t v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v63 = swift_slowAlloc();
          uint64_t v82 = swift_slowAlloc();
          v93[0] = v82;
          *(_DWORD *)uint64_t v63 = v83;
          uint64_t v90 = v53;
          uint64_t v91 = v55;
          char v92 = v57;
          sub_100177534();
          uint64_t v64 = Error.rem_errorDescription.getter();
          *(void *)(v63 + 4) = sub_1000C51B8(v64, v65, v93);
          swift_bridgeObjectRelease();
          sub_100177518(v53, v55, v57);
          sub_100177518(v53, v55, v57);
          _os_log_impl((void *)&_mh_execute_header, v61, v62, "#️⃣ RDNewlySharedToMeTagAutoConvertRunner: Error autoconverting hashtags. Deleting activity anyway {error: %{public}s}", (uint8_t *)v63, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100177518(v53, v55, v57);
          sub_100177518(v53, v55, v57);
        }

        unint64_t v32 = (unint64_t)v86;
        [v49 deleteObject:v37];

        sub_100177518(v53, v55, v57);
        uint64_t v34 = v87;
        goto LABEL_35;
      }
      unint64_t v32 = (unint64_t)v86;
      uint64_t v34 = v87;
      if (v57 >> 6 == 1)
      {
        char v58 = v57 & 0x3F;
LABEL_54:
        if (qword_1009078A8 != -1) {
          swift_once();
        }
        uint64_t v66 = type metadata accessor for Logger();
        sub_10008E2DC(v66, (uint64_t)qword_10091CB98);
        sub_10013C078(v53, v55, v58);
        sub_10013C078(v53, v55, v58);
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = swift_slowAlloc();
          v93[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v69 = v83;
          uint64_t v90 = v53;
          uint64_t v91 = v55;
          char v92 = v58;
          sub_100177534();
          uint64_t v70 = Error.rem_errorDescription.getter();
          *(void *)(v69 + 4) = sub_1000C51B8(v70, v71, v93);
          swift_bridgeObjectRelease();
          sub_10013C0B4(v53, v55, v58);
          sub_10013C0B4(v53, v55, v58);
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "#️⃣ RDNewlySharedToMeTagAutoConvertRunner: Error autoconverting hashtags. Not deleting activity {error: %{public}s}", (uint8_t *)v69, 0xCu);
          swift_arrayDestroy();
          unint64_t v32 = (unint64_t)v86;
          swift_slowDealloc();
          uint64_t v34 = v87;
          swift_slowDealloc();

          sub_10013C0B4(v53, v55, v58);
        }
        else
        {

          sub_10013C0B4(v53, v55, v58);
          sub_10013C0B4(v53, v55, v58);
          sub_10013C0B4(v53, v55, v58);
        }
        goto LABEL_35;
      }
      [v49 deleteObject:v37];

LABEL_35:
      if (v34 == ++v35) {
        goto LABEL_7;
      }
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
  swift_once();
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10091CB98);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v90 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_getErrorValue();
    uint64_t v8 = Error.rem_errorDescription.getter();
    v93[0] = sub_1000C51B8(v8, v9, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "#️⃣ RDNewlySharedToMeTagAutoConvertRunner: CoreData error fetching REMCDReminders: {error: %{public}s}", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

id sub_1005458CC(uint64_t *a1, id *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v14 = __chkstk_darwin(v13).n128_u64[0];
  uint64_t v16 = (char *)&v45 - v15;
  id v17 = *a2;
  id v18 = [*a2 ckIdentifier:v14];
  if (v18)
  {
    unint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    uint64_t v23 = *a1;
    if (*(void *)(*a1 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v24 = sub_1001806F8(v20, v22);
      if (v25)
      {
        uint64_t v26 = *(void **)(*(void *)(v23 + 56) + 8 * v24);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v26 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v26 = _swiftEmptyArrayStorage;
    }
    uint64_t v50 = (uint64_t)v26;
    id v36 = v17;
    swift_bridgeObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v37 = v50;
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v50 = *a1;
    *a1 = 0x8000000000000000;
    sub_1002C7AC8(v37, v20, v22, isUniquelyReferenced_nonNull_native);
    *a1 = v50;
    swift_bridgeObjectRelease();
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    id v47 = v9;
    uint64_t v48 = v7;
    if (qword_1009078A8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E2DC(v27, (uint64_t)qword_10091CB98);
    id v28 = v17;
    id v29 = Logger.logObject.getter();
    int v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v30))
    {
      uint64_t v31 = v6;
      int v46 = v30;
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v50 = v45;
      *(_DWORD *)unint64_t v32 = 136446210;
      id v33 = [v28 uuidForChangeTracking:v45];
      if (v33)
      {
        uint64_t v34 = v33;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v35 = v48;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v12, 0, 1, v6);
      }
      else
      {
        uint64_t v35 = v48;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v12, 1, 1, v6);
      }
      uint64_t v40 = v47;
      sub_1000F44F4((uint64_t)v12, (uint64_t)v16);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v16, 1, v31))
      {
        sub_1001260DC((uint64_t)v16);
        unint64_t v41 = 0xE90000000000003ELL;
        uint64_t v42 = 0x64697575206F6E3CLL;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v40, v16, v31);
        sub_1001260DC((uint64_t)v16);
        uint64_t v43 = v35;
        uint64_t v42 = UUID.uuidString.getter();
        unint64_t v41 = v44;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v31);
      }
      uint64_t v49 = sub_1000C51B8(v42, v41, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v46, "#️⃣ RDNewlySharedToMeTagAutoConvertRunner: REMCKSharedEntitySyncActivity[%{public}s] did not have a ckIdentifier; deleting",
        v32,
        0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return [*(id *)(a3 + 16) deleteObject:v28];
  }
}

uint64_t sub_100545DE0(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v58 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v49 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v12 - 8);
  double v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v57 = (uint64_t)&v45 - v16;
  if (*(void *)(a4 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1001806F8(a1, a2);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if (v18) {
      return 1;
    }
  }
  if (!(a3 >> 62))
  {
    uint64_t v20 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_6;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_24;
  }
LABEL_6:
  if (v20 >= 1)
  {
    uint64_t v56 = a1;
    uint64_t v22 = 0;
    uint64_t v23 = *(void **)(a5 + 16);
    unint64_t v59 = a3 & 0xC000000000000001;
    id v60 = v23;
    id v52 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    uint64_t v53 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v45 = (void (**)(char *, uint64_t))(v10 + 8);
    int v46 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    unint64_t v24 = &qword_100907000;
    *(void *)&long long v21 = 136446466;
    long long v51 = v21;
    uint64_t v50 = (char *)&type metadata for Any + 8;
    uint64_t v54 = v20;
    unint64_t v55 = a3;
    id v47 = v14;
    unint64_t v48 = a2;
    do
    {
      if (v59) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v25 = *(id *)(a3 + 8 * v22 + 32);
      }
      uint64_t v26 = v25;
      if (v24[277] != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_10008E2DC(v27, (uint64_t)qword_10091CB98);
      id v28 = v26;
      swift_bridgeObjectRetain_n();
      id v29 = v28;
      int v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = v51;
        id v33 = [v29 uuidForChangeTracking];
        if (v33)
        {
          uint64_t v34 = v33;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v35 = 0;
        }
        else
        {
          uint64_t v35 = 1;
        }
        uint64_t v36 = v58;
        (*v53)(v14, v35, 1, v58);
        uint64_t v37 = v57;
        sub_1000F44F4((uint64_t)v14, v57);
        if ((*v52)(v37, 1, v36))
        {
          sub_1001260DC(v37);
          unint64_t v38 = 0xE90000000000003ELL;
          uint64_t v39 = 0x646975752D6F6E3CLL;
        }
        else
        {
          uint64_t v40 = v49;
          (*v46)(v49, v37, v36);
          sub_1001260DC(v37);
          uint64_t v41 = v36;
          uint64_t v39 = UUID.uuidString.getter();
          unint64_t v38 = v42;
          uint64_t v43 = v40;
          uint64_t v44 = v41;
          double v14 = v47;
          a2 = v48;
          (*v45)(v43, v44);
        }
        *(void *)(v32 + 4) = sub_1000C51B8(v39, v38, &v61);

        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v32 + 14) = sub_1000C51B8(v56, a2, &v61);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "#️⃣ RDNewlySharedToMeTagAutoConvertRunner: REMCKSharedEntitySyncActivity[%{public}s] had ckIdentifier[%{public}s] that did not correspond to a reminder; deleting activity",
          (uint8_t *)v32,
          0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v20 = v54;
        a3 = v55;
        unint64_t v24 = &qword_100907000;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      ++v22;
      [v60 deleteObject:v29, v45];
    }
    while (v20 != v22);
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_1005462E0(uint64_t a1)
{
  uint64_t v2 = _s10PredicatesOMa(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v4 = a1;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)sub_10038F1F0();
  sub_1000C6DAC((uint64_t)v4);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v6 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v7 = [(id)swift_getObjCClassFromMetadata() entity];
  [v6 setEntity:v7];

  [v6 setAffectedStores:0];
  [v6 setPredicate:v5];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100778370;
  strcpy((char *)(v8 + 32), "ckIdentifier");
  *(unsigned char *)(v8 + 45) = 0;
  *(_WORD *)(v8 + 46) = -5120;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = 0x696669746E656469;
  *(void *)(v8 + 72) = 0xEA00000000007265;
  *(void *)(v8 + 88) = &type metadata for String;
  strcpy((char *)(v8 + 96), "titleDocument");
  *(_WORD *)(v8 + 110) = -4864;
  *(void *)(v8 + 152) = &type metadata for String;
  *(void *)(v8 + 120) = &type metadata for String;
  strcpy((char *)(v8 + 128), "notesDocument");
  *(_WORD *)(v8 + 142) = -4864;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setPropertiesToFetch:isa];

  Class v10 = Array._bridgeToObjectiveC()().super.isa;
  [v6 setRelationshipKeyPathsForPrefetching:v10];

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10077A530;
  id v12 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 initWithKey:v13 ascending:0];

  *(void *)(v11 + 32) = v14;
  v18[1] = v11;
  specialized Array._endMutation()();
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class v15 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setSortDescriptors:v15];

  uint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  return v16;
}

uint64_t type metadata accessor for RDNewlySharedToMeTagAutoConvertRunner()
{
  return self;
}

void sub_100546674()
{
}

id sub_100546698(uint64_t *a1, id *a2)
{
  return sub_1005458CC(a1, a2, v2);
}

uint64_t sub_1005466BC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_100545DE0(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1005466C4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100546958(a1, a2, a3, a4, (uint64_t *)&unk_100914410);
}

uint64_t sub_1005466D0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100094134(&qword_100914860);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= a2) {
        return v9;
      }
      unint64_t v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          return v9;
        }
        unint64_t v16 = a1[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            return v9;
          }
          unint64_t v16 = a1[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              return v9;
            }
            unint64_t v16 = a1[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  return v9;
                }
                unint64_t v16 = a1[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = 8 * v14;
    uint64_t v19 = *(void *)(*(void *)(v4 + 48) + v18);
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + v18);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v21 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = 8 * v24;
    *(void *)(*(void *)(v9 + 48) + v29) = v19;
    *(void *)(*(void *)(v9 + 56) + v29) = v20;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100546940(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100546BFC(a1, a2, a3, a4, &qword_1009143D0);
}

uint64_t sub_10054694C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100546958(a1, a2, a3, a4, (uint64_t *)&unk_100913970);
}

uint64_t sub_100546958(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v5;
  }
  sub_100094134(a5);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 64;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
    }
    else
    {
      uint64_t v16 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_40;
      }
      if (v16 >= v35) {
        return v10;
      }
      unint64_t v17 = v34[v16];
      ++v12;
      if (!v17)
      {
        uint64_t v12 = v16 + 1;
        if (v16 + 1 >= v35) {
          return v10;
        }
        unint64_t v17 = v34[v12];
        if (!v17)
        {
          uint64_t v12 = v16 + 2;
          if (v16 + 2 >= v35) {
            return v10;
          }
          unint64_t v17 = v34[v12];
          if (!v17)
          {
            uint64_t v18 = v16 + 3;
            if (v18 >= v35) {
              return v10;
            }
            unint64_t v17 = v34[v18];
            if (!v17)
            {
              while (1)
              {
                uint64_t v12 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_41;
                }
                if (v12 >= v35) {
                  return v10;
                }
                unint64_t v17 = v34[v12];
                ++v18;
                if (v17) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v12 = v18;
          }
        }
      }
LABEL_24:
      unint64_t v11 = (v17 - 1) & v17;
      unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
    }
    uint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v15);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    unint64_t v22 = *(void **)(*(void *)(v5 + 56) + 8 * v15);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    id v23 = v22;
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v13 + 8 * v26);
      }
      while (v31 == -1);
      unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(void *)(v13 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t v32 = (void *)(*(void *)(v10 + 48) + 16 * v27);
    *uint64_t v32 = v21;
    v32[1] = v20;
    *(void *)(*(void *)(v10 + 56) + 8 * v27) = v23;
    ++*(void *)(v10 + 16);
    if (__OFSUB__(v6--, 1)) {
      break;
    }
    if (!v6) {
      return v10;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100546BF0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100546BFC(a1, a2, a3, a4, &qword_100914868);
}

uint64_t sub_100546BFC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v5;
  }
  sub_100094134(a5);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v10 = result;
  id v33 = a1;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 64;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
    }
    else
    {
      uint64_t v16 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_40;
      }
      if (v16 >= v34) {
        return v10;
      }
      unint64_t v17 = v33[v16];
      ++v12;
      if (!v17)
      {
        uint64_t v12 = v16 + 1;
        if (v16 + 1 >= v34) {
          return v10;
        }
        unint64_t v17 = v33[v12];
        if (!v17)
        {
          uint64_t v12 = v16 + 2;
          if (v16 + 2 >= v34) {
            return v10;
          }
          unint64_t v17 = v33[v12];
          if (!v17)
          {
            uint64_t v18 = v16 + 3;
            if (v18 >= v34) {
              return v10;
            }
            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                uint64_t v12 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_41;
                }
                if (v12 >= v34) {
                  return v10;
                }
                unint64_t v17 = v33[v12];
                ++v18;
                if (v17) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v12 = v18;
          }
        }
      }
LABEL_24:
      unint64_t v11 = (v17 - 1) & v17;
      unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
    }
    uint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v15);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v13 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t v31 = (void *)(*(void *)(v10 + 48) + 16 * v26);
    *uint64_t v31 = v21;
    v31[1] = v20;
    *(void *)(*(void *)(v10 + 56) + 8 * v26) = v22;
    ++*(void *)(v10 + 16);
    if (__OFSUB__(v6--, 1)) {
      break;
    }
    if (!v6) {
      return v10;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100546E94(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v22 = (unint64_t *)result;
  uint64_t v23 = 0;
  int64_t v6 = 0;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v25 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v25) {
      return sub_100546BFC(v22, a2, v23, a3, &qword_100914388);
    }
    unint64_t v18 = *(void *)(v24 + 8 * v17);
    ++v6;
    if (!v18)
    {
      int64_t v6 = v17 + 1;
      if (v17 + 1 >= v25) {
        return sub_100546BFC(v22, a2, v23, a3, &qword_100914388);
      }
      unint64_t v18 = *(void *)(v24 + 8 * v6);
      if (!v18)
      {
        int64_t v6 = v17 + 2;
        if (v17 + 2 >= v25) {
          return sub_100546BFC(v22, a2, v23, a3, &qword_100914388);
        }
        unint64_t v18 = *(void *)(v24 + 8 * v6);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v11 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_5:
    uint64_t v12 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = *(void *)(*(void *)(a3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v16 = a4(v13, v14, v15);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v16)
    {
      *(unint64_t *)((char *)v22 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v23++, 1))
      {
        __break(1u);
        return sub_100546BFC(v22, a2, v23, a3, &qword_100914388);
      }
    }
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v25) {
    return sub_100546BFC(v22, a2, v23, a3, &qword_100914388);
  }
  unint64_t v18 = *(void *)(v24 + 8 * v19);
  if (v18)
  {
    int64_t v6 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v6 >= v25) {
      return sub_100546BFC(v22, a2, v23, a3, &qword_100914388);
    }
    unint64_t v18 = *(void *)(v24 + 8 * v6);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1005470A0(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = sub_100546E94((uint64_t)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = sub_100546E94((uint64_t)v11, v8, v6, a2);
    swift_slowDealloc();
  }
  return a3;
}

uint64_t sub_100547218(unint64_t a1, int a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4 - 8);
  unint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v43 = _swiftEmptyArrayStorage;
  switch(a2 >> 5)
  {
    case 1:
      uint64_t KeyPath = swift_getKeyPath();
      id v22 = [(id)a1 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v23 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v8, 0, 1, v23);
      sub_10032ED38(KeyPath, (uint64_t)v8);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v43[2] >= v43[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if ((a2 & 1) == 0) {
        goto LABEL_31;
      }
      uint64_t v24 = swift_getKeyPath();
      sub_10039F310(v24);
      goto LABEL_28;
    case 2:
      uint64_t v25 = swift_getKeyPath();
      id v26 = [(id)a1 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v27 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v8, 0, 1, v27);
      sub_10032ED38(v25, (uint64_t)v8);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v43[2] >= v43[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v28 = swift_getKeyPath();
      sub_10039F334(v28);
      goto LABEL_28;
    case 3:
      uint64_t v29 = swift_getKeyPath();
      id v30 = [(id)a1 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v31 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v8, 0, 1, v31);
      sub_10032ED38(v29, (uint64_t)v8);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v43[2] >= v43[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      goto LABEL_26;
    case 4:
      uint64_t v32 = swift_getKeyPath();
      id v33 = [(id)a1 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v34 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v8, 0, 1, v34);
      sub_10032ED38(v32, (uint64_t)v8);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v43[2] >= v43[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
LABEL_26:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v35 = swift_getKeyPath();
      sub_10039F358(v35);
      goto LABEL_28;
    case 5:
      uint64_t v36 = swift_getKeyPath();
      id v37 = [(id)a1 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v38 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v8, 0, 1, v38);
      sub_10032ED38(v36, (uint64_t)v8);
LABEL_28:
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v43[2] >= v43[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_31:
      sub_10054939C((id)a1, a2);
      goto LABEL_32;
    default:
      uint64_t v11 = swift_getKeyPath();
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        sub_10054939C((id)a1, a2);
      }
      else
      {
        uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v13 = _swiftEmptyArrayStorage;
      if (v12)
      {
        uint64_t v40 = v11;
        int v41 = a2;
        unint64_t v42 = _swiftEmptyArrayStorage;
        sub_1001DE118(0, v12 & ~(v12 >> 63), 0);
        if (v12 < 0)
        {
          __break(1u);
          JUMPOUT(0x1005479DCLL);
        }
        uint64_t v14 = 0;
        uint64_t v13 = v42;
        do
        {
          if ((a1 & 0xC000000000000001) != 0) {
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v15 = *(id *)(a1 + 8 * v14 + 32);
          }
          char v16 = v15;
          id v17 = [v15 uuid];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v18 = type metadata accessor for UUID();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v10, 0, 1, v18);

          unint64_t v42 = v13;
          unint64_t v20 = v13[2];
          unint64_t v19 = v13[3];
          if (v20 >= v19 >> 1)
          {
            sub_1001DE118(v19 > 1, v20 + 1, 1);
            uint64_t v13 = v42;
          }
          ++v14;
          v13[2] = v20 + 1;
          sub_1000F44F4((uint64_t)v10, (uint64_t)v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v20);
        }
        while (v12 != v14);
        LOBYTE(a2) = v41;
        uint64_t v11 = v40;
      }
      sub_10039F2FC(v11, (uint64_t)v13);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v43[2] >= v43[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if ((a2 & 1) == 0) {
        return sub_1002F52FC(v43);
      }
LABEL_32:
      sub_1002F51CC(0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v43[2] >= v43[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      return sub_1002F52FC(v43);
  }
}

uint64_t sub_1005479F4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_parentSavedReminderIdentifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_100547A28(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100547A64@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_displayDateDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_100547A98(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_100547AD4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  char v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  id v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    unint64_t v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

void sub_100547C1C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 metadata];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_100547C84(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v4 = isa;
  [v2 setMetadata:];
}

void sub_100547CFC(void *a1, uint64_t a2)
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  sub_1001DE058(0, 1, 0);
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    swift_release();
    unint64_t v11 = _swiftEmptyArrayStorage[2];
    unint64_t v10 = _swiftEmptyArrayStorage[3];
    if (v11 >= v10 >> 1) {
      sub_1001DE058(v10 > 1, v11 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v11 + 1;
    uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
    v12[4] = v8;
    _OWORD v12[5] = v9;
    swift_bridgeObjectRelease();
    uint64_t v13 = (void *)sub_100548E70(a1, a2, 1, (Class)_swiftEmptyArrayStorage, 0);
    swift_release();
    if (!v2)
    {
      sub_10024281C();
    }
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v14._object = (void *)0x80000001007CAF70;
    v14._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v14);
    sub_100094134(&qword_100913AA0);
    _print_unlocked<A, B>(_:_:)();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_100547F30()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091CC70);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091CC70);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100547FF8@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  Class v4 = *a1;
  id v5 = [self sharedConfiguration];
  [v5 templatePublicLinkTTL];

  id result = sub_10016700C(v4);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

const char *sub_100548070()
{
  return "metadata";
}

uint64_t sub_100548084(unint64_t a1, void *a2, unint64_t a3)
{
  Class v4 = v3;
  objc_super v89 = a2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v92 = v7;
  uint64_t v93 = v8;
  __chkstk_darwin(v7);
  uint64_t v86 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v90 = (char *)&v85 - v11;
  __chkstk_darwin(v12);
  uint64_t v91 = (char *)&v85 - v13;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v14 - 8);
  char v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v97 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  unint64_t v95 = (char *)&v85 - v21;
  uint64_t v107 = &_swiftEmptySetSingleton;
  uint64_t v105 = (uint64_t)&_swiftEmptySetSingleton;
  unint64_t v106 = (unint64_t)_swiftEmptyArrayStorage;
  id v22 = (void *)(a1 >> 62);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v98 = a1;
  unint64_t v85 = a1 >> 62;
  unint64_t v87 = a3;
  if (v23)
  {
    if (v23 >= 1)
    {
      unint64_t v88 = v3;
      a3 = 0;
      uint64_t v99 = (void (**)(char *, char *, uint64_t))(v18 + 32);
      char v100 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
      id v101 = (void *)(a1 & 0xC000000000000001);
      uint64_t v96 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      uint64_t v94 = (void (**)(char *, uint64_t))(v18 + 8);
      while (1)
      {
        if (v101) {
          id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v24 = *(id *)(a1 + 8 * a3 + 32);
        }
        uint64_t v25 = v24;
        id v26 = [v24 template:v85];
        if (v26)
        {
          uint64_t v27 = v26;
          id v28 = [v26 remObjectID];
          if (v28)
          {
            id v29 = v28;
            uint64_t v30 = (uint64_t)v107;
            swift_bridgeObjectRetain();
            char v31 = sub_1001CBD58(v29, v30);
            swift_bridgeObjectRelease();
            if ((v31 & 1) == 0)
            {
              id v32 = v29;
              sub_10031DE54(&v102, v32);

              id v29 = v27;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              uint64_t v27 = v32;
            }

            uint64_t v27 = v29;
          }

          a1 = v98;
        }
        id v33 = [v25 parentSavedReminderIdentifier];
        if (!v33) {
          break;
        }
        uint64_t v34 = v33;
        uint64_t v35 = v97;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v36 = *v99;
        (*v99)(v16, v35, v17);
        (*v100)(v16, 0, 1, v17);
        if ((*v96)(v16, 1, v17) == 1) {
          goto LABEL_7;
        }
        id v37 = v95;
        v36(v95, v16, v17);
        type metadata accessor for REMCDSavedReminder();
        id ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        id v40 = [ObjCClassFromMetadata objectIDWithUUID:isa];

        (*v94)(v37, v17);
        if (v40)
        {
          uint64_t v41 = v105;
          swift_bridgeObjectRetain();
          char v42 = sub_1001CBD58(v40, v41);
          swift_bridgeObjectRelease();
          if ((v42 & 1) == 0)
          {
            id v43 = v40;
            sub_10031DE54(&v102, v43);

            goto LABEL_9;
          }
        }
LABEL_8:

LABEL_9:
        if (v23 == ++a3)
        {
          swift_bridgeObjectRelease();
          id v22 = (void *)v106;
          Class v4 = v88;
          goto LABEL_29;
        }
      }
      (*v100)(v16, 1, 1, v17);
LABEL_7:
      sub_1001260DC((uint64_t)v16);
      goto LABEL_8;
    }
    __break(1u);
LABEL_46:
    swift_once();
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  id v22 = _swiftEmptyArrayStorage;
LABEL_29:
  swift_bridgeObjectRelease();
  unint64_t v44 = swift_bridgeObjectRetain();
  uint64_t v45 = sub_1002E418C(v44);
  char v16 = v4;
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a3;
  }
  a3 = (unint64_t)v45;
  swift_bridgeObjectRelease();
  if (qword_1009078B0 != -1) {
    goto LABEL_46;
  }
LABEL_33:
  uint64_t v47 = sub_10008E2DC(v92, (uint64_t)qword_10091CC70);
  unint64_t v48 = *(char **)(v93 + 16);
  uint64_t v49 = v91;
  uint64_t v99 = (void (**)(char *, char *, uint64_t))v47;
  uint64_t v96 = (unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 16);
  uint64_t v97 = v48;
  uint64_t v50 = ((uint64_t (*)(char *))v48)(v91);
  id v102 = v22;
  __chkstk_darwin(v50);
  *(&v85 - 2) = (unint64_t)v49;
  sub_100094134(&qword_100921A90);
  sub_1000963CC(0, (unint64_t *)&unk_100914440);
  sub_1000BFEAC(&qword_10090FD88, &qword_100921A90);
  uint64_t v51 = Sequence.map<A>(skippingError:_:)();
  if (v16)
  {
    swift_errorRelease();
    id v101 = _swiftEmptyArrayStorage;
  }
  else
  {
    id v101 = (void *)v51;
  }
  id v52 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v93 + 8);
  v93 += 8;
  char v100 = v52;
  ((void (*)(char *, uint64_t))v52)(v91, v92);
  swift_bridgeObjectRelease();
  uint64_t v53 = v105;
  if ((v105 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    unint64_t v55 = v89;
    if (v54)
    {
LABEL_38:
      sub_10020A3A0(v53);
      swift_bridgeObjectRelease();
      unsigned int v56 = [v55 includeConcealed] ^ 1;
      unint64_t v57 = swift_bridgeObjectRetain();
      uint64_t v58 = (void *)sub_100547218(v57, v56);
      type metadata accessor for REMCDSavedReminder();
      id v59 = [objc_allocWithZone((Class)NSFetchRequest) init];
      id v60 = [(id)swift_getObjCClassFromMetadata() entity];
      [v59 setEntity:v60];

      [v59 setAffectedStores:0];
      [v59 setPredicate:v58];

      [v59 setPropertiesToFetch:0];
      [v59 setRelationshipKeyPathsForPrefetching:0];
      uint64_t v61 = NSManagedObjectContext.fetch<A>(_:)();
      swift_release_n();

      goto LABEL_41;
    }
  }
  else
  {
    unint64_t v55 = v89;
    if (*(void *)(v105 + 16)) {
      goto LABEL_38;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v61 = _swiftEmptyArrayStorage;
LABEL_41:
  type metadata accessor for REMSavedReminderStorageCDIngestor();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v55;
  uint64_t v63 = v90;
  uint64_t v64 = ((uint64_t (*)(char *, void, uint64_t))v97)(v90, v99, v92);
  id v102 = v61;
  __chkstk_darwin(v64);
  *(&v85 - 2) = (unint64_t)v63;
  id v66 = v65;
  sub_100094134(&qword_100921B80);
  sub_1000963CC(0, &qword_1009100F8);
  sub_1000BFEAC(&qword_10090FD70, &qword_100921B80);
  unint64_t v95 = (char *)inited;
  Sequence.map<A>(skippingError:_:)();
  ((void (*)(char *, uint64_t))v100)(v90, v92);
  swift_bridgeObjectRelease();
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v67 = v98;
    if (v69) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v67 = v98;
    if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_43:
      os_log_type_t v68 = (id *)v95;
      swift_setDeallocating();

      return a3;
    }
  }
  swift_bridgeObjectRelease();
  if (v85)
  {
    swift_bridgeObjectRetain();
    uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v70 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v71 = _swiftEmptyArrayStorage;
  if (!v70)
  {
LABEL_61:
    int64_t v76 = v86;
    uint64_t v77 = ((uint64_t (*)(char *, void, uint64_t))v97)(v86, v99, v92);
    id v102 = v71;
    __chkstk_darwin(v77);
    *(&v85 - 2) = (unint64_t)v76;
    sub_100094134(&qword_100910070);
    sub_1000963CC(0, &qword_100910180);
    sub_1000BFEAC((unint64_t *)&qword_1009133E0, &qword_100910070);
    a3 = Sequence.map<A>(skippingError:_:)();
    swift_release();
    ((void (*)(char *, uint64_t))v100)(v86, v92);
    swift_bridgeObjectRelease();
    return a3;
  }
  uint64_t v104 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v70 & 0x8000000000000000) == 0)
  {
    uint64_t v72 = 0;
    unint64_t v73 = v98 & 0xC000000000000001;
    while (v70 != v72)
    {
      if (v73) {
        id v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v74 = *(id *)(v98 + 8 * v72 + 32);
      }
      uint64_t v75 = v74;
      if (!objc_msgSend(v74, "account", v85))
      {
        a3 = self;
        id v102 = 0;
        unint64_t v103 = 0xE000000000000000;
        _StringGuts.grow(_:)(42);
        swift_bridgeObjectRelease();
        id v102 = (id)0xD000000000000027;
        unint64_t v103 = 0x80000001007D7EF0;
        id v78 = [v75 description];
        uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        char v81 = v80;

        v82._countAndFlagsBits = v79;
        v82._object = v81;
        String.append(_:)(v82);
        swift_bridgeObjectRelease();
        v83._countAndFlagsBits = 125;
        v83._object = (void *)0xE100000000000000;
        String.append(_:)(v83);
        NSString v84 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [(id)a3 internalErrorWithDebugDescription:v84];

        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return a3;
      }
      ++v72;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if (v70 == v72)
      {
        unint64_t v71 = v104;
        goto LABEL_61;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100548E70(void *a1, uint64_t a2, char a3, Class isa, Class a5)
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10077A530;
  *(void *)(v10 + 32) = a1;
  uint64_t v31 = v10;
  specialized Array._endMutation()();
  uint64_t v11 = v31;
  id type = a1;
  unint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = (void *)sub_100547218(v12, a3 & 1);
  type metadata accessor for REMCDSavedReminder();
  id v14 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v15 = [(id)swift_getObjCClassFromMetadata() entity];
  [v14 setEntity:v15];

  [v14 setAffectedStores:0];
  [v14 setPredicate:v13];

  if (isa)
  {
    sub_1001FFC40((uint64_t)isa);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v14 setPropertiesToFetch:isa];

  if (a5) {
    a5 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v14 setRelationshipKeyPathsForPrefetching:a5];

  unint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  swift_bridgeObjectRelease_n();

  if (!v5)
  {
    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_9:
        if ((v16 & 0xC000000000000001) != 0)
        {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_24;
          }
          id v19 = *(id *)(v16 + 32);
        }
        uint64_t v11 = (uint64_t)v19;
        swift_bridgeObjectRelease();
        if (v16 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v20 < 2) {
            goto LABEL_14;
          }
        }
        else if (*(uint64_t *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
        {
LABEL_14:
          swift_bridgeObjectRelease();
          return v11;
        }
        if (qword_1009078B0 == -1)
        {
LABEL_17:
          uint64_t v21 = type metadata accessor for Logger();
          sub_10008E2DC(v21, (uint64_t)qword_10091CC70);
          id v22 = type;
          swift_bridgeObjectRetain();
          uint64_t v23 = Logger.logObject.getter();
          os_log_type_t v24 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v23, v24))
          {
            os_log_type_t typea = v24;
            uint64_t v25 = swift_slowAlloc();
            id v26 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v25 = 138412546;
            os_log_t log = v23;
            id v27 = v22;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v26 = v22;

            *(_WORD *)(v25 + 12) = 2048;
            swift_bridgeObjectRelease();
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, log, typea, "Found multiple instances of REMCDSavedReminder with identical objectID {objectID: %@, matches: %ld}", (uint8_t *)v25, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          return v11;
        }
LABEL_24:
        swift_once();
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v18) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease_n();
    [self noSuchObjectErrorWithObjectID:type];
    swift_willThrow();
  }
  return v11;
}

uint64_t sub_100549304@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_parentSavedReminderIdentifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10054934C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_10054939C(id a1, unsigned __int8 a2)
{
  switch(a2 >> 5)
  {
    case 0:
      swift_bridgeObjectRelease();
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:

      break;
    default:
      return;
  }
}

const char *sub_1005493FC()
{
  return "hasLocationTriggersOrVehicleEventTriggers";
}

id sub_100549408@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 hasLocationTriggersOrVehicleEventTriggers];
  *a2 = (_BYTE)result;
  return result;
}

id sub_10054943C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setHasLocationTriggersOrVehicleEventTriggers:*a1];
}

const char *sub_100549450()
{
  return "hasHashtags";
}

id sub_10054945C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 hasHashtags];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100549490(unsigned __int8 *a1, id *a2)
{
  return [*a2 setHasHashtags:*a1];
}

uint64_t sub_1005494A4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_displayDateDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1005494EC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100549544(uint64_t a1, uint64_t a2, char a3, Class isa, Class a5)
{
  unint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = (void *)sub_100547218(v8, a3 & 1);
  type metadata accessor for REMCDSavedReminder();
  id v10 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v11 = [(id)swift_getObjCClassFromMetadata() entity];
  [v10 setEntity:v11];

  [v10 setAffectedStores:0];
  [v10 setPredicate:v9];

  if (isa)
  {
    sub_1001FFC40((uint64_t)isa);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v10 setPropertiesToFetch:isa];

  if (a5) {
    a5 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v10 setRelationshipKeyPathsForPrefetching:a5];

  uint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();
  swift_bridgeObjectRelease();

  return v12;
}

uint64_t sub_1005496D4()
{
  return sub_1003E9C98();
}

uint64_t sub_1005496E0()
{
  return sub_10044B434();
}

uint64_t sub_1005496E8(uint64_t a1)
{
  uint64_t result = sub_100550F58(&qword_10091CCA8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CompletedByDateBucketsInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

Swift::Int sub_100549740(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_1001F5408(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_10054BB54(v5);
  *a1 = v2;
  return result;
}

void sub_1005497AC(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v178 = a3;
  unint64_t v192 = a2;
  uint64_t v180 = a5;
  uint64_t v181 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel();
  uint64_t v186 = *(void *)(v181 - 8);
  __chkstk_darwin(v181);
  uint64_t v185 = (char *)&v159 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v193 = (char *)&v159 - v9;
  uint64_t v10 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v10 - 8);
  uint64_t v177 = (uint64_t)&v159 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v204 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Day();
  uint64_t v194 = *(void *)(v204 - 8);
  __chkstk_darwin(v204);
  id v201 = (char *)&v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v203 = (void (**)(char *, uint64_t))((char *)&v159 - v14);
  __chkstk_darwin(v15);
  uint64_t v195 = (char *)&v159 - v16;
  uint64_t v17 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Bucket();
  uint64_t v196 = *(void *)(v17 - 8);
  uint64_t v197 = v17;
  __chkstk_darwin(v17);
  uint64_t v187 = (char *)&v159 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v188 = (char *)&v159 - v20;
  __chkstk_darwin(v21);
  NSString v198 = (void (*)(char *, char *, uint64_t))((char *)&v159 - v22);
  __chkstk_darwin(v23);
  id v200 = (char *)&v159 - v24;
  uint64_t v25 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v190 = *(void *)(v25 - 8);
  uint64_t v191 = v25;
  __chkstk_darwin(v25);
  id v184 = (uint64_t *)((char *)&v159 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v27);
  int v189 = (char *)&v159 - v28;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v182 = *(void (***)(char *, uint64_t))(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v30 = (void (**)(char *, uint64_t))((char *)&v159 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v179 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  id v33 = (char *)&v159 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v159 - v35;
  uint64_t v37 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v37 - 8);
  uint64_t v39 = (char *)&v159 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  char v42 = (char *)&v159 - v41;
  id v43 = v202;
  NSString v44 = sub_10054DB54(a1, a4);
  if (v43) {
    return;
  }
  uint64_t v202 = v30;
  uint64_t v173 = v39;
  os_log_type_t v174 = v33;
  uint64_t v175 = v36;
  uint64_t v176 = v31;
  uint64_t v45 = (uint64_t)v44;
  swift_bridgeObjectRetain();
  int v46 = v199;
  sub_10054AD4C(v45, (uint64_t)v42);
  uint64_t v171 = v45;
  id v47 = [v46 fetchResultTokenToDiffAgainst];
  uint64_t v48 = (uint64_t)v175;
  sub_10051F2BC(v47, (uint64_t)a1, (uint64_t)v175);
  Class v167 = v42;
  uint64_t v165 = 0;
  uint64_t v164 = (uint64_t)a1;

  uint64_t v49 = (char *)v202;
  REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter();
  uint64_t v50 = v189;
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter();
  v182[1](v49, Configuration);
  uint64_t v51 = v190;
  id v52 = v184;
  uint64_t v53 = v50;
  uint64_t v54 = v191;
  (*(void (**)(uint64_t *, char *, uint64_t))(v190 + 16))(v184, v53, v191);
  int v55 = (*(uint64_t (**)(uint64_t *, uint64_t))(v51 + 88))(v52, v54);
  if (v55 != enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    id v59 = v185;
    uint64_t v58 = v186;
    id v60 = v193;
    uint64_t v61 = v176;
    uint64_t v102 = v204;
    uint64_t v103 = v196;
    if (v55 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v190 + 96))(v52, v191);
      sub_100528BCC(*v52, v48, v164, v178, 0);
      uint64_t v104 = v189;
      uint64_t v105 = (uint64_t)v173;
LABEL_84:
      os_log_type_t v62 = v174;
      goto LABEL_85;
    }
    uint64_t v105 = (uint64_t)v173;
    if (v55 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
    {
      if (v55 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:)) {
        goto LABEL_99;
      }
      uint64_t v104 = v189;
      goto LABEL_84;
    }
    (*(void (**)(uint64_t *, uint64_t))(v190 + 96))(v52, v191);
    uint64_t v106 = *v52;
    uint64_t v107 = sub_100094134(&qword_100909C78);
    uint64_t v108 = v177;
    sub_1001326D0((uint64_t)v52 + *(int *)(v107 + 48), v177);
    uint64_t v109 = _swiftEmptyArrayStorage;
    char v205 = _swiftEmptyArrayStorage;
    uint64_t v199 = *(char **)(v171 + 16);
    if (v199)
    {
      uint64_t v160 = v106;
      uint64_t v111 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
      uint64_t v110 = v103 + 16;
      NSString v198 = v111;
      unint64_t v192 = v171 + ((*(unsigned __int8 *)(v110 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 64));
      id v184 = (uint64_t *)(v110 + 72);
      LODWORD(Configuration) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.day(_:);
      LODWORD(v168) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastSevenDays(_:);
      int v163 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastThirtyDays(_:);
      int v162 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.month(_:);
      LODWORD(v161) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.year(_:);
      uint64_t v182 = (void (**)(char *, uint64_t))(v110 + 80);
      uint64_t v202 = (void (**)(char *, uint64_t))(v194 + 16);
      uint64_t v203 = (void (**)(char *, uint64_t))(v194 + 8);
      unint64_t v166 = (void (**)(char *, char *, uint64_t))(v194 + 32);
      os_log_type_t v170 = (void (**)(char *, uint64_t))(v110 - 8);
      uint64_t v196 = v110;
      uint64_t v172 = *(void (***)(char *, uint64_t))(v110 + 56);
      swift_bridgeObjectRetain();
      unint64_t v112 = 0;
      uint64_t v113 = v197;
      uint64_t v114 = v201;
      uint64_t v115 = v188;
      do
      {
        id v200 = v112;
        unint64_t v118 = v192 + (void)v172 * (void)v112;
        uint64_t v119 = v198;
        v198(v115, (char *)v118, v113);
        id v120 = v187;
        v119(v187, v115, v113);
        int v121 = ((uint64_t (*)(char *, uint64_t))*v184)(v120, v113);
        if (v121 == Configuration)
        {
          (*v182)(v120, v113);
          unint64_t v116 = v195;
          (*v166)(v195, v120, v102);
          uint64_t v117 = (void *)REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter();
          (*v203)(v116, v102);
        }
        else
        {
          if (v121 == v168)
          {
            (*v182)(v120, v197);
            unint64_t v122 = &v120[*(int *)(sub_100094134(&qword_10091CCC8) + 48)];
            uint64_t v123 = type metadata accessor for Date();
            uint64_t v124 = v194;
          }
          else
          {
            uint64_t v124 = v194;
            if (v121 == v163 || v121 == v162)
            {
              (*v182)(v120, v197);
              unint64_t v122 = &v120[*(int *)(sub_100094134(&qword_10091CCC8) + 48)];
              uint64_t v125 = type metadata accessor for Date();
            }
            else
            {
              if (v121 != v161) {
                goto LABEL_100;
              }
              (*v182)(v120, v197);
              unint64_t v122 = &v120[*(int *)(sub_100094134(&qword_10091CCC0) + 48)];
              uint64_t v125 = type metadata accessor for REMRemindersListDataView.DateBucketsModel.RepresentativeDate();
            }
            uint64_t v123 = v125;
          }
          uint64_t v126 = *(void *)v122;
          (*(void (**)(char *))(*(void *)(v123 - 8) + 8))(v120);
          uint64_t v127 = *(void *)(v126 + 16);
          if (v127)
          {
            uint64_t v128 = v126
                 + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80));
            uint64_t v129 = *(void *)(v124 + 72);
            uint64_t v130 = v126;
            uint64_t v131 = *(void (**)(char *, uint64_t, uint64_t))(v124 + 16);
            uint64_t v169 = v130;
            swift_bridgeObjectRetain();
            uint64_t v117 = _swiftEmptyArrayStorage;
            while (1)
            {
              uint64_t v132 = v204;
              v131(v114, v128, v204);
              uint64_t v133 = REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter();
              (*v203)(v114, v132);
              uint64_t v134 = *(void *)(v133 + 16);
              int64_t v135 = v117[2];
              int64_t v136 = v135 + v134;
              if (__OFADD__(v135, v134)) {
                goto LABEL_93;
              }
              int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              if (isUniquelyReferenced_nonNull_native && v136 <= v117[3] >> 1)
              {
                if (*(void *)(v133 + 16)) {
                  goto LABEL_67;
                }
              }
              else
              {
                if (v135 <= v136) {
                  int64_t v138 = v135 + v134;
                }
                else {
                  int64_t v138 = v135;
                }
                uint64_t v117 = (void *)sub_1003091E4(isUniquelyReferenced_nonNull_native, v138, 1, (unint64_t)v117);
                if (*(void *)(v133 + 16))
                {
LABEL_67:
                  uint64_t v139 = v117[2];
                  uint64_t v140 = (v117[3] >> 1) - v139;
                  uint64_t v141 = *(void *)(type metadata accessor for REMRemindersListDataView.ReminderLite() - 8);
                  uint64_t v142 = *(void *)(v141 + 72);
                  if (v140 < v134) {
                    goto LABEL_95;
                  }
                  unint64_t v143 = (*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
                  uint64_t v144 = (char *)v117 + v143 + v142 * v139;
                  unint64_t v145 = v133 + v143;
                  uint64_t v146 = v142 * v134;
                  Swift::Int v147 = &v144[v146];
                  unint64_t v148 = v145 + v146;
                  BOOL v149 = v145 >= (unint64_t)v147 || (unint64_t)v144 >= v148;
                  uint64_t v114 = v201;
                  if (!v149) {
                    goto LABEL_97;
                  }
                  swift_arrayInitWithCopy();
                  if (v134)
                  {
                    uint64_t v150 = v117[2];
                    BOOL v100 = __OFADD__(v150, v134);
                    uint64_t v151 = v150 + v134;
                    if (v100) {
                      goto LABEL_96;
                    }
                    v117[2] = v151;
                  }
                  goto LABEL_57;
                }
              }
              uint64_t v114 = v201;
              if (v134) {
                goto LABEL_94;
              }
LABEL_57:
              swift_bridgeObjectRelease();
              v128 += v129;
              if (!--v127)
              {
                swift_bridgeObjectRelease_n();
                id v60 = v193;
                uint64_t v61 = v176;
                goto LABEL_78;
              }
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v117 = _swiftEmptyArrayStorage;
          id v60 = v193;
LABEL_78:
          uint64_t v102 = v204;
          uint64_t v113 = v197;
        }
        unint64_t v112 = v200 + 1;
        uint64_t v115 = v188;
        (*v170)(v188, v113);
        sub_1002026F8((uint64_t)v117);
      }
      while (v112 != v199);
      swift_bridgeObjectRelease();
      uint64_t v109 = v205;
      uint64_t v108 = v177;
      id v59 = v185;
      uint64_t v106 = v160;
    }
    int v157 = v178;
    uint64_t v158 = v164;
    sub_1005280D0(v106, (uint64_t)v109, v164, v178, 0);
    sub_10052929C(v108, (uint64_t)v109, v158, v157, 0);
    swift_bridgeObjectRelease();
    sub_1000966BC(v108, &qword_100909C68);
    uint64_t v58 = v186;
    uint64_t v104 = v189;
    os_log_type_t v62 = v174;
    goto LABEL_81;
  }
  (*(void (**)(uint64_t *, uint64_t))(v51 + 96))(v52, v54);
  uint64_t v56 = *v52;
  unint64_t v57 = _swiftEmptyArrayStorage;
  char v205 = _swiftEmptyArrayStorage;
  id v59 = v185;
  uint64_t v58 = v186;
  id v60 = v193;
  uint64_t v61 = v176;
  os_log_type_t v62 = v174;
  uint64_t v63 = v204;
  unint64_t v192 = *(void *)(v171 + 16);
  if (!v192)
  {
LABEL_80:
    sub_1005280D0(v56, (uint64_t)v57, v164, v178, 0);
    swift_bridgeObjectRelease();
    uint64_t v104 = v189;
LABEL_81:
    uint64_t v105 = (uint64_t)v173;
LABEL_85:
    (*(void (**)(char *, uint64_t))(v190 + 8))(v104, v191);
    sub_1000BF710((uint64_t)v167, v105, &qword_100909C70);
    REMRemindersListDataView.CompletedDateBucketsModel.init(buckets:remindersCount:prefetchedReminders:prefetchedDueReminders:)();
    long long v152 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
    uint64_t v153 = v58;
    uint64_t v154 = v181;
    v152(v59, v60, v181);
    uint64_t v155 = v179;
    uint64_t v156 = (uint64_t)v175;
    (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v62, v175, v61);
    sub_100550F58(&qword_10091CCB0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel);
    sub_100550F58(&qword_10091CCB8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
    (*(void (**)(char *, uint64_t))(v153 + 8))(v193, v154);
    (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v156, v61);
    sub_1000966BC((uint64_t)v167, &qword_100909C70);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v161 = v56;
  id v65 = *(char **)(v196 + 16);
  uint64_t v64 = v196 + 16;
  uint64_t v187 = (char *)(v171 + ((*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80)));
  uint64_t v188 = v65;
  id v184 = (uint64_t *)(v196 + 88);
  LODWORD(Configuration) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.day(_:);
  LODWORD(v169) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastSevenDays(_:);
  LODWORD(v166) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastThirtyDays(_:);
  int v163 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.month(_:);
  int v162 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.year(_:);
  uint64_t v182 = (void (**)(char *, uint64_t))(v196 + 96);
  id v201 = (char *)(v194 + 16);
  uint64_t v202 = (void (**)(char *, uint64_t))(v194 + 8);
  uint64_t v168 = (void (**)(char *, char *, uint64_t))(v194 + 32);
  uint64_t v172 = (void (**)(char *, uint64_t))(v196 + 8);
  uint64_t v177 = *(void *)(v196 + 72);
  swift_bridgeObjectRetain();
  id v66 = 0;
  uint64_t v67 = v195;
  uint64_t v68 = v197;
  uint64_t v69 = (char *)v203;
  uint64_t v70 = v200;
  uint64_t v196 = v64;
  while (1)
  {
    uint64_t v72 = v188;
    uint64_t v199 = v66;
    ((void (*)(char *, char *, uint64_t))v188)(v70, &v187[v177 * (void)v66], v68);
    unint64_t v73 = (char *)v198;
    ((void (*)(void, char *, uint64_t))v72)(v198, v70, v68);
    int v74 = ((uint64_t (*)(char *, uint64_t))*v184)(v73, v68);
    if (v74 != Configuration) {
      break;
    }
    (*v182)(v73, v68);
    (*v168)(v67, v73, v63);
    unint64_t v71 = (void *)REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter();
    (*v202)(v67, v63);
LABEL_6:
    uint64_t v70 = v200;
    id v66 = v199 + 1;
    (*v172)(v200, v68);
    sub_1002026F8((uint64_t)v71);
    uint64_t v61 = v176;
    if (v66 == (char *)v192)
    {
      swift_bridgeObjectRelease();
      unint64_t v57 = v205;
      id v60 = v193;
      id v59 = v185;
      uint64_t v58 = v186;
      os_log_type_t v62 = v174;
      uint64_t v56 = v161;
      goto LABEL_80;
    }
  }
  if (v74 == v169 || v74 == v166 || v74 == v163)
  {
    (*v182)(v73, v68);
    uint64_t v75 = &v73[*(int *)(sub_100094134(&qword_10091CCC8) + 48)];
    uint64_t v76 = type metadata accessor for Date();
  }
  else
  {
    if (v74 != v162) {
      goto LABEL_98;
    }
    (*v182)(v73, v68);
    uint64_t v75 = &v73[*(int *)(sub_100094134(&qword_10091CCC0) + 48)];
    uint64_t v76 = type metadata accessor for REMRemindersListDataView.DateBucketsModel.RepresentativeDate();
  }
  uint64_t v77 = *(void *)v75;
  (*(void (**)(char *, uint64_t))(*(void *)(v76 - 8) + 8))(v73, v76);
  uint64_t v78 = *(void *)(v77 + 16);
  if (!v78)
  {
    swift_bridgeObjectRelease();
    unint64_t v71 = _swiftEmptyArrayStorage;
    uint64_t v67 = v195;
    uint64_t v68 = v197;
    goto LABEL_6;
  }
  uint64_t v79 = v77 + ((*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80));
  uint64_t v80 = *(void *)(v194 + 72);
  char v81 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 16);
  os_log_type_t v170 = (void (**)(char *, uint64_t))v77;
  swift_bridgeObjectRetain();
  unint64_t v71 = _swiftEmptyArrayStorage;
  while (1)
  {
    v81(v69, v79, v63);
    uint64_t v82 = REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter();
    (*v202)(v69, v63);
    uint64_t v83 = *(void *)(v82 + 16);
    int64_t v84 = v71[2];
    int64_t v85 = v84 + v83;
    if (__OFADD__(v84, v83)) {
      break;
    }
    int v86 = swift_isUniquelyReferenced_nonNull_native();
    if (v86 && v85 <= v71[3] >> 1)
    {
      if (*(void *)(v82 + 16)) {
        goto LABEL_25;
      }
    }
    else
    {
      if (v84 <= v85) {
        int64_t v87 = v84 + v83;
      }
      else {
        int64_t v87 = v84;
      }
      unint64_t v71 = (void *)sub_1003091E4(v86, v87, 1, (unint64_t)v71);
      if (*(void *)(v82 + 16))
      {
LABEL_25:
        uint64_t v88 = v71[2];
        uint64_t v89 = (v71[3] >> 1) - v88;
        uint64_t v90 = *(void *)(type metadata accessor for REMRemindersListDataView.ReminderLite() - 8);
        uint64_t v91 = *(void *)(v90 + 72);
        if (v89 < v83) {
          goto LABEL_91;
        }
        unint64_t v92 = (*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
        uint64_t v93 = (char *)v71 + v92 + v91 * v88;
        unint64_t v94 = v82 + v92;
        uint64_t v95 = v91 * v83;
        uint64_t v96 = &v93[v95];
        unint64_t v97 = v94 + v95;
        BOOL v98 = v94 >= (unint64_t)v96 || (unint64_t)v93 >= v97;
        uint64_t v63 = v204;
        if (!v98) {
          goto LABEL_97;
        }
        swift_arrayInitWithCopy();
        uint64_t v69 = (char *)v203;
        if (v83)
        {
          uint64_t v99 = v71[2];
          BOOL v100 = __OFADD__(v99, v83);
          uint64_t v101 = v99 + v83;
          if (v100) {
            goto LABEL_92;
          }
          v71[2] = v101;
        }
        goto LABEL_15;
      }
    }
    uint64_t v69 = (char *)v203;
    uint64_t v63 = v204;
    if (v83) {
      goto LABEL_90;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    v79 += v80;
    if (!--v78)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v67 = v195;
      uint64_t v68 = v197;
      goto LABEL_6;
    }
  }
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_98:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
LABEL_99:
  swift_bridgeObjectRelease();
LABEL_100:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

uint64_t sub_10054AD4C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Day();
  uint64_t v50 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Bucket();
  uint64_t v51 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  unint64_t v57 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v56 = (char *)&v43 - v10;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v12 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter();
  char v15 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, Configuration);
  if ((v15 & 1) == 0)
  {
    uint64_t v40 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(a2, 1, 1, v40);
  }
  uint64_t v65 = *(void *)(a1 + 16);
  if (!v65)
  {
LABEL_24:
    REMRemindersListDataView.CountByCompleted.init(completed:incomplete:)();
    uint64_t v42 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(a2, 0, 1, v42);
  }
  uint64_t v44 = a2;
  uint64_t v45 = v2;
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  uint64_t v16 = v51 + 16;
  uint64_t v63 = a1 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80));
  uint64_t v64 = v17;
  os_log_type_t v62 = (uint64_t (**)(char *, uint64_t))(v51 + 88);
  int v61 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.day(_:);
  int v53 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastSevenDays(_:);
  int v48 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastThirtyDays(_:);
  int v47 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.month(_:);
  int v46 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.year(_:);
  uint64_t v67 = v50 + 16;
  uint64_t v18 = a1;
  uint64_t v19 = (void (**)(char *, uint64_t))(v50 + 8);
  id v52 = (void (**)(char *, char *, uint64_t))(v50 + 32);
  uint64_t v58 = (void (**)(char *, uint64_t))(v51 + 8);
  uint64_t v59 = *(void *)(v51 + 72);
  id v60 = (void (**)(char *, uint64_t))(v51 + 96);
  uint64_t v43 = v18;
  swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v49;
  uint64_t v24 = v56;
  uint64_t v23 = v57;
  uint64_t v51 = v16;
  while (1)
  {
    uint64_t v66 = v20;
    uint64_t v28 = (char *)(v63 + v59 * v20);
    uint64_t v29 = v64;
    v64(v24, v28, v22);
    v29(v23, v24, v22);
    int v30 = (*v62)(v23, v22);
    if (v30 != v61) {
      break;
    }
    (*v60)(v23, v22);
    (*v52)(v7, v23, v5);
    uint64_t v25 = *(void *)(REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter() + 16);
    swift_bridgeObjectRelease();
    BOOL v26 = __OFADD__(v21, v25);
    v21 += v25;
    if (v26) {
      goto LABEL_26;
    }
    (*v19)(v7, v5);
    uint64_t v27 = v66;
LABEL_6:
    uint64_t v20 = v27 + 1;
    (*v58)(v24, v22);
    if (v20 == v65)
    {
      swift_bridgeObjectRelease();
      a2 = v44;
      goto LABEL_24;
    }
  }
  if (v30 == v53 || v30 == v48 || v30 == v47)
  {
    (*v60)(v23, v22);
    uint64_t v31 = &v23[*(int *)(sub_100094134(&qword_10091CCC8) + 48)];
    uint64_t v32 = type metadata accessor for Date();
  }
  else
  {
    if (v30 != v46) {
      goto LABEL_28;
    }
    (*v60)(v23, v22);
    uint64_t v31 = &v23[*(int *)(sub_100094134(&qword_10091CCC0) + 48)];
    uint64_t v32 = type metadata accessor for REMRemindersListDataView.DateBucketsModel.RepresentativeDate();
  }
  uint64_t v33 = *(void *)v31;
  (*(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8))(v23, v32);
  uint64_t v34 = *(void *)(v33 + 16);
  if (!v34)
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = 0;
LABEL_18:
    BOOL v26 = __OFADD__(v21, v38);
    v21 += v38;
    uint64_t v27 = v66;
    if (v26) {
      goto LABEL_27;
    }
    uint64_t v24 = v56;
    uint64_t v23 = v57;
    goto LABEL_6;
  }
  uint64_t v54 = v33;
  uint64_t v55 = v21;
  uint64_t v35 = v33 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
  uint64_t v36 = *(void *)(v50 + 72);
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  swift_bridgeObjectRetain();
  uint64_t v38 = 0;
  while (1)
  {
    v37(v7, v35, v5);
    uint64_t v39 = *(void *)(REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter() + 16);
    swift_bridgeObjectRelease();
    BOOL v26 = __OFADD__(v38, v39);
    v38 += v39;
    if (v26) {
      break;
    }
    (*v19)(v7, v5);
    v35 += v36;
    if (!--v34)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v22 = v49;
      uint64_t v21 = v55;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}