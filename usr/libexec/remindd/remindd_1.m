void sub_1000FE974(void *a1, void *a2, char a3, double a4)
{
  uint64_t v4;
  char **v5;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  id v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  char **v25;
  unsigned __int8 v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  NSString v50;
  void *v51;
  NSString v52;
  unint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  char v57;
  id v58[3];
  uint64_t v59;

  LOBYTE(v5) = a3;
  v8 = a2;
  v9 = sub_100693E40(v8);
  if (v4) {
    return;
  }
  v10 = (uint64_t)v9;
  v11 = (void *)sub_1005513E4(v9, 0);
  v12 = 0;
  v13 = v11;
  if (!v11)
  {
    [self noSuchObjectErrorWithObjectID:v8];
    swift_willThrow();
LABEL_3:

    return;
  }
  v14 = [v11 alarmStorage];
  if (!v14) {
    goto LABEL_54;
  }
  v15 = v14;
  v55 = a1;
  v56 = v13;
  v58[0] = v14;
  sub_1000963CC(0, (unint64_t *)&unk_100909AC0);
  sub_1000963CC(0, (unint64_t *)&unk_10090B010);
  sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
  v16 = (unint64_t)v58;
  v17 = Sequence.elements<A>(ofType:)();

  if (v17 >> 62) {
    goto LABEL_52;
  }
  v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v18) {
    goto LABEL_53;
  }
  while (2)
  {
    v53 = v12;
    v54 = (void *)v10;
    v57 = (char)v5;
    v58[0] = _swiftEmptyArrayStorage;
    if (v18 < 1)
    {
      __break(1u);
    }
    else
    {
      v19 = 0;
      v20 = &selRef_willSave;
      do
      {
        if ((v17 & 0xC000000000000001) != 0) {
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          v21 = *(id *)(v17 + 8 * v19 + 32);
        }
        v22 = v21;
        if ((objc_msgSend(v21, "isConcealed", v53) & 1) != 0
          || ([v22 v20[198]] & 1) != 0
          || (v23 = [v22 trigger]) == 0)
        {
        }
        else
        {
          v24 = v23;
          v25 = v20;
          v26 = [v23 isTemporal];

          if (v26)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
          v20 = v25;
        }
        ++v19;
      }
      while (v18 != v19);
      swift_bridgeObjectRelease();
      v16 = (unint64_t)v58[0];
      if (((unint64_t)v58[0] & 0x8000000000000000) == 0
        && ((unint64_t)v58[0] & 0x4000000000000000) == 0)
      {
        v17 = *((void *)v58[0] + 2);
        if (v17) {
          goto LABEL_27;
        }
LABEL_57:
        swift_release();
        v51 = self;
        v52 = String._bridgeToObjectiveC()();
        [v51 internalErrorWithDebugDescription:v52];

        swift_willThrow();
        return;
      }
    }
    swift_retain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v17) {
      goto LABEL_57;
    }
LABEL_27:
    v12 = v16 & 0xC000000000000001;
    swift_retain();
    v10 = 4;
    v5 = &selRef_willSave;
    v27 = 0;
    if ((v16 & 0xC000000000000001) == 0)
    {
LABEL_31:
      v28 = *(id *)(v16 + 8 * v10);
      goto LABEL_32;
    }
    while (1)
    {
      v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_32:
      v29 = v28;
      v30 = v27 + 1;
      if (__OFADD__(v27, 1)) {
        break;
      }
      [v28 setDueDateResolutionTokenAsNonce:a4];
      if (v57)
      {
        [v29 updateChangeCount];
      }
      else
      {
        [v29 setCkDirtyFlags:0];
        v31 = [v29 trigger];
        if (v31)
        {
          v32 = v31;
          [v31 setCkDirtyFlags:0];

          goto LABEL_38;
        }
      }

LABEL_38:
      if (v30 == v17)
      {
        swift_release();
        swift_release();
        v10 = (uint64_t)v54;
        if (([v55 hasChanges] & 1) == 0)
        {

          return;
        }
        v58[0] = 0;
        if (![v55 save:v58])
        {
          v46 = v58[0];
          _convertNSErrorToError(_:)();

          swift_willThrow();
          goto LABEL_3;
        }
        v33 = qword_100906EB8;
        v34 = v58[0];
        if (v33 != -1) {
          swift_once();
        }
        v35 = type metadata accessor for Logger();
        sub_10008E2DC(v35, (uint64_t)qword_10090ADC0);
        v36 = v56;
        v37 = Logger.logObject.getter();
        v38 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v37, v38))
        {

          goto LABEL_3;
        }
        v39 = swift_slowAlloc();
        v59 = swift_slowAlloc();
        *(_DWORD *)v39 = 136446722;
        v40 = [v36 remObjectID];
        if (v40)
        {
          v41 = v40;
          v42 = [v40 description];

          v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v45 = v44;
        }
        else
        {
          v45 = 0xE300000000000000;
          v43 = 7104878;
        }
        v58[0] = (id)sub_1000C51B8(v43, v45, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2048;
        swift_beginAccess();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 22) = 2082;
        v47 = Bool.yesno.getter();
        sub_1000C51B8(v47, v48, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDXPCDebugPerformer: setDueDateResolutionTokenNonceForReminderID: Saved changes {reminderID: %{public}s, alarmsUpdated.count: %ld, shouldSetDirtyFlags: %{public}s}", (uint8_t *)v39, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }
      v27 = ++v10 - 4;
      if (!v12) {
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_52:
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18) {
      continue;
    }
    break;
  }
LABEL_53:
  swift_bridgeObjectRelease();
  v13 = v56;
LABEL_54:
  v49 = self;
  v50 = String._bridgeToObjectiveC()();
  [v49 internalErrorWithDebugDescription:v50];

  swift_willThrow();
}

void sub_1000FF1A8(void *a1, int a2, void *a3, char a4, void *aBlock, const char *a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  v17 = _Block_copy(aBlock);
  _Block_copy(v17);
  id v18 = a3;
  id v19 = a1;
  sub_100115B24(v18, a4, (uint64_t)v19, (uint64_t)v17, a6, a7, a8, a10, a9);
  _Block_release(v17);
  _Block_release(v17);
}

uint64_t sub_1000FF408(void *a1, int a2, id a3, void **a4)
{
  v5 = a1;
  id v6 = [a3 stringFromContact:a1];
  if (v6)
  {
    v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }
  else
  {
    unint64_t v10 = 0xE500000000000000;
    uint64_t v8 = 0x296C696E28;
  }
  id v11 = [v5 phoneNumbers];
  sub_100094134((uint64_t *)&unk_10090B000);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v55 = v10;
  v56 = a4;
  uint64_t v54 = v8;
  id v57 = v5;
  if (v13)
  {
    uint64_t result = sub_1001DE058(0, v13 & ~(v13 >> 63), 0);
    if (v13 < 0)
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v15 = 0;
    do
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v16 = *(id *)(v12 + 8 * v15 + 32);
      }
      v17 = v16;
      id v18 = [v16 value];
      id v19 = [v18 stringValue];

      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v21;

      unint64_t v24 = _swiftEmptyArrayStorage[2];
      unint64_t v23 = _swiftEmptyArrayStorage[3];
      if (v24 >= v23 >> 1) {
        sub_1001DE058(v23 > 1, v24 + 1, 1);
      }
      ++v15;
      _swiftEmptyArrayStorage[2] = v24 + 1;
      v25 = &_swiftEmptyArrayStorage[2 * v24];
      v25[4] = v20;
      v25[5] = v22;
    }
    while (v13 != v15);
    swift_bridgeObjectRelease();
    v5 = v57;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v26 = [v5 emailAddresses];
  unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v28)
    {
LABEL_19:
      uint64_t result = sub_1001DE058(0, v28 & ~(v28 >> 63), 0);
      if ((v28 & 0x8000000000000000) == 0)
      {
        uint64_t v29 = 0;
        unint64_t v58 = v27 & 0xC000000000000001;
        unint64_t v30 = v27;
        do
        {
          if (v58) {
            id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v31 = *(id *)(v27 + 8 * v29 + 32);
          }
          v32 = v31;
          id v33 = [v31 value];
          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v36 = v35;

          unint64_t v38 = _swiftEmptyArrayStorage[2];
          unint64_t v37 = _swiftEmptyArrayStorage[3];
          if (v38 >= v37 >> 1) {
            sub_1001DE058(v37 > 1, v38 + 1, 1);
          }
          ++v29;
          _swiftEmptyArrayStorage[2] = v38 + 1;
          v39 = &_swiftEmptyArrayStorage[2 * v38];
          v39[4] = v34;
          v39[5] = v36;
          unint64_t v27 = v30;
        }
        while (v28 != v29);
        swift_bridgeObjectRelease();
        v5 = v57;
        goto LABEL_31;
      }
LABEL_37:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v28) {
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
LABEL_31:
  id v40 = [v5 identifier];
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v43 = v42;

  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0x6469202020200A3ALL;
  v44._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v44);
  v45._countAndFlagsBits = v41;
  v45._object = v43;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = 0x6F6870202020200ALL;
  v46._object = (void *)0xEC0000003D73656ELL;
  String.append(_:)(v46);
  v47._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v48._object = (void *)0xEC0000003D736C69;
  v48._countAndFlagsBits = 0x616D65202020200ALL;
  String.append(_:)(v48);
  v49._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = *v56;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *v56 = v50;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100308F88(0, v50[2] + 1, 1, v50);
    v50 = (void *)result;
    *v56 = (void *)result;
  }
  unint64_t v52 = v50[2];
  unint64_t v51 = v50[3];
  if (v52 >= v51 >> 1)
  {
    uint64_t result = (uint64_t)sub_100308F88((void *)(v51 > 1), v52 + 1, 1, v50);
    v50 = (void *)result;
    *v56 = (void *)result;
  }
  v50[2] = v52 + 1;
  v53 = &v50[2 * v52];
  v53[4] = v54;
  v53[5] = v55;
  return result;
}

void sub_1000FF960(uint64_t a1, void *a2)
{
  v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

void sub_1000FFA58(void **a1, uint64_t a2)
{
  id v3 = *(id *)(a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerByContainerURL);
  URL._bridgeToObjectiveC()(v4);
  id v6 = v5;
  id v7 = [v3 objectForKey:v5];

  uint64_t v8 = *a1;
  *a1 = v7;
}

uint64_t sub_1000FFAE0()
{
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_10090ADC0);
  v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "RDXPCDebugPerformer: Notifying stores did change for isolated store", v3, 2u);
    swift_slowDealloc();
  }

  v4 = (const char *)_REMStoreChangedNotificationName;

  return notify_post(v4);
}

void sub_1000FFBD4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, NSURL *a4@<X8>)
{
  URL._bridgeToObjectiveC()(a4);
  id v8 = v7;
  [*(id *)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerByContainerURL) setObject:a2 forKey:v7];
  [*(id *)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerNotificationCenterByContainerURL) setObject:a3 forKey:v8];
}

uint64_t sub_1000FFC68(uint64_t a1)
{
  id v1 = [self _groundTruth_primaryActiveCloudKitAccountInContext:a1];
  if (qword_100907B10 != -1) {
    swift_once();
  }
  os_log_type_t v2 = (void *)qword_100942618;
  uint64_t v3 = qword_100907B18;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_100942620;
  swift_retain();
  sub_10034A19C(v1, v2, v4);

  swift_release();
  return swift_release();
}

void sub_1000FFD88(void *a1, int a2, void *aBlock, void (*a4)(void *))
{
  id v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4(v6);
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_1000FFE04(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v68 = a3;
  uint64_t v64 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v74 = *(void *)(v4 - 8);
  uint64_t v75 = v4;
  __chkstk_darwin(v4);
  v72 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for DispatchQoS();
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  v70 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for DispatchTime();
  uint64_t v69 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  v63 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v77 = (char *)v56 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  v79 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v80 = (char *)v56 - v18;
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_10090ADC0);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "os_transaction INIT {name: com.apple.remindd.RDXPCDebugPerformer.destroyIsolatedStoreContainer}", v22, 2u);
    swift_slowDealloc();
  }

  uint64_t v62 = os_transaction_create();
  unint64_t v23 = self;
  v67 = a1;
  id v24 = [a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v26 = [v23 urlForIsolatedContainerWithIdentifier:v25];

  unint64_t v27 = v80;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = v76;
  uint64_t v29 = *(NSObject **)((char *)v76 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_accessQueue);
  unint64_t v30 = v79;
  unint64_t v58 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v58(v79, v27, v14);
  uint64_t v31 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v60 = v16;
  uint64_t v59 = v31 | 7;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v28;
  uint64_t v65 = v15;
  id v33 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  uint64_t v66 = v14;
  v33(v32 + ((v31 + 24) & ~v31), v30, v14);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = sub_10011DA00;
  *(void *)(v34 + 24) = v32;
  uint64_t v61 = v32;
  v86 = sub_100097240;
  uint64_t v87 = v34;
  aBlock = _NSConcreteStackBlock;
  uint64_t v83 = 1107296256;
  v84 = sub_1003B3260;
  v85 = &unk_1008BA1A8;
  uint64_t v35 = _Block_copy(&aBlock);
  uint64_t v36 = v28;
  swift_retain();
  swift_release();
  dispatch_sync(v29, v35);
  _Block_release(v35);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v57 = v36;
  v76 = v33;
  uint64_t isEscapingClosureAtFileLocation = ~v31;
  if (qword_1009070D8 != -1) {
LABEL_9:
  }
    swift_once();
  v56[1] = qword_100942078;
  unint64_t v38 = v63;
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v69 = *(void *)(v69 + 8);
  ((void (*)(char *, uint64_t))v69)(v38, v78);
  v39 = v79;
  uint64_t v40 = v66;
  v58(v79, v80, v66);
  uint64_t v41 = (v31 + 32) & isEscapingClosureAtFileLocation;
  unint64_t v42 = (v60 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = swift_allocObject();
  Swift::String v44 = v57;
  Swift::String v45 = v67;
  *(void *)(v43 + 16) = v57;
  *(void *)(v43 + 24) = v45;
  v76(v43 + v41, v39, v40);
  Swift::String v46 = (void *)(v43 + v42);
  uint64_t v47 = v68;
  *Swift::String v46 = v64;
  v46[1] = v47;
  *(void *)(v43 + ((v42 + 23) & 0xFFFFFFFFFFFFFFF8)) = v62;
  v86 = sub_10011DB78;
  uint64_t v87 = v43;
  aBlock = _NSConcreteStackBlock;
  uint64_t v83 = 1107296256;
  v84 = sub_100236C78;
  v85 = &unk_1008BA1F8;
  Swift::String v48 = _Block_copy(&aBlock);
  Swift::String v49 = v44;
  id v50 = v45;
  swift_retain();
  swift_unknownObjectRetain();
  unint64_t v51 = v70;
  static DispatchQoS.unspecified.getter();
  v81 = _swiftEmptyArrayStorage;
  sub_10011D8CC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  unint64_t v52 = v72;
  uint64_t v53 = v75;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v54 = v77;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v48);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v52, v53);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v51, v73);
  ((void (*)(char *, uint64_t))v69)(v54, v78);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v80, v40);
  swift_release();
  return swift_release();
}

void sub_10010075C(uint64_t a1)
{
  id v1 = objc_retain(*(id *)(a1
                         + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerNotificationCenterByContainerURL));
  URL._bridgeToObjectiveC()(v2);
  id v4 = v3;
  [v1 removeObjectForKey:v3];
}

void sub_1001007CC(char *a1, void *a2, void *a3, void (*a4)(id), uint64_t a5)
{
  uint64_t v73 = a5;
  uint64_t v74 = a4;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  v70 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v68 - v13;
  unsigned __int8 v77 = 1;
  uint64_t v15 = *(NSObject **)&a1[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_accessQueue];
  uint64_t v16 = *(void (**)(char *, void *, void *))(v9 + 16);
  v72 = a3;
  uint64_t v69 = v16;
  ((void (*)(char *, void *, uint64_t, __n128))v16)((char *)&v68 - v13, a3, v8, v12);
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a1;
  uint64_t v20 = *(void (**)(unint64_t, char *, uint64_t))(v9 + 32);
  uint64_t v71 = (void *)v8;
  v20(v19 + v17, v14, v8);
  *(void *)(v19 + v18) = &v77;
  os_log_type_t v21 = (void *)swift_allocObject();
  v21[2] = sub_10011DCF8;
  v21[3] = v19;
  aBlock[4] = sub_100097240;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008BA270;
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = a2;
  id v24 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v15, v22);
  _Block_release(v22);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v22 & 1) == 0)
  {
    id v25 = [self defaultManager];
    id v26 = &unk_100906000;
    if (v77 == 1)
    {
      URL._bridgeToObjectiveC()((NSURL *)v77);
      uint64_t v28 = v27;
      unsigned int v29 = [v25 rem_fileExistsAtURL:v27];

      if (v29)
      {
        URL._bridgeToObjectiveC()(v30);
        uint64_t v32 = v31;
        aBlock[0] = 0;
        unsigned int v33 = [v25 removeItemAtURL:v31 error:aBlock];

        if (!v33)
        {
          id v49 = aBlock[0];
          id v50 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          aBlock[0] = v50;
          sub_100094134((uint64_t *)&unk_10090ABB0);
          sub_1000963CC(0, &qword_10090AFE0);
          swift_dynamicCast();
          unint64_t v51 = (void *)v76;
          if (qword_100906EB8 != -1) {
            swift_once();
          }
          uint64_t v52 = type metadata accessor for Logger();
          sub_10008E2DC(v52, (uint64_t)qword_10090ADC0);
          id v53 = v23;
          id v54 = v51;
          id v55 = v53;
          id v56 = v54;
          id v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v57, v58))
          {
            uint64_t v59 = swift_slowAlloc();
            uint64_t v71 = (void *)swift_slowAlloc();
            v72 = (void *)swift_slowAlloc();
            uint64_t v78 = v72;
            *(_DWORD *)uint64_t v59 = 136315394;
            uint64_t v75 = (uint64_t)v56;
            sub_1000E4F40((unint64_t *)&unk_10090AFE8, &qword_10090AFE0);
            uint64_t v60 = Error.rem_errorDescription.getter();
            uint64_t v75 = sub_1000C51B8(v60, v61, (uint64_t *)&v78);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v59 + 12) = 2112;
            uint64_t v75 = (uint64_t)v55;
            id v62 = v55;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v71 = v55;

            _os_log_impl((void *)&_mh_execute_header, v57, v58, "RDXPCDebugPerformer: Failed to delete isolated container {error: %s, token: %@}", (uint8_t *)v59, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          id v67 = v56;
          v74(v56);

          swift_errorRelease();
          id v26 = (void *)&unk_100906000;
LABEL_16:
          if (v26[471] == -1) {
            goto LABEL_17;
          }
          goto LABEL_23;
        }
        uint64_t v34 = qword_100906EB8;
        id v35 = aBlock[0];
        if (v34 != -1) {
          swift_once();
        }
        uint64_t v36 = type metadata accessor for Logger();
        sub_10008E2DC(v36, (uint64_t)qword_10090ADC0);
        unint64_t v38 = v70;
        unint64_t v37 = v71;
        v69(v70, v72, v71);
        id v39 = v23;
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.default.getter();
        int v42 = v41;
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v43 = swift_slowAlloc();
          Swift::String v44 = (void *)swift_slowAlloc();
          v72 = (void *)swift_slowAlloc();
          aBlock[0] = v72;
          *(_DWORD *)uint64_t v43 = 138412546;
          os_log_t v68 = v40;
          LODWORD(v69) = v42;
          uint64_t v76 = (uint64_t)v39;
          id v45 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *Swift::String v44 = v39;

          id v26 = (void *)&unk_100906000;
          *(_WORD *)(v43 + 12) = 2080;
          Swift::String v46 = v70;
          uint64_t v47 = URL.absoluteString.getter();
          uint64_t v76 = sub_1000C51B8(v47, v48, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void *))(v9 + 8))(v46, v71);
          uint64_t v40 = v68;
          _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v69, "RDXPCDebugPerformer: Destroyed isolated container {token: %@, url: %s}", (uint8_t *)v43, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          (*(void (**)(char *, void *))(v9 + 8))(v38, v37);
        }
      }
    }
    v74(0);

    goto LABEL_16;
  }
  __break(1u);
LABEL_23:
  swift_once();
LABEL_17:
  uint64_t v63 = type metadata accessor for Logger();
  sub_10008E2DC(v63, (uint64_t)qword_10090ADC0);
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "os_transaction RELEASE {name: com.apple.remindd.RDXPCDebugPerformer.destroyIsolatedStoreContainer}", v66, 2u);
    swift_slowDealloc();
  }
  swift_release();
}

void sub_1001010EC(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v47 = a4;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = sub_10008E2DC(v11, (uint64_t)qword_10090ADC0);
  id v13 = a1;
  id v14 = a2;
  id v15 = v13;
  uint64_t v16 = (char *)v14;
  uint64_t v48 = v12;
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  p_class_meths = &OBJC_PROTOCOL___RDStoreControllerMigrator.class_meths;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    id v45 = v10;
    uint64_t v21 = v20;
    uint64_t v22 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 138412546;
    uint64_t v46 = v7;
    uint64_t v50 = (uint64_t)v15;
    uint64_t v43 = a3;
    id v23 = v15;
    uint64_t v44 = v8;
    id v24 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v15;

    *(_WORD *)(v21 + 12) = 2112;
    id v25 = *(void **)&v16[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerByContainerURL];
    uint64_t v50 = (uint64_t)v25;
    id v26 = v25;
    a3 = v43;
    uint64_t v7 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v22[1] = v25;
    uint64_t v8 = v44;

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDXPCDebugPerformer: Request to destroy isolated container {token: %@, storeControllers: %@}", (uint8_t *)v21, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___RDStoreControllerMigrator + 32);
    swift_slowDealloc();
    uint64_t v10 = v45;
    swift_slowDealloc();
  }
  else
  {
  }
  id v27 = *(id *)((char *)p_class_meths[448] + (void)v16);
  URL._bridgeToObjectiveC()(v28);
  unint64_t v30 = v29;
  id v31 = [v27 objectForKey:v29];

  if (v31)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
    id v32 = v15;
    unsigned int v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = v8;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      id v45 = v10;
      unint64_t v38 = (void *)v37;
      uint64_t v48 = swift_slowAlloc();
      uint64_t v49 = (uint64_t)v32;
      uint64_t v50 = v48;
      *(_DWORD *)uint64_t v36 = 138412546;
      uint64_t v46 = v7;
      id v39 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v38 = v32;

      *(_WORD *)(v36 + 12) = 2080;
      uint64_t v40 = v45;
      uint64_t v41 = URL.absoluteString.getter();
      uint64_t v49 = sub_1000C51B8(v41, v42, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v40, v46);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "RDXPCDebugPerformer: Destroying an isolated container that still has live references to it, skipping {token: %@, url: %s}", (uint8_t *)v36, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }

    *uint64_t v47 = 0;
  }
}

void sub_100101670(void (*a1)(void *, void))
{
  id v2 = [self sharedManager];
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  id v4 = [v2 stateString];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = 4013373;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  *(void *)(inited + 32) = v5;
  *(void *)(inited + 40) = v7;
  id v9 = [self sharedManager];
  uint64_t v10 = v9;
  if (v9 && (id v11 = [v9 stateString]) != 0)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v15 = 0;
  }
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_100776E40;
  if (v15) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = 0;
  }
  unint64_t v18 = 0xE000000000000000;
  if (v15) {
    unint64_t v18 = v15;
  }
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v18;
  sub_100201B10(v16);
  uint64_t v19 = sub_1001FFC40(inited);
  swift_bridgeObjectRelease();
  a1(v19, 0);
  swift_bridgeObjectRelease();
}

void sub_1001018EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
    if (a2)
    {
LABEL_3:
      uint64_t v6 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    v5.super.isa = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

void sub_100101988(uint64_t a1, unint64_t a2, void (*a3)(void))
{
  uint64_t v6 = (objc_class *)type metadata accessor for DebugPerformerMockDABabysittableAccount();
  id v7 = (char *)objc_allocWithZone(v6);
  Swift::String v8 = (uint64_t *)&v7[OBJC_IVAR____TtC7reminddP33_A793612D66A4A6A32EDDE79136FC5A3839DebugPerformerMockDABabysittableAccount_accountID];
  *Swift::String v8 = a1;
  v8[1] = a2;
  v19.receiver = v7;
  v19.super_class = v6;
  swift_bridgeObjectRetain();
  id v9 = [super init];
  id v10 = [self sharedBabysitter];
  if (v10)
  {
    id v11 = v10;
    id v12 = v9;
    NSString v13 = String._bridgeToObjectiveC()();
    [v11 registerAccount:v12 forOperationWithName:v13];
  }
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10090ADC0);
  swift_bridgeObjectRetain_n();
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDXPCDebugPerformer: Called registerBabysitter {waiterID: %s}", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  a3(0);
}

uint64_t sub_100101D08(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  id v6 = [self sharedBabysitter];
  if (v6)
  {
    id v7 = v6;
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 giveAccountWithIDAnotherChance:v8];
  }
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_10090ADC0);
  swift_bridgeObjectRetain_n();
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)id v12 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, a2, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: Called resetBabysitter {waiterID: %s}", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return a3(0);
}

void sub_1001020A0(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v40 - v11;
  sub_1000963CC(0, (unint64_t *)&qword_100909B00);
  uint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1) {
    return;
  }
  uint64_t v14 = v13;
  if (!((unint64_t)v13 >> 62))
  {
    unint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15 < 2)
    {
      if (v15) {
        goto LABEL_5;
      }
LABEL_28:
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    id v39 = self;
    NSString v37 = String._bridgeToObjectiveC()();
    id v38 = [v39 internalErrorWithDebugDescription:v37];
    goto LABEL_31;
  }
  if (v13 < 0) {
    unsigned int v33 = (void *)v13;
  }
  else {
    unsigned int v33 = (void *)(v13 & 0xFFFFFFFFFFFFFF8);
  }
  swift_bridgeObjectRetain();
  id v42 = v33;
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v34 > 1) {
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v35) {
    goto LABEL_28;
  }
LABEL_5:
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v16 = *(id *)(v14 + 32);
  }
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  self;
  uint64_t v18 = (void *)swift_dynamicCastObjCClass();
  objc_super v19 = v17;
  if (!v18)
  {

LABEL_29:
    uint64_t v36 = self;
    NSString v37 = String._bridgeToObjectiveC()();
    id v38 = [v36 internalErrorWithDebugDescription:v37];
LABEL_31:
    v38;

    swift_willThrow();
    return;
  }
  uint64_t v20 = v18;
  id v42 = v19;
  if (![v18 markedForDeletion]) {
    goto LABEL_18;
  }
  id v21 = [v20 account];
  if (!v21) {
    goto LABEL_18;
  }
  uint64_t v22 = v21;
  id v41 = [v21 identifier];

  id v23 = v41;
  if (v41)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
  }
  sub_100096408((uint64_t)v9, (uint64_t)v12, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3))
  {
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909E50);
LABEL_18:
    id v24 = self;
    NSString v25 = String._bridgeToObjectiveC()();
    id v26 = [v24 internalErrorWithDebugDescription:v25];
LABEL_19:
    v26;

    swift_willThrow();
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v12, v3);
  sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909E50);
  uint64_t v27 = UUID.uuidString.getter();
  uint64_t v29 = v28;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  id v30 = [v20 newlyCreatedRecord];
  if (!v30)
  {
    swift_bridgeObjectRelease();
    id v32 = self;
    NSString v25 = String._bridgeToObjectiveC()();
    id v26 = [v32 internalErrorWithDebugDescription:v25];
    goto LABEL_19;
  }
  uint64_t v31 = (uint64_t)v30;

  *a1 = v27;
  a1[1] = v29;
  a1[2] = v31;
}

uint64_t sub_100102628(uint64_t a1, uint64_t a2, uint64_t (*a3)(id))
{
  if (!a2) {
    return a3(0);
  }
  uint64_t v4 = self;
  swift_errorRetain();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v5._countAndFlagsBits = Error.rem_errorDescription.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v4 internalErrorWithDebugDescription:v6];

  a3(v7);
  return swift_errorRelease();
}

void sub_100102758(uint64_t a1, void *a2, void *a3)
{
  Swift::String v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_100102A38(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_100094134((uint64_t *)&unk_100917670);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t sub_100102AF0(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t Request = type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(0);
  __chkstk_darwin(Request);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, a2, v12);
  swift_storeEnumTagMultiPayload();
  id v13 = sub_10010AA84();
  type metadata accessor for REMCDManualSortHint();
  uint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();
  if (v4)
  {

    sub_10011C774((uint64_t)v11, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
    uint64_t v15 = v4;
    goto LABEL_15;
  }
  unint64_t v16 = v14;

  sub_10011C774((uint64_t)v11, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
  uint64_t v24 = a4;
  NSString v25 = a3;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v17)
    {
LABEL_5:
      if (v17 < 1) {
        __break(1u);
      }
      uint64_t v18 = 0;
      do
      {
        if ((v16 & 0xC000000000000001) != 0) {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v19 = *(id *)(v16 + 8 * v18 + 32);
        }
        uint64_t v20 = v19;
        ++v18;
        [v19 markForDeletion:v24];
        [v20 updateChangeCount];
      }
      while (v17 != v18);
    }
  }
  swift_bridgeObjectRelease();
  id v26 = 0;
  if ([a1 save:&v26])
  {
    id v21 = v26;
    return ((uint64_t (*)(void))v25)(0);
  }
  id v23 = v26;
  uint64_t v15 = _convertNSErrorToError(_:)();

  swift_willThrow();
  a3 = v25;
LABEL_15:
  swift_errorRetain();
  a3(v15);
  swift_errorRelease();
  return swift_errorRelease();
}

uint64_t sub_1001030CC(void *a1, int a2, int a3, int a4, void *aBlock, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  _Block_copy(v8);
  id v15 = a1;
  a6(v9, v11, v12, v14, v15, v8);
  _Block_release(v8);
  _Block_release(v8);

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10010336C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v38 = a3;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v36 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Request = type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(0);
  __chkstk_darwin(Request);
  id v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v15, a2, v16);
  swift_storeEnumTagMultiPayload();
  id v17 = sub_10010AA84();
  type metadata accessor for REMCDManualSortHint();
  uint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
  if (v5)
  {

    sub_10011C774((uint64_t)v15, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
    uint64_t v19 = v5;
    goto LABEL_15;
  }
  v33[1] = 0;
  unint64_t v37 = v18;

  sub_10011C774((uint64_t)v15, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
  unint64_t v20 = v37;
  v33[2] = a5;
  uint64_t v34 = a4;
  id v35 = a1;
  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v20 = v37;
    uint64_t v22 = v36;
    if (v21) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v21 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v22 = v36;
    if (v21)
    {
LABEL_5:
      if (v21 < 1) {
        __break(1u);
      }
      uint64_t v23 = 0;
      unint64_t v24 = v20 & 0xC000000000000001;
      NSString v25 = (void (**)(char *, uint64_t, uint64_t))(v22 + 16);
      id v26 = (void (**)(char *, uint64_t))(v22 + 8);
      do
      {
        if (v24) {
          id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v27 = *(id *)(v20 + 8 * v23 + 32);
        }
        uint64_t v28 = v27;
        ++v23;
        (*v25)(v12, v38, v10);
        Date.timeIntervalSinceReferenceDate.getter();
        [v28 setLastAccessedSinceReferenceDate:Int32.init(timeIntervalSinceReferenceDate:)(v29)];
        (*v26)(v12, v10);
        [v28 updateChangeCount];

        unint64_t v20 = v37;
      }
      while (v21 != v23);
    }
  }
  swift_bridgeObjectRelease();
  id v39 = 0;
  if ([v35 save:&v39])
  {
    id v30 = v39;
    return ((uint64_t (*)(void))v34)(0);
  }
  id v32 = v39;
  uint64_t v19 = _convertNSErrorToError(_:)();

  swift_willThrow();
  a4 = v34;
LABEL_15:
  swift_errorRetain();
  a4(v19);
  swift_errorRelease();
  return swift_errorRelease();
}

void sub_100103900()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090AFA0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_manualHashtagLabelUpdater;
  if (!*(void *)(v0 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_manualHashtagLabelUpdater))
  {
    uint64_t v7 = v0 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v9 = Strong;
      os_log_t v25 = *(os_log_t *)(v7 + 8);
      uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeContainerToken);
      type metadata accessor for DebugPerformerManualHashtagLabelUpdaterDelegate();
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v10;
      sub_1000963CC(0, (unint64_t *)&qword_10090F370);
      id v12 = v10;
      unint64_t v24 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v13 = *(void **)(v1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
      uint64_t v14 = qword_100906FB8;
      swift_retain();
      id v15 = v13;
      swift_unknownObjectRetain();
      if (v14 != -1) {
        swift_once();
      }
      uint64_t v16 = sub_10008E2DC(v2, (uint64_t)qword_100942000);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v16, v2);
      type metadata accessor for RDHashtagLabelUpdater(0);
      swift_allocObject();
      id v17 = v24;
      uint64_t v18 = sub_100198B3C(v24, v15, v9, (uint64_t)v25, (uint64_t)v5, v11, (uint64_t)&off_1008B9BE0);

      swift_unknownObjectRelease();
      swift_release();
      uint64_t v19 = swift_retain();
      sub_100118D60(v19);
      swift_release();
      *(void *)(v1 + v6) = v18;
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      if (qword_100906EB8 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_10090ADC0);
      os_log_t v25 = (os_log_t)Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v21, "RDXPCDebugPerformer: Failed to set up manual hashtag label updater; missing xpcDaemon",
          v22,
          2u);
        swift_slowDealloc();
      }
      os_log_t v23 = v25;
    }
  }
}

void sub_100103C80()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_manualHashtagLabelUpdater))
  {
    uint64_t v1 = swift_retain();
    sub_100118F08(v1);
    swift_release();
  }
  else
  {
    if (qword_100906EB8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_10090ADC0);
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "RDXPCDebugPerformer: Failed to refresh hashtag labels; missing manualHashtagLabelUpdater",
        v4,
        2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100103DA8()
{
  uint64_t v0 = sub_100183030();
  sub_100183720((unint64_t)v0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100103E34()
{
  v2[0] = 0xD000000000000036;
  v2[1] = 0x80000001007CA270;
  v2[3] = 0;
  v3[0] = 0;
  v2[2] = 0;
  *(void *)((char *)v3 + 6) = 0;
  return sub_1003B5ADC((uint64_t)v2, (uint64_t)sub_10011C68C, (uint64_t)&v1);
}

void sub_100104070(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = Strong;
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t v9 = (objc_class *)type metadata accessor for RDDaemonController();
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    sub_10010B544(a3);
    id v11 = sub_10054145C(v7, a3, 0, v9, ObjectType, v8);
    id v12 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:v11];
    type metadata accessor for RDTemplateOperationQueue();
    sub_1005750FC(a1, v12);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v13 = self;
    NSString v14 = String._bridgeToObjectiveC()();
    [v13 internalErrorWithDebugDescription:v14];

    swift_willThrow();
  }
}

void sub_100104218(double a1)
{
  v23[0] = 0xD000000000000035;
  v23[1] = 0x80000001007CA210;
  v23[3] = 0;
  v24[0] = 0;
  v23[2] = 0;
  *(void *)((char *)v24 + 6) = 0;
  uint64_t v3 = v1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = (objc_class *)type metadata accessor for RDDaemonController();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = swift_unknownObjectRetain();
    id v8 = sub_10054145C(v7, (uint64_t)v23, 0, v5, ObjectType, v4);
    id v9 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:v8];
    uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
    sub_100696CF4();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v21 = [v10 newBackgroundContextWithAuthor:v11];

    type metadata accessor for RDGroceryOperationQueue();
    sub_1005EB180(v21, v9, a1);
    swift_unknownObjectRelease();
  }
  else
  {
    id v12 = self;
    NSString v13 = String._bridgeToObjectiveC()();
    id v14 = [v12 internalErrorWithDebugDescription:v13];

    swift_willThrow();
    if (qword_100906EB8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10090ADC0);
    id v21 = v14;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_getErrorValue();
      uint64_t v19 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDXPCDebugPerformer: Failed to handle incomplete grocery operation queue items {error: %s}", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
}

uint64_t sub_1001045F0(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for RDPublicCloudDatabaseControllerMock();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = [self cancelledError];
  *(unsigned char *)(v9 + 56) = 1;
  uint64_t v10 = self;
  id v11 = a2;
  id v12 = a3;
  swift_retain();
  id v13 = [v10 sharedConfiguration];
  [v13 templatePublicLinkTTL];
  uint64_t v15 = v14;

  uint64_t v25 = v8;
  id v26 = &off_1008BBB60;
  *(void *)&long long v24 = v9;
  type metadata accessor for RDTemplateOperationCreateOrUpdateTemplatePublicLink();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v11;
  *(void *)(v16 + 24) = v12;
  sub_1000967D4(&v24, v16 + 32);
  *(unsigned char *)(v16 + 72) = 1;
  *(void *)(v16 + 80) = 1000;
  *(void *)(v16 + 88) = v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  swift_retain();
  id v18 = [v10 sharedConfiguration];
  [v18 templatePublicLinkOperationTimeoutInterval];
  double v20 = v19;

  sub_10059C6D4(a1, (void (*)(uint64_t, uint64_t))sub_10011C658, v17, v20);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100104870(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for RDPublicCloudDatabaseControllerMock();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = [self cancelledError];
  *(unsigned char *)(v9 + 56) = 1;
  uint64_t v19 = v8;
  double v20 = &off_1008BBB60;
  *(void *)&long long v18 = v9;
  type metadata accessor for RDTemplateOperationRevokeTemplatePublicLink();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a2;
  sub_1000967D4(&v18, inited + 24);
  *(unsigned char *)(inited + 64) = 1;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a4;
  id v12 = self;
  id v13 = a2;
  swift_retain();
  swift_retain();
  id v14 = [v12 sharedConfiguration];
  [v14 templatePublicLinkOperationTimeoutInterval];
  double v16 = v15;

  sub_1000CADB8(a1, (void (*)(void, void))sub_10011C5F8, v11, v16);
  swift_release();
  swift_setDeallocating();

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(inited + 24);
  return swift_release();
}

uint64_t sub_100104A18(void *a1, char a2, void (*a3)(void *, void *), uint64_t a4, uint64_t (*a5)(void *, void))
{
  if (a2)
  {
    swift_errorRetain();
    uint64_t v8 = 0;
    uint64_t v9 = a1;
  }
  else
  {
    id v10 = a1;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  a3(v8, v9);

  return a5(a1, a2 & 1);
}

unint64_t sub_100104ABC()
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
  uint64_t v0 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v0;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000021;
}

unint64_t sub_100104BAC()
{
  return sub_100104ABC();
}

uint64_t sub_100104BB4(void *a1, unint64_t a2, uint64_t a3, id *a4, void (*a5)(uint64_t), uint64_t a6)
{
  v229 = a4;
  uint64_t v235 = a3;
  uint64_t v10 = sub_100094134(&qword_10090AF68);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)v213 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  double v15 = (char *)v213 - v14;
  uint64_t v228 = type metadata accessor for URL();
  v239 = *(void (***)(char *, uint64_t))(v228 - 8);
  __chkstk_darwin(v228);
  v225 = (char *)v213 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v234 = (char *)v213 - v18;
  __chkstk_darwin(v19);
  v233 = (char *)v213 - v20;
  uint64_t v21 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v21 - 8);
  v238 = (char *)v213 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v242 = (uint64_t)v213 - v24;
  __chkstk_darwin(v25);
  v244 = (char *)v213 - v26;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v247 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  v230 = (char *)v213 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v223 = (char *)v213 - v30;
  __chkstk_darwin(v31);
  v232 = (char *)v213 - v32;
  __chkstk_darwin(v33);
  v241 = (char *)v213 - v34;
  __chkstk_darwin(v35);
  v245 = (char *)v213 - v36;
  __chkstk_darwin(v37);
  id v39 = (char *)v213 - v38;
  v222 = a5;
  uint64_t v221 = a6;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v40 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v41 = _swiftEmptyArrayStorage;
  uint64_t v248 = v27;
  v237 = a1;
  v231 = v15;
  if (v40)
  {
    v250 = _swiftEmptyArrayStorage;
    sub_1001DE148(0, v40 & ~(v40 >> 63), 0);
    if (v40 < 0)
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
    }
    v227 = v12;
    uint64_t v42 = 0;
    id v41 = v250;
    unint64_t v43 = a2 & 0xC000000000000001;
    unint64_t v44 = a2;
    do
    {
      if (v43) {
        id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v45 = *(id *)(a2 + 8 * v42 + 32);
      }
      uint64_t v46 = v45;
      id v47 = [v45 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v250 = v41;
      unint64_t v49 = v41[2];
      unint64_t v48 = v41[3];
      if (v49 >= v48 >> 1)
      {
        sub_1001DE148(v48 > 1, v49 + 1, 1);
        id v41 = v250;
      }
      ++v42;
      v41[2] = v49 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v247 + 32))((unint64_t)v41+ ((*(unsigned __int8 *)(v247 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v247 + 80))+ *(void *)(v247 + 72) * v49, v39, v248);
      a2 = v44;
    }
    while (v40 != v42);
    uint64_t v27 = v248;
    a1 = v237;
    id v12 = v227;
  }
  uint64_t v50 = v246;
  unint64_t v51 = sub_100119458(v41);
  if (v50) {
    return swift_bridgeObjectRelease();
  }
  id v53 = v51;
  uint64_t v236 = 0;
  swift_bridgeObjectRelease();
  id v54 = (void (*)(void *@<X8>))v53[2];
  if (v54)
  {
    v227 = v12;
    v224 = 0;
    uint64_t v214 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController;
    v213[1] = v53;
    uint64_t v55 = (uint64_t)(v53 + 4);
    v246 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v247 + 48);
    v243 = (char *)(v247 + 32);
    v240 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v247 + 56);
    v220 = v239 + 1;
    v216 = (void (**)(uint64_t, char *, uint64_t))(v247 + 16);
    v239 = (void (**)(char *, uint64_t))(v247 + 8);
    id v56 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_100096838(v55, (uint64_t)&v250);
      uint64_t v60 = v251;
      uint64_t v61 = v252;
      sub_1000C0DE0(&v250, v251);
      uint64_t v62 = v60;
      uint64_t v63 = (uint64_t)v244;
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v61);
      uint64_t v64 = *v246;
      if ((*v246)(v63, 1, v27) == 1)
      {
        sub_1000966BC(v63, (uint64_t *)&unk_100909E50);
        if (qword_100906EB8 != -1) {
          swift_once();
        }
        uint64_t v65 = type metadata accessor for Logger();
        sub_10008E2DC(v65, (uint64_t)qword_10090ADC0);
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          os_log_t v68 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_t v68 = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get identifier from attachment", v68, 2u);
          swift_slowDealloc();
        }

        uint64_t v69 = v251;
        uint64_t v70 = v252;
        sub_1000C0DE0(&v250, v251);
        uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 56))(v69, v70);
        uint64_t v73 = v72;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v56 = sub_100308F88(0, v56[2] + 1, 1, v56);
        }
        unint64_t v75 = v56[2];
        unint64_t v74 = v56[3];
        if (v75 >= v74 >> 1) {
          id v56 = sub_100308F88((void *)(v74 > 1), v75 + 1, 1, v56);
        }
        void v56[2] = v75 + 1;
        uint64_t v76 = &v56[2 * v75];
        v76[4] = v71;
        v76[5] = v73;
      }
      else
      {
        unsigned __int8 v77 = *(void (**)(char *, uint64_t, uint64_t))v243;
        (*(void (**)(char *, uint64_t, uint64_t))v243)(v245, v63, v27);
        uint64_t v78 = v251;
        uint64_t v79 = v252;
        sub_1000C0DE0(&v250, v251);
        v80 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v79 + 48))(v78, v79);
        if (!v80)
        {
          uint64_t v85 = v242;
          (*v240)(v242, 1, 1, v27);
LABEL_35:
          sub_1000966BC(v85, (uint64_t *)&unk_100909E50);
          if (qword_100906EB8 != -1) {
            swift_once();
          }
          uint64_t v87 = type metadata accessor for Logger();
          sub_10008E2DC(v87, (uint64_t)qword_10090ADC0);
          v88 = Logger.logObject.getter();
          os_log_type_t v89 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v88, v89))
          {
            v90 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v90 = 0;
            _os_log_impl((void *)&_mh_execute_header, v88, v89, "RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get account from attachment", v90, 2u);
            swift_slowDealloc();
          }

          uint64_t v91 = v251;
          uint64_t v92 = v252;
          sub_1000C0DE0(&v250, v251);
          uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 56))(v91, v92);
          uint64_t v95 = v94;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v56 = sub_100308F88(0, v56[2] + 1, 1, v56);
          }
          unint64_t v97 = v56[2];
          unint64_t v96 = v56[3];
          if (v97 >= v96 >> 1) {
            id v56 = sub_100308F88((void *)(v96 > 1), v97 + 1, 1, v56);
          }
          void v56[2] = v97 + 1;
          v98 = &v56[2 * v97];
          v98[4] = v93;
          v98[5] = v95;
          (*v239)(v245, v27);
          goto LABEL_18;
        }
        v81 = v80;
        id v82 = [v80 identifier];

        if (v82)
        {
          uint64_t v83 = v238;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v84 = 0;
        }
        else
        {
          uint64_t v84 = 1;
          uint64_t v83 = v238;
        }
        (*v240)((uint64_t)v83, v84, 1, v27);
        uint64_t v86 = (uint64_t)v83;
        uint64_t v85 = v242;
        sub_100096408(v86, v242, (uint64_t *)&unk_100909E50);
        if (v64(v85, 1, v27) == 1) {
          goto LABEL_35;
        }
        v77(v241, v85, v27);
        uint64_t v99 = v251;
        uint64_t v100 = v252;
        sub_1000C0DE0(&v250, v251);
        uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 16))(v99, v100);
        if (!v102)
        {
          if (qword_100906EB8 != -1) {
            swift_once();
          }
          uint64_t v152 = type metadata accessor for Logger();
          sub_10008E2DC(v152, (uint64_t)qword_10090ADC0);
          v153 = Logger.logObject.getter();
          os_log_type_t v154 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v153, v154))
          {
            v155 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v155 = 0;
            v156 = v153;
            os_log_type_t v157 = v154;
            v158 = "RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get fileName from attachment";
            goto LABEL_60;
          }
LABEL_61:

          uint64_t v161 = v251;
          uint64_t v162 = v252;
          sub_1000C0DE0(&v250, v251);
          uint64_t v163 = (*(uint64_t (**)(uint64_t, uint64_t))(v162 + 56))(v161, v162);
          uint64_t v165 = v164;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v56 = sub_100308F88(0, v56[2] + 1, 1, v56);
          }
          unint64_t v167 = v56[2];
          unint64_t v166 = v56[3];
          if (v167 >= v166 >> 1) {
            id v56 = sub_100308F88((void *)(v166 > 1), v167 + 1, 1, v56);
          }
          void v56[2] = v167 + 1;
          v168 = &v56[2 * v167];
          v168[4] = v163;
          v168[5] = v165;
          v169 = *v239;
          (*v239)(v241, v27);
          v169(v245, v27);
          goto LABEL_18;
        }
        v226 = (void (*)(char *, uint64_t))v101;
        uint64_t v103 = v251;
        uint64_t v104 = v252;
        sub_1000C0DE0(&v250, v251);
        uint64_t v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 24))(v103, v104);
        if (!v106)
        {
          swift_bridgeObjectRelease();
          if (qword_100906EB8 != -1) {
            swift_once();
          }
          uint64_t v159 = type metadata accessor for Logger();
          sub_10008E2DC(v159, (uint64_t)qword_10090ADC0);
          v153 = Logger.logObject.getter();
          os_log_type_t v160 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v153, v160))
          {
            v155 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v155 = 0;
            v156 = v153;
            os_log_type_t v157 = v160;
            v158 = "RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get sha512Sum from attachment";
LABEL_60:
            _os_log_impl((void *)&_mh_execute_header, v156, v157, v158, v155, 2u);
            swift_slowDealloc();
          }
          goto LABEL_61;
        }
        Swift::Int v107 = v106;
        id v219 = *(id *)(v235 + v214);
        id v108 = v219;
        Swift::Int v109 = v105;
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        Class v110 = UUID._bridgeToObjectiveC()().super.isa;
        NSString v111 = String._bridgeToObjectiveC()();
        Swift::Int v215 = v109;
        Swift::Int v217 = v107;
        NSString v112 = String._bridgeToObjectiveC()();
        v113 = v108;
        Class v114 = isa;
        id v115 = [v113 URLForAttachmentFile:isa accountID:v110 fileName:v111 sha512Sum:v112];

        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        Class v116 = UUID._bridgeToObjectiveC()().super.isa;
        Class v117 = UUID._bridgeToObjectiveC()().super.isa;
        NSString v118 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v119 = [v219 URLForAttachmentFile:v116 accountID:v117 fileName:v118 sha512Sum:0];

        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        v120 = self;
        id v121 = [v120 defaultManager];
        v122 = v225;
        URL.deletingLastPathComponent()();
        URL._bridgeToObjectiveC()(v123);
        v125 = v124;
        v226 = *v220;
        v226(v122, v228);
        id v249 = 0;
        LOBYTE(v118) = [v121 createDirectoryAtURL:v125 withIntermediateDirectories:1 attributes:0 error:&v249];

        id v126 = v249;
        if ((v118 & 1) == 0)
        {
          v206 = v126;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)();

          swift_willThrow();
          uint64_t v207 = v228;
          v208 = v226;
          v226(v234, v228);
          v209 = v233;
LABEL_112:
          v208(v209, v207);
          v211 = *v239;
          uint64_t v212 = v248;
          (*v239)(v241, v248);
          v211(v245, v212);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v250);
          v179 = v224;
          return sub_100096314((uint64_t)v179);
        }
        id v127 = [v120 defaultManager];
        v128 = v233;
        URL._bridgeToObjectiveC()(&var18);
        v130 = v129;
        URL._bridgeToObjectiveC()((NSURL *)&var18._urlString);
        v132 = v131;
        id v249 = 0;
        unsigned int v133 = [v127 copyItemAtURL:v130 toURL:v131 error:&v249];

        id v134 = v249;
        if (!v133)
        {
          id v210 = v249;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)();

          swift_willThrow();
          uint64_t v207 = v228;
          v208 = v226;
          v226(v234, v228);
          v209 = v128;
          goto LABEL_112;
        }
        uint64_t v135 = v251;
        uint64_t v136 = v252;
        sub_100096204((uint64_t)&v250, v251);
        v137 = *(void (**)(void, void, uint64_t, uint64_t))(v136 + 32);
        id v138 = v134;
        v137(0, 0, v135, v136);
        v139 = *v216;
        uint64_t v140 = (uint64_t)v232;
        (*v216)((uint64_t)v232, v241, v248);
        sub_100096314((uint64_t)v224);
        v141 = v229;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        id v249 = *v141;
        v143 = v249;
        id *v141 = (id)0x8000000000000000;
        unint64_t v145 = sub_100306EC4(v140);
        uint64_t v146 = v143[2];
        BOOL v147 = (v144 & 1) == 0;
        uint64_t v148 = v146 + v147;
        if (__OFADD__(v146, v147)) {
          goto LABEL_116;
        }
        char v149 = v144;
        if (v143[3] >= v148)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100319644();
            v143 = v249;
          }
        }
        else
        {
          sub_100310674(v148, isUniquelyReferenced_nonNull_native);
          v143 = v249;
          unint64_t v150 = sub_100306EC4((uint64_t)v232);
          if ((v149 & 1) != (v151 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v145 = v150;
        }
        uint64_t v27 = v248;
        v170 = v229;
        id *v229 = v143;
        swift_bridgeObjectRelease();
        v171 = *v170;
        swift_bridgeObjectRetain();
        if ((v149 & 1) == 0)
        {
          uint64_t v172 = (uint64_t)v223;
          v139((uint64_t)v223, v232, v27);
          sub_1002C8178(v145, v172, (uint64_t)&_swiftEmptySetSingleton, v171);
        }
        swift_bridgeObjectRelease();
        sub_10031DC68((Swift::Int *)&v249, v215, v217);
        swift_bridgeObjectRelease();
        id v57 = *v239;
        (*v239)(v232, v27);
        uint64_t v58 = v228;
        uint64_t v59 = v226;
        v226(v234, v228);
        v59(v233, v58);
        v57(v241, v27);
        v57(v245, v27);
        v224 = sub_1000D82A8;
      }
LABEL_18:
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v250);
      v55 += 40;
      id v54 = (void (*)(void *@<X8>))((char *)v54 - 1);
      if (!v54)
      {
        swift_bridgeObjectRelease();
        a1 = v237;
        id v12 = v227;
        id v54 = v224;
        goto LABEL_72;
      }
    }
  }
  swift_bridgeObjectRelease();
  id v56 = _swiftEmptyArrayStorage;
LABEL_72:
  v250 = 0;
  unsigned __int8 v173 = [a1 save:&v250];
  id v174 = v250;
  if (v173)
  {
    if (v56[2])
    {
      sub_10011C52C();
      uint64_t v175 = swift_allocError();
      void *v176 = v56;
      id v177 = v174;
      v222(v175);
      swift_errorRelease();
LABEL_107:
      v179 = v54;
    }
    else
    {
      v224 = v54;
      v180 = v250;
      swift_bridgeObjectRelease();
      v181 = (char *)*v229;
      uint64_t v182 = *((void *)*v229 + 8);
      uint64_t v242 = (uint64_t)*v229 + 64;
      uint64_t v183 = 1 << v181[32];
      uint64_t v184 = -1;
      if (v183 < 64) {
        uint64_t v184 = ~(-1 << v183);
      }
      unint64_t v185 = v184 & v182;
      v243 = (char *)((unint64_t)(v183 + 63) >> 6);
      v244 = (char *)(v247 + 16);
      v186 = (void (**)(char *, uint64_t, uint64_t))(v247 + 32);
      v245 = v181;
      v246 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v247 + 8);
      v241 = v243 - 1;
      swift_bridgeObjectRetain();
      uint64_t v187 = 0;
      if (!v185) {
        goto LABEL_81;
      }
LABEL_79:
      unint64_t v188 = __clz(__rbit64(v185));
      v185 &= v185 - 1;
      unint64_t v189 = v188 | (v187 << 6);
LABEL_80:
      v190 = v245;
      (*(void (**)(char *, unint64_t, uint64_t))(v247 + 16))(v12, *((void *)v245 + 6) + *(void *)(v247 + 72) * v189, v248);
      uint64_t v191 = *((void *)v190 + 7);
      uint64_t v192 = sub_100094134(&qword_10090AF78);
      *(void *)&v12[*(int *)(v192 + 48)] = *(void *)(v191 + 8 * v189);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v192 - 8) + 56))(v12, 0, 1, v192);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v196 = (uint64_t)v231;
        sub_100096408((uint64_t)v12, (uint64_t)v231, &qword_10090AF68);
        uint64_t v197 = sub_100094134(&qword_10090AF78);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v197 - 8) + 48))(v196, 1, v197) == 1)
        {
          swift_release();
          v222(0);
          id v54 = v224;
          goto LABEL_107;
        }
        v198 = v12;
        v199 = *(unint64_t **)(v196 + *(int *)(v197 + 48));
        uint64_t v200 = (uint64_t)v230;
        uint64_t v201 = v196;
        uint64_t v202 = v248;
        (*v186)(v230, v201, v248);
        uint64_t v204 = v236;
        sub_1001063A0(v235, v200, (uint64_t)v237, v199);
        uint64_t v236 = v204;
        if (v204) {
          break;
        }
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, uint64_t))*v246)(v200, v202);
        id v12 = v198;
        if (v185) {
          goto LABEL_79;
        }
LABEL_81:
        uint64_t v193 = v187 + 1;
        if (__OFADD__(v187, 1)) {
          goto LABEL_115;
        }
        if (v193 < (uint64_t)v243)
        {
          unint64_t v194 = *(void *)(v242 + 8 * v193);
          if (v194) {
            goto LABEL_84;
          }
          v187 += 2;
          if (v193 + 1 >= (uint64_t)v243)
          {
            uint64_t v187 = v193;
          }
          else
          {
            unint64_t v194 = *(void *)(v242 + 8 * v187);
            if (v194)
            {
              ++v193;
LABEL_84:
              unint64_t v185 = (v194 - 1) & v194;
              unint64_t v189 = __clz(__rbit64(v194)) + (v193 << 6);
              uint64_t v187 = v193;
              goto LABEL_80;
            }
            if (v193 + 2 < (uint64_t)v243)
            {
              unint64_t v194 = *(void *)(v242 + 8 * (v193 + 2));
              if (v194)
              {
                v193 += 2;
                goto LABEL_84;
              }
              uint64_t v205 = v193 + 3;
              if (v193 + 3 >= (uint64_t)v243)
              {
                uint64_t v187 = v193 + 2;
              }
              else
              {
                unint64_t v194 = *(void *)(v242 + 8 * v205);
                if (v194)
                {
                  v193 += 3;
                  goto LABEL_84;
                }
                while (1)
                {
                  uint64_t v193 = v205 + 1;
                  if (__OFADD__(v205, 1)) {
                    goto LABEL_117;
                  }
                  if (v193 >= (uint64_t)v243) {
                    break;
                  }
                  unint64_t v194 = *(void *)(v242 + 8 * v193);
                  ++v205;
                  if (v194) {
                    goto LABEL_84;
                  }
                }
                uint64_t v187 = (uint64_t)v241;
              }
            }
          }
        }
        uint64_t v195 = sub_100094134(&qword_10090AF78);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v195 - 8) + 56))(v12, 1, 1, v195);
        unint64_t v185 = 0;
      }
      swift_bridgeObjectRelease();
      swift_release();
      ((void (*)(uint64_t, uint64_t))*v246)(v200, v202);
      v179 = v224;
    }
  }
  else
  {
    v178 = v250;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v179 = v54;
  }
  return sub_100096314((uint64_t)v179);
}

unint64_t *sub_1001063A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v71 = a1;
  uint64_t v72 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (unint64_t *)sub_100119894(a2, a3);
  if (!v4)
  {
    os_log_type_t v67 = v14;
    uint64_t v68 = v11;
    uint64_t v69 = v10;
    uint64_t v70 = v7;
    uint64_t v73 = result;
    sub_100094134(&qword_10090AF80);
    sub_1000967F4(&qword_10090AF88, &qword_10090AF80);
    uint64_t v16 = Sequence.compactMapToSet<A>(_:)();
    swift_bridgeObjectRelease();
    unint64_t v17 = *(void *)(v16 + 16);
    uint64_t v18 = (uint64_t)v72;
    unint64_t v19 = v72[2];
    uint64_t v60 = 0;
    if (v17 <= v19 >> 3)
    {
      uint64_t v73 = v72;
      swift_bridgeObjectRetain();
      sub_10065A5FC(v16);
      swift_bridgeObjectRelease();
      uint64_t v20 = v73;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_10023CBC4(v16, v18);
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = v8;
    int64_t v23 = 0;
    unint64_t v24 = v20[7];
    uint64_t v61 = v20 + 7;
    uint64_t v25 = 1 << *((unsigned char *)v20 + 32);
    uint64_t v26 = -1;
    if (v25 < 64) {
      uint64_t v26 = ~(-1 << v25);
    }
    unint64_t v27 = v26 & v24;
    uint64_t v64 = (void (**)(char *, uint64_t))(v22 + 8);
    uint64_t v65 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController;
    int64_t v62 = (unint64_t)(v25 + 63) >> 6;
    uint64_t v63 = (void (**)(char *, uint64_t))(v12 + 8);
    *(void *)&long long v21 = 136315394;
    long long v58 = v21;
    v57[1] = (char *)&type metadata for Any + 8;
    uint64_t v28 = v69;
    uint64_t v29 = v70;
    uint64_t v59 = a2;
    uint64_t v66 = v20;
    while (1)
    {
      if (v27)
      {
        uint64_t v72 = (unint64_t *)((v27 - 1) & v27);
        unint64_t v32 = __clz(__rbit64(v27)) | (v23 << 6);
      }
      else
      {
        if (__OFADD__(v23++, 1))
        {
          __break(1u);
          goto LABEL_37;
        }
        if (v23 >= v62) {
          return (unint64_t *)swift_release();
        }
        unint64_t v34 = v61[v23];
        if (!v34)
        {
          int64_t v35 = v23 + 1;
          if (v23 + 1 >= v62) {
            return (unint64_t *)swift_release();
          }
          unint64_t v34 = v61[v35];
          if (!v34)
          {
            int64_t v35 = v23 + 2;
            if (v23 + 2 >= v62) {
              return (unint64_t *)swift_release();
            }
            unint64_t v34 = v61[v35];
            if (!v34)
            {
              int64_t v35 = v23 + 3;
              if (v23 + 3 >= v62) {
                return (unint64_t *)swift_release();
              }
              unint64_t v34 = v61[v35];
              if (!v34)
              {
                while (1)
                {
                  int64_t v23 = v35 + 1;
                  if (__OFADD__(v35, 1)) {
                    break;
                  }
                  if (v23 >= v62) {
                    return (unint64_t *)swift_release();
                  }
                  unint64_t v34 = v61[v23];
                  ++v35;
                  if (v34) {
                    goto LABEL_22;
                  }
                }
LABEL_37:
                __break(1u);
              }
            }
          }
          int64_t v23 = v35;
        }
LABEL_22:
        uint64_t v72 = (unint64_t *)((v34 - 1) & v34);
        unint64_t v32 = __clz(__rbit64(v34)) + (v23 << 6);
      }
      uint64_t v36 = (uint64_t *)(v20[6] + 16 * v32);
      uint64_t v38 = *v36;
      unint64_t v37 = v36[1];
      id v39 = *(void **)(v71 + v65);
      swift_bridgeObjectRetain();
      UUID.init()();
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*v64)(v28, v29);
      Class v41 = UUID._bridgeToObjectiveC()().super.isa;
      NSString v42 = String._bridgeToObjectiveC()();
      NSString v43 = String._bridgeToObjectiveC()();
      id v44 = [v39 URLForAttachmentFile:isa accountID:v41 fileName:v42 sha512Sum:v43];

      id v45 = v67;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      id v46 = [self defaultManager];
      URL._bridgeToObjectiveC()(v47);
      unint64_t v49 = v48;
      uint64_t v73 = 0;
      LODWORD(isa) = [v46 removeItemAtURL:v48 error:&v73];

      if (isa)
      {
        uint64_t v30 = *v63;
        uint64_t v31 = v73;
        v30(v45, v68);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v50 = v73;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        (*v63)(v45, v68);
        if (qword_100906EB8 != -1) {
          swift_once();
        }
        uint64_t v51 = type metadata accessor for Logger();
        sub_10008E2DC(v51, (uint64_t)qword_10090ADC0);
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v54 = swift_slowAlloc();
          uint64_t v73 = (unint64_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = v58;
          swift_bridgeObjectRetain();
          *(void *)(v54 + 4) = sub_1000C51B8(v38, v37, (uint64_t *)&v73);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v54 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v55 = Error.rem_errorDescription.getter();
          *(void *)(v54 + 14) = sub_1000C51B8(v55, v56, (uint64_t *)&v73);
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "REMXPCDebugPerformer.synchronous_revertImageAttachments could not clean up file { sha512Sum: %s, error: %s }", (uint8_t *)v54, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_bridgeObjectRelease_n();
          swift_errorRelease();
          swift_errorRelease();
        }
        uint64_t v60 = 0;
      }
      uint64_t v28 = v69;
      uint64_t v29 = v70;
      uint64_t v20 = v66;
      unint64_t v27 = (unint64_t)v72;
    }
  }
  return result;
}

uint64_t sub_100106AE4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_1000C0DE0(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

void sub_100106C64(void *a1, int a2, char a3, void *aBlock, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = _Block_copy(aBlock);
  _Block_copy(v14);
  id v15 = a1;
  sub_100119D64(a3, (uint64_t)v15, (uint64_t)v14, a5, a6, a7, a8);
  _Block_release(v14);
  _Block_release(v14);
}

void sub_100106D4C(void *a1, int a2, char a3, void *aBlock, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = _Block_copy(aBlock);
  _Block_copy(v14);
  id v15 = a1;
  sub_100119FE8(a3, (uint64_t)v15, (uint64_t)v14, a5, a6, a7, a8);
  _Block_release(v14);
  _Block_release(v14);
}

void sub_100106DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

void sub_100106F30(void *a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  id v6 = [self cdEntityName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = objc_allocWithZone((Class)REMObjectID);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithUUID:isa entityName:v9];

  uint64_t v11 = (void *)sub_10022914C(v10, a1);
  if (v3)
  {

    swift_errorRetain();
    a3(_swiftEmptyArrayStorage, v3);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    uint64_t v12 = v11;
    if (v11)
    {
      id v13 = [v11 orderedIdentifiers];

      uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      a3((void *)v14, 0);

      swift_bridgeObjectRelease();
    }
    else
    {
      a3(_swiftEmptyArrayStorage, 0);
    }
  }
}

uint64_t sub_1001070F0(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  id v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = sub_10011A6A0((uint64_t)v7);
  if (v3)
  {
    sub_10011C774((uint64_t)v7, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
    swift_errorRetain();
    a3(_swiftEmptyArrayStorage, v3);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    unint64_t v10 = v8;
    sub_10011C774((uint64_t)v7, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
    uint64_t v11 = sub_10011ACD0(v10);
    swift_bridgeObjectRelease();
    a3(v11, 0);
    return swift_bridgeObjectRelease();
  }
}

void sub_100107258(void *a1, void *a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v45 = a5;
  id v46 = a4;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  __chkstk_darwin(v8);
  uint64_t v40 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  Class v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for REMCKSharedEntitySyncActivity();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v17 = [ObjCClassFromMetadata entity];
  id v18 = [objc_allocWithZone((Class)ObjCClassFromMetadata) initWithEntity:v17 insertIntoManagedObjectContext:a1];
  id v19 = a2;
  id v20 = v18;
  id v44 = a1;
  [a1 assignObject:v20 toPersistentStore:v19];

  NSString v21 = [a3 accountIdentifier];
  if (!v21)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v20 setAccountIdentifier:v21];

  id v22 = [a3 activityDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  [v20 setActivityDate:isa];

  id v24 = [a3 activityType];
  if ((unint64_t)v24 >= 4) {
    __int16 v25 = 0;
  }
  else {
    __int16 v25 = (__int16)v24;
  }
  [v20 setActivityTypeRawValue:v25];
  NSString v26 = [a3 authorUserRecordIDString];
  if (!v26)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v20 setAuthorUserRecordIDString:v26];

  id v27 = [a3 ckParentCloudObjectEntityName];
  [v20 setCkParentCloudObjectEntityName:v27];

  id v28 = [a3 ckParentCloudObjectIdentifier];
  [v20 setCkParentCloudObjectIdentifier:v28];

  NSString v29 = [a3 ckIdentifier];
  uint64_t v31 = v41;
  uint64_t v30 = v42;
  if (!v29)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v20 setCkIdentifier:v29];

  NSString v32 = [a3 sharedEntityName];
  if (!v32)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v20 setSharedEntityName:v32];

  Class v33 = (Class)[a3 uuidForChangeTracking];
  if (v33)
  {
    unint64_t v34 = v40;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v35 = v43;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v31, v34, v43);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v31, 0, 1, v35);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v31, 1, v35) == 1)
    {
      Class v33 = 0;
    }
    else
    {
      Class v33 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v35);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v31, 1, 1, v43);
  }
  [v20 setUuidForChangeTracking:v33];

  id v47 = 0;
  if ([v44 save:&v47])
  {
    id v36 = v47;
    v46(0);
  }
  else
  {
    id v37 = v47;
    uint64_t v38 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    v46(v38);
    swift_errorRelease();
    swift_errorRelease();
  }
}

void sub_100107884(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
  _Block_release(v8);
}

void sub_100107930(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_1001079C4(void *a1, uint64_t a2, uint64_t a3, const void *a4, void (*a5)(char *, id, void *))
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  _Block_copy(v12);
  id v13 = a1;
  a5(v11, v13, v12);
  _Block_release(v12);
  _Block_release(v12);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100107B04(void *a1, int a2, int a3, void *aBlock, void (*a5)(uint64_t, uint64_t, id, void *))
{
  id v7 = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  _Block_copy(v7);
  id v11 = a1;
  a5(v8, v10, v11, v7);
  _Block_release(v7);
  _Block_release(v7);

  return swift_bridgeObjectRelease();
}

void sub_100107BA8(void *a1, void *a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v50 = a3;
  uint64_t v51 = a5;
  uint64_t v54 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [a2 entityName:v8];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v12 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v12 initWithEntityName:v13];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100776E40;
  id v16 = [a2 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(v15 + 56) = v6;
  id v17 = sub_1000C1FE8((uint64_t *)(v15 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 32))(v17, v10, v6);
  NSString v18 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v20 = [self predicateWithFormat:v18 argumentArray:isa];

  NSString v21 = v14;
  [v14 setPredicate:v20];

  [v14 setFetchLimit:1];
  sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
  uint64_t v22 = (uint64_t)v53;
  unint64_t v23 = NSManagedObjectContext.fetch<A>(_:)();
  if (v22)
  {
    uint64_t v24 = v22;
LABEL_3:

    swift_errorRetain();
    v52(v24);
    swift_errorRelease();
    swift_errorRelease();
    return;
  }
  unint64_t v25 = v23;
  id v53 = v14;
  uint64_t v26 = v50;
  id v27 = a2;
  uint64_t v49 = v7;
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v28 = &selRef_ckServerChangeTokens;
    if (v34) {
      goto LABEL_6;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v35 = self;
    v55[0] = 0;
    v55[1] = (id)0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    strcpy((char *)v55, "Cannot fetch ");
    HIWORD(v55[1]) = -4864;
    id v36 = [v27 v28[231]];
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v27;
    uint64_t v40 = v39;

    v41._countAndFlagsBits = v37;
    v41._object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = 0xD000000000000018;
    v42._object = (void *)0x80000001007C9DF0;
    String.append(_:)(v42);
    id v43 = [v38 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10011D8CC((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v10, v6);
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v46 = [v35 internalErrorWithDebugDescription:v45];

    id v47 = v46;
    v52((uint64_t)v46);

    goto LABEL_14;
  }
  id v28 = &selRef_ckServerChangeTokens;
  if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v25 & 0xC000000000000001) != 0)
  {
    id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v29 = v26;
  }
  else
  {
    if (!*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    uint64_t v29 = v26;
    id v30 = *(id *)(v25 + 32);
  }
  uint64_t v31 = v54;
  swift_bridgeObjectRelease();
  [v30 setMinimumSupportedVersion:v29];
  v55[0] = 0;
  if (![v31 save:v55])
  {
    id v33 = v55[0];
    uint64_t v24 = _convertNSErrorToError(_:)();

    swift_willThrow();
    NSString v21 = v30;
    goto LABEL_3;
  }
  id v32 = v55[0];
  v52(0);

LABEL_14:
}

void sub_100108220(uint64_t a1, char a2, void (*a3)(uint64_t, void))
{
  NSArray v5 = _swiftEmptyArrayStorage;
  unint64_t v18 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = rem_currentRuntimeVersion();
    uint64_t KeyPath = swift_getKeyPath();
    sub_10039D088(KeyPath, v6);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(v18 + 16) >= *(void *)(v18 + 24) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    NSArray v5 = (void *)v18;
  }
  double v8 = (void *)sub_1002F52FC(v5);
  unint64_t v9 = sub_100747F48();
  swift_getKeyPath();
  unint64_t v18 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  unint64_t v10 = v18;
  swift_bridgeObjectRelease();
  swift_release();
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  id v12 = (void *)sub_1003BC91C(v10, inited, 0, (uint64_t)v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for REMCDDueDateDeltaAlert();
  unint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {
  }
  else
  {
    unint64_t v18 = (unint64_t)_swiftEmptyDictionarySingleton;
    unint64_t v14 = (unint64_t)sub_1000F6D94(v13, (id *)&v18);
    swift_bridgeObjectRelease();
    if ((v14 & 0x8000000000000000) != 0 || (v14 & 0x4000000000000000) != 0)
    {
      unint64_t v16 = swift_bridgeObjectRetain();
      uint64_t v15 = (uint64_t)sub_10020A3F0(v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    uint64_t v17 = v15;
    sub_10010B5D8(&v17, (uint64_t *)&v18);
    swift_bridgeObjectRelease();
    a3(v17, 0);
    swift_release();

    swift_bridgeObjectRelease();
  }
}

void sub_1001084F8(id *a1@<X0>, id *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  *(void *)&double v10 = __chkstk_darwin(v9).n128_u64[0];
  id v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = *a1;
  id v14 = [*a1 account:v10];
  v36[1] = v14;
  sub_100094134((uint64_t *)&unk_10090AF30);
  Optional.tryUnwrap(_:file:line:)();
  uint64_t v15 = v4;

  if (v4) {
    goto LABEL_2;
  }
  uint64_t v31 = a4;
  id v33 = a3;
  id v16 = v36[0];
  uint64_t v17 = self;
  id v18 = [v13 reminderIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v34 = *(void *)(v34 + 8);
  ((void (*)(char *, uint64_t))v34)(v12, v35);
  id v20 = [v17 objectIDWithUUID:isa];

  v36[0] = 0;
  id v21 = [v16 remObjectIDWithError:v36];
  if (!v21)
  {
    id v30 = v36[0];
    uint64_t v15 = _convertNSErrorToError(_:)();

    swift_willThrow();
    a3 = v33;
LABEL_2:
    *a3 = v15;
    return;
  }
  uint64_t v22 = v21;
  id v23 = v36[0];
  id v24 = v20;
  id v32 = v16;
  id v25 = v24;
  id v26 = [v13 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v27 = [v13 sortOrder];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v36[0] = *a2;
  *a2 = (id)0x8000000000000000;
  sub_1002C4A58((uint64_t)v27, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
  *a2 = v36[0];
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t))v34)(v12, v35);
  id v29 = sub_100747480(v13);

  *uint64_t v31 = v29;
}

uint64_t sub_10010884C(void **a1, void **a2, uint64_t *a3)
{
  unint64_t v74 = a3;
  uint64_t v76 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  unint64_t v75 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  double v8 = (char *)&v70 - v7;
  __chkstk_darwin(v9);
  uint64_t v73 = (char *)&v70 - v10;
  __chkstk_darwin(v11);
  uint64_t v72 = (char *)&v70 - v12;
  __chkstk_darwin(v13);
  uint64_t v71 = (char *)&v70 - v14;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v70 - v16;
  id v18 = *a1;
  id v19 = *a2;
  sub_1000963CC(0, (unint64_t *)&qword_10090C120);
  id v20 = [v18 accountID];
  id v21 = [v19 accountID];
  char v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) == 0)
  {
    id v36 = [v18 accountID];
    id v37 = [v36 uuid];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = UUID.uuidString.getter();
    uint64_t v40 = v39;
    Swift::String v41 = *(void (**)(char *, uint64_t))(v77 + 8);
    Swift::String v42 = v8;
    uint64_t v43 = v76;
    v41(v42, v76);
    id v44 = [v19 accountID];
    id v45 = [v44 uuid];

    id v46 = v75;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v47 = UUID.uuidString.getter();
    uint64_t v49 = v48;
    v41(v46, v43);
    if (v38 != v47) {
      goto LABEL_11;
    }
LABEL_9:
    if (v40 == v49)
    {
      swift_bridgeObjectRelease_n();
      char v62 = 0;
      return v62 & 1;
    }
LABEL_11:
    char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v62 & 1;
  }
  uint64_t v23 = v77;
  id v24 = [v18 reminderID];
  id v25 = [v19 reminderID];
  char v26 = static NSObject.== infix(_:_:)();

  id v27 = v19;
  if ((v26 & 1) == 0)
  {
    id v50 = [v18 reminderID];
    id v51 = [v50 uuid];

    uint64_t v52 = v72;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v53 = UUID.uuidString.getter();
    uint64_t v40 = v54;
    uint64_t v55 = *(void (**)(char *, uint64_t))(v23 + 8);
    uint64_t v56 = v76;
    v55(v52, v76);
    id v57 = [v19 reminderID];
    id v58 = [v57 uuid];

    uint64_t v59 = v73;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v60 = UUID.uuidString.getter();
    uint64_t v49 = v61;
    v55(v59, v56);
    if (v53 != v60) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  id v28 = [v18 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v29 = *v74;
  if (*(void *)(*v74 + 16))
  {
    unint64_t v30 = sub_100306EC4((uint64_t)v17);
    uint64_t v31 = v76;
    uint64_t v32 = v23;
    uint64_t v33 = (uint64_t)v71;
    if (v34) {
      uint64_t v35 = *(void *)(*(void *)(v29 + 56) + 8 * v30);
    }
    else {
      uint64_t v35 = 0;
    }
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v31 = v76;
    uint64_t v32 = v23;
    uint64_t v33 = (uint64_t)v71;
  }
  uint64_t v63 = *(void (**)(char *, uint64_t))(v32 + 8);
  v63(v17, v31);
  id v64 = [v27 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v65 = *v74;
  if (*(void *)(*v74 + 16))
  {
    unint64_t v66 = sub_100306EC4(v33);
    if (v67) {
      uint64_t v68 = *(void *)(*(void *)(v65 + 56) + 8 * v66);
    }
    else {
      uint64_t v68 = 0;
    }
  }
  else
  {
    uint64_t v68 = 0;
  }
  v63((char *)v33, v31);
  char v62 = v35 < v68;
  return v62 & 1;
}

void sub_100108DD8(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  double v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a1;
  a5(a3, v9, v8);
  _Block_release(v8);
  _Block_release(v8);
}

void sub_100108E60(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  sub_1000963CC(0, a4);
  v6.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (a2) {
    uint64_t v7 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v6.super.isa);
}

uint64_t sub_100108F00(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void (*a5)(void, uint64_t))
{
  id v8 = sub_10010AA84();
  type metadata accessor for REMCDManualSortHint();
  uint64_t v9 = NSManagedObjectContext.fetch<A>(_:)();
  if (v5)
  {

    swift_errorRetain();
    a5(0, v5);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    unint64_t v11 = v9;

    uint64_t v12 = (uint64_t)[objc_allocWithZone((Class)NSDateFormatter) init];
    NSString v13 = String._bridgeToObjectiveC()();
    [(id)v12 setDateFormat:v13];

    if (v11 >> 62) {
      goto LABEL_23;
    }
    uint64_t v14 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      char v26 = (void *)v12;
      char v22 = (void (*)(void *, void))a5;
      if (!v14) {
        break;
      }
      unint64_t v25 = v11 & 0xC000000000000001;
      uint64_t v15 = _swiftEmptyArrayStorage;
      uint64_t v12 = 4;
      unint64_t v24 = v11;
      int v23 = a3;
      while (1)
      {
        uint64_t v16 = v25
            ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : (char *)*(id *)(v11 + 8 * v12);
        uint64_t v17 = v16;
        a5 = (void (*)(void, uint64_t))(v12 - 3);
        if (__OFADD__(v12 - 4, 1)) {
          break;
        }
        if (a3) {
          unint64_t v18 = sub_10011C958(v16, v26);
        }
        else {
          unint64_t v18 = sub_10011D364(v16, v26);
        }
        unint64_t v19 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v15 = sub_100309F10(0, v15[2] + 1, 1, v15);
        }
        unint64_t v21 = v15[2];
        unint64_t v20 = v15[3];
        if (v21 >= v20 >> 1) {
          uint64_t v15 = sub_100309F10((void *)(v20 > 1), v21 + 1, 1, v15);
        }
        v15[2] = v21 + 1;
        v15[v21 + 4] = v19;

        ++v12;
        unint64_t v11 = v24;
        a3 = v23;
        if (a5 == (void (*)(void, uint64_t))v14) {
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = _swiftEmptyArrayStorage;
LABEL_21:
    swift_bridgeObjectRelease();
    v22(v15, 0);

    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001091D0(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  id v27 = a3;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = sub_10010AA84();
  type metadata accessor for REMCDManualSortHint();
  uint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();
  if (v4)
  {

    uint64_t v13 = v4;
    uint64_t v14 = v27;
    goto LABEL_17;
  }
  unint64_t v15 = v12;
  id v25 = a1;
  uint64_t v26 = a4;

  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v14 = v27;
    if (v16) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v14 = v27;
    if (v16)
    {
LABEL_5:
      uint64_t v24 = 0;
      if (v16 < 1) {
        __break(1u);
      }
      uint64_t v17 = 0;
      do
      {
        if ((v15 & 0xC000000000000001) != 0) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(v15 + 8 * v17 + 32);
        }
        unint64_t v19 = v18;
        ++v17;
        [v18 setETag:0, v24];
        [v19 setHintData:0];
        [v19 setConcatenatedContainerIDsWithLocalContainerIDPrefix:0];
        [v19 setConcatenatedElementIDsWithLocalElementIDPrefix:0];
        static Date.referenceDate.getter();
        Date.timeIntervalSinceReferenceDate.getter();
        [v19 setLastAccessedSinceReferenceDate:Int32.init(timeIntervalSinceReferenceDate:)(v20)];
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        [v19 setSerializationVersion:0];
        [v19 updateChangeCount];
      }
      while (v16 != v17);
      swift_bridgeObjectRelease();
      uint64_t v14 = v27;
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
LABEL_14:
  id v28 = 0;
  if ([v25 save:&v28])
  {
    id v21 = v28;
    return v14(0);
  }
  id v23 = v28;
  uint64_t v13 = _convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_17:
  swift_errorRetain();
  v14(v13);
  swift_errorRelease();
  return swift_errorRelease();
}

uint64_t sub_100109510(void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  v34._object = a7;
  v34._countAndFlagsBits = a6;
  uint64_t v13 = *a1;
  *(void *)&v38[0] = a2;
  *((void *)&v38[0] + 1) = a3;
  swift_bridgeObjectRetain_n();
  id v14 = [v13 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (!v14) {
    return swift_bridgeObjectRelease();
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10009A1A0(&v36, v38);
  swift_bridgeObjectRelease();
  *(void *)&v35[0] = 0x746E756F63;
  *((void *)&v35[0] + 1) = 0xE500000000000000;
  id v15 = [v13 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v35, 0, sizeof(v35));
  }
  sub_100096408((uint64_t)v35, (uint64_t)&v36, &qword_100908190);
  if (v37)
  {
    if (swift_dynamicCast())
    {
      uint64_t v33 = v39;
      *(void *)&long long v36 = a4;
      *((void *)&v36 + 1) = a5;
      swift_bridgeObjectRetain_n();
      id v17 = [v13 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v17)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_10009A1A0(v35, &v36);
        swift_bridgeObjectRelease();
      }
      else
      {
        id v37 = &type metadata for String;
        swift_bridgeObjectRelease();
        *(void *)&long long v36 = 7104846;
        *((void *)&v36 + 1) = 0xE300000000000000;
      }
      *(void *)&v35[0] = 0;
      *((void *)&v35[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v19._countAndFlagsBits = 0x5B746E756F636361;
      v19._object = (void *)0xE800000000000000;
      String.append(_:)(v19);
      String.append(_:)(v34);
      v20._countAndFlagsBits = 0x5B7473696C2E5DLL;
      v20._object = (void *)0xE700000000000000;
      String.append(_:)(v20);
      _print_unlocked<A, B>(_:_:)();
      v21._countAndFlagsBits = 0x646E696D65722E5DLL;
      v21._object = (void *)0xEC0000002E737265;
      String.append(_:)(v21);
      long long v22 = v35[0];
      *(void *)&v35[0] = 0;
      *((void *)&v35[0] + 1) = 0xE000000000000000;
      v23._countAndFlagsBits = a2;
      v23._object = a3;
      String.append(_:)(v23);
      v24._countAndFlagsBits = 40;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      _print_unlocked<A, B>(_:_:)();
      v25._countAndFlagsBits = 0x746E756F632E29;
      v25._object = (void *)0xE700000000000000;
      String.append(_:)(v25);
      id v27 = (void *)*((void *)&v35[0] + 1);
      v26._countAndFlagsBits = *(void *)&v35[0];
      v35[0] = v22;
      v26._object = v27;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      long long v28 = v35[0];
      *(void *)&v35[0] = v33;
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v31 = v30;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v35[0] = *a8;
      *a8 = 0x8000000000000000;
      sub_1002C3F10(v29, v31, v28, *((uint64_t *)&v28 + 1), isUniquelyReferenced_nonNull_native);
      *a8 = *(void *)&v35[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v38);
      id v18 = &v36;
      return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v36, &qword_100908190);
  }
  id v18 = v38;
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
}

id sub_100109928@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v60 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v15 = (char *)&v51 - v14;
  *(void *)&double v17 = __chkstk_darwin(v16).n128_u64[0];
  Swift::String v19 = (char *)&v51 - v18;
  id v20 = *a1;
  id result = [*a1 accountIdentifier:v17];
  if (!result)
  {
    id v27 = 0;
    goto LABEL_27;
  }
  long long v22 = result;
  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v61 = v23;

  id v24 = [v20 activityDate];
  uint64_t v62 = v2;
  if (!v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_14;
  }
  Swift::String v25 = v24;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v26 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v26(v8, v15, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    id result = (id)sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909A40);
    id v27 = 0;
    goto LABEL_27;
  }
  v26(v19, v8, v9);
  id v27 = [v20 authorUserRecordIDString];
  if (!v27)
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_26:
    id result = (id)(*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v19, v9);
    goto LABEL_27;
  }
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  id v27 = [v20 ckIdentifier];
  if (!v27)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v58 = v30;
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  id v27 = [v20 sharedEntityName];
  if (v27)
  {
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v55 = v34;
    uint64_t v56 = v33;

    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v19, v9);
    unsigned int v35 = [v20 activityTypeRawValue];
    if (v35 - 1 < 3) {
      uint64_t v36 = (unsigned __int16)(v35 - 1) + 1;
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v54 = v36;
    id v37 = [v20 ckParentCloudObjectEntityName];
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v52 = v40;
      uint64_t v53 = v39;
    }
    else
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
    }
    uint64_t v41 = v60;
    uint64_t v60 = v28;
    id v42 = [v20 ckParentCloudObjectIdentifier];
    if (v42)
    {
      uint64_t v43 = v42;
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;
    }
    else
    {
      uint64_t v51 = 0;
      uint64_t v45 = 0;
    }
    id v46 = [v20 uuidForChangeTracking:v51];
    if (v46)
    {
      uint64_t v47 = v46;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v48 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v41, 0, 1, v48);
    }
    else
    {
      uint64_t v49 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v41, 1, 1, v49);
    }
    id v50 = objc_allocWithZone((Class)REMSharedEntitySyncActivity);
    id v27 = sub_10010B65C(v59, v61, (uint64_t)v12, v54, v60, v58, v53, v52, v51, v45, v57, v32, v56, v55, v41);
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id result = (id)(*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v19, v9);
LABEL_27:
  void *v63 = v27;
  return result;
}

void sub_100109EBC(void *a1, void *a2, char a3, char a4, char a5)
{
  id v10 = a2;
  uint64_t v11 = (void *)sub_100695D58((uint64_t)v10);
  if (!v5)
  {
    uint64_t v12 = v11;
    uint64_t v13 = sub_10055144C(v11, 0);
    uint64_t v14 = v13;
    if (!v13)
    {
      [self noSuchObjectErrorWithObjectID:v10];
      swift_willThrow();
      goto LABEL_3;
    }
    uint64_t v15 = 0xD000000000000017;
    if (a3)
    {
      [v13 debug_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:0];
      [v14 debug_lowLevelUnmarkForDeletion];
      uint64_t v15 = 0xD000000000000019;
      unint64_t v16 = 0x80000001007CA960;
      if ((a5 & 1) == 0)
      {
LABEL_15:
        if (![a1 hasChanges])
        {

          swift_bridgeObjectRelease();
          return;
        }
        id v34 = 0;
        if (![a1 save:&v34])
        {
          id v32 = v34;
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)();

          swift_willThrow();
LABEL_27:

          goto LABEL_3;
        }
        uint64_t v18 = qword_100906EB8;
        id v19 = v34;
        if (v18 != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        sub_10008E2DC(v20, (uint64_t)qword_10090ADC0);
        Swift::String v21 = v14;
        swift_bridgeObjectRetain();
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v22))
        {
          os_log_type_t v33 = v22;
          uint64_t v23 = swift_slowAlloc();
          id v34 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136446722;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v15, v16, (uint64_t *)&v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v23 + 12) = 2082;
          uint64_t v24 = Bool.yesno.getter();
          sub_1000C51B8(v24, v25, (uint64_t *)&v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v23 + 22) = 2082;
          id v26 = [v21 remObjectID];
          if (v26)
          {
            id v27 = v26;
            id v28 = [v26 description];

            uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v31 = v30;
          }
          else
          {
            unint64_t v31 = 0xE300000000000000;
            uint64_t v29 = 7104878;
          }
          sub_1000C51B8(v29, v31, (uint64_t *)&v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v14, v33, "RDXPCDebugPerformer: %{public}s: Saved updating .markedForDeletion flag {shouldSetDirtyFlags: %{public}s, objectID: %{public}s}", (uint8_t *)v23, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          goto LABEL_27;
        }

        swift_bridgeObjectRelease_n();
LABEL_3:

        return;
      }
      double v17 = &selRef_debug_markObjectDirtyAfterUnmarkedForDeletion;
    }
    else
    {
      if (a4) {
        [v13 debug_lowLevelRemoveFromParent];
      }
      [v14 debug_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:1];
      [v14 debug_lowLevelMarkForDeletion];
      unint64_t v16 = 0x80000001007CA980;
      if ((a5 & 1) == 0) {
        goto LABEL_15;
      }
      double v17 = &selRef_debug_markObjectDirtyAfterMarkedForDeletion;
    }
    [v14 *v17];
    goto LABEL_15;
  }
}

unint64_t sub_10010A350()
{
  uint64_t v1 = v0;
  unint64_t v2 = 0xD000000000000021;
  uint64_t Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10011C7D4(v1, (uint64_t)v5, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    unint64_t v2 = 0xD000000000000037;
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    unint64_t v2 = 0xD000000000000030;
LABEL_5:
    sub_10011C774((uint64_t)v5, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  }
  return v2;
}

void sub_10010A46C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v10, (uint64_t *)&unk_100909E50);
  uint64_t v11 = *a2;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
  }
  [v11 *a5:isa];
}

void sub_10010A5A0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 ckIdentifier];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10010A608(uint64_t a1, void **a2)
{
  unint64_t v2 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v3 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v3 = 0;
  }
  id v4 = v3;
  [v2 setCkIdentifier:];
}

uint64_t sub_10010A678(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v7 = sub_10011A6A0(a3);
  uint64_t v8 = v4;
  if (v4) {
    goto LABEL_14;
  }
  unint64_t v9 = v7;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    if (v10) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
    {
LABEL_4:
      if (v10 < 1) {
        __break(1u);
      }
      for (uint64_t i = 0; i != v10; ++i)
      {
        if ((v9 & 0xC000000000000001) != 0) {
          id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v12 = *(id *)(v9 + 8 * i + 32);
        }
        uint64_t v13 = v12;
        [a1 deleteObject:v12];
      }
    }
  }
  swift_bridgeObjectRelease_n();
  id v17 = 0;
  if ([a1 save:&v17])
  {
    id v14 = v17;
    return a4(0);
  }
  id v16 = v17;
  uint64_t v8 = _convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_14:
  swift_errorRetain();
  a4(v8);
  swift_errorRelease();
  return swift_errorRelease();
}

uint64_t sub_10010A844@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010A850(a1, (SEL *)&selRef_identifier, a2);
}

uint64_t sub_10010A850@<X0>(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = type metadata accessor for UUID();
    unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    uint64_t v8 = v6;
    uint64_t v9 = a3;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v8 = v11;
    uint64_t v9 = a3;
    uint64_t v10 = 1;
  }

  return v7(v9, v10, 1, v8);
}

void sub_10010A914(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_10010A920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void **)(v3 + 16);
  uint64_t v8 = (objc_class *)type metadata accessor for RDDaemonController();
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  uint64_t v10 = &v9[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(void *)uint64_t v10 = a1;
  *((void *)v10 + 1) = a2;
  sub_10010B4E8(a3, (uint64_t)&v9[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity]);
  *(void *)&v9[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = v7;
  swift_unknownObjectRetain();
  sub_10010B544(a3);
  v13.receiver = v9;
  v13.super_class = v8;
  id v11 = v7;
  return [super init];
}

id sub_10010AA84()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Request = type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(0);
  __chkstk_darwin(Request);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10011C7D4(v1, (uint64_t)v15, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v25 = *((void *)v15 + 1);
      uint64_t v24 = *((void *)v15 + 2);
      __int16 v26 = *(_WORD *)v15;
      uint64_t KeyPath = swift_getKeyPath();
      swift_bridgeObjectRetain();
      id v28 = (id)sub_10032ECEC(KeyPath, v26);
      swift_release();
      uint64_t v29 = swift_getKeyPath();
      unint64_t v30 = (void *)sub_10032ECF8(v29, v25, v24);
      swift_release();
      swift_bridgeObjectRelease();
      sub_100094134(&qword_100909E00);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_100776E40;
      *(void *)(v31 + 32) = sub_1002F51CC(0);
      uint64_t v52 = v31;
      specialized Array._endMutation()();
      uint64_t v32 = v52;
      uint64_t v33 = *(void *)(v52 + 16);
      if (__OFADD__(v33, 2))
      {
        __break(1u);
LABEL_15:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_8;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v52 = v32;
      if (!isUniquelyReferenced_nonNull_native || v33 + 2 > *(void *)(v32 + 24) >> 1) {
        uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._endMutation()();
      id v28 = v28;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(v52 + 16) >= *(void *)(v52 + 24) >> 1) {
        goto LABEL_15;
      }
LABEL_8:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v35 = v30;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(v52 + 16) >= *(void *)(v52 + 24) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v36 = (void *)sub_1002F52FC(v52);
      swift_bridgeObjectRelease();
      type metadata accessor for REMCDManualSortHint();
      id v22 = [objc_allocWithZone((Class)NSFetchRequest) init];
      id v37 = [(id)swift_getObjCClassFromMetadata() entity];
      [v22 setEntity:v37];

      [v22 setAffectedStores:0];
      [v22 setPredicate:v36];

      return v22;
    case 2u:
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v15, v2);
      Date.timeIntervalSinceReferenceDate.getter();
      Swift::Int32 v39 = Int32.init(timeIntervalSinceReferenceDate:)(v38);
      sub_100094134(&qword_100909E00);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E80;
      uint64_t v41 = swift_getKeyPath();
      uint64_t v42 = sub_1003A00D0(v41, v39);
      swift_release();
      *(void *)(inited + 32) = v42;
      uint64_t v43 = swift_getKeyPath();
      uint64_t v44 = sub_1003A00B0(v43);
      swift_release();
      *(void *)(inited + 40) = v44;
      uint64_t v52 = inited;
      specialized Array._endMutation()();
      uint64_t v45 = (void *)sub_1002F52FC(v52);
      type metadata accessor for REMCDManualSortHint();
      id v22 = [objc_allocWithZone((Class)NSFetchRequest) init];
      id v46 = [(id)swift_getObjCClassFromMetadata() entity];
      [v22 setEntity:v46];

      [v22 setAffectedStores:0];
      [v22 setPredicate:v45];

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return v22;
    case 3u:
      uint64_t v47 = swift_getKeyPath();
      uint64_t v48 = (void *)sub_1003A00B0(v47);
      swift_release();
      type metadata accessor for REMCDManualSortHint();
      id v22 = [objc_allocWithZone((Class)NSFetchRequest) init];
      id v49 = [(id)swift_getObjCClassFromMetadata() entity];
      [v22 setEntity:v49];

      [v22 setAffectedStores:0];
      [v22 setPredicate:v48];

      return v22;
    default:
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
      sub_100094134(&qword_100909E00);
      uint64_t v16 = swift_initStackObject();
      *(_OWORD *)(v16 + 16) = xmmword_100776E80;
      uint64_t v17 = swift_getKeyPath();
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
      uint64_t v18 = sub_10032ED04(v17, (uint64_t)v8);
      swift_release();
      *(void *)(v16 + 32) = v18;
      uint64_t v19 = swift_getKeyPath();
      uint64_t v20 = sub_1003A00B0(v19);
      swift_release();
      *(void *)(v16 + 40) = v20;
      uint64_t v52 = v16;
      specialized Array._endMutation()();
      Swift::String v21 = (void *)sub_1002F52FC(v52);
      type metadata accessor for REMCDManualSortHint();
      id v22 = [objc_allocWithZone((Class)NSFetchRequest) init];
      id v23 = [(id)swift_getObjCClassFromMetadata() entity];
      [v22 setEntity:v23];

      [v22 setAffectedStores:0];
      [v22 setPredicate:v21];

      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      return v22;
  }
}

uint64_t sub_10010B288(uint64_t a1, uint64_t a2)
{
  return sub_10010B2A0(a1, a2, (SEL *)&selRef_fileName);
}

uint64_t sub_10010B294(uint64_t a1, uint64_t a2)
{
  return sub_10010B2A0(a1, a2, (SEL *)&selRef_sha512Sum);
}

uint64_t sub_10010B2A0(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void sub_10010B304(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  if (a2)
  {
    id v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v4 = 0;
  }
  [v3 setSha512Sum:v4];
}

uint64_t sub_10010B37C@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 identifier];
  if (v3)
  {
    id v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

id sub_10010B444()
{
  id v1 = [*v0 account];

  return v1;
}

uint64_t type metadata accessor for RDXPCDebugPerformer()
{
  return self;
}

uint64_t type metadata accessor for DebugPerformerManualHashtagLabelUpdaterDelegate()
{
  return self;
}

uint64_t type metadata accessor for DebugPerformerMockDABabysittableAccount()
{
  return self;
}

uint64_t sub_10010B4E8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10010B544(uint64_t a1)
{
  return a1;
}

uint64_t sub_10010B584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = (a6 >> 46) & 3;
  if (v7 >= 2)
  {
    if (v7 != 2) {
      return result;
    }
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_10010B5D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_1001F8BC8(v4);
    *a1 = v4;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  sub_10010B8A0(v8, a2);
  return specialized ContiguousArray._endMutation()();
}

id sub_10010B65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3;
  v17.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a8)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a10)
    {
LABEL_3:
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    NSString v19 = 0;
    if (a10) {
      goto LABEL_3;
    }
  }
  NSString v20 = 0;
LABEL_6:
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(a15, 1, v23) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a15, v23);
  }
  id v26 = [v31 initWithAccountIdentifier:v29 activityDate:v17.super.isa activityType:a4 authorUserRecordIDString:v18 ckParentCloudObjectEntityName:v19 ckParentCloudObjectIdentifier:v20 ckIdentifier:v21 sharedEntityName:v22 uuidForChangeTracking:isa];

  uint64_t v27 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v32, v27);
  return v26;
}

void sub_10010B8A0(uint64_t *a1, uint64_t *a2)
{
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_141;
    }
    if (v4) {
      sub_10010C05C(0, v4, 1, a1, a2);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_150;
  }
  Swift::Int v112 = v5;
  Class v110 = a1;
  if (v4 < 2)
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v122 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v35 = _swiftEmptyArrayStorage[2];
LABEL_104:
      unint64_t v97 = v9;
      if (v35 >= 2)
      {
        uint64_t v98 = *v110;
        do
        {
          unint64_t v99 = v35 - 2;
          if (v35 < 2) {
            goto LABEL_136;
          }
          if (!v98) {
            goto LABEL_149;
          }
          uint64_t v100 = v97;
          uint64_t v101 = *(void *)&v97[16 * v99 + 32];
          uint64_t v102 = *(void *)&v97[16 * v35 + 24];
          sub_10010C158((void **)(v98 + 8 * v101), (void **)(v98 + 8 * *(void *)&v97[16 * v35 + 16]), v98 + 8 * v102, __dst, a2);
          if (v2) {
            break;
          }
          if (v102 < v101) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v100 = sub_1001F433C((uint64_t)v100);
          }
          if (v99 >= *((void *)v100 + 2)) {
            goto LABEL_138;
          }
          uint64_t v103 = v100 + 32;
          uint64_t v104 = &v100[16 * v99 + 32];
          *(void *)uint64_t v104 = v101;
          *((void *)v104 + 1) = v102;
          uint64_t v105 = v100;
          unint64_t v106 = *((void *)v100 + 2);
          if (v35 > v106) {
            goto LABEL_139;
          }
          memmove(&v103[16 * v35 - 16], &v103[16 * v35], 16 * (v106 - v35));
          unint64_t v97 = v105;
          *((void *)v105 + 2) = v106 - 1;
          unint64_t v35 = v106 - 1;
        }
        while (v106 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      goto LABEL_118;
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    sub_1000963CC(0, (unint64_t *)&unk_100920C30);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    __dst = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v122 = v8;
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v111 = *a1 + 16;
  uint64_t v109 = *a1 - 8;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v113 = v4;
  uint64_t v118 = *a1;
LABEL_13:
  Swift::Int v12 = v10++;
  if (v10 < v4)
  {
    objc_super v13 = *(void **)(v11 + 8 * v10);
    v120 = *(void **)(v11 + 8 * v12);
    uint64_t v14 = v120;
    id v121 = v13;
    id v15 = v13;
    id v16 = v14;
    int v17 = sub_10010884C(&v121, &v120, a2);
    if (v2)
    {
      swift_bridgeObjectRelease();

      goto LABEL_118;
    }
    int v18 = v17;

    Swift::Int v10 = v12 + 2;
    if (v12 + 2 < v4)
    {
      Swift::Int v19 = v12;
      NSString v20 = v9;
      Swift::Int v114 = v19;
      NSString v21 = (void **)(v111 + 8 * v19);
      while (1)
      {
        NSString v22 = *v21;
        v120 = *(v21 - 1);
        uint64_t v23 = v120;
        id v121 = v22;
        id v24 = v22;
        id v25 = v23;
        int v26 = sub_10010884C(&v121, &v120, a2);

        if ((v18 ^ v26)) {
          break;
        }
        ++v10;
        ++v21;
        Swift::Int v4 = v113;
        if (v113 == v10)
        {
          Swift::Int v10 = v113;
          uint64_t v9 = v20;
          goto LABEL_21;
        }
      }
      uint64_t v9 = v20;
      Swift::Int v4 = v113;
LABEL_21:
      Swift::Int v12 = v114;
    }
    uint64_t v11 = v118;
    if (v18)
    {
      if (v10 < v12) {
        goto LABEL_145;
      }
      if (v12 < v10)
      {
        uint64_t v27 = (uint64_t *)(v109 + 8 * v10);
        Swift::Int v28 = v10;
        Swift::Int v29 = v12;
        unint64_t v30 = (uint64_t *)(v118 + 8 * v12);
        do
        {
          if (v29 != --v28)
          {
            if (!v118) {
              goto LABEL_148;
            }
            uint64_t v31 = *v30;
            *unint64_t v30 = *v27;
            *uint64_t v27 = v31;
          }
          ++v29;
          --v27;
          ++v30;
        }
        while (v29 < v28);
      }
    }
  }
  if (v10 >= v4) {
    goto LABEL_40;
  }
  if (__OFSUB__(v10, v12)) {
    goto LABEL_142;
  }
  if (v10 - v12 >= v112)
  {
LABEL_40:
    if (v10 < v12) {
      goto LABEL_140;
    }
    goto LABEL_41;
  }
  if (__OFADD__(v12, v112)) {
    goto LABEL_143;
  }
  if (v12 + v112 >= v4) {
    Swift::Int v32 = v4;
  }
  else {
    Swift::Int v32 = v12 + v112;
  }
  if (v32 >= v12)
  {
    if (v10 == v32) {
      goto LABEL_40;
    }
    Swift::Int v116 = v12;
    Swift::Int v107 = v9;
    Swift::Int v108 = v32;
    uint64_t v86 = v109 + 8 * v10;
    while (1)
    {
      uint64_t v87 = *(void **)(v11 + 8 * v10);
      Swift::Int v88 = v116;
      uint64_t v89 = v86;
      while (1)
      {
        v120 = *(void **)v86;
        v90 = v120;
        id v121 = v87;
        id v91 = v87;
        id v92 = v90;
        char v93 = sub_10010884C(&v121, &v120, a2);
        if (v2)
        {
          swift_bridgeObjectRelease();

LABEL_118:
          *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
          specialized Array._endMutation()();
          swift_bridgeObjectRelease();
          return;
        }
        char v94 = v93;

        if ((v94 & 1) == 0) {
          break;
        }
        uint64_t v11 = v118;
        if (!v118) {
          goto LABEL_147;
        }
        uint64_t v95 = *(void **)v86;
        uint64_t v87 = *(void **)(v86 + 8);
        *(void *)uint64_t v86 = v87;
        *(void *)(v86 + 8) = v95;
        v86 -= 8;
        if (v10 == ++v88) {
          goto LABEL_99;
        }
      }
      uint64_t v11 = v118;
LABEL_99:
      ++v10;
      uint64_t v86 = v89 + 8;
      if (v10 == v108)
      {
        Swift::Int v10 = v108;
        uint64_t v9 = v107;
        Swift::Int v12 = v116;
        if (v108 < v116) {
          goto LABEL_140;
        }
LABEL_41:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1001F3D80(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v34 = *((void *)v9 + 2);
        unint64_t v33 = *((void *)v9 + 3);
        unint64_t v35 = v34 + 1;
        uint64_t v11 = v118;
        if (v34 >= v33 >> 1)
        {
          unint64_t v96 = sub_1001F3D80((char *)(v33 > 1), v34 + 1, 1, v9);
          uint64_t v11 = v118;
          uint64_t v9 = v96;
        }
        *((void *)v9 + 2) = v35;
        uint64_t v36 = v9 + 32;
        id v37 = &v9[16 * v34 + 32];
        *(void *)id v37 = v12;
        *((void *)v37 + 1) = v10;
        if (v34)
        {
          Swift::Int v115 = v10;
          while (1)
          {
            unint64_t v38 = v35 - 1;
            if (v35 >= 4)
            {
              uint64_t v43 = &v36[16 * v35];
              uint64_t v44 = *((void *)v43 - 8);
              uint64_t v45 = *((void *)v43 - 7);
              BOOL v49 = __OFSUB__(v45, v44);
              uint64_t v46 = v45 - v44;
              if (v49) {
                goto LABEL_125;
              }
              uint64_t v48 = *((void *)v43 - 6);
              uint64_t v47 = *((void *)v43 - 5);
              BOOL v49 = __OFSUB__(v47, v48);
              uint64_t v41 = v47 - v48;
              char v42 = v49;
              if (v49) {
                goto LABEL_126;
              }
              unint64_t v50 = v35 - 2;
              uint64_t v51 = &v36[16 * v35 - 32];
              uint64_t v53 = *(void *)v51;
              uint64_t v52 = *((void *)v51 + 1);
              BOOL v49 = __OFSUB__(v52, v53);
              uint64_t v54 = v52 - v53;
              if (v49) {
                goto LABEL_128;
              }
              BOOL v49 = __OFADD__(v41, v54);
              uint64_t v55 = v41 + v54;
              if (v49) {
                goto LABEL_131;
              }
              if (v55 >= v46)
              {
                uint64_t v73 = &v36[16 * v38];
                uint64_t v75 = *(void *)v73;
                uint64_t v74 = *((void *)v73 + 1);
                BOOL v49 = __OFSUB__(v74, v75);
                uint64_t v76 = v74 - v75;
                if (v49) {
                  goto LABEL_135;
                }
                BOOL v66 = v41 < v76;
                goto LABEL_78;
              }
            }
            else
            {
              if (v35 != 3)
              {
                uint64_t v67 = *((void *)v9 + 4);
                uint64_t v68 = *((void *)v9 + 5);
                BOOL v49 = __OFSUB__(v68, v67);
                uint64_t v60 = v68 - v67;
                char v61 = v49;
                goto LABEL_72;
              }
              uint64_t v40 = *((void *)v9 + 4);
              uint64_t v39 = *((void *)v9 + 5);
              BOOL v49 = __OFSUB__(v39, v40);
              uint64_t v41 = v39 - v40;
              char v42 = v49;
            }
            if (v42) {
              goto LABEL_127;
            }
            unint64_t v50 = v35 - 2;
            uint64_t v56 = &v36[16 * v35 - 32];
            uint64_t v58 = *(void *)v56;
            uint64_t v57 = *((void *)v56 + 1);
            BOOL v59 = __OFSUB__(v57, v58);
            uint64_t v60 = v57 - v58;
            char v61 = v59;
            if (v59) {
              goto LABEL_130;
            }
            uint64_t v62 = &v36[16 * v38];
            uint64_t v64 = *(void *)v62;
            uint64_t v63 = *((void *)v62 + 1);
            BOOL v49 = __OFSUB__(v63, v64);
            uint64_t v65 = v63 - v64;
            if (v49) {
              goto LABEL_133;
            }
            if (__OFADD__(v60, v65)) {
              goto LABEL_134;
            }
            if (v60 + v65 >= v41)
            {
              BOOL v66 = v41 < v65;
LABEL_78:
              if (v66) {
                unint64_t v38 = v50;
              }
              goto LABEL_80;
            }
LABEL_72:
            if (v61) {
              goto LABEL_129;
            }
            uint64_t v69 = &v36[16 * v38];
            uint64_t v71 = *(void *)v69;
            uint64_t v70 = *((void *)v69 + 1);
            BOOL v49 = __OFSUB__(v70, v71);
            uint64_t v72 = v70 - v71;
            if (v49) {
              goto LABEL_132;
            }
            if (v72 < v60) {
              goto LABEL_89;
            }
LABEL_80:
            unint64_t v77 = v38 - 1;
            if (v38 - 1 >= v35)
            {
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
              goto LABEL_144;
            }
            if (!v11) {
              goto LABEL_146;
            }
            uint64_t v78 = v9;
            uint64_t v79 = &v36[16 * v77];
            uint64_t v80 = *(void *)v79;
            v81 = v36;
            unint64_t v82 = v38;
            uint64_t v83 = &v36[16 * v38];
            uint64_t v84 = *((void *)v83 + 1);
            sub_10010C158((void **)(v11 + 8 * *(void *)v79), (void **)(v11 + 8 * *(void *)v83), v11 + 8 * v84, __dst, a2);
            if (v2) {
              goto LABEL_117;
            }
            if (v84 < v80) {
              goto LABEL_122;
            }
            if (v82 > *((void *)v78 + 2)) {
              goto LABEL_123;
            }
            *(void *)uint64_t v79 = v80;
            *(void *)&v81[16 * v77 + 8] = v84;
            unint64_t v85 = *((void *)v78 + 2);
            if (v82 >= v85) {
              goto LABEL_124;
            }
            uint64_t v9 = v78;
            unint64_t v35 = v85 - 1;
            memmove(v83, v83 + 16, 16 * (v85 - 1 - v82));
            uint64_t v36 = v81;
            *((void *)v78 + 2) = v85 - 1;
            uint64_t v11 = v118;
            Swift::Int v10 = v115;
            if (v85 <= 2) {
              goto LABEL_89;
            }
          }
        }
        unint64_t v35 = 1;
LABEL_89:
        Swift::Int v4 = v113;
        if (v10 >= v113) {
          goto LABEL_104;
        }
        goto LABEL_13;
      }
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_10010C05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a1;
    uint64_t v9 = *a4;
    uint64_t v10 = *a4 + 8 * a3 - 8;
LABEL_4:
    uint64_t v11 = *(void **)(v9 + 8 * v7);
    uint64_t v19 = v10;
    while (1)
    {
      NSString v21 = v11;
      NSString v20 = *(void **)v10;
      Swift::Int v12 = v20;
      id v13 = v11;
      id v14 = v12;
      char v15 = sub_10010884C(&v21, &v20, a5);

      if (v5) {
        break;
      }
      if (v15)
      {
        if (!v9)
        {
          __break(1u);
          return;
        }
        id v16 = *(void **)v10;
        uint64_t v11 = *(void **)(v10 + 8);
        *(void *)uint64_t v10 = v11;
        *(void *)(v10 + 8) = v16;
        v10 -= 8;
        if (v7 != ++v8) {
          continue;
        }
      }
      ++v7;
      uint64_t v10 = v19 + 8;
      uint64_t v8 = a1;
      if (v7 != a2) {
        goto LABEL_4;
      }
      return;
    }
  }
}

uint64_t sub_10010C158(void **__src, void **a2, unint64_t a3, void **__dst, uint64_t *a5)
{
  uint64_t v5 = __dst;
  uint64_t v7 = a2;
  uint64_t v8 = __src;
  int64_t v9 = (char *)a2 - (char *)__src;
  int64_t v10 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v10 = (char *)a2 - (char *)__src;
  }
  uint64_t v11 = v10 >> 3;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v13 = a3 - (void)a2;
  }
  uint64_t v14 = v13 >> 3;
  uint64_t v46 = __src;
  uint64_t v45 = __dst;
  if (v11 >= v13 >> 3)
  {
    if (v12 >= -7)
    {
      if (__dst != a2 || &a2[v14] <= __dst) {
        memmove(__dst, a2, 8 * v14);
      }
      id v25 = &v5[v14];
      uint64_t v44 = v25;
      uint64_t v46 = v7;
      if (v8 < v7 && v12 >= 8)
      {
        int v26 = (void **)(a3 - 8);
        uint64_t v27 = v7;
        unint64_t v38 = v5;
        uint64_t v39 = v8;
        while (1)
        {
          unint64_t v28 = (unint64_t)v25;
          Swift::Int v29 = v25 - 1;
          uint64_t v43 = *(v25 - 1);
          unint64_t v30 = *--v27;
          char v42 = v30;
          uint64_t v31 = v43;
          id v32 = v30;
          char v33 = sub_10010884C(&v43, &v42, a5);
          if (v41) {
            break;
          }
          char v34 = v33;
          uint64_t v41 = 0;
          unint64_t v35 = v26 + 1;

          if (v34)
          {
            if (v35 != v7 || v26 >= v7) {
              *int v26 = *v27;
            }
            uint64_t v46 = v27;
            uint64_t v36 = v38;
            id v25 = (void **)v28;
            if (v27 <= v39) {
              goto LABEL_48;
            }
          }
          else
          {
            uint64_t v44 = v29;
            if ((unint64_t)v35 < v28 || (unint64_t)v26 >= v28 || v35 != (void **)v28) {
              *int v26 = *v29;
            }
            uint64_t v27 = v7;
            id v25 = v29;
            uint64_t v36 = v38;
            if (v7 <= v39) {
              goto LABEL_48;
            }
          }
          --v26;
          uint64_t v7 = v27;
          if (v25 <= v36) {
            goto LABEL_48;
          }
        }
      }
      goto LABEL_48;
    }
  }
  else if (v9 >= -7)
  {
    if (__dst != __src || &__src[v11] <= __dst) {
      memmove(__dst, __src, 8 * v11);
    }
    char v15 = &v5[v11];
    uint64_t v44 = v15;
    if ((unint64_t)v7 < a3 && v9 >= 8)
    {
      while (1)
      {
        id v16 = v8;
        uint64_t v43 = *v7;
        int v17 = v5;
        char v42 = *v5;
        int v18 = v42;
        uint64_t v19 = v43;
        id v20 = v18;
        char v21 = sub_10010884C(&v43, &v42, a5);
        if (v41) {
          break;
        }
        char v22 = v21;

        if (v22)
        {
          uint64_t v23 = v7 + 1;
          id v24 = v16;
          if (v16 < v7 || v16 >= v23 || v16 != v7) {
            *id v16 = *v7;
          }
          uint64_t v5 = v17;
        }
        else
        {
          id v24 = v16;
          if (v16 != v17) {
            *id v16 = *v17;
          }
          uint64_t v5 = v17 + 1;
          uint64_t v45 = v17 + 1;
          uint64_t v23 = v7;
        }
        uint64_t v41 = 0;
        uint64_t v8 = v24 + 1;
        uint64_t v46 = v8;
        if (v5 < v15)
        {
          uint64_t v7 = v23;
          if ((unint64_t)v23 < a3) {
            continue;
          }
        }
        goto LABEL_48;
      }
    }
LABEL_48:
    sub_1001F3F4C(&v46, &v45, &v44);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10010C4A4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v60 = a4;
  uint64_t v61 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v16 = (char *)&v52 - v15;
  id v17 = [a1 identifier];
  if (v17)
  {
    int v18 = v17;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v14, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v14, 1, 1, v7);
  }
  sub_100096408((uint64_t)v14, (uint64_t)v16, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7))
  {
    sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
    sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v16, v7);
  sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
  uint64_t v54 = UUID.uuidString.getter();
  BOOL v59 = v19;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v20 = [self cdEntityName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v21 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v23 = [v21 initWithEntityName:v22];

  sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v24 = swift_allocObject();
  long long v58 = xmmword_100776E80;
  *(_OWORD *)(v24 + 16) = xmmword_100776E80;
  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = sub_1000C5B38();
  *(void *)(v24 + 32) = 0x746E756F636361;
  *(void *)(v24 + 40) = 0xE700000000000000;
  *(void *)(v24 + 96) = sub_1000963CC(0, &qword_10090ABC0);
  *(void *)(v24 + 104) = sub_1000E4F40(&qword_10090B090, &qword_10090ABC0);
  *(void *)(v24 + 72) = a1;
  id v25 = a1;
  int v26 = NSPredicate.init(format:_:)();
  [v23 setPredicate:v26];

  swift_bridgeObjectRetain();
  uint64_t v27 = v61;
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Swift::Int v29 = self;
  id v30 = [v29 expressionForKeyPath:v28];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_100776E40;
  *(void *)(v31 + 56) = sub_1000963CC(0, &qword_10090B098);
  *(void *)(v31 + 32) = v30;
  id v56 = v30;
  NSString v32 = String._bridgeToObjectiveC()();
  uint64_t v57 = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v34 = [v29 expressionForFunction:v32 arguments:isa];

  id v35 = [objc_allocWithZone((Class)NSExpressionDescription) init];
  id v55 = v34;
  [v35 setExpression:v34];
  id v36 = v35;
  NSString v37 = String._bridgeToObjectiveC()();
  [v36 setName:v37];

  [v36 setExpressionResultType:300];
  [v23 setReturnsObjectsAsFaults:0];
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = v58;
  *(void *)(v38 + 32) = v27;
  *(void *)(v38 + 40) = a3;
  *(void *)(v38 + 88) = &type metadata for String;
  *(void *)(v38 + 56) = &type metadata for String;
  *(void *)(v38 + 64) = 0x6564692E7473696CLL;
  *(void *)(v38 + 72) = 0xEF7265696669746ELL;
  swift_bridgeObjectRetain();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v23 setPropertiesToGroupBy:v39];

  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_100776E60;
  *(void *)(v40 + 32) = v27;
  *(void *)(v40 + 40) = a3;
  *(void *)(v40 + 88) = &type metadata for String;
  *(void *)(v40 + 56) = &type metadata for String;
  *(void *)(v40 + 64) = 0x6564692E7473696CLL;
  *(void *)(v40 + 72) = 0xEF7265696669746ELL;
  *(void *)(v40 + 120) = sub_1000963CC(0, (unint64_t *)&unk_10090B0A0);
  *(void *)(v40 + 96) = v36;
  swift_bridgeObjectRetain();
  id v41 = v36;
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v23 setPropertiesToFetch:v42];

  [v23 setResultType:2];
  uint64_t v63 = _swiftEmptyDictionarySingleton;
  sub_1000963CC(0, &qword_10090E4F0);
  uint64_t v43 = v57;
  unint64_t v44 = NSManagedObjectContext.fetch<A>(_:)();
  if (v43)
  {
    swift_bridgeObjectRelease();

    return;
  }
  unint64_t v45 = v44;
  id v60 = v41;
  uint64_t v46 = v54;
  uint64_t v47 = v59;
  id v53 = v23;
  if (!(v44 >> 62))
  {
    uint64_t v48 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v48) {
      goto LABEL_10;
    }
LABEL_17:

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
  if (!v48) {
    goto LABEL_17;
  }
LABEL_10:
  if (v48 >= 1)
  {
    uint64_t v49 = 0;
    do
    {
      if ((v45 & 0xC000000000000001) != 0) {
        id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v50 = *(id *)(v45 + 8 * v49 + 32);
      }
      uint64_t v51 = v50;
      ++v49;
      uint64_t v62 = v50;
      sub_100109510(&v62, v61, a3, 0x6564692E7473696CLL, 0xEF7265696669746ELL, v46, v47, &v63);
    }
    while (v48 != v49);
    goto LABEL_17;
  }
  __break(1u);
}

unint64_t sub_10010CCE8(void *a1, uint64_t a2)
{
  uint64_t v144 = a2;
  uint64_t v4 = _s10PredicatesOMa(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (unint64_t *)((char *)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  *(void *)&long long v154 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v146 = (char *)&v138 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v138 - v13;
  uint64_t v15 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  BOOL v147 = (char *)&v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v155 = (uint64_t)&v138 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  NSString v22 = (char *)&v138 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v138 - v23;
  id v143 = a1;
  id v25 = [a1 identifier];
  if (v25)
  {
    int v26 = v25;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = *(void **)(v8 + 56);
    NSString v28 = v22;
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v27 = *(void **)(v8 + 56);
    NSString v28 = v22;
    uint64_t v29 = 1;
  }
  id v153 = v27;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v27)(v28, v29, 1, v7);
  sub_100096408((uint64_t)v22, (uint64_t)v24, (uint64_t *)&unk_100909E50);
  id v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v30(v24, 1, v7))
  {
    sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
    return sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v152 = v8 + 48;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v24, v7);
  sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
  uint64_t v32 = UUID.uuidString.getter();
  id v34 = v33;
  uint64_t v145 = v8;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  id v35 = [self sharedConfiguration];
  unint64_t v36 = (unint64_t)[v35 extraneousAlarmsDeleteCountThreshold];

  if ((v36 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_42:
    sub_1001DE1C4(v37 > 1, (int64_t)v30, 1);
    uint64_t v43 = v160;
    goto LABEL_12;
  }
  char v151 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v30;
  uint64_t v140 = v32;
  v142 = v34;
  *uint64_t v6 = v36;
  swift_storeEnumTagMultiPayload();
  uint64_t v38 = (void *)sub_10038F1F0();
  sub_10011C774((uint64_t)v6, _s10PredicatesOMa);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v39 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v40 = [(id)swift_getObjCClassFromMetadata() entity];
  [v39 setEntity:v40];

  [v39 setAffectedStores:0];
  [v39 setPredicate:v38];

  id v141 = v39;
  [v39 setFetchLimit:10000];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)&long long v158 = inited;
  specialized Array._endMutation()();
  uint64_t v42 = v158;
  os_log_type_t v160 = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 1, 0);
  uint64_t v43 = v160;
  if ((v42 & 0xC000000000000001) != 0)
  {
    uint64_t v44 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v44 = *(void *)(v42 + 32);
    swift_retain();
  }
  v156 = (void *)v36;
  uint64_t v45 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v46) {
    goto LABEL_45;
  }
  uint64_t v47 = v45;
  uint64_t v48 = v46;
  uint64_t v159 = &type metadata for String;
  swift_release();
  *(void *)&long long v158 = v47;
  *((void *)&v158 + 1) = v48;
  unint64_t v36 = v43[2];
  unint64_t v37 = v43[3];
  id v30 = (unsigned int (*)(char *, uint64_t, uint64_t))(v36 + 1);
  if (v36 >= v37 >> 1) {
    goto LABEL_42;
  }
LABEL_12:
  v43[2] = v30;
  sub_10009A1A0(&v158, &v43[4 * v36 + 4]);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id ObjCClassFromMetadata = v141;
  [v141 setPropertiesToFetch:isa];

  uint64_t v50 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
    swift_bridgeObjectRelease();

    return (unint64_t)ObjCClassFromMetadata;
  }
  unint64_t v51 = v50;
  *(void *)&long long v158 = 0;
  *((void *)&v158 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v52._countAndFlagsBits = 0x5B746E756F636361;
  v52._object = (void *)0xE800000000000000;
  String.append(_:)(v52);
  v53._countAndFlagsBits = v140;
  v53._object = v142;
  String.append(_:)(v53);
  v54._countAndFlagsBits = 0xD00000000000002ELL;
  v54._object = (void *)0x80000001007CAFA0;
  String.append(_:)(v54);
  os_log_type_t v160 = v156;
  v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._countAndFlagsBits = 0x746E756F632E29;
  v56._object = (void *)0xE700000000000000;
  String.append(_:)(v56);
  long long v57 = v158;
  unint64_t v58 = v51 >> 62;
  uint64_t v150 = v51;
  if (v51 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v59 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v60 = (uint64_t)v147;
  *(void *)&long long v158 = v59;
  uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v63 = v62;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v158 = _swiftEmptyDictionarySingleton;
  sub_1002C3F10(v61, v63, v57, *((uint64_t *)&v57 + 1), isUniquelyReferenced_nonNull_native);
  uint64_t v138 = v158;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v139 = 0;
  if (v58)
  {
    uint64_t v44 = v150;
    swift_bridgeObjectRetain();
    uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
    BOOL v66 = INDateRelevanceProvider_ptr;
    if (v65) {
      goto LABEL_18;
    }
LABEL_36:
    v156 = _swiftEmptyArrayStorage;
LABEL_37:
    swift_bridgeObjectRelease_n();
    uint64_t v84 = (void *)sub_1002316A8(v156, 0);
    uint64_t v85 = sub_1000963CC(0, (unint64_t *)&unk_100910DD0);
    id v86 = [objc_allocWithZone((Class)v66[42]) init];
    id ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
    id v87 = [ObjCClassFromMetadata entity];
    [v86 setEntity:v87];

    [v86 setAffectedStores:0];
    [v86 setPredicate:v84];
    [v86 setAffectedStores:0];
    uint64_t v88 = v139;
    uint64_t v89 = NSManagedObjectContext.count<A>(for:)();
    if (v88)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v90 = v89;
      uint64_t v152 = v85;
      id v153 = ObjCClassFromMetadata;

      *(void *)&long long v158 = 0;
      *((void *)&v158 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(65);
      v91._countAndFlagsBits = 0x5B746E756F636361;
      v91._object = (void *)0xE800000000000000;
      String.append(_:)(v91);
      v92._countAndFlagsBits = v140;
      v92._object = v142;
      String.append(_:)(v92);
      v93._countAndFlagsBits = 0xD000000000000037;
      v93._object = (void *)0x80000001007CAFD0;
      String.append(_:)(v93);
      long long v94 = v158;
      *(void *)&long long v158 = v90;
      uint64_t v95 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v97 = v96;
      uint64_t v98 = v138;
      char v99 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v158 = v98;
      sub_1002C3F10(v95, v97, v94, *((uint64_t *)&v94 + 1), v99);
      uint64_t v155 = v158;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100094134((uint64_t *)&unk_10090B080);
      uint64_t v100 = swift_initStackObject();
      long long v154 = xmmword_100776E80;
      *(_OWORD *)(v100 + 16) = xmmword_100776E80;
      *(void *)(v100 + 32) = sub_1002F51CC(1);
      uint64_t KeyPath = swift_getKeyPath();
      id v102 = v143;
      id v103 = v143;
      uint64_t v104 = sub_10032F5D4(KeyPath, v102);
      swift_release();

      *(void *)(v100 + 40) = v104;
      *(void *)&long long v158 = v100;
      specialized Array._endMutation()();
      uint64_t v105 = v158;
      sub_100094134((uint64_t *)&unk_100910DF0);
      uint64_t v106 = swift_initStackObject();
      *(_OWORD *)(v106 + 16) = v154;
      *(void *)(v106 + 32) = sub_1002F51CC(1);
      uint64_t v107 = swift_getKeyPath();
      id v108 = v103;
      uint64_t v109 = sub_10032F5E8(v107, v102);
      swift_release();

      *(void *)(v106 + 40) = v109;
      *(void *)&long long v158 = v106;
      specialized Array._endMutation()();
      uint64_t v110 = v158;
      uint64_t v111 = (void *)sub_1002F52FC(v105);
      sub_1000963CC(0, (unint64_t *)&unk_100909AC0);
      id v112 = [objc_allocWithZone((Class)v66[42]) init];
      id v113 = [(id)swift_getObjCClassFromMetadata() entity];
      [v112 setEntity:v113];

      [v112 setAffectedStores:0];
      [v112 setPredicate:v111];
      [v112 setAffectedStores:0];
      uint64_t v114 = NSManagedObjectContext.count<A>(for:)();

      *(void *)&long long v158 = 0;
      *((void *)&v158 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      *(void *)&long long v158 = 0x5B746E756F636361;
      *((void *)&v158 + 1) = 0xE800000000000000;
      v115._countAndFlagsBits = v140;
      Swift::Int v116 = v142;
      v115._object = v142;
      String.append(_:)(v115);
      v117._object = (void *)0x80000001007CB010;
      v117._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v117);
      long long v118 = v158;
      *(void *)&long long v158 = v114;
      uint64_t v119 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v121 = v120;
      uint64_t v122 = v155;
      char v123 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v158 = v122;
      sub_1002C3F10(v119, v121, v118, *((uint64_t *)&v118 + 1), v123);
      uint64_t v124 = v158;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v125 = (void *)sub_1002F52FC(v110);
      id v126 = [objc_allocWithZone((Class)NSFetchRequest) init];
      id v127 = [v153 entity];
      [v126 setEntity:v127];

      [v126 setAffectedStores:0];
      [v126 setPredicate:v125];
      [v126 setAffectedStores:0];
      uint64_t v128 = NSManagedObjectContext.count<A>(for:)();

      *(void *)&long long v158 = 0;
      *((void *)&v158 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      *(void *)&long long v158 = 0x5B746E756F636361;
      *((void *)&v158 + 1) = 0xE800000000000000;
      v129._countAndFlagsBits = v140;
      v129._object = v116;
      String.append(_:)(v129);
      swift_bridgeObjectRelease();
      v130._countAndFlagsBits = 0xD000000000000023;
      v130._object = (void *)0x80000001007CB030;
      String.append(_:)(v130);
      long long v131 = v158;
      *(void *)&long long v158 = v128;
      uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v134 = v133;
      char v135 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v158 = v124;
      sub_1002C3F10(v132, v134, v131, *((uint64_t *)&v131 + 1), v135);
      id ObjCClassFromMetadata = (id)v158;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return (unint64_t)ObjCClassFromMetadata;
  }
  uint64_t v44 = v150;
  uint64_t v65 = *(void *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  BOOL v66 = INDateRelevanceProvider_ptr;
  if (!v65) {
    goto LABEL_36;
  }
LABEL_18:
  if (v65 >= 1)
  {
    uint64_t v67 = 0;
    unint64_t v149 = v44 & 0xC000000000000001;
    uint64_t v148 = v145 + 56;
    uint64_t v68 = (void (**)(char *, uint64_t, uint64_t))(v145 + 32);
    v156 = _swiftEmptyArrayStorage;
    do
    {
      if (v149) {
        id v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v70 = *(id *)(v44 + 8 * v67 + 32);
      }
      uint64_t v71 = v70;
      id v72 = [v70 identifier];
      if (v72)
      {
        uint64_t v73 = v72;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v74 = v60;
        uint64_t v75 = 0;
      }
      else
      {
        uint64_t v74 = v60;
        uint64_t v75 = 1;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v153)(v74, v75, 1, v7);
      uint64_t v76 = v155;
      sub_100096408(v60, v155, (uint64_t *)&unk_100909E50);

      if (v151(v76, 1, v7) == 1)
      {
        sub_1000966BC(v76, (uint64_t *)&unk_100909E50);
        BOOL v66 = INDateRelevanceProvider_ptr;
        uint64_t v44 = v150;
        uint64_t v69 = v65;
      }
      else
      {
        uint64_t v77 = v76;
        uint64_t v78 = *v68;
        uint64_t v79 = v146;
        (*v68)(v146, v77, v7);
        v78((char *)v154, (uint64_t)v79, v7);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v80 = v156;
        }
        else {
          uint64_t v80 = (void *)sub_100309EC8(0, v156[2] + 1, 1, (unint64_t)v156);
        }
        uint64_t v69 = v65;
        unint64_t v82 = v80[2];
        unint64_t v81 = v80[3];
        if (v82 >= v81 >> 1) {
          uint64_t v80 = (void *)sub_100309EC8(v81 > 1, v82 + 1, 1, (unint64_t)v80);
        }
        v80[2] = v82 + 1;
        unint64_t v83 = (*(unsigned __int8 *)(v145 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80);
        v156 = v80;
        v78((char *)v80 + v83 + *(void *)(v145 + 72) * v82, v154, v7);
        BOOL v66 = INDateRelevanceProvider_ptr;
        uint64_t v60 = (uint64_t)v147;
        uint64_t v44 = v150;
      }
      ++v67;
    }
    while (v69 != v67);
    goto LABEL_37;
  }
  __break(1u);
LABEL_45:
  *(void *)&long long v158 = 0;
  *((void *)&v158 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v137._countAndFlagsBits = 0xD00000000000002CLL;
  v137._object = (void *)0x80000001007CAF70;
  String.append(_:)(v137);
  uint64_t v157 = v44;
  sub_100094134((uint64_t *)&unk_10090B070);
  _print_unlocked<A, B>(_:_:)();
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10010DEEC(uint64_t *a1, id *a2, void *a3)
{
  unint64_t v82 = a3;
  uint64_t v85 = a1;
  uint64_t v4 = _s10PredicatesOMa(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v76 = (void **)((char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v77 = (void **)((char *)&v76 - v8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v78 = (void **)((char *)&v76 - v10);
  __chkstk_darwin(v9);
  uint64_t v12 = (void **)((char *)&v76 - v11);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = *a2;
  id v18 = [*a2 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = UUID.uuidString.getter();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v86 = 0;
  unint64_t v87 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v22._countAndFlagsBits = 0x5B746E756F636361;
  v22._object = (void *)0xE800000000000000;
  String.append(_:)(v22);
  uint64_t v81 = v19;
  v23._countAndFlagsBits = v19;
  uint64_t v84 = v21;
  v23._object = v21;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD00000000000002FLL;
  v24._object = (void *)0x80000001007CAE90;
  String.append(_:)(v24);
  uint64_t v26 = v86;
  uint64_t v25 = v87;
  uint64_t v27 = sub_100094134(&qword_10090B060);
  uint64_t v28 = *(int *)(v27 + 64);
  *uint64_t v12 = v17;
  uint64_t v79 = _s10PredicatesO19CompletionPredicateOMa(0);
  swift_storeEnumTagMultiPayload();
  *((unsigned char *)v12 + v28) = 0;
  uint64_t v80 = v4;
  uint64_t v29 = v82;
  swift_storeEnumTagMultiPayload();
  id v30 = v17;
  uint64_t v31 = (void *)sub_10038F1F0();
  sub_10011C774((uint64_t)v12, _s10PredicatesOMa);
  uint64_t v32 = v83;
  sub_1000F7C68(v26, v25, (uint64_t)v31, (uint64_t)v29, v85);
  if (v32)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v86 = 0;
    unint64_t v87 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v33._countAndFlagsBits = 0x5B746E756F636361;
    v33._object = (void *)0xE800000000000000;
    String.append(_:)(v33);
    v34._countAndFlagsBits = v81;
    id v35 = v84;
    v34._object = v84;
    String.append(_:)(v34);
    v36._countAndFlagsBits = 0xD00000000000002CLL;
    v36._object = (void *)0x80000001007CAEC0;
    String.append(_:)(v36);
    uint64_t v38 = v86;
    uint64_t v37 = v87;
    uint64_t v39 = (uint64_t)v78;
    uint64_t v40 = *(int *)(v27 + 64);
    *uint64_t v78 = v30;
    swift_storeEnumTagMultiPayload();
    *(unsigned char *)(v39 + v40) = 1;
    swift_storeEnumTagMultiPayload();
    id v41 = v30;
    uint64_t v42 = (void *)sub_10038F1F0();
    sub_10011C774(v39, _s10PredicatesOMa);
    sub_1000F7C68(v38, v37, (uint64_t)v42, (uint64_t)v29, v85);
    swift_bridgeObjectRelease();

    uint64_t v43 = v41;
    uint64_t v44 = v35;
    uint64_t v86 = 0;
    unint64_t v87 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v45._countAndFlagsBits = 0x5B746E756F636361;
    v45._object = (void *)0xE800000000000000;
    String.append(_:)(v45);
    v46._countAndFlagsBits = v81;
    v46._object = v35;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 0xD00000000000002ELL;
    v47._object = (void *)0x80000001007CAEF0;
    String.append(_:)(v47);
    uint64_t v48 = v27;
    uint64_t v50 = v86;
    uint64_t v49 = v87;
    uint64_t v51 = (uint64_t)v77;
    uint64_t v52 = v48;
    uint64_t v53 = *(int *)(v48 + 64);
    void *v77 = v43;
    swift_storeEnumTagMultiPayload();
    *(unsigned char *)(v51 + v53) = 0;
    swift_storeEnumTagMultiPayload();
    id v54 = v43;
    Swift::String v55 = (void *)sub_10038F1F0();
    sub_10011C774(v51, _s10PredicatesOMa);
    sub_1000F7C68(v50, v49, (uint64_t)v55, (uint64_t)v29, v85);
    swift_bridgeObjectRelease();

    uint64_t v86 = 0;
    unint64_t v87 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v56._countAndFlagsBits = 0x5B746E756F636361;
    v56._object = (void *)0xE800000000000000;
    String.append(_:)(v56);
    v57._countAndFlagsBits = v81;
    v57._object = v44;
    String.append(_:)(v57);
    v58._countAndFlagsBits = 0xD00000000000002BLL;
    v58._object = (void *)0x80000001007CAF20;
    String.append(_:)(v58);
    uint64_t v60 = v86;
    uint64_t v59 = v87;
    uint64_t v61 = (uint64_t)v76;
    uint64_t v62 = *(int *)(v52 + 64);
    *uint64_t v76 = v54;
    swift_storeEnumTagMultiPayload();
    *(unsigned char *)(v61 + v62) = 1;
    swift_storeEnumTagMultiPayload();
    id v63 = v54;
    uint64_t v64 = (void *)sub_10038F1F0();
    sub_10011C774(v61, _s10PredicatesOMa);
    sub_1000F7C68(v60, v59, (uint64_t)v64, (uint64_t)v29, v85);
    uint64_t v65 = v81;
    swift_bridgeObjectRelease();

    BOOL v66 = sub_100694DC0(v63);
    uint64_t v67 = (void *)sub_1005513B0(v66, 0);

    if (v67)
    {
      swift_bridgeObjectRelease();
      sub_10010C4A4(v67, 0xD000000000000011, (void *)0x800000010077BE40, v29);
      v69._rawValue = v68;
      sub_100094134(&qword_10090B068);
      Dictionary.merge(takingValuesIn:)(v69);
      swift_bridgeObjectRelease();
      sub_10010C4A4(v67, 0x6574656C706D6F63, (void *)0xE900000000000064, v29);
      Dictionary.merge(takingValuesIn:)(v70);
      swift_bridgeObjectRelease();
      unint64_t v71 = sub_10010CCE8(v67, (uint64_t)v29);
      Dictionary.merge(takingValuesIn:)((Swift::OpaquePointer)v71);

      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_100906EB8 != -1) {
        swift_once();
      }
      uint64_t v72 = type metadata accessor for Logger();
      sub_10008E2DC(v72, (uint64_t)qword_10090ADC0);
      swift_bridgeObjectRetain();
      uint64_t v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = (uint8_t *)swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v88 = sub_1000C51B8(v65, (unint64_t)v44, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Cannot get cdAccount from %s for extra container stats", v75, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
  }
}

uint64_t sub_10010E7EC(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = (void *)a1;
  uint64_t v13 = a1;
  if (a2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v9 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 8 * i);
      uint64_t v6 = v9;
      uint64_t v10 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v12 = v9;
      sub_10010DEEC(&v13, &v12, a3);
      if (v3)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return (uint64_t)v6;
      }

      if (v10 == v7)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v6;
}

void sub_10010E920(int a1, int64_t a2, void (**a3)(void, void, void))
{
  v374 = a3;
  int64_t v388 = a2;
  LODWORD(v387) = a1;
  uint64_t v372 = type metadata accessor for DispatchTime();
  uint64_t v371 = *(void *)(v372 - 8);
  uint64_t v3 = __chkstk_darwin(v372);
  v369 = (char *)v362 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v370 = (char *)v362 - v5;
  uint64_t v368 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v367 = *(void *)(v368 - 8);
  __chkstk_darwin(v368);
  v366 = (char *)v362 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v365 = type metadata accessor for DispatchQoS();
  uint64_t v364 = *(void *)(v365 - 8);
  __chkstk_darwin(v365);
  v363 = (char *)v362 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v381 = type metadata accessor for UUID();
  v378 = *(void (***)(char *, uint64_t))(v381 - 8);
  __chkstk_darwin(v381);
  v380 = (char *)v362 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v385 = type metadata accessor for REMAccountSnapshotSummary();
  uint64_t v382 = *(void *)(v385 - 8);
  __chkstk_darwin(v385);
  v384 = (char *)v362 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134(&qword_10090B050);
  __chkstk_darwin(v10 - 8);
  v386 = (char *)v362 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [self processInfo];
  uint64_t v13 = swift_allocObject();
  unint64_t v14 = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v376 = v13;
  *(void *)(v13 + 16) = v14;
  v392 = (void *)(v13 + 16);
  id v383 = v12;
  id v15 = [v12 environment];
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = 0;
  uint64_t v18 = *(void *)(v16 + 64);
  int64_t v389 = v16 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  v390 = (void *)((unint64_t)(v19 + 63) >> 6);
  v391 = (void *)v16;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v17 << 6);
      goto LABEL_22;
    }
    uint64_t v25 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_271;
    }
    if (v25 >= (uint64_t)v390) {
      goto LABEL_33;
    }
    unint64_t v26 = *(void *)(v389 + 8 * v25);
    ++v17;
    if (!v26)
    {
      uint64_t v17 = v25 + 1;
      if (v25 + 1 >= (uint64_t)v390) {
        goto LABEL_33;
      }
      unint64_t v26 = *(void *)(v389 + 8 * v17);
      if (!v26)
      {
        uint64_t v17 = v25 + 2;
        if (v25 + 2 >= (uint64_t)v390) {
          goto LABEL_33;
        }
        unint64_t v26 = *(void *)(v389 + 8 * v17);
        if (!v26) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v21 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_22:
    uint64_t v28 = 16 * v24;
    uint64_t v29 = (uint64_t *)(v391[6] + v28);
    uint64_t v30 = *v29;
    uint64_t v31 = (void *)v29[1];
    uint64_t v32 = (uint64_t *)(v391[7] + v28);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    *(void *)&long long aBlock = 779513445;
    *((void *)&aBlock + 1) = 0xE400000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35._countAndFlagsBits = v30;
    v35._object = v31;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    long long v36 = aBlock;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long aBlock = *v392;
    uint64_t v38 = aBlock;
    void *v392 = 0x8000000000000000;
    unint64_t v40 = sub_1001806F8(v36, *((uint64_t *)&v36 + 1));
    uint64_t v41 = *(void *)(v38 + 16);
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      goto LABEL_262;
    }
    char v44 = v39;
    if (*(void *)(v38 + 24) >= v43)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        Swift::String v47 = (void *)aBlock;
        if (v39) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_100318A14();
        Swift::String v47 = (void *)aBlock;
        if (v44) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_10030E654(v43, isUniquelyReferenced_nonNull_native);
      unint64_t v45 = sub_1001806F8(v36, *((uint64_t *)&v36 + 1));
      if ((v44 & 1) != (v46 & 1)) {
        goto LABEL_291;
      }
      unint64_t v40 = v45;
      Swift::String v47 = (void *)aBlock;
      if (v44)
      {
LABEL_4:
        Swift::String v22 = (void *)(v47[7] + 16 * v40);
        swift_bridgeObjectRelease();
        *Swift::String v22 = v34;
        v22[1] = v33;
        goto LABEL_5;
      }
    }
    v47[(v40 >> 6) + 8] |= 1 << v40;
    *(_OWORD *)(v47[6] + 16 * v40) = v36;
    uint64_t v48 = (void *)(v47[7] + 16 * v40);
    *uint64_t v48 = v34;
    v48[1] = v33;
    uint64_t v49 = v47[2];
    BOOL v50 = __OFADD__(v49, 1);
    uint64_t v51 = v49 + 1;
    if (v50) {
      goto LABEL_267;
    }
    v47[2] = v51;
    swift_bridgeObjectRetain();
LABEL_5:
    void *v392 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = v25 + 3;
  if (v27 >= (uint64_t)v390) {
    goto LABEL_33;
  }
  unint64_t v26 = *(void *)(v389 + 8 * v27);
  if (v26)
  {
    uint64_t v17 = v27;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v17 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      goto LABEL_284;
    }
    if (v17 >= (uint64_t)v390) {
      break;
    }
    unint64_t v26 = *(void *)(v389 + 8 * v17);
    ++v27;
    if (v26) {
      goto LABEL_21;
    }
  }
LABEL_33:
  swift_release();
  id v52 = v383;
  id v53 = [v383 arguments];
  id v54 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v55 = [v52 arguments];
  uint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v57 = *(void *)(v56 + 16);
  swift_bridgeObjectRelease();
  v391 = (void *)v54[2];
  if (v391 && v57)
  {
    int64_t v389 = v57;
    uint64_t v59 = v54[4];
    uint64_t v58 = v54[5];
    swift_bridgeObjectRetain();
    v390 = v54;
    uint64_t v60 = v54 + 7;
    unint64_t v61 = 1;
    while (1)
    {
      *(void *)&long long aBlock = 778531425;
      *((void *)&aBlock + 1) = 0xE400000000000000;
      v401[0] = v61 - 1;
      v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      long long v63 = aBlock;
      uint64_t v64 = v392;
      uint64_t v65 = *v392;
      char v66 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long aBlock = v65;
      *uint64_t v64 = 0x8000000000000000;
      unint64_t v68 = sub_1001806F8(v63, *((uint64_t *)&v63 + 1));
      uint64_t v69 = *(void *)(v65 + 16);
      BOOL v70 = (v67 & 1) == 0;
      uint64_t v71 = v69 + v70;
      if (__OFADD__(v69, v70)) {
        goto LABEL_281;
      }
      char v72 = v67;
      if (*(void *)(v65 + 24) >= v71)
      {
        if (v66)
        {
          uint64_t v75 = (void *)aBlock;
          if (v67) {
            goto LABEL_44;
          }
        }
        else
        {
          sub_100318A14();
          uint64_t v75 = (void *)aBlock;
          if (v72) {
            goto LABEL_44;
          }
        }
      }
      else
      {
        sub_10030E654(v71, v66);
        unint64_t v73 = sub_1001806F8(v63, *((uint64_t *)&v63 + 1));
        if ((v72 & 1) != (v74 & 1)) {
          goto LABEL_292;
        }
        unint64_t v68 = v73;
        uint64_t v75 = (void *)aBlock;
        if (v72)
        {
LABEL_44:
          uint64_t v79 = (void *)(v75[7] + 16 * v68);
          swift_bridgeObjectRelease();
          void *v79 = v59;
          v79[1] = v58;
          goto LABEL_45;
        }
      }
      v75[(v68 >> 6) + 8] |= 1 << v68;
      *(_OWORD *)(v75[6] + 16 * v68) = v63;
      uint64_t v76 = (void *)(v75[7] + 16 * v68);
      *uint64_t v76 = v59;
      v76[1] = v58;
      uint64_t v77 = v75[2];
      BOOL v50 = __OFADD__(v77, 1);
      uint64_t v78 = v77 + 1;
      if (v50) {
        goto LABEL_287;
      }
      v75[2] = v78;
      swift_bridgeObjectRetain();
LABEL_45:
      void *v392 = v75;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v391 == (void *)v61) {
        break;
      }
      if (v61 >= v390[2]) {
        goto LABEL_282;
      }
      if (v389 == v61) {
        break;
      }
      ++v61;
      uint64_t v59 = *(v60 - 1);
      uint64_t v58 = *v60;
      swift_bridgeObjectRetain();
      v60 += 2;
    }
  }
  swift_bridgeObjectRelease();
  LODWORD(aBlock) = [v383 processIdentifier];
  uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v82 = v81;
  char v83 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v84 = v392;
  *(void *)&long long aBlock = *v392;
  void *v392 = 0x8000000000000000;
  sub_1002C3F10(v80, v82, 6580592, 0xE300000000000000, v83);
  *uint64_t v84 = aBlock;
  swift_bridgeObjectRelease();
  int64_t v85 = v388 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_85;
  }
  unint64_t v87 = (void (*)(char *, char *, uint64_t))Strong;
  uint64_t v88 = *(void *)(v85 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t))(v88 + 48);
  v379 = v87;
  uint64_t v91 = v90(ObjectType, v88);
  uint64_t v92 = 0;
  uint64_t v93 = *(void *)(v91 + 64);
  int64_t v389 = v91 + 64;
  uint64_t v94 = 1 << *(unsigned char *)(v91 + 32);
  uint64_t v95 = -1;
  if (v94 < 64) {
    uint64_t v95 = ~(-1 << v94);
  }
  unint64_t v96 = v95 & v93;
  v390 = (void *)((unint64_t)(v94 + 63) >> 6);
  v391 = (void *)v91;
  while (1)
  {
    if (v96)
    {
      unint64_t v98 = __clz(__rbit64(v96));
      v96 &= v96 - 1;
      unint64_t v99 = v98 | (v92 << 6);
      goto LABEL_73;
    }
    uint64_t v100 = v92 + 1;
    if (__OFADD__(v92, 1)) {
      goto LABEL_278;
    }
    if (v100 >= (uint64_t)v390) {
      goto LABEL_84;
    }
    unint64_t v101 = *(void *)(v389 + 8 * v100);
    ++v92;
    if (!v101)
    {
      uint64_t v92 = v100 + 1;
      if (v100 + 1 >= (uint64_t)v390) {
        goto LABEL_84;
      }
      unint64_t v101 = *(void *)(v389 + 8 * v92);
      if (!v101)
      {
        uint64_t v92 = v100 + 2;
        if (v100 + 2 >= (uint64_t)v390) {
          goto LABEL_84;
        }
        unint64_t v101 = *(void *)(v389 + 8 * v92);
        if (!v101) {
          break;
        }
      }
    }
LABEL_72:
    unint64_t v96 = (v101 - 1) & v101;
    unint64_t v99 = __clz(__rbit64(v101)) + (v92 << 6);
LABEL_73:
    uint64_t v103 = 16 * v99;
    uint64_t v104 = (uint64_t *)(v391[6] + v103);
    uint64_t v105 = *v104;
    uint64_t v106 = (void *)v104[1];
    uint64_t v107 = (uint64_t *)(v391[7] + v103);
    uint64_t v109 = *v107;
    uint64_t v108 = v107[1];
    *(void *)&long long aBlock = 0x6F6D656144637078;
    *((void *)&aBlock + 1) = 0xEA00000000002E6ELL;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v110._countAndFlagsBits = v105;
    v110._object = v106;
    String.append(_:)(v110);
    swift_bridgeObjectRelease();
    long long v111 = aBlock;
    char v112 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long aBlock = *v392;
    uint64_t v113 = aBlock;
    void *v392 = 0x8000000000000000;
    unint64_t v115 = sub_1001806F8(v111, *((uint64_t *)&v111 + 1));
    uint64_t v116 = *(void *)(v113 + 16);
    BOOL v117 = (v114 & 1) == 0;
    uint64_t v118 = v116 + v117;
    if (__OFADD__(v116, v117)) {
      goto LABEL_266;
    }
    char v119 = v114;
    if (*(void *)(v113 + 24) >= v118)
    {
      if (v112)
      {
        uint64_t v122 = (void *)aBlock;
        if (v114) {
          goto LABEL_55;
        }
      }
      else
      {
        sub_100318A14();
        uint64_t v122 = (void *)aBlock;
        if (v119) {
          goto LABEL_55;
        }
      }
    }
    else
    {
      sub_10030E654(v118, v112);
      unint64_t v120 = sub_1001806F8(v111, *((uint64_t *)&v111 + 1));
      if ((v119 & 1) != (v121 & 1)) {
        goto LABEL_291;
      }
      unint64_t v115 = v120;
      uint64_t v122 = (void *)aBlock;
      if (v119)
      {
LABEL_55:
        uint64_t v97 = (void *)(v122[7] + 16 * v115);
        swift_bridgeObjectRelease();
        *uint64_t v97 = v109;
        v97[1] = v108;
        goto LABEL_56;
      }
    }
    v122[(v115 >> 6) + 8] |= 1 << v115;
    *(_OWORD *)(v122[6] + 16 * v115) = v111;
    char v123 = (void *)(v122[7] + 16 * v115);
    void *v123 = v109;
    v123[1] = v108;
    uint64_t v124 = v122[2];
    BOOL v50 = __OFADD__(v124, 1);
    uint64_t v125 = v124 + 1;
    if (v50) {
      goto LABEL_274;
    }
    v122[2] = v125;
    swift_bridgeObjectRetain();
LABEL_56:
    void *v392 = v122;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v102 = v100 + 3;
  if (v102 >= (uint64_t)v390) {
    goto LABEL_84;
  }
  unint64_t v101 = *(void *)(v389 + 8 * v102);
  if (v101)
  {
    uint64_t v92 = v102;
    goto LABEL_72;
  }
  while (1)
  {
    uint64_t v92 = v102 + 1;
    if (__OFADD__(v102, 1)) {
      goto LABEL_288;
    }
    if (v92 >= (uint64_t)v390) {
      break;
    }
    unint64_t v101 = *(void *)(v389 + 8 * v92);
    ++v102;
    if (v101) {
      goto LABEL_72;
    }
  }
LABEL_84:
  swift_unknownObjectRelease();
  swift_release();
LABEL_85:
  id v373 = [self sharedInstance];
  id v126 = [v373 status];
  uint64_t v127 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v128 = 0;
  uint64_t v129 = *(void *)(v127 + 64);
  int64_t v389 = v127 + 64;
  uint64_t v130 = 1 << *(unsigned char *)(v127 + 32);
  uint64_t v131 = -1;
  if (v130 < 64) {
    uint64_t v131 = ~(-1 << v130);
  }
  unint64_t v132 = v131 & v129;
  v390 = (void *)((unint64_t)(v130 + 63) >> 6);
  v391 = (void *)v127;
  while (2)
  {
    if (v132)
    {
      unint64_t v134 = __clz(__rbit64(v132));
      v132 &= v132 - 1;
      unint64_t v135 = v134 | (v128 << 6);
      goto LABEL_106;
    }
    uint64_t v136 = v128 + 1;
    if (__OFADD__(v128, 1)) {
      goto LABEL_272;
    }
    if (v136 >= (uint64_t)v390) {
      goto LABEL_117;
    }
    unint64_t v137 = *(void *)(v389 + 8 * v136);
    ++v128;
    if (v137) {
      goto LABEL_105;
    }
    uint64_t v128 = v136 + 1;
    if (v136 + 1 >= (uint64_t)v390) {
      goto LABEL_117;
    }
    unint64_t v137 = *(void *)(v389 + 8 * v128);
    if (v137) {
      goto LABEL_105;
    }
    uint64_t v128 = v136 + 2;
    if (v136 + 2 >= (uint64_t)v390) {
      goto LABEL_117;
    }
    unint64_t v137 = *(void *)(v389 + 8 * v128);
    if (v137)
    {
LABEL_105:
      unint64_t v132 = (v137 - 1) & v137;
      unint64_t v135 = __clz(__rbit64(v137)) + (v128 << 6);
LABEL_106:
      uint64_t v139 = 16 * v135;
      uint64_t v140 = (uint64_t *)(v391[6] + v139);
      uint64_t v141 = *v140;
      v142 = (void *)v140[1];
      id v143 = (uint64_t *)(v391[7] + v139);
      uint64_t v145 = *v143;
      uint64_t v144 = v143[1];
      *(void *)&long long aBlock = 0;
      *((void *)&aBlock + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&aBlock, "AppleAccounts.");
      HIBYTE(aBlock) = -18;
      v146._countAndFlagsBits = v141;
      v146._object = v142;
      String.append(_:)(v146);
      swift_bridgeObjectRelease();
      long long v147 = aBlock;
      char v148 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long aBlock = *v392;
      uint64_t v149 = aBlock;
      void *v392 = 0x8000000000000000;
      unint64_t v151 = sub_1001806F8(v147, *((uint64_t *)&v147 + 1));
      uint64_t v152 = *(void *)(v149 + 16);
      BOOL v153 = (v150 & 1) == 0;
      uint64_t v154 = v152 + v153;
      if (__OFADD__(v152, v153)) {
        goto LABEL_263;
      }
      char v155 = v150;
      if (*(void *)(v149 + 24) < v154)
      {
        sub_10030E654(v154, v148);
        unint64_t v156 = sub_1001806F8(v147, *((uint64_t *)&v147 + 1));
        if ((v155 & 1) != (v157 & 1)) {
          goto LABEL_291;
        }
        unint64_t v151 = v156;
        long long v158 = (void *)aBlock;
        if ((v155 & 1) == 0) {
          goto LABEL_113;
        }
LABEL_88:
        uint64_t v133 = (void *)(v158[7] + 16 * v151);
        swift_bridgeObjectRelease();
        *uint64_t v133 = v145;
        v133[1] = v144;
LABEL_89:
        void *v392 = v158;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        continue;
      }
      if (v148)
      {
        long long v158 = (void *)aBlock;
        if (v150) {
          goto LABEL_88;
        }
      }
      else
      {
        sub_100318A14();
        long long v158 = (void *)aBlock;
        if (v155) {
          goto LABEL_88;
        }
      }
LABEL_113:
      v158[(v151 >> 6) + 8] |= 1 << v151;
      *(_OWORD *)(v158[6] + 16 * v151) = v147;
      uint64_t v159 = (void *)(v158[7] + 16 * v151);
      *uint64_t v159 = v145;
      v159[1] = v144;
      uint64_t v160 = v158[2];
      BOOL v50 = __OFADD__(v160, 1);
      uint64_t v161 = v160 + 1;
      if (v50) {
        goto LABEL_268;
      }
      v158[2] = v161;
      swift_bridgeObjectRetain();
      goto LABEL_89;
    }
    break;
  }
  uint64_t v138 = v136 + 3;
  if (v138 >= (uint64_t)v390) {
    goto LABEL_117;
  }
  unint64_t v137 = *(void *)(v389 + 8 * v138);
  if (v137)
  {
    uint64_t v128 = v138;
    goto LABEL_105;
  }
  while (1)
  {
    uint64_t v128 = v138 + 1;
    if (__OFADD__(v138, 1)) {
      goto LABEL_285;
    }
    if (v128 >= (uint64_t)v390) {
      break;
    }
    unint64_t v137 = *(void *)(v389 + 8 * v128);
    ++v138;
    if (v137) {
      goto LABEL_105;
    }
  }
LABEL_117:
  swift_release();
  id v375 = *(id *)(v388 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  id v162 = [v375 status:v387 & 1];
  uint64_t v163 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v164 = 0;
  uint64_t v165 = *(void *)(v163 + 64);
  int64_t v388 = v163 + 64;
  uint64_t v166 = 1 << *(unsigned char *)(v163 + 32);
  uint64_t v167 = -1;
  if (v166 < 64) {
    uint64_t v167 = ~(-1 << v166);
  }
  unint64_t v168 = v167 & v165;
  int64_t v389 = (unint64_t)(v166 + 63) >> 6;
  v390 = (void *)0x80000001007CB060;
  v391 = (void *)v163;
  while (2)
  {
    v170 = v386;
    if (v168)
    {
      unint64_t v171 = __clz(__rbit64(v168));
      v168 &= v168 - 1;
      unint64_t v172 = v171 | (v164 << 6);
      goto LABEL_138;
    }
    int64_t v173 = v164 + 1;
    if (__OFADD__(v164, 1)) {
      goto LABEL_273;
    }
    if (v173 >= v389) {
      goto LABEL_149;
    }
    unint64_t v174 = *(void *)(v388 + 8 * v173);
    ++v164;
    if (v174) {
      goto LABEL_137;
    }
    int64_t v164 = v173 + 1;
    if (v173 + 1 >= v389) {
      goto LABEL_149;
    }
    unint64_t v174 = *(void *)(v388 + 8 * v164);
    if (v174) {
      goto LABEL_137;
    }
    int64_t v164 = v173 + 2;
    if (v173 + 2 >= v389) {
      goto LABEL_149;
    }
    unint64_t v174 = *(void *)(v388 + 8 * v164);
    if (v174)
    {
LABEL_137:
      unint64_t v168 = (v174 - 1) & v174;
      unint64_t v172 = __clz(__rbit64(v174)) + (v164 << 6);
LABEL_138:
      uint64_t v176 = 16 * v172;
      id v177 = (uint64_t *)(v391[6] + v176);
      uint64_t v178 = *v177;
      v179 = (void *)v177[1];
      v180 = (uint64_t *)(v391[7] + v176);
      uint64_t v181 = *v180;
      uint64_t v182 = v180[1];
      *(void *)&long long aBlock = 0;
      *((void *)&aBlock + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      *(void *)&long long aBlock = 0xD000000000000010;
      *((void *)&aBlock + 1) = v390;
      v183._countAndFlagsBits = v178;
      v183._object = v179;
      String.append(_:)(v183);
      swift_bridgeObjectRelease();
      long long v184 = aBlock;
      char v185 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long aBlock = *v392;
      uint64_t v186 = aBlock;
      void *v392 = 0x8000000000000000;
      unint64_t v188 = sub_1001806F8(v184, *((uint64_t *)&v184 + 1));
      uint64_t v189 = *(void *)(v186 + 16);
      BOOL v190 = (v187 & 1) == 0;
      uint64_t v191 = v189 + v190;
      if (__OFADD__(v189, v190)) {
        goto LABEL_264;
      }
      char v192 = v187;
      if (*(void *)(v186 + 24) < v191)
      {
        sub_10030E654(v191, v185);
        unint64_t v193 = sub_1001806F8(v184, *((uint64_t *)&v184 + 1));
        if ((v192 & 1) != (v194 & 1)) {
          goto LABEL_291;
        }
        unint64_t v188 = v193;
        uint64_t v195 = (void *)aBlock;
        if ((v192 & 1) == 0) {
          goto LABEL_145;
        }
LABEL_120:
        v169 = (void *)(v195[7] + 16 * v188);
        swift_bridgeObjectRelease();
        void *v169 = v181;
        v169[1] = v182;
LABEL_121:
        void *v392 = v195;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        continue;
      }
      if (v185)
      {
        uint64_t v195 = (void *)aBlock;
        if (v187) {
          goto LABEL_120;
        }
      }
      else
      {
        sub_100318A14();
        uint64_t v195 = (void *)aBlock;
        if (v192) {
          goto LABEL_120;
        }
      }
LABEL_145:
      v195[(v188 >> 6) + 8] |= 1 << v188;
      *(_OWORD *)(v195[6] + 16 * v188) = v184;
      uint64_t v196 = (void *)(v195[7] + 16 * v188);
      *uint64_t v196 = v181;
      v196[1] = v182;
      uint64_t v197 = v195[2];
      BOOL v50 = __OFADD__(v197, 1);
      uint64_t v198 = v197 + 1;
      if (v50) {
        goto LABEL_270;
      }
      v195[2] = v198;
      swift_bridgeObjectRetain();
      goto LABEL_121;
    }
    break;
  }
  int64_t v175 = v173 + 3;
  if (v175 >= v389) {
    goto LABEL_149;
  }
  unint64_t v174 = *(void *)(v388 + 8 * v175);
  if (v174)
  {
    int64_t v164 = v175;
    goto LABEL_137;
  }
  while (1)
  {
    int64_t v164 = v175 + 1;
    if (__OFADD__(v175, 1)) {
      goto LABEL_286;
    }
    if (v164 >= v389) {
      break;
    }
    unint64_t v174 = *(void *)(v388 + 8 * v164);
    ++v175;
    if (v174) {
      goto LABEL_137;
    }
  }
LABEL_149:
  swift_release();
  v401[0] = 0xD000000000000013;
  v401[1] = 0x80000001007CAE70;
  memset(&v401[2], 0, 30);
  uint64_t v199 = sub_1003B5F5C((uint64_t)v401, (uint64_t)sub_1003EEF60, 0);
  v362[1] = 0;
  uint64_t v200 = *(void **)(v199 + 16);
  long long aBlock = (unint64_t)v199;
  v394 = 0;
  v395 = v200;
  v396 = 0;
  LOBYTE(v397) = 0;
  sub_1000F725C((uint64_t)v170);
  uint64_t v201 = v170;
  uint64_t v202 = sub_100094134(&qword_10090B058);
  int v203 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v202 - 8) + 48))(v201, 1, v202);
  uint64_t v204 = v385;
  uint64_t v205 = v384;
  if (v203 != 1)
  {
    v379 = *(void (**)(char *, char *, uint64_t))(v382 + 32);
    ++v378;
    v382 += 32;
    v377 = (void (**)(char *, uint64_t))(v382 - 24);
    do
    {
      int64_t v304 = *(void *)&v201[*(int *)(v202 + 48)];
      v379(v205, v201, v204);
      uint64_t v399 = 0;
      unint64_t v400 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      int64_t v398 = v304;
      uint64_t v399 = 0x53746E756F636361;
      unint64_t v400 = 0xEF2E7972616D6D75;
      int64_t v389 = v304;
      v305._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v305);
      swift_bridgeObjectRelease();
      v306._countAndFlagsBits = 0x746E756F6363612ELL;
      v306._object = (void *)0xEA00000000004449;
      String.append(_:)(v306);
      uint64_t v308 = v399;
      uint64_t v307 = v400;
      v309 = (void *)REMAccountSnapshotSummary.accountID.getter();
      id v310 = [v309 uuid];

      v311 = v380;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v312 = UUID.uuidString.getter();
      uint64_t v314 = v313;
      (*v378)(v311, v381);
      v315 = v392;
      uint64_t v316 = *v392;
      char v317 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v399 = v316;
      uint64_t *v315 = 0x8000000000000000;
      sub_1002C3F10(v312, v314, v308, v307, v317);
      uint64_t *v315 = v399;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v318 = REMAccountSnapshotSummary.nsPayload.getter();
      id v319 = 0;
      uint64_t v320 = *(void *)(v318 + 64);
      v387 = (void *)(v318 + 64);
      v390 = (void *)v318;
      uint64_t v321 = 1 << *(unsigned char *)(v318 + 32);
      if (v321 < 64) {
        uint64_t v322 = ~(-1 << v321);
      }
      else {
        uint64_t v322 = -1;
      }
      unint64_t v323 = v322 & v320;
      int64_t v388 = (unint64_t)(v321 + 63) >> 6;
      while (1)
      {
        if (v323)
        {
          unint64_t v325 = __clz(__rbit64(v323));
          v323 &= v323 - 1;
          v391 = v319;
          unint64_t v326 = v325 | ((void)v319 << 6);
          goto LABEL_249;
        }
        int64_t v327 = (int64_t)v319 + 1;
        uint64_t v328 = v385;
        uint64_t v205 = v384;
        if (__OFADD__(v319, 1)) {
          goto LABEL_265;
        }
        if (v327 >= v388) {
          break;
        }
        unint64_t v329 = v387[v327];
        int64_t v330 = (int64_t)v319 + 1;
        if (!v329)
        {
          int64_t v330 = (int64_t)v319 + 2;
          if ((uint64_t)v319 + 2 >= v388) {
            break;
          }
          unint64_t v329 = v387[v330];
          if (!v329)
          {
            int64_t v330 = (int64_t)v319 + 3;
            if ((uint64_t)v319 + 3 >= v388) {
              break;
            }
            unint64_t v329 = v387[v330];
            if (!v329)
            {
              v331 = (char *)v319 + 4;
              if ((uint64_t)v319 + 4 >= v388) {
                break;
              }
              unint64_t v329 = v387[(void)v331];
              if (!v329)
              {
                while (1)
                {
                  int64_t v330 = (int64_t)(v331 + 1);
                  if (__OFADD__(v331, 1)) {
                    break;
                  }
                  if (v330 >= v388) {
                    goto LABEL_226;
                  }
                  unint64_t v329 = v387[v330];
                  ++v331;
                  if (v329) {
                    goto LABEL_248;
                  }
                }
LABEL_276:
                __break(1u);
LABEL_277:
                __break(1u);
LABEL_278:
                __break(1u);
LABEL_279:
                __break(1u);
LABEL_280:
                __break(1u);
LABEL_281:
                __break(1u);
LABEL_282:
                __break(1u);
LABEL_283:
                __break(1u);
LABEL_284:
                __break(1u);
LABEL_285:
                __break(1u);
LABEL_286:
                __break(1u);
LABEL_287:
                __break(1u);
LABEL_288:
                __break(1u);
                goto LABEL_289;
              }
              int64_t v330 = (int64_t)v319 + 4;
            }
          }
        }
LABEL_248:
        unint64_t v323 = (v329 - 1) & v329;
        v391 = (void *)v330;
        unint64_t v326 = __clz(__rbit64(v329)) + (v330 << 6);
LABEL_249:
        v332 = (uint64_t *)(v390[6] + 16 * v326);
        uint64_t v333 = *v332;
        v334 = (void *)v332[1];
        v335 = *(void **)(v390[7] + 8 * v326);
        uint64_t v399 = 0;
        unint64_t v400 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        id v336 = v335;
        _StringGuts.grow(_:)(20);
        swift_bridgeObjectRelease();
        uint64_t v399 = 0x53746E756F636361;
        unint64_t v400 = 0xEF2E7972616D6D75;
        int64_t v398 = v389;
        v337._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v337);
        swift_bridgeObjectRelease();
        v338._countAndFlagsBits = 46;
        v338._object = (void *)0xE100000000000000;
        String.append(_:)(v338);
        v339._countAndFlagsBits = v333;
        v339._object = v334;
        String.append(_:)(v339);
        swift_bridgeObjectRelease();
        uint64_t v341 = v399;
        uint64_t v340 = v400;
        id v342 = [v336 stringValue];
        uint64_t v343 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v345 = v344;

        v346 = v392;
        uint64_t v347 = *v392;
        char v348 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v399 = v347;
        void *v346 = 0x8000000000000000;
        unint64_t v350 = sub_1001806F8(v341, v340);
        uint64_t v351 = *(void *)(v347 + 16);
        BOOL v352 = (v349 & 1) == 0;
        uint64_t v353 = v351 + v352;
        if (__OFADD__(v351, v352))
        {
          __break(1u);
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
LABEL_275:
          __break(1u);
          goto LABEL_276;
        }
        char v354 = v349;
        if (*(void *)(v347 + 24) >= v353)
        {
          if (v348)
          {
            v357 = (void *)v399;
            if (v349) {
              goto LABEL_231;
            }
          }
          else
          {
            sub_100318A14();
            v357 = (void *)v399;
            if (v354) {
              goto LABEL_231;
            }
          }
        }
        else
        {
          sub_10030E654(v353, v348);
          unint64_t v355 = sub_1001806F8(v341, v340);
          if ((v354 & 1) != (v356 & 1)) {
            goto LABEL_291;
          }
          unint64_t v350 = v355;
          v357 = (void *)v399;
          if (v354)
          {
LABEL_231:
            v324 = (uint64_t *)(v357[7] + 16 * v350);
            swift_bridgeObjectRelease();
            uint64_t *v324 = v343;
            v324[1] = v345;
            goto LABEL_232;
          }
        }
        v357[(v350 >> 6) + 8] |= 1 << v350;
        v358 = (uint64_t *)(v357[6] + 16 * v350);
        uint64_t *v358 = v341;
        v358[1] = v340;
        v359 = (uint64_t *)(v357[7] + 16 * v350);
        uint64_t *v359 = v343;
        v359[1] = v345;
        uint64_t v360 = v357[2];
        BOOL v50 = __OFADD__(v360, 1);
        uint64_t v361 = v360 + 1;
        if (v50) {
          goto LABEL_261;
        }
        v357[2] = v361;
        swift_bridgeObjectRetain();
LABEL_232:
        void *v392 = v357;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v319 = v391;
      }
LABEL_226:
      swift_release();
      (*v377)(v205, v328);
      uint64_t v201 = v386;
      sub_1000F725C((uint64_t)v386);
      uint64_t v204 = v328;
      uint64_t v202 = sub_100094134(&qword_10090B058);
    }
    while ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v202 - 8) + 48))(v201, 1, v202) != 1);
  }
  swift_bridgeObjectRelease();
  v206 = [v375 cloudContext];
  if (!v206)
  {
LABEL_220:
    uint64_t v286 = swift_allocObject();
    *(unsigned char *)(v286 + 16) = 1;
    id v287 = [self sharedBabysitter];
    if (v287)
    {
      v288 = v287;
      v289 = dispatch_group_create();
      dispatch_group_enter(v289);
      sub_1000963CC(0, (unint64_t *)&qword_10090F370);
      v290 = (void *)static OS_dispatch_queue.main.getter();
      v291 = (void *)swift_allocObject();
      v291[2] = v288;
      v291[3] = v289;
      v291[4] = v376;
      v291[5] = v286;
      v396 = sub_10011EDB0;
      v397 = v291;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      v394 = sub_100236C78;
      v395 = &unk_1008BAA90;
      v292 = _Block_copy(&aBlock);
      v391 = v288;
      v293 = v289;
      swift_retain();
      swift_retain();
      swift_release();
      v294 = v363;
      static DispatchQoS.unspecified.getter();
      *(void *)&long long aBlock = _swiftEmptyArrayStorage;
      sub_10011D8CC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100094134((uint64_t *)&unk_10090AFD0);
      sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
      v295 = v366;
      uint64_t v296 = v368;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v292);

      (*(void (**)(char *, uint64_t))(v367 + 8))(v295, v296);
      (*(void (**)(char *, uint64_t))(v364 + 8))(v294, v365);
      v297 = v369;
      static DispatchTime.now()();
      v298 = v370;
      + infix(_:_:)();
      v299 = *(void (**)(char *, uint64_t))(v371 + 8);
      uint64_t v300 = v372;
      v299(v297, v372);
      OS_dispatch_group.wait(timeout:)();

      v299(v298, v300);
    }
    swift_beginAccess();
    if (*(unsigned char *)(v286 + 16) == 1)
    {
      v301 = v392;
      swift_beginAccess();
      char v302 = swift_isUniquelyReferenced_nonNull_native();
      int64_t v398 = *v301;
      int64_t *v301 = 0x8000000000000000;
      sub_1002C3F10(0xD00000000000001ALL, 0x80000001007CB080, 0x7474697379626162, 0xEA00000000007265, v302);
      int64_t *v301 = v398;
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class, void))v374)[2](v374, isa, 0);

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v207 = v206;
  id v208 = [v206 readinessLoggingDescription];
  uint64_t v209 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v211 = v210;

  uint64_t v212 = v392;
  uint64_t v213 = *v392;
  char v214 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long aBlock = v213;
  *uint64_t v212 = 0x8000000000000000;
  sub_1002C3F10(v209, v211, 0xD000000000000028, 0x80000001007CB0A0, v214);
  *uint64_t v212 = aBlock;
  swift_bridgeObjectRelease();
  v387 = v207;
  Swift::Int v215 = (char *)[v207 lastSyncMetrics];
  if (!v215) {
    goto LABEL_186;
  }
  v386 = v215;
  id v216 = [v215 dictionaryRepresentation];
  uint64_t v217 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v218 = 0;
  uint64_t v219 = *(void *)(v217 + 64);
  int64_t v388 = v217 + 64;
  uint64_t v220 = 1 << *(unsigned char *)(v217 + 32);
  uint64_t v221 = -1;
  if (v220 < 64) {
    uint64_t v221 = ~(-1 << v220);
  }
  unint64_t v222 = v221 & v219;
  int64_t v389 = (unint64_t)(v220 + 63) >> 6;
  v390 = (void *)0x80000001007CB0F0;
  v391 = (void *)v217;
  while (2)
  {
    if (v222)
    {
      unint64_t v224 = __clz(__rbit64(v222));
      v222 &= v222 - 1;
      unint64_t v225 = v224 | (v218 << 6);
      goto LABEL_170;
    }
    BOOL v50 = __OFADD__(v218++, 1);
    if (v50) {
      goto LABEL_283;
    }
    if (v218 >= v389) {
      goto LABEL_185;
    }
    unint64_t v226 = *(void *)(v388 + 8 * v218);
    if (v226)
    {
LABEL_169:
      unint64_t v222 = (v226 - 1) & v226;
      unint64_t v225 = __clz(__rbit64(v226)) + (v218 << 6);
LABEL_170:
      uint64_t v228 = 16 * v225;
      v229 = (uint64_t *)(v391[6] + v228);
      uint64_t v230 = *v229;
      v231 = (void *)v229[1];
      v232 = (uint64_t *)(v391[7] + v228);
      uint64_t v233 = *v232;
      uint64_t v234 = v232[1];
      *(void *)&long long aBlock = 0;
      *((void *)&aBlock + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      *(void *)&long long aBlock = 0xD00000000000001DLL;
      *((void *)&aBlock + 1) = v390;
      v235._countAndFlagsBits = v230;
      v235._object = v231;
      String.append(_:)(v235);
      swift_bridgeObjectRelease();
      long long v236 = aBlock;
      char v237 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long aBlock = *v392;
      uint64_t v238 = aBlock;
      void *v392 = 0x8000000000000000;
      unint64_t v240 = sub_1001806F8(v236, *((uint64_t *)&v236 + 1));
      uint64_t v241 = *(void *)(v238 + 16);
      BOOL v242 = (v239 & 1) == 0;
      uint64_t v243 = v241 + v242;
      if (__OFADD__(v241, v242)) {
        goto LABEL_275;
      }
      char v244 = v239;
      if (*(void *)(v238 + 24) < v243)
      {
        sub_10030E654(v243, v237);
        unint64_t v245 = sub_1001806F8(v236, *((uint64_t *)&v236 + 1));
        if ((v244 & 1) != (v246 & 1)) {
          goto LABEL_291;
        }
        unint64_t v240 = v245;
        uint64_t v247 = (void *)aBlock;
        if ((v244 & 1) == 0) {
          goto LABEL_177;
        }
LABEL_155:
        v223 = (void *)(v247[7] + 16 * v240);
        swift_bridgeObjectRelease();
        void *v223 = v233;
        v223[1] = v234;
LABEL_156:
        void *v392 = v247;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        continue;
      }
      if (v237)
      {
        uint64_t v247 = (void *)aBlock;
        if (v239) {
          goto LABEL_155;
        }
      }
      else
      {
        sub_100318A14();
        uint64_t v247 = (void *)aBlock;
        if (v244) {
          goto LABEL_155;
        }
      }
LABEL_177:
      v247[(v240 >> 6) + 8] |= 1 << v240;
      *(_OWORD *)(v247[6] + 16 * v240) = v236;
      uint64_t v248 = (void *)(v247[7] + 16 * v240);
      *uint64_t v248 = v233;
      v248[1] = v234;
      uint64_t v249 = v247[2];
      BOOL v50 = __OFADD__(v249, 1);
      uint64_t v250 = v249 + 1;
      if (v50) {
        goto LABEL_280;
      }
      v247[2] = v250;
      swift_bridgeObjectRetain();
      goto LABEL_156;
    }
    break;
  }
  int64_t v227 = v218 + 1;
  if (v218 + 1 >= v389) {
    goto LABEL_185;
  }
  unint64_t v226 = *(void *)(v388 + 8 * v227);
  if (v226) {
    goto LABEL_168;
  }
  int64_t v227 = v218 + 2;
  if (v218 + 2 >= v389) {
    goto LABEL_185;
  }
  unint64_t v226 = *(void *)(v388 + 8 * v227);
  if (v226) {
    goto LABEL_168;
  }
  int64_t v227 = v218 + 3;
  if (v218 + 3 >= v389) {
    goto LABEL_185;
  }
  unint64_t v226 = *(void *)(v388 + 8 * v227);
  if (v226)
  {
LABEL_168:
    int64_t v218 = v227;
    goto LABEL_169;
  }
  while (1)
  {
    int64_t v218 = v227 + 1;
    if (__OFADD__(v227, 1)) {
      goto LABEL_290;
    }
    if (v218 >= v389) {
      break;
    }
    unint64_t v226 = *(void *)(v388 + 8 * v218);
    ++v227;
    if (v226) {
      goto LABEL_169;
    }
  }
LABEL_185:

  swift_release();
LABEL_186:
  id v251 = [v387 configurationDump];
  uint64_t v252 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v253 = 0;
  uint64_t v254 = *(void *)(v252 + 64);
  int64_t v388 = v252 + 64;
  uint64_t v255 = 1 << *(unsigned char *)(v252 + 32);
  uint64_t v256 = -1;
  if (v255 < 64) {
    uint64_t v256 = ~(-1 << v255);
  }
  unint64_t v257 = v256 & v254;
  int64_t v389 = (unint64_t)(v255 + 63) >> 6;
  v390 = (void *)0x80000001007CB0D0;
  v391 = (void *)v252;
  while (2)
  {
    if (v257)
    {
      unint64_t v259 = __clz(__rbit64(v257));
      v257 &= v257 - 1;
      unint64_t v260 = v259 | (v253 << 6);
      goto LABEL_204;
    }
    BOOL v50 = __OFADD__(v253++, 1);
    if (v50) {
      goto LABEL_279;
    }
    if (v253 >= v389)
    {
LABEL_219:

      swift_release();
      goto LABEL_220;
    }
    unint64_t v261 = *(void *)(v388 + 8 * v253);
    if (v261)
    {
LABEL_203:
      unint64_t v257 = (v261 - 1) & v261;
      unint64_t v260 = __clz(__rbit64(v261)) + (v253 << 6);
LABEL_204:
      uint64_t v263 = 16 * v260;
      v264 = (uint64_t *)(v391[6] + v263);
      uint64_t v265 = *v264;
      v266 = (void *)v264[1];
      v267 = (uint64_t *)(v391[7] + v263);
      uint64_t v268 = *v267;
      uint64_t v269 = v267[1];
      *(void *)&long long aBlock = 0;
      *((void *)&aBlock + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      *(void *)&long long aBlock = 0xD00000000000001BLL;
      *((void *)&aBlock + 1) = v390;
      v270._countAndFlagsBits = v265;
      v270._object = v266;
      String.append(_:)(v270);
      swift_bridgeObjectRelease();
      long long v271 = aBlock;
      char v272 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long aBlock = *v392;
      uint64_t v273 = aBlock;
      void *v392 = 0x8000000000000000;
      unint64_t v275 = sub_1001806F8(v271, *((uint64_t *)&v271 + 1));
      uint64_t v276 = *(void *)(v273 + 16);
      BOOL v277 = (v274 & 1) == 0;
      uint64_t v278 = v276 + v277;
      if (__OFADD__(v276, v277)) {
        goto LABEL_269;
      }
      char v279 = v274;
      if (*(void *)(v273 + 24) < v278)
      {
        sub_10030E654(v278, v272);
        unint64_t v280 = sub_1001806F8(v271, *((uint64_t *)&v271 + 1));
        if ((v279 & 1) != (v281 & 1)) {
          goto LABEL_291;
        }
        unint64_t v275 = v280;
        v282 = (void *)aBlock;
        if ((v279 & 1) == 0) {
          goto LABEL_211;
        }
LABEL_189:
        v258 = (void *)(v282[7] + 16 * v275);
        swift_bridgeObjectRelease();
        void *v258 = v268;
        v258[1] = v269;
LABEL_190:
        void *v392 = v282;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        continue;
      }
      if (v272)
      {
        v282 = (void *)aBlock;
        if (v274) {
          goto LABEL_189;
        }
      }
      else
      {
        sub_100318A14();
        v282 = (void *)aBlock;
        if (v279) {
          goto LABEL_189;
        }
      }
LABEL_211:
      v282[(v275 >> 6) + 8] |= 1 << v275;
      *(_OWORD *)(v282[6] + 16 * v275) = v271;
      v283 = (void *)(v282[7] + 16 * v275);
      void *v283 = v268;
      v283[1] = v269;
      uint64_t v284 = v282[2];
      BOOL v50 = __OFADD__(v284, 1);
      uint64_t v285 = v284 + 1;
      if (v50) {
        goto LABEL_277;
      }
      v282[2] = v285;
      swift_bridgeObjectRetain();
      goto LABEL_190;
    }
    break;
  }
  int64_t v262 = v253 + 1;
  if (v253 + 1 >= v389) {
    goto LABEL_219;
  }
  unint64_t v261 = *(void *)(v388 + 8 * v262);
  if (v261) {
    goto LABEL_202;
  }
  int64_t v262 = v253 + 2;
  if (v253 + 2 >= v389) {
    goto LABEL_219;
  }
  unint64_t v261 = *(void *)(v388 + 8 * v262);
  if (v261) {
    goto LABEL_202;
  }
  int64_t v262 = v253 + 3;
  if (v253 + 3 >= v389) {
    goto LABEL_219;
  }
  unint64_t v261 = *(void *)(v388 + 8 * v262);
  if (v261)
  {
LABEL_202:
    int64_t v253 = v262;
    goto LABEL_203;
  }
  while (1)
  {
    int64_t v253 = v262 + 1;
    if (__OFADD__(v262, 1)) {
      break;
    }
    if (v253 >= v389) {
      goto LABEL_219;
    }
    unint64_t v261 = *(void *)(v388 + 8 * v253);
    ++v262;
    if (v261) {
      goto LABEL_203;
    }
  }
LABEL_289:
  __break(1u);
LABEL_290:
  __break(1u);
LABEL_291:
  _Block_release(v374);
LABEL_292:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_100110F20(uint64_t a1, void (**a2)(void, void, void))
{
  uint64_t v154 = a2;
  uint64_t v3 = type metadata accessor for REMAccountSnapshotSummary();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_10090B050);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v167 = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v155 = a1;
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  v175[0] = 0xD000000000000013;
  v175[1] = 0x80000001007CAE70;
  memset(&v175[2], 0, 30);
  id v159 = v10;
  uint64_t v11 = sub_1003B5F5C((uint64_t)v175, (uint64_t)sub_1003EEF60, 0);
  long long v158 = v9;
  char v157 = v6;
  unint64_t v170 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v156 = 0;
  if (!v11) {
    goto LABEL_4;
  }
  uint64_t v12 = *(void *)(v11 + 16);
  long long v171 = (unint64_t)v11;
  uint64_t v172 = 0;
  uint64_t v173 = v12;
  v174[0] = 0;
  LOBYTE(v174[1]) = 0;
  uint64_t v13 = (uint64_t)v158;
  sub_1000F725C((uint64_t)v158);
  uint64_t v14 = sub_100094134(&qword_10090B058);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14) != 1)
  {
    uint64_t v95 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v94 = v4 + 32;
    BOOL v153 = v95;
    v152[0] = v94 - 24;
    unint64_t v96 = v157;
    uint64_t v160 = v3;
    v152[1] = v94;
    do
    {
      uint64_t v97 = *(void *)(v13 + *(int *)(v14 + 48));
      v153(v96, v13, v3);
      unint64_t v98 = (void *)REMAccountSnapshotSummary.accountID.getter();
      REMAccountSnapshotSummary.accountID.getter();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v169[0] = 0;
      v169[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      uint64_t v168 = v97;
      v169[0] = 0x53746E756F636361;
      v169[1] = 0xEF2E7972616D6D75;
      v99._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v99);
      swift_bridgeObjectRelease();
      v100._countAndFlagsBits = 0x746E756F6363612ELL;
      v100._object = (void *)0xEA00000000004449;
      String.append(_:)(v100);
      uint64_t v101 = v169[0];
      uint64_t v102 = v169[1];
      uint64_t v161 = v98;
      id v103 = [v98 stringRepresentation];
      uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v106 = v105;

      unint64_t v107 = v167;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v169[0] = v107;
      sub_1002C3F10(v104, v106, v101, v102, isUniquelyReferenced_nonNull_native);
      unint64_t v167 = v169[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v109 = REMAccountSnapshotSummary.nsPayload.getter();
      uint64_t v110 = 0;
      uint64_t v111 = *(void *)(v109 + 64);
      uint64_t v162 = v109 + 64;
      uint64_t v164 = v109;
      uint64_t v112 = 1 << *(unsigned char *)(v109 + 32);
      if (v112 < 64) {
        uint64_t v113 = ~(-1 << v112);
      }
      else {
        uint64_t v113 = -1;
      }
      unint64_t v114 = v113 & v111;
      int64_t v163 = (unint64_t)(v112 + 63) >> 6;
      while (1)
      {
        if (v114)
        {
          int64_t v165 = (v114 - 1) & v114;
          uint64_t v166 = v110;
          unint64_t v116 = __clz(__rbit64(v114)) | (v110 << 6);
          goto LABEL_95;
        }
        int64_t v117 = v110 + 1;
        uint64_t v118 = v161;
        if (__OFADD__(v110, 1)) {
          goto LABEL_107;
        }
        uint64_t v3 = v160;
        if (v117 >= v163) {
          break;
        }
        unint64_t v119 = *(void *)(v162 + 8 * v117);
        int64_t v120 = v110 + 1;
        if (!v119)
        {
          int64_t v120 = v110 + 2;
          if (v110 + 2 >= v163) {
            break;
          }
          unint64_t v119 = *(void *)(v162 + 8 * v120);
          if (!v119)
          {
            int64_t v120 = v110 + 3;
            if (v110 + 3 >= v163) {
              break;
            }
            unint64_t v119 = *(void *)(v162 + 8 * v120);
            if (!v119)
            {
              uint64_t v121 = v110 + 4;
              if (v110 + 4 >= v163) {
                break;
              }
              unint64_t v119 = *(void *)(v162 + 8 * v121);
              if (!v119)
              {
                while (1)
                {
                  int64_t v120 = v121 + 1;
                  if (__OFADD__(v121, 1)) {
                    goto LABEL_111;
                  }
                  if (v120 >= v163) {
                    goto LABEL_70;
                  }
                  unint64_t v119 = *(void *)(v162 + 8 * v120);
                  ++v121;
                  if (v119) {
                    goto LABEL_94;
                  }
                }
              }
              int64_t v120 = v110 + 4;
            }
          }
        }
LABEL_94:
        int64_t v165 = (v119 - 1) & v119;
        uint64_t v166 = v120;
        unint64_t v116 = __clz(__rbit64(v119)) + (v120 << 6);
LABEL_95:
        uint64_t v122 = (uint64_t *)(*(void *)(v164 + 48) + 16 * v116);
        uint64_t v123 = *v122;
        uint64_t v124 = (void *)v122[1];
        uint64_t v125 = *(void **)(*(void *)(v164 + 56) + 8 * v116);
        v169[0] = 0;
        v169[1] = 0xE000000000000000;
        swift_bridgeObjectRetain();
        id v126 = v125;
        _StringGuts.grow(_:)(20);
        swift_bridgeObjectRelease();
        uint64_t v168 = v97;
        v169[0] = 0x53746E756F636361;
        v169[1] = 0xEF2E7972616D6D75;
        uint64_t v127 = v97;
        v128._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v128);
        swift_bridgeObjectRelease();
        v129._countAndFlagsBits = 46;
        v129._object = (void *)0xE100000000000000;
        String.append(_:)(v129);
        v130._countAndFlagsBits = v123;
        v130._object = v124;
        String.append(_:)(v130);
        swift_bridgeObjectRelease();
        uint64_t v131 = v169[0];
        uint64_t v132 = v169[1];
        id v133 = [v126 stringValue];
        uint64_t v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v136 = v135;

        unint64_t v137 = v167;
        char v138 = swift_isUniquelyReferenced_nonNull_native();
        v169[0] = v137;
        unint64_t v140 = sub_1001806F8(v131, v132);
        uint64_t v141 = *(void *)(v137 + 16);
        BOOL v142 = (v139 & 1) == 0;
        uint64_t v143 = v141 + v142;
        if (__OFADD__(v141, v142))
        {
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }
        char v144 = v139;
        if (*(void *)(v137 + 24) >= v143)
        {
          if ((v138 & 1) == 0) {
            sub_100318A14();
          }
        }
        else
        {
          sub_10030E654(v143, v138);
          unint64_t v145 = sub_1001806F8(v131, v132);
          if ((v144 & 1) != (v146 & 1)) {
            goto LABEL_116;
          }
          unint64_t v140 = v145;
        }
        long long v147 = (void *)v169[0];
        unint64_t v167 = v169[0];
        if (v144)
        {
          unint64_t v115 = (uint64_t *)(*(void *)(v169[0] + 56) + 16 * v140);
          swift_bridgeObjectRelease();
          *unint64_t v115 = v134;
          v115[1] = v136;
        }
        else
        {
          *(void *)(v169[0] + 8 * (v140 >> 6) + 64) |= 1 << v140;
          char v148 = (uint64_t *)(v147[6] + 16 * v140);
          *char v148 = v131;
          v148[1] = v132;
          uint64_t v149 = (uint64_t *)(v147[7] + 16 * v140);
          *uint64_t v149 = v134;
          v149[1] = v136;
          uint64_t v150 = v147[2];
          BOOL v25 = __OFADD__(v150, 1);
          uint64_t v151 = v150 + 1;
          if (v25) {
            goto LABEL_106;
          }
          v147[2] = v151;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v97 = v127;
        unint64_t v114 = v165;
        uint64_t v110 = v166;
      }
LABEL_70:
      swift_release();

      unint64_t v96 = v157;
      (*(void (**)(char *, uint64_t))v152[0])(v157, v3);
      uint64_t v13 = (uint64_t)v158;
      sub_1000F725C((uint64_t)v158);
      uint64_t v14 = sub_100094134(&qword_10090B058);
    }
    while ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14) != 1);
  }
  swift_bridgeObjectRelease();
LABEL_4:
  id v15 = [v159 containerStats:v152[0]];
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v17 = 0;
  uint64_t v18 = *(void *)(v16 + 64);
  uint64_t v164 = v16 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v165 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v166 = v16;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v17 << 6);
      goto LABEL_22;
    }
    BOOL v25 = __OFADD__(v17++, 1);
    if (v25) {
      goto LABEL_109;
    }
    if (v17 >= v165)
    {
LABEL_35:
      uint64_t v51 = swift_release();
      long long v171 = xmmword_10077BB20;
      uint64_t v173 = 0;
      memset(v174, 0, 14);
      uint64_t v172 = 0;
      __chkstk_darwin(v51);
      v152[-2] = &v170;
      v152[-1] = v155;
      uint64_t v52 = v156;
      uint64_t v53 = sub_1003B63FC((uint64_t)&v171, (uint64_t)sub_10011ED2C, (uint64_t)&v152[-4]);
      if (v52)
      {
        swift_errorRelease();
      }
      else if (v53)
      {
        uint64_t v54 = 0;
        uint64_t v55 = *(void *)(v53 + 64);
        uint64_t v164 = v53 + 64;
        uint64_t v56 = 1 << *(unsigned char *)(v53 + 32);
        uint64_t v57 = -1;
        if (v56 < 64) {
          uint64_t v57 = ~(-1 << v56);
        }
        unint64_t v58 = v57 & v55;
        int64_t v165 = (unint64_t)(v56 + 63) >> 6;
        while (1)
        {
          if (v58)
          {
            unint64_t v60 = __clz(__rbit64(v58));
            v58 &= v58 - 1;
            uint64_t v166 = v54;
            unint64_t v61 = v60 | (v54 << 6);
          }
          else
          {
            int64_t v62 = v54 + 1;
            if (__OFADD__(v54, 1)) {
              goto LABEL_114;
            }
            if (v62 >= v165)
            {
LABEL_67:
              swift_release();
              break;
            }
            unint64_t v63 = *(void *)(v164 + 8 * v62);
            int64_t i = v54 + 1;
            if (!v63)
            {
              int64_t i = v54 + 2;
              if (v54 + 2 >= v165) {
                goto LABEL_67;
              }
              unint64_t v63 = *(void *)(v164 + 8 * i);
              if (!v63)
              {
                int64_t i = v54 + 3;
                if (v54 + 3 >= v165) {
                  goto LABEL_67;
                }
                unint64_t v63 = *(void *)(v164 + 8 * i);
                if (!v63)
                {
                  uint64_t v65 = v54 + 4;
                  if (v54 + 4 >= v165) {
                    goto LABEL_67;
                  }
                  unint64_t v63 = *(void *)(v164 + 8 * v65);
                  for (int64_t i = v54 + 4; !v63; ++v65)
                  {
                    int64_t i = v65 + 1;
                    if (__OFADD__(v65, 1)) {
                      goto LABEL_115;
                    }
                    if (i >= v165) {
                      goto LABEL_67;
                    }
                    unint64_t v63 = *(void *)(v164 + 8 * i);
                  }
                }
              }
            }
            unint64_t v58 = (v63 - 1) & v63;
            uint64_t v166 = i;
            unint64_t v61 = __clz(__rbit64(v63)) + (i << 6);
          }
          uint64_t v66 = 16 * v61;
          uint64_t v67 = v53;
          unint64_t v68 = (uint64_t *)(*(void *)(v53 + 48) + v66);
          uint64_t v69 = *v68;
          BOOL v70 = (void *)v68[1];
          uint64_t v71 = (uint64_t *)(*(void *)(v53 + 56) + v66);
          uint64_t v72 = *v71;
          uint64_t v73 = v71[1];
          strcpy((char *)v169, "contentStats.");
          HIWORD(v169[1]) = -4864;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v74._countAndFlagsBits = v69;
          v74._object = v70;
          String.append(_:)(v74);
          swift_bridgeObjectRelease();
          uint64_t v76 = v169[0];
          uint64_t v75 = v169[1];
          unint64_t v77 = v167;
          char v78 = swift_isUniquelyReferenced_nonNull_native();
          v169[0] = v77;
          unint64_t v80 = sub_1001806F8(v76, v75);
          uint64_t v81 = *(void *)(v77 + 16);
          BOOL v82 = (v79 & 1) == 0;
          uint64_t v83 = v81 + v82;
          if (__OFADD__(v81, v82)) {
            goto LABEL_110;
          }
          char v84 = v79;
          if (*(void *)(v77 + 24) >= v83)
          {
            if ((v78 & 1) == 0) {
              sub_100318A14();
            }
          }
          else
          {
            sub_10030E654(v83, v78);
            unint64_t v85 = sub_1001806F8(v76, v75);
            if ((v84 & 1) != (v86 & 1)) {
              goto LABEL_116;
            }
            unint64_t v80 = v85;
          }
          unint64_t v87 = (void *)v169[0];
          unint64_t v167 = v169[0];
          if (v84)
          {
            uint64_t v59 = (void *)(*(void *)(v169[0] + 56) + 16 * v80);
            swift_bridgeObjectRelease();
            *uint64_t v59 = v72;
            v59[1] = v73;
          }
          else
          {
            *(void *)(v169[0] + 8 * (v80 >> 6) + 64) |= 1 << v80;
            uint64_t v88 = (uint64_t *)(v87[6] + 16 * v80);
            uint64_t *v88 = v76;
            v88[1] = v75;
            uint64_t v89 = (void *)(v87[7] + 16 * v80);
            *uint64_t v89 = v72;
            v89[1] = v73;
            uint64_t v90 = v87[2];
            BOOL v25 = __OFADD__(v90, 1);
            uint64_t v91 = v90 + 1;
            if (v25) {
              goto LABEL_112;
            }
            v87[2] = v91;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v53 = v67;
          uint64_t v54 = v166;
        }
      }
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      ((void (**)(void, Class, void))v154)[2](v154, isa, 0);
      swift_bridgeObjectRelease();

      return swift_bridgeObjectRelease();
    }
    unint64_t v26 = *(void *)(v164 + 8 * v17);
    if (!v26) {
      break;
    }
LABEL_21:
    unint64_t v21 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_22:
    uint64_t v28 = 16 * v24;
    uint64_t v29 = (uint64_t *)(*(void *)(v166 + 48) + v28);
    uint64_t v30 = *v29;
    uint64_t v31 = (void *)v29[1];
    uint64_t v32 = (uint64_t *)(*(void *)(v166 + 56) + v28);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    strcpy((char *)&v171, "contentStats.");
    HIWORD(v171) = -4864;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35._countAndFlagsBits = v30;
    v35._object = v31;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    long long v36 = v171;
    unint64_t v37 = v167;
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v171 = v37;
    unint64_t v40 = sub_1001806F8(v36, *((uint64_t *)&v36 + 1));
    uint64_t v41 = *(void *)(v37 + 16);
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      goto LABEL_105;
    }
    char v44 = v39;
    if (*(void *)(v37 + 24) >= v43)
    {
      if ((v38 & 1) == 0) {
        sub_100318A14();
      }
    }
    else
    {
      sub_10030E654(v43, v38);
      unint64_t v45 = sub_1001806F8(v36, *((uint64_t *)&v36 + 1));
      if ((v44 & 1) != (v46 & 1)) {
        goto LABEL_116;
      }
      unint64_t v40 = v45;
    }
    Swift::String v47 = (void *)v171;
    unint64_t v167 = v171;
    if (v44)
    {
      Swift::String v22 = (void *)(*(void *)(v171 + 56) + 16 * v40);
      swift_bridgeObjectRelease();
      *Swift::String v22 = v33;
      v22[1] = v34;
    }
    else
    {
      *(void *)(v171 + 8 * (v40 >> 6) + 64) |= 1 << v40;
      *(_OWORD *)(v47[6] + 16 * v40) = v36;
      uint64_t v48 = (void *)(v47[7] + 16 * v40);
      *uint64_t v48 = v33;
      v48[1] = v34;
      uint64_t v49 = v47[2];
      BOOL v25 = __OFADD__(v49, 1);
      uint64_t v50 = v49 + 1;
      if (v25) {
        goto LABEL_108;
      }
      v47[2] = v50;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int64_t v27 = v17 + 1;
  if (v17 + 1 >= v165) {
    goto LABEL_35;
  }
  unint64_t v26 = *(void *)(v164 + 8 * v27);
  if (v26) {
    goto LABEL_20;
  }
  int64_t v27 = v17 + 2;
  if (v17 + 2 >= v165) {
    goto LABEL_35;
  }
  unint64_t v26 = *(void *)(v164 + 8 * v27);
  if (v26) {
    goto LABEL_20;
  }
  int64_t v27 = v17 + 3;
  if (v17 + 3 >= v165) {
    goto LABEL_35;
  }
  unint64_t v26 = *(void *)(v164 + 8 * v27);
  if (v26)
  {
LABEL_20:
    int64_t v17 = v27;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v17 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v17 >= v165) {
      goto LABEL_35;
    }
    unint64_t v26 = *(void *)(v164 + 8 * v17);
    ++v27;
    if (v26) {
      goto LABEL_21;
    }
  }
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  _Block_release(v154);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100111E1C(void (**a1)(void, void, void))
{
  if (qword_100906EB8 != -1) {
LABEL_48:
  }
    swift_once();
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090ADC0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "RDXPCDebugPerformer: dumpUbKVS initiated", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  if (qword_100907300 != -1) {
    swift_once();
  }
  id v6 = [*(id *)(static RDSynchronizedKeyValueStore.default + 16) dictionaryRepresentation];
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v41 = v7 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v7 + 64);
  int64_t v42 = (unint64_t)(v8 + 63) >> 6;
  int64_t v43 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v43 << 6);
LABEL_13:
      uint64_t v14 = *(void *)(v7 + 56);
      id v15 = (void *)(*(void *)(v7 + 48) + 16 * v13);
      uint64_t v16 = v15[1];
      *(void *)&long long v44 = *v15;
      *((void *)&v44 + 1) = v16;
      sub_10009A1B0(v14 + 32 * v13, (uint64_t)v45);
      swift_bridgeObjectRetain();
      goto LABEL_32;
    }
    int64_t v17 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      goto LABEL_47;
    }
    if (v17 < v42)
    {
      unint64_t v18 = *(void *)(v41 + 8 * v17);
      if (v18) {
        goto LABEL_17;
      }
      int64_t v19 = v43 + 2;
      ++v43;
      if (v17 + 1 < v42)
      {
        unint64_t v18 = *(void *)(v41 + 8 * v19);
        if (v18) {
          goto LABEL_20;
        }
        int64_t v43 = v17 + 1;
        if (v17 + 2 < v42)
        {
          unint64_t v18 = *(void *)(v41 + 8 * (v17 + 2));
          if (v18)
          {
            v17 += 2;
            goto LABEL_17;
          }
          int64_t v19 = v17 + 3;
          int64_t v43 = v17 + 2;
          if (v17 + 3 < v42) {
            break;
          }
        }
      }
    }
LABEL_31:
    unint64_t v10 = 0;
    memset(v45, 0, sizeof(v45));
    long long v44 = 0u;
LABEL_32:
    sub_100096408((uint64_t)&v44, (uint64_t)&v46, &qword_10090B048);
    uint64_t v20 = v47;
    if (!v47)
    {
      swift_release();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      ((void (**)(void, Class, void))a1)[2](a1, isa, 0);
      swift_bridgeObjectRelease();

      return;
    }
    uint64_t v21 = v46;
    sub_10009A1A0(&v48, &v44);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v24 = v23;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v44 = v5;
    unint64_t v27 = sub_1001806F8(v21, v20);
    uint64_t v28 = v5[2];
    BOOL v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    char v31 = v26;
    if (v5[3] >= v30)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v5 = (void *)v44;
        if (v26) {
          goto LABEL_9;
        }
      }
      else
      {
        sub_100318A14();
        uint64_t v5 = (void *)v44;
        if (v31) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      sub_10030E654(v30, isUniquelyReferenced_nonNull_native);
      unint64_t v32 = sub_1001806F8(v21, v20);
      if ((v31 & 1) != (v33 & 1)) {
        goto LABEL_50;
      }
      unint64_t v27 = v32;
      uint64_t v5 = (void *)v44;
      if (v31)
      {
LABEL_9:
        uint64_t v11 = (uint64_t *)(v5[7] + 16 * v27);
        swift_bridgeObjectRelease();
        *uint64_t v11 = v22;
        v11[1] = v24;
        goto LABEL_10;
      }
    }
    v5[(v27 >> 6) + 8] |= 1 << v27;
    uint64_t v34 = (uint64_t *)(v5[6] + 16 * v27);
    *uint64_t v34 = v21;
    v34[1] = v20;
    Swift::String v35 = (uint64_t *)(v5[7] + 16 * v27);
    *Swift::String v35 = v22;
    v35[1] = v24;
    uint64_t v36 = v5[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_46;
    }
    v5[2] = v38;
    swift_bridgeObjectRetain();
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v18 = *(void *)(v41 + 8 * v19);
  if (v18)
  {
LABEL_20:
    int64_t v17 = v19;
LABEL_17:
    unint64_t v10 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v43 = v17;
    goto LABEL_13;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v42)
    {
      int64_t v43 = v42 - 1;
      goto LABEL_31;
    }
    unint64_t v18 = *(void *)(v41 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_50:
  _Block_release(a1);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_100112308(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10090ADC0);
  sub_1000BF710(a3, (uint64_t)v16, &qword_100908190);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    sub_100094134(&qword_100908190);
    uint64_t v12 = Optional.descriptionOrNil.getter();
    sub_1000C51B8(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)v16, &qword_100908190);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDXPCDebugPerformer: writeUbKVS initiated {key: %s, value: %s}", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_1000966BC((uint64_t)v16, &qword_100908190);
  }

  if (qword_100907300 != -1) {
    swift_once();
  }
  sub_1005344A4(a3);
  return (*(uint64_t (**)(uint64_t, void))(a4 + 16))(a4, 0);
}

uint64_t sub_10011259C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10090ADC0);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, a2, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDXPCDebugPerformer: removeFromUbKVS initiated {key: %s}", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (qword_100907300 != -1) {
    swift_once();
  }
  os_log_type_t v10 = *(void **)(static RDSynchronizedKeyValueStore.default + 16);
  NSString v11 = String._bridgeToObjectiveC()();
  [v10 removeObjectForKey:v11];

  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0);
}

uint64_t sub_1001127CC(uint64_t a1, uint64_t a2)
{
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10090ADC0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDXPCDebugPerformer: nukeDatabase initiated", v7, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v8 = *(void **)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  id v26 = 0;
  if ([v8 nukeDataWithError:&v26])
  {
    id v9 = v26;
    sub_1002AF210();
    return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, 0);
  }
  else
  {
    id v11 = v26;
    uint64_t v12 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v26 = v12;
    sub_100094134((uint64_t *)&unk_10090ABB0);
    sub_1000963CC(0, &qword_10090AFE0);
    swift_dynamicCast();
    uint64_t v13 = v25;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      int64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138412290;
      unint64_t v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v17 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDXPCDebugPerformer: Failed to nuke database {error: %@}", v16, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v14 = v13;
    }

    int64_t v19 = self;
    uint64_t v20 = v13;
    uint64_t v21 = (void *)_convertErrorToNSError(_:)();

    id v22 = [v19 errorSanitizedForXPCFromError:v21];
    id v23 = v22;
    uint64_t v24 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v24);

    return swift_errorRelease();
  }
}

void sub_100112B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)_convertErrorToNSError(_:)();
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_10090ADC0);
  id v6 = v4;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = a3;
    os_log_type_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)id v9 = 138412290;
    id v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v10 = v6;

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDXPCDebugPerformer: Failed testInitialSync {error: %@}", v9, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    a3 = v19;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v12 = self;
  id v13 = v6;
  uint64_t v14 = (void *)_convertErrorToNSError(_:)();

  id v15 = [v12 errorSanitizedForXPCFromError:v14];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v16 = v15;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  unint64_t v18 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, Class, void *))(a3 + 16))(a3, 0, isa, v18);

  swift_bridgeObjectRelease();
}

uint64_t sub_100112DC0(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v17 = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  _Block_copy(a4);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10090ADC0);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDXPCDebugPerformer: testInitialSync initiated", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = _swiftEmptyDictionarySingleton;
  id v13 = (void *)swift_allocObject();
  v13[2] = sub_10011E6A0;
  v13[3] = v7;
  v13[4] = v12;
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = sub_10011E6A0;
  v14[3] = v7;
  v14[4] = v12;
  long long v18 = xmmword_10077BB30;
  uint64_t v20 = 0;
  v21[0] = 0;
  uint64_t v19 = 0;
  *(void *)((char *)v21 + 6) = 0;
  v16[2] = a1;
  v16[3] = v17;
  v16[4] = a3;
  v16[5] = v12;
  v16[6] = sub_10011E6E4;
  v16[7] = v13;
  v16[8] = sub_10011E734;
  v16[9] = __chkstk_darwin(v14);
  swift_retain_n();
  swift_retain_n();
  sub_1003B5ADC((uint64_t)&v18, (uint64_t)sub_10011E740, (uint64_t)v16);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_100113094(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    os_log_type_t v3 = (void *)_convertErrorToNSError(_:)();
    if (qword_100906EB8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_10090ADC0);
    id v5 = v3;
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      id v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      id v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v9 = v5;

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDXPCDebugPerformer: Failed testReinitializeCloudKit {error: %@}", v8, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v12 = self;
    id v13 = v5;
    uint64_t v14 = (void *)_convertErrorToNSError(_:)();

    id v15 = [v12 errorSanitizedForXPCFromError:v14];
    id v16 = v15;
    uint64_t v17 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v17);
  }
  else
  {
    id v11 = *(void (**)(uint64_t, void))(a2 + 16);
    v11(a2, 0);
  }
}

void sub_1001132FC(uint64_t a1, void *a2, void *a3, const void *a4)
{
  unint64_t v58 = a3;
  uint64_t v65 = a1;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v60 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int64_t v62 = (char *)v53 - v13;
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = a4;
  _Block_copy(a4);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  id v59 = v8;
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10090ADC0);
  swift_bridgeObjectRetain_n();
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v61 = v9;
  uint64_t v63 = v10;
  if (v17)
  {
    long long v18 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)long long v18 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v19 = v65;
    uint64_t v66 = sub_1000C51B8(v65, (unint64_t)a2, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDXPCDebugPerformer: testReinitializeCloudKit initiated {accountIdentifier: %{public}s}", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v19 = v65;
  }
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v64;
  *(void *)(v20 + 16) = sub_10011FBC8;
  *(void *)(v20 + 24) = v21;
  id v22 = self;
  swift_retain();
  id v23 = [v22 sharedInstance];
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v23 unsafeUntilSystemReady_icloudACAccountMatchingAccountIdentifier:v24];

  if (!v25) {
    goto LABEL_13;
  }
  id v26 = [v25 displayAccount];
  if (!v26) {
    goto LABEL_13;
  }
  unint64_t v27 = v26;
  id v28 = [v26 identifier];
  if (!v28)
  {

    goto LABEL_12;
  }
  id v57 = v28;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = (uint64_t)v59;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = v63;
  uint64_t v31 = v61;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v29, 1, v61) == 1)
  {

    sub_1000966BC(v29, (uint64_t *)&unk_100909E50);
LABEL_12:
    uint64_t v19 = v65;
LABEL_13:
    unint64_t v32 = self;
    uint64_t aBlock = 0;
    unint64_t v68 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v33._object = (void *)0x80000001007CABF0;
    v33._countAndFlagsBits = 0xD000000000000040;
    String.append(_:)(v33);
    v34._countAndFlagsBits = v19;
    v34._object = a2;
    String.append(_:)(v34);
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v36 = [v32 internalErrorWithDebugDescription:v35];

    _Block_copy(a4);
    id v37 = v36;
    sub_100113094((uint64_t)v36, (uint64_t)a4);
    _Block_release(a4);
    swift_release();
    swift_release();

    return;
  }
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 32);
  id v56 = v25;
  id v54 = v23;
  v53[0] = v30 + 32;
  v55(v62, v29, v31);
  id v59 = [v23 accountStore];
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = 0;
  v53[1] = v38;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v60, v62, v31);
  uint64_t v39 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v40 = v31;
  uint64_t v41 = (v39 + 56) & ~v39;
  unint64_t v42 = (v11 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  int64_t v43 = (char *)swift_allocObject();
  *((void *)v43 + 2) = v27;
  *((void *)v43 + 3) = v38;
  *((void *)v43 + 4) = sub_10011E270;
  *((void *)v43 + 5) = v20;
  long long v44 = v58;
  *((void *)v43 + 6) = v58;
  v55(&v43[v41], (uint64_t)v60, v40);
  id v45 = v57;
  *(void *)&v43[v42] = v57;
  uint64_t v46 = &v43[(v42 + 15) & 0xFFFFFFFFFFFFFFF8];
  *(void *)uint64_t v46 = v65;
  *((void *)v46 + 1) = a2;
  uint64_t v71 = sub_10011E3C4;
  uint64_t v72 = v43;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v68 = 1107296256;
  uint64_t v69 = sub_100688540;
  BOOL v70 = &unk_1008BA7C0;
  uint64_t v47 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  id v48 = v27;
  swift_retain();
  swift_retain();
  id v49 = v44;
  id v50 = v45;
  swift_release();
  id v51 = v54;
  uint64_t v52 = v59;
  [v54 _unsetMigrationFlagsWithACAccount:v48 inStore:v59 completionHandler:v47];
  _Block_release(v47);

  swift_release();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v40);
  swift_release();
  swift_release();
}

void sub_100113A24(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_10090ADC0);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v70 = sub_1000C51B8(a1, (unint64_t)a2, (uint64_t *)&v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDXPCDebugPerformer: testFlagAccountForInactivatedCalDAVDataMigration initiated {accountIdentifier: %{public}s}", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = self;
  id v12 = [v11 sharedInstance];
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 unsafeUntilSystemReady_icloudACAccountMatchingAccountIdentifier:v13];

  id v68 = v14;
  if (!v14) {
    goto LABEL_12;
  }
  id v15 = [v14 displayAccount];
  if (!v15) {
    goto LABEL_12;
  }
  os_log_type_t v16 = v15;
  id v17 = [v15 identifier];
  if (!v17)
  {

LABEL_12:
    id v23 = self;
    uint64_t v73 = 0;
    unint64_t v74 = 0xE000000000000000;
    _StringGuts.grow(_:)(116);
    v24._countAndFlagsBits = 0xD000000000000072;
    v24._object = (void *)0x80000001007CAAA0;
    String.append(_:)(v24);
    v25._countAndFlagsBits = a1;
    v25._object = a2;
    String.append(_:)(v25);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v27 = [v23 internalErrorWithDebugDescription:v26];

    id v28 = v27;
    uint64_t v29 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v29);

    return;
  }
  long long v18 = v17;
  uint64_t v19 = self;
  id v20 = [v19 daemonUserDefaults];
  id v21 = [v20 acAccountIdentifiersToMigrateInactivatedCalDavData];

  id v63 = v11;
  if (v21)
  {
    id v22 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    id v22 = _swiftEmptyArrayStorage;
  }
  uint64_t v30 = sub_10012674C((uint64_t)v22);
  swift_bridgeObjectRelease();
  uint64_t v72 = v30;
  Swift::Int v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10031DC68((Swift::Int *)&v73, v31, v32);
  swift_bridgeObjectRelease();
  id v33 = [v19 daemonUserDefaults];
  sub_100209D8C(v30);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v33 setAcAccountIdentifiersToMigrateInactivatedCalDavData:isa];

  NSString v35 = v18;
  id v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  uint64_t v65 = v35;
  uint64_t v66 = a4;
  id v62 = v19;
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    id v61 = v12;
    uint64_t v39 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 138543362;
    uint64_t v73 = v35;
    uint64_t v40 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v39 = v18;

    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    id v12 = v61;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v36 = v35;
  }

  uint64_t v41 = a3 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v43 = *(void *)(v41 + 8);
  uint64_t v70 = Strong;
  uint64_t v71 = v43;
  sub_100094134(&qword_10090B028);
  Optional.tryUnwrap(_:file:line:)();
  swift_unknownObjectRelease();
  uint64_t v64 = v16;
  uint64_t v44 = v74;
  id v45 = (objc_class *)type metadata accessor for RDDaemonController();
  uint64_t v73 = 0xD000000000000030;
  unint64_t v74 = 0x80000001007CABB0;
  uint64_t v76 = 0;
  v77[0] = 0;
  uint64_t v75 = 0;
  *(void *)((char *)v77 + 6) = 0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v47 = swift_unknownObjectRetain();
  id v48 = sub_10054145C(v47, (uint64_t)&v73, 0, v45, ObjectType, v44);
  id v49 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:v48];
  id v50 = *(void **)(a3 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  id v51 = v49;
  id v52 = v50;
  id v53 = [v63 sharedInstance];
  id v54 = [v62 daemonUserDefaults];
  uint64_t v55 = (objc_class *)type metadata accessor for RDAccountInitializer();
  id v56 = (char *)objc_allocWithZone(v55);
  *(void *)&v56[OBJC_IVAR____TtC7remindd20RDAccountInitializer_store] = v51;
  *(void *)&v56[OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController] = v52;
  *(void *)&v56[OBJC_IVAR____TtC7remindd20RDAccountInitializer_appleAccountUtilities] = v53;
  *(void *)&v56[OBJC_IVAR____TtC7remindd20RDAccountInitializer_userDefaults] = v54;
  v69.receiver = v56;
  v69.super_class = v55;
  id v57 = [super init];
  sub_100419D54();

  unint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v58, v59))
  {
    unint64_t v60 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "RDXPCDebugPerformer: testFlagAccountForInactivatedCalDAVDataMigration called initializeAllAccounts()", v60, 2u);
    swift_slowDealloc();
    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
  }
  (*(void (**)(uint64_t, void))(v66 + 16))(v66, 0);
}

void sub_1001142F8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void **)(a3 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  id v8 = [v7 cloudContext];
  if (v8)
  {
    os_log_type_t v9 = v8;
    if ([v7 supportsSyncingToCloudKit])
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v10 = objc_allocWithZone((Class)CKRecordZoneID);
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v13 = [v10 initWithZoneName:v11 ownerName:v12 databaseScope:2];

      if (qword_100906EB8 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10008E2DC(v14, (uint64_t)qword_10090ADC0);
      swift_bridgeObjectRetain_n();
      id v15 = v13;
      os_log_type_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        os_log_type_t type = v17;
        uint64_t v18 = swift_slowAlloc();
        id v27 = (void *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315394;
        swift_bridgeObjectRetain();
        sub_1000C51B8(a1, a2, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v18 + 12) = 2112;
        uint64_t v19 = v16;
        id v20 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v27 = v15;

        _os_log_impl((void *)&_mh_execute_header, v19, type, "RDXPCDebugPerformer.retryAccountZoneIDsNeedingToBeSaved: {accountID: %s, zoneID: %@}", (uint8_t *)v18, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      NSString v26 = String._bridgeToObjectiveC()();
      [v9 debug_retryAccountZoneIDsNeedingToBeSavedWithZoneID:v15 accountID:v26];

      (*(void (**)(uint64_t, void))(a4 + 16))(a4, 0);
      return;
    }
    Swift::String v24 = self;
    NSString v25 = String._bridgeToObjectiveC()();
    id v23 = [v24 internalErrorWithDebugDescription:v25];

    id v29 = (id)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, id))(a4 + 16))(a4, v29);
  }
  else
  {
    id v21 = self;
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [v21 internalErrorWithDebugDescription:v22];

    id v29 = (id)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, id))(a4 + 16))(a4, v29);
  }
}

void sub_1001147A8(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  id v5 = *(void **)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  _Block_copy(a2);
  if ([v5 supportsSyncingToCloudKit]
    && (id v6 = [v5 cloudContext]) != 0)
  {
    uint64_t v7 = v6;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = sub_10011FBC8;
    *(void *)(v8 + 24) = v4;
    aBlock[4] = sub_10011E244;
    aBlock[5] = v8;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008BA6F8;
    os_log_type_t v9 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v7 cancelEverythingWithCompletionHandler:v9];
    _Block_release(v9);
    swift_release();
  }
  else
  {
    id v10 = self;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 internalErrorWithDebugDescription:v11];

    swift_willThrow();
    NSString v12 = (void *)_convertErrorToNSError(_:)();
    if (qword_100906EB8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_10090ADC0);
    id v14 = v12;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v17 = 138412290;
      aBlock[0] = v14;
      id v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v14;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDXPCDebugPerformer: Failed cancelCloudKitSync {error: %@}", v17, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v20 = self;
    id v21 = v14;
    NSString v22 = (void *)_convertErrorToNSError(_:)();

    id v23 = [v20 errorSanitizedForXPCFromError:v22];
    id v24 = v23;
    NSString v25 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a2)[2](a2, v25);

    swift_errorRelease();
    swift_release();
  }
}

void sub_100114BB0(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = *(void **)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  if (![v3 supportsSyncingToCloudKit]
    || (id v4 = [v3 cloudContext]) == 0)
  {
    id isa = String._bridgeToObjectiveC()();
    (*(void (**)(uint64_t, id, void, void))(a2 + 16))(a2, isa, 0, 0);
    goto LABEL_13;
  }
  id v5 = v4;
  if (([v4 isCloudKitAccountAvailableRequiringActive:0] & 1) == 0
    || ([v5 isCloudKitAccountAvailableRequiringActive:1] & 1) == 0)
  {
    id isa = String._bridgeToObjectiveC()();
    (*(void (**)(uint64_t, id, void, void))(a2 + 16))(a2, isa, 0, 0);

    goto LABEL_13;
  }
  id v6 = [v5 status];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 10;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  id v8 = [v5 readinessLoggingDescription];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v11 = v10;

  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v13 = [v5 lastSyncMetrics];
  id v14 = v13;
  if (!v13)
  {
    NSString v17 = String._bridgeToObjectiveC()();
    goto LABEL_11;
  }
  id v15 = [v13 dictionaryRepresentation];

  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v17 = String._bridgeToObjectiveC()();
  if (!v16)
  {
LABEL_11:
    v18.super.id isa = 0;
    goto LABEL_12;
  }
  v18.super.id isa = Dictionary._bridgeToObjectiveC()().super.isa;
LABEL_12:
  id isa = v18.super.isa;
  (*(void (**)(uint64_t, NSString, Class, void))(a2 + 16))(a2, v17, v18.super.isa, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_13:
}

void sub_100114EC4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a3;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  Swift::String v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10090ADC0);
  id v9 = a1;
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v23 = a2;
    Swift::String v12 = (uint8_t *)swift_slowAlloc();
    id v13 = (void *)swift_slowAlloc();
    id v24 = v7;
    NSString v22 = v12;
    *(_DWORD *)Swift::String v12 = 138412290;
    id v27 = v9;
    id v14 = v9;
    a2 = v23;
    Swift::String v7 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v13 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: persistenceStoreID for {accountID: %@}", v22, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v15 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  id v16 = [v9 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v26);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v18 = [v15 storeForAccountIdentifier:v17];

  if (v18 && (id v19 = [v18 identifier]) != 0)
  {
    id v20 = v19;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v21 = String._bridgeToObjectiveC()();
    (*(void (**)(uint64_t, NSString))(v25 + 16))(v25, v21);
    swift_bridgeObjectRelease();

    id v18 = v21;
  }
  else
  {
    (*(void (**)(uint64_t, void))(v25 + 16))(v25, 0);
  }
}

uint64_t sub_100115218(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  v12[0] = 0xD000000000000023;
  v12[1] = 0x80000001007CA930;
  v12[3] = 0;
  v13[0] = 0;
  v12[2] = 0;
  *(void *)((char *)v13 + 6) = 0;
  uint64_t v8[2] = a1;
  char v9 = a2 & 1;
  char v10 = a4;
  char v11 = a3;
  sub_1003B5ADC((uint64_t)v12, (uint64_t)sub_10011DE78, (uint64_t)v8);
  return (*(uint64_t (**)(uint64_t, void))(a6 + 16))(a6, 0);
}

void sub_10011530C(void *a1, char a2, char a3, uint64_t a4, void *aBlock)
{
  _Block_copy(aBlock);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10090ADC0);
  id v11 = a1;
  Swift::String v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    id v18 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v15 = Bool.yesno.getter();
    sub_1000C51B8(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2114;
    id v17 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v18 = v11;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDXPCDebugPerformer: lowLevelMarkForDeletion {shouldSetDirtyFlags: %{public}s, objectID: %{public}@}", (uint8_t *)v14, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  _Block_copy(aBlock);
  sub_100115218((uint64_t)v11, 0, a2 & 1, a3 & 1, a4, (uint64_t)aBlock);
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_100115594(void *a1, char a2, uint64_t a3, void *aBlock)
{
  _Block_copy(aBlock);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10090ADC0);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    unint64_t v16 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    uint64_t v13 = Bool.yesno.getter();
    sub_1000C51B8(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2114;
    id v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v16 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: lowLevelUnmarkForDeletion {shouldSetDirtyFlags: %{public}s, objectID: %{public}@}", (uint8_t *)v12, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  _Block_copy(aBlock);
  sub_100115218((uint64_t)v9, 1, a2 & 1, 0, a3, (uint64_t)aBlock);
  _Block_release(aBlock);
  _Block_release(aBlock);
}

uint64_t sub_100115810(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10090ADC0);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    v25[0] = v21;
    *(_DWORD *)uint64_t v12 = 138543618;
    uint64_t v23 = a4;
    uint64_t v22 = a3;
    id v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v9;

    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v15 = Bool.yesno.getter();
    uint64_t v24 = sub_1000C51B8(v15, v16, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a4 = v23;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: markAndDeleteExtraneousAlarmsFromReminderID {reminderID: %{public}@, shouldSetDirtyFlags: %{public}s}", (uint8_t *)v12, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  v25[0] = 0xD00000000000002BLL;
  v25[1] = 0x80000001007CA850;
  v25[3] = 0;
  v26[0] = 0;
  v25[2] = 0;
  *(void *)((char *)v26 + 6) = 0;
  __chkstk_darwin(v17);
  v19[2] = v9;
  char v20 = a2 & 1;
  sub_1003B5ADC((uint64_t)v25, (uint64_t)sub_10011DE58, (uint64_t)v19);
  return (*(uint64_t (**)(uint64_t, void))(a4 + 16))(a4, 0);
}

uint64_t sub_100115B24(void *a1, char a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v36 = a3;
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_10090ADC0);
  id v18 = a1;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v32 = a6;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v34 = a8;
    uint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    v38[0] = v31;
    *(_DWORD *)uint64_t v21 = 138543618;
    uint64_t v33 = a7;
    uint64_t v35 = a4;
    uint64_t v30 = a5;
    id v23 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v18;

    *(_WORD *)(v21 + 12) = 2082;
    uint64_t v24 = Bool.yesno.getter();
    uint64_t v37 = sub_1000C51B8(v24, v25, v38);
    a4 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a7 = v33;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v30, (uint8_t *)v21, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    a8 = v34;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = v32;
    swift_slowDealloc();
  }
  else
  {
  }
  v38[0] = a6;
  v38[1] = a7;
  v38[3] = 0;
  v39[0] = 0;
  _OWORD v38[2] = 0;
  *(void *)((char *)v39 + 6) = 0;
  __chkstk_darwin(v26);
  v28[2] = v18;
  *(double *)&v28[3] = a9;
  char v29 = a2 & 1;
  sub_1003B5ADC((uint64_t)v38, a8, (uint64_t)v28);
  return (*(uint64_t (**)(uint64_t, void))(a4 + 16))(a4, 0);
}

uint64_t sub_100115E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v32 = [objc_allocWithZone((Class)CNContactStore) init];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10077BB40;
  *(void *)(v4 + 32) = CNContactIdentifierKey;
  uint64_t v5 = self;
  uint64_t v6 = CNContactIdentifierKey;
  *(void *)(v4 + 40) = [v5 descriptorForRequiredKeysForStyle:0];
  *(void *)(v4 + 48) = CNContactEmailAddressesKey;
  *(void *)(v4 + 56) = CNContactPhoneNumbersKey;
  *(void *)(v4 + 64) = CNContactTypeKey;
  *(void *)(v4 + 72) = CNContainerIdentifierKey;
  *(void *)(v4 + 80) = CNContainerNameKey;
  Swift::String v7 = (void *)CNContactLinkIdentifierKey;
  *(void *)(v4 + 88) = CNContainerTypeKey;
  *(void *)(v4 + 96) = v7;
  aBlock[0] = (id)v4;
  specialized Array._endMutation()();
  uint64_t v34 = _swiftEmptyArrayStorage;
  id v8 = objc_allocWithZone((Class)CNContactFetchRequest);
  id v9 = CNContactEmailAddressesKey;
  uint64_t v10 = CNContactPhoneNumbersKey;
  os_log_type_t v11 = CNContactTypeKey;
  uint64_t v12 = CNContainerIdentifierKey;
  uint64_t v13 = CNContainerNameKey;
  id v14 = CNContainerTypeKey;
  id v15 = v7;
  sub_100094134(&qword_10090AFF8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = [v8 initWithKeysToFetch:isa];

  if (a2)
  {
    id v18 = self;
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = [v18 predicateForContactsMatchingName:v19];

    [v17 setPredicate:v20];
  }
  id v21 = [objc_allocWithZone((Class)CNContactFormatter) init];
  [v21 setStyle:0];
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = &v34;
  id v23 = (void *)swift_allocObject();
  v23[2] = sub_10011DDD0;
  v23[3] = v22;
  aBlock[4] = sub_10011DDE8;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000FF960;
  aBlock[3] = &unk_1008BA2E8;
  uint64_t v24 = _Block_copy(aBlock);
  id v25 = v21;
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned __int8 v26 = [v32 enumerateContactsWithFetchRequest:v17 error:aBlock usingBlock:v24];
  _Block_release(v24);
  id v27 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if ((v26 & 1) == 0)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  swift_bridgeObjectRetain();
  Class v29 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v29);

  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_100116280(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  id v6 = objc_allocWithZone((Class)REMStoreContainerToken);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v8 = [v6 initWithIdentifier:isa];

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_10090ADC0);
  uint64_t v10 = v8;
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    id v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412290;
    v16[1] = v10;
    id v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v14 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDXPCDebugPerformer: Created isolated store {token: %@}", v13, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    os_log_type_t v11 = v10;
  }

  (*(void (**)(uint64_t, NSObject *, void))(a1 + 16))(a1, v10, 0);
}

uint64_t sub_10011650C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  os_log_type_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  aBlock[4] = sub_10011D92C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008BA108;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10011D8CC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v16);
}

uint64_t sub_1001167F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v21 = a3;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  uint64_t v16 = (void *)static OS_dispatch_queue.main.getter();
  id v17 = (void *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = v21;
  v17[5] = a4;
  aBlock[4] = v22;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = v23;
  id v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10011D8CC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v24);
}

void sub_100116AEC(void *a1, void *a2, uint64_t a3, void *aBlock)
{
  _Block_copy(aBlock);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10090ADC0);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    uint64_t v49 = (uint64_t)a1;
    *(_DWORD *)uint64_t v11 = 136315138;
    unint64_t v50 = (unint64_t)a2;
    swift_bridgeObjectRetain();
    sub_100094134((uint64_t *)&unk_10090A4C0);
    uint64_t v12 = String.init<A>(describing:)();
    uint64_t v49 = sub_1000C51B8(v12, v13, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDXPCDebugPerformer: downloadContainer with accountID: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(a3 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  id v47 = [v14 cloudContext];
  if (v47)
  {
    uint64_t v15 = a2;
    if (a2)
    {
LABEL_8:
      swift_bridgeObjectRetain();
      NSString v16 = String._bridgeToObjectiveC()();
      id v17 = [v14 newBackgroundContextWithAuthor:v16];

      __chkstk_darwin(v18);
      NSManagedObjectContext.rem_performAndWait<A>(_:)();
      if (v49)
      {
        _Block_copy(aBlock);
        sub_1004145A4(a1, v15, v47, (uint64_t)aBlock);
        _Block_release(aBlock);

        swift_bridgeObjectRelease();
        unsigned __int8 v26 = v47;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc();
          uint64_t v49 = swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v48 = sub_1000C51B8((uint64_t)a1, (unint64_t)v15, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "RDXPCDebugPerformer: downloadContainer accountIdentifier { %s } is not from CloudKit account", v40, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v41 = self;
        uint64_t v49 = 0;
        unint64_t v50 = 0xE000000000000000;
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease();
        uint64_t v49 = (uint64_t)a1;
        unint64_t v50 = (unint64_t)v15;
        v42._countAndFlagsBits = 0xD00000000000001FLL;
        v42._object = (void *)0x80000001007CA6B0;
        String.append(_:)(v42);
        NSString v43 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v44 = [v41 internalErrorWithDebugDescription:v43];

        id v45 = v44;
        uint64_t v46 = _convertErrorToNSError(_:)();
        (*((void (**)(void *, void, uint64_t))aBlock + 2))(aBlock, 0, v46);

        unsigned __int8 v26 = (void *)v46;
      }
      goto LABEL_24;
    }
    id v27 = [self sharedInstance];
    id v28 = [v27 unsafeUntilSystemReady_primaryICloudACAccount];

    if (v28)
    {
      id v29 = [v28 identifier];

      if (v29)
      {
        a1 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v30;

        goto LABEL_8;
      }
    }
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "RDXPCDebugPerformer: downloadContainer accountIdentifier is nil -- can't download cloudKit container", v33, 2u);
      swift_slowDealloc();
    }

    uint64_t v34 = self;
    NSString v35 = String._bridgeToObjectiveC()();
    id v36 = [v34 internalErrorWithDebugDescription:v35];

    id v37 = v36;
    unsigned __int8 v26 = (void *)_convertErrorToNSError(_:)();
    (*((void (**)(void *, void, void *))aBlock + 2))(aBlock, 0, v26);
  }
  else
  {
    NSString v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDXPCDebugPerformer: CloudContext is nil -- can't sync to cloudKit", v21, 2u);
      swift_slowDealloc();
    }

    uint64_t v22 = self;
    NSString v23 = String._bridgeToObjectiveC()();
    id v24 = [v22 internalErrorWithDebugDescription:v23];

    id v25 = v24;
    unsigned __int8 v26 = (void *)_convertErrorToNSError(_:)();
    (*((void (**)(void *, void, void *))aBlock + 2))(aBlock, 0, v26);
  }
LABEL_24:

  _Block_release(aBlock);
}

void sub_10011752C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (**a5)(void, void))
{
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a5;
  if (a1 == 0x656D686361747441 && a2 == (void *)0xEA0000000000746ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    id v45 = v9;
    sub_1000963CC(0, (unint64_t *)&unk_10090AFC0);
    id ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    _Block_copy(a5);
    id v11 = [ObjCClassFromMetadata cdEntityName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v12 = objc_allocWithZone((Class)NSFetchRequest);
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v14 = [v12 initWithEntityName:v13];

    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_100778370;
    strcpy((char *)(v15 + 32), "ckIdentifier");
    *(unsigned char *)(v15 + 45) = 0;
    *(_WORD *)(v15 + 46) = -5120;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = 0xD000000000000011;
    *(void *)(v15 + 72) = 0x800000010077BE40;
    *(void *)(v15 + 88) = &type metadata for String;
    *(void *)(v15 + 96) = 0x774F656E6F5A6B63;
    *(void *)(v15 + 104) = 0xEF656D614E72656ELL;
    *(void *)(v15 + 152) = &type metadata for String;
    *(void *)(v15 + 120) = &type metadata for String;
    *(void *)(v15 + 128) = 0xD000000000000012;
    *(void *)(v15 + 136) = 0x80000001007CA4A0;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v14 setPropertiesToFetch:isa];

    Class v17 = Array._bridgeToObjectiveC()().super.isa;
    [v14 setRelationshipKeyPathsForPrefetching:v17];

    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_100776E80;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 32) = 0x696669746E656469;
    *(void *)(v18 + 40) = 0xEA00000000007265;
    uint64_t v19 = UUID.uuidString.getter();
    *(void *)(v18 + 88) = &type metadata for String;
    *(void *)(v18 + 64) = v19;
    *(void *)(v18 + 72) = v20;
    NSString v21 = String._bridgeToObjectiveC()();
    Class v22 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v23 = [self predicateWithFormat:v21 argumentArray:v22];

    [v14 setPredicate:v23];
    id v24 = *(void **)(a4 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
    v52[0] = 0xD00000000000001BLL;
    v52[1] = 0x80000001007CA4C0;
    v52[3] = 0;
    v53[0] = 0;
    v52[2] = 0;
    *(void *)((char *)v53 + 6) = 0;
    __chkstk_darwin(v25);
    v44[2] = v14;
    sub_1003B689C((uint64_t)v52, (uint64_t)sub_10011D828, (uint64_t)v44);
    id v27 = v26;
    id v28 = [v24 cloudContext];
    if (v28)
    {
      id v29 = v28;
      NSString v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v31 = [v29 containerForAccountID:v30];

      if (v31)
      {
        id v32 = [v31 databaseWithDatabaseScope:[v27 rd_ckDatabaseScope]];
        id v33 = [v27 recordID];
        uint64_t v34 = swift_allocObject();
        id v35 = v45;
        *(void *)(v34 + 16) = sub_10011FBC8;
        *(void *)(v34 + 24) = v35;
        unint64_t v50 = sub_10011D87C;
        uint64_t v51 = v34;
        uint64_t aBlock = _NSConcreteStackBlock;
        unint64_t v47 = 1107296256;
        uint64_t v48 = sub_100102758;
        uint64_t v49 = &unk_1008B9FA0;
        id v36 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        [v32 deleteRecordWithID:v33 completionHandler:v36];
        _Block_release(v36);
        swift_release();

        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v41 = self;
    NSString v42 = String._bridgeToObjectiveC()();
    [v41 internalErrorWithDebugDescription:v42];

    swift_willThrow();
    swift_errorRetain();
    NSString v43 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a5)[2](a5, v43);

    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
  else
  {
    id v37 = self;
    _Block_copy(a5);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    uint64_t aBlock = (void **)0xD000000000000014;
    unint64_t v47 = 0x80000001007CA480;
    v38._countAndFlagsBits = a1;
    v38._object = a2;
    String.append(_:)(v38);
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v40 = [v37 internalErrorWithDebugDescription:v39];

    id v45 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, id))a5)[2](a5, v45);
    swift_release();
  }
}

uint64_t sub_100117C60(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, const void *a6)
{
  LODWORD(v9) = a3;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a6;
  _Block_copy(a6);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_10090ADC0);
  swift_bridgeObjectRetain_n();
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v24 = v12;
    int v25 = (int)v9;
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    id v23 = a6;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_1000C51B8(a1, a2, v27);
    uint64_t v12 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDXPCDebugPerformer: %s initiated", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    LOBYTE(v9) = v25;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v16 = swift_bridgeObjectRelease_n();
  }
  v27[0] = a1;
  v27[1] = a2;
  v27[3] = 0;
  v28[0] = 0;
  v27[2] = 0;
  *(void *)((char *)v28 + 6) = 0;
  __chkstk_darwin(v16);
  v18[2] = a4;
  char v19 = v9 & 1;
  uint64_t v20 = a5;
  NSString v21 = sub_10011C928;
  uint64_t v22 = v12;
  sub_1003B5ADC((uint64_t)v27, (uint64_t)sub_10011C930, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_100117F54(uint64_t a1, uint64_t a2)
{
  if (REMManualOrderingListType.description.getter() == a1 && v4 == a2)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    char v7 = 0;
    int v8 = 1;
    return v8 & 0xFFFEFFFF | ((v7 & 1) << 16);
  }
  if (REMManualOrderingListType.description.getter() == a1 && v10 == a2)
  {
    int v8 = 2;
    swift_bridgeObjectRelease_n();
    char v7 = 0;
    return v8 & 0xFFFEFFFF | ((v7 & 1) << 16);
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v11)
  {
    swift_bridgeObjectRelease();
    char v7 = 0;
    int v8 = 2;
    return v8 & 0xFFFEFFFF | ((v7 & 1) << 16);
  }
  if (REMManualOrderingListType.description.getter() == a1 && v12 == a2)
  {
    swift_bridgeObjectRelease_n();
LABEL_20:
    char v7 = 0;
    int v8 = 3;
    return v8 & 0xFFFEFFFF | ((v7 & 1) << 16);
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (REMManualOrderingListType.description.getter() == a1 && v14 == a2)
  {
    swift_bridgeObjectRelease_n();
LABEL_26:
    char v7 = 0;
    int v8 = 4;
    return v8 & 0xFFFEFFFF | ((v7 & 1) << 16);
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v15)
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  if (REMManualOrderingListType.description.getter() == a1 && v16 == a2)
  {
    swift_bridgeObjectRelease_n();
LABEL_32:
    char v7 = 0;
    int v8 = 5;
    return v8 & 0xFFFEFFFF | ((v7 & 1) << 16);
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v17)
  {
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  if (REMManualOrderingListType.description.getter() == a1 && v18 == a2)
  {
    swift_bridgeObjectRelease_n();
    char v7 = 0;
    int v8 = 6;
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v7 = v19 ^ 1;
    if (v19) {
      int v8 = 6;
    }
    else {
      int v8 = 0;
    }
  }
  return v8 & 0xFFFEFFFF | ((v7 & 1) << 16);
}

void sub_1001181F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(void, void, void))
{
  uint64_t Request = type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(0);
  __chkstk_darwin(Request);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a6);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_100117F54(a1, (uint64_t)a2);
  if ((v15 & 0x10000) != 0)
  {
    uint64_t v16 = self;
    unint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    unint64_t v22 = 0xD000000000000028;
    unint64_t v23 = 0x80000001007CA300;
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v19 = [v16 internalErrorWithDebugDescription:v18];

    id v20 = v19;
    NSString v21 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a6)[2](a6, 0, v21);

    _Block_release(a6);
  }
  else
  {
    *(_WORD *)uint64_t v14 = v15;
    *((void *)v14 + 1) = a3;
    *((void *)v14 + 2) = a4;
    swift_storeEnumTagMultiPayload();
    _Block_copy(a6);
    swift_bridgeObjectRetain();
    sub_100117C60(0xD000000000000021, 0x80000001007CA3D0, 1, (uint64_t)v14, a5, a6);
    _Block_release(a6);
    sub_10011C774((uint64_t)v14, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
    _Block_release(a6);
  }
}

uint64_t sub_100118434(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a3;
  _Block_copy(a3);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10090ADC0);
  char v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDXPCDebugPerformer: removeManualSortHint initiated", v9, 2u);
    swift_slowDealloc();
  }

  v13[0] = 0xD000000000000014;
  v13[1] = 0x80000001007CA3B0;
  v13[3] = 0;
  v14[0] = 0;
  void v13[2] = 0;
  *(void *)((char *)v14 + 6) = 0;
  __chkstk_darwin(v10);
  v12[2] = a1;
  v12[3] = sub_10011FBC8;
  void v12[4] = v5;
  sub_1003B5ADC((uint64_t)v13, (uint64_t)sub_10011C908, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_100118640(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a5;
  _Block_copy(a5);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10090ADC0);
  swift_bridgeObjectRetain_n();
  char v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v17 = a3;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v19[0] = swift_slowAlloc();
    v16[6] = a5;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_1000C51B8(a1, a2, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDXPCDebugPerformer: %s initiated", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v17;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v14 = swift_bridgeObjectRelease_n();
  }
  v19[0] = a1;
  v19[1] = a2;
  void v19[3] = 0;
  v20[0] = 0;
  v19[2] = 0;
  *(void *)((char *)v20 + 6) = 0;
  __chkstk_darwin(v14);
  void v16[2] = a3;
  v16[3] = sub_10011FBC8;
  v16[4] = v9;
  sub_1003B5ADC((uint64_t)v19, (uint64_t)sub_10011C8E8, (uint64_t)v16);
  return swift_release();
}

void sub_100118914(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(void, void))
{
  uint64_t Request = type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(0);
  __chkstk_darwin(Request);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a6);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_100117F54(a1, (uint64_t)a2);
  if ((v15 & 0x10000) != 0)
  {
    uint64_t v16 = self;
    unint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    unint64_t v22 = 0xD000000000000028;
    unint64_t v23 = 0x80000001007CA300;
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v19 = [v16 internalErrorWithDebugDescription:v18];

    id v20 = v19;
    NSString v21 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a6)[2](a6, v21);

    _Block_release(a6);
  }
  else
  {
    *(_WORD *)uint64_t v14 = v15;
    *((void *)v14 + 1) = a3;
    *((void *)v14 + 2) = a4;
    swift_storeEnumTagMultiPayload();
    _Block_copy(a6);
    swift_bridgeObjectRetain();
    sub_100118640(0xD000000000000020, 0x80000001007CA330, (uint64_t)v14, a5, a6);
    _Block_release(a6);
    sub_10011C774((uint64_t)v14, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
    _Block_release(a6);
  }
}

uint64_t sub_100118B50(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  _Block_copy(a4);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10090ADC0);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    char v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDXPCDebugPerformer: updateManualSortHint initiated", v11, 2u);
    swift_slowDealloc();
  }

  v15[0] = 0xD000000000000014;
  v15[1] = 0x80000001007CA2B0;
  v15[3] = 0;
  v16[0] = 0;
  v15[2] = 0;
  *(void *)((char *)v16 + 6) = 0;
  __chkstk_darwin(v12);
  void v14[2] = a1;
  v14[3] = a2;
  v14[4] = sub_10011FBC8;
  v14[5] = v7;
  sub_1003B5ADC((uint64_t)v15, (uint64_t)sub_10011C734, (uint64_t)v14);
  return swift_release();
}

void sub_100118D60(uint64_t a1)
{
  if ([self isMainThread])
  {
    sub_100180FBC();
  }
  else
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    uint64_t v2 = static OS_dispatch_queue.main.getter();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = sub_10011C710;
    *(void *)(v3 + 24) = a1;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_10011FD40;
    *(void *)(v4 + 24) = v3;
    v6[4] = sub_100097240;
    v6[5] = v4;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 1107296256;
    v6[2] = sub_1003B3260;
    v6[3] = &unk_1008B9E88;
    uint64_t v5 = _Block_copy(v6);
    swift_retain();
    swift_release();
    dispatch_sync((dispatch_queue_t)v2, v5);

    _Block_release(v5);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v2) {
      __break(1u);
    }
  }
}

uint64_t sub_100118F08(uint64_t a1)
{
  if ([self isMainThread])
  {
    uint64_t v2 = sub_100183030();
    sub_100183720((unint64_t)v2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    uint64_t v4 = static OS_dispatch_queue.main.getter();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = sub_10011C6A8;
    *(void *)(v5 + 24) = a1;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_10011C6C0;
    *(void *)(v6 + 24) = v5;
    v8[4] = sub_10008F6F4;
    v8[5] = v6;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    uint64_t v8[2] = sub_1003B3260;
    void v8[3] = &unk_1008B9E10;
    uint64_t v7 = _Block_copy(v8);
    swift_retain();
    swift_release();
    dispatch_sync((dispatch_queue_t)v4, v7);

    _Block_release(v7);
    LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v4) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1001190E4(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  v10[0] = 0xD00000000000002DLL;
  v10[1] = 0x80000001007CA1E0;
  v10[3] = 0;
  v11[0] = 0;
  v10[2] = 0;
  *(void *)((char *)v11 + 6) = 0;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = sub_10011C5D0;
  v9[5] = v7;
  _Block_copy(a4);
  sub_1003B5ADC((uint64_t)v10, (uint64_t)sub_10011C638, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_100119208(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a3;
  v8[0] = 0xD000000000000025;
  v8[1] = 0x80000001007CA1B0;
  void v8[3] = 0;
  v9[0] = 0;
  uint64_t v8[2] = 0;
  *(void *)((char *)v9 + 6) = 0;
  v7[2] = a1;
  v7[3] = sub_10011C5D0;
  v7[4] = v5;
  _Block_copy(a3);
  sub_1003B5ADC((uint64_t)v8, (uint64_t)sub_10011C5D8, (uint64_t)v7);
  return swift_release();
}

uint64_t sub_100119320(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  uint64_t v9 = _swiftEmptyDictionarySingleton;
  v10[0] = 0xD000000000000021;
  v10[1] = 0x80000001007CA180;
  v10[2] = 0;
  v10[3] = 0;
  v11[0] = 0;
  *(void *)((char *)v11 + 6) = 0;
  uint64_t v8[2] = a1;
  void v8[3] = a2;
  void v8[4] = &v9;
  v8[5] = sub_10011FBC8;
  void v8[6] = v6;
  _Block_copy(a3);
  sub_1003B5ADC((uint64_t)v10, (uint64_t)sub_10011C508, (uint64_t)v8);
  swift_release();
  return swift_bridgeObjectRelease();
}

void *sub_100119458(void *a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = sub_1001FF8A4((uint64_t)a1);
  uint64_t v4 = (void *)sub_1003A02A4(KeyPath, (uint64_t)v3);
  swift_release();
  sub_1000963CC(0, (unint64_t *)&unk_10090AF90);
  id v5 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v6 = [(id)swift_getObjCClassFromMetadata() entity];
  [v5 setEntity:v6];

  [v5 setAffectedStores:0];
  [v5 setPredicate:v4];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100776E60;
  *(void *)(v7 + 32) = 0x696669746E656469;
  *(void *)(v7 + 40) = 0xEA00000000007265;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = 0x656D614E656C6966;
  *(void *)(v7 + 72) = 0xE800000000000000;
  *(void *)(v7 + 120) = &type metadata for String;
  *(void *)(v7 + 88) = &type metadata for String;
  *(void *)(v7 + 96) = 0x7553323135616873;
  *(void *)(v7 + 104) = 0xE90000000000006DLL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 setPropertiesToFetch:isa];

  Class v9 = Array._bridgeToObjectiveC()().super.isa;
  [v5 setRelationshipKeyPathsForPrefetching:v9];

  unint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  if (v21)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = sub_100200048(v10);
    swift_bridgeObjectRelease();
    sub_100202B84(v11);

    uint64_t v12 = (void *)sub_1005B22E0(a1, 0x80u);
    type metadata accessor for REMCDSavedAttachment();
    id v13 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v14 = [(id)swift_getObjCClassFromMetadata() entity];
    [v13 setEntity:v14];

    [v13 setAffectedStores:0];
    [v13 setPredicate:v12];

    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_100776E60;
    *(void *)(v15 + 32) = 0x696669746E656469;
    *(void *)(v15 + 40) = 0xEA00000000007265;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = 0x656D614E656C6966;
    *(void *)(v15 + 72) = 0xE800000000000000;
    *(void *)(v15 + 120) = &type metadata for String;
    *(void *)(v15 + 88) = &type metadata for String;
    *(void *)(v15 + 96) = 0x7553323135616873;
    *(void *)(v15 + 104) = 0xE90000000000006DLL;
    Class v16 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v13 setPropertiesToFetch:v16];

    Class v17 = Array._bridgeToObjectiveC()().super.isa;
    [v13 setRelationshipKeyPathsForPrefetching:v17];

    unint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
    uint64_t v20 = sub_10020023C(v18);
    swift_bridgeObjectRelease();
    sub_100202B84(v20);

    return _swiftEmptyArrayStorage;
  }
}

uint64_t sub_100119894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v35 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  unint64_t v10 = (void *)sub_10032F7E0(KeyPath, (uint64_t)v6);
  swift_release();
  sub_1000963CC(0, (unint64_t *)&unk_10090AF90);
  id v11 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v12 = [(id)swift_getObjCClassFromMetadata() entity];
  [v11 setEntity:v12];

  [v11 setAffectedStores:0];
  [v11 setPredicate:v10];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v13 = swift_allocObject();
  long long v32 = xmmword_100776E40;
  *(_OWORD *)(v13 + 16) = xmmword_100776E40;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 32) = 0x7553323135616873;
  *(void *)(v13 + 40) = 0xE90000000000006DLL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v11 setPropertiesToFetch:isa];

  Class v15 = Array._bridgeToObjectiveC()().super.isa;
  [v11 setRelationshipKeyPathsForPrefetching:v15];

  uint64_t v33 = a2;
  uint64_t v16 = v34;
  unint64_t v17 = NSManagedObjectContext.fetch<A>(_:)();
  if (v16)
  {

    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = sub_100200048(v17);
    swift_bridgeObjectRelease();
    sub_100202B84(v18);

    id v19 = self;
    Class v20 = UUID._bridgeToObjectiveC()().super.isa;
    id v21 = [v19 objectIDWithUUID:v20];

    id v22 = v21;
    unint64_t v23 = (void *)sub_1005B22E0(v21, 0x60u);
    type metadata accessor for REMCDSavedAttachment();
    id v24 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v25 = [(id)swift_getObjCClassFromMetadata() entity];
    [v24 setEntity:v25];

    [v24 setAffectedStores:0];
    [v24 setPredicate:v23];

    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v32;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 32) = 0x7553323135616873;
    *(void *)(v26 + 40) = 0xE90000000000006DLL;
    Class v27 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v24 setPropertiesToFetch:v27];

    Class v28 = Array._bridgeToObjectiveC()().super.isa;
    [v24 setRelationshipKeyPathsForPrefetching:v28];

    unint64_t v29 = NSManagedObjectContext.fetch<A>(_:)();
    uint64_t v30 = sub_10020023C(v29);
    swift_bridgeObjectRelease();
    sub_100202B84(v30);

    return (uint64_t)v35;
  }
}

void sub_100119D64(char a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10090ADC0);
  Class v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, a4, v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  type metadata accessor for RDHashtagLabelRepairer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v18;
  v25[0] = a5;
  v25[1] = a6;
  v25[3] = 0;
  v26[0] = 0;
  v25[2] = 0;
  *(void *)((char *)v26 + 6) = 0;
  __chkstk_darwin(inited);
  v23[2] = v20;
  char v24 = a1 & 1;
  id v21 = v18;
  sub_1003B6D54((uint64_t)v25, a7, (uint64_t)v23);
  sub_1000963CC(0, (unint64_t *)&unk_10090AF58);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(a3 + 16))(a3, isa, 0);
  swift_bridgeObjectRelease();

  swift_setDeallocating();
}

void sub_100119FE8(char a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10090ADC0);
  Class v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, a4, v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  type metadata accessor for RDHashtagLabelRepairer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v18;
  v25[0] = a5;
  v25[1] = a6;
  v25[3] = 0;
  v26[0] = 0;
  v25[2] = 0;
  *(void *)((char *)v26 + 6) = 0;
  __chkstk_darwin(inited);
  v23[2] = v20;
  char v24 = a1 & 1;
  id v21 = v18;
  sub_1003B71F4((uint64_t)v25, a7, (uint64_t)v23);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(a3 + 16))(a3, isa, 0);
  swift_bridgeObjectRelease();

  swift_setDeallocating();
}

uint64_t sub_10011A240(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a3;
  _Block_copy(a3);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10090ADC0);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDXPCDebugPerformer: fetchAccountListOrderedIdentifiers initiated", v9, 2u);
    swift_slowDealloc();
  }

  v13[0] = 0xD000000000000022;
  v13[1] = 0x80000001007CA000;
  v13[3] = 0;
  v14[0] = 0;
  void v13[2] = 0;
  *(void *)((char *)v14 + 6) = 0;
  __chkstk_darwin(v10);
  v12[2] = a1;
  v12[3] = sub_10011C420;
  void v12[4] = v5;
  sub_1003B5ADC((uint64_t)v13, (uint64_t)sub_10011C428, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_10011A46C(uint64_t a1, const void *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  _Block_copy(a2);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_10090ADC0);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDXPCDebugPerformer: fetchAllSharedEntitySyncActivities initiated", v8, 2u);
    swift_slowDealloc();
  }

  v12[0] = 0xD000000000000022;
  v12[1] = 0x80000001007C9FD0;
  v12[3] = 0;
  v13[0] = 0;
  v12[2] = 0;
  *(void *)((char *)v13 + 6) = 0;
  __chkstk_darwin(v9);
  void v11[2] = a1;
  v11[3] = sub_10011C3D4;
  v11[4] = v4;
  sub_1003B5ADC((uint64_t)v12, (uint64_t)sub_10011C400, (uint64_t)v11);
  return swift_release();
}

uint64_t sub_10011A6A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  uint64_t v13 = (uint64_t *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10011C7D4(a1, (uint64_t)v13, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v10, v13, v7);
    uint64_t KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    id v22 = (void *)sub_10032F7F4(KeyPath, (uint64_t)v6);
    swift_release();
    type metadata accessor for REMCKSharedEntitySyncActivity();
    id v23 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v24 = [(id)swift_getObjCClassFromMetadata() entity];
    [v23 setEntity:v24];

    [v23 setAffectedStores:0];
    [v23 setPredicate:v22];

    unint64_t v25 = NSManagedObjectContext.fetch<A>(_:)();
    if (v1)
    {
LABEL_5:
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);

      return v2;
    }
    uint64_t v2 = v25;
    if (v25 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v35 < 2) {
        goto LABEL_5;
      }
    }
    else if (*(uint64_t *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
    {
      goto LABEL_5;
    }
    Class v28 = self;
    uint64_t v36 = 0;
    unint64_t v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(88);
    v29._object = (void *)0x80000001007C9EC0;
    v29._countAndFlagsBits = 0xD000000000000047;
    String.append(_:)(v29);
    sub_10011D8CC((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 0x6C6C6F6620736120;
    v31._object = (void *)0xED0000203A73776FLL;
    String.append(_:)(v31);
    v32._countAndFlagsBits = Array.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = v37;
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v28 internalErrorWithDebugDescription:v33];

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return v2;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    uint64_t v17 = swift_getKeyPath();
    uint64_t v18 = (void *)sub_10032F808(v17, v15, v16);
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for REMCKSharedEntitySyncActivity();
    id v19 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v20 = [(id)swift_getObjCClassFromMetadata() entity];
    [v19 setEntity:v20];

    [v19 setAffectedStores:0];
    [v19 setPredicate:v18];

    uint64_t v2 = NSManagedObjectContext.fetch<A>(_:)();
  }
  else
  {
    type metadata accessor for REMCKSharedEntitySyncActivity();
    id v26 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v27 = [(id)swift_getObjCClassFromMetadata() entity];
    [v26 setEntity:v27];

    [v26 setAffectedStores:0];
    [v26 setPredicate:0];
    uint64_t v2 = NSManagedObjectContext.fetch<A>(_:)();
  }
  return v2;
}

void *sub_10011ACD0(unint64_t a1)
{
  unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * i);
      uint64_t v5 = v4;
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v9 = v4;
      sub_100109928(&v9, &v8);

      if (v8)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return (void *)v10;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_10011AE58(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CocoaError.Code();
  uint64_t v46 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v45 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  _Block_copy(a3);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_10090ADC0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDXPCDebugPerformer: addSharedEntitySyncActivity initiated", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  NSString v17 = [a1 accountIdentifier];
  if (!v17)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v18 = [v16 storeForAccountIdentifier:v17];

  if (v18)
  {
    uint64_t v48 = 0xD00000000000001BLL;
    unint64_t v49 = 0x80000001007C9FB0;
    uint64_t v51 = 0;
    memset(v52, 0, 14);
    uint64_t v50 = 0;
    __chkstk_darwin(v19);
    v41[-4] = v18;
    v41[-3] = a1;
    v41[-2] = sub_10011FBC8;
    v41[-1] = v11;
    sub_1003B5ADC((uint64_t)&v48, (uint64_t)sub_10011C3B4, (uint64_t)&v41[-6]);
    swift_release();
  }
  else
  {
    NSString v42 = v8;
    uint64_t v43 = v9;
    uint64_t v44 = v11;
    id v20 = a1;
    id v21 = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)id v23 = 136315138;
      v41[1] = v23 + 4;
      id v24 = [v20 accountIdentifier];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      uint64_t v28 = v25;
      Swift::String v29 = &stru_1008F6000;
      uint64_t v47 = sub_1000C51B8(v28, v27, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v22, "Persistent store not found for accountIdentifier %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v30 = v46;
      Swift::String v31 = v45;
    }
    else
    {

      uint64_t v30 = v46;
      Swift::String v31 = v45;
      Swift::String v29 = &stru_1008F6000;
    }
    static CocoaError.Code.persistentStoreUnsupportedRequestType.getter();
    sub_100094134(&qword_10090AF50);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    uint64_t v48 = 0xD00000000000001ALL;
    unint64_t v49 = 0x80000001007C9F10;
    AnyHashable.init<A>(_:)();
    id v33 = [v20 v29[114].types];
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;

    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = v34;
    *(void *)(inited + 80) = v36;
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v37;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = 0xD000000000000073;
    *(void *)(inited + 152) = 0x80000001007C9F30;
    sub_1002EE418(inited);
    uint64_t v38 = type metadata accessor for URL();
    uint64_t v39 = (uint64_t)v42;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v42, 1, 1, v38);
    static CocoaError.error(_:userInfo:url:)();
    swift_bridgeObjectRelease();
    sub_1000966BC(v39, (uint64_t *)&unk_100909E40);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v43);
    id v40 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a3)[2](a3, v40);

    swift_errorRelease();
    swift_release();
  }
}

uint64_t sub_10011B4F8(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  sub_10011C7D4(a1, (uint64_t)v8, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      _Block_copy(a3);
      uint64_t v11 = sub_10011C774((uint64_t)v8, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
      unint64_t v12 = 0xD000000000000030;
      uint64_t v13 = "removeSharedEntitySyncActivitiesWithCKIdentifier";
    }
    else
    {
      unint64_t v12 = 0xD000000000000021;
      uint64_t v11 = (uint64_t)_Block_copy(a3);
      uint64_t v13 = "removeAllSharedEntitySyncActivity";
    }
  }
  else
  {
    _Block_copy(a3);
    uint64_t v11 = sub_10011C774((uint64_t)v8, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
    unint64_t v12 = 0xD000000000000037;
    uint64_t v13 = "removeSharedEntitySyncActivityWithUUIDForChangeTracking";
  }
  v16[0] = v12;
  v16[1] = (unint64_t)(v13 - 32) | 0x8000000000000000;
  v16[3] = 0;
  v17[0] = 0;
  void v16[2] = 0;
  *(void *)((char *)v17 + 6) = 0;
  __chkstk_darwin(v11);
  *(void *)&v15[-32] = a2;
  *(void *)&v15[-24] = a1;
  *(void *)&v15[-16] = sub_10011FBC8;
  *(void *)&v15[-8] = v9;
  sub_1003B5ADC((uint64_t)v16, (uint64_t)sub_10011C334, (uint64_t)&v15[-48]);
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_10011B760(uint64_t a1, const void *a2)
{
  uint64_t Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a2);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_10090ADC0);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDXPCDebugPerformer: removeSharedEntitySyncActivityWithActivities initiated", v10, 2u);
    swift_slowDealloc();
  }

  swift_storeEnumTagMultiPayload();
  _Block_copy(a2);
  sub_10011B4F8((uint64_t)v6, a1, a2);
  _Block_release(a2);
  sub_10011C774((uint64_t)v6, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  _Block_release(a2);
}

void sub_10011B8FC(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a3);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_10090ADC0);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: removeSharedEntitySyncActivityWithUUID initiated", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v8, a1, v13);
  swift_storeEnumTagMultiPayload();
  _Block_copy(a3);
  sub_10011B4F8((uint64_t)v8, a2, a3);
  _Block_release(a3);
  sub_10011C774((uint64_t)v8, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  _Block_release(a3);
}

void sub_10011BAD8(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  uint64_t v10 = (uint64_t *)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  _Block_copy(a4);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_10090ADC0);
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDXPCDebugPerformer: removeSharedEntitySyncActivities initiated", v14, 2u);
    swift_slowDealloc();
  }

  *uint64_t v10 = a1;
  v10[1] = a2;
  swift_storeEnumTagMultiPayload();
  _Block_copy(a4);
  swift_bridgeObjectRetain();
  sub_10011B4F8((uint64_t)v10, a3, a4);
  _Block_release(a4);
  sub_10011C774((uint64_t)v10, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  _Block_release(a4);
}

uint64_t sub_10011BC90(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  _Block_copy(a4);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10090ADC0);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDXPCDebugPerformer: updateMinimumSupportedVersion initiated", v11, 2u);
    swift_slowDealloc();
  }

  v15[0] = 0xD00000000000001DLL;
  v15[1] = 0x80000001007C9DB0;
  v15[3] = 0;
  v16[0] = 0;
  v15[2] = 0;
  *(void *)((char *)v16 + 6) = 0;
  __chkstk_darwin(v12);
  void v14[2] = a1;
  v14[3] = a2;
  v14[4] = sub_10011C2EC;
  v14[5] = v7;
  sub_1003B5ADC((uint64_t)v15, (uint64_t)sub_10011C2F4, (uint64_t)v14);
  return swift_release();
}

void sub_10011BEA0(uint64_t a1)
{
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10090ADC0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RDXPCDebugPerformer: updateRemCurrentRuntimeVersionDebuggingOverride initiated", v5, 2u);
    swift_slowDealloc();
  }

  id v6 = [self daemonUserDefaults];
  id v7 = [objc_allocWithZone((Class)NSNumber) initWithInteger:a1];
  [v6 setRemCurrentRuntimeVersionDebuggingOverride:v7];
}

uint64_t sub_10011BFF4(char a1, uint64_t a2, const void *a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a3;
  _Block_copy(a3);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10090ADC0);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDXPCDebugPerformer: fetchAllDueDateDeltaAlerts initiated", v9, 2u);
    swift_slowDealloc();
  }

  v15[0] = 0xD00000000000001ALL;
  v15[1] = 0x80000001007C9D00;
  v15[3] = 0;
  v16[0] = 0;
  v15[2] = 0;
  *(void *)((char *)v16 + 6) = 0;
  __chkstk_darwin(v10);
  v12[16] = a1 & 1;
  os_log_type_t v13 = sub_10011C270;
  uint64_t v14 = v5;
  sub_1003B5ADC((uint64_t)v15, (uint64_t)sub_10011C29C, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_10011C238()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10011C270(uint64_t a1, uint64_t a2)
{
  sub_100108E60(a1, a2, *(void *)(v2 + 16), (unint64_t *)&unk_100920C30);
}

void sub_10011C29C(uint64_t a1)
{
  sub_100108220(a1, *(unsigned char *)(v1 + 16), *(void (**)(uint64_t, void))(v1 + 24));
}

const char *sub_10011C2BC()
{
  return "minimumSupportedAppVersion";
}

const char *sub_10011C2D0()
{
  return "sortOrder";
}

void sub_10011C2EC(uint64_t a1)
{
  sub_100743050(a1, *(void *)(v1 + 16));
}

void sub_10011C2F4(void *a1)
{
  sub_100107BA8(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10090B1C8);
}

uint64_t sub_10011C334(void *a1)
{
  return sub_10010A678(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

const char *sub_10011C354()
{
  return "ckIdentifier";
}

const char *sub_10011C368()
{
  return "uuidForChangeTracking";
}

uint64_t sub_10011C374@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010A850(a1, (SEL *)&selRef_uuidForChangeTracking, a2);
}

void sub_10011C394(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_10011C3B4(void *a1)
{
  sub_100107258(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

void sub_10011C3D4(uint64_t a1, uint64_t a2)
{
  sub_100108E60(a1, a2, *(void *)(v2 + 16), (unint64_t *)&unk_1009102A0);
}

uint64_t sub_10011C400(uint64_t a1)
{
  return sub_1001070F0(a1, *(void *)(v1 + 16), *(void (**)(void *, uint64_t))(v1 + 24));
}

void sub_10011C420(uint64_t a1, uint64_t a2)
{
  sub_100106DFC(a1, a2, *(void *)(v2 + 16));
}

void sub_10011C428(void *a1)
{
  sub_100106F30(a1, *(void *)(v1 + 16), *(void (**)(void *, uint64_t))(v1 + 24));
}

void *sub_10011C448@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100197090(a1, *(unsigned __int8 *)(v2 + 24), a2);
}

id sub_10011C468@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10019600C(a1, *(unsigned __int8 *)(v2 + 24), a2);
}

id sub_10011C488@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100194B9C(a1, *(unsigned __int8 *)(v2 + 24), a2);
}

id sub_10011C4A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100193EA0(a1, *(unsigned __int8 *)(v2 + 24), a2);
}

id sub_10011C4C8@<X0>(void *a1@<X0>, unint64_t a2@<X8>)
{
  return sub_10019302C(a1, *(unsigned char *)(v2 + 24), a2);
}

id sub_10011C4E8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100192CD0(a1, *(unsigned char *)(v2 + 24), a2);
}

uint64_t sub_10011C508(void *a1)
{
  return sub_100104BB4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(id **)(v1 + 32), *(void (**)(uint64_t))(v1 + 40), *(void *)(v1 + 48));
}

unint64_t sub_10011C52C()
{
  unint64_t result = qword_10090AF70;
  if (!qword_10090AF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090AF70);
  }
  return result;
}

uint64_t sub_10011C590@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010A850(a1, (SEL *)&selRef_identifier, a2);
}

void sub_10011C5B0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10011C5D0(uint64_t a1, uint64_t a2)
{
  return sub_100551BAC(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10011C5D8(uint64_t a1)
{
  return sub_100104870(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10011C5F8(void *a1, char a2)
{
  return sub_100104A18(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16), *(void *)(v2 + 24), (uint64_t (*)(void *, void))sub_10011C62C);
}

void sub_10011C62C(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_10011C638(void *a1)
{
  return sub_1001045F0(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10011C658(void *a1, char a2)
{
  return sub_100104A18(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16), *(void *)(v2 + 24), (uint64_t (*)(void *, void))sub_10011FBC0);
}

void sub_10011C68C(void *a1)
{
  sub_100104070(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10011C6A8()
{
  return sub_100103DA8();
}

uint64_t sub_10011C6B0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011C6C0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10011C6E8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011C6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10011C708()
{
  return swift_release();
}

uint64_t sub_10011C714()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011C724()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011C734(void *a1)
{
  return sub_10010336C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10090B120);
}

uint64_t sub_10011C774(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10011C7D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

const char *sub_10011C844()
{
  return "markedForDeletion";
}

id sub_10011C850@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 markedForDeletion];
  *a2 = (_BYTE)result;
  return result;
}

id sub_10011C884(unsigned __int8 *a1, id *a2)
{
  return [*a2 setMarkedForDeletion:*a1];
}

uint64_t sub_10011C8A8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010A850(a1, (SEL *)&selRef_identifier, a2);
}

void sub_10011C8C8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10011C8E8(void *a1)
{
  return sub_1001091D0(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10011C908(void *a1)
{
  return sub_100102AF0(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

void sub_10011C928(objc_class *a1, uint64_t a2)
{
  sub_100102A38(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10011C930(uint64_t a1)
{
  return sub_100108F00(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(void, uint64_t))(v1 + 40));
}

unint64_t sub_10011C958(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v108 = *(void *)(v4 - 8);
  uint64_t v109 = v4;
  __chkstk_darwin(v4);
  uint64_t v104 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v105 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v106 = (uint64_t)&v99 - v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v99 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v99 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v107 = sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  id v20 = [a1 hintData];
  uint64_t v110 = a1;
  if (v20)
  {
    id v21 = v20;
    uint64_t v101 = v16;
    uint64_t v102 = a2;
    id v103 = v12;
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    uint64_t v25 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    *(void *)&v112[0] = 0;
    id v27 = [v25 JSONObjectWithData:isa options:0 error:v112];

    id v28 = *(id *)&v112[0];
    if (!v27)
    {
      unint64_t v98 = v28;
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_100097F34(v22, v24);
    }
    _bridgeAnyObjectToAny(_:)();
    sub_100097F34(v22, v24);
    swift_unknownObjectRelease();
    sub_10009A1A0(&v113, v112);
    sub_100094134((uint64_t *)&unk_100917670);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      unint64_t v107 = v111;
    }
    a1 = v110;
    a2 = v102;
    uint64_t v12 = v103;
    uint64_t v16 = v101;
  }
  [a1 lastAccessedSinceReferenceDate];
  Date.init(timeIntervalSinceReferenceDate:)();
  Class v29 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  id v30 = [a2 stringFromDate:v29];

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v102 = v32;
  id v103 = (char *)v31;

  id v33 = [a1 identifier];
  if (v33)
  {
    uint64_t v34 = v33;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v35 = v108;
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
    unint64_t v37 = v12;
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v35 = v108;
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
    unint64_t v37 = v12;
    uint64_t v38 = 1;
  }
  uint64_t v39 = v109;
  v36(v37, v38, 1, v109);
  sub_100096408((uint64_t)v12, (uint64_t)v15, (uint64_t *)&unk_100909E50);
  id v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  if (v40(v15, 1, v39))
  {
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
    uint64_t v41 = 0;
    unint64_t v42 = 0xE000000000000000;
  }
  else
  {
    uint64_t v43 = v104;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v104, v15, v39);
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
    uint64_t v44 = v35;
    uint64_t v41 = UUID.uuidString.getter();
    unint64_t v42 = v45;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v39);
  }
  [v110 listTypeRawValue];
  if ((REMManualOrderingListType.init(intValue:)() & 0x10000) != 0)
  {
    unint64_t v100 = 0xE000000000000000;
    uint64_t v101 = 0;
  }
  else
  {
    uint64_t v46 = REMManualOrderingListType.description.getter();
    unint64_t v100 = v47;
    uint64_t v101 = v46;
  }
  sub_100094134(&qword_100908170);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = v41;
  *(void *)(inited + 40) = v42;
  uint64_t v49 = swift_initStackObject();
  *(_OWORD *)(v49 + 16) = xmmword_10077BB50;
  *(void *)(v49 + 32) = 1734431845;
  *(void *)(v49 + 40) = 0xE400000000000000;
  id v50 = [v110 eTag];
  if (v50)
  {
    uint64_t v51 = v50;
    uint64_t v52 = (uint64_t)v105;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v53 = 0;
    uint64_t v54 = v109;
  }
  else
  {
    uint64_t v53 = 1;
    uint64_t v54 = v109;
    uint64_t v52 = (uint64_t)v105;
  }
  uint64_t v55 = v108;
  v36((char *)v52, v53, 1, v54);
  uint64_t v56 = v106;
  sub_100096408(v52, v106, (uint64_t *)&unk_100909E50);
  if (v40((char *)v56, 1, v54))
  {
    sub_1000966BC(v56, (uint64_t *)&unk_100909E50);
    id v57 = (uint64_t *)(v49 + 48);
    *(void *)(v49 + 72) = &type metadata for String;
LABEL_20:
    *id v57 = 0;
    unint64_t v58 = 0xE000000000000000;
    goto LABEL_23;
  }
  os_log_type_t v59 = v104;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v104, v56, v54);
  sub_1000966BC(v56, (uint64_t *)&unk_100909E50);
  uint64_t v60 = v55;
  uint64_t v61 = UUID.uuidString.getter();
  uint64_t v62 = v54;
  uint64_t v63 = v61;
  unint64_t v58 = v64;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v62);
  id v57 = (uint64_t *)(v49 + 48);
  *(void *)(v49 + 72) = &type metadata for String;
  if (!v58) {
    goto LABEL_20;
  }
  *id v57 = v63;
LABEL_23:
  *(void *)(v49 + 56) = v58;
  *(void *)(v49 + 80) = 0x61746144746E6968;
  *(void *)(v49 + 88) = 0xE800000000000000;
  uint64_t v65 = sub_100094134((uint64_t *)&unk_100917670);
  *(void *)(v49 + 96) = v107;
  uint64_t v109 = v65;
  *(void *)(v49 + 120) = v65;
  strcpy((char *)(v49 + 128), "lastAccessed");
  *(unsigned char *)(v49 + 141) = 0;
  *(_WORD *)(v49 + 142) = -5120;
  uint64_t v66 = v102;
  *(void *)(v49 + 144) = v103;
  *(void *)(v49 + 152) = v66;
  *(void *)(v49 + 168) = &type metadata for String;
  *(void *)(v49 + 176) = 0x657079547473696CLL;
  uint64_t v67 = v101;
  *(void *)(v49 + 184) = 0xE800000000000000;
  *(void *)(v49 + 192) = v67;
  *(void *)(v49 + 200) = v100;
  *(void *)(v49 + 216) = &type metadata for String;
  *(void *)(v49 + 224) = 0xD000000000000010;
  *(void *)(v49 + 232) = 0x800000010077BE80;
  id v68 = v110;
  *(_WORD *)(v49 + 240) = (unsigned __int16)[v110 listTypeRawValue];
  *(void *)(v49 + 264) = &type metadata for Int16;
  *(void *)(v49 + 272) = 0x44497473696CLL;
  *(void *)(v49 + 280) = 0xE600000000000000;
  id v69 = [v68 listID];
  if (!v69)
  {
    unint64_t v74 = (uint64_t *)(v49 + 288);
    *(void *)(v49 + 312) = &type metadata for String;
    goto LABEL_27;
  }
  uint64_t v70 = v69;
  uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v73 = v72;

  unint64_t v74 = (uint64_t *)(v49 + 288);
  *(void *)(v49 + 312) = &type metadata for String;
  if (!v73)
  {
LABEL_27:
    uint64_t v75 = v110;
    *unint64_t v74 = 0;
    unint64_t v73 = 0xE000000000000000;
    goto LABEL_28;
  }
  *unint64_t v74 = v71;
  uint64_t v75 = v110;
LABEL_28:
  *(void *)(v49 + 296) = v73;
  *(void *)(v49 + 320) = 0xD000000000000014;
  *(void *)(v49 + 328) = 0x80000001007CA400;
  *(_WORD *)(v49 + 336) = (unsigned __int16)[v75 serializationVersion];
  *(void *)(v49 + 360) = &type metadata for Int16;
  *(void *)(v49 + 368) = 0xD000000000000026;
  *(void *)(v49 + 376) = 0x80000001007CA420;
  id v76 = [v75 concatenatedContainerIDsWithLocalContainerIDPrefix];
  if (v76)
  {
    unint64_t v77 = v76;
    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v80 = v79;

    *(void *)&long long v113 = v78;
    *((void *)&v113 + 1) = v80;
    uint64_t v81 = *(void *)&v75[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
                        + 8];
    *(void *)&v112[0] = *(void *)&v75[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix];
    *((void *)&v112[0] + 1) = v81;
    sub_1000E4FD8();
    uint64_t v82 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    uint64_t v83 = (void *)sub_10012674C(v82);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v83 = &_swiftEmptySetSingleton;
  }
  char v84 = sub_100209D8C((uint64_t)v83);
  swift_bridgeObjectRelease();
  uint64_t v85 = sub_100094134((uint64_t *)&unk_10090AFB0);
  *(void *)(v49 + 384) = v84;
  *(void *)(v49 + 408) = v85;
  *(void *)(v49 + 416) = 0xD000000000000022;
  *(void *)(v49 + 424) = 0x80000001007CA450;
  id v86 = [v75 concatenatedElementIDsWithLocalElementIDPrefix];
  if (v86)
  {
    unint64_t v87 = v86;
    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v89 = v75;
    uint64_t v91 = v90;

    *(void *)&long long v113 = v88;
    *((void *)&v113 + 1) = v91;
    uint64_t v92 = *(void *)&v89[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix + 8];
    *(void *)&v112[0] = *(void *)&v89[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix];
    *((void *)&v112[0] + 1) = v92;
    sub_1000E4FD8();
    uint64_t v93 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    uint64_t v94 = (void *)sub_10012674C(v93);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v94 = &_swiftEmptySetSingleton;
  }
  uint64_t v95 = sub_100209D8C((uint64_t)v94);
  swift_bridgeObjectRelease();
  *(void *)(v49 + 456) = v85;
  *(void *)(v49 + 432) = v95;
  unint64_t v96 = sub_1001805C0(v49);
  *(void *)(inited + 72) = v109;
  *(void *)(inited + 48) = v96;
  return sub_1001805C0(inited);
}

unint64_t sub_10011D364(void *a1, void *a2)
{
  id v47 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v46 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v14 = __chkstk_darwin(v13).n128_u64[0];
  uint64_t v16 = (char *)&v41 - v15;
  id v17 = [a1 identifier:v14];
  if (v17)
  {
    uint64_t v18 = v17;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  sub_100096408((uint64_t)v12, (uint64_t)v16, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6))
  {
    sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
    uint64_t v19 = 0;
    unint64_t v20 = 0xE000000000000000;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v16, v6);
    sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
    uint64_t v19 = UUID.uuidString.getter();
    unint64_t v20 = v21;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  id v22 = [a1 listID];
  if (v22)
  {
    unint64_t v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;
  }
  else
  {
    uint64_t v24 = 0;
    unint64_t v26 = 0xE000000000000000;
  }
  [a1 listTypeRawValue];
  uint64_t v27 = REMManualOrderingListType.init(intValue:)();
  unint64_t v43 = v26;
  uint64_t v44 = v24;
  if ((v27 & 0x10000) != 0)
  {
    uint64_t v42 = 0;
    unint64_t v29 = 0xE000000000000000;
  }
  else
  {
    uint64_t v42 = REMManualOrderingListType.description.getter();
    unint64_t v29 = v28;
  }
  [a1 lastAccessedSinceReferenceDate];
  Date.init(timeIntervalSinceReferenceDate:)();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v5, v46);
  id v31 = [v47 stringFromDate:isa];

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  sub_100094134(&qword_100908170);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = v19;
  *(void *)(inited + 40) = v20;
  uint64_t v36 = swift_initStackObject();
  *(_OWORD *)(v36 + 16) = xmmword_100778370;
  *(void *)(v36 + 32) = 0xD000000000000010;
  *(void *)(v36 + 40) = 0x800000010077BE80;
  *(_WORD *)(v36 + 48) = (unsigned __int16)[a1 listTypeRawValue];
  *(void *)(v36 + 72) = &type metadata for Int16;
  *(void *)(v36 + 80) = 0x657079547473696CLL;
  uint64_t v37 = v42;
  *(void *)(v36 + 88) = 0xE800000000000000;
  *(void *)(v36 + 96) = v37;
  *(void *)(v36 + 104) = v29;
  *(void *)(v36 + 120) = &type metadata for String;
  *(void *)(v36 + 128) = 0x44497473696CLL;
  uint64_t v38 = v44;
  *(void *)(v36 + 136) = 0xE600000000000000;
  *(void *)(v36 + 144) = v38;
  *(void *)(v36 + 152) = v43;
  *(void *)(v36 + 168) = &type metadata for String;
  strcpy((char *)(v36 + 176), "lastAccessed");
  *(void *)(v36 + 216) = &type metadata for String;
  *(unsigned char *)(v36 + 189) = 0;
  *(_WORD *)(v36 + 190) = -5120;
  *(void *)(v36 + 192) = v32;
  *(void *)(v36 + 200) = v34;
  unint64_t v39 = sub_1001805C0(v36);
  *(void *)(inited + 72) = sub_100094134((uint64_t *)&unk_100917670);
  *(void *)(inited + 48) = v39;
  return sub_1001805C0(inited);
}

void sub_10011D828(uint64_t *a1@<X8>)
{
}

uint64_t sub_10011D844()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011D87C(uint64_t a1, uint64_t a2)
{
  return sub_100102628(a1, a2, *(uint64_t (**)(id))(v2 + 16));
}

uint64_t sub_10011D884@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100415BD4(v1[2], v1[3], v1[4]);
  if (!v2) {
    *a1 = result & 1;
  }
  return result;
}

uint64_t sub_10011D8C0()
{
  return sub_100101D08(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_10011D8CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10011D918()
{
  sub_100101988(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32));
}

void sub_10011D924(uint64_t a1, uint64_t a2)
{
  sub_1001018EC(a1, a2, *(void *)(v2 + 16));
}

void sub_10011D92C()
{
  sub_100101670(*(void (**)(void *, void))(v0 + 16));
}

uint64_t sub_10011D934()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10011DA00()
{
  type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 + 16);

  sub_10010075C(v1);
}

uint64_t sub_10011DA64()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011DA74()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10011DB78()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(char **)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + 24);
  unint64_t v6 = *(void (**)(id))(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v3 + 8);

  sub_1001007CC(v4, v5, (void *)(v0 + v2), v6, v7);
}

uint64_t sub_10011DC18()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10011DCF8()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v5 = *(unsigned char **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1001010EC(v3, v4, v0 + v2, v5);
}

uint64_t sub_10011DD88()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011DD98()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011DDD0(void *a1, int a2)
{
  return sub_1000FF408(a1, a2, *(id *)(v2 + 16), *(void ***)(v2 + 24));
}

uint64_t sub_10011DDD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011DDE8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_10011DE10(void *a1)
{
  sub_1000FE974(a1, *(void **)(v1 + 16), *(unsigned char *)(v1 + 32), *(double *)(v1 + 24));
}

void sub_10011DE34(void *a1)
{
  sub_1000FE544(a1, *(void **)(v1 + 16), *(unsigned char *)(v1 + 32), *(double *)(v1 + 24));
}

void sub_10011DE58(void *a1)
{
  sub_1000FE2E0(a1, *(void **)(v1 + 16), *(unsigned char *)(v1 + 24));
}

void sub_10011DE78(void *a1)
{
  sub_100109EBC(a1, *(void **)(v1 + 16), *(unsigned char *)(v1 + 24), *(unsigned char *)(v1 + 25), *(unsigned char *)(v1 + 26));
}

uint64_t sub_10011DEA0()
{
  return sub_10050DAF8(*(void *)(v0 + 16));
}

uint64_t sub_10011DEAC()
{
  return sub_10011DF28((uint64_t (*)(void))sub_1004F1218);
}

uint64_t sub_10011DEC8()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10011DF10()
{
  return sub_10011DF28((uint64_t (*)(void))sub_1004F120C);
}

uint64_t sub_10011DF28(uint64_t (*a1)(void))
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 32);
  uint64_t v3 = a1(*(void *)(v1 + 24));
  return v2(v3);
}

uint64_t sub_10011DF78()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();

  return _swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

void sub_10011E038()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  double v4 = v0[2];
  double v5 = v0[3];
  double v6 = v0[4];
  uint64_t v7 = *(void *)((char *)v0 + v3);
  uint64_t v8 = *(void (**)(void))((char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1000FD910(v4, v5, v6, (uint64_t)v0 + v2, v7, v8);
}

uint64_t sub_10011E0DC()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10011E124()
{
  uint64_t v1 = (uint64_t (*)(void))v0[5];
  sub_1004F0A3C(v0[3], v0[4]);
  return v1();
}

void sub_10011E170()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(v1 + 16))(v1, isa);
}

uint64_t sub_10011E1D0()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10011E210()
{
  return sub_1000FC7E0(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24));
}

uint64_t sub_10011E21C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10011E244()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

void sub_10011E270(uint64_t a1)
{
  sub_1000FA914(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_10011E278()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10011E2B0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  swift_release();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

uint64_t sub_10011E3C4(char a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000FAB44(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), *(void *)(v2 + 40), *(char **)(v2 + 48), v2 + v6, *(void **)(v2 + v7), *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(NSObject **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10011E490()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

void sub_10011E58C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v0 + v2;
  uint64_t v8 = *(void **)(v0 + v4);
  uint64_t v9 = *(void *)(v0 + v5);
  uint64_t v10 = *(void *)(v0 + v6);
  uint64_t v11 = *(void (**)(uint64_t))(v0 + v3);
  uint64_t v12 = *(void *)(v0 + v3 + 8);
  uint64_t v13 = (uint64_t *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];

  sub_1000FB4D0(v7, v11, v12, v8, v9, v10, v14, v15);
}

uint64_t sub_10011E654()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10011E694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FB9A4(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(uint64_t (**)(uint64_t))(v3 + 32));
}

void sub_10011E6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000FA864(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_10011E6A8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10011E6E4(uint64_t a1)
{
  sub_1000F8250(a1, *(void (**)(void, void, void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10011E6F4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10011E734(uint64_t a1)
{
  return sub_1000F84B4(a1, *(void (**)(uint64_t, uint64_t, void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_10011E740(void *a1)
{
  sub_1000F852C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t sub_10011E774()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v10);
}

void sub_10011E8C4()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_1000F8F48(*(void *)(v0 + 16), v0 + v2, *(void **)(v0 + v3), *(void **)(v0 + v4), *(void **)(v0 + v5), *(void *)(v0 + v6), *(void *)(v0 + v6 + 8), *(void **)(v0 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10011E998()
{
  swift_release();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10011EA00()
{
  return sub_1000F9220(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void (**)(uint64_t))(v0 + 48), *(void (**)(uint64_t))(v0 + 56), *(void **)(v0 + 64), *(void *)(v0 + 72), *(char **)(v0 + 80));
}

id sub_10011EA38@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_10011EA74(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

uint64_t sub_10011EA88()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v10);
}

void sub_10011EBD8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_1000F9FF0(a1, *(void *)(v1 + 16), v1 + v4, *(void **)(v1 + v5), *(void (**)(uint64_t))(v1 + v6), *(void *)(v1 + v6 + 8), *(void **)(v1 + v7), *(void **)(v1 + v8), *(void **)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10011ECC0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_10011ED18()
{
  sub_1000FA65C(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void (**)(uint64_t))(v0 + 40));
}

void sub_10011ED2C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000F7BD8(a1, *(unint64_t **)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t sub_10011ED50()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10011ED60()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10011EDB0()
{
  sub_1000F74E0(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10011EDBC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10011EE04(uint64_t a1)
{
  sub_1000F75E0(a1, *(dispatch_group_t *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t *sub_10011EE10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      uint64_t v11 = a2[2];
      a1[1] = a2[1];
      a1[2] = v11;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10011EF90(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v3 = type metadata accessor for Date();
LABEL_6:
    unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    uint64_t v3 = type metadata accessor for UUID();
    goto LABEL_6;
  }

  return swift_bridgeObjectRelease();
}

void *sub_10011F044(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v9 = a2[2];
    a1[1] = a2[1];
    a1[2] = v9;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10011F180(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10011C774((uint64_t)a1, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_10011F2E8(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10011F3F4(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10011C774((uint64_t)a1, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10011F524()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDXPCDebugPerformer.ImageReversionError()
{
  return &type metadata for RDXPCDebugPerformer.ImageReversionError;
}

uint64_t *sub_10011F600(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10011F720(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    uint64_t v3 = type metadata accessor for UUID();
    unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_10011F7C0(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10011F89C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10011C774((uint64_t)a1, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_10011F9A4(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10011FA58(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10011C774((uint64_t)a1, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10011FB30()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_10011FD44(NSObject *a1)
{
  uint64_t v21 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v20 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  int v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v19 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v18 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100120090((void *)v1[3], a1);
  if (!v2)
  {
    uint64_t v13 = v12;
    unsigned int v14 = [(id)v1[5] shouldSaveCompleted];
    uint64_t v15 = (unsigned int *)&enum case for REMRemindersListDataView.ShowCompleted.on(_:);
    if (!v14) {
      uint64_t v15 = (unsigned int *)&enum case for REMRemindersListDataView.ShowCompleted.off(_:);
    }
    (*(void (**)(char *, void, uint64_t))(v18 + 104))(v11, *v15, v9);
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v8, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), Subtasks);
    (*(void (**)(char *, void, uint64_t))(v20 + 104))(v5, enum case for REMRemindersListDataView.SortingStyle.manual(_:), v21);
    unint64_t v1 = sub_1005AB4F8(v13, a1, (uint64_t)v11, v8, (uint64_t)v5);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v21);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, Subtasks);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v9);
  }
  return v1;
}

void sub_100120090(void *a1, NSObject *a2)
{
  uint64_t v4 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = objc_allocWithZone((Class)REMSmartListsDataViewInvocation_fetchSmartList);
  id v8 = a1;
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithSmartListType:v9 objectID:v8 createIfNeeded:0];

  uint64_t v11 = sub_1005005A4(a2);
  if (!v3)
  {
    self;
    uint64_t v12 = swift_dynamicCastObjCClass();
    if (v12)
    {
      uint64_t v13 = (void *)v12;
      unint64_t v23 = v11;
      unint64_t v25 = v11;
      Class isa = (Class)[v13 smartListStorages];
      if (!isa)
      {
        sub_1000963CC(0, &qword_10090B328);
        static Array._unconditionallyBridgeFromObjectiveC(_:)();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      uint64_t v24 = self;
      id v15 = [v13 accountStorages];
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1000963CC(0, &qword_100910180);
      sub_1001207D4();
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      Class v16 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v17 = [v13 parentListStorages];
      sub_1000963CC(0, (unint64_t *)&unk_100914440);
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      Class v18 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v19 = [v24 smartListsFromSmartListStorages:isa accountStorages:v16 parentListStorages:v18 store:*(void *)(v4 + 48)];

      sub_1000963CC(0, &qword_10090B330);
      unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v21 = v8;
      id v22 = sub_10012083C(v20);
      swift_bridgeObjectRelease();

      if (v22)
      {
        REMSmartList.codable.getter();

        return;
      }
      [self noSuchObjectErrorWithObjectID:v21];
      swift_willThrow();

      uint64_t v11 = v23;
    }
    else
    {
      [self noSuchObjectErrorWithObjectID:v8];
      swift_willThrow();
    }
  }
}

unint64_t sub_10012044C(unint64_t a1)
{
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t v5 = qword_100907100;
  id v6 = v4;
  if (v5 != -1) {
    swift_once();
  }
  id v7 = (objc_class *)qword_100942090;
  id v8 = (objc_class *)sub_1001D6E88();
  NSString v9 = (objc_class *)sub_1001D73A8();
  uint64_t v10 = sub_1001D7584((unint64_t)v4, 1, a1, v7, v8, v9);
  if (v2)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    a1 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a1 >> 62)
    {
      type metadata accessor for REMCDBaseSection();
      swift_bridgeObjectRetain();
      uint64_t v12 = _bridgeCocoaArray<A>(_:)();

      swift_bridgeObjectRelease();
      a1 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for REMCDBaseSection();
    }
  }
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1001205A8(NSObject *a1)
{
  sub_100120090(*(void **)(v1 + 24), a1);
  if (!v2)
  {
    uint64_t v5 = v4;
    id v6 = [v4 smartListType];
    id v7 = [v5 objectID];
    if (qword_100907B18 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_100942620;
    swift_retain();
    NSString v9 = sub_10064C1FC(v6, v7, a1, v8);

    swift_release();
    id v10 = [v9 membershipsOfRemindersInSectionsAsData];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      sub_1000963CC(0, (unint64_t *)&qword_100910240);
      static REMJSONRepresentable.fromJSONData(_:)();
      sub_100097F34(v12, v14);
    }
  }
}

uint64_t sub_100120758()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDTemplateOperationCopyRemindersFromCustomSmartListToTemplate()
{
  return self;
}

unint64_t sub_1001207D4()
{
  unint64_t result = qword_10090A3C0;
  if (!qword_10090A3C0)
  {
    sub_1000963CC(255, (unint64_t *)&qword_10090A3B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A3C0);
  }
  return result;
}

void *sub_10012083C(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = [v4 objectID];
      char v8 = static NSObject.== infix(_:_:)();

      if (v8)
      {
        swift_bridgeObjectRelease();
        return v5;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

id REMCDAccountV2023MinorEMigratingToZREMCDBASELIST.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone(v2) initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

id REMCDAccountListData.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDAccountListData();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

uint64_t type metadata accessor for REMCDAccountListData()
{
  return self;
}

id REMCDAccountListData.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDAccountListData();
  return [super dealloc];
}

uint64_t sub_100120B44()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090B360);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090B360);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100120C0C()
{
  [*(id *)&v0[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener] invalidate];
  [*(id *)&v0[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive] invalidate];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDClientConnectionListener();
  return [super dealloc];
}

uint64_t sub_100120D8C()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnections);
  swift_beginAccess();
  uint64_t v2 = *v1;
  unint64_t v27 = v2 & 0xC000000000000001;
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = __CocoaSet.count.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v3 & ~(v3 >> 63), 0);
  if (v27)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    unsigned __int8 v6 = 1;
  }
  else
  {
    uint64_t result = sub_1003CA790(v2);
    unsigned __int8 v6 = v7 & 1;
  }
  uint64_t v29 = result;
  uint64_t v30 = v5;
  unsigned __int8 v31 = v6;
  if (v3 < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
  }
  else
  {
    do
    {
      while (1)
      {
        uint64_t v14 = v29;
        uint64_t v13 = v30;
        uint64_t v15 = v31;
        sub_1003CA1F4(v29, v30, v31, v2);
        id v17 = v16;
        id v18 = [v16 description];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        id v22 = v32;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1001DE058(0, v22[2] + 1, 1);
          id v22 = v32;
        }
        unint64_t v24 = v22[2];
        unint64_t v23 = v22[3];
        if (v24 >= v23 >> 1)
        {
          uint64_t result = sub_1001DE058(v23 > 1, v24 + 1, 1);
          id v22 = v32;
        }
        v22[2] = v24 + 1;
        unint64_t v25 = &v22[2 * v24];
        void v25[4] = v19;
        v25[5] = v21;
        if (v27) {
          break;
        }
        uint64_t v8 = sub_1003C9E34(v14, v13, v15, v2);
        uint64_t v10 = v9;
        char v12 = v11;
        sub_1000E4EA4(v14, v13, v15);
        uint64_t v29 = v8;
        uint64_t v30 = v10;
        unsigned __int8 v31 = v12 & 1;
        if (!--v3) {
          goto LABEL_20;
        }
      }
      if ((v15 & 1) == 0) {
        goto LABEL_22;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_100094134(&qword_10090B438);
      unint64_t v26 = (void (*)(char *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v26(v28, 0);
      --v3;
    }
    while (v3);
LABEL_20:
    sub_1000E4EA4(v29, v30, v31);
    swift_bridgeObjectRelease();
    return (uint64_t)v32;
  }
  return result;
}

uint64_t type metadata accessor for RDClientConnectionListener()
{
  return self;
}

uint64_t sub_1001210A8(uint64_t a1, void *a2)
{
  id v4 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = (void **)((char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v11 = *(void **)&v4[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue];
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t, __n128))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  id v12 = v11;
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v13)
  {
    uint64_t v14 = *(void *)&v4[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcDaemon];
    uint64_t v15 = *(void *)&v4[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcDaemon + 8];
    sub_100121F2C();
    id v16 = v12;
    id v17 = a2;
    swift_unknownObjectRetain();
    char v18 = static NSObject.== infix(_:_:)();
    id v19 = objc_allocWithZone((Class)type metadata accessor for RDClientConnection());
    uint64_t v20 = sub_10049B410(v17, v14, v15, v16, v18 & 1);
    int v21 = *(_DWORD *)&v20[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 40];
    __int16 v22 = -1;
    uint64_t v3 = v20;
    switch(*(unsigned __int16 *)&v20[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 44] >> 14)
    {
      case 2:
        if (v21)
        {
          if ((v21 & 5) == 0)
          {
            if (qword_100906EC0 != -1) {
              swift_once();
            }
            uint64_t v23 = type metadata accessor for Logger();
            sub_10008E2DC(v23, (uint64_t)qword_10090B360);
            unint64_t v24 = v3;
            unint64_t v25 = Logger.logObject.getter();
            os_log_type_t v26 = static os_log_type_t.fault.getter();
            int v27 = v26;
            if (os_log_type_enabled(v25, v26))
            {
              os_log_t v73 = v25;
              uint64_t v28 = swift_slowAlloc();
              int v72 = v27;
              uint64_t v29 = (uint8_t *)v28;
              uint64_t v70 = (void *)swift_slowAlloc();
              unint64_t v74 = v3;
              uint64_t v71 = v29;
              *(_DWORD *)uint64_t v29 = 138543362;
              id v76 = v24;
              uint64_t v30 = v24;
              uint64_t v75 = v4;
              unsigned __int8 v31 = v30;
              uint64_t v3 = v74;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              void *v70 = v24;

              id v4 = v75;
              os_log_t v32 = v73;
              _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v72, "clientConnection.accessLevel has no read/write access {clientConnection: %{public}@}", v71, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
            }
          }
          __int16 v22 = v21;
          goto LABEL_17;
        }
        if (qword_100906EC0 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_10008E2DC(v33, (uint64_t)qword_10090B360);
        uint64_t v34 = v3;
        uint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = (uint8_t *)swift_slowAlloc();
          uint64_t v38 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = 138543362;
          id v76 = v34;
          unint64_t v39 = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v38 = v34;

          _os_log_impl((void *)&_mh_execute_header, v35, v36, "clientConnection.accessLevel == .none. Rejecting connection {clientConnection: %{public}@}", v37, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          uint64_t v40 = 0;
          uint64_t v34 = v39;
        }
        else
        {

          uint64_t v40 = 0;
          uint64_t v35 = v34;
        }
        goto LABEL_40;
      case 3:
        goto LABEL_17;
      default:
        __int16 v22 = -129;
LABEL_17:
        if ((static NSObject.== infix(_:_:)() & 1) == 0) {
          goto LABEL_26;
        }
        if ((v22 & 0x100) != 0)
        {
          id v48 = (id)sub_1001D550C((int)[v17 processIdentifier]);
        }
        else
        {
          if (qword_100906EC0 != -1) {
            swift_once();
          }
          uint64_t v41 = type metadata accessor for Logger();
          sub_10008E2DC(v41, (uint64_t)qword_10090B360);
          uint64_t v42 = v17;
          unint64_t v43 = Logger.logObject.getter();
          os_log_type_t v44 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v43, v44))
          {
            uint64_t v45 = (uint8_t *)swift_slowAlloc();
            uint64_t v46 = (void *)swift_slowAlloc();
            unint64_t v74 = v3;
            uint64_t v75 = v45;
            *(_DWORD *)uint64_t v45 = 138412290;
            id v76 = v42;
            id v47 = v42;
            uint64_t v3 = v74;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v46 = v42;

            _os_log_impl((void *)&_mh_execute_header, v43, v44, "Connection requested as UserInteractive but is missing the entitlement. Using xpc Queue {connection: %@}", v75, 0xCu);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            unint64_t v43 = v42;
          }

LABEL_26:
          if (qword_1009070C0 != -1) {
            swift_once();
          }
          id v48 = (id)qword_100942060;
        }
        a2 = v48;
        [v17 _setQueue:v48];
        if (qword_100906EC0 == -1) {
          goto LABEL_30;
        }
        goto LABEL_42;
    }
  }
  __break(1u);
LABEL_42:
  swift_once();
LABEL_30:
  uint64_t v49 = type metadata accessor for Logger();
  uint64_t v50 = sub_10008E2DC(v49, (uint64_t)qword_10090B360);
  uint64_t v51 = v3;
  id v52 = a2;
  uint64_t v53 = v51;
  uint64_t v35 = v52;
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = swift_slowAlloc();
    id v57 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v56 = 138543618;
    unint64_t v74 = (char *)v50;
    uint64_t v75 = v4;
    id v76 = v53;
    unint64_t v58 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v57 = v53;

    *(_WORD *)(v56 + 12) = 2114;
    id v76 = v35;
    os_log_type_t v59 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v57[1] = v35;

    id v4 = v75;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "New client connection {connection: %{public}@, queue: %{public}@}", (uint8_t *)v56, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v54 = v53;
  }

  *(Class *)((char *)&v53[1].isa + OBJC_IVAR____TtC7remindd18RDClientConnection_delegate) = (Class)&off_1008BAB48;
  swift_unknownObjectWeakAssign();
  uint64_t v60 = &v4[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnections];
  swift_beginAccess();
  uint64_t v34 = v53;
  sub_10031EF7C(&v77, v34);
  uint64_t v61 = v77;
  swift_endAccess();

  uint64_t v62 = v4;
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v65 = 134217984;
    uint64_t v66 = *(void *)v60;
    if ((v66 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v67 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v67 = *(void *)(v66 + 16);
    }
    id v76 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Connection count: %ld", v65, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v63 = v62;
  }

  uint64_t v68 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  sub_100121FAC((uint64_t)v34, (uint64_t)sub_100121FA4, v68);
  swift_release_n();
  uint64_t v40 = 1;
LABEL_40:

  return v40;
}

void sub_100121B10()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_10049C168();
  }
}

void sub_100121BC8(void *a1, char *a2)
{
  if (qword_100906EC0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10090B360);
  uint64_t v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    __n128 v8 = (uint8_t *)swift_slowAlloc();
    id v17 = (void *)swift_slowAlloc();
    *(_DWORD *)__n128 v8 = 138412290;
    uint64_t v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v17 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Client connection closed: %@", v8, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v10 = &a2[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnections];
  swift_beginAccess();
  char v11 = (void *)sub_10065AE88(v5);
  swift_endAccess();

  unint64_t v12 = *(unsigned int *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 40] | ((unint64_t)*(unsigned __int16 *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 44] << 32);
  uint64_t v18 = *(void *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity];
  uint64_t v19 = *(void *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 8];
  uint64_t v20 = *(void *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 16];
  uint64_t v21 = *(void *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 24];
  uint64_t v22 = *(void *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 32];
  sub_10010B584(v18, v19, v20, v21, v22, v12);
  PassthroughSubject.send(_:)();
  sub_10012227C(v18, v19, v20, v21, v22, v12);
  char v13 = a2;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    id v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v16 = 134217984;
    if ((*(void *)v10 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Connection count: %ld", v16, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v14 = v13;
  }
}

unint64_t sub_100121F2C()
{
  unint64_t result = qword_10090C120;
  if (!qword_10090C120)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090C120);
  }
  return result;
}

uint64_t sub_100121F6C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100121FA4()
{
}

uint64_t sub_100121FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10010B4E8(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v30);
  sub_10010B544((uint64_t)v30);
  char v4 = sub_100688AB4((uint64_t)v30);
  if (v4 == 2)
  {
    type metadata accessor for RDNoOpAppProtectionGuard();
    uint64_t v5 = &off_1008CF998;
  }
  else
  {
    type metadata accessor for RDSystemAppProtectionGuard();
    uint64_t v5 = &off_1008CF988;
  }
  swift_allocObject();
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  [*(id *)(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection) auditToken];
  uint64_t v25 = v31[1];
  uint64_t v26 = v31[0];
  uint64_t v23 = v31[3];
  uint64_t v24 = v31[2];
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100776E80;
  sub_10010B4E8((uint64_t)v30, (uint64_t)v31);
  unint64_t v9 = v32 | ((unint64_t)v33 << 32);
  unsigned int v10 = v33 >> 14;
  if (v10 >= 2)
  {
    if (v10 == 2)
    {
      unsigned __int16 v33 = WORD2(v9) & 0x3FFF;
      if ((v9 & 0x10000000000) != 0)
      {
        unint64_t v12 = 0x80000001007CB2F0;
        unint64_t v11 = 0xD000000000000011;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned __int16 v33 = WORD2(v9) & 0x3FFF;
  }
  unint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
LABEL_9:
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v13 = sub_1000C5B38();
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 32) = v11;
  *(void *)(v8 + 40) = v12;
  uint64_t v14 = sub_100696CF4();
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v13;
  *(void *)(v8 + 72) = v14;
  *(void *)(v8 + 80) = v15;
  uint64_t v16 = String.init(format:_:)();
  uint64_t v18 = v17;
  swift_getObjectType();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  uint64_t v20 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, void)))v5[1];
  swift_retain();
  LOBYTE(v22) = (v4 == 2) | v4 & 1;
  v20(v27, v7, v26, v25, v24, v23, v16, v18, v22, (uint64_t (*)(uint64_t, void))sub_10011C6C0);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100122244()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012227C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = (a6 >> 46) & 3;
  if (v7 >= 2)
  {
    if (v7 != 2) {
      return result;
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001222D0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090B440);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090B440);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100122398(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002F3918(*a1, *a2);
}

Swift::Int sub_1001223A4()
{
  return Hasher._finalize()();
}

uint64_t sub_100122458()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001224F8()
{
  return Hasher._finalize()();
}

unint64_t sub_1001225A8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001244D0(*a1);
  *a2 = result;
  return result;
}

void sub_1001225D8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEC00000065746144;
  unint64_t v4 = 0xEB00000000656D61;
  uint64_t v5 = 0x4E79616C70736964;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6574616C706D6574;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6E6F697461657263;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100122648(void *a1@<X8>)
{
  *a1 = &off_1008B3198;
}

_UNKNOWN **static REMCDTemplateSection.recordTypes()()
{
  return &off_1008B31C0;
}

uint64_t static REMCDTemplateSection.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for REMCDTemplateSection();
  id v6 = a1;
  swift_bridgeObjectRetain();
  id v7 = a4;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [(id)swift_getObjCClassFromMetadata() objectWithRecordID:v6 accountID:v8 context:v7];

  if (v9)
  {
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDTemplateSection.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      unint64_t v12 = v11;
      [v10 mergeDataFromRecord:a1 accountID:v11];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_100906EC8 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_10090B440);
      id v14 = a2;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          uint64_t v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDTemplateSection.recordType()()
{
  uint64_t v0 = 0x6574616C706D6554;
  uint64_t v1 = (void *)0xEF6E6F6974636553;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDTemplateSection.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  NSString v4 = String._bridgeToObjectiveC()();
  v15.receiver = v2;
  v15.super_class = (Class)type metadata accessor for REMCDTemplateSection();
  [super mergeDataFromRecord:from.super.isa accountID:v4];

  id v5 = [(objc_class *)from.super.isa recordID];
  NSString v6 = [v5 recordName];

  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v7 = [v2 ckIdentifierFromRecordName:v6];

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setCkIdentifier:v7];

  int v8 = [v2 mergeDataRevertedLocallyMarkedForDeletion];
  int v9 = [v2 mergeDataRefusedToMergeMarkedForDeletion];
  char v14 = 0;
  id v10 = v2;
  id v11 = from.super.isa;
  sub_1004C5570(v11, v8, v9, v10, v10, v11, &v14);

  if (v14 == 1)
  {
    id v12 = [v10 template];
    if (v12)
    {
      uint64_t v13 = v12;
      if (([v12 ckNeedsInitialFetchFromCloud] & 1) == 0) {
        _s7remindd13REMCDTemplateC19sortChildrenObjectsyyF_0();
      }
    }
  }
}

void sub_100122E78(unsigned char *a1, void *a2, void *a3, unsigned char *a4)
{
  unint64_t v58 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v59 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v55 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v56);
  id v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  id v57 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  objc_super v15 = (char *)&v55 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v55 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v55 - v20;
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v55 - v23;
  uint64_t v25 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v26 = __chkstk_darwin(v25 - 8).n128_u64[0];
  uint64_t v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    if (*a1 == 1)
    {
      id v29 = [a3 encryptedValues:v26];
      NSString v30 = String._bridgeToObjectiveC()();
      NSString v31 = [v29 objectForKeyedSubscript:v30];
      swift_unknownObjectRelease();

      if (v31)
      {
        NSString v60 = v31;
        sub_100094134(&qword_100909AB0);
        if (swift_dynamicCast())
        {
          NSString v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v31 = 0;
        }
      }
      [a2 setDisplayName:v31];

      return;
    }
    id v35 = [a2 template:v26];
    if (v35)
    {
      os_log_type_t v36 = v35;
      id v37 = [v35 identifier];

      if (v37)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
        v38(v21, 0, 1, v7);
      }
      else
      {
        uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
        v38(v21, 1, 1, v7);
      }
      sub_100096408((uint64_t)v21, (uint64_t)v24, (uint64_t *)&unk_100909E50);
    }
    else
    {
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
      v38(v24, 1, 1, v7);
    }
    if (CKRecord.subscript.getter())
    {
      self;
      unint64_t v39 = (void *)swift_dynamicCastObjCClass();
      if (!v39) {
        swift_unknownObjectRelease();
      }
    }
    else
    {
      unint64_t v39 = 0;
    }
    id v40 = sub_1000C4990(v39);
    if (v40)
    {
      uint64_t v41 = v40;
      type metadata accessor for REMCDTemplate();
      uint64_t v42 = (void *)swift_dynamicCastClass();
      if (!v42) {
    }
      }
    else
    {
      uint64_t v42 = 0;
    }

    [a2 setTemplate:v42];
    id v43 = [a2 template];
    if (v43)
    {
      os_log_type_t v44 = v43;
      id v45 = [v43 identifier];

      if (v45)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v46 = 0;
      }
      else
      {
        uint64_t v46 = 1;
      }
      uint64_t v47 = v59;
      v38(v15, v46, 1, v7);
      sub_100096408((uint64_t)v15, (uint64_t)v18, (uint64_t *)&unk_100909E50);
    }
    else
    {
      uint64_t v47 = v59;
      v38(v18, 1, 1, v7);
    }
    uint64_t v48 = (uint64_t)v57;
    uint64_t v49 = (uint64_t)&v10[*(int *)(v56 + 48)];
    sub_1001248EC((uint64_t)v18, (uint64_t)v10);
    sub_1001248EC((uint64_t)v24, v49);
    uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
    if (v50((uint64_t)v10, 1, v7) == 1)
    {
      sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
      sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
      if (v50(v49, 1, v7) == 1)
      {
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
        char v51 = 0;
LABEL_38:
        *unint64_t v58 = v51 & 1;
        return;
      }
    }
    else
    {
      sub_1001248EC((uint64_t)v10, v48);
      if (v50(v49, 1, v7) != 1)
      {
        id v52 = v55;
        (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v55, v49, v7);
        sub_100124954();
        char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v54 = *(void (**)(char *, uint64_t))(v47 + 8);
        v54(v52, v7);
        sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
        sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
        v54((char *)v48, v7);
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
        char v51 = v53 ^ 1;
        goto LABEL_38;
      }
      sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
      sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v7);
    }
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_10090B4C0);
    char v51 = 1;
    goto LABEL_38;
  }
  sub_10012451C();
  uint64_t v32 = type metadata accessor for Date();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v33 = *(void *)(v32 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v32) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v32);
  }
  [a2 setCreationDate:isa];
}

CKRecord_optional __swiftcall REMCDTemplateSection.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  NSString v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - v6;
  uint64_t v8 = (objc_class *)type metadata accessor for REMCDTemplateSection();
  v40.receiver = v0;
  v40.super_class = v8;
  id v10 = [super newlyCreatedRecord];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = &off_1008B4268;
    uint64_t v13 = (uint64_t *)&unk_100909A40;
    os_log_type_t v36 = v0;
    do
    {
      if (!*((unsigned char *)v12 + v11 + 32))
      {
        id v26 = [v1 creationDate];
        if (v26)
        {
          uint64_t v27 = v26;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v28 = type metadata accessor for Date();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v4, 0, 1, v28);
        }
        else
        {
          uint64_t v28 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v4, 1, 1, v28);
        }
        sub_100096408((uint64_t)v4, (uint64_t)v7, v13);
        type metadata accessor for Date();
        uint64_t v33 = *(void *)(v28 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v7, 1, v28) == 1)
        {
          sub_1000966BC((uint64_t)v7, v13);
          long long v37 = 0u;
          long long v38 = 0u;
          unint64_t v39 = 0;
        }
        else
        {
          *((void *)&v38 + 1) = v28;
          unint64_t v39 = &protocol witness table for Date;
          uint64_t v14 = sub_1000C1FE8((uint64_t *)&v37);
          (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(v14, v7, v28);
        }
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.setter();
        goto LABEL_5;
      }
      if (*((unsigned char *)v12 + v11 + 32) == 1)
      {
        id v15 = [v10 encryptedValues];
        id v16 = [v1 displayName];
        if (v16)
        {
          uint64_t v17 = v16;
          id v18 = v10;
          uint64_t v19 = v7;
          uint64_t v20 = v4;
          uint64_t v21 = v12;
          uint64_t v22 = v13;
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v25 = v24;

          *((void *)&v38 + 1) = &type metadata for String;
          unint64_t v39 = &protocol witness table for String;
          *(void *)&long long v37 = v23;
          *((void *)&v37 + 1) = v25;
          uint64_t v13 = v22;
          uint64_t v12 = v21;
          NSString v4 = v20;
          uint64_t v7 = v19;
          id v10 = v18;
          uint64_t v1 = v36;
        }
        else
        {
          unint64_t v39 = 0;
          long long v37 = 0u;
          long long v38 = 0u;
        }
        swift_getObjectType();
        CKRecordKeyValueSetting.subscript.setter();
        swift_unknownObjectRelease();
        goto LABEL_5;
      }
      if (([v1 markedForDeletion] & 1) == 0)
      {
        id v30 = [v1 template];
        id v29 = v30;
        if (!v30) {
          goto LABEL_18;
        }
        id v31 = [v30 recordID];

        if (v31)
        {
          id v29 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v31];

          if (v29) {
            id v32 = v29;
          }
          goto LABEL_18;
        }
      }
      id v29 = 0;
LABEL_18:
      CKRecord.subscript.setter();

LABEL_5:
      ++v11;
    }
    while (v11 != 3);
  }
  uint64_t v34 = (objc_class *)v10;
  result.value.super.Class isa = v34;
  result.is_nil = v9;
  return result;
}

id REMCDTemplateSection.parentCDObject.getter()
{
  id v1 = [v0 template];

  return v1;
}

Swift::Void __swiftcall REMCDTemplateSection.cleanUpAfterLocalObjectMerge()()
{
  if (qword_100906EC8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090B440);
  id v7 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    NSString v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)NSString v4 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090B458);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Void __swiftcall REMCDTemplateSection.fixBrokenReferences()()
{
  if (qword_100906EC8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090B440);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &selRef_stringFromDate_;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  uint64_t v6 = 7104878;
  uint64_t v7 = swift_slowAlloc();
  uint64_t v42 = swift_slowAlloc();
  *(_DWORD *)uint64_t v7 = 136446466;
  id v8 = [v2 remObjectID];
  if (v8)
  {
    Swift::Bool v9 = v8;
    id v10 = [v8 description];

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;
  }
  else
  {
    unint64_t v13 = 0xE300000000000000;
    uint64_t v11 = 7104878;
  }
  sub_1000C51B8(v11, v13, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 12) = 2082;
  id v14 = [v2 template];
  if (!v14) {
    goto LABEL_12;
  }
  id v15 = v14;
  id v16 = [v14 remObjectID];
  if (!v16)
  {

LABEL_12:
    unint64_t v20 = 0xE300000000000000;
    goto LABEL_13;
  }
  uint64_t v17 = v16;
  id v18 = [v16 description];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

LABEL_13:
  uint64_t v5 = &selRef_stringFromDate_;
  sub_1000C51B8(v6, v20, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for section in template {templateSectionID: %{public}s, templateID: %{public}s}", (uint8_t *)v7, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  id v21 = [v2 v5[52]];
  if (!v21) {
    return;
  }
  uint64_t v22 = v21;
  if ([v21 markedForDeletion]
    && ([v2 markedForDeletion] & 1) == 0)
  {
    id v23 = v2;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v24, v25))
    {

LABEL_28:
      [v23 markForDeletion];
      goto LABEL_29;
    }
    id v26 = v5;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136446466;
    id v28 = [v23 remObjectID];
    if (v28)
    {
      id v29 = v28;
      id v30 = [v28 description];

      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v33 = v32;
    }
    else
    {
      unint64_t v33 = 0xE300000000000000;
      uint64_t v31 = 7104878;
    }
    sub_1000C51B8(v31, v33, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2082;
    id v34 = [v23 v26[52]];
    if (v34)
    {
      uint64_t v35 = v34;
      id v36 = [v34 remObjectID];
      if (v36)
      {
        long long v37 = v36;
        id v38 = [v36 description];

        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;

LABEL_27:
        sub_1000C51B8(v39, v41, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Template is marked for deletion but section in template is not {templateSectionID: %{public}s, templateID: %{public}s}", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_28;
      }
    }
    unint64_t v41 = 0xE300000000000000;
    uint64_t v39 = 7104878;
    goto LABEL_27;
  }
LABEL_29:
  [v22 forcePushToCloud];
}

unint64_t sub_1001244D0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B3130, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_10012451C()
{
  unint64_t result = qword_100909E80;
  if (!qword_100909E80)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100909E80);
  }
  return result;
}

uint64_t _s7remindd20REMCDTemplateSectionC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_100906EC8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090B440);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090B458);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _s7remindd20REMCDTemplateSectionC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_100906EC8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090B440);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090B458);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_1001248EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100124954()
{
  unint64_t result = qword_10090B4D0;
  if (!qword_10090B4D0)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B4D0);
  }
  return result;
}

uint64_t _s14descr1008AB5D9O6FieldsOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s14descr1008AB5D9O6FieldsOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100124B08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s14descr1008AB5D9O6FieldsOMa()
{
  return &_s14descr1008AB5D9O6FieldsON;
}

unint64_t sub_100124B40(uint64_t a1)
{
  unint64_t result = sub_100124B68();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100124B68()
{
  unint64_t result = qword_10090B4E0;
  if (!qword_10090B4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B4E0);
  }
  return result;
}

unint64_t sub_100124BBC(uint64_t a1)
{
  unint64_t result = sub_100124BE4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100124BE4()
{
  unint64_t result = qword_10090B4E8;
  if (!qword_10090B4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B4E8);
  }
  return result;
}

unint64_t sub_100124C3C()
{
  unint64_t result = qword_10090B4F0;
  if (!qword_10090B4F0)
  {
    sub_100096058(&qword_10090B4F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B4F0);
  }
  return result;
}

unint64_t sub_100124C9C()
{
  unint64_t result = qword_10090B500;
  if (!qword_10090B500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B500);
  }
  return result;
}

unint64_t sub_100124CF0(uint64_t a1)
{
  unint64_t result = sub_100124D18();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100124D18()
{
  unint64_t result = qword_10090B5F0;
  if (!qword_10090B5F0)
  {
    type metadata accessor for REMReminderDetailDataView.CheckUpdateInvocation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B5F0);
  }
  return result;
}

uint64_t sub_100124D70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(a2 + 16))();
  if (v4 >> 60 == 15) {
    return 0;
  }
  uint64_t v6 = v3;
  unint64_t v7 = v4;
  sub_100124F50();
  static REMJSONRepresentable.fromJSONData(_:)();
  uint64_t result = sub_100097F20(v6, v7);
  if (!v2) {
    return v8;
  }
  return result;
}

uint64_t sub_100124E1C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090B5F8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090B5F8);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100124EE8()
{
  id v1 = [v0 membershipsOfRemindersInSectionsAsData];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t sub_100124F50()
{
  unint64_t result = qword_100910240;
  if (!qword_100910240)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100910240);
  }
  return result;
}

uint64_t sub_100124F90()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077B710;
  *(void *)(v0 + 32) = swift_getKeyPath();
  *(void *)(v0 + 40) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  qword_10090B610 = v0;
  return result;
}

uint64_t sub_100125014(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1;
  if (a2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v6 = i - 4;
      id v9 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 8 * i);
      id v10 = v9;
      uint64_t v11 = i - 3;
      if (__OFADD__(v6, 1)) {
        break;
      }
      unint64_t v12 = sub_1003ADE78(a3);
      if (v3)
      {
        uint64_t v6 = a1;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v6;
      }
      sub_100201C7C(v12);

      if (v11 == v7)
      {
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v6;
}

void *sub_100125148(void *a1)
{
  uint64_t v3 = (void *)sub_1003AD42C(7uLL, 0, 7);
  sub_1000963CC(0, &qword_10090ABC0);
  id v4 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v5 = [(id)swift_getObjCClassFromMetadata() entity];
  [v4 setEntity:v5];

  [v4 setAffectedStores:0];
  [v4 setPredicate:v3];
  uint64_t v6 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v1)
  {
    if (v6 < 0 || (v6 & 0x4000000000000000) != 0)
    {
      unint64_t v11 = swift_bridgeObjectRetain();
      uint64_t v7 = (uint64_t)sub_100209D74(v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    unint64_t v12 = v7;
    sub_1006891D4((uint64_t *)&v12);
    swift_bridgeObjectRelease();
    unint64_t v8 = v12;
    id v9 = a1;
    a1 = (void *)sub_100125014((uint64_t)_swiftEmptyArrayStorage, v8, v9);
    swift_release();
  }
  return a1;
}

unint64_t sub_1001252F4(uint64_t a1, unint64_t a2)
{
  uint64_t v88 = a1;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v82 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v84 = (uint64_t)&v73 - v6;
  __chkstk_darwin(v7);
  id v9 = (char *)&v73 - v8;
  __chkstk_darwin(v10);
  uint64_t v90 = (uint64_t)&v73 - v11;
  uint64_t v91 = type metadata accessor for UUID();
  uint64_t v73 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  unint64_t v74 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v85 = (char *)&v73 - v14;
  id v86 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v83 = (uint64_t)*(v86 - 1);
  __chkstk_darwin(v86);
  uint64_t v80 = (void (**)(char *, uint64_t))((char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v16 - 8);
  uint64_t v78 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v77 = (id)_s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v77);
  id v76 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v79 = (uint64_t)&v73 - v20;
  uint64_t v75 = _s10PredicatesOMa(0);
  __chkstk_darwin(v75);
  uint64_t v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v24 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  id v26 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  id v29 = (char *)&v73 - v28;
  unint64_t v87 = a2;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
  (*(void (**)(char *, void, uint64_t))(v24 + 104))(v26, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), Subtasks);
  sub_100126024();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v96 == v94 && v97 == v95)
  {
    swift_bridgeObjectRelease_n();
    id v30 = *(void (**)(char *, uint64_t))(v24 + 8);
    v30(v26, Subtasks);
    v30(v29, Subtasks);
  }
  else
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v32 = *(void (**)(char *, uint64_t))(v24 + 8);
    v32(v26, Subtasks);
    v32(v29, Subtasks);
    if ((v31 & 1) == 0)
    {
      id v43 = self;
      NSString v72 = String._bridgeToObjectiveC()();
      [v43 internalErrorWithDebugDescription:v72];

      swift_willThrow();
      return (unint64_t)v43;
    }
  }
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  swift_storeEnumTagMultiPayload();
  unint64_t v33 = (char *)sub_10038F1F0();
  sub_10012607C((uint64_t)v22, _s10PredicatesOMa);
  uint64_t v34 = (uint64_t)v78;
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
  uint64_t v35 = (uint64_t)v76;
  swift_storeEnumTagMultiPayload();
  uint64_t v36 = v79;
  sub_100520FD4(v34, v35, v79);
  if (qword_100907790 != -1) {
    swift_once();
  }
  unint64_t v96 = qword_100942318;
  uint64_t v37 = qword_100906ED8;
  swift_bridgeObjectRetain();
  uint64_t v38 = v90;
  if (v37 != -1) {
    swift_once();
  }
  unint64_t v94 = qword_10090B610;
  swift_bridgeObjectRetain();
  uint64_t v39 = sub_100526DD0(v36);
  sub_1002014E4((unint64_t)v39);
  unint64_t v40 = sub_100526FE4(v36);
  sub_1002014E4((unint64_t)v40);
  unint64_t v41 = (void *)sub_1003BC8C4(v96, v94, 0, (uint64_t)v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v42 = (uint64_t)v80;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  id v43 = (void *)sub_100527148(v36, v42, 0);
  (*(void (**)(uint64_t, unsigned int (**)(uint64_t, uint64_t, uint64_t)))(v83 + 8))(v42, v86);
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v41 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  unint64_t v45 = v89;
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v45)
  {
    sub_10012607C(v36, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);

    return (unint64_t)v43;
  }
  unint64_t v47 = result;
  unint64_t v98 = _swiftEmptyDictionarySingleton;
  uint64_t v93 = _swiftEmptyDictionarySingleton;
  if (!(result >> 62))
  {
    uint64_t v48 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t v89 = result;
    if (v48) {
      goto LABEL_13;
    }
LABEL_38:

    id v43 = _swiftEmptyDictionarySingleton;
LABEL_39:
    swift_bridgeObjectRelease();
    sub_10012607C(v36, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    return (unint64_t)v43;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  unint64_t v89 = v47;
  if (!v48) {
    goto LABEL_38;
  }
LABEL_13:
  id v76 = 0;
  id v77 = v41;
  uint64_t v78 = v33;
  if (v48 >= 1)
  {
    uint64_t v49 = 0;
    unint64_t v87 = v47 & 0xC000000000000001;
    uint64_t v50 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
    id v86 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    uint64_t v83 = v73 + 32;
    uint64_t v80 = (void (**)(char *, uint64_t))(v73 + 8);
    uint64_t v81 = v9;
    uint64_t v88 = v48;
    while (1)
    {
      if (v87) {
        id v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v51 = *(id *)(v47 + 8 * v49 + 32);
      }
      id v52 = v51;
      id v53 = [v51 list];
      if (v53)
      {
        uint64_t v54 = v53;
        id v55 = [v53 identifier];

        if (v55)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v56 = *v50;
          id v57 = v9;
          uint64_t v58 = 0;
        }
        else
        {
          uint64_t v56 = *v50;
          id v57 = v9;
          uint64_t v58 = 1;
        }
        uint64_t v59 = v91;
        v56((uint64_t)v57, v58, 1, v91);
        uint64_t v38 = v90;
        sub_1000F44F4((uint64_t)v9, v90);
        NSString v60 = *v86;
        if ((*v86)(v38, 1, v59) != 1)
        {
          uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))v83;
          (*(void (**)(char *, uint64_t, uint64_t))v83)(v85, v38, v59);
          id v62 = [v52 parentReminder];
          if (v62)
          {
            uint64_t v63 = v62;
            id v64 = [v62 identifier];

            if (v64)
            {
              uint64_t v65 = v82;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v66 = 0;
            }
            else
            {
              uint64_t v66 = 1;
              uint64_t v65 = v82;
            }
            uint64_t v59 = v91;
            v56((uint64_t)v65, v66, 1, v91);
            uint64_t v68 = (uint64_t)v65;
            uint64_t v67 = v84;
            sub_1000F44F4(v68, v84);
            if (v60(v67, 1, v59) == 1)
            {
LABEL_32:
              sub_1001260DC(v67);
              uint64_t v92 = v52;
              sub_100094134(&qword_10090B620);
              sub_10012613C();
              id v69 = v85;
              Dictionary<>.append(_:toCollectionUnderKey:)();
              (*v80)(v69, v59);
            }
            else
            {
              uint64_t v70 = v74;
              v61(v74, v67, v59);
              uint64_t v92 = v52;
              sub_100094134(&qword_10090B620);
              sub_10012613C();
              Dictionary<>.append(_:toCollectionUnderKey:)();
              uint64_t v71 = *v80;
              (*v80)(v70, v59);
              v71(v85, v59);
            }

            id v9 = v81;
            uint64_t v38 = v90;
            goto LABEL_17;
          }
          uint64_t v67 = v84;
          v56(v84, 1, 1, v59);
          goto LABEL_32;
        }
      }
      else
      {
        (*v50)(v38, 1, 1, v91);
      }

      sub_1001260DC(v38);
LABEL_17:
      ++v49;
      unint64_t v47 = v89;
      if (v88 == v49)
      {

        id v43 = v98;
        uint64_t v36 = v79;
        goto LABEL_39;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100125E84(uint64_t a1, char a2)
{
  uint64_t v3 = _s10PredicatesOMa(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0) {
    return 0;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (void *)sub_10038F1F0();
  sub_10012607C((uint64_t)v5, _s10PredicatesOMa);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v7 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v8 = [(id)swift_getObjCClassFromMetadata() entity];
  [v7 setEntity:v8];

  [v7 setAffectedStores:0];
  [v7 setPredicate:v6];
  uint64_t v9 = NSManagedObjectContext.count<A>(for:)();

  return v9;
}

unint64_t sub_100126024()
{
  unint64_t result = qword_10090B618;
  if (!qword_10090B618)
  {
    type metadata accessor for REMRemindersListDataView.FetchSubtasks();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B618);
  }
  return result;
}

uint64_t sub_10012607C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001260DC(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10012613C()
{
  unint64_t result = qword_10090B628;
  if (!qword_10090B628)
  {
    sub_100096058(&qword_10090D750);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B628);
  }
  return result;
}

const char *sub_100126198()
{
  return "list";
}

const char *sub_1001261AC()
{
  return "parentReminder";
}

uint64_t sub_1001261C4(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10031DC68(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t static REMCDTemplateSection.cdEntityName.getter()
{
  sub_1000963CC(0, &qword_10090B630);
  id v0 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

Swift::Int __swiftcall REMCDTemplateSection.parentEffectiveMinimumSupportedVersion()()
{
  id v1 = [v0 template];
  if (!v1) {
    return kREMSupportedVersionUnset;
  }
  uint64_t v2 = v1;
  id v3 = [v1 effectiveMinimumSupportedVersion];

  return (Swift::Int)v3;
}

uint64_t static REMCDTemplateSection.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0 = sub_10012674C((uint64_t)&off_1008B4290);
  swift_arrayDestroy();
  return v0;
}

id REMCDTemplateSection.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDTemplateSection();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

id REMCDTemplateSection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDTemplateSection();
  return [super dealloc];
}

uint64_t sub_10012674C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10031DC68(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t type metadata accessor for REMCDTemplateSection()
{
  return self;
}

uint64_t sub_100126808(unint64_t a1)
{
  return sub_10012821C(a1, &qword_100914390, (uint64_t)UNNotificationCategory_ptr, (unint64_t *)&qword_10091C340, (void (*)(id *, uint64_t))sub_10031DC4C);
}

uint64_t sub_100126838(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_1009219C0, &qword_10090B6A8, (void (*)(id *, void *))sub_10031FB08);
}

uint64_t sub_100126860(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v28 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v27 = (char *)v21 - v6;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_100127C30((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    Swift::Int v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v25 = v12;
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    int64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    Swift::Int v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_10031DEC0(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

uint64_t sub_100126B08(unint64_t a1)
{
  return sub_10012821C(a1, (unint64_t *)&qword_10090A3B0, (uint64_t)REMObjectID_ptr, (unint64_t *)&qword_10090A3C0, (void (*)(id *, uint64_t))sub_10031DE54);
}

uint64_t sub_100126B38(unint64_t a1)
{
  return sub_10012821C(a1, (unint64_t *)&qword_10090B040, (uint64_t)off_1008AA488, (unint64_t *)&qword_100914B80, (void (*)(id *, uint64_t))sub_10031DE70);
}

uint64_t sub_100126B68(uint64_t a1)
{
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v3 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_100127C30(&qword_1009110B0, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    Swift::Int v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v5, v14, PredicateType);
      sub_10031E220((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, PredicateType);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_100126D04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMManualOrdering.PinnedList();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_100127C30(&qword_10090B6E8, (void (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    Swift::Int v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      sub_10031E558((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_100126EA0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMAccountsListDataView.CachableProperty();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_100127C30(&qword_1009146E0, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    Swift::Int v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v5, v14, v2);
      sub_10031E87C((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_10012703C(unint64_t a1)
{
  return sub_100127084(a1, (void (*)(void))type metadata accessor for REMCDSavedReminder, &qword_10090B668, (void (*)(uint64_t))type metadata accessor for REMCDSavedReminder, (void (*)(id *, uint64_t))sub_10031EBD0);
}

uint64_t sub_100127084(unint64_t a1, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), void (*a5)(id *, uint64_t))
{
  unint64_t v10 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  a2(0);
  sub_100127C30(a3, a4);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v18 = result;
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v12) {
      return v18;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v12) {
      return v18;
    }
  }
  if (v12 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        a5(&v17, v14);
      }
    }
    else
    {
      uint64_t v15 = (void **)(a1 + 32);
      do
      {
        uint64_t v16 = *v15++;
        a5(&v17, (uint64_t)v16);

        --v12;
      }
      while (v12);
    }
    return v18;
  }
  __break(1u);
  return result;
}

uint64_t sub_100127210(unint64_t a1)
{
  return sub_100127084(a1, (void (*)(void))type metadata accessor for REMCDTemplate, (unint64_t *)&qword_100914BB0, (void (*)(uint64_t))type metadata accessor for REMCDTemplate, (void (*)(id *, uint64_t))sub_10031EC64);
}

uint64_t sub_100127258(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_100913EC0, &qword_10090B708, (void (*)(id *, void *))sub_10031EF54);
}

uint64_t sub_100127280(uint64_t a1, uint64_t *a2, unint64_t *a3, void (*a4)(id *, void *))
{
  uint64_t v8 = *(void *)(a1 + 16);
  sub_100094134(a2);
  sub_1000967F4(a3, a2);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v13 = result;
  if (v8)
  {
    unint64_t v10 = (void **)(a1 + 32);
    do
    {
      uint64_t v11 = *v10++;
      a4(&v12, v11);

      --v8;
    }
    while (v8);
    return v13;
  }
  return result;
}

uint64_t sub_100127340(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_100913C30, &qword_10090B6A0, (void (*)(id *, void *))sub_10031EF68);
}

uint64_t sub_100127368(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_100914050, &qword_10090B758, (void (*)(id *, void *))sub_10031EFCC);
}

uint64_t sub_100127390(unint64_t a1)
{
  return sub_10012821C(a1, (unint64_t *)&qword_10090DC20, (uint64_t)off_1008AA448, (unint64_t *)&qword_10090BFA0, (void (*)(id *, uint64_t))sub_10031EFE0);
}

uint64_t sub_1001273C0(uint64_t a1)
{
  return sub_100127280(a1, &qword_10090B6D8, &qword_10090B6E0, (void (*)(id *, void *))sub_10031EFFC);
}

uint64_t sub_1001273E8(unint64_t a1)
{
  return sub_10012821C(a1, (unint64_t *)&unk_10090FFF0, (uint64_t)REMAssignment_ptr, &qword_10090A410, (void (*)(id *, uint64_t))sub_10031F02C);
}

uint64_t sub_100127418(unint64_t a1)
{
  return sub_10012821C(a1, &qword_10090DC80, (uint64_t)REMHashtag_ptr, (unint64_t *)&qword_10090B7C0, (void (*)(id *, uint64_t))sub_10031F010);
}

uint64_t sub_100127448(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_100914500, &qword_10090B7B8, (void (*)(id *, void *))sub_10031F070);
}

uint64_t sub_100127470(uint64_t a1)
{
  return sub_100127280(a1, &qword_100921FA0, &qword_10090B7B0, (void (*)(id *, void *))sub_10031F084);
}

uint64_t sub_100127498(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_1009144A0, &qword_10090B7A8, (void (*)(id *, void *))sub_10031F098);
}

uint64_t sub_1001274C0(uint64_t a1)
{
  return sub_100127280(a1, &qword_10090B798, &qword_10090B7A0, (void (*)(id *, void *))sub_10031F0AC);
}

uint64_t sub_1001274E8(unint64_t a1)
{
  return sub_10012821C(a1, &qword_10090ABC0, (uint64_t)off_1008AA3D8, &qword_10090B670, (void (*)(id *, uint64_t))sub_10031F0C0);
}

uint64_t sub_100127518(unint64_t a1)
{
  return sub_10012821C(a1, (unint64_t *)&unk_10090AF40, (uint64_t)off_1008AA470, &qword_10090B678, (void (*)(id *, uint64_t))sub_10031F0DC);
}

uint64_t sub_100127548(unint64_t a1)
{
  return sub_10012821C(a1, (unint64_t *)&qword_100909FB0, (uint64_t)NSNumber_ptr, &qword_100917D50, (void (*)(id *, uint64_t))sub_10031EC18);
}

uint64_t sub_100127578(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_100094134((uint64_t *)&unk_10090B070);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v4 = result;
  uint64_t v9 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v5) {
      return v4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      return v4;
    }
  }
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      sub_10031DE40(&v8, v7);
      swift_release();
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001276B8(unint64_t a1)
{
  return sub_100127CA0(a1, &qword_10090B790, &qword_10091AAA0, (void (*)(id *, uint64_t))sub_10031F0F8);
}

uint64_t sub_1001276E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for URLResourceKey(0);
  sub_100127C30(&qword_100907DC0, type metadata accessor for URLResourceKey);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_10031F10C(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_10012779C(uint64_t a1)
{
  return sub_100127280(a1, &qword_10090B718, &qword_10090B720, (void (*)(id *, void *))sub_10031F338);
}

uint64_t sub_1001277C4(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_100913F90, &qword_10090B728, (void (*)(id *, void *))sub_10031F34C);
}

uint64_t sub_1001277EC(uint64_t a1)
{
  return sub_100127280(a1, &qword_10090B730, &qword_10090B738, (void (*)(id *, void *))sub_10031F360);
}

uint64_t sub_100127814(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_100913FF0, &qword_10090B740, (void (*)(id *, void *))sub_10031F374);
}

uint64_t sub_10012783C(uint64_t a1)
{
  return sub_100127280(a1, &qword_10090B748, &qword_10090B750, (void (*)(id *, void *))sub_10031F388);
}

uint64_t sub_100127864(uint64_t a1)
{
  return sub_100127280(a1, &qword_10090B760, &qword_10090B768, (void (*)(id *, void *))sub_10031F39C);
}

uint64_t sub_10012788C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_100127C30(&qword_1009140B0, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    id v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v5, v14, v2);
      sub_10031F3B0((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_100127A28(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_100914210, &qword_10090B778, (void (*)(id *, void *))sub_10031FB1C);
}

uint64_t sub_100127A50(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_100921E60, &qword_10090B780, (void (*)(id *, void *))sub_10031FB30);
}

uint64_t sub_100127A78(unint64_t a1)
{
  return sub_10012821C(a1, (unint64_t *)&unk_100917C20, (uint64_t)NSEntityDescription_ptr, &qword_10090B7C8, (void (*)(id *, uint64_t))sub_100320140);
}

uint64_t sub_100127AA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1001284DC();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v6 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::UInt *)(a1 + 40);
    do
    {
      sub_10032015C(v5, (id)*(v4 - 1), *v4);

      v4 += 2;
      --v2;
    }
    while (v2);
    return v6;
  }
  return result;
}

uint64_t sub_100127B34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100127BDC();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v9 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 48);
    do
    {
      Swift::UInt v6 = (Swift::UInt)*(v4 - 2);
      uint64_t v5 = *(v4 - 1);
      uint64_t v7 = *v4;
      v4 += 3;
      sub_100320320(v8, v6, v5, v7);

      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

unint64_t sub_100127BDC()
{
  unint64_t result = qword_10090B660;
  if (!qword_10090B660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B660);
  }
  return result;
}

uint64_t sub_100127C30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100127C78(unint64_t a1)
{
  return sub_100127CA0(a1, &qword_1009148E0, &qword_10091A8B0, (void (*)(id *, uint64_t))sub_100320974);
}

uint64_t sub_100127CA0(unint64_t a1, uint64_t *a2, unint64_t *a3, void (*a4)(id *, uint64_t))
{
  unint64_t v8 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_100094134(a2);
  sub_1000967F4(a3, a2);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v16 = result;
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v10) {
      return v16;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v10) {
      return v16;
    }
  }
  if (v10 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        a4(&v15, v12);
      }
    }
    else
    {
      uint64_t v13 = (void **)(a1 + 32);
      do
      {
        uint64_t v14 = *v13++;
        a4(&v15, (uint64_t)v14);

        --v10;
      }
      while (v10);
    }
    return v16;
  }
  __break(1u);
  return result;
}

uint64_t sub_100127E24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)v19 - v7;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100914280);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 16);
  sub_100127C30(&qword_10090B680, (void (*)(uint64_t))type metadata accessor for RDPermanentlyHiddenReminder);
  uint64_t v21 = Set.init(minimumCapacity:)();
  if (v12)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    unint64_t v15 = v3 + 56;
    uint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
    v19[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v20 = v14;
    while (1)
    {
      sub_100128070(v13, (uint64_t)v11);
      uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v11, 0, 1, v2);
      if ((*v16)(v11, 1, v2) == 1) {
        break;
      }
      sub_1001280D4((uint64_t)v11, (uint64_t)v5);
      sub_100320570((uint64_t)v8, (uint64_t)v5);
      sub_100128138((uint64_t)v8);
      v13 += v20;
      if (!--v12) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v17(v11, 1, 1, v2);
  }
  return v21;
}

uint64_t sub_100128070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDPermanentlyHiddenReminder();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001280D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDPermanentlyHiddenReminder();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100128138(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDPermanentlyHiddenReminder();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100128194(unint64_t a1)
{
  return sub_10012821C(a1, (unint64_t *)&unk_100910040, (uint64_t)NSString_ptr, (unint64_t *)&unk_1009208D0, (void (*)(id *, uint64_t))sub_100320FC4);
}

uint64_t sub_1001281C4(uint64_t a1)
{
  return sub_100127280(a1, &qword_10090B7D0, &qword_10090B7D8, (void (*)(id *, void *))sub_100320FE0);
}

uint64_t sub_1001281EC(unint64_t a1)
{
  return sub_10012821C(a1, &qword_100910180, (uint64_t)REMAccountStorage_ptr, &qword_10090B688, (void (*)(id *, uint64_t))sub_100320FF4);
}

uint64_t sub_10012821C(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, uint64_t))
{
  unint64_t v9 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_1000963CC(0, a2);
  sub_1000ED098(a4, a2);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v11) {
      return v17;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v11) {
      return v17;
    }
  }
  if (v11 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        a5(&v16, v13);
      }
    }
    else
    {
      uint64_t v14 = (void **)(a1 + 32);
      do
      {
        unint64_t v15 = *v14++;
        a5(&v16, (uint64_t)v15);

        --v11;
      }
      while (v11);
    }
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t sub_10012839C(uint64_t a1)
{
  return sub_100127280(a1, &qword_10090B690, &qword_10090B698, (void (*)(id *, void *))sub_1003212DC);
}

uint64_t sub_1001283C4(uint64_t a1)
{
  return sub_100127280(a1, &qword_10090B6B0, &qword_10090B6B8, (void (*)(id *, void *))sub_1003212F0);
}

uint64_t sub_1001283EC(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_100913CF0, &qword_10090B6C0, (void (*)(id *, void *))sub_100321304);
}

uint64_t sub_100128414(uint64_t a1)
{
  return sub_100127280(a1, &qword_10090B6C8, &qword_10090B6D0, (void (*)(id *, void *))sub_100321318);
}

uint64_t sub_10012843C(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_100913E20, &qword_10090B6F0, (void (*)(id *, void *))sub_10032132C);
}

uint64_t sub_100128464(uint64_t a1)
{
  return sub_100127280(a1, &qword_10090B6F8, &qword_10090B700, (void (*)(id *, void *))sub_100321340);
}

uint64_t sub_10012848C(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_100913F20, &qword_10090B710, (void (*)(id *, void *))sub_10031E1F8);
}

uint64_t sub_1001284B4(uint64_t a1)
{
  return sub_100127280(a1, (uint64_t *)&unk_1009140D0, &qword_10090B770, (void (*)(id *, void *))sub_10031E20C);
}

unint64_t sub_1001284DC()
{
  unint64_t result = qword_10090B788;
  if (!qword_10090B788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B788);
  }
  return result;
}

uint64_t sub_100128530()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090B7E0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090B7E0);
  if (qword_100907810 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942478);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001285F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v0 + 16);
  v15[0] = *(void *)(v1 + 24);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  aBlock[4] = sub_100128A00;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008BAD80;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v10;
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();

  return v1;
}

id sub_100128878(void *a1)
{
  if (qword_100906EE0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10090B7E0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Invalidating RDSpringBoardApplicationShortcutUpdater's application shortcut service", v5, 2u);
    swift_slowDealloc();
  }

  return [a1 invalidate];
}

uint64_t sub_100128970()
{
  sub_1001285F8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDSpringBoardApplicationShortcutUpdater()
{
  return self;
}

uint64_t sub_1001289C8()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100128A00()
{
  return sub_100128878(*(void **)(v0 + 16));
}

uint64_t sub_100128A08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100128A18()
{
  return swift_release();
}

uint64_t sub_100128A20(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v29 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906EE0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10090B7E0);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v26 = v2;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v27 = v7;
    aBlock[0] = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    v25[1] = v14 + 4;
    type metadata accessor for REMAccountsListDataView.Model.GroupChild();
    swift_bridgeObjectRetain();
    uint64_t v16 = Array.description.getter();
    uint64_t v28 = v8;
    uint64_t v17 = v5;
    uint64_t v18 = v4;
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    char v31 = (void *)sub_1000C51B8(v16, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v4 = v18;
    uint64_t v5 = v17;
    uint64_t v8 = v28;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Application shortcut update requested for lists {lists: %s}", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v27;
    swift_slowDealloc();
    uint64_t v2 = v26;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = v2;
  aBlock[4] = (uint64_t)sub_100129B34;
  aBlock[5] = v21;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100236C78;
  aBlock[3] = (uint64_t)&unk_1008BADD0;
  uint64_t v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v23 = v29;
  static DispatchQoS.unspecified.getter();
  char v31 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v8);
  return swift_release();
}

void sub_100128E5C(uint64_t a1)
{
  if (qword_100906EE0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10090B7E0);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    type metadata accessor for REMAccountsListDataView.Model.GroupChild();
    swift_bridgeObjectRetain();
    uint64_t v6 = Array.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    sub_1000C51B8(v6, v8, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Updating application shortcuts for lists {lists: %s}", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_100129044(a1);
}

void sub_100129044(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for REMAccountsListDataView.Model.GroupChild();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    unint64_t v19 = v1;
    uint64_t v23 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t v12 = sub_100129B3C();
    uint64_t v13 = v5 + 16;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v20 = *(void *)(v13 + 56);
    unint64_t v21 = v12;
    uint64_t v22 = v13;
    uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
    do
    {
      v14(v10, v15, v4);
      v14(v8, (uint64_t)v10, v4);
      sub_10012925C((uint64_t)v8);
      (*v16)(v10, v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v15 += v20;
      --v11;
    }
    while (v11);
    uint64_t v2 = v19;
  }
  sub_100129B3C();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 updateDynamicApplicationShortcutItems:isa forBundleIdentifier:REMAppBundleIdentifier];
}

id sub_10012925C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMApplicationShortcutUserInfoKeys();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setType:v7];

  sub_1001294F4();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 setLocalizedTitle:v8];

  id v9 = [objc_allocWithZone((Class)SBSApplicationShortcutSystemIcon) initWithType:3];
  [v6 setIcon:v9];

  sub_100094134((uint64_t *)&unk_10090B8B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for REMApplicationShortcutUserInfoKeys.actionURLAbsoluteString(_:), v2);
  uint64_t v11 = REMApplicationShortcutUserInfoKeys.rawValue.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)(inited + 32) = v11;
  *(void *)(inited + 40) = v13;
  *(void *)(inited + 48) = sub_10012970C();
  sub_1002EE8A0(inited);
  sub_100094134((uint64_t *)&unk_10090D7D0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setUserInfo:isa];

  uint64_t v15 = type metadata accessor for REMAccountsListDataView.Model.GroupChild();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
  return v6;
}

uint64_t sub_1001294F4()
{
  uint64_t v1 = type metadata accessor for REMAccountsListDataView.Model.GroupChild();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (void **)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = (id)_REMGetLocalizedString();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(void **, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  int v6 = (*(uint64_t (**)(void **, uint64_t))(v2 + 88))(v4, v1);
  if (v6 == enum case for REMAccountsListDataView.Model.GroupChild.list(_:))
  {
    NSString v7 = &selRef_displayName;
LABEL_5:
    (*(void (**)(void **, uint64_t))(v2 + 96))(v4, v1);
    NSString v8 = *v4;
    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100776E40;
    id v10 = [v8 *v7];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_1000C5B38();
    *(void *)(v9 + 32) = v11;
    *(void *)(v9 + 40) = v13;
    uint64_t v14 = static String.localizedStringWithFormat(_:_:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v14;
  }
  if (v6 == enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:))
  {
    NSString v7 = &selRef_name;
    goto LABEL_5;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_10012970C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for REMAccountsListDataView.Model.GroupChild();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void **)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for REMNavigationSpecifier();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void **, uint64_t, uint64_t))(v7 + 16))(v9, v1, v6);
  int v14 = (*(uint64_t (**)(void **, uint64_t))(v7 + 88))(v9, v6);
  if (v14 == enum case for REMAccountsListDataView.Model.GroupChild.list(_:))
  {
    (*(void (**)(void **, uint64_t))(v7 + 96))(v9, v6);
    uint64_t v15 = *v9;
    uint64_t v16 = (char *)v13 + *(int *)(sub_100094134(&qword_10090B8C0) + 48);
    id v17 = [v15 objectID];

    *uint64_t v13 = v17;
    uint64_t v18 = enum case for REMNavigationSpecifier.ListPathSpecifier.newReminder(_:);
    uint64_t v19 = type metadata accessor for REMNavigationSpecifier.ListPathSpecifier();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v16, v18, v19);
    uint64_t v20 = (unsigned int *)&enum case for REMNavigationSpecifier.list(_:);
LABEL_5:
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *v20, v10);
    REMNavigationSpecifier.url.getter();
    URL.absoluteString.getter();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
    return (uint64_t)v26;
  }
  if (v14 == enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:))
  {
    (*(void (**)(void **, uint64_t))(v7 + 96))(v9, v6);
    unint64_t v21 = *v9;
    uint64_t v22 = (char *)v13 + *(int *)(sub_100094134(&qword_10090B8C0) + 48);
    id v23 = [v21 objectID];

    *uint64_t v13 = v23;
    uint64_t v24 = enum case for REMNavigationSpecifier.ListPathSpecifier.newReminder(_:);
    uint64_t v25 = type metadata accessor for REMNavigationSpecifier.ListPathSpecifier();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v22, v24, v25);
    uint64_t v20 = (unsigned int *)&enum case for REMNavigationSpecifier.customSmartList(_:);
    goto LABEL_5;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100129AF4()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100129B34()
{
  sub_100128E5C(*(void *)(v0 + 16));
}

unint64_t sub_100129B3C()
{
  unint64_t result = qword_10090B8A8;
  if (!qword_10090B8A8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090B8A8);
  }
  return result;
}

uint64_t sub_100129B84()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090B8C8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090B8C8);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Bool __swiftcall REMCDReminder.markExtraneousAlarmsForDeletion()()
{
  if (([v0 markedForDeletion] & 1) != 0
    || ([v0 isDeleted] & 1) != 0)
  {
    goto LABEL_23;
  }
  id v1 = [v0 account];
  if (!v1) {
    return (char)v1;
  }
  uint64_t v2 = v1;
  id v3 = [v1 accountTypeHost];
  unsigned int v4 = [v3 isCloudKit];

  if (!v4)
  {
LABEL_22:

LABEL_23:
    LOBYTE(v1) = 0;
    return (char)v1;
  }
  id v5 = [v0 alarmStorage];
  if (!v5)
  {
LABEL_13:
    if (qword_100906EE8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E2DC(v19, (uint64_t)qword_10090B8C8);
    id v20 = v0;
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)id v23 = 136446210;
      id v24 = [v20 remObjectID];
      if (v24)
      {
        uint64_t v25 = v24;
        id v26 = [v24 description];

        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;
      }
      else
      {
        uint64_t v27 = 7104878;
        unint64_t v29 = 0xE300000000000000;
      }
      sub_1000C51B8(v27, v29, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "REMCDReminder.markExtraneousAlarmsForDeletion(): Reminder has <= 1 alarm, stopping early {reminderID: %{public}s}", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_22;
  }
  uint64_t v6 = v5;
  if ((uint64_t)[v5 count] < 2)
  {

    goto LABEL_13;
  }
  if (qword_100906EE8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_10090B8C8);
  id v8 = v0;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v38 = v12;
    *(_DWORD *)uint64_t v11 = 136446466;
    id v13 = [v8 remObjectID];
    if (v13)
    {
      int v14 = v13;
      id v15 = [v13 description];

      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;
    }
    else
    {
      unint64_t v18 = 0xE300000000000000;
      uint64_t v16 = 7104878;
    }
    sub_1000C51B8(v16, v18, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    id v31 = [v8 managedObjectContext];
    if (v31
      && (unint64_t v32 = v31,
          id v33 = objc_msgSend(v31, "transactionAuthor", v12),
          v32,
          v33))
    {
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v35;
    }
    else
    {
      unint64_t v36 = 0xE300000000000000;
      uint64_t v34 = 7104878;
    }
    sub_1000C51B8(v34, v36, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "REMCDReminder.markExtraneousAlarmsForDeletion() {reminderID: %{public}s, author: %{public}s}", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  LOBYTE(v38) = 0;
  __chkstk_darwin(v30);
  static os_log_type_t.info.getter();
  measureTimeElapsed(_:level:block:)();

  LOBYTE(v1) = v38;
  return (char)v1;
}

uint64_t sub_10012A204(uint64_t a1, void *a2, unsigned char *a3)
{
  sub_1000963CC(0, (unint64_t *)&unk_100909AC0);
  sub_1000963CC(0, (unint64_t *)&unk_10090B010);
  sub_10012C598();
  unint64_t v5 = Sequence.elements<A>(ofType:)();
  id v6 = [a2 remObjectID];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [v6 description];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = 0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  uint64_t v12 = sub_10012F778(v5, (void *)v9, v11);
  unint64_t v14 = v13;
  unint64_t v16 = v15;
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v19 = sub_10012A374((uint64_t)v12, v14, v16, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v19 & 1;
  return result;
}

uint64_t sub_10012A374(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21 >= 2) {
      goto LABEL_3;
    }
  }
  else if (*(uint64_t *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2)
  {
LABEL_3:
    uint64_t result = (uint64_t)sub_10012B4B8(a3);
    unint64_t v11 = (v10 >> 1) - v9;
    if (v10 >> 1 == v9)
    {
      swift_unknownObjectRelease();
      goto LABEL_15;
    }
    if ((uint64_t)(v10 >> 1) > v9)
    {
      uint64_t v12 = 0;
      uint64_t v13 = v8 + 8 * v9;
      while (1)
      {
        swift_retain();
        BOOL v14 = sub_10012BC18();
        swift_release();
        if (v14)
        {
          if (__OFADD__(v12++, 1))
          {
            __break(1u);
LABEL_12:
            swift_unknownObjectRelease();
            if (v12 > 0)
            {
              type metadata accessor for Analytics();
              if (static Analytics.isEventUsed(_:)())
              {
                sub_100094134((uint64_t *)&unk_10090A420);
                uint64_t inited = swift_initStackObject();
                *(_OWORD *)(inited + 16) = xmmword_100776E80;
                *(void *)(inited + 32) = 1701869940;
                *(void *)(inited + 40) = 0xE400000000000000;
                sub_1000963CC(0, (unint64_t *)&unk_100910040);
                *(void *)(inited + 48) = NSString.init(stringLiteral:)();
                *(void *)(inited + 56) = 0x746E756F63;
                *(void *)(inited + 64) = 0xE500000000000000;
                *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
                sub_1002ED104(inited);
                static Analytics.postEvent(_:payload:duration:)();
                swift_bridgeObjectRelease();
              }
            }
LABEL_15:
            if (qword_100906EE8 != -1) {
              swift_once();
            }
            uint64_t v17 = type metadata accessor for Logger();
            sub_10008E2DC(v17, (uint64_t)qword_10090B8C8);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            unint64_t v18 = Logger.logObject.getter();
            os_log_type_t v19 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v18, v19))
            {
              uint64_t v20 = swift_slowAlloc();
              v41[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v20 = 134218498;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v20 + 12) = 2048;
              swift_beginAccess();
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v20 + 22) = 2080;
              swift_bridgeObjectRetain();
              sub_1000C51B8(a1, a2, v41);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v18, v19, "REMCDReminder.ExtraneousAlarmsMarker: markExtraneousAlarmsForDeletion: (dueDateVerifiableAlarms) {total: %ld, deleted: %ld, reminderID: %s}", (uint8_t *)v20, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              goto LABEL_24;
            }
LABEL_25:

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            goto LABEL_26;
          }
          uint64_t v43 = v12;
        }
        v13 += 8;
        if (!--v11) {
          goto LABEL_12;
        }
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
    return result;
  }
  if (qword_100906EE8 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10008E2DC(v22, (uint64_t)qword_10090B8C8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v18, v23)) {
    goto LABEL_25;
  }
  id v24 = (uint8_t *)swift_slowAlloc();
  v41[0] = swift_slowAlloc();
  *(_DWORD *)id v24 = 136315138;
  swift_bridgeObjectRetain();
  sub_1000C51B8(a1, a2, v41);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v18, v23, "REMCDReminder.ExtraneousAlarmsMarker: Reminder has <= 1 dueDateVerifiableAlarms so no need to scan for extraneous items {reminderID: %s}", v24, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
LABEL_24:
  swift_slowDealloc();

LABEL_26:
  if (a4 >> 62) {
    goto LABEL_43;
  }
  if (*(uint64_t *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2)
  {
LABEL_28:
    uint64_t result = (uint64_t)sub_10012B730(a4);
    unint64_t v28 = (v27 >> 1) - v26;
    if (v27 >> 1 == v26)
    {
LABEL_29:
      swift_unknownObjectRelease();
      if (v42 > 0)
      {
        type metadata accessor for Analytics();
        if (static Analytics.isEventUsed(_:)())
        {
          sub_100094134((uint64_t *)&unk_10090A420);
          uint64_t v29 = swift_initStackObject();
          *(_OWORD *)(v29 + 16) = xmmword_100776E80;
          *(void *)(v29 + 32) = 1701869940;
          *(void *)(v29 + 40) = 0xE400000000000000;
          sub_1000963CC(0, (unint64_t *)&unk_100910040);
          *(void *)(v29 + 48) = NSString.init(stringLiteral:)();
          *(void *)(v29 + 56) = 0x746E756F63;
          *(void *)(v29 + 64) = 0xE500000000000000;
          *(NSNumber *)(v29 + 72) = Int._bridgeToObjectiveC()();
          sub_1002ED104(v29);
          static Analytics.postEvent(_:payload:duration:)();
          swift_bridgeObjectRelease();
        }
      }
      if (qword_100906EE8 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_10008E2DC(v30, (uint64_t)qword_10090B8C8);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        v41[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 134218498;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v33 + 12) = 2048;
        swift_beginAccess();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v33 + 22) = 2080;
        swift_bridgeObjectRetain();
        sub_1000C51B8(a1, a2, v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "REMCDReminder.ExtraneousAlarmsMarker: markExtraneousAlarmsForDeletion: (dueDateNonVerifiableAlarms) {total: %ld, deleted: %ld, reminderID: %s}", (uint8_t *)v33, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_48;
      }
LABEL_49:

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      goto LABEL_50;
    }
    if ((uint64_t)(v27 >> 1) <= v26) {
      goto LABEL_54;
    }
    uint64_t v34 = v25 + 8 * v26;
    while (1)
    {
      swift_retain();
      BOOL v35 = sub_10012BC18();
      swift_release();
      if (v35)
      {
        if (__OFADD__(v42, 1))
        {
          __break(1u);
LABEL_43:
          swift_bridgeObjectRetain();
          uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v36 < 2) {
            break;
          }
          goto LABEL_28;
        }
        ++v42;
      }
      v34 += 8;
      if (!--v28) {
        goto LABEL_29;
      }
    }
  }
  if (qword_100906EE8 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_10008E2DC(v37, (uint64_t)qword_10090B8C8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v31 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v31, v38)) {
    goto LABEL_49;
  }
  uint64_t v39 = (uint8_t *)swift_slowAlloc();
  v41[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v39 = 136315138;
  swift_bridgeObjectRetain();
  sub_1000C51B8(a1, a2, v41);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v31, v38, "REMCDReminder.ExtraneousAlarmsMarker: Reminder has <= 1 dueDateNonVerifiableAlarms so no need to scan for extraneous items {reminderID: %s}", v39, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
LABEL_48:
  swift_slowDealloc();

LABEL_50:
  swift_beginAccess();
  if (v43 > 0) {
    return 1;
  }
  swift_beginAccess();
  return v42 > 0;
}

void sub_10012AEB4(uint64_t a1, id *a2)
{
  id v3 = *a2;
  if (([*a2 markedForDeletion] & 1) == 0
    && ([v3 isDeleted] & 1) == 0
    && ([v3 isExtraneous] & 1) == 0
    && ([v3 isSnooze] & 1) == 0)
  {
    id v4 = [v3 trigger];
    if (v4)
    {
      unint64_t v5 = v4;
      if ([v4 isTemporal])
      {
        [v3 dueDateResolutionTokenAsNonce];
        if (rem_isNonceUnset())
        {
          type metadata accessor for DueDateNonVerifiableAlarm();
          uint64_t v6 = swift_allocObject();
          *(unsigned char *)(v6 + 32) = 1;
          *(void *)(v6 + 16) = v3;
          *(void *)(v6 + 24) = 0;
          uint64_t v7 = qword_100906EE8;
          id v8 = v3;
          if (v7 != -1) {
            swift_once();
          }
          uint64_t v9 = type metadata accessor for Logger();
          sub_10008E2DC(v9, (uint64_t)qword_10090B8C8);
          id v10 = v8;
          swift_retain_n();
          id v11 = v10;
          uint64_t v12 = Logger.logObject.getter();
          os_log_type_t v13 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v12, v13))
          {
            os_log_type_t v37 = v13;
            log = v12;
            uint64_t v14 = swift_slowAlloc();
            uint64_t v41 = swift_slowAlloc();
            *(_DWORD *)uint64_t v14 = 136315394;
            id v15 = [v11 remObjectID];
            if (v15)
            {
              unint64_t v16 = v15;
              id v17 = [v15 description];

              uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v20 = v19;
            }
            else
            {
              uint64_t v18 = 7104878;
              unint64_t v20 = 0xE300000000000000;
            }
            sub_1000C51B8(v18, v20, &v41);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v14 + 12) = 2048;
            sub_10012C1E8();
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            _os_log_impl((void *)&_mh_execute_header, log, v37, "REMCDReminder.ExtraneousAlarmsMarker: Populating legacy alarm {remObjectID: %s, fallbackNonce: %f}", (uint8_t *)v14, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
          }
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v36 = *(void *)(a1 + 24);
        }
        else
        {
          type metadata accessor for DueDateVerifiableAlarm();
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = v3;
          uint64_t v22 = qword_100906EE8;
          id v23 = v3;
          if (v22 != -1) {
            swift_once();
          }
          uint64_t v24 = type metadata accessor for Logger();
          sub_10008E2DC(v24, (uint64_t)qword_10090B8C8);
          id v25 = v23;
          swift_retain_n();
          id v26 = v25;
          unint64_t v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v27, v28))
          {
            os_log_type_t v38 = v28;
            loga = v27;
            uint64_t v29 = swift_slowAlloc();
            uint64_t v41 = swift_slowAlloc();
            *(_DWORD *)uint64_t v29 = 136315394;
            id v30 = [v26 remObjectID];
            if (v30)
            {
              id v31 = v30;
              id v32 = [v30 description];

              uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v35 = v34;
            }
            else
            {
              uint64_t v33 = 7104878;
              unint64_t v35 = 0xE300000000000000;
            }
            sub_1000C51B8(v33, v35, &v41);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v29 + 12) = 2048;
            [*(id *)(v21 + 16) dueDateResolutionTokenAsNonce];
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            _os_log_impl((void *)&_mh_execute_header, loga, v38, "REMCDReminder.ExtraneousAlarmsMarker: Populating dueDate verifiable alarm {remObjectID: %s, nonce: %f}", (uint8_t *)v29, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
          }
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v36 = *(void *)(a1 + 16);
        }
        if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        swift_release();
      }
      else
      {
      }
    }
  }
}

void *sub_10012B4B8(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 >= 2)
    {
      unint64_t v11 = swift_bridgeObjectRetain();
      uint64_t v1 = (uint64_t)sub_10020A554(v11);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
LABEL_25:
    uint64_t v9 = _swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
      return sub_10020A554((unint64_t)_swiftEmptyArrayStorage);
    }
    return v9;
  }
  uint64_t v1 = a1 & 0xFFFFFFFFFFFFFF8;
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 1uLL) {
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
LABEL_4:
  unint64_t v13 = v1;
  sub_10012C49C((uint64_t *)&v13, sub_1001F8BC8, (void (*)(void *))sub_10012DF1C);
  unint64_t v2 = v13;
  if ((v13 & 0x8000000000000000) != 0 || (v13 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v3) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)(v13 + 16);
  if (!v3)
  {
LABEL_24:
    swift_release();
    goto LABEL_25;
  }
LABEL_7:
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_10;
  }
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = *(void *)(v2 + 32);
    swift_retain();
LABEL_10:
    [*(id *)(v4 + 16) dueDateResolutionTokenAsNonce];
    swift_release();
    swift_retain();
    uint64_t v5 = 0;
    while (1)
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v7 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v6 = *(void *)(v2 + 8 * v5 + 32);
        swift_retain();
        uint64_t v7 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
      }
      [*(id *)(v6 + 16) dueDateResolutionTokenAsNonce];
      int isEqualNonces = rem_isEqualNonces();
      swift_release();
      if (!isEqualNonces) {
        goto LABEL_19;
      }
      ++v5;
      if (v7 == v3)
      {
        uint64_t v5 = v3;
LABEL_19:
        swift_release();
        uint64_t v9 = (void *)sub_10044C3C8(v5, v2);
        swift_release();
        return v9;
      }
    }
  }
  __break(1u);
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

void *sub_10012B730(unint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v31 >= 2)
    {
      unint64_t v32 = swift_bridgeObjectRetain();
      uint64_t v12 = (uint64_t)sub_10020A424(v32);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
LABEL_36:
    id v30 = _swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
      return sub_10020A424((unint64_t)_swiftEmptyArrayStorage);
    }
    return v30;
  }
  uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8;
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 1uLL) {
    goto LABEL_36;
  }
  swift_bridgeObjectRetain();
LABEL_4:
  unint64_t v40 = v12;
  sub_10012C49C((uint64_t *)&v40, sub_1001F8BC8, (void (*)(void *))sub_10012C600);
  unint64_t v13 = v40;
  if ((v40 & 0x8000000000000000) != 0 || (v40 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v14) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
  uint64_t v14 = *(void *)(v40 + 16);
  if (!v14)
  {
LABEL_35:
    swift_release();
    goto LABEL_36;
  }
LABEL_7:
  unint64_t v39 = v13 & 0xC000000000000001;
  if ((v13 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_10;
  }
  if (*(void *)(v13 + 16))
  {
    swift_retain();
LABEL_10:
    sub_10012C1E8();
    swift_release();
    unint64_t v34 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    unint64_t v35 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    os_log_type_t v37 = (void (**)(char *, uint64_t))(v9 + 8);
    os_log_type_t v38 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    swift_retain();
    uint64_t v9 = 0;
    unint64_t v36 = v13;
    while (1)
    {
      if (v39)
      {
        uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v16 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 8 * v9 + 32);
        swift_retain();
        uint64_t v16 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
      }
      if (*(unsigned char *)(v15 + 32)) {
        break;
      }
LABEL_27:
      char isEqualNonces = rem_isEqualNonces();
      swift_release();
      if ((isEqualNonces & 1) == 0) {
        goto LABEL_30;
      }
      ++v9;
      if (v16 == v14)
      {
        uint64_t v9 = v14;
LABEL_30:
        swift_release();
        id v30 = (void *)sub_10044C3E0(v9, v13);
        swift_release();
        return v30;
      }
    }
    id v17 = [*(id *)(v15 + 16) ckServerRecord];
    if (v17)
    {
      uint64_t v18 = v17;
      unint64_t v19 = v11;
      uint64_t v20 = v14;
      uint64_t v21 = (uint64_t)v7;
      uint64_t v22 = v4;
      id v23 = [v17 creationDate];

      if (v23)
      {
        uint64_t v24 = (uint64_t)v22;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v25 = 1;
        uint64_t v24 = (uint64_t)v22;
      }
      (*v38)(v24, v25, 1, v8);
      uint64_t v7 = (char *)v21;
      sub_1000CAAB4(v24, v21);
      int v26 = (*v35)(v21, 1, v8);
      uint64_t v4 = (char *)v24;
      uint64_t v14 = v20;
      unint64_t v11 = v19;
      unint64_t v13 = v36;
      if (v26 != 1)
      {
        (*v34)(v11, v7, v8);
        goto LABEL_26;
      }
    }
    else
    {
      (*v38)((uint64_t)v7, 1, 1, v8);
    }
    static Date.distantPast.getter();
    sub_1000EACF4((uint64_t)v7);
LABEL_26:
    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v28 = v27;
    (*v37)(v11, v8);
    *(void *)(v15 + 24) = v28;
    *(unsigned char *)(v15 + 32) = 0;
    goto LABEL_27;
  }
  __break(1u);
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

BOOL sub_10012BC18()
{
  unsigned int v1 = [v0 ckDirtyFlags];
  if (v1)
  {
    if (qword_100906EE8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_10090B8C8);
    id v3 = v0;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      id v7 = [v3 remObjectID];
      if (v7)
      {
        uint64_t v8 = v7;
        id v9 = [v7 description];

        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v12 = v11;
      }
      else
      {
        uint64_t v10 = 7104878;
        unint64_t v12 = 0xE300000000000000;
      }
      sub_1000C51B8(v10, v12, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 514;
      [v3 ckDirtyFlags];

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "REMCDAlarm.markAsExtraneousAndDelete(): Alarm is outdated but dirty flags is not .none, skipping {remObjectID: %{public}s, dirtyFlags: %{public}hd}", (uint8_t *)v6, 0x10u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return v1 == 0;
    }

LABEL_26:
    return v1 == 0;
  }
  id v3 = [v0 reminder];
  [v3 removeAlarmStorageObject:v0];
  [v0 setIsExtraneous:1];
  [v0 __lowLevelMarkForDeletion];
  id v13 = [v0 trigger];
  [v13 setIsExtraneous:1];

  id v14 = [v0 trigger];
  if (v14)
  {
    uint64_t v15 = v14;
    [v14 __lowLevelMarkForDeletion];
  }
  id v16 = [v0 storeControllerManagedObjectContext];
  if (v16)
  {
    id v17 = v16;
    id v18 = [v16 transactionAuthor];
    if (v18)
    {
      unint64_t v19 = v18;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v20._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Bool v21 = String.hasPrefix(_:)(v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v21)
      {
        [v17 setPendingPostSaveActions:((unint64_t)[v17 pendingPostSaveActions] | 1)];
LABEL_19:

        goto LABEL_20;
      }
    }
  }
  if (v3) {
    [v3 forcePushToCloud];
  }
  [v0 setShouldSyncUpDeleteIfNeeded];
  id v22 = [v0 trigger];
  if (v22)
  {
    id v17 = v22;
    [v22 setShouldSyncUpDeleteIfNeeded];
    goto LABEL_19;
  }
LABEL_20:
  if (qword_100906EE8 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_10008E2DC(v23, (uint64_t)qword_10090B8C8);
  id v24 = v0;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v25, v26))
  {

    goto LABEL_26;
  }
  uint64_t v27 = (uint8_t *)swift_slowAlloc();
  uint64_t v35 = swift_slowAlloc();
  *(_DWORD *)uint64_t v27 = 136446210;
  id v28 = [v24 remObjectID];
  if (v28)
  {
    uint64_t v29 = v28;
    id v30 = [v28 description];

    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 7104878;
    unint64_t v33 = 0xE300000000000000;
  }
  sub_1000C51B8(v31, v33, &v35);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v25, v26, "REMCDAlarm.markAsExtraneousAndDelete(): Outdated alarm is marked extraneous and deleted {remObjectID: %{public}s}", v27, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return v1 == 0;
}

double sub_10012C1E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v7 = (char *)&v19 - v6;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = __chkstk_darwin(v8).n128_u64[0];
  unint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + 32))
  {
    id v13 = [*(id *)(v1 + 16) ckServerRecord:v10];
    if (v13)
    {
      id v14 = v13;
      id v15 = [v13 creationDate];

      if (v15)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, 1, 1, v8);
      }
      sub_1000CAAB4((uint64_t)v4, (uint64_t)v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
        goto LABEL_11;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    }
    static Date.distantPast.getter();
    sub_1000EACF4((uint64_t)v7);
LABEL_11:
    Date.timeIntervalSinceReferenceDate.getter();
    double v16 = v17;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    *(double *)(v1 + 24) = v16;
    *(unsigned char *)(v1 + 32) = 0;
    return v16;
  }
  return *(double *)(v1 + 24);
}

uint64_t sub_10012C464()
{
  return swift_deallocClassInstance();
}

uint64_t sub_10012C49C(uint64_t *a1, uint64_t (*a2)(uint64_t), void (*a3)(void *))
{
  uint64_t v6 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = a2(v6);
    *a1 = v6;
  }
  uint64_t v8 = *(void *)(v6 + 16);
  v10[0] = v6 + 32;
  v10[1] = v8;
  a3(v10);
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_10012C530()
{
  return sub_10012A204(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char **)(v0 + 32));
}

uint64_t type metadata accessor for DueDateVerifiableAlarm()
{
  return self;
}

uint64_t type metadata accessor for DueDateNonVerifiableAlarm()
{
  return self;
}

unint64_t sub_10012C598()
{
  unint64_t result = qword_100911830;
  if (!qword_100911830)
  {
    sub_1000963CC(255, (unint64_t *)&unk_10090B010);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100911830);
  }
  return result;
}

Swift::Int sub_10012C600(char **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  v301 = (void (**)(char *, uint64_t, uint64_t))((char *)&v275 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v300 = (char *)&v275 - v7;
  __chkstk_darwin(v8);
  Swift::String v306 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)&v275 - v9);
  __chkstk_darwin(v10);
  int64_t v304 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)&v275 - v11);
  __chkstk_darwin(v12);
  v298 = (char *)&v275 - v13;
  __chkstk_darwin(v14);
  v303 = (uint64_t *)((char *)&v275 - v15);
  __chkstk_darwin(v16);
  v297 = (char *)&v275 - v17;
  __chkstk_darwin(v18);
  uint64_t v302 = (uint64_t)&v275 - v19;
  __chkstk_darwin(v20);
  id v287 = (char *)&v275 - v21;
  __chkstk_darwin(v22);
  uint64_t v291 = (uint64_t)&v275 - v23;
  __chkstk_darwin(v24);
  uint64_t v286 = (char *)&v275 - v25;
  __chkstk_darwin(v26);
  uint64_t v290 = (uint64_t)&v275 - v27;
  __chkstk_darwin(v28);
  char v281 = (char *)&v275 - v29;
  __chkstk_darwin(v30);
  uint64_t v283 = (uint64_t)&v275 - v31;
  __chkstk_darwin(v32);
  unint64_t v280 = (char *)&v275 - v33;
  __chkstk_darwin(v34);
  uint64_t v282 = (uint64_t)&v275 - v35;
  uint64_t v309 = type metadata accessor for Date();
  uint64_t v36 = *(void *)(v309 - 8);
  __chkstk_darwin(v309);
  uint64_t v308 = (char *)&v275 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  unint64_t v40 = (char *)&v275 - v39;
  __chkstk_darwin(v41);
  v294 = (char *)&v275 - v42;
  __chkstk_darwin(v43);
  unint64_t v45 = (char *)&v275 - v44;
  __chkstk_darwin(v46);
  uint64_t v48 = (char *)&v275 - v47;
  __chkstk_darwin(v49);
  id v51 = (char *)&v275 - v50;
  __chkstk_darwin(v52);
  uint64_t v284 = (char *)&v275 - v53;
  __chkstk_darwin(v54);
  uint64_t v56 = (char *)&v275 - v55;
  Swift::Int v57 = (Swift::Int)a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v57);
  Swift::Int v285 = result;
  uint64_t v296 = (char *)v57;
  if (result >= v57)
  {
    if (v57 < 0) {
      goto LABEL_237;
    }
    if ((unint64_t)v57 < 2) {
      return result;
    }
    uint64_t v299 = v1;
    id v62 = (void (**)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v36 + 56);
    uint64_t v63 = *a1;
    Swift::String v305 = (char *)(v36 + 48);
    v303 = (uint64_t *)(v36 + 32);
    id v64 = (void (**)(char *, uint64_t))(v36 + 8);
    uint64_t v65 = -1;
    uint64_t v66 = 1;
    uint64_t v307 = (void (**)(char *, uint64_t))v63;
    uint64_t v67 = v306;
    while (1)
    {
      v297 = v63;
      v298 = (char *)v66;
      uint64_t v68 = (double *)v307[v66];
      uint64_t v302 = v65;
      while (1)
      {
        id v69 = *(void (**)(void, void))v63;
        if (((_BYTE)v68[4] & 1) == 0)
        {
          double v76 = v68[3];
          swift_retain();
          swift_retain();
          if ((*((unsigned char *)v69 + 32) & 1) == 0) {
            goto LABEL_19;
          }
          goto LABEL_27;
        }
        uint64_t v70 = (void *)*((void *)v68 + 2);
        swift_retain();
        swift_retain();
        id v71 = [v70 ckServerRecord];
        if (!v71)
        {
          id v77 = v304;
          (*v62)(v304, 1, 1, v309);
LABEL_24:
          static Date.distantPast.getter();
          sub_1000EACF4((uint64_t)v77);
          goto LABEL_26;
        }
        NSString v72 = v71;
        id v73 = [v71 creationDate];

        if (v73)
        {
          unint64_t v74 = v301;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v75 = 0;
        }
        else
        {
          uint64_t v75 = 1;
          unint64_t v74 = v301;
        }
        uint64_t v78 = v74;
        uint64_t v79 = (uint64_t)v74;
        uint64_t v80 = v309;
        (*v62)((uint64_t (**)(uint64_t, uint64_t, uint64_t))v78, v75, 1, v309);
        uint64_t v81 = v79;
        uint64_t v82 = v304;
        sub_1000CAAB4(v81, (uint64_t)v304);
        uint64_t v83 = v80;
        id v77 = v82;
        int v84 = (*(uint64_t (**)(void, uint64_t, uint64_t))v305)(v82, 1, v83);
        uint64_t v67 = v306;
        if (v84 == 1) {
          goto LABEL_24;
        }
        ((void (*)(char *, uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t))*v303)(v40, v77, v309);
LABEL_26:
        Date.timeIntervalSinceReferenceDate.getter();
        double v76 = v85;
        (*v64)(v40, v309);
        v68[3] = v76;
        *((unsigned char *)v68 + 32) = 0;
        if ((*((unsigned char *)v69 + 32) & 1) == 0)
        {
LABEL_19:
          if (*((double *)v69 + 3) >= v76) {
            break;
          }
          goto LABEL_36;
        }
LABEL_27:
        id v86 = [*((id *)v69 + 2) ckServerRecord];
        if (!v86)
        {
          (*v62)(v67, 1, 1, v309);
LABEL_33:
          static Date.distantPast.getter();
          sub_1000EACF4((uint64_t)v67);
          goto LABEL_35;
        }
        unint64_t v87 = v86;
        id v88 = [v86 creationDate];

        if (v88)
        {
          unint64_t v89 = v300;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v90 = 0;
        }
        else
        {
          uint64_t v90 = 1;
          unint64_t v89 = v300;
        }
        uint64_t v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v89;
        uint64_t v92 = (uint64_t)v89;
        uint64_t v93 = v309;
        (*v62)(v91, v90, 1, v309);
        uint64_t v94 = v92;
        uint64_t v67 = v306;
        sub_1000CAAB4(v94, (uint64_t)v306);
        if ((*(unsigned int (**)(void (**)(void, void, void, void), uint64_t, uint64_t))v305)((void (**)(void, void, void, void))v67, 1, v93) == 1)goto LABEL_33; {
        ((void (*)(char *, uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t))*v303)(v308, v67, v309);
        }
LABEL_35:
        Date.timeIntervalSinceReferenceDate.getter();
        double v96 = v95;
        (*v64)(v308, v309);
        *((double *)v69 + 3) = v96;
        *((unsigned char *)v69 + 32) = 0;
        if (v96 >= v76) {
          break;
        }
LABEL_36:
        char isEqualNonces = rem_isEqualNonces();
        swift_release();
        Swift::Int result = swift_release();
        if ((isEqualNonces & 1) == 0)
        {
          if (!v307) {
            goto LABEL_241;
          }
          unint64_t v98 = *(void (**)(void, void))v63;
          uint64_t v68 = (double *)*((void *)v63 + 1);
          *(void *)uint64_t v63 = v68;
          *((void *)v63 + 1) = v98;
          v63 -= 8;
          if (!__CFADD__(v65++, 1)) {
            continue;
          }
        }
        goto LABEL_12;
      }
      swift_release();
      Swift::Int result = swift_release();
LABEL_12:
      uint64_t v66 = (uint64_t)(v298 + 1);
      uint64_t v63 = v297 + 8;
      uint64_t v65 = v302 - 1;
      if (v298 + 1 == v296) {
        return result;
      }
    }
  }
  if (v57 >= 0) {
    uint64_t v59 = v57;
  }
  else {
    uint64_t v59 = v57 + 1;
  }
  if (v57 < -1) {
    goto LABEL_246;
  }
  v288 = v51;
  v289 = v48;
  if (v57 < 2)
  {
    unint64_t v100 = (char *)_swiftEmptyArrayStorage;
    uint64_t v310 = (uint64_t)_swiftEmptyArrayStorage;
    v295 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v57 != 1)
    {
      unint64_t v104 = _swiftEmptyArrayStorage[2];
LABEL_202:
      uint64_t v299 = v2;
      if (v104 >= 2)
      {
        uint64_t v268 = *a1;
        do
        {
          unint64_t v269 = v104 - 2;
          if (v104 < 2) {
            goto LABEL_232;
          }
          if (!v268) {
            goto LABEL_245;
          }
          uint64_t v270 = *(void *)&v100[16 * v269 + 32];
          uint64_t v271 = *(void *)&v100[16 * v104 + 24];
          uint64_t v272 = v299;
          sub_10012E868((uint64_t)&v268[8 * v270], &v268[8 * *(void *)&v100[16 * v104 + 16]], &v268[8 * v271], v295);
          uint64_t v299 = v272;
          if (v272) {
            break;
          }
          if (v271 < v270) {
            goto LABEL_233;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v100 = sub_1001F433C((uint64_t)v100);
          }
          if (v269 >= *((void *)v100 + 2)) {
            goto LABEL_234;
          }
          uint64_t v273 = &v100[16 * v269 + 32];
          *(void *)uint64_t v273 = v270;
          *((void *)v273 + 1) = v271;
          unint64_t v274 = *((void *)v100 + 2);
          if (v104 > v274) {
            goto LABEL_235;
          }
          memmove(&v100[16 * v104 + 16], &v100[16 * v104 + 32], 16 * (v274 - v104));
          *((void *)v100 + 2) = v274 - 1;
          unint64_t v104 = v274 - 1;
        }
        while (v274 > 2);
      }
LABEL_213:
      swift_bridgeObjectRelease();
      *(void *)((v310 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v60 = v59 >> 1;
    type metadata accessor for DueDateNonVerifiableAlarm();
    uint64_t v61 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10) = v60;
    v295 = (char *)((v61 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v310 = v61;
  }
  uint64_t v299 = v1;
  Swift::Int v101 = 0;
  BOOL v277 = a1;
  uint64_t v102 = *a1;
  int64_t v304 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  v301 = (void (**)(char *, uint64_t, uint64_t))(v36 + 32);
  Swift::String v306 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 56);
  uint64_t v307 = (void (**)(char *, uint64_t))(v36 + 8);
  uint64_t v278 = v102 + 16;
  char v279 = v102 - 8;
  unint64_t v100 = (char *)_swiftEmptyArrayStorage;
  id v103 = v294;
  Swift::String v305 = v45;
  uint64_t v300 = v56;
  uint64_t v308 = v102;
  while (2)
  {
    Swift::Int v105 = v101++;
    Swift::Int v293 = v105;
    if (v101 >= v57)
    {
      Swift::Int v115 = v285;
      goto LABEL_110;
    }
    uint64_t v106 = *(void *)&v102[8 * v101];
    uint64_t v107 = *(void *)&v102[8 * v105];
    if ((*(unsigned char *)(v106 + 32) & 1) == 0)
    {
      double v116 = *(double *)(v106 + 24);
      swift_retain();
      swift_retain();
      uint64_t v110 = v284;
      if (*(unsigned char *)(v107 + 32)) {
        goto LABEL_60;
      }
      goto LABEL_52;
    }
    uint64_t v108 = *(void **)(v106 + 16);
    swift_retain();
    swift_retain();
    id v109 = [v108 ckServerRecord];
    uint64_t v110 = v284;
    if (!v109)
    {
      uint64_t v117 = v282;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v306)(v282, 1, 1, v309);
LABEL_57:
      static Date.distantPast.getter();
      sub_1000EACF4(v117);
      goto LABEL_59;
    }
    unint64_t v111 = v109;
    id v112 = [v109 creationDate];

    if (v112)
    {
      long long v113 = v280;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v114 = 0;
    }
    else
    {
      uint64_t v114 = 1;
      long long v113 = v280;
    }
    uint64_t v118 = v309;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v306)(v113, v114, 1, v309);
    uint64_t v119 = (uint64_t)v113;
    uint64_t v117 = v282;
    sub_1000CAAB4(v119, v282);
    int v120 = (*v304)(v117, 1, v118);
    unint64_t v45 = v305;
    uint64_t v110 = v284;
    if (v120 == 1) {
      goto LABEL_57;
    }
    (*v301)(v56, v117, v309);
LABEL_59:
    Date.timeIntervalSinceReferenceDate.getter();
    double v116 = v121;
    (*v307)(v56, v309);
    *(double *)(v106 + 24) = v116;
    *(unsigned char *)(v106 + 32) = 0;
    if (*(unsigned char *)(v107 + 32))
    {
LABEL_60:
      id v122 = [*(id *)(v107 + 16) ckServerRecord];
      if (v122)
      {
        uint64_t v123 = v122;
        id v124 = [v122 creationDate];

        if (v124)
        {
          uint64_t v125 = v281;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v126 = 0;
        }
        else
        {
          uint64_t v126 = 1;
          uint64_t v125 = v281;
        }
        uint64_t v128 = v309;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v306)(v125, v126, 1, v309);
        uint64_t v129 = (uint64_t)v125;
        uint64_t v127 = v283;
        sub_1000CAAB4(v129, v283);
        int v130 = (*v304)(v127, 1, v128);
        unint64_t v45 = v305;
        uint64_t v110 = v284;
        if (v130 != 1)
        {
          (*v301)(v284, v127, v309);
LABEL_68:
          Date.timeIntervalSinceReferenceDate.getter();
          double v132 = v131;
          (*v307)(v110, v309);
          *(double *)(v107 + 24) = v132;
          *(unsigned char *)(v107 + 32) = 0;
          if (v132 < v116) {
            goto LABEL_69;
          }
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v127 = v283;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v306)(v283, 1, 1, v309);
      }
      static Date.distantPast.getter();
      sub_1000EACF4(v127);
      goto LABEL_68;
    }
LABEL_52:
    if (*(double *)(v107 + 24) < v116)
    {
LABEL_69:
      int v133 = rem_isEqualNonces();
      swift_release();
      swift_release();
      LODWORD(v292) = v133 ^ 1;
      goto LABEL_70;
    }
LABEL_53:
    swift_release();
    swift_release();
    LODWORD(v292) = 0;
LABEL_70:
    Swift::Int v105 = v293;
    Swift::Int v101 = v293 + 2;
    if (v293 + 2 >= v57)
    {
      Swift::Int v115 = v285;
      if (v292) {
        goto LABEL_102;
      }
      goto LABEL_110;
    }
    uint64_t v134 = &v278[8 * v293];
    do
    {
      uint64_t v135 = *((void *)v134 - 1);
      uint64_t v136 = *(void *)v134;
      if ((*(unsigned char *)(*(void *)v134 + 32) & 1) == 0)
      {
        double v143 = *(double *)(v136 + 24);
        swift_retain();
        swift_retain();
        if ((*(unsigned char *)(v135 + 32) & 1) == 0) {
          goto LABEL_79;
        }
        goto LABEL_87;
      }
      unint64_t v137 = *(void **)(v136 + 16);
      swift_retain();
      swift_retain();
      id v138 = [v137 ckServerRecord];
      if (!v138)
      {
        uint64_t v144 = v290;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v306)(v290, 1, 1, v309);
LABEL_84:
        uint64_t v152 = v288;
        static Date.distantPast.getter();
        sub_1000EACF4(v144);
        goto LABEL_86;
      }
      char v139 = v138;
      id v140 = [v138 creationDate];

      if (v140)
      {
        uint64_t v141 = v286;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v142 = 0;
      }
      else
      {
        uint64_t v142 = 1;
        uint64_t v141 = v286;
      }
      unint64_t v145 = v141;
      uint64_t v146 = (uint64_t)v141;
      uint64_t v147 = v309;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v306)(v145, v142, 1, v309);
      uint64_t v148 = v146;
      uint64_t v149 = v290;
      sub_1000CAAB4(v148, v290);
      uint64_t v150 = v147;
      uint64_t v144 = v149;
      int v151 = (*v304)(v149, 1, v150);
      unint64_t v45 = v305;
      if (v151 == 1) {
        goto LABEL_84;
      }
      uint64_t v152 = v288;
      (*v301)(v288, v144, v309);
LABEL_86:
      Date.timeIntervalSinceReferenceDate.getter();
      double v143 = v153;
      (*v307)(v152, v309);
      *(double *)(v136 + 24) = v143;
      *(unsigned char *)(v136 + 32) = 0;
      uint64_t v56 = v300;
      if ((*(unsigned char *)(v135 + 32) & 1) == 0)
      {
LABEL_79:
        if (*(double *)(v135 + 24) >= v143) {
          goto LABEL_72;
        }
        goto LABEL_96;
      }
LABEL_87:
      id v154 = [*(id *)(v135 + 16) ckServerRecord];
      if (!v154)
      {
        uint64_t v159 = v291;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v306)(v291, 1, 1, v309);
LABEL_93:
        unint64_t v167 = v289;
        static Date.distantPast.getter();
        sub_1000EACF4(v159);
        goto LABEL_95;
      }
      uint64_t v155 = v154;
      id v156 = [v154 creationDate];

      if (v156)
      {
        char v157 = v287;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v158 = 0;
      }
      else
      {
        uint64_t v158 = 1;
        char v157 = v287;
      }
      uint64_t v160 = v157;
      uint64_t v161 = (uint64_t)v157;
      uint64_t v162 = v309;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v306)(v160, v158, 1, v309);
      uint64_t v163 = v161;
      uint64_t v164 = v291;
      sub_1000CAAB4(v163, v291);
      uint64_t v165 = v162;
      uint64_t v159 = v164;
      int v166 = (*v304)(v164, 1, v165);
      unint64_t v45 = v305;
      if (v166 == 1) {
        goto LABEL_93;
      }
      unint64_t v167 = v289;
      (*v301)(v289, v159, v309);
LABEL_95:
      Date.timeIntervalSinceReferenceDate.getter();
      double v169 = v168;
      (*v307)(v167, v309);
      *(double *)(v135 + 24) = v169;
      *(unsigned char *)(v135 + 32) = 0;
      uint64_t v56 = v300;
      if (v169 >= v143)
      {
LABEL_72:
        swift_release();
        swift_release();
        if (v292)
        {
          Swift::Int v57 = (Swift::Int)v296;
          Swift::Int v115 = v285;
          Swift::Int v105 = v293;
          if (v101 < v293) {
            goto LABEL_238;
          }
          goto LABEL_103;
        }
        goto LABEL_73;
      }
LABEL_96:
      int v170 = rem_isEqualNonces();
      swift_release();
      swift_release();
      if (v292 == v170)
      {
        Swift::Int v57 = (Swift::Int)v296;
        goto LABEL_101;
      }
LABEL_73:
      ++v101;
      v134 += 8;
    }
    while (v296 != (char *)v101);
    Swift::Int v57 = (Swift::Int)v296;
    Swift::Int v101 = (Swift::Int)v296;
LABEL_101:
    Swift::Int v115 = v285;
    Swift::Int v105 = v293;
    if (!v292) {
      goto LABEL_110;
    }
LABEL_102:
    if (v101 < v105) {
      goto LABEL_238;
    }
LABEL_103:
    if (v105 < v101)
    {
      long long v171 = &v279[8 * v101];
      Swift::Int v172 = v101;
      Swift::Int v173 = v105;
      unint64_t v174 = &v308[8 * v105];
      do
      {
        if (v173 != --v172)
        {
          if (!v308) {
            goto LABEL_244;
          }
          uint64_t v175 = *(void *)v174;
          *(void *)unint64_t v174 = *(void *)v171;
          *(void *)long long v171 = v175;
        }
        ++v173;
        v171 -= 8;
        v174 += 8;
      }
      while (v173 < v172);
    }
LABEL_110:
    if (v101 >= v57) {
      goto LABEL_151;
    }
    if (__OFSUB__(v101, v105)) {
      goto LABEL_236;
    }
    if (v101 - v105 >= v115) {
      goto LABEL_151;
    }
    if (__OFADD__(v105, v115)) {
      goto LABEL_239;
    }
    if (v105 + v115 >= v57) {
      Swift::Int v176 = v57;
    }
    else {
      Swift::Int v176 = v105 + v115;
    }
    id v177 = v308;
    if (v176 >= v105)
    {
      if (v101 == v176) {
        goto LABEL_151;
      }
      uint64_t v276 = v100;
      uint64_t v178 = &v279[8 * v101];
      Swift::Int v292 = v176;
      while (2)
      {
        uint64_t v179 = *(void *)&v177[8 * v101];
        Swift::Int v180 = v293;
        uint64_t v181 = v178;
        while (2)
        {
          uint64_t v182 = *(void *)v181;
          if ((*(unsigned char *)(v179 + 32) & 1) == 0)
          {
            double v189 = *(double *)(v179 + 24);
            swift_retain();
            swift_retain();
            if (*(unsigned char *)(v182 + 32)) {
              goto LABEL_137;
            }
LABEL_129:
            if (*(double *)(v182 + 24) >= v189) {
              break;
            }
            goto LABEL_146;
          }
          Swift::String v183 = *(void **)(v179 + 16);
          swift_retain();
          swift_retain();
          id v184 = [v183 ckServerRecord];
          if (!v184)
          {
            uint64_t v190 = v302;
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v306)(v302, 1, 1, v309);
            goto LABEL_134;
          }
          char v185 = v184;
          id v186 = [v184 creationDate];

          if (v186)
          {
            char v187 = v297;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v188 = 0;
          }
          else
          {
            uint64_t v188 = 1;
            char v187 = v297;
          }
          uint64_t v191 = v187;
          uint64_t v192 = (uint64_t)v187;
          uint64_t v193 = v309;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v306)(v191, v188, 1, v309);
          uint64_t v194 = v192;
          uint64_t v195 = v302;
          sub_1000CAAB4(v194, v302);
          uint64_t v196 = v193;
          uint64_t v190 = v195;
          int v197 = (*v304)(v195, 1, v196);
          unint64_t v45 = v305;
          if (v197 == 1)
          {
LABEL_134:
            static Date.distantPast.getter();
            sub_1000EACF4(v190);
          }
          else
          {
            (*v301)(v305, v190, v309);
          }
          Date.timeIntervalSinceReferenceDate.getter();
          double v189 = v198;
          (*v307)(v45, v309);
          *(double *)(v179 + 24) = v189;
          *(unsigned char *)(v179 + 32) = 0;
          if ((*(unsigned char *)(v182 + 32) & 1) == 0) {
            goto LABEL_129;
          }
LABEL_137:
          id v199 = [*(id *)(v182 + 16) ckServerRecord];
          if (!v199)
          {
            uint64_t v204 = v303;
            ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))*v306)(v303, 1, 1, v309);
            goto LABEL_143;
          }
          uint64_t v200 = v199;
          id v201 = [v199 creationDate];

          if (v201)
          {
            uint64_t v202 = v298;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v203 = 0;
          }
          else
          {
            uint64_t v203 = 1;
            uint64_t v202 = v298;
          }
          uint64_t v205 = v202;
          uint64_t v206 = (uint64_t)v202;
          uint64_t v207 = v309;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v306)(v205, v203, 1, v309);
          uint64_t v208 = v206;
          uint64_t v209 = v303;
          sub_1000CAAB4(v208, (uint64_t)v303);
          uint64_t v210 = v207;
          uint64_t v204 = v209;
          int v211 = (*v304)((uint64_t)v209, 1, v210);
          unint64_t v45 = v305;
          if (v211 == 1)
          {
LABEL_143:
            static Date.distantPast.getter();
            sub_1000EACF4((uint64_t)v204);
          }
          else
          {
            (*v301)(v103, (uint64_t)v204, v309);
          }
          Date.timeIntervalSinceReferenceDate.getter();
          double v213 = v212;
          (*v307)(v103, v309);
          *(double *)(v182 + 24) = v213;
          *(unsigned char *)(v182 + 32) = 0;
          if (v213 < v189)
          {
LABEL_146:
            char v214 = rem_isEqualNonces();
            swift_release();
            swift_release();
            if (v214) {
              goto LABEL_121;
            }
            id v177 = v308;
            if (!v308) {
              goto LABEL_242;
            }
            uint64_t v215 = *(void *)v181;
            uint64_t v179 = *((void *)v181 + 1);
            *(void *)uint64_t v181 = v179;
            *((void *)v181 + 1) = v215;
            v181 -= 8;
            if (v101 == ++v180) {
              goto LABEL_122;
            }
            continue;
          }
          break;
        }
        swift_release();
        swift_release();
LABEL_121:
        id v177 = v308;
LABEL_122:
        ++v101;
        v178 += 8;
        if (v101 != v292) {
          continue;
        }
        break;
      }
      Swift::Int v101 = v292;
      unint64_t v100 = v276;
      uint64_t v56 = v300;
      Swift::Int v105 = v293;
LABEL_151:
      if (v101 < v105) {
        goto LABEL_231;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v100 = sub_1001F3D80(0, *((void *)v100 + 2) + 1, 1, v100);
      }
      unint64_t v217 = *((void *)v100 + 2);
      unint64_t v216 = *((void *)v100 + 3);
      unint64_t v104 = v217 + 1;
      uint64_t v102 = v308;
      if (v217 >= v216 >> 1)
      {
        v267 = sub_1001F3D80((char *)(v216 > 1), v217 + 1, 1, v100);
        uint64_t v102 = v308;
        unint64_t v100 = v267;
      }
      *((void *)v100 + 2) = v104;
      int64_t v218 = v100 + 32;
      uint64_t v219 = &v100[16 * v217 + 32];
      *(void *)uint64_t v219 = v293;
      *((void *)v219 + 1) = v101;
      if (v217)
      {
        while (2)
        {
          unint64_t v220 = v104 - 1;
          if (v104 >= 4)
          {
            unint64_t v225 = &v218[16 * v104];
            uint64_t v226 = *((void *)v225 - 8);
            uint64_t v227 = *((void *)v225 - 7);
            BOOL v231 = __OFSUB__(v227, v226);
            uint64_t v228 = v227 - v226;
            if (v231) {
              goto LABEL_220;
            }
            uint64_t v230 = *((void *)v225 - 6);
            uint64_t v229 = *((void *)v225 - 5);
            BOOL v231 = __OFSUB__(v229, v230);
            uint64_t v223 = v229 - v230;
            char v224 = v231;
            if (v231) {
              goto LABEL_221;
            }
            unint64_t v232 = v104 - 2;
            uint64_t v233 = &v218[16 * v104 - 32];
            uint64_t v235 = *(void *)v233;
            uint64_t v234 = *((void *)v233 + 1);
            BOOL v231 = __OFSUB__(v234, v235);
            uint64_t v236 = v234 - v235;
            if (v231) {
              goto LABEL_223;
            }
            BOOL v231 = __OFADD__(v223, v236);
            uint64_t v237 = v223 + v236;
            if (v231) {
              goto LABEL_226;
            }
            if (v237 >= v228)
            {
              uint64_t v255 = &v218[16 * v220];
              uint64_t v257 = *(void *)v255;
              uint64_t v256 = *((void *)v255 + 1);
              BOOL v231 = __OFSUB__(v256, v257);
              uint64_t v258 = v256 - v257;
              if (v231) {
                goto LABEL_230;
              }
              BOOL v248 = v223 < v258;
            }
            else
            {
LABEL_170:
              if (v224) {
                goto LABEL_222;
              }
              unint64_t v232 = v104 - 2;
              uint64_t v238 = &v218[16 * v104 - 32];
              uint64_t v240 = *(void *)v238;
              uint64_t v239 = *((void *)v238 + 1);
              BOOL v241 = __OFSUB__(v239, v240);
              uint64_t v242 = v239 - v240;
              char v243 = v241;
              if (v241) {
                goto LABEL_225;
              }
              char v244 = &v218[16 * v220];
              uint64_t v246 = *(void *)v244;
              uint64_t v245 = *((void *)v244 + 1);
              BOOL v231 = __OFSUB__(v245, v246);
              uint64_t v247 = v245 - v246;
              if (v231) {
                goto LABEL_228;
              }
              if (__OFADD__(v242, v247)) {
                goto LABEL_229;
              }
              if (v242 + v247 < v223) {
                goto LABEL_182;
              }
              BOOL v248 = v223 < v247;
            }
            if (v248) {
              unint64_t v220 = v232;
            }
          }
          else
          {
            if (v104 == 3)
            {
              uint64_t v222 = *((void *)v100 + 4);
              uint64_t v221 = *((void *)v100 + 5);
              BOOL v231 = __OFSUB__(v221, v222);
              uint64_t v223 = v221 - v222;
              char v224 = v231;
              goto LABEL_170;
            }
            uint64_t v249 = *((void *)v100 + 4);
            uint64_t v250 = *((void *)v100 + 5);
            BOOL v231 = __OFSUB__(v250, v249);
            uint64_t v242 = v250 - v249;
            char v243 = v231;
LABEL_182:
            if (v243) {
              goto LABEL_224;
            }
            id v251 = &v218[16 * v220];
            uint64_t v253 = *(void *)v251;
            uint64_t v252 = *((void *)v251 + 1);
            BOOL v231 = __OFSUB__(v252, v253);
            uint64_t v254 = v252 - v253;
            if (v231) {
              goto LABEL_227;
            }
            if (v254 < v242) {
              goto LABEL_44;
            }
          }
          unint64_t v259 = v220 - 1;
          if (v220 - 1 >= v104)
          {
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
LABEL_222:
            __break(1u);
LABEL_223:
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
            goto LABEL_240;
          }
          if (!v102) {
            goto LABEL_243;
          }
          unint64_t v260 = v100;
          unint64_t v261 = &v218[16 * v259];
          uint64_t v262 = *(void *)v261;
          uint64_t v263 = &v218[16 * v220];
          uint64_t v264 = *((void *)v263 + 1);
          uint64_t v265 = v299;
          sub_10012E868((uint64_t)&v102[8 * *(void *)v261], &v102[8 * *(void *)v263], &v102[8 * v264], v295);
          uint64_t v299 = v265;
          if (v265) {
            goto LABEL_213;
          }
          if (v264 < v262) {
            goto LABEL_217;
          }
          if (v220 > *((void *)v260 + 2)) {
            goto LABEL_218;
          }
          *(void *)unint64_t v261 = v262;
          *(void *)&v218[16 * v259 + 8] = v264;
          unint64_t v266 = *((void *)v260 + 2);
          if (v220 >= v266) {
            goto LABEL_219;
          }
          unint64_t v100 = v260;
          unint64_t v104 = v266 - 1;
          memmove(&v218[16 * v220], v263 + 16, 16 * (v266 - 1 - v220));
          *((void *)v260 + 2) = v266 - 1;
          BOOL v248 = v266 > 2;
          id v103 = v294;
          unint64_t v45 = v305;
          uint64_t v56 = v300;
          uint64_t v102 = v308;
          if (!v248) {
            goto LABEL_44;
          }
          continue;
        }
      }
      unint64_t v104 = 1;
LABEL_44:
      Swift::Int v57 = (Swift::Int)v296;
      if (v101 >= (uint64_t)v296)
      {
        uint64_t v2 = v299;
        a1 = v277;
        goto LABEL_202;
      }
      continue;
    }
    break;
  }
LABEL_240:
  __break(1u);
LABEL_241:
  __break(1u);
LABEL_242:
  __break(1u);
LABEL_243:
  __break(1u);
LABEL_244:
  __break(1u);
LABEL_245:
  __break(1u);
LABEL_246:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_10012DF1C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_142;
    }
    if (v3) {
      return sub_10012E740(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_150;
  }
  Swift::Int v6 = result;
  uint64_t v122 = v1;
  unint64_t v111 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v123 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v118 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
LABEL_108:
      if (v14 >= 2)
      {
        uint64_t v104 = *v111;
        do
        {
          unint64_t v105 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_137;
          }
          if (!v104) {
            goto LABEL_149;
          }
          uint64_t v106 = *(void *)&v9[16 * v105 + 32];
          uint64_t v107 = *(void *)&v9[16 * v14 + 24];
          sub_10012F420((char *)(v104 + 8 * v106), (char *)(v104 + 8 * *(void *)&v9[16 * v14 + 16]), v104 + 8 * v107, v118);
          if (v122) {
            break;
          }
          if (v107 < v106) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v9 = sub_1001F433C((uint64_t)v9);
          }
          if (v105 >= *((void *)v9 + 2)) {
            goto LABEL_139;
          }
          uint64_t v108 = &v9[16 * v105 + 32];
          *(void *)uint64_t v108 = v106;
          *((void *)v108 + 1) = v107;
          unint64_t v109 = *((void *)v9 + 2);
          if (v14 > v109) {
            goto LABEL_140;
          }
          memmove(&v9[16 * v14 + 16], &v9[16 * v14 + 32], 16 * (v109 - v14));
          *((void *)v9 + 2) = v109 - 1;
          unint64_t v14 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
      *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    type metadata accessor for DueDateVerifiableAlarm();
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    uint64_t v118 = (char *)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v123 = v8;
  }
  Swift::Int v10 = 0;
  uint64_t v112 = *a1 + 16;
  uint64_t v113 = *a1 - 8;
  Swift::Int v114 = v6;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  uint64_t v11 = &selRef_willSave;
  Swift::Int v12 = v3;
  uint64_t v13 = *a1;
  Swift::Int v117 = v12;
  while (1)
  {
    Swift::Int v15 = v10;
    Swift::Int v16 = v10 + 1;
    if (v10 + 1 < v12)
    {
      Swift::Int v119 = v10;
      uint64_t v17 = *(void *)(v13 + 8 * v10);
      uint64_t v18 = *(void **)(*(void *)(v13 + 8 * v16) + 16);
      swift_retain();
      swift_retain();
      [v18 v11[264]];
      double v20 = v19;
      [*(id *)(v17 + 16) v11[264]];
      if (v21 >= v20)
      {
        swift_release();
        swift_release();
        int v23 = 0;
      }
      else
      {
        int isEqualNonces = rem_isEqualNonces();
        swift_release();
        swift_release();
        int v23 = isEqualNonces ^ 1;
      }
      Swift::Int v15 = v119;
      Swift::Int v16 = v119 + 2;
      Swift::Int v12 = v117;
      if (v119 + 2 < v117)
      {
        Swift::Int v24 = v119 + 2;
        uint64_t v25 = v112 + 8 * v119;
        while (1)
        {
          uint64_t v26 = *(void *)(v25 - 8);
          uint64_t v27 = *(void **)(*(void *)v25 + 16);
          swift_retain();
          swift_retain();
          [v27 v11[264]];
          double v29 = v28;
          [*(id *)(v26 + 16) v11[264]];
          if (v30 >= v29)
          {
            swift_release();
            swift_release();
            if (v23)
            {
              Swift::Int v12 = v117;
              Swift::Int v16 = v24;
              Swift::Int v15 = v119;
              if (v24 < v119) {
                goto LABEL_143;
              }
              goto LABEL_30;
            }
          }
          else
          {
            int v31 = rem_isEqualNonces();
            swift_release();
            swift_release();
            if (v23 == v31)
            {
              Swift::Int v12 = v117;
              Swift::Int v16 = v24;
LABEL_27:
              Swift::Int v15 = v119;
              break;
            }
          }
          v25 += 8;
          Swift::Int v12 = v117;
          if (v117 == ++v24)
          {
            Swift::Int v16 = v117;
            goto LABEL_27;
          }
        }
      }
      if (v23)
      {
        if (v16 < v15) {
          goto LABEL_143;
        }
LABEL_30:
        if (v15 < v16)
        {
          uint64_t v32 = (uint64_t *)(v113 + 8 * v16);
          Swift::Int v33 = v16;
          Swift::Int v34 = v15;
          uint64_t v35 = (uint64_t *)(v13 + 8 * v15);
          do
          {
            if (v34 != --v33)
            {
              if (!v13) {
                goto LABEL_148;
              }
              uint64_t v36 = *v35;
              *uint64_t v35 = *v32;
              uint64_t *v32 = v36;
            }
            ++v34;
            --v32;
            ++v35;
          }
          while (v34 < v33);
        }
      }
    }
    if (v16 < v12)
    {
      if (__OFSUB__(v16, v15)) {
        goto LABEL_141;
      }
      if (v16 - v15 < v114) {
        break;
      }
    }
LABEL_56:
    if (v16 < v15) {
      goto LABEL_136;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_1001F3D80(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v51 = *((void *)v9 + 2);
    unint64_t v50 = *((void *)v9 + 3);
    unint64_t v14 = v51 + 1;
    if (v51 >= v50 >> 1) {
      uint64_t v9 = sub_1001F3D80((char *)(v50 > 1), v51 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v14;
    double v121 = v9 + 32;
    uint64_t v52 = &v9[16 * v51 + 32];
    *(void *)uint64_t v52 = v15;
    *((void *)v52 + 1) = v16;
    Swift::Int v116 = v16;
    if (v51)
    {
      uint64_t v53 = v9 + 32;
      while (1)
      {
        unint64_t v54 = v14 - 1;
        if (v14 >= 4)
        {
          uint64_t v59 = &v53[16 * v14];
          uint64_t v60 = *((void *)v59 - 8);
          uint64_t v61 = *((void *)v59 - 7);
          BOOL v65 = __OFSUB__(v61, v60);
          uint64_t v62 = v61 - v60;
          if (v65) {
            goto LABEL_125;
          }
          uint64_t v64 = *((void *)v59 - 6);
          uint64_t v63 = *((void *)v59 - 5);
          BOOL v65 = __OFSUB__(v63, v64);
          uint64_t v57 = v63 - v64;
          char v58 = v65;
          if (v65) {
            goto LABEL_126;
          }
          unint64_t v66 = v14 - 2;
          uint64_t v67 = &v53[16 * v14 - 32];
          uint64_t v69 = *(void *)v67;
          uint64_t v68 = *((void *)v67 + 1);
          BOOL v65 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          if (v65) {
            goto LABEL_128;
          }
          BOOL v65 = __OFADD__(v57, v70);
          uint64_t v71 = v57 + v70;
          if (v65) {
            goto LABEL_131;
          }
          if (v71 >= v62)
          {
            unint64_t v89 = &v53[16 * v54];
            uint64_t v91 = *(void *)v89;
            uint64_t v90 = *((void *)v89 + 1);
            BOOL v65 = __OFSUB__(v90, v91);
            uint64_t v92 = v90 - v91;
            if (v65) {
              goto LABEL_135;
            }
            BOOL v82 = v57 < v92;
            goto LABEL_94;
          }
        }
        else
        {
          if (v14 != 3)
          {
            uint64_t v83 = *((void *)v9 + 4);
            uint64_t v84 = *((void *)v9 + 5);
            BOOL v65 = __OFSUB__(v84, v83);
            uint64_t v76 = v84 - v83;
            char v77 = v65;
            goto LABEL_88;
          }
          uint64_t v56 = *((void *)v9 + 4);
          uint64_t v55 = *((void *)v9 + 5);
          BOOL v65 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          char v58 = v65;
        }
        if (v58) {
          goto LABEL_127;
        }
        unint64_t v66 = v14 - 2;
        NSString v72 = &v53[16 * v14 - 32];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        BOOL v75 = __OFSUB__(v73, v74);
        uint64_t v76 = v73 - v74;
        char v77 = v75;
        if (v75) {
          goto LABEL_130;
        }
        uint64_t v78 = &v53[16 * v54];
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *((void *)v78 + 1);
        BOOL v65 = __OFSUB__(v79, v80);
        uint64_t v81 = v79 - v80;
        if (v65) {
          goto LABEL_133;
        }
        if (__OFADD__(v76, v81)) {
          goto LABEL_134;
        }
        if (v76 + v81 >= v57)
        {
          BOOL v82 = v57 < v81;
LABEL_94:
          if (v82) {
            unint64_t v54 = v66;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v77) {
          goto LABEL_129;
        }
        double v85 = &v53[16 * v54];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v65 = __OFSUB__(v86, v87);
        uint64_t v88 = v86 - v87;
        if (v65) {
          goto LABEL_132;
        }
        if (v88 < v76) {
          goto LABEL_14;
        }
LABEL_96:
        unint64_t v93 = v54 - 1;
        if (v54 - 1 >= v14)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        uint64_t v94 = v13;
        if (!v13) {
          goto LABEL_147;
        }
        double v95 = v11;
        double v96 = v9;
        uint64_t v97 = v53;
        unint64_t v98 = &v53[16 * v93];
        uint64_t v99 = *(void *)v98;
        unint64_t v100 = &v97[16 * v54];
        uint64_t v101 = *((void *)v100 + 1);
        uint64_t v102 = v94;
        sub_10012F420((char *)(v94 + 8 * *(void *)v98), (char *)(v94 + 8 * *(void *)v100), v94 + 8 * v101, v118);
        if (v122) {
          goto LABEL_119;
        }
        if (v101 < v99) {
          goto LABEL_122;
        }
        if (v54 > *((void *)v96 + 2)) {
          goto LABEL_123;
        }
        *(void *)unint64_t v98 = v99;
        uint64_t v53 = v121;
        *(void *)&v121[16 * v93 + 8] = v101;
        unint64_t v103 = *((void *)v96 + 2);
        if (v54 >= v103) {
          goto LABEL_124;
        }
        uint64_t v9 = v96;
        unint64_t v14 = v103 - 1;
        memmove(v100, v100 + 16, 16 * (v103 - 1 - v54));
        *((void *)v96 + 2) = v103 - 1;
        uint64_t v13 = v102;
        uint64_t v11 = v95;
        if (v103 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v14 = 1;
LABEL_14:
    Swift::Int v10 = v116;
    Swift::Int v12 = v117;
    if (v116 >= v117) {
      goto LABEL_108;
    }
  }
  if (__OFADD__(v15, v114)) {
    goto LABEL_144;
  }
  if (v15 + v114 >= v12) {
    Swift::Int v37 = v12;
  }
  else {
    Swift::Int v37 = v15 + v114;
  }
  if (v37 >= v15)
  {
    if (v16 != v37)
    {
      uint64_t v120 = v15;
      uint64_t v110 = v9;
      uint64_t v38 = (uint64_t *)(v113 + 8 * v16);
      Swift::Int v115 = v37;
      do
      {
        Swift::Int v39 = v16;
        uint64_t v40 = *(void *)(v13 + 8 * v16);
        uint64_t v41 = v120;
        uint64_t v42 = v38;
        while (1)
        {
          uint64_t v43 = *v42;
          uint64_t v44 = *(void **)(v40 + 16);
          swift_retain();
          swift_retain();
          [v44 v11[264]];
          double v46 = v45;
          [*(id *)(v43 + 16) v11[264]];
          if (v47 >= v46) {
            break;
          }
          char v48 = rem_isEqualNonces();
          swift_release();
          swift_release();
          if (v48) {
            goto LABEL_48;
          }
          if (!v13) {
            goto LABEL_146;
          }
          uint64_t v49 = *v42;
          uint64_t v40 = v42[1];
          uint64_t *v42 = v40;
          v42[1] = v49;
          --v42;
          if (v39 == ++v41) {
            goto LABEL_48;
          }
        }
        swift_release();
        swift_release();
LABEL_48:
        Swift::Int v16 = v39 + 1;
        ++v38;
      }
      while (v39 + 1 != v115);
      Swift::Int v16 = v115;
      uint64_t v9 = v110;
      Swift::Int v15 = v120;
    }
    goto LABEL_56;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012E740(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v18 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_6:
    uint64_t v7 = *(void *)(v5 + 8 * v4);
    uint64_t v8 = v18;
    uint64_t v9 = (uint64_t *)v6;
    while (1)
    {
      uint64_t v10 = *v9;
      uint64_t v11 = *(void **)(v7 + 16);
      swift_retain();
      swift_retain();
      [v11 dueDateResolutionTokenAsNonce];
      double v13 = v12;
      [*(id *)(v10 + 16) dueDateResolutionTokenAsNonce];
      if (v14 >= v13)
      {
        swift_release();
        Swift::Int result = swift_release();
LABEL_5:
        ++v4;
        v6 += 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char isEqualNonces = rem_isEqualNonces();
      swift_release();
      Swift::Int result = swift_release();
      if (isEqualNonces) {
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      uint64_t v16 = *v9;
      uint64_t v7 = v9[1];
      *uint64_t v9 = v7;
      v9[1] = v16;
      --v9;
      if (v4 == ++v8) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10012E868(uint64_t a1, char *a2, char *a3, char *a4)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  Swift::Int v115 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v118 = (char *)&v111 - v11;
  __chkstk_darwin(v12);
  Swift::Int v114 = (char *)&v111 - v13;
  __chkstk_darwin(v14);
  Swift::Int v117 = (char *)&v111 - v15;
  __chkstk_darwin(v16);
  uint64_t v113 = (void (**)(char *, uint64_t, uint64_t))((char *)&v111 - v17);
  __chkstk_darwin(v18);
  uint64_t v120 = (void (**)(char *, uint64_t))((char *)&v111 - v19);
  __chkstk_darwin(v20);
  uint64_t v112 = (char *)&v111 - v21;
  __chkstk_darwin(v22);
  Swift::Int v119 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)&v111 - v23);
  uint64_t v126 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v26 = (char *)&v111 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  Swift::Int v116 = (char *)&v111 - v28;
  __chkstk_darwin(v29);
  uint64_t v125 = (char *)&v111 - v30;
  __chkstk_darwin(v31);
  uint64_t v34 = (uint64_t)&a2[-a1];
  uint64_t v35 = v34 / 8;
  uint64_t v123 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v33;
  id v124 = a3;
  uint64_t v36 = a3 - a2;
  uint64_t v37 = v36 / 8;
  uint64_t v129 = v33;
  uint64_t v128 = a4;
  if (v34 / 8 >= v36 / 8)
  {
    if (v36 < -7) {
      goto LABEL_87;
    }
    if (a4 != a2 || &a2[8 * v37] <= a4)
    {
      memmove(a4, a2, 8 * v37);
      Swift::Int v33 = (char *)v123;
    }
    NSString v72 = &a4[8 * v37];
    uint64_t v127 = v72;
    uint64_t v129 = a2;
    if (v36 < 8 || v33 >= a2)
    {
LABEL_86:
      sub_1001F3F4C(&v129, &v128, &v127);
      return 1;
    }
    Swift::Int v119 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    uint64_t v113 = (void (**)(char *, uint64_t, uint64_t))(v24 + 32);
    uint64_t v120 = (void (**)(char *, uint64_t))(v24 + 8);
    double v121 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
    uint64_t v73 = v124 - 8;
    uint64_t v74 = a2;
    id v124 = v26;
    uint64_t v122 = a4;
    while (1)
    {
      uint64_t v125 = v72;
      uint64_t v76 = v72 - 8;
      uint64_t v75 = *((void *)v72 - 1);
      uint64_t v78 = *((void *)v74 - 1);
      v74 -= 8;
      uint64_t v77 = v78;
      if ((*(unsigned char *)(v75 + 32) & 1) == 0)
      {
        double v85 = *(double *)(v75 + 24);
        swift_retain();
        swift_retain();
        if ((*(unsigned char *)(v77 + 32) & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_63;
      }
      uint64_t v79 = *(void **)(v75 + 16);
      swift_retain();
      swift_retain();
      id v80 = [v79 ckServerRecord];
      if (!v80) {
        break;
      }
      uint64_t v81 = v80;
      id v82 = [v80 creationDate];

      if (v82)
      {
        uint64_t v83 = v114;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v84 = 0;
      }
      else
      {
        uint64_t v84 = 1;
        uint64_t v83 = v114;
      }
      uint64_t v88 = v83;
      uint64_t v89 = (uint64_t)v83;
      uint64_t v90 = v126;
      (*v121)(v88, v84, 1, v126);
      uint64_t v91 = v89;
      uint64_t v87 = (uint64_t)v117;
      sub_1000CAAB4(v91, (uint64_t)v117);
      int v92 = (*v119)(v87, 1, v90);
      uint64_t v26 = v124;
      if (v92 == 1) {
        goto LABEL_60;
      }
      unint64_t v93 = v116;
      (*v113)(v116, v87, v126);
LABEL_62:
      Date.timeIntervalSinceReferenceDate.getter();
      double v85 = v94;
      (*v120)(v93, v126);
      *(double *)(v75 + 24) = v85;
      *(unsigned char *)(v75 + 32) = 0;
      if ((*(unsigned char *)(v77 + 32) & 1) == 0)
      {
LABEL_56:
        double v86 = *(double *)(v77 + 24);
        goto LABEL_72;
      }
LABEL_63:
      id v95 = [*(id *)(v77 + 16) ckServerRecord];
      if (v95)
      {
        double v96 = v95;
        id v97 = [v95 creationDate];

        if (v97)
        {
          unint64_t v98 = v115;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v99 = 0;
        }
        else
        {
          uint64_t v99 = 1;
          unint64_t v98 = v115;
        }
        uint64_t v101 = v98;
        uint64_t v102 = (uint64_t)v98;
        uint64_t v103 = v126;
        (*v121)(v101, v99, 1, v126);
        uint64_t v104 = v102;
        uint64_t v100 = (uint64_t)v118;
        sub_1000CAAB4(v104, (uint64_t)v118);
        int v105 = (*v119)(v100, 1, v103);
        uint64_t v26 = v124;
        if (v105 != 1)
        {
          (*v113)(v124, v100, v126);
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v100 = (uint64_t)v118;
        (*v121)(v118, 1, 1, v126);
      }
      static Date.distantPast.getter();
      sub_1000EACF4(v100);
LABEL_71:
      Date.timeIntervalSinceReferenceDate.getter();
      double v86 = v106;
      (*v120)(v26, v126);
      *(double *)(v77 + 24) = v86;
      *(unsigned char *)(v77 + 32) = 0;
LABEL_72:
      uint64_t v107 = v73 + 8;
      if (v86 >= v85)
      {
        swift_release();
        swift_release();
LABEL_79:
        uint64_t v127 = v76;
        unint64_t v109 = v123;
        if (v107 < v125 || v73 >= v125 || v107 != v125) {
          *(void *)uint64_t v73 = *(void *)v76;
        }
        uint64_t v74 = a2;
        NSString v72 = v76;
        goto LABEL_84;
      }
      char isEqualNonces = rem_isEqualNonces();
      swift_release();
      swift_release();
      if (isEqualNonces) {
        goto LABEL_79;
      }
      unint64_t v109 = v123;
      NSString v72 = v125;
      if (v107 != a2 || v73 >= a2) {
        *(void *)uint64_t v73 = *(void *)v74;
      }
      uint64_t v129 = v74;
LABEL_84:
      uint64_t v26 = v124;
      if (v72 > v122)
      {
        v73 -= 8;
        a2 = v74;
        if (v74 > (char *)v109) {
          continue;
        }
      }
      goto LABEL_86;
    }
    uint64_t v87 = (uint64_t)v117;
    (*v121)(v117, 1, 1, v126);
LABEL_60:
    unint64_t v93 = v116;
    static Date.distantPast.getter();
    sub_1000EACF4(v87);
    goto LABEL_62;
  }
  uint64_t v118 = (char *)&v111 - v32;
  if (v34 >= -7)
  {
    if (a4 != v33 || &v33[8 * v35] <= a4)
    {
      memmove(a4, v123, 8 * v35);
      Swift::Int v33 = (char *)v123;
    }
    unint64_t v38 = (unint64_t)&a4[8 * v35];
    uint64_t v127 = (void *)v38;
    BOOL v39 = v34 < 8;
    uint64_t v40 = v125;
    if (!v39 && a2 < v124)
    {
      uint64_t v123 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
      double v121 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 48);
      Swift::Int v116 = (char *)(v24 + 32);
      Swift::Int v117 = &a4[8 * v35];
      uint64_t v41 = (void (**)(uint64_t, uint64_t))(v24 + 8);
      while (1)
      {
        uint64_t v42 = v33;
        uint64_t v43 = *(void *)a2;
        uint64_t v44 = a4;
        uint64_t v45 = *(void *)a4;
        if ((*(unsigned char *)(*(void *)a2 + 32) & 1) == 0)
        {
          double v52 = *(double *)(v43 + 24);
          swift_retain();
          swift_retain();
          if ((*(unsigned char *)(v45 + 32) & 1) == 0) {
            goto LABEL_14;
          }
          goto LABEL_22;
        }
        double v46 = *(void **)(v43 + 16);
        swift_retain();
        swift_retain();
        id v47 = [v46 ckServerRecord];
        if (!v47) {
          break;
        }
        char v48 = v47;
        id v49 = [v47 creationDate];

        if (v49)
        {
          uint64_t v50 = (uint64_t)v112;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v51 = 0;
        }
        else
        {
          uint64_t v51 = 1;
          uint64_t v50 = (uint64_t)v112;
        }
        uint64_t v54 = v126;
        (*v123)(v50, v51, 1, v126);
        uint64_t v53 = v119;
        sub_1000CAAB4(v50, (uint64_t)v119);
        int v55 = ((uint64_t (*)(void, uint64_t, uint64_t))*v121)(v53, 1, v54);
        uint64_t v40 = v125;
        if (v55 == 1) {
          goto LABEL_19;
        }
        uint64_t v56 = (uint64_t)v118;
        (*(void (**)(char *, uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t))v116)(v118, v53, v126);
LABEL_21:
        Date.timeIntervalSinceReferenceDate.getter();
        double v52 = v57;
        (*v41)(v56, v126);
        *(double *)(v43 + 24) = v52;
        *(unsigned char *)(v43 + 32) = 0;
        unint64_t v38 = (unint64_t)v117;
        if ((*(unsigned char *)(v45 + 32) & 1) == 0)
        {
LABEL_14:
          if (*(double *)(v45 + 24) >= v52) {
            goto LABEL_15;
          }
          goto LABEL_31;
        }
LABEL_22:
        id v58 = [*(id *)(v45 + 16) ckServerRecord];
        if (!v58)
        {
          uint64_t v63 = v120;
          (*v123)((uint64_t)v120, 1, 1, v126);
LABEL_28:
          static Date.distantPast.getter();
          sub_1000EACF4((uint64_t)v63);
          goto LABEL_30;
        }
        uint64_t v59 = v58;
        id v60 = [v58 creationDate];

        if (v60)
        {
          uint64_t v61 = v113;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v62 = 0;
        }
        else
        {
          uint64_t v62 = 1;
          uint64_t v61 = v113;
        }
        uint64_t v64 = v126;
        (*v123)((uint64_t)v61, v62, 1, v126);
        uint64_t v65 = (uint64_t)v61;
        uint64_t v63 = v120;
        sub_1000CAAB4(v65, (uint64_t)v120);
        int v66 = ((uint64_t (*)(void (**)(char *, uint64_t), uint64_t, uint64_t))*v121)(v63, 1, v64);
        uint64_t v40 = v125;
        if (v66 == 1) {
          goto LABEL_28;
        }
        (*(void (**)(char *, void (**)(char *, uint64_t), uint64_t))v116)(v125, v63, v126);
LABEL_30:
        Date.timeIntervalSinceReferenceDate.getter();
        double v68 = v67;
        (*v41)((uint64_t)v40, v126);
        *(double *)(v45 + 24) = v68;
        *(unsigned char *)(v45 + 32) = 0;
        if (v68 >= v52)
        {
LABEL_15:
          swift_release();
          swift_release();
LABEL_32:
          uint64_t v70 = v42;
          if (v42 != v44) {
            *(void *)uint64_t v42 = *(void *)v44;
          }
          a4 = v44 + 8;
          uint64_t v128 = v44 + 8;
          uint64_t v71 = a2;
          goto LABEL_35;
        }
LABEL_31:
        char v69 = rem_isEqualNonces();
        swift_release();
        swift_release();
        if (v69) {
          goto LABEL_32;
        }
        uint64_t v71 = a2 + 8;
        uint64_t v70 = v42;
        a4 = v44;
        if (v42 >= a2 && v42 < v71)
        {
          uint64_t v40 = v125;
          if (v42 != a2) {
            *(void *)uint64_t v42 = *(void *)a2;
          }
          goto LABEL_36;
        }
        *(void *)uint64_t v42 = *(void *)a2;
LABEL_35:
        uint64_t v40 = v125;
LABEL_36:
        Swift::Int v33 = v70 + 8;
        uint64_t v129 = v33;
        if ((unint64_t)a4 < v38)
        {
          a2 = v71;
          if (v71 < v124) {
            continue;
          }
        }
        goto LABEL_86;
      }
      uint64_t v53 = v119;
      (*v123)((uint64_t)v119, 1, 1, v126);
LABEL_19:
      uint64_t v56 = (uint64_t)v118;
      static Date.distantPast.getter();
      sub_1000EACF4((uint64_t)v53);
      goto LABEL_21;
    }
    goto LABEL_86;
  }
LABEL_87:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012F420(char *a1, char *__src, unint64_t a3, char *a4)
{
  uint64_t v5 = __src;
  uint64_t v6 = __src - a1;
  uint64_t v7 = __src - a1 + 7;
  if (__src - a1 >= 0) {
    uint64_t v7 = __src - a1;
  }
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = a3 - (void)__src;
  uint64_t v10 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v10 = a3 - (void)__src;
  }
  uint64_t v11 = v10 >> 3;
  uint64_t v35 = a4;
  uint64_t v36 = a1;
  if (v8 >= v10 >> 3)
  {
    if (v9 < -7) {
      goto LABEL_48;
    }
    if (a4 != __src || &__src[8 * v11] <= a4) {
      memmove(a4, __src, 8 * v11);
    }
    uint64_t v21 = &a4[8 * v11];
    uint64_t v34 = v21;
    uint64_t v36 = v5;
    if (a1 >= v5 || v9 < 8)
    {
LABEL_47:
      sub_1001F3F4C(&v36, &v35, &v34);
      return 1;
    }
    uint64_t v22 = (char *)(a3 - 8);
    uint64_t v23 = v5;
    while (1)
    {
      uint64_t v24 = v22 + 8;
      uint64_t v25 = *((void *)v23 - 1);
      v23 -= 8;
      uint64_t v26 = *(void **)(*((void *)v21 - 1) + 16);
      swift_retain();
      swift_retain();
      [v26 dueDateResolutionTokenAsNonce];
      double v28 = v27;
      [*(id *)(v25 + 16) dueDateResolutionTokenAsNonce];
      if (v29 >= v28) {
        break;
      }
      char isEqualNonces = rem_isEqualNonces();
      swift_release();
      swift_release();
      if (isEqualNonces) {
        goto LABEL_40;
      }
      if (v24 != v5 || v22 >= v5) {
        *(void *)uint64_t v22 = *(void *)v23;
      }
      uint64_t v36 = v23;
LABEL_45:
      if (v23 > a1)
      {
        v22 -= 8;
        uint64_t v5 = v23;
        if (v21 > a4) {
          continue;
        }
      }
      goto LABEL_47;
    }
    swift_release();
    swift_release();
LABEL_40:
    uint64_t v34 = v21 - 8;
    if (v24 < v21 || v22 >= v21 || v24 != v21) {
      *(void *)uint64_t v22 = *((void *)v21 - 1);
    }
    uint64_t v23 = v5;
    v21 -= 8;
    goto LABEL_45;
  }
  if (v6 >= -7)
  {
    if (a4 != a1 || &a1[8 * v8] <= a4) {
      memmove(a4, a1, 8 * v8);
    }
    uint64_t v34 = &a4[8 * v8];
    if ((unint64_t)v5 < a3 && v6 >= 8)
    {
      uint64_t v12 = a4;
      uint64_t v13 = a1;
      while (1)
      {
        uint64_t v14 = *(void *)v12;
        uint64_t v15 = *(void **)(*(void *)v5 + 16);
        swift_retain();
        swift_retain();
        [v15 dueDateResolutionTokenAsNonce];
        double v17 = v16;
        [*(id *)(v14 + 16) dueDateResolutionTokenAsNonce];
        if (v18 >= v17) {
          break;
        }
        char v19 = rem_isEqualNonces();
        swift_release();
        swift_release();
        if (v19) {
          goto LABEL_20;
        }
        uint64_t v20 = v5 + 8;
        if (v13 < v5 || v13 >= v20 || v13 != v5) {
          *(void *)uint64_t v13 = *(void *)v5;
        }
LABEL_23:
        v13 += 8;
        if (v12 < &a4[8 * v8])
        {
          uint64_t v5 = v20;
          if ((unint64_t)v20 < a3) {
            continue;
          }
        }
        uint64_t v36 = v13;
        goto LABEL_47;
      }
      swift_release();
      swift_release();
LABEL_20:
      if (v13 != v12) {
        *(void *)uint64_t v13 = *(void *)v12;
      }
      v12 += 8;
      uint64_t v35 = v12;
      uint64_t v20 = v5;
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_48:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10012F778(unint64_t a1, void *a2, uint64_t a3)
{
  Swift::Int v3 = a2;
  v11[0] = a2;
  v11[1] = a3;
  void v11[2] = _swiftEmptyArrayStorage;
  v11[3] = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * i);
      Swift::Int v3 = v7;
      uint64_t v8 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v10 = v7;
      sub_10012AEB4((uint64_t)v11, &v10);

      if (v8 == v5)
      {
        swift_bridgeObjectRelease();
        return (void *)v11[0];
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v3;
}

Swift::Int sub_10012F8DC()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(10 * v1 + 10);
  return Hasher._finalize()();
}

void sub_10012F92C()
{
  Hasher._combine(_:)(10 * *v0 + 10);
}

Swift::Int sub_10012F964()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(10 * v1 + 10);
  return Hasher._finalize()();
}

unsigned __int16 *sub_10012F9B0@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 10) {
    char v3 = 0;
  }
  else {
    char v3 = 3;
  }
  if (v2 == 20) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  if (v2 == 30) {
    char v5 = 2;
  }
  else {
    char v5 = v4;
  }
  *a2 = v5;
  return result;
}

void sub_10012F9E0(_WORD *a1@<X8>)
{
  *a1 = 10 * *v1 + 10;
}

uint64_t sub_10012F9F8()
{
  uint64_t v1 = 1751607656;
  if (*v0 != 1) {
    uint64_t v1 = 0x72656B636F6C62;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 7827308;
  }
}

unint64_t sub_10012FA44(char a1)
{
  unint64_t result = 0xD000000000000019;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD000000000000023;
    }
    else {
      return 0xD00000000000001DLL;
    }
  }
  return result;
}

Swift::Int sub_10012FAA4()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_10012FAEC()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_10012FB1C()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

unsigned __int16 *sub_10012FB60@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 4) {
    char v3 = 3;
  }
  else {
    char v3 = 0x2010003u >> (8 * v2);
  }
  *a2 = v3;
  return result;
}

void sub_10012FB88(_WORD *a1@<X8>)
{
  *a1 = *v1 + 1;
}

unint64_t sub_10012FB98()
{
  return sub_10012FA44(*v0);
}

id sub_10012FBA0()
{
  __int16 v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  char v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v10 = __chkstk_darwin(v9).n128_u64[0];
  uint64_t v12 = (char *)&v20 - v11;
  id v13 = [v1 listIdentifier:v10];
  if (!v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  uint64_t v14 = v13;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v15(v4, v8, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_1001260DC((uint64_t)v4);
    return 0;
  }
  v15(v12, v4, v5);
  sub_100130620();
  id ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v18 = [ObjCClassFromMetadata objectIDWithUUID:isa];

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return v18;
}

void sub_10012FDF8(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v5 = __chkstk_darwin(v4 - 8).n128_u64[0];
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a2 = [a1 objectID];
  unsigned int v8 = [a1 operationTypeRawValue];
  unsigned int v9 = 0x2010003u >> (8 * v8);
  if (v8 >= 4) {
    LOBYTE(v9) = 3;
  }
  *(unsigned char *)(a2 + 8) = v9;
  unsigned int v10 = [a1 priorityRawValue];
  char v11 = v10 == 20;
  if (v10 == 30) {
    char v11 = 2;
  }
  *(unsigned char *)(a2 + 9) = v11;
  id v12 = [a1 creationDate];
  if (v12)
  {
    id v13 = v12;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v14 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 0, 1, v14);
  }
  else
  {
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 1, 1, v15);
  }
  double v16 = (int *)type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation();
  sub_1000CAAB4((uint64_t)v7, a2 + v16[7]);
  *(unsigned char *)(a2 + v16[8]) = [a1 isCompleted];
  *(void *)(a2 + v16[9]) = sub_10012FBA0();
  id v17 = [a1 configurationData];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;
  }
  else
  {

    uint64_t v19 = 0;
    unint64_t v21 = 0xF000000000000000;
  }
  uint64_t v22 = (uint64_t *)(a2 + v16[10]);
  *uint64_t v22 = v19;
  v22[1] = v21;
}

uint64_t sub_10013001C()
{
  __int16 v1 = v0;
  uint64_t v2 = 0xD000000000000019;
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v3._countAndFlagsBits = 0xD000000000000039;
  v3._object = (void *)0x80000001007CB610;
  String.append(_:)(v3);
  id v4 = *v0;
  id v5 = [v4 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);

  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8069182;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 0x6F6974617265706FLL;
  v31._object = (void *)0xEF203A657079546ELL;
  char v11 = (void *)0x80000001007CB5F0;
  switch(*((unsigned char *)v1 + 8))
  {
    case 1:
      uint64_t v2 = 0xD000000000000023;
      id v12 = "downloadGroceryModelAssetsFromTrial";
      goto LABEL_4;
    case 2:
      uint64_t v2 = 0xD00000000000001DLL;
      id v12 = "shouldSuggestConvertToGrocery";
LABEL_4:
      char v11 = (void *)((unint64_t)(v12 - 32) | 0x8000000000000000);
      break;
    case 3:
      char v11 = (void *)0xE700000000000000;
      uint64_t v2 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  v13._countAndFlagsBits = v2;
  v13._object = v11;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 8236;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRetain();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  strcpy((char *)&v31, "priority: ");
  BYTE3(v31._object) = 0;
  HIDWORD(v31._object) = -369098752;
  uint64_t v15 = 1751607656;
  unint64_t v16 = 0xE700000000000000;
  if (*((unsigned char *)v1 + 9) == 1) {
    unint64_t v16 = 0xE400000000000000;
  }
  else {
    uint64_t v15 = 0x72656B636F6C62;
  }
  if (*((unsigned char *)v1 + 9)) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = 7827308;
  }
  if (*((unsigned char *)v1 + 9)) {
    unint64_t v18 = v16;
  }
  else {
    unint64_t v18 = 0xE300000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRetain();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  strcpy((char *)&v31, "creationDate: ");
  HIBYTE(v31._object) = -18;
  uint64_t v21 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation();
  sub_100094134((uint64_t *)&unk_100909A40);
  v22._countAndFlagsBits = Optional.descriptionOrNil.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRetain();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)&v31, "isCompleted: ");
  HIWORD(v31._object) = -4864;
  if (*((unsigned char *)v1 + *(int *)(v21 + 32))) {
    uint64_t v24 = 1702195828;
  }
  else {
    uint64_t v24 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + *(int *)(v21 + 32))) {
    unint64_t v25 = 0xE400000000000000;
  }
  else {
    unint64_t v25 = 0xE500000000000000;
  }
  unint64_t v26 = v25;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 8236;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  swift_bridgeObjectRetain();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v31, "listObjectID: ");
  HIBYTE(v31._object) = -18;
  sub_100094134((uint64_t *)&unk_100914BC0);
  v28._countAndFlagsBits = Optional.descriptionOrNil.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = 125;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for REMCDGroceryOperationQueueItem()
{
  return self;
}

ValueMetadata *type metadata accessor for REMCDGroceryOperationQueueItem.OperationType()
{
  return &type metadata for REMCDGroceryOperationQueueItem.OperationType;
}

unint64_t sub_1001305CC()
{
  unint64_t result = qword_10090BAD8;
  if (!qword_10090BAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090BAD8);
  }
  return result;
}

unint64_t sub_100130620()
{
  unint64_t result = qword_100909AD0;
  if (!qword_100909AD0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100909AD0);
  }
  return result;
}

uint64_t type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation()
{
  uint64_t result = qword_10090BB38;
  if (!qword_10090BB38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *sub_1001306AC(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  id v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
    uint64_t v8 = a3[7];
    Swift::String v9 = &a1[v8];
    Swift::String v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    Swift::String v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    Swift::String v14 = v4;
    if (v13(v10, 1, v11))
    {
      uint64_t v15 = sub_100094134((uint64_t *)&unk_100909A40);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[9];
    v7[a3[8]] = *((unsigned char *)a2 + a3[8]);
    uint64_t v17 = *(char **)((char *)a2 + v16);
    *(void *)&v7[v16] = v17;
    uint64_t v18 = a3[10];
    unint64_t v19 = &v7[v18];
    Swift::String v20 = (_OWORD *)((char *)a2 + v18);
    unint64_t v21 = *(unint64_t *)((char *)a2 + v18 + 8);
    id v22 = v17;
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v19 = *v20;
    }
    else
    {
      uint64_t v23 = *(void *)v20;
      sub_100097E38(v23, v21);
      *(void *)unint64_t v19 = v23;
      *((void *)v19 + 1) = v21;
    }
  }
  return v7;
}

void sub_100130884(id *a1, int *a2)
{
  id v4 = (char *)a1 + a2[7];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }

  uint64_t v7 = (uint64_t *)((char *)a1 + a2[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    sub_100097F34(v9, v8);
  }
}

uint64_t sub_100130988(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v7 = a3[7];
  unint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  id v13 = v6;
  if (v12(v9, 1, v10))
  {
    uint64_t v14 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v15 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v16 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v16;
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v17;
  unint64_t v19 = (_OWORD *)(a2 + v17);
  unint64_t v20 = *(void *)(a2 + v17 + 8);
  id v21 = v16;
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *v19;
  }
  else
  {
    uint64_t v22 = *(void *)v19;
    sub_100097E38(v22, v20);
    *(void *)uint64_t v18 = v22;
    *(void *)(v18 + 8) = v20;
  }
  return a1;
}

uint64_t sub_100130B14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v9 = a3[7];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v18 = a3[9];
  unint64_t v19 = *(void **)(a1 + v18);
  unint64_t v20 = *(void **)(a2 + v18);
  *(void *)(a1 + v18) = v20;
  id v21 = v20;

  uint64_t v22 = a3[10];
  uint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  unint64_t v25 = *(void *)(a2 + v22 + 8);
  if (*(void *)(a1 + v22 + 8) >> 60 != 15)
  {
    if (v25 >> 60 != 15)
    {
      uint64_t v27 = *v24;
      sub_100097E38(v27, v25);
      uint64_t v28 = *v23;
      unint64_t v29 = v23[1];
      *uint64_t v23 = v27;
      v23[1] = v25;
      sub_100097F34(v28, v29);
      return a1;
    }
    sub_1000EB0AC((uint64_t)v23);
    goto LABEL_12;
  }
  if (v25 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    return a1;
  }
  uint64_t v26 = *v24;
  sub_100097E38(v26, v25);
  *uint64_t v23 = v26;
  v23[1] = v25;
  return a1;
}

uint64_t sub_100130D5C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  id v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100130EA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v7 = a3[7];
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v17 = *(void **)(a1 + v16);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);

  uint64_t v18 = a3[10];
  unint64_t v19 = (uint64_t *)(a1 + v18);
  unint64_t v20 = (uint64_t *)(a2 + v18);
  unint64_t v21 = *(void *)(a1 + v18 + 8);
  if (v21 >> 60 != 15)
  {
    unint64_t v22 = v20[1];
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v19;
      *unint64_t v19 = *v20;
      v19[1] = v22;
      sub_100097F34(v23, v21);
      return a1;
    }
    sub_1000EB0AC((uint64_t)v19);
  }
  *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
  return a1;
}

uint64_t sub_1001310AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001310C0);
}

uint64_t sub_1001310C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100131174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100131188);
}

void *sub_100131188(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100131234()
{
  sub_1000D68FC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *_s7remindd30REMCDGroceryOperationQueueItemC13OperationTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001313CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMCDGroceryOperationQueueItem.Priority()
{
  return &type metadata for REMCDGroceryOperationQueueItem.Priority;
}

unint64_t sub_100131408()
{
  unint64_t result = qword_10090BB88;
  if (!qword_10090BB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090BB88);
  }
  return result;
}

uint64_t sub_10013145C(uint64_t a1)
{
  uint64_t result = sub_1001327A0(&qword_10090BBB0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlaggedInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1001314B4(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v125 = a3;
  uint64_t v119 = a2;
  uint64_t v126 = a1;
  uint64_t v104 = a5;
  uint64_t v98 = type metadata accessor for REMRemindersListDataView.FlaggedModel();
  uint64_t v99 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v102 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v103 = (char *)&v87 - v8;
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v106 = *(void *)(v9 - 8);
  uint64_t v107 = v9;
  __chkstk_darwin(v9);
  uint64_t v101 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int v105 = (char *)&v87 - v12;
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v111 = *(void *)(v13 - 8);
  uint64_t v112 = v13;
  __chkstk_darwin(v13);
  uint64_t v110 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v15 - 8);
  uint64_t v97 = (uint64_t)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v120 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v108 = (uint64_t *)((char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  Swift::Int v116 = (char *)&v87 - v19;
  uint64_t v115 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v113 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v100 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v122 = (uint64_t)&v87 - v22;
  uint64_t v121 = _s10PredicatesOMa(0);
  __chkstk_darwin(v121);
  unint64_t v109 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  Swift::Int v117 = (char *)&v87 - v25;
  uint64_t v26 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  Swift::String v31 = (char *)&v87 - v30;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v33 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v35 = (char *)&v87 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  unint64_t v38 = (char *)&v87 - v37;
  __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v87 - v40;
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v87 - v43;
  uint64_t v123 = a4;
  REMRemindersListDataView.FlaggedInvocation.Parameters.configuration.getter();
  uint64_t v45 = v124;
  double v46 = sub_100132274(v126, v125);
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v44, Configuration);
    return;
  }
  uint64_t v90 = v38;
  uint64_t v91 = v35;
  int v92 = v46;
  uint64_t v89 = v28;
  id v93 = v47;
  uint64_t v124 = 0;
  double v96 = v31;
  char v48 = *(void (**)(char *, uint64_t))(v33 + 8);
  uint64_t v95 = v33 + 8;
  double v94 = v48;
  v48(v44, Configuration);
  REMRemindersListDataView.FlaggedInvocation.Parameters.configuration.getter();
  if (REMRemindersListDataView.FetchConfiguration.countCompleted.getter())
  {
    uint64_t v49 = (uint64_t)v117;
    swift_storeEnumTagMultiPayload();
    uint64_t v50 = (void *)sub_10038F1F0();
    sub_10012607C(v49, _s10PredicatesOMa);
    uint64_t v51 = (uint64_t)v96;
    uint64_t v52 = (uint64_t)v126;
    uint64_t v53 = v124;
    sub_10051EB6C((uint64_t)v126, (uint64_t)v50);
    uint64_t v124 = v53;
    if (v53)
    {

      v94(v41, Configuration);
      swift_bridgeObjectRelease();
LABEL_10:

      return;
    }
    uint64_t v55 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v51, 0, 1, v55);
  }
  else
  {
    uint64_t v54 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    uint64_t v51 = (uint64_t)v96;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v96, 1, 1, v54);
    uint64_t v52 = (uint64_t)v126;
  }
  uint64_t v56 = v94;
  v94(v41, Configuration);
  id v57 = [v118 fetchResultTokenToDiffAgainst];
  uint64_t v58 = v124;
  sub_10051F2BC(v57, v52, v122);
  uint64_t v124 = v58;
  uint64_t v59 = v120;
  if (v58)
  {
    sub_1000966BC(v51, &qword_100909C70);
    swift_bridgeObjectRelease();

    goto LABEL_10;
  }

  id v60 = v90;
  REMRemindersListDataView.FlaggedInvocation.Parameters.configuration.getter();
  uint64_t v61 = v116;
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter();
  v56(v60, Configuration);
  uint64_t v62 = v108;
  uint64_t v63 = v114;
  (*(void (**)(uint64_t *, char *, uint64_t))(v59 + 16))(v108, v61, v114);
  int v64 = (*(uint64_t (**)(uint64_t *, uint64_t))(v59 + 88))(v62, v63);
  uint64_t v88 = Configuration;
  if (v64 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v59 + 96))(v62, v63);
    uint64_t v65 = *v62;
    uint64_t v66 = (uint64_t)v92;
    swift_bridgeObjectRetain();
    uint64_t v126 = sub_1005280D0(v65, v66, v52, v125, 0);
    uint64_t v125 = _swiftEmptyArrayStorage;
    uint64_t v67 = v112;
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v74 = v111;
    goto LABEL_19;
  }
  uint64_t v67 = v112;
  double v68 = v125;
  if (v64 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v59 + 96))(v62, v63);
    uint64_t v69 = *v62;
    uint64_t v66 = (uint64_t)v92;
    swift_bridgeObjectRetain();
    uint64_t v126 = sub_100528BCC(v69, v122, v52, v68, 0);
    uint64_t v125 = _swiftEmptyArrayStorage;
LABEL_17:
    uint64_t v61 = v116;
    goto LABEL_18;
  }
  if (v64 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v59 + 96))(v62, v63);
    uint64_t v70 = *v62;
    uint64_t v71 = sub_100094134(&qword_100909C78);
    uint64_t v72 = v97;
    sub_1001326D0((uint64_t)v62 + *(int *)(v71 + 48), v97);
    uint64_t v66 = (uint64_t)v92;
    swift_bridgeObjectRetain();
    uint64_t v73 = v70;
    uint64_t v63 = v114;
    uint64_t v126 = sub_1005280D0(v73, v66, v52, v68, 0);
    uint64_t v125 = sub_10052929C(v72, v66, v52, v68, 0);
    sub_1000966BC(v72, &qword_100909C68);
    goto LABEL_17;
  }
  uint64_t v61 = v116;
  if (v64 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return;
  }
  uint64_t v125 = _swiftEmptyArrayStorage;
  uint64_t v126 = _swiftEmptyArrayStorage;
  uint64_t v74 = v111;
  uint64_t v66 = (uint64_t)v92;
LABEL_19:
  (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v63);
  uint64_t v75 = (uint64_t)v109;
  (*(void (**)(char *, void, uint64_t))(v74 + 104))(v109, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v67);
  swift_storeEnumTagMultiPayload();
  uint64_t v76 = v67;
  uint64_t v77 = (void *)sub_10038F1F0();
  sub_10012607C(v75, _s10PredicatesOMa);
  uint64_t v78 = v91;
  REMRemindersListDataView.FlaggedInvocation.Parameters.configuration.getter();
  uint64_t v79 = (uint64_t)v110;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  v94(v78, v88);
  uint64_t v80 = (uint64_t)v96;
  uint64_t v81 = v124;
  sub_10052B078(v52, (uint64_t)v77, (uint64_t)v96, v79, v66);
  if (v81)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v79, v76);
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v122, v115);
    sub_1000966BC(v80, &qword_100909C70);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v79, v76);

    sub_100132738(v80, (uint64_t)v89);
    id v82 = v105;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v101, v82, v107);
    uint64_t v126 = v93;
    uint64_t v83 = v103;
    REMRemindersListDataView.FlaggedModel.init(flatModel:flaggedSmartList:)();
    uint64_t v84 = v99;
    uint64_t v85 = v98;
    (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v102, v83, v98);
    uint64_t v86 = v113;
    (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v100, v122, v115);
    sub_1001327A0(&qword_10090BBB8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlaggedModel);
    sub_1001327A0((unint64_t *)&unk_10090BBC0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlaggedModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();

    (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v85);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v122, v115);
    sub_1000966BC((uint64_t)v96, &qword_100909C70);
  }
}

char *sub_100132274(void *a1, void *a2)
{
  id v31 = a2;
  uint64_t v32 = a1;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v37 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v33 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = _s10PredicatesOMa(0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = (void *)sub_10038F1F0();
  uint64_t v19 = (uint64_t)v17;
  uint64_t v20 = v32;
  sub_10012607C(v19, _s10PredicatesOMa);
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
  uint64_t v21 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v22 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v11, v21, v22);
  swift_storeEnumTagMultiPayload();
  sub_100520FD4((uint64_t)v8, (uint64_t)v11, (uint64_t)v14);
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  uint64_t v23 = v33;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
  uint64_t v24 = (void *)REMSmartListTypeFlagged;
  uint64_t v25 = v34;
  uint64_t v26 = sub_100521450(v20, (uint64_t)v18, (uint64_t)v14, (uint64_t)v5, v23, REMSmartListTypeFlagged);
  if (v25)
  {

    (*(void (**)(char *, uint64_t))(v37 + 8))(v23, Subtasks);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v36);
    sub_10012607C((uint64_t)v14, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  }
  else
  {
    uint64_t v8 = v26;
    uint64_t v28 = v27;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v23, Subtasks);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v36);
    sub_10052AE6C(v28, v24, (uint64_t)v20, v31);
    sub_10012607C((uint64_t)v14, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  }
  return v8;
}

uint64_t sub_1001326D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100909C68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100132738(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100909C70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001327A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001327E8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090BBD0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090BBD0);
  if (qword_100907830 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424D8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_ResetReminderCountsCache.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  if (qword_100906EF0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10090BBD0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDStoreControllerMigrator_ResetReminderCountsCache: migrating if needed", v7, 2u);
    swift_slowDealloc();
  }

  *(void *)&v13[0] = 0xD000000000000032;
  *((void *)&v13[0] + 1) = 0x800000010077C830;
  id v8 = [(objc_class *)metadata.super.super.isa __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_1000D6CBC((uint64_t)v13, (uint64_t)v14);
  if (!v14[3])
  {
    sub_1000F5B8C((uint64_t)v14);
LABEL_13:
    id v10 = [self daemonUserDefaults];
    sub_100132E60(v10, _.super.isa);

    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    v14[0] = 0xD000000000000032;
    v14[1] = 0x800000010077C830;
    [(objc_class *)metadata.super.super.isa __swift_setObject:isa forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    return;
  }
  sub_1000E6EE8();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_13;
  }
  id v9 = [v12 integerValue];

  if ((uint64_t)v9 <= 0) {
    goto LABEL_13;
  }
}

void sub_100132B94(void *a1, uint64_t a2)
{
  if (qword_100906EF0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10090BBD0);
  id v12 = a1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = a2;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_getMetatypeMetadata();
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v14 = sub_1000C51B8(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    id v10 = sub_1002ECF34();
    uint64_t v14 = sub_1000C51B8((uint64_t)v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: END {store: %{public}s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

id RDStoreControllerMigrator_ResetReminderCountsCache.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_ResetReminderCountsCache();
  return [super init];
}

id RDStoreControllerMigrator_ResetReminderCountsCache.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_ResetReminderCountsCache();
  return [super dealloc];
}

void sub_100132E60(void *a1, void *a2)
{
  uint64_t ObjectType = swift_getObjectType();
  if (qword_100906EF0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = sub_10008E2DC(v5, (uint64_t)qword_10090BBD0);
  id v7 = a2;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v34 = ObjectType;
    *(_DWORD *)uint64_t v10 = 136315394;
    swift_getMetatypeMetadata();
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v31 = v6;
    uint64_t v32 = a1;
    uint64_t v34 = sub_1000C51B8(v11, v12, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2082;
    id v13 = sub_1002ECF34();
    uint64_t v34 = sub_1000C51B8((uint64_t)v13, v14, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s: BEGIN {store: %{public}s}", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v15 = [a1 accountsListCategorizedCountsCache:v31, v32, v33];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    sub_100097F34(v17, v19);
    [a1 setAccountsListCategorizedCountsCache:0];
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDStoreControllerMigrator_ResetReminderCountsCache did reset accountsListCategorizedCountsCache", v22, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    id v23 = v7;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = ObjectType;
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_getMetatypeMetadata();
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v34 = sub_1000C51B8(v27, v28, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      id v29 = sub_1002ECF34();
      uint64_t v34 = sub_1000C51B8((uint64_t)v29, v30, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s: NO NEED TO RESET CACHE {store: %{public}s}", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  sub_100132B94(v7, ObjectType);
}

uint64_t type metadata accessor for RDStoreControllerMigrator_ResetReminderCountsCache()
{
  return self;
}

id sub_1001332C0()
{
  id v0 = [self sharedConfiguration];
  [v0 iCloudIsOffTimeIntervalSinceLastPrompt];
  id v2 = [objc_allocWithZone((Class)REMICloudIsOffDataViewConfigurationsInvocationResult) initWithTimeIntervalSinceLastPrompt:v1];

  return v2;
}

uint64_t sub_100133350(uint64_t a1)
{
  uint64_t result = sub_100133B10(&qword_10090BC30, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayNotificationInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1001333A8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v30 = a3;
  uint64_t v5 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v36 = (uint64_t)&v26 - v9;
  uint64_t v10 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v10 - 8);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v33 = (char *)&v26 - v18;
  uint64_t v35 = a1;
  sub_100133764(a1);
  if (!v3)
  {
    uint64_t v28 = v13;
    uint64_t v29 = v14;
    uint64_t v26 = v7;
    uint64_t v27 = v5;
    uint64_t v19 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
    uint64_t v20 = v33;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    id v21 = [v32 fetchResultTokenToDiffAgainst];
    uint64_t v22 = v36;
    sub_10051F2BC(v21, v35, v36);

    uint64_t v23 = v28;
    uint64_t v24 = v29;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v16, v20, v28);
    uint64_t v25 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v26, v22, v27);
    uint64_t v35 = sub_100133B10(&qword_10090BC38, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
    sub_100133B10((unint64_t *)&unk_10090BC40, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v22, v27);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v23);
  }
}

uint64_t sub_100133764(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v23 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _s10PredicatesOMa(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = (void *)sub_10038F1F0();
  sub_10012607C((uint64_t)v13, _s10PredicatesOMa);
  uint64_t v15 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v16 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v10, v15, v16);
  uint64_t v17 = v23;
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  uint64_t v26 = v4;
  v18(v7, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v4);
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v3, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), Subtasks);
  uint64_t v19 = v25;
  uint64_t v20 = sub_100522260(v24, (uint64_t)v14, (uint64_t)v10, 0, 0, (uint64_t)v7, v3, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (!v19)
  {
    uint64_t v4 = (uint64_t)v20;
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, Subtasks);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v26);
  sub_10012607C((uint64_t)v10, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  return v4;
}

uint64_t sub_100133B10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100133B58()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090BC50);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090BC50);
  if (qword_100907820 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424A8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100133C20()
{
  uint64_t v1 = v0;
  if (qword_100906EF8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10090BC50);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: START ALL", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = *(void **)(v1 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_10013B98C;
  *(void *)(v7 + 24) = v1;
  void v10[4] = sub_10008F6F4;
  v10[5] = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  void v10[2] = sub_1003B3260;
  v10[3] = &unk_1008BB138;
  uint64_t v8 = _Block_copy(v10);
  swift_retain();
  swift_retain();
  swift_release();
  [v6 performBlockAndWait:v8];
  _Block_release(v8);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    sub_10013814C(0x1000000000000044, 0x80000001007CB870);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_100133E58(uint64_t a1)
{
  if (qword_100906EF8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10090BC50);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: START .userInitiated", v5, 2u);
    swift_slowDealloc();
  }

  sub_100134600(1);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: FINISH .userInitiated", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: START .sharedToMe", v11, 2u);
    swift_slowDealloc();
  }

  sub_100134600(0);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: FINISH .sharedToMe", v14, 2u);
    swift_slowDealloc();
  }

  uint64_t v15 = *(void **)(a1 + 16);
  if (![v15 hasChanges]) {
    goto LABEL_14;
  }
  uint64_t v16 = (uint64_t *)(a1 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher_metrics);
  swift_beginAccess();
  sub_1001342F8(v15);
  swift_endAccess();
  v27[0] = 0;
  if ([v15 save:v27])
  {
    id v17 = v27[0];
LABEL_14:
    uint64_t v18 = (void *)(a1 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher_metrics);
    swift_beginAccess();
    *uint64_t v18 = 0;
    return swift_errorRelease();
  }
  id v19 = v27[0];
  uint64_t v20 = _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRetain();
  swift_errorRetain();
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    v27[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136446210;
    swift_getErrorValue();
    uint64_t v24 = Error.rem_errorDescription.getter();
    sub_1000C51B8(v24, v25, (uint64_t *)v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: Error saving at end of consumeJournalUpdates {error: %{public}s}", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  v16[6] = 0;
  void v16[7] = 0;
  v16[8] = 0;
  *uint64_t v16 = v20;
  return swift_errorRelease();
}

uint64_t sub_1001342F8(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 insertedObjects];
  sub_1000963CC(0, (unint64_t *)&qword_100909B00);
  sub_1000ED098((unint64_t *)&qword_1009163D0, (unint64_t *)&qword_100909B00);
  uint64_t v5 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v6 = [a1 updatedObjects];
  unint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10065D2EC(v7, v5);
  uint64_t v9 = v8;
  id v10 = [a1 deletedObjects];
  unint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10065D2EC(v11, v9);
  type metadata accessor for REMCKSharedEntitySyncActivity();
  sub_100094134(&qword_10090C060);
  sub_1000967F4((unint64_t *)&unk_10090C068, &qword_10090C060);
  unint64_t v12 = Sequence.elements<A>(ofExactType:)();
  if (v12 >> 62) {
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v2[6] = v13;
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  unint64_t v14 = Sequence.elements<A>(ofExactType:)();
  swift_bridgeObjectRelease();
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v2[7] = v15;
  id v16 = [a1 insertedObjects];
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  unint64_t v17 = Sequence.elements<A>(ofExactType:)();
  swift_bridgeObjectRelease();
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t result = swift_bridgeObjectRelease();
  v2[8] = v18;
  return result;
}

uint64_t sub_100134600(char a1)
{
  char v2 = a1;
  if (a1) {
    uint64_t v3 = &off_1008B44B8;
  }
  else {
    uint64_t v3 = &off_1008B4490;
  }
  uint64_t v4 = sub_100134A04((uint64_t)v3, 100);
  swift_bridgeObjectRelease();
  v17[0] = v4;
  sub_100094134(&qword_10090C040);
  sub_1000967F4(&qword_10090C048, &qword_10090C040);
  uint64_t v5 = BidirectionalCollection<>.slices(by:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    unint64_t v14 = *(void **)(v1 + 16);
    uint64_t v7 = v5 + 56;
    char v15 = v2;
    do
    {
      swift_unknownObjectRetain();
      if (v2)
      {
        uint64_t v8 = type metadata accessor for RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner();
        uint64_t v9 = swift_allocObject();
        *(unsigned char *)(v9 + 24) = 1;
        id v10 = &off_1008CCE48;
      }
      else
      {
        uint64_t v8 = type metadata accessor for RDNewlySharedToMeTagAutoConvertRunner();
        uint64_t v9 = swift_allocObject();
        id v10 = &off_1008C98A8;
      }
      *(void *)(v9 + 16) = v14;
      v17[3] = v8;
      v17[4] = v10;
      v17[0] = v9;
      sub_1000C0DE0(v17, v8);
      unint64_t v11 = (void (__cdecl *)())v10[1];
      id v12 = v14;
      sub_100094134(&qword_10090C050);
      sub_1000967F4(&qword_10090C058, &qword_10090C050);
      v11();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);
      swift_unknownObjectRelease();
      v7 += 32;
      --v6;
      char v2 = v15;
    }
    while (v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100134A04(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_1001DE560(0, v3, 0);
    uint64_t v5 = (char *)(a1 + 32);
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    do
    {
      uint64_t v8 = *v5++;
      uint64_t v7 = v8;
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v6 >= v9 >> 1) {
        sub_1001DE560(v9 > 1, v6 + 1, 1);
      }
      __int16 v10 = word_10077CCEE[v7];
      _swiftEmptyArrayStorage[2] = v6 + 1;
      *((_WORD *)&_swiftEmptyArrayStorage[4] + v6++) = v10;
      --v3;
    }
    while (v3);
  }
  uint64_t KeyPath = swift_getKeyPath();
  id v12 = (void *)sub_1003A02E0(KeyPath, (uint64_t)_swiftEmptyArrayStorage);
  swift_release();
  type metadata accessor for REMCKSharedEntitySyncActivity();
  id v13 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v14 = [(id)swift_getObjCClassFromMetadata() entity];
  [v13 setEntity:v14];

  [v13 setAffectedStores:0];
  [v13 setPredicate:v12];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_10077A530;
  id v16 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v16 initWithKey:v17 ascending:1];

  *(void *)(v15 + 32) = v18;
  specialized Array._endMutation()();
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setSortDescriptors:isa];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100776E80;
  strcpy((char *)(v20 + 32), "ckIdentifier");
  *(unsigned char *)(v20 + 45) = 0;
  *(_WORD *)(v20 + 46) = -5120;
  *(void *)(v20 + 88) = &type metadata for String;
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = 0xD000000000000014;
  *(void *)(v20 + 72) = 0x800000010077CB40;
  Class v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setPropertiesToFetch:v21];

  [v13 setFetchBatchSize:a2];
  uint64_t v22 = NSManagedObjectContext.fetch<A>(_:)();

  return v22;
}

id sub_100134D54@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 activityTypeRawValue];
  *a2 = (_WORD)result;
  return result;
}

id sub_100134D88(__int16 *a1, id *a2)
{
  return [*a2 setActivityTypeRawValue:*a1];
}

uint64_t sub_100134D9C()
{
  sub_10013BA0C(v0 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher_metrics, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics);

  return swift_deallocClassInstance();
}

uint64_t sub_100134E1C()
{
  uint64_t ObjectType = swift_getObjectType();
  id v2 = sub_100134FE8();
  if (!v2) {
    return 0;
  }
  int64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = _swiftEmptyArrayStorage;
  id v5 = [v3 length];
  unint64_t v6 = (void *)swift_allocObject();
  v6[2] = v3;
  v6[3] = v0;
  v6[4] = v4;
  v6[5] = ObjectType;
  void v13[4] = sub_10013B8C0;
  v13[5] = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  _OWORD v13[2] = sub_100135BA8;
  v13[3] = &unk_1008BB0E8;
  uint64_t v7 = _Block_copy(v13);
  id v8 = v3;
  unint64_t v9 = v0;
  swift_retain();
  swift_release();
  [v8 rem_enumerateHashtagInRange:0 options:v5 usingBlock:v7];
  _Block_release(v7);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v11 = sub_100135C38(v10, *(void **)&v9[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder]);

  swift_bridgeObjectRelease();
  return v11;
}

id sub_100134FE8()
{
  uint64_t v1 = *(void **)(v0
                + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder);
  id v2 = [v1 account];
  if (!v2) {
    return 0;
  }
  int64_t v3 = v2;
  id v4 = [v2 remObjectID];

  if (!v4) {
    return 0;
  }
  id v5 = [v1 remObjectID];
  if (!v5)
  {

    return 0;
  }
  unint64_t v6 = v5;
  char v7 = *(unsigned char *)(v0 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_field);
  id v8 = objc_allocWithZone((Class)REMReplicaIDSource);
  id v9 = v4;
  id v10 = v6;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v8 initWithAccountID:v9 objectID:v10 property:v11];

  if ((v7 & 1) == 0)
  {
    id v13 = [v1 titleDocument];
    if (v13) {
      goto LABEL_6;
    }
LABEL_10:
    id v21 = v10;
    id v22 = v12;
    v19.super.Class isa = 0;
    goto LABEL_11;
  }
  id v13 = [v1 notesDocument];
  if (!v13) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  id v17 = v10;
  id v18 = v12;
  v19.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100097F20(v14, v16);
LABEL_11:
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v20 = [self documentFromSerializedData:v19.super.isa replicaIDSource:v12 forKey:v23 ofObjectID:v10];

  if (v20)
  {
    id v24 = v20;
    id v20 = [v24 attributedString];
  }
  return v20;
}

void sub_100135294(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v64 = a7;
  uint64_t v12 = sub_100094134(&qword_10090C028);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v65 = (uint64_t)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v20 = (char *)&v60 - v19;
  uint64_t v21 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v21 - 8);
  NSString v23 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v62 = v20;
    uint64_t v63 = v16;
    id v66 = a1;
    id v24 = [a5 string];
    unint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    unint64_t v28 = sub_10013B3D8(v25, v27, a2, a3);
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    if (v34)
    {
      uint64_t v35 = *(void *)(a6
                      + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_onlySpecificCanonicalName
                      + 8);
      uint64_t v36 = v28;
      if (v35)
      {
        uint64_t v61 = *(void *)(a6
                        + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_onlySpecificCanonicalName);
        v67[0] = v28;
        v67[1] = v30;
        v67[2] = v32;
        v67[3] = v34;
        static Locale.current.getter();
        uint64_t v37 = type metadata accessor for Locale();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v23, 0, 1, v37);
        sub_10013B8E4();
        uint64_t v38 = StringProtocol.foldedStringForWriting(locale:)();
        uint64_t v40 = v39;
        sub_1000966BC((uint64_t)v23, (uint64_t *)&unk_10090FDF0);
        if (v38 == v61 && v35 == v40)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v42 & 1) == 0)
          {

            swift_bridgeObjectRelease();
            return;
          }
        }
      }
      id v43 = v66;
      sub_1001358CC(v43, v36, v30, v32, v34, (uint64_t)v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v14, 1, v15) == 1)
      {
        sub_1000966BC((uint64_t)v14, &qword_10090C028);
        if (qword_100906EF8 != -1) {
          swift_once();
        }
        uint64_t v44 = type metadata accessor for Logger();
        sub_10008E2DC(v44, (uint64_t)qword_10090BC50);
        id v45 = v43;
        double v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v47))
        {
          char v48 = (uint8_t *)swift_slowAlloc();
          v67[0] = swift_slowAlloc();
          *(_DWORD *)char v48 = 136446210;
          id v49 = [v45 objectIdentifier];
          uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v52 = v51;

          v67[4] = sub_1000C51B8(v50, v52, v67);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "#️⃣ RDSharedInlineTagAutoConvertHandler.Runner: REMTTHashtag objectIdentifier[%{public}s] does not represent a valid UUID", v48, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      else
      {
        uint64_t v53 = (unint64_t *)(v64 + 16);
        uint64_t v54 = (uint64_t)v62;
        sub_10013B710((uint64_t)v14, (uint64_t)v62, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
        uint64_t v55 = v65;
        sub_10013B7DC(v54, v65);
        swift_beginAccess();
        unint64_t v56 = *v53;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t *v53 = v56;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v56 = sub_10030A2D8(0, *(void *)(v56 + 16) + 1, 1, v56);
          unint64_t *v53 = v56;
        }
        unint64_t v59 = *(void *)(v56 + 16);
        unint64_t v58 = *(void *)(v56 + 24);
        if (v59 >= v58 >> 1)
        {
          unint64_t v56 = sub_10030A2D8(v58 > 1, v59 + 1, 1, v56);
          unint64_t *v53 = v56;
        }
        *(void *)(v56 + 16) = v59 + 1;
        sub_10013B710(v55, v56+ ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(void *)(v63 + 72) * v59, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
        swift_endAccess();

        sub_10013BA0C((uint64_t)v62, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
      }
    }
    else
    {
      id v41 = v66;
    }
  }
}

uint64_t sub_1001358CC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v30 = a2;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  uint64_t v14 = *(void *)(v33 - 8);
  *(void *)&double v15 = __chkstk_darwin(v33).n128_u64[0];
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = [a1 objectIdentifier:v15, v30, v31, v32];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    swift_bridgeObjectRelease();

    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
    uint64_t v19 = 1;
    uint64_t v20 = v35;
    uint64_t v21 = v33;
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v22(v13, v9, v10);
    uint64_t v23 = v33;
    v22(&v17[*(int *)(v33 + 24)], v13, v10);
    *(void *)uint64_t v17 = a1;
    id v24 = a1;
    uint64_t v25 = static String._fromSubstring(_:)();
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();

    *((void *)v17 + 1) = v25;
    *((void *)v17 + 2) = v27;
    uint64_t v28 = v35;
    sub_10013B710((uint64_t)v17, v35, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    uint64_t v19 = 0;
    uint64_t v20 = v28;
    uint64_t v21 = v23;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v20, v19, 1, v21);
}

void sub_100135BA8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  id v10 = a2;
  v9(a2, a3, a4, a5);
  swift_release();
}

uint64_t sub_100135C38(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  unint64_t v121 = *(void *)(v7 - 8);
  uint64_t v122 = v7;
  __chkstk_darwin(v7);
  id v9 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v11 = __chkstk_darwin(v10).n128_u64[0];
  uint64_t v120 = ((char *)&v109 - v12);
  id v115 = a2;
  id v13 = [a2 account];
  if (!v13) {
    return 0xD000000000000010;
  }
  uint64_t v14 = v13;
  id v15 = [v13 remObjectID];

  id v123 = v15;
  if (!v15) {
    return 0xD000000000000010;
  }
  uint64_t v119 = [v115 remObjectID];
  if (!v119)
  {

    return 0x7265646E696D6572;
  }
  uint64_t v16 = v114;
  Swift::Int isUniquelyReferenced_nonNull_native = sub_100137E08();
  uint64_t v18 = sub_1001374B8();
  swift_bridgeObjectRelease();
  uint64_t v113 = 0;
  uint64_t v110 = (void **)v6;
  uint64_t v111 = v4;
  Swift::Int v112 = v3;
  uint64_t v21 = *(void *)(v18 + 64);
  uint64_t v116 = v18 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(v18 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  uint64_t v24 = v23 & v21;
  id v117 = (id)((unint64_t)(v22 + 63) >> 6);
  swift_bridgeObjectRetain();
  uint64_t v25 = 0;
  Swift::Int v26 = (Swift::Int)_swiftEmptyDictionarySingleton;
  for (i = v18; ; uint64_t v18 = i)
  {
    if (v24)
    {
      unint64_t v30 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v31 = v30 | (v25 << 6);
      goto LABEL_31;
    }
    uint64_t v32 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    if (v32 >= (uint64_t)v117) {
      goto LABEL_37;
    }
    unint64_t v33 = *(void *)(v116 + 8 * v32);
    ++v25;
    if (!v33)
    {
      uint64_t v25 = v32 + 1;
      if (v32 + 1 >= (uint64_t)v117) {
        goto LABEL_37;
      }
      unint64_t v33 = *(void *)(v116 + 8 * v25);
      if (!v33)
      {
        uint64_t v25 = v32 + 2;
        if (v32 + 2 >= (uint64_t)v117) {
          goto LABEL_37;
        }
        unint64_t v33 = *(void *)(v116 + 8 * v25);
        if (!v33)
        {
          uint64_t v25 = v32 + 3;
          if (v32 + 3 >= (uint64_t)v117) {
            goto LABEL_37;
          }
          unint64_t v33 = *(void *)(v116 + 8 * v25);
          if (!v33) {
            break;
          }
        }
      }
    }
LABEL_30:
    uint64_t v24 = (v33 - 1) & v33;
    unint64_t v31 = __clz(__rbit64(v33)) + (v25 << 6);
LABEL_31:
    uint64_t v35 = (uint64_t)v120;
    sub_10013B7DC(*(void *)(v18 + 56) + *(void *)(v121 + 72) * v31, (uint64_t)v120);
    sub_10013B710(v35, (uint64_t)v9, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    id v36 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v37 = objc_allocWithZone((Class)REMObjectID);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v40 = [v37 initWithUUID:isa entityName:v39];

    id v41 = objc_allocWithZone((Class)REMHashtag);
    char v42 = v40;
    id v15 = v123;
    uint64_t v43 = v119;
    swift_bridgeObjectRetain();
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Swift::Int isUniquelyReferenced_nonNull_native = [v41 initWithObjectID:v42 accountID:v15 reminderID:v43 type:1 name:v44];

    if ((v26 & 0xC000000000000001) != 0)
    {
      if (v26 < 0) {
        uint64_t v16 = (void **)v26;
      }
      else {
        uint64_t v16 = (void **)(v26 & 0xFFFFFFFFFFFFFF8);
      }
      id v45 = v42;
      id v46 = (id)isUniquelyReferenced_nonNull_native;
      uint64_t v47 = __CocoaDictionary.count.getter();
      if (__OFADD__(v47, 1))
      {
        __break(1u);
LABEL_82:
        uint64_t v88 = (void *)sub_1003CA790(v24);
        for (unsigned __int8 j = v91 & 1; ; unsigned __int8 j = 1)
        {
          id v125 = v88;
          uint64_t v126 = (char *)v89;
          unsigned __int8 v127 = j;
          if ((v43 & 0x8000000000000000) == 0) {
            goto LABEL_86;
          }
          __break(1u);
LABEL_85:
          uint64_t v24 = v122;
          uint64_t v16 = (void **)sub_1003C9E34(v15, v9, v26, v122);
          Swift::Int isUniquelyReferenced_nonNull_native = v92;
          uint64_t v25 = v93;
          sub_1000E4EA4((uint64_t)v15, (uint64_t)v9, v26);
          id v125 = v16;
          uint64_t v126 = (char *)isUniquelyReferenced_nonNull_native;
          unsigned __int8 v127 = v25 & 1;
          id v41 = v42;
          if (!--v43) {
            break;
          }
LABEL_86:
          while (v43)
          {
            char v42 = v41;
            id v15 = v125;
            id v9 = v126;
            Swift::Int v26 = v127;
            sub_1003CA498((uint64_t)v125, (int)v126, v127, v24);
            uint64_t v95 = v94;
            id v96 = [v94 remObjectID];
            if (v96)
            {
              uint64_t v97 = v96;
              id v98 = [v96 description];

              uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v100 = v99;
            }
            else
            {

              unint64_t v100 = 0xE300000000000000;
              uint64_t v25 = 7104878;
            }
            uint64_t v101 = v128;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1001DE058(0, v101[2] + 1, 1);
              uint64_t v101 = v128;
            }
            unint64_t v103 = v101[2];
            unint64_t v102 = v101[3];
            if (v103 >= v102 >> 1)
            {
              sub_1001DE058(v102 > 1, v103 + 1, 1);
              uint64_t v101 = v128;
            }
            v101[2] = v103 + 1;
            uint64_t v104 = &v101[2 * v103];
            v104[4] = v25;
            v104[5] = v100;
            if (!v121) {
              goto LABEL_85;
            }
            uint64_t v24 = v122;
            if ((v26 & 1) == 0)
            {
              uint64_t result = swift_release();
              __break(1u);
              return result;
            }
            id v41 = v42;
            if (__CocoaSet.Index.handleBitPattern.getter()) {
              Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            }
            else {
              Swift::Int isUniquelyReferenced_nonNull_native = 1;
            }
            sub_100094134(&qword_10090C020);
            uint64_t v16 = (void **)Set.Index._asCocoa.modify();
            __CocoaSet.formIndex(after:isUnique:)();
            ((void (*)(void *, void))v16)(v124, 0);
            if (!--v43) {
              goto LABEL_100;
            }
          }
LABEL_106:
          __break(1u);
LABEL_107:
          swift_once();
LABEL_66:
          uint64_t v76 = sub_10008E2DC(isUniquelyReferenced_nonNull_native, (uint64_t)qword_10090BC50);
          (*(void (**)(void **, uint64_t, Swift::Int))(v24 + 16))(v16, v76, isUniquelyReferenced_nonNull_native);
          swift_retain_n();
          id v77 = v115;
          id v41 = Logger.logObject.getter();
          LODWORD(i) = static os_log_type_t.fault.getter();
          if (!os_log_type_enabled(v41, (os_log_type_t)i))
          {

            swift_release_n();
            (*(void (**)(void **, Swift::Int))(v24 + 8))(v16, isUniquelyReferenced_nonNull_native);
            goto LABEL_102;
          }
          uint64_t v78 = swift_slowAlloc();
          uint64_t v79 = swift_slowAlloc();
          v129[0] = v79;
          uint64_t v119 = v78;
          LODWORD(v78->isa) = 136446722;
          id v80 = [v77 remObjectID];
          uint64_t v116 = v79;
          if (v80)
          {
            uint64_t v81 = v80;
            id v82 = [v80 description];

            uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v85 = v84;
          }
          else
          {
            unint64_t v85 = 0xE300000000000000;
            uint64_t v83 = 7104878;
          }
          uint64_t v24 = v122;
          char v42 = v119;
          uint64_t v25 = (uint64_t)&v119->isa + 4;
          v124[0] = sub_1000C51B8(v83, v85, v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          WORD2(v42[1].isa) = 2048;
          if (v121) {
            uint64_t v86 = __CocoaSet.count.getter();
          }
          else {
            uint64_t v86 = *(void *)(v24 + 16);
          }
          swift_release();
          uint64_t v87 = v119;
          v124[0] = v86;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          HIWORD(v87[2].isa) = 2082;
          if (v121) {
            uint64_t v43 = __CocoaSet.count.getter();
          }
          else {
            uint64_t v43 = *(void *)(v24 + 16);
          }
          Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)_swiftEmptyArrayStorage;
          if (!v43) {
            goto LABEL_101;
          }
          uint64_t v128 = _swiftEmptyArrayStorage;
          uint64_t v16 = &v128;
          sub_1001DE058(0, v43 & ~(v43 >> 63), 0);
          if (!v121) {
            goto LABEL_82;
          }
          uint64_t v88 = (void *)__CocoaSet.startIndex.getter();
        }
LABEL_100:
        sub_1000E4EA4((uint64_t)v125, (uint64_t)v126, v127);
        Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)v128;
LABEL_101:
        int v105 = (uint8_t *)v119;
        v124[0] = isUniquelyReferenced_nonNull_native;
        sub_100094134((uint64_t *)&unk_10090AFB0);
        sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
        uint64_t v106 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v108 = v107;
        swift_bridgeObjectRelease();
        v124[0] = sub_1000C51B8(v106, v108, v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)i, "#️⃣ RDSharedInlineTagAutoConvertHandler.Runner: Reminder[%{public}s] is missing %ld HashtagLabels[%{public}s]", v105, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(void **, Swift::Int))(v111 + 8))(v110, v112);
        goto LABEL_102;
      }
      Swift::Int v26 = sub_1001A7C64((uint64_t)v16, v47 + 1);
    }
    else
    {
      uint64_t v27 = v42;
      id v28 = (id)isUniquelyReferenced_nonNull_native;
    }
    char v29 = swift_isUniquelyReferenced_nonNull_native();
    v124[0] = v26;
    uint64_t v16 = (void **)v124;
    sub_1002C5168(isUniquelyReferenced_nonNull_native, v42, v29);
    Swift::Int v26 = v124[0];

    swift_bridgeObjectRelease();
    sub_10013BA0C((uint64_t)v9, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
  }
  uint64_t v34 = v32 + 4;
  if (v34 < (uint64_t)v117)
  {
    unint64_t v33 = *(void *)(v116 + 8 * v34);
    if (!v33)
    {
      while (1)
      {
        uint64_t v25 = v34 + 1;
        if (__OFADD__(v34, 1)) {
          break;
        }
        if (v25 >= (uint64_t)v117) {
          goto LABEL_37;
        }
        unint64_t v33 = *(void *)(v116 + 8 * v25);
        ++v34;
        if (v33) {
          goto LABEL_30;
        }
      }
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    uint64_t v25 = v34;
    goto LABEL_30;
  }
LABEL_37:
  swift_release();
  type metadata accessor for REMHashtagCDIngestor();
  uint64_t v48 = swift_allocObject();
  id v49 = v123;
  uint64_t v50 = v119;
  *(void *)(v48 + 16) = v123;
  *(void *)(v48 + 24) = v50;
  id v51 = v49;
  unint64_t v52 = v50;
  uint64_t v53 = swift_bridgeObjectRetain();
  uint64_t v19 = v113;
  sub_100136B2C(v53, v48);
  if (v19)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v54 = sub_10020A78C(v18);
    id v123 = (id)v26;
    unint64_t v55 = (unint64_t)v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v56 = sub_10020A778((unint64_t)v123);
    uint64_t v120 = v52;
    unint64_t v57 = (unint64_t)v56;
    swift_bridgeObjectRelease();
    sub_100136DCC(v55, v57);
    swift_release();
    Swift::Int v26 = (Swift::Int)v123;
    swift_release();
    uint64_t v25 = (uint64_t)v120;
    swift_release();
    Swift::Int v58 = sub_100137E08();
    id v117 = v51;
    if ((v58 & 0xC000000000000001) != 0)
    {
      unint64_t v59 = &_swiftEmptySetSingleton;
      v124[0] = &_swiftEmptySetSingleton;
      __CocoaSet.makeIterator()();
      uint64_t v60 = __CocoaSet.Iterator.next()();
      if (v60)
      {
        uint64_t v61 = v60;
        sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
        Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)&type metadata for Swift.AnyObject + 8;
        uint64_t v24 = (uint64_t)&selRef_willSave;
        uint64_t v25 = -1;
        Swift::Int v26 = 1;
        do
        {
          v129[0] = v61;
          swift_dynamicCast();
          id v62 = [v125 hashtagLabel];

          id v15 = v125;
          if (v62)
          {
          }
          else
          {
            id v9 = (char *)v124[0];
            unint64_t v63 = *(void *)(v124[0] + 16);
            if (*(void *)(v124[0] + 24) <= v63)
            {
              sub_10032304C(v63 + 1);
              id v9 = (char *)v124[0];
            }
            uint64_t v16 = (void **)v15;
            Swift::Int v64 = NSObject._rawHashValue(seed:)(*((void *)v9 + 5));
            uint64_t v65 = v9 + 56;
            uint64_t v66 = -1 << v9[32];
            unint64_t v67 = v64 & ~v66;
            unint64_t v68 = v67 >> 6;
            if (((-1 << v67) & ~*(void *)&v9[8 * (v67 >> 6) + 56]) != 0)
            {
              unint64_t v69 = __clz(__rbit64((-1 << v67) & ~*(void *)&v9[8 * (v67 >> 6) + 56])) | v67 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              char v70 = 0;
              unint64_t v71 = (unint64_t)(63 - v66) >> 6;
              do
              {
                if (++v68 == v71 && (v70 & 1) != 0) {
                  goto LABEL_104;
                }
                BOOL v72 = v68 == v71;
                if (v68 == v71) {
                  unint64_t v68 = 0;
                }
                v70 |= v72;
                uint64_t v73 = *(void *)&v65[8 * v68];
              }
              while (v73 == -1);
              unint64_t v69 = __clz(__rbit64(~v73)) + (v68 << 6);
            }
            *(void *)&v65[(v69 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v69;
            *(void *)(*((void *)v9 + 6) + 8 * v69) = v15;
            ++*((void *)v9 + 2);
          }
          uint64_t v61 = __CocoaSet.Iterator.next()();
        }
        while (v61);
        unint64_t v59 = (void *)v124[0];
        uint64_t v25 = (uint64_t)v120;
      }
      swift_release();
      Swift::Int isUniquelyReferenced_nonNull_native = v112;
      uint64_t v24 = v111;
      uint64_t v16 = v110;
      Swift::Int v26 = (Swift::Int)v123;
      uint64_t v74 = (uint64_t)v59;
    }
    else
    {
      uint64_t v74 = sub_100139F94(v58, (uint64_t (*)(char *, unint64_t, uint64_t))sub_10013A2A8);
      Swift::Int isUniquelyReferenced_nonNull_native = v112;
      uint64_t v24 = v111;
      uint64_t v16 = v110;
    }
    unint64_t v121 = v74 & 0xC000000000000001;
    uint64_t v122 = v74;
    if ((v74 & 0xC000000000000001) != 0) {
      uint64_t v75 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v75 = *(void *)(v74 + 16);
    }
    if (v75)
    {
      if (qword_100906EF8 != -1) {
        goto LABEL_107;
      }
      goto LABEL_66;
    }
    swift_release();

LABEL_102:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v19;
}

uint64_t sub_100136B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  v18[0] = &off_1008B4440;
  sub_100094134(&qword_10090C008);
  sub_1000967F4(&qword_10090C010, &qword_10090C008);
  uint64_t v7 = Sequence.mapToSet<A>(_:)();
  if ((a1 & 0xC000000000000001) == 0)
  {
    uint64_t v10 = sub_10013AFBC(a1, v7);
    goto LABEL_8;
  }
  if (a1 < 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  Swift::Int v9 = sub_10013B170(v8, v7);
  if (!v3)
  {
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(v4
                    + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_persistentStoreLookup);
    uint64_t v12 = *(void **)(v4
                   + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_storeObjectContext);
    v18[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18[1] = v13;
    type metadata accessor for CDIngestionCoordinator();
    void v18[3] = 0;
    v19[0] = 0;
    v18[2] = 0;
    *(void *)((char *)v19 + 6) = 0;
    uint64_t v14 = swift_allocObject();
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_100384798(v10, v11, v12, (uint64_t)v18, 0, 1, v14);
    unint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v16 = sub_10020A778(v15);
    swift_bridgeObjectRelease();
    sub_10069B724((unint64_t)v16, a2);
    swift_release();
    sub_1003838FC();
    return swift_release();
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

unsigned char *sub_100136D38@<X0>(unsigned char *result@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x44497463656A626FLL;
  switch(*result)
  {
    case 1:
      unint64_t v2 = 0xEC00000065746144;
      uint64_t v3 = 0x6E6F697461657263;
      goto LABEL_3;
    case 2:
      *a2 = 1701667182;
      a2[1] = 0xE400000000000000;
      break;
    case 3:
      *a2 = 1701869940;
      a2[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a2 = v3;
      a2[1] = v2;
      break;
  }
  return result;
}

uint64_t sub_100136DCC(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v8 - 8);
  id v62 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 62) {
    goto LABEL_70;
  }
  uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (!v10)
  {
LABEL_13:
    a2 = (unint64_t)sub_100697B9C((uint64_t)v11, 0, 1, 0, 0);
    uint64_t result = swift_bridgeObjectRelease();
    if (v4) {
      return result;
    }
    unint64_t v68 = (void *)a1;
    swift_getKeyPath();
    swift_getKeyPath();
    sub_100094134(&qword_10090BFD0);
    sub_1000967F4((unint64_t *)&qword_10090BFD8, &qword_10090BFD0);
    uint64_t v66 = Sequence.compactIndexBy<A, B>(key:value:)();
    swift_release();
    swift_release();
    char v70 = (char **)_swiftEmptyDictionarySingleton;
    if (!(a2 >> 62))
    {
      uint64_t v16 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
      uint64_t v5 = (char **)_swiftEmptyDictionarySingleton;
      if (v16)
      {
        unint64_t v65 = a2 & 0xC000000000000001;
        a1 = 4;
        long long v61 = xmmword_10077A530;
        uint64_t v63 = v16;
        unint64_t v64 = a2;
        do
        {
          unint64_t v18 = a1 - 4;
          if (v65)
          {
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            unint64_t v20 = a1 - 3;
            if (__OFADD__(v18, 1)) {
              goto LABEL_65;
            }
          }
          else
          {
            id v19 = *(id *)(a2 + 8 * a1);
            unint64_t v20 = a1 - 3;
            if (__OFADD__(v18, 1)) {
              goto LABEL_65;
            }
          }
          unint64_t v67 = (unint64_t)v19;
          id v21 = [v19 name:v61];
          if (v21)
          {
            uint64_t v22 = v21;
            uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v25 = v24;

            unint64_t v68 = (void *)v23;
            uint64_t v69 = v25;
            uint64_t v26 = (uint64_t)v62;
            static Locale.current.getter();
            uint64_t v27 = type metadata accessor for Locale();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 0, 1, v27);
            sub_1000E4FD8();
            a2 = StringProtocol.foldedStringForWriting(locale:)();
            uint64_t v29 = v28;
            sub_1000966BC(v26, (uint64_t *)&unk_10090FDF0);
            swift_bridgeObjectRelease();
          }
          else
          {
            a2 = 0;
            uint64_t v29 = 0xE000000000000000;
          }
          unint64_t v31 = sub_1001806F8(a2, v29);
          uint64_t v32 = v5[2];
          BOOL v33 = (v30 & 1) == 0;
          uint64_t v34 = (uint64_t)&v32[v33];
          if (__OFADD__(v32, v33)) {
            goto LABEL_66;
          }
          char v35 = v30;
          if ((uint64_t)v5[3] < v34)
          {
            sub_100310F38(v34, 1);
            uint64_t v5 = v70;
            unint64_t v36 = sub_1001806F8(a2, v29);
            if ((v35 & 1) != (v37 & 1))
            {
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            unint64_t v31 = v36;
          }
          if (v35)
          {
            swift_bridgeObjectRelease();
            uint64_t v17 = &v5[7][8 * v31];
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            a2 = v64;
            if (*(void *)((*(void *)v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v17 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
            sub_100094134((uint64_t *)&unk_10090AF20);
            uint64_t v38 = swift_allocObject();
            *(_OWORD *)(v38 + 16) = v61;
            *(void *)(v38 + 32) = v67;
            unint64_t v68 = (void *)v38;
            specialized Array._endMutation()();
            NSString v39 = v68;
            v5[(v31 >> 6) + 8] = (char *)((unint64_t)v5[(v31 >> 6) + 8] | (1 << v31));
            id v40 = (unint64_t *)&v5[6][16 * v31];
            *id v40 = a2;
            v40[1] = v29;
            *(void *)&v5[7][8 * v31] = v39;
            id v41 = v5[2];
            BOOL v42 = __OFADD__(v41, 1);
            uint64_t v43 = v41 + 1;
            if (v42) {
              goto LABEL_68;
            }
            id v5[2] = v43;
            a2 = v64;
          }
          ++a1;
        }
        while (v20 != v63);
      }
      swift_bridgeObjectRelease();
      int64_t v44 = 0;
      a1 = v66 + 64;
      uint64_t v45 = 1 << *(unsigned char *)(v66 + 32);
      uint64_t v46 = -1;
      if (v45 < 64) {
        uint64_t v46 = ~(-1 << v45);
      }
      unint64_t v47 = v46 & *(void *)(v66 + 64);
      int64_t v48 = (unint64_t)(v45 + 63) >> 6;
      while (1)
      {
        while (v47)
        {
          unint64_t v49 = __clz(__rbit64(v47));
          v47 &= v47 - 1;
          unint64_t v50 = v49 | (v44 << 6);
          if (v5[2]) {
            goto LABEL_59;
          }
        }
        int64_t v51 = v44 + 1;
        if (__OFADD__(v44, 1)) {
          goto LABEL_67;
        }
        if (v51 >= v48)
        {
LABEL_61:
          swift_release();
          return swift_release();
        }
        unint64_t v52 = *(void *)(a1 + 8 * v51);
        ++v44;
        if (!v52)
        {
          int64_t v44 = v51 + 1;
          if (v51 + 1 >= v48) {
            goto LABEL_61;
          }
          unint64_t v52 = *(void *)(a1 + 8 * v44);
          if (!v52)
          {
            int64_t v44 = v51 + 2;
            if (v51 + 2 >= v48) {
              goto LABEL_61;
            }
            unint64_t v52 = *(void *)(a1 + 8 * v44);
            if (!v52)
            {
              int64_t v53 = v51 + 3;
              if (v53 >= v48) {
                goto LABEL_61;
              }
              unint64_t v52 = *(void *)(a1 + 8 * v53);
              if (!v52)
              {
                while (1)
                {
                  int64_t v44 = v53 + 1;
                  if (__OFADD__(v53, 1)) {
                    break;
                  }
                  if (v44 >= v48) {
                    goto LABEL_61;
                  }
                  unint64_t v52 = *(void *)(a1 + 8 * v44);
                  ++v53;
                  if (v52) {
                    goto LABEL_58;
                  }
                }
LABEL_69:
                __break(1u);
LABEL_70:
                swift_bridgeObjectRetain();
                uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                goto LABEL_3;
              }
              int64_t v44 = v53;
            }
          }
        }
LABEL_58:
        unint64_t v47 = (v52 - 1) & v52;
        unint64_t v50 = __clz(__rbit64(v52)) + (v44 << 6);
        if (v5[2])
        {
LABEL_59:
          uint64_t v54 = (uint64_t *)(*(void *)(v66 + 48) + 16 * v50);
          unint64_t v55 = *(void **)(*(void *)(v66 + 56) + 8 * v50);
          uint64_t v56 = *v54;
          a2 = v54[1];
          swift_bridgeObjectRetain();
          unint64_t v57 = v55;
          unint64_t v58 = sub_1001806F8(v56, a2);
          if (v59)
          {
            unint64_t v60 = *(void *)&v5[7][8 * v58];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            sub_100199340(v57, v60, 0);
            swift_bridgeObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease();
          }
        }
      }
    }
LABEL_72:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  unint64_t v68 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_72;
  }
  uint64_t v66 = (uint64_t)v5;
  unint64_t v67 = a1;
  uint64_t v12 = 0;
  a1 = a2 & 0xC000000000000001;
  uint64_t v5 = &selRef_intersectsSet_;
  while (1)
  {
    if (v10 == v12)
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    id v13 = a1 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a2 + 8 * v12 + 32);
    uint64_t v14 = v13;
    sub_100695D9C([v13 remObjectID:v61]);

    if (v4) {
      return swift_release();
    }
    ++v12;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v10 == v12)
    {
      a1 = v67;
      uint64_t v11 = v68;
      goto LABEL_13;
    }
  }
}

uint64_t sub_1001374B8()
{
  uint64_t v2 = v0;
  sub_100094134(&qword_10090BFA8);
  sub_1000967F4(&qword_10090BFB0, &qword_10090BFA8);
  uint64_t v3 = Sequence.compactMapToSet<A>(_:)();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_10013A524(v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v15 = v5;
  sub_100094134(&qword_10090BFB8);
  sub_1000967F4((unint64_t *)&unk_10090BFC0, &qword_10090BFB8);
  uint64_t v6 = Sequence.mapToSet<A>(_:)();
  uint64_t v7 = *(void *)(v2
                 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_storeObjectContext);
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100776E40;
  *(void *)(v8 + 56) = &type metadata for String;
  strcpy((char *)(v8 + 32), "canonicalName");
  *(_WORD *)(v8 + 46) = -4864;
  uint64_t v9 = sub_1003E8030(v6, v7, (Class)v8, 0);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v15 = (void *)v11;
    swift_getKeyPath();
    swift_getKeyPath();
    sub_100094134(&qword_10090BFD0);
    sub_1000967F4((unint64_t *)&qword_10090BFD8, &qword_10090BFD0);
    uint64_t v12 = Sequence.compactIndexBy<A, B>(key:value:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRetain();
    id v13 = sub_10013A770((uint64_t)v5, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v13[2])
    {
      sub_100094134((uint64_t *)&unk_10090BFE0);
      uint64_t v14 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v14 = _swiftEmptyDictionarySingleton;
    }
    unint64_t v15 = v14;
    sub_10013AB10((uint64_t)v13, 1, &v15);
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
}

uint64_t sub_100137804@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v12 = __chkstk_darwin(v11).n128_u64[0];
  uint64_t v14 = (char *)&v21 - v13;
  id v15 = [*a1 identifier:v12];
  if (v15)
  {
    uint64_t v16 = v15;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  }
  sub_100096408((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
  {
    uint64_t result = sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_100909E50);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v14, v4);
    sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_100909E50);
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v19 = v20;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  *a2 = v18;
  a2[1] = v19;
  return result;
}

uint64_t sub_100137A3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  v13[0] = *(void *)(a1 + 8);
  v13[1] = v7;
  swift_bridgeObjectRetain();
  static Locale.current.getter();
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 0, 1, v8);
  sub_1000E4FD8();
  uint64_t v9 = StringProtocol.foldedStringForWriting(locale:)();
  uint64_t v11 = v10;
  sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_10090FDF0);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  return result;
}

BOOL sub_100137B5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void sub_100137B74(void *a1@<X8>)
{
  *a1 = &off_1008B44E0;
}

Swift::Int sub_100137B84()
{
  Hasher.init(_seed:)();
  id v1 = *v0;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  sub_10013C2F0((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100137C60()
{
  id v1 = *v0;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  sub_10013C2F0((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_100137D2C()
{
  Hasher.init(_seed:)();
  id v1 = *v0;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  sub_10013C2F0((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_100137E08()
{
  id v1 = [*(id *)(v0+ OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder) hashtags];
  uint64_t v2 = &_swiftEmptySetSingleton;
  if (v1)
  {
    uint64_t v3 = v1;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1000ED098((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
    uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v4 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      if (__CocoaSet.Iterator.next()())
      {
        do
        {
          swift_dynamicCast();
          if ([v16 isConcealed])
          {
          }
          else
          {
            unint64_t v5 = *((void *)&_swiftEmptySetSingleton + 2);
            if (*((void *)&_swiftEmptySetSingleton + 3) <= v5) {
              sub_10032304C(v5 + 1);
            }
            Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
            uint64_t v7 = (char *)&_swiftEmptySetSingleton + 56;
            uint64_t v8 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
            unint64_t v9 = result & ~v8;
            unint64_t v10 = v9 >> 6;
            if (((-1 << v9) & ~*((void *)&_swiftEmptySetSingleton + (v9 >> 6) + 7)) != 0)
            {
              unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*((void *)&_swiftEmptySetSingleton + (v9 >> 6) + 7))) | v9 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              char v12 = 0;
              unint64_t v13 = (unint64_t)(63 - v8) >> 6;
              do
              {
                if (++v10 == v13 && (v12 & 1) != 0)
                {
                  __break(1u);
                  return result;
                }
                BOOL v14 = v10 == v13;
                if (v10 == v13) {
                  unint64_t v10 = 0;
                }
                v12 |= v14;
                uint64_t v15 = *(void *)&v7[8 * v10];
              }
              while (v15 == -1);
              unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
            }
            *(void *)&v7[(v11 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v11;
            *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v11) = v16;
            ++*((void *)&_swiftEmptySetSingleton + 2);
          }
        }
        while (__CocoaSet.Iterator.next()());
        uint64_t v2 = &_swiftEmptySetSingleton;
      }
      swift_release();
    }
    else
    {
      return sub_100139F94(v4, (uint64_t (*)(char *, unint64_t, uint64_t))sub_10013A10C);
    }
  }
  return (Swift::Int)v2;
}

id sub_1001380A8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter();
  return [super dealloc];
}

uint64_t sub_10013814C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  uint64_t v10 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(0);
  sub_10013B9A4((uint64_t)v8, v3 + *(int *)(v10 + 40));
  uint64_t v11 = sub_100138418();
  unint64_t v13 = v12;
  if (qword_100906EF8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10090BC50);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1000C51B8(a1, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1000C51B8(v11, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  return sub_10013866C();
}

uint64_t sub_100138418()
{
  _StringGuts.grow(_:)(69);
  v1._countAndFlagsBits = 0xD000000000000020;
  v1._object = (void *)0x80000001007CB930;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0xD00000000000001FLL;
  v3._object = (void *)0x80000001007CB960;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8236;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x20726F727265202CLL;
  v7._object = (void *)0xEA0000000000203DLL;
  String.append(_:)(v7);
  if (*v0)
  {
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    unint64_t v10 = v9;
  }
  else
  {
    unint64_t v10 = 0xE600000000000000;
    uint64_t v8 = 0x3E656E6F6E3CLL;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x697461727564202CLL;
  v12._object = (void *)0xED0000203D206E6FLL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = sub_100138898();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = 0xD000000000000013;
  v14._object = (void *)0x80000001007CB980;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10013866C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  Swift::String v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[1] = sub_1000C0DE0((void *)(v0 + 8), *(void *)(v0 + 32));
  sub_100138ACC();
  uint64_t v9 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(0);
  sub_1000BF710(v1 + *(int *)(v9 + 40), (uint64_t)v4, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909A40);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    Date.distance(to:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  dispatch thunk of AnalyticsType.postEvent(_:payload:duration:error:performAutoBugCaptureOnError:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100138898()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(0);
  sub_1000BF710(v0 + *(int *)(v8 + 40), (uint64_t)v3, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_1000966BC((uint64_t)v3, (uint64_t *)&unk_100909A40);
    return 0x6E776F6E6B6E753CLL;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    Date.distance(to:)();
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_100776E40;
    *(void *)(v12 + 56) = &type metadata for Double;
    *(void *)(v12 + 64) = &protocol witness table for Double;
    *(void *)(v12 + 32) = v11;
    uint64_t v9 = String.init(format:arguments:)();
    swift_bridgeObjectRelease();
  }
  return v9;
}

unint64_t sub_100138ACC()
{
  sub_100094134((uint64_t *)&unk_10090A420);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E60;
  *(void *)(inited + 32) = 0xD000000000000013;
  *(void *)(inited + 40) = 0x80000001007CB8F0;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 0xD000000000000018;
  *(void *)(inited + 64) = 0x80000001007CB910;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(void *)(inited + 80) = 0x7367617468736168;
  *(void *)(inited + 88) = 0xEF64657461657243;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  return sub_1002ED104(inited);
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler()
{
  return self;
}

uint64_t sub_100138BC4()
{
  return type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Batcher(0);
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Batcher(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10090BD48);
}

uint64_t sub_100138BEC()
{
  uint64_t result = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10090BF20);
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter()
{
  return self;
}

uint64_t getEnumTagSinglePayload for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.FieldToHandle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.FieldToHandle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100138E38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_100138E60(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.FieldToHandle()
{
  return &type metadata for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.FieldToHandle;
}

void *sub_100138E7C(void *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    int v3 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    swift_errorRetain();
    *int v3 = v5;
    long long v8 = *((_OWORD *)a2 + 2);
    *((_OWORD *)v3 + 2) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(v3 + 1), (uint64_t)(a2 + 1));
    *((_OWORD *)v3 + 3) = *((_OWORD *)a2 + 3);
    v3[8] = a2[8];
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (char *)v3 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v14(v10, v11, v12);
    uint64_t v15 = *(int *)(a3 + 40);
    os_log_type_t v16 = (char *)v3 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12))
    {
      uint64_t v18 = sub_100094134((uint64_t *)&unk_100909A40);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v14(v16, (uint64_t)v17, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
    }
  }
  return v3;
}

uint64_t sub_100139070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  swift_errorRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v4);
  uint64_t v5 = a1 + *(int *)(a2 + 36);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v5, v6);
  uint64_t v8 = a1 + *(int *)(a2 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v6);
  }
  return result;
}

uint64_t sub_100139184(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  swift_errorRetain();
  *(void *)a1 = v6;
  long long v7 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 64) = a2[8];
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(void *, const void *, uint64_t))(v12 + 16);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = (void *)(a1 + v14);
  os_log_type_t v16 = (char *)a2 + v14;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11))
  {
    uint64_t v17 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  return a1;
}

void *sub_100139328(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  swift_errorRetain();
  *a1 = v6;
  swift_errorRelease();
  sub_100139510(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  os_log_type_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v8) = v16((char *)a1 + v13, 1, v10);
  int v17 = v16(v15, 1, v10);
  if (!v8)
  {
    if (!v17)
    {
      v12(v14, v15, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v15, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  return a1;
}

uint64_t *sub_100139510(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *int v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *int v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_100139740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (void *)(a1 + v7);
  int v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
  {
    uint64_t v16 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_1001398B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_errorRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v7) = v15((const void *)(a1 + v12), 1, v9);
  int v16 = v15(v14, 1, v9);
  if (!v7)
  {
    if (!v16)
    {
      v11(v13, v14, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v13, v14, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  return a1;
}

uint64_t sub_100139AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100139AB4);
}

uint64_t sub_100139AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_100139BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100139BF8);
}

uint64_t sub_100139BF8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_100139D28()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_1000D68FC();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_100139E18()
{
  return sub_1000967F4(&qword_10090BF78, &qword_10090BF80);
}

unint64_t sub_100139E58()
{
  unint64_t result = qword_10090BF88;
  if (!qword_10090BF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090BF88);
  }
  return result;
}

uint64_t sub_100139EAC(uint64_t a1)
{
  type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t sub_100139EE0()
{
  id v1 = [objc_allocWithZone((Class)type metadata accessor for Analytics()) init];
  id v2 = [*(id *)(v0 + 16) newBackgroundContextWithAuthor:RDSharedInlineTagAutoConvertAuthor];
  type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Batcher(0);
  uint64_t v3 = swift_allocObject();
  id v4 = v1;
  sub_10013B4C4(v2, (uint64_t)v4, v3);
  sub_100133C20();

  return swift_release();
}

uint64_t sub_100139F94(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = a2((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4);
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    uint64_t v8 = a2((char *)v9, v6, v4);
    swift_release();
    swift_slowDealloc();
  }
  return v8;
}

uint64_t sub_10013A10C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (unint64_t *)result;
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    uint64_t result = (uint64_t)[*(id *)(*(void *)(a3 + 48) + 8 * v13) isConcealed];
    if ((result & 1) == 0)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100240574(v4, a2, v5, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_10013A2A8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (2)
  {
    uint64_t v20 = v4;
    if (v9)
    {
LABEL_6:
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_21;
    }
    while (1)
    {
      int64_t v13 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v13 >= v10) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v13);
      ++v5;
      if (!v14)
      {
        int64_t v5 = v13 + 1;
        if (v13 + 1 >= v10) {
          goto LABEL_24;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14)
        {
          int64_t v5 = v13 + 2;
          if (v13 + 2 >= v10) {
            goto LABEL_24;
          }
          unint64_t v14 = *(void *)(v6 + 8 * v5);
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v10)
            {
LABEL_24:
              swift_retain();
              sub_100240574(a1, a2, v20, a3);
              return;
            }
            unint64_t v14 = *(void *)(v6 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                int64_t v5 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_26;
                }
                if (v5 >= v10) {
                  goto LABEL_24;
                }
                unint64_t v14 = *(void *)(v6 + 8 * v5);
                ++v15;
                if (v14) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v5 = v15;
          }
        }
      }
LABEL_20:
      unint64_t v9 = (v14 - 1) & v14;
      unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_21:
      id v16 = *(id *)(*(void *)(a3 + 48) + 8 * v12);
      id v17 = [v16 hashtagLabel];

      if (!v17) {
        break;
      }

      if (v9) {
        goto LABEL_6;
      }
    }
    *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v4 = v20 + 1;
    if (!__OFADD__(v20, 1)) {
      continue;
    }
    break;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_10013A474(uint64_t a1, uint64_t a2)
{
  sub_1000963CC(0, (unint64_t *)&qword_10090C120);
  if ((static NSObject.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  BOOL v4 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);

  return static UUID.== infix(_:_:)();
}

void *sub_10013A524(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0)
     - 8;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v11 = (id *)((char *)&v23 - v10);
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v23 = v2;
    uint64_t v14 = *(void *)(v9 + 72);
    unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v15 = a1 + v24;
    do
    {
      sub_10013B7DC(v15, (uint64_t)v11);
      id v16 = [*v11 objectIdentifier];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      LOBYTE(v16) = sub_1001CBC20(v17, v19, a2);
      swift_bridgeObjectRelease();
      if (v16)
      {
        sub_10013BA0C((uint64_t)v11, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
      }
      else
      {
        sub_10013B710((uint64_t)v11, (uint64_t)v7, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
        uint64_t v20 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE610(0, v20[2] + 1, 1);
          uint64_t v20 = v25;
        }
        unint64_t v22 = v20[2];
        unint64_t v21 = v20[3];
        if (v22 >= v21 >> 1)
        {
          sub_1001DE610(v21 > 1, v22 + 1, 1);
          uint64_t v20 = v25;
        }
        void v20[2] = v22 + 1;
        sub_10013B710((uint64_t)v7, (uint64_t)v20 + v24 + v22 * v14, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
      }
      v15 += v14;
      --v13;
    }
    while (v13);
    return v25;
  }
  return result;
}

void *sub_10013A770(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134(&qword_100914590);
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  __chkstk_darwin(v8);
  uint64_t v39 = (uint64_t)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v12 = (void *)((char *)v33 - v11);
  __chkstk_darwin(v13);
  uint64_t v34 = (uint64_t)v33 - v14;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15) {
    return _swiftEmptyArrayStorage;
  }
  v33[2] = v2;
  uint64_t v16 = *(void *)(type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0)
                  - 8);
  uint64_t v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v18 = *(void *)(v16 + 72);
  v33[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v19 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v37 = *(void *)(v17 + 8);
    uint64_t v38 = v20;
    swift_bridgeObjectRetain();
    static Locale.current.getter();
    uint64_t v21 = type metadata accessor for Locale();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 0, 1, v21);
    sub_1000E4FD8();
    uint64_t v22 = StringProtocol.foldedStringForWriting(locale:)();
    uint64_t v24 = v23;
    sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_10090FDF0);
    swift_bridgeObjectRelease();
    if (*(void *)(a2 + 16) && (unint64_t v25 = sub_1001806F8(v22, v24), (v26 & 1) != 0))
    {
      id v27 = *(id *)(*(void *)(a2 + 56) + 8 * v25);
      swift_bridgeObjectRelease();
      uint64_t v28 = (uint64_t)v12 + *(int *)(v36 + 48);
      *unint64_t v12 = v27;
      sub_10013B7DC(v17, v28);
      uint64_t v29 = v34;
      sub_100096408((uint64_t)v12, v34, &qword_100914590);
      sub_100096408(v29, v39, &qword_100914590);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = (void *)sub_10030A29C(0, v19[2] + 1, 1, (unint64_t)v19);
      }
      unint64_t v31 = v19[2];
      unint64_t v30 = v19[3];
      if (v31 >= v30 >> 1) {
        uint64_t v19 = (void *)sub_10030A29C(v30 > 1, v31 + 1, 1, (unint64_t)v19);
      }
      void v19[2] = v31 + 1;
      sub_100096408(v39, (uint64_t)v19+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v31, &qword_100914590);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v17 += v18;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v19;
}

void sub_10013AB10(uint64_t a1, char a2, void *a3)
{
  uint64_t v7 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  uint64_t v57 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v54 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v51 - v10;
  uint64_t v12 = sub_100094134(&qword_100914590);
  __chkstk_darwin(v12);
  uint64_t v16 = (void **)((char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17)
  {
    uint64_t v51 = v3;
    uint64_t v52 = v17;
    uint64_t v18 = (uint64_t)v16 + *(int *)(v13 + 48);
    unint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v56 = *(void *)(v14 + 72);
    uint64_t v53 = a1;
    swift_bridgeObjectRetain();
    sub_1000BF710(a1 + v19, (uint64_t)v16, &qword_100914590);
    uint64_t v20 = *v16;
    uint64_t v55 = v18;
    sub_10013B710(v18, (uint64_t)v11, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    uint64_t v21 = (void *)*a3;
    unint64_t v23 = sub_10030759C((uint64_t)v20);
    uint64_t v24 = v21[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    char v27 = v22;
    if (v21[3] < v26)
    {
      sub_100310B78(v26, a2 & 1);
      unint64_t v28 = sub_10030759C((uint64_t)v20);
      if ((v27 & 1) != (v29 & 1))
      {
LABEL_28:
        sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return;
      }
      unint64_t v23 = v28;
      unint64_t v30 = (void *)*a3;
      if ((v27 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_9:
      uint64_t v31 = v54;
      sub_10013B710((uint64_t)v11, v54, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);

      sub_10013B778(v31, v30[7] + *(void *)(v57 + 72) * v23);
LABEL_13:
      uint64_t v35 = v52 - 1;
      if (v52 == 1)
      {
LABEL_14:
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v36 = v53 + v56 + v19;
      while (1)
      {
        sub_1000BF710(v36, (uint64_t)v16, &qword_100914590);
        uint64_t v38 = *v16;
        sub_10013B710(v55, (uint64_t)v11, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
        uint64_t v39 = (void *)*a3;
        unint64_t v41 = sub_10030759C((uint64_t)v38);
        uint64_t v42 = v39[2];
        BOOL v43 = (v40 & 1) == 0;
        uint64_t v44 = v42 + v43;
        if (__OFADD__(v42, v43)) {
          goto LABEL_26;
        }
        char v45 = v40;
        if (v39[3] < v44)
        {
          sub_100310B78(v44, 1);
          unint64_t v46 = sub_10030759C((uint64_t)v38);
          if ((v45 & 1) != (v47 & 1)) {
            goto LABEL_28;
          }
          unint64_t v41 = v46;
        }
        int64_t v48 = (void *)*a3;
        if (v45)
        {
          uint64_t v37 = v54;
          sub_10013B710((uint64_t)v11, v54, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);

          sub_10013B778(v37, v48[7] + *(void *)(v57 + 72) * v41);
        }
        else
        {
          v48[(v41 >> 6) + 8] |= 1 << v41;
          *(void *)(v48[6] + 8 * v41) = v38;
          sub_10013B710((uint64_t)v11, v48[7] + *(void *)(v57 + 72) * v41, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
          uint64_t v49 = v48[2];
          BOOL v33 = __OFADD__(v49, 1);
          uint64_t v50 = v49 + 1;
          if (v33) {
            goto LABEL_27;
          }
          v48[2] = v50;
        }
        v36 += v56;
        if (!--v35) {
          goto LABEL_14;
        }
      }
    }
    if (a2)
    {
      unint64_t v30 = (void *)*a3;
      if (v22) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_1003199B4();
      unint64_t v30 = (void *)*a3;
      if (v27) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v30[(v23 >> 6) + 8] |= 1 << v23;
    *(void *)(v30[6] + 8 * v23) = v20;
    sub_10013B710((uint64_t)v11, v30[7] + *(void *)(v57 + 72) * v23, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    uint64_t v32 = v30[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v30[2] = v34;
    goto LABEL_13;
  }
}

uint64_t sub_10013AFBC(uint64_t a1, uint64_t a2)
{
  sub_100094134(&qword_10090C018);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = (void *)result;
  int64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = result + 64;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v13 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v6 << 6))
  {
    uint64_t v18 = 8 * i;
    unint64_t v19 = *(void **)(*(void *)(a1 + 48) + 8 * i);
    *(void *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v5[6] + v18) = v19;
    *(void *)(v5[7] + v18) = a2;
    uint64_t v20 = v5[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    id v5[2] = v22;
    id v23 = v19;
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_24;
    }
    if (v15 >= v11) {
      return (uint64_t)v5;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v11) {
        return (uint64_t)v5;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v11) {
          return (uint64_t)v5;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v11) {
    return (uint64_t)v5;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v11) {
      return (uint64_t)v5;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

Swift::Int sub_10013B170(uint64_t a1, uint64_t a2)
{
  if (__CocoaDictionary.count.getter())
  {
    sub_100094134(&qword_10090C018);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }
  unint64_t v19 = v3;
  __CocoaDictionary.makeIterator()();
  swift_unknownObjectRetain();
  uint64_t v4 = __CocoaDictionary.Iterator.next()();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    do
    {
      swift_dynamicCast();
      sub_1000963CC(0, &qword_10090DC80);
      swift_dynamicCast();
      swift_bridgeObjectRetain();

      uint64_t v3 = v19;
      unint64_t v13 = v19[2];
      if (v19[3] <= v13)
      {
        sub_100310F2C(v13 + 1, 1);
        uint64_t v3 = v19;
      }
      Swift::Int result = NSObject._rawHashValue(seed:)(v3[5]);
      uint64_t v7 = v3 + 8;
      uint64_t v8 = -1 << *((unsigned char *)v3 + 32);
      unint64_t v9 = result & ~v8;
      unint64_t v10 = v9 >> 6;
      if (((-1 << v9) & ~v3[(v9 >> 6) + 8]) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v9) & ~v3[(v9 >> 6) + 8])) | v9 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v14 = 0;
        unint64_t v15 = (unint64_t)(63 - v8) >> 6;
        do
        {
          if (++v10 == v15 && (v14 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          BOOL v16 = v10 == v15;
          if (v10 == v15) {
            unint64_t v10 = 0;
          }
          v14 |= v16;
          uint64_t v17 = v7[v10];
        }
        while (v17 == -1);
        unint64_t v11 = __clz(__rbit64(~v17)) + (v10 << 6);
      }
      *(void *)((char *)v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = 8 * v11;
      *(void *)(v3[6] + v12) = v18;
      *(void *)(v3[7] + v12) = a2;
      ++v3[2];
      uint64_t v5 = (void *)__CocoaDictionary.Iterator.next()();
    }
    while (v5);
  }
  swift_release();
  return (Swift::Int)v3;
}

unint64_t sub_10013B3D8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 < 0) {
    return 0;
  }
  if (__OFADD__(a3, 1))
  {
    __break(1u);
  }
  else
  {
    Swift::Int result = String.index(_:offsetBy:limitedBy:)();
    if (v5) {
      return 0;
    }
    if (!__OFSUB__(a4, 1))
    {
      unint64_t v6 = result;
      Swift::Int result = String.index(_:offsetBy:limitedBy:)();
      if ((v7 & 1) == 0)
      {
        if (result >> 14 >= v6 >> 14) {
          return String.subscript.getter();
        }
        goto LABEL_11;
      }
      return 0;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10013B4C4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  unint64_t v9 = (uint64_t *)&v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v12 = &v18[-v11];
  void v19[3] = type metadata accessor for Analytics();
  uint64_t v19[4] = &protocol witness table for Analytics;
  v19[0] = a2;
  *(void *)(a3 + 16) = a1;
  *(void *)(a3 + 24) = 100;
  sub_100096838((uint64_t)v19, (uint64_t)v18);
  *unint64_t v9 = 0;
  v9[7] = 0;
  void v9[8] = 0;
  v9[6] = 0;
  unint64_t v13 = (char *)v9 + *(int *)(v7 + 48);
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_100096838((uint64_t)v18, (uint64_t)(v9 + 1));
  id v15 = a1;
  Date.init()();
  sub_10013B688();
  uint64_t v16 = swift_allocError();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
  swift_errorRelease();
  *unint64_t v9 = v16;
  sub_10013B710((uint64_t)v9, (uint64_t)v12, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v19);
  sub_10013B710((uint64_t)v12, a3 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher_metrics, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics);
  return a3;
}

unint64_t sub_10013B688()
{
  unint64_t result = qword_10090BF90;
  if (!qword_10090BF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090BF90);
  }
  return result;
}

const char *sub_10013B6DC()
{
  return "canonicalName";
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10090C0D0);
}

uint64_t sub_10013B710(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10013B778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013B7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013B840()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013B878()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10013B8C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100135294(a1, a2, a3, a4, *(void **)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
}

uint64_t sub_10013B8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10013B8DC()
{
  return swift_release();
}

unint64_t sub_10013B8E4()
{
  unint64_t result = qword_10090C030;
  if (!qword_10090C030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C030);
  }
  return result;
}

const char *sub_10013B938()
{
  return "activityTypeRawValue";
}

id sub_10013B944@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 activityTypeRawValue];
  *a2 = (_WORD)result;
  return result;
}

id sub_10013B978(__int16 *a1, id *a2)
{
  return [*a2 setActivityTypeRawValue:*a1];
}

uint64_t sub_10013B98C()
{
  return sub_100133E58(v0);
}

uint64_t sub_10013B994()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013B9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013BA0C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *sub_10013BA6C(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    uint64_t v12 = v4;
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t sub_10013BB5C(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_10013BBDC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  id v11 = v5;
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

uint64_t sub_10013BC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t sub_10013BD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10013BDB4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10013BE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013BE64);
}

uint64_t sub_10013BE64(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10013BF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013BF28);
}

void *sub_10013BF28(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *id result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10013BFD0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10013C078(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 3 || a3 == 2) {
    return swift_errorRetain();
  }
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError(uint64_t a1)
{
  return sub_10013C0B4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_10013C0B4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 3 || a3 == 2) {
    return swift_errorRelease();
  }
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s7remindd40RDSharedInlineTagAutoConvertStoreHandlerC22ReminderFieldConverterC19AutoConversionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10013C078(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10013C078(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10013C0B4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_10013C0B4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10013C258(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_10013C270(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)uint64_t result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError()
{
  return &type metadata for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError;
}

ValueMetadata *type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics.UnfinishedMetrics()
{
  return &type metadata for RDSharedInlineTagAutoConvertStoreHandler.Metrics.UnfinishedMetrics;
}

uint64_t sub_10013C2A8()
{
  return sub_10013C2F0((unint64_t *)&unk_10090C110, (void (*)(uint64_t))type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
}

uint64_t sub_10013C2F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013C340()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090C130);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090C130);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10013C408(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_1000C0DE0(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

void sub_10013C468(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = v2;
  uint64_t v31 = a2;
  swift_getObjectType();
  uint64_t v5 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType();
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)&double v7 = __chkstk_darwin(v5).n128_u64[0];
  uint64_t v9 = (uint64_t *)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v32 = 0;
  id v10 = [v2 remObjectIDWithError:&v32, v7];
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = v32;
    id v13 = [v3 displayName];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v30 = a1;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v16;
      uint64_t v29 = v15;

      uint64_t v17 = REMObjectID.codable.getter();
      id v18 = [v3 canonicalName];
      if (v18)
      {
        unint64_t v19 = v18;
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v22 = v21;
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v22 = 0;
      }
      uint64_t v27 = v29;
      *uint64_t v9 = v17;
      v9[1] = v27;
      void v9[2] = v28;
      v9[3] = v20;
      v9[4] = v22;
      (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v9, enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:), v5);
      swift_bridgeObjectRetain();
      REMRemindersListDataView.SectionLite.init(type:reminders:)();
    }
    else
    {
      uint64_t v24 = self;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v26 = String._bridgeToObjectiveC()();
      [v24 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v26];

      swift_willThrow();
    }
  }
  else
  {
    id v23 = v32;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

id sub_10013C704()
{
  return sub_10013C728();
}

id sub_10013C728()
{
  id v5 = 0;
  id v1 = [v0 remObjectIDWithError:&v5];
  if (v1)
  {
    id v2 = v5;
  }
  else
  {
    id v3 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

id sub_10013C7E0()
{
  return [*v0 list];
}

void sub_10013C81C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

id sub_10013C840()
{
  return [*v0 smartList];
}

void sub_10013C87C(uint64_t a1@<X8>)
{
  id v2 = v1;
  v20[1] = a1;
  swift_getObjectType();
  uint64_t v3 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType();
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)&double v5 = __chkstk_darwin(v3).n128_u64[0];
  double v7 = (void *)((char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v21 = 0;
  id v8 = [v1 remObjectIDWithError:&v21, v5];
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = v21;
    id v11 = [v2 displayName];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      uint64_t *v7 = REMObjectID.codable.getter();
      v7[1] = v13;
      v7[3] = 0;
      v7[4] = 0;
      v7[2] = v15;
      (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v7, enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:), v3);
      swift_bridgeObjectRetain();
      REMRemindersListDataView.SectionLite.init(type:reminders:)();
    }
    else
    {
      uint64_t v17 = self;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v19 = String._bridgeToObjectiveC()();
      [v17 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v19];

      swift_willThrow();
    }
  }
  else
  {
    id v16 = v21;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

id sub_10013CACC()
{
  return [*v0 template];
}

void sub_10013CB08(uint64_t a1@<X8>)
{
}

void *sub_10013CB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  double v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for REMRemindersListDataView.SectionLite();
  uint64_t v8 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v38 = _swiftEmptyArrayStorage;
  sub_1001DE1E4(0, v10, 0);
  id v11 = (void *)(a1 + 32);
  uint64_t v32 = v8;
  BOOL v33 = (void (**)(char *, uint64_t))(v5 + 8);
  v31[1] = v8 + 32;
  while (1)
  {
    uint64_t v12 = v11[3];
    uint64_t v13 = v11[4];
    uint64_t v14 = sub_1000C0DE0(v11, v12);
    uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
    if (v2) {
      break;
    }
    id v16 = v15;
    id v17 = [v15 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = *(void *)(a2 + 16);
    int64_t v36 = v10;
    if (v18)
    {
      unint64_t v19 = sub_100306EC4((uint64_t)v7);
      uint64_t v20 = _swiftEmptyArrayStorage;
      if (v21)
      {
        uint64_t v20 = *(void **)(*(void *)(a2 + 56) + 8 * v19);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      uint64_t v20 = _swiftEmptyArrayStorage;
    }
    uint64_t v22 = a2;
    id v23 = v7;
    (*v33)(v7, v35);
    uint64_t v25 = v11[3];
    uint64_t v24 = v11[4];
    sub_1000C0DE0(v11, v25);
    (*(void (**)(void *, uint64_t, uint64_t))(v24 + 32))(v20, v25, v24);

    swift_bridgeObjectRelease();
    uint64_t v14 = v38;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1001DE1E4(0, v14[2] + 1, 1);
      uint64_t v14 = v38;
    }
    double v7 = v23;
    unint64_t v27 = v14[2];
    unint64_t v26 = v14[3];
    uint64_t v28 = v32;
    int64_t v29 = v36;
    if (v27 >= v26 >> 1)
    {
      sub_1001DE1E4(v26 > 1, v27 + 1, 1);
      uint64_t v14 = v38;
    }
    void v14[2] = v27 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))((unint64_t)v14+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v27, v37, v34);
    uint64_t v38 = v14;
    v11 += 5;
    int64_t v10 = v29 - 1;
    a2 = v22;
    if (!v10) {
      return v14;
    }
  }
  swift_release();
  return v14;
}

void *sub_10013CE94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v95 = (char *)&v82 - v14;
  __chkstk_darwin(v15);
  uint64_t v93 = (char *)&v82 - v16;
  __chkstk_darwin(v17);
  uint64_t v106 = (char *)&v82 - v18;
  uint64_t v19 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  __chkstk_darwin(v19);
  unint64_t v107 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  __chkstk_darwin(v22);
  unint64_t v26 = (char *)&v82 - v25;
  if (a3)
  {
    id v98 = v8;
    uint64_t v111 = _swiftEmptyDictionarySingleton;
    uint64_t v27 = *(void *)(a1 + 16);
    if (v27)
    {
      unint64_t v84 = v24;
      uint64_t v91 = a2;
      int64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
      uint64_t v28 = v23 + 16;
      unint64_t v108 = v29;
      uint64_t v30 = *(unsigned __int8 *)(v28 + 64);
      uint64_t v31 = (v30 + 32) & ~v30;
      uint64_t v85 = a1;
      uint64_t v32 = a1 + v31;
      int v105 = (void (**)(uint64_t, uint64_t))(v10 + 8);
      uint64_t v33 = *(void *)(v28 + 56);
      id v96 = (void (**)(char *, char *, uint64_t))(v10 + 32);
      uint64_t v97 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      Swift::Int v92 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      uint64_t v89 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      unint64_t v100 = (void (**)(char *, char *, uint64_t))(v28 + 16);
      uint64_t v101 = v31;
      uint64_t v109 = v28;
      unint64_t v103 = (void (**)(char *, uint64_t))(v28 - 8);
      uint64_t v88 = v33 + v31;
      uint64_t v87 = v30 | 7;
      id v104 = a3;
      uint64_t v34 = (char *)_swiftEmptyArrayStorage;
      long long v86 = xmmword_100776E40;
      uint64_t v102 = v33;
      uint64_t v90 = v12;
      while (1)
      {
        v108(v26, v32, v19);
        id v35 = [v104 membershipByMemberIdentifier];
        sub_10013E364();
        sub_10013E30C();
        uint64_t v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v37 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
        id v38 = [v37 uuid];

        uint64_t v39 = (uint64_t)v106;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        if (!*(void *)(v36 + 16) || (unint64_t v40 = sub_100306EC4(v39), v39 = (uint64_t)v106, (v41 & 1) == 0))
        {
          swift_bridgeObjectRelease();
          (*v105)(v39, v9);
          goto LABEL_20;
        }
        uint64_t v42 = v9;
        id v43 = *(id *)(*(void *)(v36 + 56) + 8 * v40);
        swift_bridgeObjectRelease();
        uint64_t v44 = *v105;
        (*v105)(v39, v42);
        id v99 = v43;
        id v45 = [v43 groupIdentifier];
        if (!v45)
        {
          uint64_t v49 = (uint64_t)v98;
          (*v97)(v98, 1, 1, v42);
          uint64_t v9 = v42;
LABEL_19:

          sub_1001260DC(v49);
LABEL_20:
          v108(v107, (uint64_t)v26, v19);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v67 = v102;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            uint64_t v34 = (char *)sub_1003091E4(0, *((void *)v34 + 2) + 1, 1, (unint64_t)v34);
          }
          unint64_t v70 = *((void *)v34 + 2);
          unint64_t v69 = *((void *)v34 + 3);
          if (v70 >= v69 >> 1) {
            uint64_t v34 = (char *)sub_1003091E4(v69 > 1, v70 + 1, 1, (unint64_t)v34);
          }
          *((void *)v34 + 2) = v70 + 1;
          (*v100)(&v34[v101 + v70 * v67], v107, v19);
          goto LABEL_25;
        }
        unint64_t v46 = v45;
        double v94 = v44;
        char v47 = v95;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        int64_t v48 = *v96;
        uint64_t v49 = (uint64_t)v98;
        (*v96)(v98, v47, v42);
        (*v97)((char *)v49, 0, 1, v42);
        uint64_t v9 = v42;
        if ((*v92)(v49, 1, v42) == 1) {
          goto LABEL_19;
        }
        uint64_t v50 = (uint64_t)v93;
        v48(v93, (char *)v49, v42);
        if ((sub_1001CBD6C(v50, v91) & 1) == 0)
        {
          v94(v50, v42);

          goto LABEL_20;
        }
        uint64_t v51 = v90;
        if (v111[2])
        {
          uint64_t v52 = (uint64_t)v93;
          sub_100306EC4((uint64_t)v93);
          uint64_t v53 = *v89;
          if (v54)
          {
            v53(v51, v52, v42);
            uint64_t v56 = sub_1001EE2EC(v110);
            if (*v55)
            {
              uint64_t v57 = v55;
              v108(v84, (uint64_t)v26, v19);
              unint64_t v58 = v57;
              unint64_t v59 = *v57;
              char v60 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v83 = v58;
              *unint64_t v58 = v59;
              if ((v60 & 1) == 0)
              {
                unint64_t v59 = sub_1003091E4(0, *(void *)(v59 + 16) + 1, 1, v59);
                *uint64_t v83 = v59;
              }
              long long v61 = v94;
              unint64_t v63 = *(void *)(v59 + 16);
              unint64_t v62 = *(void *)(v59 + 24);
              unint64_t v64 = (void (*)(uint64_t, uint64_t))(v63 + 1);
              if (v63 >= v62 >> 1)
              {
                double v94 = (void (*)(uint64_t, uint64_t))(v63 + 1);
                uint64_t v79 = sub_1003091E4(v62 > 1, v63 + 1, 1, v59);
                unint64_t v64 = v94;
                unint64_t v59 = v79;
                *uint64_t v83 = v79;
              }
              *(void *)(v59 + 16) = v64;
              unint64_t v65 = v59 + v101;
              uint64_t v66 = v102;
              (*v100)((char *)(v65 + v63 * v102), v84, v19);
              ((void (*)(void *, void))v56)(v110, 0);

              uint64_t v67 = v66;
              v61((uint64_t)v90, v9);
              v61((uint64_t)v93, v9);
            }
            else
            {
              ((void (*)(void *, void))v56)(v110, 0);

              uint64_t v78 = v94;
              v94((uint64_t)v51, v9);
              v78(v52, v9);
              uint64_t v67 = v102;
            }
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v53 = *v89;
        }
        uint64_t v71 = (uint64_t)v95;
        uint64_t v72 = (uint64_t)v93;
        v53(v95, (uint64_t)v93, v9);
        sub_100094134(&qword_10090C168);
        uint64_t v73 = swift_allocObject();
        *(_OWORD *)(v73 + 16) = v86;
        v108((char *)(v73 + v101), (uint64_t)v26, v19);
        uint64_t v74 = v111;
        char v75 = swift_isUniquelyReferenced_nonNull_native();
        v110[0] = v74;
        sub_1002C3EB8(v73, v71, v75);
        uint64_t v111 = (void *)v110[0];
        swift_bridgeObjectRelease();
        uint64_t v76 = v71;
        id v77 = v94;
        v94(v76, v9);

        v77(v72, v9);
        uint64_t v67 = v102;
LABEL_25:
        (*v103)(v26, v19);
        v32 += v67;
        if (!--v27)
        {
          swift_bridgeObjectRelease();
          id v80 = v104;

          swift_bridgeObjectRelease();
          return v111;
        }
      }
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  else
  {
    swift_bridgeObjectRelease();
    return (void *)sub_1002ED23C((uint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10013D83C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for REMJSONDeserializationError();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMRemindersListDataView.SectionLite();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  if (!a1[2])
  {
    sub_100094134(&qword_1009142E0);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_100776E40;
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v8);
    swift_bridgeObjectRetain();
    REMRemindersListDataView.SectionLite.init(type:reminders:)();
    return v39;
  }
  uint64_t v66 = v5;
  uint64_t v67 = v8;
  uint64_t v72 = a1;
  uint64_t v73 = v9;
  unint64_t v68 = v11;
  unint64_t v69 = (char *)v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = v14;
  uint64_t v71 = v13;
  uint64_t v16 = a1[7];
  uint64_t v17 = a1[8];
  sub_1000C0DE0(a1 + 4, v16);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17))
  {
    uint64_t v19 = v18;
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    uint64_t v21 = ObjectType;
    uint64_t v22 = v75;
    uint64_t v23 = sub_100124D70(v21, v19);
    if (v22)
    {
      uint64_t v24 = 0;
      swift_unknownObjectRelease();
      uint64_t v79 = v22;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      int v25 = swift_dynamicCast();
      v65[2] = a2;
      if (v25)
      {
        uint64_t v26 = v66;
        if ((*(unsigned int (**)(uint64_t *, uint64_t))(v66 + 88))(v7, v4) == enum case for REMJSONDeserializationError.notSupported(_:))
        {
          swift_errorRelease();
          (*(void (**)(uint64_t *, uint64_t))(v26 + 96))(v7, v4);
          uint64_t v27 = *v7;
          if (qword_100906F00 != -1) {
            swift_once();
          }
          uint64_t v28 = type metadata accessor for Logger();
          sub_10008E2DC(v28, (uint64_t)qword_10090C130);
          swift_unknownObjectRetain_n();
          int64_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = swift_slowAlloc();
            uint64_t v66 = v27;
            uint64_t v32 = v31;
            uint64_t v75 = swift_slowAlloc();
            uint64_t v76 = v75;
            *(_DWORD *)uint64_t v32 = 136446722;
            id v77 = &_s9UtilitiesON;
            sub_100094134(&qword_10090C158);
            uint64_t v33 = String.init<A>(describing:)();
            id v77 = (ValueMetadata *)sub_1000C51B8(v33, v34, &v76);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v32 + 12) = 2082;
            v65[1] = v32 + 14;
            uint64_t v35 = swift_getObjectType();
            id v77 = (ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v35, v19);
            uint64_t v78 = v36;
            sub_100094134((uint64_t *)&unk_10090A4C0);
            uint64_t v37 = String.init<A>(describing:)();
            id v77 = (ValueMetadata *)sub_1000C51B8(v37, v38, &v76);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_unknownObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v32 + 22) = 2050;
            id v77 = (ValueMetadata *)v66;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s: Failed to deserialize 'membershipsOfRemindersInSectionsAsData' because current runtime version is lower than minimumSupportedVersion. {parentID: %{public}s, minimumSupportedVersion: %{public}ld}", (uint8_t *)v32, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_unknownObjectRelease_n();
          }
          uint64_t v42 = (uint64_t)v72;
          uint64_t v41 = v73;
          swift_errorRelease();
          unint64_t v40 = 0;
          goto LABEL_23;
        }
        (*(void (**)(uint64_t *, uint64_t))(v26 + 8))(v7, v4);
      }
      uint64_t v43 = v19;
      swift_errorRelease();
      if (qword_100906F00 != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      sub_10008E2DC(v44, (uint64_t)qword_10090C130);
      swift_unknownObjectRetain();
      swift_errorRetain();
      swift_unknownObjectRetain();
      swift_errorRetain();
      id v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.fault.getter();
      int v47 = v46;
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v48 = swift_slowAlloc();
        uint64_t v75 = swift_slowAlloc();
        uint64_t v79 = v75;
        *(_DWORD *)uint64_t v48 = 136446722;
        LODWORD(v66) = v47;
        id v77 = &_s9UtilitiesON;
        sub_100094134(&qword_10090C158);
        uint64_t v49 = String.init<A>(describing:)();
        id v77 = (ValueMetadata *)sub_1000C51B8(v49, v50, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 12) = 2082;
        uint64_t v51 = swift_getObjectType();
        id v77 = (ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v51, v43);
        uint64_t v78 = v52;
        sub_100094134((uint64_t *)&unk_10090A4C0);
        uint64_t v53 = String.init<A>(describing:)();
        id v77 = (ValueMetadata *)sub_1000C51B8(v53, v54, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 22) = 2082;
        swift_getErrorValue();
        uint64_t v55 = Error.rem_errorDescription.getter();
        id v77 = (ValueMetadata *)sub_1000C51B8(v55, v56, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v66, "%{public}s: Error upon fetching 'membershipsOfRemindersInSections' {parentID: %{public}s, error: %{public}s}", (uint8_t *)v48, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_unknownObjectRelease_n();
        swift_errorRelease();
        swift_errorRelease();
      }
      unint64_t v40 = 0;
      uint64_t v42 = (uint64_t)v72;
      uint64_t v41 = v73;
      goto LABEL_23;
    }
    unint64_t v40 = (void *)v23;
    swift_unknownObjectRelease();
    uint64_t v24 = 0;
    uint64_t v41 = v73;
  }
  else
  {
    unint64_t v40 = 0;
    uint64_t v41 = v73;
    uint64_t v24 = v75;
  }
  uint64_t v42 = (uint64_t)v72;
LABEL_23:
  id v77 = (ValueMetadata *)v42;
  sub_100094134(&qword_10090C148);
  type metadata accessor for UUID();
  sub_10013E2B0();
  sub_10013E30C();
  uint64_t v39 = Sequence.compactMapToSet<A>(_:)();
  id v57 = v40;
  uint64_t v58 = swift_bridgeObjectRetain();
  unint64_t v59 = sub_10013CE94(v58, v39, v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v60 = sub_10013CB2C(v42, (uint64_t)v59);
  if (v24)
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v39 = (uint64_t)v60;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v41 + 104))(v68, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v67);
    swift_bridgeObjectRetain();
    long long v61 = v69;
    REMRemindersListDataView.SectionLite.init(type:reminders:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v39 = sub_100309218(0, *(void *)(v39 + 16) + 1, 1, v39);
    }
    unint64_t v63 = *(void *)(v39 + 16);
    unint64_t v62 = *(void *)(v39 + 24);
    if (v63 >= v62 >> 1) {
      uint64_t v39 = sub_100309218(v62 > 1, v63 + 1, 1, v39);
    }
    *(void *)(v39 + 16) = v63 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v71 + 32))(v39+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(void *)(v71 + 72) * v63, v61, v70);

    swift_unknownObjectRelease();
  }
  return v39;
}

unint64_t sub_10013E2B0()
{
  unint64_t result = qword_10090C150;
  if (!qword_10090C150)
  {
    sub_100096058(&qword_10090C148);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C150);
  }
  return result;
}

unint64_t sub_10013E30C()
{
  unint64_t result = qword_100913920;
  if (!qword_100913920)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100913920);
  }
  return result;
}

unint64_t sub_10013E364()
{
  unint64_t result = qword_10090C160;
  if (!qword_10090C160)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090C160);
  }
  return result;
}

void sub_10013E3A4(uint64_t a1@<X8>)
{
}

id sub_10013E3BC()
{
  return sub_10013C704();
}

uint64_t sub_10013E3D4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090C170);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090C170);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_10013E49C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (void *)v4[2];
  uint64_t v9 = (void *)v4[3];
  uint64_t v10 = v4[4];
  uint64_t v11 = v4[5];
  uint64_t v13 = v4[6];
  uint64_t v12 = v4[7];
  id v14 = objc_allocWithZone((Class)type metadata accessor for RDXPCSyncInterfacePerformer());
  id v15 = v8;
  id v16 = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10010B544(a3);
  id v19 = a4;
  id v17 = sub_100148F70(v15, v16, v11, v10, v13, v12, a1, a2, a3);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v17;
}

uint64_t sub_10013E5B8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10013E618(void *a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v34 = a4;
  int v36 = a3;
  uint64_t v38 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_10090C170);
  id v16 = a1;
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    aBlock[0] = v31;
    *(_DWORD *)uint64_t v19 = 67109378;
    LODWORD(v39) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 8) = 2082;
    uint64_t v33 = v6;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = a5;
    uint64_t v39 = (void *)sub_1000C51B8(v20, v21, aBlock);
    uint64_t v6 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a5 = v32;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "XPCSyncInterface.SyncCloudKit: Requested Trigger CloudKit sync {discretionary: %{BOOL}d, reason: %{public}s}", (uint8_t *)v19, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v34;
  *(void *)(v22 + 16) = v16;
  *(void *)(v22 + 24) = v23;
  *(void *)(v22 + 32) = a5;
  *(unsigned char *)(v22 + 40) = a2 & 1;
  *(void *)(v22 + 48) = v6;
  *(unsigned char *)(v22 + 56) = v36 & 1;
  aBlock[4] = (uint64_t)sub_100149954;
  aBlock[5] = v22;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100236C78;
  aBlock[3] = (uint64_t)&unk_1008BBA30;
  uint64_t v24 = _Block_copy(aBlock);
  id v25 = v16;
  swift_retain();
  id v26 = v6;
  uint64_t v27 = v37;
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  uint64_t v28 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v28);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v35);
  return swift_release();
}

void sub_10013EA80(void *a1, void (*a2)(id), void *a3, char a4, char *a5, char a6)
{
  id v11 = a1;
  uint64_t v12 = _sSo24ICCloudContextSyncReasona7reminddE03xpcc9InterfacecD0ABSgSo010REMXPCSyncgcD0a_tcfC_0(v11);
  if (!v12)
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_10090C170);
    id v30 = v11;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315138;
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000C51B8(v34, v35, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "XPCSyncInterface.SyncCloudKit: Unsupported sync reason - %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v41 = self;
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    uint64_t v58 = 0xD00000000000001ALL;
    unint64_t v59 = 0x80000001007CBCC0;
    v42._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v44 = [v41 internalErrorWithDebugDescription:v43];

    unint64_t v21 = (__CFString *)v44;
    a2(v44);
    goto LABEL_17;
  }
  uint64_t v13 = v12;
  uint64_t v14 = swift_allocObject();
  *(unsigned char *)(v14 + 16) = a4 & 1;
  *(void *)(v14 + 24) = v11;
  *(void *)(v14 + 32) = a5;
  *(void *)(v14 + 40) = a2;
  *(void *)(v14 + 48) = a3;
  *(void *)(v14 + 56) = v13;
  if (a6)
  {
    uint64_t v15 = qword_100906F08;
    id v16 = v11;
    id v17 = a5;
    id v56 = a3;
    swift_retain_n();
    os_log_type_t v18 = v13;
    id v19 = v16;
    uint64_t v20 = v17;
    unint64_t v21 = v18;
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_10090C170);
    id v23 = v19;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      unint64_t v54 = a2;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 8) = 2082;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000C51B8(v27, v28, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "XPCSyncInterface.SyncCloudKit: Bypassed throttler and run sync now {discretionary: %{BOOL}d, reason: %{public}s}", (uint8_t *)v26, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v54;
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10013F2FC(a4 & 1, v23, (uint64_t)v20, a2, (uint64_t)v56, (uint64_t)v21);
    swift_release();

    swift_release();
LABEL_17:

    return;
  }
  if (a4)
  {
    int v36 = *(void **)&a5[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_discretionaryCloudKitThrottler];
    uint64_t v37 = a5;
    id v38 = v11;
    swift_retain();
    uint64_t v39 = v37;
    unint64_t v40 = v13;
    sub_1004A5558(0, 0, v36, v39, (uint64_t *)sub_1001499BC, (uint64_t *)v14, (uint64_t)v40);

    swift_release();
  }
  else
  {
    uint64_t v55 = *(void *)&a5[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_cloudKitThrottler];
    id v45 = a2;
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v48 = v47;
    id v49 = v11;
    unint64_t v50 = a5;
    swift_retain_n();
    uint64_t v51 = v13;
    id v52 = v49;
    uint64_t v53 = v50;
    id v57 = v51;
    swift_retain();
    sub_1004A5DA4(v46, v48, v55, 0, v52, v53, v45, a3, v57);
    swift_release();

    swift_bridgeObjectRelease();
    swift_release_n();
  }
}

void sub_10013F2FC(char a1, void *a2, uint64_t a3, void (*a4)(id), uint64_t a5, uint64_t a6)
{
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_10090C170);
  id v13 = a2;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v31 = a6;
    uint64_t v16 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 8) = 2082;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000C51B8(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "XPCSyncInterface.SyncCloudKit: Trigger CloudKit sync {discretionary: %{BOOL}d, reason: %{public}s}", (uint8_t *)v16, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = v31;
    swift_slowDealloc();
  }
  else
  {
  }
  id v19 = [*(id *)(a3 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController) cloudContext:v31];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = swift_allocObject();
    uint64_t v22 = a1 & 1;
    *(unsigned char *)(v21 + 16) = v22;
    *(void *)(v21 + 24) = v13;
    *(void *)(v21 + 32) = a4;
    *(void *)(v21 + 40) = a5;
    aBlock[4] = (uint64_t)sub_100149A10;
    aBlock[5] = v21;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000E13D0;
    aBlock[3] = (uint64_t)&unk_1008BBAA8;
    id v23 = _Block_copy(aBlock);
    id v24 = v13;
    swift_retain();
    swift_release();
    [v20 syncWithReason:a6 discretionary:v22 completionHandler:v23];
    _Block_release(v23);
  }
  else
  {
    os_log_type_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "XPCSyncInterface.SyncCloudKit: CloudContext is nil -- can't sync to cloudKit", v27, 2u);
      swift_slowDealloc();
    }

    unint64_t v28 = self;
    NSString v29 = String._bridgeToObjectiveC()();
    id v30 = [v28 internalErrorWithDebugDescription:v29];

    id v20 = v30;
    a4(v30);
  }
}

uint64_t sub_10013F6D0(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t))
{
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10090C170);
  id v7 = a3;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v8, v9))
  {

    if (!a1) {
      goto LABEL_10;
    }
LABEL_7:
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136315138;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      sub_1000C51B8(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "XPCSyncInterface.SyncCloudKit: Sync interface cloudkit sync finished with error {error: %s}", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_10;
  }
  uint64_t v10 = swift_slowAlloc();
  uint64_t v21 = swift_slowAlloc();
  *(_DWORD *)uint64_t v10 = 67109378;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v10 + 8) = 2082;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000C51B8(v11, v12, &v21);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v8, v9, "XPCSyncInterface.SyncCloudKit: CloudKit Sync did finish {discretionary: %{BOOL}d, reason: %{public}s}", (uint8_t *)v10, 0x12u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (a1) {
    goto LABEL_7;
  }
LABEL_10:
  if (sub_10013FA38()) {
    uint64_t v18 = a1;
  }
  else {
    uint64_t v18 = 0;
  }
  return a4(v18);
}

uint64_t sub_10013FA38()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    goto LABEL_14;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (v7 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v9 != v10)
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12) {
        goto LABEL_6;
      }
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;
      if (v13 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v15 != v16)
      {
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
        goto LABEL_15;
      }
    }
LABEL_14:
    char v6 = 1;
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
LABEL_6:
  char v6 = 1;
  return v6 & 1;
}

uint64_t sub_10013FBEC(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  char v5 = v4;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_10090C170);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = v14;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "XPCSyncInterface.RestartCloudKitSync: Requested Restart CloudKit sync", v18, 2u);
    uint64_t v14 = v27;
    swift_slowDealloc();
  }

  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = v20;
  *(void *)(v19 + 32) = v21;
  *(void *)(v19 + 40) = v5;
  *(unsigned char *)(v19 + 48) = a2 & 1;
  aBlock[4] = sub_100149850;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008BB918;
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = a1;
  swift_retain();
  id v24 = v5;
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v30);
  return swift_release();
}

void sub_10013FF74(void *a1, void (*a2)(id), void *a3, char *a4, char a5)
{
  id v9 = a1;
  uint64_t v10 = _sSo24ICCloudContextSyncReasona7reminddE03xpcc9InterfacecD0ABSgSo010REMXPCSyncgcD0a_tcfC_0(v9);
  if (!v10)
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_10090C170);
    id v27 = v9;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000C51B8(v31, v32, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "XPCSyncInterface.RestartCloudKitSync: Unsupported sync reason - %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    Swift::String v42 = self;
    uint64_t v47 = 0;
    unint64_t v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    uint64_t v47 = 0xD00000000000001ALL;
    unint64_t v48 = 0x80000001007CBCC0;
    v43._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v45 = [v42 internalErrorWithDebugDescription:v44];

    uint64_t v18 = (__CFString *)v45;
    a2(v45);
    goto LABEL_16;
  }
  uint64_t v11 = v10;
  if (a5)
  {
    uint64_t v12 = qword_100906F08;
    id v13 = v9;
    uint64_t v14 = a4;
    swift_retain_n();
    uint64_t v15 = v11;
    id v16 = v13;
    os_log_type_t v17 = v14;
    uint64_t v18 = v15;
    if (v12 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E2DC(v19, (uint64_t)qword_10090C170);
    id v20 = v16;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)id v23 = 136446210;
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000C51B8(v24, v25, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "XPCSyncInterface.RestartCloudKitSync: Bypassed throttler and restart CloudKit sync now {reason: %{public}s}", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_100140568(v20, (uint64_t)v17, a2, (uint64_t)a3, v18);
    swift_release_n();

LABEL_16:
    return;
  }
  uint64_t v33 = *(void *)&a4[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_cloudKitThrottler];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v36 = v35;
  id v37 = v9;
  id v38 = a4;
  swift_retain_n();
  uint64_t v39 = v11;
  id v40 = v37;
  uint64_t v41 = v38;
  uint64_t v46 = v39;
  sub_1004A6674(v34, v36, v33, v40, v41, a2, a3, v46);
  swift_release_n();

  swift_bridgeObjectRelease();
}

void sub_100140568(void *a1, uint64_t a2, void (*a3)(id), uint64_t a4, void *a5)
{
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = sub_10008E2DC(v10, (uint64_t)qword_10090C170);
  id v12 = a1;
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v32 = a4;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = v11;
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446210;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000C51B8(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "XPCSyncInterface.RestartCloudKitSync: Restart CloudKit sync {reason: %{public}s}", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v32;
    swift_slowDealloc();
  }
  else
  {
  }
  id v18 = [*(id *)(a2 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController) cloudContext:v31];
  if (v18)
  {
    uint64_t v19 = v18;
    id v20 = (void *)swift_allocObject();
    void v20[2] = v12;
    v20[3] = v19;
    v20[4] = a5;
    v20[5] = a3;
    v20[6] = a4;
    aBlock[4] = (uint64_t)sub_1001498B0;
    aBlock[5] = (uint64_t)v20;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100236C78;
    aBlock[3] = (uint64_t)&unk_1008BB968;
    uint64_t v21 = _Block_copy(aBlock);
    id v22 = v12;
    id v23 = v19;
    id v24 = a5;
    swift_retain();
    swift_release();
    [v23 cancelEverythingWithCompletionHandler:v21];
    _Block_release(v21);
  }
  else
  {
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "XPCSyncInterface.RestartCloudKitSync: CloudContext is nil -- can't restart cloudkit sync", v27, 2u);
      swift_slowDealloc();
    }

    uint64_t v28 = self;
    NSString v29 = String._bridgeToObjectiveC()();
    id v30 = [v28 internalErrorWithDebugDescription:v29];

    id v23 = v30;
    a3(v30);
  }
}

void sub_100140918(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10090C170);
  id v11 = a1;
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136446210;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000C51B8(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "XPCSyncInterface.RestartCloudKitSync: Done cancelling works in ICCC and now calls updateCloudContextStateWithSyncOption {reason: %{public}s}", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  aBlock[4] = (uint64_t)sub_1001498E0;
  aBlock[5] = v17;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100140BA8;
  aBlock[3] = (uint64_t)&unk_1008BB9B8;
  id v18 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [a2 updateCloudContextStateWithSyncOption:1 syncReason:a3 withCompletionHandler:v18];
  _Block_release(v18);
}

void sub_100140BA8(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = *(void (**)(uint64_t, id))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, v6);
  swift_release();
}

uint64_t sub_100140CD0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v35 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v37 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_10090C170);
  swift_bridgeObjectRetain_n();
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v30 = a3;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v33 = v11;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = a4;
    aBlock[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v32 = v10;
    swift_bridgeObjectRetain();
    uint64_t v19 = Array.description.getter();
    uint64_t v34 = v8;
    uint64_t v20 = v7;
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v23 = v19;
    a3 = v30;
    uint64_t v39 = (void *)sub_1000C51B8(v23, v22, aBlock);
    uint64_t v10 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v7 = v20;
    uint64_t v8 = v34;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "(daemon) Requested trigger DataAccess sync {accountIDs: %s}", v17, 0xCu);
    swift_arrayDestroy();
    a4 = v31;
    swift_slowDealloc();
    uint64_t v11 = v33;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v24 = v36;
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = v35 & 1;
  *(void *)(v25 + 24) = a1;
  *(void *)(v25 + 32) = v24;
  *(void *)(v25 + 40) = a3;
  *(void *)(v25 + 48) = a4;
  aBlock[4] = (uint64_t)sub_1001497F8;
  aBlock[5] = v25;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100236C78;
  aBlock[3] = (uint64_t)&unk_1008BB8A0;
  os_log_type_t v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v27 = v24;
  swift_retain();
  uint64_t v28 = v37;
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v11);
  return swift_release();
}

uint64_t sub_100141134(char a1, uint64_t a2, char *a3, void (*a4)(void), uint64_t *a5)
{
  if (a1)
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10090C170);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v19 = a4;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v13 = Array.description.getter();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      sub_1000C51B8(v13, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "(daemon) Trigger DataAccess sync {accountIDs: %s}", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v19;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v20 = a2;
    long long v21 = 0u;
    memset(v22, 0, sizeof(v22));
    swift_bridgeObjectRetain();
    sub_100551BB0((uint64_t)&v20);
    a4(0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void **)&a3[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_dataAccessThrottler];
    swift_bridgeObjectRetain();
    uint64_t v17 = a3;
    swift_retain();
    sub_1004A6F24(0, 0, v16, a2, (uint64_t)v17, a4, a5);

    return swift_release();
  }
}

uint64_t sub_100141410(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_10090C170);
  swift_bridgeObjectRetain_n();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v9 = Array.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_1000C51B8(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "(daemon) Trigger DataAccess sync {accountIDs: %s}", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v13 = a1;
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  swift_bridgeObjectRetain();
  sub_100551BB0((uint64_t)&v13);
  a3(0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10014171C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  long long v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_10090C170);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v26 = v14;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Delete Application data from CloudKit", v18, 2u);
    long long v14 = v26;
    swift_slowDealloc();
  }

  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v20 = v27;
  uint64_t v21 = v28;
  void v19[2] = v5;
  void v19[3] = v20;
  uint64_t v19[4] = a4;
  void v19[5] = a1;
  v19[6] = v21;
  aBlock[4] = sub_1001496FC;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008BB7B0;
  unint64_t v22 = _Block_copy(aBlock);
  id v23 = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v29);
  return swift_release();
}

void sub_100141AA4(uint64_t a1, void (*a2)(id), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void **)(a1 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController);
  id v10 = [v9 cloudContext];
  if (v10)
  {
    unint64_t v11 = v10;
    id v12 = [v9 accountUtils];
    if (v12)
    {
      id v13 = v12;
      NSString v14 = String._bridgeToObjectiveC()();
      uint64_t v15 = (void *)swift_allocObject();
      void v15[2] = a2;
      v15[3] = a3;
      void v15[4] = v13;
      v15[5] = a4;
      v15[6] = a5;
      aBlock[4] = sub_10014975C;
      aBlock[5] = v15;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000E13D0;
      aBlock[3] = &unk_1008BB800;
      uint64_t v16 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release();
      [v11 deleteAllApplicationDataFromServerWithAccountID:v14 completion:v16];
      _Block_release(v16);

      swift_release();
      return;
    }
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10008E2DC(v23, (uint64_t)qword_10090C170);
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Missing account utils -- can't purge migration state cache", v26, 2u);
      swift_slowDealloc();
    }

    uint64_t v27 = self;
    NSString v28 = String._bridgeToObjectiveC()();
    id v29 = [v27 internalErrorWithDebugDescription:v28];

    id v30 = v29;
    a2(v29);
  }
  else
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10090C170);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "CloudContext is nil -- can't delete server data", v20, 2u);
      swift_slowDealloc();
    }

    uint64_t v21 = self;
    NSString v22 = String._bridgeToObjectiveC()();
    id v30 = [v21 internalErrorWithDebugDescription:v22];

    a2(v30);
  }
}

uint64_t sub_100141E9C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10090C170);
    swift_errorRetain();
    swift_errorRetain();
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)id v12 = 136315138;
      swift_errorRetain();
      sub_100094134(&qword_10090C320);
      uint64_t v13 = String.init<A>(describing:)();
      sub_1000C51B8(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to delete application data from server {error: %s}", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return a2(a1);
  }
  else
  {
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a2;
    *(void *)(v17 + 24) = a3;
    swift_retain();
    sub_10060243C(a5, a6, (uint64_t)sub_1001497A4, v17);
    return swift_release();
  }
}

uint64_t sub_10014210C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_10090C170);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v7 = 136315138;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v8 = String.init<A>(describing:)();
      sub_1000C51B8(v8, v9, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to purge migration state cache {error: %s}", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return a2(a1);
}

uint64_t sub_100142314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v27 = a1;
  uint64_t v28 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  unint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_10090C170);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v26 = v14;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Reset migration state", v18, 2u);
    unint64_t v14 = v26;
    swift_slowDealloc();
  }

  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v20 = v27;
  uint64_t v21 = v28;
  void v19[2] = v5;
  void v19[3] = v20;
  uint64_t v19[4] = a2;
  void v19[5] = a3;
  v19[6] = v21;
  aBlock[4] = sub_1001495F4;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008BB738;
  NSString v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  id v23 = v5;
  static DispatchQoS.unspecified.getter();
  id v30 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v29);
  return swift_release();
}

void sub_10014269C(char *a1, uint64_t a2, unint64_t a3, void (*a4)(id), uint64_t a5)
{
  unint64_t v50 = a4;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002AF210();
  uint64_t v12 = *(void **)&a1[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController];
  sub_1002AF6FC(v12);
  if (a3)
  {
    unint64_t v13 = a3;
  }
  else
  {
    id v14 = [self sharedInstance];
    id v15 = [v14 unsafeUntilSystemReady_primaryICloudACAccount];

    if (!v15)
    {
      if (qword_100906F08 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_10008E2DC(v38, (uint64_t)qword_10090C170);
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "deleteApplicationDataFromCloudKit: accountIdentifier is nil", v41, 2u);
        swift_slowDealloc();
      }

      Swift::String v42 = self;
      NSString v43 = String._bridgeToObjectiveC()();
      id v49 = [v42 internalErrorWithDebugDescription:v43];

      v50(v49);
      id v44 = v49;

      return;
    }
    id v16 = [v15 identifier];
    if (!v16)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return;
    }
    os_log_type_t v17 = v16;
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v18;

    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E2DC(v19, (uint64_t)qword_10090C170);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      NSString v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Primary account found - calling unmigration service for the account", v22, 2u);
      swift_slowDealloc();
    }
  }
  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [v12 newBackgroundContextWithAuthor:v23];

  __chkstk_darwin(v25);
  *(&v48 - 4) = a2;
  *(&v48 - 3) = v13;
  *(&v48 - 2) = (uint64_t)v24;
  NSManagedObjectContext.rem_performAndWait<A>(_:)();
  id v49 = v24;
  if (v52 == 1)
  {
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = type metadata accessor for UUID();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v11, 1, v26) != 1)
    {
      uint64_t v28 = self;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v26);
      id v30 = [v28 objectIDWithUUID:isa];

      sub_1002AF948(v30, v12);
      uint64_t v31 = (void *)swift_allocObject();
      void v31[2] = v50;
      v31[3] = a5;
      v31[4] = a1;
      void v31[5] = v30;
      swift_retain();
      uint64_t v32 = a1;
      id v33 = v30;
      sub_1002A4E50((uint64_t)sub_100149654, (uint64_t)v31);

      swift_release();
      swift_release();
      return;
    }
    goto LABEL_27;
  }
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_10008E2DC(v34, (uint64_t)qword_10090C170);
  swift_bridgeObjectRetain();
  int v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    id v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)id v37 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_1000C51B8(a2, v13, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "deleteApplicationDataFromCloudKit: accountIdentifier { %s } is not from CloudKit account", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v45 = self;
  NSString v46 = String._bridgeToObjectiveC()();
  id v47 = [v45 internalErrorWithDebugDescription:v46];

  v50(v47);
}

uint64_t sub_100143090(char a1, void *a2, void (*a3)(id), uint64_t a4, double a5, uint64_t a6, void *a7)
{
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10090C170);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 134217984;
      *(double *)&v33[1] = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Server unmigration succeed {timeElapsed: %f}", v20, 0xCu);
      swift_slowDealloc();
    }

    id v21 = [a7 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    sub_10014171C(v22, v24, (uint64_t)a3, a4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_10090C170);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to unmigrate account - server returned error", v29, 2u);
      swift_slowDealloc();
    }

    if (a2)
    {
      id v30 = a2;
    }
    else
    {
      uint64_t v31 = self;
      NSString v32 = String._bridgeToObjectiveC()();
      id v30 = [v31 internalErrorWithDebugDescription:v32];
    }
    swift_errorRetain();
    a3(v30);
    return swift_errorRelease();
  }
}

uint64_t sub_10014344C(void *a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  v22[0] = a4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(void *)&v5[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_queue];
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = v5;
  *(unsigned char *)(v17 + 32) = a2;
  *(unsigned char *)(v17 + 33) = a3;
  *(void *)(v17 + 40) = v22[0];
  *(void *)(v17 + 48) = a5;
  aBlock[4] = sub_100149440;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008BB5A8;
  unint64_t v18 = _Block_copy(aBlock);
  id v19 = a1;
  uint64_t v20 = v5;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v23);
  return swift_release();
}

uint64_t sub_1001436E8(void *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v107 = a6;
  uint64_t v106 = a5;
  int v103 = a4;
  int v102 = a3;
  uint64_t v115 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v112 = *(void *)(v7 - 8);
  uint64_t v113 = v7;
  __chkstk_darwin(v7);
  uint64_t v110 = (char *)v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for DispatchQoS();
  uint64_t v109 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  unint64_t v108 = (char *)v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v19 = (char *)v95 - v18;
  uint64_t v104 = swift_allocObject();
  *(void *)(v104 + 16) = 0;
  uint64_t v105 = swift_allocObject();
  *(void *)(v105 + 16) = 0;
  dispatch_group_t v114 = dispatch_group_create();
  id v20 = [self sharedInstance];
  id v21 = [v20 accountStore];

  uint64_t v116 = a1;
  id v22 = [a1 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.uuidString.getter();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v19, v13);
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v25 = [v21 accountWithIdentifier:v24];

  if (!v25)
  {
    __break(1u);
LABEL_30:
    __break(1u);
  }
  id v26 = [v25 displayAccount];

  if (!v26) {
    goto LABEL_30;
  }
  id v27 = [v26 identifier];

  os_log_type_t v28 = &off_100776000;
  if (!v27)
  {
LABEL_6:
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_10090C170);
    id v30 = v116;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)id v33 = 138543362;
      uint64_t aBlock = v30;
      int v35 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v30;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "migrateICloudCalDavToCloudKit: Couldn't determine the display account ID for setting flag didChooseToMigrateLocally {accountID: %{public}@}", v33, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      os_log_type_t v28 = &off_100776000;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v36 = v115;
    goto LABEL_12;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {

    sub_1001260DC((uint64_t)v12);
    goto LABEL_6;
  }
  uint64_t v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  uint64_t v36 = v115;
  long long v61 = (void *)(*(uint64_t (**)(uint64_t))(v115
                                                   + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeProvider))(v50);
  sub_1000963CC(0, &qword_10090ABC0);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v101 = v61;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v64 = [ObjCClassFromMetadata objectIDWithUUID:isa];

  id v65 = v101;
  uint64_t aBlock = 0;
  id v66 = [v101 fetchAccountWithObjectID:v64 error:&aBlock];

  if (v66)
  {
    uint64_t v67 = aBlock;
    unsigned __int8 v68 = [v66 didChooseToMigrateLocally];
    unint64_t v100 = (void **)v66;
    if (v68)
    {
      if (qword_100906F08 != -1) {
        swift_once();
      }
      uint64_t v69 = type metadata accessor for Logger();
      sub_10008E2DC(v69, (uint64_t)qword_10090C170);
      id v70 = v27;
      uint64_t v71 = v116;
      uint64_t v72 = (void **)v70;
      uint64_t v73 = v71;
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.default.getter();
      int v76 = v75;
      id v99 = v74;
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v77 = swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        id v96 = v23;
        uint64_t v79 = (void *)v78;
        *(_DWORD *)uint64_t v77 = 138543618;
        LODWORD(v97) = v76;
        v95[2] = v77 + 4;
        v95[1] = v77 + 12;
        uint64_t aBlock = v72;
        v95[3] = &v119;
        id v80 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v79 = v27;
        id v98 = v80;

        *(_WORD *)(v77 + 12) = 2114;
        uint64_t aBlock = v73;
        uint64_t v81 = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v82 = v79;
        uint64_t v23 = v96;
        v82[1] = v73;

        uint64_t v83 = v99;
        _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v97, "migrateICloudCalDavToCloudKit: Account flag didChooseToMigrateLocally is already true {displayACAccountID: %{public}@, accountID: %{public}@}", (uint8_t *)v77, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v73 = v98;
        os_log_type_t v28 = &off_100776000;
        unint64_t v84 = (void **)v101;
        uint64_t v85 = v100;
      }
      else
      {

        unint64_t v84 = v73;
        os_log_type_t v28 = &off_100776000;
        uint64_t v85 = v100;
        uint64_t v83 = v99;
      }
    }
    else
    {
      id v99 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:v65];
      id v98 = (void **)[v99 updateAccount:v66];
      [v98 setDidChooseToMigrateLocally:1];
      dispatch_group_t v87 = v114;
      dispatch_group_enter(v114);
      uint64_t v97 = *(void *)(v36 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_queue);
      uint64_t v88 = (void *)swift_allocObject();
      uint64_t v89 = v116;
      v88[2] = v27;
      v88[3] = v89;
      v88[4] = v87;
      uint64_t v122 = sub_1001495B8;
      id v123 = v88;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v119 = 1107296256;
      uint64_t v120 = sub_1000E13D0;
      unint64_t v121 = &unk_1008BB6C0;
      uint64_t v90 = _Block_copy(&aBlock);
      id v91 = v27;
      id v92 = v89;
      uint64_t v93 = v87;
      os_log_type_t v28 = &off_100776000;
      swift_release();
      double v94 = v99;
      [v99 saveWithQueue:v97 completion:v90];
      _Block_release(v90);

      uint64_t v83 = v94;
      uint64_t v73 = (void **)v101;
      unint64_t v84 = v100;
      uint64_t v85 = v98;
    }

    v23(v16, v13);
  }
  else
  {
    long long v86 = aBlock;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v23(v16, v13);
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E2DC(v51, (uint64_t)qword_10090C170);
    uint64_t v52 = v116;
    swift_errorRetain();
    uint64_t v53 = v52;
    swift_errorRetain();
    unint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = swift_slowAlloc();
      id v57 = (void *)swift_slowAlloc();
      id v101 = (id)swift_slowAlloc();
      id v117 = v53;
      uint64_t aBlock = (void **)v101;
      *(_DWORD *)uint64_t v56 = 138543618;
      uint64_t v58 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v57 = v53;

      *(_WORD *)(v56 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v59 = Error.rem_errorDescription.getter();
      id v117 = (void *)sub_1000C51B8(v59, v60, (uint64_t *)&aBlock);
      uint64_t v36 = v115;
      os_log_type_t v28 = &off_100776000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "migrateICloudCalDavToCloudKit: Failed to set flag didChooseToMigrateLocally before migration {accountID: %{public}@, error: %{public}s}", (uint8_t *)v56, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
LABEL_12:
  sub_1002AF948(v116, *(void **)(v36 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController));
  uint64_t v116 = v37;
  dispatch_group_t v38 = v114;
  dispatch_group_enter(v114);
  uint64_t v39 = (void *)swift_allocObject();
  uint64_t v40 = v104;
  uint64_t v41 = v105;
  void v39[2] = v104;
  v39[3] = v41;
  v39[4] = v38;
  Swift::String v42 = v38;
  swift_retain();
  swift_retain();
  sub_1002A53DC(v102 & 1, v103 & 1, (uint64_t)sub_10014950C, (uint64_t)v39);
  swift_release();
  NSString v43 = (void *)swift_allocObject();
  uint64_t v44 = v107;
  v43[2] = v106;
  v43[3] = v44;
  v43[4] = v40;
  v43[5] = v41;
  uint64_t v122 = sub_100149564;
  id v123 = v43;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v119 = *((void *)v28 + 447);
  uint64_t v120 = sub_100236C78;
  unint64_t v121 = &unk_1008BB670;
  id v45 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  NSString v46 = v108;
  static DispatchQoS.unspecified.getter();
  id v117 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  id v47 = v110;
  uint64_t v48 = v113;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v45);

  swift_release();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v47, v48);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v46, v111);
  swift_release();
  swift_release();
  return swift_release();
}

void sub_100144620(uint64_t a1, void *a2, void *a3, NSObject *a4)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_10090C170);
    id v8 = a2;
    id v9 = a3;
    swift_errorRetain();
    id v10 = v8;
    id v11 = v9;
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138543874;
      log = v12;
      id v16 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v10;

      *(_WORD *)(v14 + 12) = 2114;
      id v17 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v15[1] = v11;

      *(_WORD *)(v14 + 22) = 2082;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v18 = String.init<A>(describing:)();
      sub_1000C51B8(v18, v19, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v13, "migrateICloudCalDavToCloudKit: Failed to save flag didChooseToMigrateLocally before migration {displayACAccountID: %{public}@, accountID: %{public}@, error: %{public}s}", (uint8_t *)v14, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E2DC(v20, (uint64_t)qword_10090C170);
    id v21 = a2;
    id v22 = a3;
    id v23 = v21;
    id v24 = v22;
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      os_log_type_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138543618;
      id v29 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v28 = v23;

      *(_WORD *)(v27 + 12) = 2114;
      uint64_t v32 = (uint64_t)v24;
      id v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v28[1] = v24;

      _os_log_impl((void *)&_mh_execute_header, v25, v26, "migrateICloudCalDavToCloudKit: Saved flag didChooseToMigrateLocally before migration {displayACAccountID: %{public}@, accountID: %{public}@}", (uint8_t *)v27, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  dispatch_group_leave(a4);
}

void sub_100144AD4(void *a1, char a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  if (a2)
  {
    swift_beginAccess();
    *(void *)(a4 + 16) = a1;
    swift_errorRetain();
    swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    id v8 = *(void **)(a3 + 16);
    *(void *)(a3 + 16) = a1;
    id v9 = a1;
  }
  dispatch_group_leave(a5);
}

void sub_100144B70(void (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t v7 = *(void **)(a3 + 16);
  swift_beginAccess();
  uint64_t v8 = *(void *)(a4 + 16);
  id v9 = v7;
  swift_errorRetain();
  a1(v7, v8);
  swift_errorRelease();
}

uint64_t sub_100144C68(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5, void *aBlock, int a7, uint64_t a8, void (*a9)(id, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  id v16 = a3;
  id v17 = a1;
  a9(v16, a4, a5, a8, v15);

  return swift_release();
}

uint64_t sub_100144D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)&v4[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_queue];
  id v16 = (void *)swift_allocObject();
  void v16[2] = a1;
  v16[3] = a2;
  void v16[4] = v4;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = sub_1001492F8;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008BB508;
  id v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  uint64_t v18 = v4;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v22 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v21);
  return swift_release();
}

void sub_100144FC0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, id), uint64_t a5)
{
  if (a2)
  {
LABEL_9:
    uint64_t v15 = self;
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v17 = [v15 newCloudContainerForAccountID:v16];

    id v18 = [v17 privateCloudDatabase];
    sub_1000963CC(0, &qword_10090C328);
    unint64_t v19 = (NSPredicate *)[self predicateWithValue:1];
    v20._countAndFlagsBits = 0x6F6974617267694DLL;
    v20._object = (void *)0xEE0065686361436ELL;
    Class isa = CKQuery.init(recordType:predicate:)(v20, v19).super.isa;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v22 = objc_allocWithZone((Class)CKRecordZoneID);
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v25 = [v22 initWithZoneName:v23 ownerName:v24 databaseScope:2];

    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = a4;
    *(void *)(v26 + 24) = a5;
    id v27 = v25;
    swift_retain();
    CKDatabase.fetch(withQuery:inZoneWith:desiredKeys:resultsLimit:completionHandler:)();

    swift_release();
    return;
  }
  id v7 = [self sharedInstance];
  id v8 = [v7 unsafeUntilSystemReady_primaryICloudACAccount];

  if (v8)
  {
    id v9 = [v8 identifier];
    if (!v9)
    {
      __break(1u);
      return;
    }
    uint64_t v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_10090C170);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Use primary account as default for debug downloading migration cache", v14, 2u);
      swift_slowDealloc();
    }

    goto LABEL_9;
  }
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_10008E2DC(v28, (uint64_t)qword_10090C170);
  id v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "debugDownloadMigrationCache: accountIdentifier is nil", v31, 2u);
    swift_slowDealloc();
  }

  uint64_t v32 = self;
  NSString v33 = String._bridgeToObjectiveC()();
  id v34 = [v32 internalErrorWithDebugDescription:v33];

  a4(0, v34);
}

void sub_10014549C(uint64_t a1, void *a2, char a3, void (*a4)(void *, id))
{
  if (a3)
  {
    uint64_t v59 = self;
    swift_errorRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    v60._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    NSString v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v62 = [v59 internalErrorWithDebugDescription:v61];

    a4(0, v62);
    sub_10014931C(a1, a2, 1);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v72 = (void *)sub_1002EEAE4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    id v7 = _swiftEmptyDictionarySingleton;
LABEL_40:
    if (v7[2])
    {
      swift_bridgeObjectRelease();
      unint64_t v63 = self;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      sub_1000963CC(0, &qword_100914310);
      sub_100149374();
      uint64_t v64 = Dictionary.description.getter();
      id v66 = v65;
      swift_bridgeObjectRelease();
      v67._countAndFlagsBits = v64;
      v67._object = v66;
      String.append(_:)(v67);
      swift_bridgeObjectRelease();
      NSString v68 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v69 = [v63 internalErrorWithDebugDescription:v68];

      a4(0, v69);
    }
    else
    {
      swift_bridgeObjectRelease();
      a4(v72, 0);
      swift_bridgeObjectRelease();
    }
    return;
  }
  id v70 = a4;
  id v7 = _swiftEmptyDictionarySingleton;
  id v8 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v11 = (void *)*((void *)v8 - 2);
    uint64_t v10 = (void *)*((void *)v8 - 1);
    if (*v8) {
      break;
    }
    sub_100149368(*((void **)v8 - 1), 0);
    sub_100149368(v10, 0);
    id v73 = v11;
    id v28 = [v10 recordID];
    id v29 = [v28 recordName];

    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;

    sub_1000963CC(0, (unint64_t *)&qword_100909E80);
    CKRecordKeyValueSetting.subscript.getter();
    if (v75 >> 60 == 15)
    {
      swift_bridgeObjectRetain();
      unint64_t v33 = sub_1001806F8(v30, v32);
      char v35 = v34;
      swift_bridgeObjectRelease();
      if (v35)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_10031A0A0();
        }
        swift_bridgeObjectRelease();
        uint64_t v36 = (uint64_t *)(v72[7] + 16 * v33);
        uint64_t v37 = *v36;
        unint64_t v38 = v36[1];
        sub_1002C1FAC(v33, (uint64_t)v72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100097F34(v37, v38);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_10011C62C(v10, 0);

      sub_10011C62C(v10, 0);
    }
    else
    {
      uint64_t v71 = v7;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v41 = sub_1001806F8(v30, v32);
      uint64_t v42 = v72[2];
      BOOL v43 = (v40 & 1) == 0;
      uint64_t v44 = v42 + v43;
      if (__OFADD__(v42, v43)) {
        goto LABEL_44;
      }
      char v45 = v40;
      if (v72[3] >= v44)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_10031A0A0();
        }
      }
      else
      {
        sub_10031166C(v44, isUniquelyReferenced_nonNull_native);
        unint64_t v46 = sub_1001806F8(v30, v32);
        if ((v45 & 1) != (v47 & 1)) {
          goto LABEL_48;
        }
        unint64_t v41 = v46;
      }
      if (v45)
      {
        uint64_t v53 = v72[7] + 16 * v41;
        sub_100097F34(*(void *)v53, *(void *)(v53 + 8));
        *(void *)uint64_t v53 = v74;
        *(void *)(v53 + 8) = v75;
      }
      else
      {
        v72[(v41 >> 6) + 8] |= 1 << v41;
        unint64_t v54 = (uint64_t *)(v72[6] + 16 * v41);
        *unint64_t v54 = v30;
        v54[1] = v32;
        os_log_type_t v55 = (void *)(v72[7] + 16 * v41);
        *os_log_type_t v55 = v74;
        v55[1] = v75;
        uint64_t v56 = v72[2];
        BOOL v50 = __OFADD__(v56, 1);
        uint64_t v57 = v56 + 1;
        if (v50) {
          goto LABEL_46;
        }
        v72[2] = v57;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10011C62C(v10, 0);

      sub_10011C62C(v10, 0);
      id v7 = v71;
    }
LABEL_6:
    v8 += 24;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      a4 = v70;
      goto LABEL_40;
    }
  }
  swift_getErrorValue();
  id v12 = v11;
  sub_100149368(v10, 1);
  sub_100149368(v10, 1);
  id v13 = v12;
  uint64_t v14 = Error.localizedDescription.getter();
  uint64_t v16 = v15;
  char v17 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v74 = v7;
  unint64_t v19 = sub_1003075EC((uint64_t)v13);
  Swift::String v20 = v7;
  uint64_t v21 = v7[2];
  BOOL v22 = (v18 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (!__OFADD__(v21, v22))
  {
    char v24 = v18;
    if (v20[3] < v23)
    {
      sub_100311384(v23, v17);
      unint64_t v25 = sub_1003075EC((uint64_t)v13);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_47;
      }
      unint64_t v19 = v25;
      id v27 = v74;
      if ((v24 & 1) == 0) {
        goto LABEL_24;
      }
LABEL_4:
      id v9 = (uint64_t *)(v27[7] + 16 * v19);
      swift_bridgeObjectRelease();
      *id v9 = v14;
      v9[1] = v16;
      id v7 = v27;
LABEL_5:

      swift_bridgeObjectRelease();
      sub_10011C62C(v10, 1);
      sub_10011C62C(v10, 1);
      goto LABEL_6;
    }
    if (v17)
    {
      id v27 = v74;
      if (v18) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_100319EE8();
      id v27 = v74;
      if (v24) {
        goto LABEL_4;
      }
    }
LABEL_24:
    v27[(v19 >> 6) + 8] |= 1 << v19;
    *(void *)(v27[6] + 8 * v19) = v13;
    uint64_t v48 = (uint64_t *)(v27[7] + 16 * v19);
    *uint64_t v48 = v14;
    v48[1] = v16;
    uint64_t v49 = v27[2];
    BOOL v50 = __OFADD__(v49, 1);
    uint64_t v51 = v49 + 1;
    if (v50) {
      goto LABEL_45;
    }
    id v7 = v27;
    v27[2] = v51;
    id v52 = v13;
    goto LABEL_5;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  sub_1000963CC(0, &qword_100914310);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_48:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_100145C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    if (a2)
    {
LABEL_3:
      uint64_t v6 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    v5.super.Class isa = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

uint64_t sub_100145D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSDictionary v5 = v4;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_10090C170);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    char v18 = (uint8_t *)swift_slowAlloc();
    char v26 = v14;
    *(_WORD *)char v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Manual fetch user record", v18, 2u);
    uint64_t v14 = v26;
    swift_slowDealloc();
  }

  unint64_t v19 = (void *)swift_allocObject();
  uint64_t v20 = v27;
  uint64_t v21 = v28;
  void v19[2] = v5;
  void v19[3] = v20;
  uint64_t v19[4] = v21;
  void v19[5] = a1;
  v19[6] = a2;
  aBlock[4] = sub_1001492AC;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008BB440;
  BOOL v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v23 = v5;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v29);
  return swift_release();
}

void sub_10014608C(uint64_t a1, void (*a2)(void, id), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = *(void **)(a1 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController);
  id v10 = [v9 cloudContext];
  if (v10)
  {
    id v48 = v10;
    if (a5)
    {
      unint64_t v11 = a5;
LABEL_19:
      swift_bridgeObjectRetain();
      NSString v27 = String._bridgeToObjectiveC()();
      id v28 = [v9 newBackgroundContextWithAuthor:v27];

      __chkstk_darwin(v29);
      NSManagedObjectContext.rem_performAndWait<A>(_:)();
      if (aBlock == 1)
      {
        NSString v30 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v31 = swift_allocObject();
        *(void *)(v31 + 16) = a2;
        *(void *)(v31 + 24) = a3;
        uint64_t v53 = sub_1001492C4;
        uint64_t v54 = v31;
        uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
        unint64_t v50 = 1107296256;
        uint64_t v51 = sub_100102758;
        id v52 = &unk_1008BB490;
        uint64_t v32 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        [v48 fetchUserRecordWithAccountID:v30 completionHandler:v32];

        _Block_release(v32);
      }
      else
      {
        if (qword_100906F08 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_10008E2DC(v33, (uint64_t)qword_10090C170);
        swift_bridgeObjectRetain_n();
        char v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          uint64_t aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v36 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v55 = sub_1000C51B8(a4, v11, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "fetchUserRecord: accountIdentifier { %s } is not from CloudKit account", v36, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v44 = self;
        uint64_t aBlock = 0;
        unint64_t v50 = 0xE000000000000000;
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease();
        uint64_t aBlock = a4;
        unint64_t v50 = v11;
        v45._countAndFlagsBits = 0xD00000000000001FLL;
        v45._object = (void *)0x80000001007CA6B0;
        String.append(_:)(v45);
        NSString v46 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v47 = [v44 internalErrorWithDebugDescription:v46];

        a2(0, v47);
      }
      return;
    }
    id v18 = [self sharedInstance];
    id v19 = [v18 unsafeUntilSystemReady_primaryICloudACAccount];

    if (v19)
    {
      id v20 = [v19 identifier];
      if (!v20)
      {
        __break(1u);
        return;
      }
      uint64_t v21 = v20;
      a4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v22;

      if (qword_100906F08 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E2DC(v23, (uint64_t)qword_10090C170);
      char v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        char v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Use primary account as default for fetching user record", v26, 2u);
        swift_slowDealloc();
      }

      goto LABEL_19;
    }
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_10008E2DC(v37, (uint64_t)qword_10090C170);
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, v39))
    {
      char v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "fetchUserRecord: accountIdentifier is nil", v40, 2u);
      swift_slowDealloc();
    }

    unint64_t v41 = self;
    NSString v42 = String._bridgeToObjectiveC()();
    id v43 = [v41 internalErrorWithDebugDescription:v42];

    a2(0, v43);
  }
  else
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_10090C170);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "CloudContext is nil -- can't fetch user record", v15, 2u);
      swift_slowDealloc();
    }

    uint64_t v16 = self;
    NSString v17 = String._bridgeToObjectiveC()();
    id v48 = [v16 internalErrorWithDebugDescription:v17];

    a2(0, v48);
  }
}

uint64_t sub_100146B8C(void *a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v11 = _Block_copy(aBlock);
  if (a3)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    a3 = v13;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v11;
  id v15 = a1;
  a7(v12, a3, a6, v14);

  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_100146C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_100146CC8(int a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v33 = a7;
  uint64_t v30 = a6;
  uint64_t v31 = a4;
  int v32 = a2;
  int v29 = a1;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  NSString v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_10090C170);
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    id v28 = v17;
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Force set migration state", v21, 2u);
    NSString v17 = v28;
    swift_slowDealloc();
  }

  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v30;
  *(void *)(v22 + 16) = v8;
  *(void *)(v22 + 24) = v23;
  uint64_t v24 = v31;
  *(void *)(v22 + 32) = v33;
  *(void *)(v22 + 40) = v24;
  *(void *)(v22 + 48) = a5;
  *(unsigned char *)(v22 + 56) = v29 & 1;
  *(unsigned char *)(v22 + 57) = v32 & 1;
  *(unsigned char *)(v22 + 58) = a3 & 1;
  aBlock[4] = sub_1001491C4;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008BB350;
  os_log_type_t v25 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v26 = v8;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v35 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v34);
  return swift_release();
}

void sub_100147084(uint64_t a1, void (*a2)(id), uint64_t a3, uint64_t a4, unint64_t a5, char a6, char a7, char a8)
{
  uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController);
  id v16 = [v15 cloudContext];
  if (!v16)
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E2DC(v20, (uint64_t)qword_10090C170);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "CloudContext is nil -- can't set migration state", v23, 2u);
      swift_slowDealloc();
    }

    uint64_t v24 = self;
    NSString v25 = String._bridgeToObjectiveC()();
    id v67 = [v24 internalErrorWithDebugDescription:v25];

    a2(v67);
    goto LABEL_15;
  }
  NSString v17 = v16;
  id v18 = [v15 accountUtils];
  if (!v18)
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_10090C170);
    NSString v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      int v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "AccountUtils is nil -- can't clear migration state cache", v29, 2u);
      swift_slowDealloc();
    }

    uint64_t v30 = self;
    NSString v31 = String._bridgeToObjectiveC()();
    id v67 = [v30 internalErrorWithDebugDescription:v31];

    a2(v67);
LABEL_15:

    return;
  }
  id v66 = v18;
  if (a5)
  {
    uint64_t v64 = a2;
    id v65 = v17;
    unint64_t v19 = a5;
LABEL_25:
    swift_bridgeObjectRetain();
    NSString v41 = String._bridgeToObjectiveC()();
    id v42 = [v15 newBackgroundContextWithAuthor:v41];

    __chkstk_darwin(v43);
    NSManagedObjectContext.rem_performAndWait<A>(_:)();
    if (LOBYTE(aBlock[0]) == 1)
    {
      NSString v44 = String._bridgeToObjectiveC()();
      uint64_t v45 = swift_allocObject();
      uint64_t v46 = a6 & 1;
      *(unsigned char *)(v45 + 16) = v46;
      *(unsigned char *)(v45 + 17) = a7 & 1;
      *(unsigned char *)(v45 + 18) = a8 & 1;
      *(void *)(v45 + 24) = v64;
      *(void *)(v45 + 32) = a3;
      *(void *)(v45 + 40) = v66;
      *(void *)(v45 + 48) = a4;
      *(void *)(v45 + 56) = v19;
      aBlock[4] = (uint64_t)sub_100149240;
      aBlock[5] = v45;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000E13D0;
      aBlock[3] = (uint64_t)&unk_1008BB3A0;
      id v47 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      [v65 setMigrationStateToDidChooseToMigrate:v46 didFinishMigration:a7 & 1 createZoneAccountIfFinishMigration:a8 & 1 accountID:v44 completionHandler:v47];

      swift_release();
      _Block_release(v47);
    }
    else
    {
      if (qword_100906F08 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      sub_10008E2DC(v48, (uint64_t)qword_10090C170);
      swift_bridgeObjectRetain();
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v51 = 136315138;
        swift_bridgeObjectRetain();
        aBlock[10] = sub_1000C51B8(a4, v19, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "setMigrationStateToDidChooseToMigrate: accountIdentifier { %s } is not from CloudKit account", v51, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v59 = self;
      NSString v60 = String._bridgeToObjectiveC()();
      id v61 = [v59 internalErrorWithDebugDescription:v60];

      id v62 = v61;
      v64(v61);

      swift_release();
    }
    return;
  }
  uint64_t v63 = a3;
  id v32 = [self sharedInstance];
  id v33 = [v32 unsafeUntilSystemReady_primaryICloudACAccount];

  if (v33)
  {
    id v65 = v17;
    id v34 = [v33 identifier];
    if (!v34)
    {
      __break(1u);
      return;
    }
    os_log_type_t v35 = v34;
    a4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v36;

    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v64 = a2;
    uint64_t v37 = type metadata accessor for Logger();
    sub_10008E2DC(v37, (uint64_t)qword_10090C170);
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      char v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Use primary account as default for calling set migration state", v40, 2u);
      swift_slowDealloc();
    }

    a3 = v63;
    goto LABEL_25;
  }
  if (qword_100906F08 != -1) {
    swift_once();
  }
  uint64_t v52 = type metadata accessor for Logger();
  sub_10008E2DC(v52, (uint64_t)qword_10090C170);
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "setMigrationStateToDidChooseToMigrate: accountIdentifier is nil", v55, 2u);
    swift_slowDealloc();
  }

  uint64_t v56 = self;
  NSString v57 = String._bridgeToObjectiveC()();
  id v58 = [v56 internalErrorWithDebugDescription:v57];

  a2(v58);

  swift_release();
}

uint64_t sub_100147CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_10090C170);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315906;
      swift_errorRetain();
      sub_100094134(&qword_10090C320);
      uint64_t v16 = String.init<A>(describing:)();
      sub_1000C51B8(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v15 + 12) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 18) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 24) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to set migration state {error: %s, didChooseToMigrate: %{BOOL}d, didFinishMigration: %{BOOL}d, createZoneAccountIfFinishMigration: %{BOOL}d", (uint8_t *)v15, 0x1Eu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return a5(a1);
  }
  else
  {
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a5;
    *(void *)(v19 + 24) = a6;
    swift_retain();
    sub_10060243C(a8, a9, (uint64_t)sub_10011E21C, v19);
    return swift_release();
  }
}

uint64_t sub_1001480CC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(void *)&v3[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_queue];
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v3;
  v15[3] = a1;
  void v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = sub_100149150;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008BB2D8;
  uint64_t v16 = _Block_copy(aBlock);
  unint64_t v17 = v3;
  id v18 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_100148354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10010B4E8(a1 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_clientIdentity, (uint64_t)v12);
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  return sub_1003B5ADC((uint64_t)v12, (uint64_t)sub_100149174, (uint64_t)v8);
}

void sub_10014864C(uint64_t a1, void *a2, void (*a3)(void))
{
  id v5 = a2;
  id v6 = (void *)sub_100695D58((uint64_t)v5);
  if (!v3)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (void *)sub_10055144C(v6, 0);

    if (v8)
    {
      id v9 = [v8 ckServerRecord];
      a3();
    }
    else
    {
      if (qword_100906F08 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_10008E2DC(v10, (uint64_t)qword_10090C170);
      id v11 = v5;
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v15 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v14 = 138543362;
        id v16 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v15 = v11;

        _os_log_impl((void *)&_mh_execute_header, v12, v13, "fetchServerRecord: Tried to fetch non-existent object {remObjectID: %{public}@}", v14, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [self noSuchObjectErrorWithObjectID:v11];
      swift_willThrow();
    }
  }
}

void sub_100148934()
{
  uint64_t v1 = v0;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_10090C170);
    id v5 = v3;
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_t osloga = v1;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      id v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      id v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v9 = v3;

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received request to observe CloudKit traffic {clientConnection: %@}", v8, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v1 = osloga;
      swift_slowDealloc();
    }
    else
    {
    }
    os_log_type_t v14 = (objc_class *)type metadata accessor for RDStoreControllerCloudKitNetworkActivityObserver();
    id v15 = objc_allocWithZone(v14);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v19.receiver = v15;
    v19.super_class = v14;
    id v16 = [super init];
    [*(id *)((char *)&v1->isa + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController) startObservingCloudKitNetworkActivityWithObserver:v16];
  }
  else
  {
    if (qword_100906F08 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_10090C170);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Perform has no clientConnection. Is this really an XPC call? Without a real XPC call, I cannot ask the storeController to actively notify anything.", v13, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100148D8C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for RDXPCSyncInterfacePerformerFactory()
{
  return self;
}

uint64_t type metadata accessor for RDXPCSyncInterfacePerformer()
{
  return self;
}

void *sub_100148DDC(void *a1, uint64_t a2, void *a3)
{
  void v3[2] = a3;
  v3[3] = a1;
  type metadata accessor for RDThrottler();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 1;
  *(void *)(v7 + 24) = 0x403E000000000000;
  strcpy((char *)(v7 + 32), "CloudKit Sync");
  *(_WORD *)(v7 + 46) = -4864;
  *(void *)(v7 + 48) = a3;
  id v8 = a3;
  id v9 = a1;
  Date.init(timeIntervalSinceNow:)();
  *(void *)(v7 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount) = 1;
  v3[5] = v7;
  id v10 = (void *)swift_allocObject();
  void v10[2] = 1;
  v10[3] = 0x403E000000000000;
  void v10[4] = 0xD00000000000001DLL;
  v10[5] = 0x80000001007CBCE0;
  void v10[6] = v8;
  id v11 = v8;
  Date.init(timeIntervalSinceNow:)();
  *(void *)((char *)v10 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount) = 1;
  v3[4] = v10;
  os_log_type_t v12 = (void *)swift_allocObject();
  v12[2] = 1;
  v12[3] = 0x403E000000000000;
  void v12[4] = 0x6563634161746144;
  v12[5] = 0xEF636E7953207373;
  v12[6] = v11;
  Date.init(timeIntervalSinceNow:)();
  *(void *)((char *)v12 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount) = 1;
  v3[6] = v12;
  v3[7] = a2;
  return v3;
}

id sub_100148F70(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(void *)&v9[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_queue] = a1;
  *(void *)&v9[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController] = a2;
  *(void *)&v9[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_cloudKitThrottler] = a3;
  *(void *)&v9[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_discretionaryCloudKitThrottler] = a4;
  *(void *)&v9[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_dataAccessThrottler] = a5;
  *(void *)&v9[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_dataAccessRequestsWriter] = a6;
  unint64_t v17 = &v9[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeProvider];
  *(void *)unint64_t v17 = a7;
  *((void *)v17 + 1) = a8;
  sub_10010B4E8(a9, (uint64_t)&v9[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_clientIdentity]);
  swift_unknownObjectWeakAssign();
  v23.receiver = v9;
  v23.super_class = ObjectType;
  id v18 = a1;
  id v19 = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return [super init];
}

uint64_t sub_1001490D0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100149108()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100149150()
{
  return sub_100148354(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10014915C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10014916C()
{
  return swift_release();
}

void sub_100149174(uint64_t a1)
{
  sub_10014864C(a1, *(void **)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_100149194()
{
  return sub_100149690((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 59);
}

void sub_1001491C4()
{
  sub_100147084(*(void *)(v0 + 16), *(void (**)(id))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56), *(unsigned char *)(v0 + 57), *(unsigned char *)(v0 + 58));
}

uint64_t sub_1001491E0@<X0>(unsigned char *a1@<X8>)
{
  return sub_10011D884(a1);
}

uint64_t sub_1001491F8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100149240(uint64_t a1)
{
  return sub_100147CF4(a1, *(unsigned __int8 *)(v1 + 16), *(unsigned __int8 *)(v1 + 17), *(unsigned __int8 *)(v1 + 18), *(uint64_t (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_10014927C()
{
  return sub_100149690((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 56);
}

uint64_t sub_1001492AC()
{
  return sub_1001498C8((uint64_t (*)(void, void, void, void, void))sub_10014608C);
}

uint64_t sub_1001492C4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_1001492EC(uint64_t a1, uint64_t a2)
{
  sub_100145C5C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1001492F8()
{
  return sub_1001498C8((uint64_t (*)(void, void, void, void, void))sub_100144FC0);
}

void sub_100149310(uint64_t a1, void *a2, char a3)
{
  sub_10014549C(a1, a2, a3 & 1, *(void (**)(void *, id))(v3 + 16));
}

void sub_10014931C(uint64_t a1, void *a2, char a3)
{
  if (a3)
  {
    swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

id sub_100149368(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

unint64_t sub_100149374()
{
  unint64_t result = qword_10090C330;
  if (!qword_10090C330)
  {
    sub_1000963CC(255, &qword_100914310);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C330);
  }
  return result;
}

void sub_1001493DC(uint64_t a1, uint64_t a2)
{
  sub_100146C58(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1001493F8()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100149440()
{
  return sub_1001436E8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned __int8 *)(v0 + 33), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100149454()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10014948C()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001494C4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10014950C(void *a1, char a2)
{
  sub_100144AD4(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(NSObject **)(v2 + 32));
}

uint64_t sub_10014951C()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100149564()
{
  sub_100144B70(*(void (**)(void *, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100149570()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1001495B8(uint64_t a1)
{
  sub_100144620(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t sub_1001495C4()
{
  return sub_100149690((void (*)(void))&_swift_bridgeObjectRelease, (void (*)(void))&_swift_release, 56);
}

uint64_t sub_1001495F4()
{
  return sub_1001498C8((uint64_t (*)(void, void, void, void, void))sub_10014269C);
}

uint64_t sub_10014960C()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100149654(char a1, void *a2, double a3)
{
  return sub_100143090(a1, a2, *(void (**)(id))(v3 + 16), *(void *)(v3 + 24), a3, *(void *)(v3 + 32), *(void **)(v3 + 40));
}

uint64_t sub_100149660()
{
  return sub_100149690((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 56);
}

uint64_t sub_100149690(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  a1(*(void *)(v3 + 32));
  a2(*(void *)(v3 + 48));

  return _swift_deallocObject(v3, a3, 7);
}

uint64_t sub_1001496FC()
{
  return sub_1001498C8((uint64_t (*)(void, void, void, void, void))sub_100141AA4);
}

uint64_t sub_100149714()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10014975C(uint64_t a1)
{
  return sub_100141E9C(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_10014976C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001497A4(uint64_t a1)
{
  return sub_10014210C(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1001497B0()
{
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001497F8()
{
  return sub_100141134(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(char **)(v0 + 32), *(void (**)(void))(v0 + 40), *(uint64_t **)(v0 + 48));
}

uint64_t sub_100149808()
{
  swift_release();

  return _swift_deallocObject(v0, 49, 7);
}

void sub_100149850()
{
  sub_10013FF74(*(void **)(v0 + 16), *(void (**)(id))(v0 + 24), *(void **)(v0 + 32), *(char **)(v0 + 40), *(unsigned char *)(v0 + 48));
}

uint64_t sub_100149860()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001498B0()
{
  return sub_1001498C8((uint64_t (*)(void, void, void, void, void))sub_100140918);
}

uint64_t sub_1001498C8(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1001498E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

uint64_t sub_10014990C()
{
  swift_release();

  return _swift_deallocObject(v0, 57, 7);
}

void sub_100149954()
{
  sub_10013EA80(*(void **)(v0 + 16), *(void (**)(id))(v0 + 24), *(void **)(v0 + 32), *(unsigned char *)(v0 + 40), *(char **)(v0 + 48), *(unsigned char *)(v0 + 56));
}

uint64_t sub_10014996C()
{
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1001499BC()
{
  sub_10013F2FC(*(unsigned char *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void (**)(id))(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1001499D0()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100149A10(uint64_t a1)
{
  return sub_10013F6D0(a1, *(unsigned __int8 *)(v1 + 16), *(void **)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

uint64_t sub_100149ADC()
{
  sub_10014A308(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDPublicCloudDatabaseControllerMock()
{
  return self;
}

uint64_t destroy for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return swift_errorRelease();
  }
  else {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
}

uint64_t initializeWithCopy for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    uint64_t v4 = *a2;
    swift_errorRetain();
    *(void *)a1 = v4;
    char v5 = 1;
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t))(v6 - 8))(a1);
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_errorRelease();
    }
    else {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *a2;
      swift_errorRetain();
      *(void *)a1 = v6;
      char v7 = 1;
    }
    else
    {
      uint64_t v8 = a2[3];
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v8 - 8))(a1, a2);
      char v7 = 0;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

__n128 initializeWithTake for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_errorRelease();
    }
    else {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
    }
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100149E14(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_100149E30(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock()
{
  return &type metadata for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock;
}

uint64_t sub_100149E68(uint64_t a1, uint64_t (*a2)(void, void))
{
  return a2(0, 0);
}

uint64_t sub_100149E9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(0, 0);
}

uint64_t sub_100149ECC(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5)
{
  return sub_100149F00(a3, a4, a5);
}

uint64_t sub_100149F00(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  os_log_type_t v22 = a1;
  sub_100096058((uint64_t *)&unk_10090ABB0);
  uint64_t v5 = type metadata accessor for Result();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v20 - v7);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v11 = (char *)&v20 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  __chkstk_darwin(v13);
  id v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10014A2D0((uint64_t *)(v3 + 16), (uint64_t)v25);
  if (v26)
  {
    *uint64_t v8 = *(void *)&v25[0];
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v22(v8);
    swift_errorRelease();
    return (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    uint64_t v20 = v6;
    unint64_t v17 = v22;
    sub_1000967D4(v25, (uint64_t)v24);
    sub_100096838((uint64_t)v24, (uint64_t)v23);
    sub_100094134(&qword_10090C408);
    int v18 = swift_dynamicCast();
    id v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    if (v18)
    {
      v19(v11, 0, 1, a3);
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, a3);
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v8, v15, a3);
      swift_storeEnumTagMultiPayload();
      v17(v8);
      (*(void (**)(void *, uint64_t))(v20 + 8))(v8, v5);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a3);
    }
    else
    {
      v19(v11, 1, 1, a3);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
      *uint64_t v8 = [self cancelledError];
      swift_storeEnumTagMultiPayload();
      v17(v8);
      (*(void (**)(void *, uint64_t))(v20 + 8))(v8, v5);
    }
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v24);
  }
}

uint64_t sub_10014A2D0(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10014A308(uint64_t a1)
{
  return a1;
}

uint64_t sub_10014A338()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090C410);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090C410);
  if (qword_100907858 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942550);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10014A400(uint64_t a1, void *a2)
{
  id v2 = a2;
  NSObject.hash(into:)();
}

uint64_t sub_10014A454()
{
  return static NSObject.== infix(_:_:)() & 1;
}

Swift::Int sub_10014A498(void *a1)
{
  Hasher.init(_seed:)();
  id v2 = a1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int sub_10014A4E8()
{
  return sub_10014A498(*v0);
}

void sub_10014A4F0(uint64_t a1)
{
  sub_10014A400(a1, *v1);
}

Swift::Int sub_10014A4F8()
{
  Hasher.init(_seed:)();
  sub_10014A400((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_10014A538()
{
  return sub_10014A454();
}

uint64_t sub_10014A544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for CDObjectID()
{
  return sub_1000E6FBC();
}

uint64_t sub_10014A564()
{
  return swift_getWitnessTable();
}

id sub_10014A580()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TimeZone();
  uint64_t v49 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Calendar.Identifier();
  id v47 = *(void (***)(char *, uint64_t))(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for Calendar();
  NSString v44 = *(void (***)(char *, uint64_t))(v52 - 8);
  __chkstk_darwin(v52);
  char v40 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DateComponents();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for Date();
  id v42 = *(void (***)(char *, uint64_t))(v51 - 8);
  __chkstk_darwin(v51);
  id v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for RDSavedReminder();
  uint64_t v53 = *(void *)(v0 + *(int *)(v17 + 20));
  if (v53)
  {
    os_log_type_t v39 = v9;
    uint64_t v18 = v7;
    id v19 = _swiftEmptyArrayStorage;
    uint64_t v50 = *(void *)(v53 + 16);
    if (v50)
    {
      uint64_t v35 = v17;
      uint64_t v37 = v0;
      unint64_t v38 = v3;
      os_log_type_t v54 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v20 = 0;
      uint64_t v48 = (void (**)(char *, void, uint64_t))(v47 + 13);
      ++v47;
      unsigned int v46 = enum case for Calendar.Identifier.gregorian(_:);
      ++v44;
      uint64_t v45 = (void (**)(char *, uint64_t))(v49 + 8);
      uint64_t v36 = v12;
      ++v42;
      uint64_t v43 = (void (**)(char *, uint64_t))(v12 + 8);
      uint64_t v49 = v11;
      uint64_t v41 = v18;
      uint64_t v21 = v39;
      os_log_type_t v22 = v40;
      do
      {
        uint64_t v23 = v20 + 1;
        Date.init(timeIntervalSinceReferenceDate:)();
        uint64_t v24 = v41;
        (*v48)(v21, v46, v41);
        Calendar.init(identifier:)();
        (*v47)(v21, v24);
        static TimeZone.current.getter();
        Calendar.dateComponents(in:from:)();
        (*v45)(v6, v4);
        (*v44)(v22, v52);
        NSString v25 = v6;
        uint64_t v26 = v4;
        id v27 = objc_allocWithZone((Class)REMAlarmDateTrigger);
        Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
        id v29 = [v27 initWithDateComponents:isa];

        (*v43)(v14, v49);
        (*v42)(v16, v51);
        [objc_allocWithZone((Class)REMAlarm) initWithTrigger:v29];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        uint64_t v4 = v26;
        uint64_t v6 = v25;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v20 = v23;
      }
      while (v50 != v23);
      id v19 = v54;
      swift_bridgeObjectRelease();
      uint64_t v0 = v37;
      uint64_t v3 = v38;
      uint64_t v11 = v49;
      uint64_t v17 = v35;
      uint64_t v12 = v36;
    }
  }
  else
  {
    id v19 = 0;
  }
  sub_1000BF710(v0 + *(int *)(v17 + 28), (uint64_t)v3, (uint64_t *)&unk_100911810);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v3, 1, v11) != 1)
  {
    Class v30 = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v3, v11);
    if (v19) {
      goto LABEL_9;
    }
LABEL_11:
    v31.super.Class isa = 0;
    goto LABEL_12;
  }
  Class v30 = 0;
  if (!v19) {
    goto LABEL_11;
  }
LABEL_9:
  sub_1000963CC(0, &qword_10090C4B8);
  v31.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_12:
  id v32 = [self displayDateWithDueDateComponents:v30 alarms:v31.super.isa];

  return v32;
}

unint64_t sub_10014ABAC(char a1)
{
  unint64_t result = 0x6E6F697461657263;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6972546D72616C61;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
    case 6:
    case 11:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x64656767616C66;
      break;
    case 5:
      unint64_t result = 0x7367617468736168;
      break;
    case 7:
      unint64_t result = 0x797469726F697270;
      break;
    case 8:
      unint64_t result = 0x6E65727275636572;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0x656C746974;
      break;
    case 12:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10014AD4C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100094134(&qword_10090C598);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_1001514A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for Date();
  sub_10014F6B0(&qword_10090C5A8, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for RDSavedReminder();
    uint64_t v10 = (long long *)(v3 + v9[5]);
    long long v11 = v10[1];
    long long v14 = *v10;
    long long v15 = v11;
    char v16 = 1;
    sub_1001514F4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)(v3 + v9[6]);
    char v16 = 2;
    sub_100094134(&qword_10090C5B8);
    sub_100151740(&qword_10090C5C0, &qword_10090C5B8, (void (*)(void))sub_100151548);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 3;
    type metadata accessor for DateComponents();
    sub_10014F6B0(&qword_10090C5D0, (void (*)(uint64_t))&type metadata accessor for DateComponents);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v14 = *(void *)(v3 + v9[9]);
    char v16 = 5;
    sub_100094134(&qword_10090C5D8);
    sub_100151740(&qword_10090C5E0, &qword_10090C5D8, (void (*)(void))sub_10015159C);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v14 = *(_OWORD *)(v3 + v9[10]);
    char v16 = 6;
    v13[1] = sub_1000EB704();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v14 = *(void *)(v3 + v9[12]);
    char v16 = 8;
    sub_100094134(&qword_10090C5F0);
    sub_100151740(&qword_10090C5F8, &qword_10090C5F0, (void (*)(void))sub_1001515F0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v14 = *(_OWORD *)(v3 + v9[15]);
    char v16 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v14 = *(_OWORD *)(v3 + v9[16]);
    char v16 = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10014B2C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v37 - v8;
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100094134(&qword_10090C608);
  uint64_t v13 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  long long v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v44 = (int *)type metadata accessor for RDSavedReminder();
  __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[3];
  uint64_t v41 = a1;
  sub_1000C0DE0(a1, v17);
  sub_1001514A0();
  os_log_type_t v39 = v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v42 = v2;
    uint64_t v20 = v43;
    uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v41);
    os_log_type_t v22 = v44;
    int v47 = 0;
    int v23 = 0;
    LODWORD(v40) = 0;
  }
  else
  {
    uint64_t v18 = v9;
    uint64_t v37 = v6;
    uint64_t v19 = v13;
    type metadata accessor for Date();
    LOBYTE(v45) = 0;
    sub_10014F6B0(&qword_10090C610, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v24 = v43;
    sub_100096408((uint64_t)v12, v43, (uint64_t *)&unk_100909A40);
    char v48 = 1;
    sub_100151644();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    NSString v25 = (_OWORD *)(v24 + v44[5]);
    long long v26 = v46;
    _OWORD *v25 = v45;
    v25[1] = v26;
    sub_100094134(&qword_10090C5B8);
    char v48 = 2;
    sub_100151740(&qword_10090C620, &qword_10090C5B8, (void (*)(void))sub_100151698);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)(v24 + v44[6]) = v45;
    type metadata accessor for DateComponents();
    LOBYTE(v45) = 3;
    uint64_t v27 = (uint64_t)v18;
    uint64_t v28 = sub_10014F6B0(&qword_10090C630, (void (*)(uint64_t))&type metadata accessor for DateComponents);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100096408(v27, v24 + v44[7], (uint64_t *)&unk_100911810);
    LOBYTE(v45) = 4;
    uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v42 = v28;
    *(void *)(v24 + v44[8]) = v29;
    sub_100094134(&qword_10090C5D8);
    char v48 = 5;
    sub_100151740(&qword_10090C638, &qword_10090C5D8, (void (*)(void))sub_1001516EC);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)(v24 + v44[9]) = v45;
    char v48 = 6;
    sub_1000EB648();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)(v24 + v44[10]) = v45;
    LOBYTE(v45) = 7;
    *(void *)(v24 + v44[11]) = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100094134(&qword_10090C5F0);
    char v48 = 8;
    sub_100151740(&qword_10090C648, &qword_10090C5F0, (void (*)(void))sub_1001517AC);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)(v24 + v44[12]) = v45;
    LOBYTE(v45) = 9;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v47 = 1;
    uint64_t v42 = 0;
    sub_100096408((uint64_t)v37, v43 + v44[13], (uint64_t *)&unk_100911810);
    LOBYTE(v45) = 10;
    uint64_t v30 = v42;
    uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v42 = v30;
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v40);
      int v23 = 0;
      LODWORD(v40) = 0;
    }
    else
    {
      id v33 = (uint64_t *)(v43 + v44[14]);
      *id v33 = v31;
      v33[1] = v32;
      char v48 = 11;
      uint64_t v34 = v42;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v42 = v34;
      if (v34)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v40);
        LODWORD(v40) = 0;
        int v23 = 1;
      }
      else
      {
        *(_OWORD *)(v43 + v44[15]) = v45;
        char v48 = 12;
        uint64_t v35 = v42;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        uint64_t v42 = v35;
        if (!v35)
        {
          (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v40);
          uint64_t v36 = v43;
          *(_OWORD *)(v43 + v44[16]) = v45;
          sub_1000D57B8(v36, v38);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v41);
          return sub_1000D575C(v36);
        }
        (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v40);
        int v23 = 1;
        LODWORD(v40) = 1;
      }
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v41);
    uint64_t v20 = v43;
    sub_1000966BC(v43, (uint64_t *)&unk_100909A40);
    os_log_type_t v22 = v44;
    sub_10014F650(*(void *)(v20 + v44[5]));
    swift_bridgeObjectRelease();
    sub_1000966BC(v20 + v22[7], (uint64_t *)&unk_100911810);
    swift_bridgeObjectRelease();
    sub_100097F20(*(void *)(v20 + v22[10]), *(void *)(v20 + v22[10] + 8));
    uint64_t result = swift_bridgeObjectRelease();
    if (v47)
    {
      uint64_t result = sub_1000966BC(v20 + v22[13], (uint64_t *)&unk_100911810);
      if (v23) {
        goto LABEL_9;
      }
      goto LABEL_5;
    }
  }
  if (v23)
  {
LABEL_9:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v40 & 1) == 0) {
      return result;
    }
    return sub_100097F34(*(void *)(v20 + v22[15]), *(void *)(v20 + v22[15] + 8));
  }
LABEL_5:
  if (!v40) {
    return result;
  }
  return sub_100097F34(*(void *)(v20 + v22[15]), *(void *)(v20 + v22[15] + 8));
}

unint64_t sub_10014BCFC()
{
  return sub_10014ABAC(*v0);
}

uint64_t sub_10014BD04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100151A9C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10014BD2C(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_10014BD38(uint64_t a1)
{
  unint64_t v2 = sub_1001514A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014BD74(uint64_t a1)
{
  unint64_t v2 = sub_1001514A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014BDB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014B2C0(a1, a2);
}

uint64_t sub_10014BDC8(void *a1)
{
  return sub_10014AD4C(a1);
}

void sub_10014BDE4(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v180 = a3;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v6 - 8);
  Swift::Int v173 = (char *)&v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v168 - v9;
  uint64_t v183 = type metadata accessor for Date();
  unint64_t v11 = *(void *)(v183 - 8);
  __chkstk_darwin(v183);
  uint64_t v182 = (char *)&v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v14 = __chkstk_darwin(v13 - 8).n128_u64[0];
  uint64_t v16 = (char *)&v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [a1 titleDocument:v14];
  if (!v17)
  {
    os_log_type_t v22 = self;
    v184[0] = 0;
    v184[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(137);
    v23._object = (void *)0x80000001007CBD70;
    v23._countAndFlagsBits = 0xD000000000000086;
    String.append(_:)(v23);
    id v24 = [a1 objectID];
    id v25 = [v24 description];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;

    v29._countAndFlagsBits = v26;
    v29._object = v28;
    String.append(_:)(v29);

    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 125;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v22 invalidParameterErrorWithDescription:v31];

    swift_willThrow();
    return;
  }
  id v175 = a1;
  uint64_t v174 = v3;
  id v172 = v17;
  uint64_t v178 = v10;
  unint64_t v179 = v11;
  if (a2)
  {
    uint64_t v18 = v17;
    id v19 = [v17 replicaIDSource];
    id v20 = [v18 attributedString];
    id v21 = [objc_allocWithZone((Class)REMCRMergeableStringDocument) initWithReplicaIDSource:v19 attributedString:v20];
  }
  else
  {
    id v21 = v17;
  }
  uint64_t v32 = v180;
  id v33 = [v21 string];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  uint64_t v37 = type metadata accessor for RDSavedReminder();
  uint64_t v38 = (uint64_t *)(v32 + *(int *)(v37 + 56));
  *uint64_t v38 = v34;
  v38[1] = v36;
  unint64_t v181 = (unint64_t)v38;
  id v171 = v21;
  id v39 = [v21 serializedData];
  uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;

  id v177 = (int *)v37;
  uint64_t v43 = v32 + *(int *)(v37 + 60);
  *(void *)uint64_t v43 = v40;
  *(void *)(v43 + 8) = v42;
  id v44 = [v175 notesDocument];
  id v170 = v44;
  if (a2)
  {
    unint64_t v45 = v179;
    if (v44)
    {
      id v46 = v44;
      id v47 = [v46 replicaIDSource];
      id v48 = [v46 attributedString];
      id v49 = [objc_allocWithZone((Class)REMCRMergeableStringDocument) initWithReplicaIDSource:v47 attributedString:v48];

LABEL_11:
      id v50 = v49;
      id v51 = [v50 serializedData];
      id v169 = v50;

      uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;

      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v45 = v179;
    if (v44)
    {
      id v49 = v44;
      goto LABEL_11;
    }
  }
  uint64_t v52 = 0;
  id v169 = 0;
  unint64_t v54 = 0xF000000000000000;
LABEL_13:
  uint64_t v55 = v180 + v177[10];
  *(void *)uint64_t v55 = v52;
  *(void *)(v55 + 8) = v54;
  id v56 = v175;
  id v57 = [v175 creationDate];
  if (v57)
  {
    id v58 = v57;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v16, 0, 1, v183);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v16, 1, 1, v183);
  }
  uint64_t v59 = (uint64_t)v16;
  uint64_t v60 = v180;
  sub_100096408(v59, v180, (uint64_t *)&unk_100909A40);
  id v61 = [v56 alarms];
  if (v61)
  {
    id v62 = v61;
    sub_1000963CC(0, &qword_10090C4B8);
    unint64_t v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v64 = v174;
    id v65 = sub_1000EAB78(v63);
    if (v64)
    {

      sub_1000966BC(v180, (uint64_t *)&unk_100909A40);
LABEL_19:
      sub_100097F20(*(void *)v55, *(void *)(v55 + 8));
      swift_bridgeObjectRelease();
      sub_100097F34(*(void *)v43, *(void *)(v43 + 8));
      return;
    }
    uint64_t v174 = 0;
    id v70 = (void *)(v180 + v177[5]);
    void *v70 = v65;
    v70[1] = v66;
    v70[2] = v67;
    v70[3] = v68;
  }
  else
  {
    id v69 = (_OWORD *)(v60 + v177[5]);
    *id v69 = 0u;
    v69[1] = 0u;
  }
  id v72 = [v56 fetchedDueDateDeltaAlerts];
  if (v72)
  {
    id v73 = v72;
    sub_1000963CC(0, (unint64_t *)&unk_100920C30);
    unint64_t v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    id v92 = [v56 dueDateDeltaAlertsData];
    if (v92)
    {
      uint64_t v93 = v92;
      uint64_t v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v96 = v95;

      type metadata accessor for RDDueDateDeltaAlerts();
      sub_10014F6B0(&qword_10090C4C8, (void (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlerts);
      uint64_t v97 = v174;
      static REMJSONRepresentable.fromJSONData(_:)();
      uint64_t v174 = v97;
      if (v97)
      {
        sub_100097F34(v94, v96);

        uint64_t v98 = v180;
        sub_1000966BC(v180, (uint64_t *)&unk_100909A40);
        sub_10014F650(*(void *)(v98 + v177[5]));
        goto LABEL_19;
      }
      sub_100097F34(v94, v96);
      id v99 = (void *)v184[0];
      unint64_t v74 = *(void *)(v184[0] + OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects);
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v74 = (unint64_t)_swiftEmptyArrayStorage;
    }
  }
  if (v74 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v100 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v100)
    {
      swift_bridgeObjectRetain();
      uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v75)
      {
        swift_bridgeObjectRelease();
        uint64_t v88 = _swiftEmptyArrayStorage;
        goto LABEL_46;
      }
      goto LABEL_26;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    uint64_t v88 = 0;
    goto LABEL_46;
  }
  uint64_t v75 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v75) {
    goto LABEL_45;
  }
LABEL_26:
  v184[0] = _swiftEmptyArrayStorage;
  sub_1001DE5F0(0, v75 & ~(v75 >> 63), 0);
  if (v75 < 0)
  {
    __break(1u);
    goto LABEL_88;
  }
  uint64_t v76 = 0;
  unint64_t v181 = v74 & 0xC000000000000001;
  uint64_t v77 = (void (**)(char *, uint64_t))(v45 + 8);
  unint64_t v78 = v74;
  do
  {
    if (v181) {
      id v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v79 = *(id *)(v74 + 8 * v76 + 32);
    }
    id v80 = v79;
    id v81 = [v79 dueDateDelta];
    uint64_t v82 = REMDueDateDeltaInterval.codable.getter();

    id v83 = [v80 creationDate];
    unint64_t v84 = v182;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v86 = v85;
    (*v77)(v84, v183);
    id v87 = [v80 minimumSupportedAppVersion];

    uint64_t v88 = (void *)v184[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1001DE5F0(0, v88[2] + 1, 1);
      uint64_t v88 = (void *)v184[0];
    }
    unint64_t v90 = v88[2];
    unint64_t v89 = v88[3];
    if (v90 >= v89 >> 1)
    {
      sub_1001DE5F0(v89 > 1, v90 + 1, 1);
      uint64_t v88 = (void *)v184[0];
    }
    v88[2] = v90 + 1;
    id v91 = &v88[3 * v90];
    v91[4] = v82;
    ++v76;
    v91[5] = v86;
    v91[6] = v87;
    unint64_t v74 = v78;
  }
  while (v75 != v76);
  swift_bridgeObjectRelease();
  id v56 = v175;
LABEL_46:
  *(void *)(v180 + v177[6]) = v88;
  id v101 = [v56 dueDateComponents];
  uint64_t v102 = (uint64_t)v178;
  if (v101)
  {
    int v103 = v101;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v104 = type metadata accessor for DateComponents();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v102, 0, 1, v104);
  }
  else
  {
    uint64_t v105 = type metadata accessor for DateComponents();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v102, 1, 1, v105);
  }
  uint64_t v106 = v177;
  uint64_t v107 = v180;
  sub_100096408(v102, v180 + v177[7], (uint64_t *)&unk_100911810);
  *(void *)(v107 + v106[8]) = [v56 flagged];
  id v108 = [v56 hashtags];
  if (!v108)
  {
    uint64_t v115 = 0;
    goto LABEL_74;
  }
  uint64_t v109 = v108;
  sub_1000963CC(0, &qword_10090DC80);
  sub_10014F6F8();
  uint64_t v110 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v179 = v110 & 0xC000000000000001;
  if ((v110 & 0xC000000000000001) != 0)
  {
    uint64_t v111 = __CocoaSet.count.getter();
    if (v111)
    {
LABEL_52:
      uint64_t v188 = _swiftEmptyArrayStorage;
      sub_1001DE5D0(0, v111 & ~(v111 >> 63), 0);
      if (v179)
      {
        uint64_t v112 = __CocoaSet.startIndex.getter();
        unsigned __int8 v114 = 1;
      }
      else
      {
        uint64_t v112 = sub_1003CA790(v110);
        unsigned __int8 v114 = v116 & 1;
      }
      uint64_t v185 = v112;
      uint64_t v186 = v113;
      unsigned __int8 v187 = v114;
      if (v111 < 0)
      {
        __break(1u);
        goto LABEL_98;
      }
      uint64_t v117 = v110 & 0xFFFFFFFFFFFFFF8;
      if (v110 < 0) {
        uint64_t v117 = v110;
      }
      uint64_t v176 = v117;
      uint64_t v178 = (char *)v110;
      do
      {
        while (1)
        {
          uint64_t v124 = v185;
          uint64_t v125 = v187;
          unint64_t v181 = v186;
          sub_1003CA484(v185, v186, v187, v110);
          unsigned __int8 v127 = v126;
          id v128 = [v126 type];
          id v129 = [v127 name];
          uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v182 = v131;
          uint64_t v183 = v130;

          id v132 = [v127 objectIdentifier];
          uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v135 = v134;

          uint64_t v136 = v188;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1001DE5D0(0, v136[2] + 1, 1);
            uint64_t v136 = v188;
          }
          unint64_t v138 = v136[2];
          unint64_t v137 = v136[3];
          if (v138 >= v137 >> 1)
          {
            sub_1001DE5D0(v137 > 1, v138 + 1, 1);
            uint64_t v136 = v188;
          }
          v136[2] = v138 + 1;
          char v139 = &v136[5 * v138];
          uint64_t v140 = v183;
          v139[4] = v128;
          v139[5] = v140;
          v139[6] = v182;
          v139[7] = v133;
          v139[8] = v135;
          if (v179) {
            break;
          }
          uint64_t v118 = v181;
          uint64_t v110 = (uint64_t)v178;
          uint64_t v119 = sub_1003C9E34(v124, v181, v125, v178);
          uint64_t v121 = v120;
          char v123 = v122;
          sub_1000E4EA4(v124, v118, v125);
          uint64_t v185 = v119;
          uint64_t v186 = v121;
          unsigned __int8 v187 = v123 & 1;
          if (!--v111) {
            goto LABEL_72;
          }
        }
        uint64_t v110 = (uint64_t)v178;
        if ((v125 & 1) == 0) {
          goto LABEL_99;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100094134(&qword_10090C4C0);
        uint64_t v141 = (void (*)(void *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v141(v184, 0);
        --v111;
      }
      while (v111);
LABEL_72:
      sub_1000E4EA4(v185, v186, v187);
      swift_bridgeObjectRelease();
      uint64_t v115 = v188;
      goto LABEL_73;
    }
  }
  else
  {
    uint64_t v111 = *(void *)(v110 + 16);
    if (v111) {
      goto LABEL_52;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v115 = _swiftEmptyArrayStorage;
LABEL_73:
  id v56 = v175;
LABEL_74:
  uint64_t v142 = v177;
  uint64_t v143 = v180;
  *(void *)(v180 + v177[9]) = v115;
  *(void *)(v143 + v142[11]) = [v56 priority];
  id v144 = [v56 recurrenceRules];
  if (!v144)
  {
    uint64_t v148 = 0;
LABEL_90:
    *(void *)(v180 + v177[12]) = v148;
    id v157 = [v56 startDateComponents];
    if (v157)
    {
      uint64_t v158 = v157;
      uint64_t v159 = (uint64_t)v173;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v160 = type metadata accessor for DateComponents();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v160 - 8) + 56))(v159, 0, 1, v160);
    }
    else
    {
      uint64_t v161 = type metadata accessor for DateComponents();
      uint64_t v159 = (uint64_t)v173;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v161 - 8) + 56))(v173, 1, 1, v161);
    }
    sub_100096408(v159, v180 + v177[13], (uint64_t *)&unk_100911810);
    id v162 = [v56 contactHandles];
    uint64_t v163 = v162;
    if (v162)
    {
      id v164 = [v162 archivedData];

      uint64_t v163 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v166 = v165;
    }
    else
    {

      unint64_t v166 = 0xF000000000000000;
    }
    unint64_t v167 = (void *)(v180 + v177[16]);
    *unint64_t v167 = v163;
    v167[1] = v166;
    return;
  }
  unint64_t v145 = v144;
  sub_1000963CC(0, (unint64_t *)&qword_100911840);
  unint64_t v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v74 >> 62))
  {
    uint64_t v146 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v146) {
      goto LABEL_77;
    }
    goto LABEL_89;
  }
LABEL_88:
  swift_bridgeObjectRetain();
  uint64_t v146 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v146)
  {
LABEL_89:
    swift_bridgeObjectRelease();
    uint64_t v148 = _swiftEmptyArrayStorage;
    goto LABEL_90;
  }
LABEL_77:
  v184[0] = _swiftEmptyArrayStorage;
  sub_1001DE5B0(0, v146 & ~(v146 >> 63), 0);
  if ((v146 & 0x8000000000000000) == 0)
  {
    uint64_t v147 = 0;
    uint64_t v148 = (void *)v184[0];
    do
    {
      if ((v74 & 0xC000000000000001) != 0) {
        id v149 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v149 = *(id *)(v74 + 8 * v147 + 32);
      }
      sub_10048BBE0(v149, v189);
      v184[0] = v148;
      unint64_t v151 = v148[2];
      unint64_t v150 = v148[3];
      if (v151 >= v150 >> 1)
      {
        sub_1001DE5B0(v150 > 1, v151 + 1, 1);
        uint64_t v148 = (void *)v184[0];
      }
      ++v147;
      v148[2] = v151 + 1;
      uint64_t v152 = &v148[11 * v151];
      long long v153 = v189[1];
      *((_OWORD *)v152 + 2) = v189[0];
      *((_OWORD *)v152 + 3) = v153;
      long long v154 = v189[2];
      long long v155 = v189[3];
      long long v156 = v189[4];
      v152[14] = v190;
      *((_OWORD *)v152 + 5) = v155;
      *((_OWORD *)v152 + 6) = v156;
      *((_OWORD *)v152 + 4) = v154;
    }
    while (v146 != v147);
    swift_bridgeObjectRelease();
    id v56 = v175;
    goto LABEL_90;
  }
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
}

uint64_t sub_10014D020@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v13 = __chkstk_darwin(v12).n128_u64[0];
  uint64_t v15 = (char *)&v52 - v14;
  if (objc_msgSend(a2, "shouldIncludeHashtags", v13))
  {
    uint64_t v63 = *(void *)(a1 + *(int *)(type metadata accessor for RDSavedReminder() + 36));
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v63 = 0;
  }
  if ([a2 shouldIncludeAlarmTriggersBasedOnDateOrTimeInterval])
  {
    uint64_t v16 = (int *)type metadata accessor for RDSavedReminder();
    sub_1000BF710(a1 + v16[13], (uint64_t)v15, (uint64_t *)&unk_100911810);
    sub_1000BF710(a1 + v16[7], (uint64_t)v11, (uint64_t *)&unk_100911810);
    uint64_t v17 = *(void *)(a1 + v16[12]);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v18 = type metadata accessor for DateComponents();
    id v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    v19(v15, 1, 1, v18);
    v19(v11, 1, 1, v18);
    uint64_t v17 = 0;
  }
  unsigned __int8 v20 = [a2 shouldIncludeAlarmTriggersBasedOnDateOrTimeInterval];
  uint64_t v64 = v11;
  id v65 = v15;
  uint64_t v62 = v17;
  if (((v20 & 1) != 0 || [a2 shouldIncludeAlarmTriggersBasedOnLocationOrVehicle])
    && (id v21 = (void *)(a1 + *(int *)(type metadata accessor for RDSavedReminder() + 20)), (v22 = (void *)*v21) != 0))
  {
    id v24 = (void *)v21[2];
    Swift::String v23 = (void *)v21[3];
    id v25 = (void *)v21[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ([a2 shouldIncludeAlarmTriggersBasedOnDateOrTimeInterval])
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = v22;
    }
    else
    {
      uint64_t v26 = _swiftEmptyArrayStorage;
    }
    uint64_t v55 = v26;
    if ([a2 shouldIncludeAlarmTriggersBasedOnLocationOrVehicle])
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = v25;
    }
    else
    {
      uint64_t v27 = _swiftEmptyArrayStorage;
    }
    unint64_t v54 = v27;
    if ([a2 shouldIncludeAlarmTriggersBasedOnDateOrTimeInterval])
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = v24;
    }
    else
    {
      uint64_t v28 = _swiftEmptyArrayStorage;
    }
    unint64_t v53 = v28;
    if (([a2 shouldIncludeAlarmTriggersBasedOnLocationOrVehicle] & 1) == 0)
    {
      swift_bridgeObjectRelease();
      Swift::String v23 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v54 = 0;
    uint64_t v55 = 0;
    unint64_t v53 = 0;
    Swift::String v23 = 0;
  }
  Swift::String v29 = (int *)type metadata accessor for RDSavedReminder();
  uint64_t v30 = *(void *)(a1 + v29[6]);
  swift_bridgeObjectRetain();
  unsigned int v31 = [a2 shouldIncludeContactsHandleData];

  id v61 = v23;
  if (v31)
  {
    uint64_t v32 = (uint64_t *)(a1 + v29[16]);
    uint64_t v33 = *v32;
    unint64_t v59 = v32[1];
    uint64_t v60 = v33;
    sub_100097E24(v33, v59);
  }
  else
  {
    unint64_t v59 = 0xF000000000000000;
    uint64_t v60 = 0;
  }
  sub_1000BF710(a1, (uint64_t)v8, (uint64_t *)&unk_100909A40);
  uint64_t v34 = (uint64_t *)(a1 + v29[10]);
  uint64_t v36 = *v34;
  unint64_t v35 = v34[1];
  uint64_t v37 = *(void *)(a1 + v29[11]);
  uint64_t v56 = *(void *)(a1 + v29[8]);
  uint64_t v57 = v37;
  uint64_t v38 = v29[15];
  id v39 = (uint64_t *)(a1 + v29[14]);
  uint64_t v40 = v39[1];
  uint64_t v58 = *v39;
  uint64_t v42 = *(void *)(a1 + v38);
  unint64_t v41 = *(void *)(a1 + v38 + 8);
  sub_100097E24(v36, v35);
  swift_bridgeObjectRetain();
  sub_100097E38(v42, v41);
  sub_1000D575C(a1);
  sub_100096408((uint64_t)v8, a3, (uint64_t *)&unk_100909A40);
  uint64_t v43 = (void *)(a3 + v29[5]);
  id v44 = v54;
  void *v43 = v55;
  v43[1] = v44;
  unint64_t v45 = v61;
  v43[2] = v53;
  v43[3] = v45;
  *(void *)(a3 + v29[6]) = v30;
  sub_100096408((uint64_t)v64, a3 + v29[7], (uint64_t *)&unk_100911810);
  *(void *)(a3 + v29[8]) = v56;
  *(void *)(a3 + v29[9]) = v63;
  id v46 = (uint64_t *)(a3 + v29[10]);
  *id v46 = v36;
  v46[1] = v35;
  *(void *)(a3 + v29[11]) = v57;
  *(void *)(a3 + v29[12]) = v62;
  uint64_t result = sub_100096408((uint64_t)v65, a3 + v29[13], (uint64_t *)&unk_100911810);
  id v48 = (void *)(a3 + v29[14]);
  *id v48 = v58;
  v48[1] = v40;
  id v49 = (uint64_t *)(a3 + v29[15]);
  *id v49 = v42;
  v49[1] = v41;
  id v50 = (uint64_t *)(a3 + v29[16]);
  unint64_t v51 = v59;
  uint64_t *v50 = v60;
  v50[1] = v51;
  return result;
}

uint64_t sub_10014D4FC@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_100097E38(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x10014D760);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_100097F34(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_10014D770(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10014D4FC((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_10014D848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_10014D4FC(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_10014D900(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x10014DB68);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_100097E38(a3, a4);
                  sub_100097E38(a1, a2);
                  char v17 = sub_10014D848((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_100097F34(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_100097E38(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_10014D848(v21, v22, v20, a3, a4);
                  sub_100097F34(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_100097E38(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_100097E38(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_10014D770(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_100097F34(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10014DB98(uint64_t a1, uint64_t a2)
{
  uint64_t v191 = type metadata accessor for DateComponents();
  uint64_t v193 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  uint64_t v188 = (char *)&v186 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v5 - 8);
  uint64_t v187 = (uint64_t)&v186 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v189 = (uint64_t)&v186 - v8;
  uint64_t v192 = sub_100094134(&qword_10090C4A8);
  __chkstk_darwin(v192);
  uint64_t v190 = (uint64_t)&v186 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v194 = (uint64_t)&v186 - v11;
  uint64_t v196 = (int *)type metadata accessor for RDSavedReminder();
  __chkstk_darwin(v196);
  uint64_t v204 = (uint64_t)&v186 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v205 = (uint64_t)&v186 - v14;
  __chkstk_darwin(v15);
  uint64_t v206 = (uint64_t)&v186 - v16;
  __chkstk_darwin(v17);
  uint64_t v207 = (uint64_t)&v186 - v18;
  __chkstk_darwin(v19);
  uint64_t v209 = (uint64_t)&v186 - v20;
  __chkstk_darwin(v21);
  double v213 = (char *)&v186 - v22;
  __chkstk_darwin(v23);
  uint64_t v212 = (uint64_t)&v186 - v24;
  __chkstk_darwin(v25);
  uint64_t v197 = (uint64_t)&v186 - v26;
  __chkstk_darwin(v27);
  uint64_t v211 = (uint64_t)&v186 - v28;
  __chkstk_darwin(v29);
  uint64_t v210 = (uint64_t)&v186 - v30;
  __chkstk_darwin(v31);
  uint64_t v219 = (uint64_t)&v186 - v32;
  __chkstk_darwin(v33);
  uint64_t v215 = (uint64_t)&v186 - v34;
  __chkstk_darwin(v35);
  uint64_t v216 = (uint64_t)&v186 - v36;
  __chkstk_darwin(v37);
  uint64_t v222 = (uint64_t *)((char *)&v186 - v38);
  __chkstk_darwin(v39);
  uint64_t v200 = (uint64_t)&v186 - v40;
  __chkstk_darwin(v41);
  uint64_t v203 = (uint64_t)&v186 - v42;
  __chkstk_darwin(v43);
  uint64_t v217 = (uint64_t)&v186 - v44;
  __chkstk_darwin(v45);
  uint64_t v218 = (uint64_t)&v186 - v46;
  __chkstk_darwin(v47);
  uint64_t v221 = (uint64_t)&v186 - v48;
  __chkstk_darwin(v49);
  uint64_t v220 = (uint64_t)&v186 - v50;
  __chkstk_darwin(v51);
  uint64_t v202 = (uint64_t)&v186 - v52;
  __chkstk_darwin(v53);
  id v201 = (char *)&v186 - v54;
  __chkstk_darwin(v55);
  uint64_t v199 = (uint64_t)&v186 - v56;
  __chkstk_darwin(v57);
  uint64_t v198 = (uint64_t)&v186 - v58;
  uint64_t v59 = type metadata accessor for Date();
  uint64_t v60 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v195 = (char *)&v186 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100094134((uint64_t *)&unk_10091C320);
  uint64_t v63 = v62 - 8;
  __chkstk_darwin(v62);
  id v65 = (char *)&v186 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v66 - 8);
  uint64_t v68 = (char *)&v186 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v69);
  uint64_t v71 = (char *)&v186 - v70;
  __chkstk_darwin(v72);
  unint64_t v74 = (char *)&v186 - v73;
  uint64_t v214 = a1;
  sub_1000BF710(a1, (uint64_t)&v186 - v73, (uint64_t *)&unk_100909A40);
  uint64_t v208 = a2;
  sub_1000BF710(a2, (uint64_t)v71, (uint64_t *)&unk_100909A40);
  uint64_t v75 = (uint64_t)&v65[*(int *)(v63 + 56)];
  sub_1000BF710((uint64_t)v74, (uint64_t)v65, (uint64_t *)&unk_100909A40);
  sub_1000BF710((uint64_t)v71, v75, (uint64_t *)&unk_100909A40);
  uint64_t v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
  if (v76((uint64_t)v65, 1, v59) == 1)
  {
    sub_1000966BC((uint64_t)v71, (uint64_t *)&unk_100909A40);
    sub_1000966BC((uint64_t)v74, (uint64_t *)&unk_100909A40);
    if (v76(v75, 1, v59) == 1)
    {
      sub_1000966BC((uint64_t)v65, (uint64_t *)&unk_100909A40);
      uint64_t v77 = v214;
      uint64_t v78 = v198;
      sub_1000D57B8(v214, v198);
      uint64_t v79 = v208;
      uint64_t v80 = v199;
      sub_1000D57B8(v208, v199);
      uint64_t v82 = v212;
      id v81 = v213;
      uint64_t v83 = v220;
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  sub_1000BF710((uint64_t)v65, (uint64_t)v68, (uint64_t *)&unk_100909A40);
  if (v76(v75, 1, v59) == 1)
  {
    sub_1000966BC((uint64_t)v71, (uint64_t *)&unk_100909A40);
    sub_1000966BC((uint64_t)v74, (uint64_t *)&unk_100909A40);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v68, v59);
LABEL_6:
    sub_1000966BC((uint64_t)v65, (uint64_t *)&unk_10091C320);
    uint64_t v77 = v214;
    uint64_t v78 = v198;
    sub_1000D57B8(v214, v198);
    uint64_t v79 = v208;
    uint64_t v80 = v199;
    sub_1000D57B8(v208, v199);
    uint64_t v82 = v212;
    id v81 = v213;
    uint64_t v83 = v220;
LABEL_7:
    sub_1000D575C(v80);
    sub_1000D575C(v78);
    unint64_t v84 = v201;
    sub_1000D57B8(v77, (uint64_t)v201);
    uint64_t v85 = v202;
    sub_1000D57B8(v79, v202);
    uint64_t v86 = v222;
LABEL_16:
    sub_1000D575C(v85);
    sub_1000D575C((uint64_t)v84);
    sub_1000D57B8(v77, v83);
    uint64_t v96 = v221;
    sub_1000D57B8(v79, v221);
LABEL_17:
    sub_1000D575C(v96);
    sub_1000D575C(v83);
    uint64_t v105 = v218;
    uint64_t v107 = v219;
LABEL_18:
    uint64_t v108 = v217;
    sub_1000D57B8(v77, v105);
    sub_1000D57B8(v79, v108);
LABEL_19:
    uint64_t v109 = (uint64_t)v81;
    sub_1000D575C(v108);
    sub_1000D575C(v105);
    uint64_t v111 = v210;
    uint64_t v110 = v211;
LABEL_20:
    uint64_t v112 = v200;
    uint64_t v113 = v203;
    sub_1000D57B8(v77, v203);
    sub_1000D57B8(v79, v112);
LABEL_21:
    sub_1000D575C(v113);
    sub_1000D575C(v112);
    sub_1000D57B8(v77, (uint64_t)v86);
    uint64_t v114 = v216;
    sub_1000D57B8(v79, v216);
LABEL_22:
    sub_1000D575C(v114);
    sub_1000D575C((uint64_t)v86);
    uint64_t v115 = v215;
    uint64_t v116 = v109;
LABEL_23:
    sub_1000D57B8(v77, v115);
    sub_1000D57B8(v79, v107);
LABEL_24:
    sub_1000D575C(v107);
    sub_1000D575C(v115);
LABEL_25:
    sub_1000D57B8(v77, v111);
    sub_1000D57B8(v79, v110);
LABEL_26:
    sub_1000D575C(v110);
    sub_1000D575C(v111);
    uint64_t v117 = v197;
LABEL_27:
    sub_1000D57B8(v77, v117);
    sub_1000D57B8(v79, v82);
    uint64_t v118 = v209;
LABEL_28:
    sub_1000D575C(v82);
    sub_1000D575C(v117);
    uint64_t v120 = v206;
    uint64_t v119 = v207;
LABEL_29:
    sub_1000D57B8(v77, v116);
    sub_1000D57B8(v79, v118);
LABEL_30:
    sub_1000D575C(v116);
    sub_1000D575C(v118);
    sub_1000D57B8(v77, v119);
    sub_1000D57B8(v79, v120);
LABEL_31:
    sub_1000D575C(v120);
    sub_1000D575C(v119);
LABEL_32:
    uint64_t v121 = v205;
    sub_1000D57B8(v77, v205);
    uint64_t v122 = v204;
    sub_1000D57B8(v79, v204);
LABEL_33:
    sub_1000D575C(v122);
    sub_1000D575C(v121);
    goto LABEL_34;
  }
  id v87 = v195;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v195, v75, v59);
  sub_10014F6B0((unint64_t *)&qword_100909F80, (void (*)(uint64_t))&type metadata accessor for Date);
  char v88 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v89 = *(void (**)(char *, uint64_t))(v60 + 8);
  v89(v87, v59);
  sub_1000966BC((uint64_t)v71, (uint64_t *)&unk_100909A40);
  sub_1000966BC((uint64_t)v74, (uint64_t *)&unk_100909A40);
  v89(v68, v59);
  sub_1000966BC((uint64_t)v65, (uint64_t *)&unk_100909A40);
  uint64_t v77 = v214;
  uint64_t v78 = v198;
  sub_1000D57B8(v214, v198);
  uint64_t v79 = v208;
  uint64_t v80 = v199;
  sub_1000D57B8(v208, v199);
  uint64_t v82 = v212;
  id v81 = v213;
  uint64_t v83 = v220;
  if ((v88 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_9:
  unint64_t v90 = v196;
  uint64_t v199 = *(void *)(v78 + v196[8]);
  sub_1000D575C(v78);
  uint64_t v91 = *(void *)(v80 + v90[8]);
  sub_1000D575C(v80);
  unint64_t v84 = v201;
  sub_1000D57B8(v77, (uint64_t)v201);
  uint64_t v85 = v202;
  sub_1000D57B8(v79, v202);
  BOOL v92 = v199 == v91;
  uint64_t v86 = v222;
  if (!v92) {
    goto LABEL_16;
  }
  uint64_t v93 = v85;
  uint64_t v94 = *(void *)&v84[v90[11]];
  sub_1000D575C((uint64_t)v84);
  uint64_t v95 = *(void *)(v93 + v90[11]);
  sub_1000D575C(v93);
  sub_1000D57B8(v77, v83);
  uint64_t v96 = v221;
  sub_1000D57B8(v79, v221);
  BOOL v92 = v94 == v95;
  uint64_t v86 = v222;
  if (!v92) {
    goto LABEL_17;
  }
  uint64_t v97 = v90[7];
  uint64_t v98 = v96 + v97;
  uint64_t v99 = v194;
  uint64_t v100 = v194 + *(int *)(v192 + 48);
  sub_1000BF710(v83 + v97, v194, (uint64_t *)&unk_100911810);
  uint64_t v202 = v100;
  sub_1000BF710(v98, v100, (uint64_t *)&unk_100911810);
  id v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v193 + 48);
  uint64_t v102 = v83;
  uint64_t v103 = v191;
  unsigned int v104 = v101(v99, 1, v191);
  uint64_t v105 = v218;
  id v201 = (char *)v101;
  if (v104 == 1)
  {
    sub_1000D575C(v221);
    sub_1000D575C(v102);
    unsigned int v106 = v101(v202, 1, v103);
    uint64_t v107 = v219;
    uint64_t v86 = v222;
    if (v106 == 1)
    {
      sub_1000966BC(v194, (uint64_t *)&unk_100911810);
      sub_1000D57B8(v77, v105);
      uint64_t v108 = v217;
      sub_1000D57B8(v79, v217);
      goto LABEL_40;
    }
LABEL_38:
    sub_1000966BC(v194, &qword_10090C4A8);
    goto LABEL_18;
  }
  uint64_t v125 = v189;
  sub_1000BF710(v99, v189, (uint64_t *)&unk_100911810);
  if (v101(v202, 1, v103) == 1)
  {
    sub_1000D575C(v221);
    sub_1000D575C(v220);
    (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v125, v103);
    uint64_t v107 = v219;
    uint64_t v86 = v222;
    goto LABEL_38;
  }
  uint64_t v126 = v125;
  uint64_t v127 = v193;
  id v128 = v188;
  (*(void (**)(char *, uint64_t, uint64_t))(v193 + 32))(v188, v202, v103);
  sub_10014F6B0(&qword_10090C4B0, (void (*)(uint64_t))&type metadata accessor for DateComponents);
  LODWORD(v202) = dispatch thunk of static Equatable.== infix(_:_:)();
  id v129 = *(void (**)(char *, uint64_t))(v127 + 8);
  uint64_t v130 = v128;
  uint64_t v105 = v218;
  v129(v130, v103);
  sub_1000D575C(v221);
  sub_1000D575C(v220);
  v129((char *)v126, v103);
  sub_1000966BC(v194, (uint64_t *)&unk_100911810);
  sub_1000D57B8(v77, v105);
  uint64_t v108 = v217;
  sub_1000D57B8(v79, v217);
  uint64_t v107 = v219;
  uint64_t v86 = v222;
  if ((v202 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_40:
  uint64_t v131 = v196[13];
  uint64_t v221 = v108 + v131;
  uint64_t v132 = v190;
  uint64_t v133 = v190 + *(int *)(v192 + 48);
  sub_1000BF710(v105 + v131, v190, (uint64_t *)&unk_100911810);
  uint64_t v134 = v221;
  uint64_t v221 = v133;
  sub_1000BF710(v134, v133, (uint64_t *)&unk_100911810);
  uint64_t v135 = v201;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v201)(v132, 1, v103) == 1)
  {
    sub_1000D575C(v108);
    sub_1000D575C(v105);
    int v136 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v135)(v221, 1, v103);
    uint64_t v111 = v210;
    uint64_t v110 = v211;
    uint64_t v107 = v219;
    uint64_t v86 = v222;
    if (v136 == 1)
    {
      uint64_t v109 = (uint64_t)v81;
      sub_1000966BC(v190, (uint64_t *)&unk_100911810);
      uint64_t v113 = v203;
      sub_1000D57B8(v77, v203);
      uint64_t v112 = v200;
      sub_1000D57B8(v79, v200);
      goto LABEL_47;
    }
LABEL_45:
    uint64_t v109 = (uint64_t)v81;
    sub_1000966BC(v190, &qword_10090C4A8);
    goto LABEL_20;
  }
  uint64_t v137 = v187;
  sub_1000BF710(v132, v187, (uint64_t *)&unk_100911810);
  int v138 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v135)(v221, 1, v103);
  uint64_t v107 = v219;
  if (v138 == 1)
  {
    sub_1000D575C(v217);
    sub_1000D575C(v105);
    (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v137, v103);
    uint64_t v111 = v210;
    uint64_t v110 = v211;
    uint64_t v86 = v222;
    goto LABEL_45;
  }
  uint64_t v139 = v103;
  uint64_t v109 = (uint64_t)v81;
  uint64_t v140 = v193;
  uint64_t v141 = v188;
  (*(void (**)(char *, uint64_t, uint64_t))(v193 + 32))(v188, v221, v139);
  sub_10014F6B0(&qword_10090C4B0, (void (*)(uint64_t))&type metadata accessor for DateComponents);
  LODWORD(v221) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v142 = *(void (**)(char *, uint64_t))(v140 + 8);
  v142(v141, v139);
  sub_1000D575C(v217);
  sub_1000D575C(v218);
  v142((char *)v137, v139);
  sub_1000966BC(v190, (uint64_t *)&unk_100911810);
  uint64_t v113 = v203;
  sub_1000D57B8(v77, v203);
  uint64_t v112 = v200;
  sub_1000D57B8(v79, v200);
  uint64_t v111 = v210;
  uint64_t v110 = v211;
  uint64_t v86 = v222;
  if ((v221 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_47:
  uint64_t v143 = v196[14];
  uint64_t v144 = *(void *)(v113 + v143);
  uint64_t v145 = *(void *)(v113 + v143 + 8);
  uint64_t v146 = (void *)(v112 + v143);
  if (v144 == *v146 && v145 == v146[1])
  {
    sub_1000D575C(v113);
    sub_1000D575C(v112);
    sub_1000D57B8(v77, (uint64_t)v86);
    uint64_t v114 = v216;
    sub_1000D57B8(v79, v216);
  }
  else
  {
    LODWORD(v221) = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1000D575C(v113);
    sub_1000D575C(v112);
    sub_1000D57B8(v77, (uint64_t)v86);
    uint64_t v114 = v216;
    sub_1000D57B8(v79, v216);
    if ((v221 & 1) == 0) {
      goto LABEL_22;
    }
  }
  uint64_t v147 = v196[9];
  uint64_t v148 = *(void *)((char *)v86 + v147);
  id v149 = v86;
  uint64_t v150 = *(void *)(v114 + v147);
  uint64_t v116 = v109;
  if (!v148)
  {
    uint64_t v152 = (uint64_t)v149;
    swift_bridgeObjectRetain();
    sub_1000D575C(v114);
    sub_1000D575C(v152);
    if (!v150)
    {
      uint64_t v115 = v215;
      sub_1000D57B8(v77, v215);
      sub_1000D57B8(v79, v107);
      goto LABEL_60;
    }
LABEL_58:
    swift_bridgeObjectRelease();
    uint64_t v115 = v215;
    goto LABEL_23;
  }
  if (!v150)
  {
    swift_bridgeObjectRetain();
    sub_1000D575C(v216);
    sub_1000D575C((uint64_t)v222);
    goto LABEL_58;
  }
  char v151 = sub_1003519C0(v148, v150);
  swift_bridgeObjectRetain();
  sub_1000D575C(v216);
  sub_1000D575C((uint64_t)v222);
  swift_bridgeObjectRelease();
  uint64_t v115 = v215;
  sub_1000D57B8(v77, v215);
  sub_1000D57B8(v79, v107);
  if ((v151 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_60:
  uint64_t v153 = v196[12];
  uint64_t v154 = *(void *)(v107 + v153);
  if (!*(void *)(v115 + v153))
  {
    swift_bridgeObjectRetain();
    sub_1000D575C(v107);
    sub_1000D575C(v115);
    if (!v154)
    {
      sub_1000D57B8(v77, v111);
      sub_1000D57B8(v79, v110);
      goto LABEL_69;
    }
LABEL_67:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  if (!v154)
  {
    swift_bridgeObjectRetain();
    sub_1000D575C(v219);
    sub_1000D575C(v215);
    goto LABEL_67;
  }
  char v155 = sub_100351A98(*(void *)(v115 + v153), *(void *)(v107 + v153));
  swift_bridgeObjectRetain();
  sub_1000D575C(v219);
  sub_1000D575C(v215);
  swift_bridgeObjectRelease();
  sub_1000D57B8(v77, v111);
  sub_1000D57B8(v79, v110);
  if ((v155 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_69:
  uint64_t v156 = v196[5];
  uint64_t v158 = *(void *)(v111 + v156);
  uint64_t v157 = *(void *)(v111 + v156 + 8);
  uint64_t v159 = *(void *)(v111 + v156 + 16);
  uint64_t v222 = *(void **)(v111 + v156 + 24);
  uint64_t v160 = (uint64_t *)(v110 + v156);
  uint64_t v161 = *v160;
  uint64_t v163 = v160[2];
  id v162 = (void *)v160[3];
  if (!v158)
  {
    sub_10014F5F0(*v160);
    sub_1000D575C(v110);
    sub_1000D575C(v111);
    if (!v161)
    {
      sub_10014F650(0);
      uint64_t v77 = v214;
      uint64_t v117 = v197;
      sub_1000D57B8(v214, v197);
      uint64_t v82 = v212;
      sub_1000D57B8(v79, v212);
      uint64_t v116 = (uint64_t)v213;
      goto LABEL_79;
    }
LABEL_84:
    sub_10014F650(v158);
    sub_10014F650(v161);
    uint64_t v116 = (uint64_t)v213;
    uint64_t v77 = v214;
    uint64_t v117 = v197;
    uint64_t v82 = v212;
    goto LABEL_27;
  }
  uint64_t v221 = v160[1];
  if (!v161)
  {
    sub_10014F5F0(v158);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000D575C(v211);
    sub_1000D575C(v111);
    sub_10014F650(v158);
    goto LABEL_84;
  }
  BOOL v164 = sub_1003508F4(v158, v161);
  sub_10014F5F0(v158);
  uint64_t v165 = v221;
  sub_10014F5F0(v161);
  sub_10014F5F0(v158);
  BOOL v166 = v164 && (sub_1003508F8(v157, v165) & 1) != 0 && sub_1003508F4(v159, v163) && sub_100350808(v222, v162);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000D575C(v211);
  sub_1000D575C(v210);
  sub_10014F650(v158);
  uint64_t v77 = v214;
  uint64_t v117 = v197;
  sub_1000D57B8(v214, v197);
  uint64_t v82 = v212;
  sub_1000D57B8(v79, v212);
  uint64_t v118 = v209;
  uint64_t v116 = (uint64_t)v213;
  if (!v166) {
    goto LABEL_28;
  }
LABEL_79:
  uint64_t v167 = v196[6];
  uint64_t v168 = *(void *)(v82 + v167);
  if (!*(void *)(v117 + v167))
  {
    swift_bridgeObjectRetain();
    sub_1000D575C(v82);
    sub_1000D575C(v117);
    uint64_t v120 = v206;
    uint64_t v119 = v207;
    if (!v168)
    {
      sub_1000D57B8(v77, v116);
      uint64_t v118 = v209;
      sub_1000D57B8(v79, v209);
      goto LABEL_90;
    }
LABEL_88:
    swift_bridgeObjectRelease();
    uint64_t v118 = v209;
    goto LABEL_29;
  }
  uint64_t v120 = v206;
  uint64_t v119 = v207;
  if (!v168)
  {
    swift_bridgeObjectRetain();
    sub_1000D575C(v82);
    sub_1000D575C(v117);
    goto LABEL_88;
  }
  swift_bridgeObjectRetain();
  uint64_t v169 = swift_bridgeObjectRetain();
  char v170 = sub_100351E00(v169, v168);
  swift_bridgeObjectRelease();
  sub_1000D575C(v82);
  sub_1000D575C(v117);
  swift_bridgeObjectRelease();
  sub_1000D57B8(v77, v116);
  uint64_t v118 = v209;
  sub_1000D57B8(v79, v209);
  if ((v170 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_90:
  id v171 = v196;
  char v172 = sub_10014D900(*(void *)(v116 + v196[15]), *(void *)(v116 + v196[15] + 8), *(void *)(v118 + v196[15]), *(void *)(v118 + v196[15] + 8));
  sub_1000D575C(v116);
  sub_1000D575C(v118);
  sub_1000D57B8(v77, v119);
  sub_1000D57B8(v79, v120);
  if ((v172 & 1) == 0) {
    goto LABEL_31;
  }
  uint64_t v173 = v171[10];
  uint64_t v175 = *(void *)(v119 + v173);
  unint64_t v174 = *(void *)(v119 + v173 + 8);
  uint64_t v176 = (uint64_t *)(v120 + v173);
  uint64_t v177 = *v176;
  unint64_t v178 = v176[1];
  if (v174 >> 60 == 15)
  {
    sub_100097E24(v177, v178);
    sub_1000D575C(v206);
    sub_1000D575C(v207);
    if (v178 >> 60 == 15)
    {
      sub_100097F20(v175, v174);
      uint64_t v121 = v205;
      sub_1000D57B8(v214, v205);
      uint64_t v122 = v204;
      sub_1000D57B8(v208, v204);
      goto LABEL_98;
    }
LABEL_96:
    sub_100097F20(v175, v174);
    sub_100097F20(v177, v178);
    uint64_t v79 = v208;
    uint64_t v77 = v214;
    goto LABEL_32;
  }
  if (v178 >> 60 == 15)
  {
    sub_100097E38(v175, v174);
    sub_100097E38(v175, v174);
    sub_1000D575C(v206);
    sub_1000D575C(v207);
    sub_100097F20(v175, v174);
    goto LABEL_96;
  }
  sub_100097E24(v175, v174);
  sub_100097E24(v177, v178);
  sub_100097E24(v175, v174);
  char v179 = sub_10014D900(v175, v174, v177, v178);
  sub_100097F20(v177, v178);
  sub_100097F20(v175, v174);
  sub_1000D575C(v206);
  sub_1000D575C(v207);
  sub_100097F20(v175, v174);
  uint64_t v121 = v205;
  sub_1000D57B8(v214, v205);
  uint64_t v122 = v204;
  sub_1000D57B8(v208, v204);
  if ((v179 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_98:
  uint64_t v180 = v196[16];
  uint64_t v182 = *(void *)(v121 + v180);
  unint64_t v181 = *(void *)(v121 + v180 + 8);
  uint64_t v183 = (uint64_t *)(v122 + v180);
  uint64_t v184 = *v183;
  unint64_t v185 = v183[1];
  if (v181 >> 60 == 15)
  {
    sub_100097E24(v184, v185);
    sub_1000D575C(v204);
    sub_1000D575C(v205);
    if (v185 >> 60 == 15)
    {
      sub_100097F20(v182, v181);
      char v123 = 1;
      return v123 & 1;
    }
  }
  else
  {
    if (v185 >> 60 != 15)
    {
      sub_100097E24(v182, v181);
      sub_100097E24(v184, v185);
      sub_100097E24(v182, v181);
      char v123 = sub_10014D900(v182, v181, v184, v185);
      sub_100097F20(v184, v185);
      sub_100097F20(v182, v181);
      sub_1000D575C(v204);
      sub_1000D575C(v205);
      sub_100097F20(v182, v181);
      return v123 & 1;
    }
    sub_100097E38(v182, v181);
    sub_100097E38(v182, v181);
    sub_1000D575C(v204);
    sub_1000D575C(v205);
    sub_100097F20(v182, v181);
  }
  sub_100097F20(v182, v181);
  sub_100097F20(v184, v185);
LABEL_34:
  char v123 = 0;
  return v123 & 1;
}

uint64_t type metadata accessor for RDSavedReminder()
{
  uint64_t result = qword_10090C528;
  if (!qword_10090C528) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10014F5F0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10014F650(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10014F6B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10014F6F8()
{
  unint64_t result = qword_10090B7C0;
  if (!qword_10090B7C0)
  {
    sub_1000963CC(255, &qword_10090DC80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B7C0);
  }
  return result;
}

uint64_t *sub_10014F760(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = (uint64_t *)((char *)a1 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    if (*v13)
    {
      uint64_t v14 = v13[1];
      uint64_t v15 = v13[2];
      *uint64_t v12 = *v13;
      v12[1] = v14;
      uint64_t v16 = v13[3];
      v12[2] = v15;
      v12[3] = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v17 = *((_OWORD *)v13 + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v17;
    }
    uint64_t v18 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for DateComponents();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    swift_bridgeObjectRetain();
    if (v23(v20, 1, v21))
    {
      uint64_t v24 = sub_100094134((uint64_t *)&unk_100911810);
      memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    uint64_t v25 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v25) = *(uint64_t *)((char *)a2 + v25);
    uint64_t v26 = a3[10];
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (_OWORD *)((char *)a2 + v26);
    unint64_t v29 = *(uint64_t *)((char *)a2 + v26 + 8);
    swift_bridgeObjectRetain();
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v27 = *v28;
    }
    else
    {
      uint64_t v30 = *(void *)v28;
      sub_100097E38(v30, v29);
      *(void *)uint64_t v27 = v30;
      *((void *)v27 + 1) = v29;
    }
    uint64_t v31 = a3[12];
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(uint64_t *)((char *)a1 + v31) = *(uint64_t *)((char *)a2 + v31);
    uint64_t v32 = a3[13];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    swift_bridgeObjectRetain();
    if (v23(v34, 1, v21))
    {
      uint64_t v35 = sub_100094134((uint64_t *)&unk_100911810);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v33, v34, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v33, 0, 1, v21);
    }
    uint64_t v36 = a3[14];
    uint64_t v37 = a3[15];
    uint64_t v38 = (uint64_t *)((char *)a1 + v36);
    uint64_t v39 = (uint64_t *)((char *)a2 + v36);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = (uint64_t *)((char *)a1 + v37);
    uint64_t v42 = *(uint64_t *)((char *)a2 + v37);
    unint64_t v43 = *(uint64_t *)((char *)a2 + v37 + 8);
    swift_bridgeObjectRetain();
    sub_100097E38(v42, v43);
    *uint64_t v41 = v42;
    v41[1] = v43;
    uint64_t v44 = a3[16];
    uint64_t v45 = (char *)a1 + v44;
    uint64_t v46 = (char *)a2 + v44;
    unint64_t v47 = *((void *)v46 + 1);
    if (v47 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    }
    else
    {
      uint64_t v48 = *(void *)v46;
      sub_100097E38(*(void *)v46, *((void *)v46 + 1));
      *(void *)uint64_t v45 = v48;
      *((void *)v45 + 1) = v47;
    }
  }
  return a1;
}

uint64_t sub_10014FB88(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  if (*(void *)(a1 + a2[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for DateComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(a1 + a2[10]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_100097F34(*v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + a2[13];
  if (!v9(v12, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t result = sub_100097F34(*(void *)(a1 + a2[15]), *(void *)(a1 + a2[15] + 8));
  uint64_t v14 = (uint64_t *)(a1 + a2[16]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15)
  {
    uint64_t v16 = *v14;
    return sub_100097F34(v16, v15);
  }
  return result;
}

char *sub_10014FDDC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  unint64_t v11 = &a2[v9];
  if (*(void *)v11)
  {
    uint64_t v12 = *((void *)v11 + 1);
    uint64_t v13 = *((void *)v11 + 2);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    uint64_t v14 = *((void *)v11 + 3);
    *((void *)v10 + 2) = v13;
    *((void *)v10 + 3) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *((_OWORD *)v11 + 1);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v15;
  }
  uint64_t v16 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  long long v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for DateComponents();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  swift_bridgeObjectRetain();
  if (v21(v18, 1, v19))
  {
    uint64_t v22 = sub_100094134((uint64_t *)&unk_100911810);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v23 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  unint64_t v27 = *(void *)&a2[v24 + 8];
  swift_bridgeObjectRetain();
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  }
  else
  {
    uint64_t v28 = *(void *)v26;
    sub_100097E38(v28, v27);
    *(void *)uint64_t v25 = v28;
    *((void *)v25 + 1) = v27;
  }
  uint64_t v29 = a3[12];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  *(void *)&a1[v29] = *(void *)&a2[v29];
  uint64_t v30 = a3[13];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  swift_bridgeObjectRetain();
  if (v21(v32, 1, v19))
  {
    uint64_t v33 = sub_100094134((uint64_t *)&unk_100911810);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v31, v32, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v31, 0, 1, v19);
  }
  uint64_t v34 = a3[14];
  uint64_t v35 = a3[15];
  uint64_t v36 = &a1[v34];
  uint64_t v37 = &a2[v34];
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = v38;
  uint64_t v39 = (uint64_t *)&a1[v35];
  uint64_t v40 = *(void *)&a2[v35];
  unint64_t v41 = *(void *)&a2[v35 + 8];
  swift_bridgeObjectRetain();
  sub_100097E38(v40, v41);
  uint64_t *v39 = v40;
  v39[1] = v41;
  uint64_t v42 = a3[16];
  unint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  unint64_t v45 = *((void *)v44 + 1);
  if (v45 >> 60 == 15)
  {
    *(_OWORD *)unint64_t v43 = *(_OWORD *)v44;
  }
  else
  {
    uint64_t v46 = *(void *)v44;
    sub_100097E38(*(void *)v44, *((void *)v44 + 1));
    *(void *)unint64_t v43 = v46;
    *((void *)v43 + 1) = v45;
  }
  return a1;
}

char *sub_1001501B4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void *)&a2[v12];
  if (*(void *)&a1[v12])
  {
    if (v15)
    {
      *(void *)uint64_t v13 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v13 + 1) = *((void *)v14 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v13 + 2) = *((void *)v14 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v13 + 3) = *((void *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100150800((uint64_t)&a1[v12]);
      long long v16 = *((_OWORD *)v14 + 1);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v16;
    }
  }
  else if (v15)
  {
    *(void *)uint64_t v13 = v15;
    *((void *)v13 + 1) = *((void *)v14 + 1);
    *((void *)v13 + 2) = *((void *)v14 + 2);
    *((void *)v13 + 3) = *((void *)v14 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *((_OWORD *)v14 + 1);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v17;
  }
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for DateComponents();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_20:
    uint64_t v26 = sub_100094134((uint64_t *)&unk_100911810);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
LABEL_21:
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[10];
  uint64_t v28 = (uint64_t *)&a1[v27];
  uint64_t v29 = (uint64_t *)&a2[v27];
  unint64_t v30 = *(void *)&a2[v27 + 8];
  if (*(void *)&a1[v27 + 8] >> 60 == 15)
  {
    if (v30 >> 60 != 15)
    {
      uint64_t v31 = *v29;
      sub_100097E38(v31, v30);
      *uint64_t v28 = v31;
      v28[1] = v30;
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (v30 >> 60 == 15)
  {
    sub_1000EB0AC((uint64_t)v28);
LABEL_26:
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    goto LABEL_28;
  }
  uint64_t v32 = *v29;
  sub_100097E38(v32, v30);
  uint64_t v33 = *v28;
  unint64_t v34 = v28[1];
  *uint64_t v28 = v32;
  v28[1] = v30;
  sub_100097F34(v33, v34);
LABEL_28:
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[13];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  int v38 = v23(&a1[v35], 1, v21);
  int v39 = v23(v37, 1, v21);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v36, v37, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v36, 0, 1, v21);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v36, v21);
LABEL_33:
    uint64_t v40 = sub_100094134((uint64_t *)&unk_100911810);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v36, v37, v21);
LABEL_34:
  uint64_t v41 = a3[14];
  uint64_t v42 = &a1[v41];
  unint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[15];
  unint64_t v45 = (uint64_t *)&a1[v44];
  uint64_t v46 = (uint64_t *)&a2[v44];
  uint64_t v47 = *v46;
  unint64_t v48 = v46[1];
  sub_100097E38(*v46, v48);
  uint64_t v49 = *v45;
  unint64_t v50 = v45[1];
  *unint64_t v45 = v47;
  v45[1] = v48;
  sub_100097F34(v49, v50);
  uint64_t v51 = a3[16];
  uint64_t v52 = (uint64_t *)&a1[v51];
  uint64_t v53 = (uint64_t *)&a2[v51];
  unint64_t v54 = *(void *)&a2[v51 + 8];
  if (*(void *)&a1[v51 + 8] >> 60 != 15)
  {
    if (v54 >> 60 != 15)
    {
      uint64_t v56 = *v53;
      sub_100097E38(v56, v54);
      uint64_t v57 = *v52;
      unint64_t v58 = v52[1];
      *uint64_t v52 = v56;
      v52[1] = v54;
      sub_100097F34(v57, v58);
      return a1;
    }
    sub_1000EB0AC((uint64_t)v52);
    goto LABEL_39;
  }
  if (v54 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
    return a1;
  }
  uint64_t v55 = *v53;
  sub_100097E38(v55, v54);
  *uint64_t v52 = v55;
  v52[1] = v54;
  return a1;
}

uint64_t sub_100150800(uint64_t a1)
{
  return a1;
}

char *sub_100150854(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  long long v13 = *(_OWORD *)v12;
  long long v14 = *((_OWORD *)v12 + 1);
  uint64_t v15 = *(void *)&a2[v10];
  *(_OWORD *)uint64_t v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *(void *)&a1[v10] = v15;
  uint64_t v16 = a3[7];
  long long v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for DateComponents();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v18, 1, v19))
  {
    uint64_t v22 = sub_100094134((uint64_t *)&unk_100911810);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v23 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  uint64_t v24 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(void *)&a1[v24] = *(void *)&a2[v24];
  uint64_t v25 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  if (v21(&a2[v25], 1, v19))
  {
    uint64_t v28 = sub_100094134((uint64_t *)&unk_100911810);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v26, v27, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
  }
  uint64_t v29 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  *(_OWORD *)&a1[a3[16]] = *(_OWORD *)&a2[a3[16]];
  return a1;
}

char *sub_100150B60(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  long long v13 = &a1[v12];
  long long v14 = &a2[v12];
  if (*(void *)&a1[v12])
  {
    if (*(void *)v14)
    {
      *(void *)long long v13 = *(void *)v14;
      swift_bridgeObjectRelease();
      *((void *)v13 + 1) = *((void *)v14 + 1);
      swift_bridgeObjectRelease();
      *((void *)v13 + 2) = *((void *)v14 + 2);
      swift_bridgeObjectRelease();
      *((void *)v13 + 3) = *((void *)v14 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_100150800((uint64_t)v13);
  }
  long long v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)long long v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
LABEL_12:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  long long v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for DateComponents();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_17:
    uint64_t v24 = sub_100094134((uint64_t *)&unk_100911810);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_18:
  uint64_t v25 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v25] = *(void *)&a2[v25];
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[10];
  uint64_t v27 = (uint64_t)&a1[v26];
  uint64_t v28 = &a2[v26];
  unint64_t v29 = *(void *)&a1[v26 + 8];
  if (v29 >> 60 == 15)
  {
LABEL_21:
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    goto LABEL_23;
  }
  unint64_t v30 = *((void *)v28 + 1);
  if (v30 >> 60 == 15)
  {
    sub_1000EB0AC(v27);
    goto LABEL_21;
  }
  uint64_t v31 = *(void *)v27;
  *(void *)uint64_t v27 = *(void *)v28;
  *(void *)(v27 + 8) = v30;
  sub_100097F34(v31, v29);
LABEL_23:
  uint64_t v32 = a3[12];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  *(void *)&a1[v32] = *(void *)&a2[v32];
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[13];
  unint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  int v36 = v21(&a1[v33], 1, v19);
  int v37 = v21(v35, 1, v19);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v34, v35, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v34, 0, 1, v19);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v34, v19);
LABEL_28:
    uint64_t v38 = sub_100094134((uint64_t *)&unk_100911810);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_29;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v34, v35, v19);
LABEL_29:
  uint64_t v39 = a3[14];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[15];
  uint64_t v45 = *(void *)&a1[v44];
  unint64_t v46 = *(void *)&a1[v44 + 8];
  *(_OWORD *)&a1[v44] = *(_OWORD *)&a2[v44];
  sub_100097F34(v45, v46);
  uint64_t v47 = a3[16];
  unint64_t v48 = (uint64_t *)&a1[v47];
  uint64_t v49 = (uint64_t *)&a2[v47];
  unint64_t v50 = *(void *)&a1[v47 + 8];
  if (v50 >> 60 != 15)
  {
    unint64_t v51 = v49[1];
    if (v51 >> 60 != 15)
    {
      uint64_t v52 = *v48;
      *unint64_t v48 = *v49;
      v48[1] = v51;
      sub_100097F34(v52, v50);
      return a1;
    }
    sub_1000EB0AC((uint64_t)v48);
  }
  *(_OWORD *)unint64_t v48 = *(_OWORD *)v49;
  return a1;
}

uint64_t sub_1001510A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001510B4);
}

uint64_t sub_1001510B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100911810);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 28);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 56) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1001511D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001511E8);
}

uint64_t sub_1001511E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_100094134((uint64_t *)&unk_100911810);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 56) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_100151304()
{
  sub_10015144C(319, (unint64_t *)&qword_100909F30, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F)
  {
    sub_10015144C(319, (unint64_t *)&unk_10090C538, (void (*)(uint64_t))&type metadata accessor for DateComponents);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10015144C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1001514A0()
{
  unint64_t result = qword_10090C5A0;
  if (!qword_10090C5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C5A0);
  }
  return result;
}

unint64_t sub_1001514F4()
{
  unint64_t result = qword_10090C5B0;
  if (!qword_10090C5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C5B0);
  }
  return result;
}

unint64_t sub_100151548()
{
  unint64_t result = qword_10090C5C8;
  if (!qword_10090C5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C5C8);
  }
  return result;
}

unint64_t sub_10015159C()
{
  unint64_t result = qword_10090C5E8;
  if (!qword_10090C5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C5E8);
  }
  return result;
}

unint64_t sub_1001515F0()
{
  unint64_t result = qword_10090C600;
  if (!qword_10090C600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C600);
  }
  return result;
}

unint64_t sub_100151644()
{
  unint64_t result = qword_10090C618;
  if (!qword_10090C618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C618);
  }
  return result;
}

unint64_t sub_100151698()
{
  unint64_t result = qword_10090C628;
  if (!qword_10090C628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C628);
  }
  return result;
}

unint64_t sub_1001516EC()
{
  unint64_t result = qword_10090C640;
  if (!qword_10090C640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C640);
  }
  return result;
}

uint64_t sub_100151740(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001517AC()
{
  unint64_t result = qword_10090C650;
  if (!qword_10090C650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C650);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RDSavedReminder.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RDSavedReminder.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10015195CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedReminder.CodingKeys()
{
  return &type metadata for RDSavedReminder.CodingKeys;
}

unint64_t sub_100151998()
{
  unint64_t result = qword_10090C658;
  if (!qword_10090C658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C658);
  }
  return result;
}

unint64_t sub_1001519F0()
{
  unint64_t result = qword_10090C660;
  if (!qword_10090C660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C660);
  }
  return result;
}

unint64_t sub_100151A48()
{
  unint64_t result = qword_10090C668;
  if (!qword_10090C668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C668);
  }
  return result;
}

uint64_t sub_100151A9C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461657263 && a2 == 0xEC00000065746144;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6972546D72616C61 && a2 == 0xED00007372656767 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001007C8700 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001007C6910 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x64656767616C66 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7367617468736168 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001007C6930 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E65727275636572 && a2 == 0xEF73656C75526563 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001007C68F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001007C6880 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001007CBE00)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 12;
    }
    else {
      return 13;
    }
  }
}

void *sub_100151FE8(unint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v4 = sub_1001541C0(a1, (uint64_t)a2, a3);

  return v4;
}

uint64_t sub_100152028()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090C670);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090C670);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001520F0()
{
  uint64_t result = sub_1002F51CC(0);
  qword_100941FD8 = result;
  return result;
}

uint64_t sub_100152114()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v1 = sub_10039AFE8(KeyPath);
  uint64_t result = swift_release();
  qword_100941FE0 = v1;
  return result;
}

uint64_t sub_100152158(void (*a1)(uint64_t, void, uint64_t, id), uint64_t a2)
{
  uint64_t v269 = a2;
  uint64_t v271 = a1;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v255 = *(void *)(v3 - 8);
  uint64_t v256 = v3;
  __chkstk_darwin(v3);
  uint64_t v253 = (char *)&v253 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v254 = (char *)&v253 - v6;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  unint64_t v260 = (char *)&v253 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v268 = (char *)&v253 - v10;
  __chkstk_darwin(v11);
  v267 = (char *)&v253 - v12;
  __chkstk_darwin(v13);
  unint64_t v266 = (char *)&v253 - v14;
  __chkstk_darwin(v15);
  unint64_t v259 = (char *)&v253 - v16;
  __chkstk_darwin(v17);
  uint64_t v265 = (char *)&v253 - v18;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v253 - v20;
  __chkstk_darwin(v22);
  uint64_t v270 = (char *)&v253 - v23;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v253 - v25;
  uint64_t v27 = (void *)type metadata accessor for Date();
  uint64_t v28 = *(v27 - 1);
  id v274 = v27;
  *(void *)&long long v275 = v28;
  __chkstk_darwin(v27);
  uint64_t v258 = (char *)&v253 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v264 = (char *)&v253 - v31;
  __chkstk_darwin(v32);
  uint64_t v262 = (char *)&v253 - v33;
  __chkstk_darwin(v34);
  unint64_t v261 = (char *)&v253 - v35;
  __chkstk_darwin(v36);
  uint64_t v257 = (char *)&v253 - v37;
  __chkstk_darwin(v38);
  uint64_t v263 = (char *)&v253 - v39;
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v253 - v41;
  __chkstk_darwin(v43);
  uint64_t v273 = (char *)&v253 - v44;
  __chkstk_darwin(v45);
  uint64_t v47 = (char *)&v253 - v46;
  uint64_t v48 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v49 = *(void *)(v48 - 8);
  __chkstk_darwin(v48 - 8);
  unint64_t v51 = (char *)&v253 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906F20 != -1) {
    swift_once();
  }
  uint64_t v272 = qword_100941FD8;
  uint64_t v52 = v2;
  switch((unint64_t)[v2 type])
  {
    case 0uLL:
      id v53 = [v2 listID];
      if (!v53) {
        goto LABEL_67;
      }
      unint64_t v54 = (void (*)(uint64_t, void, uint64_t, id))v53;
      uint64_t v55 = v276;
      uint64_t v56 = sub_100694D98(v54);
      if (v55) {
        goto LABEL_75;
      }
      id v57 = v56;
      uint64_t v58 = sub_100551480(v56, 0);
      uint64_t v2 = (void *)v58;
      if (v58)
      {
        uint64_t v276 = 0;
        uint64_t KeyPath = swift_getKeyPath();
        id v223 = v2;
        char v224 = (void *)sub_10032E028(KeyPath, v2);
        swift_release();

        sub_100094134(&qword_10090C688);
        uint64_t inited = swift_initStackObject();
        long long v275 = xmmword_100776E80;
        *(_OWORD *)(inited + 16) = xmmword_100776E80;
        uint64_t v226 = (void *)v272;
        *(void *)(inited + 32) = v272;
        *(void *)(inited + 40) = v224;
        BOOL v277 = (void *)inited;
        specialized Array._endMutation()();
        uint64_t v227 = v277;
        id v228 = v224;
        id v229 = v226;
        uint64_t v2 = (void *)sub_1002F52FC(v227);
        if (v269)
        {
        }
        else
        {
          uint64_t v230 = swift_getKeyPath();
          id v274 = v2;
          BOOL v231 = (void *)sub_10039AD8C(v230);
          swift_release();
          uint64_t v232 = swift_initStackObject();
          *(_OWORD *)(v232 + 16) = v275;
          *(void *)(v232 + 32) = v2;
          *(void *)(v232 + 40) = v231;
          BOOL v277 = (void *)v232;
          specialized Array._endMutation()();
          uint64_t v233 = v277;
          id v234 = v231;
          uint64_t v2 = (void *)sub_1002F52FC(v233);
        }
      }
      else
      {
        [self noSuchObjectErrorWithObjectID:v54];
        swift_willThrow();

LABEL_41:
      }
      return (uint64_t)v2;
    case 1uLL:
      id v154 = [v2 parentReminderID];
      if (!v154) {
        goto LABEL_67;
      }
      id v57 = v154;
      uint64_t v155 = v276;
      uint64_t v156 = (void (*)(uint64_t, void, uint64_t, id))sub_100693E40(v57);
      if (v155) {
        goto LABEL_41;
      }
      unint64_t v54 = v156;
      uint64_t v211 = sub_1005513E4(v156, 0);
      uint64_t v2 = (void *)v211;
      if (v211)
      {
        uint64_t v235 = swift_getKeyPath();
        id v236 = v2;
        uint64_t v237 = sub_10032E03C(v235, v2);
        swift_release();

        sub_100094134(&qword_10090C688);
        uint64_t v238 = swift_initStackObject();
        *(_OWORD *)(v238 + 16) = xmmword_100776E80;
        uint64_t v239 = (void *)v272;
        *(void *)(v238 + 32) = v272;
        *(void *)(v238 + 40) = v237;
        BOOL v277 = (void *)v238;
        specialized Array._endMutation()();
        uint64_t v240 = v277;
        id v241 = v239;
        uint64_t v2 = (void *)sub_1002F52FC(v240);

        return (uint64_t)v2;
      }
      [self noSuchObjectErrorWithObjectID:v57];
      swift_willThrow();

      goto LABEL_75;
    case 2uLL:
      id v116 = [v2 objectIDs];
      if (!v116) {
        goto LABEL_67;
      }
      uint64_t v117 = v116;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      unint64_t v118 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v119 = (id)swift_getKeyPath();
      if (!(v118 >> 62))
      {
        uint64_t v120 = *(void *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v120) {
          goto LABEL_24;
        }
LABEL_100:
        swift_bridgeObjectRelease();
        uint64_t v122 = _swiftEmptyArrayStorage;
        goto LABEL_101;
      }
      swift_bridgeObjectRetain();
      uint64_t v120 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v120) {
        goto LABEL_100;
      }
LABEL_24:
      id v274 = v119;
      BOOL v277 = _swiftEmptyArrayStorage;
      sub_1001DE118(0, v120 & ~(v120 >> 63), 0);
      *(void *)&long long v275 = v120;
      if (v120 < 0)
      {
        __break(1u);
LABEL_103:
        if (qword_100906F18 != -1) {
          swift_once();
        }
        uint64_t v247 = v256;
        uint64_t v248 = sub_10008E2DC(v256, (uint64_t)qword_10090C670);
        (*(void (**)(char *, uint64_t, uint64_t))(v255 + 16))(v253, v248, v247);
        sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
        sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v249 = "unknown type";
        for (uint64_t i = 12; ; uint64_t i = 20)
        {
          sub_10052ECB8((uint64_t)v249, i, 2);
          __break(1u);
LABEL_107:
          if (qword_100906F18 != -1) {
            swift_once();
          }
          uint64_t v251 = v256;
          uint64_t v252 = sub_10008E2DC(v256, (uint64_t)qword_10090C670);
          (*(void (**)(char *, uint64_t, uint64_t))(v255 + 16))(v254, v252, v251);
          sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
          sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v249 = "unknown textMatching";
        }
      }
      uint64_t v121 = 0;
      uint64_t v122 = v277;
      unint64_t v123 = v118 & 0xC000000000000001;
      unint64_t v124 = v118;
      do
      {
        if (v123) {
          id v125 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v125 = *(id *)(v118 + 8 * v121 + 32);
        }
        uint64_t v126 = v125;
        id v127 = [v125 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v128 = type metadata accessor for UUID();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v128 - 8) + 56))(v51, 0, 1, v128);

        BOOL v277 = v122;
        unint64_t v130 = v122[2];
        unint64_t v129 = v122[3];
        if (v130 >= v129 >> 1)
        {
          sub_1001DE118(v129 > 1, v130 + 1, 1);
          uint64_t v122 = v277;
        }
        ++v121;
        v122[2] = v130 + 1;
        sub_1000F44F4((uint64_t)v51, (uint64_t)v122+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v130);
        unint64_t v118 = v124;
      }
      while ((void)v275 != v121);
      swift_bridgeObjectRelease();
      id v119 = v274;
LABEL_101:
      uint64_t v242 = sub_10039ADB0((uint64_t)v119, (uint64_t)v122);
      swift_release();
      sub_100094134(&qword_10090C688);
      uint64_t v243 = swift_initStackObject();
      *(_OWORD *)(v243 + 16) = xmmword_100776E80;
      char v244 = (void *)v272;
      *(void *)(v243 + 32) = v272;
      *(void *)(v243 + 40) = v242;
      BOOL v277 = (void *)v243;
      specialized Array._endMutation()();
      uint64_t v245 = v277;
      id v246 = v244;
      return sub_1002F52FC(v245);
    case 3uLL:
      id v131 = [v2 startingDueDate];
      if (v131)
      {
        uint64_t v132 = v131;
        uint64_t v133 = v273;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v135 = v274;
        uint64_t v134 = v275;
        int v136 = *(void (**)(char *, char *, id))(v275 + 32);
        v136(v26, v133, v274);
        uint64_t v137 = *(void (**)(char *, void, uint64_t, id))(v134 + 56);
        v137(v26, 0, 1, v135);
        if ((*(unsigned int (**)(char *, uint64_t, id))(v134 + 48))(v26, 1, v135) != 1)
        {
          v136(v47, v26, v135);
          uint64_t v138 = swift_getKeyPath();
          uint64_t v139 = (uint64_t)v270;
          (*(void (**)(char *, char *, id))(v134 + 16))(v270, v47, v135);
          v137((char *)v139, 0, 1, v135);
          uint64_t v140 = sub_10039ADC4(v138, v139);
          swift_release();
          sub_100094134(&qword_10090C688);
          uint64_t v141 = swift_initStackObject();
          *(_OWORD *)(v141 + 16) = xmmword_100776E80;
          uint64_t v142 = (void *)v272;
          *(void *)(v141 + 32) = v272;
          *(void *)(v141 + 40) = v140;
          BOOL v277 = (void *)v141;
          specialized Array._endMutation()();
          uint64_t v143 = v277;
          id v144 = v142;
          uint64_t v2 = (void *)sub_1002F52FC(v143);
          (*(void (**)(char *, id))(v134 + 8))(v47, v135);
          return (uint64_t)v2;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, id))(v275 + 56))(v26, 1, 1, v274);
      }
      sub_1000EACF4((uint64_t)v26);
      uint64_t v2 = self;
      NSString v208 = String._bridgeToObjectiveC()();
      id v209 = [v2 internalErrorWithDebugDescription:v208];
      goto LABEL_89;
    case 4uLL:
      id v75 = [v2 endingDueDate];
      if (!v75)
      {
        (*(void (**)(char *, uint64_t, uint64_t, id))(v275 + 56))(v21, 1, 1, v274);
        goto LABEL_61;
      }
      uint64_t v76 = v75;
      uint64_t v77 = v273;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v79 = v274;
      uint64_t v78 = v275;
      uint64_t v80 = *(void (**)(char *, char *, id))(v275 + 32);
      v80(v21, v77, v274);
      id v81 = *(void (**)(char *, void, uint64_t, id))(v78 + 56);
      v81(v21, 0, 1, v79);
      if ((*(unsigned int (**)(char *, uint64_t, id))(v78 + 48))(v21, 1, v79) == 1) {
        goto LABEL_61;
      }
      v80(v42, v21, v79);
      uint64_t v82 = swift_getKeyPath();
      uint64_t v83 = (uint64_t)v270;
      (*(void (**)(char *, char *, id))(v78 + 16))(v270, v42, v79);
      v81((char *)v83, 0, 1, v79);
      uint64_t v84 = sub_10039ADEC(v82, v83);
      swift_release();
      sub_100094134(&qword_10090C688);
      uint64_t v85 = swift_initStackObject();
      *(_OWORD *)(v85 + 16) = xmmword_100776E80;
      uint64_t v86 = (void *)v272;
      *(void *)(v85 + 32) = v272;
      *(void *)(v85 + 40) = v84;
      BOOL v277 = (void *)v85;
      specialized Array._endMutation()();
      id v87 = v277;
      id v88 = v86;
      uint64_t v2 = (void *)sub_1002F52FC(v87);
      (*(void (**)(char *, id))(v78 + 8))(v42, v79);
      return (uint64_t)v2;
    case 5uLL:
      id v157 = [v2 startingDueDate];
      if (v157)
      {
        uint64_t v158 = v157;
        uint64_t v159 = v273;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v160 = v274;
        uint64_t v161 = v275;
        id v162 = *(void (**)(char *, char *, id))(v275 + 32);
        uint64_t v95 = (uint64_t)v265;
        v162(v265, v159, v274);
        uint64_t v271 = *(void (**)(uint64_t, void, uint64_t, id))(v161 + 56);
        v271(v95, 0, 1, v160);
        uint64_t v163 = *(unsigned int (**)(uint64_t, uint64_t, id))(v161 + 48);
        if (v163(v95, 1, v160) == 1) {
          goto LABEL_88;
        }
        v162(v263, (char *)v95, v160);
        id v164 = [v52 endingDueDate];
        if (v164)
        {
          uint64_t v165 = v164;
          BOOL v166 = v273;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v95 = (uint64_t)v259;
          v162(v259, v166, v160);
          v271(v95, 0, 1, v160);
          unsigned int v167 = v163(v95, 1, v160);
          id v168 = v160;
          uint64_t v169 = v275;
          if (v167 != 1)
          {
            v162(v257, (char *)v95, v160);
            uint64_t v170 = swift_getKeyPath();
            uint64_t v269 = *(void *)(v169 + 16);
            uint64_t v171 = (uint64_t)v270;
            ((void (*)(char *, char *, id))v269)(v270, v263, v160);
            id v172 = v160;
            uint64_t v173 = v271;
            v271(v171, 0, 1, v172);
            uint64_t v273 = (char *)sub_10039ADEC(v170, v171);
            swift_release();
            uint64_t v174 = swift_getKeyPath();
            ((void (*)(uint64_t, char *, id))v269)(v171, v257, v168);
            v173(v171, 0, 1, v168);
            uint64_t v175 = sub_10039ADC4(v174, v171);
            swift_release();
            sub_100094134(&qword_10090C688);
            uint64_t v176 = swift_initStackObject();
            *(_OWORD *)(v176 + 16) = xmmword_100776E60;
            unint64_t v178 = (void *)v272;
            uint64_t v177 = v273;
            *(void *)(v176 + 32) = v272;
            *(void *)(v176 + 40) = v177;
            *(void *)(v176 + 48) = v175;
            BOOL v277 = (void *)v176;
            specialized Array._endMutation()();
            char v179 = v277;
            id v180 = v178;
            uint64_t v2 = (void *)sub_1002F52FC(v179);
            unint64_t v181 = *(void (**)(char *, id))(v169 + 8);
            v181(v257, v168);
            v181(v263, v168);
            return (uint64_t)v2;
          }
        }
        else
        {
          uint64_t v95 = (uint64_t)v259;
          v271((uint64_t)v259, 1, 1, v160);
          id v168 = v160;
          uint64_t v169 = v275;
        }
        (*(void (**)(char *, id))(v169 + 8))(v263, v168);
      }
      else
      {
        uint64_t v95 = (uint64_t)v265;
        (*(void (**)(char *, uint64_t, uint64_t, id))(v275 + 56))(v265, 1, 1, v274);
      }
      goto LABEL_88;
    case 6uLL:
      unsigned int v182 = [v2 completed];
      uint64_t v183 = swift_getKeyPath();
      if (v182) {
        uint64_t v184 = sub_10032E050(v183, 1);
      }
      else {
        uint64_t v184 = sub_10039AFE8(v183);
      }
      uint64_t v205 = v184;
      uint64_t v153 = (void *)v272;
      swift_release();
      sub_100094134(&qword_10090C688);
      uint64_t v152 = swift_initStackObject();
      *(_OWORD *)(v152 + 16) = xmmword_100776E80;
      *(void *)(v152 + 32) = v153;
      *(void *)(v152 + 40) = v205;
LABEL_57:
      BOOL v277 = (void *)v152;
      specialized Array._endMutation()();
      uint64_t v206 = v277;
      id v207 = v153;
LABEL_81:
      double v213 = v206;
      return sub_1002F52FC(v213);
    case 7uLL:
      id v145 = [v2 text];
      if (v145)
      {
        uint64_t v146 = v145;
        uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v149 = v148;

        switch((unint64_t)[v52 textMatching])
        {
          case 0uLL:
            uint64_t v150 = swift_getKeyPath();
            uint64_t v151 = sub_10032E05C(v150, v147, v149);
            swift_release();
            swift_bridgeObjectRelease();
            sub_100094134(&qword_10090C688);
            uint64_t v152 = swift_initStackObject();
            *(_OWORD *)(v152 + 16) = xmmword_100776E80;
            uint64_t v153 = (void *)v272;
            *(void *)(v152 + 32) = v272;
            *(void *)(v152 + 40) = v151;
            goto LABEL_57;
          case 1uLL:
            uint64_t v217 = swift_getKeyPath();
            uint64_t v215 = sub_10039B008(v217, v147, v149, 6);
            swift_release();
            sub_100094134(&qword_10090C688);
            goto LABEL_80;
          case 2uLL:
            int v214 = swift_getKeyPath();
            uint64_t v215 = (uint64_t)sub_10052FC1C(v214, v147, v149, 6);
            swift_release();
            sub_100094134(&qword_10090C688);
            goto LABEL_80;
          case 3uLL:
            int v216 = swift_getKeyPath();
            uint64_t v215 = (uint64_t)sub_10052FC4C(v216, v147, v149, 6);
            swift_release();
            sub_100094134(&qword_10090C688);
LABEL_80:
            uint64_t v218 = swift_initStackObject();
            *(_OWORD *)(v218 + 16) = xmmword_100776E80;
            uint64_t v219 = (void *)v272;
            *(void *)(v218 + 32) = v272;
            *(void *)(v218 + 40) = v215;
            BOOL v277 = (void *)v218;
            specialized Array._endMutation()();
            uint64_t v206 = v277;
            id v220 = v219;
            goto LABEL_81;
          default:
            goto LABEL_107;
        }
      }
      goto LABEL_67;
    case 8uLL:
      id v200 = [v2 descriptors];
      if (!v200) {
        goto LABEL_67;
      }
      id v201 = v200;
      sub_1000963CC(0, &qword_10090C690);
      uint64_t v2 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v202 = v271;
      uint64_t v203 = v276;
      uint64_t v204 = sub_100151FE8((unint64_t)v2, v202, v269);
      if (v203)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v212 = v204;
        swift_bridgeObjectRelease();
        double v213 = v212;
        return sub_1002F52FC(v213);
      }
      return (uint64_t)v2;
    case 9uLL:
      id v112 = [v2 descriptors];
      if (!v112)
      {
LABEL_67:
        uint64_t v2 = self;
        NSString v208 = String._bridgeToObjectiveC()();
        id v209 = [v2 internalErrorWithDebugDescription:v208];
        goto LABEL_89;
      }
      uint64_t v113 = v112;
      sub_1000963CC(0, &qword_10090C690);
      uint64_t v2 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v54 = v271;
      uint64_t v114 = v276;
      uint64_t v115 = sub_1001541C0((unint64_t)v2, (uint64_t)v54, v269);
      if (v114)
      {
        swift_bridgeObjectRelease();
LABEL_75:
      }
      else
      {
        uint64_t v210 = v115;
        swift_bridgeObjectRelease();

        return sub_100397E58(v210);
      }
      return (uint64_t)v2;
    case 0xAuLL:
      id v185 = [v2 startingDueDate];
      if (v185)
      {
        uint64_t v186 = v185;
        uint64_t v187 = v273;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v189 = v274;
        uint64_t v188 = v275;
        uint64_t v190 = *(void (**)(char *, char *, id))(v275 + 32);
        uint64_t v21 = v266;
        v190(v266, v187, v274);
        uint64_t v191 = *(void (**)(char *, void, uint64_t, id))(v188 + 56);
        v191(v21, 0, 1, v189);
        if ((*(unsigned int (**)(char *, uint64_t, id))(v188 + 48))(v21, 1, v189) != 1)
        {
          v190(v261, v21, v189);
          uint64_t v192 = swift_getKeyPath();
          uint64_t v193 = (uint64_t)v270;
          uint64_t v194 = v261;
          (*(void (**)(char *, char *, id))(v188 + 16))(v270, v261, v189);
          v191((char *)v193, 0, 1, v189);
          uint64_t v195 = sub_10039ADC4(v192, v193);
          swift_release();
          sub_100094134(&qword_10090C688);
          uint64_t v196 = swift_initStackObject();
          *(_OWORD *)(v196 + 16) = xmmword_100776E80;
          uint64_t v197 = (void *)v272;
          *(void *)(v196 + 32) = v272;
          *(void *)(v196 + 40) = v195;
          BOOL v277 = (void *)v196;
          specialized Array._endMutation()();
          uint64_t v198 = v277;
          id v199 = v197;
          uint64_t v2 = (void *)sub_1002F52FC(v198);
          (*(void (**)(char *, id))(v188 + 8))(v194, v189);
          return (uint64_t)v2;
        }
      }
      else
      {
        uint64_t v21 = v266;
        (*(void (**)(char *, uint64_t, uint64_t, id))(v275 + 56))(v266, 1, 1, v274);
      }
LABEL_61:
      sub_1000EACF4((uint64_t)v21);
      uint64_t v2 = self;
      NSString v208 = String._bridgeToObjectiveC()();
      id v209 = [v2 internalErrorWithDebugDescription:v208];
      goto LABEL_89;
    case 0xBuLL:
      id v59 = [v2 endingDueDate];
      if (v59)
      {
        uint64_t v60 = v59;
        uint64_t v61 = v273;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v63 = v274;
        uint64_t v62 = v275;
        uint64_t v64 = *(void (**)(char *, char *, id))(v275 + 32);
        uint64_t v65 = (uint64_t)v267;
        v64(v267, v61, v274);
        uint64_t v66 = *(void (**)(uint64_t, void, uint64_t, id))(v62 + 56);
        v66(v65, 0, 1, v63);
        if ((*(unsigned int (**)(uint64_t, uint64_t, id))(v62 + 48))(v65, 1, v63) != 1)
        {
          v64(v262, (char *)v65, v63);
          uint64_t v67 = swift_getKeyPath();
          uint64_t v68 = (uint64_t)v270;
          uint64_t v69 = v262;
          (*(void (**)(char *, char *, id))(v62 + 16))(v270, v262, v63);
          v66(v68, 0, 1, v63);
          uint64_t v70 = sub_10039ADEC(v67, v68);
          swift_release();
          sub_100094134(&qword_10090C688);
          uint64_t v71 = swift_initStackObject();
          *(_OWORD *)(v71 + 16) = xmmword_100776E80;
          uint64_t v72 = (void *)v272;
          *(void *)(v71 + 32) = v272;
          *(void *)(v71 + 40) = v70;
          BOOL v277 = (void *)v71;
          specialized Array._endMutation()();
          uint64_t v73 = v277;
          id v74 = v72;
          uint64_t v2 = (void *)sub_1002F52FC(v73);
          (*(void (**)(char *, id))(v62 + 8))(v69, v63);
          return (uint64_t)v2;
        }
      }
      else
      {
        uint64_t v65 = (uint64_t)v267;
        (*(void (**)(char *, uint64_t, uint64_t, id))(v275 + 56))(v267, 1, 1, v274);
      }
      sub_1000EACF4(v65);
      uint64_t v2 = self;
      NSString v208 = String._bridgeToObjectiveC()();
      id v209 = [v2 internalErrorWithDebugDescription:v208];
      goto LABEL_89;
    case 0xCuLL:
      id v89 = [v2 startingDueDate];
      if (v89)
      {
        unint64_t v90 = v89;
        uint64_t v91 = v273;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v92 = v274;
        uint64_t v93 = v275;
        uint64_t v94 = *(void (**)(char *, char *, id))(v275 + 32);
        uint64_t v95 = (uint64_t)v268;
        v94(v268, v91, v274);
        uint64_t v271 = *(void (**)(uint64_t, void, uint64_t, id))(v93 + 56);
        v271(v95, 0, 1, v92);
        uint64_t v96 = *(unsigned int (**)(uint64_t, uint64_t, id))(v93 + 48);
        if (v96(v95, 1, v92) != 1)
        {
          v94(v264, (char *)v95, v92);
          id v97 = [v52 endingDueDate];
          if (v97)
          {
            uint64_t v98 = v97;
            uint64_t v99 = v273;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v95 = (uint64_t)v260;
            v94(v260, v99, v92);
            uint64_t v100 = v271;
            v271(v95, 0, 1, v92);
            if (v96(v95, 1, v92) != 1)
            {
              v94(v258, (char *)v95, v92);
              uint64_t v101 = swift_getKeyPath();
              uint64_t v102 = *(void (**)(char *, char *, id))(v275 + 16);
              uint64_t v103 = (uint64_t)v270;
              v102(v270, v264, v92);
              v100(v103, 0, 1, v92);
              uint64_t v273 = (char *)sub_10039ADEC(v101, v103);
              swift_release();
              uint64_t v104 = swift_getKeyPath();
              v102((char *)v103, v258, v92);
              v100(v103, 0, 1, v92);
              uint64_t v105 = sub_10039ADC4(v104, v103);
              swift_release();
              sub_100094134(&qword_10090C688);
              uint64_t v106 = swift_initStackObject();
              *(_OWORD *)(v106 + 16) = xmmword_100776E60;
              uint64_t v108 = (void *)v272;
              uint64_t v107 = v273;
              *(void *)(v106 + 32) = v272;
              *(void *)(v106 + 40) = v107;
              *(void *)(v106 + 48) = v105;
              BOOL v277 = (void *)v106;
              specialized Array._endMutation()();
              uint64_t v109 = v277;
              id v110 = v108;
              uint64_t v2 = (void *)sub_1002F52FC(v109);
              uint64_t v111 = *(void (**)(char *, id))(v275 + 8);
              v111(v258, v92);
              v111(v264, v92);
              return (uint64_t)v2;
            }
          }
          else
          {
            uint64_t v95 = (uint64_t)v260;
            v271((uint64_t)v260, 1, 1, v92);
          }
          (*(void (**)(char *, id))(v275 + 8))(v264, v92);
        }
      }
      else
      {
        uint64_t v95 = (uint64_t)v268;
        (*(void (**)(char *, uint64_t, uint64_t, id))(v275 + 56))(v268, 1, 1, v274);
      }
LABEL_88:
      sub_1000EACF4(v95);
      uint64_t v2 = self;
      NSString v208 = String._bridgeToObjectiveC()();
      id v209 = [v2 internalErrorWithDebugDescription:v208];
LABEL_89:
      v209;

      swift_willThrow();
      return (uint64_t)v2;
    default:
      goto LABEL_103;
  }
}

const char *sub_100154158()
{
  return "displayDateDate";
}

const char *sub_10015416C()
{
  return "title";
}

const char *sub_100154180()
{
  return "completed";
}

const char *sub_100154194()
{
  return "dueDate";
}

void *sub_1001541C0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v6) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = 0;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(a1 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      sub_100152158(a2, a3);

      if (v3) {
        return (void *)swift_release();
      }
      ++v8;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v6 == v8) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10015431C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090C698);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090C698);
  if (qword_1009077D8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1001543E4()
{
}

uint64_t sub_100154408()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDAssignmentNotificationEngineAssembly()
{
  return self;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_10015443C()
{
}

uint64_t sub_100154470()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090C748);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090C748);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

_UNKNOWN **static REMCDAlarm.recordTypes()()
{
  return &off_1008B4508;
}

uint64_t static REMCDAlarm.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  swift_bridgeObjectRetain();
  id v6 = a4;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [self objectWithRecordID:v5 accountID:v7 context:v6];

  if (v8)
  {
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDAlarm.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      uint64_t v12 = v11;
      [v10 mergeDataFromRecord:a1 accountID:v11];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_100906F38 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_10090C748);
      id v14 = a2;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          uint64_t v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDAlarm.recordType()()
{
  uint64_t v0 = 0x6D72616C41;
  uint64_t v1 = (void *)0xE500000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall REMCDAlarmTrigger.supportsDeletionByTTL()()
{
  return [v0 isExtraneous] ^ 1;
}

Swift::Void __swiftcall REMCDAlarm.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  NSString v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v8 = String._bridgeToObjectiveC()();
  v24.receiver = v3;
  v24.super_class = (Class)REMCDAlarm;
  [super mergeDataFromRecord:from.super.isa accountID:v8];

  id v9 = [(objc_class *)from.super.isa recordID];
  NSString v10 = [v9 recordName];

  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v11 = [v3 ckIdentifierFromRecordName:v10];

  if (!v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setCkIdentifier:v11];

  uint64_t v12 = 0;
  void v22[2] = 0x80000001007CC120;
  v22[3] = 0x80000001007CC140;
  v22[1] = 0x80000001007CC100;
  while (2)
  {
    uint64_t v13 = *((unsigned __int8 *)&off_1008B4568 + v12++ + 32);
    switch(v13)
    {
      case 1:
        sub_1000963CC(0, (unint64_t *)&qword_100909E80);
        CKRecordKeyValueSetting.subscript.getter();
        if (v23)
        {
          Class isa = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          Class isa = 0;
        }
        [v3 setAlarmUID:isa];
        goto LABEL_7;
      case 2:
        sub_1000963CC(0, (unint64_t *)&qword_100909E80);
        CKRecordKeyValueSetting.subscript.getter();
        double v17 = *(double *)&v22[4];
        if ((_BYTE)v23) {
          double v17 = 0.0;
        }
        [v3 setDueDateResolutionTokenAsNonce:v17];
        goto LABEL_8;
      case 3:
        sub_1000963CC(0, (unint64_t *)&qword_100909E80);
        CKRecordKeyValueSetting.subscript.getter();
        if (v23)
        {
          Class isa = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          Class isa = 0;
        }
        [v3 setOriginalAlarmUID:isa];
        goto LABEL_7;
      case 4:
        if (CKRecord.subscript.getter())
        {
          self;
          uint64_t v18 = (void *)swift_dynamicCastObjCClass();
          if (!v18) {
            swift_unknownObjectRelease();
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
        id v19 = sub_1000C497C(v18);
        if (v19)
        {
          id v20 = v19;
          self;
          uint64_t v21 = (void *)swift_dynamicCastObjCClass();
          if (!v21) {
        }
          }
        else
        {
          uint64_t v21 = 0;
        }

        [v3 setReminder:v21];
        goto LABEL_8;
      case 5:
        goto LABEL_8;
      default:
        sub_1000963CC(0, (unint64_t *)&qword_100909E80);
        uint64_t v14 = type metadata accessor for Date();
        CKRecordKeyValueSetting.subscript.getter();
        uint64_t v15 = *(void *)(v14 - 8);
        Class isa = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v7, 1, v14) != 1)
        {
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v14);
        }
        [v3 setAcknowledgedDate:isa];
LABEL_7:

LABEL_8:
        if (v12 != 6) {
          continue;
        }
        return;
    }
  }
}

CKRecord_optional __swiftcall REMCDAlarm.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v6 = __chkstk_darwin(v5).n128_u64[0];
  NSString v8 = (char *)v40 - v7;
  v44.receiver = v0;
  v44.super_class = (Class)REMCDAlarm;
  NSString v10 = [(objc_class *)[v44 newlyCreatedRecord:v6];
  if (v10)
  {
    uint64_t v11 = 0;
    v40[2] = 0x80000001007CC120;
    v40[3] = 0x80000001007CC140;
    v40[1] = 0x80000001007CC100;
    while (2)
    {
      uint64_t v13 = *((unsigned __int8 *)&off_1008B4590 + v11++ + 32);
      switch(v13)
      {
        case 1:
          id v17 = [v1 alarmUID];
          if (v17)
          {
            uint64_t v18 = v17;
            uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v21 = v20;

            *((void *)&v42 + 1) = &type metadata for String;
            uint64_t v43 = &protocol witness table for String;
            *(void *)&long long v41 = v19;
            *((void *)&v41 + 1) = v21;
          }
          else
          {
            uint64_t v43 = 0;
            long long v41 = 0u;
            long long v42 = 0u;
          }
          goto LABEL_27;
        case 2:
          [v1 dueDateResolutionTokenAsNonce];
          *((void *)&v42 + 1) = &type metadata for Double;
          uint64_t v43 = &protocol witness table for Double;
          *(void *)&long long v41 = v12;
          sub_1000963CC(0, (unint64_t *)&qword_100909E80);
          goto LABEL_4;
        case 3:
          id v22 = [v1 originalAlarmUID];
          if (v22)
          {
            uint64_t v23 = v22;
            uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v26 = v25;

            *((void *)&v42 + 1) = &type metadata for String;
            uint64_t v43 = &protocol witness table for String;
            *(void *)&long long v41 = v24;
            *((void *)&v41 + 1) = v26;
          }
          else
          {
            uint64_t v43 = 0;
            long long v41 = 0u;
            long long v42 = 0u;
          }
          goto LABEL_27;
        case 4:
          id v27 = [v1 reminder];
          if (v27)
          {
            uint64_t v28 = v27;
            id v29 = [v27 recordID];
          }
          else
          {
            id v29 = 0;
          }
          id v36 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v29];

          CKRecord.subscript.setter();
          if (v11 != 6) {
            continue;
          }
          goto LABEL_28;
        case 5:
          id v30 = [v1 trigger];
          if (v30
            && (uint64_t v31 = v30,
                id v32 = [v30 ckIdentifier],
                v31,
                v32))
          {
            uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v35 = v34;

            *((void *)&v42 + 1) = &type metadata for String;
            uint64_t v43 = &protocol witness table for String;
            *(void *)&long long v41 = v33;
            *((void *)&v41 + 1) = v35;
          }
          else
          {
            uint64_t v43 = 0;
            long long v41 = 0u;
            long long v42 = 0u;
          }
          goto LABEL_27;
        default:
          id v14 = [v1 acknowledgedDate];
          if (v14)
          {
            uint64_t v15 = v14;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v16 = type metadata accessor for Date();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v4, 0, 1, v16);
          }
          else
          {
            uint64_t v16 = type metadata accessor for Date();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v4, 1, 1, v16);
          }
          sub_1000CAAB4((uint64_t)v4, (uint64_t)v8);
          type metadata accessor for Date();
          uint64_t v37 = *(void *)(v16 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v8, 1, v16) == 1)
          {
            sub_1000EACF4((uint64_t)v8);
            long long v41 = 0u;
            long long v42 = 0u;
            uint64_t v43 = 0;
          }
          else
          {
            *((void *)&v42 + 1) = v16;
            uint64_t v43 = &protocol witness table for Date;
            uint64_t v38 = sub_1000C1FE8((uint64_t *)&v41);
            (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(v38, v8, v16);
          }
LABEL_27:
          sub_1000963CC(0, (unint64_t *)&qword_100909E80);
LABEL_4:
          CKRecordKeyValueSetting.subscript.setter();
          if (v11 != 6) {
            continue;
          }
          goto LABEL_28;
      }
    }
  }
LABEL_28:
  uint64_t v39 = v10;
  result.value.super.Class isa = v39;
  result.is_nil = v9;
  return result;
}

Swift::Void __swiftcall REMCDAlarm.cleanUpAfterLocalObjectMerge()()
{
  if (qword_100906F38 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090C748);
  id v7 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090C760);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void *REMCDAlarm.objectsToBeDeletedBeforeThisObject()()
{
  id v1 = [v0 trigger];
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  id v2 = v1;
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100776E40;
  *(void *)(v3 + 56) = sub_1000963CC(0, (unint64_t *)&unk_100910DD0);
  *(void *)(v3 + 32) = v2;
  return (void *)v3;
}

Swift::Void __swiftcall REMCDAlarm.fixBrokenReferences()()
{
  if (qword_100906F38 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090C748);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &selRef_intersectsSet_;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  uint64_t v6 = swift_slowAlloc();
  uint64_t v43 = swift_slowAlloc();
  *(_DWORD *)uint64_t v6 = 136446466;
  id v7 = [v2 remObjectID];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 description];

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  sub_1000C51B8(v10, v12, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v6 + 12) = 2082;
  id v13 = [v2 reminder];
  if (!v13) {
    goto LABEL_12;
  }
  id v14 = v13;
  id v15 = [v13 remObjectID];
  if (!v15)
  {

LABEL_12:
    unint64_t v20 = 0xE300000000000000;
    uint64_t v5 = &selRef_intersectsSet_;
    uint64_t v21 = 7104878;
    goto LABEL_13;
  }
  uint64_t v16 = v15;
  id v17 = [v15 description];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  uint64_t v21 = v18;
  uint64_t v5 = &selRef_intersectsSet_;
LABEL_13:
  sub_1000C51B8(v21, v20, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for alarm {alarmID: %{public}s, reminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  id v22 = [v2 v5[467]];
  if (v22)
  {
    uint64_t v23 = v22;
    if ([v22 markedForDeletion]
      && ([v2 markedForDeletion] & 1) == 0)
    {
      id v24 = v2;
      id v25 = v23;
      id v26 = v24;
      id v27 = v25;
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446466;
        id v31 = [v26 remObjectID];
        if (v31)
        {
          id v32 = v31;
          id v33 = [v31 description];

          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;
        }
        else
        {
          unint64_t v36 = 0xE300000000000000;
          uint64_t v34 = 7104878;
        }
        sub_1000C51B8(v34, v36, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2082;
        id v37 = [v27 remObjectID];
        if (v37)
        {
          uint64_t v38 = v37;
          id v39 = [v37 description];

          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;
        }
        else
        {
          unint64_t v42 = 0xE300000000000000;
          uint64_t v40 = 7104878;
        }
        sub_1000C51B8(v40, v42, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Reminder is marked for deletion but alarm is not {alarmID: %{public}s, reminderID: %{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v26 markForDeletion];
    }
    [v23 forcePushToCloud];
  }
}

uint64_t sub_1001561D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

uint64_t sub_1001561E8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 2 * a2;
  sub_100094134((uint64_t *)&unk_100909E50);
  return a1;
}

uint64_t _sSo10REMCDAlarmC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_100906F38 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090C748);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090C760);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _sSo10REMCDAlarmC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_100906F38 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090C748);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090C760);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

void REMCDBaseSection.parentCDObject.getter()
{
}

uint64_t static REMCDBaseSection.cdEntityName.getter()
{
  id v0 = [self cdEntityName];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

Swift::Bool __swiftcall REMCDBaseSection.isConnected(toAccountObject:)(NSMutableDictionary toAccountObject)
{
  id v3 = [v1 remObjectID];
  if (!v3) {
    goto LABEL_12;
  }
  os_log_type_t v4 = v3;
  if ([(objc_class *)toAccountObject.super.super.isa objectForKeyedSubscript:v3])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_1000D6CBC((uint64_t)v13, (uint64_t)v14);
  if (!v14[3])
  {
    sub_1000F5B8C((uint64_t)v14);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    id v6 = v4;
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    [(objc_class *)toAccountObject.super.super.isa setObject:isa forKeyedSubscript:v6];

    uint64_t v8 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x50))();
    if (v8)
    {
      uint64_t v9 = v8;
      unsigned int v5 = [v8 isConnectedToAccountObject:toAccountObject.super.super.isa];

      v14[0] = v5;
      type metadata accessor for REMObjectIsConnectedState(0);
      id v10 = v6;
      [(objc_class *)toAccountObject.super.super.isa setObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() forKeyedSubscript:v10];

      swift_unknownObjectRelease();
      return v5;
    }

LABEL_12:
    LOBYTE(v5) = 0;
    return v5;
  }

  LOBYTE(v5) = v12 == 1;
  return v5;
}

id REMCDBaseSection.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDBaseSection();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

id REMCDBaseSection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDBaseSection();
  return [super dealloc];
}

uint64_t type metadata accessor for REMCDBaseSection()
{
  return self;
}

uint64_t sub_100156ACC(uint64_t a1)
{
  return sub_100156B24(a1, qword_10090C790, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_100156AF8(uint64_t a1)
{
  return sub_100156B24(a1, qword_10090C7A8, &qword_100907840, (uint64_t)qword_100942508);
}

uint64_t sub_100156B24(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E278(v7, a2);
  uint64_t v8 = sub_10008E2DC(v7, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10008E2DC(v7, a4);
  id v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v10(v8, v9, v7);
}

uint64_t sub_100156BEC(char *a1, char *a2)
{
  return sub_1002F2DF0(*a1, *a2);
}

Swift::Int sub_100156BF8()
{
  return Hasher._finalize()();
}

uint64_t sub_100156C80()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100156CF4()
{
  return Hasher._finalize()();
}

uint64_t sub_100156D78@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B45B8;
  return sub_100157960(v2, a1, a2);
}

void sub_100156D84(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x49746E756F636361;
  if (*v1) {
    uint64_t v2 = 0x44496D72616C61;
  }
  unint64_t v3 = 0xE900000000000044;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_100156DC8(void *a1@<X8>)
{
  *a1 = &off_1008B4608;
}

uint64_t sub_100156DD8@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B45B8;
  return sub_100157A14(a1, v2, a2);
}

uint64_t sub_100156DE4()
{
  if (*v0) {
    return 0x44496D72616C61;
  }
  else {
    return 0x49746E756F636361;
  }
}

uint64_t sub_100156E24()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REMAlarmTriggerCDIngestor()
{
  return self;
}

uint64_t sub_100156E88(char *a1, char *a2)
{
  return sub_1002F1404(*a1, *a2);
}

Swift::Int sub_100156E94()
{
  return Hasher._finalize()();
}

uint64_t sub_100156F20()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100156F98()
{
  return Hasher._finalize()();
}

uint64_t sub_100157020@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B4630;
  return sub_100157960(v2, a1, a2);
}

void sub_10015702C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x44497463656A626FLL;
  if (*v1) {
    uint64_t v2 = 0x65746E49656D6974;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xEC0000006C617672;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_100157074(void *a1@<X8>)
{
  *a1 = &off_1008B4680;
}

uint64_t sub_100157084@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B4630;
  return sub_100157A14(a1, v2, a2);
}

uint64_t sub_100157090()
{
  if (*v0) {
    return 0x65746E49656D6974;
  }
  else {
    return 0x44497463656A626FLL;
  }
}

uint64_t type metadata accessor for REMAlarmTimeIntervalTriggerCDIngestor()
{
  return self;
}

id sub_1001571B4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMAlarmDateTriggerCDIngestor_ObjC();
  return [super dealloc];
}

uint64_t type metadata accessor for REMAlarmDateTriggerCDIngestor_ObjC()
{
  return self;
}

uint64_t sub_10015720C(char *a1, char *a2)
{
  return sub_1002F2224(*a1, *a2);
}

Swift::Int sub_100157218()
{
  return Hasher._finalize()();
}

uint64_t sub_1001572A8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100157324()
{
  return Hasher._finalize()();
}

uint64_t sub_1001573B0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B4C70;
  return sub_100157960(v2, a1, a2);
}

void sub_1001573BC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x44497463656A626FLL;
  if (*v1) {
    uint64_t v2 = 0x706D6F4365746164;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xEE0073746E656E6FLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_100157408(void *a1@<X8>)
{
  *a1 = &off_1008B5A18;
}

uint64_t sub_100157418@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B4C70;
  return sub_100157A14(a1, v2, a2);
}

uint64_t sub_100157424()
{
  if (*v0) {
    return 0x706D6F4365746164;
  }
  else {
    return 0x44497463656A626FLL;
  }
}

uint64_t type metadata accessor for REMAlarmDateTriggerCDIngestor()
{
  return self;
}

uint64_t sub_100157490(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002F1720(*a1, *a2);
}

Swift::Int sub_10015749C()
{
  return Hasher._finalize()();
}

uint64_t sub_100157548()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001575E0()
{
  return Hasher._finalize()();
}

unint64_t sub_100157688@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100158658(*a1);
  *a2 = result;
  return result;
}

void sub_1001576B8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0x80000001007C70B0;
  unint64_t v5 = 0xD000000000000012;
  if (v2 != 1)
  {
    unint64_t v5 = 0x74696D69786F7270;
    unint64_t v4 = 0xE900000000000079;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x44497463656A626FLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100157720(void *a1@<X8>)
{
  *a1 = &off_1008B5A40;
}

unint64_t sub_100157730@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100158658(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100157758()
{
  unint64_t v1 = 0xD000000000000012;
  if (*v0 != 1) {
    unint64_t v1 = 0x74696D69786F7270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x44497463656A626FLL;
  }
}

uint64_t type metadata accessor for REMAlarmLocationTriggerCDIngestor()
{
  return self;
}

uint64_t sub_1001577E0(char *a1, char *a2)
{
  return sub_1002F1844(*a1, *a2);
}

Swift::Int sub_1001577EC()
{
  return Hasher._finalize()();
}

uint64_t sub_10015786C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001578D8()
{
  return Hasher._finalize()();
}

uint64_t sub_100157954@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B4D88;
  return sub_100157960(v2, a1, a2);
}

uint64_t sub_100157960@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_1001579BC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x44497463656A626FLL;
  if (*v1) {
    uint64_t v2 = 0x746E657665;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1001579F8(void *a1@<X8>)
{
  *a1 = &off_1008B5A68;
}

uint64_t sub_100157A08@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B4D88;
  return sub_100157A14(a1, v2, a2);
}

uint64_t sub_100157A14@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t sub_100157A74()
{
  if (*v0) {
    return 0x746E657665;
  }
  else {
    return 0x44497463656A626FLL;
  }
}

uint64_t type metadata accessor for REMAlarmVehicleTriggerCDIngestor()
{
  return self;
}

_UNKNOWN **sub_100157AD0()
{
  return &off_1008C4CF0;
}

_UNKNOWN **sub_100157ADC()
{
  return &off_1008C4D40;
}

_UNKNOWN **sub_100157AE8()
{
  return &off_1008BBC40;
}

_UNKNOWN **sub_100157AF4()
{
  return &off_1008C4D10;
}

_UNKNOWN **sub_100157B00()
{
  return &off_1008BBC10;
}

_UNKNOWN **sub_100157B0C()
{
  return &off_1008BBC70;
}

_UNKNOWN **sub_100157B18()
{
  return &off_1008BBCA0;
}

_UNKNOWN **sub_100157B24()
{
  return &off_1008BBCD0;
}

id sub_100157B30(id ObjCClassFromMetadata)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100911810);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DateComponents();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  id v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v33 = 0;
  id v11 = [ObjCClassFromMetadata remObjectIDWithError:&v33, v8];
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = v33;
    id v14 = [ObjCClassFromMetadata dateComponentsData];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      sub_10015934C(&qword_10090C630);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      if (v1)
      {
        swift_errorRelease();
        swift_release();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
      }
      else
      {
        swift_release();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
          id v32 = objc_allocWithZone((Class)REMAlarmDateTrigger);
          Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
          uint64_t ObjCClassFromMetadata = [v32 initWithObjectID:v12 dateComponents:isa];

          sub_100097F34(v16, v18);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
          return ObjCClassFromMetadata;
        }
      }
      sub_100159390((uint64_t)v5);
      uint64_t ObjCClassFromMetadata = self;
      NSString v26 = String._bridgeToObjectiveC()();
      [ObjCClassFromMetadata internalErrorWithDebugDescription:v26];

      swift_willThrow();
      sub_100097F34(v16, v18);
    }
    else
    {
      if (qword_100906F48 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_10090C7A8);
      uint64_t v21 = v12;
      id v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        id v24 = (uint8_t *)swift_slowAlloc();
        id v32 = (void *)swift_slowAlloc();
        id v33 = v21;
        *(_DWORD *)id v24 = 138412290;
        id v25 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v32 = v12;

        _os_log_impl((void *)&_mh_execute_header, v22, v23, "REMAlarmDateTriggerCDIngestor: cdAlarmDateTrigger.dateComponentsData is nil {cdAlarmDateTrigger.remObjectID: %@}", v24, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v22 = v21;
      }

      id v27 = self;
      sub_10015930C();
      uint64_t ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
      NSString v28 = String._bridgeToObjectiveC()();
      [v27 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v28];

      swift_willThrow();
    }
  }
  else
  {
    unint64_t v19 = v33;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return ObjCClassFromMetadata;
}

id sub_1001580B4(void *a1)
{
  id v2 = [a1 event];
  id v10 = 0;
  id v3 = [a1 remObjectIDWithError:&v10];
  id v4 = v10;
  if (v3)
  {
    unint64_t v5 = v3;
    id v6 = objc_allocWithZone((Class)REMAlarmVehicleTrigger);
    id v7 = v4;
    id v2 = [v6 initWithObjectID:v5 event:(int)v2];
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

id sub_1001581BC(void *a1)
{
  signed int v2 = [a1 proximity];
  id v3 = [a1 title];
  if (v3)
  {
    id v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = [a1 locationUID];
  if (v7)
  {
    id v8 = v7;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    if (v6) {
      goto LABEL_6;
    }
LABEL_9:
    NSString v11 = 0;
    if (v10) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  uint64_t v10 = 0;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_6:
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v10)
  {
LABEL_7:
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_10:
  NSString v12 = 0;
LABEL_11:
  id v13 = [objc_allocWithZone((Class)REMStructuredLocation) initWithTitle:v11 locationUID:v12];

  [a1 latitude];
  [v13 setLatitude:];
  [a1 longitude];
  [v13 setLongitude:];
  [a1 radius];
  [v13 setRadius:];
  id v14 = [a1 address];
  [v13 setAddress:v14];

  id v15 = [a1 routing];
  [v13 setRouting:v15];

  id v16 = [a1 referenceFrameString];
  [v13 setReferenceFrameString:v16];

  id v17 = [a1 contactLabel];
  [v13 setContactLabel:v17];

  Class isa = (Class)[a1 mapKitHandle];
  if (isa)
  {
    uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v19, v21);
  }
  [v13 setMapKitHandle:isa];

  id v29 = 0;
  id v22 = [a1 remObjectIDWithError:&v29];
  id v23 = v29;
  if (v22)
  {
    id v24 = v22;
    id v25 = objc_allocWithZone((Class)REMAlarmLocationTrigger);
    id v26 = v23;
    id v27 = [v25 initWithObjectID:v24 structuredLocation:v13 proximity:v2];
  }
  else
  {
    id v27 = v29;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

  return v27;
}

id sub_10015855C(void *a1)
{
  id v1 = a1;
  id v8 = 0;
  id v2 = [a1 remObjectIDWithError:&v8];
  if (v2)
  {
    id v3 = v2;
    id v4 = v8;
    [v1 timeInterval];
    id v1 = [objc_allocWithZone((Class)REMAlarmTimeIntervalTrigger) initWithObjectID:v3 timeInterval:v5];
  }
  else
  {
    id v6 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

unint64_t sub_100158658(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4DD8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

id sub_1001586A4(void *a1, void *a2, void *a3)
{
  type metadata accessor for REMAlarmDateTriggerCDIngestor();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a2;
  *(void *)(inited + 24) = a3;
  id v7 = a2;
  id v8 = a3;
  id v9 = sub_100157B30(a1);
  swift_release();
  return v9;
}

void sub_1001588E4(void *a1, void *a2, uint64_t a3)
{
  id v37 = a1;
  uint64_t v6 = type metadata accessor for DateComponents();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for UUID();
  __chkstk_darwin(v36);
  unint64_t v35 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + 16);
  if (!v12) {
    return;
  }
  uint64_t v38 = v3;
  id v33 = v9;
  uint64_t v34 = v6;
  uint64_t v31 = (void (**)(char *, uint64_t))(v10 + 8);
  id v32 = (void (**)(char *, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  id v14 = v33;
  while ((*(unsigned char *)(a3 + v13 + 32) & 1) == 0)
  {
    id v15 = [v37 remObjectID];
    id v16 = [v15 uuid];

    id v17 = v35;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*v31)(v17, v36);
    [a2 setIdentifier:isa];

LABEL_4:
    if (v12 == ++v13) {
      goto LABEL_10;
    }
  }
  uint64_t v19 = v12;
  unint64_t v20 = a2;
  uint64_t v21 = a3;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  id v22 = [v37 dateComponents];
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10015934C(&qword_10090C5D0);
  uint64_t v23 = v34;
  uint64_t v24 = v38;
  uint64_t v25 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v38 = v24;
  if (!v24)
  {
    uint64_t v27 = v25;
    unint64_t v28 = v26;
    (*v32)(v14, v23);
    swift_release();
    Class v29 = Data._bridgeToObjectiveC()().super.isa;
    a2 = v20;
    [v20 setDateComponentsData:v29];

    sub_100097F34(v27, v28);
    a3 = v21;
    uint64_t v12 = v19;
    goto LABEL_4;
  }
  swift_release();
  (*v32)(v14, v23);
LABEL_10:
  swift_bridgeObjectRelease();
}

void sub_100158C40(void *a1, void *a2, uint64_t a3)
{
  uint64_t v46 = type metadata accessor for UUID();
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a3 + 16);
  if (!v9) {
    return;
  }
  uint64_t v43 = v3;
  objc_super v44 = (void (**)(char *, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  while (1)
  {
    if (!*(unsigned char *)(a3 + v10 + 32))
    {
      id v11 = [a1 remObjectID];
      id v12 = [v11 uuid];

      uint64_t v13 = v45;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v14.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*v44)(v13, v46);
      [a2 setIdentifier:v14.super.isa];
LABEL_4:

      goto LABEL_5;
    }
    if (*(unsigned char *)(a3 + v10 + 32) == 1)
    {
      id v15 = [a1 structuredLocation];
      id v16 = [v15 locationUID];

      [a2 setLocationUID:v16];
      id v17 = [a1 structuredLocation];
      id v18 = [v17 title];

      [a2 setTitle:v18];
      id v19 = [a1 structuredLocation];
      [v19 latitude];
      double v21 = v20;

      [a2 setLatitude:v21];
      id v22 = [a1 structuredLocation];
      [v22 longitude];
      double v24 = v23;

      [a2 setLongitude:v24];
      id v25 = [a1 structuredLocation];
      [v25 radius];
      double v27 = v26;

      [a2 setRadius:v27];
      id v28 = [a1 structuredLocation];
      id v29 = [v28 address];

      [a2 setAddress:v29];
      id v30 = [a1 structuredLocation];
      id v31 = [v30 routing];

      [a2 setRouting:v31];
      id v32 = [a1 structuredLocation];
      id v33 = [v32 referenceFrameString];

      [a2 setReferenceFrameString:v33];
      id v34 = [a1 structuredLocation];
      id v35 = [v34 contactLabel];

      [a2 setContactLabel:v35];
      id v36 = [a1 structuredLocation];
      v14.super.Class isa = (Class)[v36 mapKitHandle];

      if (v14.super.isa)
      {
        uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v38 = v9;
        unint64_t v40 = v39;

        v14.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        unint64_t v41 = v40;
        uint64_t v9 = v38;
        sub_100097F34(v37, v41);
      }
      [a2 setMapKitHandle:v14.super.isa];
      goto LABEL_4;
    }
    uint64_t v42 = (uint64_t)[a1 proximity];
    if (v42 < -32768) {
      break;
    }
    if (v42 >= 0x8000) {
      goto LABEL_17;
    }
    [a2 setProximity:(__int16)v42];
LABEL_5:
    if (v9 == ++v10)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
}

void sub_100159138(void *a1, void *a2, uint64_t a3)
{
  uint64_t v18 = type metadata accessor for UUID();
  __chkstk_darwin(v18);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a3 + 16);
  if (!v10) {
    return;
  }
  v17[1] = v3;
  id v11 = (void (**)(char *, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  while (1)
  {
    if ((*(unsigned char *)(a3 + v12 + 32) & 1) == 0)
    {
      id v13 = [a1 remObjectID];
      id v14 = [v13 uuid];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*v11)(v9, v18);
      [a2 setIdentifier:isa];

      goto LABEL_4;
    }
    uint64_t v16 = (uint64_t)[a1 event];
    if (v16 < -32768) {
      break;
    }
    if (v16 >= 0x8000) {
      goto LABEL_12;
    }
    [a2 setEvent:(__int16)v16];
LABEL_4:
    if (v10 == ++v12)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

unint64_t sub_10015930C()
{
  unint64_t result = qword_100910E40;
  if (!qword_100910E40)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100910E40);
  }
  return result;
}

uint64_t sub_10015934C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DateComponents();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100159390(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100911810);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for REMAlarmTimeIntervalTriggerCDIngestor.ValueKey()
{
  return &type metadata for REMAlarmTimeIntervalTriggerCDIngestor.ValueKey;
}

ValueMetadata *type metadata accessor for REMAlarmDateTriggerCDIngestor.ValueKey()
{
  return &type metadata for REMAlarmDateTriggerCDIngestor.ValueKey;
}

unsigned char *storeEnumTagSinglePayload for REMAlarmLocationTriggerCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001594E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMAlarmLocationTriggerCDIngestor.ValueKey()
{
  return &type metadata for REMAlarmLocationTriggerCDIngestor.ValueKey;
}

ValueMetadata *type metadata accessor for REMAlarmTriggerCDIngestor.RelationshipKey()
{
  return &type metadata for REMAlarmTriggerCDIngestor.RelationshipKey;
}

unsigned char *_s7remindd37REMAlarmTimeIntervalTriggerCDIngestorC8ValueKeyOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001595F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMAlarmVehicleTriggerCDIngestor.ValueKey()
{
  return &type metadata for REMAlarmVehicleTriggerCDIngestor.ValueKey;
}

uint64_t sub_100159630()
{
  return sub_1000B2138(&qword_10090D038, &qword_10090D040);
}

unint64_t sub_10015965C()
{
  unint64_t result = qword_10090D048;
  if (!qword_10090D048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D048);
  }
  return result;
}

uint64_t sub_1001596B0()
{
  return sub_1000B2138(&qword_10090D050, &qword_10090D058);
}

unint64_t sub_1001596DC()
{
  unint64_t result = qword_10090D060;
  if (!qword_10090D060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D060);
  }
  return result;
}

uint64_t sub_100159730()
{
  return sub_1000B2138(&qword_10090D068, &qword_10090D070);
}

unint64_t sub_10015975C()
{
  unint64_t result = qword_10090D078;
  if (!qword_10090D078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D078);
  }
  return result;
}

uint64_t sub_1001597B0()
{
  return sub_1000B2138(&qword_10090D080, &qword_10090D088);
}

unint64_t sub_1001597DC()
{
  unint64_t result = qword_10090D090;
  if (!qword_10090D090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D090);
  }
  return result;
}

uint64_t sub_100159830()
{
  return sub_1000B2138(&qword_10090D098, &qword_10090D0A0);
}

unint64_t sub_10015985C()
{
  unint64_t result = qword_10090D0A8;
  if (!qword_10090D0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D0A8);
  }
  return result;
}

uint64_t sub_1001598B4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090D0B0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090D0B0);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10015997C(uint64_t a1, NSString a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for REMFeatureFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [v3 secondaryGroceryLocalesInfoChecksum:v8];
  if (!v11)
  {
    if (!a2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v15 = v14;

  if (!a2)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    [v3 setSecondaryGroceryLocalesInfoChecksum:a2];

    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for REMFeatureFlags.groceryMultilingual(_:), v6);
    char v18 = REMFeatureFlags.isEnabled.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v18)
    {
      id v19 = [v3 createResolutionTokenMapIfNecessary];
      NSString v20 = String._bridgeToObjectiveC()();
      [v19 updateForKey:v20];
    }
    return;
  }
  if (v13 != a1 || v15 != a2)
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v17) {
      return;
    }
LABEL_10:
    a2 = String._bridgeToObjectiveC()();
    goto LABEL_12;
  }

  swift_bridgeObjectRelease();
}

uint64_t destroy for RDClientIdentity(uint64_t a1)
{
  return sub_10012227C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int16 *)(a1 + 44) << 32));
}

uint64_t initializeWithCopy for RDClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(unsigned __int16 *)(a2 + 44);
  uint64_t v9 = *(unsigned int *)(a2 + 40);
  sub_10010B584(*(void *)a2, v4, v5, v6, v7, v9 | (v8 << 32));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(_WORD *)(a1 + 44) = v8;
  *(_DWORD *)(a1 + 40) = v9;
  return a1;
}

uint64_t assignWithCopy for RDClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(unsigned __int16 *)(a2 + 44);
  uint64_t v9 = *(unsigned int *)(a2 + 40);
  sub_10010B584(*(void *)a2, v4, v5, v6, v7, v9 | (v8 << 32));
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int16 *)(a1 + 44) << 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 40) = v9;
  *(_WORD *)(a1 + 44) = v8;
  sub_10012227C(v10, v11, v12, v13, v14, v15);
  return a1;
}

__n128 initializeWithTake for RDClientIdentity.XPCClientIdentity(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  __int16 v4 = *(_WORD *)(a2 + 44);
  int v5 = *(_DWORD *)(a2 + 40);
  uint64_t v6 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int16 *)(a1 + 44) << 32);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(void *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 40) = v5;
  *(_WORD *)(a1 + 44) = v4;
  sub_10012227C(v6, v8, v7, v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDClientIdentity(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FFD && *(unsigned char *)(a1 + 46)) {
    return (*(_DWORD *)a1 + 16381);
  }
  unsigned int v3 = ((*(unsigned __int16 *)(a1 + 44) >> 14) | (4
                                                * ((*(unsigned __int16 *)(a1 + 44) >> 2) & 0xF80 | (*(_WORD *)(a1 + 44) >> 1)))) ^ 0x3FFF;
  if (v3 >> 2 >= 0xFFF) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RDClientIdentity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 16381;
    if (a3 >= 0x3FFD) {
      *(unsigned char *)(result + 46) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FFD) {
      *(unsigned char *)(result + 46) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(void *)(result + 32) = 0;
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_DWORD *)(result + 40) = 0;
      *(_WORD *)(result + 44) = ((v3 << 34) & 0xFE0000000000 | ((unint64_t)(v3 & 0x7F) << 33)) >> 32;
    }
  }
  return result;
}

uint64_t sub_100159E70(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 44) >> 14;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t sub_100159E8C(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 40);
  uint64_t result = a1 + 40;
  unint64_t v3 = v2 | ((unint64_t)*(unsigned __int16 *)(result + 4) << 32);
  *(_DWORD *)uint64_t result = v2;
  *(_WORD *)(result + 4) = WORD2(v3) & 0x3FFF;
  return result;
}

uint64_t sub_100159EA8(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    unsigned int v2 = *(_DWORD *)(result + 40);
    result += 40;
    unint64_t v3 = (v2 | ((unint64_t)*(unsigned __int16 *)(result + 4) << 32)) & 0x101FFFFFFFFLL | (a2 << 46);
    *(_DWORD *)uint64_t result = v2;
    *(_WORD *)(result + 4) = WORD2(v3);
  }
  else
  {
    *(void *)uint64_t result = (a2 - 3);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_WORD *)(result + 44) = -16384;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDClientIdentity()
{
  return &type metadata for RDClientIdentity;
}

unint64_t sub_100159F08()
{
  unint64_t v1 = 0xD000000000000010;
  sub_10010B4E8(v0, (uint64_t)&v7);
  unsigned int v2 = v9 >> 14;
  if (v2 >= 2)
  {
    if (v2 == 2)
    {
      unint64_t v1 = (unint64_t)v8;
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    v9 &= 0x3FFFu;
    uint64_t v4 = v7;
    unint64_t v3 = v8;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = v4;
    v5._object = v3;
    String.append(_:)(v5);
    return 0xD000000000000012;
  }
  return v1;
}

uint64_t destroy for RDSavedHashtag()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RDClientIdentity.XPCClientIdentity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RDClientIdentity.XPCClientIdentity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  return a1;
}

uint64_t assignWithTake for RDClientIdentity.XPCClientIdentity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDClientIdentity.XPCClientIdentity(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 46)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDClientIdentity.XPCClientIdentity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 46) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 46) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDClientIdentity.XPCClientIdentity()
{
  return &type metadata for RDClientIdentity.XPCClientIdentity;
}

id static REMCDSavedReminder.fetchRequest()()
{
  id v0 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithEntityName:v1];

  return v2;
}

void sub_10015A2B0(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for REMJSONDeserializationError();
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)&double v7 = __chkstk_darwin(v5).n128_u64[0];
  unsigned __int16 v9 = (NSObject **)((char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v10 = [v1 membershipsOfRemindersInSectionsAsData:v7];
  if (!v10)
  {
LABEL_25:
    id v30 = a1;
    id v29 = 0;
    goto LABEL_26;
  }
  unint64_t v11 = v10;
  uint64_t v52 = a1;
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  sub_1000963CC(0, (unint64_t *)&qword_100910240);
  static REMJSONRepresentable.fromJSONData(_:)();
  if (v2)
  {
    sub_100097F34(v12, v14);
    id v55 = v2;
    swift_errorRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    if (swift_dynamicCast())
    {
      if ((*(unsigned int (**)(NSObject **, uint64_t))(v6 + 88))(v9, v5) == enum case for REMJSONDeserializationError.notSupported(_:))
      {
        swift_errorRelease();
        (*(void (**)(NSObject **, uint64_t))(v6 + 96))(v9, v5);
        unint64_t v15 = *v9;
        if (qword_100906ED0 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_10008E2DC(v16, (uint64_t)qword_10090B5F8);
        id v17 = v3;
        char v18 = Logger.logObject.getter();
        int v19 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v18, (os_log_type_t)v19))
        {
          int v50 = v19;
          os_log_t v51 = v15;
          uint64_t v20 = swift_slowAlloc();
          uint64_t v49 = (void *)swift_slowAlloc();
          uint64_t v54 = (uint64_t)v49;
          *(_DWORD *)uint64_t v20 = 136446722;
          os_log_t v53 = (os_log_t)type metadata accessor for REMCDTemplate();
          sub_100094134((uint64_t *)&unk_10090FE80);
          uint64_t v21 = String.init<A>(describing:)();
          os_log_t v53 = (os_log_t)sub_1000C51B8(v21, v22, &v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2082;
          id v23 = [v17 remObjectID];
          if (v23)
          {
            double v24 = v23;
            id v25 = [v23 description];

            uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v28 = v27;
          }
          else
          {
            uint64_t v26 = 7104878;
            unint64_t v28 = 0xE300000000000000;
          }
          os_log_t v53 = (os_log_t)sub_1000C51B8(v26, v28, &v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 22) = 2050;
          os_log_t v53 = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v50, "%{public}s#mergeMembershipsOfRemindersInSections(_:): Failed to deserialize 'membershipsOfRemindersInSectionsAsData' because current runtime version is lower than minimumSupportedVersion. It will be overwritten. {objectID: %{public}s, minimumSupportedVersion: %{public}ld}", (uint8_t *)v20, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        a1 = v52;
        swift_errorRelease();
        goto LABEL_25;
      }
      (*(void (**)(NSObject **, uint64_t))(v6 + 8))(v9, v5);
    }
    swift_errorRelease();
    if (qword_100906ED0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E2DC(v31, (uint64_t)qword_10090B5F8);
    swift_errorRetain();
    id v32 = v3;
    swift_errorRetain();
    id v33 = v32;
    id v34 = Logger.logObject.getter();
    int v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, (os_log_type_t)v35))
    {
      int v50 = v35;
      os_log_t v51 = v34;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v49 = (void *)swift_slowAlloc();
      id v55 = v49;
      *(_DWORD *)uint64_t v36 = 136446722;
      uint64_t v54 = type metadata accessor for REMCDTemplate();
      sub_100094134((uint64_t *)&unk_10090FE80);
      uint64_t v37 = String.init<A>(describing:)();
      uint64_t v54 = sub_1000C51B8(v37, v38, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2082;
      id v39 = [v33 remObjectID];
      if (v39)
      {
        unint64_t v40 = v39;
        id v41 = [v39 description];

        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v44 = v43;
      }
      else
      {
        uint64_t v42 = 7104878;
        unint64_t v44 = 0xE300000000000000;
      }
      uint64_t v54 = sub_1000C51B8(v42, v44, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v45 = Error.rem_errorDescription.getter();
      uint64_t v54 = sub_1000C51B8(v45, v46, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v47 = v51;
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v50, "%{public}s#mergeMembershipsOfRemindersInSections(_:): Failed to deserialize 'membershipsOfRemindersInSectionsAsData' due to unexpected error. It will be overwritten. {objectID: %{public}s, error: %{public}s}", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
    a1 = v52;
    goto LABEL_25;
  }
  sub_100097F34(v12, v14);
  id v29 = v55;
  id v30 = [v55 mergingWith:v52 mergePolicy:0];
LABEL_26:
  id v48 = v30;
  sub_1002B19C0(v30, 1);
}

void sub_10015AA3C(void *a1)
{
}

void sub_10015AA80(void *a1, void (*a2)(void, void), unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v62 = a3;
  uint64_t v63 = a4;
  unsigned __int16 v9 = v5;
  uint64_t v11 = type metadata accessor for REMJSONDeserializationError();
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)&double v13 = __chkstk_darwin(v11).n128_u64[0];
  unint64_t v15 = (NSObject **)((char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v16 = [v5 membershipsOfRemindersInSectionsAsData:v13];
  if (!v16)
  {
LABEL_25:
    id v40 = a1;
    id v39 = 0;
    goto LABEL_26;
  }
  id v17 = v16;
  uint64_t v64 = v9;
  uint64_t v65 = a1;
  char v18 = a5;
  uint64_t v66 = a2;
  uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  sub_1000963CC(0, (unint64_t *)&qword_100910240);
  static REMJSONRepresentable.fromJSONData(_:)();
  if (v6)
  {
    sub_100097F34(v19, v21);
    id v69 = v6;
    swift_errorRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    char v22 = swift_dynamicCast();
    id v23 = v18;
    double v24 = v64;
    if (v22)
    {
      if ((*(unsigned int (**)(NSObject **, uint64_t))(v12 + 88))(v15, v11) == enum case for REMJSONDeserializationError.notSupported(_:))
      {
        swift_errorRelease();
        (*(void (**)(NSObject **, uint64_t))(v12 + 96))(v15, v11);
        id v25 = *v15;
        if (qword_100906ED0 != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        sub_10008E2DC(v26, (uint64_t)qword_10090B5F8);
        id v27 = v24;
        unint64_t v28 = Logger.logObject.getter();
        int v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, (os_log_type_t)v29))
        {
          int v60 = v29;
          os_log_t v61 = v25;
          uint64_t v30 = swift_slowAlloc();
          id v59 = (void *)swift_slowAlloc();
          uint64_t v68 = (uint64_t)v59;
          *(_DWORD *)uint64_t v30 = 136446722;
          os_log_t v67 = (os_log_t)sub_1000963CC(0, v62);
          sub_100094134(v23);
          uint64_t v31 = String.init<A>(describing:)();
          os_log_t v67 = (os_log_t)sub_1000C51B8(v31, v32, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v30 + 12) = 2082;
          id v33 = [v27 remObjectID];
          if (v33)
          {
            id v34 = v33;
            id v35 = [v33 description];

            uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v38 = v37;
          }
          else
          {
            uint64_t v36 = 7104878;
            unint64_t v38 = 0xE300000000000000;
          }
          os_log_t v67 = (os_log_t)sub_1000C51B8(v36, v38, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v30 + 22) = 2050;
          os_log_t v67 = v61;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v60, "%{public}s#mergeMembershipsOfRemindersInSections(_:): Failed to deserialize 'membershipsOfRemindersInSectionsAsData' because current runtime version is lower than minimumSupportedVersion. It will be overwritten. {objectID: %{public}s, minimumSupportedVersion: %{public}ld}", (uint8_t *)v30, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        a1 = v65;
        a2 = v66;
        swift_errorRelease();
        goto LABEL_25;
      }
      (*(void (**)(NSObject **, uint64_t))(v12 + 8))(v15, v11);
    }
    swift_errorRelease();
    if (qword_100906ED0 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_10008E2DC(v41, (uint64_t)qword_10090B5F8);
    swift_errorRetain();
    id v42 = v24;
    swift_errorRetain();
    id v43 = v42;
    unint64_t v44 = Logger.logObject.getter();
    int v45 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v44, (os_log_type_t)v45))
    {
      int v60 = v45;
      os_log_t v61 = v44;
      uint64_t v46 = swift_slowAlloc();
      id v59 = (void *)swift_slowAlloc();
      id v69 = v59;
      *(_DWORD *)uint64_t v46 = 136446722;
      uint64_t v68 = sub_1000963CC(0, v62);
      sub_100094134(v23);
      uint64_t v47 = String.init<A>(describing:)();
      uint64_t v68 = sub_1000C51B8(v47, v48, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 12) = 2082;
      id v49 = [v43 remObjectID];
      if (v49)
      {
        int v50 = v49;
        id v51 = [v49 description];

        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v54 = v53;
      }
      else
      {
        uint64_t v52 = 7104878;
        unint64_t v54 = 0xE300000000000000;
      }
      uint64_t v68 = sub_1000C51B8(v52, v54, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v55 = Error.rem_errorDescription.getter();
      uint64_t v68 = sub_1000C51B8(v55, v56, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v57 = v61;
      _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v60, "%{public}s#mergeMembershipsOfRemindersInSections(_:): Failed to deserialize 'membershipsOfRemindersInSectionsAsData' due to unexpected error. It will be overwritten. {objectID: %{public}s, error: %{public}s}", (uint8_t *)v46, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
    a1 = v65;
    a2 = v66;
    goto LABEL_25;
  }
  sub_100097F34(v19, v21);
  id v39 = v69;
  id v40 = [v69 mergingWith:v65 mergePolicy:0];
  a2 = v66;
LABEL_26:
  id v58 = v40;
  a2(v40, 1);
}

void sub_10015B234(void *a1)
{
}

uint64_t sub_10015B278(uint64_t a1)
{
  return sub_100156B24(a1, qword_10090D0C8, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_10015B2A4(uint64_t a1)
{
  return sub_100156B24(a1, qword_10090D0E0, &qword_100907840, (uint64_t)qword_100942508);
}

unint64_t sub_10015B2D0(char a1)
{
  unint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
    case 6:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0x72756769666E6F63;
      break;
    case 3:
      unint64_t result = 1701667182;
      break;
    case 4:
      unint64_t result = 0x726F6C6F63;
      break;
    case 5:
      unint64_t result = 0x626D456567646162;
      break;
    case 7:
      unint64_t result = 0x53676E6974726F73;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000019;
      break;
    case 11:
      unint64_t result = 0xD000000000000027;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10015B454(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10015B2D0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10015B2D0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10015B4E0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10015B2D0(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10015B544()
{
  sub_10015B2D0(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10015B598()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10015B2D0(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_10015B5F8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100167298(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10015B628@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10015B2D0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10015B654@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100167298(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10015B67C()
{
  return sub_10015B2D0(*v0);
}

void sub_10015B684(void *a1@<X8>)
{
  *a1 = &off_1008B57C8;
}

uint64_t sub_10015B694(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002F22D8(*a1, *a2);
}

Swift::Int sub_10015B6A0()
{
  return Hasher._finalize()();
}

uint64_t sub_10015B758()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10015B7FC()
{
  return Hasher._finalize()();
}

unint64_t sub_10015B8B0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10016724C(*a1);
  *a2 = result;
  return result;
}

void sub_10015B8E0(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE900000000000044;
  unint64_t v4 = 0xEF4449746E756F63;
  unint64_t v5 = 0x6341746E65726170;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000014;
    unint64_t v4 = 0x80000001007C6240;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x49746E756F636361;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_10015B954@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10016724C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10015B97C()
{
  unint64_t v1 = 0x6341746E65726170;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000014;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x49746E756F636361;
  }
}

void sub_10015B9EC(void *a1@<X8>)
{
  *a1 = &off_1008B5A90;
}

Swift::Int sub_10015B9FC()
{
  return sub_10015BABC();
}

uint64_t sub_10015BA14()
{
  return String.hash(into:)();
}

Swift::Int sub_10015BA2C()
{
  return sub_10015BB44();
}

uint64_t sub_10015BA44@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B5AB8;
  return sub_10015BB9C(v2, a1, a2);
}

void sub_10015BA50(void *a1@<X8>)
{
  *a1 = 0x736E6F6974636573;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_10015BA6C@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B5160;
  return sub_10015BC18(a1, v2, a2);
}

uint64_t sub_10015BA78()
{
  return 0x736E6F6974636573;
}

void sub_10015BA90(void *a1@<X8>)
{
  *a1 = &off_1008B5AF0;
}

Swift::Int sub_10015BAA0()
{
  return sub_10015BABC();
}

Swift::Int sub_10015BABC()
{
  return Hasher._finalize()();
}

uint64_t sub_10015BB0C()
{
  return String.hash(into:)();
}

Swift::Int sub_10015BB28()
{
  return sub_10015BB44();
}

Swift::Int sub_10015BB44()
{
  return Hasher._finalize()();
}

uint64_t sub_10015BB90@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B5B18;
  return sub_10015BB9C(v2, a1, a2);
}

uint64_t sub_10015BB9C@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 != 0;
  return result;
}

void sub_10015BBEC(void *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x80000001007C62A0;
}

uint64_t sub_10015BC0C@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B5198;
  return sub_10015BC18(a1, v2, a2);
}

uint64_t sub_10015BC18@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, BOOL *a3@<X8>)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6 != 0;
  return result;
}

unint64_t sub_10015BC6C()
{
  return 0xD00000000000001CLL;
}

void sub_10015BC88(void *a1@<X8>)
{
  *a1 = &off_1008B5B50;
}

void *sub_10015BC98()
{
  uint64_t result = sub_10015BCB8();
  qword_100941FE8 = (uint64_t)result;
  return result;
}

void *sub_10015BCB8()
{
  uint64_t v0 = 12;
  unint64_t v1 = &byte_1008B57E8;
  while (2)
  {
    int v3 = *v1++;
    unint64_t v4 = 0xE800000000000000;
    uint64_t v5 = 0x44497463656A626FLL;
    switch(v3)
    {
      case 1:
        uint64_t v5 = 0xD000000000000017;
        unint64_t v4 = 0x80000001007C63B0;
        goto LABEL_15;
      case 2:
        unint64_t v4 = 0xED00006E6F697461;
        uint64_t v5 = 0x72756769666E6F63;
        goto LABEL_15;
      case 3:
        unint64_t v4 = 0xE400000000000000;
        uint64_t v5 = 1701667182;
        goto LABEL_15;
      case 4:
        unint64_t v4 = 0xE500000000000000;
        uint64_t v5 = 0x726F6C6F63;
        goto LABEL_15;
      case 5:
        unint64_t v4 = 0xEB000000006D656CLL;
        uint64_t v5 = 0x626D456567646162;
        goto LABEL_15;
      case 6:
        uint64_t v5 = 0xD000000000000017;
        Swift::Int v6 = "DsToCategorizeAsGroceryItems";
        goto LABEL_11;
      case 7:
        unint64_t v4 = 0xEC000000656C7974;
        uint64_t v5 = 0x53676E6974726F73;
        goto LABEL_15;
      case 8:
        uint64_t v5 = 0xD000000000000015;
        Swift::Int v6 = "lendar";
LABEL_11:
        unint64_t v4 = (unint64_t)v6 | 0x8000000000000000;
        goto LABEL_15;
      case 9:
      case 10:
      case 11:
        goto LABEL_4;
      default:
LABEL_15:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v9 = sub_1001806F8(v5, v4);
        uint64_t v10 = _swiftEmptyDictionarySingleton[2];
        BOOL v11 = (v8 & 1) == 0;
        uint64_t v12 = v10 + v11;
        if (__OFADD__(v10, v11)) {
          goto LABEL_63;
        }
        char v13 = v8;
        if (_swiftEmptyDictionarySingleton[3] >= v12)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v8) {
              goto LABEL_2;
            }
          }
          else
          {
            sub_100318A14();
            if (v13) {
              goto LABEL_2;
            }
          }
        }
        else
        {
          sub_10030E654(v12, isUniquelyReferenced_nonNull_native);
          unint64_t v14 = sub_1001806F8(v5, v4);
          if ((v13 & 1) != (v15 & 1)) {
            goto LABEL_65;
          }
          unint64_t v9 = v14;
          if (v13)
          {
LABEL_2:
            Swift::OpaquePointer v2 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v9);
            swift_bridgeObjectRelease();
            *Swift::OpaquePointer v2 = v5;
            v2[1] = v4;
            goto LABEL_3;
          }
        }
        _swiftEmptyDictionarySingleton[(v9 >> 6) + 8] |= 1 << v9;
        id v16 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v9);
        *id v16 = v5;
        v16[1] = v4;
        id v17 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v9);
        uint64_t *v17 = v5;
        v17[1] = v4;
        uint64_t v18 = _swiftEmptyDictionarySingleton[2];
        BOOL v19 = __OFADD__(v18, 1);
        uint64_t v20 = v18 + 1;
        if (v19) {
          goto LABEL_64;
        }
        _swiftEmptyDictionarySingleton[2] = v20;
        swift_bridgeObjectRetain();
LABEL_3:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_4:
        if (--v0) {
          continue;
        }
        unint64_t v21 = 0;
        break;
    }
    break;
  }
  do
  {
    if (v21 >= 3)
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x10015C178);
    }
    unint64_t v23 = v21 + 1;
    int v24 = *((unsigned __int8 *)&off_1008B57F8 + v21 + 32);
    unint64_t v25 = 0xD000000000000014;
    if (v24 == 1) {
      unint64_t v25 = 0x6341746E65726170;
    }
    unint64_t v26 = 0xEF4449746E756F63;
    if (v24 != 1) {
      unint64_t v26 = 0x80000001007C6240;
    }
    unint64_t v27 = 0xED0000746E756F63;
    if (v24 != 1) {
      unint64_t v27 = 0x80000001007C6240;
    }
    if (v24) {
      uint64_t v28 = v25;
    }
    else {
      uint64_t v28 = 0x49746E756F636361;
    }
    if (v24) {
      uint64_t v29 = v26;
    }
    else {
      uint64_t v29 = 0xE900000000000044;
    }
    if (v24) {
      uint64_t v30 = v25;
    }
    else {
      uint64_t v30 = 0x746E756F636361;
    }
    if (v24) {
      unint64_t v31 = v27;
    }
    else {
      unint64_t v31 = 0xE700000000000000;
    }
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v34 = sub_1001806F8(v28, v29);
    uint64_t v35 = _swiftEmptyDictionarySingleton[2];
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      goto LABEL_61;
    }
    char v38 = v33;
    if (_swiftEmptyDictionarySingleton[3] >= v37)
    {
      if (v32)
      {
        if (v33) {
          goto LABEL_27;
        }
      }
      else
      {
        sub_100318A14();
        if (v38) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      sub_10030E654(v37, v32);
      unint64_t v39 = sub_1001806F8(v28, v29);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_65;
      }
      unint64_t v34 = v39;
      if (v38)
      {
LABEL_27:
        char v22 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v34);
        swift_bridgeObjectRelease();
        *char v22 = v30;
        v22[1] = v31;
        goto LABEL_28;
      }
    }
    _swiftEmptyDictionarySingleton[(v34 >> 6) + 8] |= 1 << v34;
    uint64_t v41 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v34);
    *uint64_t v41 = v28;
    v41[1] = v29;
    id v42 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v34);
    uint64_t *v42 = v30;
    v42[1] = v31;
    uint64_t v43 = _swiftEmptyDictionarySingleton[2];
    BOOL v19 = __OFADD__(v43, 1);
    uint64_t v44 = v43 + 1;
    if (v19) {
      goto LABEL_62;
    }
    _swiftEmptyDictionarySingleton[2] = v44;
    swift_bridgeObjectRetain();
LABEL_28:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v21 = v23;
  }
  while (v23 != 3);
  return _swiftEmptyDictionarySingleton;
}

void sub_10015C1A8(char *a1, id a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v7 = v5;
  uint64_t v257 = a4;
  uint64_t v256 = (void *)*v4;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)&v241 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v14 - 8);
  uint64_t v258 = (char *)&v241 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v272 = (void *)type metadata accessor for UUID();
  uint64_t v16 = *(v272 - 1);
  *(void *)&double v17 = __chkstk_darwin(v272).n128_u64[0];
  uint64_t v271 = (char *)&v241 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = [a2 createResolutionTokenMapIfNecessary:v17];
  id v20 = [a1 resolutionTokenMap];
  id v263 = v19;
  if (!v20)
  {
    if (qword_100906F58 != -1) {
LABEL_162:
    }
      swift_once();
    uint64_t v136 = type metadata accessor for Logger();
    sub_10008E2DC(v136, (uint64_t)qword_10090D0C8);
    swift_bridgeObjectRetain_n();
    uint64_t v137 = a1;
    uint64_t v138 = Logger.logObject.getter();
    int v139 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v138, (os_log_type_t)v139))
    {
      LODWORD(v270) = v139;
      uint64_t v140 = swift_slowAlloc();
      uint64_t v141 = (char *)swift_slowAlloc();
      uint64_t v272 = (void *)swift_slowAlloc();
      uint64_t v273 = v272;
      *(_DWORD *)uint64_t v140 = 138543618;
      uint64_t v142 = [v137 objectID];
      long long v275 = v142;
      uint64_t v269 = &v276;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v271 = v141;
      *(void *)uint64_t v141 = v142;

      *(_WORD *)(v140 + 12) = 2082;
      int64_t v143 = *((void *)a3 + 2);
      if (v143)
      {
        long long v275 = _swiftEmptyArrayStorage;
        sub_1001DE058(0, v143, 0);
        unint64_t v266 = a3;
        id v144 = a3 + 32;
        id v145 = v275;
        int64_t v146 = (int64_t)"daIsNotificationsCollection";
        unint64_t v147 = (unint64_t)"DsToCategorizeAsGroceryItems";
        unint64_t v148 = (unint64_t)"lendar";
        unint64_t v149 = (unint64_t)"remindersICSDisplayOrderChanged";
        unint64_t v150 = (unint64_t)"calDAVNotifications";
        unint64_t v151 = (unint64_t)"unsavedSectionIDsOrdering";
        do
        {
          int v152 = *v144++;
          unint64_t v153 = 0xE800000000000000;
          unint64_t v154 = 0x44497463656A626FLL;
          switch(v152)
          {
            case 1:
              unint64_t v153 = v146 | 0x8000000000000000;
              goto LABEL_107;
            case 2:
              unint64_t v154 = 0x72756769666E6F63;
              unint64_t v153 = 0xED00006E6F697461;
              break;
            case 3:
              unint64_t v153 = 0xE400000000000000;
              unint64_t v154 = 1701667182;
              break;
            case 4:
              unint64_t v153 = 0xE500000000000000;
              unint64_t v154 = 0x726F6C6F63;
              break;
            case 5:
              unint64_t v154 = 0x626D456567646162;
              unint64_t v153 = 0xEB000000006D656CLL;
              break;
            case 6:
              unint64_t v153 = v147 | 0x8000000000000000;
LABEL_107:
              unint64_t v154 = 0xD000000000000017;
              break;
            case 7:
              unint64_t v154 = 0x53676E6974726F73;
              unint64_t v153 = 0xEC000000656C7974;
              break;
            case 8:
              unint64_t v154 = 0xD000000000000015;
              unint64_t v153 = v148 | 0x8000000000000000;
              break;
            case 9:
              unint64_t v154 = 0xD00000000000001CLL;
              unint64_t v153 = v149 | 0x8000000000000000;
              break;
            case 10:
              unint64_t v154 = 0xD000000000000019;
              unint64_t v153 = v150 | 0x8000000000000000;
              break;
            case 11:
              unint64_t v154 = 0xD000000000000027;
              unint64_t v153 = v151 | 0x8000000000000000;
              break;
            default:
              break;
          }
          long long v275 = v145;
          unint64_t v156 = v145[2];
          unint64_t v155 = v145[3];
          if (v156 >= v155 >> 1)
          {
            v267 = (char *)v147;
            uint64_t v268 = (const char *)v146;
            uint64_t v264 = (const char *)v149;
            uint64_t v265 = (char *)v148;
            uint64_t v262 = (const char *)v150;
            unint64_t v261 = (char *)v151;
            sub_1001DE058(v155 > 1, v156 + 1, 1);
            unint64_t v151 = (unint64_t)v261;
            unint64_t v150 = (unint64_t)v262;
            unint64_t v149 = (unint64_t)v264;
            unint64_t v148 = (unint64_t)v265;
            unint64_t v147 = (unint64_t)v267;
            int64_t v146 = (int64_t)v268;
            id v145 = v275;
          }
          v145[2] = v156 + 1;
          id v157 = &v145[2 * v156];
          v157[4] = v154;
          v157[5] = v153;
          --v143;
        }
        while (v143);
      }
      uint64_t v165 = Array.description.getter();
      unint64_t v167 = v166;
      swift_bridgeObjectRelease();
      long long v275 = (void *)sub_1000C51B8(v165, v167, (uint64_t *)&v273);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v138, (os_log_type_t)v270, "REMTemplateStorageCDIngestor: merge(storage:into cdTemplate:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v140, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v168 = self;
    sub_1000963CC(0, &qword_10090D2A0);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v170 = String._bridgeToObjectiveC()();
    [v168 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v170];

    swift_willThrow();
    return;
  }
  id v254 = v20;
  unint64_t v21 = (unsigned __int8 *)sub_10047F6B8(v20, (uint64_t)a3);
  char v22 = a3;
  a3 = v21;
  int64_t v23 = *((void *)v22 + 2);
  int v24 = &selRef_intersectsSet_;
  unint64_t v259 = v21;
  if (!v23) {
    goto LABEL_153;
  }
  uint64_t v269 = (uint64_t *)(v22 + 32);
  uint64_t v270 = (void (**)(char *, void *))(v16 + 8);
  uint64_t v253 = &v276;
  unint64_t v266 = v22;
  swift_bridgeObjectRetain();
  unint64_t v25 = 0;
  LODWORD(v265) = 0;
  int v255 = 0;
  *(void *)&long long v26 = 138543618;
  long long v245 = v26;
  uint64_t v251 = "daIsNotificationsCollection";
  uint64_t v250 = "DsToCategorizeAsGroceryItems";
  uint64_t v249 = "lendar";
  uint64_t v248 = "remindersICSDisplayOrderChanged";
  uint64_t v247 = "calDAVNotifications";
  id v246 = "unsavedSectionIDsOrdering";
  *(void *)&long long v26 = 136446722;
  long long v252 = v26;
  unint64_t v243 = 0x80000001007C6C30;
  char v244 = (char *)&type metadata for Any + 8;
  unint64_t v261 = a1;
  id v260 = a2;
  v267 = v13;
  uint64_t v268 = (const char *)v23;
  while (2)
  {
    uint64_t v27 = (v25++)[(void)v269];
    switch(v27)
    {
      case 1:
        BOOL v36 = v25;
        sub_10047CE04(1);
        NSString v37 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v38 = [v19 mergeWithMap:a3 forKey:v37];

        if (!v38) {
          goto LABEL_4;
        }
        [a2 setMinimumSupportedVersion:[a1 minimumSupportedVersion]];
        goto LABEL_24;
      case 2:
        uint64_t v264 = v25;
        id v39 = [a1 configuration];
        if (v39)
        {
          char v40 = v39;
          id v41 = [v39 sourceListID];

          id v42 = [v41 urlRepresentation];
          char v13 = v267;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v43 = type metadata accessor for URL();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v13, 0, 1, v43);
        }
        else
        {
          uint64_t v85 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v13, 1, 1, v85);
        }
        uint64_t KeyPath = swift_getKeyPath();
        sub_100164064(KeyPath, (uint64_t)v13);
        char v13 = v267;
        swift_release();
        sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E40);
        if ([a1 isPersisted])
        {
          uint64_t v262 = v7;
          if (qword_100906F58 != -1) {
            swift_once();
          }
          uint64_t v87 = type metadata accessor for Logger();
          sub_10008E2DC(v87, (uint64_t)qword_10090D0C8);
          swift_bridgeObjectRetain_n();
          id v88 = a1;
          id v89 = Logger.logObject.getter();
          os_log_type_t v90 = static os_log_type_t.fault.getter();
          if (!os_log_type_enabled(v89, v90))
          {

            swift_bridgeObjectRelease_n();
            uint64_t v7 = v262;
            goto LABEL_92;
          }
          uint64_t v91 = swift_slowAlloc();
          id v92 = (void *)swift_slowAlloc();
          uint64_t v242 = (void *)swift_slowAlloc();
          uint64_t v273 = v242;
          *(_DWORD *)uint64_t v91 = v245;
          uint64_t v93 = [v88 objectID];
          long long v275 = v93;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v241 = v92;
          *id v92 = v93;

          *(_WORD *)(v91 + 12) = 2082;
          long long v275 = _swiftEmptyArrayStorage;
          int64_t v94 = (int64_t)v268;
          sub_1001DE058(0, (int64_t)v268, 0);
          int64_t v95 = v94;
          uint64_t v96 = 0;
          id v97 = v275;
          uint64_t v98 = v251;
          uint64_t v99 = v250;
          uint64_t v100 = v249;
          uint64_t v101 = v248;
          uint64_t v102 = v247;
          uint64_t v103 = v246;
          do
          {
            unint64_t v104 = 0xE800000000000000;
            unint64_t v105 = 0x44497463656A626FLL;
            switch(v266[v96 + 32])
            {
              case 1u:
                unint64_t v104 = (unint64_t)v98 | 0x8000000000000000;
                goto LABEL_65;
              case 2u:
                unint64_t v105 = 0x72756769666E6F63;
                unint64_t v104 = 0xED00006E6F697461;
                break;
              case 3u:
                unint64_t v104 = 0xE400000000000000;
                unint64_t v105 = 1701667182;
                break;
              case 4u:
                unint64_t v104 = 0xE500000000000000;
                unint64_t v105 = 0x726F6C6F63;
                break;
              case 5u:
                unint64_t v105 = 0x626D456567646162;
                unint64_t v104 = 0xEB000000006D656CLL;
                break;
              case 6u:
                unint64_t v104 = (unint64_t)v99 | 0x8000000000000000;
LABEL_65:
                unint64_t v105 = 0xD000000000000017;
                break;
              case 7u:
                unint64_t v105 = 0x53676E6974726F73;
                unint64_t v104 = 0xEC000000656C7974;
                break;
              case 8u:
                unint64_t v105 = 0xD000000000000015;
                unint64_t v104 = (unint64_t)v100 | 0x8000000000000000;
                break;
              case 9u:
                unint64_t v105 = 0xD00000000000001CLL;
                unint64_t v104 = (unint64_t)v101 | 0x8000000000000000;
                break;
              case 0xAu:
                unint64_t v105 = 0xD000000000000019;
                unint64_t v104 = (unint64_t)v102 | 0x8000000000000000;
                break;
              case 0xBu:
                unint64_t v105 = 0xD000000000000027;
                unint64_t v104 = (unint64_t)v103 | 0x8000000000000000;
                break;
              default:
                break;
            }
            long long v275 = v97;
            unint64_t v6 = v97[2];
            unint64_t v106 = v97[3];
            if (v6 >= v106 >> 1)
            {
              sub_1001DE058(v106 > 1, v6 + 1, 1);
              uint64_t v103 = v246;
              uint64_t v102 = v247;
              uint64_t v101 = v248;
              uint64_t v100 = v249;
              uint64_t v99 = v250;
              uint64_t v98 = v251;
              int64_t v95 = (int64_t)v268;
              id v97 = v275;
            }
            ++v96;
            v97[2] = v6 + 1;
            uint64_t v107 = &v97[2 * v6];
            v107[4] = v105;
            v107[5] = v104;
          }
          while (v95 != v96);
          uint64_t v108 = Array.description.getter();
          unint64_t v110 = v109;
          swift_release();
          long long v275 = (void *)sub_1000C51B8(v108, v110, (uint64_t *)&v273);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "REMTemplateStorageCDIngestor: changedValueKeys should not include 'configuration' because storage.isPersisted is true {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v91, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          char v13 = v267;
          int64_t v23 = (int64_t)v268;
          uint64_t v7 = v262;
          id v19 = v263;
          a3 = v259;
          a1 = v261;
          a2 = v260;
          unint64_t v25 = v264;
LABEL_5:
          if (v25 == (const char *)v23)
          {
            swift_bridgeObjectRelease();
            if (v255) {
              goto LABEL_123;
            }
            int v24 = &selRef_intersectsSet_;
            if (v265) {
              goto LABEL_152;
            }
            goto LABEL_153;
          }
LABEL_6:
          if (v25 == (const char *)v23)
          {
            __break(1u);
            goto LABEL_151;
          }
          continue;
        }
        int64_t v23 = (int64_t)v268;
        unint64_t v25 = v264;
        if (v264 != v268)
        {
          int v255 = 1;
          goto LABEL_6;
        }
        swift_bridgeObjectRelease();
LABEL_123:
        id v158 = [a2 account];
        if (!v158) {
          goto LABEL_135;
        }
        id v159 = v158;
        id v160 = [v158 remObjectID];
        id v161 = [a1 accountID];
        id v162 = v161;
        if (!v160)
        {
          if (!v161) {
            goto LABEL_137;
          }
LABEL_133:

          id v159 = v162;
          goto LABEL_134;
        }
        if (!v161)
        {
          id v162 = v160;
          goto LABEL_133;
        }
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        id v163 = v160;
        char v164 = static NSObject.== infix(_:_:)();

        a1 = v261;
        if (v164) {
          goto LABEL_137;
        }
LABEL_134:

        a2 = v260;
LABEL_135:
        id v171 = [a2 storeControllerManagedObjectContext];
        if (!v171) {
          goto LABEL_142;
        }
        id v172 = v171;
        uint64_t v173 = self;
        id v174 = [a1 accountID];
        id v175 = [v174 uuid];

        uint64_t v176 = v271;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        UUID.uuidString.getter();
        (*v270)(v176, v272);
        NSString v177 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v159 = [v173 cloudKitAccountWithCKIdentifier:v177 context:v172];

        if (!v159)
        {
LABEL_142:
          uint64_t v272 = 0;
          id v185 = &selRef_intersectsSet_;
LABEL_144:
          uint64_t v186 = self;
          uint64_t v273 = 0;
          unint64_t v274 = 0xE000000000000000;
          _StringGuts.grow(_:)(156);
          v187._countAndFlagsBits = 0xD000000000000082;
          v187._object = (void *)0x80000001007CC560;
          String.append(_:)(v187);
          id v188 = [a1 v185[261]];
          id v189 = [v188 description];
          uint64_t v190 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v191 = a1;
          uint64_t v193 = v192;

          v194._countAndFlagsBits = v190;
          v194._object = v193;
          String.append(_:)(v194);

          swift_bridgeObjectRelease();
          v195._countAndFlagsBits = 0xD000000000000016;
          v195._object = (void *)0x80000001007CC5F0;
          String.append(_:)(v195);
          id v196 = [v191 accountID];
          id v197 = [v196 description];
          uint64_t v198 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v200 = v199;

          v201._countAndFlagsBits = v198;
          v201._object = v200;
          String.append(_:)(v201);

          swift_bridgeObjectRelease();
          NSString v202 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v186 invalidParameterErrorWithDescription:v202];

          swift_willThrow();
          return;
        }
LABEL_137:
        unint64_t v6 = (unint64_t)v159;
        id v178 = [(id)v6 accountTypeHost];
        unsigned int v179 = [v178 isCloudKit];

        if (!v179)
        {

          id v185 = &selRef_intersectsSet_;
          uint64_t v272 = (void *)v6;
          goto LABEL_144;
        }
        id v180 = (char *)[a1 configuration];
        if (v180)
        {
          char v13 = v180;
          id v181 = [v260 storeControllerManagedObjectContext];
          if (v181)
          {
            unsigned int v182 = v181;
            id v183 = [v13 sourceListID];
            id v184 = [a1 objectID];
            sub_10016780C(v183, (uint64_t)v182, v184);
            if (v7)
            {

              goto LABEL_149;
            }

            id v19 = [a1 objectID];
            sub_100167F50((void *)v6, v19, v13);
LABEL_151:

            id v19 = v263;
            a3 = v259;
            int v24 = &selRef_intersectsSet_;
            a2 = v260;
            if (v265)
            {
LABEL_152:
              uint64_t v223 = (uint64_t)v258;
              static Date.now.getter();
              uint64_t v224 = type metadata accessor for Date();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v224 - 8) + 56))(v223, 0, 1, v224);
              unint64_t v225 = (NSURL *)swift_getKeyPath();
              sub_10015F5D0(v225, v223);
              swift_release();
              sub_1000966BC(v223, (uint64_t *)&unk_100909A40);
              int v24 = &selRef_intersectsSet_;
            }
LABEL_153:
            id v226 = [a2 v24[202]];
            if (v226)
            {
              uint64_t v227 = v226;
            }
            else
            {
              if (qword_100906F58 != -1) {
                swift_once();
              }
              uint64_t v228 = type metadata accessor for Logger();
              sub_10008E2DC(v228, (uint64_t)qword_10090D0C8);
              id v229 = a1;
              uint64_t v230 = Logger.logObject.getter();
              os_log_type_t v231 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled(v230, v231))
              {
                uint64_t v232 = swift_slowAlloc();
                uint64_t v233 = (char *)swift_slowAlloc();
                uint64_t v271 = v233;
                uint64_t v272 = (void *)swift_slowAlloc();
                long long v275 = v272;
                *(_DWORD *)uint64_t v232 = 136446722;
                uint64_t v262 = v7;
                uint64_t v273 = v256;
                swift_getMetatypeMetadata();
                uint64_t v234 = String.init<A>(describing:)();
                uint64_t v273 = (void *)sub_1000C51B8(v234, v235, (uint64_t *)&v275);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v232 + 12) = 2114;
                id v236 = [v229 objectID];
                uint64_t v273 = v236;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(void *)uint64_t v233 = v236;

                *(_WORD *)(v232 + 22) = 2080;
                id v237 = [v229 name];
                uint64_t v238 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v240 = v239;

                uint64_t v273 = (void *)sub_1000C51B8(v238, v240, (uint64_t *)&v275);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v230, v231, "%{public}s: '\\REMCDTemplate.name' should not be nil at the end of 'merge(storage:into:changedValueKeys:optionalCoordinator:)' {storage.objectID: %{public}@, storage.name: %s}", (uint8_t *)v232, 0x20u);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
              }
            }
          }
          else
          {
            id v220 = self;
            type metadata accessor for REMCDTemplate();
            uint64_t v221 = swift_getObjCClassFromMetadata();
            NSString v222 = String._bridgeToObjectiveC()();
            [v220 unexpectedNilPropertyWithClass:v221 property:v222];

            swift_willThrow();
LABEL_149:
          }
        }
        else
        {
          uint64_t v272 = self;
          uint64_t v273 = 0;
          unint64_t v274 = 0xE000000000000000;
          _StringGuts.grow(_:)(166);
          v203._countAndFlagsBits = 0xD00000000000008CLL;
          v203._object = (void *)0x80000001007CC610;
          String.append(_:)(v203);
          id v204 = [a1 objectID];
          id v205 = [v204 description];
          uint64_t v206 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v207 = (void *)v6;
          NSString v208 = a1;
          uint64_t v210 = v209;

          v211._countAndFlagsBits = v206;
          v211._object = v210;
          String.append(_:)(v211);

          swift_bridgeObjectRelease();
          v212._countAndFlagsBits = 0xD000000000000016;
          v212._object = (void *)0x80000001007CC5F0;
          String.append(_:)(v212);
          id v213 = [v208 accountID];
          id v214 = [v213 description];
          uint64_t v215 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v217 = v216;

          v218._countAndFlagsBits = v215;
          v218._object = v217;
          String.append(_:)(v218);

          swift_bridgeObjectRelease();
          NSString v219 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v272 invalidParameterErrorWithDescription:v219];

          swift_willThrow();
        }
        return;
      case 3:
        BOOL v36 = v25;
        sub_10047CE04(3);
        NSString v44 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v45 = [v19 mergeWithMap:a3 forKey:v44];

        if (!v45) {
          goto LABEL_4;
        }
        NSString v46 = [a1 name];
        char v13 = v267;
        if (!v46)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v46 = String._bridgeToObjectiveC()();
          char v13 = v267;
          swift_bridgeObjectRelease();
        }
        [a2 setName:v46];

        int64_t v23 = (int64_t)v268;
        if (v36 == v268) {
          goto LABEL_121;
        }
        goto LABEL_25;
      case 4:
        BOOL v36 = v25;
        sub_10047CE04(4);
        NSString v47 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v48 = [v19 mergeWithMap:a3 forKey:v47];

        if (!v48) {
          goto LABEL_4;
        }
        id v49 = [a1 color];
        [a2 setColor:v49];
        goto LABEL_23;
      case 5:
        BOOL v36 = v25;
        sub_10047CE04(5);
        NSString v50 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v51 = [v19 mergeWithMap:a3 forKey:v50];

        if (!v51) {
          goto LABEL_4;
        }
        id v49 = [a1 badgeEmblem];
        [a2 setBadgeEmblem:v49];
LABEL_23:

LABEL_24:
        char v13 = v267;
        int64_t v23 = (int64_t)v268;
        if (v36 == v268) {
          goto LABEL_121;
        }
LABEL_25:
        unint64_t v25 = v36;
LABEL_31:
        LODWORD(v265) = 1;
        goto LABEL_6;
      case 6:
        [a2 setShowingLargeAttachments:[a1 showingLargeAttachments]];
        goto LABEL_78;
      case 7:
        BOOL v36 = v25;
        sub_10047CE04(7);
        NSString v52 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v53 = [v19 mergeWithMap:a3 forKey:v52];

        if (!v53)
        {
LABEL_4:
          char v13 = v267;
          int64_t v23 = (int64_t)v268;
          unint64_t v25 = v36;
          goto LABEL_5;
        }
        id v54 = [a1 sortingStyle];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        NSString v55 = String._bridgeToObjectiveC()();
        a2 = v260;
        swift_bridgeObjectRelease();
        [a2 setSortingStyle:v55];

        int64_t v23 = (int64_t)v268;
        if (v36 == v268)
        {
LABEL_121:
          swift_bridgeObjectRelease();
          if (v255)
          {
            LODWORD(v265) = 1;
            goto LABEL_123;
          }
          goto LABEL_152;
        }
        unint64_t v25 = v36;
        LODWORD(v265) = 1;
        char v13 = v267;
        goto LABEL_6;
      case 8:
        sub_1001672E4(a1);
        int64_t v23 = (int64_t)v268;
        if (v25 != v268) {
          goto LABEL_31;
        }
        goto LABEL_121;
      case 9:
        goto LABEL_5;
      case 10:
        id v56 = [a1 unsavedSectionIDsOrdering];
        if (!v56)
        {
          char v13 = v267;
LABEL_78:
          int64_t v23 = (int64_t)v268;
          goto LABEL_5;
        }
        os_log_t v57 = v56;
        uint64_t v264 = v25;
        uint64_t v262 = v7;
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        unint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v58 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
          if (!v59) {
            goto LABEL_86;
          }
        }
        else
        {
          uint64_t v59 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v59) {
            goto LABEL_86;
          }
        }
        if (v59 >= 1)
        {
          uint64_t v60 = 0;
          os_log_t v61 = _swiftEmptyArrayStorage;
          do
          {
            if ((v58 & 0xC000000000000001) != 0) {
              id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v62 = *(id *)(v58 + 8 * v60 + 32);
            }
            uint64_t v63 = v62;
            id v64 = [v62 uuid];
            uint64_t v65 = v271;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v66 = UUID.uuidString.getter();
            uint64_t v68 = v67;
            (*v270)(v65, v272);

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              os_log_t v61 = sub_100308F88(0, v61[2] + 1, 1, v61);
            }
            unint64_t v6 = v61[2];
            unint64_t v69 = v61[3];
            if (v6 >= v69 >> 1) {
              os_log_t v61 = sub_100308F88((void *)(v69 > 1), v6 + 1, 1, v61);
            }
            ++v60;
            v61[2] = v6 + 1;
            uint64_t v70 = &v61[2 * v6];
            v70[4] = v66;
            v70[5] = v68;
          }
          while (v59 != v60);
LABEL_86:
          swift_bridgeObjectRelease();
          id v111 = objc_allocWithZone((Class)REMOrderedIdentifierMap);
          swift_bridgeObjectRetain();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          uint64_t v113 = [v111 initWithOrderedIdentifiers:isa];
          swift_bridgeObjectRelease();

          uint64_t v273 = v113;
          sub_1000963CC(0, (unint64_t *)&qword_10090D600);
          uint64_t v114 = v113;
          uint64_t v115 = v262;
          uint64_t v116 = REMJSONRepresentable.toJSONData()();
          uint64_t v7 = v115;
          if (v115)
          {
            swift_bridgeObjectRelease();

            id v19 = v263;
            if (qword_100906F58 != -1) {
              swift_once();
            }
            uint64_t v118 = type metadata accessor for Logger();
            sub_10008E2DC(v118, (uint64_t)qword_10090D0C8);
            id v119 = v261;
            swift_errorRetain();
            uint64_t v120 = v119;
            swift_errorRetain();
            uint64_t v121 = Logger.logObject.getter();
            os_log_type_t v122 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v121, v122))
            {
              uint64_t v123 = swift_slowAlloc();
              unint64_t v124 = (void *)swift_slowAlloc();
              unint64_t v6 = swift_slowAlloc();
              long long v275 = (void *)v6;
              *(_DWORD *)uint64_t v123 = v252;
              uint64_t v273 = v256;
              swift_getMetatypeMetadata();
              uint64_t v125 = String.init<A>(describing:)();
              *(void *)(v123 + 4) = sub_1000C51B8(v125, v126, (uint64_t *)&v275);
              swift_bridgeObjectRelease();
              *(_WORD *)(v123 + 12) = 2114;
              id v127 = [v120 objectID];
              *(void *)(v123 + 14) = v127;
              void *v124 = v127;

              *(_WORD *)(v123 + 22) = 2082;
              swift_getErrorValue();
              uint64_t v128 = Error.rem_errorDescription.getter();
              *(void *)(v123 + 24) = sub_1000C51B8(v128, v129, (uint64_t *)&v275);
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v121, v122, "%{public}s#merge(storage:into:changedValueKeys:coordinator:): Failed to merge 'storage.unsavedSectionIDsOrdering' into 'cdTemplate' {storage.objectID: %{public}@, error: %{public}s}", (uint8_t *)v123, 0x20u);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              swift_errorRelease();
            }
            else
            {
              swift_errorRelease();

              swift_errorRelease();
              swift_errorRelease();
            }
            uint64_t v7 = 0;
            a3 = v259;
            a1 = v261;
            a2 = v260;
          }
          else
          {
            uint64_t v130 = v116;
            unint64_t v131 = v117;
            sub_100097E38(v116, v117);
            Class v132 = Data._bridgeToObjectiveC()().super.isa;
            sub_100097F34(v130, v131);
            id v133 = v260;
            [v260 setSectionIDsOrderingAsData:v132];

            id v134 = [v133 createResolutionTokenMapIfNecessary];
            NSString v135 = String._bridgeToObjectiveC()();
            [v134 updateForKey:v135];

            a2 = v133;
            sub_100097F34(v130, v131);
            swift_bridgeObjectRelease();

            id v19 = v263;
            a3 = v259;
LABEL_92:
            a1 = v261;
          }
          char v13 = v267;
          int64_t v23 = (int64_t)v268;
          unint64_t v25 = v264;
          goto LABEL_5;
        }
        __break(1u);
        goto LABEL_162;
      case 11:
        unint64_t v6 = (unint64_t)v25;
        id v71 = [a1 unsavedMembershipsOfRemindersInSections];
        if (v71)
        {
          uint64_t v72 = v71;
          sub_10015A2B0(v71);
          if (v7)
          {
            if (qword_100906F58 != -1) {
              swift_once();
            }
            uint64_t v73 = type metadata accessor for Logger();
            sub_10008E2DC(v73, (uint64_t)qword_10090D0C8);
            id v74 = a1;
            swift_errorRetain();
            id v75 = v74;
            swift_errorRetain();
            uint64_t v76 = Logger.logObject.getter();
            os_log_type_t v77 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v76, v77))
            {
              uint64_t v78 = swift_slowAlloc();
              id v79 = (char *)swift_slowAlloc();
              uint64_t v262 = v79;
              uint64_t v264 = (const char *)swift_slowAlloc();
              long long v275 = v264;
              *(_DWORD *)uint64_t v78 = v252;
              uint64_t v273 = v256;
              swift_getMetatypeMetadata();
              uint64_t v80 = String.init<A>(describing:)();
              *(void *)(v78 + 4) = sub_1000C51B8(v80, v81, (uint64_t *)&v275);
              swift_bridgeObjectRelease();
              *(_WORD *)(v78 + 12) = 2114;
              id v82 = [v75 objectID];
              *(void *)(v78 + 14) = v82;
              *(void *)id v79 = v82;
              id v19 = v263;

              *(_WORD *)(v78 + 22) = 2082;
              swift_getErrorValue();
              uint64_t v83 = Error.rem_errorDescription.getter();
              *(void *)(v78 + 24) = sub_1000C51B8(v83, v84, (uint64_t *)&v275);
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v76, v77, "%{public}s#merge(storage:into:changedValueKeys:coordinator:): Failed to merge 'storage.unsavedMembershipsOfRemindersInSections' into 'cdTemplate' {storage.objectID: %{public}@, error: %{public}s}", (uint8_t *)v78, 0x20u);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              swift_errorRelease();
            }
            else
            {

              swift_errorRelease();
              swift_errorRelease();
              swift_errorRelease();
            }
            uint64_t v7 = 0;
            a3 = v259;
            a1 = v261;
            a2 = v260;
          }
          else
          {
          }
          char v13 = v267;
        }
        int64_t v23 = (int64_t)v268;
        unint64_t v25 = (const char *)v6;
        goto LABEL_5;
      default:
        unint64_t v6 = (unint64_t)v25;
        id v28 = [a1 objectID];
        id v29 = [v28 uuid];

        uint64_t v30 = v271;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class v31 = UUID._bridgeToObjectiveC()().super.isa;
        (*v270)(v30, v272);
        [a2 setIdentifier:v31];

        uint64_t v32 = (uint64_t)v258;
        static Date.now.getter();
        uint64_t v33 = type metadata accessor for Date();
        unint64_t v34 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56);
        LODWORD(v265) = 1;
        v34(v32, 0, 1, v33);
        uint64_t v35 = (NSURL *)swift_getKeyPath();
        sub_10015F5D0(v35, v32);
        unint64_t v25 = (const char *)v6;
        swift_release();
        sub_1000966BC(v32, (uint64_t *)&unk_100909A40);
        int64_t v23 = (int64_t)v268;
        if ((const char *)v6 == v268) {
          goto LABEL_121;
        }
        char v13 = v267;
        goto LABEL_6;
    }
  }
}

void sub_10015E77C(unint64_t a1, int a2)
{
}

void sub_10015E794(unint64_t a1, int a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v41 - 8);
  *(void *)&double v9 = __chkstk_darwin(v41).n128_u64[0];
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    [v5 setSectionIDsOrderingAsData:0, v9];
    return;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_4;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_17;
  }
LABEL_4:
  if (v12 < 1)
  {
    __break(1u);
    return;
  }
  HIDWORD(v36) = a2;
  NSString v37 = v5;
  uint64_t v38 = v4;
  uint64_t v13 = 0;
  unint64_t v39 = a1 & 0xC000000000000001;
  uint64_t v14 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v15 = _swiftEmptyArrayStorage;
  unint64_t v40 = a1;
  do
  {
    if (v39) {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v16 = *(id *)(a1 + 8 * v13 + 32);
    }
    double v17 = v16;
    id v18 = [v16 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = UUID.uuidString.getter();
    uint64_t v21 = v20;
    (*v14)(v11, v41);

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = sub_100308F88(0, v15[2] + 1, 1, v15);
    }
    unint64_t v23 = v15[2];
    unint64_t v22 = v15[3];
    if (v23 >= v22 >> 1) {
      uint64_t v15 = sub_100308F88((void *)(v22 > 1), v23 + 1, 1, v15);
    }
    ++v13;
    void v15[2] = v23 + 1;
    int v24 = &v15[2 * v23];
    v24[4] = v19;
    v24[5] = v21;
    a1 = v40;
  }
  while (v12 != v13);
  swift_bridgeObjectRelease();
  uint64_t v5 = v37;
  uint64_t v4 = v38;
  LOBYTE(a2) = BYTE4(v36);
LABEL_18:
  id v25 = objc_allocWithZone((Class)REMOrderedIdentifierMap);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v27 = [v25 initWithOrderedIdentifiers:isa];
  swift_bridgeObjectRelease();

  id v42 = v27;
  sub_1000963CC(0, (unint64_t *)&qword_10090D600);
  id v28 = v27;
  uint64_t v29 = REMJSONRepresentable.toJSONData()();
  if (!v4)
  {
    uint64_t v31 = v29;
    unint64_t v32 = v30;
    sub_100097E38(v29, v30);
    Class v33 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v31, v32);
    [v5 setSectionIDsOrderingAsData:v33];

    if (a2)
    {
      id v34 = [v5 createResolutionTokenMapIfNecessary];
      NSString v35 = String._bridgeToObjectiveC()();
      [v34 updateForKey:v35];
    }
    sub_100097F34(v31, v32);
  }
}

uint64_t sub_10015EB58(void *a1)
{
  uint64_t v65 = *v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v60[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  id v64 = &v60[-v9];
  __chkstk_darwin(v10);
  uint64_t v12 = &v60[-v11];
  *(void *)&double v14 = __chkstk_darwin(v13).n128_u64[0];
  id v16 = &v60[-v15];
  id v17 = [a1 uuid:v14];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = sub_100168A08((uint64_t)v16);
  if (v2) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v16, v4);
  }
  uint64_t v63 = v5;
  uint64_t v20 = v4;
  if (v18)
  {
    if (qword_100906F58 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_10090D0C8);
    uint64_t v22 = v63;
    unint64_t v23 = v16;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v63 + 16))(v7, v16, v4);
    int v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    int v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v27 = swift_slowAlloc();
      id v64 = (unsigned char *)swift_slowAlloc();
      uint64_t v66 = v64;
      *(_DWORD *)uint64_t v27 = 136446466;
      LODWORD(v62) = v26;
      uint64_t v67 = (unsigned char *)v65;
      swift_getMetatypeMetadata();
      uint64_t v28 = String.init<A>(describing:)();
      uint64_t v65 = v4;
      uint64_t v67 = (unsigned char *)sub_1000C51B8(v28, v29, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2082;
      uint64_t v30 = UUID.uuidString.getter();
      uint64_t v67 = (unsigned char *)sub_1000C51B8(v30, v31, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v32 = *(void (**)(unsigned char *, uint64_t))(v63 + 8);
      Class v33 = v7;
      uint64_t v34 = v65;
      v32(v33, v65);
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v62, "%{public}s: Did reset '\\REMCDList.mostRecentTargetTemplateIdentifier' to nil {mostRecentTargetTemplateIdentifier: %{public}s}", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return ((uint64_t (*)(unsigned char *, uint64_t))v32)(v23, v34);
    }
    else
    {

      unsigned int v48 = *(void (**)(unsigned char *, uint64_t))(v22 + 8);
      v48(v7, v4);
      return ((uint64_t (*)(unsigned char *, uint64_t))v48)(v23, v4);
    }
  }
  else
  {
    if (sub_100168DB8((uint64_t)v16) < 1)
    {
      uint64_t v38 = v16;
      uint64_t v35 = v4;
      if (qword_100906F58 != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      sub_10008E2DC(v49, (uint64_t)qword_10090D0C8);
      uint64_t v50 = v63;
      unsigned int v51 = v64;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v63 + 16))(v64, v38, v20);
      NSString v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      int v54 = v53;
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v55 = swift_slowAlloc();
        uint64_t v62 = swift_slowAlloc();
        uint64_t v67 = (unsigned char *)v62;
        *(_DWORD *)uint64_t v55 = 136446466;
        int v61 = v54;
        uint64_t v56 = sub_1000D82B8();
        uint64_t v65 = v20;
        uint64_t v66 = (unsigned char *)sub_1000C51B8(v56, v57, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v55 + 12) = 2082;
        uint64_t v58 = UUID.uuidString.getter();
        uint64_t v66 = (unsigned char *)sub_1000C51B8(v58, v59, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        NSString v47 = *(void (**)(unsigned char *, uint64_t))(v50 + 8);
        uint64_t v35 = v65;
        v47(v51, v65);
        _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v61, "%{public}s: Did not find REMCDList and REMCDSmartList with matching 'mostRecentTargetTemplateIdentifier' {mostRecentTargetTemplateIdentifier: %{public}s}", (uint8_t *)v55, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        NSString v47 = *(void (**)(unsigned char *, uint64_t))(v50 + 8);
        v47(v51, v20);
      }
    }
    else
    {
      uint64_t v35 = v4;
      if (qword_100906F58 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_10008E2DC(v36, (uint64_t)qword_10090D0C8);
      uint64_t v37 = v63;
      uint64_t v38 = v16;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v63 + 16))(v12, v16, v20);
      unint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      int v41 = v40;
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v42 = swift_slowAlloc();
        id v64 = (unsigned char *)swift_slowAlloc();
        uint64_t v67 = v64;
        *(_DWORD *)uint64_t v42 = 136446466;
        LODWORD(v62) = v41;
        uint64_t v43 = sub_1000D82B8();
        uint64_t v65 = v20;
        uint64_t v66 = (unsigned char *)sub_1000C51B8(v43, v44, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2082;
        uint64_t v45 = UUID.uuidString.getter();
        uint64_t v66 = (unsigned char *)sub_1000C51B8(v45, v46, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        NSString v47 = *(void (**)(unsigned char *, uint64_t))(v37 + 8);
        uint64_t v35 = v65;
        v47(v12, v65);
        _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v62, "%{public}s: Did reset '\\REMCDSmartList.mostRecentTargetTemplateIdentifier' to nil {mostRecentTargetTemplateIdentifier: %{public}s}", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        NSString v47 = *(void (**)(unsigned char *, uint64_t))(v37 + 8);
        v47(v12, v20);
      }
    }
    return ((uint64_t (*)(unsigned char *, uint64_t))v47)(v38, v35);
  }
}

uint64_t sub_10015F344()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REMTemplateStorageCDIngestor()
{
  return self;
}

_UNKNOWN **sub_10015F378()
{
  return &off_1008BC1C0;
}

_UNKNOWN **sub_10015F384()
{
  return &off_1008BC190;
}

_UNKNOWN **sub_10015F390()
{
  return &off_1008BC160;
}

_UNKNOWN **sub_10015F39C()
{
  return &off_1008BC130;
}

uint64_t sub_10015F3A8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015F3CC(a1, (SEL *)&selRef_creationDate, a2);
}

void sub_10015F3B4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10015F3C0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015F3CC(a1, (SEL *)&selRef_lastModifiedDate, a2);
}

uint64_t sub_10015F3CC@<X0>(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    uint64_t v8 = v6;
    uint64_t v9 = a3;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v8 = v11;
    uint64_t v9 = a3;
    uint64_t v10 = 1;
  }

  return v7(v9, v10, 1, v8);
}

void sub_10015F490(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_10015F49C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v10, (uint64_t *)&unk_100909A40);
  uint64_t v11 = *a2;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
  }
  [v11 *a5:isa];
}

uint64_t sub_10015F5D0(NSURL *a1, uint64_t a2)
{
  uint64_t v250 = a2;
  uint64_t v218 = type metadata accessor for Logger();
  uint64_t v217 = *(void *)(v218 - 8);
  __chkstk_darwin(v218);
  int v216 = (char *)&v211 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::String v212 = (char *)&v211 - v5;
  uint64_t v6 = sub_100094134(&qword_10090D2C8);
  __chkstk_darwin(v6 - 8);
  id v220 = (char *)&v211 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v219 = sub_100094134((uint64_t *)&unk_100909E40);
  uint64_t v222 = *(void *)(v219 - 8);
  __chkstk_darwin(v219);
  uint64_t v213 = (uint64_t)&v211 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v215 = (uint64_t)&v211 - v10;
  uint64_t v11 = sub_100094134(&qword_10090D2B0);
  __chkstk_darwin(v11 - 8);
  id v226 = (char *)&v211 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v225 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v227 = *(void *)(v225 - 8);
  __chkstk_darwin(v225);
  uint64_t v221 = (uint64_t)&v211 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v224 = (uint64_t)&v211 - v15;
  v245._reserved = (void *)type metadata accessor for Date();
  uint64_t v247 = *((void *)v245._reserved - 1);
  __chkstk_darwin(v245._reserved);
  uint64_t v238 = (char *)&v211 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v242 = sub_100094134((uint64_t *)&unk_10091C320);
  __chkstk_darwin(v242);
  uint64_t v243 = (uint64_t)&v211 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245._clients = (void *)sub_100094134(&qword_10090D2E8);
  __chkstk_darwin(v245._clients);
  uint64_t v19 = (char *)&v211 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v20 = *(void *)(v246 - 8);
  __chkstk_darwin(v246);
  id v229 = (char *)&v211 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  int v24 = (char *)&v211 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v211 - v26;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v211 - v29;
  __chkstk_darwin(v31);
  Class v33 = (char *)&v211 - v32;
  __chkstk_darwin(v34);
  uint64_t v214 = (uint64_t)&v211 - v35;
  __chkstk_darwin(v36);
  uint64_t v223 = (uint64_t)&v211 - v37;
  __chkstk_darwin(v38);
  uint64_t v228 = (uint64_t)&v211 - v39;
  __chkstk_darwin(v40);
  uint64_t v230 = (uint64_t)&v211 - v41;
  __chkstk_darwin(v42);
  uint64_t v231 = (uint64_t)&v211 - v43;
  __chkstk_darwin(v44);
  uint64_t v232 = (objc_class *)((char *)&v211 - v45);
  __chkstk_darwin(v46);
  uint64_t v233 = (uint64_t)&v211 - v47;
  __chkstk_darwin(v48);
  uint64_t v234 = (objc_class *)((char *)&v211 - v49);
  __chkstk_darwin(v50);
  uint64_t v235 = (uint64_t)&v211 - v51;
  __chkstk_darwin(v52);
  uint64_t v236 = (uint64_t)&v211 - v53;
  __chkstk_darwin(v54);
  id v237 = (objc_class *)((char *)&v211 - v55);
  __chkstk_darwin(v56);
  uint64_t v239 = (uint64_t)&v211 - v57;
  __chkstk_darwin(v58);
  unint64_t v240 = (objc_class *)((char *)&v211 - v59);
  __chkstk_darwin(v60);
  uint64_t v244 = (uint64_t)&v211 - v61;
  __chkstk_darwin(v62);
  v245.super.Class isa = (Class)((char *)&v211 - v63);
  __chkstk_darwin(v64);
  uint64_t v241 = (uint64_t)&v211 - v65;
  __chkstk_darwin(v66);
  v245._urlString = (NSString *)((char *)&v211 - v67);
  __chkstk_darwin(v68);
  uint64_t v70 = (char *)&v211 - v69;
  uint64_t v71 = sub_100094134(&qword_10090D2B8);
  __chkstk_darwin(v71 - 8);
  uint64_t v248 = (uint64_t)&v211 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v73);
  id v75 = (char *)&v211 - v74;
  __chkstk_darwin(v76);
  uint64_t v249 = (uint64_t)&v211 - v77;
  v245._uint64_t baseURL = a1;
  uint64_t v78 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v79)
  {
    uint64_t v254 = 0;
    unint64_t v255 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v208._object = (void *)0x80000001007CAF70;
    v208._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v208);
    uint64_t baseURL = (uint64_t)v245._baseURL;
    goto LABEL_167;
  }
  uint64_t v80 = v78;
  uint64_t v81 = v79;
  if (v78 == 0x6E6F697461657263 && v79 == 0xEC00000065746144
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v82 = [v251 creationDate];
    if (v82)
    {
      uint64_t v83 = v82;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v84 = v247;
      uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t, void *))(v247 + 56);
      uint64_t v86 = v70;
      uint64_t v87 = 0;
    }
    else
    {
      uint64_t v84 = v247;
      uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t, void *))(v247 + 56);
      uint64_t v86 = v70;
      uint64_t v87 = 1;
    }
    reserved = v245._reserved;
    v85(v86, v87, 1, v245._reserved);
    uint64_t v89 = (uint64_t)v70;
    uint64_t v91 = v248;
    uint64_t v90 = v249;
    goto LABEL_17;
  }
  if (v80 == 0xD000000000000010 && v81 == 0x800000010077DA00
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v92 = [v251 lastModifiedDate];
    if (v92)
    {
      uint64_t v93 = v92;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v84 = v247;
      int64_t v94 = *(void (**)(char *, uint64_t, uint64_t, void *))(v247 + 56);
      int64_t v95 = v33;
      uint64_t v96 = 0;
    }
    else
    {
      uint64_t v84 = v247;
      int64_t v94 = *(void (**)(char *, uint64_t, uint64_t, void *))(v247 + 56);
      int64_t v95 = v33;
      uint64_t v96 = 1;
    }
    reserved = v245._reserved;
    v94(v95, v96, 1, v245._reserved);
    uint64_t v91 = v248;
    uint64_t v90 = v249;
LABEL_16:
    uint64_t v89 = (uint64_t)v33;
LABEL_17:
    sub_100096408(v89, v90, (uint64_t *)&unk_100909A40);
    id v97 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56);
    uint64_t v98 = v246;
    v97(v90, 0, 1, v246);
    goto LABEL_18;
  }
  if (v80 == 0xD000000000000025 && v81 == 0x80000001007C6C50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v124 = [v251 mostRecentPublicLinkUpdateRequestDate];
    if (v124)
    {
      uint64_t v125 = v124;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v126 = *(void (**)(char *, uint64_t, uint64_t, void *))(v247 + 56);
      id v127 = v30;
      uint64_t v128 = 0;
    }
    else
    {
      unint64_t v126 = *(void (**)(char *, uint64_t, uint64_t, void *))(v247 + 56);
      id v127 = v30;
      uint64_t v128 = 1;
    }
    reserved = v245._reserved;
    v126(v127, v128, 1, v245._reserved);
    uint64_t v91 = v248;
    uint64_t v90 = v249;
    sub_100096408((uint64_t)v30, v249, (uint64_t *)&unk_100909A40);
    id v97 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56);
    uint64_t v98 = v246;
    v97(v90, 0, 1, v246);
    uint64_t v84 = v247;
    goto LABEL_18;
  }
  if (v80 == 0xD00000000000001BLL && v81 == 0x80000001007C6C80
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    goto LABEL_69;
  }
  if (v80 == 0xD000000000000016 && v81 == 0x80000001007C6CA0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v138 = [v251 publicLinkCreationDate];
    uint64_t v84 = v247;
    if (v138)
    {
      int v139 = v138;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, void *))(v84 + 56))(v27, 0, 1, v245._reserved);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, void *))(v247 + 56))(v27, 1, 1, v245._reserved);
    }
    uint64_t v91 = v248;
    uint64_t v90 = v249;
    sub_100096408((uint64_t)v27, v249, (uint64_t *)&unk_100909A40);
    id v97 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56);
    uint64_t v98 = v246;
    v97(v90, 0, 1, v246);
    reserved = v245._reserved;
    goto LABEL_18;
  }
  uint64_t v84 = v247;
  if (v80 == 0xD000000000000018 && v81 == 0x80000001007C61A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v141 = [v251 publicLinkExpirationDate];
    reserved = v245._reserved;
    if (v141)
    {
      uint64_t v142 = v141;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, void *))(v84 + 56))(v24, 0, 1, reserved);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, void *))(v84 + 56))(v24, 1, 1, v245._reserved);
    }
    uint64_t v90 = v249;
    sub_100096408((uint64_t)v24, v249, (uint64_t *)&unk_100909A40);
    id v97 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56);
    uint64_t v98 = v246;
    v97(v90, 0, 1, v246);
    uint64_t v91 = v248;
LABEL_18:
    sub_1000BF710(v250, (uint64_t)v75, (uint64_t *)&unk_100909A40);
    v97((uint64_t)v75, 0, 1, v98);
    uint64_t v99 = (uint64_t)&v19[*((int *)v245._clients + 12)];
    sub_1000BF710(v90, (uint64_t)v19, &qword_10090D2B8);
    sub_1000BF710((uint64_t)v75, v99, &qword_10090D2B8);
    uint64_t v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
    if (v100((uint64_t)v19, 1, v98) == 1)
    {
      sub_1000966BC((uint64_t)v75, &qword_10090D2B8);
      if (v100(v99, 1, v98) == 1)
      {
LABEL_20:
        sub_1000966BC((uint64_t)v19, &qword_10090D2B8);
LABEL_43:
        uint64_t v121 = v90;
        return sub_1000966BC(v121, &qword_10090D2B8);
      }
      uint64_t v101 = &qword_10090D2E8;
    }
    else
    {
      sub_1000BF710((uint64_t)v19, v91, &qword_10090D2B8);
      if (v100(v99, 1, v98) == 1)
      {
        uint64_t v101 = &qword_10090D2E8;
      }
      else
      {
        urlString = v245._urlString;
        sub_100096408(v99, (uint64_t)v245._urlString, (uint64_t *)&unk_100909A40);
        uint64_t v103 = v243;
        uint64_t v104 = v243 + *(int *)(v242 + 48);
        sub_1000BF710(v91, v243, (uint64_t *)&unk_100909A40);
        sub_1000BF710((uint64_t)urlString, v104, (uint64_t *)&unk_100909A40);
        unint64_t v105 = reserved;
        unint64_t v106 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v84 + 48);
        if (v106(v103, 1, v105) == 1)
        {
          int v107 = v106(v104, 1, v105);
          reserved = v105;
          if (v107 == 1)
          {
            sub_1000966BC(v103, (uint64_t *)&unk_100909A40);
            sub_1000966BC((uint64_t)v245._urlString, (uint64_t *)&unk_100909A40);
            sub_1000966BC((uint64_t)v75, &qword_10090D2B8);
            sub_1000966BC(v91, (uint64_t *)&unk_100909A40);
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v108 = v241;
          sub_1000BF710(v103, v241, (uint64_t *)&unk_100909A40);
          if (v106(v104, 1, v105) != 1)
          {
            unint64_t v129 = v238;
            (*(void (**)(char *, uint64_t, void *))(v84 + 32))(v238, v104, v105);
            sub_10016A8C4((unint64_t *)&qword_100909F80, (void (*)(uint64_t))&type metadata accessor for Date);
            char v130 = dispatch thunk of static Equatable.== infix(_:_:)();
            unint64_t v131 = *(void (**)(char *, void *))(v84 + 8);
            v131(v129, v105);
            v131((char *)v108, v105);
            sub_1000966BC(v103, (uint64_t *)&unk_100909A40);
            sub_1000966BC((uint64_t)v245._urlString, (uint64_t *)&unk_100909A40);
            sub_1000966BC((uint64_t)v75, &qword_10090D2B8);
            sub_1000966BC(v248, (uint64_t *)&unk_100909A40);
            sub_1000966BC((uint64_t)v19, &qword_10090D2B8);
            unint64_t v109 = v245._baseURL;
            reserved = v105;
            uint64_t v90 = v249;
            if (v130) {
              goto LABEL_43;
            }
LABEL_32:
            uint64_t v110 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
            if (!v111)
            {
LABEL_165:
              uint64_t v254 = 0;
              unint64_t v255 = 0xE000000000000000;
              _StringGuts.grow(_:)(46);
              v207._object = (void *)0x80000001007CAF70;
              v207._countAndFlagsBits = 0xD00000000000002CLL;
              String.append(_:)(v207);
              uint64_t baseURL = (uint64_t)v109;
LABEL_167:
              sub_100094134(&qword_10090FF80);
              while (1)
              {
                _print_unlocked<A, B>(_:_:)();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_169:
                id v209 = v245._baseURL;
                swift_release();
                uint64_t v254 = 0;
                unint64_t v255 = 0xE000000000000000;
                _StringGuts.grow(_:)(46);
                v210._object = (void *)0x80000001007CAF70;
                v210._countAndFlagsBits = 0xD00000000000002CLL;
                String.append(_:)(v210);
                long long v252 = v209;
                sub_100094134(&qword_10090FF80);
              }
            }
            uint64_t v112 = v110;
            uint64_t v113 = v111;
            if (v110 == 0x6E6F697461657263 && v111 == 0xEC00000065746144
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              Class isa = v245.super.isa;
              sub_1000BF710(v250, (uint64_t)v245.super.isa, (uint64_t *)&unk_100909A40);
              uint64_t v115 = v244;
              sub_1000BF710((uint64_t)isa, v244, (uint64_t *)&unk_100909A40);
              if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v84 + 48))(v115, 1, reserved) == 1)
              {
                Class v116 = 0;
              }
              else
              {
                Class v116 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, void *))(v84 + 8))(v115, reserved);
              }
              id v117 = v251;
              [v251 setCreationDate:v116];
LABEL_40:

              sub_1000966BC((uint64_t)isa, (uint64_t *)&unk_100909A40);
              goto LABEL_41;
            }
            if (v112 == 0xD000000000000010 && v113 == 0x800000010077DA00
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              Class isa = v240;
              sub_1000BF710(v250, (uint64_t)v240, (uint64_t *)&unk_100909A40);
              uint64_t v123 = v239;
              sub_1000BF710((uint64_t)isa, v239, (uint64_t *)&unk_100909A40);
              if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v84 + 48))(v123, 1, reserved) == 1)
              {
                Class v116 = 0;
              }
              else
              {
                Class v116 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, void *))(v84 + 8))(v123, reserved);
              }
              id v117 = v251;
              [v251 setLastModifiedDate:v116];
              goto LABEL_40;
            }
            if (v112 == 0xD000000000000025 && v113 == 0x80000001007C6C50
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              Class isa = v237;
              sub_1000BF710(v250, (uint64_t)v237, (uint64_t *)&unk_100909A40);
              uint64_t v132 = v236;
              sub_1000BF710((uint64_t)isa, v236, (uint64_t *)&unk_100909A40);
              if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v84 + 48))(v132, 1, reserved) == 1)
              {
                Class v116 = 0;
              }
              else
              {
                Class v116 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, void *))(v84 + 8))(v132, reserved);
              }
              id v117 = v251;
              [v251 setMostRecentPublicLinkUpdateRequestDate:v116];
              goto LABEL_40;
            }
            if (v112 == 0xD00000000000001BLL && v113 == 0x80000001007C6C80
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              sub_1000BF710(v250, v235, (uint64_t *)&unk_100909A40);
              sub_100094134(&qword_10090A830);
              if (swift_dynamicCast())
              {
                uint64_t v135 = v254;
                unint64_t v136 = v255;
                id v117 = v251;
                if (v255 >> 60 == 15)
                {
                  Class v137 = 0;
                }
                else
                {
                  sub_100097E38(v254, v255);
                  Class v137 = Data._bridgeToObjectiveC()().super.isa;
                  sub_100097F20(v135, v136);
                }
                [v117 setPublicLinkConfigurationData:v137];

                sub_100097F20(v135, v136);
              }
              else
              {
                id v117 = v251;
              }
LABEL_41:
              id v118 = [v117 createResolutionTokenMapIfNecessary];
              dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
              if (v119)
              {
                NSString v120 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                [v118 updateForKey:v120];

                goto LABEL_43;
              }
              goto LABEL_165;
            }
            if (v112 == 0xD000000000000016 && v113 == 0x80000001007C6CA0
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              Class isa = v234;
              sub_1000BF710(v250, (uint64_t)v234, (uint64_t *)&unk_100909A40);
              uint64_t v140 = v233;
              sub_1000BF710((uint64_t)isa, v233, (uint64_t *)&unk_100909A40);
              if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v84 + 48))(v140, 1, reserved) == 1)
              {
                Class v116 = 0;
              }
              else
              {
                Class v116 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, void *))(v84 + 8))(v140, reserved);
              }
              id v117 = v251;
              [v251 setPublicLinkCreationDate:v116];
              goto LABEL_40;
            }
            if (v112 == 0xD000000000000018 && v113 == 0x80000001007C61A0
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              Class isa = v232;
              sub_1000BF710(v250, (uint64_t)v232, (uint64_t *)&unk_100909A40);
              uint64_t v143 = v231;
              sub_1000BF710((uint64_t)isa, v231, (uint64_t *)&unk_100909A40);
              if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v84 + 48))(v143, 1, reserved) == 1)
              {
                Class v116 = 0;
              }
              else
              {
                Class v116 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, void *))(v84 + 8))(v143, reserved);
              }
              id v117 = v251;
              [v251 setPublicLinkExpirationDate:v116];
              goto LABEL_40;
            }
            if (v112 == 0xD00000000000001ALL && v113 == 0x80000001007C6CC0
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              uint64_t v146 = v230;
              sub_1000BF710(v250, v230, (uint64_t *)&unk_100909A40);
              uint64_t v147 = v146;
              uint64_t v148 = v228;
              sub_1000BF710(v147, v228, (uint64_t *)&unk_100909A40);
              if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v84 + 48))(v148, 1, reserved) == 1)
              {
                Class v149 = 0;
              }
              else
              {
                Class v149 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, void *))(v84 + 8))(v148, reserved);
              }
              id v117 = v251;
              [v251 setPublicLinkLastModifiedDate:v149];

              char v164 = (uint64_t *)&unk_100909A40;
              p_uint64_t baseURL = (NSURL **)&v256;
LABEL_137:
              sub_1000966BC((uint64_t)*(p_baseURL - 32), v164);
              unint64_t v109 = v245._baseURL;
              uint64_t v90 = v249;
              goto LABEL_41;
            }
            if (v112 == 0xD000000000000011 && v113 == 0x80000001007C6170
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              sub_1000BF710(v250, v223, (uint64_t *)&unk_100909A40);
              char v166 = swift_dynamicCast();
              unint64_t v167 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v227 + 56);
              v227 += 56;
              if (v166)
              {
                id v168 = v226;
                v167(v226, 0, 1, v225);
                uint64_t v169 = (uint64_t)v168;
                uint64_t v170 = v224;
                sub_100096408(v169, v224, (uint64_t *)&unk_100909E50);
                uint64_t v171 = v170;
                uint64_t v172 = v221;
                sub_1000BF710(v171, v221, (uint64_t *)&unk_100909E50);
                uint64_t v173 = type metadata accessor for UUID();
                uint64_t v174 = *(void *)(v173 - 8);
                int v175 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v174 + 48))(v172, 1, v173);
                Class v176 = 0;
                if (v175 != 1)
                {
                  uint64_t v177 = v221;
                  Class v176 = UUID._bridgeToObjectiveC()().super.isa;
                  (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v177, v173);
                }
                id v117 = v251;
                [v251 setPublicLinkURLUUID:v176];

                char v164 = (uint64_t *)&unk_100909E50;
                p_uint64_t baseURL = &v252;
                goto LABEL_137;
              }
              uint64_t v178 = (uint64_t)v226;
              v167(v226, 1, 1, v225);
              unsigned int v179 = &qword_10090D2B0;
            }
            else
            {
              if (v112 == 0x694C656372756F73 && v113 == 0xEF4C525544497473)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                char v180 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v180 & 1) == 0)
                {
                  if (qword_1009074E0 != -1) {
                    swift_once();
                  }
                  uint64_t v194 = v218;
                  uint64_t v195 = sub_10008E2DC(v218, (uint64_t)qword_100917930);
                  (*(void (**)(char *, uint64_t, uint64_t))(v217 + 16))(v212, v195, v194);
                  id v196 = v251;
                  swift_retain_n();
                  id v197 = v196;
                  uint64_t v198 = Logger.logObject.getter();
                  os_log_type_t v199 = static os_log_type_t.fault.getter();
                  if (os_log_type_enabled(v198, v199))
                  {
                    uint64_t v200 = swift_slowAlloc();
                    uint64_t baseURL = swift_slowAlloc();
                    *(_DWORD *)uint64_t v200 = 136446466;
                    id v201 = [v197 remObjectID];
                    uint64_t v254 = (uint64_t)v201;
                    sub_100094134((uint64_t *)&unk_100914BC0);
                    uint64_t v202 = Optional.descriptionOrNil.getter();
                    unint64_t v204 = v203;

                    uint64_t v254 = sub_1000C51B8(v202, v204, &baseURL);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();

                    swift_bridgeObjectRelease();
                    *(_WORD *)(v200 + 12) = 2082;
                    uint64_t v205 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
                    if (!v206) {
                      goto LABEL_169;
                    }
                    uint64_t v254 = sub_1000C51B8(v205, v206, &baseURL);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, v198, v199, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported propertyKeyPath {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v200, 0x16u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {

                    swift_release_n();
                  }

                  (*(void (**)(char *, uint64_t))(v217 + 8))(v212, v218);
                  uint64_t v121 = v249;
                  return sub_1000966BC(v121, &qword_10090D2B8);
                }
              }
              sub_1000BF710(v250, v214, (uint64_t *)&unk_100909A40);
              char v181 = swift_dynamicCast();
              unsigned int v182 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v222 + 56);
              v222 += 56;
              if (v181)
              {
                id v183 = v220;
                v182(v220, 0, 1, v219);
                uint64_t v184 = (uint64_t)v183;
                uint64_t v185 = v215;
                sub_100096408(v184, v215, (uint64_t *)&unk_100909E40);
                uint64_t v186 = v185;
                uint64_t v187 = v213;
                sub_1000BF710(v186, v213, (uint64_t *)&unk_100909E40);
                uint64_t v188 = type metadata accessor for URL();
                uint64_t v189 = *(void *)(v188 - 8);
                int v190 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v189 + 48))(v187, 1, v188);
                uint64_t v191 = 0;
                if (v190 != 1)
                {
                  uint64_t v192 = v213;
                  URL._bridgeToObjectiveC()(&v245);
                  uint64_t v191 = v193;
                  (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v192, v188);
                }
                id v117 = v251;
                [v251 setSourceListIDURL:v191];

                char v164 = (uint64_t *)&unk_100909E40;
                p_uint64_t baseURL = &v245._baseURL;
                goto LABEL_137;
              }
              uint64_t v178 = (uint64_t)v220;
              v182(v220, 1, 1, v219);
              unsigned int v179 = &qword_10090D2C8;
            }
            sub_1000966BC(v178, v179);
            unint64_t v109 = v245._baseURL;
            id v117 = v251;
            uint64_t v90 = v249;
            goto LABEL_41;
          }
          (*(void (**)(uint64_t, void *))(v84 + 8))(v108, v105);
          reserved = v105;
          uint64_t v90 = v249;
        }
        sub_1000966BC(v103, (uint64_t *)&unk_10091C320);
        sub_1000966BC((uint64_t)v245._urlString, (uint64_t *)&unk_100909A40);
        uint64_t v101 = &qword_10090D2B8;
      }
      sub_1000966BC((uint64_t)v75, &qword_10090D2B8);
      sub_1000966BC(v91, (uint64_t *)&unk_100909A40);
    }
    sub_1000966BC((uint64_t)v19, v101);
    unint64_t v109 = v245._baseURL;
    goto LABEL_32;
  }
  reserved = v245._reserved;
  uint64_t v91 = v248;
  if (v80 == 0xD00000000000001ALL && v81 == 0x80000001007C6CC0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v144 = [v251 publicLinkLastModifiedDate];
    Class v33 = v229;
    if (v144)
    {
      id v145 = v144;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, void *))(v84 + 56))(v33, 0, 1, reserved);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, void *))(v84 + 56))(v229, 1, 1, reserved);
    }
    uint64_t v90 = v249;
    goto LABEL_16;
  }
  if (v80 == 0xD000000000000011 && v81 == 0x80000001007C6170
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v80 == 0x694C656372756F73 && v81 == 0xEF4C525544497473)
  {
LABEL_69:
    swift_bridgeObjectRelease();
LABEL_70:
    id v133 = v251;
    id v134 = v245._baseURL;
    return sub_1003FAC10(v133, (uint64_t)v134);
  }
  char v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v150) {
    goto LABEL_70;
  }
  if (qword_1009074E0 != -1) {
    swift_once();
  }
  uint64_t v151 = v218;
  uint64_t v152 = sub_10008E2DC(v218, (uint64_t)qword_100917930);
  (*(void (**)(char *, uint64_t, uint64_t))(v217 + 16))(v216, v152, v151);
  id v153 = v251;
  swift_retain_n();
  id v154 = v153;
  unint64_t v155 = Logger.logObject.getter();
  os_log_type_t v156 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v155, v156))
  {
    uint64_t v157 = swift_slowAlloc();
    uint64_t baseURL = swift_slowAlloc();
    *(_DWORD *)uint64_t v157 = 136446466;
    id v158 = [v154 remObjectID];
    uint64_t v254 = (uint64_t)v158;
    sub_100094134((uint64_t *)&unk_100914BC0);
    uint64_t v159 = Optional.descriptionOrNil.getter();
    unint64_t v161 = v160;

    uint64_t v254 = sub_1000C51B8(v159, v161, &baseURL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v157 + 12) = 2082;
    uint64_t v162 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v163) {
      goto LABEL_169;
    }
    uint64_t v254 = sub_1000C51B8(v162, v163, &baseURL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v155, v156, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported key path {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v157, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v217 + 8))(v216, v218);
}

uint64_t sub_100161A84(NSURL *a1, uint64_t a2)
{
  uint64_t v295 = a2;
  uint64_t v285 = type metadata accessor for Logger();
  uint64_t v284 = *(void *)(v285 - 8);
  __chkstk_darwin(v285);
  uint64_t v283 = (char *)&v239 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v271 = (char *)&v239 - v5;
  uint64_t v6 = sub_100094134(&qword_10090D2C8);
  __chkstk_darwin(v6 - 8);
  uint64_t v268 = (char *)&v239 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v267 = sub_100094134((uint64_t *)&unk_100909E40);
  uint64_t v266 = *(void *)(v267 - 8);
  __chkstk_darwin(v267);
  uint64_t v269 = (uint64_t)&v239 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v270 = (uint64_t)&v239 - v10;
  uint64_t v11 = sub_100094134(&qword_10090D2B8);
  __chkstk_darwin(v11 - 8);
  uint64_t v265 = (char *)&v239 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v262 = (char *)&v239 - v14;
  __chkstk_darwin(v15);
  uint64_t v273 = (char *)&v239 - v16;
  __chkstk_darwin(v17);
  char v279 = (char *)&v239 - v18;
  __chkstk_darwin(v19);
  uint64_t v286 = (char *)&v239 - v20;
  __chkstk_darwin(v21);
  uint64_t v291 = (char *)&v239 - v22;
  uint64_t v292 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v296 = *(void *)(v292 - 8);
  __chkstk_darwin(v292);
  uint64_t v263 = (uint64_t)&v239 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v264 = (uint64_t)&v239 - v25;
  __chkstk_darwin(v26);
  uint64_t v260 = (uint64_t)&v239 - v27;
  __chkstk_darwin(v28);
  uint64_t v261 = (uint64_t)&v239 - v29;
  __chkstk_darwin(v30);
  uint64_t v258 = (uint64_t)&v239 - v31;
  __chkstk_darwin(v32);
  uint64_t v259 = (uint64_t)&v239 - v33;
  __chkstk_darwin(v34);
  uint64_t v275 = (uint64_t)&v239 - v35;
  __chkstk_darwin(v36);
  uint64_t v277 = (uint64_t)&v239 - v37;
  __chkstk_darwin(v38);
  uint64_t v280 = (uint64_t)&v239 - v39;
  __chkstk_darwin(v40);
  uint64_t v282 = (uint64_t)&v239 - v41;
  __chkstk_darwin(v42);
  uint64_t v287 = (uint64_t)&v239 - v43;
  __chkstk_darwin(v44);
  uint64_t v288 = (uint64_t)&v239 - v45;
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v293 = *(void *)(v46 - 8);
  uint64_t v294 = v46;
  __chkstk_darwin(v46);
  uint64_t v278 = (char *)&v239 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v48);
  uint64_t v290 = (uint64_t)&v239 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v297 = *(void *)(v50 - 8);
  uint64_t v298 = v50;
  __chkstk_darwin(v50);
  uint64_t v52 = (char *)&v239 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  uint64_t v256 = (uint64_t)&v239 - v54;
  __chkstk_darwin(v55);
  uint64_t v255 = (uint64_t)&v239 - v56;
  __chkstk_darwin(v57);
  uint64_t v257 = (uint64_t)&v239 - v58;
  __chkstk_darwin(v59);
  uint64_t v254 = (uint64_t)&v239 - v60;
  __chkstk_darwin(v61);
  uint64_t v253 = (uint64_t)&v239 - v62;
  __chkstk_darwin(v63);
  uint64_t v272 = (uint64_t)&v239 - v64;
  __chkstk_darwin(v65);
  uint64_t v274 = (uint64_t)&v239 - v66;
  __chkstk_darwin(v67);
  uint64_t v276 = (uint64_t)&v239 - v68;
  __chkstk_darwin(v69);
  uint64_t v281 = (uint64_t)&v239 - v70;
  __chkstk_darwin(v71);
  uint64_t v289 = (uint64_t)&v239 - v72;
  __chkstk_darwin(v73);
  id v75 = (char *)&v239 - v74;
  __chkstk_darwin(v76);
  uint64_t v78 = (char *)&v239 - v77;
  uint64_t v79 = sub_100094134(&qword_10090D2F8);
  __chkstk_darwin(v79);
  uint64_t v81 = (char *)&v239 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_100094134(&qword_10090D2B0);
  __chkstk_darwin(v82 - 8);
  uint64_t v84 = (char *)&v239 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v85);
  uint64_t v87 = (char *)&v239 - v86;
  __chkstk_darwin(v88);
  uint64_t v299 = (uint64_t)&v239 - v89;
  uint64_t v300 = a1;
  uint64_t v90 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v91) {
    goto LABEL_126;
  }
  uint64_t v92 = v90;
  uint64_t v93 = v91;
  if (v90 == 0x6E6F697461657263 && v91 == 0xEC00000065746144) {
    goto LABEL_23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v92 == 0xD000000000000010 && v93 == 0x800000010077DA00)
  {
    goto LABEL_23;
  }
  unint64_t v251 = (unint64_t)&unk_10077DA00;
  unint64_t v252 = 0xD000000000000010;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v92 == 0xD000000000000025 && v93 == 0x80000001007C6C50)
  {
    goto LABEL_23;
  }
  unint64_t v249 = (unint64_t)"sectionIDsOrderingAsData";
  unint64_t v250 = 0xD000000000000025;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v92 == 0xD00000000000001BLL && v93 == 0x80000001007C6C80)
  {
    goto LABEL_23;
  }
  unint64_t v247 = (unint64_t)"LinkUpdateRequestDate";
  unint64_t v248 = 0xD00000000000001BLL;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v92 == 0xD000000000000016 && v93 == 0x80000001007C6CA0)
  {
    goto LABEL_23;
  }
  unint64_t v245 = (unint64_t)"publicLinkConfigurationData";
  unint64_t v246 = 0xD000000000000016;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v92 == 0xD000000000000018 && v93 == 0x80000001007C61A0)
  {
    goto LABEL_23;
  }
  unint64_t v243 = (unint64_t)"D";
  unint64_t v244 = 0xD000000000000018;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v92 == 0xD00000000000001ALL && v93 == 0x80000001007C6CC0)
  {
    goto LABEL_23;
  }
  unint64_t v241 = (unint64_t)"publicLinkCreationDate";
  unint64_t v242 = 0xD00000000000001ALL;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_23;
  }
  unint64_t v240 = 0xD000000000000011;
  if (v92 == 0xD000000000000011 && v93 == 0x80000001007C6170
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v97 = [(objc_class *)v301.super.isa publicLinkURLUUID];
    if (v97)
    {
      uint64_t v98 = v97;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v52, 0, 1, v294);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v293 + 56))(v52, 1, 1, v294);
    }
    uint64_t v99 = v299;
    sub_100096408((uint64_t)v52, v299, (uint64_t *)&unk_100909E50);
    uint64_t v100 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v297 + 56);
    uint64_t v101 = v99;
    uint64_t v102 = v298;
    v100(v101, 0, 1, v298);
    sub_1000BF710(v295, (uint64_t)v87, (uint64_t *)&unk_100909E50);
    v100((uint64_t)v87, 0, 1, v102);
    uint64_t v103 = (uint64_t)&v81[*(int *)(v79 + 48)];
    sub_1000BF710(v299, (uint64_t)v81, &qword_10090D2B0);
    sub_1000BF710((uint64_t)v87, v103, &qword_10090D2B0);
    uint64_t v104 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v297 + 48);
    if (v104((uint64_t)v81, 1, v102) == 1)
    {
      sub_1000966BC((uint64_t)v87, &qword_10090D2B0);
      if (v104(v103, 1, v298) == 1)
      {
LABEL_35:
        sub_1000966BC((uint64_t)v81, &qword_10090D2B0);
        return sub_1000966BC(v299, &qword_10090D2B0);
      }
      uint64_t v48 = (uint64_t)&qword_10090D2F8;
    }
    else
    {
      sub_1000BF710((uint64_t)v81, (uint64_t)v84, &qword_10090D2B0);
      if (v104(v103, 1, v298) == 1)
      {
        uint64_t v48 = (uint64_t)&qword_10090D2F8;
      }
      else
      {
        sub_100096408(v103, (uint64_t)v78, (uint64_t *)&unk_100909E50);
        uint64_t v119 = v290;
        uint64_t v120 = v290 + *(int *)(v48 + 48);
        sub_1000BF710((uint64_t)v84, v290, (uint64_t *)&unk_100909E50);
        sub_1000BF710((uint64_t)v78, v120, (uint64_t *)&unk_100909E50);
        uint64_t v121 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v293 + 48);
        if (v121(v119, 1, v294) == 1)
        {
          if (v121(v120, 1, v294) == 1)
          {
            sub_1000966BC(v290, (uint64_t *)&unk_100909E50);
            sub_1000966BC((uint64_t)v78, (uint64_t *)&unk_100909E50);
            sub_1000966BC((uint64_t)v87, &qword_10090D2B0);
            sub_1000966BC((uint64_t)v84, (uint64_t *)&unk_100909E50);
            goto LABEL_35;
          }
        }
        else
        {
          sub_1000BF710(v290, (uint64_t)v75, (uint64_t *)&unk_100909E50);
          if (v121(v120, 1, v294) != 1)
          {
            uint64_t v153 = v293;
            uint64_t v154 = v294;
            unint64_t v155 = v278;
            (*(void (**)(char *, uint64_t, uint64_t))(v293 + 32))(v278, v120, v294);
            sub_10016A8C4((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v48 = dispatch thunk of static Equatable.== infix(_:_:)();
            os_log_type_t v156 = *(void (**)(char *, uint64_t))(v153 + 8);
            v156(v155, v154);
            v156(v75, v154);
            sub_1000966BC(v290, (uint64_t *)&unk_100909E50);
            sub_1000966BC((uint64_t)v78, (uint64_t *)&unk_100909E50);
            sub_1000966BC((uint64_t)v87, &qword_10090D2B0);
            sub_1000966BC((uint64_t)v84, (uint64_t *)&unk_100909E50);
            sub_1000966BC((uint64_t)v81, &qword_10090D2B0);
            if (v48) {
              return sub_1000966BC(v299, &qword_10090D2B0);
            }
LABEL_55:
            uint64_t v122 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
            if (!v123) {
              goto LABEL_126;
            }
            p_clients = (void **)v122;
            uint64_t v48 = v123;
            if (v122 == 0x6E6F697461657263 && v123 == 0xEC00000065746144
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              sub_1000BF710(v295, v289, (uint64_t *)&unk_100909E50);
              char v125 = swift_dynamicCast();
              unint64_t v126 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v296 + 56);
              v296 += 56;
              if (v125)
              {
                id v127 = v291;
                v126(v291, 0, 1, v292);
                uint64_t v128 = (uint64_t)v127;
                uint64_t v129 = v288;
                sub_100096408(v128, v288, (uint64_t *)&unk_100909A40);
                uint64_t v130 = v129;
                uint64_t v131 = v287;
                sub_1000BF710(v130, v287, (uint64_t *)&unk_100909A40);
                uint64_t v132 = type metadata accessor for Date();
                uint64_t v133 = *(void *)(v132 - 8);
                int v134 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132);
                Class isa = 0;
                if (v134 != 1)
                {
                  uint64_t v136 = v287;
                  Class isa = Date._bridgeToObjectiveC()().super.isa;
                  (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v136, v132);
                }
                [(objc_class *)v301.super.isa setCreationDate:isa];

                Class v137 = (uint64_t *)&unk_100909A40;
                uint64_t v138 = v288;
                goto LABEL_66;
              }
              int v139 = v291;
            }
            else if (p_clients == (void **)v252 && v48 == (v251 | 0x8000000000000000) {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              sub_1000BF710(v295, v281, (uint64_t *)&unk_100909E50);
              char v142 = swift_dynamicCast();
              unint64_t v126 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v296 + 56);
              v296 += 56;
              if (v142)
              {
                uint64_t v143 = v286;
                v126(v286, 0, 1, v292);
                uint64_t v144 = (uint64_t)v143;
                uint64_t v145 = v282;
                sub_100096408(v144, v282, (uint64_t *)&unk_100909A40);
                uint64_t v146 = v145;
                uint64_t v147 = v280;
                sub_1000BF710(v146, v280, (uint64_t *)&unk_100909A40);
                uint64_t v148 = type metadata accessor for Date();
                uint64_t v149 = *(void *)(v148 - 8);
                int v150 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v149 + 48))(v147, 1, v148);
                Class v151 = 0;
                if (v150 != 1)
                {
                  uint64_t v152 = v280;
                  Class v151 = Date._bridgeToObjectiveC()().super.isa;
                  (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v152, v148);
                }
                [(objc_class *)v301.super.isa setLastModifiedDate:v151];

                Class v137 = (uint64_t *)&unk_100909A40;
                uint64_t v138 = v282;
                goto LABEL_66;
              }
              int v139 = v286;
            }
            else
            {
              if (p_clients == (void **)v250 && v48 == (v249 | 0x8000000000000000)
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                sub_1000BF710(v295, v276, (uint64_t *)&unk_100909E50);
                char v157 = swift_dynamicCast();
                unint64_t v126 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v296 + 56);
                v296 += 56;
                p_reserved = (void **)&v302;
                if (v157)
                {
                  uint64_t v159 = v279;
                  v126(v279, 0, 1, v292);
                  uint64_t v160 = (uint64_t)v159;
                  uint64_t v161 = v277;
                  sub_100096408(v160, v277, (uint64_t *)&unk_100909A40);
                  uint64_t v162 = v161;
                  uint64_t v163 = v275;
                  sub_1000BF710(v162, v275, (uint64_t *)&unk_100909A40);
                  uint64_t v164 = type metadata accessor for Date();
                  uint64_t v165 = *(void *)(v164 - 8);
                  int v166 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v165 + 48))(v163, 1, v164);
                  Class v167 = 0;
                  if (v166 != 1)
                  {
                    uint64_t v168 = v275;
                    Class v167 = Date._bridgeToObjectiveC()().super.isa;
                    (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v168, v164);
                  }
                  [(objc_class *)v301.super.isa setMostRecentPublicLinkUpdateRequestDate:v167];

                  Class v137 = (uint64_t *)&unk_100909A40;
                  uint64_t v138 = v277;
                  goto LABEL_66;
                }
              }
              else
              {
                if (p_clients == (void **)v248 && v48 == (v247 | 0x8000000000000000)
                  || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  sub_1000BF710(v295, v274, (uint64_t *)&unk_100909E50);
                  sub_100094134(&qword_10090A830);
                  if (swift_dynamicCast())
                  {
                    clients = v301._clients;
                    reserved = v301._reserved;
                    if ((unint64_t)v301._reserved >> 60 == 15)
                    {
                      Class v171 = 0;
                    }
                    else
                    {
                      sub_100097E38((uint64_t)v301._clients, (unint64_t)v301._reserved);
                      Class v171 = Data._bridgeToObjectiveC()().super.isa;
                      sub_100097F20((uint64_t)clients, (unint64_t)reserved);
                    }
                    [(objc_class *)v301.super.isa setPublicLinkConfigurationData:v171];

                    sub_100097F20((uint64_t)clients, (unint64_t)reserved);
                  }
                  goto LABEL_67;
                }
                if (p_clients == (void **)v246 && v48 == (v245 | 0x8000000000000000)
                  || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  sub_1000BF710(v295, v272, (uint64_t *)&unk_100909E50);
                  char v172 = swift_dynamicCast();
                  unint64_t v126 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v296 + 56);
                  v296 += 56;
                  p_reserved = &v301._reserved;
                  if (v172)
                  {
                    uint64_t v173 = v273;
                    v126(v273, 0, 1, v292);
                    uint64_t v174 = (uint64_t)v173;
                    uint64_t v175 = v259;
                    sub_100096408(v174, v259, (uint64_t *)&unk_100909A40);
                    uint64_t v176 = v175;
                    uint64_t v177 = v258;
                    sub_1000BF710(v176, v258, (uint64_t *)&unk_100909A40);
                    uint64_t v178 = type metadata accessor for Date();
                    uint64_t v179 = *(void *)(v178 - 8);
                    int v180 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 48))(v177, 1, v178);
                    Class v181 = 0;
                    if (v180 != 1)
                    {
                      uint64_t v182 = v258;
                      Class v181 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v182, v178);
                    }
                    [(objc_class *)v301.super.isa setPublicLinkCreationDate:v181];

                    Class v137 = (uint64_t *)&unk_100909A40;
                    uint64_t v138 = v259;
                    goto LABEL_66;
                  }
                }
                else if (p_clients == (void **)v244 && v48 == (v243 | 0x8000000000000000) {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  sub_1000BF710(v295, v253, (uint64_t *)&unk_100909E50);
                  char v183 = swift_dynamicCast();
                  unint64_t v126 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v296 + 56);
                  v296 += 56;
                  p_reserved = (void **)&v294;
                  if (v183)
                  {
                    uint64_t v184 = v262;
                    v126(v262, 0, 1, v292);
                    uint64_t v185 = (uint64_t)v184;
                    uint64_t v186 = v261;
                    sub_100096408(v185, v261, (uint64_t *)&unk_100909A40);
                    uint64_t v187 = v186;
                    uint64_t v188 = v260;
                    sub_1000BF710(v187, v260, (uint64_t *)&unk_100909A40);
                    uint64_t v189 = type metadata accessor for Date();
                    uint64_t v190 = *(void *)(v189 - 8);
                    int v191 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v190 + 48))(v188, 1, v189);
                    Class v192 = 0;
                    if (v191 != 1)
                    {
                      uint64_t v193 = v260;
                      Class v192 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v193, v189);
                    }
                    [(objc_class *)v301.super.isa setPublicLinkExpirationDate:v192];

                    Class v137 = (uint64_t *)&unk_100909A40;
                    uint64_t v138 = v261;
                    goto LABEL_66;
                  }
                }
                else
                {
                  if ((p_clients != (void **)v242 || v48 != (v241 | 0x8000000000000000))
                    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  {
                    if ((p_clients != (void **)v240 || v48 != 0x80000001007C6170)
                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                    {
                      goto LABEL_128;
                    }
                    swift_bridgeObjectRelease();
                    uint64_t v205 = v257;
                    sub_1000BF710(v295, v257, (uint64_t *)&unk_100909E50);
                    uint64_t v206 = v205;
                    uint64_t v207 = v255;
                    sub_1000BF710(v206, v255, (uint64_t *)&unk_100909E50);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v293 + 48))(v207, 1, v294) == 1)
                    {
                      Class v208 = 0;
                    }
                    else
                    {
                      uint64_t v209 = v255;
                      Class v208 = UUID._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v293 + 8))(v209, v294);
                    }
                    [(objc_class *)v301.super.isa setPublicLinkURLUUID:v208];

                    Class v137 = (uint64_t *)&unk_100909E50;
                    uint64_t v138 = v257;
                    goto LABEL_66;
                  }
                  swift_bridgeObjectRelease();
                  sub_1000BF710(v295, v254, (uint64_t *)&unk_100909E50);
                  char v194 = swift_dynamicCast();
                  unint64_t v126 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v296 + 56);
                  v296 += 56;
                  p_reserved = (void **)&v297;
                  if (v194)
                  {
                    uint64_t v195 = v265;
                    v126(v265, 0, 1, v292);
                    uint64_t v196 = (uint64_t)v195;
                    uint64_t v197 = v264;
                    sub_100096408(v196, v264, (uint64_t *)&unk_100909A40);
                    uint64_t v198 = v197;
                    uint64_t v199 = v263;
                    sub_1000BF710(v198, v263, (uint64_t *)&unk_100909A40);
                    uint64_t v200 = type metadata accessor for Date();
                    uint64_t v201 = *(void *)(v200 - 8);
                    int v202 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v201 + 48))(v199, 1, v200);
                    Class v203 = 0;
                    if (v202 != 1)
                    {
                      uint64_t v204 = v263;
                      Class v203 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v201 + 8))(v204, v200);
                    }
                    [(objc_class *)v301.super.isa setPublicLinkLastModifiedDate:v203];

                    Class v137 = (uint64_t *)&unk_100909A40;
                    uint64_t v138 = v264;
                    goto LABEL_66;
                  }
                }
              }
              int v139 = (char *)*(p_reserved - 32);
            }
            v126(v139, 1, 1, v292);
            Class v137 = &qword_10090D2B8;
LABEL_65:
            uint64_t v138 = (uint64_t)v139;
LABEL_66:
            while (1)
            {
              sub_1000966BC(v138, v137);
LABEL_67:
              uint64_t v48 = (uint64_t)[(objc_class *)v301.super.isa createResolutionTokenMapIfNecessary];
              dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
              if (v140) {
                break;
              }
LABEL_126:
              v301._clients = 0;
              v301._reserved = (void *)0xE000000000000000;
              p_clients = &v301._clients;
              _StringGuts.grow(_:)(46);
              v210._object = (void *)0x80000001007CAF70;
              v210._countAndFlagsBits = 0xD00000000000002CLL;
              String.append(_:)(v210);
              v301._uint64_t baseURL = v300;
              sub_100094134(&qword_10090FF80);
              while (1)
              {
                _print_unlocked<A, B>(_:_:)();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_128:
                if (p_clients == (void **)0x694C656372756F73 && v48 == 0xEF4C525544497473) {
                  break;
                }
                char v211 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v211) {
                  goto LABEL_132;
                }
                if (qword_1009074E0 != -1) {
                  swift_once();
                }
                uint64_t v225 = v285;
                uint64_t v226 = sub_10008E2DC(v285, (uint64_t)qword_100917930);
                (*(void (**)(char *, uint64_t, uint64_t))(v284 + 16))(v271, v226, v225);
                uint64_t v227 = v301.super.isa;
                swift_retain_n();
                uint64_t v228 = v227;
                id v229 = Logger.logObject.getter();
                os_log_type_t v230 = static os_log_type_t.fault.getter();
                if (!os_log_type_enabled(v229, v230))
                {

                  swift_release_n();
                  goto LABEL_143;
                }
                uint64_t v231 = swift_slowAlloc();
                v301._uint64_t baseURL = (NSURL *)swift_slowAlloc();
                *(_DWORD *)uint64_t v231 = 136446466;
                id v232 = [(objc_class *)v228 remObjectID];
                v301._clients = v232;
                sub_100094134((uint64_t *)&unk_100914BC0);
                uint64_t v233 = Optional.descriptionOrNil.getter();
                unint64_t v235 = v234;

                v301._clients = (void *)sub_1000C51B8(v233, v235, (uint64_t *)&v301._baseURL);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v231 + 12) = 2082;
                uint64_t v236 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
                if (v237)
                {
                  v301._clients = (void *)sub_1000C51B8(v236, v237, (uint64_t *)&v301._baseURL);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v229, v230, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported propertyKeyPath {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v231, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
LABEL_143:

                  (*(void (**)(char *, uint64_t))(v284 + 8))(v271, v285);
                  return sub_1000966BC(v299, &qword_10090D2B0);
                }
LABEL_144:
                uint64_t v48 = (uint64_t)v300;
                swift_release();
                v301._clients = 0;
                v301._reserved = (void *)0xE000000000000000;
                p_clients = &v301._clients;
                _StringGuts.grow(_:)(46);
                v238._object = (void *)0x80000001007CAF70;
                v238._countAndFlagsBits = 0xD00000000000002CLL;
                String.append(_:)(v238);
                v301._urlString = (NSString *)v48;
                sub_100094134(&qword_10090FF80);
              }
              swift_bridgeObjectRelease();
LABEL_132:
              sub_1000BF710(v295, v256, (uint64_t *)&unk_100909E50);
              char v212 = swift_dynamicCast();
              uint64_t v213 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v266 + 56);
              v266 += 56;
              if ((v212 & 1) == 0)
              {
                int v139 = v268;
                v213(v268, 1, 1, v267);
                Class v137 = &qword_10090D2C8;
                goto LABEL_65;
              }
              uint64_t v214 = v268;
              v213(v268, 0, 1, v267);
              uint64_t v215 = (uint64_t)v214;
              uint64_t v216 = v270;
              sub_100096408(v215, v270, (uint64_t *)&unk_100909E40);
              uint64_t v217 = v216;
              uint64_t v218 = v269;
              sub_1000BF710(v217, v269, (uint64_t *)&unk_100909E40);
              uint64_t v219 = type metadata accessor for URL();
              uint64_t v220 = *(void *)(v219 - 8);
              int v221 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v220 + 48))(v218, 1, v219);
              uint64_t v222 = 0;
              if (v221 != 1)
              {
                uint64_t v223 = v269;
                URL._bridgeToObjectiveC()(&v301);
                uint64_t v222 = v224;
                (*(void (**)(uint64_t, uint64_t))(v220 + 8))(v223, v219);
              }
              [(objc_class *)v301.super.isa setSourceListIDURL:v222];

              Class v137 = (uint64_t *)&unk_100909E40;
              uint64_t v138 = v270;
            }
            NSString v141 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [(id)v48 updateForKey:v141];

            return sub_1000966BC(v299, &qword_10090D2B0);
          }
          (*(void (**)(char *, uint64_t))(v293 + 8))(v75, v294);
        }
        sub_1000966BC(v290, (uint64_t *)&unk_10090B4C0);
        sub_1000966BC((uint64_t)v78, (uint64_t *)&unk_100909E50);
        uint64_t v48 = (uint64_t)&qword_10090D2B0;
      }
      sub_1000966BC((uint64_t)v87, &qword_10090D2B0);
      sub_1000966BC((uint64_t)v84, (uint64_t *)&unk_100909E50);
    }
    sub_1000966BC((uint64_t)v81, (uint64_t *)v48);
    goto LABEL_55;
  }
  if (v92 == 0x694C656372756F73 && v93 == 0xEF4C525544497473)
  {
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    uint64_t v95 = (uint64_t)v300;
    Class v94 = v301.super.isa;
    return sub_1003FAC10(v94, v95);
  }
  char v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v105) {
    goto LABEL_24;
  }
  if (qword_1009074E0 != -1) {
    swift_once();
  }
  uint64_t v106 = v285;
  uint64_t v107 = sub_10008E2DC(v285, (uint64_t)qword_100917930);
  (*(void (**)(char *, uint64_t, uint64_t))(v284 + 16))(v283, v107, v106);
  uint64_t v108 = v301.super.isa;
  swift_retain_n();
  unint64_t v109 = v108;
  uint64_t v110 = Logger.logObject.getter();
  os_log_type_t v111 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v110, v111))
  {
    uint64_t v112 = swift_slowAlloc();
    v301._uint64_t baseURL = (NSURL *)swift_slowAlloc();
    *(_DWORD *)uint64_t v112 = 136446466;
    id v113 = [(objc_class *)v109 remObjectID];
    v301._clients = v113;
    sub_100094134((uint64_t *)&unk_100914BC0);
    uint64_t v114 = Optional.descriptionOrNil.getter();
    unint64_t v116 = v115;

    v301._clients = (void *)sub_1000C51B8(v114, v116, (uint64_t *)&v301._baseURL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v112 + 12) = 2082;
    uint64_t v117 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v118) {
      goto LABEL_144;
    }
    v301._clients = (void *)sub_1000C51B8(v117, v118, (uint64_t *)&v301._baseURL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v110, v111, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported key path {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v112, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v284 + 8))(v283, v285);
}

uint64_t sub_100164064(uint64_t a1, uint64_t a2)
{
  uint64_t v292 = a2;
  uint64_t v3 = (NSString *)type metadata accessor for Logger();
  v290.super.Class isa = (Class)*(v3 - 1);
  v290._urlString = v3;
  __chkstk_darwin(v3);
  uint64_t v289 = (char *)&v240 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v274 = (char *)&v240 - v6;
  uint64_t v7 = sub_100094134(&qword_10090D2B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v271 = (NSURL *)((char *)&v240 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v270 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v269 = *(void *)(v270 - 8);
  __chkstk_darwin(v270);
  uint64_t v272 = (uint64_t)&v240 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v273 = (uint64_t)&v240 - v11;
  uint64_t v12 = sub_100094134(&qword_10090D2B8);
  __chkstk_darwin(v12 - 8);
  uint64_t v268 = (char *)&v240 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v265 = (char *)&v240 - v15;
  __chkstk_darwin(v16);
  uint64_t v262 = (char *)&v240 - v17;
  __chkstk_darwin(v18);
  char v279 = (char *)&v240 - v19;
  __chkstk_darwin(v20);
  uint64_t v284 = (char *)&v240 - v21;
  __chkstk_darwin(v22);
  v290._uint64_t baseURL = (NSURL *)((char *)&v240 - v23);
  v290._clients = (void *)sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v293 = *((void *)v290._clients - 1);
  __chkstk_darwin(v290._clients);
  uint64_t v266 = (uint64_t)&v240 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v267 = (uint64_t)&v240 - v26;
  __chkstk_darwin(v27);
  uint64_t v263 = (uint64_t)&v240 - v28;
  __chkstk_darwin(v29);
  uint64_t v264 = (uint64_t)&v240 - v30;
  __chkstk_darwin(v31);
  uint64_t v260 = (uint64_t)&v240 - v32;
  __chkstk_darwin(v33);
  uint64_t v261 = (uint64_t)&v240 - v34;
  __chkstk_darwin(v35);
  uint64_t v276 = (uint64_t)&v240 - v36;
  __chkstk_darwin(v37);
  uint64_t v277 = (uint64_t)&v240 - v38;
  __chkstk_darwin(v39);
  uint64_t v281 = (uint64_t)&v240 - v40;
  __chkstk_darwin(v41);
  uint64_t v283 = (uint64_t)&v240 - v42;
  __chkstk_darwin(v43);
  uint64_t v285 = (uint64_t)&v240 - v44;
  __chkstk_darwin(v45);
  uint64_t v287 = (uint64_t)&v240 - v46;
  uint64_t v47 = type metadata accessor for URL();
  v290._reserved = *(void **)(v47 - 8);
  uint64_t v291 = v47;
  __chkstk_darwin(v47);
  uint64_t v280 = (char *)&v240 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = (int *)sub_100094134((uint64_t *)&unk_100914BD0);
  __chkstk_darwin(v49);
  uint64_t v288 = (uint64_t)&v240 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_100094134((uint64_t *)&unk_100909E40);
  uint64_t v294 = *(void *)(v51 - 8);
  uint64_t v295 = v51;
  __chkstk_darwin(v51);
  uint64_t v53 = (char *)&v240 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  uint64_t v258 = (uint64_t)&v240 - v55;
  __chkstk_darwin(v56);
  uint64_t v259 = (uint64_t)&v240 - v57;
  __chkstk_darwin(v58);
  uint64_t v257 = (uint64_t)&v240 - v59;
  __chkstk_darwin(v60);
  uint64_t v256 = (uint64_t)&v240 - v61;
  __chkstk_darwin(v62);
  uint64_t v255 = (uint64_t)&v240 - v63;
  __chkstk_darwin(v64);
  uint64_t v254 = (uint64_t)&v240 - v65;
  __chkstk_darwin(v66);
  uint64_t v275 = (uint64_t)&v240 - v67;
  __chkstk_darwin(v68);
  uint64_t v278 = (uint64_t)&v240 - v69;
  __chkstk_darwin(v70);
  uint64_t v282 = (uint64_t)&v240 - v71;
  __chkstk_darwin(v72);
  uint64_t v286 = (uint64_t)&v240 - v73;
  __chkstk_darwin(v74);
  uint64_t v76 = (char *)&v240 - v75;
  __chkstk_darwin(v77);
  uint64_t v79 = (char *)&v240 - v78;
  uint64_t v80 = sub_100094134(&qword_10090D2C0);
  __chkstk_darwin(v80);
  uint64_t v82 = (char *)&v240 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_100094134(&qword_10090D2C8);
  __chkstk_darwin(v83 - 8);
  uint64_t v85 = (char *)&v240 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v86);
  uint64_t v88 = (char *)&v240 - v87;
  __chkstk_darwin(v89);
  uint64_t v296 = (uint64_t)&v240 - v90;
  uint64_t v297 = a1;
  uint64_t v91 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v92) {
    goto LABEL_118;
  }
  uint64_t v93 = v91;
  uint64_t v94 = v92;
  if (v91 == 0x6E6F697461657263 && v92 == 0xEC00000065746144) {
    goto LABEL_26;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v93 == 0xD000000000000010 && v94 == 0x800000010077DA00)
  {
    goto LABEL_26;
  }
  unint64_t v252 = (unint64_t)&unk_10077DA00;
  unint64_t v253 = 0xD000000000000010;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v93 == 0xD000000000000025 && v94 == 0x80000001007C6C50)
  {
    goto LABEL_26;
  }
  unint64_t v250 = (unint64_t)"sectionIDsOrderingAsData";
  unint64_t v251 = 0xD000000000000025;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v93 == 0xD00000000000001BLL && v94 == 0x80000001007C6C80)
  {
    goto LABEL_26;
  }
  unint64_t v248 = (unint64_t)"LinkUpdateRequestDate";
  unint64_t v249 = 0xD00000000000001BLL;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v93 == 0xD000000000000016 && v94 == 0x80000001007C6CA0)
  {
    goto LABEL_26;
  }
  unint64_t v246 = (unint64_t)"publicLinkConfigurationData";
  unint64_t v247 = 0xD000000000000016;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v93 == 0xD000000000000018 && v94 == 0x80000001007C61A0)
  {
    goto LABEL_26;
  }
  if ((unint64_t v244 = (unint64_t)"D",
        unint64_t v245 = 0xD000000000000018,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    || v93 == 0xD00000000000001ALL && v94 == 0x80000001007C6CC0
    || (unint64_t v242 = (unint64_t)"publicLinkCreationDate",
        unint64_t v243 = 0xD00000000000001ALL,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    || (unint64_t v241 = 0xD000000000000011, v93 == 0xD000000000000011) && v94 == 0x80000001007C6170
    || (unint64_t v240 = (unint64_t)"entifier", (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_26:
    swift_bridgeObjectRelease();
    uint64_t v96 = v297;
    id v95 = v298;
    return sub_1003FAC10(v95, v96);
  }
  if (v93 == 0x694C656372756F73 && v94 == 0xEF4C525544497473)
  {
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v98)
  {
LABEL_33:
    id v99 = [v298 sourceListIDURL];
    if (v99)
    {
      uint64_t v100 = v99;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      (*((void (**)(char *, void, uint64_t, uint64_t))v290._reserved + 7))(v53, 0, 1, v291);
    }
    else
    {
      (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v290._reserved + 7))(v53, 1, 1, v291);
    }
    uint64_t v101 = v296;
    sub_100096408((uint64_t)v53, v296, (uint64_t *)&unk_100909E40);
    uint64_t v102 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v294 + 56);
    uint64_t v103 = v101;
    uint64_t v104 = v295;
    v102(v103, 0, 1, v295);
    sub_1000BF710(v292, (uint64_t)v88, (uint64_t *)&unk_100909E40);
    v102((uint64_t)v88, 0, 1, v104);
    uint64_t v105 = (uint64_t)&v82[*(int *)(v80 + 48)];
    sub_1000BF710(v296, (uint64_t)v82, &qword_10090D2C8);
    sub_1000BF710((uint64_t)v88, v105, &qword_10090D2C8);
    uint64_t v106 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v294 + 48);
    if (v106((uint64_t)v82, 1, v104) == 1)
    {
      sub_1000966BC((uint64_t)v88, &qword_10090D2C8);
      if (v106(v105, 1, v295) == 1)
      {
LABEL_38:
        sub_1000966BC((uint64_t)v82, &qword_10090D2C8);
        return sub_1000966BC(v296, &qword_10090D2C8);
      }
      uint64_t v49 = (int *)&qword_10090D2C0;
    }
    else
    {
      sub_1000BF710((uint64_t)v82, (uint64_t)v85, &qword_10090D2C8);
      if (v106(v105, 1, v295) == 1)
      {
        uint64_t v49 = (int *)&qword_10090D2C0;
      }
      else
      {
        sub_100096408(v105, (uint64_t)v79, (uint64_t *)&unk_100909E40);
        uint64_t v120 = v288;
        uint64_t v121 = v288 + v49[12];
        sub_1000BF710((uint64_t)v85, v288, (uint64_t *)&unk_100909E40);
        sub_1000BF710((uint64_t)v79, v121, (uint64_t *)&unk_100909E40);
        uint64_t v122 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v290._reserved + 6);
        if (v122(v120, 1, v291) == 1)
        {
          if (v122(v121, 1, v291) == 1)
          {
            sub_1000966BC(v288, (uint64_t *)&unk_100909E40);
            sub_1000966BC((uint64_t)v79, (uint64_t *)&unk_100909E40);
            sub_1000966BC((uint64_t)v88, &qword_10090D2C8);
            sub_1000966BC((uint64_t)v85, (uint64_t *)&unk_100909E40);
            goto LABEL_38;
          }
        }
        else
        {
          sub_1000BF710(v288, (uint64_t)v76, (uint64_t *)&unk_100909E40);
          if (v122(v121, 1, v291) != 1)
          {
            reserved = v290._reserved;
            uint64_t v154 = v291;
            unint64_t v155 = v280;
            (*((void (**)(char *, uint64_t, uint64_t))v290._reserved + 4))(v280, v121, v291);
            sub_10016A8C4(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
            uint64_t v49 = (int *)dispatch thunk of static Equatable.== infix(_:_:)();
            os_log_type_t v156 = (void (*)(char *, uint64_t))reserved[1];
            v156(v155, v154);
            v156(v76, v154);
            sub_1000966BC(v288, (uint64_t *)&unk_100909E40);
            sub_1000966BC((uint64_t)v79, (uint64_t *)&unk_100909E40);
            sub_1000966BC((uint64_t)v88, &qword_10090D2C8);
            sub_1000966BC((uint64_t)v85, (uint64_t *)&unk_100909E40);
            sub_1000966BC((uint64_t)v82, &qword_10090D2C8);
            if (v49) {
              return sub_1000966BC(v296, &qword_10090D2C8);
            }
LABEL_57:
            uint64_t v123 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
            if (!v124) {
              goto LABEL_118;
            }
            char v125 = (uint64_t *)v123;
            uint64_t v49 = v124;
            if (v123 == 0x6E6F697461657263 && v124 == (int *)0xEC00000065746144
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              sub_1000BF710(v292, v286, (uint64_t *)&unk_100909E40);
              char v126 = swift_dynamicCast();
              id v127 = *(void (**)(NSURL *, uint64_t, uint64_t, void *))(v293 + 56);
              v293 += 56;
              if (v126)
              {
                uint64_t baseURL = v290._baseURL;
                v127(v290._baseURL, 0, 1, v290._clients);
                uint64_t v129 = (uint64_t)baseURL;
                uint64_t v130 = v287;
                sub_100096408(v129, v287, (uint64_t *)&unk_100909A40);
                uint64_t v131 = v130;
                uint64_t v132 = v285;
                sub_1000BF710(v131, v285, (uint64_t *)&unk_100909A40);
                uint64_t v133 = type metadata accessor for Date();
                uint64_t v134 = *(void *)(v133 - 8);
                int v135 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133);
                Class isa = 0;
                if (v135 != 1)
                {
                  uint64_t v137 = v285;
                  Class isa = Date._bridgeToObjectiveC()().super.isa;
                  (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v137, v133);
                }
                [v298 setCreationDate:isa];

                uint64_t v138 = (uint64_t *)&unk_100909A40;
                uint64_t v139 = v287;
                goto LABEL_114;
              }
              uint64_t v140 = v290._baseURL;
            }
            else
            {
              if (v125 == (uint64_t *)v253 && v49 == (int *)(v252 | 0x8000000000000000)
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                sub_1000BF710(v292, v282, (uint64_t *)&unk_100909E40);
                char v141 = swift_dynamicCast();
                id v127 = *(void (**)(NSURL *, uint64_t, uint64_t, void *))(v293 + 56);
                v293 += 56;
                p_reserved = (void **)&v304;
                if (v141)
                {
                  uint64_t v143 = v284;
                  v127((NSURL *)v284, 0, 1, v290._clients);
                  uint64_t v144 = (uint64_t)v143;
                  uint64_t v145 = v283;
                  sub_100096408(v144, v283, (uint64_t *)&unk_100909A40);
                  uint64_t v146 = v145;
                  uint64_t v147 = v281;
                  sub_1000BF710(v146, v281, (uint64_t *)&unk_100909A40);
                  uint64_t v148 = type metadata accessor for Date();
                  uint64_t v149 = *(void *)(v148 - 8);
                  int v150 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v149 + 48))(v147, 1, v148);
                  Class v151 = 0;
                  if (v150 != 1)
                  {
                    uint64_t v152 = v281;
                    Class v151 = Date._bridgeToObjectiveC()().super.isa;
                    (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v152, v148);
                  }
                  [v298 setLastModifiedDate:v151];

                  uint64_t v138 = (uint64_t *)&unk_100909A40;
                  uint64_t v139 = v283;
                  goto LABEL_114;
                }
              }
              else if (v125 == (uint64_t *)v251 && v49 == (int *)(v250 | 0x8000000000000000) {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                sub_1000BF710(v292, v278, (uint64_t *)&unk_100909E40);
                char v157 = swift_dynamicCast();
                id v127 = *(void (**)(NSURL *, uint64_t, uint64_t, void *))(v293 + 56);
                v293 += 56;
                p_reserved = (void **)&v303;
                if (v157)
                {
                  id v158 = v279;
                  v127((NSURL *)v279, 0, 1, v290._clients);
                  uint64_t v159 = (uint64_t)v158;
                  uint64_t v160 = v277;
                  sub_100096408(v159, v277, (uint64_t *)&unk_100909A40);
                  uint64_t v161 = v160;
                  uint64_t v162 = v276;
                  sub_1000BF710(v161, v276, (uint64_t *)&unk_100909A40);
                  uint64_t v163 = type metadata accessor for Date();
                  uint64_t v164 = *(void *)(v163 - 8);
                  int v165 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163);
                  Class v166 = 0;
                  if (v165 != 1)
                  {
                    uint64_t v167 = v276;
                    Class v166 = Date._bridgeToObjectiveC()().super.isa;
                    (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v167, v163);
                  }
                  [v298 setMostRecentPublicLinkUpdateRequestDate:v166];

                  uint64_t v138 = (uint64_t *)&unk_100909A40;
                  uint64_t v139 = v277;
                  goto LABEL_114;
                }
              }
              else
              {
                if (v125 == (uint64_t *)v249 && v49 == (int *)(v248 | 0x8000000000000000)
                  || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  sub_1000BF710(v292, v275, (uint64_t *)&unk_100909E40);
                  sub_100094134(&qword_10090A830);
                  if (swift_dynamicCast())
                  {
                    uint64_t v168 = v301;
                    unint64_t v169 = v302;
                    if (v302 >> 60 == 15)
                    {
                      Class v170 = 0;
                    }
                    else
                    {
                      sub_100097E38(v301, v302);
                      Class v170 = Data._bridgeToObjectiveC()().super.isa;
                      sub_100097F20(v168, v169);
                    }
                    [v298 setPublicLinkConfigurationData:v170];

                    sub_100097F20(v168, v169);
                  }
                  goto LABEL_115;
                }
                if (v125 == (uint64_t *)v247 && v49 == (int *)(v246 | 0x8000000000000000)
                  || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  sub_1000BF710(v292, v254, (uint64_t *)&unk_100909E40);
                  char v171 = swift_dynamicCast();
                  id v127 = *(void (**)(NSURL *, uint64_t, uint64_t, void *))(v293 + 56);
                  v293 += 56;
                  p_reserved = &v290._reserved;
                  if (v171)
                  {
                    char v172 = v262;
                    v127((NSURL *)v262, 0, 1, v290._clients);
                    uint64_t v173 = (uint64_t)v172;
                    uint64_t v174 = v261;
                    sub_100096408(v173, v261, (uint64_t *)&unk_100909A40);
                    uint64_t v175 = v174;
                    uint64_t v176 = v260;
                    sub_1000BF710(v175, v260, (uint64_t *)&unk_100909A40);
                    uint64_t v177 = type metadata accessor for Date();
                    uint64_t v178 = *(void *)(v177 - 8);
                    int v179 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v178 + 48))(v176, 1, v177);
                    Class v180 = 0;
                    if (v179 != 1)
                    {
                      uint64_t v181 = v260;
                      Class v180 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v181, v177);
                    }
                    [v298 setPublicLinkCreationDate:v180];

                    uint64_t v138 = (uint64_t *)&unk_100909A40;
                    uint64_t v139 = v261;
                    goto LABEL_114;
                  }
                }
                else if (v125 == (uint64_t *)v245 && v49 == (int *)(v244 | 0x8000000000000000) {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  sub_1000BF710(v292, v255, (uint64_t *)&unk_100909E40);
                  char v182 = swift_dynamicCast();
                  id v127 = *(void (**)(NSURL *, uint64_t, uint64_t, void *))(v293 + 56);
                  v293 += 56;
                  p_reserved = (void **)&v293;
                  if (v182)
                  {
                    char v183 = v265;
                    v127((NSURL *)v265, 0, 1, v290._clients);
                    uint64_t v184 = (uint64_t)v183;
                    uint64_t v185 = v264;
                    sub_100096408(v184, v264, (uint64_t *)&unk_100909A40);
                    uint64_t v186 = v185;
                    uint64_t v187 = v263;
                    sub_1000BF710(v186, v263, (uint64_t *)&unk_100909A40);
                    uint64_t v188 = type metadata accessor for Date();
                    uint64_t v189 = *(void *)(v188 - 8);
                    int v190 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v189 + 48))(v187, 1, v188);
                    Class v191 = 0;
                    if (v190 != 1)
                    {
                      uint64_t v192 = v263;
                      Class v191 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v192, v188);
                    }
                    [v298 setPublicLinkExpirationDate:v191];

                    uint64_t v138 = (uint64_t *)&unk_100909A40;
                    uint64_t v139 = v264;
                    goto LABEL_114;
                  }
                }
                else
                {
                  if ((v125 != (uint64_t *)v243 || v49 != (int *)(v242 | 0x8000000000000000))
                    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  {
                    goto LABEL_120;
                  }
                  swift_bridgeObjectRelease();
                  sub_1000BF710(v292, v256, (uint64_t *)&unk_100909E40);
                  char v193 = swift_dynamicCast();
                  id v127 = *(void (**)(NSURL *, uint64_t, uint64_t, void *))(v293 + 56);
                  v293 += 56;
                  p_reserved = (void **)&v296;
                  if (v193)
                  {
                    char v194 = v268;
                    v127((NSURL *)v268, 0, 1, v290._clients);
                    uint64_t v195 = (uint64_t)v194;
                    uint64_t v196 = v267;
                    sub_100096408(v195, v267, (uint64_t *)&unk_100909A40);
                    uint64_t v197 = v196;
                    uint64_t v198 = v266;
                    sub_1000BF710(v197, v266, (uint64_t *)&unk_100909A40);
                    uint64_t v199 = type metadata accessor for Date();
                    uint64_t v200 = *(void *)(v199 - 8);
                    int v201 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v200 + 48))(v198, 1, v199);
                    Class v202 = 0;
                    if (v201 != 1)
                    {
                      uint64_t v203 = v266;
                      Class v202 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v200 + 8))(v203, v199);
                    }
                    [v298 setPublicLinkLastModifiedDate:v202];

                    uint64_t v138 = (uint64_t *)&unk_100909A40;
                    uint64_t v139 = v267;
                    goto LABEL_114;
                  }
                }
              }
              uint64_t v140 = (NSURL *)*(p_reserved - 32);
            }
            v127(v140, 1, 1, v290._clients);
            uint64_t v138 = &qword_10090D2B8;
LABEL_113:
            uint64_t v139 = (uint64_t)v140;
LABEL_114:
            while (1)
            {
              sub_1000966BC(v139, v138);
LABEL_115:
              uint64_t v49 = (int *)[v298 createResolutionTokenMapIfNecessary];
              dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
              if (v204) {
                break;
              }
LABEL_118:
              uint64_t v301 = 0;
              unint64_t v302 = 0xE000000000000000;
              char v125 = &v301;
              _StringGuts.grow(_:)(46);
              v206._object = (void *)0x80000001007CAF70;
              v206._countAndFlagsBits = 0xD00000000000002CLL;
              String.append(_:)(v206);
              uint64_t v300 = v297;
              sub_100094134(&qword_10090FF80);
              while (1)
              {
                _print_unlocked<A, B>(_:_:)();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_120:
                if (v125 == (uint64_t *)v241 && v49 == (int *)(v240 | 0x8000000000000000)
                  || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  sub_1000BF710(v292, v257, (uint64_t *)&unk_100909E40);
                  char v207 = swift_dynamicCast();
                  Class v208 = *(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v269 + 56);
                  v269 += 56;
                  if ((v207 & 1) == 0)
                  {
                    uint64_t v140 = v271;
                    v208(v271, 1, 1, v270);
                    uint64_t v138 = &qword_10090D2B0;
                    goto LABEL_113;
                  }
                  uint64_t v209 = v271;
                  v208(v271, 0, 1, v270);
                  uint64_t v210 = (uint64_t)v209;
                  uint64_t v211 = v273;
                  sub_100096408(v210, v273, (uint64_t *)&unk_100909E50);
                  uint64_t v212 = v211;
                  uint64_t v213 = v272;
                  sub_1000BF710(v212, v272, (uint64_t *)&unk_100909E50);
                  uint64_t v214 = type metadata accessor for UUID();
                  uint64_t v215 = *(void *)(v214 - 8);
                  int v216 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v215 + 48))(v213, 1, v214);
                  Class v217 = 0;
                  if (v216 != 1)
                  {
                    uint64_t v218 = v272;
                    Class v217 = UUID._bridgeToObjectiveC()().super.isa;
                    (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v218, v214);
                  }
                  [v298 setPublicLinkURLUUID:v217];

                  uint64_t v138 = (uint64_t *)&unk_100909E50;
                  uint64_t v139 = v273;
                  goto LABEL_114;
                }
                if (v125 == (uint64_t *)0x694C656372756F73 && v49 == (int *)0xEF4C525544497473) {
                  break;
                }
                char v219 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v219) {
                  goto LABEL_132;
                }
                if (qword_1009074E0 != -1) {
                  swift_once();
                }
                urlString = v290._urlString;
                uint64_t v227 = sub_10008E2DC((uint64_t)v290._urlString, (uint64_t)qword_100917930);
                (*((void (**)(char *, uint64_t, NSString *))v290.super.isa + 2))(v274, v227, urlString);
                id v228 = v298;
                swift_retain_n();
                id v229 = v228;
                os_log_type_t v230 = Logger.logObject.getter();
                os_log_type_t v231 = static os_log_type_t.fault.getter();
                if (!os_log_type_enabled(v230, v231))
                {

                  swift_release_n();
                  goto LABEL_142;
                }
                uint64_t v232 = swift_slowAlloc();
                uint64_t v300 = swift_slowAlloc();
                *(_DWORD *)uint64_t v232 = 136446466;
                id v233 = [v229 remObjectID];
                uint64_t v301 = (uint64_t)v233;
                sub_100094134((uint64_t *)&unk_100914BC0);
                uint64_t v234 = Optional.descriptionOrNil.getter();
                unint64_t v236 = v235;

                uint64_t v301 = sub_1000C51B8(v234, v236, &v300);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v232 + 12) = 2082;
                uint64_t v237 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
                if (v238)
                {
                  uint64_t v301 = sub_1000C51B8(v237, v238, &v300);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v230, v231, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported propertyKeyPath {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v232, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
LABEL_142:

                  (*((void (**)(char *, NSString *))v290.super.isa + 1))(v274, v290._urlString);
                  return sub_1000966BC(v296, &qword_10090D2C8);
                }
LABEL_143:
                uint64_t v49 = (int *)v297;
                swift_release();
                uint64_t v301 = 0;
                unint64_t v302 = 0xE000000000000000;
                char v125 = &v301;
                _StringGuts.grow(_:)(46);
                v239._object = (void *)0x80000001007CAF70;
                v239._countAndFlagsBits = 0xD00000000000002CLL;
                String.append(_:)(v239);
                uint64_t v299 = v49;
                sub_100094134(&qword_10090FF80);
              }
              swift_bridgeObjectRelease();
LABEL_132:
              uint64_t v220 = v259;
              sub_1000BF710(v292, v259, (uint64_t *)&unk_100909E40);
              uint64_t v221 = v220;
              uint64_t v222 = v258;
              sub_1000BF710(v221, v258, (uint64_t *)&unk_100909E40);
              if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v290._reserved + 6))(v222, 1, v291) == 1)
              {
                uint64_t v223 = 0;
              }
              else
              {
                uint64_t v224 = v258;
                URL._bridgeToObjectiveC()(&v290);
                uint64_t v223 = v225;
                (*((void (**)(uint64_t, uint64_t))v290._reserved + 1))(v224, v291);
              }
              [v298 setSourceListIDURL:v223];

              uint64_t v138 = (uint64_t *)&unk_100909E40;
              uint64_t v139 = v259;
            }
            NSString v205 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v49 updateForKey:v205];

            return sub_1000966BC(v296, &qword_10090D2C8);
          }
          (*((void (**)(char *, uint64_t))v290._reserved + 1))(v76, v291);
        }
        sub_1000966BC(v288, (uint64_t *)&unk_100914BD0);
        sub_1000966BC((uint64_t)v79, (uint64_t *)&unk_100909E40);
        uint64_t v49 = (int *)&qword_10090D2C8;
      }
      sub_1000966BC((uint64_t)v88, &qword_10090D2C8);
      sub_1000966BC((uint64_t)v85, (uint64_t *)&unk_100909E40);
    }
    sub_1000966BC((uint64_t)v82, (uint64_t *)v49);
    goto LABEL_57;
  }
  if (qword_1009074E0 != -1) {
    swift_once();
  }
  uint64_t v107 = v290._urlString;
  uint64_t v108 = sub_10008E2DC((uint64_t)v290._urlString, (uint64_t)qword_100917930);
  (*((void (**)(char *, uint64_t, NSString *))v290.super.isa + 2))(v289, v108, v107);
  id v109 = v298;
  swift_retain_n();
  id v110 = v109;
  os_log_type_t v111 = Logger.logObject.getter();
  os_log_type_t v112 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v111, v112))
  {
    uint64_t v113 = swift_slowAlloc();
    uint64_t v300 = swift_slowAlloc();
    *(_DWORD *)uint64_t v113 = 136446466;
    id v114 = [v110 remObjectID];
    uint64_t v301 = (uint64_t)v114;
    sub_100094134((uint64_t *)&unk_100914BC0);
    uint64_t v115 = Optional.descriptionOrNil.getter();
    unint64_t v117 = v116;

    uint64_t v301 = sub_1000C51B8(v115, v117, &v300);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v113 + 12) = 2082;
    uint64_t v118 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v119) {
      goto LABEL_143;
    }
    uint64_t v301 = sub_1000C51B8(v118, v119, &v300);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported key path {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v113, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return (*((uint64_t (**)(char *, NSString *))v290.super.isa + 1))(v289, v290._urlString);
}

id sub_100166628(void *a1)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v9 = __chkstk_darwin(v8 - 8).n128_u64[0];
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = 0;
  id v12 = [a1 remObjectIDWithError:&v65 v9];
  if (v12)
  {
    id v2 = v12;
    uint64_t v13 = v65;
    id v14 = [a1 account];
    if (v14
      && (uint64_t v15 = v14, v16 = [v14 remObjectID], v15, v16))
    {
      id v17 = [a1 name];
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v61 = v5;
        uint64_t v63 = v1;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v64 = objc_allocWithZone((Class)REMTemplateStorage);
        uint64_t v19 = v16;
        id v20 = v2;
        NSString v21 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v2 = [v64 initWithObjectID:v20 accountID:v19 name:v21];

        id v62 = v20;
        uint64_t v64 = v19;

        id v22 = [a1 color];
        [v2 setColor:v22];

        id v23 = [a1 badgeEmblem];
        [v2 setBadgeEmblem:v23];

        [v2 setShowingLargeAttachments:[a1 showingLargeAttachments]];
        id v24 = [a1 mostRecentPublicLinkUpdateRequestDate];
        if (v24)
        {
          uint64_t v25 = v24;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v26 = v61;
          (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v11, v7, v4);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v11, 0, 1, v4);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v11, 1, v4) == 1)
          {
            Class isa = 0;
          }
          else
          {
            Class isa = Date._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v4);
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v11, 1, 1, v4);
          Class isa = 0;
        }
        [v2 setMostRecentPublicLinkUpdateRequestDate:isa];

        id v46 = REMCDTemplate.publicLink.getter();
        [v2 setPublicLink:v46];

        [v2 setIsPersisted:1];
        id v47 = [a1 sortingStyle];
        if (v47)
        {
          uint64_t v48 = v47;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v49 = (id)REMSortingStyle.init(stringValue:)();
          if (!v49) {
            id v49 = REMSortingStyleDefault;
          }
          uint64_t v50 = v49;
          [v2 setSortingStyle:v49];
        }
        else
        {
          [v2 setSortingStyle:REMSortingStyleDefault];
        }
        [v2 setShouldUpdateSectionsOrdering:0];
        [v2 setUnsavedSectionIDsOrdering:0];
        [v2 setUnsavedMembershipsOfRemindersInSections:0];
        [v2 setResolutionTokenMap:0];
        Class v51 = (Class)[a1 resolutionTokenMapData];
        if (v51)
        {
          uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v54 = v53;

          Class v51 = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F34(v52, v54);
        }
        [v2 setResolutionTokenMapData:v51];

        id v55 = [a1 parentAccount];
        if (v55)
        {
          uint64_t v56 = v55;
          id v57 = [v55 remObjectID];
        }
        else
        {
          id v57 = 0;
        }
        [v2 setParentAccountID:v57];

        [v2 setMinimumSupportedVersion:[a1 minimumSupportedVersion]];
        [v2 setEffectiveMinimumSupportedVersion:[a1 effectiveMinimumSupportedVersion]];
      }
      else
      {
        if (qword_100906F60 != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        sub_10008E2DC(v40, (uint64_t)qword_10090D0E0);
        uint64_t v41 = v2;
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          uint64_t v63 = (void *)swift_slowAlloc();
          uint64_t v64 = v16;
          *(_DWORD *)uint64_t v44 = 138543362;
          uint64_t v65 = v41;
          uint64_t v45 = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v63 = v2;

          _os_log_impl((void *)&_mh_execute_header, v42, v43, "REMTemplateStorageCDIngestor: cdTemplate.name is nil {cdTemplate.remObjectID: %{public}@}", v44, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          id v16 = v64;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v42 = v41;
        }

        uint64_t v58 = self;
        type metadata accessor for REMCDTemplate();
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        NSString v60 = String._bridgeToObjectiveC()();
        [v58 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v60];

        swift_willThrow();
      }
    }
    else
    {
      if (qword_100906F60 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_10090D0E0);
      uint64_t v29 = v2;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v64 = (void *)swift_slowAlloc();
        uint64_t v65 = v29;
        *(_DWORD *)uint64_t v32 = 138543362;
        id v33 = v2;
        uint64_t v34 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v2 = v64;
        *uint64_t v64 = v33;

        _os_log_impl((void *)&_mh_execute_header, v30, v31, "REMTemplateStorageCDIngestor: cdTemplate.account is nil {cdTemplate.remObjectID: %{public}@}", v32, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v30 = v29;
      }

      uint64_t v36 = self;
      type metadata accessor for REMCDTemplate();
      uint64_t v37 = swift_getObjCClassFromMetadata();
      NSString v38 = String._bridgeToObjectiveC()();
      [v36 unexpectedNilPropertyWithClass:v37 property:v38];

      swift_willThrow();
    }
  }
  else
  {
    uint64_t v35 = v65;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

id sub_10016700C(void *a1)
{
  id v3 = sub_100166628(a1);
  if (!v1)
  {
    uint64_t v4 = v3;
    id v5 = [v3 objectID];
    id v6 = [v4 accountID];
    id v7 = [v4 name];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v8 = objc_allocWithZone((Class)REMListStorage);
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v2 = [v8 initWithObjectID:v5 accountID:v6 name:v9];

    id v10 = [v4 color];
    [v2 setColor:v10];

    id v11 = [v4 badgeEmblem];
    [v2 setBadgeEmblem:v11];

    [v2 setShowingLargeAttachments:[v4 showingLargeAttachments]];
    id v12 = [v4 sortingStyle];
    [v2 setSortingStyle:v12];

    id v13 = [v4 parentAccountID];
    [v2 setParentAccountID:v13];

    [v2 setMinimumSupportedVersion:[v4 minimumSupportedVersion]];
    [v2 setEffectiveMinimumSupportedVersion:[v4 effectiveMinimumSupportedVersion]];
  }
  return v2;
}

unint64_t sub_10016724C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B23B0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_100167298(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2450, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return 12;
  }
  else {
    return v3;
  }
}

void sub_1001672E4(void *a1)
{
  id v2 = [a1 remObjectID];
  id v3 = [a1 unsavedManualOrdering];
  if (v3)
  {
    uint64_t v4 = v3;
    if (qword_100906F58 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_10090D0C8);
    id v6 = v2;
    id v7 = v4;
    id v8 = v6;
    id v9 = v7;
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v28 = v11;
      uint64_t v12 = swift_slowAlloc();
      id v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138543618;
      id v14 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v13 = v8;

      *(_WORD *)(v12 + 12) = 2048;
      id v15 = [v9 topLevelElementIDs];
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v16 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
      }
      else
      {
      }
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v10, v28, "REMTemplateStorageCDIngestor: ingesting manual ordering {templateObjectID: %{public}@, top-level elements count: %ld}", (uint8_t *)v12, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v23 = [a1 accountID];
    id v24 = [self defaultCenter];
    type metadata accessor for REMManualOrderingCDIngestor();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v23;
    *(void *)(v25 + 24) = v24;
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_10077A530;
    *(void *)(v26 + 32) = v9;
    unint64_t v30 = v26;
    specialized Array._endMutation()();
    id v27 = v9;
    sub_10069BF54(v30, v25);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100906F58 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10090D0C8);
    id v29 = v2;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      NSString v21 = (void *)swift_slowAlloc();
      *(_DWORD *)id v20 = 138543362;
      id v22 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v21 = v29;

      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_10016780C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v61 = a3;
  uint64_t v65 = a2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v59 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v62 = *(void *)(v60 - 8);
  *(void *)&double v7 = __chkstk_darwin(v60).n128_u64[0];
  id v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [a1 entityName:v7];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  id v14 = [self cdEntityName];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if (v15 == v11 && v17 == v13)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    id v24 = a1;
    uint64_t v25 = sub_100694D98(v24);
    if (v3) {
      return;
    }
    uint64_t v26 = v25;
    sub_100094134(&qword_10090D2E0);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_100776E40;
    *(void *)(v27 + 32) = v26;
    uint64_t v63 = v27;
    specialized Array._endMutation()();
    uint64_t v28 = v63;
    id v29 = v26;
    unint64_t v35 = (unint64_t)sub_10069705C(v28, 0, 1, 0, 0);
    swift_bridgeObjectRelease();
    if (v35 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v58)
      {
LABEL_17:
        if ((v35 & 0xC000000000000001) != 0)
        {
          NSString v38 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v37 = v61;
          uint64_t v36 = v62;
        }
        else
        {
          uint64_t v37 = v61;
          uint64_t v36 = v62;
          if (!*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_39;
          }
          NSString v38 = (char *)*(id *)(v35 + 32);
        }
        swift_bridgeObjectRelease();
        id v39 = [v37 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        uint64_t v41 = v60;
        (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v60);
        [v38 setMostRecentTargetTemplateIdentifierByCurrentUser:isa];

        if ([v38 sharingStatus] > 1)
        {
LABEL_31:

LABEL_35:
          return;
        }
        id v42 = [v37 uuid];
        uint64_t v43 = (uint64_t)v59;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v43, 0, 1, v41);
        sub_1004435F8(v43);
        id v9 = v38;
LABEL_30:
        sub_1000966BC(v43, (uint64_t *)&unk_100909E50);
        [v38 updateChangeCount];
        NSString v38 = v9;
        goto LABEL_31;
      }
    }
    else if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    [self noSuchObjectErrorWithObjectID:v24];
    swift_willThrow();
    goto LABEL_35;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_10;
  }
  id v20 = [self cdEntityName];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  if (v21 == v11 && v23 == v13)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
      uint64_t v44 = self;
      uint64_t v63 = 0;
      unint64_t v64 = 0xE000000000000000;
      _StringGuts.grow(_:)(160);
      v45._object = (void *)0x80000001007CC7D0;
      v45._countAndFlagsBits = 0xD00000000000009DLL;
      String.append(_:)(v45);
      id v46 = [a1 description];
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v49 = v48;

      v50._countAndFlagsBits = v47;
      v50._object = v49;
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51._countAndFlagsBits = 125;
      v51._object = (void *)0xE100000000000000;
      String.append(_:)(v51);
      NSString v52 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v44 invalidParameterErrorWithDescription:v52];

      swift_willThrow();
      return;
    }
  }
  id v29 = a1;
  os_log_type_t v31 = sub_100696CCC(v29);
  if (!v3)
  {
    uint64_t v32 = v31;
    sub_100094134(&qword_10090D2D8);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_100776E40;
    *(void *)(v33 + 32) = v32;
    uint64_t v63 = v33;
    specialized Array._endMutation()();
    uint64_t v34 = v63;
    id v9 = v32;
    unint64_t v35 = (unint64_t)sub_100697BE0(v34, 0, 1, 0, 0);
    swift_bridgeObjectRelease();
    if (!(v35 >> 62))
    {
      uint64_t v53 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_25:
      uint64_t v43 = (uint64_t)v59;
      id v55 = v61;
      uint64_t v54 = v62;
      if (!v53)
      {
        swift_bridgeObjectRelease();
        [self noSuchObjectErrorWithObjectID:v29];
        swift_willThrow();

        return;
      }
      if ((v35 & 0xC000000000000001) != 0)
      {
        uint64_t v56 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        uint64_t v56 = (char *)*(id *)(v35 + 32);
      }
      NSString v38 = v56;
      swift_bridgeObjectRelease();
      id v57 = [v55 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v43, 0, 1, v60);
      sub_10040B748(v43);
      id v29 = v38;
      goto LABEL_30;
    }
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
}

void sub_100167F50(void *a1, void *a2, void *a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v102 = &v90[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = &v90[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v15 = &v90[-v14];
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v98 = *(void *)(v16 - 8);
  id v99 = (void (*)(unsigned char *, unsigned char *, uint64_t))v16;
  *(void *)&double v17 = __chkstk_darwin(v16).n128_u64[0];
  char v19 = &v90[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v20 = [a1 storeControllerManagedObjectContext:v17];
  if (!v20)
  {
    uint64_t v103 = 0;
    unint64_t v104 = 0xE000000000000000;
    _StringGuts.grow(_:)(127);
    v34._object = (void *)0x80000001007CC6A0;
    v34._countAndFlagsBits = 0xD00000000000007CLL;
    String.append(_:)(v34);
    id v35 = [a1 remObjectID];
    if (v35)
    {
      uint64_t v36 = v35;
      id v37 = [v35 description];

      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v39;
    }
    else
    {
      uint64_t v40 = (void *)0xE300000000000000;
      uint64_t v38 = 7104878;
    }
    Swift::String v50 = self;
    v51._countAndFlagsBits = v38;
    v51._object = v40;
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._countAndFlagsBits = 125;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    NSString v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v50 invalidParameterErrorWithDescription:v53];

    swift_willThrow();
    return;
  }
  uint64_t v100 = v3;
  uint64_t v96 = (unsigned int (*)(void, void, void))a1;
  id v97 = a2;
  uint64_t v92 = v15;
  uint64_t v93 = v12;
  uint64_t v94 = v7;
  uint64_t v95 = v8;
  id v105 = v20;
  id v101 = [a3 sourceListID];
  id v21 = [v101 entityName];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  id v25 = [self cdEntityName];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  if (v22 == v26 && v24 == v28)
  {
    int v29 = 3;
LABEL_5:
    unsigned int v91 = v29;
    char v30 = v105;
    uint64_t v32 = v96;
    os_log_type_t v31 = v97;
    uint64_t v33 = v100;
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) == 0)
  {
    id v42 = [v101 entityName];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v44;

    id v46 = [self cdEntityName];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v48;

    if (v43 != v47 || v45 != v49)
    {
      char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v30 = v105;
      uint64_t v33 = v100;
      if ((v54 & 1) == 0)
      {
        uint64_t v80 = self;
        uint64_t v103 = 0;
        unint64_t v104 = 0xE000000000000000;
        _StringGuts.grow(_:)(172);
        v81._countAndFlagsBits = 0xD0000000000000A9;
        v81._object = (void *)0x80000001007CC720;
        String.append(_:)(v81);
        id v82 = v101;
        id v83 = [v101 description];
        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v86 = v85;

        v87._countAndFlagsBits = v84;
        v87._object = v86;
        String.append(_:)(v87);
        swift_bridgeObjectRelease();
        v88._countAndFlagsBits = 125;
        v88._object = (void *)0xE100000000000000;
        String.append(_:)(v88);
        NSString v89 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v80 invalidParameterErrorWithDescription:v89];

        swift_willThrow();
        return;
      }
      unsigned int v91 = 4;
      uint64_t v32 = v96;
      os_log_type_t v31 = v97;
      goto LABEL_17;
    }
    int v29 = 4;
    goto LABEL_5;
  }
  unsigned int v91 = 3;
  char v30 = v105;
  uint64_t v32 = v96;
  os_log_type_t v31 = v97;
  uint64_t v33 = v100;
LABEL_17:
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  id v55 = (void *)REMTemplateConfiguration.codable.getter();
  uint64_t v103 = v55;
  type metadata accessor for REMTemplateConfiguration_Codable();
  sub_10016A8C4(&qword_10090D2D0, (void (*)(uint64_t))&type metadata accessor for REMTemplateConfiguration_Codable);
  uint64_t v56 = v33;
  uint64_t v57 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v59 = v58;
  swift_release();
  if (v56)
  {
  }
  else
  {
    id v97 = v59;
    uint64_t v100 = v57;

    type metadata accessor for REMCDTemplateOperationQueueItem();
    id v60 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:v30];
    [v60 setAccount:v32];
    [v60 setOperationTypeRawValue:v91];
    [v60 setPriorityRawValue:10];
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, void (*)(unsigned char *, unsigned char *, uint64_t)))(v98 + 8))(v19, v99);
    [v60 setCreationDate:isa];

    id v62 = v31;
    id v63 = [v62 uuid];
    unint64_t v64 = v102;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v65 = v95;
    uint64_t v66 = v92;
    uint64_t v67 = v64;
    uint64_t v68 = v94;
    id v99 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v95 + 32);
    v99(v92, v67, v94);
    uint64_t v98 = *(void *)(v65 + 56);
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))v98)(v66, 0, 1, v68);
    uint64_t v96 = *(unsigned int (**)(void, void, void))(v65 + 48);
    Class v69 = 0;
    if (v96(v66, 1, v68) != 1)
    {
      Class v69 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(unsigned char *, uint64_t))(v95 + 8))(v66, v68);
    }
    [v60 setTemplateIdentifier:v69];

    id v70 = v101;
    id v71 = [v70 uuid];
    uint64_t v72 = v102;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v73 = v93;
    v99(v93, v72, v68);
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))v98)(v73, 0, 1, v68);
    uint64_t v74 = v73;
    if (v96(v73, 1, v68) == 1)
    {
      Class v75 = 0;
    }
    else
    {
      Class v75 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(unsigned char *, uint64_t))(v95 + 8))(v74, v68);
    }
    uint64_t v76 = v105;
    unint64_t v77 = (unint64_t)v97;
    [v60 setListIdentifier:v75];

    uint64_t v78 = v100;
    Class v79 = Data._bridgeToObjectiveC()().super.isa;
    [v60 setConfigurationData:v79];

    sub_100097F34(v78, v77);
  }
}

void *sub_100168868(id a1, char a2)
{
  if (!a2)
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v5 = (void *)swift_allocObject();
    *((_OWORD *)v5 + 1) = xmmword_10077A530;
    v5[4] = [a1 accountID];
    specialized Array._endMutation()();
    return v5;
  }
  if (a2 == 1)
  {
    id v3 = [a1 parentAccountID];
    uint64_t v4 = v3;
    uint64_t v5 = _swiftEmptyArrayStorage;
    if (v3)
    {
      id v6 = v3;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v5 = _swiftEmptyArrayStorage;
    }

    return v5;
  }
  id v8 = [a1 sectionIDsToUndelete];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  sub_1001207D4();
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = sub_10020A3A0(v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100168A08(uint64_t a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = _s10PredicatesOMa_1();
  __chkstk_darwin(v6);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = (void *)sub_100535B3C();
  sub_10016A7B8((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v12 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v13 = [(id)swift_getObjCClassFromMetadata() entity];
  [v12 setEntity:v13];

  [v12 setAffectedStores:0];
  [v12 setPredicate:v11];

  unint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return (uint64_t)v5;
  }
  unint64_t v15 = v14;
  unint64_t v23 = v14 >> 62;
  uint64_t v24 = 0;
  uint64_t v26 = v9;
  id v25 = v12;
  if (!(v14 >> 62))
  {
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_5;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    if (v23)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = (char *)_CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = *(char **)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v16 = result;
  if (!result) {
    goto LABEL_14;
  }
LABEL_5:
  if (v16 >= 1)
  {
    uint64_t v18 = 0;
    char v19 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    do
    {
      if ((v15 & 0xC000000000000001) != 0) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(v15 + 8 * v18 + 32);
      }
      id v21 = v20;
      [v20 setMostRecentTargetTemplateIdentifierByCurrentUser:0];
      if ([v21 sharingStatus] <= 1)
      {
        (*v19)(v5, 1, 1, v26);
        sub_1004435F8((uint64_t)v5);
        sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909E50);
        [v21 updateChangeCount];
      }
      ++v18;
    }
    while (v16 != v18);
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_100168DB8(uint64_t a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = _s10PredicatesOMa_3();
  __chkstk_darwin(v6);
  id v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = (void *)sub_100646F04();
  sub_10016A7B8((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_3);
  sub_1000963CC(0, (unint64_t *)&unk_100910210);
  id v12 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v13 = [(id)swift_getObjCClassFromMetadata() entity];
  [v12 setEntity:v13];

  [v12 setAffectedStores:0];
  [v12 setPredicate:v11];

  unint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return (uint64_t)v5;
  }
  unint64_t v15 = v14;
  v21[0] = v14 >> 62;
  v21[1] = 0;
  id v22 = v12;
  if (!(v14 >> 62))
  {
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_5;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    if (v21[0])
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = (char *)_CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = *(char **)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v16 = result;
  if (!result) {
    goto LABEL_12;
  }
LABEL_5:
  if (v16 >= 1)
  {
    uint64_t v18 = 0;
    do
    {
      if ((v15 & 0xC000000000000001) != 0) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v19 = *(id *)(v15 + 8 * v18 + 32);
      }
      id v20 = v19;
      ++v18;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, 1, 1, v9);
      sub_10040B748((uint64_t)v5);
      sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909E50);
      [v20 updateChangeCount];
    }
    while (v16 != v18);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void sub_10016913C(id a1, void *a2, char a3, uint64_t a4)
{
  unint64_t v5 = (unint64_t)a1;
  if (a3)
  {
    if (a3 == 1)
    {
      id v6 = [a2 createResolutionTokenMapIfNecessary];
      id v7 = [(id)v5 resolutionTokenMap];
      if (v7)
      {
        id v8 = v7;
        sub_100094134(&qword_10090D2A8);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100776E40;
        *(unsigned char *)(inited + 32) = 1;
        id v10 = sub_10047F9F4(v8, inited);
        swift_setDeallocating();
        sub_10047D1B0(1);
        NSString v11 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v12 = [v6 mergeWithMap:v10 forKey:v11];

        if (v12)
        {
          id v13 = [(id)v5 parentAccountID];
          unint64_t v14 = v13;
          if (v13)
          {
            unint64_t v15 = v13;
            sub_100472378(1, v15, a4);
            if (v4)
            {

              return;
            }
            uint64_t v66 = v16;
          }
          else
          {
            uint64_t v66 = 0;
          }
          os_log_t loga = v14;
          if (qword_100906F58 != -1) {
            swift_once();
          }
          uint64_t v67 = type metadata accessor for Logger();
          sub_10008E2DC(v67, (uint64_t)qword_10090D0C8);
          id v68 = v66;
          id v69 = a2;
          id v70 = v68;
          uint64_t v96 = v66;
          id v71 = v69;
          uint64_t v72 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v72, v73))
          {
            os_log_type_t v93 = v73;
            uint64_t v94 = v72;
            id v92 = v70;
            *(void *)typea = v10;
            id v106 = v6;
            uint64_t v74 = swift_slowAlloc();
            os_log_type_t v112 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v74 = 136446466;
            id v75 = [v71 remObjectID];
            sub_100094134((uint64_t *)&unk_100914BC0);
            uint64_t v76 = Optional.descriptionOrNil.getter();
            unint64_t v78 = v77;

            sub_1000C51B8(v76, v78, (uint64_t *)&v112);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v74 + 12) = 2082;
            if (v96)
            {
              Class v79 = v92;
              id v80 = [v92 remObjectID];
            }
            else
            {
              id v80 = 0;
              Class v79 = v92;
            }
            uint64_t v81 = Optional.descriptionOrNil.getter();
            unint64_t v83 = v82;

            sub_1000C51B8(v81, v83, (uint64_t *)&v112);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            id v70 = v79;

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v94, v93, "Updating cdTemplate.parentAccount {cdTemplate: %{public}s, parentAccount: %{public}s}", (uint8_t *)v74, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            id v6 = v106;
            id v10 = *(id *)typea;
          }
          else
          {
          }
          [v71 setParentAccount:v70];
          id v84 = [v71 parentAccount];

          if (v84)
          {
          }
          else
          {
            typeb = v10;
            id v85 = [v71 storeControllerManagedObjectContext];
            if (v85)
            {
              uint64_t v86 = v85;
              id v87 = [(id)v5 objectID];
              sub_10015EB58(v87);
              if (v4)
              {
              }
              else
              {
              }
            }
            else
            {
              Swift::String v88 = self;
              type metadata accessor for REMCDTemplate();
              uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
              uint64_t v90 = v70;
              NSString v91 = String._bridgeToObjectiveC()();
              [v88 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v91];

              swift_willThrow();
            }
          }
        }
        else
        {
        }
      }
      else
      {
        if (qword_100906F58 != -1) {
LABEL_74:
        }
          swift_once();
        uint64_t v25 = type metadata accessor for Logger();
        sub_10008E2DC(v25, (uint64_t)qword_10090D0C8);
        id v26 = (id)v5;
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = swift_slowAlloc();
          id v105 = v6;
          char v30 = (void *)swift_slowAlloc();
          os_log_type_t v112 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v29 = 138543618;
          id v31 = [v26 objectID];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *char v30 = v31;

          *(_WORD *)(v29 + 12) = 2082;
          sub_1000C51B8(0x6341746E65726170, 0xEF4449746E756F63, (uint64_t *)&v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "REMTemplateStorageCDIngestor: establishRelationship(onStorage:into cdTemplate:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v29, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          id v6 = v105;
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        id v63 = self;
        sub_1000963CC(0, &qword_10090D2A0);
        uint64_t v64 = swift_getObjCClassFromMetadata();
        NSString v65 = String._bridgeToObjectiveC()();
        [v63 unexpectedNilPropertyWithClass:v64 property:v65];

        swift_willThrow();
      }
    }
    else
    {
      id v19 = [a1 sectionIDsToUndelete];
      id v6 = (id)sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1001207D4();
      uint64_t v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v21 = v20;
      uint64_t v22 = v4;
      if ((v20 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v21 = (uint64_t)v107;
        *(void *)os_log_type_t type = v108;
        uint64_t v23 = v109;
        int64_t v24 = v110;
        unint64_t v5 = v111;
      }
      else
      {
        int64_t v24 = 0;
        uint64_t v49 = -1 << *(unsigned char *)(v20 + 32);
        *(void *)os_log_type_t type = v20 + 56;
        uint64_t v23 = ~v49;
        uint64_t v50 = -v49;
        if (v50 < 64) {
          uint64_t v51 = ~(-1 << v50);
        }
        else {
          uint64_t v51 = -1;
        }
        unint64_t v5 = v51 & *(void *)(v20 + 56);
      }
      int64_t v95 = (unint64_t)(v23 + 64) >> 6;
      unint64_t log = v21;
      if ((v21 & 0x8000000000000000) == 0) {
        goto LABEL_27;
      }
LABEL_24:
      uint64_t v52 = v22;
      if (__CocoaSet.Iterator.next()())
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v53 = v112;
        swift_unknownObjectRelease();
        int64_t v54 = v24;
        uint64_t v55 = v5;
        if (v112)
        {
          do
          {
            sub_100472BF0(2, v53, a4);
            if (v52)
            {
              sub_1000C1AF8();

              return;
            }
            id v6 = v59;
            uint64_t v22 = 0;
            [v59 setTemplate:a2];
            id v60 = [v6 createResolutionTokenMapIfNecessary];
            sub_10047D4FC(1);
            NSString v61 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v60 updateForKey:v61];

            int64_t v24 = v54;
            unint64_t v5 = v55;
            uint64_t v21 = log;
            if ((log & 0x8000000000000000) != 0) {
              goto LABEL_24;
            }
LABEL_27:
            uint64_t v52 = v22;
            if (v5)
            {
              uint64_t v55 = (v5 - 1) & v5;
              unint64_t v56 = __clz(__rbit64(v5)) | (v24 << 6);
              int64_t v54 = v24;
            }
            else
            {
              int64_t v54 = v24 + 1;
              if (__OFADD__(v24, 1))
              {
                __break(1u);
                goto LABEL_74;
              }
              if (v54 >= v95) {
                break;
              }
              unint64_t v57 = *(void *)(*(void *)type + 8 * v54);
              if (!v57)
              {
                int64_t v58 = v24 + 2;
                if (v24 + 2 >= v95) {
                  break;
                }
                unint64_t v57 = *(void *)(*(void *)type + 8 * v58);
                if (v57) {
                  goto LABEL_36;
                }
                int64_t v58 = v24 + 3;
                if (v24 + 3 >= v95) {
                  break;
                }
                unint64_t v57 = *(void *)(*(void *)type + 8 * v58);
                if (v57)
                {
LABEL_36:
                  int64_t v54 = v58;
                }
                else
                {
                  int64_t v54 = v24 + 4;
                  if (v24 + 4 >= v95) {
                    break;
                  }
                  unint64_t v57 = *(void *)(*(void *)type + 8 * v54);
                  if (!v57)
                  {
                    int64_t v62 = v24 + 5;
                    while (v95 != v62)
                    {
                      unint64_t v57 = *(void *)(*(void *)type + 8 * v62++);
                      if (v57)
                      {
                        int64_t v54 = v62 - 1;
                        goto LABEL_37;
                      }
                    }
                    break;
                  }
                }
              }
LABEL_37:
              uint64_t v55 = (v57 - 1) & v57;
              unint64_t v56 = __clz(__rbit64(v57)) + (v54 << 6);
            }
            id v53 = *(id *)(*(void *)(v21 + 48) + 8 * v56);
          }
          while (v53);
        }
      }
      sub_1000C1AF8();
    }
  }
  else
  {
    id v17 = [a1 accountID];
    sub_100472378(0, v17, a4);
    if (v4)
    {
    }
    else
    {
      uint64_t v32 = v18;
      if (qword_100906F58 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      sub_10008E2DC(v33, (uint64_t)qword_10090D0C8);
      id v34 = a2;
      id v35 = v32;
      id v36 = v34;
      id v37 = v35;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = swift_slowAlloc();
        os_log_type_t v112 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136446466;
        id v41 = [v36 remObjectID];
        sub_100094134((uint64_t *)&unk_100914BC0);
        os_log_type_t typec = v39;
        uint64_t v42 = Optional.descriptionOrNil.getter();
        unint64_t v44 = v43;

        sub_1000C51B8(v42, v44, (uint64_t *)&v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v40 + 12) = 2082;
        id v45 = [v37 remObjectID];
        uint64_t v46 = Optional.descriptionOrNil.getter();
        unint64_t v48 = v47;

        sub_1000C51B8(v46, v48, (uint64_t *)&v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, typec, "Updating cdTemplate.account {cdTemplate: %{public}s, account: %{public}s}", (uint8_t *)v40, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v36 setAccount:v37];
    }
  }
}

void sub_100169F4C(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for REMJSONDeserializationError();
  if (objc_msgSend(a2, "shouldUpdateSectionsOrdering", __chkstk_darwin(v5).n128_f64[0]))
  {
    id v6 = [a1 storeControllerManagedObjectContext];
    if (v6)
    {
      id v7 = v6;
      id v8 = [a2 objectID];
      if (qword_100907480 != -1) {
        swift_once();
      }
      uint64_t v9 = sub_1003DD360((unint64_t)v8, 0, (uint64_t)v7, (Class)qword_100942208, 0, 0);
      if (v2)
      {
      }
      else
      {
        uint64_t v22 = v7;
        unint64_t v23 = v9;
        uint64_t v20 = a1;
        uint64_t v21 = v8;
        id v10 = [a1 sectionIDsOrderingAsData];
        if (v10)
        {
          NSString v11 = v10;
          uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v14 = v13;

          sub_1000963CC(0, (unint64_t *)&qword_10090D600);
          static REMJSONRepresentable.fromJSONData(_:)();
          sub_100097F34(v12, v14);
          type metadata accessor for REMCDTemplateSection();
          uint64_t v15 = REMOrderedIdentifierMap.reorder<A>(objects:)();

          swift_bridgeObjectRelease();
          unint64_t v16 = v15;
        }
        else
        {
          unint64_t v16 = v23;
        }
        sub_100200284(v16);
        swift_bridgeObjectRelease();
        id v17 = objc_allocWithZone((Class)NSMutableOrderedSet);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v19 = [v17 initWithArray:isa];

        [v20 setSections:v19];
      }
    }
  }
}

uint64_t sub_10016A7B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

const char *sub_10016A818()
{
  return "lastModifiedDate";
}

uint64_t sub_10016A824@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015F3CC(a1, (SEL *)&selRef_lastModifiedDate, a2);
}

void sub_10016A844(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_10016A864()
{
  return "sourceListIDURL";
}

const char *sub_10016A878()
{
  return "creationDate";
}

uint64_t sub_10016A884@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015F3CC(a1, (SEL *)&selRef_creationDate, a2);
}

void sub_10016A8A4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10016A8C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for REMTemplateStorageCDIngestor.RelationshipOrderingValueKey()
{
  return &type metadata for REMTemplateStorageCDIngestor.RelationshipOrderingValueKey;
}

unsigned char *_s7remindd28REMTemplateStorageCDIngestorC28RelationshipOrderingValueKeyOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10016A9BCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for REMTemplateStorageCDIngestor.OrderableRelationshipKey()
{
  return &type metadata for REMTemplateStorageCDIngestor.OrderableRelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMTemplateStorageCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016AAC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMTemplateStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMTemplateStorageCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMTemplateStorageCDIngestor.ValueKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for REMTemplateStorageCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016AC54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMTemplateStorageCDIngestor.ValueKey()
{
  return &type metadata for REMTemplateStorageCDIngestor.ValueKey;
}

uint64_t sub_10016AC8C()
{
  return sub_1000B2138(&qword_10090D300, &qword_10090D308);
}

unint64_t sub_10016ACB8()
{
  unint64_t result = qword_10090D310;
  if (!qword_10090D310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D310);
  }
  return result;
}

uint64_t sub_10016AD0C()
{
  return sub_1000B2138(&qword_10090D318, &qword_10090D320);
}

unint64_t sub_10016AD38()
{
  unint64_t result = qword_10090D328;
  if (!qword_10090D328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D328);
  }
  return result;
}

uint64_t sub_10016AD8C()
{
  return sub_1000B2138(&qword_10090D330, &qword_10090D338);
}

unint64_t sub_10016ADB8()
{
  unint64_t result = qword_10090D340;
  if (!qword_10090D340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D340);
  }
  return result;
}

uint64_t sub_10016AE0C()
{
  return sub_1000B2138(&qword_10090D348, &qword_10090D350);
}

unint64_t sub_10016AE38()
{
  unint64_t result = qword_10090D358;
  if (!qword_10090D358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D358);
  }
  return result;
}

void *sub_10016AE8C(unint64_t a1, void *a2)
{
  int v2 = a2;
  *(void *)(swift_allocObject() + 16) = a2;
  if (a1 >> 62) {
    goto LABEL_24;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v5 = v2;
  if (v4)
  {
    while (1)
    {
      unint64_t v6 = 0;
      uint64_t v21 = v2;
      uint64_t v22 = v4;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        int v8 = v7;
        unint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_23;
        }
        id v10 = [v7 account];
        if (v10)
        {
          NSString v11 = v10;
          id v12 = [v10 accountTypeHost];
          unsigned int v13 = [v12 isCloudKit];

          if (v13)
          {
            if (!v2)
            {

LABEL_18:
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              uint64_t v4 = v22;
              goto LABEL_5;
            }
            id v14 = v2;
            id v15 = [v11 remObjectID];
            if (!v15)
            {

              goto LABEL_5;
            }
            unint64_t v16 = v15;
            sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
            id v17 = v14;
            int v2 = v21;
            char v18 = static NSObject.== infix(_:_:)();

            if (v18) {
              goto LABEL_18;
            }

            uint64_t v4 = v22;
          }
          else
          {
          }
        }
        else
        {
        }
LABEL_5:
        ++v6;
        if (v9 == v4) {
          goto LABEL_25;
        }
      }
      if (v6 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      id v19 = v2;
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_25;
      }
    }
    id v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_9;
  }
LABEL_25:

  swift_release();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_10016B124(unint64_t a1, void *a2)
{
  *(void *)(swift_allocObject() + 16) = a2;
  if (a1 >> 62)
  {
LABEL_23:
    id v20 = a2;
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v5 = a2;
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      unint64_t v6 = a1 & 0xC000000000000001;
      uint64_t v7 = 4;
      unint64_t v22 = a1 & 0xC000000000000001;
      unint64_t v23 = a1;
      do
      {
        if (v6) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v9 = *(id *)(a1 + 8 * v7);
        }
        id v10 = v9;
        uint64_t v11 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
        {
          __break(1u);
          goto LABEL_23;
        }
        id v12 = [v9 account];
        if (v12)
        {
          int v8 = v12;
          id v13 = [v12 accountTypeHost];
          unsigned int v14 = [v13 isCloudKit];

          if (!v14)
          {
            id v15 = v10;
LABEL_18:

            goto LABEL_5;
          }
          if (!a2)
          {
            swift_bridgeObjectRelease();

            goto LABEL_25;
          }
          id v15 = a2;
          id v16 = [v8 remObjectID];
          if (!v16)
          {

            goto LABEL_18;
          }
          id v17 = v16;
          sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
          id v18 = v15;
          char v19 = static NSObject.== infix(_:_:)();

          if (v19)
          {
            swift_bridgeObjectRelease();
            goto LABEL_25;
          }
          int v8 = v10;
          unint64_t v6 = v22;
          a1 = v23;
        }
        else
        {
          int v8 = v10;
        }
LABEL_5:

        ++v7;
      }
      while (v11 != v4);
    }
  }
  swift_bridgeObjectRelease();
  id v10 = 0;
LABEL_25:

  swift_release();
  return v10;
}

uint64_t sub_10016B390()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090D360);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090D360);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10016B458(void *a1)
{
  return sub_10016B480(a1);
}

uint64_t sub_10016B480(void *a1)
{
  uint64_t v4 = _s10PredicatesOMa_1();
  *(void *)&double v5 = __chkstk_darwin(v4).n128_u64[0];
  uint64_t v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  void *v7 = [v1 accountObjectID:v5];
  swift_storeEnumTagMultiPayload();
  id v8 = [v1 accountObjectID];
  id v9 = [a1 persistentStoreOfAccountWithAccountID:v8];

  if (v9)
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_10077A530;
    *(void *)(v10 + 32) = v9;
    uint64_t v22 = v10;
    specialized Array._endMutation()();
    uint64_t v11 = v22;
  }
  else
  {
    uint64_t v11 = 0;
  }
  id v12 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v13 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v14 = [(id)swift_getObjCClassFromMetadata() entity];
  [v13 setEntity:v14];

  if (v11)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v15.super.Class isa = 0;
  }
  [v13 setAffectedStores:v15.super.isa];

  [v13 setPredicate:v12];
  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v13 setSortDescriptors:isa];

  uint64_t v17 = (uint64_t)a1;
  uint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
  }
  else
  {
    uint64_t v22 = v18;
    sub_100094134(&qword_100910160);
    sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
    unint64_t v19 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v17 = sub_10016EC98(v19);
  }
  sub_1000ECFE0((uint64_t)v7);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_10016B7D8(void *a1)
{
  return sub_10016B480(a1);
}

uint64_t sub_10016B800(uint64_t a1)
{
  uint64_t v4 = _s10PredicatesOMa_1();
  *(void *)&double v5 = __chkstk_darwin(v4).n128_u64[0];
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = [v1 groupObjectID:v5];
  v7[8] = 1;
  swift_storeEnumTagMultiPayload();
  id v8 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v9 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v10 = [(id)swift_getObjCClassFromMetadata() entity];
  [v9 setEntity:v10];

  [v9 setAffectedStores:0];
  [v9 setPredicate:v8];

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v9 setSortDescriptors:isa];

  uint64_t v12 = a1;
  uint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    sub_1000ECFE0((uint64_t)v7);
  }
  else
  {
    v16[1] = v13;
    sub_100094134(&qword_100910160);
    sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
    unint64_t v14 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    uint64_t v12 = sub_10016EC98(v14);
    sub_1000ECFE0((uint64_t)v7);
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t sub_10016BA90(uint64_t a1)
{
  return sub_10016B800(a1);
}

uint64_t sub_10016BAB4(uint64_t a1)
{
  return sub_10016BF10(a1);
}

uint64_t sub_10016BAD0(uint64_t a1)
{
  return sub_10016BF10(a1);
}

uint64_t sub_10016BAF8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10016BBDC(a1, a2, a3, (void *)2);
}

void *sub_10016BB14(void *a1)
{
  uint64_t v4 = *v1;
  id v5 = [v4 accountObjectID];
  sub_10016E90C(a1, v5, (char)[v4 debug_useInMemoryPreferredDefaultListStorage], 0);
  unint64_t v7 = v6;

  if (!v2)
  {
    a1 = (void *)sub_10016EC98(v7);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_10016BBC0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10016BBDC(a1, a2, a3, (void *)1);
}

uint64_t sub_10016BBDC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = v5;
  sub_10016E90C(a1, a4, (char)[*v4 debug_useInMemoryPreferredDefaultListStorage], 0);
  if (!v5)
  {
    uint64_t v6 = sub_10016EC98(v7);
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_10016BC64(uint64_t a1)
{
  uint64_t v4 = _s10PredicatesOMa_1();
  *(void *)&double v5 = __chkstk_darwin(v4).n128_u64[0];
  unint64_t v7 = (void *)((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  void *v7 = [v1 accountObjectID:v5];
  swift_storeEnumTagMultiPayload();
  id v8 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v9 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v10 = [(id)swift_getObjCClassFromMetadata() entity];
  [v9 setEntity:v10];

  [v9 setAffectedStores:0];
  [v9 setPredicate:v8];

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v9 setSortDescriptors:isa];

  uint64_t v12 = a1;
  uint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    sub_1000ECFE0((uint64_t)v7);
  }
  else
  {
    v16[1] = v13;
    sub_100094134(&qword_100910160);
    sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
    unint64_t v14 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    uint64_t v12 = sub_10016EC98(v14);
    sub_1000ECFE0((uint64_t)v7);
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t sub_10016BEEC(uint64_t a1)
{
  return sub_10016BC64(a1);
}

uint64_t sub_10016BF10(uint64_t a1)
{
  uint64_t v4 = _s10PredicatesOMa_1();
  *(void *)&double v5 = __chkstk_darwin(v4).n128_u64[0];
  unint64_t v7 = (void *)((char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = [v1 objectIDs:v5];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t *v7 = v9;
  swift_storeEnumTagMultiPayload();
  id v10 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v11 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v12 = [(id)swift_getObjCClassFromMetadata() entity];
  [v11 setEntity:v12];

  [v11 setAffectedStores:0];
  [v11 setPredicate:v10];

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v11 setSortDescriptors:isa];

  uint64_t v14 = a1;
  uint64_t v15 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    sub_1000ECFE0((uint64_t)v7);
  }
  else
  {
    v18[1] = v15;
    sub_100094134(&qword_100910160);
    sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
    unint64_t v16 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    uint64_t v14 = sub_10016EC98(v16);
    sub_1000ECFE0((uint64_t)v7);
    swift_bridgeObjectRelease();
  }
  return v14;
}

uint64_t sub_10016C1CC(uint64_t a1)
{
  return sub_10016BF10(a1);
}

uint64_t sub_10016C1F4(uint64_t a1)
{
  uint64_t v4 = _s10PredicatesOMa_1();
  *(void *)&double v5 = __chkstk_darwin(v4).n128_u64[0];
  unint64_t v7 = (void *)((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = [v1 accountObjectID:v5];
  id v9 = [v1 externalIdentifiers];
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  void *v7 = v8;
  v7[1] = v10;
  swift_storeEnumTagMultiPayload();
  id v11 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v12 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v13 = [(id)swift_getObjCClassFromMetadata() entity];
  [v12 setEntity:v13];

  [v12 setAffectedStores:0];
  [v12 setPredicate:v11];

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v12 setSortDescriptors:isa];

  uint64_t v15 = a1;
  uint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    sub_1000ECFE0((uint64_t)v7);
  }
  else
  {
    v19[1] = v16;
    sub_100094134(&qword_100910160);
    sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
    unint64_t v17 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    uint64_t v15 = sub_10016EC98(v17);
    sub_1000ECFE0((uint64_t)v7);
    swift_bridgeObjectRelease();
  }
  return v15;
}

uint64_t sub_10016C4B0(uint64_t a1)
{
  return sub_10016C1F4(a1);
}

uint64_t sub_10016C4D4(uint64_t a1)
{
  return sub_10016BF10(a1);
}

uint64_t sub_10016C4FC(uint64_t a1)
{
  uint64_t v4 = _s10PredicatesOMa_1();
  *(void *)&double v5 = __chkstk_darwin(v4).n128_u64[0];
  unint64_t v7 = (void *)((char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = [v1 externalIdentifier:v5];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  id v12 = [v1 accountObjectID];
  uint64_t *v7 = v9;
  v7[1] = v11;
  v7[2] = (uint64_t)v12;
  swift_storeEnumTagMultiPayload();
  id v13 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v14 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v15 = [(id)swift_getObjCClassFromMetadata() entity];
  [v14 setEntity:v15];

  [v14 setAffectedStores:0];
  [v14 setPredicate:v13];

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v14 setSortDescriptors:isa];

  uint64_t v17 = a1;
  uint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    sub_1000ECFE0((uint64_t)v7);
  }
  else
  {
    v21[1] = v18;
    sub_100094134(&qword_100910160);
    sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
    unint64_t v19 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    uint64_t v17 = sub_10016EC98(v19);
    sub_1000ECFE0((uint64_t)v7);
    swift_bridgeObjectRelease();
  }
  return v17;
}

uint64_t sub_10016C7B8(uint64_t a1)
{
  return sub_10016C4FC(a1);
}

uint64_t sub_10016C7DC(uint64_t a1)
{
  return sub_10016F0A0(a1);
}

void sub_10016C7F4(uint64_t a1)
{
  int v3 = v1;
  id v5 = [v3 templateObjectID];
  uint64_t v6 = (void *)sub_1002E3C78(v5, a1, 0, 0);

  if (!v2)
  {
    id v7 = [v6 account];
    if (v7)
    {
      id v8 = v7;
      id v9 = [self sharedConfiguration];
      [v9 templatePublicLinkTTL];

      id v18 = sub_10016700C(v6);
      id v19 = sub_10028AA2C(v8);
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_10077A530;
      *(void *)(v20 + 32) = v19;
      specialized Array._endMutation()();
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_10077A530;
      *(void *)(v21 + 32) = v18;
      specialized Array._endMutation()();
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_10077A530;
      id v28 = v19;
      id v23 = v18;
      *(void *)(v22 + 32) = [v3 templateObjectID];
      specialized Array._endMutation()();
      id v24 = objc_allocWithZone((Class)REMListsDataViewInvocationResult);
      sub_1000963CC(0, &qword_100910180);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000963CC(0, (unint64_t *)&unk_100914440);
      Class v26 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      Class v27 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v24 initWithAccountStorages:isa listStorages:v26 objectIDs:v27];
    }
    else
    {
      uint64_t v10 = self;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      id v11 = [v6 description];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v14 = v13;

      v15._countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = 125;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v10 internalErrorWithDebugDescription:v17];

      swift_willThrow();
    }
  }
}

void sub_10016CBC4(uint64_t a1)
{
}

uint64_t sub_10016CBE8()
{
  id v0 = [self daemonUserDefaults];
  type metadata accessor for REMDaemonUserDefaultsPreferredListStorageAdapter();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  qword_100941FF0 = result;
  return result;
}

uint64_t type metadata accessor for REMDaemonUserDefaultsPreferredListStorageAdapter()
{
  return self;
}

uint64_t sub_10016CC68@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*(id *)(*(void *)v1 + 16) preferredDefaultListObjectIDUrl];
  if (v3)
  {
    uint64_t v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

uint64_t sub_10016CD34(uint64_t a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(*(void *)v1 + 16);
  sub_10016D52C(a1, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    uint64_t v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  }
  [v6 setPreferredDefaultListObjectIDUrl:v10];

  return sub_10016D594(a1);
}

id sub_10016CE74()
{
  id v1 = [*(id *)(*(void *)v0 + 16) preferredDefaultListID];

  return v1;
}

void sub_10016CEB0(void *a1)
{
  [*(id *)(*(void *)v1 + 16) setPreferredDefaultListID:a1];
}

uint64_t sub_10016CEFC()
{
  uint64_t v0 = type metadata accessor for UnfairLock.Options();
  __chkstk_darwin(v0);
  type metadata accessor for MockInMemoryPreferredDefaultListStorage();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListObjectIDUrl;
  uint64_t v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(void *)(v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListID) = 0;
  sub_10016F330();
  sub_100094134(&qword_100908280);
  sub_1000BFEAC((unint64_t *)&qword_100908288, &qword_100908280);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for UnfairLock();
  swift_allocObject();
  uint64_t result = UnfairLock.init(options:)();
  *(void *)(v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_lock) = result;
  qword_100941FF8 = v1;
  return result;
}

uint64_t sub_10016D074(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListObjectIDUrl;
  swift_beginAccess();
  sub_10016D65C(a2, v3);
  return swift_endAccess();
}

uint64_t sub_10016D0D0()
{
  sub_10016D594(v0 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListObjectIDUrl);

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10016D154()
{
  return type metadata accessor for MockInMemoryPreferredDefaultListStorage();
}

uint64_t type metadata accessor for MockInMemoryPreferredDefaultListStorage()
{
  uint64_t result = qword_10090D488;
  if (!qword_10090D488) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10016D1A8()
{
  sub_10016D250();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10016D250()
{
  if (!qword_10090D498)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10090D498);
    }
  }
}

uint64_t sub_10016D2A8()
{
  return swift_release();
}

uint64_t sub_10016D348(uint64_t a1)
{
  return sub_10016D594(a1);
}

uint64_t sub_10016D3EC()
{
  type metadata accessor for UnfairLock();
  swift_retain();
  sub_100094134((uint64_t *)&unk_100914BC0);
  Lock.sync<A>(_:)();
  swift_release();
  return v1;
}

void sub_10016D48C(void *a1)
{
}

uint64_t sub_10016D52C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016D594(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10016D5F4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  id v4 = *(id *)(v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListID);
  *(void *)(v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListID) = v2;
  id v3 = v2;
}

id sub_10016D640@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListID);
  *a1 = v2;
  return v2;
}

uint64_t sub_10016D654()
{
  return sub_10016D074(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10016D65C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016D6C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListObjectIDUrl;
  swift_beginAccess();
  return sub_10016D52C(v3, a1);
}

uint64_t sub_10016D718()
{
  return sub_1003E8990();
}

__objc2_meth *sub_10016D724(void *a1, uint64_t a2, int a3, int a4, char **a5, uint64_t a6)
{
  unint64_t v147 = a6;
  LODWORD(v146) = a3;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v9 - 8);
  uint64_t v138 = (char *)&v134 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v134 - v12;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v139 = (char *)&v134 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v17 = (void *)_s10PredicatesOMa_1();
  __chkstk_darwin(v17);
  id v19 = (__objc2_meth **)((char *)&v134 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = (__objc2_meth *)sub_100535B3C();
  sub_1000ECFE0((uint64_t)v19);
  uint64_t v143 = a5;
  LODWORD(v144) = a4;
  uint64_t v141 = v14;
  uint64_t v140 = v15;
  if (a4)
  {
    uint64_t v21 = v20;
    uint64_t v22 = v20;
    uint64_t v23 = v145;
    id v24 = v20;
  }
  else
  {
    id v137 = v17;
    uint64_t v25 = a1;
    char v142 = v20;
    uint64_t v26 = (uint64_t)a5[3];
    Class v27 = a5[4];
    sub_1000C0DE0(a5, v26);
    (*((void (**)(uint64_t, char *))v27 + 1))(v26, v27);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    {
      sub_10016D594((uint64_t)v13);
    }
    else
    {
      uint64_t v28 = v14;
      uint64_t v29 = v139;
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v139, v13, v28);
      id v30 = [v25 persistentStoreCoordinator];
      if (v30)
      {
        uint64_t v32 = v30;
        URL._bridgeToObjectiveC()(v31);
        id v34 = v33;
        id v35 = [v32 managedObjectIDForURIRepresentation:v33];

        if (v35)
        {
          swift_storeEnumTagMultiPayload();
          id v36 = (void *)sub_100535B3C();
          sub_1000ECFE0((uint64_t)v19);
          if (v146)
          {
            uint64_t v148 = 0;
            id v37 = [v25 existingObjectWithID:v35 error:&v148];
            uint64_t v38 = v148;
            if (v37)
            {
              os_log_type_t v39 = v37;
              self;
              uint64_t v40 = swift_dynamicCastObjCClass();
              id v41 = v38;
              if (v40 && (sub_10017A87C(v40, v36) & 1) != 0)
              {
                sub_100094134((uint64_t *)&unk_10090AF20);
                uint64_t v42 = swift_allocObject();
                *(_OWORD *)(v42 + 16) = xmmword_10077A530;
                *(void *)(v42 + 32) = v40;
                uint64_t v148 = (__objc2_meth *)v42;
                specialized Array._endMutation()();
                id v24 = v148;

                (*(void (**)(char *, uint64_t))(v140 + 8))(v29, v141);
                return v24;
              }
            }
            else
            {
              unint64_t v56 = v148;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
              uint64_t v145 = 0;
            }
          }
          sub_100094134((uint64_t *)&unk_10090AF20);
          uint64_t v57 = swift_allocObject();
          *(_OWORD *)(v57 + 16) = xmmword_10077A530;
          *(void *)(v57 + 32) = v35;
          uint64_t v148 = (__objc2_meth *)v57;
          specialized Array._endMutation()();
          *id v19 = v148;
          swift_storeEnumTagMultiPayload();
          id v58 = v35;
          uint64_t v59 = (void *)sub_100535B3C();
          sub_1000ECFE0((uint64_t)v19);
          sub_100094134(&qword_10090D5A0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100776E80;
          NSString v61 = v142;
          *(void *)(inited + 32) = v142;
          *(void *)(inited + 40) = v59;
          uint64_t v148 = (__objc2_meth *)inited;
          specialized Array._endMutation()();
          int64_t v62 = v148;
          id v63 = v59;
          uint64_t v64 = v61;
          uint64_t v22 = (__objc2_meth *)sub_100397E58(v62);

          id v24 = v61;
          (*(void (**)(char *, uint64_t))(v140 + 8))(v29, v141);
          uint64_t v23 = v145;
          goto LABEL_19;
        }
      }
      (*(void (**)(char *, uint64_t))(v140 + 8))(v29, v141);
    }
    uint64_t v43 = (uint64_t)v143[3];
    unint64_t v44 = v143[4];
    sub_1000C0DE0(v143, v43);
    uint64_t v45 = (*((uint64_t (**)(uint64_t, char *))v44 + 4))(v43, v44);
    uint64_t v23 = v145;
    if (v45)
    {
      uint64_t v46 = (void *)v45;
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_10077A530;
      *(void *)(v47 + 32) = v46;
      uint64_t v148 = (__objc2_meth *)v47;
      specialized Array._endMutation()();
      *id v19 = v148;
      swift_storeEnumTagMultiPayload();
      id v48 = v46;
      uint64_t v49 = (void *)sub_100535B3C();
      sub_1000ECFE0((uint64_t)v19);
      sub_100094134(&qword_10090D5A0);
      uint64_t v50 = swift_initStackObject();
      *(_OWORD *)(v50 + 16) = xmmword_100776E80;
      uint64_t v51 = v142;
      *(void *)(v50 + 32) = v142;
      *(void *)(v50 + 40) = v49;
      uint64_t v148 = (__objc2_meth *)v50;
      specialized Array._endMutation()();
      uint64_t v52 = v148;
      id v53 = v49;
      int64_t v54 = v51;
      uint64_t v22 = (__objc2_meth *)sub_100397E58(v52);

      id v24 = v51;
    }
    else
    {
      id v24 = v142;
      uint64_t v55 = v142;
      uint64_t v22 = v24;
    }
  }
LABEL_19:
  uint64_t v139 = (char *)sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v65 = swift_initStackObject();
  *(_OWORD *)(v65 + 16) = xmmword_10077DE90;
  *(void *)(v65 + 32) = swift_getKeyPath();
  *(void *)(v65 + 40) = swift_getKeyPath();
  *(void *)(v65 + 48) = swift_getKeyPath();
  uint64_t v148 = (__objc2_meth *)v65;
  specialized Array._endMutation()();
  uint64_t v66 = v148;
  if (qword_100907890 != -1) {
    goto LABEL_46;
  }
LABEL_20:
  uint64_t v67 = (void *)sub_1003BD0F4((unint64_t)v66, qword_100942570, v147, (uint64_t)v22);
  swift_bridgeObjectRelease();
  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v67 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t v69 = NSManagedObjectContext.fetch<A>(_:)();
  if (v23)
  {

    return v24;
  }
  unint64_t v70 = v69;
  id v137 = v67;
  if ((v144 & 1) != 0 || (v146 & 1) == 0)
  {

    return (__objc2_meth *)v70;
  }
  char v142 = v24;
  id v71 = v143;
  uint64_t v72 = (uint64_t)v143[3];
  id v24 = (__objc2_meth *)v143[4];
  sub_1000C0DE0(v143, v72);
  os_log_type_t v73 = (void *)((uint64_t (*)(uint64_t, __objc2_meth *))v24[1].types)(v72, v24);
  unint64_t v74 = v70 >> 62;
  uint64_t v145 = 0;
  uint64_t v136 = v22;
  unint64_t v147 = v70;
  id v144 = v73;
  if (!v73) {
    goto LABEL_62;
  }
  uint64_t v148 = (__objc2_meth *)_swiftEmptyArrayStorage;
  unint64_t v135 = v70 >> 62;
  if (v74)
  {
    swift_bridgeObjectRetain();
    uint64_t v66 = (__objc2_meth *)_CocoaArrayWrapper.endIndex.getter();
    if (!v66)
    {
LABEL_48:
      id v24 = (__objc2_meth *)_swiftEmptyArrayStorage;
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v66 = *(__objc2_meth **)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v66) {
      goto LABEL_48;
    }
  }
  unint64_t v75 = 0;
  unint64_t v146 = v70 & 0xC000000000000001;
  uint64_t v23 = v70 & 0xFFFFFFFFFFFFFF8;
  do
  {
    if (v146)
    {
      id v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v75 >= *(void *)(v23 + 16))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        swift_once();
        goto LABEL_20;
      }
      id v76 = *(id *)(v70 + 8 * v75 + 32);
    }
    unint64_t v77 = v76;
    id v24 = (__objc2_meth *)(v75 + 1);
    if (__OFADD__(v75, 1)) {
      goto LABEL_45;
    }
    id v78 = [v76 remObjectID];
    if (v78)
    {
      Class v79 = v78;
      uint64_t v22 = v66;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      id v80 = v144;
      id v81 = v79;
      LOBYTE(v79) = static NSObject.== infix(_:_:)();

      if (v79)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
      unint64_t v70 = v147;
      uint64_t v66 = v22;
    }
    else
    {
    }
    ++v75;
  }
  while (v24 != v66);
  id v24 = v148;
  id v71 = v143;
  uint64_t v22 = v136;
LABEL_49:
  swift_bridgeObjectRelease();
  if (((unint64_t)v24 & 0x8000000000000000) != 0 || ((unint64_t)v24 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v91 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v91 != 1) {
      goto LABEL_60;
    }
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter())
    {

      swift_release_n();
      goto LABEL_61;
    }
LABEL_53:
    if (((unint64_t)v24 & 0xC000000000000001) != 0)
    {
      unint64_t v82 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!v24->imp)
      {
        __break(1u);
        goto LABEL_112;
      }
      unint64_t v82 = v24[1].types;
    }
    unint64_t v83 = v82;
    swift_bridgeObjectRelease();
    swift_release();
    id v84 = [v83 objectID];
    id v85 = [v84 URIRepresentation];

    uint64_t v86 = v138;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(v86, 0, 1, v141);
    uint64_t v87 = (uint64_t)v71;
    uint64_t v88 = (uint64_t)v71[3];
    NSString v89 = v71[4];
    sub_100096204(v87, v88);
    (*((void (**)(char *, uint64_t, char *))v89 + 2))(v86, v88, v89);

    uint64_t v90 = (id *)&v150;
    goto LABEL_104;
  }
  if (v24->imp == IMP_BOOSTED)
  {
    swift_bridgeObjectRetain();
    goto LABEL_53;
  }
LABEL_60:
  swift_release();

LABEL_61:
  unint64_t v74 = v135;
LABEL_62:
  id v92 = v142;
  uint64_t v93 = (uint64_t)v137;
  if (v74)
  {
LABEL_109:
    swift_bridgeObjectRetain();
    unint64_t v146 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    unint64_t v146 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v146)
  {

    swift_bridgeObjectRelease_n();
    return (__objc2_meth *)_swiftEmptyArrayStorage;
  }
  id v144 = (id)(v70 & 0xC000000000000001);
  uint64_t v94 = 4;
  do
  {
    id v92 = (__objc2_meth *)(v94 - 4);
    if (v144) {
      id v96 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v96 = *(id *)(v70 + 8 * v94);
    }
    id v97 = v96;
    uint64_t v93 = v94 - 3;
    if (__OFADD__(v92, 1))
    {
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
      goto LABEL_109;
    }
    id v98 = [v96 name];
    if (v98)
    {
      id v99 = v98;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v100 = self;
      NSString v101 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v102 = [v100 displayNameFromListName:v101 isPlaceholder:objc_msgSend(v97, "isPlaceholder")];

      uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v105 = v104;

      id v106 = (id)_REMGetLocalizedString();
      uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v108;

      if (v103 == v107 && v105 == v22)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_101;
      }
      char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v70 = v147;
      if (v95)
      {
        swift_bridgeObjectRelease();
        goto LABEL_101;
      }
    }

    ++v94;
  }
  while (v93 != v146);
  uint64_t v93 = 4;
  uint64_t v22 = &stru_1008F6000;
  id v71 = &selRef_intersectsSet_;
  do
  {
    id v92 = (__objc2_meth *)(v93 - 4);
    if (v144) {
      id v110 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v110 = *(id *)(v70 + 8 * v93);
    }
    id v97 = v110;
    unint64_t v70 = v93 - 3;
    if (__OFADD__(v92, 1)) {
      goto LABEL_107;
    }
    id v111 = [v110 account];
    if (v111)
    {
      os_log_type_t v112 = v111;
      id v113 = [v111 accountTypeHost];

      LODWORD(v112) = [v113 isPrimaryCloudKit];
      if (v112)
      {
LABEL_95:
        swift_bridgeObjectRelease();
        id v71 = v143;
        goto LABEL_101;
      }
    }

    ++v93;
    BOOL v109 = v70 == v146;
    unint64_t v70 = v147;
  }
  while (!v109);
  uint64_t v93 = 4;
  id v71 = &selRef_intersectsSet_;
  do
  {
    id v92 = (__objc2_meth *)(v93 - 4);
    if (v144) {
      id v114 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v114 = *(id *)(v70 + 8 * v93);
    }
    id v97 = v114;
    unint64_t v70 = v93 - 3;
    if (__OFADD__(v92, 1)) {
      goto LABEL_108;
    }
    id v115 = [v114 account];
    if (v115)
    {
      unint64_t v116 = v115;
      id v117 = [v115 accountTypeHost];

      LODWORD(v116) = [v117 isCloudKit];
      if (v116) {
        goto LABEL_95;
      }
    }

    ++v93;
    BOOL v109 = v70 == v146;
    unint64_t v70 = v147;
  }
  while (!v109);
  swift_bridgeObjectRelease();
  id v71 = v143;
  if (v144)
  {
    id v118 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_100;
  }
  if (!*(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
LABEL_112:
  }
    __break(1u);
  id v118 = *(id *)(v70 + 32);
LABEL_100:
  id v97 = v118;
LABEL_101:
  swift_bridgeObjectRelease();
  uint64_t v119 = (uint64_t)v71[3];
  uint64_t v120 = v71[4];
  sub_1000C0DE0(v71, v119);
  uint64_t v121 = (uint64_t (*)(uint64_t, char *))*((void *)v120 + 4);
  id v122 = v97;
  uint64_t v123 = (void *)v121(v119, v120);

  if (!v123)
  {
    id v124 = [v122 remObjectID];
    uint64_t v125 = (uint64_t)v71[3];
    char v126 = v71[4];
    sub_100096204((uint64_t)v71, v125);
    (*((void (**)(id, uint64_t, char *))v126 + 5))(v124, v125, v126);
    id v127 = [v122 objectID];
    id v128 = [v127 URIRepresentation];

    uint64_t v129 = v138;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(v129, 0, 1, v141);
    uint64_t v130 = (uint64_t)v71[3];
    uint64_t v131 = v71[4];
    sub_100096204((uint64_t)v71, v130);
    (*((void (**)(char *, uint64_t, char *))v131 + 2))(v129, v130, v131);
  }
  uint64_t v132 = swift_allocObject();
  *(_OWORD *)(v132 + 16) = xmmword_10077A530;
  *(void *)(v132 + 32) = v122;
  uint64_t v148 = (__objc2_meth *)v132;
  specialized Array._endMutation()();
  id v24 = v148;

  uint64_t v90 = (id *)&v149;
LABEL_104:

  return v24;
}

void sub_10016E90C(void *a1, void *a2, char a3, uint64_t a4)
{
  if (a3)
  {
    if (qword_100906F80 != -1) {
      swift_once();
    }
    uint64_t v8 = (char *)type metadata accessor for MockInMemoryPreferredDefaultListStorage();
    uint64_t v9 = &qword_100941FF8;
    uint64_t v10 = (char *)&off_1008BC510;
  }
  else
  {
    if (qword_100906F78 != -1) {
      swift_once();
    }
    uint64_t v8 = (char *)type metadata accessor for REMDaemonUserDefaultsPreferredListStorageAdapter();
    uint64_t v9 = &qword_100941FF0;
    uint64_t v10 = (char *)&off_1008BC548;
  }
  uint64_t v11 = (char *)*v9;
  v29[3] = v8;
  v29[4] = v10;
  v29[0] = v11;
  swift_retain();
  if (a2 == (void *)2) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = a2;
  }
  if (a2 == (void *)1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  BOOL v14 = a2 != (void *)1 && a2 != (void *)2;
  sub_10016F308(a2);
  uint64_t v15 = sub_10016D724(a1, a2 == (void *)1, a2 != (void *)1, 0, v29, a4);
  if (v4) {
    goto LABEL_21;
  }
  unint64_t v16 = (unint64_t)v15;
  if (!v14) {
    goto LABEL_21;
  }
  id v17 = v13;
  unint64_t v18 = (unint64_t)sub_10016AE8C(v16, v13);
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_21;
    }
  }
  else if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_21:
    sub_10016F31C(a2);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v29);
    return;
  }
  uint64_t v20 = sub_10016D724(a1, 0, 0, 1, v29, a4);
  id v21 = v17;
  uint64_t v22 = sub_10016B124((unint64_t)v20, v13);
  uint64_t v23 = v22;
  if (v22)
  {
    id v24 = v22;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  swift_bridgeObjectRelease();

  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_29;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v28) {
    goto LABEL_34;
  }
LABEL_29:
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
    id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_32;
  }
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v25 = (id)_swiftEmptyArrayStorage[4];
LABEL_32:
    id v26 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_10077A530;
    *(void *)(v27 + 32) = v26;
    specialized Array._endMutation()();
    goto LABEL_21;
  }
  __break(1u);
}

uint64_t sub_10016EC98(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906F70 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_10008E2DC(v2, (uint64_t)qword_10090D360);
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  id v26 = (void *)a1;
  __chkstk_darwin(v7);
  *(&v24 - 2) = (uint64_t)v5;
  sub_100094134(&qword_100910160);
  uint64_t v8 = sub_1000963CC(0, (unint64_t *)&unk_100914440);
  sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
  uint64_t v24 = v8;
  unint64_t v9 = v25;
  uint64_t v10 = Sequence.map<A>(skippingError:_:)();
  if (v9)
  {
    swift_errorRelease();
    unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    unint64_t v11 = v10;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v12) {
    goto LABEL_16;
  }
  id v26 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v12 & 0x8000000000000000) == 0)
  {
    unint64_t v25 = a1;
    uint64_t v14 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v15 = *(id *)(v11 + 8 * v14 + 32);
      }
      unint64_t v16 = v15;
      ++v14;
      id v17 = [v15 objectID];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v12 != v14);
    a1 = v25;
LABEL_16:
    sub_10053ACE4(a1);
    id v26 = v18;
    sub_100201C64(v11);
    id v19 = objc_allocWithZone((Class)REMListsDataViewInvocationResult);
    sub_1000963CC(0, &qword_100910180);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v21 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    Class v22 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v23 = [v19 initWithAccountStorages:isa listStorages:v21 objectIDs:v22];

    return (uint64_t)v23;
  }
  __break(1u);
  return result;
}

uint64_t sub_10016F094()
{
  return sub_1003E8990();
}

uint64_t sub_10016F0A0(uint64_t a1)
{
  uint64_t v3 = _s10PredicatesOMa_1();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v7 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v8 = [(id)swift_getObjCClassFromMetadata() entity];
  [v7 setEntity:v8];

  [v7 setAffectedStores:0];
  [v7 setPredicate:v6];

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v7 setSortDescriptors:isa];

  uint64_t v10 = a1;
  uint64_t v11 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    sub_1000ECFE0((uint64_t)v5);
  }
  else
  {
    v14[1] = v11;
    sub_100094134(&qword_100910160);
    sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
    unint64_t v12 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    uint64_t v10 = sub_10016EC98(v12);
    sub_1000ECFE0((uint64_t)v5);
    swift_bridgeObjectRelease();
  }
  return v10;
}

id sub_10016F308(id result)
{
  if ((char *)result - 1 >= (char *)2) {
    return result;
  }
  return result;
}

void sub_10016F31C(id a1)
{
  if ((char *)a1 - 1 >= (char *)2) {
}
  }

unint64_t sub_10016F330()
{
  unint64_t result = qword_100908278;
  if (!qword_100908278)
  {
    type metadata accessor for UnfairLock.Options();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100908278);
  }
  return result;
}

uint64_t sub_10016F388()
{
  return _swift_deallocObject(v0, 24, 7);
}

const char *sub_10016F3D0()
{
  return "parentAccount";
}

uint64_t sub_10016F3E8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090D5A8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090D5A8);
  if (qword_1009077F0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942418);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_10016F4B0(uint64_t a1)
{
  Swift::Int v2 = v1;
  uint64_t v4 = type metadata accessor for REMGroceryModelError();
  __chkstk_darwin(v4);
  id v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v58 = &_swiftEmptySetSingleton;
  uint64_t v55 = *(void *)(a1 + 16);
  if (!v55)
  {
    uint64_t v52 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    return v52;
  }
  uint64_t v8 = v5;
  uint64_t v9 = type metadata accessor for REMGroceryDummyModel();
  uint64_t v53 = a1 + 32;
  uint64_t v54 = v9;
  uint64_t v51 = (uint64_t (**)(char *, uint64_t))(v8 + 88);
  int v50 = enum case for REMGroceryModelError.unsupportedLanguage(_:);
  uint64_t v41 = v8;
  uint64_t v49 = (void (**)(char *, uint64_t))(v8 + 96);
  uint64_t v42 = a1;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  uint64_t v52 = _swiftEmptyArrayStorage;
  *(void *)&long long v11 = 136315138;
  long long v47 = v11;
  uint64_t v46 = (char *)&type metadata for Any + 8;
  uint64_t v44 = v4;
  id v48 = v7;
  while (1)
  {
    unint64_t v12 = (uint64_t *)(v53 + 16 * v10);
    uint64_t v14 = *v12;
    unint64_t v13 = v12[1];
    swift_bridgeObjectRetain();
    uint64_t v15 = static REMGroceryDummyModel.modelBaseLocale(for:)();
    if (v2) {
      break;
    }
    Swift::Int v22 = v16;
    if (v16)
    {
      Swift::Int v23 = v15;
      uint64_t v24 = v58;
      if (!v58[2]) {
        goto LABEL_31;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v25 = Hasher._finalize()();
      uint64_t v26 = -1 << *((unsigned char *)v24 + 32);
      unint64_t v27 = v25 & ~v26;
      uint64_t v45 = v24 + 7;
      if (((*(void *)((char *)v24 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v27) & 1) == 0)
      {
LABEL_30:
        swift_bridgeObjectRelease();
LABEL_31:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v52 = sub_100308F88(0, v52[2] + 1, 1, v52);
        }
        id v7 = v48;
        unint64_t v35 = v52[2];
        unint64_t v34 = v52[3];
        if (v35 >= v34 >> 1) {
          uint64_t v52 = sub_100308F88((void *)(v34 > 1), v35 + 1, 1, v52);
        }
        id v36 = v52;
        void v52[2] = v35 + 1;
        id v37 = &v36[2 * v35];
        v37[4] = v14;
        v37[5] = v13;
        sub_10031DC68(&v56, v23, v22);
        swift_bridgeObjectRelease();
        uint64_t v4 = v44;
        goto LABEL_5;
      }
      uint64_t v28 = (void *)(v24[6] + 16 * v27);
      if (*v28 != v23 || v22 != v28[1])
      {
        uint64_t v40 = v24[6];
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          uint64_t v43 = ~v26;
          unint64_t v30 = (v27 + 1) & ~v26;
          uint64_t v31 = v40;
          if (((*(void *)((char *)v45 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) == 0) {
            goto LABEL_30;
          }
          while (1)
          {
            uint64_t v32 = (void *)(v31 + 16 * v30);
            BOOL v33 = *v32 == v23 && v22 == v32[1];
            if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
            unint64_t v30 = (v30 + 1) & v43;
            if (((*(void *)((char *)v45 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) == 0) {
              goto LABEL_30;
            }
          }
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = v44;
      id v7 = v48;
    }
    swift_bridgeObjectRelease();
LABEL_5:
    if (++v10 == v55)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v52;
    }
  }
  Swift::Int v56 = v2;
  swift_errorRetain();
  sub_100094134((uint64_t *)&unk_10090ABB0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  int v17 = (*v51)(v7, v4);
  if (v17 == v50)
  {
    swift_errorRelease();
    (*v49)(v7, v4);
    swift_bridgeObjectRelease();
    if (qword_100906F88 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_10090D5A8);
    swift_bridgeObjectRetain();
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = v47;
      swift_bridgeObjectRetain();
      *(void *)(v21 + 4) = sub_1000C51B8(v14, v13, &v57);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "remRemovingThoseWithTheSameBaseLocaleIDAndDroppingGroceryUnsupportedLocaleID, unsupportedLanguage: %s", (uint8_t *)v21, 0xCu);
      swift_arrayDestroy();
      id v7 = v48;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_errorRelease();
    Swift::Int v2 = 0;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v7, v4);
LABEL_40:
  swift_errorRelease();
  return v52;
}

uint64_t sub_10016FAD4()
{
  return sub_10016FBA4(&qword_100909E68);
}

uint64_t sub_10016FB3C()
{
  return sub_10016FBA4((unint64_t *)&unk_10090D5F0);
}

uint64_t sub_10016FBA4(unint64_t *a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = (char *)[objc_allocWithZone((Class)type metadata accessor for RDJSONCoder()) init];
  [v1 encodeWithCoder:v4];
  uint64_t v5 = self;
  uint64_t v6 = &v4[OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts];
  swift_beginAccess();
  if (!*(void *)(*(void *)v6 + 16))
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v31 = 0;
  id v8 = [v5 dataWithJSONObject:isa options:0 error:&v31];

  id v9 = v31;
  if (v8)
  {
    uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    static String.Encoding.utf8.getter();
    uint64_t v13 = String.init(data:encoding:)();
    if (v14)
    {
      uint64_t v15 = v13;
      sub_100097F34(v10, v12);

      return v15;
    }
    int v17 = self;
    NSString v18 = String._bridgeToObjectiveC()();
    [v17 internalErrorWithDebugDescription:v18];

    swift_willThrow();
    sub_100097F34(v10, v12);
  }
  else
  {
    Swift::Int v16 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  if (qword_100906FA0 != -1) {
    goto LABEL_14;
  }
LABEL_8:
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_10090D770);
  id v20 = v1;
  swift_errorRetain();
  id v21 = v20;
  swift_errorRetain();
  Swift::Int v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    id v31 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    sub_1000963CC(0, a1);
    id v25 = v21;
    uint64_t v26 = String.init<A>(describing:)();
    sub_1000C51B8(v26, v27, (uint64_t *)&v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v28 = Error.localizedDescription.getter();
    sub_1000C51B8(v28, v29, (uint64_t *)&v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "RDJSONCoder failed to encode object as JSON {class: %s, error: %s}", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  return 0;
}

uint64_t sub_100170048()
{
  return sub_10016FBA4(&qword_10090D5E8);
}

uint64_t sub_1001700B0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090D5C0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090D5C0);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_100170180(char a1)
{
  unint64_t result = 0x626D456567646162;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726F6C6F63;
      break;
    case 2:
      unint64_t result = 0x61447265746C6966;
      break;
    case 3:
      unint64_t result = 0xD000000000000026;
      break;
    case 4:
      unint64_t result = 0xD000000000000028;
      break;
    case 5:
      unint64_t result = 0xD000000000000022;
      break;
    case 6:
      unint64_t result = 1701667182;
      break;
    case 7:
      unint64_t result = 0x6341746E65726170;
      break;
    case 8:
      unint64_t result = 0x694C746E65726170;
      break;
    case 9:
      unint64_t result = 0xD000000000000018;
      break;
    case 10:
      unint64_t result = 0xD000000000000017;
      break;
    case 11:
      unint64_t result = 0x73694C7472616D73;
      break;
    case 12:
      unint64_t result = 0x53676E6974726F73;
      break;
    case 13:
      unint64_t result = 0x614464656E6E6970;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100170364(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100170180(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100170180(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1001703F0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100170180(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100170454()
{
  sub_100170180(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001704A8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100170180(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100170508@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100175084(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100170538@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100170180(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100170564(void *a1@<X8>)
{
  *a1 = &off_1008B3310;
}

void _sSo14REMCDSmartListC7reminddE19sortChildrenObjectsyyF_0()
{
  char v1 = v0;
  if ((sub_100170E7C() & 1) == 0)
  {
    id v2 = [v0 remObjectID];
    if (v2)
    {
      id v29 = v2;
      id v3 = [v0 storeControllerManagedObjectContext];
      if (v3)
      {
        unint64_t v4 = v3;
        uint64_t v5 = qword_100907108;
        id v6 = v29;
        if (v5 != -1) {
          swift_once();
        }
        uint64_t v7 = sub_1001D7584((unint64_t)v29, 0, (uint64_t)v4, (Class)qword_100942098, 0, 0);

        id v8 = [v1 sectionIDsOrderingAsData];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v12 = v11;

          sub_1000963CC(0, (unint64_t *)&qword_10090D600);
          static REMJSONRepresentable.fromJSONData(_:)();
          sub_100097F34(v10, v12);
          type metadata accessor for REMCDSmartListSection();
          unint64_t v13 = REMOrderedIdentifierMap.reorder<A>(objects:)();
          swift_bridgeObjectRelease();
          if (qword_100906F90 != -1) {
            swift_once();
          }
          uint64_t v14 = type metadata accessor for Logger();
          sub_10008E2DC(v14, (uint64_t)qword_10090D5C0);
          id v15 = v1;
          Swift::Int v16 = Logger.logObject.getter();
          os_log_type_t v17 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v16, v17))
          {
            os_log_type_t log = v17;
            id v30 = v31[0];
            NSString v18 = (uint8_t *)swift_slowAlloc();
            v31[0] = (id)swift_slowAlloc();
            *(_DWORD *)NSString v18 = 136315138;
            id v19 = [v15 remObjectID];
            if (v19)
            {
              id v20 = v19;
              id v21 = [v19 description];

              uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v24 = v23;
            }
            else
            {
              uint64_t v22 = 7104878;
              unint64_t v24 = 0xE300000000000000;
            }
            sub_1000C51B8(v22, v24, (uint64_t *)v31);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v16, log, "REMCDSmartList+CloudKit#sortChildSections(): Sorted child sections {cdSmartList: %s}", v18, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
        }
        else
        {
          unint64_t v13 = v7;
        }
        sub_1002004DC(v13);
        swift_bridgeObjectRelease();
        id v25 = objc_allocWithZone((Class)NSMutableOrderedSet);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v27 = [v25 initWithArray:isa];

        [v1 setSections:v27];
      }
      else
      {
      }
    }
  }
}

uint64_t sub_100170E7C()
{
  id v1 = [v0 managedObjectContext];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (!v3)
  {
LABEL_11:

    return 0;
  }
  unint64_t v4 = (void *)v3;
  uint64_t v5 = (uint64_t)[v0 recordID];
  if (v5)
  {
    if ([v4 containerShouldSortChildrenAfterFetchingWithRecordID:v5])
    {
      if (qword_100906F90 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_10008E2DC(v6, (uint64_t)qword_10090D5C0);
      id v7 = (id)v5;
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v8, v9))
      {

        return 1;
      }
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      unint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138543362;
      id v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v11 = v5;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sorting children (reminders and/or sections) deferred {smartListRecordID: %{public}@}", v10, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      uint64_t v5 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_9;
    }

    goto LABEL_11;
  }
LABEL_9:

  return v5;
}

_UNKNOWN **static REMCDSmartList.recordTypes()()
{
  return &off_1008B5B78;
}

uint64_t static REMCDSmartList.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  swift_bridgeObjectRetain();
  id v6 = a4;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [self objectWithRecordID:v5 accountID:v7 context:v6];

  if (v8)
  {
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDSmartList.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      id v12 = v11;
      [v10 setAccount:a2];
      [v10 mergeDataFromRecord:a1 accountID:v12];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_100906F90 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_10090D5C0);
      id v14 = a2;
      id v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          id v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDSmartList.recordType()()
{
  uint64_t v0 = 0x73694C7472616D53;
  id v1 = (void *)0xE900000000000074;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDSmartList.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  uint64_t v3 = v2;
  swift_getObjectType();
  NSString v5 = String._bridgeToObjectiveC()();
  v13.receiver = v3;
  v13.super_class = (Class)REMCDSmartList;
  [super mergeDataFromRecord:from.super.isa accountID:v5];

  id v6 = [(objc_class *)from.super.isa recordID];
  NSString v7 = [v6 recordName];

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v8 = [v3 ckIdentifierFromRecordName:v7];

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setCkIdentifier:v8];

  id v9 = [v3 mergeDataRevertedLocallyMarkedForDeletion];
  id v10 = [v3 mergeDataRefusedToMergeMarkedForDeletion];
  id v11 = v3;
  id v12 = from.super.isa;
  sub_1004B9AE0((uint64_t)v12, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, v11, v12);
}

void sub_10017193C(unsigned __int8 *a1, void *a2, void *a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v210 = a5;
  uint64_t v213 = 0;
  uint64_t v214 = a4;
  id v217 = a3;
  id v218 = a2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  NSString v8 = (char *)&v208 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v212 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v212);
  uint64_t v211 = (char *)&v208 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  Class v208 = (char *)&v208 - v11;
  id v12 = (void *)type metadata accessor for UUID();
  uint64_t v215 = *(v12 - 1);
  id v216 = v12;
  __chkstk_darwin(v12);
  uint64_t v209 = (char *)&v208 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  os_log_type_t v16 = (char *)&v208 - v15;
  uint64_t v17 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v17 - 8);
  __chkstk_darwin(v18);
  id v20 = (char *)&v208 - v19;
  __chkstk_darwin(v21);
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v208 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v208 - v26;
  __chkstk_darwin(v28);
  __chkstk_darwin(v29);
  id v31 = (char *)&v208 - v30;
  __chkstk_darwin(v32);
  __chkstk_darwin(v33);
  __chkstk_darwin((char *)&v208 - v34);
  id v36 = (char *)&v208 - v35;
  __chkstk_darwin(v37);
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v208 - v39;
  *(void *)&double v48 = __chkstk_darwin(v41).n128_u64[0];
  int v50 = (char *)&v208 - v49;
  uint64_t v51 = *a1;
  id v52 = v218;
  switch(v51)
  {
    case 1:
      uint64_t v54 = CKRecord.subscript.getter();
      if (v54)
      {
        uint64_t v221 = v54;
        sub_100094134(&qword_100909AB0);
        if (swift_dynamicCast())
        {
          Class isa = (void *)sub_1000D3BEC(v219, v220);
          swift_bridgeObjectRelease();
          if (isa)
          {
            [v52 setColor:isa];
            goto LABEL_71;
          }
        }
      }
      [v52 setColor:0];
      return;
    case 2:
      id v55 = [v217 encryptedValues:v48];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_unknownObjectRelease();
      unint64_t v56 = v220;
      if (v220 >> 60 == 15)
      {
        Class isa = 0;
      }
      else
      {
        uint64_t v108 = v219;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v108, v56);
      }
      [v52 setFilterData:isa];
      goto LABEL_71;
    case 3:
      return;
    case 4:
      id v57 = [v217 encryptedValues:v48];
      NSString v58 = String._bridgeToObjectiveC()();
      id v59 = [v57 objectForKeyedSubscript:v58];
      swift_unknownObjectRelease();

      if (v59)
      {
        uint64_t v221 = (uint64_t)v59;
        sub_100094134(&qword_100909AB0);
        int v60 = swift_dynamicCast();
        if (v60) {
          uint64_t v61 = v219;
        }
        else {
          uint64_t v61 = 0;
        }
        if (v60) {
          id v59 = (id)v220;
        }
        else {
          id v59 = 0;
        }
      }
      else
      {
        uint64_t v61 = 0;
      }
      id v109 = [v52 membershipsOfRemindersInSectionsChecksum];
      if (v109)
      {
        id v110 = v109;
        uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v113 = v112;

        if (v59)
        {
          if (v111 == v61 && v59 == v113)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
          char v133 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v133)
          {
            swift_bridgeObjectRelease();
            return;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else if (!v59)
      {
        return;
      }
      id v216 = [v52 membershipsOfRemindersInSectionsChecksum];
      id v134 = [v52 membershipsOfRemindersInSectionsAsData];
      if (v134)
      {
        unint64_t v135 = v134;
        id v136 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v138 = v137;
      }
      else
      {
        id v136 = 0;
        unint64_t v138 = 0xF000000000000000;
      }
      uint64_t v139 = (uint64_t)v213;
      id v140 = [v52 membershipsOfRemindersInSectionsAsData];
      uint64_t v141 = &selRef_willSave;
      if (v140)
      {
        char v142 = v140;
        uint64_t v143 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v145 = v144;

        sub_1000963CC(0, (unint64_t *)&qword_100910240);
        static REMJSONRepresentable.fromJSONData(_:)();
        if (v139)
        {
          sub_100097F34(v143, v145);
          swift_bridgeObjectRelease();
          id v52 = v218;
          goto LABEL_121;
        }
        sub_100097F34(v143, v145);
        unint64_t v146 = (void *)v219;
        id v52 = v218;
        uint64_t v141 = &selRef_willSave;
      }
      else
      {
        unint64_t v146 = 0;
      }
      if (v59)
      {
        NSString v150 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v150 = 0;
      }
      [v52 v141[392]:v150];

      uint64_t v151 = sub_1004C6530();
      if (v152 >> 60 == 15)
      {
        Class v153 = 0;
      }
      else
      {
        uint64_t v154 = v151;
        unint64_t v155 = v152;
        Class v153 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v154, v155);
      }
      [v52 setMembershipsOfRemindersInSectionsAsData:v153];

      if (!v146)
      {

        sub_100097F20((uint64_t)v136, v138);
        return;
      }
      id v156 = v146;
      sub_10015AA3C(v156);
      if (!v139)
      {

        sub_100097F20((uint64_t)v136, v138);
        return;
      }

LABEL_121:
      if (qword_100906F90 != -1) {
        swift_once();
      }
      uint64_t v157 = type metadata accessor for Logger();
      sub_10008E2DC(v157, (uint64_t)qword_10090D5C0);
      id v158 = v52;
      swift_errorRetain();
      id v159 = v158;
      swift_errorRetain();
      uint64_t v160 = Logger.logObject.getter();
      os_log_type_t v161 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v160, v161))
      {
        id v218 = v136;
        uint64_t v213 = (char *)v139;
        uint64_t v162 = swift_slowAlloc();
        uint64_t v219 = swift_slowAlloc();
        *(_DWORD *)uint64_t v162 = 136446722;
        uint64_t v163 = sub_1000D82B8();
        uint64_t v221 = sub_1000C51B8(v163, v164, &v219);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v162 + 12) = 2082;
        id v165 = [v159 remObjectID];
        if (v165)
        {
          Class v166 = v165;
          id v167 = [v165 description];

          uint64_t v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v170 = v169;
        }
        else
        {
          uint64_t v168 = 7104878;
          unint64_t v170 = 0xE300000000000000;
        }
        uint64_t v221 = sub_1000C51B8(v168, v170, &v219);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v162 + 22) = 2082;
        swift_getErrorValue();
        uint64_t v192 = Error.rem_errorDescription.getter();
        uint64_t v221 = sub_1000C51B8(v192, v193, &v219);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v160, v161, "%{public}s#mergeData(from record: CKRecord, accountID:): Failed to update 'membershipsOfRemindersInSections'. {objectID: %{public}s, error: %{public}s}", (uint8_t *)v162, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v136 = v218;
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      id v194 = v216;
      [v159 setMembershipsOfRemindersInSectionsChecksum:v216];

      if (v138 >> 60 == 15)
      {
        Class v195 = 0;
      }
      else
      {
        sub_100097E38((uint64_t)v136, v138);
        Class v195 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20((uint64_t)v136, v138);
      }
      [v159 setMembershipsOfRemindersInSectionsAsData:v195];
      sub_100097F20((uint64_t)v136, v138);

      swift_errorRelease();
      return;
    case 5:
      id v62 = [v217 encryptedValues:v48];
      NSString v63 = String._bridgeToObjectiveC()();
      id v64 = [v62 objectForKeyedSubscript:v63];
      swift_unknownObjectRelease();

      if (!v64) {
        goto LABEL_21;
      }
      uint64_t v221 = (uint64_t)v64;
      sub_100094134(&qword_100909AB0);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_21;
      }
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v66 = v215;
      id v65 = v216;
      if ((*(unsigned int (**)(char *, uint64_t, id))(v215 + 48))(v40, 1, v216) == 1)
      {
        sub_1000966BC((uint64_t)v40, (uint64_t *)&unk_100909E50);
LABEL_21:
        [v52 setMostRecentTargetTemplateIdentifier:0];
      }
      else
      {
        (*(void (**)(char *, char *, id))(v66 + 32))(v16, v40, v65);
        Class v149 = UUID._bridgeToObjectiveC()().super.isa;
        [v52 setMostRecentTargetTemplateIdentifier:v149];

        (*(void (**)(char *, id))(v66 + 8))(v16, v65);
      }
      return;
    case 6:
      id v67 = [v217 encryptedValues:v48];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_unknownObjectRelease();
      if (v220)
      {
        Class isa = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        Class isa = 0;
      }
      [v52 setName:isa];
      goto LABEL_71;
    case 7:
      uint64_t v210 = v45;
      uint64_t v211 = (char *)v43;
      uint64_t v213 = (char *)v42;
      uint64_t v68 = v47;
      id v69 = [v218 smartListType:v48];
      if (!v69)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        goto LABEL_73;
      }
      unint64_t v70 = v69;
      uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v73 = v72;

      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (!v73)
      {
LABEL_73:
        swift_bridgeObjectRelease();
        goto LABEL_74;
      }
      if (v71 == v74 && v73 == v75)
      {
        swift_bridgeObjectRelease_n();
        id v76 = v214;
        goto LABEL_97;
      }
      char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v76 = v214;
      if (v128)
      {
LABEL_97:
        id v129 = [v52 parentAccount];
        if (v129)
        {
          uint64_t v130 = v129;
          id v131 = [v129 identifier];

          if (v131)
          {
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v132 = *(void (**)(char *, uint64_t, uint64_t, id))(v215 + 56);
            v132(v36, 0, 1, v216);
          }
          else
          {
            uint64_t v132 = *(void (**)(char *, uint64_t, uint64_t, id))(v215 + 56);
            v132(v36, 1, 1, v216);
          }
          sub_100096408((uint64_t)v36, v68, (uint64_t *)&unk_100909E50);
        }
        else
        {
          uint64_t v132 = *(void (**)(char *, uint64_t, uint64_t, id))(v215 + 56);
          v132((char *)v68, 1, 1, v216);
        }
        sub_1000963CC(0, (unint64_t *)&qword_100909E80);
        CKRecordKeyValueSetting.subscript.getter();
        if v219 != 2 && (v219) {
          id v180 = [v52 account];
        }
        else {
          id v180 = 0;
        }
        [v52 setParentAccount:v180];

        int v181 = *v76;
        uint64_t v182 = (uint64_t)v213;
        sub_1001248EC(v68, (uint64_t)v213);
        if (v181 == 1)
        {
          sub_1000966BC(v182, (uint64_t *)&unk_100909E50);
          uint64_t v183 = v68;
          uint64_t v184 = (uint64_t *)&unk_100909E50;
        }
        else
        {
          id v185 = [v52 parentAccount];
          if (v185)
          {
            uint64_t v186 = v185;
            id v187 = [v185 identifier];

            uint64_t v189 = v215;
            id v188 = v216;
            uint64_t v190 = (uint64_t)v208;
            if (v187)
            {
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v191 = 0;
            }
            else
            {
              uint64_t v191 = 1;
            }
            uint64_t v197 = v212;
            v132(v31, v191, 1, v188);
            uint64_t v196 = (uint64_t)v211;
            sub_100096408((uint64_t)v31, (uint64_t)v211, (uint64_t *)&unk_100909E50);
          }
          else
          {
            uint64_t v189 = v215;
            id v188 = v216;
            uint64_t v196 = (uint64_t)v211;
            v132(v211, 1, 1, v216);
            uint64_t v197 = v212;
            uint64_t v190 = (uint64_t)v208;
          }
          uint64_t v198 = v190 + *(int *)(v197 + 48);
          sub_1001248EC(v196, v190);
          uint64_t v199 = (uint64_t)v213;
          sub_1001248EC((uint64_t)v213, v198);
          uint64_t v200 = *(uint64_t (**)(uint64_t, uint64_t, id))(v189 + 48);
          if (v200(v190, 1, v188) == 1)
          {
            sub_1000966BC(v196, (uint64_t *)&unk_100909E50);
            sub_1000966BC(v199, (uint64_t *)&unk_100909E50);
            sub_1000966BC(v68, (uint64_t *)&unk_100909E50);
            int v201 = v200(v198, 1, v188);
            id v76 = v214;
            if (v201 == 1)
            {
              sub_1000966BC(v190, (uint64_t *)&unk_100909E50);
              char v202 = 0;
LABEL_173:
              *id v76 = v202 & 1;
              return;
            }
          }
          else
          {
            uint64_t v203 = v210;
            sub_1001248EC(v190, v210);
            int v204 = v200(v198, 1, v188);
            id v76 = v214;
            if (v204 != 1)
            {
              NSString v205 = v209;
              (*(void (**)(char *, uint64_t, id))(v189 + 32))(v209, v198, v188);
              sub_100124954();
              char v206 = dispatch thunk of static Equatable.== infix(_:_:)();
              char v207 = *(void (**)(char *, id))(v189 + 8);
              v207(v205, v188);
              sub_1000966BC((uint64_t)v211, (uint64_t *)&unk_100909E50);
              sub_1000966BC((uint64_t)v213, (uint64_t *)&unk_100909E50);
              sub_1000966BC(v68, (uint64_t *)&unk_100909E50);
              v207((char *)v203, v188);
              sub_1000966BC(v190, (uint64_t *)&unk_100909E50);
              char v202 = v206 ^ 1;
              goto LABEL_173;
            }
            sub_1000966BC((uint64_t)v211, (uint64_t *)&unk_100909E50);
            sub_1000966BC((uint64_t)v213, (uint64_t *)&unk_100909E50);
            sub_1000966BC(v68, (uint64_t *)&unk_100909E50);
            (*(void (**)(uint64_t, id))(v189 + 8))(v203, v188);
          }
          uint64_t v184 = (uint64_t *)&unk_10090B4C0;
          uint64_t v183 = v190;
        }
        sub_1000966BC(v183, v184);
        char v202 = 1;
        goto LABEL_173;
      }
LABEL_74:
      id v114 = [v52 parentAccount];

      if (!v114)
      {
        id v217 = [v52 account];
        [v52 setParentAccount:v217];
        id v115 = v217;
      }
      return;
    case 8:
      uint64_t v213 = (char *)v44;
      uint64_t v210 = v46;
      id v77 = [v218 parentList:v48];
      if (v77)
      {
        id v78 = v77;
        id v79 = [v77 identifier];

        id v80 = v214;
        if (v79)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          id v81 = *(void (**)(char *, uint64_t, uint64_t, id))(v215 + 56);
          v81(v27, 0, 1, v216);
        }
        else
        {
          id v81 = *(void (**)(char *, uint64_t, uint64_t, id))(v215 + 56);
          v81(v27, 1, 1, v216);
        }
        id v117 = v217;
        sub_100096408((uint64_t)v27, (uint64_t)v50, (uint64_t *)&unk_100909E50);
        id v116 = v216;
      }
      else
      {
        id v116 = v216;
        id v81 = *(void (**)(char *, uint64_t, uint64_t, id))(v215 + 56);
        v81(v50, 1, 1, v216);
        id v80 = v214;
        id v117 = v217;
      }
      if ((objc_msgSend(v117, "ic_isOwnedByCurrentUser") & 1) != 0
        || (id v118 = [v117 share], v118, !v118))
      {
        if (CKRecord.subscript.getter())
        {
          self;
          uint64_t v119 = (void *)swift_dynamicCastObjCClass();
          if (!v119) {
            swift_unknownObjectRelease();
          }
        }
        else
        {
          uint64_t v119 = 0;
        }
        uint64_t v120 = sub_1004B9C44(v119, v52);

        [v52 setParentList:v120];
      }
      int v121 = *v80;
      sub_1001248EC((uint64_t)v50, (uint64_t)v24);
      if (v121 == 1)
      {
        sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
        sub_1000966BC((uint64_t)v50, (uint64_t *)&unk_100909E50);
        char v122 = 1;
        goto LABEL_143;
      }
      id v123 = [v52 parentList];
      if (v123)
      {
        id v124 = v123;
        id v125 = [v123 identifier];

        uint64_t v126 = v215;
        if (v125)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v127 = 0;
        }
        else
        {
          uint64_t v127 = 1;
        }
        uint64_t v148 = v212;
        v81(v20, v127, 1, v116);
        uint64_t v147 = (uint64_t)v213;
        sub_100096408((uint64_t)v20, (uint64_t)v213, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v126 = v215;
        uint64_t v147 = (uint64_t)v213;
        v81(v213, 1, 1, v116);
        uint64_t v148 = v212;
      }
      uint64_t v173 = (uint64_t)v211;
      uint64_t v174 = (uint64_t)&v211[*(int *)(v148 + 48)];
      sub_1001248EC(v147, (uint64_t)v211);
      sub_1001248EC((uint64_t)v24, v174);
      uint64_t v175 = *(unsigned int (**)(uint64_t, uint64_t, id))(v126 + 48);
      if (v175(v173, 1, v116) == 1)
      {
        sub_1000966BC(v147, (uint64_t *)&unk_100909E50);
        sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
        sub_1000966BC((uint64_t)v50, (uint64_t *)&unk_100909E50);
        if (v175(v174, 1, v116) == 1)
        {
          sub_1000966BC(v173, (uint64_t *)&unk_100909E50);
          char v122 = 0;
          goto LABEL_142;
        }
      }
      else
      {
        uint64_t v176 = v210;
        sub_1001248EC(v173, v210);
        if (v175(v174, 1, v116) != 1)
        {
          uint64_t v177 = v209;
          (*(void (**)(char *, uint64_t, id))(v126 + 32))(v209, v174, v116);
          sub_100124954();
          char v178 = dispatch thunk of static Equatable.== infix(_:_:)();
          int v179 = *(void (**)(char *, id))(v126 + 8);
          v179(v177, v116);
          sub_1000966BC((uint64_t)v213, (uint64_t *)&unk_100909E50);
          sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
          sub_1000966BC((uint64_t)v50, (uint64_t *)&unk_100909E50);
          v179((char *)v176, v116);
          sub_1000966BC(v173, (uint64_t *)&unk_100909E50);
          char v122 = v178 ^ 1;
LABEL_142:
          id v80 = v214;
LABEL_143:
          unsigned char *v80 = v122 & 1;
          return;
        }
        sub_1000966BC((uint64_t)v213, (uint64_t *)&unk_100909E50);
        sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
        sub_1000966BC((uint64_t)v50, (uint64_t *)&unk_100909E50);
        (*(void (**)(uint64_t, id))(v126 + 8))(v176, v116);
      }
      sub_1000966BC(v173, (uint64_t *)&unk_10090B4C0);
      char v122 = 1;
      goto LABEL_142;
    case 9:
      uint64_t v82 = sub_1004C6530();
      unint64_t v84 = v83;
      swift_bridgeObjectRelease();
      if (v84 >> 60 == 15)
      {
        Class v85 = 0;
      }
      else
      {
        Class v85 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v82, v84);
      }
      [v52 setSectionIDsOrderingAsData:v85];

      _sSo14REMCDSmartListC7reminddE19sortChildrenObjectsyyF_0();
      return;
    case 10:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      CKRecordKeyValueSetting.subscript.getter();
      [v52 setShowingLargeAttachments:v219 & 1];
      return;
    case 11:
      uint64_t v86 = CKRecord.subscript.getter();
      if (v86)
      {
        uint64_t v221 = v86;
        sub_100094134(&qword_100909AB0);
        if (swift_dynamicCast())
        {
          uint64_t v87 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v52 setSmartListType:v87];
          goto LABEL_44;
        }
      }
      if (qword_100906F90 != -1) {
        swift_once();
      }
      uint64_t v91 = type metadata accessor for Logger();
      sub_10008E2DC(v91, (uint64_t)qword_10090D5C0);
      id v92 = v52;
      uint64_t v93 = Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v93, v94)) {
        goto LABEL_56;
      }
      char v95 = (uint8_t *)swift_slowAlloc();
      uint64_t v219 = swift_slowAlloc();
      *(_DWORD *)char v95 = 136446210;
      id v96 = [v92 ckIdentifier];
      if (v96)
      {
        id v97 = v96;
        uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v100 = v99;
      }
      else
      {
        uint64_t v98 = 7104878;
        unint64_t v100 = 0xE300000000000000;
      }
      uint64_t v221 = sub_1000C51B8(v98, v100, &v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_type_t v171 = v94;
      char v172 = "SmartList (ckIdentifier: %{public}s) does not have smart list type";
      goto LABEL_132;
    case 12:
      uint64_t v88 = CKRecord.subscript.getter();
      if (v88 && (uint64_t v221 = v88, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) != 0))
      {
        uint64_t v87 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v52 setSortingStyle:v87];
LABEL_44:
      }
      else
      {
        if (qword_100906F90 != -1) {
          swift_once();
        }
        uint64_t v101 = type metadata accessor for Logger();
        sub_10008E2DC(v101, (uint64_t)qword_10090D5C0);
        id v92 = v52;
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v102 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v93, v102))
        {
          char v95 = (uint8_t *)swift_slowAlloc();
          uint64_t v219 = swift_slowAlloc();
          *(_DWORD *)char v95 = 136446210;
          id v103 = [v92 ckIdentifier];
          if (v103)
          {
            unint64_t v104 = v103;
            uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v107 = v106;
          }
          else
          {
            uint64_t v105 = 7104878;
            unint64_t v107 = 0xE300000000000000;
          }
          uint64_t v221 = sub_1000C51B8(v105, v107, &v219);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          os_log_type_t v171 = v102;
          char v172 = "SmartList (ckIdentifier: %{public}s) does not have a sorting style";
LABEL_132:
          _os_log_impl((void *)&_mh_execute_header, v93, v171, v172, v95, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
LABEL_56:
        }
      }
      return;
    case 13:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v89 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      uint64_t v90 = *(void *)(v89 - 8);
      uint64_t v87 = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v8, 1, v89) != 1)
      {
        uint64_t v87 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v90 + 8))(v8, v89);
      }
      [v52 setPinnedDate:v87];
      goto LABEL_44;
    default:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      CKRecordKeyValueSetting.subscript.getter();
      if (v220)
      {
        Class isa = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        Class isa = 0;
      }
      [v52 setBadgeEmblem:isa];
LABEL_71:

      return;
  }
}

CKRecord_optional __swiftcall REMCDSmartList.newlyCreatedRecord()()
{
  id v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v138 = (uint64_t)&v117 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v117 - v5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v15 = __chkstk_darwin(v14).n128_u64[0];
  uint64_t v137 = (uint64_t)&v117 - v16;
  v142.receiver = v1;
  v142.super_class = (Class)REMCDSmartList;
  id v18 = [super newlyCreatedRecord:v15];
  if (v18)
  {
    uint64_t v20 = 14;
    id v134 = v13;
    id v124 = v10;
    uint64_t v135 = v7;
    id v136 = v6;
    uint64_t v132 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    char v133 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    id v123 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v21 = &byte_1008B3330;
    char v122 = (void (**)(char *, uint64_t))(v8 + 8);
    char v128 = "indersInSectionsChecksum";
    unint64_t v121 = 0x80000001007CCA50;
    unint64_t v130 = 0x80000001007CC9F0;
    unint64_t v131 = 0x80000001007CCA20;
    unint64_t v126 = 0x80000001007CC9D0;
    *(void *)&long long v19 = 136446210;
    long long v125 = v19;
    unint64_t v129 = 0x80000001007CC990;
    uint64_t v119 = (char *)&type metadata for Any + 8;
    uint64_t v22 = &selRef_intersectsSet_;
    uint64_t v127 = "ShowingLargeAttachments";
    unint64_t v120 = 0x80000001007CC9B0;
    while (2)
    {
      int v24 = *v21++;
      switch(v24)
      {
        case 1:
          id v30 = [v1 color];
          if (!v30) {
            goto LABEL_60;
          }
          id v31 = v30;
          uint64_t v32 = sub_10016FBA4(&qword_100909E68);
          if (v33)
          {
            *((void *)&v140 + 1) = &type metadata for String;
            uint64_t v141 = &protocol witness table for String;
            *(void *)&long long v139 = v32;
            *((void *)&v139 + 1) = v33;
          }
          else
          {
            uint64_t v141 = 0;
            long long v139 = 0u;
            long long v140 = 0u;
          }
          sub_1000963CC(0, (unint64_t *)&qword_100909E80);
          CKRecordKeyValueSetting.subscript.setter();

          goto LABEL_5;
        case 2:
          id v34 = [v18 encryptedValues];
          id v35 = [v1 filterData];
          if (v35)
          {
            id v36 = v35;
            uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v39 = v38;

            *((void *)&v140 + 1) = &type metadata for Data;
            uint64_t v141 = &protocol witness table for Data;
            *(void *)&long long v139 = v37;
            *((void *)&v139 + 1) = v39;
            uint64_t v22 = &selRef_intersectsSet_;
          }
          else
          {
            uint64_t v141 = 0;
            long long v139 = 0u;
            long long v140 = 0u;
          }
          goto LABEL_52;
        case 3:
          goto LABEL_5;
        case 4:
          id v40 = [v1 membershipsOfRemindersInSectionsAsData];
          if (v40)
          {
            uint64_t v41 = v40;
            uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v44 = v43;

            uint64_t v45 = self;
            sub_100097E38(v42, v44);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            id v47 = [v45 assetForData:isa];

            CKRecord.subscript.setter();
            sub_100097F34(v42, v44);
            sub_100097F34(v42, v44);
          }
          else
          {
            CKRecord.subscript.setter();
          }
          id v101 = [v18 encryptedValues];
          id v102 = [v1 membershipsOfRemindersInSectionsChecksum];
          if (v102)
          {
            id v103 = v102;
            uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v106 = v105;

            *((void *)&v140 + 1) = &type metadata for String;
            uint64_t v141 = &protocol witness table for String;
            *(void *)&long long v139 = v104;
            *((void *)&v139 + 1) = v106;
          }
          else
          {
            uint64_t v141 = 0;
            long long v139 = 0u;
            long long v140 = 0u;
          }
          uint64_t v22 = &selRef_intersectsSet_;
          swift_getObjectType();
          goto LABEL_71;
        case 5:
          [v18 encryptedValues];
          id v48 = [v1 mostRecentTargetTemplateIdentifier];
          if (v48)
          {
            uint64_t v49 = v48;
            uint64_t v50 = (uint64_t)v134;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v51 = 0;
          }
          else
          {
            uint64_t v51 = 1;
            uint64_t v50 = (uint64_t)v134;
          }
          uint64_t v107 = v135;
          (*v133)(v50, v51, 1, v135);
          uint64_t v108 = v137;
          sub_100096408(v50, v137, (uint64_t *)&unk_100909E50);
          if ((*v132)(v108, 1, v107))
          {
            sub_1000966BC(v108, (uint64_t *)&unk_100909E50);
            long long v139 = 0u;
            long long v140 = 0u;
            uint64_t v141 = 0;
          }
          else
          {
            os_log_type_t v112 = v124;
            (*v123)(v124, v108, v107);
            sub_1000966BC(v108, (uint64_t *)&unk_100909E50);
            uint64_t v113 = UUID.uuidString.getter();
            uint64_t v115 = v114;
            (*v122)(v112, v107);
            *((void *)&v140 + 1) = &type metadata for String;
            uint64_t v141 = &protocol witness table for String;
            *(void *)&long long v139 = v113;
            *((void *)&v139 + 1) = v115;
          }
          uint64_t v22 = &selRef_intersectsSet_;
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.setter();
          swift_unknownObjectRelease();
          goto LABEL_5;
        case 6:
          id v52 = [v18 encryptedValues];
          id v53 = [v1 name];
          if (v53)
          {
            uint64_t v54 = v53;
            uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v57 = v56;

            *((void *)&v140 + 1) = &type metadata for String;
            uint64_t v141 = &protocol witness table for String;
            *(void *)&long long v139 = v55;
            *((void *)&v139 + 1) = v57;
            uint64_t v22 = &selRef_intersectsSet_;
          }
          else
          {
            uint64_t v141 = 0;
            long long v139 = 0u;
            long long v140 = 0u;
          }
LABEL_52:
          swift_getObjectType();
LABEL_71:
          CKRecordKeyValueSetting.subscript.setter();
          swift_unknownObjectRelease();
          goto LABEL_5;
        case 7:
          if ([v1 isOwnedByCurrentUser])
          {
            id v58 = [v1 parentAccount];
            id v59 = v58;
            if (v58) {

            }
            *((void *)&v140 + 1) = &type metadata for Bool;
            uint64_t v141 = &protocol witness table for Bool;
            LOBYTE(v139) = v59 != 0;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
LABEL_4:
            CKRecordKeyValueSetting.subscript.setter();
            goto LABEL_5;
          }
          if (qword_100906F90 != -1) {
            swift_once();
          }
          uint64_t v88 = type metadata accessor for Logger();
          sub_10008E2DC(v88, (uint64_t)qword_10090D5C0);
          id v89 = v1;
          uint64_t v90 = Logger.logObject.getter();
          os_log_type_t v91 = static os_log_type_t.fault.getter();
          if (!os_log_type_enabled(v90, v91)) {
            goto LABEL_48;
          }
          uint64_t v92 = swift_slowAlloc();
          uint64_t v118 = swift_slowAlloc();
          *(void *)&long long v139 = v118;
          *(_DWORD *)uint64_t v92 = v125;
          id v93 = [v89 remObjectID];
          if (v93) {
            goto LABEL_47;
          }
          unint64_t v100 = 0xE300000000000000;
          uint64_t v98 = 7104878;
          goto LABEL_83;
        case 8:
          if ([v1 isOwnedByCurrentUser])
          {
            id v60 = [v1 parentList];
            if (v60)
            {
              uint64_t v61 = v60;
              id v62 = [v60 v22[418]];
              if (v62)
              {
                NSString v63 = v62;
                id v64 = [v18 v22[418]];
                id v65 = [v64 zoneID];

                id v66 = [v63 zoneID];
                unsigned int v67 = [v65 isEqual:v66];

                if (v67)
                {
                  id v68 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v63];

                  if (v68) {
                    id v69 = v68;
                  }
                }
                else
                {

                  id v68 = 0;
                }
                uint64_t v22 = &selRef_intersectsSet_;
              }
              else
              {
                id v68 = 0;
              }
              CKRecord.subscript.setter();
            }
            else
            {
LABEL_60:
              CKRecord.subscript.setter();
            }
          }
          else
          {
            if (qword_100906F90 != -1) {
              swift_once();
            }
            uint64_t v94 = type metadata accessor for Logger();
            sub_10008E2DC(v94, (uint64_t)qword_10090D5C0);
            id v89 = v1;
            uint64_t v90 = Logger.logObject.getter();
            os_log_type_t v91 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v90, v91))
            {
              uint64_t v92 = swift_slowAlloc();
              uint64_t v118 = swift_slowAlloc();
              *(void *)&long long v139 = v118;
              *(_DWORD *)uint64_t v92 = v125;
              id v93 = [v89 remObjectID];
              if (v93)
              {
LABEL_47:
                char v95 = v93;
                id v96 = [v93 description];
                uint64_t v117 = v92;
                id v97 = v96;

                uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v100 = v99;

                uint64_t v92 = v117;
              }
              else
              {
                unint64_t v100 = 0xE300000000000000;
                uint64_t v98 = 7104878;
              }
LABEL_83:
              *(void *)(v92 + 4) = sub_1000C51B8(v98, v100, (uint64_t *)&v139);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v90, v91, "REMCDSmartList is not expected to be shared, we shouldn't upload it for non-owner (smartListID: %{public}s)", (uint8_t *)v92, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v22 = &selRef_intersectsSet_;
            }
            else
            {
LABEL_48:
            }
          }
LABEL_5:
          if (--v20) {
            continue;
          }
          goto LABEL_84;
        case 9:
          id v70 = [v1 sectionIDsOrderingAsData];
          if (!v70) {
            goto LABEL_60;
          }
          uint64_t v71 = v70;
          uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v74 = v73;

          uint64_t v75 = self;
          sub_100097E38(v72, v74);
          Class v76 = Data._bridgeToObjectiveC()().super.isa;
          id v77 = [v75 assetForData:v76];

          CKRecord.subscript.setter();
          sub_100097F34(v72, v74);
          unint64_t v78 = v74;
          uint64_t v22 = &selRef_intersectsSet_;
          sub_100097F34(v72, v78);
          goto LABEL_5;
        case 10:
          unsigned __int8 v23 = [v1 showingLargeAttachments];
          *((void *)&v140 + 1) = &type metadata for Bool;
          uint64_t v141 = &protocol witness table for Bool;
          LOBYTE(v139) = v23;
          sub_1000963CC(0, (unint64_t *)&qword_100909E80);
          goto LABEL_4;
        case 11:
          id v79 = [v1 smartListType];
          if (v79) {
            goto LABEL_35;
          }
          uint64_t v141 = 0;
          long long v139 = 0u;
          long long v140 = 0u;
          goto LABEL_63;
        case 12:
          id v79 = [v1 sortingStyle];
          if (v79)
          {
LABEL_35:
            id v80 = v79;
            uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v83 = v82;

            *((void *)&v140 + 1) = &type metadata for String;
            uint64_t v141 = &protocol witness table for String;
            *(void *)&long long v139 = v81;
            *((void *)&v139 + 1) = v83;
            uint64_t v22 = &selRef_intersectsSet_;
          }
          else
          {
            uint64_t v141 = 0;
            long long v139 = 0u;
            long long v140 = 0u;
          }
          goto LABEL_63;
        case 13:
          id v84 = [v1 pinnedDate];
          if (v84)
          {
            Class v85 = v84;
            uint64_t v86 = v138;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v87 = type metadata accessor for Date();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v86, 0, 1, v87);
          }
          else
          {
            uint64_t v87 = type metadata accessor for Date();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v138, 1, 1, v87);
          }
          uint64_t v109 = (uint64_t)v136;
          sub_100096408(v138, (uint64_t)v136, (uint64_t *)&unk_100909A40);
          type metadata accessor for Date();
          uint64_t v110 = *(void *)(v87 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v109, 1, v87) == 1)
          {
            sub_1000966BC(v109, (uint64_t *)&unk_100909A40);
            long long v139 = 0u;
            long long v140 = 0u;
            uint64_t v141 = 0;
          }
          else
          {
            *((void *)&v140 + 1) = v87;
            uint64_t v141 = &protocol witness table for Date;
            uint64_t v111 = sub_1000C1FE8((uint64_t *)&v139);
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(v110 + 32))(v111, v109, v87);
          }
          sub_1000963CC(0, (unint64_t *)&qword_100909E80);
          CKRecordKeyValueSetting.subscript.setter();
          uint64_t v22 = &selRef_intersectsSet_;
          goto LABEL_5;
        default:
          id v25 = [v1 badgeEmblem];
          if (v25)
          {
            uint64_t v26 = v25;
            uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v29 = v28;

            *((void *)&v140 + 1) = &type metadata for String;
            uint64_t v141 = &protocol witness table for String;
            *(void *)&long long v139 = v27;
            *((void *)&v139 + 1) = v29;
            uint64_t v22 = &selRef_intersectsSet_;
          }
          else
          {
            uint64_t v141 = 0;
            long long v139 = 0u;
            long long v140 = 0u;
          }
LABEL_63:
          sub_1000963CC(0, (unint64_t *)&qword_100909E80);
          goto LABEL_4;
      }
    }
  }
LABEL_84:
  id v116 = (objc_class *)v18;
  result.value.super.Class isa = v116;
  result.is_nil = v17;
  return result;
}

void __swiftcall REMCDSmartList.parentCloud()(REMCDObject_optional *__return_ptr retstr)
{
  id v2 = [v1 smartListType];
  if (!v2) {
    return;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  unint64_t v8 = (unint64_t)REMSmartListType.init(stringValue:)(v7);
  if (!v8) {
    return;
  }
  uint64_t v9 = (void *)v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13) {
    goto LABEL_10;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
LABEL_11:
    [v1 account];

    return;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19) {
    goto LABEL_10;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_11;
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;
  if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24) {
    goto LABEL_10;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v25) {
    goto LABEL_11;
  }
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;
  if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v28 == v29) {
    goto LABEL_10;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v30) {
    goto LABEL_11;
  }
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;
  if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34) {
    goto LABEL_10;
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v35) {
    goto LABEL_11;
  }
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;
  if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v38 == v39)
  {
LABEL_10:
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v40) {
    goto LABEL_11;
  }
}

Swift::Void __swiftcall REMCDSmartList.cleanUpAfterLocalObjectMerge()()
{
  if (qword_100906F90 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090D5C0);
  id v7 = v0;
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090D5E0);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

unint64_t sub_100175084(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B3340, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE) {
    return 14;
  }
  else {
    return v3;
  }
}

uint64_t _sSo14REMCDSmartListC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_100906F90 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090D5C0);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090D5E0);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _sSo14REMCDSmartListC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_100906F90 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090D5C0);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090D5E0);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _s6FieldsOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s6FieldsOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *CKRecord_optional result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001755BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *CKRecord_optional result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *_s6FieldsOMa()
{
  return &_s6FieldsON;
}

unint64_t sub_1001755F4(uint64_t a1)
{
  unint64_t result = sub_10017561C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017561C()
{
  unint64_t result = qword_10090D610;
  if (!qword_10090D610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D610);
  }
  return result;
}

unint64_t sub_100175670(uint64_t a1)
{
  unint64_t result = sub_100175698();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100175698()
{
  unint64_t result = qword_10090D618;
  if (!qword_10090D618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D618);
  }
  return result;
}

unint64_t sub_1001756F0()
{
  unint64_t result = qword_10090D620;
  if (!qword_10090D620)
  {
    sub_100096058(&qword_10090D628);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D620);
  }
  return result;
}

unint64_t sub_100175750()
{
  unint64_t result = qword_10090D630;
  if (!qword_10090D630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D630);
  }
  return result;
}

uint64_t sub_1001757A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090D640);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090D640);
  if (qword_100907830 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424D8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1001758E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if (qword_100906F98 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_10090D640);
  swift_retain_n();
  unsigned int v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unsigned int v6 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)unsigned int v6 = 136446210;
    id v7 = sub_1002ECF34();
    sub_1000C51B8((uint64_t)v7, v8, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner BEGIN {persistentStore: %{public}s}", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  uint64_t v9 = (void *)v0[3];
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = v1;
  v10[3] = &v21;
  void v10[4] = &v20;
  v10[5] = v2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10017746C;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = (uint64_t)sub_10008F6F4;
  aBlock[5] = v11;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1003B3260;
  aBlock[3] = (uint64_t)&unk_1008BC708;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v9 performBlockAndWait:v12];
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v9)
  {
    __break(1u);
  }
  else
  {
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 134218498;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2048;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 22) = 2082;
      id v16 = sub_1002ECF34();
      sub_1000C51B8((uint64_t)v16, v17, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner FINISH {successfulMigrationCount: %ld, failedMigrationCount: %ld, persistentStore: %{public}s}", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();

      swift_release_n();
    }
  }
}

void sub_100175D98(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = sub_100176D9C();
  sub_100094134(&qword_10090D750);
  sub_1001774A0();
  uint64_t v10 = BidirectionalCollection<>.slices(by:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = (unint64_t *)(v10 + 56);
    while (1)
    {
      uint64_t v14 = *(v12 - 3);
      uint64_t v13 = *(v12 - 2);
      uint64_t v15 = *(v12 - 1);
      unint64_t v16 = *v12;
      swift_unknownObjectRetain();
      uint64_t v18 = sub_100176094(v14, v13, v15, v16);
      if (__OFADD__(*a2, v18)) {
        break;
      }
      *a2 += v18;
      if (__OFADD__(*a3, v19)) {
        goto LABEL_15;
      }
      *a3 += v19;
      swift_unknownObjectRelease();
      v12 += 4;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
    swift_once();
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_10090D640);
    swift_errorRetain();
    swift_errorRetain();
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)id v7 = 136446210;
      swift_getErrorValue();
      uint64_t v8 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v8, v9, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner failed to fetch Reminders {error: %{public}s}", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100176094(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v104 = type metadata accessor for CharacterSet();
  __chkstk_darwin(v104);
  id v103 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = 0;
  uint64_t v112 = 0;
  if (a4 >> 1 != a3)
  {
    id v102 = (void (**)(char *, uint64_t))(v10 + 8);
    unint64_t v105 = a4 >> 1;
    swift_unknownObjectRetain();
    uint64_t v13 = v105;
    uint64_t v12 = 0;
    uint64_t v112 = 0;
    *(void *)&long long v14 = 136446722;
    long long v108 = v14;
    uint64_t v107 = (char *)&type metadata for Any + 8;
    *(void *)&long long v14 = 136446466;
    long long v106 = v14;
    uint64_t v100 = v4;
    uint64_t v99 = a1;
    uint64_t v98 = a2;
    do
    {
      if (a3 >= v13) {
        goto LABEL_67;
      }
      id v15 = *(id *)(a2 + 8 * a3);
      if ([v15 isSharedViaICloud])
      {
        unint64_t v126 = _swiftEmptyArrayStorage;
        id v113 = v15;
        id v16 = [v15 title];
        if (v16)
        {
          unint64_t v17 = v16;
          uint64_t v18 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;

          id v123 = v18;
          uint64_t v124 = v20;
          uint64_t v21 = v103;
          static CharacterSet.hashtagTokenPrefixCharacters.getter();
          sub_1000E4FD8();
          StringProtocol.rangeOfCharacter(from:options:range:)();
          LOBYTE(v17) = v22;
          (*v102)(v21, v104);
          swift_bridgeObjectRelease();
          if ((v17 & 1) == 0)
          {
            uint64_t v23 = v126;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1001DE64C(0, v23[2] + 1, 1);
              uint64_t v23 = v126;
            }
            unint64_t v25 = v23[2];
            unint64_t v24 = v23[3];
            if (v25 >= v24 >> 1)
            {
              sub_1001DE64C(v24 > 1, v25 + 1, 1);
              uint64_t v23 = v126;
            }
            v23[2] = v25 + 1;
            *((unsigned char *)v23 + v25 + 32) = 0;
          }
        }
        id v26 = [v113 notes:v98, v99];
        if (v26)
        {
          uint64_t v27 = v26;
          uint64_t v28 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v30 = v29;

          id v123 = v28;
          uint64_t v124 = v30;
          uint64_t v31 = v103;
          static CharacterSet.hashtagTokenPrefixCharacters.getter();
          sub_1000E4FD8();
          StringProtocol.rangeOfCharacter(from:options:range:)();
          LOBYTE(v27) = v32;
          (*v102)(v31, v104);
          swift_bridgeObjectRelease();
          if ((v27 & 1) == 0)
          {
            uint64_t v33 = v126;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1001DE64C(0, v33[2] + 1, 1);
              uint64_t v33 = v126;
            }
            unint64_t v35 = v33[2];
            unint64_t v34 = v33[3];
            if (v35 >= v34 >> 1)
            {
              sub_1001DE64C(v34 > 1, v35 + 1, 1);
              uint64_t v33 = v126;
            }
            void v33[2] = v35 + 1;
            *((unsigned char *)v33 + v35 + 32) = 1;
          }
        }
        uint64_t v36 = v126;
        uint64_t v118 = v126[2];
        if (v118)
        {
          uint64_t v101 = a3;
          uint64_t v117 = *(void **)(v5 + 24);
          Class v116 = (Class)type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter();
          uint64_t v37 = 0;
          id v38 = v113;
          uint64_t v39 = v36;
          uint64_t v114 = v36;
          while (1)
          {
            int v41 = *((unsigned __int8 *)v39 + v37 + 32);
            uint64_t v42 = v116;
            unint64_t v43 = objc_allocWithZone(v116);
            *(void *)&v43[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder] = v38;
            int v120 = v41;
            v43[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_field] = v41;
            unint64_t v44 = v117;
            *(void *)&v43[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_storeObjectContext] = v117;
            uint64_t v45 = &v43[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_onlySpecificCanonicalName];
            *uint64_t v45 = 0;
            v45[1] = 0;
            id v46 = objc_allocWithZone((Class)RDPersistentStoreLookupForREMCDObject);
            id v47 = v38;
            id v48 = v44;
            id v49 = v47;
            id v50 = v48;
            uint64_t v51 = v43;
            id v52 = [v46 init:v49];
            *(void *)&v51[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_persistentStoreLookup] = v52;

            v122.receiver = v51;
            v122.super_class = v42;
            id v53 = [super init];
            id v121 = v49;

            uint64_t v55 = (void *)sub_100134E1C();
            uint64_t v57 = v56;
            unsigned __int8 v58 = v54;
            int v59 = v54;
            if (v54 >> 6)
            {
              if (v54 >> 6 != 1)
              {
                id v119 = v53;
                if (qword_100906F98 != -1) {
                  swift_once();
                }
                uint64_t v71 = type metadata accessor for Logger();
                sub_10008E2DC(v71, (uint64_t)qword_10090D640);
                id v72 = v121;
                unint64_t v73 = Logger.logObject.getter();
                os_log_type_t v74 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v73, v74))
                {
                  uint64_t v75 = swift_slowAlloc();
                  id v123 = (id)swift_slowAlloc();
                  *(_DWORD *)uint64_t v75 = v106;
                  id v76 = [v72 remObjectID];
                  if (v76)
                  {
                    id v77 = v76;
                    uint64_t v78 = v12;
                    id v79 = [v76 description];

                    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v82 = v81;

                    uint64_t v12 = v78;
                  }
                  else
                  {
                    unint64_t v82 = 0xE300000000000000;
                    uint64_t v80 = 7104878;
                  }
                  *(void *)(v75 + 4) = sub_1000C51B8(v80, v82, (uint64_t *)&v123);

                  swift_bridgeObjectRelease();
                  *(_WORD *)(v75 + 12) = 2082;
                  if (v120) {
                    uint64_t v87 = 0x636F447365746F6ELL;
                  }
                  else {
                    uint64_t v87 = 0x636F44656C746974;
                  }
                  *(void *)(v75 + 14) = sub_1000C51B8(v87, 0xED0000746E656D75, (uint64_t *)&v123);
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v73, v74, "Reminder[%{public}s] conversion succeeded for field %{public}s", (uint8_t *)v75, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  uint64_t v39 = v114;
                }
                else
                {
                }
                id v38 = v113;
                if (__OFADD__(v112, 1)) {
                  goto LABEL_66;
                }
                ++v112;
                goto LABEL_25;
              }
              int v59 = v54 & 0x3F;
            }
            if (qword_100906F98 != -1) {
              swift_once();
            }
            uint64_t v60 = type metadata accessor for Logger();
            sub_10008E2DC(v60, (uint64_t)qword_10090D640);
            id v61 = v121;
            sub_1001774FC((uint64_t)v55, v57, v58);
            id v62 = Logger.logObject.getter();
            int v115 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v62, (os_log_type_t)v115))
            {
              int v110 = v59;
              os_log_t v111 = v62;
              id v119 = v53;
              uint64_t v63 = swift_slowAlloc();
              uint64_t v109 = (void *)swift_slowAlloc();
              unint64_t v126 = v109;
              *(_DWORD *)uint64_t v63 = v108;
              id v64 = [v61 remObjectID];
              if (v64)
              {
                id v65 = v64;
                uint64_t v66 = v12;
                id v67 = [v64 description];

                uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v70 = v69;

                uint64_t v12 = v66;
              }
              else
              {
                unint64_t v70 = 0xE300000000000000;
                uint64_t v68 = 7104878;
              }
              *(void *)(v63 + 4) = sub_1000C51B8(v68, v70, (uint64_t *)&v126);

              swift_bridgeObjectRelease();
              *(_WORD *)(v63 + 12) = 2082;
              if (v120) {
                uint64_t v83 = 0x636F447365746F6ELL;
              }
              else {
                uint64_t v83 = 0x636F44656C746974;
              }
              *(void *)(v63 + 14) = sub_1000C51B8(v83, 0xED0000746E656D75, (uint64_t *)&v126);
              swift_bridgeObjectRelease();
              *(_WORD *)(v63 + 22) = 2082;
              id v123 = v55;
              uint64_t v124 = v57;
              char v125 = v110;
              sub_100177534();
              uint64_t v84 = Error.rem_errorDescription.getter();
              *(void *)(v63 + 24) = sub_1000C51B8(v84, v85, (uint64_t *)&v126);
              swift_bridgeObjectRelease();
              sub_100177518((uint64_t)v55, v57, v58);
              sub_100177518((uint64_t)v55, v57, v58);
              os_log_t v86 = v111;
              _os_log_impl((void *)&_mh_execute_header, v111, (os_log_type_t)v115, "Reminder[%{public}s] conversion failed for field %{public}s {error: %{public}s}", (uint8_t *)v63, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              id v38 = v113;
            }
            else
            {

              sub_100177518((uint64_t)v55, v57, v58);
              sub_100177518((uint64_t)v55, v57, v58);
            }
            BOOL v40 = __OFADD__(v12++, 1);
            uint64_t v39 = v114;
            if (v40)
            {
              __break(1u);
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              swift_once();
LABEL_59:
              uint64_t v91 = type metadata accessor for Logger();
              sub_10008E2DC(v91, (uint64_t)qword_10090D640);
              swift_errorRetain();
              swift_errorRetain();
              uint64_t v92 = Logger.logObject.getter();
              os_log_type_t v93 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v92, v93))
              {
                uint64_t v94 = (uint8_t *)swift_slowAlloc();
                id v123 = (id)swift_slowAlloc();
                *(_DWORD *)uint64_t v94 = 136446210;
                swift_getErrorValue();
                uint64_t v95 = Error.rem_errorDescription.getter();
                unint64_t v126 = (void *)sub_1000C51B8(v95, v96, (uint64_t *)&v123);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v92, v93, "RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner failed to save {error: %{public}s}", v94, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                swift_errorRelease();
              }
              else
              {
                swift_errorRelease();
                swift_errorRelease();
                swift_errorRelease();
              }
              if (__OFADD__(v12, v112)) {
                __break(1u);
              }
              return 0;
            }
LABEL_25:
            if (v118 == ++v37)
            {

              swift_release();
              uint64_t v5 = v100;
              a3 = v101;
              a2 = v98;
              goto LABEL_4;
            }
          }
        }

        swift_release();
      }
      else
      {
      }
LABEL_4:
      ++a3;
      uint64_t v13 = v105;
    }
    while (a3 != v105);
    swift_unknownObjectRelease();
  }
  uint64_t v88 = *(void **)(v5 + 24);
  if (objc_msgSend(v88, "hasChanges", v98))
  {
    id v123 = 0;
    if (![v88 save:&v123])
    {
      id v90 = v123;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100906F98 != -1) {
        goto LABEL_68;
      }
      goto LABEL_59;
    }
    id v89 = v123;
  }
  return v112;
}

uint64_t sub_100176D9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = _s10PredicatesOMa(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077BB40;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)(inited + 48) = swift_getKeyPath();
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = swift_getKeyPath();
  *(void *)(inited + 72) = swift_getKeyPath();
  *(void *)(inited + 80) = swift_getKeyPath();
  *(void *)(inited + 88) = swift_getKeyPath();
  *(void *)(inited + 96) = swift_getKeyPath();
  unint64_t v14 = inited;
  specialized Array._endMutation()();
  unint64_t v6 = v14;
  uint64_t v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_10077B710;
  *(void *)(v7 + 32) = swift_getKeyPath();
  *(void *)(v7 + 40) = swift_getKeyPath();
  unint64_t v14 = v7;
  specialized Array._endMutation()();
  unint64_t v8 = v14;
  unsigned char *v4 = *(unsigned char *)(v1 + 16);
  swift_storeEnumTagMultiPayload();
  unint64_t v9 = (void *)sub_10038F1F0();
  sub_1000C6DAC((uint64_t)v4);
  uint64_t v10 = (void *)sub_1003BC8C4(v6, v8, 0, (uint64_t)v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  [v10 setFetchBatchSize:50];
  [v10 setReturnsObjectsAsFaults:0];
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  uint64_t v11 = NSManagedObjectContext.fetch<A>(_:)();

  return v11;
}

void sub_100177000(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0xF000000000000000;
  }
  *a3 = v6;
  a3[1] = v8;
}

void sub_100177064(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v8 = isa;
  [v6 *a5];
}

void sub_1001770DC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 ckZoneOwnerName];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_100177144(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v3 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v3 = 0;
  }
  id v4 = v3;
  [v2 setCkZoneOwnerName:];
}

uint64_t sub_1001771B4()
{
  return swift_deallocClassInstance();
}

id sub_100177234()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_AutoConvertSharedInlineTags();
  return [super dealloc];
}

uint64_t type metadata accessor for RDStoreControllerMigrator_AutoConvertSharedInlineTags()
{
  return self;
}

uint64_t type metadata accessor for RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner()
{
  return self;
}

const char *sub_1001772BC()
{
  return "titleDocument";
}

void sub_1001772C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1001772E8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_100177308()
{
  return "notes";
}

const char *sub_10017731C()
{
  return "notesDocument";
}

void sub_100177328(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100177348(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_100177368()
{
  return "ckServerShareData";
}

void sub_100177374(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100177394(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1001773B4()
{
  return "ckServerRecordData";
}

void sub_1001773C0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1001773E0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_100177400()
{
  return "ckZoneOwnerName";
}

uint64_t sub_100177434()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10017746C()
{
  sub_100175D98(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100177478()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100177488(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100177498()
{
  return swift_release();
}

unint64_t sub_1001774A0()
{
  unint64_t result = qword_10090D758;
  if (!qword_10090D758)
  {
    sub_100096058(&qword_10090D750);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D758);
  }
  return result;
}

uint64_t sub_1001774FC(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 >> 6)
  {
    if (a3 >> 6 != 1) {
      return result;
    }
    a3 &= 0x3Fu;
  }
  return sub_10013C078(result, a2, a3);
}

uint64_t sub_100177518(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 >> 6)
  {
    if (a3 >> 6 != 1) {
      return result;
    }
    a3 &= 0x3Fu;
  }
  return sub_10013C0B4(result, a2, a3);
}

unint64_t sub_100177534()
{
  unint64_t result = qword_10090D760;
  if (!qword_10090D760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D760);
  }
  return result;
}

uint64_t sub_100177588()
{
  NSManagedObjectContext.rem_performAndWait<A>(_:)();
  return v1;
}

void sub_1001777A0(char a1, void *a2)
{
  id v14 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:1];
  id v4 = [a2 persistentStoreCoordinator];
  [v14 setPersistentStoreCoordinator:v4];

  [v14 setTransactionAuthor:RDStoreControllerAutoConvertSharedInlineTagsMigrationAuthor];
  [v14 setUndoManager:0];
  [v14 setRetainsRegisteredObjects:1];
  if (sub_100177588())
  {
    type metadata accessor for RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner();
    uint64_t v5 = swift_allocObject();
    *(unsigned char *)(v5 + 16) = a1 & 1;
    *(void *)(v5 + 24) = v14;
    *(void *)(v5 + 32) = a2;
    id v14 = v14;
    id v6 = a2;
    sub_1001758E0();
    swift_release();
  }
  else
  {
    if (qword_100906F98 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_10090D640);
    id v8 = a2;
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      id v12 = sub_1002ECF34();
      sub_1000C51B8((uint64_t)v12, v13, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDStoreControllerMigrator_AutoConvertSharedInlineTags: Skipping persistentStore since its account is not a CK account {persistentStore: %{public}s}", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
}

void sub_100177A68(void *a1, void *a2)
{
  *(void *)&v8[0] = 0xD000000000000035;
  *((void *)&v8[0] + 1) = 0x800000010077E550;
  id v4 = [a2 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_1000D6CBC((uint64_t)v8, (uint64_t)v9);
  if (!v9[3])
  {
    sub_1000F5B8C((uint64_t)v9);
LABEL_9:
    sub_1001777A0(1, a1);
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    v9[0] = 0xD000000000000035;
    v9[1] = 0x800000010077E550;
    [a2 __swift_setObject:isa forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    return;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_9;
  }
  id v5 = [v7 integerValue];

  if ((uint64_t)v5 <= 0) {
    goto LABEL_9;
  }
}

uint64_t sub_100177BF8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  id v4 = v3;
  uint64_t v42 = a3;
  uint64_t v7 = type metadata accessor for String.Encoding();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v11 = String.data(using:allowLossyConversion:)();
  unint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v13 >> 60 == 15)
  {
    if (qword_100906FA0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_10090D770);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v17 = 136315138;
      v44[0] = v4;
      swift_getMetatypeMetadata();
      uint64_t v18 = String.init<A>(describing:)();
      v44[0] = (id)sub_1000C51B8(v18, v19, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDJSONDecoding can't encode input string as utf8 data {class: %s}", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v20 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v44[0] = 0;
    id v22 = [v20 JSONObjectWithData:isa options:0 error:v44];

    id v23 = v44[0];
    if (v22)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10009A1B0((uint64_t)v45, (uint64_t)v44);
      sub_100094134((uint64_t *)&unk_100917670);
      if (swift_dynamicCast())
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8))(v43, a1, a2);
        sub_100097F20(v11, v13);
        swift_bridgeObjectRelease();
        return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v45);
      }
      if (qword_100906FA0 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_10008E2DC(v34, (uint64_t)qword_10090D770);
      unint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        v44[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 136315138;
        uint64_t v43 = (uint64_t)v4;
        swift_getMetatypeMetadata();
        uint64_t v38 = String.init<A>(describing:)();
        uint64_t v43 = sub_1000C51B8(v38, v39, (uint64_t *)v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Invalid JSONSerialization.jsonObject return value {class: %s}", v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      sub_100097F20(v11, v13);

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v45);
    }
    else
    {
      unint64_t v25 = v23;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100906FA0 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      sub_10008E2DC(v26, (uint64_t)qword_10090D770);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        v45[0] = v41;
        *(_DWORD *)uint64_t v29 = 136315394;
        v44[0] = v4;
        swift_getMetatypeMetadata();
        uint64_t v30 = String.init<A>(describing:)();
        v44[0] = (id)sub_1000C51B8(v30, v31, v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v32 = Error.localizedDescription.getter();
        v44[0] = (id)sub_1000C51B8(v32, v33, v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDJSONDecoding can't decode JSON {class: %s, error: %s}", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_100097F20(v11, v13);

        swift_errorRelease();
      }
      else
      {
        sub_100097F20(v11, v13);
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(v42, 1, 1, a1);
}

uint64_t sub_100178338()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090D770);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090D770);
  if (qword_100907858 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942550);
  NSString v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001784C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v12[3] = sub_1000E6EE8();
  v12[0] = isa;
  uint64_t v7 = v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts;
  swift_beginAccess();
  unint64_t v8 = *(void *)(*(void *)v7 + 16);
  sub_10009A1B0((uint64_t)v12, (uint64_t)v11);
  swift_beginAccess();
  uint64_t v9 = *(void **)v7;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v7 = v9;
  if (result)
  {
    if (v8) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)sub_1001ECDA8(v9);
  uint64_t v9 = (void *)result;
  *(void *)uint64_t v7 = result;
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  if (v8 <= v9[2])
  {
    sub_10035DA88((uint64_t)v11, a2, a3);
    swift_endAccess();
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v12);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10017863C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Int32._bridgeToObjectiveC()().super.super.isa;
  v12[3] = sub_1000E6EE8();
  v12[0] = isa;
  uint64_t v7 = v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts;
  swift_beginAccess();
  unint64_t v8 = *(void *)(*(void *)v7 + 16);
  sub_10009A1B0((uint64_t)v12, (uint64_t)v11);
  swift_beginAccess();
  uint64_t v9 = *(void **)v7;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v7 = v9;
  if (result)
  {
    if (v8) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)sub_1001ECDA8(v9);
  uint64_t v9 = (void *)result;
  *(void *)uint64_t v7 = result;
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  if (v8 <= v9[2])
  {
    sub_10035DA88((uint64_t)v11, a2, a3);
    swift_endAccess();
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v12);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1001787B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  v12[3] = sub_1000E6EE8();
  v12[0] = isa;
  uint64_t v7 = v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts;
  swift_beginAccess();
  unint64_t v8 = *(void *)(*(void *)v7 + 16);
  sub_10009A1B0((uint64_t)v12, (uint64_t)v11);
  swift_beginAccess();
  uint64_t v9 = *(void **)v7;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v7 = v9;
  if (result)
  {
    if (v8) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)sub_1001ECDA8(v9);
  uint64_t v9 = (void *)result;
  *(void *)uint64_t v7 = result;
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  if (v8 <= v9[2])
  {
    sub_10035DA88((uint64_t)v11, a2, a3);
    swift_endAccess();
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v12);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10017892C(uint64_t a1, uint64_t a2)
{
  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  v11[3] = sub_1000E6EE8();
  v11[0] = isa;
  uint64_t v6 = v2 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts;
  swift_beginAccess();
  unint64_t v7 = *(void *)(*(void *)v6 + 16);
  sub_10009A1B0((uint64_t)v11, (uint64_t)v10);
  swift_beginAccess();
  unint64_t v8 = *(void **)v6;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v6 = v8;
  if (result)
  {
    if (v7) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)sub_1001ECDA8(v8);
  unint64_t v8 = (void *)result;
  *(void *)uint64_t v6 = result;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_3:
  if (v7 <= v8[2])
  {
    sub_10035DA88((uint64_t)v10, a1, a2);
    swift_endAccess();
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v11);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100178B60(void *a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    id v5 = a3;
    unint64_t v7 = v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts;
    swift_beginAccess();
    unint64_t v8 = *(void **)(*(void *)v7 + 16);
    sub_10009A1B0((uint64_t)a1, (uint64_t)v15);
    swift_beginAccess();
    a1 = *(void **)v7;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)unint64_t v7 = a1;
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      a1 = sub_1001ECDA8(a1);
      *(void *)unint64_t v7 = a1;
      if (v8)
      {
LABEL_4:
        if ((unint64_t)v8 <= a1[2])
        {
          sub_10035DA88((uint64_t)v15, a2, (uint64_t)v5);
          return swift_endAccess();
        }
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    unint64_t v8 = sub_1001ECD94(v8);
    void *v5 = v8;
    if (!v7) {
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  id v5 = (void *)(v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_arrays);
  swift_beginAccess();
  unint64_t v7 = *(void *)(*v5 + 16);
  sub_10009A1B0((uint64_t)a1, (uint64_t)v15);
  swift_beginAccess();
  unint64_t v8 = (void *)*v5;
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  void *v5 = v8;
  if ((v10 & 1) == 0) {
    goto LABEL_17;
  }
  if (!v7)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_8:
  if (v7 > v8[2])
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  --v7;
  a1 = v8 + 4;
  id v5 = (void *)v8[v7 + 4];
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  v8[v7 + 4] = v5;
  if ((v11 & 1) == 0)
  {
LABEL_20:
    id v5 = sub_1003090C0(0, v5[2] + 1, 1, v5);
    a1[v7] = v5;
  }
  unint64_t v13 = v5[2];
  unint64_t v12 = v5[3];
  if (v13 >= v12 >> 1)
  {
    id v5 = sub_1003090C0((void *)(v12 > 1), v13 + 1, 1, v5);
    a1[v7] = v5;
  }
  id v5[2] = v13 + 1;
  sub_10009A1A0(v15, &v5[4 * v13 + 4]);
  return swift_endAccess();
}

void sub_100178D6C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id v4 = v3;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  char v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E6E80(a1, (uint64_t)&v105);
  if (v107)
  {
    if (swift_dynamicCast())
    {
      uint64_t v107 = &type metadata for String;
      long long v105 = v103;
LABEL_104:
      sub_100178B60(&v105, a2, (void *)a3);
      goto LABEL_105;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v105, &qword_100908190);
  }
  sub_1000E6E80(a1, (uint64_t)&v105);
  if (v107)
  {
    int v15 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, v15 ^ 1u, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
      uint64_t v16 = UUID.uuidString.getter();
      uint64_t v107 = &type metadata for String;
      *(void *)&long long v105 = v16;
      *((void *)&v105 + 1) = v17;
      sub_100178B60(&v105, a2, (void *)a3);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      goto LABEL_105;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v105, &qword_100908190);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  }
  sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
  sub_1000E6E80(a1, (uint64_t)&v105);
  unint64_t v96 = a3;
  uint64_t v95 = a2;
  if (v107)
  {
    uint64_t v18 = sub_100094134(&qword_100914560);
    if (swift_dynamicCast())
    {
      unint64_t v19 = v103;
      uint64_t v20 = (long long **)((char *)v4 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_arrays);
      swift_beginAccess();
      uint64_t v21 = *v20;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v20 = v21;
      id v97 = (void *)v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_131;
      }
      goto LABEL_12;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v105, &qword_100908190);
  }
  sub_1000E6E80(a1, (uint64_t)&v105);
  if (!v107)
  {
    sub_1000966BC((uint64_t)&v105, &qword_100908190);
    return;
  }
  sub_100094134((uint64_t *)&unk_10090D7D0);
  if (swift_dynamicCast())
  {
    id v87 = (id)v103;
    unint64_t v33 = sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v20 = (long long **)((char *)v4 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts);
    swift_beginAccess();
    uint64_t v34 = *v20;
    char v35 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v20 = v34;
    if ((v35 & 1) == 0)
    {
      uint64_t v34 = (long long *)sub_100309F10(0, *((void *)v34 + 2) + 1, 1, v34);
      *uint64_t v20 = v34;
    }
    unint64_t v37 = *((void *)v34 + 2);
    unint64_t v36 = *((void *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      uint64_t v34 = (long long *)sub_100309F10((void *)(v36 > 1), v37 + 1, 1, v34);
      *uint64_t v20 = v34;
    }
    *((void *)v34 + 2) = v37 + 1;
    *((void *)v34 + v37 + 4) = v33;
    swift_endAccess();
    sub_1000E6E80(a1, (uint64_t)&v105);
    if (v107)
    {
      sub_100094134((uint64_t *)&unk_100917670);
      uint64_t v21 = &v105;
      if (swift_dynamicCast())
      {
        unint64_t v94 = 0;
        uint64_t v38 = *(void *)(v103 + 64);
        uint64_t v88 = v103 + 64;
        uint64_t v92 = v103;
        uint64_t v39 = 1 << *(unsigned char *)(v103 + 32);
        uint64_t v40 = -1;
        if (v39 < 64) {
          uint64_t v40 = ~(-1 << v39);
        }
        unint64_t v19 = v40 & v38;
        uint64_t v91 = v104;
        os_log_type_t v93 = &v106;
        int64_t v90 = (unint64_t)(v39 + 63) >> 6;
        int64_t v86 = v90 - 1;
        id v89 = v20;
        while (1)
        {
          if (v19)
          {
            unint64_t v42 = __clz(__rbit64(v19));
            v19 &= v19 - 1;
            unint64_t v43 = v42 | (v94 << 6);
            goto LABEL_50;
          }
          int64_t v47 = v94 + 1;
          if (__OFADD__(v94, 1)) {
            goto LABEL_129;
          }
          if (v47 >= v90) {
            goto LABEL_68;
          }
          unint64_t v48 = *(void *)(v88 + 8 * v47);
          if (v48) {
            goto LABEL_54;
          }
          int64_t v49 = v94 + 2;
          ++v94;
          if (v47 + 1 >= v90) {
            goto LABEL_68;
          }
          unint64_t v48 = *(void *)(v88 + 8 * v49);
          if (v48) {
            goto LABEL_57;
          }
          unint64_t v94 = v47 + 1;
          if (v47 + 2 >= v90) {
            goto LABEL_68;
          }
          unint64_t v48 = *(void *)(v88 + 8 * (v47 + 2));
          if (v48)
          {
            v47 += 2;
LABEL_54:
            unint64_t v19 = (v48 - 1) & v48;
            unint64_t v43 = __clz(__rbit64(v48)) + (v47 << 6);
            unint64_t v94 = v47;
LABEL_50:
            uint64_t v44 = *(void *)(v92 + 56);
            uint64_t v45 = (void *)(*(void *)(v92 + 48) + 16 * v43);
            uint64_t v46 = v45[1];
            *(void *)&long long v103 = *v45;
            *((void *)&v103 + 1) = v46;
            sub_10009A1B0(v44 + 32 * v43, (uint64_t)v91);
            swift_bridgeObjectRetain();
            goto LABEL_69;
          }
          int64_t v49 = v47 + 3;
          unint64_t v94 = v47 + 2;
          if (v47 + 3 >= v90) {
            goto LABEL_68;
          }
          unint64_t v48 = *(void *)(v88 + 8 * v49);
          if (v48)
          {
LABEL_57:
            int64_t v47 = v49;
            goto LABEL_54;
          }
          while (1)
          {
            int64_t v47 = v49 + 1;
            if (__OFADD__(v49, 1))
            {
              __break(1u);
              goto LABEL_140;
            }
            if (v47 >= v90) {
              break;
            }
            unint64_t v48 = *(void *)(v88 + 8 * v47);
            ++v49;
            if (v48) {
              goto LABEL_54;
            }
          }
          unint64_t v94 = v86;
LABEL_68:
          unint64_t v19 = 0;
          memset(v104, 0, sizeof(v104));
          long long v103 = 0u;
LABEL_69:
          sub_100179EE8((uint64_t)&v103, (uint64_t)&v105);
          uint64_t v50 = *((void *)&v105 + 1);
          if (!*((void *)&v105 + 1))
          {
            swift_release();
LABEL_114:
            uint64_t v79 = *((void *)*v20 + 2);
            if (!v79)
            {
              if (qword_100906FA0 != -1) {
                swift_once();
              }
              uint64_t v81 = type metadata accessor for Logger();
              sub_10008E2DC(v81, (uint64_t)qword_10090D770);
              unint64_t v82 = Logger.logObject.getter();
              os_log_type_t v83 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v82, v83))
              {
                uint64_t v84 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v84 = 0;
                _os_log_impl((void *)&_mh_execute_header, v82, v83, "JSON encode error: expected at least one dict", v84, 2u);
                swift_slowDealloc();
                swift_unknownObjectRelease();
              }
              else
              {

                swift_unknownObjectRelease();
              }
              return;
            }
            uint64_t v72 = *((void *)*v20 + v79 + 3);
            swift_beginAccess();
            unint64_t v73 = *v20;
            if (*((void *)*v20 + 2))
            {
              swift_bridgeObjectRetain();
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v80 = *((void *)v73 + 2);
                if (v80) {
                  goto LABEL_118;
                }
LABEL_137:
                __break(1u);
LABEL_138:
                swift_once();
LABEL_108:
                uint64_t v75 = type metadata accessor for Logger();
                sub_10008E2DC(v75, (uint64_t)qword_10090D770);
                id v76 = Logger.logObject.getter();
                os_log_type_t v77 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v76, v77))
                {
                  uint64_t v78 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v78 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v76, v77, "JSON encode error: expected at least one array", v78, 2u);
                  swift_slowDealloc();
                }

                return;
              }
LABEL_136:
              unint64_t v73 = (long long *)sub_1001ECDA8(v73);
              uint64_t v80 = *((void *)v73 + 2);
              if (!v80) {
                goto LABEL_137;
              }
LABEL_118:
              *((void *)v73 + 2) = v80 - 1;
              *uint64_t v20 = v73;
              swift_endAccess();
              swift_bridgeObjectRelease();
              uint64_t v107 = (void *)sub_100094134((uint64_t *)&unk_100917670);
              *(void *)&long long v105 = v72;
              sub_100178B60(&v105, a2, (void *)a3);
              swift_unknownObjectRelease();
LABEL_105:
              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v105);
              return;
            }
LABEL_135:
            __break(1u);
            goto LABEL_136;
          }
          uint64_t v51 = v105;
          sub_10009A1A0(v93, &v103);
          sub_10009A1B0((uint64_t)&v103, (uint64_t)v102);
          sub_1000E6EE8();
          if (swift_dynamicCast())
          {
            id v97 = (void *)v19;

            sub_10009A1B0((uint64_t)&v103, (uint64_t)v102);
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v102);
            goto LABEL_74;
          }
          sub_10009A1B0((uint64_t)&v103, (uint64_t)v102);
          sub_10009A1A0(v102, &v100);
          if (!swift_dynamicCast())
          {
            sub_10009A1B0((uint64_t)&v103, (uint64_t)&v100);
            uint64_t v21 = v4;
            sub_100178D6C(&v100, v51, v50);
            swift_bridgeObjectRelease();
            sub_1000966BC((uint64_t)&v100, &qword_100908190);
            goto LABEL_47;
          }
          id v97 = (void *)v19;
          swift_bridgeObjectRelease();
LABEL_74:
          unint64_t v19 = *((void *)*v20 + 2);
          sub_10009A1B0((uint64_t)&v103, (uint64_t)&v100);
          swift_beginAccess();
          uint64_t v21 = *v20;
          swift_bridgeObjectRetain();
          char v52 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v20 = v21;
          if (v52)
          {
            if (!v19) {
              goto LABEL_126;
            }
          }
          else
          {
            uint64_t v21 = (long long *)sub_1001ECDA8(v21);
            *uint64_t v20 = v21;
            if (!v19) {
              goto LABEL_126;
            }
          }
          if (v19 > *((void *)v21 + 2)) {
            break;
          }
          unint64_t v53 = v19 - 1;
          a3 = (unint64_t)(v21 + 2);
          if (v101)
          {
            uint64_t v20 = (long long **)v4;
            sub_10009A1A0(&v100, v99);
            a2 = 8 * v53;
            char v54 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v98 = *(long long **)(a3 + a2);
            uint64_t v21 = v98;
            *(void *)(a3 + a2) = 0x8000000000000000;
            unint64_t v19 = sub_1001806F8(v51, v50);
            uint64_t v56 = *((void *)v21 + 2);
            BOOL v57 = (v55 & 1) == 0;
            uint64_t v58 = v56 + v57;
            if (__OFADD__(v56, v57)) {
              goto LABEL_128;
            }
            char v59 = v55;
            if (*((void *)v21 + 3) < v58)
            {
              sub_100311988(v58, v54);
              uint64_t v21 = v98;
              unint64_t v60 = sub_1001806F8(v51, v50);
              if ((v59 & 1) == (v61 & 1))
              {
                unint64_t v19 = v60;
                goto LABEL_89;
              }
LABEL_140:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return;
            }
            if ((v54 & 1) == 0)
            {
              uint64_t v21 = (long long *)&v98;
              sub_10031A274();
            }
LABEL_89:
            uint64_t v66 = v98;
            if (v59)
            {
              uint64_t v41 = (_OWORD *)(*((void *)v98 + 7) + 32 * v19);
              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v41);
              sub_10009A1A0(v99, v41);
            }
            else
            {
              *((void *)v98 + (v19 >> 6) + 8) |= 1 << v19;
              id v67 = (uint64_t *)(*((void *)v66 + 6) + 16 * v19);
              uint64_t *v67 = v51;
              v67[1] = v50;
              sub_10009A1A0(v99, (_OWORD *)(*((void *)v66 + 7) + 32 * v19));
              uint64_t v68 = *((void *)v66 + 2);
              BOOL v69 = __OFADD__(v68, 1);
              uint64_t v70 = v68 + 1;
              if (v69) {
                goto LABEL_130;
              }
              *((void *)v66 + 2) = v70;
              swift_bridgeObjectRetain();
            }
            id v4 = (long long *)v20;
            unint64_t v19 = (unint64_t)v97;
            uint64_t v21 = *(long long **)(a3 + a2);
            *(void *)(a3 + a2) = v66;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a3 = v96;
            a2 = v95;
            uint64_t v20 = v89;
          }
          else
          {
            sub_1000966BC((uint64_t)&v100, &qword_100908190);
            uint64_t v21 = *(long long **)(a3 + 8 * v53);
            swift_bridgeObjectRetain();
            unint64_t v62 = sub_1001806F8(v51, v50);
            char v64 = v63;
            swift_bridgeObjectRelease();
            if (v64)
            {
              char v65 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v21 = *(long long **)(a3 + 8 * v53);
              uint64_t v98 = v21;
              *(void *)(a3 + 8 * v53) = 0x8000000000000000;
              if ((v65 & 1) == 0)
              {
                sub_10031A274();
                uint64_t v21 = v98;
              }
              swift_bridgeObjectRelease();
              sub_10009A1A0((_OWORD *)(*((void *)v21 + 7) + 32 * v62), v99);
              sub_1002C2914(v62, (uint64_t)v21);
              *(void *)(a3 + 8 * v53) = v21;
              swift_bridgeObjectRelease();
            }
            else
            {
              memset(v99, 0, sizeof(v99));
            }
            a3 = v96;
            a2 = v95;
            swift_bridgeObjectRelease();
            sub_1000966BC((uint64_t)v99, &qword_100908190);
            unint64_t v19 = (unint64_t)v97;
          }
          swift_endAccess();
          swift_bridgeObjectRelease();
LABEL_47:
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v103);
        }
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        uint64_t v21 = (long long *)sub_10030A348(0, *((void *)v21 + 2) + 1, 1, v21);
        *uint64_t v20 = v21;
LABEL_12:
        unint64_t v24 = *((void *)v21 + 2);
        unint64_t v23 = *((void *)v21 + 3);
        if (v24 >= v23 >> 1)
        {
          uint64_t v21 = (long long *)sub_10030A348((void *)(v23 > 1), v24 + 1, 1, v21);
          *uint64_t v20 = v21;
        }
        *((void *)v21 + 2) = v24 + 1;
        *((void *)v21 + v24 + 4) = _swiftEmptyArrayStorage;
        swift_endAccess();
        uint64_t v25 = *(void *)(v19 + 16);
        if (v25)
        {
          unint64_t v94 = v19;
          a2 = v19 + 32;
          while (1)
          {
            sub_10009A1B0(a2, (uint64_t)&v105);
            sub_10009A1B0((uint64_t)&v105, (uint64_t)&v103);
            sub_1000E6EE8();
            if (swift_dynamicCast())
            {

              sub_10009A1B0((uint64_t)&v105, (uint64_t)&v103);
              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v103);
            }
            else
            {
              sub_10009A1B0((uint64_t)&v105, (uint64_t)&v103);
              sub_10009A1A0(&v103, v102);
              if (!swift_dynamicCast())
              {
                sub_10009A1B0((uint64_t)&v105, (uint64_t)v102);
                sub_100178D6C(v102, 0, 0);
                sub_1000966BC((uint64_t)v102, &qword_100908190);
                _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v105);
                goto LABEL_17;
              }
              swift_bridgeObjectRelease();
            }
            unint64_t v19 = *((void *)*v20 + 2);
            sub_10009A1B0((uint64_t)&v105, (uint64_t)v102);
            swift_beginAccess();
            uint64_t v21 = *v20;
            char v26 = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v20 = v21;
            if (v26)
            {
              if (!v19) {
                goto LABEL_124;
              }
            }
            else
            {
              uint64_t v21 = (long long *)sub_1001ECD94(v21);
              *uint64_t v20 = v21;
              if (!v19)
              {
LABEL_124:
                __break(1u);
LABEL_125:
                __break(1u);
LABEL_126:
                __break(1u);
                goto LABEL_127;
              }
            }
            if (v19 > *((void *)v21 + 2)) {
              goto LABEL_125;
            }
            a3 = v19 - 1;
            uint64_t v27 = v21 + 2;
            uint64_t v28 = v19 - 1;
            uint64_t v29 = *(void **)((char *)v21 + v28 * 8 + 32);
            char v30 = swift_isUniquelyReferenced_nonNull_native();
            v27[v28] = v29;
            if ((v30 & 1) == 0)
            {
              uint64_t v29 = sub_1003090C0(0, v29[2] + 1, 1, v29);
              v27[a3] = v29;
            }
            unint64_t v32 = v29[2];
            unint64_t v31 = v29[3];
            if (v32 >= v31 >> 1)
            {
              uint64_t v29 = sub_1003090C0((void *)(v31 > 1), v32 + 1, 1, v29);
              v27[a3] = v29;
            }
            v29[2] = v32 + 1;
            sub_10009A1A0(v102, &v29[4 * v32 + 4]);
            swift_endAccess();
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v105);
LABEL_17:
            a2 += 32;
            if (!--v25)
            {
              swift_bridgeObjectRelease();
              a3 = v96;
              a2 = v95;
              goto LABEL_99;
            }
          }
        }
        swift_bridgeObjectRelease();
LABEL_99:
        uint64_t v71 = *((void *)*v20 + 2);
        if (!v71)
        {
          if (qword_100906FA0 != -1) {
            goto LABEL_138;
          }
          goto LABEL_108;
        }
        uint64_t v72 = *((void *)*v20 + v71 + 3);
        swift_beginAccess();
        unint64_t v73 = *v20;
        if (*((void *)*v20 + 2))
        {
          swift_bridgeObjectRetain();
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v74 = *((void *)v73 + 2);
            if (v74)
            {
LABEL_103:
              *((void *)v73 + 2) = v74 - 1;
              *uint64_t v20 = v73;
              swift_endAccess();
              swift_bridgeObjectRelease();
              uint64_t v107 = v97;
              *(void *)&long long v105 = v72;
              goto LABEL_104;
            }
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
        }
        else
        {
          __break(1u);
        }
        unint64_t v73 = (long long *)sub_1001ECD94(v73);
        uint64_t v74 = *((void *)v73 + 2);
        if (v74) {
          goto LABEL_103;
        }
        goto LABEL_134;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&v105, &qword_100908190);
    }
    [v87 encodeWithCoder:v4];
    goto LABEL_114;
  }
}

id sub_100179E2C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDJSONCoder();
  return [super dealloc];
}

uint64_t type metadata accessor for RDJSONCoder()
{
  return self;
}

uint64_t sub_100179EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10090B048);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100179F50(uint64_t a1)
{
  unint64_t result = sub_100179F78();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100179F78()
{
  unint64_t result = qword_10090D810;
  if (!qword_10090D810)
  {
    type metadata accessor for REMRemindersListDataView.DEBUG_AssignedCountInvocation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D810);
  }
  return result;
}

void sub_100179FD0(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v17[1] = a3;
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v18 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v17 - v10;
  id v12 = [objc_allocWithZone((Class)type metadata accessor for REMRemindersListDataView.AssignedInvocation()) initWithFetchResultTokenToDiffAgainst:a2];
  uint64_t v13 = (uint64_t *)REMRemindersListDataView.DEBUG_AssignedCountInvocation.Parameters.currentUserShareParticipantIDsOverride.getter();
  uint64_t v14 = sub_10068EB9C(a1, v13);

  swift_bridgeObjectRelease();
  if (!v3)
  {
    id v15 = [v19 fetchResultTokenToDiffAgainst];
    sub_10051F2BC(v15, (uint64_t)a1, (uint64_t)v11);

    uint64_t v20 = v14;
    uint64_t v16 = v18;
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v8, v11, v6);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v6);
  }
}

void sub_10017A1C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, &qword_100910230);
    sub_1000ED098((unint64_t *)&unk_100914B70, &qword_100910230);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v20;
    uint64_t v19 = v21;
    uint64_t v4 = v22;
    int64_t v5 = v23;
    unint64_t v6 = v24;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v8 = ~v7;
    uint64_t v9 = -v7;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v4 = v8;
    int64_t v5 = 0;
  }
  int64_t v18 = (unint64_t)(v4 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    sub_1000963CC(0, &qword_100910230);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v11 = v25;
    swift_unknownObjectRelease();
    int64_t v12 = v5;
    uint64_t v13 = v6;
    while (v11)
    {
      id v25 = v11;
      sub_10017DDE0(&v25);

      if (v2) {
        break;
      }
      int64_t v5 = v12;
      unint64_t v6 = v13;
      if (v3 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v6)
      {
        uint64_t v13 = (v6 - 1) & v6;
        unint64_t v14 = __clz(__rbit64(v6)) | (v5 << 6);
        int64_t v12 = v5;
      }
      else
      {
        int64_t v12 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          return;
        }
        if (v12 >= v18) {
          break;
        }
        unint64_t v15 = *(void *)(v19 + 8 * v12);
        if (!v15)
        {
          int64_t v16 = v5 + 2;
          if (v5 + 2 >= v18) {
            break;
          }
          unint64_t v15 = *(void *)(v19 + 8 * v16);
          if (v15) {
            goto LABEL_22;
          }
          int64_t v16 = v5 + 3;
          if (v5 + 3 >= v18) {
            break;
          }
          unint64_t v15 = *(void *)(v19 + 8 * v16);
          if (v15) {
            goto LABEL_22;
          }
          int64_t v16 = v5 + 4;
          if (v5 + 4 >= v18) {
            break;
          }
          unint64_t v15 = *(void *)(v19 + 8 * v16);
          if (v15)
          {
LABEL_22:
            int64_t v12 = v16;
          }
          else
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v18) {
              break;
            }
            unint64_t v15 = *(void *)(v19 + 8 * v12);
            if (!v15)
            {
              int64_t v17 = v5 + 6;
              while (v18 != v17)
              {
                unint64_t v15 = *(void *)(v19 + 8 * v17++);
                if (v15)
                {
                  int64_t v12 = v17 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v13 = (v15 - 1) & v15;
        unint64_t v14 = __clz(__rbit64(v15)) + (v12 << 6);
      }
      id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
    }
  }
  sub_1000C1AF8();
}

void sub_10017A4D0(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1000ED098((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v28;
    uint64_t v27 = v29;
    uint64_t v2 = v30;
    uint64_t v3 = v31;
    unint64_t v4 = v32;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v27 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v24 = v2;
  int64_t v26 = (unint64_t)(v2 + 64) >> 6;
  id v25 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v8 = v3;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_39;
    }
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v11 = v33;
    swift_unknownObjectRelease();
    if (!v33) {
      goto LABEL_39;
    }
LABEL_32:
    id v15 = [v11 hashtagLabel:v24];
    if (v15 && (int64_t v16 = v15, v17 = [v15 name], v16, v17))
    {
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v25 = sub_100308F88(0, v25[2] + 1, 1, v25);
      }
      unint64_t v22 = v25[2];
      unint64_t v21 = v25[3];
      if (v22 >= v21 >> 1) {
        id v25 = sub_100308F88((void *)(v21 > 1), v22 + 1, 1, v25);
      }
      long long v25[2] = v22 + 1;
      int64_t v23 = &v25[2 * v22];
      void v23[4] = v18;
      v23[5] = v20;
    }
    else
    {
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v10 = v9 | (v3 << 6);
LABEL_31:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_39;
    }
    goto LABEL_32;
  }
  int64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 >= v26) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v12);
    ++v3;
    if (!v13)
    {
      uint64_t v3 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_39;
      }
      unint64_t v13 = *(void *)(v27 + 8 * v3);
      if (!v13)
      {
        uint64_t v3 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_39;
        }
        unint64_t v13 = *(void *)(v27 + 8 * v3);
        if (!v13)
        {
          uint64_t v3 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_39;
          }
          unint64_t v13 = *(void *)(v27 + 8 * v3);
          if (!v13)
          {
            uint64_t v3 = v8 + 5;
            if (v8 + 5 >= v26) {
              goto LABEL_39;
            }
            unint64_t v13 = *(void *)(v27 + 8 * v3);
            if (!v13)
            {
              uint64_t v14 = v8 + 6;
              while (v26 != v14)
              {
                unint64_t v13 = *(void *)(v27 + 8 * v14++);
                if (v13)
                {
                  uint64_t v3 = v14 - 1;
                  goto LABEL_30;
                }
              }
LABEL_39:
              sub_1000C1AF8();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    unint64_t v4 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v3 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

id sub_10017A880(void *a1, id a2)
{
  if (a2) {
    return [a2 evaluateWithObject:a1];
  }
  if (qword_1009072E8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100914C30);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    unint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Evaluating TypedPredicate with nil NSPredicate against object {object: %@}", v8, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_10017AA40()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090D818);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090D818);
  if (qword_100907850 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942538);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_10017AB20()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v0;
}

id sub_10017ABF0()
{
  uint64_t v1 = OBJC_IVAR____TtC7remindd31RDCoreDataCoreSpotlightDelegate____lazy_storage___contactStore;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd31RDCoreDataCoreSpotlightDelegate____lazy_storage___contactStore);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7remindd31RDCoreDataCoreSpotlightDelegate____lazy_storage___contactStore);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)CNContactStore) init];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

unint64_t sub_10017AC64(void *a1)
{
  self;
  if (!swift_dynamicCastObjCClass()) {
    return 0;
  }
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (!v2)
  {
    self;
    uint64_t v6 = swift_dynamicCastObjCClass();
    if (v6)
    {
      os_log_type_t v7 = (void *)v6;
      id v4 = a1;
      unint64_t v5 = sub_10017E038(v7);
      goto LABEL_6;
    }
    return 0;
  }
  id v3 = (void *)v2;
  id v4 = a1;
  unint64_t v5 = (unint64_t)sub_10017B634(v3);
LABEL_6:
  unint64_t v8 = v5;

  return v8;
}

id sub_10017B634(void *a1)
{
  uint64_t v266 = type metadata accessor for DisplayRepresentation();
  uint64_t v265 = *(void *)(v266 - 8);
  __chkstk_darwin(v266);
  uint64_t v282 = (char *)&v248 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for REMSpotlightReminderViewProxy();
  uint64_t v283 = *(void *)(v3 - 8);
  uint64_t v284 = v3;
  __chkstk_darwin(v3);
  uint64_t v281 = (char *)&v248 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134(&qword_10090D890);
  __chkstk_darwin(v5 - 8);
  uint64_t v256 = (char *)&v248 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v259 = type metadata accessor for REMSpotlightAlarmVehicleTriggerEvent();
  uint64_t v257 = *(void *)(v259 - 8);
  __chkstk_darwin(v259);
  uint64_t v258 = (char *)&v248 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134(&qword_10090D898);
  __chkstk_darwin(v8 - 8);
  uint64_t v261 = (char *)&v248 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = type metadata accessor for REMSpotlightAlarmProximity();
  uint64_t v262 = *(void *)(v263 - 8);
  __chkstk_darwin(v263);
  uint64_t v264 = (char *)&v248 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_10090D8A0);
  __chkstk_darwin(v11 - 8);
  uint64_t v268 = (uint64_t)&v248 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v260 = (uint64_t *)((char *)&v248 - v14);
  __chkstk_darwin(v15);
  uint64_t v288 = (char *)&v248 - v16;
  uint64_t v17 = sub_100094134(&qword_10090D868);
  __chkstk_darwin(v17 - 8);
  uint64_t v280 = (char *)&v248 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v275 = type metadata accessor for URL();
  uint64_t v274 = *(void *)(v275 - 8);
  __chkstk_darwin(v275);
  uint64_t v273 = (char *)&v248 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v279 = (void *)type metadata accessor for UTType();
  uint64_t v278 = *(v279 - 1);
  __chkstk_darwin(v279);
  uint64_t v277 = (char *)&v248 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v276 = (char *)&v248 - v22;
  uint64_t v23 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v23 - 8);
  uint64_t v270 = (char *)&v248 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v269 = (char *)&v248 - v26;
  __chkstk_darwin(v27);
  uint64_t v271 = (char *)&v248 - v28;
  uint64_t v272 = type metadata accessor for Date();
  uint64_t v285 = *(void *)(v272 - 8);
  __chkstk_darwin(v272);
  uint64_t v286 = (void (*)(void))((char *)&v248 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v30 = (id)_s10PredicatesOMa(0);
  __chkstk_darwin(v30);
  unint64_t v32 = (char *)&v248 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  unint64_t v36 = (char *)&v248 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v37 - 8);
  uint64_t v267 = (char *)&v248 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v248 - v40;
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v248 - v43;
  uint64_t v292 = 0;
  unint64_t v293 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  uint64_t v292 = 0xD000000000000017;
  unint64_t v293 = 0x80000001007CCD40;
  NSURL v290 = a1;
  id v45 = [a1 identifier];
  if (v45)
  {
    uint64_t v46 = v45;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v41, 0, 1, v33);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v41, 1, 1, v33);
  }
  sub_100096408((uint64_t)v41, (uint64_t)v44, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v44, 1, v33))
  {
    sub_1000966BC((uint64_t)v44, (uint64_t *)&unk_100909E50);
    int64_t v47 = (void *)0xE300000000000000;
    uint64_t v48 = 7104878;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v36, v44, v33);
    sub_1000966BC((uint64_t)v44, (uint64_t *)&unk_100909E50);
    uint64_t v48 = UUID.uuidString.getter();
    int64_t v47 = v49;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
  }
  v50._countAndFlagsBits = v48;
  v50._object = v47;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  uint64_t v52 = v292;
  unint64_t v51 = v293;
  swift_storeEnumTagMultiPayload();
  unint64_t v53 = (void *)sub_10038F1F0();
  sub_100180854((uint64_t)v32, _s10PredicatesOMa);
  char v54 = v290;
  if ((sub_10017A880(v290, v53) & 1) == 0)
  {
    sub_100180524();
    swift_allocError();
    *(void *)uint64_t v61 = v52;
    *(void *)(v61 + 8) = v51;
    *(void *)(v61 + 16) = 0;
    *(void *)(v61 + 24) = 0;
    *(unsigned char *)(v61 + 32) = 0;
    swift_willThrow();
LABEL_11:

    return v30;
  }
  char v55 = v289;
  uint64_t v56 = sub_10024D600(v54);
  id v30 = v55;
  if (v55)
  {
    swift_getErrorValue();
    BOOL v57 = v53;
    id v30 = (id)Error.localizedDescription.getter();
    uint64_t v59 = v58;
    sub_100180524();
    swift_allocError();
    *(void *)uint64_t v60 = v52;
    *(void *)(v60 + 8) = v51;
    *(void *)(v60 + 16) = v30;
    *(void *)(v60 + 24) = v59;
    *(unsigned char *)(v60 + 32) = 1;
    swift_willThrow();

    swift_errorRelease();
    return v30;
  }
  char v63 = v56;
  char v64 = (char *)[v63 titleAsString];
  char v65 = v63;
  if (!v64)
  {
LABEL_24:

    sub_100180524();
    swift_allocError();
    *(void *)uint64_t v91 = v52;
    *(void *)(v91 + 8) = v51;
    *(void *)(v91 + 16) = 0;
    *(void *)(v91 + 24) = 0;
    *(unsigned char *)(v91 + 32) = 3;
    swift_willThrow();

    goto LABEL_11;
  }
  uint64_t v66 = v64;
  uint64_t v289 = v63;
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v69 = HIBYTE(v68) & 0xF;
  if ((v68 & 0x2000000000000000) == 0) {
    uint64_t v69 = v67 & 0xFFFFFFFFFFFFLL;
  }
  if (!v69)
  {
    swift_bridgeObjectRelease();
    char v63 = v289;

    char v65 = v66;
    goto LABEL_24;
  }
  uint64_t v252 = v67;
  uint64_t v254 = (void *)v68;
  uint64_t v70 = (objc_class *)type metadata accessor for RDCoreDataCoreSpotlightDelegate();
  v297.receiver = v287;
  v297.super_class = v70;
  id v71 = [super attributeSetForObject:v54];
  if (!v71)
  {
    id v30 = v289;

    swift_bridgeObjectRelease();
    sub_100180524();
    swift_allocError();
    *(void *)uint64_t v92 = v52;
    *(void *)(v92 + 8) = v51;
    *(void *)(v92 + 16) = 0;
    *(void *)(v92 + 24) = 0;
    *(unsigned char *)(v92 + 32) = 4;
    swift_willThrow();

    goto LABEL_11;
  }
  uint64_t v72 = v71;
  unint64_t v253 = v66;
  id v251 = v53;
  uint64_t v255 = 0;
  swift_bridgeObjectRelease();
  id v250 = v72;
  id v73 = [v72 attributeDictionary];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v74 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v76 = [v74 initWithAttributes:isa];

  os_log_type_t v77 = v289;
  id v78 = [v289 displayDate];
  uint64_t v79 = v272;
  if (v78)
  {
    uint64_t v80 = v78;
    [v78 isAllDay];
    Class v81 = Bool._bridgeToObjectiveC()().super.super.isa;
    [v76 setAllDay:v81];

    id v82 = [v80 date];
    os_log_type_t v83 = v286;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    Class v84 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(void (*)(void), uint64_t))(v285 + 8))(v83, v79);
    [v76 setDueDate:v84];
  }
  id v85 = [v77 notesAsString];
  [v76 setComment:v85];

  Class v86 = (Class)[v77 completionDate];
  id v87 = v271;
  if (v86)
  {
    uint64_t v88 = v286;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v89 = v285;
    (*(void (**)(char *, void (*)(void), uint64_t))(v285 + 32))(v87, v88, v79);
    int64_t v90 = *(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56);
    v90(v87, 0, 1, v79);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v79) == 1)
    {
      Class v86 = 0;
    }
    else
    {
      v93.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v89 = v285;
      Class v86 = v93.super.isa;
      (*(void (**)(char *, uint64_t))(v285 + 8))(v87, v79);
    }
  }
  else
  {
    uint64_t v89 = v285;
    int64_t v90 = *(void (**)(char *, void, uint64_t, uint64_t))(v285 + 56);
    v90(v271, 1, 1, v79);
  }
  [v76 setCompletionDate:v86];

  Class v94 = (Class)[v77 creationDate];
  if (v94)
  {
    uint64_t v95 = v286;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v96 = v269;
    (*(void (**)(char *, void (*)(void), uint64_t))(v89 + 32))(v269, v95, v79);
    v90(v96, 0, 1, v79);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v96, 1, v79) == 1)
    {
      Class v94 = 0;
    }
    else
    {
      v97.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v89 = v285;
      uint64_t v98 = v96;
      Class v94 = v97.super.isa;
      (*(void (**)(char *, uint64_t))(v285 + 8))(v98, v79);
    }
  }
  else
  {
    v90(v269, 1, 1, v79);
  }
  [v76 setContentCreationDate:v94];

  Class v99 = (Class)[v77 lastModifiedDate];
  uint64_t v249 = v33;
  if (v99)
  {
    long long v100 = v286;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v101 = v270;
    (*(void (**)(char *, void (*)(void), uint64_t))(v89 + 32))(v270, v100, v79);
    v90(v101, 0, 1, v79);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v101, 1, v79) == 1)
    {
      Class v99 = 0;
    }
    else
    {
      v102.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
      long long v103 = v101;
      Class v99 = v102.super.isa;
      (*(void (**)(char *, uint64_t))(v89 + 8))(v103, v79);
    }
  }
  else
  {
    v90(v270, 1, 1, v79);
  }
  [v76 setContentModificationDate:v99];

  uint64_t v104 = v276;
  static UTType.toDoItem.getter();
  UTType.identifier.getter();
  uint64_t v286 = *(void (**)(void))(v278 + 8);
  long long v105 = v279;
  v286(v104);
  NSString v106 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v76 setContentType:v106];

  [v76 setDisplayName:v253];
  id v107 = [v290 objectID];
  id v108 = [v107 URIRepresentation];

  uint64_t v109 = v273;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL.description.getter();
  (*(void (**)(char *, uint64_t))(v274 + 8))(v109, v275);
  NSString v110 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v76 setIdentifier:v110];

  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t v111 = swift_allocObject();
  *(_OWORD *)(v111 + 16) = xmmword_100776E60;
  *(void *)(v111 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v111 + 40) = v112;
  static UTType.utf8PlainText.getter();
  uint64_t v113 = UTType.identifier.getter();
  uint64_t v115 = v114;
  Class v116 = v105;
  uint64_t v117 = v105;
  uint64_t v118 = v286;
  ((void (*)(char *, void *))v286)(v104, v117);
  *(void *)(v111 + 48) = v113;
  *(void *)(v111 + 56) = v115;
  id v119 = v277;
  static UTType.utf16PlainText.getter();
  int v120 = v76;
  uint64_t v121 = UTType.identifier.getter();
  uint64_t v123 = v122;
  ((void (*)(char *, void *))v118)(v119, v116);
  *(void *)(v111 + 64) = v121;
  *(void *)(v111 + 72) = v123;
  id v124 = v120;
  Class v125 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v120 setProviderDataTypeIdentifiers:v125];

  unint64_t v126 = v289;
  id v127 = [v289 accountID];
  CSSearchableItemAttributeSet.rem_accountID.setter();
  [v126 flagged];
  CSSearchableItemAttributeSet.rem_flagged.setter();
  [v126 isRecurrent];
  CSSearchableItemAttributeSet.rem_isRecurrent.setter();
  uint64_t v128 = enum case for REMSearchableItemType.reminder(_:);
  uint64_t v129 = type metadata accessor for REMSearchableItemType();
  uint64_t v130 = *(void *)(v129 - 8);
  unint64_t v131 = v280;
  (*(void (**)(char *, uint64_t, uint64_t))(v130 + 104))(v280, v128, v129);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v131, 0, 1, v129);
  CSSearchableItemAttributeSet.rem_itemType.setter();
  id v132 = [v126 listID];
  CSSearchableItemAttributeSet.rem_listID.setter();
  id v133 = [v126 objectID];
  CSSearchableItemAttributeSet.rem_objectID.setter();
  id v134 = v253;
  [v124 setTitle:v253];

  uint64_t v135 = type metadata accessor for REMSpotlightLocationType();
  uint64_t v280 = *(char **)(v135 - 8);
  id v136 = v280 + 56;
  uint64_t v137 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v280 + 7);
  v137((uint64_t)v288, 1, 1, v135);
  id v138 = [v126 alarms];
  uint64_t v285 = v34;
  uint64_t v286 = (void (*)(void))v124;
  if (!v138) {
    goto LABEL_78;
  }
  long long v139 = v138;
  char v279 = v137;
  sub_1000963CC(0, &qword_10090C4B8);
  unint64_t v140 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v140 >> 62)
  {
LABEL_74:
    swift_bridgeObjectRetain();
    uint64_t v141 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v141)
    {
LABEL_41:
      uint64_t v277 = v136;
      uint64_t v278 = v135;
      unint64_t v142 = v140 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      uint64_t v135 = 4;
      while (1)
      {
        id v136 = (char *)(v135 - 4);
        if (v142) {
          id v143 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v143 = *(id *)(v140 + 8 * v135);
        }
        unint64_t v144 = v143;
        uint64_t v145 = v135 - 3;
        if (__OFADD__(v136, 1))
        {
          __break(1u);
          goto LABEL_73;
        }
        id v146 = [v143 trigger];
        self;
        if (swift_dynamicCastObjCClass()) {
          break;
        }

        ++v135;
        if (v145 == v141)
        {
          swift_bridgeObjectRelease();
LABEL_53:
          swift_bridgeObjectRetain();
          uint64_t v135 = 4;
          while (1)
          {
            id v136 = (char *)(v135 - 4);
            id v159 = v142 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v140 + 8 * v135);
            uint64_t v160 = v159;
            uint64_t v161 = v135 - 3;
            if (__OFADD__(v136, 1)) {
              break;
            }
            id v162 = [v159 trigger];
            self;
            if (swift_dynamicCastObjCClass())
            {
              swift_bridgeObjectRelease_n();

              id v163 = [v160 trigger];
              self;
              unint64_t v164 = (void *)swift_dynamicCastObjCClass();
              id v124 = v286;
              if (v164)
              {
                [v164 event];
                uint64_t v165 = (uint64_t)v256;
                REMSpotlightAlarmVehicleTriggerEvent.init(rawValue:)();

                sub_1000966BC((uint64_t)v288, &qword_10090D8A0);
                uint64_t v166 = v257;
                uint64_t v167 = v259;
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v257 + 48))(v165, 1, v259) == 1)
                {
                  uint64_t v168 = v258;
                  (*(void (**)(char *, void, uint64_t))(v166 + 104))(v258, enum case for REMSpotlightAlarmVehicleTriggerEvent.none(_:), v167);
                  sub_1000966BC(v165, &qword_10090D890);
                  unint64_t v169 = *(void (**)(char *, uint64_t, uint64_t))(v166 + 32);
                }
                else
                {
                  unint64_t v169 = *(void (**)(char *, uint64_t, uint64_t))(v166 + 32);
                  uint64_t v168 = v258;
                  v169(v258, v165, v167);
                }
                uint64_t v180 = (uint64_t)v288;
                unint64_t v126 = v289;
                v169(v288, (uint64_t)v168, v167);
                uint64_t v181 = v278;
                (*((void (**)(uint64_t, void, uint64_t))v280 + 13))(v180, enum case for REMSpotlightLocationType.vehicle(_:), v278);
                ((void (*)(uint64_t, void, uint64_t, uint64_t))v279)(v180, 0, 1, v181);
              }
              else
              {

                unint64_t v126 = v289;
              }
              goto LABEL_78;
            }

            ++v135;
            if (v161 == v141)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_76;
            }
          }
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
      }
      swift_bridgeObjectRelease();

      uint64_t v147 = (char *)[v144 trigger];
      self;
      uint64_t v148 = swift_dynamicCastObjCClass();
      if (!v148)
      {

        goto LABEL_53;
      }
      Class v149 = (void *)v148;
      uint64_t v276 = v147;
      swift_bridgeObjectRelease();
      id v150 = [v149 structuredLocation];
      [v150 latitude];
      Class v151 = Double._bridgeToObjectiveC()().super.super.isa;
      id v152 = v286;
      [v286 setLatitude:v151];

      [v150 longitude];
      Class v153 = Double._bridgeToObjectiveC()().super.super.isa;
      [v152 setLongitude:v153];

      id v154 = [v150 displayName];
      [v152 setNamedLocation:v154];

      id v155 = [v150 address];
      [v152 setFullyFormattedAddress:v155];

      [v149 proximity];
      uint64_t v156 = (uint64_t)v261;
      REMSpotlightAlarmProximity.init(rawValue:)();
      uint64_t v157 = v262;
      uint64_t v158 = v263;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v262 + 48))(v156, 1, v263) == 1)
      {
        (*(void (**)(char *, void, uint64_t))(v157 + 104))(v264, enum case for REMSpotlightAlarmProximity.none(_:), v158);
        sub_1000966BC(v156, &qword_10090D898);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v264, v156, v158);
      }
      id v170 = [v149 structuredLocation];
      id v171 = [v170 displayName];

      if (v171)
      {
        uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v174 = v173;
      }
      else
      {

        uint64_t v172 = 0;
        unint64_t v174 = 0xE000000000000000;
      }
      uint64_t v175 = (uint64_t)v288;
      unint64_t v126 = v289;
      uint64_t v176 = v260;
      uint64_t v177 = v280;
      sub_1000966BC((uint64_t)v288, &qword_10090D8A0);
      uint64_t *v176 = v172;
      v176[1] = v174;
      uint64_t v178 = sub_100094134(&qword_10090D8B8);
      (*(void (**)(char *, char *, uint64_t))(v157 + 32))((char *)v176 + *(int *)(v178 + 48), v264, v158);
      uint64_t v179 = v278;
      (*((void (**)(uint64_t *, void, uint64_t))v177 + 13))(v176, enum case for REMSpotlightLocationType.location(_:), v278);
      ((void (*)(uint64_t *, void, uint64_t, uint64_t))v279)(v176, 0, 1, v179);
      sub_100096408((uint64_t)v176, v175, &qword_10090D8A0);
      goto LABEL_77;
    }
  }
  else
  {
    uint64_t v141 = *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v141) {
      goto LABEL_41;
    }
  }
  swift_bridgeObjectRelease();
LABEL_76:
  unint64_t v126 = v289;
LABEL_77:
  id v124 = v286;
LABEL_78:
  uint64_t v182 = v290;
  id v183 = [v290 hashtags];
  if (v183)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1000ED098((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
    uint64_t v184 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v185 = v255;
    sub_10017A4D0(v184);
    uint64_t v187 = v186;
    uint64_t v255 = v185;
    swift_bridgeObjectRelease();
    if (*(void *)(v187 + 16))
    {
      swift_bridgeObjectRetain();
      Array<A>.removingDuplicates()();
      swift_bridgeObjectRelease();
      Class v188 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v124 setHashtags:v188];
    }
    uint64_t v182 = v290;
  }
  sub_10017DACC(v182, v126);
  Class v189 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v124 setContactKeywords:v189];

  if ((char *)[v126 priority] - 10 >= (char *)0xFFFFFFFFFFFFFFF7)
  {
    Class v190 = UInt._bridgeToObjectiveC()().super.super.isa;
    [v124 setRankingHint:v190];
  }
  [v126 flagged];
  id v191 = [v126 attachments];
  if (v191)
  {
    uint64_t v192 = v191;
    sub_1000963CC(0, (unint64_t *)&unk_100909EB0);
    unint64_t v193 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v193 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v194 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v194 = *(void *)((v193 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    LODWORD(v290) = v194 != 0;
  }
  else
  {
    LODWORD(v290) = 0;
  }
  id v195 = [v126 notesAsString];
  if (v195)
  {
    uint64_t v196 = v195;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_1000BF710((uint64_t)v288, v268, &qword_10090D8A0);
  uint64_t v197 = v289;
  id v198 = [v289 objectID];

  id v199 = [v198 uuid];
  uint64_t v200 = v267;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, void, uint64_t, uint64_t))(v285 + 56))(v200, 0, 1, v249);
  int v201 = v281;
  REMSpotlightReminderViewProxy.init(priority:flagged:hasAttachment:notes:hashtags:locationType:reminderID:)();
  uint64_t v202 = v284;
  uint64_t v294 = v284;
  uint64_t v295 = sub_100180578(&qword_10090D8A8, (void (*)(uint64_t))&type metadata accessor for REMSpotlightReminderViewProxy);
  uint64_t v296 = sub_100180578(&qword_10090D8B0, (void (*)(uint64_t))&type metadata accessor for REMSpotlightReminderViewProxy);
  uint64_t v203 = sub_1000C1FE8(&v292);
  (*(void (**)(uint64_t *, char *, uint64_t))(v283 + 16))(v203, v201, v202);
  DisplayRepresentation.init(mangledViewName:viewCodableProxy:)();
  id v204 = v286;
  CSSearchableItemAttributeSet.displayRepresentation(displayRepresentation:)();
  if (qword_100906FA8 != -1) {
    swift_once();
  }
  uint64_t v205 = type metadata accessor for Logger();
  char v206 = (void *)sub_10008E2DC(v205, (uint64_t)qword_10090D818);
  id v30 = v204;
  NSURL v290 = v206;
  char v207 = Logger.logObject.getter();
  os_log_type_t v208 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v207, v208))
  {
    uint64_t v209 = swift_slowAlloc();
    uint64_t v291 = swift_slowAlloc();
    *(_DWORD *)uint64_t v209 = 136446466;
    uint64_t v292 = CSSearchableItemAttributeSet.rem_objectID.getter();
    sub_100094134((uint64_t *)&unk_100914BC0);
    uint64_t v210 = String.init<A>(describing:)();
    uint64_t v292 = sub_1000C51B8(v210, v211, &v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v209 + 12) = 2082;
    id v212 = [v30 identifier];
    if (v212)
    {
      uint64_t v213 = v212;
      uint64_t v214 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v216 = v215;
    }
    else
    {
      uint64_t v214 = 0;
      unint64_t v216 = 0;
    }
    uint64_t v292 = v214;
    unint64_t v293 = v216;
    sub_100094134((uint64_t *)&unk_10090A4C0);
    uint64_t v217 = String.init<A>(describing:)();
    uint64_t v292 = sub_1000C51B8(v217, v218, &v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v207, v208, "Successfully indexed reminder {reminder: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s}", (uint8_t *)v209, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v219 = v289;
  uint64_t v220 = CSSearchableItemAttributeSet.rem_objectIDString.getter();
  if (v221)
  {
    uint64_t v222 = v220;
    uint64_t v223 = v221;
    uint64_t v224 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v226 = v225;
    uint64_t v227 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v229 = v228;
    unint64_t propertyDictionary = sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    v246.value._object = v229;
    v246.value._countAndFlagsBits = v227;
    v230._countAndFlagsBits = v222;
    v230._object = v223;
    v231._countAndFlagsBits = v224;
    v231._object = v226;
    v232._countAndFlagsBits = v252;
    v232._object = v254;
    CSSearchableItemAttributeSet.associate(entityInstanceIdentifier:entityTypeIdentifier:displayTitle:displaySubtitle:displaySynonyms:typeDisplayName:typeDisplaySynonyms:propertyDictionary:priority:)(v230, v231, v232, (Swift::String_optional)0, (Swift::OpaquePointer)_swiftEmptyArrayStorage, v246, (Swift::OpaquePointer)_swiftEmptyArrayStorage, (Swift::OpaquePointer)propertyDictionary, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v233 = v30;
    uint64_t v234 = Logger.logObject.getter();
    os_log_type_t v235 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v234, v235))
    {
      uint64_t v236 = swift_slowAlloc();
      uint64_t v291 = swift_slowAlloc();
      *(_DWORD *)uint64_t v236 = 136446466;
      uint64_t v292 = CSSearchableItemAttributeSet.rem_objectID.getter();
      sub_100094134((uint64_t *)&unk_100914BC0);
      uint64_t v237 = String.init<A>(describing:)();
      uint64_t v292 = sub_1000C51B8(v237, v238, &v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v236 + 12) = 2082;
      id v239 = [v233 identifier];
      if (v239)
      {
        unint64_t v240 = v239;
        uint64_t v241 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v243 = v242;
      }
      else
      {
        uint64_t v241 = 0;
        unint64_t v243 = 0;
      }
      uint64_t v292 = v241;
      unint64_t v293 = v243;
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v244 = String.init<A>(describing:)();
      uint64_t v292 = sub_1000C51B8(v244, v245, &v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v234, v235, "Associating reminder entity with attributes {reminder: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s}", (uint8_t *)v236, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v265 + 8))(v282, v266);
  (*(void (**)(char *, uint64_t))(v283 + 8))(v281, v284);
  sub_1000966BC((uint64_t)v288, &qword_10090D8A0);
  return v30;
}

void *sub_10017DACC(void *a1, id a2)
{
  v30[3] = (Swift::Int)&_swiftEmptySetSingleton;
  id v3 = [a2 contactHandles];
  if (v3)
  {
    uint64_t v4 = v3;
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_10077DE90;
    *(void *)(v5 + 32) = [self descriptorForRequiredKeysForStyle:0];
    *(void *)(v5 + 40) = CNContactPhoneNumbersKey;
    *(void *)(v5 + 48) = CNContactEmailAddressesKey;
    v30[0] = v5;
    specialized Array._endMutation()();
    v6._rawValue = (void *)v5;
    uint64_t v7 = CNContactPhoneNumbersKey;
    uint64_t v8 = CNContactEmailAddressesKey;
    id v9 = sub_10017ABF0();
    id v10 = [v4 emails];
    uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = sub_1001FFB00(v11);
    swift_bridgeObjectRelease();
    id v13 = [v4 phones];
    uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v15 = sub_1001FFB00(v14);
    swift_bridgeObjectRelease();
    uint64_t v16 = (void *)CNContactStore.contactFrom(emailAddresses:phoneNumbers:keysToFetch:)((Swift::OpaquePointer)v12, (Swift::OpaquePointer)v15, v6);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
      id v17 = objc_allocWithZone((Class)CNContactFormatter);
      id v18 = v16;
      id v19 = [v17 init];
      id v20 = [v19 stringFromContact:v18];

      if (v20)
      {
        Swift::Int v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v23 = v22;

        sub_10031DC68(v30, v21, v23);
        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    else
    {
    }
  }
  id v24 = [a1 assignments:[v30 objectAtIndex:0]];
  if (v24)
  {
    uint64_t v25 = v24;
    sub_1000963CC(0, &qword_100910230);
    sub_1000ED098((unint64_t *)&unk_100914B70, &qword_100910230);
    uint64_t v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10017A1C0(v26);
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v28 = sub_100209D8C(v27);
  swift_bridgeObjectRelease_n();
  return v28;
}

void sub_10017DDE0(id *a1)
{
  id v1 = *a1;
  id v2 = [*a1 assignee];
  if (v2)
  {
    id v3 = v2;
    id v4 = [v2 firstName];

    if (v4)
    {
      Swift::Int v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v7 = v6;

      sub_10031DC68(&v32, v5, v7);
      swift_bridgeObjectRelease();
    }
  }
  id v8 = [v1 assignee];
  if (v8)
  {
    id v9 = v8;
    id v10 = [v8 lastName];

    if (v10)
    {
      Swift::Int v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v13 = v12;

      sub_10031DC68(&v32, v11, v13);
      swift_bridgeObjectRelease();
    }
  }
  id v14 = [v1 assignee];
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = [v14 middleName];

    if (v16)
    {
      Swift::Int v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v19 = v18;

      sub_10031DC68(&v32, v17, v19);
      swift_bridgeObjectRelease();
    }
  }
  id v20 = [v1 assignee];
  if (v20)
  {
    Swift::Int v21 = v20;
    id v22 = [v20 displayName];

    if (v22)
    {
      Swift::Int v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v25 = v24;

      sub_10031DC68(&v32, v23, v25);
      swift_bridgeObjectRelease();
    }
  }
  id v26 = [v1 assignee];
  if (v26)
  {
    uint64_t v27 = v26;
    id v28 = [v26 nickname];

    if (v28)
    {
      Swift::Int v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v31 = v30;

      sub_10031DC68(&v32, v29, v31);
      swift_bridgeObjectRelease();
    }
  }
}

unint64_t sub_10017E038(void *a1)
{
  uint64_t v167 = type metadata accessor for DisplayRepresentation();
  uint64_t v166 = *(void *)(v167 - 8);
  __chkstk_darwin(v167);
  id v183 = (char *)&v158 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = type metadata accessor for REMSpotlightListViewProxy();
  uint64_t v185 = *(void *)(v187 - 8);
  __chkstk_darwin(v187);
  uint64_t v182 = (char *)&v158 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = type metadata accessor for REMSpotlightBadgeType();
  uint64_t v184 = *(void *)(v186 - 8);
  __chkstk_darwin(v186);
  uint64_t v179 = (char *)&v158 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  Class v190 = (uint64_t *)((char *)&v158 - v6);
  uint64_t v7 = sub_100094134(&qword_10090D868);
  __chkstk_darwin(v7 - 8);
  uint64_t v177 = (char *)&v158 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for URL();
  uint64_t v170 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  unint64_t v169 = (char *)&v158 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = type metadata accessor for UTType();
  uint64_t v174 = *(void *)(v188 - 8);
  __chkstk_darwin(v188);
  unint64_t v173 = (char *)&v158 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v172 = (char *)&v158 - v12;
  uint64_t v13 = _s10PredicatesOMa_1();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v158 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v164 = (char *)&v158 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  Swift::Int v21 = (char *)&v158 - v20;
  uint64_t v22 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v22 - 8);
  uint64_t v178 = (uint64_t)&v158 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v175 = (uint64_t)&v158 - v25;
  __chkstk_darwin(v26);
  uint64_t v180 = (char *)&v158 - v27;
  __chkstk_darwin(v28);
  uint64_t v189 = (uint64_t)&v158 - v29;
  __chkstk_darwin(v30);
  Swift::Int v32 = (char *)&v158 - v31;
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v158 - v34;
  uint64_t v192 = 0;
  unint64_t v193 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v192 = 0xD000000000000013;
  unint64_t v193 = 0x80000001007CCCF0;
  id v191 = a1;
  id v36 = [a1 identifier];
  if (v36)
  {
    uint64_t v37 = v36;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    uint64_t v39 = v32;
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    uint64_t v39 = v32;
    uint64_t v40 = 1;
  }
  uint64_t v165 = v38;
  v38(v39, v40, 1, v16);
  sub_100096408((uint64_t)v32, (uint64_t)v35, (uint64_t *)&unk_100909E50);
  uint64_t v168 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v41 = v168(v35, 1, v16);
  uint64_t v176 = v17;
  if (v41)
  {
    sub_1000966BC((uint64_t)v35, (uint64_t *)&unk_100909E50);
    unint64_t v42 = 0xE300000000000000;
    uint64_t v43 = 7104878;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v35, v16);
    sub_1000966BC((uint64_t)v35, (uint64_t *)&unk_100909E50);
    uint64_t v43 = UUID.uuidString.getter();
    unint64_t v42 = v44;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
  }
  v45._countAndFlagsBits = v43;
  v45._object = (void *)v42;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  uint64_t v47 = v192;
  unint64_t v46 = v193;
  swift_storeEnumTagMultiPayload();
  id v48 = (id)sub_100535B3C();
  sub_100180854((uint64_t)v15, (uint64_t (*)(void))_s10PredicatesOMa_1);
  int64_t v49 = v191;
  if ((sub_10017A880(v191, v48) & 1) == 0)
  {
    sub_100180524();
    swift_allocError();
    *(void *)uint64_t v92 = v47;
    *(void *)(v92 + 8) = v46;
    *(void *)(v92 + 16) = 0;
    *(void *)(v92 + 24) = 0;
    *(unsigned char *)(v92 + 32) = 0;
LABEL_20:
    swift_willThrow();

    return v42;
  }
  id v50 = [v49 name];
  if (!v50)
  {
LABEL_19:
    sub_100180524();
    swift_allocError();
    *(void *)uint64_t v93 = v47;
    *(void *)(v93 + 8) = v46;
    *(void *)(v93 + 16) = 0;
    *(void *)(v93 + 24) = 0;
    *(unsigned char *)(v93 + 32) = 3;
    goto LABEL_20;
  }
  unint64_t v51 = v50;
  id v163 = v48;
  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v42 = v53;
  swift_bridgeObjectRelease();
  uint64_t v54 = HIBYTE(v42) & 0xF;
  if ((v42 & 0x2000000000000000) == 0) {
    uint64_t v54 = v52 & 0xFFFFFFFFFFFFLL;
  }
  if (!v54)
  {

    id v48 = v163;
    goto LABEL_19;
  }
  char v55 = (objc_class *)type metadata accessor for RDCoreDataCoreSpotlightDelegate();
  v197.receiver = v181;
  v197.super_class = v55;
  id v56 = [super attributeSetForObject:v49];
  if (!v56)
  {

    sub_100180524();
    swift_allocError();
    *(void *)uint64_t v95 = v47;
    *(void *)(v95 + 8) = v46;
    *(void *)(v95 + 16) = 0;
    *(void *)(v95 + 24) = 0;
    *(unsigned char *)(v95 + 32) = 4;
    id v48 = v163;
    goto LABEL_20;
  }
  BOOL v57 = v56;
  swift_bridgeObjectRelease();
  id v58 = [self displayNameFromListName:v51 isPlaceholder:[v49 isPlaceholder]];

  NSString v59 = v58;
  NSString v60 = v58;
  if (!v58)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v181 = v59;
  uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v161 = v61;
  id v62 = v58;
  id v160 = v57;
  id v63 = [v57 attributeDictionary];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v64 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v66 = [v64 initWithAttributes:isa];

  uint64_t v67 = v172;
  static UTType.toDoItem.getter();
  UTType.identifier.getter();
  uint64_t v174 = *(void *)(v174 + 8);
  ((void (*)(char *, uint64_t))v174)(v67, v188);
  NSString v68 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v66 setContentType:v68];

  id v162 = v66;
  [v66 setDisplayName:v60];

  id v69 = [v191 objectID];
  id v70 = [v69 URIRepresentation];

  id v71 = v169;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL.description.getter();
  (*(void (**)(char *, uint64_t))(v170 + 8))(v71, v171);
  NSString v72 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v66 setIdentifier:v72];

  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t v73 = swift_allocObject();
  *(_OWORD *)(v73 + 16) = xmmword_100776E80;
  static UTType.utf8PlainText.getter();
  uint64_t v74 = UTType.identifier.getter();
  uint64_t v76 = v75;
  uint64_t v77 = v188;
  id v78 = (void (*)(char *, uint64_t))v174;
  ((void (*)(char *, uint64_t))v174)(v67, v188);
  *(void *)(v73 + 32) = v74;
  *(void *)(v73 + 40) = v76;
  uint64_t v79 = v173;
  static UTType.utf16PlainText.getter();
  uint64_t v80 = UTType.identifier.getter();
  uint64_t v82 = v81;
  uint64_t v83 = v77;
  Class v84 = v162;
  v78(v79, v83);
  *(void *)(v73 + 48) = v80;
  *(void *)(v73 + 56) = v82;
  Class v85 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v84 setProviderDataTypeIdentifiers:v85];

  Class v86 = v191;
  id v87 = [v191 identifier];
  uint64_t v88 = v176;
  if (v87)
  {
    uint64_t v89 = v87;
    int64_t v90 = v180;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v91 = 0;
  }
  else
  {
    uint64_t v91 = 1;
    int64_t v90 = v180;
  }
  v165(v90, v91, 1, v16);
  uint64_t v96 = (uint64_t)v90;
  uint64_t v97 = v189;
  sub_100096408(v96, v189, (uint64_t *)&unk_100909E50);
  uint64_t v98 = v97;
  uint64_t v99 = v175;
  sub_1000BF710(v98, v175, (uint64_t *)&unk_100909E50);
  if (v168((char *)v99, 1, v16) == 1)
  {
    sub_1000966BC(v99, (uint64_t *)&unk_100909E50);
  }
  else
  {
    long long v100 = v164;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v164, v99, v16);
    uint64_t v101 = self;
    Class v102 = UUID._bridgeToObjectiveC()().super.isa;
    id v103 = [v101 objectIDWithUUID:v102];

    CSSearchableItemAttributeSet.rem_objectID.setter();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v100, v16);
  }
  uint64_t v104 = enum case for REMSearchableItemType.list(_:);
  uint64_t v105 = type metadata accessor for REMSearchableItemType();
  uint64_t v106 = *(void *)(v105 - 8);
  id v107 = v177;
  (*(void (**)(char *, uint64_t, uint64_t))(v106 + 104))(v177, v104, v105);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v107, 0, 1, v105);
  CSSearchableItemAttributeSet.rem_itemType.setter();
  id v108 = v181;
  [v84 setTitle:v181];

  [v86 shouldCategorizeGroceryItems];
  CSSearchableItemAttributeSet.rem_shouldCategorizeGroceryItems.setter();
  sub_10018016C(v86, v190);
  id v109 = [v86 color];
  if (v109)
  {
    NSString v110 = v109;
    uint64_t v111 = (void *)REMColor.codable.getter();
  }
  else
  {
    uint64_t v111 = 0;
  }
  type metadata accessor for REMSpotlightColor();
  swift_allocObject();
  id v181 = v111;
  uint64_t v112 = REMSpotlightColor.init(remColor:)();
  (*(void (**)(char *, uint64_t *, uint64_t))(v184 + 16))(v179, v190, v186);
  sub_1000BF710(v189, v178, (uint64_t *)&unk_100909E50);
  swift_retain();
  uint64_t v113 = v182;
  uint64_t v188 = v112;
  REMSpotlightListViewProxy.init(badgeType:color:listID:)();
  uint64_t v114 = v187;
  uint64_t v194 = v187;
  uint64_t v195 = sub_100180578(&qword_10090D878, (void (*)(uint64_t))&type metadata accessor for REMSpotlightListViewProxy);
  uint64_t v196 = sub_100180578(&qword_10090D880, (void (*)(uint64_t))&type metadata accessor for REMSpotlightListViewProxy);
  uint64_t v115 = sub_1000C1FE8(&v192);
  (*(void (**)(uint64_t *, char *, uint64_t))(v185 + 16))(v115, v113, v114);
  DisplayRepresentation.init(mangledViewName:viewCodableProxy:)();
  CSSearchableItemAttributeSet.displayRepresentation(displayRepresentation:)();
  if (qword_100906FA8 != -1) {
    swift_once();
  }
  uint64_t v116 = type metadata accessor for Logger();
  uint64_t v117 = sub_10008E2DC(v116, (uint64_t)qword_10090D818);
  unint64_t v42 = v84;
  uint64_t v180 = (char *)v117;
  uint64_t v118 = Logger.logObject.getter();
  os_log_type_t v119 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v118, v119))
  {
    uint64_t v120 = swift_slowAlloc();
    uint64_t v198 = swift_slowAlloc();
    *(_DWORD *)uint64_t v120 = 136446466;
    uint64_t v192 = CSSearchableItemAttributeSet.rem_objectID.getter();
    sub_100094134((uint64_t *)&unk_100914BC0);
    uint64_t v121 = String.init<A>(describing:)();
    uint64_t v192 = sub_1000C51B8(v121, v122, &v198);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v120 + 12) = 2082;
    id v123 = [(id)v42 identifier];
    if (v123)
    {
      id v124 = v123;
      uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v127 = v126;
    }
    else
    {
      uint64_t v125 = 0;
      unint64_t v127 = 0;
    }
    uint64_t v192 = v125;
    unint64_t v193 = v127;
    sub_100094134((uint64_t *)&unk_10090A4C0);
    uint64_t v128 = String.init<A>(describing:)();
    uint64_t v192 = sub_1000C51B8(v128, v129, &v198);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v118, v119, "Successfully indexed list {list: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s}", (uint8_t *)v120, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    Class v86 = v191;
  }
  else
  {
  }
  uint64_t v130 = CSSearchableItemAttributeSet.rem_objectIDString.getter();
  if (v131)
  {
    uint64_t v132 = v130;
    id v133 = v131;
    [v86 isGroup];
    uint64_t v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v136 = v135;
    [v86 isGroup];
    uint64_t v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v139 = v138;
    unint64_t propertyDictionary = sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    v156.value._object = v139;
    v156.value._countAndFlagsBits = v137;
    v140._countAndFlagsBits = v132;
    v140._object = v133;
    v141._countAndFlagsBits = v134;
    v141._object = v136;
    v142._countAndFlagsBits = v159;
    v142._object = v161;
    CSSearchableItemAttributeSet.associate(entityInstanceIdentifier:entityTypeIdentifier:displayTitle:displaySubtitle:displaySynonyms:typeDisplayName:typeDisplaySynonyms:propertyDictionary:priority:)(v140, v141, v142, (Swift::String_optional)0, (Swift::OpaquePointer)_swiftEmptyArrayStorage, v156, (Swift::OpaquePointer)_swiftEmptyArrayStorage, (Swift::OpaquePointer)propertyDictionary, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v143 = (id)v42;
    unint64_t v144 = Logger.logObject.getter();
    os_log_type_t v145 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v144, v145))
    {
      uint64_t v146 = swift_slowAlloc();
      uint64_t v198 = swift_slowAlloc();
      *(_DWORD *)uint64_t v146 = 136446466;
      uint64_t v192 = CSSearchableItemAttributeSet.rem_objectID.getter();
      sub_100094134((uint64_t *)&unk_100914BC0);
      uint64_t v147 = String.init<A>(describing:)();
      uint64_t v192 = sub_1000C51B8(v147, v148, &v198);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v146 + 12) = 2082;
      id v149 = [v143 identifier];
      if (v149)
      {
        id v150 = v149;
        uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v153 = v152;
      }
      else
      {
        uint64_t v151 = 0;
        unint64_t v153 = 0;
      }
      uint64_t v192 = v151;
      unint64_t v193 = v153;
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v154 = String.init<A>(describing:)();
      uint64_t v192 = sub_1000C51B8(v154, v155, &v198);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v144, v145, "Associating group or list entity with attributes {objectID: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s}", (uint8_t *)v146, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {

      swift_release();
    }
  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v166 + 8))(v183, v167);
  (*(void (**)(char *, uint64_t))(v185 + 8))(v182, v187);
  (*(void (**)(uint64_t *, uint64_t))(v184 + 8))(v190, v186);
  sub_1000966BC(v189, (uint64_t *)&unk_100909E50);
  return v42;
}

void sub_10017F5D8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (!a1)
  {
    if (qword_100906FA8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_10090D818);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 134217984;
      uint64_t v17 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "CoreSpotlight deleteAllSearchableItems done, upgrading spotlightIndexVersion to %ld", v15, 0xCu);
      swift_slowDealloc();
    }

    id v16 = [self daemonUserDefaults];
    uint64_t v6 = [objc_allocWithZone((Class)NSNumber) initWithInteger:a2];
    [v16 setSpotlightIndexVersion:v6];

LABEL_13:
    if (!a3) {
      return;
    }
    goto LABEL_14;
  }
  swift_errorRetain();
  if (qword_100906FA8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_10090D818);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v6, v7))
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_13;
  }
  uint64_t v8 = (uint8_t *)swift_slowAlloc();
  uint64_t v17 = swift_slowAlloc();
  *(_DWORD *)uint64_t v8 = 136315138;
  swift_getErrorValue();
  uint64_t v9 = Error.localizedDescription.getter();
  sub_1000C51B8(v9, v10, &v17);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error occured trying to deleteAllSearchableItems {error: %s}", v8, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  if (a3) {
LABEL_14:
  }
    a3(a1);
}

void sub_10017F9AC(uint64_t a1, uint64_t a2)
{
  id v5 = sub_10018000C();
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100776E40;
  id v7 = [v2 domainIdentifier];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  void v13[4] = a1;
  v13[5] = a2;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  _OWORD v13[2] = sub_1000E13D0;
  v13[3] = &unk_1008BC830;
  uint64_t v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [v5 deleteSearchableItemsWithDomainIdentifiers:isa completionHandler:v12];
  _Block_release(v12);
}

void sub_10017FB88(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = a2;
    uint64_t v6 = sub_10011FD40;
  }
  else
  {
    uint64_t v6 = REMCDList.cleanUpAfterLocalObjectMerge();
    uint64_t v5 = 0;
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  sub_1000E4F30(a1);
  id v8 = sub_10018000C();
  void v10[4] = sub_100180F88;
  v10[5] = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  void v10[2] = sub_100236C78;
  v10[3] = &unk_1008BC7E0;
  uint64_t v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  [v2 searchableIndex:v8 reindexAllSearchableItemsWithAcknowledgementHandler:v9];
  _Block_release(v9);
  swift_release();
}

void sub_10017FDA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    *(void *)(v6 + 24) = a3;
    uint64_t v7 = sub_10011C6C0;
  }
  else
  {
    uint64_t v7 = REMCDList.cleanUpAfterLocalObjectMerge();
    uint64_t v6 = 0;
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  sub_1000E4F30(a2);
  id v9 = sub_10018000C();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  void v12[4] = sub_1001804E4;
  v12[5] = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100236C78;
  v12[3] = &unk_1008BC768;
  uint64_t v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  [v3 searchableIndex:v9 reindexSearchableItemsWithIdentifiers:isa acknowledgementHandler:v11];
  _Block_release(v11);
  swift_release();
}

id sub_10018000C()
{
  id v1 = [v0 indexName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v2 = [v0 protectionClass];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = [v0 bundleIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v5)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v8 = 0;
  }
  id v9 = objc_allocWithZone((Class)CSSearchableIndex);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithName:v7 protectionClass:v8 bundleIdentifier:v10];

  return v11;
}

uint64_t sub_10018016C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for REMSpotlightBadgeType();
  uint64_t v27 = *(void *)(v4 - 8);
  *(void *)&double v5 = __chkstk_darwin(v4).n128_u64[0];
  NSString v7 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  NSString v8 = (void *)REMListBadgeEmblemDefault;
  id v9 = [a1 badgeEmblem:v5];
  if (v9)
  {
    NSString v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v11 = objc_allocWithZone((Class)REMListBadge);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v11 initWithRawValue:v12];

  id v14 = [v13 emoji];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    *a2 = v16;
    a2[1] = v18;
    uint64_t v19 = enum case for REMSpotlightBadgeType.emoji(_:);
    uint64_t v20 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v27 + 104);
    return v20(a2, v19, v4);
  }
  else
  {
    id v22 = [v13 emblem];
    if (!v22) {
      id v22 = v8;
    }
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    uint64_t *v7 = v23;
    v7[1] = v25;
    (*(void (**)(uint64_t *, void, uint64_t))(v27 + 104))(v7, enum case for REMSpotlightBadgeType.emblem(_:), v4);
    return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v27 + 32))(a2, v7, v4);
  }
}

id sub_100180444()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDCoreDataCoreSpotlightDelegate();
  return [super dealloc];
}

uint64_t type metadata accessor for RDCoreDataCoreSpotlightDelegate()
{
  return self;
}

uint64_t sub_1001804AC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001804E4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10018050C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10018051C()
{
  return swift_release();
}

unint64_t sub_100180524()
{
  unint64_t result = qword_10090D870;
  if (!qword_10090D870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D870);
  }
  return result;
}

uint64_t sub_100180578(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001805C0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100913B60);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000BF710(v6, (uint64_t)&v15, &qword_10090D888);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1001806F8(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    id v11 = (uint64_t *)(v3[6] + 16 * result);
    *id v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10009A1A0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001806F8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100180770(a1, a2, v4);
}

unint64_t sub_100180770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_100180854(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001808B4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001808EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 >= 3 && a5 != 0)
  {
    if (a5 != 1) {
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

void sub_100180958(void (*a1)(void), uint64_t a2)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = static NSFileProtectionType.rem_spotlightIndexFileProtection.getter();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v7)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v9 = 0;
  }
  id v10 = objc_allocWithZone((Class)CSSearchableIndex);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v10 initWithName:v8 protectionClass:v9 bundleIdentifier:v11];

  id v12 = [self daemonUserDefaults];
  id v13 = [v12 spotlightIndexVersion];

  if (v13 && (uint64_t v14 = (uint64_t)[v13 integerValue], v13, v14 >= 6))
  {
    if (a1) {
      a1(0);
    }
  }
  else
  {
    if (qword_100906FA8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10090D818);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2048;
      aBlock[0] = 6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Device spotlight index is outdated, removing the index. {device: %ld, required: %ld}", (uint8_t *)v18, 0x16u);
      swift_slowDealloc();
    }

    uint64_t v19 = (void *)swift_allocObject();
    void v19[2] = 6;
    void v19[3] = a1;
    uint64_t v19[4] = a2;
    aBlock[4] = sub_100180D30;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E13D0;
    aBlock[3] = &unk_1008BC920;
    uint64_t v20 = _Block_copy(aBlock);
    sub_1000E4F30((uint64_t)a1);
    swift_release();
    [v21 deleteAllSearchableItemsWithCompletionHandler:v20];
    _Block_release(v20);
  }
}

uint64_t sub_100180CF0()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100180D30(uint64_t a1)
{
  sub_10017F5D8(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_100180D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 >= 3 && a5 != 0)
  {
    if (a5 != 1) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t a1)
{
  return sub_1001808EC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_100180D3C(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_100180D3C(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_1001808EC(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_1001808EC(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100180F70(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError()
{
  return &type metadata for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError;
}

void sub_100180FBC()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 16);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_started) & 1) == 0)
  {
    sub_10018151C((id *)v0);
    return;
  }
  if (qword_100906FB0 != -1) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_10090D8C0);
  long long v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDHashtagLabelUpdater.start() must be called exactly once", v10, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1001811AC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090D8C0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090D8C0);
  if (qword_1009077F8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942430);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100181274()
{
  uint64_t v0 = sub_100094134((uint64_t *)&unk_10090AFA0);
  sub_10008E278(v0, qword_100942000);
  uint64_t v1 = (char *)sub_10008E2DC(v0, (uint64_t)qword_100942000);
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090DD90);
  uint64_t v3 = *(int *)(v2 + 48);
  uint64_t v4 = *(int *)(v2 + 64);
  if (qword_100906FD0 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)qword_10090D8E0;
  *(void *)uint64_t v1 = qword_10090D8E0;
  uint64_t v6 = qword_100906FC0;
  id v7 = v5;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v9 = sub_10008E2DC(v8, (uint64_t)qword_100942018);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(&v1[v3], v9, v8);
  *(void *)&v1[v4] = 50;
  uint64_t v10 = enum case for Publishers.TimeGroupingStrategy.byTimeOrCount<A>(_:);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);

  return v11(v1, v10, v0);
}

uint64_t sub_1001813F4()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_10008E278(v0, qword_100942018);
  sub_10008E2DC(v0, (uint64_t)qword_100942018);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

void sub_100181444()
{
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100776E80;
  sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  id v1 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  *(void *)(v0 + 32) = v2;
  *(void *)(v0 + 40) = v4;
  id v5 = [self cdEntityName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v0 + 48) = v6;
  *(void *)(v0 + 56) = v8;
  qword_10090D8D8 = v0;
}

uint64_t sub_10018151C(id *a1)
{
  id v161 = *a1;
  uint64_t v123 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v120 = (char *)&v111 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for DispatchQoS();
  uint64_t v119 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v118 = (char *)&v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for DispatchTimeInterval();
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v115 = (uint64_t *)((char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v142 = type metadata accessor for DispatchTime();
  uint64_t v152 = *(void *)(v142 - 8);
  uint64_t v5 = __chkstk_darwin(v142);
  uint64_t v114 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  Swift::String v141 = (char *)&v111 - v7;
  uint64_t v134 = sub_100094134(&qword_10090DCD8);
  uint64_t v133 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v132 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_100094134(&qword_10090DCE0);
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v135 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_100094134(&qword_10090DCE8);
  uint64_t v139 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  id v138 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_100094134(&qword_10090DCF0);
  uint64_t v158 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  unint64_t v131 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_100094134(&qword_10090DCF8);
  uint64_t v160 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v159 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_100094134((uint64_t *)&unk_10090DD00);
  uint64_t v129 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v128 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = sub_100094134((uint64_t *)&unk_10091D280);
  unint64_t v126 = *(void (***)(char *, uint64_t))(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v125 = (char *)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_100094134((uint64_t *)&unk_10090DD10);
  uint64_t v124 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  unint64_t v155 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v16 - 8);
  unint64_t v153 = (char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100094134((uint64_t *)&unk_10090DD20);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v145 = (void *)sub_100094134((uint64_t *)&unk_1009081D0);
  unint64_t v144 = (void (**)(char *, void))*(v145 - 1);
  __chkstk_darwin(v145);
  uint64_t v23 = (char *)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_100094134((uint64_t *)&unk_10090DD30);
  uint64_t v146 = *(void (***)(char *, uint64_t))(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v25 = (char *)&v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906FB0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v113 = sub_10008E2DC(v26, (uint64_t)qword_10090D8C0);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting RDHashtagLabelUpdater", v29, 2u);
    swift_slowDealloc();
  }

  id v143 = sub_100183030();
  aBlock[0] = (id)sub_100407054((void *)0xD000000000000015, 0x800000010077E900, 0);
  sub_100094134((uint64_t *)&unk_1009081E0);
  sub_100094134((uint64_t *)&unk_10090AB80);
  id v162 = a1;
  sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
  Publisher.map<A>(_:)();
  sub_1000967F4((unint64_t *)&unk_10090AB90, (uint64_t *)&unk_10090DD20);
  Publisher.filter(_:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  swift_release();
  aBlock[0] = v162[2];
  id v30 = aBlock[0];
  uint64_t v31 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  uint64_t v34 = (uint64_t)v153;
  uint64_t v148 = v32 + 56;
  id v149 = v33;
  v33(v153, 1, 1, v31);
  uint64_t v35 = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1000967F4((unint64_t *)&unk_100908200, (uint64_t *)&unk_1009081D0);
  uint64_t v36 = sub_1000E4F40((unint64_t *)&qword_10090D990, (unint64_t *)&qword_10090F370);
  id v37 = v30;
  uint64_t v38 = v145;
  uint64_t v157 = v35;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v34, (uint64_t *)&unk_1009081C0);

  ((void (**)(char *, void *))v144)[1](v23, v38);
  sub_1000967F4(&qword_100908210, (uint64_t *)&unk_10090DD30);
  uint64_t v39 = v147;
  uint64_t v40 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  v146[1](v25, v39);
  *(id *)((char *)v162 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_cloudAccountsDidChangeCancellable) = (id)v40;
  swift_release();
  *((unsigned char *)v162 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_started) = 1;
  int v41 = v162;
  unint64_t v42 = (char *)v162 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v43 = *((void *)v42 + 1);
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v43) = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 16))(ObjectType, v43);
    swift_unknownObjectRelease();
    if ((v43 & 1) == 0) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v154 = v36;
  uint64_t v147 = v31;
  uint64_t v146 = (void (**)(char *, uint64_t))v42;
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_100778370;
  *(void *)(v45 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v45 + 40) = v46;
  *(void *)(v45 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v45 + 56) = v47;
  *(void *)(v45 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v45 + 72) = v48;
  *(void *)(v45 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v45 + 88) = v49;
  id v50 = (void *)sub_100407394(v41[3], 0xD000000000000027, 0x80000001007CD090, v45);
  swift_bridgeObjectRelease();
  if (qword_100906FC8 != -1) {
    swift_once();
  }
  uint64_t v51 = swift_bridgeObjectRetain();
  uint64_t v52 = sub_10012674C(v51);
  swift_bridgeObjectRelease();
  aBlock[0] = v50;
  *(void *)(swift_allocObject() + 16) = v52;
  swift_bridgeObjectRetain();
  sub_100094134((uint64_t *)&unk_10090F110);
  sub_100094134((uint64_t *)&unk_10090DD40);
  sub_1000967F4((unint64_t *)&unk_10090F120, (uint64_t *)&unk_10090F110);
  unint64_t v53 = v125;
  Publisher.map<A>(_:)();
  swift_release();
  os_log_type_t v145 = &protocol conformance descriptor for Publishers.Map<A, B>;
  sub_1000967F4((unint64_t *)&unk_10090DD50, (uint64_t *)&unk_10091D280);
  uint64_t v54 = v127;
  Publisher.filter(_:)();
  v126[1](v53, v54);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v127 = sub_1000967F4(&qword_10090F130, (uint64_t *)&unk_10090DD10);
  char v55 = v131;
  Publisher.filter(_:)();
  uint64_t v56 = *(uint64_t *)((char *)v41
                   + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_highPrioritySubscriptionTransactionRegistrar);
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = v56;
  *(void *)(v57 + 24) = 1;
  uint64_t v125 = (char *)sub_1000967F4(&qword_10090DD60, &qword_10090DCF0);
  swift_retain();
  uint64_t v58 = v150;
  NSString v59 = v159;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  NSString v60 = *(void (**)(char *, uint64_t))(v158 + 8);
  v158 += 8;
  uint64_t v112 = v60;
  v60(v55, v58);
  aBlock[0] = v41[2];
  id v61 = aBlock[0];
  uint64_t v62 = (uint64_t)v153;
  v149(v153, 1, 1, v147);
  uint64_t v111 = sub_1000967F4(&qword_10090DD68, &qword_10090DCF8);
  id v63 = v61;
  id v64 = v128;
  uint64_t v65 = v151;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v62, (uint64_t *)&unk_1009081C0);

  id v66 = *(void (***)(char *, uint64_t))(v160 + 8);
  v160 += 8;
  unint64_t v126 = v66;
  ((void (*)(char *, uint64_t))v66)(v59, v65);
  uint64_t v67 = (void *)swift_allocObject();
  v67[2] = sub_10018371C;
  v67[3] = 0;
  v67[4] = v56;
  unint64_t v144 = (void (**)(char *, void))&protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
  sub_1000967F4(&qword_10090DD70, (uint64_t *)&unk_10090DD00);
  swift_retain();
  uint64_t v68 = v130;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v129 + 8))(v64, v68);
  uint64_t v128 = (char *)v41 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_hashtagInsertEventCancellables;
  swift_beginAccess();
  uint64_t v130 = sub_100094134(&qword_100908218);
  uint64_t v129 = sub_1000967F4((unint64_t *)&unk_100908220, &qword_100908218);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  Publisher.filter(_:)();
  uint64_t v69 = *(uint64_t *)((char *)v41
                   + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_lowPrioritySubscriptionTransactionRegistrar);
  uint64_t v70 = swift_allocObject();
  uint64_t v127 = v69;
  *(void *)(v70 + 16) = v69;
  *(void *)(v70 + 24) = 1;
  swift_retain();
  uint64_t v71 = v150;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  v112(v55, v71);
  uint64_t v72 = v62;
  uint64_t v73 = v147;
  uint64_t v74 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v149;
  v149((char *)v62, 1, 1, v147);
  uint64_t v75 = v132;
  uint64_t v76 = v151;
  Publisher.collect<A>(_:options:)();
  sub_1000967F4(&qword_10090DD78, &qword_10090DCD8);
  uint64_t v77 = v135;
  uint64_t v78 = v134;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v133 + 8))(v75, v78);
  sub_1000966BC(v72, (uint64_t *)&unk_1009081C0);
  ((void (*)(char *, uint64_t))v126)(v159, v76);
  aBlock[0] = v162[2];
  id v79 = aBlock[0];
  v74(v72, 1, 1, v73);
  sub_1000967F4(&qword_10090DD80, &qword_10090DCE0);
  id v80 = v79;
  uint64_t v81 = v138;
  uint64_t v82 = v137;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v72, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v136 + 8))(v77, v82);
  uint64_t v83 = (void *)swift_allocObject();
  v83[2] = v127;
  v83[3] = sub_10018371C;
  v83[4] = 0;
  sub_1000967F4(&qword_10090DD88, &qword_10090DCE8);
  swift_retain();
  uint64_t v84 = v140;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v139 + 8))(v81, v84);
  swift_beginAccess();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  Class v85 = v146;
  if (swift_unknownObjectWeakLoadStrong())
  {
    Class v86 = v85[1];
    uint64_t v87 = swift_getObjectType();
    LOBYTE(v86) = (*((uint64_t (**)(uint64_t, uint64_t))v86 + 3))(v87, (uint64_t)v86);
    swift_unknownObjectRelease();
    if ((v86 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v124 + 8))(v155, v156);
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v88 = Logger.logObject.getter();
  os_log_type_t v89 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v88, v89))
  {
    int64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v90 = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "os_transaction INIT {name: com.apple.remindd.RDHashtagLabelUpdater.start}", v90, 2u);
    swift_slowDealloc();
  }

  uint64_t v91 = os_transaction_create();
  uint64_t v92 = v114;
  static DispatchTime.now()();
  uint64_t v93 = v115;
  *uint64_t v115 = 5;
  uint64_t v94 = v116;
  uint64_t v95 = v117;
  (*(void (**)(void *, void, uint64_t))(v116 + 104))(v93, enum case for DispatchTimeInterval.seconds(_:), v117);
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v94 + 8))(v93, v95);
  uint64_t v96 = *(void (**)(char *, uint64_t))(v152 + 8);
  v152 += 8;
  v96(v92, v142);
  uint64_t v97 = Logger.logObject.getter();
  os_log_type_t v98 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v97, v98))
  {
    uint64_t v99 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v99 = 134217984;
    aBlock[0] = (id)5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v97, v98, "RDHashtagLabelUpdater: dispatch to call refreshFromLastConsumedOnLaunchIfNeeded {after: %ld}", v99, 0xCu);
    swift_slowDealloc();
  }

  long long v100 = v162;
  id v101 = v162[2];
  Class v102 = (void *)swift_allocObject();
  id v103 = v143;
  _OWORD v102[2] = v100;
  v102[3] = v103;
  v102[4] = v91;
  aBlock[4] = sub_10019DA64;
  aBlock[5] = v102;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008BCAF0;
  uint64_t v104 = _Block_copy(aBlock);
  id v105 = v101;
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v106 = v118;
  static DispatchQoS.unspecified.getter();
  aBlock[8] = _swiftEmptyArrayStorage;
  sub_10019DA88((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  id v107 = v120;
  uint64_t v108 = v123;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v109 = v141;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v104);
  swift_unknownObjectRelease();

  (*(void (**)(char *, uint64_t))(v122 + 8))(v107, v108);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v106, v121);
  v96(v109, v142);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v155, v156);
  return swift_release();
}

void *sub_100183030()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(v0 + 32)];
  id v23 = 0;
  id v3 = [v2 fetchActiveCloudKitAccountObjectIDsWithFetchOption:2 error:&v23];
  id v4 = v23;
  if (v3)
  {
    uint64_t v5 = v3;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v7 = v4;

    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_10090D8C0);
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      id v23 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v12 = Array.description.getter();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      sub_1000C51B8(v12, v14, (uint64_t *)&v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDHashtagLabelUpdater: active accounts supporting hashtags: %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_retain();
    id v21 = v2;
    uint64_t v20 = sub_10019903C(v6, v1, v21);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    id v15 = v23;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_10090D8C0);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDHashtagLabelUpdater: Not tracking changes since there's no active cloudkit account logged in or enabled", v19, 2u);
      swift_slowDealloc();
    }

    swift_errorRelease();
    return _swiftEmptyArrayStorage;
  }
  return v20;
}

void sub_1001833E8()
{
  sub_100183440();
}

void sub_100183440()
{
  id v0 = [self sharedBabysitter];
  if (v0)
  {
    uint64_t v1 = v0;
    NSString v2 = String._bridgeToObjectiveC()();
    [v1 giveAccountWithIDAnotherChance:v2];

    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10090D8C0);
    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)unint64_t v6 = 136446210;
      uint64_t v14 = v7;
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v8 = Optional.descriptionOrNil.getter();
      sub_1000C51B8(v8, v9, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDHashtagLabelUpdater: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  sub_100183030();
  swift_bridgeObjectRelease();
  if (qword_100906FB0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10090D8C0);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDHashtagLabelUpdater: (Re-)initialized changeTrackingHelpers upon enabled/disabled CloudKit account(s).", v13, 2u);
    swift_slowDealloc();
  }
}

void sub_100183720(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v1 + 16);
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_4;
    }
LABEL_32:
    if (qword_100906FB0 == -1) {
      goto LABEL_33;
    }
    goto LABEL_40;
  }
  if (a1 >> 62) {
    goto LABEL_31;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10) {
    goto LABEL_32;
  }
LABEL_4:
  swift_bridgeObjectRetain();
  id v11 = [self sharedBabysitter];
  if (v11)
  {
    os_log_type_t v12 = v11;
    uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitTarget);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v15 = [v12 tokenByRegisteringAccount:v13 forOperationWithName:v14];

    if (v15)
    {
      if (v10 < 1)
      {
        __break(1u);
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = 0;
        do
        {
          if ((a1 & 0xC000000000000001) != 0) {
            id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v17 = *(id *)(a1 + 8 * v16 + 32);
          }
          os_log_type_t v18 = v17;
          ++v16;
          uint64_t v45 = (uint64_t)v17;
          sub_1001852A4((id *)&v45, v2);
        }
        while (v10 != v16);
        swift_bridgeObjectRelease();
        uint64_t v19 = v2 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate;
        if (swift_unknownObjectWeakLoadStrong())
        {
          uint64_t v20 = *(void *)(v19 + 8);

          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(1, ObjectType, v20);
          swift_unknownObjectRelease();
        }
        else
        {
        }
      }
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = self;
  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v24 = [v22 babySatErrorWithOperationName:v23];

  sub_100094134((uint64_t *)&unk_10090DC70);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = 0x696669746E656469;
  *(void *)(inited + 40) = 0xEA00000000007265;
  swift_bridgeObjectRetain();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v26;
  unint64_t v27 = sub_1002EDFE8(inited);
  type metadata accessor for Analytics();
  swift_bridgeObjectRetain();
  sub_10042085C(v27);
  swift_bridgeObjectRelease();
  id v28 = v24;
  static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (qword_100906FB0 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_10008E2DC(v29, (uint64_t)qword_10090D8C0);
  swift_retain();
  id v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136446210;
    uint64_t v44 = sub_1000C51B8(0xD000000000000032, 0x80000001007CD050, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Babysitting RDHashtagLabelUpdater because it failed too many times {waiterID: %{public}s}.", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  if (v10 >= 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v34 = *(id *)(a1 + 8 * v33 + 32);
      }
      uint64_t v35 = v34;
      ++v33;
      uint64_t v45 = (uint64_t)v34;
      sub_100185008((id *)&v45);
    }
    while (v10 != v33);
    swift_bridgeObjectRelease();
    uint64_t v36 = v2 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate;
    if (!swift_unknownObjectWeakLoadStrong())
    {

      return;
    }
    uint64_t v37 = *(void *)(v36 + 8);

    goto LABEL_37;
  }
  __break(1u);
LABEL_40:
  swift_once();
LABEL_33:
  uint64_t v38 = type metadata accessor for Logger();
  sub_10008E2DC(v38, (uint64_t)qword_10090D8C0);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    int v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "RDHashtagLabelUpdater: No account eligible for hashtag change tracking", v41, 2u);
    swift_slowDealloc();
  }

  uint64_t v42 = v2 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v37 = *(void *)(v42 + 8);
LABEL_37:
    uint64_t v43 = swift_getObjectType();
    (*(void (**)(void, uint64_t, uint64_t))(v37 + 32))(0, v43, v37);
    swift_unknownObjectRelease();
  }
}

void sub_100183E64()
{
  uint64_t v1 = sub_100183030();
  sub_100183720((unint64_t)v1);
  swift_bridgeObjectRelease();
}

void sub_100183EC0(uint64_t a1, unint64_t a2)
{
  sub_100183F28(a1, a2);
}

void sub_100183F28(uint64_t a1, unint64_t a2)
{
  char v2 = sub_10018414C(a2);
  if (qword_100906FB0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_10090D8C0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v13 = v7;
    if (v2) {
      uint64_t v8 = 1702195828;
    }
    else {
      uint64_t v8 = 0x65736C6166;
    }
    if (v2) {
      unint64_t v9 = 0xE400000000000000;
    }
    else {
      unint64_t v9 = 0xE500000000000000;
    }
    sub_1000C51B8(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDHashtagLabelUpdater: refreshFromLastConsumedOnLaunchIfNeeded completed {refreshed: %s}", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "os_transaction RELEASE {name: com.apple.remindd.RDHashtagLabelUpdater.start}", v12, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10018414C(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    char v23 = 0;
    return v23 & 1;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_25;
  }
LABEL_3:
  uint64_t v25 = v2 - 1;
  if (v2 < 1) {
    __break(1u);
  }
  uint64_t v3 = 0;
  char v29 = 0;
  unint64_t v4 = v1 & 0xC000000000000001;
  unint64_t v26 = v1 + 32;
  os_log_type_t v5 = &stru_1008F6000;
  unint64_t v27 = v1 & 0xC000000000000001;
  uint64_t v28 = v2;
  if ((v1 & 0xC000000000000001) != 0) {
    goto LABEL_9;
  }
LABEL_10:
  while (2)
  {
    for (id i = *(id *)(v26 + 8 * v3); ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
    {
      unint64_t v9 = i;
      if (v29) {
        break;
      }
      id v10 = [[objc_msgSend(i, (SEL)v5[111].imp) loggingDescription];
      swift_unknownObjectRelease();
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      uint64_t v31 = 0;
      id v30 = 0;
      if ([v9 compareCurrentChangeTokenToLastConsumedWithResult:&v31 error:&v30])
      {
        uint64_t v6 = v31;
        id v7 = v30;

        swift_bridgeObjectRelease();
        if (v6 == 4) {
          goto LABEL_20;
        }
      }
      else
      {
        unint64_t v14 = v1;
        id v15 = v30;
        uint64_t v16 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_100906FB0 != -1) {
          swift_once();
        }
        uint64_t v17 = type metadata accessor for Logger();
        sub_10008E2DC(v17, (uint64_t)qword_10090D8C0);
        swift_errorRetain();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        os_log_type_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = swift_slowAlloc();
          uint64_t v31 = swift_slowAlloc();
          *(_DWORD *)uint64_t v20 = 136446466;
          swift_bridgeObjectRetain();
          *(void *)(v20 + 4) = sub_1000C51B8(v11, v13, &v31);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v20 + 12) = 2080;
          id v30 = v16;
          swift_errorRetain();
          sub_100094134((uint64_t *)&unk_10090ABB0);
          uint64_t v21 = String.init<A>(describing:)();
          *(void *)(v20 + 14) = sub_1000C51B8(v21, v22, &v31);
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDHashtagLabelUpdater: Failed to compareCurrentChangeTokenToLastConsumed {account: %{public}s, error: %s}", (uint8_t *)v20, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_bridgeObjectRelease_n();
          swift_errorRelease();
          swift_errorRelease();
        }
        unint64_t v1 = v14;
        unint64_t v4 = v27;
        uint64_t v2 = v28;
        os_log_type_t v5 = &stru_1008F6000;
      }
      if (v2 == ++v3) {
        goto LABEL_25;
      }
      if (!v4) {
        goto LABEL_10;
      }
LABEL_9:
      ;
    }

LABEL_20:
    if (v25 != v3)
    {
      ++v3;
      char v29 = 1;
      if (!v4) {
        continue;
      }
      goto LABEL_9;
    }
    break;
  }
  swift_bridgeObjectRelease();
  sub_100183720(v1);
  return v23 & 1;
}

void sub_100184560(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = a1[3];
  uint64_t KeyPath = swift_getKeyPath();
  if ((v4 & 1) == 0)
  {
    unint64_t v6 = (v4 >> 1) - v3;
    BOOL v7 = __OFSUB__(v4 >> 1, v3);
    swift_unknownObjectRetain();
    goto LABEL_6;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  unint64_t v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    unint64_t v9 = _swiftEmptyArrayStorage;
  }
  uint64_t v10 = v9[2];
  swift_release();
  unint64_t v6 = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v10 != v6)
  {
LABEL_24:
    swift_unknownObjectRelease();
    BOOL v7 = 0;
LABEL_6:
    uint64_t v8 = sub_10020A884(v1, v2, v3, v4);
    goto LABEL_14;
  }
  uint64_t v11 = swift_dynamicCastClass();
  if (v11)
  {
    uint64_t v8 = (void *)v11;
    BOOL v7 = 0;
  }
  else
  {
    swift_unknownObjectRelease();
    BOOL v7 = 0;
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  swift_unknownObjectRelease();
  unint64_t v12 = sub_1001FF8A4((uint64_t)v8);
  swift_release();
  unint64_t v13 = (void *)sub_10039ADB0(KeyPath, (uint64_t)v12);
  swift_release();
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  id v15 = (void *)sub_1003BC8C4(inited, 0, 0, (uint64_t)v13);
  swift_bridgeObjectRelease();
  if (v7)
  {
    __break(1u);
LABEL_22:
    swift_once();
    goto LABEL_17;
  }
  [v15 setFetchLimit:v6];
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  unint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  if (!v23)
  {
    sub_100201318(v16);

    return;
  }
  if (qword_100906FB0 != -1) {
    goto LABEL_22;
  }
LABEL_17:
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_10090D8C0);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_getErrorValue();
    uint64_t v21 = Error.rem_errorDescription.getter();
    sub_1000C51B8(v21, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDHashtagLabelUpdater: failed to fetch reminders from database {error: %s}", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_10018493C()
{
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v0 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v2 = (char *)v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.utility(_:), v5);
  v10[1] = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  unint64_t v12 = _swiftEmptyArrayStorage;
  sub_10019DA88((unint64_t *)&qword_10090AAC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1000967F4((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v11);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_10090D8E0 = result;
  return result;
}

id sub_100184CF0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDHashtagLabelUpdater.BabysitTarget();
  return [super dealloc];
}

void sub_100184D28(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  v33[1] = a2;
  id v34 = a3;
  uint64_t v35 = a4;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v33 - v10;
  id v12 = *a1;
  id v13 = [*a1 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v11, v5);
  id v18 = [v12 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = UUID.uuidString.getter();
  uint64_t v21 = v20;
  v17(v9, v5);
  unint64_t v22 = (objc_class *)_s7remindd29ChangeTrackingAccountProviderCMa_0();
  uint64_t v23 = (char *)objc_allocWithZone(v22);
  uint64_t v24 = (uint64_t *)&v23[OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountID];
  *uint64_t v24 = v14;
  v24[1] = v16;
  *(void *)&v23[OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_rem_accountObjectID] = v12;
  uint64_t v25 = (uint64_t *)&v23[OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountDescription];
  uint64_t *v25 = v19;
  v25[1] = v21;
  v36.receiver = v23;
  v36.super_class = v22;
  id v26 = [super init];
  uint64_t v27 = qword_100906FC8;
  swift_bridgeObjectRetain();
  id v28 = v34;
  if (v27 != -1) {
    swift_once();
  }
  id v29 = objc_allocWithZone((Class)REMDAChangeTrackingHelper);
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v32 = [v29 initWithREMDAAccount:v26 clientName:v30 withREMStore:v28 entityNames:isa];

  *uint64_t v35 = v32;
}

void sub_100185008(id *a1)
{
  id v1 = *a1;
  id v2 = [[objc_msgSend(*a1, "account") loggingDescription];
  swift_unknownObjectRelease();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  [v1 markChangesConsumed:1];
  if (qword_100906FB0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10090D8C0);
  id v7 = v1;
  swift_bridgeObjectRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446466;
    swift_bridgeObjectRetain();
    sub_1000C51B8(v3, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2082;
    id v11 = [v7 upToToken];
    sub_100094134(&qword_10090A4A8);
    uint64_t v12 = String.init<A>(describing:)();
    sub_1000C51B8(v12, v13, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDHashtagLabelUpdater: Mark to current token as consumed due to Babysitting {account: %{public}s, token: %{public}s}", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_1001852A4(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v115 = a2;
  uint64_t v4 = (uint64_t)*a1;
  id v5 = [[objc_msgSend(*a1, "account") loggingDescription];
  swift_unknownObjectRelease();
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  os_log_type_t v9 = [(id)v4 sinceToken];
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = [(id)v4 upToToken];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v112 = v6;
      if (qword_100906FB0 != -1) {
        goto LABEL_31;
      }
      while (1)
      {
        uint64_t v13 = type metadata accessor for Logger();
        uint64_t v14 = sub_10008E2DC(v13, (uint64_t)qword_10090D8C0);
        swift_bridgeObjectRetain_n();
        uint64_t v15 = v10;
        uint64_t v16 = v12;
        id v17 = v12;
        id v18 = v15;
        id v19 = v17;
        uint64_t v117 = (void *)v14;
        uint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.default.getter();
        int v22 = v21;
        uint64_t v118 = v8;
        uint64_t v116 = v4;
        id v109 = v16;
        NSString v110 = v10;
        id v113 = v19;
        id v114 = v18;
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v23 = swift_slowAlloc();
          uint64_t v24 = (void *)swift_slowAlloc();
          v120[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136446722;
          LODWORD(v108) = v22;
          swift_bridgeObjectRetain();
          uint64_t v122 = sub_1000C51B8(v112, (unint64_t)v8, v120);
          id v107 = v20;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v23 + 12) = 2114;
          uint64_t v122 = (uint64_t)v18;
          uint64_t v25 = v18;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v24 = v10;

          *(_WORD *)(v23 + 22) = 2114;
          uint64_t v122 = (uint64_t)v19;
          id v26 = v19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v24[1] = v109;

          uint64_t v8 = v118;
          _os_log_impl((void *)&_mh_execute_header, v107, (os_log_type_t)v108, "RDHashtagLabelUpdater: Processing change set {account: %{public}s, since: %{public}@, upTo: %{public}@}", (uint8_t *)v23, 0x20u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v4 = v116;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        sub_1000963CC(0, &qword_10090DC80);
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        id v40 = [(id)v4 changedIdentifiersOfModelClass:ObjCClassFromMetadata ofChangeType:0];
        uint64_t v10 = _swiftEmptyArrayStorage;
        uint64_t v111 = ObjCClassFromMetadata;
        if (!v40)
        {
          uint64_t v108 = 0;
          goto LABEL_35;
        }
        int v41 = v40;
        sub_100094134(&qword_10090DC98);
        unint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v120[0] = (uint64_t)_swiftEmptyArrayStorage;
        if (!(v42 >> 62))
        {
          uint64_t v12 = *(void **)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v12) {
            break;
          }
          goto LABEL_18;
        }
        swift_bridgeObjectRetain();
        uint64_t v12 = (void *)_CocoaArrayWrapper.endIndex.getter();
        if (!v12) {
          break;
        }
LABEL_18:
        uint64_t v8 = (v42 & 0xC000000000000001);
        uint64_t v4 = 4;
        while (1)
        {
          uint64_t v43 = v4 - 4;
          if (!v8) {
            break;
          }
          uint64_t v44 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v45 = __OFADD__(v43, 1);
          uint64_t v46 = (void *)(v4 - 3);
          if (v45) {
            goto LABEL_30;
          }
LABEL_24:
          uint64_t v122 = v44;
          sub_100186724((unint64_t *)v120, (void **)&v122, "RDHashtagLabelUpdater: Tracked insertion is not an REMObjectID, huh? {inserted: %s}");
          if (v3)
          {
LABEL_81:
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            __break(1u);
            return;
          }
          uint64_t v3 = 0;
          swift_unknownObjectRelease();
          ++v4;
          if (v46 == v12)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v108 = (void *)v120[0];
            uint64_t v8 = v118;
            goto LABEL_34;
          }
        }
        uint64_t v44 = *(void *)(v42 + 8 * v4);
        swift_unknownObjectRetain();
        BOOL v45 = __OFADD__(v43, 1);
        uint64_t v46 = (void *)(v4 - 3);
        if (!v45) {
          goto LABEL_24;
        }
LABEL_30:
        __break(1u);
LABEL_31:
        swift_once();
      }
      swift_bridgeObjectRelease_n();
      uint64_t v108 = _swiftEmptyArrayStorage;
LABEL_34:
      uint64_t v4 = v116;
LABEL_35:
      sub_1000963CC(0, (unint64_t *)&unk_10090DC88);
      id v47 = [(id)v4 changedIdentifiersOfModelClass:swift_getObjCClassFromMetadata() ofChangeType:0];
      if (v47)
      {
        uint64_t v48 = v47;
        sub_100094134(&qword_10090DC98);
        unint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v120[0] = (uint64_t)_swiftEmptyArrayStorage;
        if (v49 >> 62) {
          goto LABEL_49;
        }
        uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        for (; v50; uint64_t v50 = _CocoaArrayWrapper.endIndex.getter())
        {
          uint64_t v51 = 4;
          while (1)
          {
            uint64_t v52 = v51 - 4;
            if ((v49 & 0xC000000000000001) == 0) {
              break;
            }
            uint64_t v53 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v8 = (v51 - 3);
            if (__OFADD__(v52, 1)) {
              goto LABEL_48;
            }
LABEL_44:
            uint64_t v122 = v53;
            sub_100186724((unint64_t *)v120, (void **)&v122, "RDHashtagLabelUpdater: Tracked insertion is not an REMSharedToMeReminderPlaceholder, huh? {inserted: %s}");
            if (v3) {
              goto LABEL_81;
            }
            uint64_t v3 = 0;
            swift_unknownObjectRelease();
            ++v51;
            if (v8 == v50)
            {
              swift_bridgeObjectRelease_n();
              id v107 = v120[0];
              uint64_t v8 = v118;
              goto LABEL_51;
            }
          }
          uint64_t v53 = *(void *)(v49 + 8 * v51);
          swift_unknownObjectRetain();
          uint64_t v8 = (v51 - 3);
          if (!__OFADD__(v52, 1)) {
            goto LABEL_44;
          }
LABEL_48:
          __break(1u);
LABEL_49:
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease_n();
        id v107 = _swiftEmptyArrayStorage;
LABEL_51:
        uint64_t v4 = v116;
      }
      else
      {
        id v107 = 0;
      }
      id v54 = [(id)v4 changeSet];
      if (v54)
      {
        char v55 = v54;
        sub_100094134((uint64_t *)&unk_10090A490);
        uint64_t v56 = swift_allocObject();
        *(_OWORD *)(v56 + 16) = xmmword_100776E60;
        *(void *)(v56 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v56 + 40) = v57;
        *(void *)(v56 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v56 + 56) = v58;
        *(void *)(v56 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v56 + 72) = v59;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        LOBYTE(v56) = [v55 applyFilterByTransactionAuthors:isa isExclusion:1];

        if (v56)
        {

LABEL_60:
          uint64_t v64 = v111;
          goto LABEL_62;
        }
        swift_bridgeObjectRetain_n();
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        uint64_t v64 = v111;
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          v120[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v67 = 136446210;
          uint64_t v4 = v116;
          swift_bridgeObjectRetain();
          uint64_t v122 = sub_1000C51B8(v112, (unint64_t)v118, v120);
          uint64_t v64 = v111;
          uint64_t v8 = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "RDHashtagLabelUpdater: Unexpected nil change set when trying to filter in ICCC authors {account: %{public}s}", v67, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_bridgeObjectRetain_n();
        id v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v61, v62))
        {

          swift_bridgeObjectRelease_n();
          goto LABEL_60;
        }
        id v63 = (uint8_t *)swift_slowAlloc();
        v120[0] = swift_slowAlloc();
        *(_DWORD *)id v63 = 136446210;
        uint64_t v4 = v116;
        swift_bridgeObjectRetain();
        uint64_t v122 = sub_1000C51B8(v112, (unint64_t)v118, v120);
        uint64_t v64 = v111;
        uint64_t v8 = v118;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "RDHashtagLabelUpdater: Unexpected nil change set when trying to filter in ICCC authors {account: %{public}s}", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
LABEL_62:
      id v68 = [(id)v4 changedIdentifiersOfModelClass:v64 ofChangeType:2];
      if (v68)
      {
        uint64_t v69 = v68;
        sub_100094134(&qword_10090DC98);
        unint64_t v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v71 = sub_100186A84(v70);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v71 = 0;
      }
      id v72 = [(id)v4 changeSet];
      if (v72)
      {
        uint64_t v73 = v72;
        sub_100094134((uint64_t *)&unk_10090A490);
        uint64_t v74 = swift_allocObject();
        *(_OWORD *)(v74 + 16) = xmmword_100776E60;
        *(void *)(v74 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v74 + 40) = v75;
        *(void *)(v74 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v74 + 56) = v76;
        *(void *)(v74 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v74 + 72) = v77;
        Class v78 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v73 applyFilterByTransactionAuthors:v78 isExclusion:0];
      }
      else
      {
        swift_bridgeObjectRetain_n();
        id v79 = Logger.logObject.getter();
        os_log_type_t v80 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v79, v80))
        {
          uint64_t v81 = (uint8_t *)swift_slowAlloc();
          v120[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v81 = 136446210;
          uint64_t v4 = v116;
          swift_bridgeObjectRetain();
          uint64_t v122 = sub_1000C51B8(v112, (unint64_t)v118, v120);
          uint64_t v64 = v111;
          uint64_t v8 = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "RDHashtagLabelUpdater: Unexpected nil change set when trying to filter in ICCC authors {account: %{public}s}", v81, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      id v82 = [(id)v4 changedIdentifiersOfModelClass:v64 ofChangeType:2];
      if (v82)
      {
        uint64_t v83 = v82;
        sub_100094134(&qword_10090DC98);
        unint64_t v84 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        Class v85 = sub_100186A84(v84);
        id v82 = (id)swift_bridgeObjectRelease();
      }
      else
      {
        Class v85 = 0;
      }
      v120[0] = 0xD000000000000015;
      v120[1] = 0x800000010077E900;
      v120[3] = 0;
      v121[0] = 0;
      v120[2] = 0;
      *(void *)((char *)v121 + 6) = 0;
      __chkstk_darwin(v82);
      v106[2] = v108;
      v106[3] = v86;
      v106[4] = v114;
      v106[5] = v113;
      v106[6] = v71;
      v106[7] = v85;
      v106[8] = v107;
      sub_1003B5ADC((uint64_t)v120, (uint64_t)sub_10019D570, (uint64_t)v106);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v87 = Logger.logObject.getter();
        os_log_type_t v88 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v87, v88))
        {
          os_log_type_t v89 = (uint8_t *)swift_slowAlloc();
          uint64_t v122 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v89 = 136315138;
          uint64_t v119 = v3;
          swift_errorRetain();
          sub_100094134((uint64_t *)&unk_10090ABB0);
          uint64_t v90 = String.init<A>(describing:)();
          uint64_t v119 = sub_1000C51B8(v90, v91, &v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v8 = v118;
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "RDHashtagLabelUpdater: Failed to save hashtage label for %s", v89, 0xCu);
          swift_arrayDestroy();
          uint64_t v4 = v116;
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v93 = v113;
      uint64_t v92 = v114;
      [(id)v4 markChangesConsumed];
      id v94 = v92;
      id v95 = v93;
      swift_bridgeObjectRetain();
      id v96 = v94;
      id v97 = v95;
      os_log_type_t v98 = Logger.logObject.getter();
      os_log_type_t v99 = static os_log_type_t.default.getter();
      int v100 = v99;
      uint64_t v118 = v98;
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v101 = swift_slowAlloc();
        Class v102 = (void *)swift_slowAlloc();
        uint64_t v117 = (void *)swift_slowAlloc();
        uint64_t v122 = (uint64_t)v117;
        *(_DWORD *)uint64_t v101 = 136446722;
        LODWORD(v116) = v100;
        swift_bridgeObjectRetain();
        uint64_t v119 = sub_1000C51B8(v112, (unint64_t)v8, &v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v101 + 12) = 2114;
        uint64_t v119 = (uint64_t)v96;
        id v103 = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *Class v102 = v110;

        *(_WORD *)(v101 + 22) = 2114;
        uint64_t v119 = (uint64_t)v97;
        id v104 = v97;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v102[1] = v109;

        id v105 = v118;
        _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v116, "RDHashtagLabelUpdater: Marked change set consumed {account: %{public}s, since: %{public}@, upTo: %{public}@}", (uint8_t *)v101, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return;
    }
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E2DC(v31, (uint64_t)qword_10090D8C0);
    id v32 = v10;
    swift_bridgeObjectRetain();
    uint64_t v33 = v32;
    id v34 = Logger.logObject.getter();
    unint64_t v35 = (unint64_t)v8;
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v117 = (void *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136446466;
      NSString v110 = v10;
      swift_bridgeObjectRetain();
      uint64_t v122 = sub_1000C51B8(v6, v35, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v37 + 12) = 2114;
      uint64_t v122 = (uint64_t)v33;
      uint64_t v38 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v117 = v110;

      _os_log_impl((void *)&_mh_execute_header, v34, v36, "RDHashtagLabelUpdater: No updated change token from change tracking (no changes) {account: %{public}s, since: %{public}@}", (uint8_t *)v37, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E2DC(v27, (uint64_t)qword_10090D8C0);
    swift_bridgeObjectRetain();
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      NSString v30 = (uint8_t *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)NSString v30 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v122 = sub_1000C51B8(v6, (unint64_t)v8, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "RDHashtagLabelUpdater: No since-token from change tracking {account: %{public}s}", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_100186724(unint64_t *a1, void **a2, const char *a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *a2;
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    swift_unknownObjectRetain();
    id v14 = [v13 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v15 = *a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v15 = sub_100309EC8(0, *(void *)(v15 + 16) + 1, 1, v15);
    }
    unint64_t v17 = *(void *)(v15 + 16);
    unint64_t v16 = *(void *)(v15 + 24);
    if (v17 >= v16 >> 1) {
      unint64_t v15 = sub_100309EC8(v16 > 1, v17 + 1, 1, v15);
    }
    *(void *)(v15 + 16) = v17 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v17, v10, v7);
    swift_unknownObjectRelease();
    *a1 = v15;
  }
  else
  {
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_10090D8C0);
    swift_unknownObjectRetain_n();
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v21 = 136315138;
      id v22 = [v11 description:v21 + 4];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v28 = a3;
      uint64_t v29 = v3;
      uint64_t v24 = v23;
      unint64_t v26 = v25;

      uint64_t v30 = sub_1000C51B8(v24, v26, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, v28, v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

void *sub_100186A84(unint64_t a1)
{
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v4 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          id v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v6 = __OFADD__(v4, 1);
          uint64_t v7 = i - 3;
          if (v6) {
            goto LABEL_11;
          }
        }
        else
        {
          id v5 = *(void **)(a1 + 8 * i);
          swift_unknownObjectRetain();
          BOOL v6 = __OFADD__(v4, 1);
          uint64_t v7 = i - 3;
          if (v6)
          {
LABEL_11:
            __break(1u);
            goto LABEL_12;
          }
        }
        uint64_t v9 = v5;
        sub_100192030((unint64_t *)&v10, &v9);
        swift_unknownObjectRelease();
        if (v7 == v2)
        {
          swift_bridgeObjectRelease();
          return v10;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_100186BC0(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint8_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v158 = a8;
  id v159 = a4;
  id v160 = a5;
  uint64_t v157 = a3;
  uint64_t v13 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  uint64_t v153 = *(void *)(v13 - 8);
  __chkstk_darwin(v13 - 8);
  uint64_t v164 = (uint64_t)&v149 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  id v163 = (void **)((char *)&v149 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  os_log_t v162 = (os_log_t)((char *)&v149 - v19);
  [a1 setTransactionAuthor:RDHashtagLabelUpdaterAuthor];
  os_log_type_t v20 = &unk_100906000;
  id v161 = a1;
  uint64_t v155 = a7;
  uint64_t v156 = v8;
  if (a2 && *(void *)(a2 + 16))
  {
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_10090D8C0);
    swift_bridgeObjectRetain_n();
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      LODWORD(v165) = v24;
      uint64_t v25 = swift_slowAlloc();
      id v167 = (id)swift_slowAlloc();
      uint64_t v154 = (uint8_t *)v25;
      *(_DWORD *)uint64_t v25 = 136315138;
      os_log_t v152 = (os_log_t)(v25 + 4);
      swift_bridgeObjectRetain();
      uint64_t v26 = Array.description.getter();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      uint64_t v166 = (void *)sub_1000C51B8(v26, v28, (uint64_t *)&v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_type_t v20 = (void *)&unk_100906000;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v165, "RDHashtagLabelUpdater: inserted hashtag IDs: %s", v154, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100188164(v161);
    uint64_t v165 = v15;
    if (a6) {
      goto LABEL_16;
    }
LABEL_27:
    if (v20[502] != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_10008E2DC(v57, (uint64_t)qword_10090D8C0);
    id v58 = v159;
    id v59 = v160;
    id v60 = v58;
    id v61 = v59;
    os_log_type_t v62 = (uint8_t *)Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.info.getter();
    int v64 = v63;
    if (os_log_type_enabled((os_log_t)v62, v63))
    {
      uint64_t v65 = swift_slowAlloc();
      os_log_t v152 = (os_log_t)swift_slowAlloc();
      *(_DWORD *)uint64_t v65 = 138543618;
      uint64_t v154 = v62;
      LODWORD(v162) = v64;
      id v167 = v60;
      id v66 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v67 = v152;
      v152->Class isa = (Class)v60;

      *(_WORD *)(v65 + 12) = 2114;
      id v167 = v61;
      id v68 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v67[1].Class isa = (Class)v61;

      uint64_t v69 = v154;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v154, (os_log_type_t)v162, "RDHashtagLabelUpdater: No user initiated deleted hashtags found in change {since: %{public}@, upTo: %{public}@}", (uint8_t *)v65, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    os_log_type_t v20 = &unk_100906000;
    uint64_t v70 = v155;
    if (!v155) {
      goto LABEL_47;
    }
    goto LABEL_36;
  }
  uint64_t v154 = a6;
  if (qword_100906FB0 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_10008E2DC(v29, (uint64_t)qword_10090D8C0);
  id v30 = v159;
  id v31 = v160;
  id v32 = v30;
  id v33 = v31;
  id v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  int v36 = v35;
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v151 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 138543618;
    uint64_t v150 = v37 + 4;
    id v167 = v32;
    id v38 = v32;
    os_log_t v152 = v34;
    LODWORD(v165) = v36;
    id v39 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v40 = v151;
    *(void *)uint64_t v151 = v32;

    *(_WORD *)(v37 + 12) = 2114;
    id v167 = v33;
    id v41 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *((void *)v40 + 1) = v33;

    os_log_t v42 = v152;
    _os_log_impl((void *)&_mh_execute_header, v152, (os_log_type_t)v165, "RDHashtagLabelUpdater: No inserted hashtags found in change {since: %{public}@, upTo: %{public}@}", (uint8_t *)v37, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  os_log_type_t v20 = &unk_100906000;
  a6 = v154;
  uint64_t v165 = v15;
  if (!v154) {
    goto LABEL_27;
  }
LABEL_16:
  int64_t v43 = *((void *)a6 + 2);
  if (!v43) {
    goto LABEL_27;
  }
  if (v20[502] != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  sub_10008E2DC(v44, (uint64_t)qword_10090D8C0);
  swift_bridgeObjectRetain_n();
  BOOL v45 = Logger.logObject.getter();
  int v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v45, (os_log_type_t)v46))
  {
    LODWORD(v150) = v46;
    os_log_t v152 = v45;
    id v47 = (uint8_t *)swift_slowAlloc();
    id v149 = (void *)swift_slowAlloc();
    id v167 = v149;
    uint64_t v151 = v47;
    *(_DWORD *)id v47 = 136446210;
    uint64_t v166 = _swiftEmptyArrayStorage;
    sub_1001DE148(0, v43, 0);
    uint64_t v48 = *(unsigned __int8 *)(v153 + 80);
    uint64_t v154 = a6;
    uint64_t v49 = (uint64_t)&a6[(v48 + 32) & ~v48];
    uint64_t v50 = *(void *)(v153 + 72);
    os_log_t v51 = v162;
    do
    {
      uint64_t v52 = v164;
      sub_10019D61C(v49, v164);
      (*(void (**)(os_log_t, uint64_t, uint64_t))(v16 + 16))(v51, v52, v15);
      sub_10019D680(v52);
      uint64_t v53 = v166;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE148(0, v53[2] + 1, 1);
        uint64_t v53 = v166;
      }
      unint64_t v55 = v53[2];
      unint64_t v54 = v53[3];
      if (v55 >= v54 >> 1)
      {
        sub_1001DE148(v54 > 1, v55 + 1, 1);
        uint64_t v53 = v166;
      }
      void v53[2] = v55 + 1;
      unint64_t v56 = (unint64_t)v53
          + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
          + *(void *)(v16 + 72) * v55;
      os_log_t v51 = v162;
      uint64_t v15 = v165;
      (*(void (**)(unint64_t, os_log_t, uint64_t))(v16 + 32))(v56, v162, v165);
      uint64_t v166 = v53;
      v49 += v50;
      --v43;
    }
    while (v43);
    uint64_t v71 = v151;
    uint64_t v72 = Array.description.getter();
    unint64_t v74 = v73;
    swift_release();
    uint64_t v166 = (void *)sub_1000C51B8(v72, v74, (uint64_t *)&v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v75 = v154;
    swift_bridgeObjectRelease_n();
    a6 = v75;
    swift_bridgeObjectRelease();
    os_log_t v76 = v152;
    _os_log_impl((void *)&_mh_execute_header, v152, (os_log_type_t)v150, "RDHashtagLabelUpdater: deleted hashtag IDs initiated by user: %{public}s", v71, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    os_log_type_t v20 = &unk_100906000;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_1001881FC(v161, (uint64_t)a6, 1);
  uint64_t v70 = v155;
  if (!v155) {
    goto LABEL_47;
  }
LABEL_36:
  int64_t v77 = *(void *)(v70 + 16);
  if (v77)
  {
    uint64_t v78 = v156;
    if (v20[502] != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    sub_10008E2DC(v79, (uint64_t)qword_10090D8C0);
    swift_bridgeObjectRetain_n();
    os_log_type_t v80 = Logger.logObject.getter();
    int v81 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v80, (os_log_type_t)v81))
    {
      LODWORD(v152) = v81;
      os_log_t v162 = v80;
      id v82 = (uint8_t *)swift_slowAlloc();
      uint64_t v151 = (uint8_t *)swift_slowAlloc();
      id v167 = v151;
      uint64_t v154 = v82;
      *(_DWORD *)id v82 = 136446210;
      uint64_t v166 = _swiftEmptyArrayStorage;
      sub_1001DE148(0, v77, 0);
      uint64_t v83 = v70 + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
      uint64_t v84 = *(void *)(v153 + 72);
      Class v85 = v163;
      do
      {
        uint64_t v86 = v164;
        sub_10019D61C(v83, v164);
        (*(void (**)(void *, uint64_t, uint64_t))(v16 + 16))(v85, v86, v15);
        sub_10019D680(v86);
        uint64_t v87 = v166;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE148(0, v87[2] + 1, 1);
          uint64_t v87 = v166;
        }
        unint64_t v89 = v87[2];
        unint64_t v88 = v87[3];
        if (v89 >= v88 >> 1)
        {
          sub_1001DE148(v88 > 1, v89 + 1, 1);
          uint64_t v87 = v166;
        }
        v87[2] = v89 + 1;
        unint64_t v90 = (unint64_t)v87
            + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
            + *(void *)(v16 + 72) * v89;
        Class v85 = v163;
        uint64_t v15 = v165;
        (*(void (**)(unint64_t, void *, uint64_t))(v16 + 32))(v90, v163, v165);
        uint64_t v166 = v87;
        v83 += v84;
        --v77;
      }
      while (v77);
      uint64_t v106 = v154;
      uint64_t v107 = Array.description.getter();
      unint64_t v109 = v108;
      swift_release();
      uint64_t v166 = (void *)sub_1000C51B8(v107, v109, (uint64_t *)&v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v70 = v155;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      os_log_t v110 = v162;
      _os_log_impl((void *)&_mh_execute_header, v162, (os_log_type_t)v152, "RDHashtagLabelUpdater: deleted hashtag IDs by ICCC: %{public}s", v106, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v111 = v156;
      os_log_type_t v20 = &unk_100906000;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v111 = v78;
    }
    sub_1001881FC(v161, v70, 0);
    uint64_t v105 = v158;
    if (!v158) {
      goto LABEL_61;
    }
    goto LABEL_56;
  }
LABEL_47:
  if (v20[502] != -1) {
    swift_once();
  }
  uint64_t v91 = type metadata accessor for Logger();
  sub_10008E2DC(v91, (uint64_t)qword_10090D8C0);
  id v92 = v159;
  id v93 = v160;
  id v94 = v92;
  id v95 = v93;
  id v96 = Logger.logObject.getter();
  os_log_type_t v97 = static os_log_type_t.info.getter();
  int v98 = v97;
  BOOL v99 = os_log_type_enabled(v96, v97);
  uint64_t v111 = v156;
  if (v99)
  {
    uint64_t v100 = swift_slowAlloc();
    id v163 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v100 = 138543618;
    id v167 = v94;
    id v101 = v94;
    LODWORD(v164) = v98;
    id v102 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v103 = v163;
    *id v163 = v94;

    *(_WORD *)(v100 + 12) = 2114;
    id v167 = v95;
    id v104 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v103[1] = v95;

    _os_log_impl((void *)&_mh_execute_header, v96, (os_log_type_t)v164, "RDHashtagLabelUpdater: No ICCC deleted hashtags found in change {since: %{public}@, upTo: %{public}@}", (uint8_t *)v100, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    os_log_type_t v20 = &unk_100906000;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v105 = v158;
    if (!v158) {
      goto LABEL_61;
    }
  }
  else
  {

    uint64_t v105 = v158;
    if (!v158) {
      goto LABEL_61;
    }
  }
LABEL_56:
  if (!*(void *)(v105 + 16))
  {
LABEL_61:
    if (v20[502] != -1) {
      swift_once();
    }
    uint64_t v119 = type metadata accessor for Logger();
    sub_10008E2DC(v119, (uint64_t)qword_10090D8C0);
    id v120 = v159;
    id v121 = v160;
    id v122 = v120;
    id v123 = v121;
    uint64_t v124 = Logger.logObject.getter();
    os_log_type_t v125 = static os_log_type_t.info.getter();
    int v126 = v125;
    if (os_log_type_enabled(v124, v125))
    {
      uint64_t v127 = swift_slowAlloc();
      LODWORD(v165) = v126;
      uint64_t v128 = v127;
      uint64_t v129 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v128 = 138543618;
      id v167 = v122;
      id v130 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v129 = v122;

      *(_WORD *)(v128 + 12) = 2114;
      id v167 = v123;
      id v131 = v123;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v129[1] = v123;

      os_log_type_t v20 = (void *)&unk_100906000;
      _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v165, "RDHashtagLabelUpdater: No shared reminder placeholders found in change {since: %{public}@, upTo: %{public}@}", (uint8_t *)v128, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_69;
  }
  if (v20[502] != -1) {
    swift_once();
  }
  uint64_t v112 = type metadata accessor for Logger();
  sub_10008E2DC(v112, (uint64_t)qword_10090D8C0);
  swift_bridgeObjectRetain_n();
  id v113 = Logger.logObject.getter();
  os_log_type_t v114 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v113, v114))
  {
    uint64_t v115 = (uint8_t *)swift_slowAlloc();
    id v167 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v115 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v116 = Array.description.getter();
    unint64_t v118 = v117;
    swift_bridgeObjectRelease();
    uint64_t v166 = (void *)sub_1000C51B8(v116, v118, (uint64_t *)&v167);
    os_log_type_t v20 = (void *)&unk_100906000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v113, v114, "RDHashtagLabelUpdater: inserted sharedToMeReminderPlaceHolder IDs: %{public}s", v115, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_10018EC30(v157, v161);
  if (v111)
  {
    __break(1u);
    return;
  }
LABEL_69:
  if ([v161 hasChanges])
  {
    if (v20[502] != -1) {
      swift_once();
    }
    uint64_t v133 = type metadata accessor for Logger();
    sub_10008E2DC(v133, (uint64_t)qword_10090D8C0);
    uint64_t v134 = v161;
    uint64_t v135 = Logger.logObject.getter();
    os_log_type_t v136 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v135, v136))
    {
      uint64_t v137 = swift_slowAlloc();
      *(_DWORD *)uint64_t v137 = 134218496;
      id v138 = [v134 insertedObjects];
      sub_1000963CC(0, (unint64_t *)&qword_100909B00);
      sub_1000E4F40((unint64_t *)&qword_1009163D0, (unint64_t *)&qword_100909B00);
      uint64_t v139 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v139 & 0xC000000000000001) != 0) {
        uint64_t v140 = (void *)__CocoaSet.count.getter();
      }
      else {
        uint64_t v140 = *(void **)(v139 + 16);
      }

      swift_bridgeObjectRelease();
      id v167 = v140;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v137 + 12) = 2048;
      id v141 = [v134 updatedObjects];
      uint64_t v142 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v142 & 0xC000000000000001) != 0) {
        id v143 = (void *)__CocoaSet.count.getter();
      }
      else {
        id v143 = *(void **)(v142 + 16);
      }

      swift_bridgeObjectRelease();
      id v167 = v143;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v137 + 22) = 2048;
      id v144 = [v134 deletedObjects];
      uint64_t v145 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v145 & 0xC000000000000001) != 0) {
        uint64_t v146 = (void *)__CocoaSet.count.getter();
      }
      else {
        uint64_t v146 = *(void **)(v145 + 16);
      }

      swift_bridgeObjectRelease();
      id v167 = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v135, v136, "RDHashtagLabelUpdater: Saving changes - insert: %ld, update: %ld, delete: %ld", (uint8_t *)v137, 0x20u);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v135 = v134;
    }

    id v167 = 0;
    if ([v134 save:&v167])
    {
      id v147 = v167;
    }
    else
    {
      id v148 = v167;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

void sub_100188164(void *a1)
{
  sub_10018829C(v1, a1);
}

void sub_1001881FC(void *a1, uint64_t a2, int a3)
{
  sub_10018B958(a2, v3, a1, a3);
}

uint64_t sub_10018829C(uint64_t a1, void *a2)
{
  uint64_t v290 = type metadata accessor for UUID();
  uint64_t v254 = *(void *)(v290 - 8);
  uint64_t v3 = __chkstk_darwin(v290);
  uint64_t v258 = (char *)&v251 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v257 = (char *)&v251 - v6;
  __chkstk_darwin(v5);
  uint64_t v286 = (char *)&v251 - v7;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v256 = (char *)&v251 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v263 = (char *)&v251 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v262 = (uint64_t)&v251 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v289 = (char *)&v251 - v16;
  __chkstk_darwin(v15);
  uint64_t v291 = (char *)&v251 - v17;
  uint64_t v18 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v18 - 8);
  uint64_t v288 = (void (**)(char *, uint64_t, unint64_t))((char *)&v251 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v20 = type metadata accessor for Logger();
  unint64_t v294 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)&v251 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_100126860(v23);
  swift_bridgeObjectRelease();
  unint64_t v295 = (unint64_t)_swiftEmptyArrayStorage;
  *(void *)&v298[0] = sub_10020AAEC(v24);
  sub_100094134(&qword_10090DC48);
  sub_1000967F4((unint64_t *)&qword_10090DC50, &qword_10090DC48);
  uint64_t v25 = BidirectionalCollection<>.slices(by:)();
  swift_release();
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    swift_bridgeObjectRetain();
    unint64_t v27 = (long long *)(v25 + 48);
    uint64_t v28 = v259;
    do
    {
      v298[0] = *(v27 - 1);
      long long v29 = *v27;
      v27 += 2;
      v298[1] = v29;
      swift_unknownObjectRetain();
      sub_10018F574((uint64_t *)v298, 0);
      swift_unknownObjectRelease();
      --v26;
    }
    while (v26);
    uint64_t v259 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v30 = v295;
    if (!(v295 >> 62))
    {
LABEL_5:
      if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        return swift_bridgeObjectRelease();
      }
      goto LABEL_6;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v37) {
    return swift_bridgeObjectRelease();
  }
LABEL_6:
  uint64_t v271 = a2;
  if (qword_100906FB0 != -1) {
    goto LABEL_237;
  }
LABEL_7:
  uint64_t v31 = sub_10008E2DC(v20, (uint64_t)qword_10090D8C0);
  id v32 = *(uint64_t (**)(uint64_t))(v294 + 16);
  uint64_t v285 = v31;
  unint64_t v33 = v20;
  uint64_t v34 = v32(isUniquelyReferenced_nonNull_native);
  *(void *)&v298[0] = v30;
  __chkstk_darwin(v34);
  *((void *)&v251 - 2) = isUniquelyReferenced_nonNull_native;
  sub_100094134(&qword_10090DCA0);
  sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  sub_1000967F4((unint64_t *)&unk_10090DCA8, &qword_10090DCA0);
  uint64_t v35 = v259;
  uint64_t v36 = Sequence.map<A>(skippingError:_:)();
  if (v35)
  {
    swift_errorRelease();
    uint64_t v259 = 0;
    unint64_t v20 = (unint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    unint64_t v20 = v36;
    uint64_t v259 = 0;
  }
  uint64_t v38 = (uint64_t)v291;
  (*(void (**)(uint64_t, unint64_t))(v294 + 8))(isUniquelyReferenced_nonNull_native, v33);
  swift_bridgeObjectRelease();
  unint64_t v295 = (unint64_t)&_swiftEmptyDictionarySingleton;
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v289;
  if (v39)
  {
    unint64_t v294 = v20 & 0xC000000000000001;
    uint64_t v281 = &_swiftEmptyDictionarySingleton;
    uint64_t v40 = 4;
    long long v287 = xmmword_10077A530;
    uint64_t v292 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))v39;
    unint64_t v293 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))v20;
    while (1)
    {
      if (v294) {
        id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v42 = *(id *)(v20 + 8 * v40);
      }
      uint64_t v30 = (uint64_t)v42;
      int64_t v43 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v40 - 3);
      if (__OFADD__(v40 - 4, 1)) {
        goto LABEL_227;
      }
      id v44 = [v42 name];
      if (v44)
      {
        BOOL v45 = v44;
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = v47;

        *(void *)&v298[0] = v46;
        *((void *)&v298[0] + 1) = v48;
        unint64_t v20 = (unint64_t)v288;
        static Locale.current.getter();
        uint64_t v49 = type metadata accessor for Locale();
        (*(void (**)(unint64_t, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v20, 0, 1, v49);
        sub_1000E4FD8();
        uint64_t isUniquelyReferenced_nonNull_native = StringProtocol.foldedStringForWriting(locale:)();
        uint64_t v51 = v50;
        sub_1000966BC(v20, (uint64_t *)&unk_10090FDF0);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t isUniquelyReferenced_nonNull_native = 0;
        uint64_t v51 = 0xE000000000000000;
      }
      uint64_t v52 = v281;
      unint64_t v54 = sub_1001806F8(isUniquelyReferenced_nonNull_native, v51);
      uint64_t v55 = v52[2];
      BOOL v56 = (v53 & 1) == 0;
      uint64_t v57 = v55 + v56;
      if (__OFADD__(v55, v56)) {
        break;
      }
      char v58 = v53;
      if (v52[3] < v57)
      {
        sub_100310F38(v57, 1);
        unint64_t v20 = v295;
        unint64_t v59 = sub_1001806F8(isUniquelyReferenced_nonNull_native, v51);
        if ((v58 & 1) != (v60 & 1)) {
          goto LABEL_241;
        }
        unint64_t v54 = v59;
        uint64_t v52 = (void *)v20;
      }
      uint64_t v281 = v52;
      if (v58)
      {
        swift_bridgeObjectRelease();
        id v41 = (void *)(v52[7] + 8 * v54);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v289;
        if (*(void *)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v61 = swift_allocObject();
        *(_OWORD *)(v61 + 16) = v287;
        *(void *)(v61 + 32) = v30;
        *(void *)&v298[0] = v61;
        specialized Array._endMutation()();
        os_log_type_t v62 = v281;
        uint64_t v63 = *(void *)&v298[0];
        v281[(v54 >> 6) + 8] |= 1 << v54;
        int v64 = (uint64_t *)(v62[6] + 16 * v54);
        *int v64 = isUniquelyReferenced_nonNull_native;
        v64[1] = v51;
        *(void *)(v62[7] + 8 * v54) = v63;
        uint64_t v65 = v62[2];
        BOOL v66 = __OFADD__(v65, 1);
        uint64_t v67 = v65 + 1;
        if (v66) {
          goto LABEL_232;
        }
        v62[2] = v67;
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v289;
      }
      uint64_t v38 = (uint64_t)v291;
      ++v40;
      unint64_t v20 = (unint64_t)v293;
      if (v43 == v292) {
        goto LABEL_36;
      }
    }
LABEL_228:
    __break(1u);
LABEL_229:
    __break(1u);
LABEL_230:
    __break(1u);
LABEL_231:
    __break(1u);
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }
  uint64_t v281 = &_swiftEmptyDictionarySingleton;
LABEL_36:
  swift_bridgeObjectRelease();
  unint64_t v299 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v68 = v281[8];
  uint64_t v268 = (char *)(v281 + 8);
  uint64_t v69 = 1 << *((unsigned char *)v281 + 32);
  if (v69 < 64) {
    uint64_t v70 = ~(-1 << v69);
  }
  else {
    uint64_t v70 = -1;
  }
  unint64_t v280 = v70 & v68;
  swift_beginAccess();
  int64_t v71 = 0;
  int64_t v269 = (unint64_t)(v69 + 63) >> 6;
  uint64_t v292 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v254 + 56);
  unint64_t v293 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))(v254 + 48);
  uint64_t v288 = (void (**)(char *, uint64_t, unint64_t))(v254 + 16);
  *(void *)&long long v287 = v254 + 8;
  uint64_t v255 = (void (**)(char *, uint64_t, uint64_t))(v254 + 32);
  uint64_t v252 = &v296;
  *(void *)&long long v72 = 136315138;
  long long v267 = v72;
  uint64_t v266 = (char *)&type metadata for Any + 8;
  *(void *)&long long v72 = 134218240;
  long long v251 = v72;
  *(void *)&long long v72 = 136315394;
  long long v265 = v72;
  *(void *)&long long v72 = 136446210;
  long long v264 = v72;
  long long v261 = xmmword_10077A530;
  uint64_t v260 = _swiftEmptyArrayStorage;
  unint64_t v73 = v271;
  unint64_t v20 = v290;
  while (1)
  {
    if (v280)
    {
      unint64_t v74 = __clz(__rbit64(v280));
      v280 &= v280 - 1;
      int64_t v279 = v71;
      unint64_t v75 = v74 | (v71 << 6);
      os_log_t v76 = v281;
      goto LABEL_55;
    }
    BOOL v66 = __OFADD__(v71, 1);
    int64_t v77 = v71 + 1;
    os_log_t v76 = v281;
    if (v66) {
      goto LABEL_229;
    }
    if (v77 >= v269) {
      goto LABEL_222;
    }
    unint64_t v78 = *(void *)&v268[8 * v77];
    if (!v78) {
      break;
    }
LABEL_54:
    unint64_t v280 = (v78 - 1) & v78;
    int64_t v279 = v77;
    unint64_t v75 = __clz(__rbit64(v78)) + (v77 << 6);
LABEL_55:
    uint64_t v80 = v76[7];
    int v81 = (uint64_t *)(v76[6] + 16 * v75);
    uint64_t v30 = v81[1];
    uint64_t v282 = *v81;
    unint64_t v82 = *(void *)(v80 + 8 * v75);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v83 = Logger.logObject.getter();
    int v84 = static os_log_type_t.info.getter();
    BOOL v85 = os_log_type_enabled(v83, (os_log_type_t)v84);
    uint64_t v284 = v30;
    unint64_t v294 = v82;
    if (v85)
    {
      LODWORD(v277) = v84;
      uint64_t v86 = (char *)swift_slowAlloc();
      uint64_t v276 = swift_slowAlloc();
      unint64_t v295 = (unint64_t)v276;
      *(_DWORD *)uint64_t v86 = v267;
      if (v82 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v30 = *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      os_log_t v283 = v83;
      uint64_t v278 = v86;
      if (v30)
      {
        if (v30 < 1) {
          goto LABEL_230;
        }
        uint64_t v87 = 0;
        unint64_t v88 = v82 & 0xC000000000000001;
        unint64_t v89 = _swiftEmptyArrayStorage;
        do
        {
          if (v88) {
            id v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v90 = *(id *)(v82 + 8 * v87 + 32);
          }
          uint64_t v91 = v90;
          id v92 = [v90 identifier:v251];
          if (v92)
          {
            id v93 = v92;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v94 = 0;
          }
          else
          {
            uint64_t v94 = 1;
          }
          (*v292)(isUniquelyReferenced_nonNull_native, v94, 1, v20);
          sub_100096408(isUniquelyReferenced_nonNull_native, v38, (uint64_t *)&unk_100909E50);
          if ((*v293)(v38, 1, v20))
          {
            sub_1000966BC(v38, (uint64_t *)&unk_100909E50);
          }
          else
          {
            id v95 = v286;
            (*v288)(v286, v38, v20);
            sub_1000966BC(v38, (uint64_t *)&unk_100909E50);
            uint64_t v96 = UUID.uuidString.getter();
            uint64_t v98 = v97;
            (*(void (**)(char *, unint64_t))v287)(v95, v20);

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v89 = sub_100308F88(0, v89[2] + 1, 1, v89);
            }
            unint64_t v100 = v89[2];
            unint64_t v99 = v89[3];
            if (v100 >= v99 >> 1) {
              unint64_t v89 = sub_100308F88((void *)(v99 > 1), v100 + 1, 1, v89);
            }
            v89[2] = v100 + 1;
            id v101 = &v89[2 * v100];
            v101[4] = v96;
            v101[5] = v98;
            uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v289;
            unint64_t v20 = v290;
            uint64_t v38 = (uint64_t)v291;
          }
          ++v87;
          unint64_t v82 = v294;
        }
        while (v30 != v87);
      }
      swift_bridgeObjectRelease();
      uint64_t v102 = Array.description.getter();
      unint64_t v104 = v103;
      swift_bridgeObjectRelease();
      uint64_t v105 = sub_1000C51B8(v102, v104, (uint64_t *)&v295);
      uint64_t v106 = (uint8_t *)v278;
      *(void *)(v278 + 4) = v105;
      swift_bridgeObjectRelease_n();
      uint64_t v38 = (uint64_t)v291;
      swift_bridgeObjectRelease();
      os_log_t v107 = v283;
      _os_log_impl((void *)&_mh_execute_header, v283, (os_log_type_t)v277, "RDHashtagLabelUpdater processing inserted hashtags: %s", v106, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v73 = v271;
      uint64_t v30 = v284;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v108 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000) == 0) {
      uint64_t v108 = v282 & 0xFFFFFFFFFFFFLL;
    }
    if (v108)
    {
      unint64_t v112 = sub_10019A244((uint64_t)v73, v282, v30);
      uint64_t v273 = sub_10018A784(v112);
      swift_bridgeObjectRelease();
      unint64_t v295 = (unint64_t)&_swiftEmptyDictionarySingleton;
      if (v82 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v113 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        unint64_t v20 = v290;
        if (!v113) {
          goto LABEL_116;
        }
LABEL_88:
        uint64_t v278 = (char *)(v82 & 0xC000000000000001);
        os_log_type_t v114 = &_swiftEmptyDictionarySingleton;
        uint64_t v115 = 4;
        unint64_t v277 = v113;
        while (1)
        {
          uint64_t v119 = v115 - 4;
          if (v278)
          {
            id v120 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            unint64_t v20 = v115 - 3;
            if (__OFADD__(v119, 1)) {
              goto LABEL_224;
            }
          }
          else
          {
            id v120 = *(id *)(v82 + 8 * v115);
            unint64_t v20 = v115 - 3;
            if (__OFADD__(v119, 1))
            {
LABEL_224:
              __break(1u);
LABEL_225:
              __break(1u);
LABEL_226:
              __break(1u);
LABEL_227:
              __break(1u);
              goto LABEL_228;
            }
          }
          os_log_t v283 = v120;
          id v121 = [v120 account];
          if (!v121) {
            break;
          }
          id v122 = v121;
          id v123 = [v121 identifier];

          uint64_t v124 = v114;
          if (v123)
          {
            uint64_t v125 = (uint64_t)v263;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v126 = 0;
          }
          else
          {
            uint64_t v126 = 1;
            uint64_t v125 = (uint64_t)v263;
          }
          uint64_t v127 = v290;
          (*v292)(v125, v126, 1, v290);
          uint64_t v128 = v262;
          sub_100096408(v125, v262, (uint64_t *)&unk_100909E50);
          if ((*v293)(v128, 1, v127))
          {
            sub_1000966BC(v128, (uint64_t *)&unk_100909E50);
            goto LABEL_105;
          }
          id v131 = v286;
          (*v288)(v286, v128, v127);
          sub_1000966BC(v128, (uint64_t *)&unk_100909E50);
          uint64_t v129 = UUID.uuidString.getter();
          uint64_t v130 = v132;
          (*(void (**)(char *, uint64_t))v287)(v131, v127);
LABEL_107:
          uint64_t v133 = v124;
          uint64_t v30 = sub_1001806F8(v129, v130);
          uint64_t v135 = v133[2];
          BOOL v136 = (v134 & 1) == 0;
          uint64_t v137 = v135 + v136;
          if (__OFADD__(v135, v136)) {
            goto LABEL_225;
          }
          char v138 = v134;
          os_log_type_t v114 = v133;
          if (v133[3] < v137)
          {
            sub_100310F38(v137, 1);
            os_log_type_t v114 = (void *)v295;
            unint64_t v139 = sub_1001806F8(v129, v130);
            if ((v138 & 1) != (v140 & 1)) {
              goto LABEL_241;
            }
            uint64_t v30 = v139;
          }
          if (v138)
          {
            swift_bridgeObjectRelease();
            uint64_t v116 = (void *)(v114[7] + 8 * v30);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            unint64_t v117 = v277;
            if (*(void *)((*v116 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v116 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            uint64_t v30 = v284;
            unint64_t v82 = v294;
          }
          else
          {
            sub_100094134((uint64_t *)&unk_10090AF20);
            uint64_t v141 = swift_allocObject();
            *(_OWORD *)(v141 + 16) = v261;
            *(void *)(v141 + 32) = v283;
            uint64_t v297 = v141;
            specialized Array._endMutation()();
            uint64_t v142 = v297;
            v114[((unint64_t)v30 >> 6) + 8] |= 1 << v30;
            id v143 = (uint64_t *)(v114[6] + 16 * v30);
            uint64_t *v143 = v129;
            v143[1] = v130;
            *(void *)(v114[7] + 8 * v30) = v142;
            uint64_t v144 = v114[2];
            BOOL v66 = __OFADD__(v144, 1);
            uint64_t v145 = v144 + 1;
            if (v66) {
              goto LABEL_231;
            }
            v114[2] = v145;
            uint64_t v30 = v284;
            unint64_t v82 = v294;
            unint64_t v117 = v277;
          }
          ++v115;
          BOOL v118 = v20 == v117;
          unint64_t v20 = v290;
          uint64_t v38 = (uint64_t)v291;
          if (v118) {
            goto LABEL_117;
          }
        }
        uint64_t v124 = v114;
LABEL_105:
        uint64_t v129 = 0;
        uint64_t v130 = 0xE000000000000000;
        goto LABEL_107;
      }
      uint64_t v113 = *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t v20 = v290;
      if (v113) {
        goto LABEL_88;
      }
LABEL_116:
      os_log_type_t v114 = &_swiftEmptyDictionarySingleton;
LABEL_117:
      swift_bridgeObjectRelease();
      unint64_t v146 = 0;
      uint64_t v147 = v114[8];
      uint64_t v272 = (char *)(v114 + 8);
      uint64_t v148 = 1 << *((unsigned char *)v114 + 32);
      if (v148 < 64) {
        uint64_t v149 = ~(-1 << v148);
      }
      else {
        uint64_t v149 = -1;
      }
      unint64_t v150 = v149 & v147;
      int64_t v274 = (unint64_t)(v148 + 63) >> 6;
      unint64_t v73 = v271;
      uint64_t v270 = v114;
      while (2)
      {
        if (v150)
        {
          os_log_t v283 = (os_log_t)((v150 - 1) & v150);
          unint64_t v294 = v146;
          unint64_t v151 = __clz(__rbit64(v150)) | (v146 << 6);
          goto LABEL_136;
        }
        BOOL v66 = __OFADD__(v146, 1);
        int64_t v152 = v146 + 1;
        if (v66) {
          goto LABEL_226;
        }
        if (v152 >= v274)
        {
LABEL_198:
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v230 = (uint64_t)v260;
          if (!v260[2]) {
            goto LABEL_220;
          }
          swift_bridgeObjectRetain();
          Swift::String v231 = sub_10019A93C((uint64_t)v73, v230);
          swift_bridgeObjectRelease();
          Swift::String v232 = sub_10018B50C((unint64_t)v231);
          swift_bridgeObjectRelease();
          unint64_t v233 = v299;
          if (!(v299 >> 62))
          {
            uint64_t v234 = *(void *)((v299 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain_n();
            if (v234) {
              goto LABEL_201;
            }
LABEL_215:
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRetain();
            unint64_t v245 = Logger.logObject.getter();
            os_log_type_t v246 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v245, v246))
            {
              uint64_t v247 = swift_slowAlloc();
              *(_DWORD *)uint64_t v247 = v251;
              unint64_t v73 = v271;
              uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v289;
              if (v299 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v248 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v248 = *(void *)((v299 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              unint64_t v295 = v248;
              uint64_t v30 = (uint64_t)v252;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v247 + 12) = 2048;
              unint64_t v249 = v232[2];
              swift_bridgeObjectRelease();
              unint64_t v295 = v249;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v245, v246, "RDHashtagLabelUpdater updated hashtags that need to be associated to shared-to-me-reminders {hashtagsNeedAssociatingToReminder.count: %ld, shared-to-me-reminders.count: %ld}", (uint8_t *)v247, 0x16u);
              swift_slowDealloc();

              unint64_t v20 = v290;
              uint64_t v38 = (uint64_t)v291;
            }
            else
            {

              swift_bridgeObjectRelease_n();
              unint64_t v73 = v271;
              uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v289;
              unint64_t v20 = v290;
            }
LABEL_220:
            swift_bridgeObjectRelease();
            goto LABEL_41;
          }
          swift_bridgeObjectRetain_n();
          uint64_t v234 = _CocoaArrayWrapper.endIndex.getter();
          if (!v234) {
            goto LABEL_215;
          }
LABEL_201:
          if (v234 < 1) {
            goto LABEL_240;
          }
          uint64_t v235 = 0;
          while (2)
          {
            if ((v233 & 0xC000000000000001) != 0) {
              id v237 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v237 = *(id *)(v233 + 8 * v235 + 32);
            }
            unint64_t v238 = v237;
            id v239 = [v237 sharedToMeReminderCKIdentifier:v251];
            if (v239)
            {
              uint64_t v30 = (uint64_t)v239;
              uint64_t v240 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v242 = v241;

              if (!v232[2])
              {
LABEL_203:
                id v236 = 0;
                goto LABEL_204;
              }
            }
            else
            {
              uint64_t v242 = 0xE300000000000000;
              uint64_t v240 = 7104878;
              if (!v232[2]) {
                goto LABEL_203;
              }
            }
            unint64_t v243 = sub_1001806F8(v240, v242);
            if ((v244 & 1) == 0) {
              goto LABEL_203;
            }
            id v236 = *(id *)(v232[7] + 8 * v243);
LABEL_204:
            swift_bridgeObjectRelease();
            ++v235;
            [v238 setReminder:v236];

            uint64_t v38 = (uint64_t)v291;
            if (v234 == v235) {
              goto LABEL_215;
            }
            continue;
          }
        }
        unint64_t v153 = *(void *)&v272[8 * v152];
        if (v153)
        {
LABEL_135:
          os_log_t v283 = (os_log_t)((v153 - 1) & v153);
          unint64_t v294 = v152;
          unint64_t v151 = __clz(__rbit64(v153)) + (v152 << 6);
LABEL_136:
          uint64_t v155 = v114[7];
          uint64_t v156 = v114[6] + 16 * v151;
          unint64_t v20 = *(void *)(v156 + 8);
          uint64_t v278 = *(char **)v156;
          unint64_t v157 = *(void *)(v155 + 8 * v151);
          swift_bridgeObjectRetain();
          uint64_t v158 = swift_bridgeObjectRetain();
          id v159 = sub_10018AB70(v158);
          if (!v159)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v20 = v290;
LABEL_122:
            unint64_t v146 = v294;
            unint64_t v150 = (unint64_t)v283;
            continue;
          }
          id v160 = v159;
          uint64_t v161 = v273;
          uint64_t v162 = *(void *)(v273 + 16);
          unint64_t v277 = v157;
          if (v162)
          {
            swift_bridgeObjectRetain();
            unint64_t v163 = sub_1001806F8((uint64_t)v278, v20);
            if (v164)
            {
              uint64_t v275 = *(NSObject **)(*(void *)(v161 + 56) + 8 * v163);
              uint64_t v165 = v275;
            }
            else
            {
              uint64_t v275 = 0;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v275 = 0;
          }
          swift_bridgeObjectRetain_n();
          uint64_t v276 = v160;
          uint64_t v166 = v160;
          id v167 = Logger.logObject.getter();
          os_log_type_t v168 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v167, v168))
          {
            uint64_t v169 = swift_slowAlloc();
            unint64_t v295 = swift_slowAlloc();
            *(_DWORD *)uint64_t v169 = v265;
            swift_bridgeObjectRetain();
            *(void *)(v169 + 4) = sub_1000C51B8(v282, v30, (uint64_t *)&v295);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v169 + 12) = 2082;
            id v170 = [v166 remObjectID];
            if (v170)
            {
              uint64_t v171 = v170;
              id v172 = [v170 description];

              uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v175 = v174;

              unint64_t v73 = v271;
            }
            else
            {
              unint64_t v175 = 0xE300000000000000;
              uint64_t v173 = 7104878;
            }
            *(void *)(v169 + 14) = sub_1000C51B8(v173, v175, (uint64_t *)&v295);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v167, v168, "RDHashtagLabelUpdater created new hashtag label {canonicalName: %s, firstHashtag.objectID: %{public}s}", (uint8_t *)v169, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v289;
            uint64_t v38 = (uint64_t)v291;
            uint64_t v30 = v284;
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          unint64_t v176 = v277;
          uint64_t v177 = v276;
          uint64_t v178 = v275;
          if (v275)
          {
            swift_bridgeObjectRelease();
            Class v190 = v178;
            unint64_t v253 = v178;
            goto LABEL_174;
          }
          uint64_t v179 = sub_10019A68C(v73, v166);
          if (!v179)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v180 = v166;
            id v181 = Logger.logObject.getter();
            os_log_type_t v182 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v181, v182))
            {
              uint64_t v183 = swift_slowAlloc();
              unint64_t v295 = swift_slowAlloc();
              *(_DWORD *)uint64_t v183 = v264;
              id v184 = [v180 remObjectID];
              if (v184)
              {
                uint64_t v185 = v184;
                id v186 = [v184 description];

                uint64_t v187 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v189 = v188;

                uint64_t v30 = v284;
              }
              else
              {
                unint64_t v189 = 0xE300000000000000;
                uint64_t v187 = 7104878;
              }
              *(void *)(v183 + 4) = sub_1000C51B8(v187, v189, (uint64_t *)&v295);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v181, v182, "RDHashtagLabelUpdater: Cannot create hashtag label for hashtag: %{public}s", (uint8_t *)v183, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v289;
              unint64_t v20 = v290;
              uint64_t v38 = (uint64_t)v291;
            }
            else
            {

              unint64_t v20 = v290;
            }
            goto LABEL_157;
          }
          unint64_t v253 = v179;
          id v191 = v179;
          uint64_t v192 = v273;
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v295 = v192;
          unint64_t v194 = sub_1001806F8((uint64_t)v278, v20);
          uint64_t v195 = *(void *)(v192 + 16);
          BOOL v196 = (v193 & 1) == 0;
          uint64_t v197 = v195 + v196;
          if (__OFADD__(v195, v196)) {
            goto LABEL_236;
          }
          char v198 = v193;
          if (*(void *)(v192 + 24) >= v197)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_100318A08();
            }
          }
          else
          {
            sub_10030E648(v197, isUniquelyReferenced_nonNull_native);
            unint64_t v199 = sub_1001806F8((uint64_t)v278, v20);
            if ((v198 & 1) != (v200 & 1)) {
              goto LABEL_241;
            }
            unint64_t v194 = v199;
          }
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v289;
          int v201 = (void *)v295;
          uint64_t v273 = v295;
          if (v198)
          {
            uint64_t v202 = *(void *)(v295 + 56);
            uint64_t v203 = 8 * v194;

            *(void *)(v202 + v203) = v191;
LABEL_173:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            Class v190 = v191;
            uint64_t v38 = (uint64_t)v291;
            unint64_t v176 = v277;
            uint64_t v177 = v276;
            uint64_t v178 = v275;
LABEL_174:
            char v207 = v178;
            os_log_type_t v208 = v166;
            uint64_t v278 = (char *)v190;
            sub_100199340(v190, v176, v177);
            uint64_t v276 = v208;

            unint64_t v20 = (unint64_t)v256;
            if (v176 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v209 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v209) {
                goto LABEL_176;
              }
            }
            else
            {
              uint64_t v209 = *(void *)((v176 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v209)
              {
LABEL_176:
                if (v209 < 1) {
                  goto LABEL_235;
                }
                uint64_t v210 = 0;
                unint64_t v211 = v176 & 0xC000000000000001;
                do
                {
                  if (v211) {
                    id v212 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    id v212 = *(id *)(v176 + 8 * v210 + 32);
                  }
                  uint64_t v213 = v212;
                  id v214 = [v212 reminder:v251];

                  if (v214
                    || ([v213 isConcealed] & 1) != 0
                    || (id v215 = [v213 sharedToMeReminderCKIdentifier]) == 0)
                  {
                  }
                  else
                  {
                    unint64_t v216 = v215;
                    static String._unconditionallyBridgeFromObjectiveC(_:)();

                    UUID.init(uuidString:)();
                    swift_bridgeObjectRelease();
                    unint64_t v217 = v20;
                    uint64_t v218 = v20;
                    uint64_t v219 = v290;
                    if ((*v293)(v217, 1, v290) == 1)
                    {

                      sub_1000966BC(v218, (uint64_t *)&unk_100909E50);
                      unint64_t v20 = v218;
                    }
                    else
                    {
                      uint64_t v220 = *v255;
                      uint64_t v221 = v257;
                      (*v255)(v257, v218, v219);
                      swift_beginAccess();
                      id v222 = v213;
                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      if (*(void *)((v299 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v299 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                      swift_endAccess();
                      (*v288)(v258, (uint64_t)v221, v219);
                      unint64_t v223 = (unint64_t)v260;
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        unint64_t v223 = sub_100309EC8(0, *(void *)(v223 + 16) + 1, 1, v223);
                      }
                      unint64_t v225 = *(void *)(v223 + 16);
                      unint64_t v224 = *(void *)(v223 + 24);
                      if (v225 >= v224 >> 1) {
                        unint64_t v223 = sub_100309EC8(v224 > 1, v225 + 1, 1, v223);
                      }
                      *(void *)(v223 + 16) = v225 + 1;
                      uint64_t v226 = v254;
                      unint64_t v227 = (*(unsigned __int8 *)(v226 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80);
                      uint64_t v260 = (void *)v223;
                      unint64_t v228 = v223 + v227 + *(void *)(v254 + 72) * v225;
                      uint64_t v229 = v290;
                      v220((char *)v228, (uint64_t)v258, v290);

                      (*(void (**)(char *, uint64_t))(v226 + 8))(v257, v229);
                      unint64_t v20 = (unint64_t)v256;
                    }
                    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v289;
                    unint64_t v176 = v277;
                  }
                  ++v210;
                  uint64_t v38 = (uint64_t)v291;
                }
                while (v209 != v210);
              }
            }

            swift_bridgeObjectRelease();
            unint64_t v73 = v271;
            unint64_t v20 = v290;
            uint64_t v30 = v284;
LABEL_157:
            os_log_type_t v114 = v270;
            goto LABEL_122;
          }
          *(void *)(v295 + 8 * (v194 >> 6) + 64) |= 1 << v194;
          id v204 = (void *)(v201[6] + 16 * v194);
          *id v204 = v278;
          v204[1] = v20;
          *(void *)(v201[7] + 8 * v194) = v191;
          uint64_t v205 = v201[2];
          BOOL v66 = __OFADD__(v205, 1);
          uint64_t v206 = v205 + 1;
          if (!v66)
          {
            v201[2] = v206;
            swift_bridgeObjectRetain();
            goto LABEL_173;
          }
          __break(1u);
LABEL_240:
          __break(1u);
LABEL_241:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        break;
      }
      int64_t v154 = v152 + 1;
      if (v152 + 1 >= v274) {
        goto LABEL_198;
      }
      unint64_t v153 = *(void *)&v272[8 * v154];
      if (v153) {
        goto LABEL_134;
      }
      int64_t v154 = v152 + 2;
      if (v152 + 2 >= v274) {
        goto LABEL_198;
      }
      unint64_t v153 = *(void *)&v272[8 * v154];
      if (v153) {
        goto LABEL_134;
      }
      int64_t v154 = v152 + 3;
      if (v152 + 3 >= v274) {
        goto LABEL_198;
      }
      unint64_t v153 = *(void *)&v272[8 * v154];
      if (v153)
      {
LABEL_134:
        int64_t v152 = v154;
        goto LABEL_135;
      }
      while (1)
      {
        int64_t v152 = v154 + 1;
        if (__OFADD__(v154, 1)) {
          break;
        }
        if (v152 >= v274) {
          goto LABEL_198;
        }
        unint64_t v153 = *(void *)&v272[8 * v152];
        ++v154;
        if (v153) {
          goto LABEL_135;
        }
      }
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      swift_once();
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v111 = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "RDHashtagLabelUpdater: Impossible to get here, nil canonical name should have been filtered", v111, 2u);
      swift_slowDealloc();
    }

    unint64_t v20 = v290;
LABEL_41:
    int64_t v71 = v279;
  }
  int64_t v79 = v77 + 1;
  if (v77 + 1 >= v269) {
    goto LABEL_222;
  }
  unint64_t v78 = *(void *)&v268[8 * v79];
  if (v78) {
    goto LABEL_53;
  }
  int64_t v79 = v77 + 2;
  if (v77 + 2 >= v269) {
    goto LABEL_222;
  }
  unint64_t v78 = *(void *)&v268[8 * v79];
  if (v78) {
    goto LABEL_53;
  }
  int64_t v79 = v77 + 3;
  if (v77 + 3 >= v269) {
    goto LABEL_222;
  }
  unint64_t v78 = *(void *)&v268[8 * v79];
  if (v78)
  {
LABEL_53:
    int64_t v77 = v79;
    goto LABEL_54;
  }
  while (1)
  {
    int64_t v77 = v79 + 1;
    if (__OFADD__(v79, 1)) {
      goto LABEL_234;
    }
    if (v77 >= v269) {
      break;
    }
    unint64_t v78 = *(void *)&v268[8 * v77];
    ++v79;
    if (v78) {
      goto LABEL_54;
    }
  }
LABEL_222:
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_10018A3B8(id *a1@<X0>, void *a2@<X8>)
{
  long long v29 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = *a1;
  id v11 = [*a1 name];
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  swift_bridgeObjectRelease();
  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (v16 && (id v17 = [v10 account]) != 0)
  {
    uint64_t v18 = v17;
    id v19 = [v17 identifier];
    if (v19)
    {
      unint64_t v20 = v19;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) != 1)
      {

        sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
        *long long v29 = v10;
        id v21 = v10;
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
    }
    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
    uint64_t v25 = self;
    sub_1000963CC(0, &qword_10090ABC0);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v27 = String._bridgeToObjectiveC()();
    [v25 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v27];

    swift_willThrow();
  }
  else
  {
LABEL_9:
    id v22 = self;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    uint64_t v23 = swift_getObjCClassFromMetadata();
    NSString v24 = String._bridgeToObjectiveC()();
    [v22 unexpectedNilPropertyWithClass:v23 property:v24];

    swift_willThrow();
  }
}

uint64_t sub_10018A784(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      unint64_t v40 = v1 & 0xC000000000000001;
      id v41 = &_swiftEmptyDictionarySingleton;
      uint64_t v3 = 4;
      uint64_t v38 = v2;
      unint64_t v39 = v1;
      while (1)
      {
        if (v40) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v5 = *(id *)(v1 + 8 * v3);
        }
        uint64_t v6 = v5;
        uint64_t v7 = v3 - 3;
        if (__OFADD__(v3 - 4, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        id v8 = [v5 accountIdentifier];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v12 = v11;

          id v13 = v6;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          id v42 = v41;
          unint64_t v16 = sub_1001806F8(v10, v12);
          uint64_t v17 = v41[2];
          BOOL v18 = (v15 & 1) == 0;
          uint64_t v19 = v17 + v18;
          if (__OFADD__(v17, v18)) {
            goto LABEL_27;
          }
          char v20 = v15;
          if (v41[3] >= v19)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_100318A08();
            }
          }
          else
          {
            sub_10030E648(v19, isUniquelyReferenced_nonNull_native);
            unint64_t v21 = sub_1001806F8(v10, v12);
            if ((v20 & 1) != (v22 & 1))
            {
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            unint64_t v16 = v21;
          }
          id v32 = v42;
          id v41 = v42;
          if (v20)
          {
            uint64_t v4 = v42[7];

            *(void *)(v4 + 8 * v16) = v13;
          }
          else
          {
            v42[(v16 >> 6) + 8] |= 1 << v16;
            unint64_t v33 = (uint64_t *)(v32[6] + 16 * v16);
            *unint64_t v33 = v10;
            v33[1] = v12;
            *(void *)(v32[7] + 8 * v16) = v13;
            uint64_t v34 = v32[2];
            BOOL v35 = __OFADD__(v34, 1);
            uint64_t v36 = v34 + 1;
            if (v35) {
              goto LABEL_28;
            }
            v32[2] = v36;
            swift_bridgeObjectRetain();
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v2 = v38;
          unint64_t v1 = v39;
        }
        else
        {
          if (qword_100906FB0 != -1) {
            swift_once();
          }
          uint64_t v23 = type metadata accessor for Logger();
          sub_10008E2DC(v23, (uint64_t)qword_10090D8C0);
          id v24 = v6;
          uint64_t v25 = Logger.logObject.getter();
          os_log_type_t v26 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v25, v26))
          {
            uint64_t v27 = swift_slowAlloc();
            id v42 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v27 = 136446210;
            id v28 = [v24 ic_loggingDescription];
            uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v31 = v30;

            *(void *)(v27 + 4) = sub_1000C51B8(v29, v31, (uint64_t *)&v42);
            unint64_t v1 = v39;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v25, v26, "RDHashtagLabelUpdater: REMCDHashtagLabel with nil accountIdentifier: %{public}s", (uint8_t *)v27, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v2 = v38;
            swift_slowDealloc();
          }
          else
          {
          }
        }
        ++v3;
        if (v7 == v2) {
          goto LABEL_31;
        }
      }
    }
  }
  id v41 = &_swiftEmptyDictionarySingleton;
LABEL_31:
  swift_bridgeObjectRelease();
  return (uint64_t)v41;
}

id sub_10018AB70(uint64_t a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  unint64_t v6 = (unint64_t)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v79 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v91 = (char *)&v79 - v11;
  __chkstk_darwin(v10);
  id v13 = (char *)&v79 - v12;
  uint64_t v14 = type metadata accessor for Date();
  id v92 = *(void (***)(char *, uint64_t))(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v88 = (char *)&v79 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  char v22 = (char *)&v79 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v94 = (char *)&v79 - v24;
  __chkstk_darwin(v23);
  os_log_type_t v26 = (char *)&v79 - v25;
  uint64_t v98 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v1 = a1;
    }
    else {
      uint64_t v1 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v27 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  int v81 = v9;
  unint64_t v82 = (char *)v6;
  unint64_t v89 = v22;
  id v90 = v13;
  uint64_t v83 = v26;
  if (v27)
  {
    if (v27 < 1)
    {
      __break(1u);
      goto LABEL_77;
    }
    for (uint64_t i = 0; i != v27; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v29 = *(id *)(a1 + 8 * i + 32);
      }
      unint64_t v30 = v29;
      id v31 = [v29 name];
      if (v31)
      {

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v6 = v98;
    os_log_type_t v26 = v83;
    uint64_t v27 = (uint64_t)v91;
    if (v98 < 0) {
      goto LABEL_73;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v6 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v27 = (uint64_t)v91;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_73;
    }
  }
  if ((v6 & 0x4000000000000000) != 0)
  {
LABEL_73:
    swift_retain();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v1 = (uint64_t)result;
    if (!result) {
      goto LABEL_74;
    }
    goto LABEL_18;
  }
  uint64_t v1 = *(void *)(v6 + 16);
  id result = (id)swift_retain();
  if (!v1)
  {
LABEL_74:
    swift_release_n();
    return 0;
  }
LABEL_18:
  unint64_t v87 = v6 & 0xC000000000000001;
  if ((v6 & 0xC000000000000001) != 0)
  {
LABEL_77:
    id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_21;
  }
  if (!*(void *)(v6 + 16))
  {
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  id result = *(id *)(v6 + 32);
LABEL_21:
  unint64_t v33 = result;
  unint64_t v86 = v1 - 1;
  if (v1 == 1)
  {
    uint64_t v34 = result;
LABEL_23:
    swift_release_n();
    return v34;
  }
  if (v1 < 2) {
    goto LABEL_79;
  }
  uint64_t v80 = v17;
  if (v87 || (unint64_t v35 = *(void *)(v6 + 16), v35 >= 2) && v86 < v35)
  {
    uint64_t v36 = 0;
    uint64_t v37 = v92;
    uint64_t v38 = (void (**)(char *, char *, uint64_t))(v92 + 4);
    id v95 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 7);
    ++v92;
    id v93 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 6);
    int v84 = (void (**)(char *, char *, uint64_t))(v37 + 4);
    BOOL v85 = (char *)v6;
    while (1)
    {
      if (v87) {
        id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v40 = *(id *)(v6 + 8 * v36 + 40);
      }
      uint64_t v34 = v40;
      id v41 = [v40 creationDate];
      if (v41)
      {
        id v42 = v41;
        int64_t v43 = v94;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v44 = *v38;
        uint64_t v45 = (uint64_t)v90;
        (*v38)(v90, v43, v14);
        uint64_t v46 = *v95;
        (*v95)(v45, 0, 1, v14);
        if ((*v93)(v45, 1, v14) != 1)
        {
          v44(v26, (char *)v45, v14);
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v46 = *v95;
        uint64_t v45 = (uint64_t)v90;
        (*v95)((uint64_t)v90, 1, 1, v14);
      }
      static Date.distantFuture.getter();
      sub_1000966BC(v45, (uint64_t *)&unk_100909A40);
LABEL_39:
      id v47 = [v33 creationDate];
      if (v47)
      {
        uint64_t v48 = v47;
        uint64_t v49 = v94;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v50 = *v38;
        (*v38)((char *)v27, v49, v14);
        v46(v27, 0, 1, v14);
        if ((*v93)(v27, 1, v14) != 1)
        {
          uint64_t v51 = v89;
          v50(v89, (char *)v27, v14);
          goto LABEL_44;
        }
      }
      else
      {
        v46(v27, 1, 1, v14);
      }
      uint64_t v51 = v89;
      static Date.distantFuture.getter();
      sub_1000966BC(v27, (uint64_t *)&unk_100909A40);
LABEL_44:
      char v52 = static Date.< infix(_:_:)();
      char v53 = *v92;
      (*v92)(v51, v14);
      v53(v26, v14);
      if ((v52 & 1) == 0)
      {
        id v54 = [v34 creationDate];
        if (v54)
        {
          uint64_t v55 = v54;
          BOOL v56 = v94;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v38 = v84;
          uint64_t v57 = *v84;
          uint64_t v58 = (uint64_t)v81;
          (*v84)(v81, v56, v14);
          v46(v58, 0, 1, v14);
          if ((*v93)(v58, 1, v14) != 1)
          {
            v57(v88, (char *)v58, v14);
            goto LABEL_50;
          }
        }
        else
        {
          uint64_t v58 = (uint64_t)v81;
          v46((uint64_t)v81, 1, 1, v14);
          uint64_t v38 = v84;
        }
        static Date.distantFuture.getter();
        sub_1000966BC(v58, (uint64_t *)&unk_100909A40);
LABEL_50:
        id v59 = [v33 creationDate];
        if (v59)
        {
          char v60 = v59;
          uint64_t v61 = v94;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          os_log_type_t v62 = *v38;
          uint64_t v63 = (uint64_t)v82;
          (*v38)(v82, v61, v14);
          v46(v63, 0, 1, v14);
          unsigned int v64 = (*v93)(v63, 1, v14);
          os_log_type_t v26 = v83;
          if (v64 != 1)
          {
            uint64_t v65 = v80;
            v62(v80, (char *)v63, v14);
LABEL_55:
            BOOL v66 = v88;
            char v67 = static Date.== infix(_:_:)();
            v53(v65, v14);
            v53(v66, v14);
            if (v67)
            {
              id v68 = [v34 name];
              if (v68)
              {
                uint64_t v69 = v68;
                uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v72 = v71;
              }
              else
              {
                uint64_t v70 = 0;
                unint64_t v72 = 0xE000000000000000;
              }
              uint64_t v98 = v70;
              unint64_t v99 = v72;
              id v73 = [v33 name];
              if (v73)
              {
                unint64_t v74 = v73;
                uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v77 = v76;
              }
              else
              {
                uint64_t v75 = 0;
                unint64_t v77 = 0xE000000000000000;
              }
              uint64_t v96 = v75;
              unint64_t v97 = v77;
              sub_1000E4FD8();
              uint64_t v78 = StringProtocol.localizedStandardCompare<A>(_:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v78 == -1) {
                unint64_t v39 = v33;
              }
              else {
                unint64_t v39 = v34;
              }
              if (v78 != -1) {
                uint64_t v34 = v33;
              }
            }
            else
            {
              unint64_t v39 = v34;
              uint64_t v34 = v33;
            }
            uint64_t v27 = (uint64_t)v91;
            unint64_t v6 = (unint64_t)v85;
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v63 = (uint64_t)v82;
          v46((uint64_t)v82, 1, 1, v14);
          os_log_type_t v26 = v83;
        }
        uint64_t v65 = v80;
        static Date.distantFuture.getter();
        sub_1000966BC(v63, (uint64_t *)&unk_100909A40);
        goto LABEL_55;
      }
      unint64_t v39 = v33;
      uint64_t v27 = (uint64_t)v91;
      uint64_t v38 = v84;
      unint64_t v6 = (unint64_t)v85;
LABEL_30:

      ++v36;
      unint64_t v33 = v34;
      if (v86 == v36) {
        goto LABEL_23;
      }
    }
  }
LABEL_80:
  __break(1u);
  return result;
}

void *sub_10018B50C(unint64_t isUniquelyReferenced_nonNull_native)
{
  unint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(char **)(v2 - 8);
  __chkstk_darwin(v2);
  id v41 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t)&v34 - v9;
  if (isUniquelyReferenced_nonNull_native >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (v11) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
    {
LABEL_3:
      int64_t v43 = (void (**)(char *, uint64_t, uint64_t, unint64_t))(v3 + 56);
      unint64_t v44 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      id v42 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))(v3 + 48);
      id v40 = (void (**)(char *, uint64_t, unint64_t))(v3 + 16);
      uint64_t v12 = &_swiftEmptyDictionarySingleton;
      unint64_t v38 = isUniquelyReferenced_nonNull_native;
      unint64_t v39 = (void (**)(char *, unint64_t))(v3 + 8);
      uint64_t v13 = 4;
      uint64_t v36 = v8;
      unint64_t v37 = v2;
      uint64_t v34 = v11;
      uint64_t v35 = v10;
      while (1)
      {
        if (v44) {
          uint64_t v14 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v14 = (char *)*(id *)(isUniquelyReferenced_nonNull_native + 8 * v13);
        }
        uint64_t v3 = v14;
        uint64_t v15 = v13 - 3;
        if (__OFADD__(v13 - 4, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        id v16 = [v14 identifier];
        if (v16)
        {
          uint64_t v17 = v16;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v18 = 0;
        }
        else
        {
          uint64_t v18 = 1;
        }
        (*v43)(v8, v18, 1, v2);
        sub_100096408((uint64_t)v8, v10, (uint64_t *)&unk_100909E50);
        if (!(*v42)(v10, 1, v2)) {
          break;
        }

        sub_1000966BC(v10, (uint64_t *)&unk_100909E50);
LABEL_5:
        ++v13;
        if (v15 == v11)
        {
          swift_bridgeObjectRelease();
          return v12;
        }
      }
      uint64_t v19 = v41;
      (*v40)(v41, v10, v2);
      sub_1000966BC(v10, (uint64_t *)&unk_100909E50);
      uint64_t v8 = (char *)UUID.uuidString.getter();
      uint64_t v21 = v20;
      (*v39)(v19, v2);
      uint64_t v3 = v3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v45 = v12;
      unint64_t v2 = sub_1001806F8((uint64_t)v8, v21);
      uint64_t v23 = v12[2];
      BOOL v24 = (v22 & 1) == 0;
      uint64_t v25 = v23 + v24;
      if (__OFADD__(v23, v24)) {
        goto LABEL_28;
      }
      uint64_t v10 = v22;
      if (v12[3] < v25)
      {
        sub_10030DC1C(v25, isUniquelyReferenced_nonNull_native);
        unint64_t v26 = sub_1001806F8((uint64_t)v8, v21);
        if ((v10 & 1) != (v27 & 1))
        {
          id result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v2 = v26;
        uint64_t v12 = v45;
        if ((v10 & 1) == 0) {
          goto LABEL_23;
        }
LABEL_21:
        uint64_t v28 = v12[7];

        *(void *)(v28 + 8 * v2) = v3;
LABEL_25:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v2 = v37;
        char isUniquelyReferenced_nonNull_native = v38;
        uint64_t v10 = v35;
        uint64_t v8 = v36;
        uint64_t v11 = v34;
        goto LABEL_5;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v12 = v45;
        if (v22) {
          goto LABEL_21;
        }
      }
      else
      {
        sub_100318560();
        uint64_t v12 = v45;
        if (v10) {
          goto LABEL_21;
        }
      }
LABEL_23:
      v12[(v2 >> 6) + 8] |= 1 << v2;
      id v29 = (char **)(v12[6] + 16 * v2);
      *id v29 = v8;
      v29[1] = (char *)v21;
      *(void *)(v12[7] + 8 * v2) = v3;
      uint64_t v30 = v12[2];
      BOOL v31 = __OFADD__(v30, 1);
      uint64_t v32 = v30 + 1;
      if (v31) {
        goto LABEL_29;
      }
      v12[2] = v32;
      swift_bridgeObjectRetain();
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptyDictionarySingleton;
}

uint64_t sub_10018B958(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int v314 = a4;
  id v317 = a3;
  uint64_t v307 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v5 = __chkstk_darwin(v307);
  uint64_t v308 = (char *)&v282 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v316 = (uint64_t)&v282 - v7;
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)&long long v310 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v313 = (char *)&v282 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v294 = (char *)&v282 - v12;
  __chkstk_darwin(v11);
  os_log_t v283 = (char *)&v282 - v13;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v300 = (char *)&v282 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v299 = (uint64_t)&v282 - v17;
  uint64_t v18 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v18 - 8);
  uint64_t v322 = (void (**)(char *, uint64_t, uint64_t))((char *)&v282 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v328 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  uint64_t v20 = *(void *)(v328 - 8);
  uint64_t v21 = __chkstk_darwin(v328);
  uint64_t v327 = (uint64_t)&v282 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v320 = (uint64_t)&v282 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v319 = (uint64_t)&v282 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v321 = (uint64_t)&v282 - v28;
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v282 - v29;
  uint64_t v304 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v304 - 8);
  uint64_t v32 = __chkstk_darwin(v304);
  uint64_t v288 = (char *)&v282 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v282 - v34;
  int64_t v36 = *(void *)(a1 + 16);
  unint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v324 = v8;
  uint64_t v309 = v20;
  uint64_t v325 = v31;
  *(void *)&long long v311 = a1;
  if (v36)
  {
    v330[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001DE148(0, v36, 0);
    uint64_t v38 = a1 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    unint64_t v326 = *(void *)(v20 + 72);
    unint64_t v39 = (void (**)(char *, char *, uint64_t))(v31 + 16);
    unint64_t v323 = (void (**)(char *, uint64_t))(v31 + 32);
    int64_t v40 = v36;
    uint64_t v41 = v304;
    do
    {
      sub_10019D61C(v38, (uint64_t)v30);
      (*v39)(v35, v30, v41);
      sub_10019D680((uint64_t)v30);
      unint64_t v37 = (void *)v330[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE148(0, v37[2] + 1, 1);
        unint64_t v37 = (void *)v330[0];
      }
      uint64_t v42 = v325;
      unint64_t v44 = v37[2];
      unint64_t v43 = v37[3];
      if (v44 >= v43 >> 1)
      {
        sub_1001DE148(v43 > 1, v44 + 1, 1);
        uint64_t v42 = v325;
        unint64_t v37 = (void *)v330[0];
      }
      v37[2] = v44 + 1;
      uint64_t v41 = v304;
      (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))((unint64_t)v37+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(void *)(v42 + 72) * v44, v35, v304);
      v330[0] = (uint64_t)v37;
      v38 += v326;
      --v40;
    }
    while (v40);
    uint64_t v8 = v324;
    a1 = v311;
  }
  uint64_t v45 = sub_100126860((uint64_t)v37);
  swift_bridgeObjectRelease();
  unint64_t v46 = (unint64_t)sub_10019AA40((uint64_t)v317, v45, 1);
  swift_bridgeObjectRelease();
  v330[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
  if (v46 >> 62) {
    goto LABEL_20;
  }
  uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v47; uint64_t v47 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v48 = 4;
    while (1)
    {
      uint64_t v49 = (v46 & 0xC000000000000001) != 0
          ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v46 + 8 * v48);
      uint64_t v45 = (uint64_t)v49;
      uint64_t v50 = v48 - 3;
      if (__OFADD__(v48 - 4, 1)) {
        break;
      }
      v331 = v49;
      uint64_t v51 = v301;
      sub_10018E294((uint64_t)v330, (id *)&v331);
      uint64_t v301 = v51;
      if (v51) {
        goto LABEL_330;
      }

      ++v48;
      if (v50 == v47)
      {
        swift_bridgeObjectRelease_n();
        char v53 = (void *)v330[0];
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease_n();
  char v53 = &_swiftEmptyDictionarySingleton;
LABEL_22:
  uint64_t v289 = v53;
  v331 = &_swiftEmptyDictionarySingleton;
  if (v36)
  {
    unint64_t v326 = v36;
    uint64_t v54 = *(unsigned __int8 *)(v309 + 80);
    uint64_t v55 = (v54 + 32) & ~v54;
    uint64_t v56 = a1 + v55;
    uint64_t v57 = *(void *)(v309 + 72);
    unint64_t v323 = (void (**)(char *, uint64_t))v55;
    unint64_t v318 = v57 + v55;
    unint64_t v315 = v54 | 7;
    swift_bridgeObjectRetain();
    uint64_t v58 = &_swiftEmptyDictionarySingleton;
    long long v312 = xmmword_100776E40;
    do
    {
      uint64_t v59 = v321;
      sub_10019D61C(v56, v321);
      char v60 = (uint64_t *)(v59 + *(int *)(v328 + 20));
      uint64_t v61 = v60[1];
      v330[0] = *v60;
      v330[1] = v61;
      swift_bridgeObjectRetain();
      uint64_t v62 = (uint64_t)v322;
      static Locale.current.getter();
      uint64_t v63 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 0, 1, v63);
      sub_1000E4FD8();
      uint64_t v64 = StringProtocol.foldedStringForWriting(locale:)();
      uint64_t v45 = v65;
      sub_1000966BC(v62, (uint64_t *)&unk_10090FDF0);
      swift_bridgeObjectRelease();
      unint64_t v67 = sub_1001806F8(v64, v45);
      uint64_t v68 = v58[2];
      BOOL v69 = (v66 & 1) == 0;
      uint64_t v70 = v68 + v69;
      if (__OFADD__(v68, v69)) {
        goto LABEL_314;
      }
      char v71 = v66;
      if (v58[3] < v70)
      {
        sub_100311C88(v70, 1);
        uint64_t v58 = v331;
        unint64_t v72 = sub_1001806F8(v64, v45);
        if ((v71 & 1) != (v73 & 1)) {
          goto LABEL_329;
        }
        unint64_t v67 = v72;
      }
      if (v71)
      {
        swift_bridgeObjectRelease();
        uint64_t v74 = v58[7];
        sub_10019D5B8(v59, v319);
        unint64_t v75 = *(void *)(v74 + 8 * v67);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v74 + 8 * v67) = v75;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v75 = sub_10030A478(0, *(void *)(v75 + 16) + 1, 1, v75);
          *(void *)(v74 + 8 * v67) = v75;
        }
        unint64_t v78 = *(void *)(v75 + 16);
        unint64_t v77 = *(void *)(v75 + 24);
        uint64_t v45 = v78 + 1;
        uint64_t v79 = v324;
        if (v78 >= v77 >> 1)
        {
          unint64_t v75 = sub_10030A478(v77 > 1, v78 + 1, 1, v75);
          *(void *)(v74 + 8 * v67) = v75;
        }
        *(void *)(v75 + 16) = v45;
        sub_10019D5B8(v319, (uint64_t)v323 + v75 + v78 * v57);
        uint64_t v8 = v79;
      }
      else
      {
        sub_100094134(&qword_10090DCB8);
        uint64_t v80 = swift_allocObject();
        *(_OWORD *)(v80 + 16) = v312;
        sub_10019D5B8(v59, (uint64_t)v323 + v80);
        v58[(v67 >> 6) + 8] |= 1 << v67;
        int v81 = (uint64_t *)(v58[6] + 16 * v67);
        uint64_t *v81 = v64;
        v81[1] = v45;
        *(void *)(v58[7] + 8 * v67) = v80;
        uint64_t v82 = v58[2];
        BOOL v83 = __OFADD__(v82, 1);
        uint64_t v84 = v82 + 1;
        if (v83) {
          goto LABEL_322;
        }
        v58[2] = v84;
        uint64_t v8 = v324;
      }
      v56 += v57;
      --v326;
    }
    while (v326);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v58 = &_swiftEmptyDictionarySingleton;
  }
  int64_t v85 = 0;
  unint64_t v295 = v58;
  uint64_t v86 = v58[8];
  uint64_t v290 = v58 + 8;
  uint64_t v87 = 1 << *((unsigned char *)v58 + 32);
  if (v87 < 64) {
    uint64_t v88 = ~(-1 << v87);
  }
  else {
    uint64_t v88 = -1;
  }
  unint64_t v89 = v88 & v86;
  int64_t v291 = (unint64_t)(v87 + 63) >> 6;
  id v298 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v325 + 56);
  uint64_t v297 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v325 + 48);
  long long v287 = (void (**)(char *, uint64_t, uint64_t))(v325 + 16);
  uint64_t v286 = (void (**)(char *, uint64_t))(v325 + 8);
  uint64_t v322 = (void (**)(char *, uint64_t, uint64_t))(v310 + 16);
  unint64_t v323 = (void (**)(char *, uint64_t))(v310 + 8);
  uint64_t v284 = v330;
  *(void *)&long long v52 = 136315394;
  long long v311 = v52;
  uint64_t v285 = (char *)&type metadata for Any + 8;
  *(void *)&long long v52 = 136315138;
  long long v310 = v52;
  long long v296 = xmmword_10077A530;
  while (1)
  {
    if (v89)
    {
      uint64_t v302 = (v89 - 1) & v89;
      int64_t v303 = v85;
      unint64_t v90 = __clz(__rbit64(v89)) | (v85 << 6);
    }
    else
    {
      BOOL v83 = __OFADD__(v85, 1);
      int64_t v91 = v85 + 1;
      if (v83) {
        goto LABEL_323;
      }
      if (v91 >= v291) {
        goto LABEL_301;
      }
      unint64_t v92 = v290[v91];
      if (!v92)
      {
        int64_t v93 = v91 + 1;
        if (v91 + 1 >= v291) {
          goto LABEL_301;
        }
        unint64_t v92 = v290[v93];
        if (!v92)
        {
          int64_t v93 = v91 + 2;
          if (v91 + 2 >= v291) {
            goto LABEL_301;
          }
          unint64_t v92 = v290[v93];
          if (!v92)
          {
            int64_t v93 = v91 + 3;
            if (v91 + 3 >= v291) {
              goto LABEL_301;
            }
            unint64_t v92 = v290[v93];
            if (!v92)
            {
              while (1)
              {
                int64_t v91 = v93 + 1;
                if (__OFADD__(v93, 1)) {
                  goto LABEL_328;
                }
                if (v91 >= v291) {
                  break;
                }
                unint64_t v92 = v290[v91];
                ++v93;
                if (v92) {
                  goto LABEL_58;
                }
              }
LABEL_301:
              swift_bridgeObjectRelease();
              return swift_release();
            }
          }
        }
        int64_t v91 = v93;
      }
LABEL_58:
      uint64_t v302 = (v92 - 1) & v92;
      int64_t v303 = v91;
      unint64_t v90 = __clz(__rbit64(v92)) + (v91 << 6);
    }
    uint64_t v94 = (uint64_t *)(v295[6] + 16 * v90);
    uint64_t v95 = *v94;
    unint64_t v96 = v94[1];
    uint64_t v45 = *(void *)(v295[7] + 8 * v90);
    uint64_t v97 = qword_100906FB0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v97 != -1) {
      swift_once();
    }
    uint64_t v98 = sub_10008E2DC(v8, (uint64_t)qword_10090D8C0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v325 = v98;
    unint64_t v99 = Logger.logObject.getter();
    int v100 = static os_log_type_t.info.getter();
    BOOL v101 = os_log_type_enabled(v99, (os_log_type_t)v100);
    unint64_t v326 = v96;
    uint64_t v319 = v95;
    uint64_t v321 = v45;
    if (v101)
    {
      uint64_t v102 = swift_slowAlloc();
      unint64_t v318 = swift_slowAlloc();
      v330[0] = v318;
      *(_DWORD *)uint64_t v102 = v311;
      swift_bridgeObjectRetain();
      *(void *)(v102 + 4) = sub_1000C51B8(v95, v96, v330);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v102 + 12) = 2082;
      uint64_t v103 = *(void *)(v45 + 16);
      if (v103)
      {
        LODWORD(v312) = v100;
        unint64_t v315 = (unint64_t)v99;
        uint64_t v104 = v309;
        uint64_t v105 = v45 + ((*(unsigned __int8 *)(v309 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v309 + 80));
        swift_bridgeObjectRetain();
        uint64_t v106 = *(void *)(v104 + 72);
        os_log_t v107 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v108 = v320;
          sub_10019D61C(v105, v320);
          uint64_t v109 = UUID.uuidString.getter();
          uint64_t v111 = v110;
          sub_10019D680(v108);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            os_log_t v107 = sub_100308F88(0, v107[2] + 1, 1, v107);
          }
          unint64_t v113 = v107[2];
          unint64_t v112 = v107[3];
          if (v113 >= v112 >> 1) {
            os_log_t v107 = sub_100308F88((void *)(v112 > 1), v113 + 1, 1, v107);
          }
          v107[2] = v113 + 1;
          os_log_type_t v114 = &v107[2 * v113];
          v114[4] = v109;
          v114[5] = v111;
          v105 += v106;
          --v103;
        }
        while (v103);
        swift_bridgeObjectRelease();
        uint64_t v8 = v324;
        unint64_t v96 = v326;
        unint64_t v99 = v315;
        LOBYTE(v100) = v312;
      }
      uint64_t v115 = Array.description.getter();
      uint64_t v45 = v116;
      swift_bridgeObjectRelease();
      *(void *)(v102 + 14) = sub_1000C51B8(v115, v45, v330);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v100, "RDHashtagLabelUpdater processing hashtag tombstones {canonicalName: %s, deletedIDs: %{public}s}", (uint8_t *)v102, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v95 = v319;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v117 = HIBYTE(v96) & 0xF;
    if ((v96 & 0x2000000000000000) == 0) {
      uint64_t v117 = v95 & 0xFFFFFFFFFFFFLL;
    }
    if (v117) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    int64_t v154 = Logger.logObject.getter();
    os_log_type_t v155 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v154, v155))
    {
      uint64_t v45 = swift_slowAlloc();
      v330[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = v310;
      swift_bridgeObjectRetain();
      *(void *)(v45 + 4) = sub_1000C51B8(v319, v96, v330);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v154, v155, "RDHashtagLabelUpdater: Impossible to get here, concealed hashtag[%s] with nil name should have been filtered", (uint8_t *)v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
LABEL_45:
    int64_t v85 = v303;
    unint64_t v89 = v302;
  }
  unint64_t v118 = sub_10019A244((uint64_t)v317, v95, v96);
  v330[0] = v118;
  if (v118 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v119 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v119 = *(void *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v119)
  {
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  id v120 = v289;
  if (!v289[2]) {
    goto LABEL_156;
  }
  swift_bridgeObjectRetain();
  unint64_t v121 = sub_1001806F8(v319, v96);
  if ((v122 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_156;
  }
  uint64_t v45 = *(void *)(v120[7] + 8 * v121);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v123 = &_swiftEmptyDictionarySingleton;
  v331 = &_swiftEmptyDictionarySingleton;
  if (!((unint64_t)v45 >> 62))
  {
    uint64_t v124 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v124) {
      goto LABEL_82;
    }
    goto LABEL_117;
  }
  swift_bridgeObjectRetain();
  uint64_t v124 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v124)
  {
LABEL_82:
    unint64_t v318 = v45 & 0xC000000000000001;
    uint64_t v125 = 4;
    unint64_t v315 = v45;
    *(void *)&long long v312 = v124;
    do
    {
      if (v318) {
        id v127 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v127 = *(id *)(v45 + 8 * v125);
      }
      id v128 = v127;
      uint64_t v129 = v125 - 3;
      if (__OFADD__(v125 - 4, 1)) {
        goto LABEL_308;
      }
      id v130 = [v127 account];
      if (v130)
      {
        id v131 = v130;
        id v132 = [v130 identifier];

        if (v132)
        {
          uint64_t v133 = v300;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v134 = 0;
        }
        else
        {
          uint64_t v134 = 1;
          uint64_t v133 = v300;
        }
        uint64_t v135 = v304;
        (*v298)(v133, v134, 1, v304);
        uint64_t v136 = (uint64_t)v133;
        uint64_t v137 = v299;
        sub_100096408(v136, v299, (uint64_t *)&unk_100909E50);
        if (!(*v297)(v137, 1, v135))
        {
          unint64_t v139 = v288;
          (*v287)(v288, v137, v135);
          sub_1000966BC(v137, (uint64_t *)&unk_100909E50);
          uint64_t v45 = UUID.uuidString.getter();
          uint64_t v138 = v140;
          (*v286)(v139, v135);
          goto LABEL_99;
        }
        sub_1000966BC(v137, (uint64_t *)&unk_100909E50);
      }
      uint64_t v45 = 0;
      uint64_t v138 = 0xE000000000000000;
LABEL_99:
      unint64_t v142 = sub_1001806F8(v45, v138);
      uint64_t v143 = v123[2];
      BOOL v144 = (v141 & 1) == 0;
      uint64_t v145 = v143 + v144;
      if (__OFADD__(v143, v144)) {
        goto LABEL_309;
      }
      char v146 = v141;
      if (v123[3] < v145)
      {
        sub_100310F38(v145, 1);
        id v123 = v331;
        unint64_t v147 = sub_1001806F8(v45, v138);
        if ((v146 & 1) != (v148 & 1)) {
          goto LABEL_329;
        }
        unint64_t v142 = v147;
      }
      if (v146)
      {
        swift_bridgeObjectRelease();
        uint64_t v126 = (void *)(v123[7] + 8 * v142);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v45 = v315;
        if (*(void *)((*v126 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v126 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v149 = swift_allocObject();
        *(_OWORD *)(v149 + 16) = v296;
        *(void *)(v149 + 32) = v128;
        id v329 = (id)v149;
        specialized Array._endMutation()();
        id v150 = v329;
        v123[(v142 >> 6) + 8] |= 1 << v142;
        unint64_t v151 = (uint64_t *)(v123[6] + 16 * v142);
        *unint64_t v151 = v45;
        v151[1] = v138;
        *(void *)(v123[7] + 8 * v142) = v150;
        uint64_t v152 = v123[2];
        BOOL v83 = __OFADD__(v152, 1);
        uint64_t v153 = v152 + 1;
        if (v83) {
          goto LABEL_311;
        }
        v123[2] = v153;
        uint64_t v45 = v315;
      }
      ++v125;
    }
    while (v129 != (void)v312);
  }
LABEL_117:
  swift_bridgeObjectRelease();
  unint64_t v156 = swift_bridgeObjectRetain();
  uint64_t v157 = sub_10018A784(v156);
  swift_bridgeObjectRelease();
  int64_t v158 = 0;
  uint64_t v45 = (uint64_t)(v123 + 8);
  uint64_t v159 = 1 << *((unsigned char *)v123 + 32);
  if (v159 < 64) {
    uint64_t v160 = ~(-1 << v159);
  }
  else {
    uint64_t v160 = -1;
  }
  unint64_t v161 = v160 & v123[8];
  int64_t v162 = (unint64_t)(v159 + 63) >> 6;
  unint64_t v315 = v157;
  *(void *)&long long v312 = v123 + 8;
  uint64_t v306 = v162;
  while (1)
  {
    while (v161)
    {
      unint64_t v163 = __clz(__rbit64(v161));
      v161 &= v161 - 1;
      unint64_t v164 = v163 | (v158 << 6);
      if (*(void *)(v157 + 16))
      {
LABEL_136:
        id v167 = (uint64_t *)(v123[6] + 16 * v164);
        unint64_t v168 = *(void *)(v123[7] + 8 * v164);
        uint64_t v170 = *v167;
        uint64_t v169 = v167[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v171 = sub_1001806F8(v170, v169);
        if (v172)
        {
          id v173 = *(id *)(*(void *)(v157 + 56) + 8 * v171);
          swift_bridgeObjectRelease();
          unint64_t v318 = (unint64_t)v173;
          if (v168 >> 62)
          {
            swift_bridgeObjectRetain();
            _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
          uint64_t v45 = sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
          v331 = (void *)Set.init(minimumCapacity:)();
          if (v168 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v174 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v174) {
              goto LABEL_154;
            }
          }
          else
          {
            uint64_t v174 = *(void *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (!v174) {
              goto LABEL_154;
            }
          }
          if (v174 < 1) {
            goto LABEL_312;
          }
          if ((v168 & 0xC000000000000001) != 0)
          {
            for (uint64_t i = 0; i != v174; ++i)
            {
              unint64_t v176 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
              sub_10031EFE0(&v329, v176);
            }
          }
          else
          {
            for (uint64_t j = 0; j != v174; ++j)
            {
              uint64_t v178 = *(void **)(v168 + 8 * j + 32);
              sub_10031EFE0(&v329, v178);
            }
          }
LABEL_154:
          swift_bridgeObjectRelease();
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v180 = (id)v318;
          [(id)v318 removeHashtags:isa];

          uint64_t v157 = v315;
          uint64_t v45 = v312;
          int64_t v162 = v306;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
    BOOL v83 = __OFADD__(v158++, 1);
    if (v83) {
      goto LABEL_310;
    }
    if (v158 >= v162) {
      goto LABEL_155;
    }
    unint64_t v165 = *(void *)(v45 + 8 * v158);
    if (!v165) {
      break;
    }
LABEL_135:
    unint64_t v161 = (v165 - 1) & v165;
    unint64_t v164 = __clz(__rbit64(v165)) + (v158 << 6);
    if (*(void *)(v157 + 16)) {
      goto LABEL_136;
    }
  }
  int64_t v166 = v158 + 1;
  if (v158 + 1 >= v162) {
    goto LABEL_155;
  }
  unint64_t v165 = *(void *)(v45 + 8 * v166);
  if (v165) {
    goto LABEL_134;
  }
  int64_t v166 = v158 + 2;
  if (v158 + 2 >= v162) {
    goto LABEL_155;
  }
  unint64_t v165 = *(void *)(v45 + 8 * v166);
  if (v165) {
    goto LABEL_134;
  }
  int64_t v166 = v158 + 3;
  if (v158 + 3 >= v162) {
    goto LABEL_155;
  }
  unint64_t v165 = *(void *)(v45 + 8 * v166);
  if (v165)
  {
LABEL_134:
    int64_t v158 = v166;
    goto LABEL_135;
  }
  while (1)
  {
    int64_t v158 = v166 + 1;
    if (__OFADD__(v166, 1)) {
      goto LABEL_315;
    }
    if (v158 >= v162) {
      break;
    }
    unint64_t v165 = *(void *)(v45 + 8 * v158);
    ++v166;
    if (v165) {
      goto LABEL_135;
    }
  }
LABEL_155:
  swift_bridgeObjectRelease();
  swift_release();
LABEL_156:
  unint64_t v181 = v330[0];
  v331 = _swiftEmptyArrayStorage;
  if ((unint64_t)v330[0] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    if (!v45) {
      goto LABEL_173;
    }
LABEL_158:
    if (v45 < 1) {
      goto LABEL_325;
    }
    for (uint64_t k = 0; k != v45; ++k)
    {
      if ((v181 & 0xC000000000000001) != 0) {
        id v183 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v183 = *(id *)(v181 + 8 * k + 32);
      }
      id v184 = v183;
      id v185 = [v183 hashtags];
      if (v185
        && ((id v186 = v185,
             sub_1000963CC(0, (unint64_t *)&qword_10090DC20),
             sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20),
             uint64_t v187 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
             v186,
             (v187 & 0xC000000000000001) == 0)
          ? (uint64_t v188 = *(void *)(v187 + 16))
          : (uint64_t v188 = __CocoaSet.count.getter()),
            swift_bridgeObjectRelease(),
            v188))
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v189 = v331;
    unint64_t v181 = v330[0];
  }
  else
  {
    uint64_t v45 = *(void *)((v330[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v45) {
      goto LABEL_158;
    }
LABEL_173:
    swift_bridgeObjectRelease();
    unint64_t v189 = _swiftEmptyArrayStorage;
  }
  unint64_t v318 = (unint64_t)v189;
  if (v181 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v190 = _CocoaArrayWrapper.endIndex.getter();
    if (v190) {
      goto LABEL_176;
    }
LABEL_232:
    swift_bridgeObjectRelease();
LABEL_233:
    if (v181 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v191 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v181 = v330[0];
      if (!((unint64_t)v330[0] >> 62))
      {
LABEL_236:
        uint64_t v216 = *(void *)((v181 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_237:
        uint64_t v8 = v324;
        unint64_t v217 = v326;
        if (v216 < v191) {
          goto LABEL_324;
        }
        sub_1001ED5F0(v191, v216);
        unint64_t v218 = v318;
        if ((v318 & 0x8000000000000000) != 0 || (v318 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v219 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
        }
        else
        {
          uint64_t v219 = *(void *)(v318 + 16);
        }
        uint64_t v220 = v283;
        if (v219)
        {
          if (v219 < 1) {
            goto LABEL_326;
          }
          uint64_t v221 = 0;
          unint64_t v222 = v218 & 0xC000000000000001;
          do
          {
            if (v222) {
              id v223 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v223 = *(id *)(v218 + 8 * v221 + 32);
            }
            unint64_t v224 = v223;
            if (v314) {
              [v223 setWasDeletedDueToUserInitiatedChanges:1];
            }
            [v317 deleteObject:v224];
            (*v322)(v220, v325, v8);
            swift_bridgeObjectRetain_n();
            unint64_t v225 = Logger.logObject.getter();
            os_log_type_t v226 = static os_log_type_t.info.getter();
            uint64_t v45 = v226;
            if (os_log_type_enabled(v225, v226))
            {
              uint64_t v227 = swift_slowAlloc();
              v331 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v227 = v310;
              swift_bridgeObjectRetain();
              *(void *)(v227 + 4) = sub_1000C51B8(v319, v326, (uint64_t *)&v331);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v225, (os_log_type_t)v45, "RDHashtagLabelUpdater deleted hashtag label {canonicalName: %s}", (uint8_t *)v227, 0xCu);
              swift_arrayDestroy();
              unint64_t v217 = v326;
              uint64_t v45 = v324;
              swift_slowDealloc();
              uint64_t v8 = v45;
              swift_slowDealloc();

              (*v323)(v220, v45);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              (*v323)(v220, v8);
            }
            ++v221;
            unint64_t v218 = v318;
          }
          while (v219 != v221);
        }
        swift_release();
        uint64_t v228 = v330[0];
        if (!((unint64_t)v330[0] >> 62))
        {
          uint64_t v229 = *(void *)((v330[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v230 = v313;
          if (v229) {
            goto LABEL_255;
          }
          goto LABEL_297;
        }
        swift_bridgeObjectRetain();
        uint64_t v229 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v230 = v313;
        if (!v229)
        {
LABEL_297:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
LABEL_255:
        unint64_t v231 = 0;
        unint64_t v318 = v228 & 0xC000000000000001;
        uint64_t v306 = v228 & 0xFFFFFFFFFFFFFF8;
        *(void *)&long long v312 = v228;
        uint64_t v305 = v228 + 32;
        unint64_t v315 = v229;
        while (1)
        {
          if (v318)
          {
            id v232 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v231 >= *(void *)(v306 + 16)) {
              goto LABEL_303;
            }
            id v232 = *(id *)(v305 + 8 * v231);
          }
          unint64_t v233 = v232;
          BOOL v83 = __OFADD__(v231++, 1);
          if (v83)
          {
            __break(1u);
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
            goto LABEL_306;
          }
          id v234 = [v232 name];
          if (!v234) {
            goto LABEL_285;
          }
          uint64_t v235 = v234;
          uint64_t v236 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v238 = v237;

          uint64_t v239 = *(void *)(v321 + 16);
          if (!v239) {
            break;
          }
          uint64_t v45 = v321 + ((*(unsigned __int8 *)(v309 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v309 + 80));
          uint64_t v240 = *(void *)(v309 + 72);
          swift_bridgeObjectRetain();
          while (1)
          {
            uint64_t v241 = v327;
            sub_10019D61C(v45, v327);
            uint64_t v242 = (void *)(v241 + *(int *)(v328 + 20));
            if (*v242 == v236 && v242[1] == v238) {
              break;
            }
            char v244 = _stringCompareWithSmolCheck(_:_:expecting:)();
            sub_10019D680(v241);
            if (v244) {
              goto LABEL_275;
            }
            v45 += v240;
            if (!--v239)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v230 = v313;
              unint64_t v217 = v326;
              goto LABEL_285;
            }
          }
          sub_10019D680(v241);
LABEL_275:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v245 = [v233 hashtags];
          unint64_t v217 = v326;
          if (v245)
          {
            os_log_type_t v246 = v245;
            uint64_t v45 = (uint64_t)off_1008AA448;
            sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
            sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
            uint64_t v247 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

            Swift::Int v248 = sub_10018E620(v247);
            unint64_t v250 = v249;
            swift_bridgeObjectRelease();
            if (v250)
            {
              NSString v251 = String._bridgeToObjectiveC()();
              [v233 setName:v251];

              uint64_t v252 = v294;
              uint64_t v253 = v324;
              (*v322)(v294, v325, v324);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              uint64_t v254 = Logger.logObject.getter();
              os_log_type_t v255 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v254, v255))
              {
                uint64_t v256 = swift_slowAlloc();
                Swift::Int v292 = v248;
                uint64_t v257 = v256;
                unint64_t v293 = (void *)swift_slowAlloc();
                v331 = v293;
                *(_DWORD *)uint64_t v257 = v311;
                swift_bridgeObjectRetain();
                id v329 = (id)sub_1000C51B8(v319, v326, (uint64_t *)&v331);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v257 + 12) = 2080;
                swift_bridgeObjectRetain();
                id v329 = (id)sub_1000C51B8(v292, v250, (uint64_t *)&v331);
                unint64_t v217 = v326;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v254, v255, "RDHashtagLabelUpdater updated hashtag label name to next occurrence {canonicalName: %s, nextOccurrenceHashtagName: %s}", (uint8_t *)v257, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                (*v323)(v252, v324);
              }
              else
              {

                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                (*v323)(v252, v253);
              }
              uint64_t v230 = v313;
              goto LABEL_285;
            }
          }
          uint64_t v258 = Logger.logObject.getter();
          os_log_type_t v259 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v258, v259))
          {
            uint64_t v45 = swift_slowAlloc();
            *(_WORD *)uint64_t v45 = 0;
            _os_log_impl((void *)&_mh_execute_header, v258, v259, "RDHashtagLabelUpdater: Cannot find a non-nil next occurrence hashtag name. We have non empty hashtagLabel.hashtags but we can't find one with non-nil name.", (uint8_t *)v45, 2u);
            swift_slowDealloc();
          }
          else
          {
          }
          uint64_t v230 = v313;
          uint64_t v8 = v324;
LABEL_257:
          if (v231 == v315) {
            goto LABEL_297;
          }
        }
        swift_bridgeObjectRelease();
LABEL_285:
        id v260 = [v233 hashtags];
        if (v260)
        {
          long long v261 = v260;
          sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
          sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
          uint64_t v262 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v263 = v316;
          sub_10018E89C(v262, v316);
          swift_bridgeObjectRelease();
          uint64_t v264 = type metadata accessor for Date();
          uint64_t v265 = *(void *)(v264 - 8);
          Class v266 = 0;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v265 + 48))(v263, 1, v264) != 1)
          {
            uint64_t v267 = v316;
            Class v266 = Date._bridgeToObjectiveC()().super.isa;
            (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v267, v264);
          }
        }
        else
        {
          uint64_t v268 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v268 - 8) + 56))(v316, 1, 1, v268);
          Class v266 = 0;
        }
        [v233 setRecencyDate:v266];

        uint64_t v269 = v324;
        (*v322)(v230, v325, v324);
        swift_bridgeObjectRetain_n();
        id v270 = v233;
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v271 = static os_log_type_t.info.getter();
        if (os_log_type_enabled((os_log_t)v45, v271))
        {
          uint64_t v272 = swift_slowAlloc();
          v331 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v272 = v311;
          swift_bridgeObjectRetain();
          *(void *)(v272 + 4) = sub_1000C51B8(v319, v217, (uint64_t *)&v331);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v272 + 12) = 2080;
          id v273 = [v270 recencyDate];
          if (v273)
          {
            int64_t v274 = v273;
            uint64_t v275 = (uint64_t)v308;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v276 = type metadata accessor for Date();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v276 - 8) + 56))(v275, 0, 1, v276);
          }
          else
          {
            uint64_t v277 = type metadata accessor for Date();
            uint64_t v275 = (uint64_t)v308;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v277 - 8) + 56))(v308, 1, 1, v277);
          }
          uint64_t v278 = Optional.descriptionOrNil.getter();
          unint64_t v280 = v279;
          sub_1000966BC(v275, (uint64_t *)&unk_100909A40);
          *(void *)(v272 + 14) = sub_1000C51B8(v278, v280, (uint64_t *)&v331);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v45, v271, "RDHashtagLabelUpdater updated hashtag label recency date {canonicalName: %s, new-recencyDate: %s}", (uint8_t *)v272, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v8 = v324;
          uint64_t v230 = v313;
          (*v323)(v313, v324);
          unint64_t v217 = v326;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*v323)(v230, v269);
          uint64_t v8 = v269;
        }
        goto LABEL_257;
      }
    }
    else
    {
      uint64_t v191 = *(void *)((v181 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_235:
      if (!(v181 >> 62)) {
        goto LABEL_236;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v216 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_237;
  }
  uint64_t v190 = *(void *)((v181 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v190) {
    goto LABEL_232;
  }
LABEL_176:
  uint64_t v191 = 0;
  unint64_t v315 = v181 & 0xC000000000000001;
  uint64_t v192 = 5;
  while (1)
  {
    id v193 = v315 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v181 + 8 * v191 + 32);
    unint64_t v194 = v193;
    id v195 = [v193 hashtags];
    if (!v195) {
      break;
    }
    BOOL v196 = v195;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
    uint64_t v197 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v197 & 0xC000000000000001) != 0) {
      uint64_t v45 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v45 = *(void *)(v197 + 16);
    }

    swift_bridgeObjectRelease();
    if (!v45)
    {
      swift_bridgeObjectRelease();
      uint64_t v199 = v191 + 1;
      if (__OFADD__(v191, 1)) {
        goto LABEL_327;
      }
      goto LABEL_192;
    }
    uint64_t v198 = v191 + 1;
    if (__OFADD__(v191, 1)) {
      goto LABEL_304;
    }
    ++v191;
    ++v192;
    if (v198 == v190)
    {
      swift_bridgeObjectRelease();
      unint64_t v181 = v330[0];
      goto LABEL_233;
    }
  }
  swift_bridgeObjectRelease();

  uint64_t v199 = v191 + 1;
  if (__OFADD__(v191, 1)) {
    goto LABEL_327;
  }
LABEL_192:
  unint64_t v181 = v330[0];
  if ((unint64_t)v330[0] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v200 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v200 = *(void *)((v330[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  while (2)
  {
    if (v199 == v200) {
      goto LABEL_235;
    }
    unint64_t v201 = v192 - 4;
    if ((v181 & 0xC000000000000001) != 0)
    {
      id v202 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_199;
    }
    if ((v201 & 0x8000000000000000) != 0) {
      goto LABEL_305;
    }
    if (v201 < *(void *)((v181 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v202 = *(id *)(v181 + 8 * v192);
LABEL_199:
      uint64_t v203 = v202;
      id v204 = [v202 hashtags];
      if (v204)
      {
        uint64_t v205 = v204;
        sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
        sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
        uint64_t v45 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v45 & 0xC000000000000001) != 0) {
          uint64_t v206 = __CocoaSet.count.getter();
        }
        else {
          uint64_t v206 = *(void *)(v45 + 16);
        }

        swift_bridgeObjectRelease();
        if (v206)
        {
          if (v201 != v191)
          {
            uint64_t v207 = v330[0];
            if ((v330[0] & 0xC000000000000001) != 0)
            {
              uint64_t v210 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              id v211 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (v191 < 0) {
                goto LABEL_316;
              }
              unint64_t v208 = *(void *)((v330[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v191 >= v208) {
                goto LABEL_317;
              }
              id v209 = *(id *)(v330[0] + 8 * v191 + 32);
              if ((v201 & 0x8000000000000000) != 0) {
                goto LABEL_318;
              }
              if (v201 >= v208) {
                goto LABEL_320;
              }
              uint64_t v210 = (uint64_t)v209;
              id v211 = *(id *)(v207 + 8 * v192);
            }
            uint64_t v45 = (uint64_t)v211;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
              || v207 < 0
              || (v207 & 0x4000000000000000) != 0)
            {
              uint64_t v207 = sub_1001ECD68(v207);
              v330[0] = v207;
            }
            id v212 = *(void **)((v207 & 0xFFFFFFFFFFFFFF8) + 8 * v191 + 0x20);
            *(void *)((v207 & 0xFFFFFFFFFFFFFF8) + 8 * v191 + 0x20) = v45;

            specialized Array._endMutation()();
            uint64_t v213 = v330[0];
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
              || v213 < 0
              || (v213 & 0x4000000000000000) != 0)
            {
              uint64_t v213 = sub_1001ECD68(v213);
              v330[0] = v213;
            }
            if ((v201 & 0x8000000000000000) != 0) {
              goto LABEL_319;
            }
            uint64_t v214 = v213 & 0xFFFFFFFFFFFFFF8;
            if (v201 >= *(void *)((v213 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_321;
            }
            id v215 = *(void **)(v214 + 8 * v192);
            *(void *)(v214 + 8 * v192) = v210;

            specialized Array._endMutation()();
          }
          BOOL v83 = __OFADD__(v191++, 1);
          if (v83) {
            goto LABEL_313;
          }
        }
      }
      else
      {
      }
      uint64_t v199 = v192 - 3;
      if (__OFADD__(v201, 1)) {
        goto LABEL_307;
      }
      unint64_t v181 = v330[0];
      if ((unint64_t)v330[0] >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v200 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v200 = *(void *)((v330[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      ++v192;
      continue;
    }
    break;
  }
LABEL_306:
  __break(1u);
LABEL_307:
  __break(1u);
LABEL_308:
  __break(1u);
LABEL_309:
  __break(1u);
LABEL_310:
  __break(1u);
LABEL_311:
  __break(1u);
LABEL_312:
  __break(1u);
LABEL_313:
  __break(1u);
LABEL_314:
  __break(1u);
LABEL_315:
  __break(1u);
LABEL_316:
  __break(1u);
LABEL_317:
  __break(1u);
LABEL_318:
  __break(1u);
LABEL_319:
  __break(1u);
LABEL_320:
  __break(1u);
LABEL_321:
  __break(1u);
LABEL_322:
  __break(1u);
LABEL_323:
  __break(1u);
LABEL_324:
  __break(1u);
LABEL_325:
  __break(1u);
LABEL_326:
  __break(1u);
LABEL_327:
  __break(1u);
LABEL_328:
  __break(1u);
LABEL_329:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_330:
  swift_bridgeObjectRelease();

  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void sub_10018E294(uint64_t a1, id *a2)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *a2;
  id v7 = [*a2 name];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    uint64_t v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (v12)
    {
      uint64_t v28 = v9;
      unint64_t v29 = v11;
      static Locale.current.getter();
      uint64_t v13 = type metadata accessor for Locale();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 0, 1, v13);
      sub_1000E4FD8();
      uint64_t v14 = StringProtocol.foldedStringForWriting(locale:)();
      unint64_t v16 = v15;
      sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_10090FDF0);
      swift_bridgeObjectRelease();
      uint64_t v30 = (uint64_t)v6;
      uint64_t v28 = v14;
      unint64_t v29 = v16;
      sub_100094134(&qword_10090DCC0);
      sub_1000967F4(&qword_10090DCC8, &qword_10090DCA0);
      Dictionary<>.append(_:toCollectionUnderKey:)();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
  }
  if (qword_100906FB0 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_10090D8C0);
  id v18 = v6;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446210;
    id v22 = [v18 remObjectID:v28];
    if (v22)
    {
      uint64_t v23 = v22;
      id v24 = [v22 description];

      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;
    }
    else
    {
      unint64_t v27 = 0xE300000000000000;
      uint64_t v25 = 7104878;
    }
    uint64_t v30 = sub_1000C51B8(v25, v27, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDHashtagLabelUpdater: Unexpected hashtag with nil or empty name %{public}s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Int sub_10018E620(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v1 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    uint64_t v2 = __CocoaSet.Iterator.next()();
    if (v2)
    {
      uint64_t v3 = v2;
      sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
      do
      {
        swift_dynamicCast();
        id v4 = [v19 name:v3];
        if (v4)
        {

          unint64_t v5 = *((void *)&_swiftEmptySetSingleton + 2);
          if (*((void *)&_swiftEmptySetSingleton + 3) <= v5) {
            sub_10032304C(v5 + 1);
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
          id v7 = (char *)&_swiftEmptySetSingleton + 56;
          uint64_t v8 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
          unint64_t v9 = result & ~v8;
          unint64_t v10 = v9 >> 6;
          if (((-1 << v9) & ~*((void *)&_swiftEmptySetSingleton + (v9 >> 6) + 7)) != 0)
          {
            unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*((void *)&_swiftEmptySetSingleton + (v9 >> 6) + 7))) | v9 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v12 = 0;
            unint64_t v13 = (unint64_t)(63 - v8) >> 6;
            do
            {
              if (++v10 == v13 && (v12 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v14 = v10 == v13;
              if (v10 == v13) {
                unint64_t v10 = 0;
              }
              v12 |= v14;
              uint64_t v15 = *(void *)&v7[8 * v10];
            }
            while (v15 == -1);
            unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
          }
          *(void *)&v7[(v11 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v11;
          *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v11) = v19;
          ++*((void *)&_swiftEmptySetSingleton + 2);
        }
        else
        {
        }
        uint64_t v3 = __CocoaSet.Iterator.next()();
      }
      while (v3);
      uint64_t v1 = &_swiftEmptySetSingleton;
    }
    swift_release();
  }
  else
  {
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v1 = (void *)sub_1001986D4(v16);
  }
  uint64_t v17 = sub_100190B20((uint64_t)v1);
  swift_release();
  if (v17)
  {
    id v18 = [v17 name];

    if (v18)
    {
      uint64_t v17 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return (Swift::Int)v17;
}

Swift::Int sub_10018E89C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v7 = &_swiftEmptySetSingleton;
    uint64_t v34 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    uint64_t v8 = __CocoaSet.Iterator.next()();
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v30 = v6;
      uint64_t v31 = a2;
      sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
      do
      {
        uint64_t v32 = v9;
        swift_dynamicCast();
        id v10 = [v33 name];
        if (v10)
        {

          id v11 = v33;
          char v12 = v34;
          unint64_t v13 = v34[2];
          if (v34[3] <= v13)
          {
            sub_10032304C(v13 + 1);
            char v12 = v34;
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(v12[5]);
          uint64_t v15 = v12 + 7;
          uint64_t v16 = -1 << *((unsigned char *)v12 + 32);
          unint64_t v17 = result & ~v16;
          unint64_t v18 = v17 >> 6;
          if (((-1 << v17) & ~v12[(v17 >> 6) + 7]) != 0)
          {
            unint64_t v19 = __clz(__rbit64((-1 << v17) & ~v12[(v17 >> 6) + 7])) | v17 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v20 = 0;
            unint64_t v21 = (unint64_t)(63 - v16) >> 6;
            do
            {
              if (++v18 == v21 && (v20 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v22 = v18 == v21;
              if (v18 == v21) {
                unint64_t v18 = 0;
              }
              v20 |= v22;
              uint64_t v23 = v15[v18];
            }
            while (v23 == -1);
            unint64_t v19 = __clz(__rbit64(~v23)) + (v18 << 6);
          }
          *(void *)((char *)v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
          *(void *)(v12[6] + 8 * v19) = v11;
          ++v12[2];
        }
        else
        {
        }
        uint64_t v9 = __CocoaSet.Iterator.next()();
      }
      while (v9);
      id v7 = v34;
      id v6 = v30;
      a2 = v31;
    }
    swift_release();
  }
  else
  {
    uint64_t v24 = swift_bridgeObjectRetain();
    id v7 = (void *)sub_1001986D4(v24);
  }
  id v25 = sub_10019179C((uint64_t)v7);
  swift_release();
  if (v25)
  {
    id v26 = [v25 creationDate];

    if (v26)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v27 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v6, 0, 1, v27);
    }
    else
    {
      uint64_t v29 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v6, 1, 1, v29);
    }
    return sub_100096408((uint64_t)v6, a2, (uint64_t *)&unk_100909A40);
  }
  else
  {
    uint64_t v28 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a2, 1, 1, v28);
  }
}

uint64_t sub_10018EC30(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v79 = (uint8_t *)type metadata accessor for UUID();
  uint64_t v5 = *((void *)v79 - 1);
  __chkstk_darwin(v79);
  unint64_t v77 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  unint64_t v78 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v11 = (char *)&v75 - v10;
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = sub_100126860(v12);
  swift_bridgeObjectRelease();
  unint64_t v86 = (unint64_t)_swiftEmptyArrayStorage;
  *(void *)&v85[0] = sub_10020AAEC(v13);
  sub_100094134(&qword_10090DC48);
  sub_1000967F4((unint64_t *)&qword_10090DC50, &qword_10090DC48);
  uint64_t v14 = BidirectionalCollection<>.slices(by:)();
  swift_release();
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v18 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
      goto LABEL_5;
    }
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = (long long *)(v14 + 48);
  do
  {
    v85[0] = *(v16 - 1);
    long long v17 = *v16;
    v16 += 2;
    v85[1] = v17;
    swift_unknownObjectRetain();
    sub_1001902FC((uint64_t *)v85);
    swift_unknownObjectRelease();
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = v86;
  if (v86 >> 62) {
    goto LABEL_28;
  }
LABEL_5:
  uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v19) {
    return swift_bridgeObjectRelease();
  }
LABEL_6:
  if (v19 < 1)
  {
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v80 = a2;
  unint64_t v84 = v18 & 0xC000000000000001;
  unint64_t v20 = v18;
  unint64_t v21 = (void (**)(uint64_t, uint64_t, uint64_t, uint8_t *))(v5 + 56);
  BOOL v22 = (unsigned int (**)(char *, uint64_t, uint8_t *))(v5 + 48);
  unint64_t v75 = (void (**)(char *, uint8_t *))(v5 + 8);
  unint64_t v76 = (void (**)(char *, char *, uint8_t *))(v5 + 16);
  uint64_t v82 = (void *)v20;
  swift_bridgeObjectRetain();
  uint64_t v23 = 0;
  int v81 = _swiftEmptyArrayStorage;
  uint64_t v83 = v19;
  do
  {
    if (v84) {
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v24 = (id)v82[v23 + 4];
    }
    id v25 = v24;
    id v26 = [v24 reminder];
    if (!v26) {
      goto LABEL_9;
    }
    uint64_t v27 = v26;
    id v28 = [v26 identifier];

    if (v28)
    {
      uint64_t v29 = (uint64_t)v78;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v30 = 0;
    }
    else
    {
      uint64_t v30 = 1;
      uint64_t v29 = (uint64_t)v78;
    }
    uint64_t v31 = v79;
    (*v21)(v29, v30, 1, v79);
    sub_100096408(v29, (uint64_t)v11, (uint64_t *)&unk_100909E50);
    if ((*v22)(v11, 1, v31))
    {
      sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
LABEL_9:

      goto LABEL_10;
    }
    uint64_t v32 = v77;
    (*v76)(v77, v11, v31);
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
    uint64_t v33 = UUID.uuidString.getter();
    uint64_t v34 = v31;
    uint64_t v36 = v35;
    (*v75)(v32, v34);

    unint64_t v37 = v81;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v37 = sub_100308F88(0, v37[2] + 1, 1, v37);
    }
    uint64_t v38 = v37;
    unint64_t v39 = v37[2];
    int v81 = v38;
    unint64_t v40 = v38[3];
    if (v39 >= v40 >> 1) {
      int v81 = sub_100308F88((void *)(v40 > 1), v39 + 1, 1, v81);
    }
    uint64_t v41 = v81;
    v81[2] = v39 + 1;
    uint64_t v42 = &v41[2 * v39];
    v42[4] = v33;
    v42[5] = v36;
    uint64_t v19 = v83;
LABEL_10:
    ++v23;
  }
  while (v19 != v23);
  unint64_t v18 = (unint64_t)v82;
  swift_bridgeObjectRelease();
  if (qword_100906FB0 != -1) {
LABEL_57:
  }
    swift_once();
  uint64_t v43 = type metadata accessor for Logger();
  sub_10008E2DC(v43, (uint64_t)qword_10090D8C0);
  swift_bridgeObjectRetain_n();
  unint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v44, v45))
  {
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(void *)&v85[0] = swift_slowAlloc();
    uint64_t v79 = v46;
    *(_DWORD *)unint64_t v46 = 136446210;
    uint64_t v19 = v83;
    unint64_t v78 = (char *)(v46 + 4);
    swift_bridgeObjectRetain();
    uint64_t v47 = Array.description.getter();
    unint64_t v49 = v48;
    swift_bridgeObjectRelease();
    unint64_t v86 = sub_1000C51B8(v47, v49, (uint64_t *)v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "RDHashtagLabelUpdater process shared to me reminders: %{public}s", v79, 0xCu);
    swift_arrayDestroy();
    unint64_t v18 = (unint64_t)v82;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v50 = v80;
  *(void *)&v85[0] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  uint64_t v51 = 0;
  do
  {
    if (v84) {
      id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v52 = *(id *)(v18 + 8 * v51 + 32);
    }
    char v53 = v52;
    id v54 = [v52 reminder];

    if (v54)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)&v85[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v85[0] & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    ++v51;
  }
  while (v19 != v51);
  swift_bridgeObjectRelease();
  uint64_t v55 = sub_10018B50C(*(unint64_t *)&v85[0]);
  swift_bridgeObjectRelease();
  unint64_t v56 = (unint64_t)sub_10019AB8C((uint64_t)v81);
  swift_bridgeObjectRelease();
  if (!(v56 >> 62))
  {
    uint64_t v57 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v57) {
      goto LABEL_42;
    }
LABEL_59:
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v57 = result;
  if (!result) {
    goto LABEL_59;
  }
LABEL_42:
  if (v57 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v59 = 0;
  int v81 = (void *)(v56 & 0xC000000000000001);
  while (2)
  {
    uint64_t v61 = v3;
    if (v81) {
      id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v62 = *(id *)(v56 + 8 * v59 + 32);
    }
    uint64_t v63 = v62;
    uint64_t v64 = (void *)v56;
    id v65 = [v62 sharedToMeReminderCKIdentifier];
    if (v65)
    {
      char v66 = v65;
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v69 = v68;

      if (!v55[2])
      {
LABEL_44:
        id v60 = 0;
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v69 = 0xE300000000000000;
      uint64_t v67 = 7104878;
      if (!v55[2]) {
        goto LABEL_44;
      }
    }
    unint64_t v70 = sub_1001806F8(v67, v69);
    if ((v71 & 1) == 0) {
      goto LABEL_44;
    }
    id v60 = *(id *)(v55[7] + 8 * v70);
LABEL_45:
    swift_bridgeObjectRelease();
    ++v59;
    [v63 setReminder:v60];

    uint64_t v50 = v80;
    unint64_t v56 = (unint64_t)v64;
    uint64_t v3 = v61;
    if (v57 != v59) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  unint64_t v18 = (unint64_t)v82;
LABEL_60:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  uint64_t v72 = 0;
  do
  {
    if (v84) {
      id v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v73 = *(id *)(v18 + 8 * v72 + 32);
    }
    uint64_t v74 = v73;
    ++v72;
    [v50 deleteObject:v73];
  }
  while (v83 != v72);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10018F574(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[3];
  uint64_t v36 = a1[2];
  unint64_t v39 = _swiftEmptyArrayStorage;
  sub_1002F51CC((a2 & 1) != 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v39[2] >= v39[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t KeyPath = swift_getKeyPath();
  unint64_t v35 = v5 >> 1;
  if ((v5 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_5:
    uint64_t v7 = sub_10020A884(v3, v4, v36, v5);
    goto LABEL_12;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v8 = (void *)swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  uint64_t v9 = v8[2];
  swift_release();
  if (__OFSUB__(v35, v36))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v9 != v35 - v36)
  {
LABEL_30:
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  uint64_t v7 = (void *)swift_dynamicCastClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
    uint64_t v7 = _swiftEmptyArrayStorage;
  }
LABEL_12:
  swift_unknownObjectRelease();
  uint64_t v10 = sub_1001FF8A4((uint64_t)v7);
  swift_release();
  sub_10039F564(KeyPath, (uint64_t)v10);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v39[2] >= v39[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = (void *)sub_1002F52FC(v11);
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077DE90;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)(inited + 48) = swift_getKeyPath();
  specialized Array._endMutation()();
  unint64_t v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_10077A530;
  *(void *)(v14 + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  uint64_t v15 = (void *)sub_1003BD188(inited, v14, 0, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_10077A530;
  *(void *)(v16 + 32) = swift_getKeyPath();
  uint64_t v37 = v16;
  specialized Array._endMutation()();
  uint64_t v17 = v16;
  uint64_t v38 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, 1, 0);
  unint64_t v18 = _swiftEmptyArrayStorage;
  if ((v17 & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v19 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v20)
  {
    _StringGuts.grow(_:)(46);
    v34._object = (void *)0x80000001007CAF70;
    v34._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v34);
    sub_100094134(&qword_10090DC60);
    _print_unlocked<A, B>(_:_:)();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  uint64_t v21 = v19;
  uint64_t v22 = v20;
  swift_release();
  unint64_t v24 = _swiftEmptyArrayStorage[2];
  unint64_t v23 = _swiftEmptyArrayStorage[3];
  if (v24 >= v23 >> 1)
  {
    sub_1001DE058(v23 > 1, v24 + 1, 1);
    unint64_t v18 = v38;
  }
  void v18[2] = v24 + 1;
  id v25 = &v18[2 * v24];
  void v25[4] = v21;
  v25[5] = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v15 setRelationshipKeyPathsForPrefetching:isa];

  if (__OFSUB__(v35, v36))
  {
    __break(1u);
  }
  else
  {
    [v15 setFetchLimit:v35 - v36];
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    unint64_t v27 = NSManagedObjectContext.fetch<A>(_:)();
    if (!v2)
    {
      sub_100202F30(v27);

      return;
    }
    if (qword_100906FB0 == -1) {
      goto LABEL_23;
    }
  }
  swift_once();
LABEL_23:
  uint64_t v28 = type metadata accessor for Logger();
  sub_10008E2DC(v28, (uint64_t)qword_10090D8C0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    swift_getErrorValue();
    uint64_t v32 = Error.rem_errorDescription.getter();
    uint64_t v38 = (void *)sub_1000C51B8(v32, v33, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "RDHashtagLabelUpdater: failed to fetch hashtag from database {error: %s}", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_10018FC34@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001906D8(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10018FC68(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_10018FCA4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 name];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10018FD0C(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v3 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v3 = 0;
  }
  id v4 = v3;
  [v2 setName:];
}

void sub_10018FD7C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  uint64_t v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    uint64_t v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

void sub_10018FEC4(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = a1[3];
  sub_100094134(&qword_10090DCD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E60;
  *(void *)(inited + 32) = sub_1002F51CC(0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = sub_10039F51C(KeyPath);
  swift_release();
  *(void *)(inited + 40) = v9;
  uint64_t v10 = swift_getKeyPath();
  if ((v6 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_3:
    uint64_t v11 = sub_10020AB20(v3, v4, v5, v6);
    goto LABEL_10;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v12 = (void *)swift_dynamicCastClass();
  if (!v12)
  {
    swift_unknownObjectRelease();
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  uint64_t v13 = v12[2];
  swift_release();
  if (__OFSUB__(v6 >> 1, v5))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v13 != (v6 >> 1) - v5)
  {
LABEL_18:
    swift_unknownObjectRelease();
    uint64_t v2 = v1;
    goto LABEL_3;
  }
  uint64_t v11 = (void *)swift_dynamicCastClass();
  uint64_t v2 = v1;
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
LABEL_10:
  swift_unknownObjectRelease();
  uint64_t v14 = sub_1001FFB00((uint64_t)v11);
  swift_release();
  uint64_t v15 = sub_1003A02F4(v10, (uint64_t)v14);
  swift_release();
  *(void *)(inited + 48) = v15;
  specialized Array._endMutation()();
  uint64_t v16 = (void *)sub_1002F52FC(inited);
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_10077A530;
  *(void *)(v17 + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  uint64_t v18 = (void *)sub_1003BD188(v17, 0, 0, (uint64_t)v16);
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  unint64_t v19 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E2DC(v20, (uint64_t)qword_10090D8C0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 136315138;
      swift_getErrorValue();
      uint64_t v24 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v24, v25, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDHashtagLabelUpdater: failed to fetch unassociated hashtags with sharedToMEReminderCkIdentifier from database {error: %s}", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_100202F30(v19);
  }
}

void sub_1001902FC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = a1[3];
  uint64_t KeyPath = swift_getKeyPath();
  if ((v4 & 1) == 0)
  {
    unint64_t v6 = (v4 >> 1) - v3;
    BOOL v7 = __OFSUB__(v4 >> 1, v3);
    swift_unknownObjectRetain();
    goto LABEL_6;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  uint64_t v10 = v9[2];
  swift_release();
  unint64_t v6 = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v10 != v6)
  {
LABEL_24:
    swift_unknownObjectRelease();
    BOOL v7 = 0;
LABEL_6:
    uint64_t v8 = sub_10020A884(v1, v2, v3, v4);
    goto LABEL_14;
  }
  uint64_t v11 = swift_dynamicCastClass();
  if (v11)
  {
    uint64_t v8 = (void *)v11;
    BOOL v7 = 0;
  }
  else
  {
    swift_unknownObjectRelease();
    BOOL v7 = 0;
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  swift_unknownObjectRelease();
  uint64_t v12 = sub_1001FF8A4((uint64_t)v8);
  swift_release();
  uint64_t v13 = (void *)sub_1003A0308(KeyPath, (uint64_t)v12);
  swift_release();
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  uint64_t v15 = (void *)sub_1003BD1E0(0, inited, 0, (uint64_t)v13);
  swift_bridgeObjectRelease();
  if (v7)
  {
    __break(1u);
LABEL_22:
    swift_once();
    goto LABEL_17;
  }
  [v15 setFetchLimit:v6];
  sub_1000963CC(0, &qword_100914BE0);
  unint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  if (!v23)
  {
    sub_100202F48(v16);

    return;
  }
  if (qword_100906FB0 != -1) {
    goto LABEL_22;
  }
LABEL_17:
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_10090D8C0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_getErrorValue();
    uint64_t v21 = Error.rem_errorDescription.getter();
    sub_1000C51B8(v21, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDHashtagLabelUpdater: failed to fetch sharedToMeReminderPlaceholder from database {error: %s}", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_1001906D8@<X0>(id *a1@<X0>, SEL *a2@<X3>, void (*a3)(void)@<X4>, uint64_t (*a4)(void)@<X5>, uint64_t a5@<X8>)
{
  id v8 = [*a1 *a2];
  if (v8)
  {
    uint64_t v9 = v8;
    a3();

    uint64_t v10 = ((uint64_t (*)(void))a4)(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v12 = v10;
    uint64_t v13 = a5;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = a4();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v12 = v15;
    uint64_t v13 = a5;
    uint64_t v14 = 1;
  }

  return v11(v13, v14, 1, v12);
}

id *sub_1001907B8()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_timeGroupingStrategy;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090AFA0);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1000F3DB4((uint64_t)v0 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001908E8()
{
  sub_1001907B8();

  return swift_deallocClassInstance();
}

uint64_t sub_100190940()
{
  return type metadata accessor for RDHashtagLabelUpdater(0);
}

uint64_t type metadata accessor for RDHashtagLabelUpdater(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_10090D970);
}

void sub_100190968()
{
  sub_100190A54();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100190A54()
{
  if (!qword_10090D980)
  {
    sub_1000963CC(255, (unint64_t *)&qword_10090F370);
    sub_1000E4F40((unint64_t *)&qword_10090D990, (unint64_t *)&qword_10090F370);
    unint64_t v0 = type metadata accessor for Publishers.TimeGroupingStrategy();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10090D980);
    }
  }
}

uint64_t type metadata accessor for RDHashtagLabelUpdater.BabysitTarget()
{
  return self;
}

id sub_100190B20(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  int v100 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v97 = (char *)&v89 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v99 = (char *)&v89 - v10;
  __chkstk_darwin(v9);
  uint64_t v102 = (char *)&v89 - v11;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void (***)(void, void, void, void))(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v96 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v106 = (char *)&v89 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v98 = (char *)&v89 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v109 = (char *)&v89 - v21;
  __chkstk_darwin(v20);
  os_log_t v107 = (char *)&v89 - v22;
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v120 = v13;
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
    Set.Iterator.init(_cocoa:)();
    a1 = v115;
    uint64_t v23 = v116;
    uint64_t v24 = v117;
    uint64_t v25 = v118;
    unint64_t v26 = v119;
    if (v115 < 0)
    {
      uint64_t v92 = v116;
      uint64_t v86 = __CocoaSet.Iterator.next()();
      if (v86)
      {
        uint64_t v90 = v24;
        uint64_t v89 = v2;
        uint64_t v111 = v86;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v29 = v25;
        id v30 = v113;
        swift_unknownObjectRelease();
        int v101 = 0;
        unint64_t v27 = v26;
        uint64_t v31 = (uint64_t)v102;
        uint64_t v13 = v120;
        if (v30)
        {
LABEL_6:
          id v110 = v30;
          uint64_t v95 = a1;
          uint64_t v94 = a1 & 0x7FFFFFFFFFFFFFFFLL;
          int64_t v91 = (unint64_t)(v90 + 64) >> 6;
          uint64_t v32 = (void (**)(uint64_t, char *, uint64_t))(v13 + 4);
          id v120 = v13 + 7;
          uint64_t v108 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 6);
          uint64_t v104 = (void (**)(char *, uint64_t))(v13 + 1);
          int64_t v93 = (char *)&type metadata for Swift.AnyObject + 8;
          if (v101) {
            goto LABEL_10;
          }
LABEL_7:
          uint64_t v33 = __CocoaSet.Iterator.next()();
          if (!v33) {
            goto LABEL_74;
          }
          uint64_t v111 = v33;
          sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v34 = v113;
          swift_unknownObjectRelease();
          uint64_t v35 = v29;
          uint64_t v105 = v27;
          if (!v34)
          {
LABEL_74:
            sub_1000C1AF8();
            return v110;
          }
          while (1)
          {
            uint64_t v103 = v35;
            id v40 = [v34 creationDate:v89];
            if (v40)
            {
              uint64_t v41 = v40;
              uint64_t v42 = v109;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v43 = *v32;
              (*v32)(v31, v42, v12);
              unint64_t v44 = *v120;
              (*v120)(v31, 0, 1, v12);
              int v45 = (*v108)(v31, 1, v12);
              uint64_t v46 = (uint64_t)v100;
              if (v45 != 1)
              {
                v43((uint64_t)v107, (char *)v31, v12);
                goto LABEL_34;
              }
            }
            else
            {
              unint64_t v44 = *v120;
              (*v120)(v31, 1, 1, v12);
              uint64_t v46 = (uint64_t)v100;
            }
            static Date.distantFuture.getter();
            sub_1000966BC(v31, (uint64_t *)&unk_100909A40);
LABEL_34:
            id v47 = [v110 creationDate];
            unint64_t v48 = v98;
            if (v47)
            {
              unint64_t v49 = v47;
              uint64_t v50 = v109;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v51 = *v32;
              uint64_t v52 = (uint64_t)v99;
              (*v32)((uint64_t)v99, v50, v12);
              v44(v52, 0, 1, v12);
              if ((*v108)(v52, 1, v12) != 1)
              {
                v51((uint64_t)v48, (char *)v52, v12);
                goto LABEL_39;
              }
            }
            else
            {
              uint64_t v52 = (uint64_t)v99;
              v44((uint64_t)v99, 1, 1, v12);
            }
            static Date.distantFuture.getter();
            sub_1000966BC(v52, (uint64_t *)&unk_100909A40);
LABEL_39:
            char v53 = v107;
            char v54 = static Date.< infix(_:_:)();
            uint64_t v55 = v48;
            unint64_t v56 = *v104;
            (*v104)(v55, v12);
            v56(v53, v12);
            if (v54) {
              goto LABEL_61;
            }
            id v57 = [v34 creationDate];
            if (v57)
            {
              uint64_t v58 = v57;
              uint64_t v59 = v109;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              id v60 = *v32;
              uint64_t v61 = (uint64_t)v97;
              (*v32)((uint64_t)v97, v59, v12);
              v44(v61, 0, 1, v12);
              if ((*v108)(v61, 1, v12) != 1)
              {
                v60((uint64_t)v106, (char *)v61, v12);
                goto LABEL_45;
              }
            }
            else
            {
              uint64_t v61 = (uint64_t)v97;
              v44((uint64_t)v97, 1, 1, v12);
            }
            static Date.distantFuture.getter();
            sub_1000966BC(v61, (uint64_t *)&unk_100909A40);
LABEL_45:
            id v62 = [v110 creationDate];
            if (!v62)
            {
              v44(v46, 1, 1, v12);
LABEL_49:
              char v66 = v96;
              static Date.distantFuture.getter();
              sub_1000966BC(v46, (uint64_t *)&unk_100909A40);
              goto LABEL_50;
            }
            uint64_t v63 = v62;
            uint64_t v64 = v109;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            id v65 = *v32;
            (*v32)(v46, v64, v12);
            v44(v46, 0, 1, v12);
            if ((*v108)(v46, 1, v12) == 1) {
              goto LABEL_49;
            }
            char v66 = v96;
            v65((uint64_t)v96, (char *)v46, v12);
LABEL_50:
            uint64_t v67 = v106;
            char v68 = static Date.== infix(_:_:)();
            v56(v66, v12);
            v56(v67, v12);
            if ((v68 & 1) == 0) {
              goto LABEL_58;
            }
            id v69 = [v34 name];
            if (v69)
            {
              unint64_t v70 = v69;
              uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v73 = v72;
            }
            else
            {
              uint64_t v71 = 0;
              unint64_t v73 = 0xE000000000000000;
            }
            unint64_t v113 = (void *)v71;
            unint64_t v114 = v73;
            id v74 = [v110 name];
            if (v74)
            {
              unint64_t v75 = v74;
              uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v78 = v77;
            }
            else
            {
              uint64_t v76 = 0;
              unint64_t v78 = 0xE000000000000000;
            }
            uint64_t v111 = v76;
            unint64_t v112 = v78;
            sub_1000E4FD8();
            uint64_t v79 = StringProtocol.localizedStandardCompare<A>(_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v79 != -1)
            {
LABEL_58:

              goto LABEL_59;
            }
LABEL_61:

            id v110 = v34;
LABEL_59:
            uint64_t v31 = (uint64_t)v102;
            uint64_t v29 = v103;
            unint64_t v27 = v105;
            if (!v101) {
              goto LABEL_7;
            }
LABEL_10:
            if (v27)
            {
              uint64_t v105 = (v27 - 1) & v27;
              unint64_t v36 = __clz(__rbit64(v27)) | (v29 << 6);
              uint64_t v35 = v29;
            }
            else
            {
              int64_t v37 = v29 + 1;
              if (__OFADD__(v29, 1))
              {
                __break(1u);
                goto LABEL_89;
              }
              if (v37 >= v91) {
                goto LABEL_74;
              }
              unint64_t v38 = *(void *)(v92 + 8 * v37);
              uint64_t v35 = v29 + 1;
              if (!v38)
              {
                uint64_t v35 = v29 + 2;
                if (v29 + 2 >= v91) {
                  goto LABEL_74;
                }
                unint64_t v38 = *(void *)(v92 + 8 * v35);
                if (!v38)
                {
                  uint64_t v35 = v29 + 3;
                  if (v29 + 3 >= v91) {
                    goto LABEL_74;
                  }
                  unint64_t v38 = *(void *)(v92 + 8 * v35);
                  if (!v38)
                  {
                    uint64_t v35 = v29 + 4;
                    if (v29 + 4 >= v91) {
                      goto LABEL_74;
                    }
                    unint64_t v38 = *(void *)(v92 + 8 * v35);
                    if (!v38)
                    {
                      uint64_t v35 = v29 + 5;
                      if (v29 + 5 >= v91) {
                        goto LABEL_74;
                      }
                      unint64_t v38 = *(void *)(v92 + 8 * v35);
                      if (!v38)
                      {
                        uint64_t v39 = v29 + 6;
                        while (v91 != v39)
                        {
                          unint64_t v38 = *(void *)(v92 + 8 * v39++);
                          if (v38)
                          {
                            uint64_t v35 = v39 - 1;
                            goto LABEL_27;
                          }
                        }
                        goto LABEL_74;
                      }
                    }
                  }
                }
              }
LABEL_27:
              uint64_t v105 = (v38 - 1) & v38;
              unint64_t v36 = __clz(__rbit64(v38)) + (v35 << 6);
            }
            id v34 = *(id *)(*(void *)(v95 + 48) + 8 * v36);
            if (!v34) {
              goto LABEL_74;
            }
          }
        }
      }
      goto LABEL_87;
    }
    uint64_t v13 = v120;
    if (v119)
    {
LABEL_4:
      uint64_t v90 = v24;
      uint64_t v92 = v23;
      uint64_t v89 = v2;
      unint64_t v27 = (v26 - 1) & v26;
      unint64_t v28 = __clz(__rbit64(v26)) | (v25 << 6);
      uint64_t v29 = v25;
LABEL_5:
      id v30 = *(id *)(*(void *)(a1 + 48) + 8 * v28);
      int v101 = 1;
      uint64_t v31 = (uint64_t)v102;
      if (v30) {
        goto LABEL_6;
      }
      goto LABEL_87;
    }
  }
  else
  {
    uint64_t v80 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v23 = a1 + 56;
    uint64_t v24 = ~v80;
    uint64_t v81 = -v80;
    if (v81 < 64) {
      uint64_t v82 = ~(-1 << v81);
    }
    else {
      uint64_t v82 = -1;
    }
    unint64_t v26 = v82 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v25 = 0;
    if (v26) {
      goto LABEL_4;
    }
  }
  int64_t v83 = v25 + 1;
  if (__OFADD__(v25, 1))
  {
LABEL_89:
    __break(1u);
    goto LABEL_87;
  }
  int64_t v84 = (unint64_t)(v24 + 64) >> 6;
  if (v83 < v84)
  {
    unint64_t v85 = *(void *)(v23 + 8 * v83);
    uint64_t v29 = v25 + 1;
    if (!v85)
    {
      uint64_t v29 = v25 + 2;
      if (v25 + 2 >= v84) {
        goto LABEL_87;
      }
      unint64_t v85 = *(void *)(v23 + 8 * v29);
      if (!v85)
      {
        uint64_t v29 = v25 + 3;
        if (v25 + 3 >= v84) {
          goto LABEL_87;
        }
        unint64_t v85 = *(void *)(v23 + 8 * v29);
        if (!v85)
        {
          uint64_t v29 = v25 + 4;
          if (v25 + 4 >= v84) {
            goto LABEL_87;
          }
          unint64_t v85 = *(void *)(v23 + 8 * v29);
          if (!v85)
          {
            uint64_t v29 = v25 + 5;
            if (v25 + 5 >= v84) {
              goto LABEL_87;
            }
            unint64_t v85 = *(void *)(v23 + 8 * v29);
            if (!v85)
            {
              uint64_t v88 = v25 + 6;
              do
              {
                if (v84 == v88) {
                  goto LABEL_87;
                }
                unint64_t v85 = *(void *)(v23 + 8 * v88++);
              }
              while (!v85);
              uint64_t v29 = v88 - 1;
            }
          }
        }
      }
    }
    uint64_t v90 = v24;
    uint64_t v92 = v23;
    uint64_t v89 = v2;
    unint64_t v27 = (v85 - 1) & v85;
    unint64_t v28 = __clz(__rbit64(v85)) + (v29 << 6);
    goto LABEL_5;
  }
LABEL_87:
  sub_1000C1AF8();
  return 0;
}

id sub_10019179C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  char v68 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v67 = (char *)v57 - v7;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void (***)(char *, uint64_t))(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  char v66 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v72 = (char *)v57 - v13;
  __chkstk_darwin(v12);
  uint64_t v64 = (char *)v57 - v14;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
    Set.Iterator.init(_cocoa:)();
    a1 = v76;
    uint64_t v15 = v77;
    uint64_t v17 = v78;
    uint64_t v16 = v79;
    unint64_t v18 = v80;
    if (v76 < 0)
    {
      uint64_t v21 = v79;
      uint64_t v60 = v77;
      uint64_t v54 = __CocoaSet.Iterator.next()();
      if (v54)
      {
        id v65 = v9;
        uint64_t v58 = v2;
        uint64_t v75 = v54;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v22 = v81;
        swift_unknownObjectRelease();
        int v69 = 0;
        uint64_t v23 = v64;
        if (v22)
        {
LABEL_6:
          id v70 = v22;
          uint64_t v62 = a1 & 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v63 = a1;
          v57[1] = v17;
          int64_t v59 = (unint64_t)(v17 + 64) >> 6;
          unint64_t v73 = (void (**)(char *, char *, uint64_t))(v65 + 4);
          id v74 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 7);
          uint64_t v71 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 6);
          ++v65;
          uint64_t v61 = (char *)&type metadata for Swift.AnyObject + 8;
          if (v69) {
            goto LABEL_10;
          }
LABEL_7:
          uint64_t v24 = __CocoaSet.Iterator.next()();
          if (!v24) {
            goto LABEL_56;
          }
          uint64_t v75 = v24;
          sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v25 = v81;
          swift_unknownObjectRelease();
          uint64_t v26 = v21;
          uint64_t v27 = v18;
          if (!v25)
          {
LABEL_56:
            sub_1000C1AF8();
            return v70;
          }
          while (1)
          {
            id v32 = [v70 creationDate];
            if (v32)
            {
              uint64_t v33 = v32;
              id v34 = v72;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v35 = v73;
              unint64_t v36 = *v73;
              uint64_t v37 = (uint64_t)v67;
              (*v73)(v67, v34, v8);
              unint64_t v38 = *v74;
              (*v74)(v37, 0, 1, v8);
              if ((*v71)(v37, 1, v8) != 1)
              {
                v36(v23, (char *)v37, v8);
                goto LABEL_34;
              }
            }
            else
            {
              unint64_t v38 = *v74;
              uint64_t v37 = (uint64_t)v67;
              (*v74)((uint64_t)v67, 1, 1, v8);
            }
            static Date.distantPast.getter();
            sub_1000966BC(v37, (uint64_t *)&unk_100909A40);
            uint64_t v35 = v73;
LABEL_34:
            id v39 = [v25 creationDate];
            if (v39)
            {
              id v40 = v39;
              uint64_t v41 = v72;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v42 = *v35;
              uint64_t v43 = (uint64_t)v68;
              unint64_t v44 = v41;
              uint64_t v23 = v64;
              (*v35)(v68, v44, v8);
              v38(v43, 0, 1, v8);
              if ((*v71)(v43, 1, v8) != 1)
              {
                int v45 = v66;
                v42(v66, (char *)v43, v8);
                goto LABEL_39;
              }
            }
            else
            {
              uint64_t v43 = (uint64_t)v68;
              v38((uint64_t)v68, 1, 1, v8);
            }
            int v45 = v66;
            static Date.distantPast.getter();
            sub_1000966BC(v43, (uint64_t *)&unk_100909A40);
LABEL_39:
            char v46 = static Date.< infix(_:_:)();
            id v47 = *v65;
            (*v65)(v45, v8);
            v47(v23, v8);
            if (v46)
            {

              id v70 = v25;
            }
            else
            {
            }
            uint64_t v21 = v26;
            unint64_t v18 = v27;
            if (!v69) {
              goto LABEL_7;
            }
LABEL_10:
            if (v18)
            {
              uint64_t v27 = (v18 - 1) & v18;
              unint64_t v28 = __clz(__rbit64(v18)) | (v21 << 6);
              uint64_t v26 = v21;
            }
            else
            {
              int64_t v29 = v21 + 1;
              if (__OFADD__(v21, 1))
              {
                __break(1u);
                goto LABEL_71;
              }
              if (v29 >= v59) {
                goto LABEL_56;
              }
              unint64_t v30 = *(void *)(v60 + 8 * v29);
              uint64_t v26 = v21 + 1;
              if (!v30)
              {
                uint64_t v26 = v21 + 2;
                if (v21 + 2 >= v59) {
                  goto LABEL_56;
                }
                unint64_t v30 = *(void *)(v60 + 8 * v26);
                if (!v30)
                {
                  uint64_t v26 = v21 + 3;
                  if (v21 + 3 >= v59) {
                    goto LABEL_56;
                  }
                  unint64_t v30 = *(void *)(v60 + 8 * v26);
                  if (!v30)
                  {
                    uint64_t v26 = v21 + 4;
                    if (v21 + 4 >= v59) {
                      goto LABEL_56;
                    }
                    unint64_t v30 = *(void *)(v60 + 8 * v26);
                    if (!v30)
                    {
                      uint64_t v26 = v21 + 5;
                      if (v21 + 5 >= v59) {
                        goto LABEL_56;
                      }
                      unint64_t v30 = *(void *)(v60 + 8 * v26);
                      if (!v30)
                      {
                        uint64_t v31 = v21 + 6;
                        while (v59 != v31)
                        {
                          unint64_t v30 = *(void *)(v60 + 8 * v31++);
                          if (v30)
                          {
                            uint64_t v26 = v31 - 1;
                            goto LABEL_27;
                          }
                        }
                        goto LABEL_56;
                      }
                    }
                  }
                }
              }
LABEL_27:
              uint64_t v27 = (v30 - 1) & v30;
              unint64_t v28 = __clz(__rbit64(v30)) + (v26 << 6);
            }
            id v25 = *(id *)(*(void *)(v63 + 48) + 8 * v28);
            if (!v25) {
              goto LABEL_56;
            }
          }
        }
      }
      goto LABEL_69;
    }
    if (v80)
    {
LABEL_4:
      id v65 = v9;
      uint64_t v60 = v15;
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v16 << 6);
      uint64_t v21 = v16;
LABEL_5:
      uint64_t v58 = v2;
      id v22 = *(id *)(*(void *)(a1 + 48) + 8 * v20);
      int v69 = 1;
      uint64_t v23 = v64;
      if (v22) {
        goto LABEL_6;
      }
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v48 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v15 = a1 + 56;
    uint64_t v17 = ~v48;
    uint64_t v49 = -v48;
    if (v49 < 64) {
      uint64_t v50 = ~(-1 << v49);
    }
    else {
      uint64_t v50 = -1;
    }
    unint64_t v18 = v50 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v16 = 0;
    if (v18) {
      goto LABEL_4;
    }
  }
  int64_t v51 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
LABEL_71:
    __break(1u);
    goto LABEL_69;
  }
  int64_t v52 = (unint64_t)(v17 + 64) >> 6;
  if (v51 < v52)
  {
    unint64_t v53 = *(void *)(v15 + 8 * v51);
    uint64_t v21 = v16 + 1;
    if (!v53)
    {
      uint64_t v21 = v16 + 2;
      if (v16 + 2 >= v52) {
        goto LABEL_69;
      }
      unint64_t v53 = *(void *)(v15 + 8 * v21);
      if (!v53)
      {
        uint64_t v21 = v16 + 3;
        if (v16 + 3 >= v52) {
          goto LABEL_69;
        }
        unint64_t v53 = *(void *)(v15 + 8 * v21);
        if (!v53)
        {
          uint64_t v21 = v16 + 4;
          if (v16 + 4 >= v52) {
            goto LABEL_69;
          }
          unint64_t v53 = *(void *)(v15 + 8 * v21);
          if (!v53)
          {
            uint64_t v21 = v16 + 5;
            if (v16 + 5 >= v52) {
              goto LABEL_69;
            }
            unint64_t v53 = *(void *)(v15 + 8 * v21);
            if (!v53)
            {
              uint64_t v56 = v16 + 6;
              do
              {
                if (v52 == v56) {
                  goto LABEL_69;
                }
                unint64_t v53 = *(void *)(v15 + 8 * v56++);
              }
              while (!v53);
              uint64_t v21 = v56 - 1;
            }
          }
        }
      }
    }
    id v65 = v9;
    uint64_t v60 = v15;
    unint64_t v18 = (v53 - 1) & v53;
    unint64_t v20 = __clz(__rbit64(v53)) + (v21 << 6);
    goto LABEL_5;
  }
LABEL_69:
  sub_1000C1AF8();
  return 0;
}

void sub_100192030(unint64_t *a1, void **a2)
{
  uint64_t v60 = a1;
  uint64_t v4 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  int64_t v59 = *(uint8_t **)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v62 = (char *)v58 - v15;
  uint64_t v16 = *a2;
  self;
  uint64_t v17 = swift_dynamicCastObjCClass();
  if (!v17)
  {
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_10008E2DC(v33, (uint64_t)qword_10090D8C0);
    swift_unknownObjectRetain_n();
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      uint64_t v63 = v2;
      *(_DWORD *)unint64_t v36 = 136315138;
      uint64_t v62 = (char *)(v36 + 4);
      id v37 = [v16 description];
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v40 = v39;

      uint64_t v64 = sub_1000C51B8(v38, v40, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "RDHashtagLabelUpdater: Tracked deletion is not an REMDAHashtagTombstone (or nil) huh? {deleted: %s}", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
LABEL_19:

    swift_unknownObjectRelease_n();
    return;
  }
  unint64_t v18 = (void *)v17;
  uint64_t v63 = v2;
  uint64_t v61 = v16;
  swift_unknownObjectRetain();
  id v19 = [v18 objectIdentifier];
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_15:
    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_10008E2DC(v41, (uint64_t)qword_10090D8C0);
    uint64_t v42 = v61;
    swift_unknownObjectRetain_n();
    id v34 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v43))
    {
      unint64_t v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)unint64_t v44 = 136315138;
      uint64_t v62 = (char *)(v44 + 4);
      id v45 = [v42 description];
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v48 = v47;

      uint64_t v64 = sub_1000C51B8(v46, v48, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v43, "RDHashtagLabelUpdater: Tracked deletion tombstone does not contain an objectIdentifier, huh? {deleted: %s}", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_19;
  }
  unint64_t v20 = v19;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v21(v9, v14, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    goto LABEL_15;
  }
  id v22 = v62;
  v21(v62, v9, v10);
  id v23 = [v18 name];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v6, v22, v10);
    unint64_t v28 = (uint64_t *)&v6[*(int *)(v4 + 20)];
    *unint64_t v28 = v25;
    v28[1] = v27;
    int64_t v29 = v60;
    unint64_t v30 = *v60;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v30 = sub_10030A478(0, *(void *)(v30 + 16) + 1, 1, v30);
    }
    unint64_t v32 = *(void *)(v30 + 16);
    unint64_t v31 = *(void *)(v30 + 24);
    if (v32 >= v31 >> 1) {
      unint64_t v30 = sub_10030A478(v31 > 1, v32 + 1, 1, v30);
    }
    *(void *)(v30 + 16) = v32 + 1;
    sub_10019D5B8((uint64_t)v6, v30 + ((v59[80] + 32) & ~(unint64_t)v59[80]) + *((void *)v59 + 9) * v32);
    swift_unknownObjectRelease();
    *int64_t v29 = v30;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v22, v10);
  }
  else
  {
    uint64_t v49 = v61;
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_10008E2DC(v50, (uint64_t)qword_10090D8C0);
    swift_unknownObjectRetain_n();
    int64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v51, v52))
    {
      unint64_t v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = (unint64_t *)swift_slowAlloc();
      uint64_t v65 = (uint64_t)v60;
      *(_DWORD *)unint64_t v53 = 136315138;
      v58[1] = v53 + 4;
      int64_t v59 = v53;
      id v54 = [v49 description];
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v57 = v56;

      uint64_t v64 = sub_1000C51B8(v55, v57, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "RDHashtagLabelUpdater: Tracked deletion tombstone does not contain the hashtag name, huh? {deleted: %s}", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v62, v10);
  }
}

uint64_t sub_1001929F4()
{
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100776E80;
  uint64_t v3 = *(void *)(v0
                 + OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountDescription);
  unint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountDescription
                 + 8);
  *(void *)(v1 + 56) = &type metadata for String;
  unint64_t v4 = sub_1000C5B38();
  uint64_t v5 = 7104878;
  if (v2) {
    uint64_t v5 = v3;
  }
  unint64_t v6 = 0xE300000000000000;
  if (v2) {
    unint64_t v6 = v2;
  }
  *(void *)(v1 + 32) = v5;
  *(void *)(v1 + 40) = v6;
  uint64_t v7 = *(void *)(v0
                 + OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountID);
  uint64_t v8 = *(void *)(v0
                 + OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountID
                 + 8);
  *(void *)(v1 + 96) = &type metadata for String;
  *(void *)(v1 + 104) = v4;
  *(void *)(v1 + 64) = v4;
  *(void *)(v1 + 72) = v7;
  *(void *)(v1 + 80) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return String.init(format:_:)();
}

uint64_t _s7remindd29ChangeTrackingAccountProviderCMa_0()
{
  return self;
}

uint64_t type metadata accessor for ManualHashtagLabelUpdaterDelegate()
{
  return self;
}

id sub_100192C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (objc_class *)type metadata accessor for RDDaemonController();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  uint64_t v8 = &v7[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(void *)uint64_t v8 = a1;
  *((void *)v8 + 1) = a2;
  sub_10010B4E8(a3, (uint64_t)&v7[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity]);
  *(void *)&v7[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  swift_unknownObjectRetain();
  sub_10010B544(a3);
  v10.receiver = v7;
  v10.super_class = v6;
  return [super init];
}

id sub_100192CD0@<X0>(void *a1@<X0>, char a2@<W2>, void *a3@<X8>)
{
  unint64_t v7 = sub_10019AC90();
  uint64_t v8 = sub_10019B080(v7);
  if ((a2 & 1) == 0) {
    goto LABEL_22;
  }
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_22:
    id result = (id)swift_bridgeObjectRelease();
    *a3 = v8;
    return result;
  }
  uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v9) {
    goto LABEL_22;
  }
LABEL_4:
  if (v9 < 1) {
    __break(1u);
  }
  uint64_t v27 = v3;
  unint64_t v28 = v8;
  uint64_t v26 = a3;
  unint64_t v10 = v7 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  unint64_t v31 = v7;
  unint64_t v32 = a1;
  unint64_t v29 = v7 & 0xC000000000000001;
  uint64_t v30 = v9;
  do
  {
    if (v10) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v12 = *(id *)(v7 + 8 * v11 + 32);
    }
    uint64_t v13 = v12;
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_10090D8C0);
    id v15 = v13;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      id v33 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      id v19 = [v15 name];
      if (v19)
      {
        unint64_t v20 = v19;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;
      }
      else
      {
        unint64_t v23 = 0xE300000000000000;
        uint64_t v21 = 7104878;
      }
      a1 = v32;
      *(void *)(v18 + 4) = sub_1000C51B8(v21, v23, (uint64_t *)&v33);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDHashtagLabelRepairer: removes hashtag label without hashtag: %s", (uint8_t *)v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v9 = v30;
      unint64_t v7 = v31;
      unint64_t v10 = v29;
    }
    else
    {
    }
    ++v11;
    [a1 deleteObject:v15, v26, v27];
  }
  while (v9 != v11);
  swift_bridgeObjectRelease_n();
  id v33 = 0;
  if ([a1 save:&v33])
  {
    id result = v33;
    *uint64_t v26 = v28;
  }
  else
  {
    id v25 = v33;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
  return result;
}

id sub_10019302C@<X0>(void *a1@<X0>, char a2@<W2>, unint64_t a3@<X8>)
{
  uint64_t v116 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v115 = (char *)v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  id v123 = (char *)v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v122 = (uint64_t)v91 - v11;
  uint64_t v12 = type metadata accessor for Logger();
  unint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v108 = (char *)v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = a1;
  unint64_t v15 = sub_10019B1C8();
  int64_t v16 = (int64_t)sub_10019B080(v15);
  if ((a2 & 1) == 0) {
    goto LABEL_94;
  }
  if (v15 >> 62) {
    goto LABEL_93;
  }
  uint64_t v109 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v109)
  {
LABEL_94:
    id result = (id)swift_bridgeObjectRelease();
LABEL_95:
    *(void *)a3 = v16;
    return result;
  }
LABEL_4:
  unint64_t v107 = v15 & 0xC000000000000001;
  uint64_t v94 = v15 & 0xFFFFFFFFFFFFFF8;
  unint64_t v93 = v15 + 32;
  uint64_t v103 = (void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  int v100 = (void (**)(char *, uint64_t))(v13 + 8);
  unint64_t v13 = 0;
  unint64_t v99 = &v127;
  unint64_t v121 = (void (**)(unint64_t, uint64_t, uint64_t, int64_t))(v6 + 56);
  id v120 = (unsigned int (**)(uint64_t, uint64_t, int64_t))(v6 + 48);
  unint64_t v114 = (void (**)(char *, uint64_t, int64_t))(v6 + 16);
  unint64_t v113 = (void (**)(char *, int64_t))(v6 + 8);
  *(void *)&long long v17 = 136315394;
  long long v92 = v17;
  v91[1] = (char *)&type metadata for Any + 8;
  uint64_t v118 = (char *)&type metadata for Swift.AnyObject + 8;
  int64_t v102 = v16;
  unint64_t v101 = v15;
  unint64_t v106 = a3;
  uint64_t v105 = v12;
  do
  {
    if (v107)
    {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v13 >= *(void *)(v94 + 16)) {
        goto LABEL_91;
      }
      id v18 = *(id *)(v93 + 8 * v13);
    }
    uint64_t v6 = (uint64_t)v18;
    if (__OFADD__(v13++, 1))
    {
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    id v20 = [v18 hashtags];
    if (v20)
    {
      uint64_t v21 = v20;
      id v117 = (id)v6;
      uint64_t v22 = sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
      uint64_t v23 = sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
      uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v125 = (uint64_t)&_swiftEmptySetSingleton;
      unint64_t v110 = v13;
      uint64_t v119 = v22;
      uint64_t v111 = v23;
      if ((v6 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v6 = v131[4];
        uint64_t v12 = v131[5];
        uint64_t v24 = v131[6];
        unint64_t v15 = v131[7];
        a3 = v131[8];
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v25 = -1 << *(unsigned char *)(v6 + 32);
        uint64_t v12 = v6 + 56;
        uint64_t v24 = ~v25;
        uint64_t v26 = -v25;
        if (v26 < 64) {
          uint64_t v27 = ~(-1 << v26);
        }
        else {
          uint64_t v27 = -1;
        }
        a3 = v27 & *(void *)(v6 + 56);
      }
      unint64_t v13 = v6 & 0x7FFFFFFFFFFFFFFFLL;
      id v112 = (id)v24;
      int64_t v16 = (unint64_t)(v24 + 64) >> 6;
      while (1)
      {
        if (v6 < 0)
        {
          unint64_t v32 = (void *)__CocoaSet.Iterator.next()();
          if (!v32) {
            goto LABEL_48;
          }
          id v128 = v32;
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v33 = v126;
          swift_unknownObjectRelease();
          unint64_t v31 = v15;
          uint64_t v29 = a3;
          if (!v33) {
            goto LABEL_48;
          }
        }
        else
        {
          if (a3)
          {
            uint64_t v29 = (a3 - 1) & a3;
            unint64_t v30 = __clz(__rbit64(a3)) | (v15 << 6);
            unint64_t v31 = v15;
          }
          else
          {
            int64_t v34 = v15 + 1;
            if (__OFADD__(v15, 1))
            {
              __break(1u);
              goto LABEL_90;
            }
            if (v34 >= v16) {
              goto LABEL_48;
            }
            unint64_t v35 = *(void *)(v12 + 8 * v34);
            unint64_t v31 = v15 + 1;
            if (!v35)
            {
              unint64_t v31 = v15 + 2;
              if ((uint64_t)(v15 + 2) >= v16) {
                goto LABEL_48;
              }
              unint64_t v35 = *(void *)(v12 + 8 * v31);
              if (!v35)
              {
                unint64_t v31 = v15 + 3;
                if ((uint64_t)(v15 + 3) >= v16) {
                  goto LABEL_48;
                }
                unint64_t v35 = *(void *)(v12 + 8 * v31);
                if (!v35)
                {
                  unint64_t v31 = v15 + 4;
                  if ((uint64_t)(v15 + 4) >= v16) {
                    goto LABEL_48;
                  }
                  unint64_t v35 = *(void *)(v12 + 8 * v31);
                  if (!v35)
                  {
                    unint64_t v36 = v15 + 5;
                    while (v16 != v36)
                    {
                      unint64_t v35 = *(void *)(v12 + 8 * v36++);
                      if (v35)
                      {
                        unint64_t v31 = v36 - 1;
                        goto LABEL_42;
                      }
                    }
LABEL_48:
                    sub_1000C1AF8();
                    if (qword_100906FB0 != -1) {
                      swift_once();
                    }
                    uint64_t v12 = v105;
                    uint64_t v40 = sub_10008E2DC(v105, (uint64_t)qword_10090D8C0);
                    uint64_t v41 = v108;
                    (*v103)(v108, v40, v12);
                    id v42 = v117;
                    os_log_type_t v43 = Logger.logObject.getter();
                    int v44 = static os_log_type_t.default.getter();
                    BOOL v45 = os_log_type_enabled(v43, (os_log_type_t)v44);
                    a3 = v106;
                    int64_t v16 = v116;
                    if (!v45)
                    {

                      (*v100)(v41, v12);
                      int64_t v16 = v102;
                      unint64_t v15 = v101;
                      unint64_t v13 = v110;
                      goto LABEL_85;
                    }
                    a3 = swift_slowAlloc();
                    uint64_t v95 = swift_slowAlloc();
                    v131[0] = v95;
                    *(_DWORD *)a3 = v92;
                    id v46 = [v42 name];
                    unint64_t v15 = (unint64_t)&unk_100909E50;
                    os_log_t v98 = v43;
                    int v96 = v44;
                    if (v46)
                    {
                      unint64_t v47 = v46;
                      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      unint64_t v50 = v49;
                    }
                    else
                    {
                      unint64_t v50 = 0xE300000000000000;
                      uint64_t v48 = 7104878;
                    }
                    id v126 = (id)sub_1000C51B8(v48, v50, v131);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();

                    id v112 = v42;
                    swift_bridgeObjectRelease();
                    uint64_t v97 = (uint8_t *)a3;
                    *(_WORD *)(a3 + 12) = 2080;
                    swift_beginAccess();
                    uint64_t v6 = v125;
                    unint64_t v51 = v125 & 0xC000000000000001;
                    if ((v125 & 0xC000000000000001) != 0)
                    {
                      swift_bridgeObjectRetain();
                      uint64_t v12 = __CocoaSet.count.getter();
                    }
                    else
                    {
                      uint64_t v12 = *(void *)(v125 + 16);
                      swift_bridgeObjectRetain();
                    }
                    unint64_t v13 = (unint64_t)v123;
                    if (!v12)
                    {
                      swift_bridgeObjectRelease();
                      goto LABEL_84;
                    }
                    uint64_t v124 = _swiftEmptyArrayStorage;
                    sub_1001DE058(0, v12 & ~(v12 >> 63), 0);
                    if (v51)
                    {
                      os_log_type_t v52 = (void *)__CocoaSet.startIndex.getter();
                      unsigned __int8 v54 = 1;
                    }
                    else
                    {
                      os_log_type_t v52 = (void *)sub_1003CA790(v6);
                      unsigned __int8 v54 = v55 & 1;
                    }
                    id v128 = v52;
                    uint64_t v129 = v53;
                    unsigned __int8 v130 = v54;
                    if ((v12 & 0x8000000000000000) == 0)
                    {
                      unint64_t v56 = (void *)(v6 & 0xFFFFFFFFFFFFFF8);
                      if (v6 < 0) {
                        unint64_t v56 = (void *)v6;
                      }
                      id v117 = v56;
                      do
                      {
                        while (1)
                        {
                          sub_1003CA498((uint64_t)v128, v129, v130, v6);
                          char v66 = v65;
                          id v67 = [v65 identifier];
                          if (v67)
                          {
                            char v68 = v67;
                            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                            uint64_t v69 = 0;
                          }
                          else
                          {
                            uint64_t v69 = 1;
                          }
                          (*v121)(v13, v69, 1, v16);
                          uint64_t v70 = v13;
                          uint64_t v71 = v122;
                          sub_100096408(v70, v122, (uint64_t *)&unk_100909E50);
                          if ((*v120)(v71, 1, v16))
                          {
                            sub_1000966BC(v71, (uint64_t *)&unk_100909E50);
                            unint64_t v72 = 0xE300000000000000;
                            uint64_t v73 = 7104878;
                          }
                          else
                          {
                            id v74 = v115;
                            (*v114)(v115, v71, v16);
                            sub_1000966BC(v71, (uint64_t *)&unk_100909E50);
                            uint64_t v73 = UUID.uuidString.getter();
                            unint64_t v72 = v75;
                            (*v113)(v74, v16);
                          }

                          uint64_t v76 = v124;
                          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                          {
                            sub_1001DE058(0, v76[2] + 1, 1);
                            uint64_t v76 = v124;
                          }
                          unint64_t v78 = v76[2];
                          unint64_t v77 = v76[3];
                          if (v78 >= v77 >> 1)
                          {
                            sub_1001DE058(v77 > 1, v78 + 1, 1);
                            uint64_t v76 = v124;
                          }
                          v76[2] = v78 + 1;
                          uint64_t v79 = &v76[2 * v78];
                          v79[4] = v73;
                          v79[5] = v72;
                          if (v51) {
                            break;
                          }
                          uint64_t v57 = (uint64_t)v128;
                          uint64_t v58 = v129;
                          char v59 = v130;
                          uint64_t v60 = (void *)sub_1003C9E34(v128, v129, v130, v6);
                          uint64_t v62 = v61;
                          char v64 = v63;
                          sub_1000E4EA4(v57, v58, v59);
                          id v128 = v60;
                          uint64_t v129 = v62;
                          int64_t v16 = v116;
                          unsigned __int8 v130 = v64 & 1;
                          unint64_t v13 = (unint64_t)v123;
                          if (!--v12) {
                            goto LABEL_83;
                          }
                        }
                        if ((v130 & 1) == 0)
                        {
                          swift_bridgeObjectRelease();
                          __break(1u);
                        }
                        uint64_t v80 = __CocoaSet.Index.handleBitPattern.getter();
                        unint64_t v13 = (unint64_t)v123;
                        if (v80) {
                          swift_isUniquelyReferenced_nonNull_native();
                        }
                        sub_100094134(&qword_10090C020);
                        uint64_t v81 = (void (*)(id *, void))Set.Index._asCocoa.modify();
                        __CocoaSet.formIndex(after:isUnique:)();
                        v81(&v126, 0);
                        --v12;
                      }
                      while (v12);
LABEL_83:
                      sub_1000E4EA4((uint64_t)v128, v129, v130);
                      swift_bridgeObjectRelease();
LABEL_84:
                      uint64_t v82 = v97;
                      uint64_t v83 = Array.description.getter();
                      unint64_t v85 = v84;
                      swift_bridgeObjectRelease();
                      id v126 = (id)sub_1000C51B8(v83, v85, v131);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      os_log_t v86 = v98;
                      _os_log_impl((void *)&_mh_execute_header, v98, (os_log_type_t)v96, "RDHashtagLabelRepairer: removes hashtags with isConcealed for hashtag label [%s]: %s", v82, 0x16u);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();

                      (*v100)(v108, v105);
                      a3 = v106;
                      int64_t v16 = v102;
                      unint64_t v15 = v101;
                      unint64_t v13 = v110;
                      id v42 = v112;
LABEL_85:
                      swift_beginAccess();
                      uint64_t v6 = v125;
                      swift_bridgeObjectRetain();
                      Class isa = Set._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      [v42 removeHashtags:isa];

                      sub_10019B5B8(v104, v42);
                      swift_bridgeObjectRelease();

                      goto LABEL_6;
                    }
LABEL_92:
                    __break(1u);
LABEL_93:
                    swift_bridgeObjectRetain();
                    uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    uint64_t v109 = v90;
                    if (!v90) {
                      goto LABEL_94;
                    }
                    goto LABEL_4;
                  }
                }
              }
            }
LABEL_42:
            uint64_t v29 = (v35 - 1) & v35;
            unint64_t v30 = __clz(__rbit64(v35)) + (v31 << 6);
          }
          id v33 = *(id *)(*(void *)(v6 + 48) + 8 * v30);
          if (!v33) {
            goto LABEL_48;
          }
        }
        if ([v33 isConcealed]) {
          goto LABEL_21;
        }
        id v37 = [v33 reminder];
        if (!v37) {
          break;
        }
        uint64_t v38 = v37;
        unsigned int v39 = [v37 markedForDeletion];

        if (v39) {
          break;
        }

LABEL_22:
        unint64_t v15 = v31;
        a3 = v29;
      }
      [v33 markForDeletion];
LABEL_21:
      swift_beginAccess();
      id v28 = v33;
      sub_10031EFE0(&v128, v28);
      swift_endAccess();

      goto LABEL_22;
    }

LABEL_6:
    ;
  }
  while (v13 != v109);
  swift_bridgeObjectRelease();
  id v126 = 0;
  if ([v104 save:&v126])
  {
    id result = v126;
    goto LABEL_95;
  }
  id v89 = v126;
  swift_bridgeObjectRelease();
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id sub_100193EA0@<X0>(void *a1@<X0>, int a2@<W2>, void *a3@<X8>)
{
  unint64_t v106 = a3;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  uint64_t v111 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v118 = (char *)&v106 - v9;
  __chkstk_darwin(v10);
  id v117 = (char *)&v106 - v11;
  uint64_t v12 = type metadata accessor for Date();
  unint64_t v13 = *(void (***)(void, void, void))(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v115 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v123 = (char *)&v106 - v16;
  __chkstk_darwin(v17);
  uint64_t v125 = (char *)&v106 - v18;
  uint64_t v128 = type metadata accessor for UUID();
  unint64_t v19 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  char v127 = (char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v21 = sub_10019B8E0();
  unint64_t v23 = v21;
  uint64_t v129 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 >> 62);
  uint64_t v107 = v3;
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v25 = _swiftEmptyArrayStorage;
  id v120 = a1;
  uint64_t v116 = v12;
  unint64_t v130 = v23;
  if (v24)
  {
    unint64_t v132 = (unint64_t)_swiftEmptyArrayStorage;
    sub_1001DE058(0, v24 & ~(v24 >> 63), 0);
    if (v24 < 0)
    {
      __break(1u);
LABEL_69:
      __break(1u);
    }
    LODWORD(v124) = a2;
    id v126 = (void (**)(char *, void, void))v13;
    uint64_t v26 = 0;
    id v131 = (id)(v23 & 0xC000000000000001);
    unint64_t v122 = v19;
    uint64_t v27 = (void (**)(char *, uint64_t))(v19 + 8);
    uint64_t v28 = v24;
    do
    {
      if (v131) {
        id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v29 = *(id *)(v23 + 8 * v26 + 32);
      }
      unint64_t v30 = v29;
      id v31 = [v29 remObjectID:v106];
      if (v31)
      {
        unint64_t v32 = v31;
        id v33 = [v31 uuid];

        int64_t v34 = v127;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v35 = UUID.uuidString.getter();
        unint64_t v37 = v36;
        (*v27)(v34, v128);
      }
      else
      {
        unint64_t v37 = 0xE300000000000000;
        uint64_t v35 = 7104878;
      }

      uint64_t v25 = (void *)v132;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE058(0, v25[2] + 1, 1);
        uint64_t v25 = (void *)v132;
      }
      unint64_t v39 = v25[2];
      unint64_t v38 = v25[3];
      if (v39 >= v38 >> 1)
      {
        sub_1001DE058(v38 > 1, v39 + 1, 1);
        uint64_t v25 = (void *)v132;
      }
      ++v26;
      long long v25[2] = v39 + 1;
      uint64_t v40 = &v25[2 * v39];
      void v40[4] = v35;
      v40[5] = v37;
      unint64_t v23 = v130;
    }
    while (v28 != v26);
    unint64_t v13 = (void (**)(void, void, void))v126;
    LOBYTE(a2) = (_BYTE)v124;
    unint64_t v19 = v122;
  }
  if ((a2 & 1) == 0) {
    goto LABEL_64;
  }
  uint64_t v41 = v120;
  if (!v129)
  {
    uint64_t v42 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v42) {
      goto LABEL_21;
    }
LABEL_64:
    id result = (id)swift_bridgeObjectRelease();
LABEL_65:
    *unint64_t v106 = v25;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v42) {
    goto LABEL_64;
  }
LABEL_21:
  if (v42 < 1) {
    goto LABEL_69;
  }
  uint64_t v43 = 0;
  unint64_t v122 = v23 & 0xC000000000000001;
  uint64_t v108 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v129 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 7);
  unint64_t v121 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 6);
  uint64_t v119 = (void (**)(char *, uint64_t))(v13 + 1);
  *(void *)&long long v22 = 136315394;
  long long v110 = v22;
  uint64_t v109 = (char *)&type metadata for Any + 8;
  long long v113 = xmmword_10077A530;
  uint64_t v114 = v42;
  id v126 = (void (**)(char *, void, void))(v13 + 4);
  do
  {
    if (v122) {
      id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v45 = *(id *)(v23 + 8 * v43 + 32);
    }
    int v44 = v45;
    id v46 = sub_10019BF14((uint64_t)v41, v45);
    if (!v46) {
      goto LABEL_26;
    }
    unint64_t v47 = v46;
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    sub_10008E2DC(v48, (uint64_t)qword_10090D8C0);
    uint64_t v124 = v44;
    id v49 = v44;
    id v50 = v47;
    id v51 = v49;
    id v52 = v50;
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    BOOL v55 = os_log_type_enabled(v53, v54);
    id v131 = v52;
    if (v55)
    {
      uint64_t v56 = swift_slowAlloc();
      unint64_t v112 = swift_slowAlloc();
      unint64_t v132 = v112;
      *(_DWORD *)uint64_t v56 = v110;
      id v57 = [v51 remObjectID];
      if (v57)
      {
        uint64_t v58 = v57;
        id v59 = [v57 uuid];

        uint64_t v60 = v127;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v61 = UUID.uuidString.getter();
        unint64_t v63 = v62;
        (*v108)(v60, v128);
      }
      else
      {
        unint64_t v63 = 0xE300000000000000;
        uint64_t v61 = 7104878;
      }
      *(void *)(v56 + 4) = sub_1000C51B8(v61, v63, (uint64_t *)&v132);

      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 12) = 2080;
      id v64 = [v131 name];
      if (v64)
      {
        uint64_t v65 = v64;
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v68 = v67;
      }
      else
      {
        unint64_t v68 = 0xE300000000000000;
        uint64_t v66 = 7104878;
      }
      *(void *)(v56 + 14) = sub_1000C51B8(v66, v68, (uint64_t *)&v132);
      id v69 = v131;

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "RDHashtagLabelRepairer: updates hashtag[%s] with label[%s]", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v113;
    *(void *)(inited + 32) = v51;
    unint64_t v132 = inited;
    specialized Array._endMutation()();
    unint64_t v71 = v132;
    uint64_t v72 = v116;
    uint64_t v73 = (void (**)(char *, char *, uint64_t))v126;
    if (!(v132 >> 62))
    {
      uint64_t v74 = *(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v75 = v51;
      if (!v74) {
        goto LABEL_46;
      }
LABEL_44:
      sub_10033110C(v71);
      goto LABEL_46;
    }
    id v76 = v51;
    swift_bridgeObjectRetain();
    uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v77) {
      goto LABEL_44;
    }
LABEL_46:
    swift_bridgeObjectRelease();
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v79 = v131;
    [v131 addHashtags:isa];

    id v80 = [v79 recencyDate];
    if (v80)
    {
      uint64_t v81 = v80;
      uint64_t v82 = v123;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v83 = *v73;
      uint64_t v84 = (uint64_t)v117;
      (*v73)(v117, v82, v72);
      unint64_t v85 = *v129;
      (*v129)((char *)v84, 0, 1, v72);
      if ((*v121)(v84, 1, v72) != 1)
      {
        v83(v125, (char *)v84, v72);
        goto LABEL_51;
      }
    }
    else
    {
      unint64_t v85 = *v129;
      uint64_t v84 = (uint64_t)v117;
      (*v129)(v117, 1, 1, v72);
    }
    static Date.distantPast.getter();
    sub_1000966BC(v84, (uint64_t *)&unk_100909A40);
LABEL_51:
    id v86 = [v51 creationDate:v106];
    if (!v86)
    {
      uint64_t v91 = (uint64_t)v118;
      v85(v118, 1, 1, v72);
LABEL_55:
      unint64_t v93 = v115;
      static Date.distantPast.getter();
      sub_1000966BC(v91, (uint64_t *)&unk_100909A40);
      goto LABEL_56;
    }
    uint64_t v87 = v86;
    uint64_t v88 = v73;
    id v89 = v123;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v90 = *v88;
    uint64_t v91 = (uint64_t)v118;
    (*v88)(v118, v89, v72);
    v85((char *)v91, 0, 1, v72);
    if ((*v121)(v91, 1, v72) == 1) {
      goto LABEL_55;
    }
    long long v92 = v115;
    v90(v115, (char *)v91, v72);
    unint64_t v93 = v92;
LABEL_56:
    uint64_t v94 = v125;
    char v95 = static Date.< infix(_:_:)();
    int v96 = v93;
    char v97 = v95;
    os_log_t v98 = *v119;
    (*v119)(v96, v72);
    v98(v94, v72);
    unint64_t v99 = (void (**)(char *, char *, uint64_t))v126;
    uint64_t v41 = v120;
    if (v97)
    {
      Class v100 = (Class)[v51 creationDate];
      if (v100)
      {
        unint64_t v101 = v123;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        int64_t v102 = v111;
        (*v99)(v111, v101, v72);
        v85(v102, 0, 1, v72);
        if ((*v121)((uint64_t)v102, 1, v72) == 1)
        {
          Class v100 = 0;
        }
        else
        {
          uint64_t v103 = v102;
          Class v100 = Date._bridgeToObjectiveC()().super.isa;
          v98(v103, v72);
        }
      }
      else
      {
        v85(v111, 1, 1, v72);
      }
      [v131 setRecencyDate:v100];
    }
    unint64_t v23 = v130;
    uint64_t v42 = v114;
    int v44 = v124;
LABEL_26:
    ++v43;
  }
  while (v42 != v43);
  swift_bridgeObjectRelease();
  unint64_t v132 = 0;
  if ([v41 save:&v132])
  {
    id result = (id)v132;
    goto LABEL_65;
  }
  id v105 = (id)v132;
  swift_bridgeObjectRelease();
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id sub_100194B9C@<X0>(void *a1@<X0>, int a2@<W2>, void *a3@<X8>)
{
  int v167 = a2;
  id v150 = a3;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v143 = (char *)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = type metadata accessor for Date();
  unint64_t v6 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v147 = (uint64_t)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v148 = (uint64_t)&v129 - v9;
  uint64_t v154 = type metadata accessor for UUID();
  uint64_t v10 = *(NSObject **)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v152 = (char *)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v12 - 8);
  unint64_t v142 = (char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v144 = (uint64_t)&v129 - v15;
  uint64_t v16 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v166 = a1;
  unint64_t v19 = sub_10019C5F8();
  unint64_t v21 = v19;
  if (v19 >> 62) {
    goto LABEL_107;
  }
  uint64_t v22 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v22)
  {
LABEL_108:
    id result = (id)swift_bridgeObjectRelease();
    unint64_t v156 = _swiftEmptyArrayStorage;
    goto LABEL_109;
  }
LABEL_3:
  unint64_t v23 = 0;
  unint64_t v165 = v21 & 0xC000000000000001;
  uint64_t v158 = v21 & 0xFFFFFFFFFFFFFF8;
  unint64_t v157 = v21 + 32;
  uint64_t v140 = v10 + 7;
  unint64_t v139 = v10 + 6;
  uint64_t v133 = v10 + 2;
  char v146 = v10 + 1;
  uint64_t v138 = &v181;
  uint64_t v145 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v135 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  uint64_t v136 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v134 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  unint64_t v156 = _swiftEmptyArrayStorage;
  uint64_t v24 = &selRef_intersectsSet_;
  *(void *)&long long v20 = 136446210;
  long long v169 = v20;
  unint64_t v168 = (char *)&type metadata for Any + 8;
  *(void *)&long long v20 = 136315650;
  long long v137 = v20;
  long long v151 = xmmword_10077A530;
  unint64_t v171 = (char *)&type metadata for Swift.AnyObject + 8;
  unint64_t v164 = v18;
  unint64_t v160 = v21;
  uint64_t v159 = v22;
  do
  {
    if (v165)
    {
      uint64_t v25 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v26 = __OFADD__(v23++, 1);
      if (v26)
      {
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
        if (!v22) {
          goto LABEL_108;
        }
        goto LABEL_3;
      }
    }
    else
    {
      if (v23 >= *(void *)(v158 + 16)) {
        goto LABEL_106;
      }
      uint64_t v25 = *(id *)(v157 + 8 * v23);
      BOOL v26 = __OFADD__(v23++, 1);
      if (v26) {
        goto LABEL_105;
      }
    }
    uint64_t v10 = v25;
    id v27 = [v25 canonicalName];
    uint64_t v170 = v10;
    if (v27)
    {
      unint64_t v6 = (unint64_t)v27;
      uint64_t v178 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v176 = v28;

      id v29 = [v10 hashtags];
      if (v29)
      {
        uint64_t v10 = v29;
        unint64_t v6 = sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
        uint64_t v30 = sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
        uint64_t v31 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v163 = v23;
        unint64_t v172 = v6;
        uint64_t v161 = v30;
        if ((v31 & 0xC000000000000001) != 0)
        {
          __CocoaSet.makeIterator()();
          Set.Iterator.init(_cocoa:)();
          uint64_t v31 = (uint64_t)v182[2];
          unint64_t v175 = v182[3];
          uint64_t v32 = (uint64_t)v182[4];
          unint64_t v33 = (unint64_t)v182[5];
          unint64_t v34 = (unint64_t)v182[6];
        }
        else
        {
          unint64_t v33 = 0;
          uint64_t v35 = -1 << *(unsigned char *)(v31 + 32);
          uint64_t v36 = *(void *)(v31 + 56);
          unint64_t v175 = (void *)(v31 + 56);
          uint64_t v32 = ~v35;
          uint64_t v37 = -v35;
          if (v37 < 64) {
            uint64_t v38 = ~(-1 << v37);
          }
          else {
            uint64_t v38 = -1;
          }
          unint64_t v34 = v38 & v36;
        }
        uint64_t v173 = v31 & 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v162 = v32;
        int64_t v174 = (unint64_t)(v32 + 64) >> 6;
        uint64_t v177 = v31;
        while (2)
        {
          unint64_t v21 = v33;
          if (v31 < 0)
          {
LABEL_44:
            uint64_t v10 = v173;
            uint64_t v44 = __CocoaSet.Iterator.next()();
            if (v44)
            {
              uint64_t v180 = v44;
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v43 = v182[0];
              swift_unknownObjectRelease();
              unint64_t v33 = v21;
              unint64_t v6 = v34;
              if (v43) {
                goto LABEL_46;
              }
            }
LABEL_4:
            sub_1000C1AF8();
            unint64_t v21 = v160;
            uint64_t v22 = v159;
            unint64_t v23 = v163;
            break;
          }
          while (1)
          {
            if (v34)
            {
              unint64_t v6 = (v34 - 1) & v34;
              unint64_t v39 = __clz(__rbit64(v34)) | (v21 << 6);
              unint64_t v33 = v21;
            }
            else
            {
              int64_t v40 = v21 + 1;
              if (__OFADD__(v21, 1))
              {
                __break(1u);
                goto LABEL_105;
              }
              if (v40 >= v174) {
                goto LABEL_4;
              }
              unint64_t v41 = v175[v40];
              unint64_t v33 = v21 + 1;
              if (!v41)
              {
                unint64_t v33 = v21 + 2;
                if ((uint64_t)(v21 + 2) >= v174) {
                  goto LABEL_4;
                }
                unint64_t v41 = v175[v33];
                if (!v41)
                {
                  unint64_t v33 = v21 + 3;
                  if ((uint64_t)(v21 + 3) >= v174) {
                    goto LABEL_4;
                  }
                  unint64_t v41 = v175[v33];
                  if (!v41)
                  {
                    unint64_t v33 = v21 + 4;
                    if ((uint64_t)(v21 + 4) >= v174) {
                      goto LABEL_4;
                    }
                    unint64_t v41 = v175[v33];
                    if (!v41)
                    {
                      unint64_t v42 = v21 + 5;
                      while (v174 != v42)
                      {
                        unint64_t v41 = v175[v42++];
                        if (v41)
                        {
                          unint64_t v33 = v42 - 1;
                          goto LABEL_41;
                        }
                      }
                      goto LABEL_4;
                    }
                  }
                }
              }
LABEL_41:
              unint64_t v6 = (v41 - 1) & v41;
              unint64_t v39 = __clz(__rbit64(v41)) + (v33 << 6);
            }
            id v43 = *(id *)(*(void *)(v31 + 48) + 8 * v39);
            if (!v43) {
              goto LABEL_4;
            }
LABEL_46:
            unint64_t v179 = v6;
            id v45 = [v43 v24[202]];
            if (v45) {
              break;
            }
            if (qword_100906FB0 != -1) {
              swift_once();
            }
            uint64_t v54 = type metadata accessor for Logger();
            sub_10008E2DC(v54, (uint64_t)qword_10090D8C0);
            id v55 = v43;
            uint64_t v10 = Logger.logObject.getter();
            os_log_type_t v56 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v10, v56))
            {
              uint64_t v57 = swift_slowAlloc();
              v182[0] = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v57 = v169;
              id v58 = [v55 remObjectID];
              if (v58)
              {
                id v59 = v58;
                id v60 = [v58 description];

                unint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v62 = v61;

                uint64_t v18 = v164;
              }
              else
              {
                unint64_t v62 = 0xE300000000000000;
                unint64_t v6 = 7104878;
              }
              *(void *)(v57 + 4) = sub_1000C51B8(v6, v62, (uint64_t *)v182);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v10, v56, "RDHashtagLabelRepairer: Hashtag[%{public}s] without name", (uint8_t *)v57, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              unint64_t v21 = v33;
              unint64_t v34 = v179;
              uint64_t v24 = &selRef_intersectsSet_;
LABEL_25:
              uint64_t v31 = v177;
              if (v177 < 0) {
                goto LABEL_44;
              }
              continue;
            }

            unint64_t v21 = v33;
            unint64_t v34 = v179;
            if (v31 < 0) {
              goto LABEL_44;
            }
          }
          unint64_t v6 = (unint64_t)v45;
          id v46 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v48 = v47;

          v182[0] = v46;
          v182[1] = v48;
          static Locale.current.getter();
          uint64_t v49 = type metadata accessor for Locale();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v18, 0, 1, v49);
          sub_1000E4FD8();
          uint64_t v10 = v182;
          uint64_t v50 = StringProtocol.foldedStringForWriting(locale:)();
          unint64_t v52 = v51;
          sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_10090FDF0);
          swift_bridgeObjectRelease();
          if (v178 == v50 && v176 == v52)
          {
            swift_bridgeObjectRelease();

            unint64_t v21 = v33;
            unint64_t v34 = v179;
          }
          else
          {
            char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
            unint64_t v6 = v179;
            if (v53)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              if ((v167 & 1) == 0)
              {
                swift_bridgeObjectRelease();
                uint64_t v31 = v177;
LABEL_93:
                id v115 = [v43 remObjectID];
                if (v115)
                {
                  uint64_t v116 = v115;
                  id v117 = [v115 uuid];

                  uint64_t v118 = v152;
                  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v119 = UUID.uuidString.getter();
                  uint64_t v10 = v120;
                  ((void (*)(char *, uint64_t))v146->isa)(v118, v154);
                }
                else
                {
                  uint64_t v10 = 0xE300000000000000;
                  uint64_t v119 = 7104878;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v156 = sub_100308F88(0, v156[2] + 1, 1, v156);
                }
                unint64_t v6 = v156[2];
                unint64_t v121 = v156[3];
                if (v6 >= v121 >> 1) {
                  unint64_t v156 = sub_100308F88((void *)(v121 > 1), v6 + 1, 1, v156);
                }
                unint64_t v122 = v156;
                v156[2] = v6 + 1;
                id v123 = &v122[2 * v6];
                v123[4] = v119;
                v123[5] = v10;

                unint64_t v34 = v179;
                continue;
              }
              unint64_t v63 = sub_10019BF14((uint64_t)v166, v43);
              if (v63)
              {
                id v64 = v63;
                if (qword_100906FB0 != -1) {
                  swift_once();
                }
                uint64_t v65 = type metadata accessor for Logger();
                sub_10008E2DC(v65, (uint64_t)qword_10090D8C0);
                id v66 = v43;
                swift_bridgeObjectRetain_n();
                id v67 = v66;
                swift_bridgeObjectRetain();
                unint64_t v68 = Logger.logObject.getter();
                int v69 = static os_log_type_t.default.getter();
                BOOL v70 = os_log_type_enabled(v68, (os_log_type_t)v69);
                id v149 = v67;
                if (v70)
                {
                  os_log_t v141 = v68;
                  unint64_t v71 = (_DWORD *)swift_slowAlloc();
                  unint64_t v130 = (void *)swift_slowAlloc();
                  v182[0] = v130;
                  unint64_t v132 = v71;
                  *unint64_t v71 = v137;
                  id v72 = [v67 identifier];
                  uint64_t v73 = v154;
                  if (v72)
                  {
                    uint64_t v74 = v72;
                    id v75 = v142;
                    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                    id v76 = v75;
                    uint64_t v77 = 0;
                  }
                  else
                  {
                    uint64_t v77 = 1;
                    id v76 = v142;
                  }
                  int v131 = v69;
                  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v140->isa)(v76, v77, 1, v73);
                  uint64_t v79 = (uint64_t)v76;
                  uint64_t v80 = v144;
                  sub_100096408(v79, v144, (uint64_t *)&unk_100909E50);
                  if (((unint64_t (*)(uint64_t, uint64_t, uint64_t))v139->isa)(v80, 1, v73))
                  {
                    sub_1000966BC(v80, (uint64_t *)&unk_100909E50);
                    unint64_t v81 = 0xE300000000000000;
                    uint64_t v82 = 7104878;
                  }
                  else
                  {
                    uint64_t v83 = v152;
                    ((void (*)(char *, uint64_t, uint64_t))v133->isa)(v152, v80, v73);
                    sub_1000966BC(v80, (uint64_t *)&unk_100909E50);
                    uint64_t v84 = v73;
                    uint64_t v82 = UUID.uuidString.getter();
                    unint64_t v81 = v85;
                    ((void (*)(char *, uint64_t))v146->isa)(v83, v84);
                  }
                  id v86 = v132;
                  uint64_t v180 = sub_1000C51B8(v82, v81, (uint64_t *)v182);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  id v87 = v149;

                  swift_bridgeObjectRelease();
                  *((_WORD *)v86 + 6) = 2080;
                  unint64_t v88 = v176;
                  swift_bridgeObjectRetain();
                  uint64_t v180 = sub_1000C51B8(v178, v88, (uint64_t *)v182);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  *((_WORD *)v86 + 11) = 2080;
                  swift_bridgeObjectRetain();
                  uint64_t v180 = sub_1000C51B8(v50, v52, (uint64_t *)v182);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  id v78 = v149;
                  swift_bridgeObjectRelease_n();
                  os_log_t v89 = v141;
                  _os_log_impl((void *)&_mh_execute_header, v141, (os_log_type_t)v131, "RDHashtagLabelRepairer: updates hashtag [%s] from old label canonical name [%s] to new canonical name [%s]", (uint8_t *)v86, 0x20u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();

                  id v78 = v67;
                }
                uint64_t v90 = sub_100094134((uint64_t *)&unk_10090AF20);
                uint64_t inited = swift_initStackObject();
                *(_OWORD *)(inited + 16) = v151;
                *(void *)(inited + 32) = v78;
                v182[0] = (id)inited;
                specialized Array._endMutation()();
                id v92 = v182[0];
                if ((unint64_t)v182[0] >> 62)
                {
                  id v124 = v78;
                  swift_bridgeObjectRetain();
                  uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v93 = *(void *)(((unint64_t)v182[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
                  id v94 = v78;
                }
                os_log_t v141 = v90;
                if (v93) {
                  sub_10033110C((unint64_t)v92);
                }
                swift_bridgeObjectRelease();
                Class isa = Set._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                [v64 addHashtags:isa];

                uint64_t v96 = v148;
                sub_10062BFF0(v148);
                uint64_t v97 = v147;
                sub_1006880B0(v147);
                char v98 = static Date.< infix(_:_:)();
                unint64_t v99 = *v145;
                uint64_t v100 = v153;
                (*v145)(v97, v153);
                v99(v96, v100);
                id v101 = v149;
                uint64_t v24 = &selRef_intersectsSet_;
                uint64_t v31 = v177;
                if (v98)
                {
                  id v102 = [v149 creationDate];
                  uint64_t v103 = v153;
                  if (v102)
                  {
                    uint64_t v104 = v102;
                    uint64_t v105 = v148;
                    static Date._unconditionallyBridgeFromObjectiveC(_:)();

                    unint64_t v106 = v143;
                    (*v135)(v143, v105, v103);
                    (*v136)(v106, 0, 1, v103);
                    if ((*v134)(v106, 1, v103) == 1)
                    {
                      Class v107 = 0;
                    }
                    else
                    {
                      uint64_t v108 = v103;
                      Class v107 = Date._bridgeToObjectiveC()().super.isa;
                      v99((uint64_t)v106, v108);
                    }
                    uint64_t v31 = v177;
                  }
                  else
                  {
                    (*v136)(v143, 1, 1, v153);
                    Class v107 = 0;
                  }
                  [v64 setRecencyDate:v107];
                }
                uint64_t v109 = swift_initStackObject();
                *(_OWORD *)(v109 + 16) = v151;
                *(void *)(v109 + 32) = v101;
                v182[0] = (id)v109;
                specialized Array._endMutation()();
                id v110 = v182[0];
                if ((unint64_t)v182[0] >> 62)
                {
                  id v125 = v101;
                  swift_bridgeObjectRetain();
                  uint64_t v111 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v111 = *(void *)(((unint64_t)v182[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
                  id v112 = v101;
                }
                uint64_t v18 = v164;
                if (v111) {
                  sub_10033110C((unint64_t)v110);
                }
                swift_bridgeObjectRelease();
                Class v113 = Set._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                uint64_t v114 = v170;
                [v170 removeHashtags:v113];

                sub_10019B5B8(v166, v114);
                goto LABEL_93;
              }

              swift_bridgeObjectRelease();
            }
            unint64_t v21 = v33;
            unint64_t v34 = v6;
          }
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  while (v23 != v22);
  id result = (id)swift_bridgeObjectRelease();
LABEL_109:
  if ((v167 & 1) != 0 && v156[2])
  {
    v182[0] = 0;
    if ([v166 save:v182])
    {
      id result = v182[0];
      goto LABEL_113;
    }
    id v127 = v182[0];
    uint64_t v128 = _convertNSErrorToError(_:)();

    uint64_t v155 = v128;
    swift_willThrow();
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
LABEL_113:
    *id v150 = v156;
  }
  return result;
}

id sub_10019600C@<X0>(void *a1@<X0>, int a2@<W2>, void *a3@<X8>)
{
  LODWORD(v3) = a2;
  id v112 = a3;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  id v115 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v114 = (uint64_t)&v110 - v8;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v110 - v10;
  __chkstk_darwin(v12);
  uint64_t v117 = (uint64_t)&v110 - v13;
  __chkstk_darwin(v14);
  long long v137 = (char *)&v110 - v15;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v133 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v136 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v142 = (char *)&v110 - v19;
  unint64_t v20 = sub_10019CAB0();
  unint64_t v22 = v20 >> 62;
  unint64_t v145 = v20;
  if (v20 >> 62) {
    goto LABEL_85;
  }
  uint64_t v23 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  os_log_t v141 = a1;
  uint64_t v129 = v11;
  uint64_t v144 = v16;
  if (!v23)
  {
    uint64_t v36 = _swiftEmptyArrayStorage;
    unint64_t v40 = v145;
    if (v3) {
      goto LABEL_18;
    }
LABEL_76:
    id result = (id)swift_bridgeObjectRelease();
    *id v112 = v36;
    return result;
  }
  *(void *)&v147[0] = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v23 & ~(v23 >> 63), 0);
  if (v23 < 0)
  {
    __break(1u);
LABEL_87:
    __break(1u);
  }
  uint64_t v139 = v22;
  LODWORD(v140) = v3;
  uint64_t v24 = 0;
  unint64_t v143 = v145 & 0xC000000000000001;
  uint64_t v25 = (void (**)(char *, uint64_t))(v133 + 8);
  do
  {
    if (v143) {
      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v26 = *(id *)(v145 + 8 * v24 + 32);
    }
    id v27 = v26;
    uint64_t v28 = v23;
    id v29 = [v26 remObjectID:v110];
    if (v29)
    {
      uint64_t v30 = v29;
      id v31 = [v29 uuid];

      uint64_t v32 = v142;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v33 = UUID.uuidString.getter();
      unint64_t v35 = v34;
      (*v25)(v32, v144);
    }
    else
    {
      unint64_t v35 = 0xE300000000000000;
      uint64_t v33 = 7104878;
    }

    uint64_t v36 = *(void **)&v147[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1001DE058(0, v36[2] + 1, 1);
      uint64_t v36 = *(void **)&v147[0];
    }
    unint64_t v38 = v36[2];
    unint64_t v37 = v36[3];
    if (v38 >= v37 >> 1)
    {
      sub_1001DE058(v37 > 1, v38 + 1, 1);
      uint64_t v36 = *(void **)&v147[0];
    }
    ++v24;
    id v36[2] = v38 + 1;
    unint64_t v39 = &v36[2 * v38];
    v39[4] = v33;
    v39[5] = v35;
    uint64_t v23 = v28;
  }
  while (v28 != v24);
  a1 = v141;
  uint64_t v16 = v144;
  unint64_t v40 = v145;
  unint64_t v22 = v139;
  if ((v140 & 1) == 0) {
    goto LABEL_76;
  }
LABEL_18:
  uint64_t v111 = v36;
  if (!v22)
  {
    uint64_t v3 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_20;
    }
LABEL_80:
    id result = (id)swift_bridgeObjectRelease();
LABEL_81:
    *id v112 = v111;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_80;
  }
LABEL_20:
  if (v3 < 1) {
    goto LABEL_87;
  }
  unint64_t v22 = 0;
  unint64_t v140 = v145 & 0xC000000000000001;
  unint64_t v127 = v145 + 32;
  uint64_t v138 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48);
  uint64_t v124 = v133 + 32;
  uint64_t v132 = v133 + 16;
  uint64_t v118 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v133 + 56);
  int v131 = (void (**)(char *, uint64_t))(v133 + 8);
  unint64_t v122 = v147;
  *(void *)&long long v21 = 136446210;
  long long v126 = v21;
  id v125 = (char *)&type metadata for Any + 8;
  *((void *)&v41 + 1) = 2;
  long long v123 = xmmword_100776E40;
  *(void *)&long long v41 = 136315650;
  long long v113 = v41;
  *(void *)&long long v41 = 136315138;
  long long v110 = v41;
  uint64_t v139 = v3;
  do
  {
    if (v140) {
      id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v42 = *(id *)(v127 + 8 * v22);
    }
    id v43 = v42;
    id v44 = [v42 sharedToMeReminderCKIdentifier:v110];
    if (!v44) {
      goto LABEL_30;
    }
    id v45 = v44;
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v48 = v47;

    uint64_t v49 = (uint64_t)v137;
    UUID.init(uuidString:)();
    uint64_t v50 = *v138;
    if ((*v138)(v49, 1, v16) != 1)
    {
      uint64_t v134 = v46;
      uint64_t v135 = v50;
      unint64_t v143 = v22;
      uint64_t v62 = v133;
      unint64_t v63 = v136;
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 32))(v136, v49, v16);
      sub_100094134(&qword_10090DC40);
      unint64_t v64 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      uint64_t v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = v123;
      uint64_t v128 = *(void (**)(unint64_t, char *, uint64_t))(v62 + 16);
      v128(v65 + v64, v63, v16);
      unint64_t v66 = (unint64_t)_swiftEmptyArrayStorage;
      char v146 = _swiftEmptyArrayStorage;
      *(void *)&v147[0] = v65;
      sub_100094134(&qword_10090DC48);
      sub_1000967F4((unint64_t *)&qword_10090DC50, &qword_10090DC48);
      uint64_t v67 = BidirectionalCollection<>.slices(by:)();
      uint64_t v68 = *(void *)(v67 + 16);
      if (v68)
      {
        int v69 = (long long *)(v67 + 48);
        do
        {
          v147[0] = *(v69 - 1);
          long long v70 = *v69;
          v69 += 2;
          v147[1] = v70;
          swift_unknownObjectRetain();
          sub_100184560((uint64_t *)v147);
          swift_unknownObjectRelease();
          --v68;
        }
        while (v68);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v66 = (unint64_t)v146;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v71 = (uint64_t)v129;
      unint64_t v22 = v143;
      uint64_t v16 = v144;
      if (qword_100906FB0 != -1) {
        swift_once();
      }
      uint64_t v72 = type metadata accessor for Logger();
      uint64_t v73 = sub_10008E2DC(v72, (uint64_t)qword_10090D8C0);
      id v74 = v43;
      swift_bridgeObjectRetain_n();
      id v75 = v74;
      uint64_t v130 = v73;
      id v76 = Logger.logObject.getter();
      int v77 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v76, (os_log_type_t)v77))
      {

        swift_bridgeObjectRelease_n();
        a1 = v141;
        goto LABEL_61;
      }
      os_log_t v121 = v76;
      uint64_t v78 = swift_slowAlloc();
      uint64_t v119 = swift_slowAlloc();
      *(void *)&v147[0] = v119;
      *(_DWORD *)uint64_t v78 = v113;
      id v79 = [v75 identifier];
      if (v79)
      {
        uint64_t v80 = v79;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v81 = *v118;
        uint64_t v82 = v71;
        uint64_t v83 = 0;
      }
      else
      {
        unint64_t v81 = *v118;
        uint64_t v82 = v71;
        uint64_t v83 = 1;
      }
      uint64_t v116 = v81;
      v81(v82, v83, 1, v16);
      uint64_t v84 = v117;
      sub_100096408(v71, v117, (uint64_t *)&unk_100909E50);
      unsigned int v85 = v135(v84, 1, v16);
      int v120 = v77;
      if (v85)
      {
        sub_1000966BC(v84, (uint64_t *)&unk_100909E50);
        unint64_t v86 = 0xE300000000000000;
        uint64_t v87 = 7104878;
      }
      else
      {
        unint64_t v88 = v142;
        v128((unint64_t)v142, (char *)v84, v16);
        sub_1000966BC(v84, (uint64_t *)&unk_100909E50);
        uint64_t v87 = UUID.uuidString.getter();
        unint64_t v86 = v89;
        (*v131)(v88, v16);
      }
      char v146 = (void *)sub_1000C51B8(v87, v86, (uint64_t *)v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v78 + 12) = 2080;
      swift_bridgeObjectRetain();
      char v146 = (void *)sub_1000C51B8(v134, v48, (uint64_t *)v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v78 + 22) = 2080;
      id v90 = [v75 reminder];
      if (v90)
      {
        uint64_t v91 = v90;
        id v92 = [v90 identifier];

        if (v92)
        {
          uint64_t v93 = (uint64_t)v115;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v94 = 0;
        }
        else
        {
          uint64_t v94 = 1;
          uint64_t v93 = (uint64_t)v115;
        }
        uint64_t v95 = v144;
        v116(v93, v94, 1, v144);
        uint64_t v96 = v114;
        sub_100096408(v93, v114, (uint64_t *)&unk_100909E50);
        if (!v135(v96, 1, v95))
        {
          unint64_t v99 = v142;
          v128((unint64_t)v142, (char *)v96, v95);
          sub_1000966BC(v96, (uint64_t *)&unk_100909E50);
          uint64_t v98 = UUID.uuidString.getter();
          unint64_t v97 = v100;
          (*v131)(v99, v95);
          goto LABEL_60;
        }
        sub_1000966BC(v96, (uint64_t *)&unk_100909E50);
      }
      unint64_t v97 = 0xE300000000000000;
      uint64_t v98 = 7104878;
LABEL_60:
      a1 = v141;
      char v146 = (void *)sub_1000C51B8(v98, v97, (uint64_t *)v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v101 = v121;
      _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v120, "RDHashtagLabelRepairer: fixes hashtag[%s] with sharedToMeReminderCKIdentifier[%s] and original reminder id [%s]", (uint8_t *)v78, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v22 = v143;
      uint64_t v16 = v144;
LABEL_61:
      uint64_t v3 = v139;
      if (v66 >> 62)
      {
        swift_bridgeObjectRetain();
        if (_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v102 = *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v102)
        {
LABEL_63:
          if ((v66 & 0xC000000000000001) != 0)
          {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            id v103 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v11 = (char *)(v66 & 0xFFFFFFFFFFFFFF8);
            uint64_t v3 = *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v3)
            {
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              swift_bridgeObjectRetain();
              uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_3;
            }
            uint64_t v3 = v139;
            if (!*(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_84;
            }
            id v103 = *(id *)(v66 + 32);
          }
          uint64_t v104 = v103;
          swift_bridgeObjectRelease();
          goto LABEL_73;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v105, v106))
      {
        uint64_t v107 = swift_slowAlloc();
        *(void *)&v147[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v107 = v110;
        swift_bridgeObjectRetain();
        *(void *)(v107 + 4) = sub_1000C51B8(v134, v48, (uint64_t *)v147);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "RDHashtagLabelRepairer: reminder[%s] is not found in database. It may not be sync down yet.", (uint8_t *)v107, 0xCu);
        swift_arrayDestroy();
        uint64_t v16 = v144;
        swift_slowDealloc();
        uint64_t v3 = v139;
        swift_slowDealloc();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n();
      }
      uint64_t v104 = 0;
      unint64_t v22 = v143;
LABEL_73:
      [v75 setReminder:v104];

      (*v131)(v136, v16);
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
    sub_1000966BC(v49, (uint64_t *)&unk_100909E50);
    a1 = v141;
LABEL_30:
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E2DC(v51, (uint64_t)qword_10090D8C0);
    id v52 = v43;
    char v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      unint64_t v143 = v22;
      uint64_t v55 = swift_slowAlloc();
      *(void *)&v147[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = v126;
      id v56 = [v52 remObjectID];
      if (v56)
      {
        uint64_t v57 = v56;
        id v58 = [v56 description];

        uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v61 = v60;

        a1 = v141;
      }
      else
      {
        unint64_t v61 = 0xE300000000000000;
        uint64_t v59 = 7104878;
      }
      *(void *)(v55 + 4) = sub_1000C51B8(v59, v61, (uint64_t *)v147);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "RDHashtagLabelRepairer: Impossible as hashtag[%{public}s] without sharedToMeReminderCKIdentifier", (uint8_t *)v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v22 = v143;
      uint64_t v16 = v144;
      uint64_t v3 = v139;
    }
    else
    {
    }
LABEL_23:
    ++v22;
  }
  while (v22 != v3);
  swift_bridgeObjectRelease();
  *(void *)&v147[0] = 0;
  if ([a1 save:v147])
  {
    id result = *(id *)&v147[0];
    goto LABEL_81;
  }
  id v109 = *(id *)&v147[0];
  swift_bridgeObjectRelease();
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

void *sub_100197090@<X0>(void *a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  int v43 = a2;
  uint64_t v49 = type metadata accessor for UUID();
  unint64_t v7 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v46 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v9 - 8);
  uint64_t v51 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - v12;
  unint64_t v14 = sub_10019D0A4();
  unint64_t v15 = v14 >> 62;
  unint64_t v52 = v14;
  if (v14 >> 62) {
    goto LABEL_39;
  }
  uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  uint64_t v17 = _swiftEmptyArrayStorage;
  if (!v16)
  {
    unint64_t v31 = v52;
    if ((v43 & 1) == 0) {
      goto LABEL_35;
    }
    goto LABEL_24;
  }
  unint64_t v42 = v15;
  char v53 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v16 & ~(v16 >> 63), 0);
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v39 = a1;
  uint64_t v40 = a3;
  unint64_t v41 = v4;
  a1 = 0;
  uint64_t v17 = v53;
  unint64_t v50 = v52 & 0xC000000000000001;
  unint64_t v47 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  unint64_t v48 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  unint64_t v15 = v7 + 16;
  id v44 = (void (**)(char *, uint64_t))(v7 + 8);
  id v45 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  do
  {
    if ((void *)v16 == a1)
    {
      __break(1u);
LABEL_39:
      unint64_t v38 = v15;
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v15 = v38;
      goto LABEL_3;
    }
    if (v50) {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v18 = *(id *)(v52 + 8 * (void)a1 + 32);
    }
    uint64_t v19 = v18;
    uint64_t v20 = (uint64_t)v51;
    id v21 = [v18 reminder:v39, v40, v41];
    if (!v21) {
      goto LABEL_16;
    }
    unint64_t v22 = v21;
    id v23 = [v21 identifier];

    if (v23)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v24 = 1;
    }
    uint64_t v25 = v49;
    (*v48)(v20, v24, 1, v49);
    sub_100096408(v20, (uint64_t)v13, (uint64_t *)&unk_100909E50);
    if ((*v47)(v13, 1, v25))
    {
      sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
LABEL_16:
      unint64_t v4 = 0xE300000000000000;
      a3 = 7104878;
      goto LABEL_18;
    }
    id v26 = v46;
    (*v45)(v46, v13, v25);
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
    a3 = UUID.uuidString.getter();
    unint64_t v4 = v27;
    (*v44)(v26, v25);
LABEL_18:

    char v53 = v17;
    unint64_t v29 = v17[2];
    unint64_t v28 = v17[3];
    unint64_t v7 = v29 + 1;
    if (v29 >= v28 >> 1)
    {
      sub_1001DE058(v28 > 1, v29 + 1, 1);
      uint64_t v17 = v53;
    }
    a1 = (char *)a1 + 1;
    void v17[2] = v7;
    uint64_t v30 = &v17[2 * v29];
    Swift::Int v30[4] = a3;
    v30[5] = v4;
  }
  while ((void *)v16 != a1);
  a3 = v40;
  a1 = v39;
  unint64_t v15 = v42;
  unint64_t v31 = v52;
  if ((v43 & 1) == 0)
  {
LABEL_35:
    id result = (void *)swift_bridgeObjectRelease();
LABEL_36:
    *(void *)a3 = v17;
    return result;
  }
LABEL_24:
  if (v15)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v32) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v32) {
      goto LABEL_35;
    }
  }
  if (v32 < 1) {
LABEL_41:
  }
    __break(1u);
  swift_bridgeObjectRetain();
  uint64_t v33 = 0;
  do
  {
    if ((v31 & 0xC000000000000001) != 0) {
      id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v34 = *(id *)(v31 + 8 * v33 + 32);
    }
    unint64_t v35 = v34;
    ++v33;
    char v53 = v34;
    sub_1001975A0((void **)&v53, a1);
  }
  while (v32 != v33);
  swift_bridgeObjectRelease_n();
  char v53 = 0;
  if ([a1 save:&v53])
  {
    id result = v53;
    goto LABEL_36;
  }
  unint64_t v37 = v53;
  swift_bridgeObjectRelease();
  _convertNSErrorToError(_:)();

  return (void *)swift_willThrow();
}

id sub_1001975A0(void **a1, void *a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v40 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  if (qword_100906FB0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10090D8C0);
  id v15 = v13;
  uint64_t v16 = Logger.logObject.getter();
  int v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    int v38 = v17;
    unint64_t v39 = a2;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v44 = v36;
    *(_DWORD *)uint64_t v18 = 136315394;
    id v19 = [v15 remObjectID];
    uint64_t v37 = v2;
    if (v19)
    {
      uint64_t v20 = v19;
      id v21 = [v19 uuid];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = UUID.uuidString.getter();
      unint64_t v24 = v23;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v10);
    }
    else
    {
      unint64_t v24 = 0xE300000000000000;
      uint64_t v22 = 7104878;
    }
    uint64_t v42 = sub_1000C51B8(v22, v24, &v44);
    unint64_t v35 = &v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    id v25 = [v15 reminder];
    if (v25)
    {
      id v26 = v25;
      id v27 = [v25 identifier];

      if (v27)
      {
        uint64_t v28 = (uint64_t)v40;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v29 = 0;
      }
      else
      {
        uint64_t v29 = 1;
        uint64_t v28 = (uint64_t)v40;
      }
      uint64_t v31 = v41;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v28, v29, 1, v10);
      sub_100096408(v28, (uint64_t)v9, (uint64_t *)&unk_100909E50);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v9, 1, v10))
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v12, v9, v10);
        sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
        uint64_t v32 = UUID.uuidString.getter();
        unint64_t v30 = v33;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v10);
        goto LABEL_17;
      }
      sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
      unint64_t v30 = 0xE300000000000000;
    }
    else
    {
      unint64_t v30 = 0xE300000000000000;
    }
    uint64_t v32 = 7104878;
LABEL_17:
    uint64_t v42 = sub_1000C51B8(v32, v30, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v38, "RDHashtagLabelRepairer removes sharedToMeReminerPlaceholder[%s] with reminderID[%s]", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v39;
    return [a2 deleteObject:v15];
  }

  return [a2 deleteObject:v15];
}

id sub_100197A8C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  unint64_t v39 = a2;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v10 = __chkstk_darwin(v9).n128_u64[0];
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = *a1;
  id v14 = [v13 name:v10];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v18 = 0xE300000000000000;
    uint64_t v16 = 7104878;
  }
  id v19 = [v13 canonicalName];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v23 = 0;
  }
  id v24 = [v13 firstOccurrenceCreationDate];
  if (v24)
  {
    id v25 = v24;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v26 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v12, 0, 1, v26);
  }
  else
  {
    uint64_t v27 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v12, 1, 1, v27);
  }
  id v28 = [v13 recencyDate];
  if (v28)
  {
    uint64_t v29 = v28;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v30 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v8, 0, 1, v30);
  }
  else
  {
    uint64_t v31 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v8, 1, 1, v31);
  }
  id v32 = [v13 uuidForChangeTracking];
  if (v32)
  {
    unint64_t v33 = v32;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v5, 0, 1, v34);
  }
  else
  {
    uint64_t v35 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v5, 1, 1, v35);
  }
  id v36 = objc_allocWithZone((Class)REMHashtagLabel);
  id result = sub_100198470(v16, v18, v21, v23, (uint64_t)v12, (uint64_t)v8, (uint64_t)v5);
  void *v39 = result;
  return result;
}

uint64_t type metadata accessor for RDHashtagLabelRepairer()
{
  return self;
}

void sub_100197E44(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v10 >= v6) {
      goto LABEL_33;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_33;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v6) {
          goto LABEL_33;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v6) {
            goto LABEL_33;
          }
          unint64_t v11 = *(void *)(v2 + 8 * v7);
          if (!v11)
          {
            int64_t v7 = v10 + 4;
            if (v10 + 4 >= v6) {
              goto LABEL_33;
            }
            unint64_t v11 = *(void *)(v2 + 8 * v7);
            if (!v11) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_26:
    uint64_t v13 = *(void *)(a1 + 48) + 16 * v9;
    id v15 = *(void **)v13;
    uint64_t v14 = *(void *)(v13 + 8);
    char v16 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x22) {
      goto LABEL_29;
    }
    if (((1 << v16) & 0x40401) == 0)
    {
      if (((1 << v16) & 0x404000000) != 0)
      {
LABEL_33:
        swift_release();
        return;
      }
LABEL_29:
      if (qword_1009074F0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E2DC(v17, (uint64_t)qword_1009179D0);
      uint64_t v18 = v15;
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 134349056;
        *(void *)(v21 + 4) = v14;

        swift_slowDealloc();
        uint64_t v18 = v19;
      }
      else
      {
      }
    }
  }
  int64_t v12 = v10 + 5;
  if (v12 >= v6) {
    goto LABEL_33;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_33;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_35:
  __break(1u);
}

void sub_1001980E8(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v10 >= v6) {
      goto LABEL_33;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_33;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v6) {
          goto LABEL_33;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v6) {
            goto LABEL_33;
          }
          unint64_t v11 = *(void *)(v2 + 8 * v7);
          if (!v11)
          {
            int64_t v7 = v10 + 4;
            if (v10 + 4 >= v6) {
              goto LABEL_33;
            }
            unint64_t v11 = *(void *)(v2 + 8 * v7);
            if (!v11) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_26:
    uint64_t v13 = *(void *)(a1 + 48) + 16 * v9;
    id v15 = *(void **)v13;
    uint64_t v14 = *(void *)(v13 + 8);
    char v16 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x22) {
      goto LABEL_29;
    }
    if (((1 << v16) & 0x40401) == 0)
    {
      if (((1 << v16) & 0x404000000) != 0)
      {
LABEL_33:
        swift_release();
        return;
      }
LABEL_29:
      if (qword_1009074F0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E2DC(v17, (uint64_t)qword_1009179D0);
      uint64_t v18 = v15;
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 134349056;
        *(void *)(v21 + 4) = v14;

        swift_slowDealloc();
        uint64_t v18 = v19;
      }
      else
      {
      }
    }
  }
  int64_t v12 = v10 + 5;
  if (v12 >= v6) {
    goto LABEL_33;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_33;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_10019838C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t *))
{
  return sub_1001983A4(a1, a2, a3, a4, a5);
}

uint64_t sub_1001983A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t *))
{
  uint64_t v9 = a2;
  swift_bridgeObjectRetain();
  a5(a1, &v9);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a4 + 48);
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  return swift_release();
}

id sub_100198470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v11 = 0;
  }
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  Class isa = 0;
  if (v14(a5, 1, v12) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a5, v12);
  }
  if (v14(a6, 1, v12) == 1)
  {
    Class v16 = 0;
  }
  else
  {
    Class v16 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a6, v12);
  }
  uint64_t v17 = v7;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  Class v20 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(a7, 1, v18) != 1)
  {
    Class v20 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a7, v18);
  }
  id v21 = [v17 initWithName:v24 canonicalName:v11 firstOccurrenceCreationDate:isa recencyDate:v16 uuidForChangeTracking:v20 a7];

  return v21;
}

uint64_t sub_1001986D4(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    sub_100198838((unint64_t *)((char *)&v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    unint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v5);
    sub_100198838((unint64_t *)v8, v4, v2);
    uint64_t v7 = v9;
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

void sub_100198838(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v9) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v9) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v5 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v9) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v5 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    id v12 = *(id *)(*(void *)(a3 + 48) + 8 * v11);
    id v13 = [v12 name];

    if (v13)
    {

      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        sub_100240574(a1, a2, v20, a3);
        return;
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v9) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

void sub_1001989FC(uint64_t *a1)
{
}

uint64_t sub_100198A04(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4 = *a2;
  a3(a1, &v4);
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  return swift_release();
}

uint64_t sub_100198AA8()
{
  return swift_release();
}

void sub_100198B34(uint64_t *a1)
{
}

void *sub_100198B3C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for UnfairLock.Options();
  __chkstk_darwin(v9);
  *(void *)((char *)v7 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *((unsigned char *)v7 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_started) = 0;
  *(void *)((char *)v7 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_cloudAccountsDidChangeCancellable) = 0;
  uint64_t v10 = OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_highPrioritySubscriptionTransactionRegistrar;
  uint64_t v34 = type metadata accessor for RDTransactionRegistrar();
  unint64_t v11 = (void *)swift_allocObject();
  void v11[4] = 0;
  v11[5] = 0;
  void v11[2] = 0xD000000000000040;
  v11[3] = 0x80000001007CD0F0;
  sub_10019DA88((unint64_t *)&qword_100908278, (void (*)(uint64_t))&type metadata accessor for UnfairLock.Options);
  sub_100094134(&qword_100908280);
  sub_1000967F4((unint64_t *)&qword_100908288, &qword_100908280);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for UnfairLock();
  swift_allocObject();
  v11[6] = UnfairLock.init(options:)();
  *(void *)((char *)v7 + v10) = v11;
  uint64_t v12 = OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_lowPrioritySubscriptionTransactionRegistrar;
  id v13 = (void *)swift_allocObject();
  void v13[4] = 0;
  v13[5] = 0;
  _OWORD v13[2] = 0xD00000000000003FLL;
  v13[3] = 0x80000001007CD140;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  swift_allocObject();
  void v13[6] = UnfairLock.init(options:)();
  *(void *)((char *)v7 + v12) = v13;
  int64_t v14 = (void *)((char *)v7
                 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitterOperationRefreshFromLastConsumed);
  *int64_t v14 = 0xD000000000000017;
  v14[1] = 0x80000001007C78C0;
  unint64_t v15 = (void *)((char *)v7
                 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitterOperationRefreshFromLastConsumedOnLaunch);
  *unint64_t v15 = 0xD00000000000001FLL;
  v15[1] = 0x80000001007C78E0;
  int64_t v16 = (void *)((char *)v7 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_analyticsCrashDetected);
  *int64_t v16 = 0xD000000000000035;
  v16[1] = 0x80000001007CD180;
  uint64_t v17 = OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitTarget;
  *(void *)((char *)v8 + v17) = [objc_allocWithZone((Class)type metadata accessor for RDHashtagLabelUpdater.BabysitTarget()) init:v34];
  uint64_t v18 = (void *)((char *)v8 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_changeTrackingClientName);
  *uint64_t v18 = 0xD000000000000027;
  v18[1] = 0x80000001007CD090;
  _OWORD v8[2] = a1;
  Swift::UInt v8[3] = a2;
  v43[0] = 0xD000000000000013;
  v43[1] = 0x80000001007CD1C0;
  v43[3] = 0;
  v44[0] = 0;
  v43[2] = 0;
  *(void *)((char *)v44 + 6) = 0;
  if (a6)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v20 = a7;
    id v21 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(a7 + 8);
    id v22 = a1;
    id v23 = a2;
    swift_unknownObjectRetain();
    id v24 = (id)v21(a3, a4, v43, ObjectType, a7);
    swift_unknownObjectRelease();
  }
  else
  {
    id v25 = (objc_class *)type metadata accessor for RDDaemonController();
    uint64_t v26 = (char *)objc_allocWithZone(v25);
    uint64_t v27 = &v26[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
    *(void *)uint64_t v27 = a3;
    *((void *)v27 + 1) = a4;
    sub_10010B4E8((uint64_t)v43, (uint64_t)&v26[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity]);
    *(void *)&v26[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
    v42.receiver = v26;
    v42.super_class = v25;
    id v28 = a1;
    id v29 = a2;
    swift_unknownObjectRetain();
    id v24 = [super init];
    uint64_t v20 = a7;
  }
  void v8[4] = v24;
  uint64_t v30 = (char *)v8 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_timeGroupingStrategy;
  uint64_t v31 = sub_100094134((uint64_t *)&unk_10090AFA0);
  uint64_t v32 = *(void *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v30, a5, v31);
  *(void *)((char *)v8 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate + 8) = v20;
  swift_unknownObjectWeakAssign();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a5, v31);
  *(void *)((char *)v8 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_hashtagInsertEventCancellables) = _swiftEmptyArrayStorage;
  return v8;
}

void *sub_10019903C(unint64_t a1, uint64_t a2, void *a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    id result = _swiftEmptyArrayStorage;
    if (!v6) {
      break;
    }
    int64_t v14 = _swiftEmptyArrayStorage;
    id result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = 0;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(a1 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      id v12 = v9;
      sub_100184D28(&v12, a2, a3, &v13);

      if (v3) {
        return (void *)swift_release();
      }
      ++v8;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v6 == v8) {
        return v14;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_1001991AC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = [v7 accountIdentifier];
      if (v10)
      {
        unint64_t v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v8;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_18;
        }
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_100199340(NSObject *a1, unint64_t a2, NSObject *a3)
{
  long long v126 = a1;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)&v117 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v14 = __chkstk_darwin(v13);
  char v16 = (char *)&v117 - v15;
  __chkstk_darwin(v14);
  id v125 = (uint8_t *)&v117 - v18;
  unint64_t v19 = a2 >> 62;
  if (a2 >> 62)
  {
    uint64_t v124 = v17;
    swift_bridgeObjectRetain();
    uint64_t v116 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v17 = v124;
    if (!v116) {
      return;
    }
  }
  else if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  uint64_t v124 = v17;
  unint64_t v127 = a3;
  if (!a3)
  {
    unint64_t v127 = sub_10018AB70(a2);
    if (!v127)
    {
      if (qword_100906FB0 != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      sub_10008E2DC(v44, (uint64_t)qword_10090D8C0);
      swift_bridgeObjectRetain_n();
      id v24 = Logger.logObject.getter();
      int v45 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v24, (os_log_type_t)v45))
      {

        swift_bridgeObjectRelease_n();
        return;
      }
      uint64_t v46 = swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      uint64_t v128 = v47;
      LODWORD(v46->isa) = 136446210;
      if (v19)
      {
        swift_bridgeObjectRetain();
        uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v48 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v48)
      {
        uint64_t v124 = v47;
        LODWORD(v125) = v45;
        long long v126 = v46;
        unint64_t v127 = v24;
        uint64_t v130 = _swiftEmptyArrayStorage;
        sub_1001DE058(0, v48 & ~(v48 >> 63), 0);
        if (v48 < 0) {
          goto LABEL_76;
        }
        uint64_t v100 = 0;
        os_log_t v101 = v130;
        do
        {
          if ((a2 & 0xC000000000000001) != 0) {
            id v102 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v102 = *(id *)(a2 + 8 * v100 + 32);
          }
          id v103 = v102;
          id v104 = [v102 remObjectID];
          if (v104)
          {
            uint64_t v105 = v104;
            id v106 = [v104 description];

            uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v109 = v108;
          }
          else
          {

            unint64_t v109 = 0xE300000000000000;
            uint64_t v107 = 7104878;
          }
          uint64_t v130 = v101;
          unint64_t v111 = v101[2];
          unint64_t v110 = v101[3];
          if (v111 >= v110 >> 1)
          {
            sub_1001DE058(v110 > 1, v111 + 1, 1);
            os_log_t v101 = v130;
          }
          ++v100;
          v101[2] = v111 + 1;
          id v112 = &v101[2 * v111];
          v112[4] = v107;
          v112[5] = v109;
        }
        while (v48 != v100);
        uint64_t v46 = v126;
        id v24 = v127;
        LOBYTE(v45) = (_BYTE)v125;
      }
      uint64_t v113 = Array.description.getter();
      unint64_t v115 = v114;
      swift_bridgeObjectRelease();
      uint64_t v130 = (void *)sub_1000C51B8(v113, v115, &v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v45, "RDHashtagLabelUpdater.associate(hashtagLabel:to:): Impossible. Should be able to get first occurrence hashtag as empty array or those with nil name should have been filtered {hashtags: %{public}s}", (uint8_t *)v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_71;
    }
  }
  uint64_t v20 = a3;
  unint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_100127390(v21);
  swift_bridgeObjectRelease();
  sub_10018E89C(v22, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10008E2DC(v23, (uint64_t)qword_10090D8C0);
    swift_bridgeObjectRetain_n();
    id v24 = Logger.logObject.getter();
    int v25 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v24, (os_log_type_t)v25))
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v128 = v27;
    *(_DWORD *)uint64_t v26 = 136446210;
    if (v19)
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v28) {
      goto LABEL_37;
    }
    long long v123 = (uint8_t *)v27;
    LODWORD(v124) = v25;
    id v125 = v26;
    long long v126 = v24;
    uint64_t v130 = _swiftEmptyArrayStorage;
    sub_1001DE058(0, v28 & ~(v28 >> 63), 0);
    if ((v28 & 0x8000000000000000) == 0)
    {
      uint64_t v49 = 0;
      unint64_t v50 = v130;
      do
      {
        if ((a2 & 0xC000000000000001) != 0) {
          id v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v51 = *(id *)(a2 + 8 * v49 + 32);
        }
        unint64_t v52 = v51;
        id v53 = [v51 remObjectID];
        if (v53)
        {
          os_log_type_t v54 = v53;
          id v55 = [v53 description];

          uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v58 = v57;
        }
        else
        {

          unint64_t v58 = 0xE300000000000000;
          uint64_t v56 = 7104878;
        }
        uint64_t v130 = v50;
        unint64_t v60 = v50[2];
        unint64_t v59 = v50[3];
        if (v60 >= v59 >> 1)
        {
          sub_1001DE058(v59 > 1, v60 + 1, 1);
          unint64_t v50 = v130;
        }
        ++v49;
        v50[2] = v60 + 1;
        unint64_t v61 = &v50[2 * v60];
        v61[4] = v56;
        v61[5] = v58;
      }
      while (v28 != v49);
      uint64_t v26 = v125;
      id v24 = v126;
      LOBYTE(v25) = v124;
LABEL_37:
      uint64_t v62 = Array.description.getter();
      unint64_t v64 = v63;
      swift_bridgeObjectRelease();
      uint64_t v130 = (void *)sub_1000C51B8(v62, v64, &v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v25, "RDHashtagLabelUpdater.associate(hashtagLabel:to:): Impossible. Should be able to get most recently created date as empty array or those with nil name should have been filtered {hashtags: %{public}s}", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_71:
      return;
    }
    __break(1u);
LABEL_76:
    __break(1u);
    return;
  }
  id v29 = v125;
  (*(void (**)(uint8_t *, char *, uint64_t))(v12 + 32))(v125, v10, v11);
  uint64_t v30 = v126;
  uint64_t v31 = v127;
  if (sub_1006880C8(v126))
  {
    id v32 = [v31 name];
    [v30 setName:v32];

    sub_100688340((uint64_t)v16);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    [v30 setFirstOccurrenceCreationDate:isa];

    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_10008E2DC(v34, (uint64_t)qword_10090D8C0);
    uint64_t v35 = v30;
    id v36 = Logger.logObject.getter();
    int v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, (os_log_type_t)v37))
    {
      int v120 = v37;
      os_log_t v122 = v36;
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v119 = (void *)swift_slowAlloc();
      uint64_t v130 = v119;
      long long v123 = v38;
      *(_DWORD *)uint64_t v38 = 136315650;
      id v39 = [v35 canonicalName];
      uint64_t v121 = v22;
      if (v39)
      {
        uint64_t v40 = v39;
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v43 = v42;
      }
      else
      {
        uint64_t v41 = 0;
        uint64_t v43 = 0;
      }
      uint64_t v65 = v123;
      uint64_t v117 = v123 + 4;
      uint64_t v128 = v41;
      uint64_t v129 = v43;
      uint64_t v118 = (uint64_t *)sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v66 = Optional.descriptionOrNil.getter();
      unint64_t v68 = v67;
      swift_bridgeObjectRelease();
      uint64_t v128 = sub_1000C51B8(v66, v68, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *((_WORD *)v65 + 6) = 2080;
      id v69 = [v35 name];
      if (v69)
      {
        long long v70 = v69;
        uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v73 = v72;
      }
      else
      {
        uint64_t v71 = 0;
        uint64_t v73 = 0;
      }
      id v74 = v123;
      uint64_t v117 = v123 + 14;
      uint64_t v128 = v71;
      uint64_t v129 = v73;
      uint64_t v75 = Optional.descriptionOrNil.getter();
      unint64_t v77 = v76;
      swift_bridgeObjectRelease();
      uint64_t v128 = sub_1000C51B8(v75, v77, (uint64_t *)&v130);
      uint64_t v118 = &v129;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *((_WORD *)v74 + 11) = 2080;
      id v78 = [v35 firstOccurrenceCreationDate];
      if (v78)
      {
        id v79 = v78;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v80 = 0;
      }
      else
      {
        uint64_t v80 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v8, v80, 1, v11);
      unint64_t v81 = v123;
      uint64_t v117 = v123 + 24;
      uint64_t v82 = Optional.descriptionOrNil.getter();
      unint64_t v84 = v83;
      sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909A40);
      uint64_t v128 = sub_1000C51B8(v82, v84, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v85 = v122;
      _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v120, "RDHashtagLabelUpdater.associate(hashtagLabel:to:): updated hashtag label first occurrence {canonicalName: %s, new-name: %s, new-firstOccurrenceCreationDate: %s}", v81, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v31 = v127;
      id v29 = v125;
    }
    else
    {

      uint64_t v31 = v127;
    }
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
  unint64_t v86 = v126;
  Class v87 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v86 addHashtags:v87];

  sub_10062BFF0((uint64_t)v16);
  LOBYTE(v87) = static Date.< infix(_:_:)();
  unint64_t v88 = *(void (**)(char *, uint64_t))(v12 + 8);
  v88(v16, v11);
  if (v87)
  {
    Class v89 = Date._bridgeToObjectiveC()().super.isa;
    [v86 setRecencyDate:v89];

    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v90 = type metadata accessor for Logger();
    sub_10008E2DC(v90, (uint64_t)qword_10090D8C0);
    uint64_t v91 = v124;
    (*(void (**)(uint64_t, uint8_t *, uint64_t))(v12 + 16))(v124, v29, v11);
    id v92 = Logger.logObject.getter();
    uint64_t v93 = v29;
    os_log_type_t v94 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v92, v94))
    {
      uint64_t v95 = swift_slowAlloc();
      unint64_t v127 = v31;
      uint64_t v96 = (uint8_t *)v95;
      uint64_t v128 = swift_slowAlloc();
      *(_DWORD *)uint64_t v96 = 136315138;
      long long v126 = (v96 + 4);
      uint64_t v97 = Date.description.getter();
      uint64_t v130 = (void *)sub_1000C51B8(v97, v98, &v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v88((char *)v91, v11);
      _os_log_impl((void *)&_mh_execute_header, v92, v94, "RDHashtagLabelUpdater.associate(hashtagLabel:to:): updated hashtag label recencyDate {new-recencyDate: %s}", v96, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v99 = v125;
    }
    else
    {

      v88((char *)v91, v11);
      unint64_t v99 = v93;
    }
    v88((char *)v99, v11);
  }
  else
  {
    v88((char *)v29, v11);
  }
}

uint64_t sub_10019A244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  swift_bridgeObjectRetain();
  Swift::Int v7 = sub_10032D9A0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v8 = sub_1003E823C();
  uint64_t v9 = (objc_class *)sub_1001FFC40((uint64_t)v8);
  swift_bridgeObjectRelease();
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_10077A530;
  *(void *)(v10 + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  sub_1001DE058(0, 1, 0);
  if ((v10 & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v11 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v12)
  {
    uint64_t v13 = v11;
    uint64_t v14 = v12;
    swift_release();
    unint64_t v16 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1) {
      sub_1001DE058(v15 > 1, v16 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v16 + 1;
    uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
    v17[4] = v13;
    void v17[5] = v14;
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_1003E8030(v7, a1, v9, (Class)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return v18;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v20._object = (void *)0x80000001007CAF70;
    v20._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v20);
    sub_100094134(&qword_10090DC68);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *sub_10019A68C(void *a1, void *a2)
{
  return sub_10062C2E8(a2, a1);
}

void *sub_10019A93C(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = _swiftEmptyArrayStorage;
  *(void *)&v7[0] = a2;
  sub_100094134(&qword_10090DC48);
  sub_1000967F4((unint64_t *)&qword_10090DC50, &qword_10090DC48);
  uint64_t v2 = BidirectionalCollection<>.slices(by:)();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = (long long *)(v2 + 48);
    do
    {
      v7[0] = *(v4 - 1);
      long long v5 = *v4;
      v4 += 2;
      v7[1] = v5;
      swift_unknownObjectRetain();
      sub_100184560((uint64_t *)v7);
      swift_unknownObjectRelease();
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v8;
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
}

void *sub_10019AA40(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v13 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  long long v5 = sub_10020AAEC(a2);
  swift_bridgeObjectRelease();
  *(void *)&v12[0] = v5;
  sub_100094134(&qword_10090DC48);
  sub_1000967F4((unint64_t *)&qword_10090DC50, &qword_10090DC48);
  uint64_t v6 = BidirectionalCollection<>.slices(by:)();
  swift_release();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = (long long *)(v6 + 48);
    char v9 = a3 & 1;
    do
    {
      v12[0] = *(v8 - 1);
      long long v10 = *v8;
      v8 += 2;
      v12[1] = v10;
      swift_unknownObjectRetain();
      sub_10018F574((uint64_t *)v12, v9);
      swift_unknownObjectRelease();
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease_n();
    return v13;
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
}

void *sub_10019AB8C(uint64_t a1)
{
  uint64_t v7 = _swiftEmptyArrayStorage;
  *(void *)&v6[0] = a1;
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
  uint64_t v1 = BidirectionalCollection<>.slices(by:)();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (long long *)(v1 + 48);
    do
    {
      v6[0] = *(v3 - 1);
      long long v4 = *v3;
      v3 += 2;
      v6[1] = v4;
      swift_unknownObjectRetain();
      sub_10018FEC4((uint64_t *)v6);
      swift_unknownObjectRelease();
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
}

uint64_t sub_10019AC90()
{
  uint64_t v0 = sub_1003E823C();
  sub_100201B10((uint64_t)v0);
  uint64_t v1 = (objc_class *)sub_1001FFC40((uint64_t)&off_1008B5C08);
  swift_bridgeObjectRelease();
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  sub_1001DE058(0, 1, 0);
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v3 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    swift_release();
    unint64_t v8 = _swiftEmptyArrayStorage[2];
    unint64_t v7 = _swiftEmptyArrayStorage[3];
    if (v8 >= v7 >> 1) {
      sub_1001DE058(v7 > 1, v8 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v8 + 1;
    char v9 = &_swiftEmptyArrayStorage[2 * v8];
    void v9[4] = v5;
    v9[5] = v6;
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_1003E5740(3, 2, 2, v1, (Class)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    swift_release();
    return v10;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v12._object = (void *)0x80000001007CAF70;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    sub_100094134(&qword_10090DC68);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *sub_10019B080(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    char v9 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      uint64_t result = (void *)swift_release();
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      unint64_t v7 = v5;
      sub_100197A8C(&v7, &v8);

      ++v4;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return v9;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10019B1C8()
{
  uint64_t v0 = sub_1003E823C();
  sub_100201B10((uint64_t)v0);
  uint64_t v1 = (objc_class *)sub_1001FFC40((uint64_t)&off_1008B5C58);
  swift_bridgeObjectRelease();
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  sub_1001DE058(0, 1, 0);
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v3 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    swift_release();
    unint64_t v8 = _swiftEmptyArrayStorage[2];
    unint64_t v7 = _swiftEmptyArrayStorage[3];
    if (v8 >= v7 >> 1) {
      sub_1001DE058(v7 > 1, v8 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v8 + 1;
    char v9 = &_swiftEmptyArrayStorage[2 * v8];
    void v9[4] = v5;
    v9[5] = v6;
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_1003E5740(1, 2, 2, v1, (Class)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    swift_release();
    return v10;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v12._object = (void *)0x80000001007CAF70;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    sub_100094134(&qword_10090DC68);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_10019B5B8(void *a1, void *a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v5 = __chkstk_darwin(v4 - 8).n128_u64[0];
  unint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [a2 hashtags:v5];
  if (v8
    && ((char v9 = v8,
         sub_1000963CC(0, (unint64_t *)&qword_10090DC20),
         sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20),
         uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
         v9,
         (v10 & 0xC000000000000001) == 0)
      ? (uint64_t v11 = *(void *)(v10 + 16))
      : (uint64_t v11 = __CocoaSet.count.getter()),
        swift_bridgeObjectRelease(),
        v11))
  {
    NSString v12 = [a2 hashtags];
    if (v12)
    {
      uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10018E620(v13);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      if (v15)
      {
        NSString v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v12 = 0;
      }
    }
    [a2 setName:v12];

    id v16 = [a2 hashtags];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10018E89C(v18, (uint64_t)v7);
      swift_bridgeObjectRelease();
      uint64_t v19 = type metadata accessor for Date();
      uint64_t v20 = *(void *)(v19 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v19) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v19);
      }
    }
    else
    {
      uint64_t v22 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v7, 1, 1, v22);
      Class isa = 0;
    }
    [a2 setRecencyDate:isa];
  }
  else
  {
    [a1 deleteObject:a2];
  }
}

uint64_t sub_10019B8E0()
{
  uint64_t KeyPath = swift_getKeyPath();
  sub_10039F51C(KeyPath);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_1002F51CC(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v1 = (void *)sub_1002F52FC(_swiftEmptyArrayStorage);
  sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  id v2 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v3 = [(id)swift_getObjCClassFromMetadata() entity];
  [v2 setEntity:v3];

  [v2 setAffectedStores:0];
  [v2 setPredicate:v1];

  sub_1001FFC40((uint64_t)&off_1008B5CA8);
  swift_arrayDestroy();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 setPropertiesToFetch:isa];

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  specialized Array._endMutation()();
  sub_1001DE058(0, 2, 0);
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v7) {
    goto LABEL_18;
  }
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  swift_release();
  unint64_t v11 = _swiftEmptyArrayStorage[2];
  unint64_t v10 = _swiftEmptyArrayStorage[3];
  if (v11 >= v10 >> 1) {
    sub_1001DE058(v10 > 1, v11 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v11 + 1;
  NSString v12 = &_swiftEmptyArrayStorage[2 * v11];
  void v12[4] = v8;
  v12[5] = v9;
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v13 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v14)
  {
    uint64_t v15 = v13;
    uint64_t v16 = v14;
    swift_release();
    unint64_t v18 = _swiftEmptyArrayStorage[2];
    unint64_t v17 = _swiftEmptyArrayStorage[3];
    if (v18 >= v17 >> 1) {
      sub_1001DE058(v17 > 1, v18 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v18 + 1;
    uint64_t v19 = &_swiftEmptyArrayStorage[2 * v18];
    uint64_t v19[4] = v15;
    void v19[5] = v16;
    swift_bridgeObjectRelease();
    Class v20 = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    [v2 setRelationshipKeyPathsForPrefetching:v20];

    uint64_t v21 = NSManagedObjectContext.fetch<A>(_:)();
    return v21;
  }
  else
  {
LABEL_18:
    _StringGuts.grow(_:)(46);
    v23._object = (void *)0x80000001007CAF70;
    v23._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v23);
    sub_100094134(&qword_10090DC60);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *sub_10019BF14(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v59 - v12;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_10090FDF0);
  *(void *)&double v15 = __chkstk_darwin(v14 - 8).n128_u64[0];
  unint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = [a2 name:v15];
  if (!v18)
  {
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E2DC(v31, (uint64_t)qword_10090D8C0);
    id v32 = a2;
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136446210;
      id v36 = [v32 remObjectID];
      if (v36)
      {
        int v37 = v36;
        id v38 = [v36 description];

        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;
      }
      else
      {
        uint64_t v39 = 7104878;
        unint64_t v41 = 0xE300000000000000;
      }
      uint64_t v62 = sub_1000C51B8(v39, v41, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_type_t v56 = v34;
      unint64_t v57 = "REMCDHashtagLabelRepairer: hashtag[%{public}s] without name";
      goto LABEL_26;
    }
LABEL_19:

    return 0;
  }
  uint64_t v19 = v18;
  unint64_t v60 = (void *)a1;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  v61[0] = v20;
  v61[1] = v22;
  static Locale.current.getter();
  uint64_t v23 = type metadata accessor for Locale();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v17, 0, 1, v23);
  sub_1000E4FD8();
  uint64_t v24 = StringProtocol.foldedStringForWriting(locale:)();
  uint64_t v26 = v25;
  sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_10090FDF0);
  swift_bridgeObjectRelease();
  id v27 = [a2 account];
  if (!v27)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v28 = v27;
  id v29 = [v27 identifier];

  if (v29)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, v30, 1, v4);
  sub_100096408((uint64_t)v10, (uint64_t)v13, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
  {
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
LABEL_14:
    if (qword_100906FB0 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10008E2DC(v42, (uint64_t)qword_10090D8C0);
    id v32 = a2;
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v43))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136446210;
      id v44 = [v32 remObjectID];
      if (v44)
      {
        int v45 = v44;
        id v46 = [v44 description];

        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v49 = v48;
      }
      else
      {
        uint64_t v47 = 7104878;
        unint64_t v49 = 0xE300000000000000;
      }
      uint64_t v62 = sub_1000C51B8(v47, v49, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_type_t v56 = v43;
      unint64_t v57 = "REMCDHashtagLabelRepairer: hashtag[%{public}s] without accountIdentifier";
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v33, v56, v57, v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v13, v4);
  sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
  uint64_t v50 = UUID.uuidString.getter();
  uint64_t v52 = v51;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v53 = v60;
  unint64_t v54 = sub_10019A244((uint64_t)v60, v24, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v55 = sub_1001991AC(v54, v50, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!v55) {
    return sub_10019A68C(v53, a2);
  }
  return v55;
}

uint64_t sub_10019C5F8()
{
  sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
  id v0 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v1 = [(id)swift_getObjCClassFromMetadata() entity];
  [v0 setEntity:v1];

  [v0 setAffectedStores:0];
  [v0 setPredicate:0];
  id v2 = sub_1003E823C();
  sub_1001FFC40((uint64_t)v2);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v0 setPropertiesToFetch:isa];

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  sub_1001DE058(0, 1, 0);
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v5 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v6)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    swift_release();
    unint64_t v10 = _swiftEmptyArrayStorage[2];
    unint64_t v9 = _swiftEmptyArrayStorage[3];
    if (v10 >= v9 >> 1) {
      sub_1001DE058(v9 > 1, v10 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v10 + 1;
    uint64_t v11 = &_swiftEmptyArrayStorage[2 * v10];
    void v11[4] = v7;
    v11[5] = v8;
    swift_bridgeObjectRelease();
    Class v12 = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    [v0 setRelationshipKeyPathsForPrefetching:v12];

    uint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
    return v13;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v15._object = (void *)0x80000001007CAF70;
    v15._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v15);
    sub_100094134(&qword_10090DC68);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10019CAB0()
{
  id v0 = (void *)sub_1002E0D64((void *)1, 3);
  sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  id v1 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v2 = [(id)swift_getObjCClassFromMetadata() entity];
  [v1 setEntity:v2];

  [v1 setAffectedStores:0];
  [v1 setPredicate:v0];

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)&long long v27 = inited;
  specialized Array._endMutation()();
  id v29 = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 1, 0);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v5 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v6)
  {
    *(void *)&long long v27 = 0;
    *((void *)&v27 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v25._object = (void *)0x80000001007CAF70;
    v25._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v25);
LABEL_16:
    sub_100094134(&qword_10090DC60);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  uint64_t v28 = &type metadata for String;
  swift_release();
  *(void *)&long long v27 = v7;
  *((void *)&v27 + 1) = v8;
  unint64_t v10 = _swiftEmptyArrayStorage[2];
  unint64_t v9 = _swiftEmptyArrayStorage[3];
  if (v10 >= v9 >> 1)
  {
    sub_1001DE1C4(v9 > 1, v10 + 1, 1);
    uint64_t v4 = v29;
  }
  v4[2] = v10 + 1;
  sub_10009A1A0(&v27, &v4[4 * v10 + 4]);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v1 setPropertiesToFetch:isa];

  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_10077A530;
  *(void *)(v12 + 32) = swift_getKeyPath();
  *(void *)&long long v27 = v12;
  specialized Array._endMutation()();
  uint64_t v13 = v27;
  id v29 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, 1, 0);
  uint64_t v14 = v29;
  if ((v13 & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v15 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v16)
  {
    *(void *)&long long v27 = 0;
    *((void *)&v27 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v26._object = (void *)0x80000001007CAF70;
    v26._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v26);
    goto LABEL_16;
  }
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  swift_release();
  unint64_t v20 = v14[2];
  unint64_t v19 = v14[3];
  if (v20 >= v19 >> 1)
  {
    sub_1001DE058(v19 > 1, v20 + 1, 1);
    uint64_t v14 = v29;
  }
  void v14[2] = v20 + 1;
  uint64_t v21 = &v14[2 * v20];
  v21[4] = v17;
  v21[5] = v18;
  swift_bridgeObjectRelease();
  Class v22 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v1 setRelationshipKeyPathsForPrefetching:v22];

  uint64_t v23 = NSManagedObjectContext.fetch<A>(_:)();
  return v23;
}

uint64_t sub_10019D0A4()
{
  id v0 = [self fetchRequest];
  [v0 setPropertiesToFetch:0];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  sub_1001DE058(0, 1, 0);
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v2 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v3)
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    swift_release();
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    unint64_t v6 = _swiftEmptyArrayStorage[3];
    if (v7 >= v6 >> 1) {
      sub_1001DE058(v6 > 1, v7 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v7 + 1;
    uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
    void v8[4] = v4;
    v8[5] = v5;
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    [v0 setRelationshipKeyPathsForPrefetching:isa];

    sub_1000963CC(0, &qword_100914BE0);
    uint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();

    return v10;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v12._object = (void *)0x80000001007CAF70;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    sub_100094134((uint64_t *)&unk_10090DC30);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

const char *sub_10019D4C0()
{
  return "reminder";
}

id sub_10019D4CC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 reminder];
  *a2 = result;
  return result;
}

id sub_10019D508(void *a1, id *a2)
{
  return [*a2 setReminder:*a1];
}

const char *sub_10019D524()
{
  return "sharedToMeReminderCKIdentifier";
}

const char *sub_10019D540()
{
  return "hashtags";
}

const char *sub_10019D554()
{
  return "hashtagLabel";
}

void sub_10019D570(void *a1)
{
  sub_100186BC0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(uint8_t **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10090DE08);
}

uint64_t sub_10019D5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019D61C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019D680(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10019D6DC(uint64_t a1, uint64_t a2)
{
  return sub_1003EA5F8(a2, *(void *)(v2 + 16));
}

uint64_t sub_10019D6E8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001906D8(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10019D730(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_10019D780()
{
  return "name";
}

uint64_t sub_10019D794@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001906D8(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10019D7DC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10019D83C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001906D8(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10019D884(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10019D8D4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10019D90C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_100404938(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10019D914()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10019D94C()
{
  return sub_100198AA8();
}

uint64_t sub_10019D954()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10019D994(uint64_t a1, uint64_t *a2)
{
  return sub_100198A04(a1, a2, *(void (**)(uint64_t, uint64_t *))(v2 + 16));
}

uint64_t sub_10019D9A0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10019D9E0(uint64_t a1, uint64_t *a2)
{
  return sub_1001983A4(a1, *a2, a2[1], *(void *)(v2 + 16), *(void (**)(uint64_t, uint64_t *))(v2 + 24));
}

uint64_t sub_10019DA1C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10019DA64()
{
  sub_100183EC0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10019DA70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10019DA80()
{
  return swift_release();
}

uint64_t sub_10019DA88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10019DAD0()
{
  sub_100442E64(*(NSObject **)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10019DAD8()
{
  sub_1004425EC(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t *sub_10019DAE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *unint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10019DBB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10019DC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10019DCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10019DD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10019DDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10019DE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019DE70);
}

uint64_t sub_10019DE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10019DF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019DF48);
}

uint64_t sub_10019DF48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10019E008()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10019E0A8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090DE40);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090DE40);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_10019E170(char a1)
{
  unint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x72656767697274;
      break;
    case 2:
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x4449556D72616C61;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10019E214(unsigned __int8 *a1, char *a2)
{
  return sub_1002F3FF0(*a1, *a2);
}

Swift::Int sub_10019E220()
{
  return sub_100594F10();
}

uint64_t sub_10019E228()
{
  return sub_1002F4EB8();
}

Swift::Int sub_10019E230()
{
  return sub_1002F04F4();
}

unint64_t sub_10019E238@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10019F800(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10019E268@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10019E170(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10019E294(void *a1@<X8>)
{
  *a1 = &off_1008B5CD8;
}

unint64_t sub_10019E2A4@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10019F800(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10019E2CC()
{
  return sub_10019E170(*v0);
}

uint64_t sub_10019E2D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002F24AC(*a1, *a2);
}

Swift::Int sub_10019E2E0()
{
  return Hasher._finalize()();
}

uint64_t sub_10019E36C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10019E3E4()
{
  return Hasher._finalize()();
}

uint64_t sub_10019E46C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4E40, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10019E4CC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x49746E756F636361;
  if (*v1) {
    uint64_t v2 = 0x7265646E696D6572;
  }
  unint64_t v3 = 0xE900000000000044;
  if (*v1) {
    unint64_t v3 = 0xEA00000000004449;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_10019E514(void *a1@<X8>)
{
  *a1 = &off_1008B5D00;
}

uint64_t sub_10019E524@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4E40, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_10019E588()
{
  if (*v0) {
    return 0x7265646E696D6572;
  }
  else {
    return 0x49746E756F636361;
  }
}

id sub_10019E5CC(void *a1)
{
  uint64_t v4 = type metadata accessor for Date();
  id v5 = *(id *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v9 = __chkstk_darwin(v8 - 8).n128_u64[0];
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52[0] = 0;
  id v12 = [a1 remObjectIDWithError:v52, v9];
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = v52[0];
    id v15 = [a1 trigger];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v48 = (uint64_t)v5;
      id v49 = v15;
      id v5 = (id)sub_1000963CC(0, (unint64_t *)&unk_100910DD0);
      id v17 = v16;
      sub_100094134(&qword_10090E048);
      if (swift_dynamicCast())
      {
        id v47 = v17;
        sub_1000967D4(v50, (uint64_t)v52);
        id v5 = v53;
        uint64_t v18 = v54;
        sub_1000C0DE0(v52, (uint64_t)v53);
        uint64_t v19 = (*(uint64_t (**)(void, void *, id, uint64_t))(v18 + 8))(*(void *)(v1 + 16), v13, v5, v18);
        if (v2)
        {

          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v52);
        }
        else
        {
          unint64_t v41 = (void *)v19;
          id v5 = [objc_allocWithZone((Class)REMAlarm) initWithTrigger:v19 objectID:v13];
          Class isa = (Class)[a1 acknowledgedDate];
          if (isa)
          {
            id v46 = v41;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v43 = v48;
            (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v11, v7, v4);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v11, 0, 1, v4);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v11, 1, v4) == 1)
            {
              Class isa = 0;
            }
            else
            {
              Class isa = Date._bridgeToObjectiveC()().super.isa;
              (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v4);
            }
            unint64_t v41 = v46;
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v11, 1, 1, v4);
          }
          [v5 setAcknowledgedDate:isa];

          id v44 = [a1 alarmUID];
          [v5 setAlarmUID:v44];

          id v45 = [a1 originalAlarmUID];
          [v5 setOriginalAlarmUID:v45];

          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v52);
        }
      }
      else
      {
        uint64_t v51 = 0;
        memset(v50, 0, sizeof(v50));
        sub_10019F938((uint64_t)v50);
        long long v27 = self;
        v52[0] = 0;
        v52[1] = (id)0xE000000000000000;
        _StringGuts.grow(_:)(56);
        v28._object = (void *)0x80000001007CD290;
        v28._countAndFlagsBits = 0xD000000000000035;
        String.append(_:)(v28);
        id v29 = [v17 description];
        uint64_t v30 = v17;
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v33 = v32;

        v34._countAndFlagsBits = v31;
        v34._object = v33;
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35._countAndFlagsBits = 125;
        v35._object = (void *)0xE100000000000000;
        String.append(_:)(v35);
        NSString v36 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v27 internalErrorWithDebugDescription:v36];

        swift_willThrow();
      }
    }
    else
    {
      if (qword_100906FD8 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_10008E2DC(v21, (uint64_t)qword_10090DE40);
      Class v22 = v13;
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        Swift::String v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)Swift::String v25 = 138412290;
        id v5 = v25 + 4;
        v52[0] = v22;
        Swift::String v26 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)uint64_t v48 = v13;

        _os_log_impl((void *)&_mh_execute_header, v23, v24, "REMAlarmCDIngestor: cdAlarm.trigger is nil {cdAlarm.remObjectID: %@}", v25, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v23 = v22;
      }

      int v37 = self;
      sub_1000963CC(0, (unint64_t *)&unk_100909AC0);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v39 = String._bridgeToObjectiveC()();
      [v37 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v39];

      swift_willThrow();
    }
  }
  else
  {
    id v20 = v52[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

void sub_10019ECDC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v95 = a4;
  unint64_t v99 = a2;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v88 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for UUID();
  __chkstk_darwin(v98);
  uint64_t v97 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a3 + 16);
  if (v15)
  {
    unint64_t v86 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    Class v87 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v84 = v4;
    os_log_t v85 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v93 = (void (**)(char *, uint64_t))(v13 + 8);
    os_log_type_t v94 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_bridgeObjectRetain();
    uint64_t v16 = 0;
    long long v92 = xmmword_10077A530;
    uint64_t v90 = v7;
    uint64_t v91 = a1;
    id v17 = v99;
    Class v89 = v12;
    while (2)
    {
      uint64_t v29 = a3 + v16++;
      switch(*(unsigned char *)(v29 + 32))
      {
        case 1:
          id v30 = [a1 trigger];
          self;
          uint64_t v31 = swift_dynamicCastObjCClass();
          if (v31)
          {
            uint64_t v32 = v31;
            sub_100094134((uint64_t *)&unk_10090AF20);
            uint64_t v33 = swift_allocObject();
            *(_OWORD *)(v33 + 16) = v92;
            *(void *)(v33 + 32) = v32;
            unint64_t v101 = v33;
            specialized Array._endMutation()();
            unint64_t v34 = v101;
            Swift::String v35 = *(void **)(v96 + 16);
            unint64_t v101 = 0;
            id v36 = v30;
            id v37 = v35;
            id v38 = [v17 remObjectIDWithError:&v101];
            NSString v39 = (void *)v101;
            if (v38)
            {
              id v40 = v38;
              type metadata accessor for REMAlarmTimeIntervalTriggerCDIngestor();
              uint64_t v41 = swift_allocObject();
              *(void *)(v41 + 16) = v37;
              *(void *)(v41 + 24) = v40;
              id v42 = v39;
              sub_10069C78C(v34, v41);
LABEL_27:
              id v17 = v99;
              swift_release();

              swift_bridgeObjectRelease();
              uint64_t v7 = v90;
              a1 = v91;
              id v12 = v89;
              goto LABEL_5;
            }
            goto LABEL_30;
          }
          self;
          uint64_t v47 = swift_dynamicCastObjCClass();
          if (v47)
          {
            uint64_t v48 = v47;
            sub_100094134((uint64_t *)&unk_10090AF20);
            uint64_t v49 = swift_allocObject();
            *(_OWORD *)(v49 + 16) = v92;
            *(void *)(v49 + 32) = v48;
            unint64_t v101 = v49;
            specialized Array._endMutation()();
            unint64_t v50 = v101;
            uint64_t v51 = *(void **)(v96 + 16);
            unint64_t v101 = 0;
            id v36 = v30;
            id v37 = v51;
            id v52 = [v17 remObjectIDWithError:&v101];
            NSString v39 = (void *)v101;
            if (v52)
            {
              id v53 = v52;
              type metadata accessor for REMAlarmDateTriggerCDIngestor();
              uint64_t v54 = swift_allocObject();
              *(void *)(v54 + 16) = v37;
              *(void *)(v54 + 24) = v53;
              id v55 = v39;
              sub_10069CFBC(v50, v54);
              goto LABEL_27;
            }
            goto LABEL_30;
          }
          self;
          uint64_t v56 = swift_dynamicCastObjCClass();
          if (v56)
          {
            uint64_t v57 = v56;
            sub_100094134((uint64_t *)&unk_10090AF20);
            uint64_t v58 = swift_allocObject();
            *(_OWORD *)(v58 + 16) = v92;
            *(void *)(v58 + 32) = v57;
            unint64_t v101 = v58;
            specialized Array._endMutation()();
            unint64_t v59 = v101;
            unint64_t v60 = *(void **)(v96 + 16);
            unint64_t v101 = 0;
            id v36 = v30;
            id v37 = v60;
            id v61 = [v17 remObjectIDWithError:&v101];
            NSString v39 = (void *)v101;
            if (v61)
            {
              id v62 = v61;
              type metadata accessor for REMAlarmLocationTriggerCDIngestor();
              uint64_t v63 = swift_allocObject();
              *(void *)(v63 + 16) = v37;
              *(void *)(v63 + 24) = v62;
              id v64 = v39;
              sub_10069D7EC(v59, v63);
              goto LABEL_27;
            }
            goto LABEL_30;
          }
          self;
          uint64_t v65 = swift_dynamicCastObjCClass();
          if (v65)
          {
            uint64_t v66 = v65;
            sub_100094134((uint64_t *)&unk_10090AF20);
            uint64_t v67 = swift_allocObject();
            *(_OWORD *)(v67 + 16) = v92;
            *(void *)(v67 + 32) = v66;
            unint64_t v101 = v67;
            specialized Array._endMutation()();
            unint64_t v68 = v101;
            id v69 = *(void **)(v96 + 16);
            unint64_t v101 = 0;
            id v36 = v30;
            id v37 = v69;
            id v70 = [v17 remObjectIDWithError:&v101];
            NSString v39 = (void *)v101;
            if (v70)
            {
              id v71 = v70;
              type metadata accessor for REMAlarmVehicleTriggerCDIngestor();
              uint64_t v72 = swift_allocObject();
              *(void *)(v72 + 16) = v37;
              *(void *)(v72 + 24) = v71;
              id v73 = v39;
              sub_10069E030(v68, v72);
              goto LABEL_27;
            }
LABEL_30:
            id v74 = v39;
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            _convertNSErrorToError(_:)();

            swift_willThrow();
            return;
          }
          swift_bridgeObjectRelease();

          uint64_t v75 = self;
          unint64_t v101 = 0;
          unint64_t v102 = 0xE000000000000000;
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          unint64_t v101 = 0xD000000000000021;
          unint64_t v102 = 0x80000001007CD260;
          id v76 = [a1 trigger];
          id v77 = [v76 description];
          uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v80 = v79;

          v81._countAndFlagsBits = v78;
          v81._object = v80;
          String.append(_:)(v81);

          swift_bridgeObjectRelease();
          v82._countAndFlagsBits = 125;
          v82._object = (void *)0xE100000000000000;
          String.append(_:)(v82);
          NSString v83 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v75 internalErrorWithDebugDescription:v83];

          swift_willThrow();
          break;
        case 2:
          id v43 = [a1 acknowledgedDate];
          if (v43)
          {
            id v44 = v43;
            id v45 = v88;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            (*v87)(v12, v45, v7);
            (*v94)(v12, 0, 1, v7);
            if ((*v86)(v12, 1, v7) == 1)
            {
              Class isa = 0;
            }
            else
            {
              Class isa = Date._bridgeToObjectiveC()().super.isa;
              (*v85)(v12, v7);
            }
          }
          else
          {
            (*v94)(v12, 1, 1, v7);
            Class isa = 0;
          }
          [v17 setAcknowledgedDate:isa];

          goto LABEL_5;
        case 3:
          v28.super.Class isa = (Class)[a1 alarmUID];
          [v17 setAlarmUID:v28.super.isa];
          goto LABEL_4;
        case 4:
          v28.super.Class isa = (Class)[a1 originalAlarmUID];
          [v17 setOriginalAlarmUID:v28.super.isa];
          goto LABEL_4;
        default:
          id v18 = [a1 objectID];
          id v19 = [v18 uuid];
          uint64_t v100 = v16;
          id v20 = v12;
          uint64_t v21 = a1;
          uint64_t v22 = v7;
          uint64_t v23 = v17;
          uint64_t v24 = v15;
          uint64_t v25 = a3;
          id v26 = v19;

          long long v27 = v97;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          a3 = v25;
          uint64_t v15 = v24;
          id v17 = v23;
          uint64_t v7 = v22;
          a1 = v21;
          id v12 = v20;
          uint64_t v16 = v100;
          v28.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
          (*v93)(v27, v98);
          [v17 setIdentifier:v28.super.isa];
LABEL_4:

LABEL_5:
          if (v15 != v16) {
            continue;
          }
          swift_bridgeObjectRelease();
          return;
      }
      break;
    }
  }
}

id sub_10019F634(void *a1, void *a2)
{
  uint64_t v4 = *v2;
  id v5 = a1;
  id v6 = a2;
  id v7 = sub_10015855C(v4);

  return v7;
}

id sub_10019F698(void *a1, void *a2)
{
  uint64_t v4 = *v2;
  id v5 = a1;
  id v6 = a2;
  id v7 = sub_100157B30(v4);

  return v7;
}

id sub_10019F6FC(void *a1, void *a2)
{
  uint64_t v4 = *v2;
  id v5 = a1;
  id v6 = a2;
  id v7 = sub_1001581BC(v4);

  return v7;
}

id sub_10019F760(void *a1, void *a2)
{
  uint64_t v4 = *v2;
  id v5 = a1;
  id v6 = a2;
  id v7 = sub_1001580B4(v4);

  return v7;
}

uint64_t type metadata accessor for REMAlarmCDIngestor()
{
  return self;
}

_UNKNOWN **sub_10019F7E8()
{
  return &off_1008BCB88;
}

_UNKNOWN **sub_10019F7F4()
{
  return &off_1008BCB58;
}

unint64_t sub_10019F800(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B46A8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

void sub_10019F84C(void *a1, char a2, uint64_t a3)
{
  if (a2)
  {
    sub_100473478(1, *(void **)(v3 + 24), a3);
    if (v4) {
      return;
    }
    uint64_t v9 = v11;
    [a1 setReminder:v11];
    goto LABEL_7;
  }
  sub_100473448(0, *(void **)(v3 + 16), a3);
  if (!v4)
  {
    id v7 = v6;
    [a1 setAccount:v6];

    id v8 = [a1 trigger];
    if (v8)
    {
      uint64_t v9 = v8;
      id v10 = [a1 account];
      [v9 setAccount:v10];

LABEL_7:
    }
  }
}

uint64_t sub_10019F938(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_10090E050);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for REMAlarmCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10019FA64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMAlarmCDIngestor.RelationshipKey()
{
  return &type metadata for REMAlarmCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMCDTemplateOperationQueueItem.OperationType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for REMAlarmCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10019FBF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMAlarmCDIngestor.ValueKey()
{
  return &type metadata for REMAlarmCDIngestor.ValueKey;
}

uint64_t sub_10019FC30()
{
  return sub_1000B2138(&qword_10090E058, &qword_10090E060);
}

unint64_t sub_10019FC5C()
{
  unint64_t result = qword_10090E068;
  if (!qword_10090E068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090E068);
  }
  return result;
}

uint64_t sub_10019FCB0()
{
  return sub_1000B2138(&qword_10090E070, &qword_10090E078);
}

unint64_t sub_10019FCDC()
{
  unint64_t result = qword_10090E080;
  if (!qword_10090E080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090E080);
  }
  return result;
}

void sub_10019FD30(uint64_t a1, unint64_t a2, void (*a3)(void))
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    unint64_t v22 = 0;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v5 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v3 = ~v6;
    unint64_t v22 = a2 + 64;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v4 = v8 & *(void *)(a2 + 64);
    unint64_t v5 = a2;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  int64_t v21 = (unint64_t)(v3 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_10;
  }
LABEL_30:
  if (!__CocoaDictionary.Iterator.next()()) {
    goto LABEL_37;
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v18 = v23;
  swift_unknownObjectRelease();
  a3(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v17 = v23;
  swift_unknownObjectRelease();
  uint64_t v12 = v9;
  uint64_t v10 = v4;
  if (!v23) {
    goto LABEL_37;
  }
  while (1)
  {
    if (v17[3])
    {
      swift_release();

      uint64_t v9 = v12;
      unint64_t v4 = v10;
      if ((v5 & 0x8000000000000000) != 0) {
        goto LABEL_30;
      }
    }
    else
    {
      id v19 = v18;
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      swift_release_n();
      uint64_t v9 = v12;
      unint64_t v4 = v10;
      if ((v5 & 0x8000000000000000) != 0) {
        goto LABEL_30;
      }
    }
LABEL_10:
    if (!v4) {
      break;
    }
    uint64_t v10 = (v4 - 1) & v4;
    unint64_t v11 = __clz(__rbit64(v4)) | (v9 << 6);
    uint64_t v12 = v9;
LABEL_28:
    uint64_t v16 = 8 * v11;
    id v17 = *(void **)(*(void *)(v5 + 56) + v16);
    id v18 = *(id *)(*(void *)(v5 + 48) + v16);
    swift_retain();
    if (!v18) {
      goto LABEL_37;
    }
  }
  int64_t v13 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    return;
  }
  if (v13 >= v21) {
    goto LABEL_37;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v13);
  uint64_t v12 = v9 + 1;
  if (v14) {
    goto LABEL_27;
  }
  uint64_t v12 = v9 + 2;
  if (v9 + 2 >= v21) {
    goto LABEL_37;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v12);
  if (v14) {
    goto LABEL_27;
  }
  uint64_t v12 = v9 + 3;
  if (v9 + 3 >= v21) {
    goto LABEL_37;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v12);
  if (v14) {
    goto LABEL_27;
  }
  uint64_t v12 = v9 + 4;
  if (v9 + 4 >= v21) {
    goto LABEL_37;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v12);
  if (v14) {
    goto LABEL_27;
  }
  uint64_t v12 = v9 + 5;
  if (v9 + 5 >= v21) {
    goto LABEL_37;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v12);
  if (v14)
  {
LABEL_27:
    uint64_t v10 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    goto LABEL_28;
  }
  uint64_t v15 = v9 + 6;
  while (v21 != v15)
  {
    unint64_t v14 = *(void *)(v22 + 8 * v15++);
    if (v14)
    {
      uint64_t v12 = v15 - 1;
      goto LABEL_27;
    }
  }
LABEL_37:
  sub_1000C1AF8();
}

uint64_t sub_1001A00B4(Swift::Int a1, unint64_t a2, uint64_t isUniquelyReferenced_nonNull_native)
{
  unint64_t v4 = a2;
  if (a2 >> 62)
  {
LABEL_53:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_54:
    swift_bridgeObjectRelease();
    return a1;
  }
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_54;
  }
LABEL_3:
  unint64_t v50 = v4 & 0xC000000000000001;
  uint64_t v7 = 4;
  uint64_t v48 = v6;
  unint64_t v46 = v4;
  uint64_t v47 = isUniquelyReferenced_nonNull_native;
  while (1)
  {
    if (v50) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v4 + 8 * v7);
    }
    id v9 = v8;
    uint64_t v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    uint64_t v11 = *(void *)isUniquelyReferenced_nonNull_native;
    if ((*(void *)isUniquelyReferenced_nonNull_native & 0xC000000000000001) != 0)
    {
      id v12 = v8;
      if (!__CocoaDictionary.lookup(_:)()) {
        goto LABEL_5;
      }
      sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v13 = v51;
      swift_unknownObjectRelease();

      if (!v51) {
        goto LABEL_6;
      }
    }
    else
    {
      if (!*(void *)(v11 + 16)) {
        goto LABEL_6;
      }
      unint64_t v14 = sub_100306FE8((uint64_t)v8);
      if ((v15 & 1) == 0) {
        goto LABEL_5;
      }
      id v13 = *(id *)(*(void *)(v11 + 56) + 8 * v14);

      if (!v13) {
        goto LABEL_6;
      }
    }
    id v9 = v9;
    id v16 = v13;
    uint64_t v17 = sub_10067E48C(v16);
    unint64_t v18 = a1 & 0xC000000000000001;
    uint64_t v49 = v16;
    if (!v17) {
      break;
    }
    uint64_t v19 = v17;
    if (v18)
    {
      if (a1 >= 0) {
        a1 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v20 = __CocoaDictionary.count.getter();
      if (__OFADD__(v20, 1)) {
        goto LABEL_51;
      }
      a1 = sub_1001A7EEC(a1, v20 + 1, &qword_10090E158, (void (*)(void))type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_10030DC10);
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v51 = (void *)a1;
    unint64_t v22 = sub_100306FE8((uint64_t)v9);
    uint64_t v23 = *(void *)(a1 + 16);
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      goto LABEL_50;
    }
    unint64_t v4 = v21;
    if (*(void *)(a1 + 24) >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100318554();
      }
    }
    else
    {
      sub_10030DC10(v25, isUniquelyReferenced_nonNull_native);
      unint64_t v26 = sub_100306FE8((uint64_t)v9);
      if ((v4 & 1) != (v27 & 1)) {
        goto LABEL_56;
      }
      unint64_t v22 = v26;
    }
    char isUniquelyReferenced_nonNull_native = v47;
    if (v4)
    {
      uint64_t v36 = *(void *)(a1 + 56);
      swift_release();
      *(void *)(v36 + 8 * v22) = v19;
    }
    else
    {
      *(void *)(a1 + 8 * (v22 >> 6) + 64) |= 1 << v22;
      uint64_t v37 = 8 * v22;
      *(void *)(*(void *)(a1 + 48) + v37) = v9;
      *(void *)(*(void *)(a1 + 56) + v37) = v19;
      uint64_t v38 = *(void *)(a1 + 16);
      BOOL v39 = __OFADD__(v38, 1);
      uint64_t v40 = v38 + 1;
      if (v39) {
        goto LABEL_52;
      }
      *(void *)(a1 + 16) = v40;
      id v41 = v9;
    }

    swift_bridgeObjectRelease();
    unint64_t v4 = v46;
    uint64_t v6 = v48;
LABEL_7:
    ++v7;
    if (v10 == v6) {
      goto LABEL_54;
    }
  }
  if (!v18)
  {
    swift_bridgeObjectRetain();
    unint64_t v42 = sub_100306FE8((uint64_t)v9);
    char v44 = v43;
    swift_bridgeObjectRelease();
    uint64_t v6 = v48;
    if (v44)
    {
      uint64_t v51 = (void *)a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100318554();
      }

      sub_1002C2188(v42);
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {

LABEL_5:
    }
LABEL_6:

    goto LABEL_7;
  }
  if (a1 < 0) {
    uint64_t v28 = a1;
  }
  else {
    uint64_t v28 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  id v29 = v9;
  swift_bridgeObjectRetain();
  uint64_t v30 = __CocoaDictionary.lookup(_:)();

  uint64_t v6 = v48;
  if (!v30)
  {

    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  swift_unknownObjectRelease();
  uint64_t v31 = __CocoaDictionary.count.getter();
  Swift::Int v32 = sub_1001A7EEC(v28, v31, &qword_10090E158, (void (*)(void))type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_10030DC10);
  swift_retain();
  unint64_t v33 = sub_100306FE8((uint64_t)v29);
  char v35 = v34;
  swift_release();
  if (v35)
  {

    sub_1002C2188(v33);
    swift_release();

    swift_bridgeObjectRelease();
    a1 = v32;
    char isUniquelyReferenced_nonNull_native = v47;
    goto LABEL_7;
  }
  __break(1u);
LABEL_56:
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}